(*
  Author: Elias Assaf
  To use simply call "utop tests.ml" or "ocaml tests.ml" from the command line.
  or use #use "tests.ml";; from inside the interpeter.   
*)

#use "/home/compi231/compi/repo/compi/assignment1/pc.ml"
#use "/home/compi231/compi/repo/compi/assignment1/reader.ml"
open PC;;
open Reader;;
open Printf;;


printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 5; found = ScmChar 'A'}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#\\x41" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 5; found = ScmChar ' '}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#\\x20" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 5; found = ScmChar 'a'}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#\\x61" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 5; found = ScmChar '+'}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#\\x2B" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 5; found = ScmChar '\n'}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#\\NEWliNe" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 5; found = ScmChar '+'}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#\\x2b" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 4; found = ScmNumber ( ScmRational (1234 , 1)
)}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "1234" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 8; found = ScmNumber ( ScmRational (1234 , 1)
)}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " 00001234 " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 10; found = ScmNumber ( ScmReal 1234.) }).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " 00001234e0" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 3; found = ScmNumber ( ScmRational (2, 3))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "2/3" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 3; found = ScmSymbol "2/0"}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "2/0" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 3; found = ScmNumber ( ScmRational (1, 3))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "2/6" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 5; found = ScmNumber ( ScmReal 1.234) }).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " 1.234 " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 7; found = ScmNumber ( ScmReal 12.34) }).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " 1.234e1" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 8; found = ScmNumber ( ScmReal 12.34) }).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " 1.234e+1" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 11; found = ScmNumber ( ScmReal 12.34) }).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " 1.234*10^+1 " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 10; found = ScmNumber ( ScmReal 12.34) }).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " 1.234*10^1 " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 11;
found = ScmNumber ( ScmReal 0.12340000000000001) }).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " 1.234*10^-1 " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 9; found = ScmNumber ( ScmReal 1.234e-11)}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " .1234e-10" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 13; found = ScmNumber ( ScmReal 1.234e-11)}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " .1234*10**-10 " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 12; found = ScmNumber ( ScmReal 1.234e-11)}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " .1234*10^-10 " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 13; found = ScmNumber ( ScmReal ( -1.234e-11)
)}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " -.1234*10^-10" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 3; found = ScmVector []}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#()" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 7;
found = ScmPair ( ScmNumber ( ScmRational (1, 1)), ScmNumber ( ScmRational (2,1)))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "(1 . 2)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 5;
found = ScmPair ( ScmNumber ( ScmReal 1.2) , ScmNil )}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " (1.2) " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 6; found = ScmVector [ ScmNumber ( ScmReal
1.2) ]}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " #(1.2) " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 6;
found = ScmVector [ ScmNumber ( ScmRational (1, 1)); ScmNumber ( ScmRational (2,1))]}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#(1 2)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 8;found = ScmVector [ ScmSymbol "a"; ScmSymbol "b"; ScmSymbol "c"]}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "#(a b c)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 7;
found = ScmPair( ScmSymbol "a", ScmPair ( ScmSymbol "b", ScmPair ( ScmSymbol "c",ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "(a b c)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 9;
found = ScmPair ( ScmSymbol "a", ScmPair ( ScmSymbol "b", ScmSymbol "c"))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "(a b . c)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 19;
found = ScmPair( ScmPair ( ScmSymbol "a", ScmBoolean true), ScmPair ( ScmPair ( ScmSymbol "b", ScmBoolean false ), ScmNil ))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "((a . #t) (b . #f))" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 12; found = ScmVector []}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " #( ) " 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 12;
found = ScmPair ( ScmSymbol "define", ScmPair ( ScmSymbol "a", ScmPair ( ScmNumber ( ScmRational (3, 1)),ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "( define a 3)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 12;
found = ScmPair ( ScmSymbol "format", ScmPair( ScmString "~a",ScmPair( ScmPair( ScmSymbol "+",ScmPair( ScmNumber ( ScmRational (2, 1)),ScmPair ( ScmNumber ( ScmRational (3, 1)), ScmNil ))),ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "\"~{(+ 2 3) }\"" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 19;
found = ScmPair( ScmSymbol "format",ScmPair( ScmString "~a",ScmPair( ScmPair( ScmSymbol "+",ScmPair( ScmNumber ( ScmRational (2, 1)),ScmPair ( ScmNumber ( ScmRational (3, 1)), ScmNil ))),ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "\"~{ (+ 2 3) }\"" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 9;found = ScmPair( ScmSymbol "quasiquote",ScmPair( ScmPair( ScmPair ( ScmSymbol "unquote", ScmPair ( ScmSymbol "a", ScmNil )),ScmPair( ScmPair( ScmSymbol "unquote-splicing", ScmPair ( ScmSymbol "b",ScmNil )),ScmNil )),ScmNil ))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " `(,a ,@b)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 2;
found = ScmPair ( ScmSymbol "quote", ScmPair ( ScmSymbol "a", ScmNil ))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "'a" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 3;
found = ScmPair( ScmSymbol "quote",ScmPair( ScmPair ( ScmSymbol "quote", ScmPair ( ScmSymbol "a", ScmNil )),ScmNil ))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "''a" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 4;
found = ScmPair( ScmSymbol "quote",ScmPair( ScmPair( ScmSymbol "quote",ScmPair( ScmPair ( ScmSymbol "quote", ScmPair ( ScmSymbol "a", ScmNil )),ScmNil )),ScmNil ))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " '''a" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 4;
found = ScmPair( ScmSymbol "quasiquote",ScmPair( ScmPair( ScmSymbol "quasiquote",ScmPair( ScmPair ( ScmSymbol "quasiquote", ScmPair ( ScmSymbol "a",ScmNil )),ScmNil )),ScmNil ))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr " ```a" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 3;
found = ScmPair ( ScmSymbol "unquote-splicing", ScmPair ( ScmSymbol "a", ScmNil))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr ",@a" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 7;
found = ScmPair( ScmSymbol "unquote-splicing",ScmPair( ScmPair( ScmSymbol "unquote-splicing",ScmPair( ScmPair( ScmSymbol "unquote-splicing", ScmPair ( ScmSymbol "a",ScmNil )),ScmNil )),ScmNil ))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr ",@,@,@a" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 48;
found = ScmPair( ScmPair( ScmSymbol "lambda",ScmPair( ScmPair ( ScmSymbol "x", ScmNil ),ScmPair( ScmPair( ScmSymbol "quasiquote",ScmPair( ScmPair( ScmPair( ScmSymbol "unquote", ScmPair ( ScmSymbol "x", ScmNil )),ScmPair( ScmPair( ScmSymbol "quote",ScmPair( ScmPair( ScmSymbol "unquote", ScmPair ( ScmSymbol "x",ScmNil )),ScmNil )),ScmNil )),ScmNil )),ScmNil ))),ScmPair( ScmPair( ScmSymbol "quote",ScmPair( ScmPair( ScmSymbol "lambda",ScmPair( ScmPair ( ScmSymbol "x", ScmNil ),ScmPair( ScmPair( ScmSymbol "quasiquote",ScmPair( ScmPair( ScmPair( ScmSymbol "unquote", ScmPair ( ScmSymbol "x",ScmNil )),ScmPair( ScmPair( ScmSymbol "quote",ScmPair( ScmPair( ScmSymbol "unquote",ScmPair ( ScmSymbol "x", ScmNil )),ScmNil )),ScmNil )),ScmNil )),ScmNil ))),ScmNil )),ScmNil ))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "((lambda (x) `(,x ',x)) '(lambda (x) `(,x ',x)))" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 20;
found = ScmPair( ScmSymbol "string-append",ScmPair( ScmString "2 + 3 = ",ScmPair( ScmPair( ScmSymbol "format",ScmPair( ScmString "~a",ScmPair( ScmPair( ScmSymbol "+",ScmPair( ScmNumber ( ScmRational (2, 1)),ScmPair ( ScmNumber ( ScmRational (3, 1)), ScmNil ))),ScmNil ))),ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "\"2 + 3 = ~{(+ 2 3) }\"" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 142;
found = ScmPair( ScmSymbol "string-append",ScmPair( ScmString "This is static : ABC and this is dynamic : ",ScmPair( ScmPair( ScmSymbol "format",ScmPair( ScmString "~a",ScmPair( ScmString"even though the string is static *in Scheme *, it is interpolated , so we consider it dynamic ...",ScmNil ))),ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "\"This is static : ABC and this is dynamic : ~{\"even though the string is static *in Scheme *, it is interpolated , so we consider it dynamic ...\"}\"" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 53;found = ScmPair( ScmSymbol "string-append",ScmPair( ScmString " static ",ScmPair( ScmPair( ScmSymbol "format",ScmPair( ScmString "~a",ScmPair( ScmPair( ScmSymbol "quote", ScmPair ( ScmSymbol "dynamic", ScmNil)),ScmNil ))),ScmPair( ScmString " more static ",ScmPair( ScmPair( ScmSymbol "format",ScmPair( ScmString "~a",ScmPair( ScmPair( ScmSymbol "quote",ScmPair( ScmPair( ScmSymbol "more",ScmPair ( ScmSymbol "dynamic !", ScmNil )),ScmNil )),ScmNil ))),ScmPair ( ScmString " ", ScmNil ))))))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "\" static ~{' dynamic } more static ~{ '( more dynamic !)} \"" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 290;
found =ScmPair( ScmSymbol "a",ScmPair( ScmSymbol "b",ScmPair( ScmSymbol "c",ScmPair( ScmSymbol "mary",ScmPair( ScmSymbol "had",ScmPair( ScmSymbol "a",ScmPair( ScmSymbol "little", ScmPair ( ScmSymbol "lambda !",ScmNil ))))))))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr ";;; This is a line comment !
#;\"and this is an S- expression ( string ) that is removed via a sexpr -comment !\"(a b c mary had a little lambda !#;#;#;#;\"I bet you didn 't realize that sexpr - comments \" \"may be\" \" nested !\"\"so all four strings shall be dumped and not appear in the list !\")" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 108;
found =ScmPair( ScmSymbol "you",ScmPair ( ScmSymbol "should", ScmPair ( ScmSymbol "know", ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "(you should know {that you can have paired /matching comments too , and that these are entered using braces !})"0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 41;
found = ScmPair( ScmSymbol "may",ScmPair ( ScmSymbol "be", ScmPair ( ScmSymbol "nested !", ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "({ and {that { these too }}} may be nested !)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 13;
found = ScmPair( ScmSymbol "a", ScmPair ( ScmSymbol "b", ScmPair ( ScmSymbol "c",ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "(a {#\\}} b c)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 13;
found = ScmPair( ScmSymbol "a", ScmPair ( ScmSymbol "b", ScmPair ( ScmSymbol "c",ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "(a {#\\{} b c)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 20;
found = ScmPair( ScmSymbol "a", ScmPair ( ScmSymbol "b", ScmPair ( ScmSymbol "c",ScmNil )))}).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "(a {\" }}}}{{{{\"} b c)" 0).found);;
printf "------------\n";;
printf "%s\n" (sprint_sexpr output_string ({ index_from = 0; index_to = 14; found = ScmNil }).found);;
printf "%s\n" (sprint_sexpr output_string ( nt_sexpr "  ( { ;  }    )" 0).found);;
printf "------------\n";;
printf "All tests passed\n";;
