     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "whatever"
    84 00000007 0800000000000000        	dq 8
    85 0000000F 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
    86 00000017 04                      	db T_symbol	; whatever
    87 00000018 [0600000000000000]      	dq L_constants + 6
    88 00000020 11                      	db T_rational	; 0
    89 00000021 000000000000000001-     	dq 0, 1
    89 0000002A 00000000000000     
    90 00000031 03                      	db T_string	; "+"
    91 00000032 0100000000000000        	dq 1
    92 0000003A 2B                      	db 0x2B
    93 0000003B 04                      	db T_symbol	; +
    94 0000003C [3100000000000000]      	dq L_constants + 49
    95 00000044 03                      	db T_string	; "all arguments need ...
    96 00000045 2000000000000000        	dq 32
    97 0000004D 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
    98 00000055 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
    99 0000005D 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   100 00000065 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   101 0000006D 03                      	db T_string	; "-"
   102 0000006E 0100000000000000        	dq 1
   103 00000076 2D                      	db 0x2D
   104 00000077 04                      	db T_symbol	; -
   105 00000078 [6D00000000000000]      	dq L_constants + 109
   106 00000080 11                      	db T_rational	; 1
   107 00000081 010000000000000001-     	dq 1, 1
   107 0000008A 00000000000000     
   108 00000091 03                      	db T_string	; "*"
   109 00000092 0100000000000000        	dq 1
   110 0000009A 2A                      	db 0x2A
   111 0000009B 04                      	db T_symbol	; *
   112 0000009C [9100000000000000]      	dq L_constants + 145
   113 000000A4 03                      	db T_string	; "/"
   114 000000A5 0100000000000000        	dq 1
   115 000000AD 2F                      	db 0x2F
   116 000000AE 04                      	db T_symbol	; /
   117 000000AF [A400000000000000]      	dq L_constants + 164
   118 000000B7 03                      	db T_string	; "generic-comparator"
   119 000000B8 1200000000000000        	dq 18
   120 000000C0 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   121 000000C8 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   122 000000D0 6F72                    	db 0x6F, 0x72
   123 000000D2 04                      	db T_symbol	; generic-comparator
   124 000000D3 [B700000000000000]      	dq L_constants + 183
   125 000000DB 03                      	db T_string	; "all the arguments m...
   126 000000DC 2100000000000000        	dq 33
   127 000000E4 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   128 000000EC 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   129 000000F4 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   130 000000FC 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   131 00000104 73                      	db 0x73
   132 00000105 03                      	db T_string	; "make-list"
   133 00000106 0900000000000000        	dq 9
   134 0000010E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   135 00000116 74                      	db 0x74
   136 00000117 04                      	db T_symbol	; make-list
   137 00000118 [0501000000000000]      	dq L_constants + 261
   138 00000120 03                      	db T_string	; "Usage: (make-list l...
   139 00000121 2D00000000000000        	dq 45
   140 00000129 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   141 00000131 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   142 00000139 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   143 00000141 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   144 00000149 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   145 00000151 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   146 00000156 0241                    	db T_char, 0x41	; #\A
   147 00000158 025A                    	db T_char, 0x5A	; #\Z
   148 0000015A 0261                    	db T_char, 0x61	; #\a
   149 0000015C 027A                    	db T_char, 0x7A	; #\z
   150 0000015E 03                      	db T_string	; "make-vector"
   151 0000015F 0B00000000000000        	dq 11
   152 00000167 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   153 0000016F 746F72                  	db 0x74, 0x6F, 0x72
   154 00000172 04                      	db T_symbol	; make-vector
   155 00000173 [5E01000000000000]      	dq L_constants + 350
   156 0000017B 03                      	db T_string	; "Usage: (make-vector...
   157 0000017C 2B00000000000000        	dq 43
   158 00000184 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   159 0000018C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   160 00000194 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   161 0000019C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   162 000001A4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   163 000001AC 6C7429                  	db 0x6C, 0x74, 0x29
   164 000001AF 03                      	db T_string	; "make-string"
   165 000001B0 0B00000000000000        	dq 11
   166 000001B8 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   167 000001C0 696E67                  	db 0x69, 0x6E, 0x67
   168 000001C3 04                      	db T_symbol	; make-string
   169 000001C4 [AF01000000000000]      	dq L_constants + 431
   170 000001CC 03                      	db T_string	; "Usage: (make-string...
   171 000001CD 2B00000000000000        	dq 43
   172 000001D5 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   173 000001DD 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   174 000001E5 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   175 000001ED 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   176 000001F5 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   177 000001FD 6C7429                  	db 0x6C, 0x74, 0x29
   178 00000200 11                      	db T_rational	; 2
   179 00000201 020000000000000001-     	dq 2, 1
   179 0000020A 00000000000000     
   180 00000211 03                      	db T_string	; "odd-2"
   181 00000212 0500000000000000        	dq 5
   182 0000021A 6F64642D32              	db 0x6F, 0x64, 0x64, 0x2D, 0x32
   183 0000021F 04                      	db T_symbol	; odd-2
   184 00000220 [1102000000000000]      	dq L_constants + 529
   185 00000228 03                      	db T_string	; "odd-5"
   186 00000229 0500000000000000        	dq 5
   187 00000231 6F64642D35              	db 0x6F, 0x64, 0x64, 0x2D, 0x35
   188 00000236 04                      	db T_symbol	; odd-5
   189 00000237 [2802000000000000]      	dq L_constants + 552
   190 0000023F 03                      	db T_string	; "odder-5"
   191 00000240 0700000000000000        	dq 7
   192 00000248 6F646465722D35          	db 0x6F, 0x64, 0x64, 0x65, 0x72, 0x2D, 0x35
   193 0000024F 04                      	db T_symbol	; odder-5
   194 00000250 [3F02000000000000]      	dq L_constants + 575
   195 00000258 11                      	db T_rational	; 100
   196 00000259 640000000000000001-     	dq 100, 1
   196 00000262 00000000000000     
   197                                  
   198                                  section .bss
   199                                  free_var_0:	; location of null?
   200 00000000 ????????????????        	resq 1
   201                                  free_var_1:	; location of pair?
   202 00000008 ????????????????        	resq 1
   203                                  free_var_2:	; location of void?
   204 00000010 ????????????????        	resq 1
   205                                  free_var_3:	; location of char?
   206 00000018 ????????????????        	resq 1
   207                                  free_var_4:	; location of string?
   208 00000020 ????????????????        	resq 1
   209                                  free_var_5:	; location of symbol?
   210 00000028 ????????????????        	resq 1
   211                                  free_var_6:	; location of vector?
   212 00000030 ????????????????        	resq 1
   213                                  free_var_7:	; location of procedure?
   214 00000038 ????????????????        	resq 1
   215                                  free_var_8:	; location of real?
   216 00000040 ????????????????        	resq 1
   217                                  free_var_9:	; location of rational?
   218 00000048 ????????????????        	resq 1
   219                                  free_var_10:	; location of boolean?
   220 00000050 ????????????????        	resq 1
   221                                  free_var_11:	; location of number?
   222 00000058 ????????????????        	resq 1
   223                                  free_var_12:	; location of collection?
   224 00000060 ????????????????        	resq 1
   225                                  free_var_13:	; location of cons
   226 00000068 ????????????????        	resq 1
   227                                  free_var_14:	; location of display-sexpr
   228 00000070 ????????????????        	resq 1
   229                                  free_var_15:	; location of write-char
   230 00000078 ????????????????        	resq 1
   231                                  free_var_16:	; location of car
   232 00000080 ????????????????        	resq 1
   233                                  free_var_17:	; location of cdr
   234 00000088 ????????????????        	resq 1
   235                                  free_var_18:	; location of string-length
   236 00000090 ????????????????        	resq 1
   237                                  free_var_19:	; location of vector-length
   238 00000098 ????????????????        	resq 1
   239                                  free_var_20:	; location of real->integer
   240 000000A0 ????????????????        	resq 1
   241                                  free_var_21:	; location of exit
   242 000000A8 ????????????????        	resq 1
   243                                  free_var_22:	; location of integer->real
   244 000000B0 ????????????????        	resq 1
   245                                  free_var_23:	; location of rational->real
   246 000000B8 ????????????????        	resq 1
   247                                  free_var_24:	; location of char->integer
   248 000000C0 ????????????????        	resq 1
   249                                  free_var_25:	; location of integer->char
   250 000000C8 ????????????????        	resq 1
   251                                  free_var_26:	; location of trng
   252 000000D0 ????????????????        	resq 1
   253                                  free_var_27:	; location of zero?
   254 000000D8 ????????????????        	resq 1
   255                                  free_var_28:	; location of integer?
   256 000000E0 ????????????????        	resq 1
   257                                  free_var_29:	; location of __bin-apply
   258 000000E8 ????????????????        	resq 1
   259                                  free_var_30:	; location of __bin-add-rr
   260 000000F0 ????????????????        	resq 1
   261                                  free_var_31:	; location of __bin-sub-rr
   262 000000F8 ????????????????        	resq 1
   263                                  free_var_32:	; location of __bin-mul-rr
   264 00000100 ????????????????        	resq 1
   265                                  free_var_33:	; location of __bin-div-rr
   266 00000108 ????????????????        	resq 1
   267                                  free_var_34:	; location of __bin-add-qq
   268 00000110 ????????????????        	resq 1
   269                                  free_var_35:	; location of __bin-sub-qq
   270 00000118 ????????????????        	resq 1
   271                                  free_var_36:	; location of __bin-mul-qq
   272 00000120 ????????????????        	resq 1
   273                                  free_var_37:	; location of __bin-div-qq
   274 00000128 ????????????????        	resq 1
   275                                  free_var_38:	; location of error
   276 00000130 ????????????????        	resq 1
   277                                  free_var_39:	; location of __bin-less-than-rr
   278 00000138 ????????????????        	resq 1
   279                                  free_var_40:	; location of __bin-less-than-qq
   280 00000140 ????????????????        	resq 1
   281                                  free_var_41:	; location of __bin-equal-rr
   282 00000148 ????????????????        	resq 1
   283                                  free_var_42:	; location of __bin-equal-qq
   284 00000150 ????????????????        	resq 1
   285                                  free_var_43:	; location of quotient
   286 00000158 ????????????????        	resq 1
   287                                  free_var_44:	; location of remainder
   288 00000160 ????????????????        	resq 1
   289                                  free_var_45:	; location of set-car!
   290 00000168 ????????????????        	resq 1
   291                                  free_var_46:	; location of set-cdr!
   292 00000170 ????????????????        	resq 1
   293                                  free_var_47:	; location of string-ref
   294 00000178 ????????????????        	resq 1
   295                                  free_var_48:	; location of vector-ref
   296 00000180 ????????????????        	resq 1
   297                                  free_var_49:	; location of vector-set!
   298 00000188 ????????????????        	resq 1
   299                                  free_var_50:	; location of string-set!
   300 00000190 ????????????????        	resq 1
   301                                  free_var_51:	; location of make-vector
   302 00000198 ????????????????        	resq 1
   303                                  free_var_52:	; location of make-string
   304 000001A0 ????????????????        	resq 1
   305                                  free_var_53:	; location of numerator
   306 000001A8 ????????????????        	resq 1
   307                                  free_var_54:	; location of denominator
   308 000001B0 ????????????????        	resq 1
   309                                  free_var_55:	; location of eq?
   310 000001B8 ????????????????        	resq 1
   311                                  free_var_56:	; location of caar
   312 000001C0 ????????????????        	resq 1
   313                                  free_var_57:	; location of cadr
   314 000001C8 ????????????????        	resq 1
   315                                  free_var_58:	; location of cdar
   316 000001D0 ????????????????        	resq 1
   317                                  free_var_59:	; location of cddr
   318 000001D8 ????????????????        	resq 1
   319                                  free_var_60:	; location of caaar
   320 000001E0 ????????????????        	resq 1
   321                                  free_var_61:	; location of caadr
   322 000001E8 ????????????????        	resq 1
   323                                  free_var_62:	; location of cadar
   324 000001F0 ????????????????        	resq 1
   325                                  free_var_63:	; location of caddr
   326 000001F8 ????????????????        	resq 1
   327                                  free_var_64:	; location of cdaar
   328 00000200 ????????????????        	resq 1
   329                                  free_var_65:	; location of cdadr
   330 00000208 ????????????????        	resq 1
   331                                  free_var_66:	; location of cddar
   332 00000210 ????????????????        	resq 1
   333                                  free_var_67:	; location of cdddr
   334 00000218 ????????????????        	resq 1
   335                                  free_var_68:	; location of caaaar
   336 00000220 ????????????????        	resq 1
   337                                  free_var_69:	; location of caaadr
   338 00000228 ????????????????        	resq 1
   339                                  free_var_70:	; location of caadar
   340 00000230 ????????????????        	resq 1
   341                                  free_var_71:	; location of caaddr
   342 00000238 ????????????????        	resq 1
   343                                  free_var_72:	; location of cadaar
   344 00000240 ????????????????        	resq 1
   345                                  free_var_73:	; location of cadadr
   346 00000248 ????????????????        	resq 1
   347                                  free_var_74:	; location of caddar
   348 00000250 ????????????????        	resq 1
   349                                  free_var_75:	; location of cadddr
   350 00000258 ????????????????        	resq 1
   351                                  free_var_76:	; location of cdaaar
   352 00000260 ????????????????        	resq 1
   353                                  free_var_77:	; location of cdaadr
   354 00000268 ????????????????        	resq 1
   355                                  free_var_78:	; location of cdadar
   356 00000270 ????????????????        	resq 1
   357                                  free_var_79:	; location of cdaddr
   358 00000278 ????????????????        	resq 1
   359                                  free_var_80:	; location of cddaar
   360 00000280 ????????????????        	resq 1
   361                                  free_var_81:	; location of cddadr
   362 00000288 ????????????????        	resq 1
   363                                  free_var_82:	; location of cdddar
   364 00000290 ????????????????        	resq 1
   365                                  free_var_83:	; location of cddddr
   366 00000298 ????????????????        	resq 1
   367                                  free_var_84:	; location of list?
   368 000002A0 ????????????????        	resq 1
   369                                  free_var_85:	; location of list
   370 000002A8 ????????????????        	resq 1
   371                                  free_var_86:	; location of not
   372 000002B0 ????????????????        	resq 1
   373                                  free_var_87:	; location of fraction?
   374 000002B8 ????????????????        	resq 1
   375                                  free_var_88:	; location of list*
   376 000002C0 ????????????????        	resq 1
   377                                  free_var_89:	; location of apply
   378 000002C8 ????????????????        	resq 1
   379                                  free_var_90:	; location of ormap
   380 000002D0 ????????????????        	resq 1
   381                                  free_var_91:	; location of map
   382 000002D8 ????????????????        	resq 1
   383                                  free_var_92:	; location of andmap
   384 000002E0 ????????????????        	resq 1
   385                                  free_var_93:	; location of reverse
   386 000002E8 ????????????????        	resq 1
   387                                  free_var_94:	; location of append
   388 000002F0 ????????????????        	resq 1
   389                                  free_var_95:	; location of fold-left
   390 000002F8 ????????????????        	resq 1
   391                                  free_var_96:	; location of fold-right
   392 00000300 ????????????????        	resq 1
   393                                  free_var_97:	; location of +
   394 00000308 ????????????????        	resq 1
   395                                  free_var_98:	; location of -
   396 00000310 ????????????????        	resq 1
   397                                  free_var_99:	; location of *
   398 00000318 ????????????????        	resq 1
   399                                  free_var_100:	; location of /
   400 00000320 ????????????????        	resq 1
   401                                  free_var_101:	; location of fact
   402 00000328 ????????????????        	resq 1
   403                                  free_var_102:	; location of <
   404 00000330 ????????????????        	resq 1
   405                                  free_var_103:	; location of <=
   406 00000338 ????????????????        	resq 1
   407                                  free_var_104:	; location of >
   408 00000340 ????????????????        	resq 1
   409                                  free_var_105:	; location of >=
   410 00000348 ????????????????        	resq 1
   411                                  free_var_106:	; location of =
   412 00000350 ????????????????        	resq 1
   413                                  free_var_107:	; location of make-list
   414 00000358 ????????????????        	resq 1
   415                                  free_var_108:	; location of char<?
   416 00000360 ????????????????        	resq 1
   417                                  free_var_109:	; location of char<=?
   418 00000368 ????????????????        	resq 1
   419                                  free_var_110:	; location of char=?
   420 00000370 ????????????????        	resq 1
   421                                  free_var_111:	; location of char>?
   422 00000378 ????????????????        	resq 1
   423                                  free_var_112:	; location of char>=?
   424 00000380 ????????????????        	resq 1
   425                                  free_var_113:	; location of char-downcase
   426 00000388 ????????????????        	resq 1
   427                                  free_var_114:	; location of char-upcase
   428 00000390 ????????????????        	resq 1
   429                                  free_var_115:	; location of char-ci<?
   430 00000398 ????????????????        	resq 1
   431                                  free_var_116:	; location of char-ci<=?
   432 000003A0 ????????????????        	resq 1
   433                                  free_var_117:	; location of char-ci=?
   434 000003A8 ????????????????        	resq 1
   435                                  free_var_118:	; location of char-ci>?
   436 000003B0 ????????????????        	resq 1
   437                                  free_var_119:	; location of char-ci>=?
   438 000003B8 ????????????????        	resq 1
   439                                  free_var_120:	; location of string-downcase
   440 000003C0 ????????????????        	resq 1
   441                                  free_var_121:	; location of string-upcase
   442 000003C8 ????????????????        	resq 1
   443                                  free_var_122:	; location of list->string
   444 000003D0 ????????????????        	resq 1
   445                                  free_var_123:	; location of string->list
   446 000003D8 ????????????????        	resq 1
   447                                  free_var_124:	; location of string<?
   448 000003E0 ????????????????        	resq 1
   449                                  free_var_125:	; location of string<=?
   450 000003E8 ????????????????        	resq 1
   451                                  free_var_126:	; location of string=?
   452 000003F0 ????????????????        	resq 1
   453                                  free_var_127:	; location of string>=?
   454 000003F8 ????????????????        	resq 1
   455                                  free_var_128:	; location of string>?
   456 00000400 ????????????????        	resq 1
   457                                  free_var_129:	; location of string-ci<?
   458 00000408 ????????????????        	resq 1
   459                                  free_var_130:	; location of string-ci<=?
   460 00000410 ????????????????        	resq 1
   461                                  free_var_131:	; location of string-ci=?
   462 00000418 ????????????????        	resq 1
   463                                  free_var_132:	; location of string-ci>=?
   464 00000420 ????????????????        	resq 1
   465                                  free_var_133:	; location of string-ci>?
   466 00000428 ????????????????        	resq 1
   467                                  free_var_134:	; location of length
   468 00000430 ????????????????        	resq 1
   469                                  free_var_135:	; location of list->vector
   470 00000438 ????????????????        	resq 1
   471                                  free_var_136:	; location of vector
   472 00000440 ????????????????        	resq 1
   473                                  free_var_137:	; location of vector->list
   474 00000448 ????????????????        	resq 1
   475                                  free_var_138:	; location of random
   476 00000450 ????????????????        	resq 1
   477                                  free_var_139:	; location of positive?
   478 00000458 ????????????????        	resq 1
   479                                  free_var_140:	; location of negative?
   480 00000460 ????????????????        	resq 1
   481                                  free_var_141:	; location of even?
   482 00000468 ????????????????        	resq 1
   483                                  free_var_142:	; location of odd?
   484 00000470 ????????????????        	resq 1
   485                                  free_var_143:	; location of abs
   486 00000478 ????????????????        	resq 1
   487                                  free_var_144:	; location of equal?
   488 00000480 ????????????????        	resq 1
   489                                  free_var_145:	; location of assoc
   490 00000488 ????????????????        	resq 1
   491                                  
   492                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   493                                  global main
   494                                  section .text
   495                                  main:
   496 00000000 C8000000                        enter 0, 0
   497                                          
   498                                  	; building closure for null?
   499 00000004 48BF-                   	mov rdi, free_var_0
   499 00000006 [0000000000000000] 
   500 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   500 00000010 [3625010000000000] 
   501 00000018 E842240100              	call bind_primitive
   502                                  
   503                                  	; building closure for pair?
   504 0000001D 48BF-                   	mov rdi, free_var_1
   504 0000001F [0800000000000000] 
   505 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   505 00000029 [6C25010000000000] 
   506 00000031 E829240100              	call bind_primitive
   507                                  
   508                                  	; building closure for void?
   509 00000036 48BF-                   	mov rdi, free_var_2
   509 00000038 [1000000000000000] 
   510 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   510 00000042 [A225010000000000] 
   511 0000004A E810240100              	call bind_primitive
   512                                  
   513                                  	; building closure for char?
   514 0000004F 48BF-                   	mov rdi, free_var_3
   514 00000051 [1800000000000000] 
   515 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   515 0000005B [D825010000000000] 
   516 00000063 E8F7230100              	call bind_primitive
   517                                  
   518                                  	; building closure for string?
   519 00000068 48BF-                   	mov rdi, free_var_4
   519 0000006A [2000000000000000] 
   520 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   520 00000074 [0E26010000000000] 
   521 0000007C E8DE230100              	call bind_primitive
   522                                  
   523                                  	; building closure for symbol?
   524 00000081 48BF-                   	mov rdi, free_var_5
   524 00000083 [2800000000000000] 
   525 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   525 0000008D [4426010000000000] 
   526 00000095 E8C5230100              	call bind_primitive
   527                                  
   528                                  	; building closure for vector?
   529 0000009A 48BF-                   	mov rdi, free_var_6
   529 0000009C [3000000000000000] 
   530 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   530 000000A6 [7A26010000000000] 
   531 000000AE E8AC230100              	call bind_primitive
   532                                  
   533                                  	; building closure for procedure?
   534 000000B3 48BF-                   	mov rdi, free_var_7
   534 000000B5 [3800000000000000] 
   535 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   535 000000BF [B026010000000000] 
   536 000000C7 E893230100              	call bind_primitive
   537                                  
   538                                  	; building closure for real?
   539 000000CC 48BF-                   	mov rdi, free_var_8
   539 000000CE [4000000000000000] 
   540 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   540 000000D8 [E626010000000000] 
   541 000000E0 E87A230100              	call bind_primitive
   542                                  
   543                                  	; building closure for rational?
   544 000000E5 48BF-                   	mov rdi, free_var_9
   544 000000E7 [4800000000000000] 
   545 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   545 000000F1 [1C27010000000000] 
   546 000000F9 E861230100              	call bind_primitive
   547                                  
   548                                  	; building closure for boolean?
   549 000000FE 48BF-                   	mov rdi, free_var_10
   549 00000100 [5000000000000000] 
   550 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   550 0000010A [5227010000000000] 
   551 00000112 E848230100              	call bind_primitive
   552                                  
   553                                  	; building closure for number?
   554 00000117 48BF-                   	mov rdi, free_var_11
   554 00000119 [5800000000000000] 
   555 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   555 00000123 [8A27010000000000] 
   556 0000012B E82F230100              	call bind_primitive
   557                                  
   558                                  	; building closure for collection?
   559 00000130 48BF-                   	mov rdi, free_var_12
   559 00000132 [6000000000000000] 
   560 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   560 0000013C [C227010000000000] 
   561 00000144 E816230100              	call bind_primitive
   562                                  
   563                                  	; building closure for cons
   564 00000149 48BF-                   	mov rdi, free_var_13
   564 0000014B [6800000000000000] 
   565 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   565 00000155 [FA27010000000000] 
   566 0000015D E8FD220100              	call bind_primitive
   567                                  
   568                                  	; building closure for display-sexpr
   569 00000162 48BF-                   	mov rdi, free_var_14
   569 00000164 [7000000000000000] 
   570 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   570 0000016E [2E28010000000000] 
   571 00000176 E8E4220100              	call bind_primitive
   572                                  
   573                                  	; building closure for write-char
   574 0000017B 48BF-                   	mov rdi, free_var_15
   574 0000017D [7800000000000000] 
   575 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   575 00000187 [5828010000000000] 
   576 0000018F E8CB220100              	call bind_primitive
   577                                  
   578                                  	; building closure for car
   579 00000194 48BF-                   	mov rdi, free_var_16
   579 00000196 [8000000000000000] 
   580 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   580 000001A0 [AF28010000000000] 
   581 000001A8 E8B2220100              	call bind_primitive
   582                                  
   583                                  	; building closure for cdr
   584 000001AD 48BF-                   	mov rdi, free_var_17
   584 000001AF [8800000000000000] 
   585 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   585 000001B9 [D728010000000000] 
   586 000001C1 E899220100              	call bind_primitive
   587                                  
   588                                  	; building closure for string-length
   589 000001C6 48BF-                   	mov rdi, free_var_18
   589 000001C8 [9000000000000000] 
   590 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   590 000001D2 [FF28010000000000] 
   591 000001DA E880220100              	call bind_primitive
   592                                  
   593                                  	; building closure for vector-length
   594 000001DF 48BF-                   	mov rdi, free_var_19
   594 000001E1 [9800000000000000] 
   595 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   595 000001EB [2C29010000000000] 
   596 000001F3 E867220100              	call bind_primitive
   597                                  
   598                                  	; building closure for real->integer
   599 000001F8 48BF-                   	mov rdi, free_var_20
   599 000001FA [A000000000000000] 
   600 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   600 00000204 [5929010000000000] 
   601 0000020C E84E220100              	call bind_primitive
   602                                  
   603                                  	; building closure for exit
   604 00000211 48BF-                   	mov rdi, free_var_21
   604 00000213 [A800000000000000] 
   605 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   605 0000021D [8C29010000000000] 
   606 00000225 E835220100              	call bind_primitive
   607                                  
   608                                  	; building closure for integer->real
   609 0000022A 48BF-                   	mov rdi, free_var_22
   609 0000022C [B000000000000000] 
   610 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   610 00000236 [A929010000000000] 
   611 0000023E E81C220100              	call bind_primitive
   612                                  
   613                                  	; building closure for rational->real
   614 00000243 48BF-                   	mov rdi, free_var_23
   614 00000245 [B800000000000000] 
   615 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   615 0000024F [E629010000000000] 
   616 00000257 E803220100              	call bind_primitive
   617                                  
   618                                  	; building closure for char->integer
   619 0000025C 48BF-                   	mov rdi, free_var_24
   619 0000025E [C000000000000000] 
   620 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   620 00000268 [252A010000000000] 
   621 00000270 E8EA210100              	call bind_primitive
   622                                  
   623                                  	; building closure for integer->char
   624 00000275 48BF-                   	mov rdi, free_var_25
   624 00000277 [C800000000000000] 
   625 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   625 00000281 [5A2A010000000000] 
   626 00000289 E8D1210100              	call bind_primitive
   627                                  
   628                                  	; building closure for trng
   629 0000028E 48BF-                   	mov rdi, free_var_26
   629 00000290 [D000000000000000] 
   630 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   630 0000029A [B42A010000000000] 
   631 000002A2 E8B8210100              	call bind_primitive
   632                                  
   633                                  	; building closure for zero?
   634 000002A7 48BF-                   	mov rdi, free_var_27
   634 000002A9 [D800000000000000] 
   635 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   635 000002B3 [D72A010000000000] 
   636 000002BB E89F210100              	call bind_primitive
   637                                  
   638                                  	; building closure for integer?
   639 000002C0 48BF-                   	mov rdi, free_var_28
   639 000002C2 [E000000000000000] 
   640 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   640 000002CC [322B010000000000] 
   641 000002D4 E886210100              	call bind_primitive
   642                                  
   643                                  	; building closure for __bin-apply
   644 000002D9 48BF-                   	mov rdi, free_var_29
   644 000002DB [E800000000000000] 
   645 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   645 000002E5 [8724010000000000] 
   646 000002ED E86D210100              	call bind_primitive
   647                                  
   648                                  	; building closure for __bin-add-rr
   649 000002F2 48BF-                   	mov rdi, free_var_30
   649 000002F4 [F000000000000000] 
   650 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   650 000002FE [6F2B010000000000] 
   651 00000306 E854210100              	call bind_primitive
   652                                  
   653                                  	; building closure for __bin-sub-rr
   654 0000030B 48BF-                   	mov rdi, free_var_31
   654 0000030D [F800000000000000] 
   655 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   655 00000317 [B32B010000000000] 
   656 0000031F E83B210100              	call bind_primitive
   657                                  
   658                                  	; building closure for __bin-mul-rr
   659 00000324 48BF-                   	mov rdi, free_var_32
   659 00000326 [0001000000000000] 
   660 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   660 00000330 [F72B010000000000] 
   661 00000338 E822210100              	call bind_primitive
   662                                  
   663                                  	; building closure for __bin-div-rr
   664 0000033D 48BF-                   	mov rdi, free_var_33
   664 0000033F [0801000000000000] 
   665 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   665 00000349 [3B2C010000000000] 
   666 00000351 E809210100              	call bind_primitive
   667                                  
   668                                  	; building closure for __bin-add-qq
   669 00000356 48BF-                   	mov rdi, free_var_34
   669 00000358 [1001000000000000] 
   670 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   670 00000362 [8D2C010000000000] 
   671 0000036A E8F0200100              	call bind_primitive
   672                                  
   673                                  	; building closure for __bin-sub-qq
   674 0000036F 48BF-                   	mov rdi, free_var_35
   674 00000371 [1801000000000000] 
   675 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   675 0000037B [F52C010000000000] 
   676 00000383 E8D7200100              	call bind_primitive
   677                                  
   678                                  	; building closure for __bin-mul-qq
   679 00000388 48BF-                   	mov rdi, free_var_36
   679 0000038A [2001000000000000] 
   680 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   680 00000394 [5D2D010000000000] 
   681 0000039C E8BE200100              	call bind_primitive
   682                                  
   683                                  	; building closure for __bin-div-qq
   684 000003A1 48BF-                   	mov rdi, free_var_37
   684 000003A3 [2801000000000000] 
   685 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   685 000003AD [B52D010000000000] 
   686 000003B5 E8A5200100              	call bind_primitive
   687                                  
   688                                  	; building closure for error
   689 000003BA 48BF-                   	mov rdi, free_var_38
   689 000003BC [3001000000000000] 
   690 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   690 000003C6 [832E010000000000] 
   691 000003CE E88C200100              	call bind_primitive
   692                                  
   693                                  	; building closure for __bin-less-than-rr
   694 000003D3 48BF-                   	mov rdi, free_var_39
   694 000003D5 [3801000000000000] 
   695 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   695 000003DF [3A2F010000000000] 
   696 000003E7 E873200100              	call bind_primitive
   697                                  
   698                                  	; building closure for __bin-less-than-qq
   699 000003EC 48BF-                   	mov rdi, free_var_40
   699 000003EE [4001000000000000] 
   700 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   700 000003F8 [912F010000000000] 
   701 00000400 E85A200100              	call bind_primitive
   702                                  
   703                                  	; building closure for __bin-equal-rr
   704 00000405 48BF-                   	mov rdi, free_var_41
   704 00000407 [4801000000000000] 
   705 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   705 00000411 [F42F010000000000] 
   706 00000419 E841200100              	call bind_primitive
   707                                  
   708                                  	; building closure for __bin-equal-qq
   709 0000041E 48BF-                   	mov rdi, free_var_42
   709 00000420 [5001000000000000] 
   710 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   710 0000042A [4B30010000000000] 
   711 00000432 E828200100              	call bind_primitive
   712                                  
   713                                  	; building closure for quotient
   714 00000437 48BF-                   	mov rdi, free_var_43
   714 00000439 [5801000000000000] 
   715 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   715 00000443 [AE30010000000000] 
   716 0000044B E80F200100              	call bind_primitive
   717                                  
   718                                  	; building closure for remainder
   719 00000450 48BF-                   	mov rdi, free_var_44
   719 00000452 [6001000000000000] 
   720 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   720 0000045C [1431010000000000] 
   721 00000464 E8F61F0100              	call bind_primitive
   722                                  
   723                                  	; building closure for set-car!
   724 00000469 48BF-                   	mov rdi, free_var_45
   724 0000046B [6801000000000000] 
   725 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   725 00000475 [7A31010000000000] 
   726 0000047D E8DD1F0100              	call bind_primitive
   727                                  
   728                                  	; building closure for set-cdr!
   729 00000482 48BF-                   	mov rdi, free_var_46
   729 00000484 [7001000000000000] 
   730 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   730 0000048E [B031010000000000] 
   731 00000496 E8C41F0100              	call bind_primitive
   732                                  
   733                                  	; building closure for string-ref
   734 0000049B 48BF-                   	mov rdi, free_var_47
   734 0000049D [7801000000000000] 
   735 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   735 000004A7 [E631010000000000] 
   736 000004AF E8AB1F0100              	call bind_primitive
   737                                  
   738                                  	; building closure for vector-ref
   739 000004B4 48BF-                   	mov rdi, free_var_48
   739 000004B6 [8001000000000000] 
   740 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   740 000004C0 [5132010000000000] 
   741 000004C8 E8921F0100              	call bind_primitive
   742                                  
   743                                  	; building closure for vector-set!
   744 000004CD 48BF-                   	mov rdi, free_var_49
   744 000004CF [8801000000000000] 
   745 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   745 000004D9 [AD32010000000000] 
   746 000004E1 E8791F0100              	call bind_primitive
   747                                  
   748                                  	; building closure for string-set!
   749 000004E6 48BF-                   	mov rdi, free_var_50
   749 000004E8 [9001000000000000] 
   750 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   750 000004F2 [1733010000000000] 
   751 000004FA E8601F0100              	call bind_primitive
   752                                  
   753                                  	; building closure for make-vector
   754 000004FF 48BF-                   	mov rdi, free_var_51
   754 00000501 [9801000000000000] 
   755 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   755 0000050B [8C33010000000000] 
   756 00000513 E8471F0100              	call bind_primitive
   757                                  
   758                                  	; building closure for make-string
   759 00000518 48BF-                   	mov rdi, free_var_52
   759 0000051A [A001000000000000] 
   760 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   760 00000524 [F633010000000000] 
   761 0000052C E82E1F0100              	call bind_primitive
   762                                  
   763                                  	; building closure for numerator
   764 00000531 48BF-                   	mov rdi, free_var_53
   764 00000533 [A801000000000000] 
   765 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   765 0000053D [6834010000000000] 
   766 00000545 E8151F0100              	call bind_primitive
   767                                  
   768                                  	; building closure for denominator
   769 0000054A 48BF-                   	mov rdi, free_var_54
   769 0000054C [B001000000000000] 
   770 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   770 00000556 [9534010000000000] 
   771 0000055E E8FC1E0100              	call bind_primitive
   772                                  
   773                                  	; building closure for eq?
   774 00000563 48BF-                   	mov rdi, free_var_55
   774 00000565 [B801000000000000] 
   775 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   775 0000056F [C234010000000000] 
   776 00000577 E8E31E0100              	call bind_primitive
   777                                  
   778 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   779 00000581 E848190100              	call malloc
   780 00000586 50                      	push rax
   781 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   782 0000058C E83D190100              	call malloc
   783 00000591 50                      	push rax
   784 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   785 00000597 E832190100              	call malloc
   786 0000059C 488B7D10                	mov rdi, ENV
   787 000005A0 BE00000000              	mov rsi, 0
   788 000005A5 BA01000000              	mov rdx, 1
   789                                  .L_lambda_simple_env_loop_3729:	; ext_env[i + 1] <-- env[i]
   790 000005AA 4883FE00                	cmp rsi, 0
   791 000005AE 7410                    	je .L_lambda_simple_env_end_3729
   792 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   793 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   794 000005B8 48FFC6                  	inc rsi
   795 000005BB 48FFC2                  	inc rdx
   796 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_3729
   797                                  .L_lambda_simple_env_end_3729:
   798 000005C0 5B                      	pop rbx
   799 000005C1 BE00000000              	mov rsi, 0
   800                                  .L_lambda_simple_params_loop_3729:	; copy params
   801 000005C6 4883FE00                	cmp rsi, 0
   802 000005CA 740E                    	je .L_lambda_simple_params_end_3729
   803 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   804 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   805 000005D5 48FFC6                  	inc rsi
   806 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_3729
   807                                  .L_lambda_simple_params_end_3729:
   808 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   809 000005DD 4889C3                  	mov rbx, rax
   810 000005E0 58                      	pop rax
   811 000005E1 C60005                  	mov byte [rax], T_closure
   812 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   813 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3729
   814 000005F0 E9A4000000              	jmp .L_lambda_simple_end_3729
   815                                  .L_lambda_simple_code_3729:	; lambda-simple body
   816 000005F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
   817 000005FB 740B                    	je .L_lambda_simple_arity_check_ok_3729
   818 000005FD FF742410                	push qword [rsp + 8 * 2]
   819 00000601 6A01                    	push 1
   820 00000603 E97F180100              	jmp L_error_incorrect_arity_simple
   821                                  .L_lambda_simple_arity_check_ok_3729:
   822 00000608 C8000000                	enter 0, 0
   823 0000060C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   824 00000610 50                      	push rax
   825 00000611 6A01                    	push 1
   826 00000613 488B0425[80000000]      	mov rax, qword [free_var_16]
   827                                  	assert_closure(rax)
    42 0000061B 803805              <1>  cmp byte [%1], %2
    43 0000061E 0F859E300100        <1>  jne L_error_incorrect_type
   828 00000624 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   829 00000627 FF5009                  	call SOB_CLOSURE_CODE(rax)
   830 0000062A 50                      	push rax
   831 0000062B 6A01                    	push 1
   832 0000062D 488B0425[80000000]      	mov rax, qword [free_var_16]
   833                                  .L_applic_TC_3fc5:
   834 00000635 803805                  	cmp byte [rax], T_closure
   835 00000638 0F8545280100            	jne L_code_ptr_error
   836 0000063E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   837 00000642 53                      	push rbx
   838 00000643 FF7508                  	push qword [rbp + 8]
   839 00000646 FF7500                  	push qword [rbp]
   840 00000649 488B4D18                	mov rcx, [rbp + 3 * 8]
   841 0000064D 488B542418              	mov rdx, [rsp + 3 * 8]
   842 00000652 488D7204                	lea rsi, [rdx + 4]
   843 00000656 4C8D4EFF                	lea r9, [rsi - 1]
   844 0000065A 488D7903                	lea rdi, [rcx + 3]
   845 0000065E 4D31C0                  	xor r8, r8
   846                                  .L_tc_recycle_frame_loop_3fc5:
   847 00000661 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
   848 00000665 4C8944FD00              	mov [rbp + (rdi * 8)], r8
   849 0000066A 49FFC9                  	dec r9
   850 0000066D 4D31C0                  	xor r8, r8
   851 00000670 48FFCF                  	dec rdi
   852 00000673 48FFCE                  	dec rsi
   853 00000676 4883FE00                	cmp rsi, 0
   854 0000067A 75E5                    	jne .L_tc_recycle_frame_loop_3fc5
   855                                  .L_tc_recycle_frame_done_3fc5:
   856                                  ;this pop rbp in sot to the right place
   857 0000067C 4989C9                  	mov r9, rcx
   858 0000067F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
   859 00000687 4C01CC                  	add rsp, r9
   860 0000068A 5D                      	pop rbp
   861 0000068B 488B4D00                	mov rcx, qword [rbp]
   862 0000068F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   863 00000693 FFE3                    	jmp rbx
   864 00000695 C9                      	leave
   865 00000696 C21800                  	ret 8 * (2 + 1)
   866                                  .L_lambda_simple_end_3729:	; new closure is in rax
   867 00000699 48890425[C0010000]      	mov qword [free_var_56], rax
   868 000006A1 48B8-                   	mov rax, sob_void
   868 000006A3 [0000000000000000] 
   869                                  
   870 000006AB 4889C7                  	mov rdi, rax
   871 000006AE E82C180100              	call print_sexpr_if_not_void
   872                                  
   873 000006B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   874 000006B8 E811180100              	call malloc
   875 000006BD 50                      	push rax
   876 000006BE BF00000000              	mov rdi, 8 * 0	; new rib
   877 000006C3 E806180100              	call malloc
   878 000006C8 50                      	push rax
   879 000006C9 BF08000000              	mov rdi, 8 * 1	; extended env
   880 000006CE E8FB170100              	call malloc
   881 000006D3 488B7D10                	mov rdi, ENV
   882 000006D7 BE00000000              	mov rsi, 0
   883 000006DC BA01000000              	mov rdx, 1
   884                                  .L_lambda_simple_env_loop_372a:	; ext_env[i + 1] <-- env[i]
   885 000006E1 4883FE00                	cmp rsi, 0
   886 000006E5 7410                    	je .L_lambda_simple_env_end_372a
   887 000006E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   888 000006EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
   889 000006EF 48FFC6                  	inc rsi
   890 000006F2 48FFC2                  	inc rdx
   891 000006F5 EBEA                    	jmp .L_lambda_simple_env_loop_372a
   892                                  .L_lambda_simple_env_end_372a:
   893 000006F7 5B                      	pop rbx
   894 000006F8 BE00000000              	mov rsi, 0
   895                                  .L_lambda_simple_params_loop_372a:	; copy params
   896 000006FD 4883FE00                	cmp rsi, 0
   897 00000701 740E                    	je .L_lambda_simple_params_end_372a
   898 00000703 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   899 00000708 488914F3                	mov qword [rbx + 8 * rsi], rdx
   900 0000070C 48FFC6                  	inc rsi
   901 0000070F EBEC                    	jmp .L_lambda_simple_params_loop_372a
   902                                  .L_lambda_simple_params_end_372a:
   903 00000711 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   904 00000714 4889C3                  	mov rbx, rax
   905 00000717 58                      	pop rax
   906 00000718 C60005                  	mov byte [rax], T_closure
   907 0000071B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   908 0000071F 48C74009[2C070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_372a
   909 00000727 E9A4000000              	jmp .L_lambda_simple_end_372a
   910                                  .L_lambda_simple_code_372a:	; lambda-simple body
   911 0000072C 48837C241001            	cmp qword [rsp + 8 * 2], 1
   912 00000732 740B                    	je .L_lambda_simple_arity_check_ok_372a
   913 00000734 FF742410                	push qword [rsp + 8 * 2]
   914 00000738 6A01                    	push 1
   915 0000073A E948170100              	jmp L_error_incorrect_arity_simple
   916                                  .L_lambda_simple_arity_check_ok_372a:
   917 0000073F C8000000                	enter 0, 0
   918 00000743 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   919 00000747 50                      	push rax
   920 00000748 6A01                    	push 1
   921 0000074A 488B0425[88000000]      	mov rax, qword [free_var_17]
   922                                  	assert_closure(rax)
    42 00000752 803805              <1>  cmp byte [%1], %2
    43 00000755 0F85672F0100        <1>  jne L_error_incorrect_type
   923 0000075B FF7001                  	push SOB_CLOSURE_ENV(rax) 
   924 0000075E FF5009                  	call SOB_CLOSURE_CODE(rax)
   925 00000761 50                      	push rax
   926 00000762 6A01                    	push 1
   927 00000764 488B0425[80000000]      	mov rax, qword [free_var_16]
   928                                  .L_applic_TC_3fc6:
   929 0000076C 803805                  	cmp byte [rax], T_closure
   930 0000076F 0F850E270100            	jne L_code_ptr_error
   931 00000775 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   932 00000779 53                      	push rbx
   933 0000077A FF7508                  	push qword [rbp + 8]
   934 0000077D FF7500                  	push qword [rbp]
   935 00000780 488B4D18                	mov rcx, [rbp + 3 * 8]
   936 00000784 488B542418              	mov rdx, [rsp + 3 * 8]
   937 00000789 488D7204                	lea rsi, [rdx + 4]
   938 0000078D 4C8D4EFF                	lea r9, [rsi - 1]
   939 00000791 488D7903                	lea rdi, [rcx + 3]
   940 00000795 4D31C0                  	xor r8, r8
   941                                  .L_tc_recycle_frame_loop_3fc6:
   942 00000798 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
   943 0000079C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
   944 000007A1 49FFC9                  	dec r9
   945 000007A4 4D31C0                  	xor r8, r8
   946 000007A7 48FFCF                  	dec rdi
   947 000007AA 48FFCE                  	dec rsi
   948 000007AD 4883FE00                	cmp rsi, 0
   949 000007B1 75E5                    	jne .L_tc_recycle_frame_loop_3fc6
   950                                  .L_tc_recycle_frame_done_3fc6:
   951                                  ;this pop rbp in sot to the right place
   952 000007B3 4989C9                  	mov r9, rcx
   953 000007B6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
   954 000007BE 4C01CC                  	add rsp, r9
   955 000007C1 5D                      	pop rbp
   956 000007C2 488B4D00                	mov rcx, qword [rbp]
   957 000007C6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   958 000007CA FFE3                    	jmp rbx
   959 000007CC C9                      	leave
   960 000007CD C21800                  	ret 8 * (2 + 1)
   961                                  .L_lambda_simple_end_372a:	; new closure is in rax
   962 000007D0 48890425[C8010000]      	mov qword [free_var_57], rax
   963 000007D8 48B8-                   	mov rax, sob_void
   963 000007DA [0000000000000000] 
   964                                  
   965 000007E2 4889C7                  	mov rdi, rax
   966 000007E5 E8F5160100              	call print_sexpr_if_not_void
   967                                  
   968 000007EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   969 000007EF E8DA160100              	call malloc
   970 000007F4 50                      	push rax
   971 000007F5 BF00000000              	mov rdi, 8 * 0	; new rib
   972 000007FA E8CF160100              	call malloc
   973 000007FF 50                      	push rax
   974 00000800 BF08000000              	mov rdi, 8 * 1	; extended env
   975 00000805 E8C4160100              	call malloc
   976 0000080A 488B7D10                	mov rdi, ENV
   977 0000080E BE00000000              	mov rsi, 0
   978 00000813 BA01000000              	mov rdx, 1
   979                                  .L_lambda_simple_env_loop_372b:	; ext_env[i + 1] <-- env[i]
   980 00000818 4883FE00                	cmp rsi, 0
   981 0000081C 7410                    	je .L_lambda_simple_env_end_372b
   982 0000081E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   983 00000822 48890CD0                	mov qword [rax + 8 * rdx], rcx
   984 00000826 48FFC6                  	inc rsi
   985 00000829 48FFC2                  	inc rdx
   986 0000082C EBEA                    	jmp .L_lambda_simple_env_loop_372b
   987                                  .L_lambda_simple_env_end_372b:
   988 0000082E 5B                      	pop rbx
   989 0000082F BE00000000              	mov rsi, 0
   990                                  .L_lambda_simple_params_loop_372b:	; copy params
   991 00000834 4883FE00                	cmp rsi, 0
   992 00000838 740E                    	je .L_lambda_simple_params_end_372b
   993 0000083A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   994 0000083F 488914F3                	mov qword [rbx + 8 * rsi], rdx
   995 00000843 48FFC6                  	inc rsi
   996 00000846 EBEC                    	jmp .L_lambda_simple_params_loop_372b
   997                                  .L_lambda_simple_params_end_372b:
   998 00000848 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   999 0000084B 4889C3                  	mov rbx, rax
  1000 0000084E 58                      	pop rax
  1001 0000084F C60005                  	mov byte [rax], T_closure
  1002 00000852 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1003 00000856 48C74009[63080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_372b
  1004 0000085E E9A4000000              	jmp .L_lambda_simple_end_372b
  1005                                  .L_lambda_simple_code_372b:	; lambda-simple body
  1006 00000863 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1007 00000869 740B                    	je .L_lambda_simple_arity_check_ok_372b
  1008 0000086B FF742410                	push qword [rsp + 8 * 2]
  1009 0000086F 6A01                    	push 1
  1010 00000871 E911160100              	jmp L_error_incorrect_arity_simple
  1011                                  .L_lambda_simple_arity_check_ok_372b:
  1012 00000876 C8000000                	enter 0, 0
  1013 0000087A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1014 0000087E 50                      	push rax
  1015 0000087F 6A01                    	push 1
  1016 00000881 488B0425[80000000]      	mov rax, qword [free_var_16]
  1017                                  	assert_closure(rax)
    42 00000889 803805              <1>  cmp byte [%1], %2
    43 0000088C 0F85302E0100        <1>  jne L_error_incorrect_type
  1018 00000892 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1019 00000895 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1020 00000898 50                      	push rax
  1021 00000899 6A01                    	push 1
  1022 0000089B 488B0425[88000000]      	mov rax, qword [free_var_17]
  1023                                  .L_applic_TC_3fc7:
  1024 000008A3 803805                  	cmp byte [rax], T_closure
  1025 000008A6 0F85D7250100            	jne L_code_ptr_error
  1026 000008AC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1027 000008B0 53                      	push rbx
  1028 000008B1 FF7508                  	push qword [rbp + 8]
  1029 000008B4 FF7500                  	push qword [rbp]
  1030 000008B7 488B4D18                	mov rcx, [rbp + 3 * 8]
  1031 000008BB 488B542418              	mov rdx, [rsp + 3 * 8]
  1032 000008C0 488D7204                	lea rsi, [rdx + 4]
  1033 000008C4 4C8D4EFF                	lea r9, [rsi - 1]
  1034 000008C8 488D7903                	lea rdi, [rcx + 3]
  1035 000008CC 4D31C0                  	xor r8, r8
  1036                                  .L_tc_recycle_frame_loop_3fc7:
  1037 000008CF 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1038 000008D3 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1039 000008D8 49FFC9                  	dec r9
  1040 000008DB 4D31C0                  	xor r8, r8
  1041 000008DE 48FFCF                  	dec rdi
  1042 000008E1 48FFCE                  	dec rsi
  1043 000008E4 4883FE00                	cmp rsi, 0
  1044 000008E8 75E5                    	jne .L_tc_recycle_frame_loop_3fc7
  1045                                  .L_tc_recycle_frame_done_3fc7:
  1046                                  ;this pop rbp in sot to the right place
  1047 000008EA 4989C9                  	mov r9, rcx
  1048 000008ED 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1049 000008F5 4C01CC                  	add rsp, r9
  1050 000008F8 5D                      	pop rbp
  1051 000008F9 488B4D00                	mov rcx, qword [rbp]
  1052 000008FD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1053 00000901 FFE3                    	jmp rbx
  1054 00000903 C9                      	leave
  1055 00000904 C21800                  	ret 8 * (2 + 1)
  1056                                  .L_lambda_simple_end_372b:	; new closure is in rax
  1057 00000907 48890425[D0010000]      	mov qword [free_var_58], rax
  1058 0000090F 48B8-                   	mov rax, sob_void
  1058 00000911 [0000000000000000] 
  1059                                  
  1060 00000919 4889C7                  	mov rdi, rax
  1061 0000091C E8BE150100              	call print_sexpr_if_not_void
  1062                                  
  1063 00000921 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1064 00000926 E8A3150100              	call malloc
  1065 0000092B 50                      	push rax
  1066 0000092C BF00000000              	mov rdi, 8 * 0	; new rib
  1067 00000931 E898150100              	call malloc
  1068 00000936 50                      	push rax
  1069 00000937 BF08000000              	mov rdi, 8 * 1	; extended env
  1070 0000093C E88D150100              	call malloc
  1071 00000941 488B7D10                	mov rdi, ENV
  1072 00000945 BE00000000              	mov rsi, 0
  1073 0000094A BA01000000              	mov rdx, 1
  1074                                  .L_lambda_simple_env_loop_372c:	; ext_env[i + 1] <-- env[i]
  1075 0000094F 4883FE00                	cmp rsi, 0
  1076 00000953 7410                    	je .L_lambda_simple_env_end_372c
  1077 00000955 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1078 00000959 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1079 0000095D 48FFC6                  	inc rsi
  1080 00000960 48FFC2                  	inc rdx
  1081 00000963 EBEA                    	jmp .L_lambda_simple_env_loop_372c
  1082                                  .L_lambda_simple_env_end_372c:
  1083 00000965 5B                      	pop rbx
  1084 00000966 BE00000000              	mov rsi, 0
  1085                                  .L_lambda_simple_params_loop_372c:	; copy params
  1086 0000096B 4883FE00                	cmp rsi, 0
  1087 0000096F 740E                    	je .L_lambda_simple_params_end_372c
  1088 00000971 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1089 00000976 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1090 0000097A 48FFC6                  	inc rsi
  1091 0000097D EBEC                    	jmp .L_lambda_simple_params_loop_372c
  1092                                  .L_lambda_simple_params_end_372c:
  1093 0000097F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1094 00000982 4889C3                  	mov rbx, rax
  1095 00000985 58                      	pop rax
  1096 00000986 C60005                  	mov byte [rax], T_closure
  1097 00000989 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1098 0000098D 48C74009[9A090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_372c
  1099 00000995 E9A4000000              	jmp .L_lambda_simple_end_372c
  1100                                  .L_lambda_simple_code_372c:	; lambda-simple body
  1101 0000099A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1102 000009A0 740B                    	je .L_lambda_simple_arity_check_ok_372c
  1103 000009A2 FF742410                	push qword [rsp + 8 * 2]
  1104 000009A6 6A01                    	push 1
  1105 000009A8 E9DA140100              	jmp L_error_incorrect_arity_simple
  1106                                  .L_lambda_simple_arity_check_ok_372c:
  1107 000009AD C8000000                	enter 0, 0
  1108 000009B1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1109 000009B5 50                      	push rax
  1110 000009B6 6A01                    	push 1
  1111 000009B8 488B0425[88000000]      	mov rax, qword [free_var_17]
  1112                                  	assert_closure(rax)
    42 000009C0 803805              <1>  cmp byte [%1], %2
    43 000009C3 0F85F92C0100        <1>  jne L_error_incorrect_type
  1113 000009C9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1114 000009CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  1115 000009CF 50                      	push rax
  1116 000009D0 6A01                    	push 1
  1117 000009D2 488B0425[88000000]      	mov rax, qword [free_var_17]
  1118                                  .L_applic_TC_3fc8:
  1119 000009DA 803805                  	cmp byte [rax], T_closure
  1120 000009DD 0F85A0240100            	jne L_code_ptr_error
  1121 000009E3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1122 000009E7 53                      	push rbx
  1123 000009E8 FF7508                  	push qword [rbp + 8]
  1124 000009EB FF7500                  	push qword [rbp]
  1125 000009EE 488B4D18                	mov rcx, [rbp + 3 * 8]
  1126 000009F2 488B542418              	mov rdx, [rsp + 3 * 8]
  1127 000009F7 488D7204                	lea rsi, [rdx + 4]
  1128 000009FB 4C8D4EFF                	lea r9, [rsi - 1]
  1129 000009FF 488D7903                	lea rdi, [rcx + 3]
  1130 00000A03 4D31C0                  	xor r8, r8
  1131                                  .L_tc_recycle_frame_loop_3fc8:
  1132 00000A06 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1133 00000A0A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1134 00000A0F 49FFC9                  	dec r9
  1135 00000A12 4D31C0                  	xor r8, r8
  1136 00000A15 48FFCF                  	dec rdi
  1137 00000A18 48FFCE                  	dec rsi
  1138 00000A1B 4883FE00                	cmp rsi, 0
  1139 00000A1F 75E5                    	jne .L_tc_recycle_frame_loop_3fc8
  1140                                  .L_tc_recycle_frame_done_3fc8:
  1141                                  ;this pop rbp in sot to the right place
  1142 00000A21 4989C9                  	mov r9, rcx
  1143 00000A24 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1144 00000A2C 4C01CC                  	add rsp, r9
  1145 00000A2F 5D                      	pop rbp
  1146 00000A30 488B4D00                	mov rcx, qword [rbp]
  1147 00000A34 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1148 00000A38 FFE3                    	jmp rbx
  1149 00000A3A C9                      	leave
  1150 00000A3B C21800                  	ret 8 * (2 + 1)
  1151                                  .L_lambda_simple_end_372c:	; new closure is in rax
  1152 00000A3E 48890425[D8010000]      	mov qword [free_var_59], rax
  1153 00000A46 48B8-                   	mov rax, sob_void
  1153 00000A48 [0000000000000000] 
  1154                                  
  1155 00000A50 4889C7                  	mov rdi, rax
  1156 00000A53 E887140100              	call print_sexpr_if_not_void
  1157                                  
  1158 00000A58 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1159 00000A5D E86C140100              	call malloc
  1160 00000A62 50                      	push rax
  1161 00000A63 BF00000000              	mov rdi, 8 * 0	; new rib
  1162 00000A68 E861140100              	call malloc
  1163 00000A6D 50                      	push rax
  1164 00000A6E BF08000000              	mov rdi, 8 * 1	; extended env
  1165 00000A73 E856140100              	call malloc
  1166 00000A78 488B7D10                	mov rdi, ENV
  1167 00000A7C BE00000000              	mov rsi, 0
  1168 00000A81 BA01000000              	mov rdx, 1
  1169                                  .L_lambda_simple_env_loop_372d:	; ext_env[i + 1] <-- env[i]
  1170 00000A86 4883FE00                	cmp rsi, 0
  1171 00000A8A 7410                    	je .L_lambda_simple_env_end_372d
  1172 00000A8C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1173 00000A90 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1174 00000A94 48FFC6                  	inc rsi
  1175 00000A97 48FFC2                  	inc rdx
  1176 00000A9A EBEA                    	jmp .L_lambda_simple_env_loop_372d
  1177                                  .L_lambda_simple_env_end_372d:
  1178 00000A9C 5B                      	pop rbx
  1179 00000A9D BE00000000              	mov rsi, 0
  1180                                  .L_lambda_simple_params_loop_372d:	; copy params
  1181 00000AA2 4883FE00                	cmp rsi, 0
  1182 00000AA6 740E                    	je .L_lambda_simple_params_end_372d
  1183 00000AA8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1184 00000AAD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1185 00000AB1 48FFC6                  	inc rsi
  1186 00000AB4 EBEC                    	jmp .L_lambda_simple_params_loop_372d
  1187                                  .L_lambda_simple_params_end_372d:
  1188 00000AB6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1189 00000AB9 4889C3                  	mov rbx, rax
  1190 00000ABC 58                      	pop rax
  1191 00000ABD C60005                  	mov byte [rax], T_closure
  1192 00000AC0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1193 00000AC4 48C74009[D10A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_372d
  1194 00000ACC E9A4000000              	jmp .L_lambda_simple_end_372d
  1195                                  .L_lambda_simple_code_372d:	; lambda-simple body
  1196 00000AD1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1197 00000AD7 740B                    	je .L_lambda_simple_arity_check_ok_372d
  1198 00000AD9 FF742410                	push qword [rsp + 8 * 2]
  1199 00000ADD 6A01                    	push 1
  1200 00000ADF E9A3130100              	jmp L_error_incorrect_arity_simple
  1201                                  .L_lambda_simple_arity_check_ok_372d:
  1202 00000AE4 C8000000                	enter 0, 0
  1203 00000AE8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1204 00000AEC 50                      	push rax
  1205 00000AED 6A01                    	push 1
  1206 00000AEF 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1207                                  	assert_closure(rax)
    42 00000AF7 803805              <1>  cmp byte [%1], %2
    43 00000AFA 0F85C22B0100        <1>  jne L_error_incorrect_type
  1208 00000B00 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1209 00000B03 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1210 00000B06 50                      	push rax
  1211 00000B07 6A01                    	push 1
  1212 00000B09 488B0425[80000000]      	mov rax, qword [free_var_16]
  1213                                  .L_applic_TC_3fc9:
  1214 00000B11 803805                  	cmp byte [rax], T_closure
  1215 00000B14 0F8569230100            	jne L_code_ptr_error
  1216 00000B1A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1217 00000B1E 53                      	push rbx
  1218 00000B1F FF7508                  	push qword [rbp + 8]
  1219 00000B22 FF7500                  	push qword [rbp]
  1220 00000B25 488B4D18                	mov rcx, [rbp + 3 * 8]
  1221 00000B29 488B542418              	mov rdx, [rsp + 3 * 8]
  1222 00000B2E 488D7204                	lea rsi, [rdx + 4]
  1223 00000B32 4C8D4EFF                	lea r9, [rsi - 1]
  1224 00000B36 488D7903                	lea rdi, [rcx + 3]
  1225 00000B3A 4D31C0                  	xor r8, r8
  1226                                  .L_tc_recycle_frame_loop_3fc9:
  1227 00000B3D 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1228 00000B41 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1229 00000B46 49FFC9                  	dec r9
  1230 00000B49 4D31C0                  	xor r8, r8
  1231 00000B4C 48FFCF                  	dec rdi
  1232 00000B4F 48FFCE                  	dec rsi
  1233 00000B52 4883FE00                	cmp rsi, 0
  1234 00000B56 75E5                    	jne .L_tc_recycle_frame_loop_3fc9
  1235                                  .L_tc_recycle_frame_done_3fc9:
  1236                                  ;this pop rbp in sot to the right place
  1237 00000B58 4989C9                  	mov r9, rcx
  1238 00000B5B 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1239 00000B63 4C01CC                  	add rsp, r9
  1240 00000B66 5D                      	pop rbp
  1241 00000B67 488B4D00                	mov rcx, qword [rbp]
  1242 00000B6B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1243 00000B6F FFE3                    	jmp rbx
  1244 00000B71 C9                      	leave
  1245 00000B72 C21800                  	ret 8 * (2 + 1)
  1246                                  .L_lambda_simple_end_372d:	; new closure is in rax
  1247 00000B75 48890425[E0010000]      	mov qword [free_var_60], rax
  1248 00000B7D 48B8-                   	mov rax, sob_void
  1248 00000B7F [0000000000000000] 
  1249                                  
  1250 00000B87 4889C7                  	mov rdi, rax
  1251 00000B8A E850130100              	call print_sexpr_if_not_void
  1252                                  
  1253 00000B8F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1254 00000B94 E835130100              	call malloc
  1255 00000B99 50                      	push rax
  1256 00000B9A BF00000000              	mov rdi, 8 * 0	; new rib
  1257 00000B9F E82A130100              	call malloc
  1258 00000BA4 50                      	push rax
  1259 00000BA5 BF08000000              	mov rdi, 8 * 1	; extended env
  1260 00000BAA E81F130100              	call malloc
  1261 00000BAF 488B7D10                	mov rdi, ENV
  1262 00000BB3 BE00000000              	mov rsi, 0
  1263 00000BB8 BA01000000              	mov rdx, 1
  1264                                  .L_lambda_simple_env_loop_372e:	; ext_env[i + 1] <-- env[i]
  1265 00000BBD 4883FE00                	cmp rsi, 0
  1266 00000BC1 7410                    	je .L_lambda_simple_env_end_372e
  1267 00000BC3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1268 00000BC7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1269 00000BCB 48FFC6                  	inc rsi
  1270 00000BCE 48FFC2                  	inc rdx
  1271 00000BD1 EBEA                    	jmp .L_lambda_simple_env_loop_372e
  1272                                  .L_lambda_simple_env_end_372e:
  1273 00000BD3 5B                      	pop rbx
  1274 00000BD4 BE00000000              	mov rsi, 0
  1275                                  .L_lambda_simple_params_loop_372e:	; copy params
  1276 00000BD9 4883FE00                	cmp rsi, 0
  1277 00000BDD 740E                    	je .L_lambda_simple_params_end_372e
  1278 00000BDF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1279 00000BE4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1280 00000BE8 48FFC6                  	inc rsi
  1281 00000BEB EBEC                    	jmp .L_lambda_simple_params_loop_372e
  1282                                  .L_lambda_simple_params_end_372e:
  1283 00000BED 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1284 00000BF0 4889C3                  	mov rbx, rax
  1285 00000BF3 58                      	pop rax
  1286 00000BF4 C60005                  	mov byte [rax], T_closure
  1287 00000BF7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1288 00000BFB 48C74009[080C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_372e
  1289 00000C03 E9A4000000              	jmp .L_lambda_simple_end_372e
  1290                                  .L_lambda_simple_code_372e:	; lambda-simple body
  1291 00000C08 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1292 00000C0E 740B                    	je .L_lambda_simple_arity_check_ok_372e
  1293 00000C10 FF742410                	push qword [rsp + 8 * 2]
  1294 00000C14 6A01                    	push 1
  1295 00000C16 E96C120100              	jmp L_error_incorrect_arity_simple
  1296                                  .L_lambda_simple_arity_check_ok_372e:
  1297 00000C1B C8000000                	enter 0, 0
  1298 00000C1F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1299 00000C23 50                      	push rax
  1300 00000C24 6A01                    	push 1
  1301 00000C26 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1302                                  	assert_closure(rax)
    42 00000C2E 803805              <1>  cmp byte [%1], %2
    43 00000C31 0F858B2A0100        <1>  jne L_error_incorrect_type
  1303 00000C37 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1304 00000C3A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1305 00000C3D 50                      	push rax
  1306 00000C3E 6A01                    	push 1
  1307 00000C40 488B0425[80000000]      	mov rax, qword [free_var_16]
  1308                                  .L_applic_TC_3fca:
  1309 00000C48 803805                  	cmp byte [rax], T_closure
  1310 00000C4B 0F8532220100            	jne L_code_ptr_error
  1311 00000C51 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1312 00000C55 53                      	push rbx
  1313 00000C56 FF7508                  	push qword [rbp + 8]
  1314 00000C59 FF7500                  	push qword [rbp]
  1315 00000C5C 488B4D18                	mov rcx, [rbp + 3 * 8]
  1316 00000C60 488B542418              	mov rdx, [rsp + 3 * 8]
  1317 00000C65 488D7204                	lea rsi, [rdx + 4]
  1318 00000C69 4C8D4EFF                	lea r9, [rsi - 1]
  1319 00000C6D 488D7903                	lea rdi, [rcx + 3]
  1320 00000C71 4D31C0                  	xor r8, r8
  1321                                  .L_tc_recycle_frame_loop_3fca:
  1322 00000C74 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1323 00000C78 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1324 00000C7D 49FFC9                  	dec r9
  1325 00000C80 4D31C0                  	xor r8, r8
  1326 00000C83 48FFCF                  	dec rdi
  1327 00000C86 48FFCE                  	dec rsi
  1328 00000C89 4883FE00                	cmp rsi, 0
  1329 00000C8D 75E5                    	jne .L_tc_recycle_frame_loop_3fca
  1330                                  .L_tc_recycle_frame_done_3fca:
  1331                                  ;this pop rbp in sot to the right place
  1332 00000C8F 4989C9                  	mov r9, rcx
  1333 00000C92 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1334 00000C9A 4C01CC                  	add rsp, r9
  1335 00000C9D 5D                      	pop rbp
  1336 00000C9E 488B4D00                	mov rcx, qword [rbp]
  1337 00000CA2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1338 00000CA6 FFE3                    	jmp rbx
  1339 00000CA8 C9                      	leave
  1340 00000CA9 C21800                  	ret 8 * (2 + 1)
  1341                                  .L_lambda_simple_end_372e:	; new closure is in rax
  1342 00000CAC 48890425[E8010000]      	mov qword [free_var_61], rax
  1343 00000CB4 48B8-                   	mov rax, sob_void
  1343 00000CB6 [0000000000000000] 
  1344                                  
  1345 00000CBE 4889C7                  	mov rdi, rax
  1346 00000CC1 E819120100              	call print_sexpr_if_not_void
  1347                                  
  1348 00000CC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1349 00000CCB E8FE110100              	call malloc
  1350 00000CD0 50                      	push rax
  1351 00000CD1 BF00000000              	mov rdi, 8 * 0	; new rib
  1352 00000CD6 E8F3110100              	call malloc
  1353 00000CDB 50                      	push rax
  1354 00000CDC BF08000000              	mov rdi, 8 * 1	; extended env
  1355 00000CE1 E8E8110100              	call malloc
  1356 00000CE6 488B7D10                	mov rdi, ENV
  1357 00000CEA BE00000000              	mov rsi, 0
  1358 00000CEF BA01000000              	mov rdx, 1
  1359                                  .L_lambda_simple_env_loop_372f:	; ext_env[i + 1] <-- env[i]
  1360 00000CF4 4883FE00                	cmp rsi, 0
  1361 00000CF8 7410                    	je .L_lambda_simple_env_end_372f
  1362 00000CFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1363 00000CFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1364 00000D02 48FFC6                  	inc rsi
  1365 00000D05 48FFC2                  	inc rdx
  1366 00000D08 EBEA                    	jmp .L_lambda_simple_env_loop_372f
  1367                                  .L_lambda_simple_env_end_372f:
  1368 00000D0A 5B                      	pop rbx
  1369 00000D0B BE00000000              	mov rsi, 0
  1370                                  .L_lambda_simple_params_loop_372f:	; copy params
  1371 00000D10 4883FE00                	cmp rsi, 0
  1372 00000D14 740E                    	je .L_lambda_simple_params_end_372f
  1373 00000D16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1374 00000D1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1375 00000D1F 48FFC6                  	inc rsi
  1376 00000D22 EBEC                    	jmp .L_lambda_simple_params_loop_372f
  1377                                  .L_lambda_simple_params_end_372f:
  1378 00000D24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1379 00000D27 4889C3                  	mov rbx, rax
  1380 00000D2A 58                      	pop rax
  1381 00000D2B C60005                  	mov byte [rax], T_closure
  1382 00000D2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1383 00000D32 48C74009[3F0D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_372f
  1384 00000D3A E9A4000000              	jmp .L_lambda_simple_end_372f
  1385                                  .L_lambda_simple_code_372f:	; lambda-simple body
  1386 00000D3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1387 00000D45 740B                    	je .L_lambda_simple_arity_check_ok_372f
  1388 00000D47 FF742410                	push qword [rsp + 8 * 2]
  1389 00000D4B 6A01                    	push 1
  1390 00000D4D E935110100              	jmp L_error_incorrect_arity_simple
  1391                                  .L_lambda_simple_arity_check_ok_372f:
  1392 00000D52 C8000000                	enter 0, 0
  1393 00000D56 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1394 00000D5A 50                      	push rax
  1395 00000D5B 6A01                    	push 1
  1396 00000D5D 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1397                                  	assert_closure(rax)
    42 00000D65 803805              <1>  cmp byte [%1], %2
    43 00000D68 0F8554290100        <1>  jne L_error_incorrect_type
  1398 00000D6E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1399 00000D71 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1400 00000D74 50                      	push rax
  1401 00000D75 6A01                    	push 1
  1402 00000D77 488B0425[80000000]      	mov rax, qword [free_var_16]
  1403                                  .L_applic_TC_3fcb:
  1404 00000D7F 803805                  	cmp byte [rax], T_closure
  1405 00000D82 0F85FB200100            	jne L_code_ptr_error
  1406 00000D88 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1407 00000D8C 53                      	push rbx
  1408 00000D8D FF7508                  	push qword [rbp + 8]
  1409 00000D90 FF7500                  	push qword [rbp]
  1410 00000D93 488B4D18                	mov rcx, [rbp + 3 * 8]
  1411 00000D97 488B542418              	mov rdx, [rsp + 3 * 8]
  1412 00000D9C 488D7204                	lea rsi, [rdx + 4]
  1413 00000DA0 4C8D4EFF                	lea r9, [rsi - 1]
  1414 00000DA4 488D7903                	lea rdi, [rcx + 3]
  1415 00000DA8 4D31C0                  	xor r8, r8
  1416                                  .L_tc_recycle_frame_loop_3fcb:
  1417 00000DAB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1418 00000DAF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1419 00000DB4 49FFC9                  	dec r9
  1420 00000DB7 4D31C0                  	xor r8, r8
  1421 00000DBA 48FFCF                  	dec rdi
  1422 00000DBD 48FFCE                  	dec rsi
  1423 00000DC0 4883FE00                	cmp rsi, 0
  1424 00000DC4 75E5                    	jne .L_tc_recycle_frame_loop_3fcb
  1425                                  .L_tc_recycle_frame_done_3fcb:
  1426                                  ;this pop rbp in sot to the right place
  1427 00000DC6 4989C9                  	mov r9, rcx
  1428 00000DC9 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1429 00000DD1 4C01CC                  	add rsp, r9
  1430 00000DD4 5D                      	pop rbp
  1431 00000DD5 488B4D00                	mov rcx, qword [rbp]
  1432 00000DD9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1433 00000DDD FFE3                    	jmp rbx
  1434 00000DDF C9                      	leave
  1435 00000DE0 C21800                  	ret 8 * (2 + 1)
  1436                                  .L_lambda_simple_end_372f:	; new closure is in rax
  1437 00000DE3 48890425[F0010000]      	mov qword [free_var_62], rax
  1438 00000DEB 48B8-                   	mov rax, sob_void
  1438 00000DED [0000000000000000] 
  1439                                  
  1440 00000DF5 4889C7                  	mov rdi, rax
  1441 00000DF8 E8E2100100              	call print_sexpr_if_not_void
  1442                                  
  1443 00000DFD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1444 00000E02 E8C7100100              	call malloc
  1445 00000E07 50                      	push rax
  1446 00000E08 BF00000000              	mov rdi, 8 * 0	; new rib
  1447 00000E0D E8BC100100              	call malloc
  1448 00000E12 50                      	push rax
  1449 00000E13 BF08000000              	mov rdi, 8 * 1	; extended env
  1450 00000E18 E8B1100100              	call malloc
  1451 00000E1D 488B7D10                	mov rdi, ENV
  1452 00000E21 BE00000000              	mov rsi, 0
  1453 00000E26 BA01000000              	mov rdx, 1
  1454                                  .L_lambda_simple_env_loop_3730:	; ext_env[i + 1] <-- env[i]
  1455 00000E2B 4883FE00                	cmp rsi, 0
  1456 00000E2F 7410                    	je .L_lambda_simple_env_end_3730
  1457 00000E31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1458 00000E35 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1459 00000E39 48FFC6                  	inc rsi
  1460 00000E3C 48FFC2                  	inc rdx
  1461 00000E3F EBEA                    	jmp .L_lambda_simple_env_loop_3730
  1462                                  .L_lambda_simple_env_end_3730:
  1463 00000E41 5B                      	pop rbx
  1464 00000E42 BE00000000              	mov rsi, 0
  1465                                  .L_lambda_simple_params_loop_3730:	; copy params
  1466 00000E47 4883FE00                	cmp rsi, 0
  1467 00000E4B 740E                    	je .L_lambda_simple_params_end_3730
  1468 00000E4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1469 00000E52 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1470 00000E56 48FFC6                  	inc rsi
  1471 00000E59 EBEC                    	jmp .L_lambda_simple_params_loop_3730
  1472                                  .L_lambda_simple_params_end_3730:
  1473 00000E5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1474 00000E5E 4889C3                  	mov rbx, rax
  1475 00000E61 58                      	pop rax
  1476 00000E62 C60005                  	mov byte [rax], T_closure
  1477 00000E65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1478 00000E69 48C74009[760E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3730
  1479 00000E71 E9A4000000              	jmp .L_lambda_simple_end_3730
  1480                                  .L_lambda_simple_code_3730:	; lambda-simple body
  1481 00000E76 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1482 00000E7C 740B                    	je .L_lambda_simple_arity_check_ok_3730
  1483 00000E7E FF742410                	push qword [rsp + 8 * 2]
  1484 00000E82 6A01                    	push 1
  1485 00000E84 E9FE0F0100              	jmp L_error_incorrect_arity_simple
  1486                                  .L_lambda_simple_arity_check_ok_3730:
  1487 00000E89 C8000000                	enter 0, 0
  1488 00000E8D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1489 00000E91 50                      	push rax
  1490 00000E92 6A01                    	push 1
  1491 00000E94 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1492                                  	assert_closure(rax)
    42 00000E9C 803805              <1>  cmp byte [%1], %2
    43 00000E9F 0F851D280100        <1>  jne L_error_incorrect_type
  1493 00000EA5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1494 00000EA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1495 00000EAB 50                      	push rax
  1496 00000EAC 6A01                    	push 1
  1497 00000EAE 488B0425[80000000]      	mov rax, qword [free_var_16]
  1498                                  .L_applic_TC_3fcc:
  1499 00000EB6 803805                  	cmp byte [rax], T_closure
  1500 00000EB9 0F85C41F0100            	jne L_code_ptr_error
  1501 00000EBF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1502 00000EC3 53                      	push rbx
  1503 00000EC4 FF7508                  	push qword [rbp + 8]
  1504 00000EC7 FF7500                  	push qword [rbp]
  1505 00000ECA 488B4D18                	mov rcx, [rbp + 3 * 8]
  1506 00000ECE 488B542418              	mov rdx, [rsp + 3 * 8]
  1507 00000ED3 488D7204                	lea rsi, [rdx + 4]
  1508 00000ED7 4C8D4EFF                	lea r9, [rsi - 1]
  1509 00000EDB 488D7903                	lea rdi, [rcx + 3]
  1510 00000EDF 4D31C0                  	xor r8, r8
  1511                                  .L_tc_recycle_frame_loop_3fcc:
  1512 00000EE2 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1513 00000EE6 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1514 00000EEB 49FFC9                  	dec r9
  1515 00000EEE 4D31C0                  	xor r8, r8
  1516 00000EF1 48FFCF                  	dec rdi
  1517 00000EF4 48FFCE                  	dec rsi
  1518 00000EF7 4883FE00                	cmp rsi, 0
  1519 00000EFB 75E5                    	jne .L_tc_recycle_frame_loop_3fcc
  1520                                  .L_tc_recycle_frame_done_3fcc:
  1521                                  ;this pop rbp in sot to the right place
  1522 00000EFD 4989C9                  	mov r9, rcx
  1523 00000F00 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1524 00000F08 4C01CC                  	add rsp, r9
  1525 00000F0B 5D                      	pop rbp
  1526 00000F0C 488B4D00                	mov rcx, qword [rbp]
  1527 00000F10 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1528 00000F14 FFE3                    	jmp rbx
  1529 00000F16 C9                      	leave
  1530 00000F17 C21800                  	ret 8 * (2 + 1)
  1531                                  .L_lambda_simple_end_3730:	; new closure is in rax
  1532 00000F1A 48890425[F8010000]      	mov qword [free_var_63], rax
  1533 00000F22 48B8-                   	mov rax, sob_void
  1533 00000F24 [0000000000000000] 
  1534                                  
  1535 00000F2C 4889C7                  	mov rdi, rax
  1536 00000F2F E8AB0F0100              	call print_sexpr_if_not_void
  1537                                  
  1538 00000F34 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1539 00000F39 E8900F0100              	call malloc
  1540 00000F3E 50                      	push rax
  1541 00000F3F BF00000000              	mov rdi, 8 * 0	; new rib
  1542 00000F44 E8850F0100              	call malloc
  1543 00000F49 50                      	push rax
  1544 00000F4A BF08000000              	mov rdi, 8 * 1	; extended env
  1545 00000F4F E87A0F0100              	call malloc
  1546 00000F54 488B7D10                	mov rdi, ENV
  1547 00000F58 BE00000000              	mov rsi, 0
  1548 00000F5D BA01000000              	mov rdx, 1
  1549                                  .L_lambda_simple_env_loop_3731:	; ext_env[i + 1] <-- env[i]
  1550 00000F62 4883FE00                	cmp rsi, 0
  1551 00000F66 7410                    	je .L_lambda_simple_env_end_3731
  1552 00000F68 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1553 00000F6C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1554 00000F70 48FFC6                  	inc rsi
  1555 00000F73 48FFC2                  	inc rdx
  1556 00000F76 EBEA                    	jmp .L_lambda_simple_env_loop_3731
  1557                                  .L_lambda_simple_env_end_3731:
  1558 00000F78 5B                      	pop rbx
  1559 00000F79 BE00000000              	mov rsi, 0
  1560                                  .L_lambda_simple_params_loop_3731:	; copy params
  1561 00000F7E 4883FE00                	cmp rsi, 0
  1562 00000F82 740E                    	je .L_lambda_simple_params_end_3731
  1563 00000F84 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1564 00000F89 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1565 00000F8D 48FFC6                  	inc rsi
  1566 00000F90 EBEC                    	jmp .L_lambda_simple_params_loop_3731
  1567                                  .L_lambda_simple_params_end_3731:
  1568 00000F92 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1569 00000F95 4889C3                  	mov rbx, rax
  1570 00000F98 58                      	pop rax
  1571 00000F99 C60005                  	mov byte [rax], T_closure
  1572 00000F9C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1573 00000FA0 48C74009[AD0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3731
  1574 00000FA8 E9A4000000              	jmp .L_lambda_simple_end_3731
  1575                                  .L_lambda_simple_code_3731:	; lambda-simple body
  1576 00000FAD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1577 00000FB3 740B                    	je .L_lambda_simple_arity_check_ok_3731
  1578 00000FB5 FF742410                	push qword [rsp + 8 * 2]
  1579 00000FB9 6A01                    	push 1
  1580 00000FBB E9C70E0100              	jmp L_error_incorrect_arity_simple
  1581                                  .L_lambda_simple_arity_check_ok_3731:
  1582 00000FC0 C8000000                	enter 0, 0
  1583 00000FC4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1584 00000FC8 50                      	push rax
  1585 00000FC9 6A01                    	push 1
  1586 00000FCB 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1587                                  	assert_closure(rax)
    42 00000FD3 803805              <1>  cmp byte [%1], %2
    43 00000FD6 0F85E6260100        <1>  jne L_error_incorrect_type
  1588 00000FDC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1589 00000FDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  1590 00000FE2 50                      	push rax
  1591 00000FE3 6A01                    	push 1
  1592 00000FE5 488B0425[88000000]      	mov rax, qword [free_var_17]
  1593                                  .L_applic_TC_3fcd:
  1594 00000FED 803805                  	cmp byte [rax], T_closure
  1595 00000FF0 0F858D1E0100            	jne L_code_ptr_error
  1596 00000FF6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1597 00000FFA 53                      	push rbx
  1598 00000FFB FF7508                  	push qword [rbp + 8]
  1599 00000FFE FF7500                  	push qword [rbp]
  1600 00001001 488B4D18                	mov rcx, [rbp + 3 * 8]
  1601 00001005 488B542418              	mov rdx, [rsp + 3 * 8]
  1602 0000100A 488D7204                	lea rsi, [rdx + 4]
  1603 0000100E 4C8D4EFF                	lea r9, [rsi - 1]
  1604 00001012 488D7903                	lea rdi, [rcx + 3]
  1605 00001016 4D31C0                  	xor r8, r8
  1606                                  .L_tc_recycle_frame_loop_3fcd:
  1607 00001019 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1608 0000101D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1609 00001022 49FFC9                  	dec r9
  1610 00001025 4D31C0                  	xor r8, r8
  1611 00001028 48FFCF                  	dec rdi
  1612 0000102B 48FFCE                  	dec rsi
  1613 0000102E 4883FE00                	cmp rsi, 0
  1614 00001032 75E5                    	jne .L_tc_recycle_frame_loop_3fcd
  1615                                  .L_tc_recycle_frame_done_3fcd:
  1616                                  ;this pop rbp in sot to the right place
  1617 00001034 4989C9                  	mov r9, rcx
  1618 00001037 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1619 0000103F 4C01CC                  	add rsp, r9
  1620 00001042 5D                      	pop rbp
  1621 00001043 488B4D00                	mov rcx, qword [rbp]
  1622 00001047 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1623 0000104B FFE3                    	jmp rbx
  1624 0000104D C9                      	leave
  1625 0000104E C21800                  	ret 8 * (2 + 1)
  1626                                  .L_lambda_simple_end_3731:	; new closure is in rax
  1627 00001051 48890425[00020000]      	mov qword [free_var_64], rax
  1628 00001059 48B8-                   	mov rax, sob_void
  1628 0000105B [0000000000000000] 
  1629                                  
  1630 00001063 4889C7                  	mov rdi, rax
  1631 00001066 E8740E0100              	call print_sexpr_if_not_void
  1632                                  
  1633 0000106B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1634 00001070 E8590E0100              	call malloc
  1635 00001075 50                      	push rax
  1636 00001076 BF00000000              	mov rdi, 8 * 0	; new rib
  1637 0000107B E84E0E0100              	call malloc
  1638 00001080 50                      	push rax
  1639 00001081 BF08000000              	mov rdi, 8 * 1	; extended env
  1640 00001086 E8430E0100              	call malloc
  1641 0000108B 488B7D10                	mov rdi, ENV
  1642 0000108F BE00000000              	mov rsi, 0
  1643 00001094 BA01000000              	mov rdx, 1
  1644                                  .L_lambda_simple_env_loop_3732:	; ext_env[i + 1] <-- env[i]
  1645 00001099 4883FE00                	cmp rsi, 0
  1646 0000109D 7410                    	je .L_lambda_simple_env_end_3732
  1647 0000109F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1648 000010A3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1649 000010A7 48FFC6                  	inc rsi
  1650 000010AA 48FFC2                  	inc rdx
  1651 000010AD EBEA                    	jmp .L_lambda_simple_env_loop_3732
  1652                                  .L_lambda_simple_env_end_3732:
  1653 000010AF 5B                      	pop rbx
  1654 000010B0 BE00000000              	mov rsi, 0
  1655                                  .L_lambda_simple_params_loop_3732:	; copy params
  1656 000010B5 4883FE00                	cmp rsi, 0
  1657 000010B9 740E                    	je .L_lambda_simple_params_end_3732
  1658 000010BB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1659 000010C0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1660 000010C4 48FFC6                  	inc rsi
  1661 000010C7 EBEC                    	jmp .L_lambda_simple_params_loop_3732
  1662                                  .L_lambda_simple_params_end_3732:
  1663 000010C9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1664 000010CC 4889C3                  	mov rbx, rax
  1665 000010CF 58                      	pop rax
  1666 000010D0 C60005                  	mov byte [rax], T_closure
  1667 000010D3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1668 000010D7 48C74009[E4100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3732
  1669 000010DF E9A4000000              	jmp .L_lambda_simple_end_3732
  1670                                  .L_lambda_simple_code_3732:	; lambda-simple body
  1671 000010E4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1672 000010EA 740B                    	je .L_lambda_simple_arity_check_ok_3732
  1673 000010EC FF742410                	push qword [rsp + 8 * 2]
  1674 000010F0 6A01                    	push 1
  1675 000010F2 E9900D0100              	jmp L_error_incorrect_arity_simple
  1676                                  .L_lambda_simple_arity_check_ok_3732:
  1677 000010F7 C8000000                	enter 0, 0
  1678 000010FB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1679 000010FF 50                      	push rax
  1680 00001100 6A01                    	push 1
  1681 00001102 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1682                                  	assert_closure(rax)
    42 0000110A 803805              <1>  cmp byte [%1], %2
    43 0000110D 0F85AF250100        <1>  jne L_error_incorrect_type
  1683 00001113 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1684 00001116 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1685 00001119 50                      	push rax
  1686 0000111A 6A01                    	push 1
  1687 0000111C 488B0425[88000000]      	mov rax, qword [free_var_17]
  1688                                  .L_applic_TC_3fce:
  1689 00001124 803805                  	cmp byte [rax], T_closure
  1690 00001127 0F85561D0100            	jne L_code_ptr_error
  1691 0000112D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1692 00001131 53                      	push rbx
  1693 00001132 FF7508                  	push qword [rbp + 8]
  1694 00001135 FF7500                  	push qword [rbp]
  1695 00001138 488B4D18                	mov rcx, [rbp + 3 * 8]
  1696 0000113C 488B542418              	mov rdx, [rsp + 3 * 8]
  1697 00001141 488D7204                	lea rsi, [rdx + 4]
  1698 00001145 4C8D4EFF                	lea r9, [rsi - 1]
  1699 00001149 488D7903                	lea rdi, [rcx + 3]
  1700 0000114D 4D31C0                  	xor r8, r8
  1701                                  .L_tc_recycle_frame_loop_3fce:
  1702 00001150 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1703 00001154 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1704 00001159 49FFC9                  	dec r9
  1705 0000115C 4D31C0                  	xor r8, r8
  1706 0000115F 48FFCF                  	dec rdi
  1707 00001162 48FFCE                  	dec rsi
  1708 00001165 4883FE00                	cmp rsi, 0
  1709 00001169 75E5                    	jne .L_tc_recycle_frame_loop_3fce
  1710                                  .L_tc_recycle_frame_done_3fce:
  1711                                  ;this pop rbp in sot to the right place
  1712 0000116B 4989C9                  	mov r9, rcx
  1713 0000116E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1714 00001176 4C01CC                  	add rsp, r9
  1715 00001179 5D                      	pop rbp
  1716 0000117A 488B4D00                	mov rcx, qword [rbp]
  1717 0000117E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1718 00001182 FFE3                    	jmp rbx
  1719 00001184 C9                      	leave
  1720 00001185 C21800                  	ret 8 * (2 + 1)
  1721                                  .L_lambda_simple_end_3732:	; new closure is in rax
  1722 00001188 48890425[08020000]      	mov qword [free_var_65], rax
  1723 00001190 48B8-                   	mov rax, sob_void
  1723 00001192 [0000000000000000] 
  1724                                  
  1725 0000119A 4889C7                  	mov rdi, rax
  1726 0000119D E83D0D0100              	call print_sexpr_if_not_void
  1727                                  
  1728 000011A2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1729 000011A7 E8220D0100              	call malloc
  1730 000011AC 50                      	push rax
  1731 000011AD BF00000000              	mov rdi, 8 * 0	; new rib
  1732 000011B2 E8170D0100              	call malloc
  1733 000011B7 50                      	push rax
  1734 000011B8 BF08000000              	mov rdi, 8 * 1	; extended env
  1735 000011BD E80C0D0100              	call malloc
  1736 000011C2 488B7D10                	mov rdi, ENV
  1737 000011C6 BE00000000              	mov rsi, 0
  1738 000011CB BA01000000              	mov rdx, 1
  1739                                  .L_lambda_simple_env_loop_3733:	; ext_env[i + 1] <-- env[i]
  1740 000011D0 4883FE00                	cmp rsi, 0
  1741 000011D4 7410                    	je .L_lambda_simple_env_end_3733
  1742 000011D6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1743 000011DA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1744 000011DE 48FFC6                  	inc rsi
  1745 000011E1 48FFC2                  	inc rdx
  1746 000011E4 EBEA                    	jmp .L_lambda_simple_env_loop_3733
  1747                                  .L_lambda_simple_env_end_3733:
  1748 000011E6 5B                      	pop rbx
  1749 000011E7 BE00000000              	mov rsi, 0
  1750                                  .L_lambda_simple_params_loop_3733:	; copy params
  1751 000011EC 4883FE00                	cmp rsi, 0
  1752 000011F0 740E                    	je .L_lambda_simple_params_end_3733
  1753 000011F2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1754 000011F7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1755 000011FB 48FFC6                  	inc rsi
  1756 000011FE EBEC                    	jmp .L_lambda_simple_params_loop_3733
  1757                                  .L_lambda_simple_params_end_3733:
  1758 00001200 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1759 00001203 4889C3                  	mov rbx, rax
  1760 00001206 58                      	pop rax
  1761 00001207 C60005                  	mov byte [rax], T_closure
  1762 0000120A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1763 0000120E 48C74009[1B120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3733
  1764 00001216 E9A4000000              	jmp .L_lambda_simple_end_3733
  1765                                  .L_lambda_simple_code_3733:	; lambda-simple body
  1766 0000121B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1767 00001221 740B                    	je .L_lambda_simple_arity_check_ok_3733
  1768 00001223 FF742410                	push qword [rsp + 8 * 2]
  1769 00001227 6A01                    	push 1
  1770 00001229 E9590C0100              	jmp L_error_incorrect_arity_simple
  1771                                  .L_lambda_simple_arity_check_ok_3733:
  1772 0000122E C8000000                	enter 0, 0
  1773 00001232 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1774 00001236 50                      	push rax
  1775 00001237 6A01                    	push 1
  1776 00001239 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1777                                  	assert_closure(rax)
    42 00001241 803805              <1>  cmp byte [%1], %2
    43 00001244 0F8578240100        <1>  jne L_error_incorrect_type
  1778 0000124A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1779 0000124D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1780 00001250 50                      	push rax
  1781 00001251 6A01                    	push 1
  1782 00001253 488B0425[88000000]      	mov rax, qword [free_var_17]
  1783                                  .L_applic_TC_3fcf:
  1784 0000125B 803805                  	cmp byte [rax], T_closure
  1785 0000125E 0F851F1C0100            	jne L_code_ptr_error
  1786 00001264 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1787 00001268 53                      	push rbx
  1788 00001269 FF7508                  	push qword [rbp + 8]
  1789 0000126C FF7500                  	push qword [rbp]
  1790 0000126F 488B4D18                	mov rcx, [rbp + 3 * 8]
  1791 00001273 488B542418              	mov rdx, [rsp + 3 * 8]
  1792 00001278 488D7204                	lea rsi, [rdx + 4]
  1793 0000127C 4C8D4EFF                	lea r9, [rsi - 1]
  1794 00001280 488D7903                	lea rdi, [rcx + 3]
  1795 00001284 4D31C0                  	xor r8, r8
  1796                                  .L_tc_recycle_frame_loop_3fcf:
  1797 00001287 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1798 0000128B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1799 00001290 49FFC9                  	dec r9
  1800 00001293 4D31C0                  	xor r8, r8
  1801 00001296 48FFCF                  	dec rdi
  1802 00001299 48FFCE                  	dec rsi
  1803 0000129C 4883FE00                	cmp rsi, 0
  1804 000012A0 75E5                    	jne .L_tc_recycle_frame_loop_3fcf
  1805                                  .L_tc_recycle_frame_done_3fcf:
  1806                                  ;this pop rbp in sot to the right place
  1807 000012A2 4989C9                  	mov r9, rcx
  1808 000012A5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1809 000012AD 4C01CC                  	add rsp, r9
  1810 000012B0 5D                      	pop rbp
  1811 000012B1 488B4D00                	mov rcx, qword [rbp]
  1812 000012B5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1813 000012B9 FFE3                    	jmp rbx
  1814 000012BB C9                      	leave
  1815 000012BC C21800                  	ret 8 * (2 + 1)
  1816                                  .L_lambda_simple_end_3733:	; new closure is in rax
  1817 000012BF 48890425[10020000]      	mov qword [free_var_66], rax
  1818 000012C7 48B8-                   	mov rax, sob_void
  1818 000012C9 [0000000000000000] 
  1819                                  
  1820 000012D1 4889C7                  	mov rdi, rax
  1821 000012D4 E8060C0100              	call print_sexpr_if_not_void
  1822                                  
  1823 000012D9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1824 000012DE E8EB0B0100              	call malloc
  1825 000012E3 50                      	push rax
  1826 000012E4 BF00000000              	mov rdi, 8 * 0	; new rib
  1827 000012E9 E8E00B0100              	call malloc
  1828 000012EE 50                      	push rax
  1829 000012EF BF08000000              	mov rdi, 8 * 1	; extended env
  1830 000012F4 E8D50B0100              	call malloc
  1831 000012F9 488B7D10                	mov rdi, ENV
  1832 000012FD BE00000000              	mov rsi, 0
  1833 00001302 BA01000000              	mov rdx, 1
  1834                                  .L_lambda_simple_env_loop_3734:	; ext_env[i + 1] <-- env[i]
  1835 00001307 4883FE00                	cmp rsi, 0
  1836 0000130B 7410                    	je .L_lambda_simple_env_end_3734
  1837 0000130D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1838 00001311 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1839 00001315 48FFC6                  	inc rsi
  1840 00001318 48FFC2                  	inc rdx
  1841 0000131B EBEA                    	jmp .L_lambda_simple_env_loop_3734
  1842                                  .L_lambda_simple_env_end_3734:
  1843 0000131D 5B                      	pop rbx
  1844 0000131E BE00000000              	mov rsi, 0
  1845                                  .L_lambda_simple_params_loop_3734:	; copy params
  1846 00001323 4883FE00                	cmp rsi, 0
  1847 00001327 740E                    	je .L_lambda_simple_params_end_3734
  1848 00001329 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1849 0000132E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1850 00001332 48FFC6                  	inc rsi
  1851 00001335 EBEC                    	jmp .L_lambda_simple_params_loop_3734
  1852                                  .L_lambda_simple_params_end_3734:
  1853 00001337 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1854 0000133A 4889C3                  	mov rbx, rax
  1855 0000133D 58                      	pop rax
  1856 0000133E C60005                  	mov byte [rax], T_closure
  1857 00001341 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1858 00001345 48C74009[52130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3734
  1859 0000134D E9A4000000              	jmp .L_lambda_simple_end_3734
  1860                                  .L_lambda_simple_code_3734:	; lambda-simple body
  1861 00001352 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1862 00001358 740B                    	je .L_lambda_simple_arity_check_ok_3734
  1863 0000135A FF742410                	push qword [rsp + 8 * 2]
  1864 0000135E 6A01                    	push 1
  1865 00001360 E9220B0100              	jmp L_error_incorrect_arity_simple
  1866                                  .L_lambda_simple_arity_check_ok_3734:
  1867 00001365 C8000000                	enter 0, 0
  1868 00001369 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1869 0000136D 50                      	push rax
  1870 0000136E 6A01                    	push 1
  1871 00001370 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1872                                  	assert_closure(rax)
    42 00001378 803805              <1>  cmp byte [%1], %2
    43 0000137B 0F8541230100        <1>  jne L_error_incorrect_type
  1873 00001381 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1874 00001384 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1875 00001387 50                      	push rax
  1876 00001388 6A01                    	push 1
  1877 0000138A 488B0425[88000000]      	mov rax, qword [free_var_17]
  1878                                  .L_applic_TC_3fd0:
  1879 00001392 803805                  	cmp byte [rax], T_closure
  1880 00001395 0F85E81A0100            	jne L_code_ptr_error
  1881 0000139B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1882 0000139F 53                      	push rbx
  1883 000013A0 FF7508                  	push qword [rbp + 8]
  1884 000013A3 FF7500                  	push qword [rbp]
  1885 000013A6 488B4D18                	mov rcx, [rbp + 3 * 8]
  1886 000013AA 488B542418              	mov rdx, [rsp + 3 * 8]
  1887 000013AF 488D7204                	lea rsi, [rdx + 4]
  1888 000013B3 4C8D4EFF                	lea r9, [rsi - 1]
  1889 000013B7 488D7903                	lea rdi, [rcx + 3]
  1890 000013BB 4D31C0                  	xor r8, r8
  1891                                  .L_tc_recycle_frame_loop_3fd0:
  1892 000013BE 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1893 000013C2 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1894 000013C7 49FFC9                  	dec r9
  1895 000013CA 4D31C0                  	xor r8, r8
  1896 000013CD 48FFCF                  	dec rdi
  1897 000013D0 48FFCE                  	dec rsi
  1898 000013D3 4883FE00                	cmp rsi, 0
  1899 000013D7 75E5                    	jne .L_tc_recycle_frame_loop_3fd0
  1900                                  .L_tc_recycle_frame_done_3fd0:
  1901                                  ;this pop rbp in sot to the right place
  1902 000013D9 4989C9                  	mov r9, rcx
  1903 000013DC 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1904 000013E4 4C01CC                  	add rsp, r9
  1905 000013E7 5D                      	pop rbp
  1906 000013E8 488B4D00                	mov rcx, qword [rbp]
  1907 000013EC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1908 000013F0 FFE3                    	jmp rbx
  1909 000013F2 C9                      	leave
  1910 000013F3 C21800                  	ret 8 * (2 + 1)
  1911                                  .L_lambda_simple_end_3734:	; new closure is in rax
  1912 000013F6 48890425[18020000]      	mov qword [free_var_67], rax
  1913 000013FE 48B8-                   	mov rax, sob_void
  1913 00001400 [0000000000000000] 
  1914                                  
  1915 00001408 4889C7                  	mov rdi, rax
  1916 0000140B E8CF0A0100              	call print_sexpr_if_not_void
  1917                                  
  1918 00001410 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1919 00001415 E8B40A0100              	call malloc
  1920 0000141A 50                      	push rax
  1921 0000141B BF00000000              	mov rdi, 8 * 0	; new rib
  1922 00001420 E8A90A0100              	call malloc
  1923 00001425 50                      	push rax
  1924 00001426 BF08000000              	mov rdi, 8 * 1	; extended env
  1925 0000142B E89E0A0100              	call malloc
  1926 00001430 488B7D10                	mov rdi, ENV
  1927 00001434 BE00000000              	mov rsi, 0
  1928 00001439 BA01000000              	mov rdx, 1
  1929                                  .L_lambda_simple_env_loop_3735:	; ext_env[i + 1] <-- env[i]
  1930 0000143E 4883FE00                	cmp rsi, 0
  1931 00001442 7410                    	je .L_lambda_simple_env_end_3735
  1932 00001444 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1933 00001448 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1934 0000144C 48FFC6                  	inc rsi
  1935 0000144F 48FFC2                  	inc rdx
  1936 00001452 EBEA                    	jmp .L_lambda_simple_env_loop_3735
  1937                                  .L_lambda_simple_env_end_3735:
  1938 00001454 5B                      	pop rbx
  1939 00001455 BE00000000              	mov rsi, 0
  1940                                  .L_lambda_simple_params_loop_3735:	; copy params
  1941 0000145A 4883FE00                	cmp rsi, 0
  1942 0000145E 740E                    	je .L_lambda_simple_params_end_3735
  1943 00001460 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1944 00001465 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1945 00001469 48FFC6                  	inc rsi
  1946 0000146C EBEC                    	jmp .L_lambda_simple_params_loop_3735
  1947                                  .L_lambda_simple_params_end_3735:
  1948 0000146E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1949 00001471 4889C3                  	mov rbx, rax
  1950 00001474 58                      	pop rax
  1951 00001475 C60005                  	mov byte [rax], T_closure
  1952 00001478 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1953 0000147C 48C74009[89140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3735
  1954 00001484 E9A4000000              	jmp .L_lambda_simple_end_3735
  1955                                  .L_lambda_simple_code_3735:	; lambda-simple body
  1956 00001489 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1957 0000148F 740B                    	je .L_lambda_simple_arity_check_ok_3735
  1958 00001491 FF742410                	push qword [rsp + 8 * 2]
  1959 00001495 6A01                    	push 1
  1960 00001497 E9EB090100              	jmp L_error_incorrect_arity_simple
  1961                                  .L_lambda_simple_arity_check_ok_3735:
  1962 0000149C C8000000                	enter 0, 0
  1963 000014A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1964 000014A4 50                      	push rax
  1965 000014A5 6A01                    	push 1
  1966 000014A7 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1967                                  	assert_closure(rax)
    42 000014AF 803805              <1>  cmp byte [%1], %2
    43 000014B2 0F850A220100        <1>  jne L_error_incorrect_type
  1968 000014B8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1969 000014BB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1970 000014BE 50                      	push rax
  1971 000014BF 6A01                    	push 1
  1972 000014C1 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1973                                  .L_applic_TC_3fd1:
  1974 000014C9 803805                  	cmp byte [rax], T_closure
  1975 000014CC 0F85B1190100            	jne L_code_ptr_error
  1976 000014D2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1977 000014D6 53                      	push rbx
  1978 000014D7 FF7508                  	push qword [rbp + 8]
  1979 000014DA FF7500                  	push qword [rbp]
  1980 000014DD 488B4D18                	mov rcx, [rbp + 3 * 8]
  1981 000014E1 488B542418              	mov rdx, [rsp + 3 * 8]
  1982 000014E6 488D7204                	lea rsi, [rdx + 4]
  1983 000014EA 4C8D4EFF                	lea r9, [rsi - 1]
  1984 000014EE 488D7903                	lea rdi, [rcx + 3]
  1985 000014F2 4D31C0                  	xor r8, r8
  1986                                  .L_tc_recycle_frame_loop_3fd1:
  1987 000014F5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1988 000014F9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1989 000014FE 49FFC9                  	dec r9
  1990 00001501 4D31C0                  	xor r8, r8
  1991 00001504 48FFCF                  	dec rdi
  1992 00001507 48FFCE                  	dec rsi
  1993 0000150A 4883FE00                	cmp rsi, 0
  1994 0000150E 75E5                    	jne .L_tc_recycle_frame_loop_3fd1
  1995                                  .L_tc_recycle_frame_done_3fd1:
  1996                                  ;this pop rbp in sot to the right place
  1997 00001510 4989C9                  	mov r9, rcx
  1998 00001513 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1999 0000151B 4C01CC                  	add rsp, r9
  2000 0000151E 5D                      	pop rbp
  2001 0000151F 488B4D00                	mov rcx, qword [rbp]
  2002 00001523 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2003 00001527 FFE3                    	jmp rbx
  2004 00001529 C9                      	leave
  2005 0000152A C21800                  	ret 8 * (2 + 1)
  2006                                  .L_lambda_simple_end_3735:	; new closure is in rax
  2007 0000152D 48890425[20020000]      	mov qword [free_var_68], rax
  2008 00001535 48B8-                   	mov rax, sob_void
  2008 00001537 [0000000000000000] 
  2009                                  
  2010 0000153F 4889C7                  	mov rdi, rax
  2011 00001542 E898090100              	call print_sexpr_if_not_void
  2012                                  
  2013 00001547 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2014 0000154C E87D090100              	call malloc
  2015 00001551 50                      	push rax
  2016 00001552 BF00000000              	mov rdi, 8 * 0	; new rib
  2017 00001557 E872090100              	call malloc
  2018 0000155C 50                      	push rax
  2019 0000155D BF08000000              	mov rdi, 8 * 1	; extended env
  2020 00001562 E867090100              	call malloc
  2021 00001567 488B7D10                	mov rdi, ENV
  2022 0000156B BE00000000              	mov rsi, 0
  2023 00001570 BA01000000              	mov rdx, 1
  2024                                  .L_lambda_simple_env_loop_3736:	; ext_env[i + 1] <-- env[i]
  2025 00001575 4883FE00                	cmp rsi, 0
  2026 00001579 7410                    	je .L_lambda_simple_env_end_3736
  2027 0000157B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2028 0000157F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2029 00001583 48FFC6                  	inc rsi
  2030 00001586 48FFC2                  	inc rdx
  2031 00001589 EBEA                    	jmp .L_lambda_simple_env_loop_3736
  2032                                  .L_lambda_simple_env_end_3736:
  2033 0000158B 5B                      	pop rbx
  2034 0000158C BE00000000              	mov rsi, 0
  2035                                  .L_lambda_simple_params_loop_3736:	; copy params
  2036 00001591 4883FE00                	cmp rsi, 0
  2037 00001595 740E                    	je .L_lambda_simple_params_end_3736
  2038 00001597 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2039 0000159C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2040 000015A0 48FFC6                  	inc rsi
  2041 000015A3 EBEC                    	jmp .L_lambda_simple_params_loop_3736
  2042                                  .L_lambda_simple_params_end_3736:
  2043 000015A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2044 000015A8 4889C3                  	mov rbx, rax
  2045 000015AB 58                      	pop rax
  2046 000015AC C60005                  	mov byte [rax], T_closure
  2047 000015AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2048 000015B3 48C74009[C0150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3736
  2049 000015BB E9A4000000              	jmp .L_lambda_simple_end_3736
  2050                                  .L_lambda_simple_code_3736:	; lambda-simple body
  2051 000015C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2052 000015C6 740B                    	je .L_lambda_simple_arity_check_ok_3736
  2053 000015C8 FF742410                	push qword [rsp + 8 * 2]
  2054 000015CC 6A01                    	push 1
  2055 000015CE E9B4080100              	jmp L_error_incorrect_arity_simple
  2056                                  .L_lambda_simple_arity_check_ok_3736:
  2057 000015D3 C8000000                	enter 0, 0
  2058 000015D7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2059 000015DB 50                      	push rax
  2060 000015DC 6A01                    	push 1
  2061 000015DE 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2062                                  	assert_closure(rax)
    42 000015E6 803805              <1>  cmp byte [%1], %2
    43 000015E9 0F85D3200100        <1>  jne L_error_incorrect_type
  2063 000015EF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2064 000015F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2065 000015F5 50                      	push rax
  2066 000015F6 6A01                    	push 1
  2067 000015F8 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2068                                  .L_applic_TC_3fd2:
  2069 00001600 803805                  	cmp byte [rax], T_closure
  2070 00001603 0F857A180100            	jne L_code_ptr_error
  2071 00001609 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2072 0000160D 53                      	push rbx
  2073 0000160E FF7508                  	push qword [rbp + 8]
  2074 00001611 FF7500                  	push qword [rbp]
  2075 00001614 488B4D18                	mov rcx, [rbp + 3 * 8]
  2076 00001618 488B542418              	mov rdx, [rsp + 3 * 8]
  2077 0000161D 488D7204                	lea rsi, [rdx + 4]
  2078 00001621 4C8D4EFF                	lea r9, [rsi - 1]
  2079 00001625 488D7903                	lea rdi, [rcx + 3]
  2080 00001629 4D31C0                  	xor r8, r8
  2081                                  .L_tc_recycle_frame_loop_3fd2:
  2082 0000162C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2083 00001630 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2084 00001635 49FFC9                  	dec r9
  2085 00001638 4D31C0                  	xor r8, r8
  2086 0000163B 48FFCF                  	dec rdi
  2087 0000163E 48FFCE                  	dec rsi
  2088 00001641 4883FE00                	cmp rsi, 0
  2089 00001645 75E5                    	jne .L_tc_recycle_frame_loop_3fd2
  2090                                  .L_tc_recycle_frame_done_3fd2:
  2091                                  ;this pop rbp in sot to the right place
  2092 00001647 4989C9                  	mov r9, rcx
  2093 0000164A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2094 00001652 4C01CC                  	add rsp, r9
  2095 00001655 5D                      	pop rbp
  2096 00001656 488B4D00                	mov rcx, qword [rbp]
  2097 0000165A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2098 0000165E FFE3                    	jmp rbx
  2099 00001660 C9                      	leave
  2100 00001661 C21800                  	ret 8 * (2 + 1)
  2101                                  .L_lambda_simple_end_3736:	; new closure is in rax
  2102 00001664 48890425[28020000]      	mov qword [free_var_69], rax
  2103 0000166C 48B8-                   	mov rax, sob_void
  2103 0000166E [0000000000000000] 
  2104                                  
  2105 00001676 4889C7                  	mov rdi, rax
  2106 00001679 E861080100              	call print_sexpr_if_not_void
  2107                                  
  2108 0000167E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2109 00001683 E846080100              	call malloc
  2110 00001688 50                      	push rax
  2111 00001689 BF00000000              	mov rdi, 8 * 0	; new rib
  2112 0000168E E83B080100              	call malloc
  2113 00001693 50                      	push rax
  2114 00001694 BF08000000              	mov rdi, 8 * 1	; extended env
  2115 00001699 E830080100              	call malloc
  2116 0000169E 488B7D10                	mov rdi, ENV
  2117 000016A2 BE00000000              	mov rsi, 0
  2118 000016A7 BA01000000              	mov rdx, 1
  2119                                  .L_lambda_simple_env_loop_3737:	; ext_env[i + 1] <-- env[i]
  2120 000016AC 4883FE00                	cmp rsi, 0
  2121 000016B0 7410                    	je .L_lambda_simple_env_end_3737
  2122 000016B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2123 000016B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2124 000016BA 48FFC6                  	inc rsi
  2125 000016BD 48FFC2                  	inc rdx
  2126 000016C0 EBEA                    	jmp .L_lambda_simple_env_loop_3737
  2127                                  .L_lambda_simple_env_end_3737:
  2128 000016C2 5B                      	pop rbx
  2129 000016C3 BE00000000              	mov rsi, 0
  2130                                  .L_lambda_simple_params_loop_3737:	; copy params
  2131 000016C8 4883FE00                	cmp rsi, 0
  2132 000016CC 740E                    	je .L_lambda_simple_params_end_3737
  2133 000016CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2134 000016D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2135 000016D7 48FFC6                  	inc rsi
  2136 000016DA EBEC                    	jmp .L_lambda_simple_params_loop_3737
  2137                                  .L_lambda_simple_params_end_3737:
  2138 000016DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2139 000016DF 4889C3                  	mov rbx, rax
  2140 000016E2 58                      	pop rax
  2141 000016E3 C60005                  	mov byte [rax], T_closure
  2142 000016E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2143 000016EA 48C74009[F7160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3737
  2144 000016F2 E9A4000000              	jmp .L_lambda_simple_end_3737
  2145                                  .L_lambda_simple_code_3737:	; lambda-simple body
  2146 000016F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2147 000016FD 740B                    	je .L_lambda_simple_arity_check_ok_3737
  2148 000016FF FF742410                	push qword [rsp + 8 * 2]
  2149 00001703 6A01                    	push 1
  2150 00001705 E97D070100              	jmp L_error_incorrect_arity_simple
  2151                                  .L_lambda_simple_arity_check_ok_3737:
  2152 0000170A C8000000                	enter 0, 0
  2153 0000170E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2154 00001712 50                      	push rax
  2155 00001713 6A01                    	push 1
  2156 00001715 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2157                                  	assert_closure(rax)
    42 0000171D 803805              <1>  cmp byte [%1], %2
    43 00001720 0F859C1F0100        <1>  jne L_error_incorrect_type
  2158 00001726 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2159 00001729 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2160 0000172C 50                      	push rax
  2161 0000172D 6A01                    	push 1
  2162 0000172F 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2163                                  .L_applic_TC_3fd3:
  2164 00001737 803805                  	cmp byte [rax], T_closure
  2165 0000173A 0F8543170100            	jne L_code_ptr_error
  2166 00001740 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2167 00001744 53                      	push rbx
  2168 00001745 FF7508                  	push qword [rbp + 8]
  2169 00001748 FF7500                  	push qword [rbp]
  2170 0000174B 488B4D18                	mov rcx, [rbp + 3 * 8]
  2171 0000174F 488B542418              	mov rdx, [rsp + 3 * 8]
  2172 00001754 488D7204                	lea rsi, [rdx + 4]
  2173 00001758 4C8D4EFF                	lea r9, [rsi - 1]
  2174 0000175C 488D7903                	lea rdi, [rcx + 3]
  2175 00001760 4D31C0                  	xor r8, r8
  2176                                  .L_tc_recycle_frame_loop_3fd3:
  2177 00001763 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2178 00001767 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2179 0000176C 49FFC9                  	dec r9
  2180 0000176F 4D31C0                  	xor r8, r8
  2181 00001772 48FFCF                  	dec rdi
  2182 00001775 48FFCE                  	dec rsi
  2183 00001778 4883FE00                	cmp rsi, 0
  2184 0000177C 75E5                    	jne .L_tc_recycle_frame_loop_3fd3
  2185                                  .L_tc_recycle_frame_done_3fd3:
  2186                                  ;this pop rbp in sot to the right place
  2187 0000177E 4989C9                  	mov r9, rcx
  2188 00001781 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2189 00001789 4C01CC                  	add rsp, r9
  2190 0000178C 5D                      	pop rbp
  2191 0000178D 488B4D00                	mov rcx, qword [rbp]
  2192 00001791 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2193 00001795 FFE3                    	jmp rbx
  2194 00001797 C9                      	leave
  2195 00001798 C21800                  	ret 8 * (2 + 1)
  2196                                  .L_lambda_simple_end_3737:	; new closure is in rax
  2197 0000179B 48890425[30020000]      	mov qword [free_var_70], rax
  2198 000017A3 48B8-                   	mov rax, sob_void
  2198 000017A5 [0000000000000000] 
  2199                                  
  2200 000017AD 4889C7                  	mov rdi, rax
  2201 000017B0 E82A070100              	call print_sexpr_if_not_void
  2202                                  
  2203 000017B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2204 000017BA E80F070100              	call malloc
  2205 000017BF 50                      	push rax
  2206 000017C0 BF00000000              	mov rdi, 8 * 0	; new rib
  2207 000017C5 E804070100              	call malloc
  2208 000017CA 50                      	push rax
  2209 000017CB BF08000000              	mov rdi, 8 * 1	; extended env
  2210 000017D0 E8F9060100              	call malloc
  2211 000017D5 488B7D10                	mov rdi, ENV
  2212 000017D9 BE00000000              	mov rsi, 0
  2213 000017DE BA01000000              	mov rdx, 1
  2214                                  .L_lambda_simple_env_loop_3738:	; ext_env[i + 1] <-- env[i]
  2215 000017E3 4883FE00                	cmp rsi, 0
  2216 000017E7 7410                    	je .L_lambda_simple_env_end_3738
  2217 000017E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2218 000017ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2219 000017F1 48FFC6                  	inc rsi
  2220 000017F4 48FFC2                  	inc rdx
  2221 000017F7 EBEA                    	jmp .L_lambda_simple_env_loop_3738
  2222                                  .L_lambda_simple_env_end_3738:
  2223 000017F9 5B                      	pop rbx
  2224 000017FA BE00000000              	mov rsi, 0
  2225                                  .L_lambda_simple_params_loop_3738:	; copy params
  2226 000017FF 4883FE00                	cmp rsi, 0
  2227 00001803 740E                    	je .L_lambda_simple_params_end_3738
  2228 00001805 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2229 0000180A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2230 0000180E 48FFC6                  	inc rsi
  2231 00001811 EBEC                    	jmp .L_lambda_simple_params_loop_3738
  2232                                  .L_lambda_simple_params_end_3738:
  2233 00001813 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2234 00001816 4889C3                  	mov rbx, rax
  2235 00001819 58                      	pop rax
  2236 0000181A C60005                  	mov byte [rax], T_closure
  2237 0000181D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2238 00001821 48C74009[2E180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3738
  2239 00001829 E9A4000000              	jmp .L_lambda_simple_end_3738
  2240                                  .L_lambda_simple_code_3738:	; lambda-simple body
  2241 0000182E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2242 00001834 740B                    	je .L_lambda_simple_arity_check_ok_3738
  2243 00001836 FF742410                	push qword [rsp + 8 * 2]
  2244 0000183A 6A01                    	push 1
  2245 0000183C E946060100              	jmp L_error_incorrect_arity_simple
  2246                                  .L_lambda_simple_arity_check_ok_3738:
  2247 00001841 C8000000                	enter 0, 0
  2248 00001845 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2249 00001849 50                      	push rax
  2250 0000184A 6A01                    	push 1
  2251 0000184C 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2252                                  	assert_closure(rax)
    42 00001854 803805              <1>  cmp byte [%1], %2
    43 00001857 0F85651E0100        <1>  jne L_error_incorrect_type
  2253 0000185D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2254 00001860 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2255 00001863 50                      	push rax
  2256 00001864 6A01                    	push 1
  2257 00001866 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2258                                  .L_applic_TC_3fd4:
  2259 0000186E 803805                  	cmp byte [rax], T_closure
  2260 00001871 0F850C160100            	jne L_code_ptr_error
  2261 00001877 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2262 0000187B 53                      	push rbx
  2263 0000187C FF7508                  	push qword [rbp + 8]
  2264 0000187F FF7500                  	push qword [rbp]
  2265 00001882 488B4D18                	mov rcx, [rbp + 3 * 8]
  2266 00001886 488B542418              	mov rdx, [rsp + 3 * 8]
  2267 0000188B 488D7204                	lea rsi, [rdx + 4]
  2268 0000188F 4C8D4EFF                	lea r9, [rsi - 1]
  2269 00001893 488D7903                	lea rdi, [rcx + 3]
  2270 00001897 4D31C0                  	xor r8, r8
  2271                                  .L_tc_recycle_frame_loop_3fd4:
  2272 0000189A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2273 0000189E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2274 000018A3 49FFC9                  	dec r9
  2275 000018A6 4D31C0                  	xor r8, r8
  2276 000018A9 48FFCF                  	dec rdi
  2277 000018AC 48FFCE                  	dec rsi
  2278 000018AF 4883FE00                	cmp rsi, 0
  2279 000018B3 75E5                    	jne .L_tc_recycle_frame_loop_3fd4
  2280                                  .L_tc_recycle_frame_done_3fd4:
  2281                                  ;this pop rbp in sot to the right place
  2282 000018B5 4989C9                  	mov r9, rcx
  2283 000018B8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2284 000018C0 4C01CC                  	add rsp, r9
  2285 000018C3 5D                      	pop rbp
  2286 000018C4 488B4D00                	mov rcx, qword [rbp]
  2287 000018C8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2288 000018CC FFE3                    	jmp rbx
  2289 000018CE C9                      	leave
  2290 000018CF C21800                  	ret 8 * (2 + 1)
  2291                                  .L_lambda_simple_end_3738:	; new closure is in rax
  2292 000018D2 48890425[38020000]      	mov qword [free_var_71], rax
  2293 000018DA 48B8-                   	mov rax, sob_void
  2293 000018DC [0000000000000000] 
  2294                                  
  2295 000018E4 4889C7                  	mov rdi, rax
  2296 000018E7 E8F3050100              	call print_sexpr_if_not_void
  2297                                  
  2298 000018EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2299 000018F1 E8D8050100              	call malloc
  2300 000018F6 50                      	push rax
  2301 000018F7 BF00000000              	mov rdi, 8 * 0	; new rib
  2302 000018FC E8CD050100              	call malloc
  2303 00001901 50                      	push rax
  2304 00001902 BF08000000              	mov rdi, 8 * 1	; extended env
  2305 00001907 E8C2050100              	call malloc
  2306 0000190C 488B7D10                	mov rdi, ENV
  2307 00001910 BE00000000              	mov rsi, 0
  2308 00001915 BA01000000              	mov rdx, 1
  2309                                  .L_lambda_simple_env_loop_3739:	; ext_env[i + 1] <-- env[i]
  2310 0000191A 4883FE00                	cmp rsi, 0
  2311 0000191E 7410                    	je .L_lambda_simple_env_end_3739
  2312 00001920 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2313 00001924 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2314 00001928 48FFC6                  	inc rsi
  2315 0000192B 48FFC2                  	inc rdx
  2316 0000192E EBEA                    	jmp .L_lambda_simple_env_loop_3739
  2317                                  .L_lambda_simple_env_end_3739:
  2318 00001930 5B                      	pop rbx
  2319 00001931 BE00000000              	mov rsi, 0
  2320                                  .L_lambda_simple_params_loop_3739:	; copy params
  2321 00001936 4883FE00                	cmp rsi, 0
  2322 0000193A 740E                    	je .L_lambda_simple_params_end_3739
  2323 0000193C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2324 00001941 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2325 00001945 48FFC6                  	inc rsi
  2326 00001948 EBEC                    	jmp .L_lambda_simple_params_loop_3739
  2327                                  .L_lambda_simple_params_end_3739:
  2328 0000194A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2329 0000194D 4889C3                  	mov rbx, rax
  2330 00001950 58                      	pop rax
  2331 00001951 C60005                  	mov byte [rax], T_closure
  2332 00001954 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2333 00001958 48C74009[65190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3739
  2334 00001960 E9A4000000              	jmp .L_lambda_simple_end_3739
  2335                                  .L_lambda_simple_code_3739:	; lambda-simple body
  2336 00001965 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2337 0000196B 740B                    	je .L_lambda_simple_arity_check_ok_3739
  2338 0000196D FF742410                	push qword [rsp + 8 * 2]
  2339 00001971 6A01                    	push 1
  2340 00001973 E90F050100              	jmp L_error_incorrect_arity_simple
  2341                                  .L_lambda_simple_arity_check_ok_3739:
  2342 00001978 C8000000                	enter 0, 0
  2343 0000197C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2344 00001980 50                      	push rax
  2345 00001981 6A01                    	push 1
  2346 00001983 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2347                                  	assert_closure(rax)
    42 0000198B 803805              <1>  cmp byte [%1], %2
    43 0000198E 0F852E1D0100        <1>  jne L_error_incorrect_type
  2348 00001994 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2349 00001997 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2350 0000199A 50                      	push rax
  2351 0000199B 6A01                    	push 1
  2352 0000199D 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2353                                  .L_applic_TC_3fd5:
  2354 000019A5 803805                  	cmp byte [rax], T_closure
  2355 000019A8 0F85D5140100            	jne L_code_ptr_error
  2356 000019AE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2357 000019B2 53                      	push rbx
  2358 000019B3 FF7508                  	push qword [rbp + 8]
  2359 000019B6 FF7500                  	push qword [rbp]
  2360 000019B9 488B4D18                	mov rcx, [rbp + 3 * 8]
  2361 000019BD 488B542418              	mov rdx, [rsp + 3 * 8]
  2362 000019C2 488D7204                	lea rsi, [rdx + 4]
  2363 000019C6 4C8D4EFF                	lea r9, [rsi - 1]
  2364 000019CA 488D7903                	lea rdi, [rcx + 3]
  2365 000019CE 4D31C0                  	xor r8, r8
  2366                                  .L_tc_recycle_frame_loop_3fd5:
  2367 000019D1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2368 000019D5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2369 000019DA 49FFC9                  	dec r9
  2370 000019DD 4D31C0                  	xor r8, r8
  2371 000019E0 48FFCF                  	dec rdi
  2372 000019E3 48FFCE                  	dec rsi
  2373 000019E6 4883FE00                	cmp rsi, 0
  2374 000019EA 75E5                    	jne .L_tc_recycle_frame_loop_3fd5
  2375                                  .L_tc_recycle_frame_done_3fd5:
  2376                                  ;this pop rbp in sot to the right place
  2377 000019EC 4989C9                  	mov r9, rcx
  2378 000019EF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2379 000019F7 4C01CC                  	add rsp, r9
  2380 000019FA 5D                      	pop rbp
  2381 000019FB 488B4D00                	mov rcx, qword [rbp]
  2382 000019FF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2383 00001A03 FFE3                    	jmp rbx
  2384 00001A05 C9                      	leave
  2385 00001A06 C21800                  	ret 8 * (2 + 1)
  2386                                  .L_lambda_simple_end_3739:	; new closure is in rax
  2387 00001A09 48890425[40020000]      	mov qword [free_var_72], rax
  2388 00001A11 48B8-                   	mov rax, sob_void
  2388 00001A13 [0000000000000000] 
  2389                                  
  2390 00001A1B 4889C7                  	mov rdi, rax
  2391 00001A1E E8BC040100              	call print_sexpr_if_not_void
  2392                                  
  2393 00001A23 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2394 00001A28 E8A1040100              	call malloc
  2395 00001A2D 50                      	push rax
  2396 00001A2E BF00000000              	mov rdi, 8 * 0	; new rib
  2397 00001A33 E896040100              	call malloc
  2398 00001A38 50                      	push rax
  2399 00001A39 BF08000000              	mov rdi, 8 * 1	; extended env
  2400 00001A3E E88B040100              	call malloc
  2401 00001A43 488B7D10                	mov rdi, ENV
  2402 00001A47 BE00000000              	mov rsi, 0
  2403 00001A4C BA01000000              	mov rdx, 1
  2404                                  .L_lambda_simple_env_loop_373a:	; ext_env[i + 1] <-- env[i]
  2405 00001A51 4883FE00                	cmp rsi, 0
  2406 00001A55 7410                    	je .L_lambda_simple_env_end_373a
  2407 00001A57 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2408 00001A5B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2409 00001A5F 48FFC6                  	inc rsi
  2410 00001A62 48FFC2                  	inc rdx
  2411 00001A65 EBEA                    	jmp .L_lambda_simple_env_loop_373a
  2412                                  .L_lambda_simple_env_end_373a:
  2413 00001A67 5B                      	pop rbx
  2414 00001A68 BE00000000              	mov rsi, 0
  2415                                  .L_lambda_simple_params_loop_373a:	; copy params
  2416 00001A6D 4883FE00                	cmp rsi, 0
  2417 00001A71 740E                    	je .L_lambda_simple_params_end_373a
  2418 00001A73 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2419 00001A78 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2420 00001A7C 48FFC6                  	inc rsi
  2421 00001A7F EBEC                    	jmp .L_lambda_simple_params_loop_373a
  2422                                  .L_lambda_simple_params_end_373a:
  2423 00001A81 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2424 00001A84 4889C3                  	mov rbx, rax
  2425 00001A87 58                      	pop rax
  2426 00001A88 C60005                  	mov byte [rax], T_closure
  2427 00001A8B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2428 00001A8F 48C74009[9C1A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_373a
  2429 00001A97 E9A4000000              	jmp .L_lambda_simple_end_373a
  2430                                  .L_lambda_simple_code_373a:	; lambda-simple body
  2431 00001A9C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2432 00001AA2 740B                    	je .L_lambda_simple_arity_check_ok_373a
  2433 00001AA4 FF742410                	push qword [rsp + 8 * 2]
  2434 00001AA8 6A01                    	push 1
  2435 00001AAA E9D8030100              	jmp L_error_incorrect_arity_simple
  2436                                  .L_lambda_simple_arity_check_ok_373a:
  2437 00001AAF C8000000                	enter 0, 0
  2438 00001AB3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2439 00001AB7 50                      	push rax
  2440 00001AB8 6A01                    	push 1
  2441 00001ABA 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2442                                  	assert_closure(rax)
    42 00001AC2 803805              <1>  cmp byte [%1], %2
    43 00001AC5 0F85F71B0100        <1>  jne L_error_incorrect_type
  2443 00001ACB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2444 00001ACE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2445 00001AD1 50                      	push rax
  2446 00001AD2 6A01                    	push 1
  2447 00001AD4 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2448                                  .L_applic_TC_3fd6:
  2449 00001ADC 803805                  	cmp byte [rax], T_closure
  2450 00001ADF 0F859E130100            	jne L_code_ptr_error
  2451 00001AE5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2452 00001AE9 53                      	push rbx
  2453 00001AEA FF7508                  	push qword [rbp + 8]
  2454 00001AED FF7500                  	push qword [rbp]
  2455 00001AF0 488B4D18                	mov rcx, [rbp + 3 * 8]
  2456 00001AF4 488B542418              	mov rdx, [rsp + 3 * 8]
  2457 00001AF9 488D7204                	lea rsi, [rdx + 4]
  2458 00001AFD 4C8D4EFF                	lea r9, [rsi - 1]
  2459 00001B01 488D7903                	lea rdi, [rcx + 3]
  2460 00001B05 4D31C0                  	xor r8, r8
  2461                                  .L_tc_recycle_frame_loop_3fd6:
  2462 00001B08 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2463 00001B0C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2464 00001B11 49FFC9                  	dec r9
  2465 00001B14 4D31C0                  	xor r8, r8
  2466 00001B17 48FFCF                  	dec rdi
  2467 00001B1A 48FFCE                  	dec rsi
  2468 00001B1D 4883FE00                	cmp rsi, 0
  2469 00001B21 75E5                    	jne .L_tc_recycle_frame_loop_3fd6
  2470                                  .L_tc_recycle_frame_done_3fd6:
  2471                                  ;this pop rbp in sot to the right place
  2472 00001B23 4989C9                  	mov r9, rcx
  2473 00001B26 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2474 00001B2E 4C01CC                  	add rsp, r9
  2475 00001B31 5D                      	pop rbp
  2476 00001B32 488B4D00                	mov rcx, qword [rbp]
  2477 00001B36 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2478 00001B3A FFE3                    	jmp rbx
  2479 00001B3C C9                      	leave
  2480 00001B3D C21800                  	ret 8 * (2 + 1)
  2481                                  .L_lambda_simple_end_373a:	; new closure is in rax
  2482 00001B40 48890425[48020000]      	mov qword [free_var_73], rax
  2483 00001B48 48B8-                   	mov rax, sob_void
  2483 00001B4A [0000000000000000] 
  2484                                  
  2485 00001B52 4889C7                  	mov rdi, rax
  2486 00001B55 E885030100              	call print_sexpr_if_not_void
  2487                                  
  2488 00001B5A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2489 00001B5F E86A030100              	call malloc
  2490 00001B64 50                      	push rax
  2491 00001B65 BF00000000              	mov rdi, 8 * 0	; new rib
  2492 00001B6A E85F030100              	call malloc
  2493 00001B6F 50                      	push rax
  2494 00001B70 BF08000000              	mov rdi, 8 * 1	; extended env
  2495 00001B75 E854030100              	call malloc
  2496 00001B7A 488B7D10                	mov rdi, ENV
  2497 00001B7E BE00000000              	mov rsi, 0
  2498 00001B83 BA01000000              	mov rdx, 1
  2499                                  .L_lambda_simple_env_loop_373b:	; ext_env[i + 1] <-- env[i]
  2500 00001B88 4883FE00                	cmp rsi, 0
  2501 00001B8C 7410                    	je .L_lambda_simple_env_end_373b
  2502 00001B8E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2503 00001B92 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2504 00001B96 48FFC6                  	inc rsi
  2505 00001B99 48FFC2                  	inc rdx
  2506 00001B9C EBEA                    	jmp .L_lambda_simple_env_loop_373b
  2507                                  .L_lambda_simple_env_end_373b:
  2508 00001B9E 5B                      	pop rbx
  2509 00001B9F BE00000000              	mov rsi, 0
  2510                                  .L_lambda_simple_params_loop_373b:	; copy params
  2511 00001BA4 4883FE00                	cmp rsi, 0
  2512 00001BA8 740E                    	je .L_lambda_simple_params_end_373b
  2513 00001BAA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2514 00001BAF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2515 00001BB3 48FFC6                  	inc rsi
  2516 00001BB6 EBEC                    	jmp .L_lambda_simple_params_loop_373b
  2517                                  .L_lambda_simple_params_end_373b:
  2518 00001BB8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2519 00001BBB 4889C3                  	mov rbx, rax
  2520 00001BBE 58                      	pop rax
  2521 00001BBF C60005                  	mov byte [rax], T_closure
  2522 00001BC2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2523 00001BC6 48C74009[D31B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_373b
  2524 00001BCE E9A4000000              	jmp .L_lambda_simple_end_373b
  2525                                  .L_lambda_simple_code_373b:	; lambda-simple body
  2526 00001BD3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2527 00001BD9 740B                    	je .L_lambda_simple_arity_check_ok_373b
  2528 00001BDB FF742410                	push qword [rsp + 8 * 2]
  2529 00001BDF 6A01                    	push 1
  2530 00001BE1 E9A1020100              	jmp L_error_incorrect_arity_simple
  2531                                  .L_lambda_simple_arity_check_ok_373b:
  2532 00001BE6 C8000000                	enter 0, 0
  2533 00001BEA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2534 00001BEE 50                      	push rax
  2535 00001BEF 6A01                    	push 1
  2536 00001BF1 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2537                                  	assert_closure(rax)
    42 00001BF9 803805              <1>  cmp byte [%1], %2
    43 00001BFC 0F85C01A0100        <1>  jne L_error_incorrect_type
  2538 00001C02 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2539 00001C05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2540 00001C08 50                      	push rax
  2541 00001C09 6A01                    	push 1
  2542 00001C0B 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2543                                  .L_applic_TC_3fd7:
  2544 00001C13 803805                  	cmp byte [rax], T_closure
  2545 00001C16 0F8567120100            	jne L_code_ptr_error
  2546 00001C1C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2547 00001C20 53                      	push rbx
  2548 00001C21 FF7508                  	push qword [rbp + 8]
  2549 00001C24 FF7500                  	push qword [rbp]
  2550 00001C27 488B4D18                	mov rcx, [rbp + 3 * 8]
  2551 00001C2B 488B542418              	mov rdx, [rsp + 3 * 8]
  2552 00001C30 488D7204                	lea rsi, [rdx + 4]
  2553 00001C34 4C8D4EFF                	lea r9, [rsi - 1]
  2554 00001C38 488D7903                	lea rdi, [rcx + 3]
  2555 00001C3C 4D31C0                  	xor r8, r8
  2556                                  .L_tc_recycle_frame_loop_3fd7:
  2557 00001C3F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2558 00001C43 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2559 00001C48 49FFC9                  	dec r9
  2560 00001C4B 4D31C0                  	xor r8, r8
  2561 00001C4E 48FFCF                  	dec rdi
  2562 00001C51 48FFCE                  	dec rsi
  2563 00001C54 4883FE00                	cmp rsi, 0
  2564 00001C58 75E5                    	jne .L_tc_recycle_frame_loop_3fd7
  2565                                  .L_tc_recycle_frame_done_3fd7:
  2566                                  ;this pop rbp in sot to the right place
  2567 00001C5A 4989C9                  	mov r9, rcx
  2568 00001C5D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2569 00001C65 4C01CC                  	add rsp, r9
  2570 00001C68 5D                      	pop rbp
  2571 00001C69 488B4D00                	mov rcx, qword [rbp]
  2572 00001C6D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2573 00001C71 FFE3                    	jmp rbx
  2574 00001C73 C9                      	leave
  2575 00001C74 C21800                  	ret 8 * (2 + 1)
  2576                                  .L_lambda_simple_end_373b:	; new closure is in rax
  2577 00001C77 48890425[50020000]      	mov qword [free_var_74], rax
  2578 00001C7F 48B8-                   	mov rax, sob_void
  2578 00001C81 [0000000000000000] 
  2579                                  
  2580 00001C89 4889C7                  	mov rdi, rax
  2581 00001C8C E84E020100              	call print_sexpr_if_not_void
  2582                                  
  2583 00001C91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2584 00001C96 E833020100              	call malloc
  2585 00001C9B 50                      	push rax
  2586 00001C9C BF00000000              	mov rdi, 8 * 0	; new rib
  2587 00001CA1 E828020100              	call malloc
  2588 00001CA6 50                      	push rax
  2589 00001CA7 BF08000000              	mov rdi, 8 * 1	; extended env
  2590 00001CAC E81D020100              	call malloc
  2591 00001CB1 488B7D10                	mov rdi, ENV
  2592 00001CB5 BE00000000              	mov rsi, 0
  2593 00001CBA BA01000000              	mov rdx, 1
  2594                                  .L_lambda_simple_env_loop_373c:	; ext_env[i + 1] <-- env[i]
  2595 00001CBF 4883FE00                	cmp rsi, 0
  2596 00001CC3 7410                    	je .L_lambda_simple_env_end_373c
  2597 00001CC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2598 00001CC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2599 00001CCD 48FFC6                  	inc rsi
  2600 00001CD0 48FFC2                  	inc rdx
  2601 00001CD3 EBEA                    	jmp .L_lambda_simple_env_loop_373c
  2602                                  .L_lambda_simple_env_end_373c:
  2603 00001CD5 5B                      	pop rbx
  2604 00001CD6 BE00000000              	mov rsi, 0
  2605                                  .L_lambda_simple_params_loop_373c:	; copy params
  2606 00001CDB 4883FE00                	cmp rsi, 0
  2607 00001CDF 740E                    	je .L_lambda_simple_params_end_373c
  2608 00001CE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2609 00001CE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2610 00001CEA 48FFC6                  	inc rsi
  2611 00001CED EBEC                    	jmp .L_lambda_simple_params_loop_373c
  2612                                  .L_lambda_simple_params_end_373c:
  2613 00001CEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2614 00001CF2 4889C3                  	mov rbx, rax
  2615 00001CF5 58                      	pop rax
  2616 00001CF6 C60005                  	mov byte [rax], T_closure
  2617 00001CF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2618 00001CFD 48C74009[0A1D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_373c
  2619 00001D05 E9A4000000              	jmp .L_lambda_simple_end_373c
  2620                                  .L_lambda_simple_code_373c:	; lambda-simple body
  2621 00001D0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2622 00001D10 740B                    	je .L_lambda_simple_arity_check_ok_373c
  2623 00001D12 FF742410                	push qword [rsp + 8 * 2]
  2624 00001D16 6A01                    	push 1
  2625 00001D18 E96A010100              	jmp L_error_incorrect_arity_simple
  2626                                  .L_lambda_simple_arity_check_ok_373c:
  2627 00001D1D C8000000                	enter 0, 0
  2628 00001D21 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2629 00001D25 50                      	push rax
  2630 00001D26 6A01                    	push 1
  2631 00001D28 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2632                                  	assert_closure(rax)
    42 00001D30 803805              <1>  cmp byte [%1], %2
    43 00001D33 0F8589190100        <1>  jne L_error_incorrect_type
  2633 00001D39 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2634 00001D3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2635 00001D3F 50                      	push rax
  2636 00001D40 6A01                    	push 1
  2637 00001D42 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2638                                  .L_applic_TC_3fd8:
  2639 00001D4A 803805                  	cmp byte [rax], T_closure
  2640 00001D4D 0F8530110100            	jne L_code_ptr_error
  2641 00001D53 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2642 00001D57 53                      	push rbx
  2643 00001D58 FF7508                  	push qword [rbp + 8]
  2644 00001D5B FF7500                  	push qword [rbp]
  2645 00001D5E 488B4D18                	mov rcx, [rbp + 3 * 8]
  2646 00001D62 488B542418              	mov rdx, [rsp + 3 * 8]
  2647 00001D67 488D7204                	lea rsi, [rdx + 4]
  2648 00001D6B 4C8D4EFF                	lea r9, [rsi - 1]
  2649 00001D6F 488D7903                	lea rdi, [rcx + 3]
  2650 00001D73 4D31C0                  	xor r8, r8
  2651                                  .L_tc_recycle_frame_loop_3fd8:
  2652 00001D76 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2653 00001D7A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2654 00001D7F 49FFC9                  	dec r9
  2655 00001D82 4D31C0                  	xor r8, r8
  2656 00001D85 48FFCF                  	dec rdi
  2657 00001D88 48FFCE                  	dec rsi
  2658 00001D8B 4883FE00                	cmp rsi, 0
  2659 00001D8F 75E5                    	jne .L_tc_recycle_frame_loop_3fd8
  2660                                  .L_tc_recycle_frame_done_3fd8:
  2661                                  ;this pop rbp in sot to the right place
  2662 00001D91 4989C9                  	mov r9, rcx
  2663 00001D94 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2664 00001D9C 4C01CC                  	add rsp, r9
  2665 00001D9F 5D                      	pop rbp
  2666 00001DA0 488B4D00                	mov rcx, qword [rbp]
  2667 00001DA4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2668 00001DA8 FFE3                    	jmp rbx
  2669 00001DAA C9                      	leave
  2670 00001DAB C21800                  	ret 8 * (2 + 1)
  2671                                  .L_lambda_simple_end_373c:	; new closure is in rax
  2672 00001DAE 48890425[58020000]      	mov qword [free_var_75], rax
  2673 00001DB6 48B8-                   	mov rax, sob_void
  2673 00001DB8 [0000000000000000] 
  2674                                  
  2675 00001DC0 4889C7                  	mov rdi, rax
  2676 00001DC3 E817010100              	call print_sexpr_if_not_void
  2677                                  
  2678 00001DC8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2679 00001DCD E8FC000100              	call malloc
  2680 00001DD2 50                      	push rax
  2681 00001DD3 BF00000000              	mov rdi, 8 * 0	; new rib
  2682 00001DD8 E8F1000100              	call malloc
  2683 00001DDD 50                      	push rax
  2684 00001DDE BF08000000              	mov rdi, 8 * 1	; extended env
  2685 00001DE3 E8E6000100              	call malloc
  2686 00001DE8 488B7D10                	mov rdi, ENV
  2687 00001DEC BE00000000              	mov rsi, 0
  2688 00001DF1 BA01000000              	mov rdx, 1
  2689                                  .L_lambda_simple_env_loop_373d:	; ext_env[i + 1] <-- env[i]
  2690 00001DF6 4883FE00                	cmp rsi, 0
  2691 00001DFA 7410                    	je .L_lambda_simple_env_end_373d
  2692 00001DFC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2693 00001E00 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2694 00001E04 48FFC6                  	inc rsi
  2695 00001E07 48FFC2                  	inc rdx
  2696 00001E0A EBEA                    	jmp .L_lambda_simple_env_loop_373d
  2697                                  .L_lambda_simple_env_end_373d:
  2698 00001E0C 5B                      	pop rbx
  2699 00001E0D BE00000000              	mov rsi, 0
  2700                                  .L_lambda_simple_params_loop_373d:	; copy params
  2701 00001E12 4883FE00                	cmp rsi, 0
  2702 00001E16 740E                    	je .L_lambda_simple_params_end_373d
  2703 00001E18 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2704 00001E1D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2705 00001E21 48FFC6                  	inc rsi
  2706 00001E24 EBEC                    	jmp .L_lambda_simple_params_loop_373d
  2707                                  .L_lambda_simple_params_end_373d:
  2708 00001E26 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2709 00001E29 4889C3                  	mov rbx, rax
  2710 00001E2C 58                      	pop rax
  2711 00001E2D C60005                  	mov byte [rax], T_closure
  2712 00001E30 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2713 00001E34 48C74009[411E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_373d
  2714 00001E3C E9A4000000              	jmp .L_lambda_simple_end_373d
  2715                                  .L_lambda_simple_code_373d:	; lambda-simple body
  2716 00001E41 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2717 00001E47 740B                    	je .L_lambda_simple_arity_check_ok_373d
  2718 00001E49 FF742410                	push qword [rsp + 8 * 2]
  2719 00001E4D 6A01                    	push 1
  2720 00001E4F E933000100              	jmp L_error_incorrect_arity_simple
  2721                                  .L_lambda_simple_arity_check_ok_373d:
  2722 00001E54 C8000000                	enter 0, 0
  2723 00001E58 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2724 00001E5C 50                      	push rax
  2725 00001E5D 6A01                    	push 1
  2726 00001E5F 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2727                                  	assert_closure(rax)
    42 00001E67 803805              <1>  cmp byte [%1], %2
    43 00001E6A 0F8552180100        <1>  jne L_error_incorrect_type
  2728 00001E70 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2729 00001E73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2730 00001E76 50                      	push rax
  2731 00001E77 6A01                    	push 1
  2732 00001E79 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2733                                  .L_applic_TC_3fd9:
  2734 00001E81 803805                  	cmp byte [rax], T_closure
  2735 00001E84 0F85F90F0100            	jne L_code_ptr_error
  2736 00001E8A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2737 00001E8E 53                      	push rbx
  2738 00001E8F FF7508                  	push qword [rbp + 8]
  2739 00001E92 FF7500                  	push qword [rbp]
  2740 00001E95 488B4D18                	mov rcx, [rbp + 3 * 8]
  2741 00001E99 488B542418              	mov rdx, [rsp + 3 * 8]
  2742 00001E9E 488D7204                	lea rsi, [rdx + 4]
  2743 00001EA2 4C8D4EFF                	lea r9, [rsi - 1]
  2744 00001EA6 488D7903                	lea rdi, [rcx + 3]
  2745 00001EAA 4D31C0                  	xor r8, r8
  2746                                  .L_tc_recycle_frame_loop_3fd9:
  2747 00001EAD 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2748 00001EB1 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2749 00001EB6 49FFC9                  	dec r9
  2750 00001EB9 4D31C0                  	xor r8, r8
  2751 00001EBC 48FFCF                  	dec rdi
  2752 00001EBF 48FFCE                  	dec rsi
  2753 00001EC2 4883FE00                	cmp rsi, 0
  2754 00001EC6 75E5                    	jne .L_tc_recycle_frame_loop_3fd9
  2755                                  .L_tc_recycle_frame_done_3fd9:
  2756                                  ;this pop rbp in sot to the right place
  2757 00001EC8 4989C9                  	mov r9, rcx
  2758 00001ECB 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2759 00001ED3 4C01CC                  	add rsp, r9
  2760 00001ED6 5D                      	pop rbp
  2761 00001ED7 488B4D00                	mov rcx, qword [rbp]
  2762 00001EDB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2763 00001EDF FFE3                    	jmp rbx
  2764 00001EE1 C9                      	leave
  2765 00001EE2 C21800                  	ret 8 * (2 + 1)
  2766                                  .L_lambda_simple_end_373d:	; new closure is in rax
  2767 00001EE5 48890425[60020000]      	mov qword [free_var_76], rax
  2768 00001EED 48B8-                   	mov rax, sob_void
  2768 00001EEF [0000000000000000] 
  2769                                  
  2770 00001EF7 4889C7                  	mov rdi, rax
  2771 00001EFA E8E0FF0000              	call print_sexpr_if_not_void
  2772                                  
  2773 00001EFF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2774 00001F04 E8C5FF0000              	call malloc
  2775 00001F09 50                      	push rax
  2776 00001F0A BF00000000              	mov rdi, 8 * 0	; new rib
  2777 00001F0F E8BAFF0000              	call malloc
  2778 00001F14 50                      	push rax
  2779 00001F15 BF08000000              	mov rdi, 8 * 1	; extended env
  2780 00001F1A E8AFFF0000              	call malloc
  2781 00001F1F 488B7D10                	mov rdi, ENV
  2782 00001F23 BE00000000              	mov rsi, 0
  2783 00001F28 BA01000000              	mov rdx, 1
  2784                                  .L_lambda_simple_env_loop_373e:	; ext_env[i + 1] <-- env[i]
  2785 00001F2D 4883FE00                	cmp rsi, 0
  2786 00001F31 7410                    	je .L_lambda_simple_env_end_373e
  2787 00001F33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2788 00001F37 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2789 00001F3B 48FFC6                  	inc rsi
  2790 00001F3E 48FFC2                  	inc rdx
  2791 00001F41 EBEA                    	jmp .L_lambda_simple_env_loop_373e
  2792                                  .L_lambda_simple_env_end_373e:
  2793 00001F43 5B                      	pop rbx
  2794 00001F44 BE00000000              	mov rsi, 0
  2795                                  .L_lambda_simple_params_loop_373e:	; copy params
  2796 00001F49 4883FE00                	cmp rsi, 0
  2797 00001F4D 740E                    	je .L_lambda_simple_params_end_373e
  2798 00001F4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2799 00001F54 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2800 00001F58 48FFC6                  	inc rsi
  2801 00001F5B EBEC                    	jmp .L_lambda_simple_params_loop_373e
  2802                                  .L_lambda_simple_params_end_373e:
  2803 00001F5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2804 00001F60 4889C3                  	mov rbx, rax
  2805 00001F63 58                      	pop rax
  2806 00001F64 C60005                  	mov byte [rax], T_closure
  2807 00001F67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2808 00001F6B 48C74009[781F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_373e
  2809 00001F73 E9A4000000              	jmp .L_lambda_simple_end_373e
  2810                                  .L_lambda_simple_code_373e:	; lambda-simple body
  2811 00001F78 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2812 00001F7E 740B                    	je .L_lambda_simple_arity_check_ok_373e
  2813 00001F80 FF742410                	push qword [rsp + 8 * 2]
  2814 00001F84 6A01                    	push 1
  2815 00001F86 E9FCFE0000              	jmp L_error_incorrect_arity_simple
  2816                                  .L_lambda_simple_arity_check_ok_373e:
  2817 00001F8B C8000000                	enter 0, 0
  2818 00001F8F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2819 00001F93 50                      	push rax
  2820 00001F94 6A01                    	push 1
  2821 00001F96 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2822                                  	assert_closure(rax)
    42 00001F9E 803805              <1>  cmp byte [%1], %2
    43 00001FA1 0F851B170100        <1>  jne L_error_incorrect_type
  2823 00001FA7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2824 00001FAA FF5009                  	call SOB_CLOSURE_CODE(rax)
  2825 00001FAD 50                      	push rax
  2826 00001FAE 6A01                    	push 1
  2827 00001FB0 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2828                                  .L_applic_TC_3fda:
  2829 00001FB8 803805                  	cmp byte [rax], T_closure
  2830 00001FBB 0F85C20E0100            	jne L_code_ptr_error
  2831 00001FC1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2832 00001FC5 53                      	push rbx
  2833 00001FC6 FF7508                  	push qword [rbp + 8]
  2834 00001FC9 FF7500                  	push qword [rbp]
  2835 00001FCC 488B4D18                	mov rcx, [rbp + 3 * 8]
  2836 00001FD0 488B542418              	mov rdx, [rsp + 3 * 8]
  2837 00001FD5 488D7204                	lea rsi, [rdx + 4]
  2838 00001FD9 4C8D4EFF                	lea r9, [rsi - 1]
  2839 00001FDD 488D7903                	lea rdi, [rcx + 3]
  2840 00001FE1 4D31C0                  	xor r8, r8
  2841                                  .L_tc_recycle_frame_loop_3fda:
  2842 00001FE4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2843 00001FE8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2844 00001FED 49FFC9                  	dec r9
  2845 00001FF0 4D31C0                  	xor r8, r8
  2846 00001FF3 48FFCF                  	dec rdi
  2847 00001FF6 48FFCE                  	dec rsi
  2848 00001FF9 4883FE00                	cmp rsi, 0
  2849 00001FFD 75E5                    	jne .L_tc_recycle_frame_loop_3fda
  2850                                  .L_tc_recycle_frame_done_3fda:
  2851                                  ;this pop rbp in sot to the right place
  2852 00001FFF 4989C9                  	mov r9, rcx
  2853 00002002 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2854 0000200A 4C01CC                  	add rsp, r9
  2855 0000200D 5D                      	pop rbp
  2856 0000200E 488B4D00                	mov rcx, qword [rbp]
  2857 00002012 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2858 00002016 FFE3                    	jmp rbx
  2859 00002018 C9                      	leave
  2860 00002019 C21800                  	ret 8 * (2 + 1)
  2861                                  .L_lambda_simple_end_373e:	; new closure is in rax
  2862 0000201C 48890425[68020000]      	mov qword [free_var_77], rax
  2863 00002024 48B8-                   	mov rax, sob_void
  2863 00002026 [0000000000000000] 
  2864                                  
  2865 0000202E 4889C7                  	mov rdi, rax
  2866 00002031 E8A9FE0000              	call print_sexpr_if_not_void
  2867                                  
  2868 00002036 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2869 0000203B E88EFE0000              	call malloc
  2870 00002040 50                      	push rax
  2871 00002041 BF00000000              	mov rdi, 8 * 0	; new rib
  2872 00002046 E883FE0000              	call malloc
  2873 0000204B 50                      	push rax
  2874 0000204C BF08000000              	mov rdi, 8 * 1	; extended env
  2875 00002051 E878FE0000              	call malloc
  2876 00002056 488B7D10                	mov rdi, ENV
  2877 0000205A BE00000000              	mov rsi, 0
  2878 0000205F BA01000000              	mov rdx, 1
  2879                                  .L_lambda_simple_env_loop_373f:	; ext_env[i + 1] <-- env[i]
  2880 00002064 4883FE00                	cmp rsi, 0
  2881 00002068 7410                    	je .L_lambda_simple_env_end_373f
  2882 0000206A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2883 0000206E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2884 00002072 48FFC6                  	inc rsi
  2885 00002075 48FFC2                  	inc rdx
  2886 00002078 EBEA                    	jmp .L_lambda_simple_env_loop_373f
  2887                                  .L_lambda_simple_env_end_373f:
  2888 0000207A 5B                      	pop rbx
  2889 0000207B BE00000000              	mov rsi, 0
  2890                                  .L_lambda_simple_params_loop_373f:	; copy params
  2891 00002080 4883FE00                	cmp rsi, 0
  2892 00002084 740E                    	je .L_lambda_simple_params_end_373f
  2893 00002086 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2894 0000208B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2895 0000208F 48FFC6                  	inc rsi
  2896 00002092 EBEC                    	jmp .L_lambda_simple_params_loop_373f
  2897                                  .L_lambda_simple_params_end_373f:
  2898 00002094 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2899 00002097 4889C3                  	mov rbx, rax
  2900 0000209A 58                      	pop rax
  2901 0000209B C60005                  	mov byte [rax], T_closure
  2902 0000209E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2903 000020A2 48C74009[AF200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_373f
  2904 000020AA E9A4000000              	jmp .L_lambda_simple_end_373f
  2905                                  .L_lambda_simple_code_373f:	; lambda-simple body
  2906 000020AF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2907 000020B5 740B                    	je .L_lambda_simple_arity_check_ok_373f
  2908 000020B7 FF742410                	push qword [rsp + 8 * 2]
  2909 000020BB 6A01                    	push 1
  2910 000020BD E9C5FD0000              	jmp L_error_incorrect_arity_simple
  2911                                  .L_lambda_simple_arity_check_ok_373f:
  2912 000020C2 C8000000                	enter 0, 0
  2913 000020C6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2914 000020CA 50                      	push rax
  2915 000020CB 6A01                    	push 1
  2916 000020CD 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2917                                  	assert_closure(rax)
    42 000020D5 803805              <1>  cmp byte [%1], %2
    43 000020D8 0F85E4150100        <1>  jne L_error_incorrect_type
  2918 000020DE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2919 000020E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2920 000020E4 50                      	push rax
  2921 000020E5 6A01                    	push 1
  2922 000020E7 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2923                                  .L_applic_TC_3fdb:
  2924 000020EF 803805                  	cmp byte [rax], T_closure
  2925 000020F2 0F858B0D0100            	jne L_code_ptr_error
  2926 000020F8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2927 000020FC 53                      	push rbx
  2928 000020FD FF7508                  	push qword [rbp + 8]
  2929 00002100 FF7500                  	push qword [rbp]
  2930 00002103 488B4D18                	mov rcx, [rbp + 3 * 8]
  2931 00002107 488B542418              	mov rdx, [rsp + 3 * 8]
  2932 0000210C 488D7204                	lea rsi, [rdx + 4]
  2933 00002110 4C8D4EFF                	lea r9, [rsi - 1]
  2934 00002114 488D7903                	lea rdi, [rcx + 3]
  2935 00002118 4D31C0                  	xor r8, r8
  2936                                  .L_tc_recycle_frame_loop_3fdb:
  2937 0000211B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2938 0000211F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2939 00002124 49FFC9                  	dec r9
  2940 00002127 4D31C0                  	xor r8, r8
  2941 0000212A 48FFCF                  	dec rdi
  2942 0000212D 48FFCE                  	dec rsi
  2943 00002130 4883FE00                	cmp rsi, 0
  2944 00002134 75E5                    	jne .L_tc_recycle_frame_loop_3fdb
  2945                                  .L_tc_recycle_frame_done_3fdb:
  2946                                  ;this pop rbp in sot to the right place
  2947 00002136 4989C9                  	mov r9, rcx
  2948 00002139 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2949 00002141 4C01CC                  	add rsp, r9
  2950 00002144 5D                      	pop rbp
  2951 00002145 488B4D00                	mov rcx, qword [rbp]
  2952 00002149 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2953 0000214D FFE3                    	jmp rbx
  2954 0000214F C9                      	leave
  2955 00002150 C21800                  	ret 8 * (2 + 1)
  2956                                  .L_lambda_simple_end_373f:	; new closure is in rax
  2957 00002153 48890425[70020000]      	mov qword [free_var_78], rax
  2958 0000215B 48B8-                   	mov rax, sob_void
  2958 0000215D [0000000000000000] 
  2959                                  
  2960 00002165 4889C7                  	mov rdi, rax
  2961 00002168 E872FD0000              	call print_sexpr_if_not_void
  2962                                  
  2963 0000216D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2964 00002172 E857FD0000              	call malloc
  2965 00002177 50                      	push rax
  2966 00002178 BF00000000              	mov rdi, 8 * 0	; new rib
  2967 0000217D E84CFD0000              	call malloc
  2968 00002182 50                      	push rax
  2969 00002183 BF08000000              	mov rdi, 8 * 1	; extended env
  2970 00002188 E841FD0000              	call malloc
  2971 0000218D 488B7D10                	mov rdi, ENV
  2972 00002191 BE00000000              	mov rsi, 0
  2973 00002196 BA01000000              	mov rdx, 1
  2974                                  .L_lambda_simple_env_loop_3740:	; ext_env[i + 1] <-- env[i]
  2975 0000219B 4883FE00                	cmp rsi, 0
  2976 0000219F 7410                    	je .L_lambda_simple_env_end_3740
  2977 000021A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2978 000021A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2979 000021A9 48FFC6                  	inc rsi
  2980 000021AC 48FFC2                  	inc rdx
  2981 000021AF EBEA                    	jmp .L_lambda_simple_env_loop_3740
  2982                                  .L_lambda_simple_env_end_3740:
  2983 000021B1 5B                      	pop rbx
  2984 000021B2 BE00000000              	mov rsi, 0
  2985                                  .L_lambda_simple_params_loop_3740:	; copy params
  2986 000021B7 4883FE00                	cmp rsi, 0
  2987 000021BB 740E                    	je .L_lambda_simple_params_end_3740
  2988 000021BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2989 000021C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2990 000021C6 48FFC6                  	inc rsi
  2991 000021C9 EBEC                    	jmp .L_lambda_simple_params_loop_3740
  2992                                  .L_lambda_simple_params_end_3740:
  2993 000021CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2994 000021CE 4889C3                  	mov rbx, rax
  2995 000021D1 58                      	pop rax
  2996 000021D2 C60005                  	mov byte [rax], T_closure
  2997 000021D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2998 000021D9 48C74009[E6210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3740
  2999 000021E1 E9A4000000              	jmp .L_lambda_simple_end_3740
  3000                                  .L_lambda_simple_code_3740:	; lambda-simple body
  3001 000021E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3002 000021EC 740B                    	je .L_lambda_simple_arity_check_ok_3740
  3003 000021EE FF742410                	push qword [rsp + 8 * 2]
  3004 000021F2 6A01                    	push 1
  3005 000021F4 E98EFC0000              	jmp L_error_incorrect_arity_simple
  3006                                  .L_lambda_simple_arity_check_ok_3740:
  3007 000021F9 C8000000                	enter 0, 0
  3008 000021FD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3009 00002201 50                      	push rax
  3010 00002202 6A01                    	push 1
  3011 00002204 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3012                                  	assert_closure(rax)
    42 0000220C 803805              <1>  cmp byte [%1], %2
    43 0000220F 0F85AD140100        <1>  jne L_error_incorrect_type
  3013 00002215 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3014 00002218 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3015 0000221B 50                      	push rax
  3016 0000221C 6A01                    	push 1
  3017 0000221E 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3018                                  .L_applic_TC_3fdc:
  3019 00002226 803805                  	cmp byte [rax], T_closure
  3020 00002229 0F85540C0100            	jne L_code_ptr_error
  3021 0000222F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3022 00002233 53                      	push rbx
  3023 00002234 FF7508                  	push qword [rbp + 8]
  3024 00002237 FF7500                  	push qword [rbp]
  3025 0000223A 488B4D18                	mov rcx, [rbp + 3 * 8]
  3026 0000223E 488B542418              	mov rdx, [rsp + 3 * 8]
  3027 00002243 488D7204                	lea rsi, [rdx + 4]
  3028 00002247 4C8D4EFF                	lea r9, [rsi - 1]
  3029 0000224B 488D7903                	lea rdi, [rcx + 3]
  3030 0000224F 4D31C0                  	xor r8, r8
  3031                                  .L_tc_recycle_frame_loop_3fdc:
  3032 00002252 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3033 00002256 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3034 0000225B 49FFC9                  	dec r9
  3035 0000225E 4D31C0                  	xor r8, r8
  3036 00002261 48FFCF                  	dec rdi
  3037 00002264 48FFCE                  	dec rsi
  3038 00002267 4883FE00                	cmp rsi, 0
  3039 0000226B 75E5                    	jne .L_tc_recycle_frame_loop_3fdc
  3040                                  .L_tc_recycle_frame_done_3fdc:
  3041                                  ;this pop rbp in sot to the right place
  3042 0000226D 4989C9                  	mov r9, rcx
  3043 00002270 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3044 00002278 4C01CC                  	add rsp, r9
  3045 0000227B 5D                      	pop rbp
  3046 0000227C 488B4D00                	mov rcx, qword [rbp]
  3047 00002280 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3048 00002284 FFE3                    	jmp rbx
  3049 00002286 C9                      	leave
  3050 00002287 C21800                  	ret 8 * (2 + 1)
  3051                                  .L_lambda_simple_end_3740:	; new closure is in rax
  3052 0000228A 48890425[78020000]      	mov qword [free_var_79], rax
  3053 00002292 48B8-                   	mov rax, sob_void
  3053 00002294 [0000000000000000] 
  3054                                  
  3055 0000229C 4889C7                  	mov rdi, rax
  3056 0000229F E83BFC0000              	call print_sexpr_if_not_void
  3057                                  
  3058 000022A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3059 000022A9 E820FC0000              	call malloc
  3060 000022AE 50                      	push rax
  3061 000022AF BF00000000              	mov rdi, 8 * 0	; new rib
  3062 000022B4 E815FC0000              	call malloc
  3063 000022B9 50                      	push rax
  3064 000022BA BF08000000              	mov rdi, 8 * 1	; extended env
  3065 000022BF E80AFC0000              	call malloc
  3066 000022C4 488B7D10                	mov rdi, ENV
  3067 000022C8 BE00000000              	mov rsi, 0
  3068 000022CD BA01000000              	mov rdx, 1
  3069                                  .L_lambda_simple_env_loop_3741:	; ext_env[i + 1] <-- env[i]
  3070 000022D2 4883FE00                	cmp rsi, 0
  3071 000022D6 7410                    	je .L_lambda_simple_env_end_3741
  3072 000022D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3073 000022DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3074 000022E0 48FFC6                  	inc rsi
  3075 000022E3 48FFC2                  	inc rdx
  3076 000022E6 EBEA                    	jmp .L_lambda_simple_env_loop_3741
  3077                                  .L_lambda_simple_env_end_3741:
  3078 000022E8 5B                      	pop rbx
  3079 000022E9 BE00000000              	mov rsi, 0
  3080                                  .L_lambda_simple_params_loop_3741:	; copy params
  3081 000022EE 4883FE00                	cmp rsi, 0
  3082 000022F2 740E                    	je .L_lambda_simple_params_end_3741
  3083 000022F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3084 000022F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3085 000022FD 48FFC6                  	inc rsi
  3086 00002300 EBEC                    	jmp .L_lambda_simple_params_loop_3741
  3087                                  .L_lambda_simple_params_end_3741:
  3088 00002302 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3089 00002305 4889C3                  	mov rbx, rax
  3090 00002308 58                      	pop rax
  3091 00002309 C60005                  	mov byte [rax], T_closure
  3092 0000230C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3093 00002310 48C74009[1D230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3741
  3094 00002318 E9A4000000              	jmp .L_lambda_simple_end_3741
  3095                                  .L_lambda_simple_code_3741:	; lambda-simple body
  3096 0000231D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3097 00002323 740B                    	je .L_lambda_simple_arity_check_ok_3741
  3098 00002325 FF742410                	push qword [rsp + 8 * 2]
  3099 00002329 6A01                    	push 1
  3100 0000232B E957FB0000              	jmp L_error_incorrect_arity_simple
  3101                                  .L_lambda_simple_arity_check_ok_3741:
  3102 00002330 C8000000                	enter 0, 0
  3103 00002334 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3104 00002338 50                      	push rax
  3105 00002339 6A01                    	push 1
  3106 0000233B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  3107                                  	assert_closure(rax)
    42 00002343 803805              <1>  cmp byte [%1], %2
    43 00002346 0F8576130100        <1>  jne L_error_incorrect_type
  3108 0000234C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3109 0000234F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3110 00002352 50                      	push rax
  3111 00002353 6A01                    	push 1
  3112 00002355 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3113                                  .L_applic_TC_3fdd:
  3114 0000235D 803805                  	cmp byte [rax], T_closure
  3115 00002360 0F851D0B0100            	jne L_code_ptr_error
  3116 00002366 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3117 0000236A 53                      	push rbx
  3118 0000236B FF7508                  	push qword [rbp + 8]
  3119 0000236E FF7500                  	push qword [rbp]
  3120 00002371 488B4D18                	mov rcx, [rbp + 3 * 8]
  3121 00002375 488B542418              	mov rdx, [rsp + 3 * 8]
  3122 0000237A 488D7204                	lea rsi, [rdx + 4]
  3123 0000237E 4C8D4EFF                	lea r9, [rsi - 1]
  3124 00002382 488D7903                	lea rdi, [rcx + 3]
  3125 00002386 4D31C0                  	xor r8, r8
  3126                                  .L_tc_recycle_frame_loop_3fdd:
  3127 00002389 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3128 0000238D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3129 00002392 49FFC9                  	dec r9
  3130 00002395 4D31C0                  	xor r8, r8
  3131 00002398 48FFCF                  	dec rdi
  3132 0000239B 48FFCE                  	dec rsi
  3133 0000239E 4883FE00                	cmp rsi, 0
  3134 000023A2 75E5                    	jne .L_tc_recycle_frame_loop_3fdd
  3135                                  .L_tc_recycle_frame_done_3fdd:
  3136                                  ;this pop rbp in sot to the right place
  3137 000023A4 4989C9                  	mov r9, rcx
  3138 000023A7 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3139 000023AF 4C01CC                  	add rsp, r9
  3140 000023B2 5D                      	pop rbp
  3141 000023B3 488B4D00                	mov rcx, qword [rbp]
  3142 000023B7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3143 000023BB FFE3                    	jmp rbx
  3144 000023BD C9                      	leave
  3145 000023BE C21800                  	ret 8 * (2 + 1)
  3146                                  .L_lambda_simple_end_3741:	; new closure is in rax
  3147 000023C1 48890425[80020000]      	mov qword [free_var_80], rax
  3148 000023C9 48B8-                   	mov rax, sob_void
  3148 000023CB [0000000000000000] 
  3149                                  
  3150 000023D3 4889C7                  	mov rdi, rax
  3151 000023D6 E804FB0000              	call print_sexpr_if_not_void
  3152                                  
  3153 000023DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3154 000023E0 E8E9FA0000              	call malloc
  3155 000023E5 50                      	push rax
  3156 000023E6 BF00000000              	mov rdi, 8 * 0	; new rib
  3157 000023EB E8DEFA0000              	call malloc
  3158 000023F0 50                      	push rax
  3159 000023F1 BF08000000              	mov rdi, 8 * 1	; extended env
  3160 000023F6 E8D3FA0000              	call malloc
  3161 000023FB 488B7D10                	mov rdi, ENV
  3162 000023FF BE00000000              	mov rsi, 0
  3163 00002404 BA01000000              	mov rdx, 1
  3164                                  .L_lambda_simple_env_loop_3742:	; ext_env[i + 1] <-- env[i]
  3165 00002409 4883FE00                	cmp rsi, 0
  3166 0000240D 7410                    	je .L_lambda_simple_env_end_3742
  3167 0000240F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3168 00002413 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3169 00002417 48FFC6                  	inc rsi
  3170 0000241A 48FFC2                  	inc rdx
  3171 0000241D EBEA                    	jmp .L_lambda_simple_env_loop_3742
  3172                                  .L_lambda_simple_env_end_3742:
  3173 0000241F 5B                      	pop rbx
  3174 00002420 BE00000000              	mov rsi, 0
  3175                                  .L_lambda_simple_params_loop_3742:	; copy params
  3176 00002425 4883FE00                	cmp rsi, 0
  3177 00002429 740E                    	je .L_lambda_simple_params_end_3742
  3178 0000242B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3179 00002430 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3180 00002434 48FFC6                  	inc rsi
  3181 00002437 EBEC                    	jmp .L_lambda_simple_params_loop_3742
  3182                                  .L_lambda_simple_params_end_3742:
  3183 00002439 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3184 0000243C 4889C3                  	mov rbx, rax
  3185 0000243F 58                      	pop rax
  3186 00002440 C60005                  	mov byte [rax], T_closure
  3187 00002443 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3188 00002447 48C74009[54240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3742
  3189 0000244F E9A4000000              	jmp .L_lambda_simple_end_3742
  3190                                  .L_lambda_simple_code_3742:	; lambda-simple body
  3191 00002454 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3192 0000245A 740B                    	je .L_lambda_simple_arity_check_ok_3742
  3193 0000245C FF742410                	push qword [rsp + 8 * 2]
  3194 00002460 6A01                    	push 1
  3195 00002462 E920FA0000              	jmp L_error_incorrect_arity_simple
  3196                                  .L_lambda_simple_arity_check_ok_3742:
  3197 00002467 C8000000                	enter 0, 0
  3198 0000246B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3199 0000246F 50                      	push rax
  3200 00002470 6A01                    	push 1
  3201 00002472 488B0425[C8010000]      	mov rax, qword [free_var_57]
  3202                                  	assert_closure(rax)
    42 0000247A 803805              <1>  cmp byte [%1], %2
    43 0000247D 0F853F120100        <1>  jne L_error_incorrect_type
  3203 00002483 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3204 00002486 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3205 00002489 50                      	push rax
  3206 0000248A 6A01                    	push 1
  3207 0000248C 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3208                                  .L_applic_TC_3fde:
  3209 00002494 803805                  	cmp byte [rax], T_closure
  3210 00002497 0F85E6090100            	jne L_code_ptr_error
  3211 0000249D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3212 000024A1 53                      	push rbx
  3213 000024A2 FF7508                  	push qword [rbp + 8]
  3214 000024A5 FF7500                  	push qword [rbp]
  3215 000024A8 488B4D18                	mov rcx, [rbp + 3 * 8]
  3216 000024AC 488B542418              	mov rdx, [rsp + 3 * 8]
  3217 000024B1 488D7204                	lea rsi, [rdx + 4]
  3218 000024B5 4C8D4EFF                	lea r9, [rsi - 1]
  3219 000024B9 488D7903                	lea rdi, [rcx + 3]
  3220 000024BD 4D31C0                  	xor r8, r8
  3221                                  .L_tc_recycle_frame_loop_3fde:
  3222 000024C0 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3223 000024C4 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3224 000024C9 49FFC9                  	dec r9
  3225 000024CC 4D31C0                  	xor r8, r8
  3226 000024CF 48FFCF                  	dec rdi
  3227 000024D2 48FFCE                  	dec rsi
  3228 000024D5 4883FE00                	cmp rsi, 0
  3229 000024D9 75E5                    	jne .L_tc_recycle_frame_loop_3fde
  3230                                  .L_tc_recycle_frame_done_3fde:
  3231                                  ;this pop rbp in sot to the right place
  3232 000024DB 4989C9                  	mov r9, rcx
  3233 000024DE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3234 000024E6 4C01CC                  	add rsp, r9
  3235 000024E9 5D                      	pop rbp
  3236 000024EA 488B4D00                	mov rcx, qword [rbp]
  3237 000024EE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3238 000024F2 FFE3                    	jmp rbx
  3239 000024F4 C9                      	leave
  3240 000024F5 C21800                  	ret 8 * (2 + 1)
  3241                                  .L_lambda_simple_end_3742:	; new closure is in rax
  3242 000024F8 48890425[88020000]      	mov qword [free_var_81], rax
  3243 00002500 48B8-                   	mov rax, sob_void
  3243 00002502 [0000000000000000] 
  3244                                  
  3245 0000250A 4889C7                  	mov rdi, rax
  3246 0000250D E8CDF90000              	call print_sexpr_if_not_void
  3247                                  
  3248 00002512 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3249 00002517 E8B2F90000              	call malloc
  3250 0000251C 50                      	push rax
  3251 0000251D BF00000000              	mov rdi, 8 * 0	; new rib
  3252 00002522 E8A7F90000              	call malloc
  3253 00002527 50                      	push rax
  3254 00002528 BF08000000              	mov rdi, 8 * 1	; extended env
  3255 0000252D E89CF90000              	call malloc
  3256 00002532 488B7D10                	mov rdi, ENV
  3257 00002536 BE00000000              	mov rsi, 0
  3258 0000253B BA01000000              	mov rdx, 1
  3259                                  .L_lambda_simple_env_loop_3743:	; ext_env[i + 1] <-- env[i]
  3260 00002540 4883FE00                	cmp rsi, 0
  3261 00002544 7410                    	je .L_lambda_simple_env_end_3743
  3262 00002546 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3263 0000254A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3264 0000254E 48FFC6                  	inc rsi
  3265 00002551 48FFC2                  	inc rdx
  3266 00002554 EBEA                    	jmp .L_lambda_simple_env_loop_3743
  3267                                  .L_lambda_simple_env_end_3743:
  3268 00002556 5B                      	pop rbx
  3269 00002557 BE00000000              	mov rsi, 0
  3270                                  .L_lambda_simple_params_loop_3743:	; copy params
  3271 0000255C 4883FE00                	cmp rsi, 0
  3272 00002560 740E                    	je .L_lambda_simple_params_end_3743
  3273 00002562 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3274 00002567 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3275 0000256B 48FFC6                  	inc rsi
  3276 0000256E EBEC                    	jmp .L_lambda_simple_params_loop_3743
  3277                                  .L_lambda_simple_params_end_3743:
  3278 00002570 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3279 00002573 4889C3                  	mov rbx, rax
  3280 00002576 58                      	pop rax
  3281 00002577 C60005                  	mov byte [rax], T_closure
  3282 0000257A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3283 0000257E 48C74009[8B250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3743
  3284 00002586 E9A4000000              	jmp .L_lambda_simple_end_3743
  3285                                  .L_lambda_simple_code_3743:	; lambda-simple body
  3286 0000258B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3287 00002591 740B                    	je .L_lambda_simple_arity_check_ok_3743
  3288 00002593 FF742410                	push qword [rsp + 8 * 2]
  3289 00002597 6A01                    	push 1
  3290 00002599 E9E9F80000              	jmp L_error_incorrect_arity_simple
  3291                                  .L_lambda_simple_arity_check_ok_3743:
  3292 0000259E C8000000                	enter 0, 0
  3293 000025A2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3294 000025A6 50                      	push rax
  3295 000025A7 6A01                    	push 1
  3296 000025A9 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3297                                  	assert_closure(rax)
    42 000025B1 803805              <1>  cmp byte [%1], %2
    43 000025B4 0F8508110100        <1>  jne L_error_incorrect_type
  3298 000025BA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3299 000025BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3300 000025C0 50                      	push rax
  3301 000025C1 6A01                    	push 1
  3302 000025C3 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3303                                  .L_applic_TC_3fdf:
  3304 000025CB 803805                  	cmp byte [rax], T_closure
  3305 000025CE 0F85AF080100            	jne L_code_ptr_error
  3306 000025D4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3307 000025D8 53                      	push rbx
  3308 000025D9 FF7508                  	push qword [rbp + 8]
  3309 000025DC FF7500                  	push qword [rbp]
  3310 000025DF 488B4D18                	mov rcx, [rbp + 3 * 8]
  3311 000025E3 488B542418              	mov rdx, [rsp + 3 * 8]
  3312 000025E8 488D7204                	lea rsi, [rdx + 4]
  3313 000025EC 4C8D4EFF                	lea r9, [rsi - 1]
  3314 000025F0 488D7903                	lea rdi, [rcx + 3]
  3315 000025F4 4D31C0                  	xor r8, r8
  3316                                  .L_tc_recycle_frame_loop_3fdf:
  3317 000025F7 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3318 000025FB 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3319 00002600 49FFC9                  	dec r9
  3320 00002603 4D31C0                  	xor r8, r8
  3321 00002606 48FFCF                  	dec rdi
  3322 00002609 48FFCE                  	dec rsi
  3323 0000260C 4883FE00                	cmp rsi, 0
  3324 00002610 75E5                    	jne .L_tc_recycle_frame_loop_3fdf
  3325                                  .L_tc_recycle_frame_done_3fdf:
  3326                                  ;this pop rbp in sot to the right place
  3327 00002612 4989C9                  	mov r9, rcx
  3328 00002615 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3329 0000261D 4C01CC                  	add rsp, r9
  3330 00002620 5D                      	pop rbp
  3331 00002621 488B4D00                	mov rcx, qword [rbp]
  3332 00002625 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3333 00002629 FFE3                    	jmp rbx
  3334 0000262B C9                      	leave
  3335 0000262C C21800                  	ret 8 * (2 + 1)
  3336                                  .L_lambda_simple_end_3743:	; new closure is in rax
  3337 0000262F 48890425[90020000]      	mov qword [free_var_82], rax
  3338 00002637 48B8-                   	mov rax, sob_void
  3338 00002639 [0000000000000000] 
  3339                                  
  3340 00002641 4889C7                  	mov rdi, rax
  3341 00002644 E896F80000              	call print_sexpr_if_not_void
  3342                                  
  3343 00002649 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3344 0000264E E87BF80000              	call malloc
  3345 00002653 50                      	push rax
  3346 00002654 BF00000000              	mov rdi, 8 * 0	; new rib
  3347 00002659 E870F80000              	call malloc
  3348 0000265E 50                      	push rax
  3349 0000265F BF08000000              	mov rdi, 8 * 1	; extended env
  3350 00002664 E865F80000              	call malloc
  3351 00002669 488B7D10                	mov rdi, ENV
  3352 0000266D BE00000000              	mov rsi, 0
  3353 00002672 BA01000000              	mov rdx, 1
  3354                                  .L_lambda_simple_env_loop_3744:	; ext_env[i + 1] <-- env[i]
  3355 00002677 4883FE00                	cmp rsi, 0
  3356 0000267B 7410                    	je .L_lambda_simple_env_end_3744
  3357 0000267D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3358 00002681 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3359 00002685 48FFC6                  	inc rsi
  3360 00002688 48FFC2                  	inc rdx
  3361 0000268B EBEA                    	jmp .L_lambda_simple_env_loop_3744
  3362                                  .L_lambda_simple_env_end_3744:
  3363 0000268D 5B                      	pop rbx
  3364 0000268E BE00000000              	mov rsi, 0
  3365                                  .L_lambda_simple_params_loop_3744:	; copy params
  3366 00002693 4883FE00                	cmp rsi, 0
  3367 00002697 740E                    	je .L_lambda_simple_params_end_3744
  3368 00002699 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3369 0000269E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3370 000026A2 48FFC6                  	inc rsi
  3371 000026A5 EBEC                    	jmp .L_lambda_simple_params_loop_3744
  3372                                  .L_lambda_simple_params_end_3744:
  3373 000026A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3374 000026AA 4889C3                  	mov rbx, rax
  3375 000026AD 58                      	pop rax
  3376 000026AE C60005                  	mov byte [rax], T_closure
  3377 000026B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3378 000026B5 48C74009[C2260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3744
  3379 000026BD E9A4000000              	jmp .L_lambda_simple_end_3744
  3380                                  .L_lambda_simple_code_3744:	; lambda-simple body
  3381 000026C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3382 000026C8 740B                    	je .L_lambda_simple_arity_check_ok_3744
  3383 000026CA FF742410                	push qword [rsp + 8 * 2]
  3384 000026CE 6A01                    	push 1
  3385 000026D0 E9B2F70000              	jmp L_error_incorrect_arity_simple
  3386                                  .L_lambda_simple_arity_check_ok_3744:
  3387 000026D5 C8000000                	enter 0, 0
  3388 000026D9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3389 000026DD 50                      	push rax
  3390 000026DE 6A01                    	push 1
  3391 000026E0 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3392                                  	assert_closure(rax)
    42 000026E8 803805              <1>  cmp byte [%1], %2
    43 000026EB 0F85D10F0100        <1>  jne L_error_incorrect_type
  3393 000026F1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3394 000026F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3395 000026F7 50                      	push rax
  3396 000026F8 6A01                    	push 1
  3397 000026FA 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3398                                  .L_applic_TC_3fe0:
  3399 00002702 803805                  	cmp byte [rax], T_closure
  3400 00002705 0F8578070100            	jne L_code_ptr_error
  3401 0000270B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3402 0000270F 53                      	push rbx
  3403 00002710 FF7508                  	push qword [rbp + 8]
  3404 00002713 FF7500                  	push qword [rbp]
  3405 00002716 488B4D18                	mov rcx, [rbp + 3 * 8]
  3406 0000271A 488B542418              	mov rdx, [rsp + 3 * 8]
  3407 0000271F 488D7204                	lea rsi, [rdx + 4]
  3408 00002723 4C8D4EFF                	lea r9, [rsi - 1]
  3409 00002727 488D7903                	lea rdi, [rcx + 3]
  3410 0000272B 4D31C0                  	xor r8, r8
  3411                                  .L_tc_recycle_frame_loop_3fe0:
  3412 0000272E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3413 00002732 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3414 00002737 49FFC9                  	dec r9
  3415 0000273A 4D31C0                  	xor r8, r8
  3416 0000273D 48FFCF                  	dec rdi
  3417 00002740 48FFCE                  	dec rsi
  3418 00002743 4883FE00                	cmp rsi, 0
  3419 00002747 75E5                    	jne .L_tc_recycle_frame_loop_3fe0
  3420                                  .L_tc_recycle_frame_done_3fe0:
  3421                                  ;this pop rbp in sot to the right place
  3422 00002749 4989C9                  	mov r9, rcx
  3423 0000274C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3424 00002754 4C01CC                  	add rsp, r9
  3425 00002757 5D                      	pop rbp
  3426 00002758 488B4D00                	mov rcx, qword [rbp]
  3427 0000275C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3428 00002760 FFE3                    	jmp rbx
  3429 00002762 C9                      	leave
  3430 00002763 C21800                  	ret 8 * (2 + 1)
  3431                                  .L_lambda_simple_end_3744:	; new closure is in rax
  3432 00002766 48890425[98020000]      	mov qword [free_var_83], rax
  3433 0000276E 48B8-                   	mov rax, sob_void
  3433 00002770 [0000000000000000] 
  3434                                  
  3435 00002778 4889C7                  	mov rdi, rax
  3436 0000277B E85FF70000              	call print_sexpr_if_not_void
  3437                                  
  3438 00002780 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3439 00002785 E844F70000              	call malloc
  3440 0000278A 50                      	push rax
  3441 0000278B BF00000000              	mov rdi, 8 * 0	; new rib
  3442 00002790 E839F70000              	call malloc
  3443 00002795 50                      	push rax
  3444 00002796 BF08000000              	mov rdi, 8 * 1	; extended env
  3445 0000279B E82EF70000              	call malloc
  3446 000027A0 488B7D10                	mov rdi, ENV
  3447 000027A4 BE00000000              	mov rsi, 0
  3448 000027A9 BA01000000              	mov rdx, 1
  3449                                  .L_lambda_simple_env_loop_3745:	; ext_env[i + 1] <-- env[i]
  3450 000027AE 4883FE00                	cmp rsi, 0
  3451 000027B2 7410                    	je .L_lambda_simple_env_end_3745
  3452 000027B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3453 000027B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3454 000027BC 48FFC6                  	inc rsi
  3455 000027BF 48FFC2                  	inc rdx
  3456 000027C2 EBEA                    	jmp .L_lambda_simple_env_loop_3745
  3457                                  .L_lambda_simple_env_end_3745:
  3458 000027C4 5B                      	pop rbx
  3459 000027C5 BE00000000              	mov rsi, 0
  3460                                  .L_lambda_simple_params_loop_3745:	; copy params
  3461 000027CA 4883FE00                	cmp rsi, 0
  3462 000027CE 740E                    	je .L_lambda_simple_params_end_3745
  3463 000027D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3464 000027D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3465 000027D9 48FFC6                  	inc rsi
  3466 000027DC EBEC                    	jmp .L_lambda_simple_params_loop_3745
  3467                                  .L_lambda_simple_params_end_3745:
  3468 000027DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3469 000027E1 4889C3                  	mov rbx, rax
  3470 000027E4 58                      	pop rax
  3471 000027E5 C60005                  	mov byte [rax], T_closure
  3472 000027E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3473 000027EC 48C74009[F9270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3745
  3474 000027F4 E904010000              	jmp .L_lambda_simple_end_3745
  3475                                  .L_lambda_simple_code_3745:	; lambda-simple body
  3476 000027F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3477 000027FF 740B                    	je .L_lambda_simple_arity_check_ok_3745
  3478 00002801 FF742410                	push qword [rsp + 8 * 2]
  3479 00002805 6A01                    	push 1
  3480 00002807 E97BF60000              	jmp L_error_incorrect_arity_simple
  3481                                  .L_lambda_simple_arity_check_ok_3745:
  3482 0000280C C8000000                	enter 0, 0
  3483 00002810 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3484 00002814 50                      	push rax
  3485 00002815 6A01                    	push 1
  3486 00002817 488B0425[00000000]      	mov rax, qword [free_var_0]
  3487                                  	assert_closure(rax)
    42 0000281F 803805              <1>  cmp byte [%1], %2
    43 00002822 0F859A0E0100        <1>  jne L_error_incorrect_type
  3488 00002828 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3489 0000282B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3490 0000282E 483D[02000000]          	cmp rax, sob_boolean_false
  3491 00002834 0F85BF000000            	jne .L_or_end_0424
  3492 0000283A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3493 0000283E 50                      	push rax
  3494 0000283F 6A01                    	push 1
  3495 00002841 488B0425[08000000]      	mov rax, qword [free_var_1]
  3496                                  	assert_closure(rax)
    42 00002849 803805              <1>  cmp byte [%1], %2
    43 0000284C 0F85700E0100        <1>  jne L_error_incorrect_type
  3497 00002852 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3498 00002855 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3499                                  
  3500 00002858 483D[02000000]                  	cmp rax, sob_boolean_false
  3501                                  
  3502 0000285E 0F848B000000                    	je .L_if_else_47c5
  3503 00002864 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3504 00002868 50                      	push rax
  3505 00002869 6A01                    	push 1
  3506 0000286B 488B0425[88000000]      	mov rax, qword [free_var_17]
  3507                                  	assert_closure(rax)
    42 00002873 803805              <1>  cmp byte [%1], %2
    43 00002876 0F85460E0100        <1>  jne L_error_incorrect_type
  3508 0000287C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3509 0000287F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3510 00002882 50                      	push rax
  3511 00002883 6A01                    	push 1
  3512 00002885 488B0425[A0020000]      	mov rax, qword [free_var_84]
  3513                                  .L_applic_TC_3fe1:
  3514 0000288D 803805                  	cmp byte [rax], T_closure
  3515 00002890 0F85ED050100            	jne L_code_ptr_error
  3516 00002896 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3517 0000289A 53                      	push rbx
  3518 0000289B FF7508                  	push qword [rbp + 8]
  3519 0000289E FF7500                  	push qword [rbp]
  3520 000028A1 488B4D18                	mov rcx, [rbp + 3 * 8]
  3521 000028A5 488B542418              	mov rdx, [rsp + 3 * 8]
  3522 000028AA 488D7204                	lea rsi, [rdx + 4]
  3523 000028AE 4C8D4EFF                	lea r9, [rsi - 1]
  3524 000028B2 488D7903                	lea rdi, [rcx + 3]
  3525 000028B6 4D31C0                  	xor r8, r8
  3526                                  .L_tc_recycle_frame_loop_3fe1:
  3527 000028B9 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3528 000028BD 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3529 000028C2 49FFC9                  	dec r9
  3530 000028C5 4D31C0                  	xor r8, r8
  3531 000028C8 48FFCF                  	dec rdi
  3532 000028CB 48FFCE                  	dec rsi
  3533 000028CE 4883FE00                	cmp rsi, 0
  3534 000028D2 75E5                    	jne .L_tc_recycle_frame_loop_3fe1
  3535                                  .L_tc_recycle_frame_done_3fe1:
  3536                                  ;this pop rbp in sot to the right place
  3537 000028D4 4989C9                  	mov r9, rcx
  3538 000028D7 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3539 000028DF 4C01CC                  	add rsp, r9
  3540 000028E2 5D                      	pop rbp
  3541 000028E3 488B4D00                	mov rcx, qword [rbp]
  3542 000028E7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3543 000028EB FFE3                    	jmp rbx
  3544                                  
  3545 000028ED EB0A                            	jmp .L_if_end_47c5
  3546                                  
  3547                                          	.L_if_else_47c5:
  3548 000028EF 48B8-                   	mov rax,L_constants + 2
  3548 000028F1 [0200000000000000] 
  3549                                  
  3550                                          	.L_if_end_47c5:
  3551                                  .L_or_end_0424:
  3552 000028F9 C9                      	leave
  3553 000028FA C21800                  	ret 8 * (2 + 1)
  3554                                  .L_lambda_simple_end_3745:	; new closure is in rax
  3555 000028FD 48890425[A0020000]      	mov qword [free_var_84], rax
  3556 00002905 48B8-                   	mov rax, sob_void
  3556 00002907 [0000000000000000] 
  3557                                  
  3558 0000290F 4889C7                  	mov rdi, rax
  3559 00002912 E8C8F50000              	call print_sexpr_if_not_void
  3560                                  
  3561 00002917 BF11000000              	mov rdi, (1 + 8 + 8)
  3562 0000291C E8ADF50000              	call malloc
  3563 00002921 50                      	push rax
  3564 00002922 BF00000000              	mov rdi, 8 * 0
  3565 00002927 E8A2F50000              	call malloc
  3566 0000292C 50                      	push rax
  3567 0000292D BF08000000              	mov rdi, 8 * 1
  3568 00002932 E897F50000              	call malloc
  3569 00002937 488B7D10                	mov rdi, ENV
  3570 0000293B 4831F6                  	xor rsi, rsi
  3571 0000293E 4831D2                  	xor rdx, rdx
  3572 00002941 48FFC2                  	inc rdx
  3573                                  	.L_lambda_opt_env_loop_087a:
  3574                                  
  3575 00002944 4883FE00                        	cmp rsi, 0
  3576                                  
  3577 00002948 7412                            	je .L_lambda_opt_env_end_087a
  3578 0000294A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3579 0000294E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3580 00002952 4883C201                	add rdx, 1
  3581 00002956 4883C601                	add rsi, 1
  3582 0000295A EBE8                    	jmp .L_lambda_opt_env_loop_087a
  3583                                  
  3584                                          	.L_lambda_opt_env_end_087a:
  3585 0000295C 5B                      	pop rbx
  3586 0000295D 4831F6                  	xor rsi, rsi
  3587                                  	.L_lambda_opt_params_loop_087a:
  3588                                  
  3589 00002960 4883FE00                        	cmp rsi, 0
  3590                                  
  3591 00002964 740F                            	je .L_lambda_opt_params_end_087a
  3592 00002966 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3593 0000296B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3594 0000296F 4883C601                	add rsi, 1
  3595 00002973 EBEB                    	jmp .L_lambda_opt_params_loop_087a
  3596                                  
  3597                                          	.L_lambda_opt_params_end_087a:
  3598 00002975 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  3599 00002978 4889C3                  	mov rbx, rax
  3600 0000297B 58                      	pop rax
  3601 0000297C C60005                  	mov byte [rax], T_closure
  3602 0000297F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3603 00002983 48C74009[90290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_087a
  3604                                  
  3605 0000298B E911010000                      	jmp .L_lambda_opt_end_087a
  3606                                  
  3607                                          	.L_lambda_opt_code_087a:
  3608                                  
  3609 00002990 48837C241000                    	cmp qword [rsp + 8 * 2], 0
  3610                                  
  3611 00002996 740D                            	je .L_lambda_opt_arity_check_exact_087a  ;same num_of_args
  3612                                  
  3613 00002998 7F65                            	jg .L_lambda_opt_arity_check_more_087a  ;greater num_of_args
  3614 0000299A FF742410                	push qword [rsp + 8 * 2]
  3615 0000299E 6A00                    	push 0
  3616 000029A0 E9F6F40000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  3617                                  .L_lambda_opt_arity_check_exact_087a:
  3618 000029A5 4883EC08                	sub rsp, 8 * 1
  3619 000029A9 488D7F10                	lea rdi, [rdi + (8 * 2)]
  3620 000029AD 4889E7                  	mov rdi, rsp 
  3621 000029B0 488B4708                	mov rax, qword [rdi + 8]
  3622 000029B4 488907                  	mov qword [rdi], rax
  3623 000029B7 488D7F08                	lea rdi, [rdi + 8]
  3624 000029BB 488B4708                	mov rax, qword [rdi + 8]
  3625 000029BF 488907                  	mov qword [rdi], rax
  3626 000029C2 488D7F08                	lea rdi, [rdi + 8]
  3627 000029C6 488B4708                	mov rax, qword [rdi + 8]
  3628 000029CA 4889C1                  	mov rcx, rax
  3629 000029CD 4883C001                	add rax, 1
  3630 000029D1 488907                  	mov qword [rdi], rax
  3631 000029D4 488D7F08                	lea rdi, [rdi + 8]
  3632                                  	.L_lambda_opt_stack_shrink_loop_196c:
  3633 000029D8 4883F900                	cmp rcx, 0
  3634 000029DC 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_196c
  3635 000029DE 4883E901                	sub rcx, 1
  3636 000029E2 488D4010                	lea rax, [rax + (8 * 2)]
  3637 000029E6 488B4708                	mov rax, qword [rdi + 8]
  3638 000029EA 488907                  	mov qword [rdi], rax
  3639 000029ED 488D7F08                	lea rdi, [rdi + 8]
  3640 000029F1 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_196c
  3641                                  
  3642                                          	.L_lambda_opt_stack_shrink_loop_exit_196c:
  3643 000029F3 48C707[01000000]        	mov qword [rdi], sob_nil
  3644 000029FA E996000000              	jmp .L_lambda_opt_stack_adjusted_087a
  3645                                  
  3646                                          	.L_lambda_opt_arity_check_more_087a:
  3647 000029FF 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  3648 00002A04 488D0E                  	lea rcx, [rsi - 0]
  3649 00002A07 49B8-                   	mov r8, sob_nil
  3649 00002A09 [0100000000000000] 
  3650 00002A11 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  3651 00002A16 4889F2                  	mov rdx, rsi
  3652                                  	.L_lambda_opt_stack_shrink_loop_196d:
  3653 00002A19 4883F900                	cmp rcx, 0
  3654 00002A1D 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_196d
  3655 00002A1F BF11000000              	mov rdi, 1 + (8 * 2)
  3656 00002A24 E8A5F40000              	call malloc
  3657 00002A29 C60021                  	mov byte [rax], T_pair
  3658 00002A2C 488B1E                  	mov rbx, qword [rsi]
  3659 00002A2F 48895801                	mov SOB_PAIR_CAR(rax), rbx
  3660 00002A33 4C894009                	mov SOB_PAIR_CDR(rax), r8
  3661 00002A37 4883C6F8                	add rsi, -8
  3662 00002A3B 4883E901                	sub rcx, 1
  3663 00002A3F 4989C0                  	mov r8, rax
  3664 00002A42 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_196d
  3665                                  
  3666                                          	.L_lambda_opt_stack_shrink_loop_exit_196d:
  3667 00002A44 4C8902                  	mov qword [rdx], r8
  3668 00002A47 4883EA08                	sub rdx, 8 * 1
  3669 00002A4B 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
  3670                                  
  3671 00002A50 B900000000                      	mov rcx, 0 
  3672                                  
  3673                                          	.L_lambda_opt_stack_shrink_loop_196e:
  3674 00002A55 4883F900                	cmp rcx, 0
  3675 00002A59 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_196e
  3676 00002A5B 488B06                  	mov rax, qword [rsi]
  3677 00002A5E 488902                  	mov qword [rdx], rax
  3678 00002A61 488D76F8                	lea rsi, [rsi - 8]
  3679 00002A65 4883C2F8                	add rdx, -8
  3680 00002A69 4883C1FF                	add rcx, -1
  3681 00002A6D EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_196e
  3682                                  
  3683                                          	.L_lambda_opt_stack_shrink_loop_exit_196e:
  3684                                  
  3685 00002A6F 48C70201000000                  	mov qword [rdx], 1 + 0
  3686 00002A76 4883C6F8                	add rsi, -8
  3687 00002A7A 4883C2F8                	add rdx, -8
  3688 00002A7E 488B06                  	mov rax, qword [rsi]
  3689 00002A81 488902                  	mov qword [rdx], rax
  3690 00002A84 4883C2F8                	add rdx, -8
  3691 00002A88 488D76F8                	lea rsi, [rsi - 8]
  3692 00002A8C 488B06                  	mov rax, qword [rsi]
  3693 00002A8F 488902                  	mov qword [rdx], rax
  3694 00002A92 4889D4                  	mov rsp, rdx
  3695                                  	.L_lambda_opt_stack_adjusted_087a:
  3696 00002A95 C8000000                	enter 0, 0
  3697 00002A99 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3698 00002A9D C9                      	leave
  3699 00002A9E C21800                  	ret 8 * (2 + 1)
  3700                                  .L_lambda_opt_end_087a:	; new closure is in rax
  3701 00002AA1 48890425[A8020000]      	mov qword [free_var_85], rax
  3702 00002AA9 48B8-                   	mov rax, sob_void
  3702 00002AAB [0000000000000000] 
  3703                                  
  3704 00002AB3 4889C7                  	mov rdi, rax
  3705 00002AB6 E824F40000              	call print_sexpr_if_not_void
  3706                                  
  3707 00002ABB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3708 00002AC0 E809F40000              	call malloc
  3709 00002AC5 50                      	push rax
  3710 00002AC6 BF00000000              	mov rdi, 8 * 0	; new rib
  3711 00002ACB E8FEF30000              	call malloc
  3712 00002AD0 50                      	push rax
  3713 00002AD1 BF08000000              	mov rdi, 8 * 1	; extended env
  3714 00002AD6 E8F3F30000              	call malloc
  3715 00002ADB 488B7D10                	mov rdi, ENV
  3716 00002ADF BE00000000              	mov rsi, 0
  3717 00002AE4 BA01000000              	mov rdx, 1
  3718                                  .L_lambda_simple_env_loop_3746:	; ext_env[i + 1] <-- env[i]
  3719 00002AE9 4883FE00                	cmp rsi, 0
  3720 00002AED 7410                    	je .L_lambda_simple_env_end_3746
  3721 00002AEF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3722 00002AF3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3723 00002AF7 48FFC6                  	inc rsi
  3724 00002AFA 48FFC2                  	inc rdx
  3725 00002AFD EBEA                    	jmp .L_lambda_simple_env_loop_3746
  3726                                  .L_lambda_simple_env_end_3746:
  3727 00002AFF 5B                      	pop rbx
  3728 00002B00 BE00000000              	mov rsi, 0
  3729                                  .L_lambda_simple_params_loop_3746:	; copy params
  3730 00002B05 4883FE00                	cmp rsi, 0
  3731 00002B09 740E                    	je .L_lambda_simple_params_end_3746
  3732 00002B0B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3733 00002B10 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3734 00002B14 48FFC6                  	inc rsi
  3735 00002B17 EBEC                    	jmp .L_lambda_simple_params_loop_3746
  3736                                  .L_lambda_simple_params_end_3746:
  3737 00002B19 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3738 00002B1C 4889C3                  	mov rbx, rax
  3739 00002B1F 58                      	pop rax
  3740 00002B20 C60005                  	mov byte [rax], T_closure
  3741 00002B23 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3742 00002B27 48C74009[312B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3746
  3743 00002B2F EB3D                    	jmp .L_lambda_simple_end_3746
  3744                                  .L_lambda_simple_code_3746:	; lambda-simple body
  3745 00002B31 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3746 00002B37 740B                    	je .L_lambda_simple_arity_check_ok_3746
  3747 00002B39 FF742410                	push qword [rsp + 8 * 2]
  3748 00002B3D 6A01                    	push 1
  3749 00002B3F E943F30000              	jmp L_error_incorrect_arity_simple
  3750                                  .L_lambda_simple_arity_check_ok_3746:
  3751 00002B44 C8000000                	enter 0, 0
  3752 00002B48 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3753                                  
  3754 00002B4C 483D[02000000]                  	cmp rax, sob_boolean_false
  3755                                  
  3756 00002B52 740C                            	je .L_if_else_47c6
  3757 00002B54 48B8-                   	mov rax,L_constants + 2
  3757 00002B56 [0200000000000000] 
  3758                                  
  3759 00002B5E EB0A                            	jmp .L_if_end_47c6
  3760                                  
  3761                                          	.L_if_else_47c6:
  3762 00002B60 48B8-                   	mov rax,L_constants + 3
  3762 00002B62 [0300000000000000] 
  3763                                  
  3764                                          	.L_if_end_47c6:
  3765 00002B6A C9                      	leave
  3766 00002B6B C21800                  	ret 8 * (2 + 1)
  3767                                  .L_lambda_simple_end_3746:	; new closure is in rax
  3768 00002B6E 48890425[B0020000]      	mov qword [free_var_86], rax
  3769 00002B76 48B8-                   	mov rax, sob_void
  3769 00002B78 [0000000000000000] 
  3770                                  
  3771 00002B80 4889C7                  	mov rdi, rax
  3772 00002B83 E857F30000              	call print_sexpr_if_not_void
  3773                                  
  3774 00002B88 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3775 00002B8D E83CF30000              	call malloc
  3776 00002B92 50                      	push rax
  3777 00002B93 BF00000000              	mov rdi, 8 * 0	; new rib
  3778 00002B98 E831F30000              	call malloc
  3779 00002B9D 50                      	push rax
  3780 00002B9E BF08000000              	mov rdi, 8 * 1	; extended env
  3781 00002BA3 E826F30000              	call malloc
  3782 00002BA8 488B7D10                	mov rdi, ENV
  3783 00002BAC BE00000000              	mov rsi, 0
  3784 00002BB1 BA01000000              	mov rdx, 1
  3785                                  .L_lambda_simple_env_loop_3747:	; ext_env[i + 1] <-- env[i]
  3786 00002BB6 4883FE00                	cmp rsi, 0
  3787 00002BBA 7410                    	je .L_lambda_simple_env_end_3747
  3788 00002BBC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3789 00002BC0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3790 00002BC4 48FFC6                  	inc rsi
  3791 00002BC7 48FFC2                  	inc rdx
  3792 00002BCA EBEA                    	jmp .L_lambda_simple_env_loop_3747
  3793                                  .L_lambda_simple_env_end_3747:
  3794 00002BCC 5B                      	pop rbx
  3795 00002BCD BE00000000              	mov rsi, 0
  3796                                  .L_lambda_simple_params_loop_3747:	; copy params
  3797 00002BD2 4883FE00                	cmp rsi, 0
  3798 00002BD6 740E                    	je .L_lambda_simple_params_end_3747
  3799 00002BD8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3800 00002BDD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3801 00002BE1 48FFC6                  	inc rsi
  3802 00002BE4 EBEC                    	jmp .L_lambda_simple_params_loop_3747
  3803                                  .L_lambda_simple_params_end_3747:
  3804 00002BE6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3805 00002BE9 4889C3                  	mov rbx, rax
  3806 00002BEC 58                      	pop rax
  3807 00002BED C60005                  	mov byte [rax], T_closure
  3808 00002BF0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3809 00002BF4 48C74009[012C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3747
  3810 00002BFC E9DA000000              	jmp .L_lambda_simple_end_3747
  3811                                  .L_lambda_simple_code_3747:	; lambda-simple body
  3812 00002C01 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3813 00002C07 740B                    	je .L_lambda_simple_arity_check_ok_3747
  3814 00002C09 FF742410                	push qword [rsp + 8 * 2]
  3815 00002C0D 6A01                    	push 1
  3816 00002C0F E973F20000              	jmp L_error_incorrect_arity_simple
  3817                                  .L_lambda_simple_arity_check_ok_3747:
  3818 00002C14 C8000000                	enter 0, 0
  3819 00002C18 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3820 00002C1C 50                      	push rax
  3821 00002C1D 6A01                    	push 1
  3822 00002C1F 488B0425[48000000]      	mov rax, qword [free_var_9]
  3823                                  	assert_closure(rax)
    42 00002C27 803805              <1>  cmp byte [%1], %2
    43 00002C2A 0F85920A0100        <1>  jne L_error_incorrect_type
  3824 00002C30 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3825 00002C33 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3826                                  
  3827 00002C36 483D[02000000]                  	cmp rax, sob_boolean_false
  3828                                  
  3829 00002C3C 0F848B000000                    	je .L_if_else_47c7
  3830 00002C42 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3831 00002C46 50                      	push rax
  3832 00002C47 6A01                    	push 1
  3833 00002C49 488B0425[E0000000]      	mov rax, qword [free_var_28]
  3834                                  	assert_closure(rax)
    42 00002C51 803805              <1>  cmp byte [%1], %2
    43 00002C54 0F85680A0100        <1>  jne L_error_incorrect_type
  3835 00002C5A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3836 00002C5D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3837 00002C60 50                      	push rax
  3838 00002C61 6A01                    	push 1
  3839 00002C63 488B0425[B0020000]      	mov rax, qword [free_var_86]
  3840                                  .L_applic_TC_3fe2:
  3841 00002C6B 803805                  	cmp byte [rax], T_closure
  3842 00002C6E 0F850F020100            	jne L_code_ptr_error
  3843 00002C74 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3844 00002C78 53                      	push rbx
  3845 00002C79 FF7508                  	push qword [rbp + 8]
  3846 00002C7C FF7500                  	push qword [rbp]
  3847 00002C7F 488B4D18                	mov rcx, [rbp + 3 * 8]
  3848 00002C83 488B542418              	mov rdx, [rsp + 3 * 8]
  3849 00002C88 488D7204                	lea rsi, [rdx + 4]
  3850 00002C8C 4C8D4EFF                	lea r9, [rsi - 1]
  3851 00002C90 488D7903                	lea rdi, [rcx + 3]
  3852 00002C94 4D31C0                  	xor r8, r8
  3853                                  .L_tc_recycle_frame_loop_3fe2:
  3854 00002C97 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3855 00002C9B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3856 00002CA0 49FFC9                  	dec r9
  3857 00002CA3 4D31C0                  	xor r8, r8
  3858 00002CA6 48FFCF                  	dec rdi
  3859 00002CA9 48FFCE                  	dec rsi
  3860 00002CAC 4883FE00                	cmp rsi, 0
  3861 00002CB0 75E5                    	jne .L_tc_recycle_frame_loop_3fe2
  3862                                  .L_tc_recycle_frame_done_3fe2:
  3863                                  ;this pop rbp in sot to the right place
  3864 00002CB2 4989C9                  	mov r9, rcx
  3865 00002CB5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3866 00002CBD 4C01CC                  	add rsp, r9
  3867 00002CC0 5D                      	pop rbp
  3868 00002CC1 488B4D00                	mov rcx, qword [rbp]
  3869 00002CC5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3870 00002CC9 FFE3                    	jmp rbx
  3871                                  
  3872 00002CCB EB0A                            	jmp .L_if_end_47c7
  3873                                  
  3874                                          	.L_if_else_47c7:
  3875 00002CCD 48B8-                   	mov rax,L_constants + 2
  3875 00002CCF [0200000000000000] 
  3876                                  
  3877                                          	.L_if_end_47c7:
  3878 00002CD7 C9                      	leave
  3879 00002CD8 C21800                  	ret 8 * (2 + 1)
  3880                                  .L_lambda_simple_end_3747:	; new closure is in rax
  3881 00002CDB 48890425[B8020000]      	mov qword [free_var_87], rax
  3882 00002CE3 48B8-                   	mov rax, sob_void
  3882 00002CE5 [0000000000000000] 
  3883                                  
  3884 00002CED 4889C7                  	mov rdi, rax
  3885 00002CF0 E8EAF10000              	call print_sexpr_if_not_void
  3886                                  
  3887 00002CF5 48B8-                   	mov rax,L_constants + 23
  3887 00002CF7 [1700000000000000] 
  3888 00002CFF 50                      	push rax
  3889 00002D00 6A01                    	push 1
  3890 00002D02 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3891 00002D07 E8C2F10000              	call malloc
  3892 00002D0C 50                      	push rax
  3893 00002D0D BF00000000              	mov rdi, 8 * 0	; new rib
  3894 00002D12 E8B7F10000              	call malloc
  3895 00002D17 50                      	push rax
  3896 00002D18 BF08000000              	mov rdi, 8 * 1	; extended env
  3897 00002D1D E8ACF10000              	call malloc
  3898 00002D22 488B7D10                	mov rdi, ENV
  3899 00002D26 BE00000000              	mov rsi, 0
  3900 00002D2B BA01000000              	mov rdx, 1
  3901                                  .L_lambda_simple_env_loop_3748:	; ext_env[i + 1] <-- env[i]
  3902 00002D30 4883FE00                	cmp rsi, 0
  3903 00002D34 7410                    	je .L_lambda_simple_env_end_3748
  3904 00002D36 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3905 00002D3A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3906 00002D3E 48FFC6                  	inc rsi
  3907 00002D41 48FFC2                  	inc rdx
  3908 00002D44 EBEA                    	jmp .L_lambda_simple_env_loop_3748
  3909                                  .L_lambda_simple_env_end_3748:
  3910 00002D46 5B                      	pop rbx
  3911 00002D47 BE00000000              	mov rsi, 0
  3912                                  .L_lambda_simple_params_loop_3748:	; copy params
  3913 00002D4C 4883FE00                	cmp rsi, 0
  3914 00002D50 740E                    	je .L_lambda_simple_params_end_3748
  3915 00002D52 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3916 00002D57 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3917 00002D5B 48FFC6                  	inc rsi
  3918 00002D5E EBEC                    	jmp .L_lambda_simple_params_loop_3748
  3919                                  .L_lambda_simple_params_end_3748:
  3920 00002D60 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3921 00002D63 4889C3                  	mov rbx, rax
  3922 00002D66 58                      	pop rax
  3923 00002D67 C60005                  	mov byte [rax], T_closure
  3924 00002D6A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3925 00002D6E 48C74009[7B2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3748
  3926 00002D76 E9DA030000              	jmp .L_lambda_simple_end_3748
  3927                                  .L_lambda_simple_code_3748:	; lambda-simple body
  3928 00002D7B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3929 00002D81 740B                    	je .L_lambda_simple_arity_check_ok_3748
  3930 00002D83 FF742410                	push qword [rsp + 8 * 2]
  3931 00002D87 6A01                    	push 1
  3932 00002D89 E9F9F00000              	jmp L_error_incorrect_arity_simple
  3933                                  .L_lambda_simple_arity_check_ok_3748:
  3934 00002D8E C8000000                	enter 0, 0
  3935 00002D92 BF08000000              	mov rdi, 8
  3936 00002D97 E832F10000              	call malloc
  3937 00002D9C 488B5D20                	mov rbx, PARAM(0)
  3938 00002DA0 488918                  	mov qword [rax], rbx
  3939 00002DA3 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  3940                                  
  3941 00002DA7 48B8-                            	mov rax, sob_void
  3941 00002DA9 [0000000000000000] 
  3942                                  
  3943 00002DB1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3944 00002DB6 E813F10000              	call malloc
  3945 00002DBB 50                      	push rax
  3946 00002DBC BF08000000              	mov rdi, 8 * 1	; new rib
  3947 00002DC1 E808F10000              	call malloc
  3948 00002DC6 50                      	push rax
  3949 00002DC7 BF10000000              	mov rdi, 8 * 2	; extended env
  3950 00002DCC E8FDF00000              	call malloc
  3951 00002DD1 488B7D10                	mov rdi, ENV
  3952 00002DD5 BE00000000              	mov rsi, 0
  3953 00002DDA BA01000000              	mov rdx, 1
  3954                                  .L_lambda_simple_env_loop_3749:	; ext_env[i + 1] <-- env[i]
  3955 00002DDF 4883FE01                	cmp rsi, 1
  3956 00002DE3 7410                    	je .L_lambda_simple_env_end_3749
  3957 00002DE5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3958 00002DE9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3959 00002DED 48FFC6                  	inc rsi
  3960 00002DF0 48FFC2                  	inc rdx
  3961 00002DF3 EBEA                    	jmp .L_lambda_simple_env_loop_3749
  3962                                  .L_lambda_simple_env_end_3749:
  3963 00002DF5 5B                      	pop rbx
  3964 00002DF6 BE00000000              	mov rsi, 0
  3965                                  .L_lambda_simple_params_loop_3749:	; copy params
  3966 00002DFB 4883FE01                	cmp rsi, 1
  3967 00002DFF 740E                    	je .L_lambda_simple_params_end_3749
  3968 00002E01 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3969 00002E06 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3970 00002E0A 48FFC6                  	inc rsi
  3971 00002E0D EBEC                    	jmp .L_lambda_simple_params_loop_3749
  3972                                  .L_lambda_simple_params_end_3749:
  3973 00002E0F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3974 00002E12 4889C3                  	mov rbx, rax
  3975 00002E15 58                      	pop rax
  3976 00002E16 C60005                  	mov byte [rax], T_closure
  3977 00002E19 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3978 00002E1D 48C74009[2A2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3749
  3979 00002E25 E916010000              	jmp .L_lambda_simple_end_3749
  3980                                  .L_lambda_simple_code_3749:	; lambda-simple body
  3981 00002E2A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3982 00002E30 740B                    	je .L_lambda_simple_arity_check_ok_3749
  3983 00002E32 FF742410                	push qword [rsp + 8 * 2]
  3984 00002E36 6A02                    	push 2
  3985 00002E38 E94AF00000              	jmp L_error_incorrect_arity_simple
  3986                                  .L_lambda_simple_arity_check_ok_3749:
  3987 00002E3D C8000000                	enter 0, 0
  3988 00002E41 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  3989 00002E45 50                      	push rax
  3990 00002E46 6A01                    	push 1
  3991 00002E48 488B0425[00000000]      	mov rax, qword [free_var_0]
  3992                                  	assert_closure(rax)
    42 00002E50 803805              <1>  cmp byte [%1], %2
    43 00002E53 0F8569080100        <1>  jne L_error_incorrect_type
  3993 00002E59 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3994 00002E5C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3995                                  
  3996 00002E5F 483D[02000000]                  	cmp rax, sob_boolean_false
  3997                                  
  3998 00002E65 7409                            	je .L_if_else_47c8
  3999 00002E67 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4000                                  
  4001 00002E6B E9CC000000                      	jmp .L_if_end_47c8
  4002                                  
  4003                                          	.L_if_else_47c8:
  4004 00002E70 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4005 00002E74 50                      	push rax
  4006 00002E75 6A01                    	push 1
  4007 00002E77 488B0425[88000000]      	mov rax, qword [free_var_17]
  4008                                  	assert_closure(rax)
    42 00002E7F 803805              <1>  cmp byte [%1], %2
    43 00002E82 0F853A080100        <1>  jne L_error_incorrect_type
  4009 00002E88 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4010 00002E8B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4011 00002E8E 50                      	push rax
  4012 00002E8F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4013 00002E93 50                      	push rax
  4014 00002E94 6A01                    	push 1
  4015 00002E96 488B0425[80000000]      	mov rax, qword [free_var_16]
  4016                                  	assert_closure(rax)
    42 00002E9E 803805              <1>  cmp byte [%1], %2
    43 00002EA1 0F851B080100        <1>  jne L_error_incorrect_type
  4017 00002EA7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4018 00002EAA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4019 00002EAD 50                      	push rax
  4020 00002EAE 6A02                    	push 2
  4021 00002EB0 488B4510                	mov rax, qword [rbp + 8 * 2]
  4022                                  
  4023 00002EB4 488B00                                            	mov rax, qword[rax + 8 * 0]
  4024                                  
  4025 00002EB7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4026 00002EBA 488B00                  	mov rax, qword [rax]
  4027                                  	assert_closure(rax)
    42 00002EBD 803805              <1>  cmp byte [%1], %2
    43 00002EC0 0F85FC070100        <1>  jne L_error_incorrect_type
  4028 00002EC6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4029 00002EC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4030 00002ECC 50                      	push rax
  4031 00002ECD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4032 00002ED1 50                      	push rax
  4033 00002ED2 6A02                    	push 2
  4034 00002ED4 488B0425[68000000]      	mov rax, qword [free_var_13]
  4035                                  .L_applic_TC_3fe3:
  4036 00002EDC 803805                  	cmp byte [rax], T_closure
  4037 00002EDF 0F859EFF0000            	jne L_code_ptr_error
  4038 00002EE5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4039 00002EE9 53                      	push rbx
  4040 00002EEA FF7508                  	push qword [rbp + 8]
  4041 00002EED FF7500                  	push qword [rbp]
  4042 00002EF0 488B4D18                	mov rcx, [rbp + 3 * 8]
  4043 00002EF4 488B542418              	mov rdx, [rsp + 3 * 8]
  4044 00002EF9 488D7204                	lea rsi, [rdx + 4]
  4045 00002EFD 4C8D4EFF                	lea r9, [rsi - 1]
  4046 00002F01 488D7903                	lea rdi, [rcx + 3]
  4047 00002F05 4D31C0                  	xor r8, r8
  4048                                  .L_tc_recycle_frame_loop_3fe3:
  4049 00002F08 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4050 00002F0C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4051 00002F11 49FFC9                  	dec r9
  4052 00002F14 4D31C0                  	xor r8, r8
  4053 00002F17 48FFCF                  	dec rdi
  4054 00002F1A 48FFCE                  	dec rsi
  4055 00002F1D 4883FE00                	cmp rsi, 0
  4056 00002F21 75E5                    	jne .L_tc_recycle_frame_loop_3fe3
  4057                                  .L_tc_recycle_frame_done_3fe3:
  4058                                  ;this pop rbp in sot to the right place
  4059 00002F23 4989C9                  	mov r9, rcx
  4060 00002F26 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4061 00002F2E 4C01CC                  	add rsp, r9
  4062 00002F31 5D                      	pop rbp
  4063 00002F32 488B4D00                	mov rcx, qword [rbp]
  4064 00002F36 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4065 00002F3A FFE3                    	jmp rbx
  4066                                  
  4067                                          	.L_if_end_47c8:
  4068 00002F3C C9                      	leave
  4069 00002F3D C22000                  	ret 8 * (2 + 2)
  4070                                  .L_lambda_simple_end_3749:	; new closure is in rax
  4071 00002F40 50                      	push rax
  4072 00002F41 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4073 00002F45 8F00                    	pop qword [rax]
  4074 00002F47 48B8-                   	mov rax, sob_void
  4074 00002F49 [0000000000000000] 
  4075                                  
  4076 00002F51 BF11000000              	mov rdi, (1 + 8 + 8)
  4077 00002F56 E873EF0000              	call malloc
  4078 00002F5B 50                      	push rax
  4079 00002F5C BF08000000              	mov rdi, 8 * 1
  4080 00002F61 E868EF0000              	call malloc
  4081 00002F66 50                      	push rax
  4082 00002F67 BF10000000              	mov rdi, 8 * 2
  4083 00002F6C E85DEF0000              	call malloc
  4084 00002F71 488B7D10                	mov rdi, ENV
  4085 00002F75 4831F6                  	xor rsi, rsi
  4086 00002F78 4831D2                  	xor rdx, rdx
  4087 00002F7B 48FFC2                  	inc rdx
  4088                                  	.L_lambda_opt_env_loop_087b:
  4089                                  
  4090 00002F7E 4883FE01                        	cmp rsi, 1
  4091                                  
  4092 00002F82 7412                            	je .L_lambda_opt_env_end_087b
  4093 00002F84 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4094 00002F88 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4095 00002F8C 4883C201                	add rdx, 1
  4096 00002F90 4883C601                	add rsi, 1
  4097 00002F94 EBE8                    	jmp .L_lambda_opt_env_loop_087b
  4098                                  
  4099                                          	.L_lambda_opt_env_end_087b:
  4100 00002F96 5B                      	pop rbx
  4101 00002F97 4831F6                  	xor rsi, rsi
  4102                                  	.L_lambda_opt_params_loop_087b:
  4103                                  
  4104 00002F9A 4883FE01                        	cmp rsi, 1
  4105                                  
  4106 00002F9E 740F                            	je .L_lambda_opt_params_end_087b
  4107 00002FA0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4108 00002FA5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4109 00002FA9 4883C601                	add rsi, 1
  4110 00002FAD EBEB                    	jmp .L_lambda_opt_params_loop_087b
  4111                                  
  4112                                          	.L_lambda_opt_params_end_087b:
  4113 00002FAF 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4114 00002FB2 4889C3                  	mov rbx, rax
  4115 00002FB5 58                      	pop rax
  4116 00002FB6 C60005                  	mov byte [rax], T_closure
  4117 00002FB9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4118 00002FBD 48C74009[CA2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_087b
  4119                                  
  4120 00002FC5 E987010000                      	jmp .L_lambda_opt_end_087b
  4121                                  
  4122                                          	.L_lambda_opt_code_087b:
  4123                                  
  4124 00002FCA 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  4125                                  
  4126 00002FD0 740D                            	je .L_lambda_opt_arity_check_exact_087b  ;same num_of_args
  4127                                  
  4128 00002FD2 7F65                            	jg .L_lambda_opt_arity_check_more_087b  ;greater num_of_args
  4129 00002FD4 FF742410                	push qword [rsp + 8 * 2]
  4130 00002FD8 6A01                    	push 1
  4131 00002FDA E9BCEE0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4132                                  .L_lambda_opt_arity_check_exact_087b:
  4133 00002FDF 4883EC08                	sub rsp, 8 * 1
  4134 00002FE3 488D7F10                	lea rdi, [rdi + (8 * 2)]
  4135 00002FE7 4889E7                  	mov rdi, rsp 
  4136 00002FEA 488B4708                	mov rax, qword [rdi + 8]
  4137 00002FEE 488907                  	mov qword [rdi], rax
  4138 00002FF1 488D7F08                	lea rdi, [rdi + 8]
  4139 00002FF5 488B4708                	mov rax, qword [rdi + 8]
  4140 00002FF9 488907                  	mov qword [rdi], rax
  4141 00002FFC 488D7F08                	lea rdi, [rdi + 8]
  4142 00003000 488B4708                	mov rax, qword [rdi + 8]
  4143 00003004 4889C1                  	mov rcx, rax
  4144 00003007 4883C001                	add rax, 1
  4145 0000300B 488907                  	mov qword [rdi], rax
  4146 0000300E 488D7F08                	lea rdi, [rdi + 8]
  4147                                  	.L_lambda_opt_stack_shrink_loop_196f:
  4148 00003012 4883F900                	cmp rcx, 0
  4149 00003016 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_196f
  4150 00003018 4883E901                	sub rcx, 1
  4151 0000301C 488D4010                	lea rax, [rax + (8 * 2)]
  4152 00003020 488B4708                	mov rax, qword [rdi + 8]
  4153 00003024 488907                  	mov qword [rdi], rax
  4154 00003027 488D7F08                	lea rdi, [rdi + 8]
  4155 0000302B EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_196f
  4156                                  
  4157                                          	.L_lambda_opt_stack_shrink_loop_exit_196f:
  4158 0000302D 48C707[01000000]        	mov qword [rdi], sob_nil
  4159 00003034 E997000000              	jmp .L_lambda_opt_stack_adjusted_087b
  4160                                  
  4161                                          	.L_lambda_opt_arity_check_more_087b:
  4162 00003039 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4163 0000303E 488D4EFF                	lea rcx, [rsi - 1]
  4164 00003042 49B8-                   	mov r8, sob_nil
  4164 00003044 [0100000000000000] 
  4165 0000304C 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4166 00003051 4889F2                  	mov rdx, rsi
  4167                                  	.L_lambda_opt_stack_shrink_loop_1970:
  4168 00003054 4883F900                	cmp rcx, 0
  4169 00003058 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1970
  4170 0000305A BF11000000              	mov rdi, 1 + (8 * 2)
  4171 0000305F E86AEE0000              	call malloc
  4172 00003064 C60021                  	mov byte [rax], T_pair
  4173 00003067 488B1E                  	mov rbx, qword [rsi]
  4174 0000306A 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4175 0000306E 4C894009                	mov SOB_PAIR_CDR(rax), r8
  4176 00003072 4883C6F8                	add rsi, -8
  4177 00003076 4883E901                	sub rcx, 1
  4178 0000307A 4989C0                  	mov r8, rax
  4179 0000307D EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1970
  4180                                  
  4181                                          	.L_lambda_opt_stack_shrink_loop_exit_1970:
  4182 0000307F 4C8902                  	mov qword [rdx], r8
  4183 00003082 4883EA08                	sub rdx, 8 * 1
  4184 00003086 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  4185                                  
  4186 0000308B B901000000                      	mov rcx, 1 
  4187                                  
  4188                                          	.L_lambda_opt_stack_shrink_loop_1971:
  4189 00003090 4883F900                	cmp rcx, 0
  4190 00003094 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1971
  4191 00003096 488B06                  	mov rax, qword [rsi]
  4192 00003099 488902                  	mov qword [rdx], rax
  4193 0000309C 488D76F8                	lea rsi, [rsi - 8]
  4194 000030A0 4883C2F8                	add rdx, -8
  4195 000030A4 4883C1FF                	add rcx, -1
  4196 000030A8 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1971
  4197                                  
  4198                                          	.L_lambda_opt_stack_shrink_loop_exit_1971:
  4199                                  
  4200 000030AA 48C70202000000                  	mov qword [rdx], 1 + 1
  4201 000030B1 4883C6F8                	add rsi, -8
  4202 000030B5 4883C2F8                	add rdx, -8
  4203 000030B9 488B06                  	mov rax, qword [rsi]
  4204 000030BC 488902                  	mov qword [rdx], rax
  4205 000030BF 4883C2F8                	add rdx, -8
  4206 000030C3 488D76F8                	lea rsi, [rsi - 8]
  4207 000030C7 488B06                  	mov rax, qword [rsi]
  4208 000030CA 488902                  	mov qword [rdx], rax
  4209 000030CD 4889D4                  	mov rsp, rdx
  4210                                  	.L_lambda_opt_stack_adjusted_087b:
  4211 000030D0 C8000000                	enter 0, 0
  4212 000030D4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4213 000030D8 50                      	push rax
  4214 000030D9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4215 000030DD 50                      	push rax
  4216 000030DE 6A02                    	push 2
  4217 000030E0 488B4510                	mov rax, qword [rbp + 8 * 2]
  4218                                  
  4219 000030E4 488B00                                            	mov rax, qword[rax + 8 * 0]
  4220                                  
  4221 000030E7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4222 000030EA 488B00                  	mov rax, qword [rax]
  4223                                  .L_applic_TC_3fe4:
  4224 000030ED 803805                  	cmp byte [rax], T_closure
  4225 000030F0 0F858DFD0000            	jne L_code_ptr_error
  4226 000030F6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4227 000030FA 53                      	push rbx
  4228 000030FB FF7508                  	push qword [rbp + 8]
  4229 000030FE FF7500                  	push qword [rbp]
  4230 00003101 488B4D18                	mov rcx, [rbp + 3 * 8]
  4231 00003105 488B542418              	mov rdx, [rsp + 3 * 8]
  4232 0000310A 488D7204                	lea rsi, [rdx + 4]
  4233 0000310E 4C8D4EFF                	lea r9, [rsi - 1]
  4234 00003112 488D7903                	lea rdi, [rcx + 3]
  4235 00003116 4D31C0                  	xor r8, r8
  4236                                  .L_tc_recycle_frame_loop_3fe4:
  4237 00003119 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4238 0000311D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4239 00003122 49FFC9                  	dec r9
  4240 00003125 4D31C0                  	xor r8, r8
  4241 00003128 48FFCF                  	dec rdi
  4242 0000312B 48FFCE                  	dec rsi
  4243 0000312E 4883FE00                	cmp rsi, 0
  4244 00003132 75E5                    	jne .L_tc_recycle_frame_loop_3fe4
  4245                                  .L_tc_recycle_frame_done_3fe4:
  4246                                  ;this pop rbp in sot to the right place
  4247 00003134 4989C9                  	mov r9, rcx
  4248 00003137 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4249 0000313F 4C01CC                  	add rsp, r9
  4250 00003142 5D                      	pop rbp
  4251 00003143 488B4D00                	mov rcx, qword [rbp]
  4252 00003147 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4253 0000314B FFE3                    	jmp rbx
  4254 0000314D C9                      	leave
  4255 0000314E C22000                  	ret 8 * (2 + 2)
  4256                                  .L_lambda_opt_end_087b:	; new closure is in rax
  4257 00003151 C9                      	leave
  4258 00003152 C21800                  	ret 8 * (2 + 1)
  4259                                  .L_lambda_simple_end_3748:	; new closure is in rax
  4260                                  	assert_closure(rax)
    42 00003155 803805              <1>  cmp byte [%1], %2
    43 00003158 0F8564050100        <1>  jne L_error_incorrect_type
  4261 0000315E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4262 00003161 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4263 00003164 48890425[C0020000]      	mov qword [free_var_88], rax
  4264 0000316C 48B8-                   	mov rax, sob_void
  4264 0000316E [0000000000000000] 
  4265                                  
  4266 00003176 4889C7                  	mov rdi, rax
  4267 00003179 E861ED0000              	call print_sexpr_if_not_void
  4268                                  
  4269 0000317E 48B8-                   	mov rax,L_constants + 23
  4269 00003180 [1700000000000000] 
  4270 00003188 50                      	push rax
  4271 00003189 6A01                    	push 1
  4272 0000318B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4273 00003190 E839ED0000              	call malloc
  4274 00003195 50                      	push rax
  4275 00003196 BF00000000              	mov rdi, 8 * 0	; new rib
  4276 0000319B E82EED0000              	call malloc
  4277 000031A0 50                      	push rax
  4278 000031A1 BF08000000              	mov rdi, 8 * 1	; extended env
  4279 000031A6 E823ED0000              	call malloc
  4280 000031AB 488B7D10                	mov rdi, ENV
  4281 000031AF BE00000000              	mov rsi, 0
  4282 000031B4 BA01000000              	mov rdx, 1
  4283                                  .L_lambda_simple_env_loop_374a:	; ext_env[i + 1] <-- env[i]
  4284 000031B9 4883FE00                	cmp rsi, 0
  4285 000031BD 7410                    	je .L_lambda_simple_env_end_374a
  4286 000031BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4287 000031C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4288 000031C7 48FFC6                  	inc rsi
  4289 000031CA 48FFC2                  	inc rdx
  4290 000031CD EBEA                    	jmp .L_lambda_simple_env_loop_374a
  4291                                  .L_lambda_simple_env_end_374a:
  4292 000031CF 5B                      	pop rbx
  4293 000031D0 BE00000000              	mov rsi, 0
  4294                                  .L_lambda_simple_params_loop_374a:	; copy params
  4295 000031D5 4883FE00                	cmp rsi, 0
  4296 000031D9 740E                    	je .L_lambda_simple_params_end_374a
  4297 000031DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4298 000031E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4299 000031E4 48FFC6                  	inc rsi
  4300 000031E7 EBEC                    	jmp .L_lambda_simple_params_loop_374a
  4301                                  .L_lambda_simple_params_end_374a:
  4302 000031E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4303 000031EC 4889C3                  	mov rbx, rax
  4304 000031EF 58                      	pop rax
  4305 000031F0 C60005                  	mov byte [rax], T_closure
  4306 000031F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4307 000031F7 48C74009[04320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_374a
  4308 000031FF E92E040000              	jmp .L_lambda_simple_end_374a
  4309                                  .L_lambda_simple_code_374a:	; lambda-simple body
  4310 00003204 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4311 0000320A 740B                    	je .L_lambda_simple_arity_check_ok_374a
  4312 0000320C FF742410                	push qword [rsp + 8 * 2]
  4313 00003210 6A01                    	push 1
  4314 00003212 E970EC0000              	jmp L_error_incorrect_arity_simple
  4315                                  .L_lambda_simple_arity_check_ok_374a:
  4316 00003217 C8000000                	enter 0, 0
  4317 0000321B BF08000000              	mov rdi, 8
  4318 00003220 E8A9EC0000              	call malloc
  4319 00003225 488B5D20                	mov rbx, PARAM(0)
  4320 00003229 488918                  	mov qword [rax], rbx
  4321 0000322C 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4322                                  
  4323 00003230 48B8-                            	mov rax, sob_void
  4323 00003232 [0000000000000000] 
  4324                                  
  4325 0000323A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4326 0000323F E88AEC0000              	call malloc
  4327 00003244 50                      	push rax
  4328 00003245 BF08000000              	mov rdi, 8 * 1	; new rib
  4329 0000324A E87FEC0000              	call malloc
  4330 0000324F 50                      	push rax
  4331 00003250 BF10000000              	mov rdi, 8 * 2	; extended env
  4332 00003255 E874EC0000              	call malloc
  4333 0000325A 488B7D10                	mov rdi, ENV
  4334 0000325E BE00000000              	mov rsi, 0
  4335 00003263 BA01000000              	mov rdx, 1
  4336                                  .L_lambda_simple_env_loop_374b:	; ext_env[i + 1] <-- env[i]
  4337 00003268 4883FE01                	cmp rsi, 1
  4338 0000326C 7410                    	je .L_lambda_simple_env_end_374b
  4339 0000326E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4340 00003272 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4341 00003276 48FFC6                  	inc rsi
  4342 00003279 48FFC2                  	inc rdx
  4343 0000327C EBEA                    	jmp .L_lambda_simple_env_loop_374b
  4344                                  .L_lambda_simple_env_end_374b:
  4345 0000327E 5B                      	pop rbx
  4346 0000327F BE00000000              	mov rsi, 0
  4347                                  .L_lambda_simple_params_loop_374b:	; copy params
  4348 00003284 4883FE01                	cmp rsi, 1
  4349 00003288 740E                    	je .L_lambda_simple_params_end_374b
  4350 0000328A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4351 0000328F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4352 00003293 48FFC6                  	inc rsi
  4353 00003296 EBEC                    	jmp .L_lambda_simple_params_loop_374b
  4354                                  .L_lambda_simple_params_end_374b:
  4355 00003298 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4356 0000329B 4889C3                  	mov rbx, rax
  4357 0000329E 58                      	pop rax
  4358 0000329F C60005                  	mov byte [rax], T_closure
  4359 000032A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4360 000032A6 48C74009[B3320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_374b
  4361 000032AE E917010000              	jmp .L_lambda_simple_end_374b
  4362                                  .L_lambda_simple_code_374b:	; lambda-simple body
  4363 000032B3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4364 000032B9 740B                    	je .L_lambda_simple_arity_check_ok_374b
  4365 000032BB FF742410                	push qword [rsp + 8 * 2]
  4366 000032BF 6A02                    	push 2
  4367 000032C1 E9C1EB0000              	jmp L_error_incorrect_arity_simple
  4368                                  .L_lambda_simple_arity_check_ok_374b:
  4369 000032C6 C8000000                	enter 0, 0
  4370 000032CA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4371 000032CE 50                      	push rax
  4372 000032CF 6A01                    	push 1
  4373 000032D1 488B0425[08000000]      	mov rax, qword [free_var_1]
  4374                                  	assert_closure(rax)
    42 000032D9 803805              <1>  cmp byte [%1], %2
    43 000032DC 0F85E0030100        <1>  jne L_error_incorrect_type
  4375 000032E2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4376 000032E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4377                                  
  4378 000032E8 483D[02000000]                  	cmp rax, sob_boolean_false
  4379                                  
  4380 000032EE 0F84CE000000                    	je .L_if_else_47c9
  4381 000032F4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4382 000032F8 50                      	push rax
  4383 000032F9 6A01                    	push 1
  4384 000032FB 488B0425[88000000]      	mov rax, qword [free_var_17]
  4385                                  	assert_closure(rax)
    42 00003303 803805              <1>  cmp byte [%1], %2
    43 00003306 0F85B6030100        <1>  jne L_error_incorrect_type
  4386 0000330C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4387 0000330F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4388 00003312 50                      	push rax
  4389 00003313 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4390 00003317 50                      	push rax
  4391 00003318 6A01                    	push 1
  4392 0000331A 488B0425[80000000]      	mov rax, qword [free_var_16]
  4393                                  	assert_closure(rax)
    42 00003322 803805              <1>  cmp byte [%1], %2
    43 00003325 0F8597030100        <1>  jne L_error_incorrect_type
  4394 0000332B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4395 0000332E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4396 00003331 50                      	push rax
  4397 00003332 6A02                    	push 2
  4398 00003334 488B4510                	mov rax, qword [rbp + 8 * 2]
  4399                                  
  4400 00003338 488B00                                            	mov rax, qword[rax + 8 * 0]
  4401                                  
  4402 0000333B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4403 0000333E 488B00                  	mov rax, qword [rax]
  4404                                  	assert_closure(rax)
    42 00003341 803805              <1>  cmp byte [%1], %2
    43 00003344 0F8578030100        <1>  jne L_error_incorrect_type
  4405 0000334A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4406 0000334D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4407 00003350 50                      	push rax
  4408 00003351 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4409 00003355 50                      	push rax
  4410 00003356 6A02                    	push 2
  4411 00003358 488B0425[68000000]      	mov rax, qword [free_var_13]
  4412                                  .L_applic_TC_3fe5:
  4413 00003360 803805                  	cmp byte [rax], T_closure
  4414 00003363 0F851AFB0000            	jne L_code_ptr_error
  4415 00003369 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4416 0000336D 53                      	push rbx
  4417 0000336E FF7508                  	push qword [rbp + 8]
  4418 00003371 FF7500                  	push qword [rbp]
  4419 00003374 488B4D18                	mov rcx, [rbp + 3 * 8]
  4420 00003378 488B542418              	mov rdx, [rsp + 3 * 8]
  4421 0000337D 488D7204                	lea rsi, [rdx + 4]
  4422 00003381 4C8D4EFF                	lea r9, [rsi - 1]
  4423 00003385 488D7903                	lea rdi, [rcx + 3]
  4424 00003389 4D31C0                  	xor r8, r8
  4425                                  .L_tc_recycle_frame_loop_3fe5:
  4426 0000338C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4427 00003390 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4428 00003395 49FFC9                  	dec r9
  4429 00003398 4D31C0                  	xor r8, r8
  4430 0000339B 48FFCF                  	dec rdi
  4431 0000339E 48FFCE                  	dec rsi
  4432 000033A1 4883FE00                	cmp rsi, 0
  4433 000033A5 75E5                    	jne .L_tc_recycle_frame_loop_3fe5
  4434                                  .L_tc_recycle_frame_done_3fe5:
  4435                                  ;this pop rbp in sot to the right place
  4436 000033A7 4989C9                  	mov r9, rcx
  4437 000033AA 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4438 000033B2 4C01CC                  	add rsp, r9
  4439 000033B5 5D                      	pop rbp
  4440 000033B6 488B4D00                	mov rcx, qword [rbp]
  4441 000033BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4442 000033BE FFE3                    	jmp rbx
  4443                                  
  4444 000033C0 EB04                            	jmp .L_if_end_47c9
  4445                                  
  4446                                          	.L_if_else_47c9:
  4447 000033C2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4448                                  
  4449                                          	.L_if_end_47c9:
  4450 000033C6 C9                      	leave
  4451 000033C7 C22000                  	ret 8 * (2 + 2)
  4452                                  .L_lambda_simple_end_374b:	; new closure is in rax
  4453 000033CA 50                      	push rax
  4454 000033CB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4455 000033CF 8F00                    	pop qword [rax]
  4456 000033D1 48B8-                   	mov rax, sob_void
  4456 000033D3 [0000000000000000] 
  4457                                  
  4458 000033DB BF11000000              	mov rdi, (1 + 8 + 8)
  4459 000033E0 E8E9EA0000              	call malloc
  4460 000033E5 50                      	push rax
  4461 000033E6 BF08000000              	mov rdi, 8 * 1
  4462 000033EB E8DEEA0000              	call malloc
  4463 000033F0 50                      	push rax
  4464 000033F1 BF10000000              	mov rdi, 8 * 2
  4465 000033F6 E8D3EA0000              	call malloc
  4466 000033FB 488B7D10                	mov rdi, ENV
  4467 000033FF 4831F6                  	xor rsi, rsi
  4468 00003402 4831D2                  	xor rdx, rdx
  4469 00003405 48FFC2                  	inc rdx
  4470                                  	.L_lambda_opt_env_loop_087c:
  4471                                  
  4472 00003408 4883FE01                        	cmp rsi, 1
  4473                                  
  4474 0000340C 7412                            	je .L_lambda_opt_env_end_087c
  4475 0000340E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4476 00003412 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4477 00003416 4883C201                	add rdx, 1
  4478 0000341A 4883C601                	add rsi, 1
  4479 0000341E EBE8                    	jmp .L_lambda_opt_env_loop_087c
  4480                                  
  4481                                          	.L_lambda_opt_env_end_087c:
  4482 00003420 5B                      	pop rbx
  4483 00003421 4831F6                  	xor rsi, rsi
  4484                                  	.L_lambda_opt_params_loop_087c:
  4485                                  
  4486 00003424 4883FE01                        	cmp rsi, 1
  4487                                  
  4488 00003428 740F                            	je .L_lambda_opt_params_end_087c
  4489 0000342A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4490 0000342F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4491 00003433 4883C601                	add rsi, 1
  4492 00003437 EBEB                    	jmp .L_lambda_opt_params_loop_087c
  4493                                  
  4494                                          	.L_lambda_opt_params_end_087c:
  4495 00003439 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4496 0000343C 4889C3                  	mov rbx, rax
  4497 0000343F 58                      	pop rax
  4498 00003440 C60005                  	mov byte [rax], T_closure
  4499 00003443 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4500 00003447 48C74009[54340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_087c
  4501                                  
  4502 0000344F E9DA010000                      	jmp .L_lambda_opt_end_087c
  4503                                  
  4504                                          	.L_lambda_opt_code_087c:
  4505                                  
  4506 00003454 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  4507                                  
  4508 0000345A 740D                            	je .L_lambda_opt_arity_check_exact_087c  ;same num_of_args
  4509                                  
  4510 0000345C 7F65                            	jg .L_lambda_opt_arity_check_more_087c  ;greater num_of_args
  4511 0000345E FF742410                	push qword [rsp + 8 * 2]
  4512 00003462 6A01                    	push 1
  4513 00003464 E932EA0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4514                                  .L_lambda_opt_arity_check_exact_087c:
  4515 00003469 4883EC08                	sub rsp, 8 * 1
  4516 0000346D 488D7F10                	lea rdi, [rdi + (8 * 2)]
  4517 00003471 4889E7                  	mov rdi, rsp 
  4518 00003474 488B4708                	mov rax, qword [rdi + 8]
  4519 00003478 488907                  	mov qword [rdi], rax
  4520 0000347B 488D7F08                	lea rdi, [rdi + 8]
  4521 0000347F 488B4708                	mov rax, qword [rdi + 8]
  4522 00003483 488907                  	mov qword [rdi], rax
  4523 00003486 488D7F08                	lea rdi, [rdi + 8]
  4524 0000348A 488B4708                	mov rax, qword [rdi + 8]
  4525 0000348E 4889C1                  	mov rcx, rax
  4526 00003491 4883C001                	add rax, 1
  4527 00003495 488907                  	mov qword [rdi], rax
  4528 00003498 488D7F08                	lea rdi, [rdi + 8]
  4529                                  	.L_lambda_opt_stack_shrink_loop_1972:
  4530 0000349C 4883F900                	cmp rcx, 0
  4531 000034A0 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1972
  4532 000034A2 4883E901                	sub rcx, 1
  4533 000034A6 488D4010                	lea rax, [rax + (8 * 2)]
  4534 000034AA 488B4708                	mov rax, qword [rdi + 8]
  4535 000034AE 488907                  	mov qword [rdi], rax
  4536 000034B1 488D7F08                	lea rdi, [rdi + 8]
  4537 000034B5 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1972
  4538                                  
  4539                                          	.L_lambda_opt_stack_shrink_loop_exit_1972:
  4540 000034B7 48C707[01000000]        	mov qword [rdi], sob_nil
  4541 000034BE E997000000              	jmp .L_lambda_opt_stack_adjusted_087c
  4542                                  
  4543                                          	.L_lambda_opt_arity_check_more_087c:
  4544 000034C3 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4545 000034C8 488D4EFF                	lea rcx, [rsi - 1]
  4546 000034CC 49B8-                   	mov r8, sob_nil
  4546 000034CE [0100000000000000] 
  4547 000034D6 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4548 000034DB 4889F2                  	mov rdx, rsi
  4549                                  	.L_lambda_opt_stack_shrink_loop_1973:
  4550 000034DE 4883F900                	cmp rcx, 0
  4551 000034E2 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1973
  4552 000034E4 BF11000000              	mov rdi, 1 + (8 * 2)
  4553 000034E9 E8E0E90000              	call malloc
  4554 000034EE C60021                  	mov byte [rax], T_pair
  4555 000034F1 488B1E                  	mov rbx, qword [rsi]
  4556 000034F4 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4557 000034F8 4C894009                	mov SOB_PAIR_CDR(rax), r8
  4558 000034FC 4883C6F8                	add rsi, -8
  4559 00003500 4883E901                	sub rcx, 1
  4560 00003504 4989C0                  	mov r8, rax
  4561 00003507 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1973
  4562                                  
  4563                                          	.L_lambda_opt_stack_shrink_loop_exit_1973:
  4564 00003509 4C8902                  	mov qword [rdx], r8
  4565 0000350C 4883EA08                	sub rdx, 8 * 1
  4566 00003510 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  4567                                  
  4568 00003515 B901000000                      	mov rcx, 1 
  4569                                  
  4570                                          	.L_lambda_opt_stack_shrink_loop_1974:
  4571 0000351A 4883F900                	cmp rcx, 0
  4572 0000351E 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1974
  4573 00003520 488B06                  	mov rax, qword [rsi]
  4574 00003523 488902                  	mov qword [rdx], rax
  4575 00003526 488D76F8                	lea rsi, [rsi - 8]
  4576 0000352A 4883C2F8                	add rdx, -8
  4577 0000352E 4883C1FF                	add rcx, -1
  4578 00003532 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1974
  4579                                  
  4580                                          	.L_lambda_opt_stack_shrink_loop_exit_1974:
  4581                                  
  4582 00003534 48C70202000000                  	mov qword [rdx], 1 + 1
  4583 0000353B 4883C6F8                	add rsi, -8
  4584 0000353F 4883C2F8                	add rdx, -8
  4585 00003543 488B06                  	mov rax, qword [rsi]
  4586 00003546 488902                  	mov qword [rdx], rax
  4587 00003549 4883C2F8                	add rdx, -8
  4588 0000354D 488D76F8                	lea rsi, [rsi - 8]
  4589 00003551 488B06                  	mov rax, qword [rsi]
  4590 00003554 488902                  	mov qword [rdx], rax
  4591 00003557 4889D4                  	mov rsp, rdx
  4592                                  	.L_lambda_opt_stack_adjusted_087c:
  4593 0000355A C8000000                	enter 0, 0
  4594 0000355E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4595 00003562 50                      	push rax
  4596 00003563 6A01                    	push 1
  4597 00003565 488B0425[88000000]      	mov rax, qword [free_var_17]
  4598                                  	assert_closure(rax)
    42 0000356D 803805              <1>  cmp byte [%1], %2
    43 00003570 0F854C010100        <1>  jne L_error_incorrect_type
  4599 00003576 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4600 00003579 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4601 0000357C 50                      	push rax
  4602 0000357D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4603 00003581 50                      	push rax
  4604 00003582 6A01                    	push 1
  4605 00003584 488B0425[80000000]      	mov rax, qword [free_var_16]
  4606                                  	assert_closure(rax)
    42 0000358C 803805              <1>  cmp byte [%1], %2
    43 0000358F 0F852D010100        <1>  jne L_error_incorrect_type
  4607 00003595 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4608 00003598 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4609 0000359B 50                      	push rax
  4610 0000359C 6A02                    	push 2
  4611 0000359E 488B4510                	mov rax, qword [rbp + 8 * 2]
  4612                                  
  4613 000035A2 488B00                                            	mov rax, qword[rax + 8 * 0]
  4614                                  
  4615 000035A5 488B00                                            	mov rax, qword[rax + 8 * 0]
  4616 000035A8 488B00                  	mov rax, qword [rax]
  4617                                  	assert_closure(rax)
    42 000035AB 803805              <1>  cmp byte [%1], %2
    43 000035AE 0F850E010100        <1>  jne L_error_incorrect_type
  4618 000035B4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4619 000035B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4620 000035BA 50                      	push rax
  4621 000035BB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4622 000035BF 50                      	push rax
  4623 000035C0 6A02                    	push 2
  4624 000035C2 488B0425[E8000000]      	mov rax, qword [free_var_29]
  4625                                  .L_applic_TC_3fe6:
  4626 000035CA 803805                  	cmp byte [rax], T_closure
  4627 000035CD 0F85B0F80000            	jne L_code_ptr_error
  4628 000035D3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4629 000035D7 53                      	push rbx
  4630 000035D8 FF7508                  	push qword [rbp + 8]
  4631 000035DB FF7500                  	push qword [rbp]
  4632 000035DE 488B4D18                	mov rcx, [rbp + 3 * 8]
  4633 000035E2 488B542418              	mov rdx, [rsp + 3 * 8]
  4634 000035E7 488D7204                	lea rsi, [rdx + 4]
  4635 000035EB 4C8D4EFF                	lea r9, [rsi - 1]
  4636 000035EF 488D7903                	lea rdi, [rcx + 3]
  4637 000035F3 4D31C0                  	xor r8, r8
  4638                                  .L_tc_recycle_frame_loop_3fe6:
  4639 000035F6 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4640 000035FA 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4641 000035FF 49FFC9                  	dec r9
  4642 00003602 4D31C0                  	xor r8, r8
  4643 00003605 48FFCF                  	dec rdi
  4644 00003608 48FFCE                  	dec rsi
  4645 0000360B 4883FE00                	cmp rsi, 0
  4646 0000360F 75E5                    	jne .L_tc_recycle_frame_loop_3fe6
  4647                                  .L_tc_recycle_frame_done_3fe6:
  4648                                  ;this pop rbp in sot to the right place
  4649 00003611 4989C9                  	mov r9, rcx
  4650 00003614 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4651 0000361C 4C01CC                  	add rsp, r9
  4652 0000361F 5D                      	pop rbp
  4653 00003620 488B4D00                	mov rcx, qword [rbp]
  4654 00003624 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4655 00003628 FFE3                    	jmp rbx
  4656 0000362A C9                      	leave
  4657 0000362B C22000                  	ret 8 * (2 + 2)
  4658                                  .L_lambda_opt_end_087c:	; new closure is in rax
  4659 0000362E C9                      	leave
  4660 0000362F C21800                  	ret 8 * (2 + 1)
  4661                                  .L_lambda_simple_end_374a:	; new closure is in rax
  4662                                  	assert_closure(rax)
    42 00003632 803805              <1>  cmp byte [%1], %2
    43 00003635 0F8587000100        <1>  jne L_error_incorrect_type
  4663 0000363B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4664 0000363E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4665 00003641 48890425[C8020000]      	mov qword [free_var_89], rax
  4666 00003649 48B8-                   	mov rax, sob_void
  4666 0000364B [0000000000000000] 
  4667                                  
  4668 00003653 4889C7                  	mov rdi, rax
  4669 00003656 E884E80000              	call print_sexpr_if_not_void
  4670                                  
  4671 0000365B BF11000000              	mov rdi, (1 + 8 + 8)
  4672 00003660 E869E80000              	call malloc
  4673 00003665 50                      	push rax
  4674 00003666 BF00000000              	mov rdi, 8 * 0
  4675 0000366B E85EE80000              	call malloc
  4676 00003670 50                      	push rax
  4677 00003671 BF08000000              	mov rdi, 8 * 1
  4678 00003676 E853E80000              	call malloc
  4679 0000367B 488B7D10                	mov rdi, ENV
  4680 0000367F 4831F6                  	xor rsi, rsi
  4681 00003682 4831D2                  	xor rdx, rdx
  4682 00003685 48FFC2                  	inc rdx
  4683                                  	.L_lambda_opt_env_loop_087d:
  4684                                  
  4685 00003688 4883FE00                        	cmp rsi, 0
  4686                                  
  4687 0000368C 7412                            	je .L_lambda_opt_env_end_087d
  4688 0000368E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4689 00003692 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4690 00003696 4883C201                	add rdx, 1
  4691 0000369A 4883C601                	add rsi, 1
  4692 0000369E EBE8                    	jmp .L_lambda_opt_env_loop_087d
  4693                                  
  4694                                          	.L_lambda_opt_env_end_087d:
  4695 000036A0 5B                      	pop rbx
  4696 000036A1 4831F6                  	xor rsi, rsi
  4697                                  	.L_lambda_opt_params_loop_087d:
  4698                                  
  4699 000036A4 4883FE00                        	cmp rsi, 0
  4700                                  
  4701 000036A8 740F                            	je .L_lambda_opt_params_end_087d
  4702 000036AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4703 000036AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4704 000036B3 4883C601                	add rsi, 1
  4705 000036B7 EBEB                    	jmp .L_lambda_opt_params_loop_087d
  4706                                  
  4707                                          	.L_lambda_opt_params_end_087d:
  4708 000036B9 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4709 000036BC 4889C3                  	mov rbx, rax
  4710 000036BF 58                      	pop rax
  4711 000036C0 C60005                  	mov byte [rax], T_closure
  4712 000036C3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4713 000036C7 48C74009[D4360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_087d
  4714                                  
  4715 000036CF E988040000                      	jmp .L_lambda_opt_end_087d
  4716                                  
  4717                                          	.L_lambda_opt_code_087d:
  4718                                  
  4719 000036D4 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  4720                                  
  4721 000036DA 740D                            	je .L_lambda_opt_arity_check_exact_087d  ;same num_of_args
  4722                                  
  4723 000036DC 7F65                            	jg .L_lambda_opt_arity_check_more_087d  ;greater num_of_args
  4724 000036DE FF742410                	push qword [rsp + 8 * 2]
  4725 000036E2 6A01                    	push 1
  4726 000036E4 E9B2E70000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4727                                  .L_lambda_opt_arity_check_exact_087d:
  4728 000036E9 4883EC08                	sub rsp, 8 * 1
  4729 000036ED 488D7F10                	lea rdi, [rdi + (8 * 2)]
  4730 000036F1 4889E7                  	mov rdi, rsp 
  4731 000036F4 488B4708                	mov rax, qword [rdi + 8]
  4732 000036F8 488907                  	mov qword [rdi], rax
  4733 000036FB 488D7F08                	lea rdi, [rdi + 8]
  4734 000036FF 488B4708                	mov rax, qword [rdi + 8]
  4735 00003703 488907                  	mov qword [rdi], rax
  4736 00003706 488D7F08                	lea rdi, [rdi + 8]
  4737 0000370A 488B4708                	mov rax, qword [rdi + 8]
  4738 0000370E 4889C1                  	mov rcx, rax
  4739 00003711 4883C001                	add rax, 1
  4740 00003715 488907                  	mov qword [rdi], rax
  4741 00003718 488D7F08                	lea rdi, [rdi + 8]
  4742                                  	.L_lambda_opt_stack_shrink_loop_1975:
  4743 0000371C 4883F900                	cmp rcx, 0
  4744 00003720 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1975
  4745 00003722 4883E901                	sub rcx, 1
  4746 00003726 488D4010                	lea rax, [rax + (8 * 2)]
  4747 0000372A 488B4708                	mov rax, qword [rdi + 8]
  4748 0000372E 488907                  	mov qword [rdi], rax
  4749 00003731 488D7F08                	lea rdi, [rdi + 8]
  4750 00003735 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1975
  4751                                  
  4752                                          	.L_lambda_opt_stack_shrink_loop_exit_1975:
  4753 00003737 48C707[01000000]        	mov qword [rdi], sob_nil
  4754 0000373E E997000000              	jmp .L_lambda_opt_stack_adjusted_087d
  4755                                  
  4756                                          	.L_lambda_opt_arity_check_more_087d:
  4757 00003743 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4758 00003748 488D4EFF                	lea rcx, [rsi - 1]
  4759 0000374C 49B8-                   	mov r8, sob_nil
  4759 0000374E [0100000000000000] 
  4760 00003756 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4761 0000375B 4889F2                  	mov rdx, rsi
  4762                                  	.L_lambda_opt_stack_shrink_loop_1976:
  4763 0000375E 4883F900                	cmp rcx, 0
  4764 00003762 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1976
  4765 00003764 BF11000000              	mov rdi, 1 + (8 * 2)
  4766 00003769 E860E70000              	call malloc
  4767 0000376E C60021                  	mov byte [rax], T_pair
  4768 00003771 488B1E                  	mov rbx, qword [rsi]
  4769 00003774 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4770 00003778 4C894009                	mov SOB_PAIR_CDR(rax), r8
  4771 0000377C 4883C6F8                	add rsi, -8
  4772 00003780 4883E901                	sub rcx, 1
  4773 00003784 4989C0                  	mov r8, rax
  4774 00003787 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1976
  4775                                  
  4776                                          	.L_lambda_opt_stack_shrink_loop_exit_1976:
  4777 00003789 4C8902                  	mov qword [rdx], r8
  4778 0000378C 4883EA08                	sub rdx, 8 * 1
  4779 00003790 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  4780                                  
  4781 00003795 B901000000                      	mov rcx, 1 
  4782                                  
  4783                                          	.L_lambda_opt_stack_shrink_loop_1977:
  4784 0000379A 4883F900                	cmp rcx, 0
  4785 0000379E 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1977
  4786 000037A0 488B06                  	mov rax, qword [rsi]
  4787 000037A3 488902                  	mov qword [rdx], rax
  4788 000037A6 488D76F8                	lea rsi, [rsi - 8]
  4789 000037AA 4883C2F8                	add rdx, -8
  4790 000037AE 4883C1FF                	add rcx, -1
  4791 000037B2 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1977
  4792                                  
  4793                                          	.L_lambda_opt_stack_shrink_loop_exit_1977:
  4794                                  
  4795 000037B4 48C70202000000                  	mov qword [rdx], 1 + 1
  4796 000037BB 4883C6F8                	add rsi, -8
  4797 000037BF 4883C2F8                	add rdx, -8
  4798 000037C3 488B06                  	mov rax, qword [rsi]
  4799 000037C6 488902                  	mov qword [rdx], rax
  4800 000037C9 4883C2F8                	add rdx, -8
  4801 000037CD 488D76F8                	lea rsi, [rsi - 8]
  4802 000037D1 488B06                  	mov rax, qword [rsi]
  4803 000037D4 488902                  	mov qword [rdx], rax
  4804 000037D7 4889D4                  	mov rsp, rdx
  4805                                  	.L_lambda_opt_stack_adjusted_087d:
  4806 000037DA C8000000                	enter 0, 0
  4807 000037DE 48B8-                   	mov rax,L_constants + 23
  4807 000037E0 [1700000000000000] 
  4808 000037E8 50                      	push rax
  4809 000037E9 6A01                    	push 1
  4810 000037EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4811 000037F0 E8D9E60000              	call malloc
  4812 000037F5 50                      	push rax
  4813 000037F6 BF10000000              	mov rdi, 8 * 2	; new rib
  4814 000037FB E8CEE60000              	call malloc
  4815 00003800 50                      	push rax
  4816 00003801 BF10000000              	mov rdi, 8 * 2	; extended env
  4817 00003806 E8C3E60000              	call malloc
  4818 0000380B 488B7D10                	mov rdi, ENV
  4819 0000380F BE00000000              	mov rsi, 0
  4820 00003814 BA01000000              	mov rdx, 1
  4821                                  .L_lambda_simple_env_loop_374c:	; ext_env[i + 1] <-- env[i]
  4822 00003819 4883FE01                	cmp rsi, 1
  4823 0000381D 7410                    	je .L_lambda_simple_env_end_374c
  4824 0000381F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4825 00003823 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4826 00003827 48FFC6                  	inc rsi
  4827 0000382A 48FFC2                  	inc rdx
  4828 0000382D EBEA                    	jmp .L_lambda_simple_env_loop_374c
  4829                                  .L_lambda_simple_env_end_374c:
  4830 0000382F 5B                      	pop rbx
  4831 00003830 BE00000000              	mov rsi, 0
  4832                                  .L_lambda_simple_params_loop_374c:	; copy params
  4833 00003835 4883FE02                	cmp rsi, 2
  4834 00003839 740E                    	je .L_lambda_simple_params_end_374c
  4835 0000383B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4836 00003840 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4837 00003844 48FFC6                  	inc rsi
  4838 00003847 EBEC                    	jmp .L_lambda_simple_params_loop_374c
  4839                                  .L_lambda_simple_params_end_374c:
  4840 00003849 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4841 0000384C 4889C3                  	mov rbx, rax
  4842 0000384F 58                      	pop rax
  4843 00003850 C60005                  	mov byte [rax], T_closure
  4844 00003853 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4845 00003857 48C74009[64380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_374c
  4846 0000385F E994020000              	jmp .L_lambda_simple_end_374c
  4847                                  .L_lambda_simple_code_374c:	; lambda-simple body
  4848 00003864 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4849 0000386A 740B                    	je .L_lambda_simple_arity_check_ok_374c
  4850 0000386C FF742410                	push qword [rsp + 8 * 2]
  4851 00003870 6A01                    	push 1
  4852 00003872 E910E60000              	jmp L_error_incorrect_arity_simple
  4853                                  .L_lambda_simple_arity_check_ok_374c:
  4854 00003877 C8000000                	enter 0, 0
  4855 0000387B BF08000000              	mov rdi, 8
  4856 00003880 E849E60000              	call malloc
  4857 00003885 488B5D20                	mov rbx, PARAM(0)
  4858 00003889 488918                  	mov qword [rax], rbx
  4859 0000388C 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4860                                  
  4861 00003890 48B8-                            	mov rax, sob_void
  4861 00003892 [0000000000000000] 
  4862                                  
  4863 0000389A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4864 0000389F E82AE60000              	call malloc
  4865 000038A4 50                      	push rax
  4866 000038A5 BF08000000              	mov rdi, 8 * 1	; new rib
  4867 000038AA E81FE60000              	call malloc
  4868 000038AF 50                      	push rax
  4869 000038B0 BF18000000              	mov rdi, 8 * 3	; extended env
  4870 000038B5 E814E60000              	call malloc
  4871 000038BA 488B7D10                	mov rdi, ENV
  4872 000038BE BE00000000              	mov rsi, 0
  4873 000038C3 BA01000000              	mov rdx, 1
  4874                                  .L_lambda_simple_env_loop_374d:	; ext_env[i + 1] <-- env[i]
  4875 000038C8 4883FE02                	cmp rsi, 2
  4876 000038CC 7410                    	je .L_lambda_simple_env_end_374d
  4877 000038CE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4878 000038D2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4879 000038D6 48FFC6                  	inc rsi
  4880 000038D9 48FFC2                  	inc rdx
  4881 000038DC EBEA                    	jmp .L_lambda_simple_env_loop_374d
  4882                                  .L_lambda_simple_env_end_374d:
  4883 000038DE 5B                      	pop rbx
  4884 000038DF BE00000000              	mov rsi, 0
  4885                                  .L_lambda_simple_params_loop_374d:	; copy params
  4886 000038E4 4883FE01                	cmp rsi, 1
  4887 000038E8 740E                    	je .L_lambda_simple_params_end_374d
  4888 000038EA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4889 000038EF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4890 000038F3 48FFC6                  	inc rsi
  4891 000038F6 EBEC                    	jmp .L_lambda_simple_params_loop_374d
  4892                                  .L_lambda_simple_params_end_374d:
  4893 000038F8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4894 000038FB 4889C3                  	mov rbx, rax
  4895 000038FE 58                      	pop rax
  4896 000038FF C60005                  	mov byte [rax], T_closure
  4897 00003902 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4898 00003906 48C74009[13390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_374d
  4899 0000390E E95B010000              	jmp .L_lambda_simple_end_374d
  4900                                  .L_lambda_simple_code_374d:	; lambda-simple body
  4901 00003913 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4902 00003919 740B                    	je .L_lambda_simple_arity_check_ok_374d
  4903 0000391B FF742410                	push qword [rsp + 8 * 2]
  4904 0000391F 6A01                    	push 1
  4905 00003921 E961E50000              	jmp L_error_incorrect_arity_simple
  4906                                  .L_lambda_simple_arity_check_ok_374d:
  4907 00003926 C8000000                	enter 0, 0
  4908 0000392A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4909 0000392E 50                      	push rax
  4910 0000392F 6A01                    	push 1
  4911 00003931 488B0425[80000000]      	mov rax, qword [free_var_16]
  4912                                  	assert_closure(rax)
    42 00003939 803805              <1>  cmp byte [%1], %2
    43 0000393C 0F8580FD0000        <1>  jne L_error_incorrect_type
  4913 00003942 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4914 00003945 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4915 00003948 50                      	push rax
  4916 00003949 6A01                    	push 1
  4917 0000394B 488B0425[08000000]      	mov rax, qword [free_var_1]
  4918                                  	assert_closure(rax)
    42 00003953 803805              <1>  cmp byte [%1], %2
    43 00003956 0F8566FD0000        <1>  jne L_error_incorrect_type
  4919 0000395C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4920 0000395F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4921                                  
  4922 00003962 483D[02000000]                  	cmp rax, sob_boolean_false
  4923                                  
  4924 00003968 0F84F2000000                    	je .L_if_else_47ca
  4925 0000396E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4926 00003972 50                      	push rax
  4927 00003973 488B0425[80000000]      	mov rax, qword [free_var_16]
  4928 0000397B 50                      	push rax
  4929 0000397C 6A02                    	push 2
  4930 0000397E 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4931                                  	assert_closure(rax)
    42 00003986 803805              <1>  cmp byte [%1], %2
    43 00003989 0F8533FD0000        <1>  jne L_error_incorrect_type
  4932 0000398F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4933 00003992 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4934 00003995 50                      	push rax
  4935 00003996 488B4510                	mov rax, qword [rbp + 8 * 2]
  4936                                  
  4937 0000399A 488B4008                                          	mov rax, qword[rax + 8 * 1]
  4938                                  
  4939 0000399E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4940 000039A1 50                      	push rax
  4941 000039A2 6A02                    	push 2
  4942 000039A4 488B0425[C8020000]      	mov rax, qword [free_var_89]
  4943                                  	assert_closure(rax)
    42 000039AC 803805              <1>  cmp byte [%1], %2
    43 000039AF 0F850DFD0000        <1>  jne L_error_incorrect_type
  4944 000039B5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4945 000039B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4946 000039BB 483D[02000000]          	cmp rax, sob_boolean_false
  4947 000039C1 0F8597000000            	jne .L_or_end_0425
  4948 000039C7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4949 000039CB 50                      	push rax
  4950 000039CC 488B0425[88000000]      	mov rax, qword [free_var_17]
  4951 000039D4 50                      	push rax
  4952 000039D5 6A02                    	push 2
  4953 000039D7 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4954                                  	assert_closure(rax)
    42 000039DF 803805              <1>  cmp byte [%1], %2
    43 000039E2 0F85DAFC0000        <1>  jne L_error_incorrect_type
  4955 000039E8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4956 000039EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4957 000039EE 50                      	push rax
  4958 000039EF 6A01                    	push 1
  4959 000039F1 488B4510                	mov rax, qword [rbp + 8 * 2]
  4960                                  
  4961 000039F5 488B00                                            	mov rax, qword[rax + 8 * 0]
  4962                                  
  4963 000039F8 488B00                                            	mov rax, qword[rax + 8 * 0]
  4964 000039FB 488B00                  	mov rax, qword [rax]
  4965                                  .L_applic_TC_3fe7:
  4966 000039FE 803805                  	cmp byte [rax], T_closure
  4967 00003A01 0F857CF40000            	jne L_code_ptr_error
  4968 00003A07 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4969 00003A0B 53                      	push rbx
  4970 00003A0C FF7508                  	push qword [rbp + 8]
  4971 00003A0F FF7500                  	push qword [rbp]
  4972 00003A12 488B4D18                	mov rcx, [rbp + 3 * 8]
  4973 00003A16 488B542418              	mov rdx, [rsp + 3 * 8]
  4974 00003A1B 488D7204                	lea rsi, [rdx + 4]
  4975 00003A1F 4C8D4EFF                	lea r9, [rsi - 1]
  4976 00003A23 488D7903                	lea rdi, [rcx + 3]
  4977 00003A27 4D31C0                  	xor r8, r8
  4978                                  .L_tc_recycle_frame_loop_3fe7:
  4979 00003A2A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4980 00003A2E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4981 00003A33 49FFC9                  	dec r9
  4982 00003A36 4D31C0                  	xor r8, r8
  4983 00003A39 48FFCF                  	dec rdi
  4984 00003A3C 48FFCE                  	dec rsi
  4985 00003A3F 4883FE00                	cmp rsi, 0
  4986 00003A43 75E5                    	jne .L_tc_recycle_frame_loop_3fe7
  4987                                  .L_tc_recycle_frame_done_3fe7:
  4988                                  ;this pop rbp in sot to the right place
  4989 00003A45 4989C9                  	mov r9, rcx
  4990 00003A48 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4991 00003A50 4C01CC                  	add rsp, r9
  4992 00003A53 5D                      	pop rbp
  4993 00003A54 488B4D00                	mov rcx, qword [rbp]
  4994 00003A58 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4995 00003A5C FFE3                    	jmp rbx
  4996                                  .L_or_end_0425:
  4997                                  
  4998 00003A5E EB0A                            	jmp .L_if_end_47ca
  4999                                  
  5000                                          	.L_if_else_47ca:
  5001 00003A60 48B8-                   	mov rax,L_constants + 2
  5001 00003A62 [0200000000000000] 
  5002                                  
  5003                                          	.L_if_end_47ca:
  5004 00003A6A C9                      	leave
  5005 00003A6B C21800                  	ret 8 * (2 + 1)
  5006                                  .L_lambda_simple_end_374d:	; new closure is in rax
  5007 00003A6E 50                      	push rax
  5008 00003A6F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5009 00003A73 8F00                    	pop qword [rax]
  5010 00003A75 48B8-                   	mov rax, sob_void
  5010 00003A77 [0000000000000000] 
  5011                                  
  5012 00003A7F 488B4510                	mov rax, qword [rbp + 8 * 2]
  5013                                  
  5014 00003A83 488B00                                            	mov rax, qword[rax + 8 * 0]
  5015                                  
  5016 00003A86 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5017 00003A8A 50                      	push rax
  5018 00003A8B 6A01                    	push 1
  5019 00003A8D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5020 00003A91 488B00                  	mov rax, qword [rax]
  5021                                  .L_applic_TC_3fe8:
  5022 00003A94 803805                  	cmp byte [rax], T_closure
  5023 00003A97 0F85E6F30000            	jne L_code_ptr_error
  5024 00003A9D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5025 00003AA1 53                      	push rbx
  5026 00003AA2 FF7508                  	push qword [rbp + 8]
  5027 00003AA5 FF7500                  	push qword [rbp]
  5028 00003AA8 488B4D18                	mov rcx, [rbp + 3 * 8]
  5029 00003AAC 488B542418              	mov rdx, [rsp + 3 * 8]
  5030 00003AB1 488D7204                	lea rsi, [rdx + 4]
  5031 00003AB5 4C8D4EFF                	lea r9, [rsi - 1]
  5032 00003AB9 488D7903                	lea rdi, [rcx + 3]
  5033 00003ABD 4D31C0                  	xor r8, r8
  5034                                  .L_tc_recycle_frame_loop_3fe8:
  5035 00003AC0 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5036 00003AC4 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5037 00003AC9 49FFC9                  	dec r9
  5038 00003ACC 4D31C0                  	xor r8, r8
  5039 00003ACF 48FFCF                  	dec rdi
  5040 00003AD2 48FFCE                  	dec rsi
  5041 00003AD5 4883FE00                	cmp rsi, 0
  5042 00003AD9 75E5                    	jne .L_tc_recycle_frame_loop_3fe8
  5043                                  .L_tc_recycle_frame_done_3fe8:
  5044                                  ;this pop rbp in sot to the right place
  5045 00003ADB 4989C9                  	mov r9, rcx
  5046 00003ADE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5047 00003AE6 4C01CC                  	add rsp, r9
  5048 00003AE9 5D                      	pop rbp
  5049 00003AEA 488B4D00                	mov rcx, qword [rbp]
  5050 00003AEE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5051 00003AF2 FFE3                    	jmp rbx
  5052 00003AF4 C9                      	leave
  5053 00003AF5 C21800                  	ret 8 * (2 + 1)
  5054                                  .L_lambda_simple_end_374c:	; new closure is in rax
  5055                                  .L_applic_TC_3fe9:
  5056 00003AF8 803805                  	cmp byte [rax], T_closure
  5057 00003AFB 0F8582F30000            	jne L_code_ptr_error
  5058 00003B01 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5059 00003B05 53                      	push rbx
  5060 00003B06 FF7508                  	push qword [rbp + 8]
  5061 00003B09 FF7500                  	push qword [rbp]
  5062 00003B0C 488B4D18                	mov rcx, [rbp + 3 * 8]
  5063 00003B10 488B542418              	mov rdx, [rsp + 3 * 8]
  5064 00003B15 488D7204                	lea rsi, [rdx + 4]
  5065 00003B19 4C8D4EFF                	lea r9, [rsi - 1]
  5066 00003B1D 488D7903                	lea rdi, [rcx + 3]
  5067 00003B21 4D31C0                  	xor r8, r8
  5068                                  .L_tc_recycle_frame_loop_3fe9:
  5069 00003B24 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5070 00003B28 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5071 00003B2D 49FFC9                  	dec r9
  5072 00003B30 4D31C0                  	xor r8, r8
  5073 00003B33 48FFCF                  	dec rdi
  5074 00003B36 48FFCE                  	dec rsi
  5075 00003B39 4883FE00                	cmp rsi, 0
  5076 00003B3D 75E5                    	jne .L_tc_recycle_frame_loop_3fe9
  5077                                  .L_tc_recycle_frame_done_3fe9:
  5078                                  ;this pop rbp in sot to the right place
  5079 00003B3F 4989C9                  	mov r9, rcx
  5080 00003B42 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5081 00003B4A 4C01CC                  	add rsp, r9
  5082 00003B4D 5D                      	pop rbp
  5083 00003B4E 488B4D00                	mov rcx, qword [rbp]
  5084 00003B52 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5085 00003B56 FFE3                    	jmp rbx
  5086 00003B58 C9                      	leave
  5087 00003B59 C22000                  	ret 8 * (2 + 2)
  5088                                  .L_lambda_opt_end_087d:	; new closure is in rax
  5089 00003B5C 48890425[D0020000]      	mov qword [free_var_90], rax
  5090 00003B64 48B8-                   	mov rax, sob_void
  5090 00003B66 [0000000000000000] 
  5091                                  
  5092 00003B6E 4889C7                  	mov rdi, rax
  5093 00003B71 E869E30000              	call print_sexpr_if_not_void
  5094                                  
  5095 00003B76 BF11000000              	mov rdi, (1 + 8 + 8)
  5096 00003B7B E84EE30000              	call malloc
  5097 00003B80 50                      	push rax
  5098 00003B81 BF00000000              	mov rdi, 8 * 0
  5099 00003B86 E843E30000              	call malloc
  5100 00003B8B 50                      	push rax
  5101 00003B8C BF08000000              	mov rdi, 8 * 1
  5102 00003B91 E838E30000              	call malloc
  5103 00003B96 488B7D10                	mov rdi, ENV
  5104 00003B9A 4831F6                  	xor rsi, rsi
  5105 00003B9D 4831D2                  	xor rdx, rdx
  5106 00003BA0 48FFC2                  	inc rdx
  5107                                  	.L_lambda_opt_env_loop_087e:
  5108                                  
  5109 00003BA3 4883FE00                        	cmp rsi, 0
  5110                                  
  5111 00003BA7 7412                            	je .L_lambda_opt_env_end_087e
  5112 00003BA9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5113 00003BAD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5114 00003BB1 4883C201                	add rdx, 1
  5115 00003BB5 4883C601                	add rsi, 1
  5116 00003BB9 EBE8                    	jmp .L_lambda_opt_env_loop_087e
  5117                                  
  5118                                          	.L_lambda_opt_env_end_087e:
  5119 00003BBB 5B                      	pop rbx
  5120 00003BBC 4831F6                  	xor rsi, rsi
  5121                                  	.L_lambda_opt_params_loop_087e:
  5122                                  
  5123 00003BBF 4883FE00                        	cmp rsi, 0
  5124                                  
  5125 00003BC3 740F                            	je .L_lambda_opt_params_end_087e
  5126 00003BC5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5127 00003BCA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5128 00003BCE 4883C601                	add rsi, 1
  5129 00003BD2 EBEB                    	jmp .L_lambda_opt_params_loop_087e
  5130                                  
  5131                                          	.L_lambda_opt_params_end_087e:
  5132 00003BD4 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  5133 00003BD7 4889C3                  	mov rbx, rax
  5134 00003BDA 58                      	pop rax
  5135 00003BDB C60005                  	mov byte [rax], T_closure
  5136 00003BDE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5137 00003BE2 48C74009[EF3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_087e
  5138                                  
  5139 00003BEA E988040000                      	jmp .L_lambda_opt_end_087e
  5140                                  
  5141                                          	.L_lambda_opt_code_087e:
  5142                                  
  5143 00003BEF 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  5144                                  
  5145 00003BF5 740D                            	je .L_lambda_opt_arity_check_exact_087e  ;same num_of_args
  5146                                  
  5147 00003BF7 7F65                            	jg .L_lambda_opt_arity_check_more_087e  ;greater num_of_args
  5148 00003BF9 FF742410                	push qword [rsp + 8 * 2]
  5149 00003BFD 6A01                    	push 1
  5150 00003BFF E997E20000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  5151                                  .L_lambda_opt_arity_check_exact_087e:
  5152 00003C04 4883EC08                	sub rsp, 8 * 1
  5153 00003C08 488D7F10                	lea rdi, [rdi + (8 * 2)]
  5154 00003C0C 4889E7                  	mov rdi, rsp 
  5155 00003C0F 488B4708                	mov rax, qword [rdi + 8]
  5156 00003C13 488907                  	mov qword [rdi], rax
  5157 00003C16 488D7F08                	lea rdi, [rdi + 8]
  5158 00003C1A 488B4708                	mov rax, qword [rdi + 8]
  5159 00003C1E 488907                  	mov qword [rdi], rax
  5160 00003C21 488D7F08                	lea rdi, [rdi + 8]
  5161 00003C25 488B4708                	mov rax, qword [rdi + 8]
  5162 00003C29 4889C1                  	mov rcx, rax
  5163 00003C2C 4883C001                	add rax, 1
  5164 00003C30 488907                  	mov qword [rdi], rax
  5165 00003C33 488D7F08                	lea rdi, [rdi + 8]
  5166                                  	.L_lambda_opt_stack_shrink_loop_1978:
  5167 00003C37 4883F900                	cmp rcx, 0
  5168 00003C3B 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1978
  5169 00003C3D 4883E901                	sub rcx, 1
  5170 00003C41 488D4010                	lea rax, [rax + (8 * 2)]
  5171 00003C45 488B4708                	mov rax, qword [rdi + 8]
  5172 00003C49 488907                  	mov qword [rdi], rax
  5173 00003C4C 488D7F08                	lea rdi, [rdi + 8]
  5174 00003C50 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1978
  5175                                  
  5176                                          	.L_lambda_opt_stack_shrink_loop_exit_1978:
  5177 00003C52 48C707[01000000]        	mov qword [rdi], sob_nil
  5178 00003C59 E997000000              	jmp .L_lambda_opt_stack_adjusted_087e
  5179                                  
  5180                                          	.L_lambda_opt_arity_check_more_087e:
  5181 00003C5E 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  5182 00003C63 488D4EFF                	lea rcx, [rsi - 1]
  5183 00003C67 49B8-                   	mov r8, sob_nil
  5183 00003C69 [0100000000000000] 
  5184 00003C71 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  5185 00003C76 4889F2                  	mov rdx, rsi
  5186                                  	.L_lambda_opt_stack_shrink_loop_1979:
  5187 00003C79 4883F900                	cmp rcx, 0
  5188 00003C7D 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1979
  5189 00003C7F BF11000000              	mov rdi, 1 + (8 * 2)
  5190 00003C84 E845E20000              	call malloc
  5191 00003C89 C60021                  	mov byte [rax], T_pair
  5192 00003C8C 488B1E                  	mov rbx, qword [rsi]
  5193 00003C8F 48895801                	mov SOB_PAIR_CAR(rax), rbx
  5194 00003C93 4C894009                	mov SOB_PAIR_CDR(rax), r8
  5195 00003C97 4883C6F8                	add rsi, -8
  5196 00003C9B 4883E901                	sub rcx, 1
  5197 00003C9F 4989C0                  	mov r8, rax
  5198 00003CA2 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1979
  5199                                  
  5200                                          	.L_lambda_opt_stack_shrink_loop_exit_1979:
  5201 00003CA4 4C8902                  	mov qword [rdx], r8
  5202 00003CA7 4883EA08                	sub rdx, 8 * 1
  5203 00003CAB 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  5204                                  
  5205 00003CB0 B901000000                      	mov rcx, 1 
  5206                                  
  5207                                          	.L_lambda_opt_stack_shrink_loop_197a:
  5208 00003CB5 4883F900                	cmp rcx, 0
  5209 00003CB9 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_197a
  5210 00003CBB 488B06                  	mov rax, qword [rsi]
  5211 00003CBE 488902                  	mov qword [rdx], rax
  5212 00003CC1 488D76F8                	lea rsi, [rsi - 8]
  5213 00003CC5 4883C2F8                	add rdx, -8
  5214 00003CC9 4883C1FF                	add rcx, -1
  5215 00003CCD EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_197a
  5216                                  
  5217                                          	.L_lambda_opt_stack_shrink_loop_exit_197a:
  5218                                  
  5219 00003CCF 48C70202000000                  	mov qword [rdx], 1 + 1
  5220 00003CD6 4883C6F8                	add rsi, -8
  5221 00003CDA 4883C2F8                	add rdx, -8
  5222 00003CDE 488B06                  	mov rax, qword [rsi]
  5223 00003CE1 488902                  	mov qword [rdx], rax
  5224 00003CE4 4883C2F8                	add rdx, -8
  5225 00003CE8 488D76F8                	lea rsi, [rsi - 8]
  5226 00003CEC 488B06                  	mov rax, qword [rsi]
  5227 00003CEF 488902                  	mov qword [rdx], rax
  5228 00003CF2 4889D4                  	mov rsp, rdx
  5229                                  	.L_lambda_opt_stack_adjusted_087e:
  5230 00003CF5 C8000000                	enter 0, 0
  5231 00003CF9 48B8-                   	mov rax,L_constants + 23
  5231 00003CFB [1700000000000000] 
  5232 00003D03 50                      	push rax
  5233 00003D04 6A01                    	push 1
  5234 00003D06 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5235 00003D0B E8BEE10000              	call malloc
  5236 00003D10 50                      	push rax
  5237 00003D11 BF10000000              	mov rdi, 8 * 2	; new rib
  5238 00003D16 E8B3E10000              	call malloc
  5239 00003D1B 50                      	push rax
  5240 00003D1C BF10000000              	mov rdi, 8 * 2	; extended env
  5241 00003D21 E8A8E10000              	call malloc
  5242 00003D26 488B7D10                	mov rdi, ENV
  5243 00003D2A BE00000000              	mov rsi, 0
  5244 00003D2F BA01000000              	mov rdx, 1
  5245                                  .L_lambda_simple_env_loop_374e:	; ext_env[i + 1] <-- env[i]
  5246 00003D34 4883FE01                	cmp rsi, 1
  5247 00003D38 7410                    	je .L_lambda_simple_env_end_374e
  5248 00003D3A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5249 00003D3E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5250 00003D42 48FFC6                  	inc rsi
  5251 00003D45 48FFC2                  	inc rdx
  5252 00003D48 EBEA                    	jmp .L_lambda_simple_env_loop_374e
  5253                                  .L_lambda_simple_env_end_374e:
  5254 00003D4A 5B                      	pop rbx
  5255 00003D4B BE00000000              	mov rsi, 0
  5256                                  .L_lambda_simple_params_loop_374e:	; copy params
  5257 00003D50 4883FE02                	cmp rsi, 2
  5258 00003D54 740E                    	je .L_lambda_simple_params_end_374e
  5259 00003D56 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5260 00003D5B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5261 00003D5F 48FFC6                  	inc rsi
  5262 00003D62 EBEC                    	jmp .L_lambda_simple_params_loop_374e
  5263                                  .L_lambda_simple_params_end_374e:
  5264 00003D64 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5265 00003D67 4889C3                  	mov rbx, rax
  5266 00003D6A 58                      	pop rax
  5267 00003D6B C60005                  	mov byte [rax], T_closure
  5268 00003D6E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5269 00003D72 48C74009[7F3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_374e
  5270 00003D7A E994020000              	jmp .L_lambda_simple_end_374e
  5271                                  .L_lambda_simple_code_374e:	; lambda-simple body
  5272 00003D7F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5273 00003D85 740B                    	je .L_lambda_simple_arity_check_ok_374e
  5274 00003D87 FF742410                	push qword [rsp + 8 * 2]
  5275 00003D8B 6A01                    	push 1
  5276 00003D8D E9F5E00000              	jmp L_error_incorrect_arity_simple
  5277                                  .L_lambda_simple_arity_check_ok_374e:
  5278 00003D92 C8000000                	enter 0, 0
  5279 00003D96 BF08000000              	mov rdi, 8
  5280 00003D9B E82EE10000              	call malloc
  5281 00003DA0 488B5D20                	mov rbx, PARAM(0)
  5282 00003DA4 488918                  	mov qword [rax], rbx
  5283 00003DA7 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5284                                  
  5285 00003DAB 48B8-                            	mov rax, sob_void
  5285 00003DAD [0000000000000000] 
  5286                                  
  5287 00003DB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5288 00003DBA E80FE10000              	call malloc
  5289 00003DBF 50                      	push rax
  5290 00003DC0 BF08000000              	mov rdi, 8 * 1	; new rib
  5291 00003DC5 E804E10000              	call malloc
  5292 00003DCA 50                      	push rax
  5293 00003DCB BF18000000              	mov rdi, 8 * 3	; extended env
  5294 00003DD0 E8F9E00000              	call malloc
  5295 00003DD5 488B7D10                	mov rdi, ENV
  5296 00003DD9 BE00000000              	mov rsi, 0
  5297 00003DDE BA01000000              	mov rdx, 1
  5298                                  .L_lambda_simple_env_loop_374f:	; ext_env[i + 1] <-- env[i]
  5299 00003DE3 4883FE02                	cmp rsi, 2
  5300 00003DE7 7410                    	je .L_lambda_simple_env_end_374f
  5301 00003DE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5302 00003DED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5303 00003DF1 48FFC6                  	inc rsi
  5304 00003DF4 48FFC2                  	inc rdx
  5305 00003DF7 EBEA                    	jmp .L_lambda_simple_env_loop_374f
  5306                                  .L_lambda_simple_env_end_374f:
  5307 00003DF9 5B                      	pop rbx
  5308 00003DFA BE00000000              	mov rsi, 0
  5309                                  .L_lambda_simple_params_loop_374f:	; copy params
  5310 00003DFF 4883FE01                	cmp rsi, 1
  5311 00003E03 740E                    	je .L_lambda_simple_params_end_374f
  5312 00003E05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5313 00003E0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5314 00003E0E 48FFC6                  	inc rsi
  5315 00003E11 EBEC                    	jmp .L_lambda_simple_params_loop_374f
  5316                                  .L_lambda_simple_params_end_374f:
  5317 00003E13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5318 00003E16 4889C3                  	mov rbx, rax
  5319 00003E19 58                      	pop rax
  5320 00003E1A C60005                  	mov byte [rax], T_closure
  5321 00003E1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5322 00003E21 48C74009[2E3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_374f
  5323 00003E29 E95B010000              	jmp .L_lambda_simple_end_374f
  5324                                  .L_lambda_simple_code_374f:	; lambda-simple body
  5325 00003E2E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5326 00003E34 740B                    	je .L_lambda_simple_arity_check_ok_374f
  5327 00003E36 FF742410                	push qword [rsp + 8 * 2]
  5328 00003E3A 6A01                    	push 1
  5329 00003E3C E946E00000              	jmp L_error_incorrect_arity_simple
  5330                                  .L_lambda_simple_arity_check_ok_374f:
  5331 00003E41 C8000000                	enter 0, 0
  5332 00003E45 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5333 00003E49 50                      	push rax
  5334 00003E4A 6A01                    	push 1
  5335 00003E4C 488B0425[80000000]      	mov rax, qword [free_var_16]
  5336                                  	assert_closure(rax)
    42 00003E54 803805              <1>  cmp byte [%1], %2
    43 00003E57 0F8565F80000        <1>  jne L_error_incorrect_type
  5337 00003E5D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5338 00003E60 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5339 00003E63 50                      	push rax
  5340 00003E64 6A01                    	push 1
  5341 00003E66 488B0425[00000000]      	mov rax, qword [free_var_0]
  5342                                  	assert_closure(rax)
    42 00003E6E 803805              <1>  cmp byte [%1], %2
    43 00003E71 0F854BF80000        <1>  jne L_error_incorrect_type
  5343 00003E77 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5344 00003E7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5345 00003E7D 483D[02000000]          	cmp rax, sob_boolean_false
  5346 00003E83 0F85FC000000            	jne .L_or_end_0426
  5347 00003E89 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5348 00003E8D 50                      	push rax
  5349 00003E8E 488B0425[80000000]      	mov rax, qword [free_var_16]
  5350 00003E96 50                      	push rax
  5351 00003E97 6A02                    	push 2
  5352 00003E99 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5353                                  	assert_closure(rax)
    42 00003EA1 803805              <1>  cmp byte [%1], %2
    43 00003EA4 0F8518F80000        <1>  jne L_error_incorrect_type
  5354 00003EAA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5355 00003EAD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5356 00003EB0 50                      	push rax
  5357 00003EB1 488B4510                	mov rax, qword [rbp + 8 * 2]
  5358                                  
  5359 00003EB5 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5360                                  
  5361 00003EB9 488B00                                            	mov rax, qword[rax + 8 * 0]
  5362 00003EBC 50                      	push rax
  5363 00003EBD 6A02                    	push 2
  5364 00003EBF 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5365                                  	assert_closure(rax)
    42 00003EC7 803805              <1>  cmp byte [%1], %2
    43 00003ECA 0F85F2F70000        <1>  jne L_error_incorrect_type
  5366 00003ED0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5367 00003ED3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5368                                  
  5369 00003ED6 483D[02000000]                  	cmp rax, sob_boolean_false
  5370                                  
  5371 00003EDC 0F8499000000                    	je .L_if_else_47cb
  5372 00003EE2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5373 00003EE6 50                      	push rax
  5374 00003EE7 488B0425[88000000]      	mov rax, qword [free_var_17]
  5375 00003EEF 50                      	push rax
  5376 00003EF0 6A02                    	push 2
  5377 00003EF2 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5378                                  	assert_closure(rax)
    42 00003EFA 803805              <1>  cmp byte [%1], %2
    43 00003EFD 0F85BFF70000        <1>  jne L_error_incorrect_type
  5379 00003F03 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5380 00003F06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5381 00003F09 50                      	push rax
  5382 00003F0A 6A01                    	push 1
  5383 00003F0C 488B4510                	mov rax, qword [rbp + 8 * 2]
  5384                                  
  5385 00003F10 488B00                                            	mov rax, qword[rax + 8 * 0]
  5386                                  
  5387 00003F13 488B00                                            	mov rax, qword[rax + 8 * 0]
  5388 00003F16 488B00                  	mov rax, qword [rax]
  5389                                  .L_applic_TC_3fea:
  5390 00003F19 803805                  	cmp byte [rax], T_closure
  5391 00003F1C 0F8561EF0000            	jne L_code_ptr_error
  5392 00003F22 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5393 00003F26 53                      	push rbx
  5394 00003F27 FF7508                  	push qword [rbp + 8]
  5395 00003F2A FF7500                  	push qword [rbp]
  5396 00003F2D 488B4D18                	mov rcx, [rbp + 3 * 8]
  5397 00003F31 488B542418              	mov rdx, [rsp + 3 * 8]
  5398 00003F36 488D7204                	lea rsi, [rdx + 4]
  5399 00003F3A 4C8D4EFF                	lea r9, [rsi - 1]
  5400 00003F3E 488D7903                	lea rdi, [rcx + 3]
  5401 00003F42 4D31C0                  	xor r8, r8
  5402                                  .L_tc_recycle_frame_loop_3fea:
  5403 00003F45 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5404 00003F49 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5405 00003F4E 49FFC9                  	dec r9
  5406 00003F51 4D31C0                  	xor r8, r8
  5407 00003F54 48FFCF                  	dec rdi
  5408 00003F57 48FFCE                  	dec rsi
  5409 00003F5A 4883FE00                	cmp rsi, 0
  5410 00003F5E 75E5                    	jne .L_tc_recycle_frame_loop_3fea
  5411                                  .L_tc_recycle_frame_done_3fea:
  5412                                  ;this pop rbp in sot to the right place
  5413 00003F60 4989C9                  	mov r9, rcx
  5414 00003F63 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5415 00003F6B 4C01CC                  	add rsp, r9
  5416 00003F6E 5D                      	pop rbp
  5417 00003F6F 488B4D00                	mov rcx, qword [rbp]
  5418 00003F73 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5419 00003F77 FFE3                    	jmp rbx
  5420                                  
  5421 00003F79 EB0A                            	jmp .L_if_end_47cb
  5422                                  
  5423                                          	.L_if_else_47cb:
  5424 00003F7B 48B8-                   	mov rax,L_constants + 2
  5424 00003F7D [0200000000000000] 
  5425                                  
  5426                                          	.L_if_end_47cb:
  5427                                  .L_or_end_0426:
  5428 00003F85 C9                      	leave
  5429 00003F86 C21800                  	ret 8 * (2 + 1)
  5430                                  .L_lambda_simple_end_374f:	; new closure is in rax
  5431 00003F89 50                      	push rax
  5432 00003F8A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5433 00003F8E 8F00                    	pop qword [rax]
  5434 00003F90 48B8-                   	mov rax, sob_void
  5434 00003F92 [0000000000000000] 
  5435                                  
  5436 00003F9A 488B4510                	mov rax, qword [rbp + 8 * 2]
  5437                                  
  5438 00003F9E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5439                                  
  5440 00003FA1 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5441 00003FA5 50                      	push rax
  5442 00003FA6 6A01                    	push 1
  5443 00003FA8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5444 00003FAC 488B00                  	mov rax, qword [rax]
  5445                                  .L_applic_TC_3feb:
  5446 00003FAF 803805                  	cmp byte [rax], T_closure
  5447 00003FB2 0F85CBEE0000            	jne L_code_ptr_error
  5448 00003FB8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5449 00003FBC 53                      	push rbx
  5450 00003FBD FF7508                  	push qword [rbp + 8]
  5451 00003FC0 FF7500                  	push qword [rbp]
  5452 00003FC3 488B4D18                	mov rcx, [rbp + 3 * 8]
  5453 00003FC7 488B542418              	mov rdx, [rsp + 3 * 8]
  5454 00003FCC 488D7204                	lea rsi, [rdx + 4]
  5455 00003FD0 4C8D4EFF                	lea r9, [rsi - 1]
  5456 00003FD4 488D7903                	lea rdi, [rcx + 3]
  5457 00003FD8 4D31C0                  	xor r8, r8
  5458                                  .L_tc_recycle_frame_loop_3feb:
  5459 00003FDB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5460 00003FDF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5461 00003FE4 49FFC9                  	dec r9
  5462 00003FE7 4D31C0                  	xor r8, r8
  5463 00003FEA 48FFCF                  	dec rdi
  5464 00003FED 48FFCE                  	dec rsi
  5465 00003FF0 4883FE00                	cmp rsi, 0
  5466 00003FF4 75E5                    	jne .L_tc_recycle_frame_loop_3feb
  5467                                  .L_tc_recycle_frame_done_3feb:
  5468                                  ;this pop rbp in sot to the right place
  5469 00003FF6 4989C9                  	mov r9, rcx
  5470 00003FF9 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5471 00004001 4C01CC                  	add rsp, r9
  5472 00004004 5D                      	pop rbp
  5473 00004005 488B4D00                	mov rcx, qword [rbp]
  5474 00004009 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5475 0000400D FFE3                    	jmp rbx
  5476 0000400F C9                      	leave
  5477 00004010 C21800                  	ret 8 * (2 + 1)
  5478                                  .L_lambda_simple_end_374e:	; new closure is in rax
  5479                                  .L_applic_TC_3fec:
  5480 00004013 803805                  	cmp byte [rax], T_closure
  5481 00004016 0F8567EE0000            	jne L_code_ptr_error
  5482 0000401C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5483 00004020 53                      	push rbx
  5484 00004021 FF7508                  	push qword [rbp + 8]
  5485 00004024 FF7500                  	push qword [rbp]
  5486 00004027 488B4D18                	mov rcx, [rbp + 3 * 8]
  5487 0000402B 488B542418              	mov rdx, [rsp + 3 * 8]
  5488 00004030 488D7204                	lea rsi, [rdx + 4]
  5489 00004034 4C8D4EFF                	lea r9, [rsi - 1]
  5490 00004038 488D7903                	lea rdi, [rcx + 3]
  5491 0000403C 4D31C0                  	xor r8, r8
  5492                                  .L_tc_recycle_frame_loop_3fec:
  5493 0000403F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5494 00004043 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5495 00004048 49FFC9                  	dec r9
  5496 0000404B 4D31C0                  	xor r8, r8
  5497 0000404E 48FFCF                  	dec rdi
  5498 00004051 48FFCE                  	dec rsi
  5499 00004054 4883FE00                	cmp rsi, 0
  5500 00004058 75E5                    	jne .L_tc_recycle_frame_loop_3fec
  5501                                  .L_tc_recycle_frame_done_3fec:
  5502                                  ;this pop rbp in sot to the right place
  5503 0000405A 4989C9                  	mov r9, rcx
  5504 0000405D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5505 00004065 4C01CC                  	add rsp, r9
  5506 00004068 5D                      	pop rbp
  5507 00004069 488B4D00                	mov rcx, qword [rbp]
  5508 0000406D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5509 00004071 FFE3                    	jmp rbx
  5510 00004073 C9                      	leave
  5511 00004074 C22000                  	ret 8 * (2 + 2)
  5512                                  .L_lambda_opt_end_087e:	; new closure is in rax
  5513 00004077 48890425[E0020000]      	mov qword [free_var_92], rax
  5514 0000407F 48B8-                   	mov rax, sob_void
  5514 00004081 [0000000000000000] 
  5515                                  
  5516 00004089 4889C7                  	mov rdi, rax
  5517 0000408C E84EDE0000              	call print_sexpr_if_not_void
  5518                                  
  5519 00004091 48B8-                   	mov rax,L_constants + 23
  5519 00004093 [1700000000000000] 
  5520 0000409B 50                      	push rax
  5521 0000409C 48B8-                   	mov rax,L_constants + 23
  5521 0000409E [1700000000000000] 
  5522 000040A6 50                      	push rax
  5523 000040A7 6A02                    	push 2
  5524 000040A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5525 000040AE E81BDE0000              	call malloc
  5526 000040B3 50                      	push rax
  5527 000040B4 BF00000000              	mov rdi, 8 * 0	; new rib
  5528 000040B9 E810DE0000              	call malloc
  5529 000040BE 50                      	push rax
  5530 000040BF BF08000000              	mov rdi, 8 * 1	; extended env
  5531 000040C4 E805DE0000              	call malloc
  5532 000040C9 488B7D10                	mov rdi, ENV
  5533 000040CD BE00000000              	mov rsi, 0
  5534 000040D2 BA01000000              	mov rdx, 1
  5535                                  .L_lambda_simple_env_loop_3750:	; ext_env[i + 1] <-- env[i]
  5536 000040D7 4883FE00                	cmp rsi, 0
  5537 000040DB 7410                    	je .L_lambda_simple_env_end_3750
  5538 000040DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5539 000040E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5540 000040E5 48FFC6                  	inc rsi
  5541 000040E8 48FFC2                  	inc rdx
  5542 000040EB EBEA                    	jmp .L_lambda_simple_env_loop_3750
  5543                                  .L_lambda_simple_env_end_3750:
  5544 000040ED 5B                      	pop rbx
  5545 000040EE BE00000000              	mov rsi, 0
  5546                                  .L_lambda_simple_params_loop_3750:	; copy params
  5547 000040F3 4883FE00                	cmp rsi, 0
  5548 000040F7 740E                    	je .L_lambda_simple_params_end_3750
  5549 000040F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5550 000040FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5551 00004102 48FFC6                  	inc rsi
  5552 00004105 EBEC                    	jmp .L_lambda_simple_params_loop_3750
  5553                                  .L_lambda_simple_params_end_3750:
  5554 00004107 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5555 0000410A 4889C3                  	mov rbx, rax
  5556 0000410D 58                      	pop rax
  5557 0000410E C60005                  	mov byte [rax], T_closure
  5558 00004111 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5559 00004115 48C74009[22410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3750
  5560 0000411D E944060000              	jmp .L_lambda_simple_end_3750
  5561                                  .L_lambda_simple_code_3750:	; lambda-simple body
  5562 00004122 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5563 00004128 740B                    	je .L_lambda_simple_arity_check_ok_3750
  5564 0000412A FF742410                	push qword [rsp + 8 * 2]
  5565 0000412E 6A02                    	push 2
  5566 00004130 E952DD0000              	jmp L_error_incorrect_arity_simple
  5567                                  .L_lambda_simple_arity_check_ok_3750:
  5568 00004135 C8000000                	enter 0, 0
  5569 00004139 BF08000000              	mov rdi, 8
  5570 0000413E E88BDD0000              	call malloc
  5571 00004143 488B5D20                	mov rbx, PARAM(0)
  5572 00004147 488918                  	mov qword [rax], rbx
  5573 0000414A 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5574                                  
  5575 0000414E 48B8-                            	mov rax, sob_void
  5575 00004150 [0000000000000000] 
  5576                                  
  5577 00004158 BF08000000              	mov rdi, 8
  5578 0000415D E86CDD0000              	call malloc
  5579 00004162 488B5D28                	mov rbx, PARAM(1)
  5580 00004166 488918                  	mov qword [rax], rbx
  5581 00004169 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  5582                                  
  5583 0000416D 48B8-                            	mov rax, sob_void
  5583 0000416F [0000000000000000] 
  5584                                  
  5585 00004177 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5586 0000417C E84DDD0000              	call malloc
  5587 00004181 50                      	push rax
  5588 00004182 BF10000000              	mov rdi, 8 * 2	; new rib
  5589 00004187 E842DD0000              	call malloc
  5590 0000418C 50                      	push rax
  5591 0000418D BF10000000              	mov rdi, 8 * 2	; extended env
  5592 00004192 E837DD0000              	call malloc
  5593 00004197 488B7D10                	mov rdi, ENV
  5594 0000419B BE00000000              	mov rsi, 0
  5595 000041A0 BA01000000              	mov rdx, 1
  5596                                  .L_lambda_simple_env_loop_3751:	; ext_env[i + 1] <-- env[i]
  5597 000041A5 4883FE01                	cmp rsi, 1
  5598 000041A9 7410                    	je .L_lambda_simple_env_end_3751
  5599 000041AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5600 000041AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5601 000041B3 48FFC6                  	inc rsi
  5602 000041B6 48FFC2                  	inc rdx
  5603 000041B9 EBEA                    	jmp .L_lambda_simple_env_loop_3751
  5604                                  .L_lambda_simple_env_end_3751:
  5605 000041BB 5B                      	pop rbx
  5606 000041BC BE00000000              	mov rsi, 0
  5607                                  .L_lambda_simple_params_loop_3751:	; copy params
  5608 000041C1 4883FE02                	cmp rsi, 2
  5609 000041C5 740E                    	je .L_lambda_simple_params_end_3751
  5610 000041C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5611 000041CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5612 000041D0 48FFC6                  	inc rsi
  5613 000041D3 EBEC                    	jmp .L_lambda_simple_params_loop_3751
  5614                                  .L_lambda_simple_params_end_3751:
  5615 000041D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5616 000041D8 4889C3                  	mov rbx, rax
  5617 000041DB 58                      	pop rax
  5618 000041DC C60005                  	mov byte [rax], T_closure
  5619 000041DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5620 000041E3 48C74009[F0410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3751
  5621 000041EB E932010000              	jmp .L_lambda_simple_end_3751
  5622                                  .L_lambda_simple_code_3751:	; lambda-simple body
  5623 000041F0 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5624 000041F6 740B                    	je .L_lambda_simple_arity_check_ok_3751
  5625 000041F8 FF742410                	push qword [rsp + 8 * 2]
  5626 000041FC 6A02                    	push 2
  5627 000041FE E984DC0000              	jmp L_error_incorrect_arity_simple
  5628                                  .L_lambda_simple_arity_check_ok_3751:
  5629 00004203 C8000000                	enter 0, 0
  5630 00004207 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5631 0000420B 50                      	push rax
  5632 0000420C 6A01                    	push 1
  5633 0000420E 488B0425[00000000]      	mov rax, qword [free_var_0]
  5634                                  	assert_closure(rax)
    42 00004216 803805              <1>  cmp byte [%1], %2
    43 00004219 0F85A3F40000        <1>  jne L_error_incorrect_type
  5635 0000421F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5636 00004222 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5637                                  
  5638 00004225 483D[02000000]                  	cmp rax, sob_boolean_false
  5639                                  
  5640 0000422B 740F                            	je .L_if_else_47cc
  5641 0000422D 48B8-                   	mov rax,L_constants + 1
  5641 0000422F [0100000000000000] 
  5642                                  
  5643 00004237 E9E2000000                      	jmp .L_if_end_47cc
  5644                                  
  5645                                          	.L_if_else_47cc:
  5646 0000423C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5647 00004240 50                      	push rax
  5648 00004241 6A01                    	push 1
  5649 00004243 488B0425[88000000]      	mov rax, qword [free_var_17]
  5650                                  	assert_closure(rax)
    42 0000424B 803805              <1>  cmp byte [%1], %2
    43 0000424E 0F856EF40000        <1>  jne L_error_incorrect_type
  5651 00004254 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5652 00004257 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5653 0000425A 50                      	push rax
  5654 0000425B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5655 0000425F 50                      	push rax
  5656 00004260 6A02                    	push 2
  5657 00004262 488B4510                	mov rax, qword [rbp + 8 * 2]
  5658                                  
  5659 00004266 488B00                                            	mov rax, qword[rax + 8 * 0]
  5660                                  
  5661 00004269 488B00                                            	mov rax, qword[rax + 8 * 0]
  5662 0000426C 488B00                  	mov rax, qword [rax]
  5663                                  	assert_closure(rax)
    42 0000426F 803805              <1>  cmp byte [%1], %2
    43 00004272 0F854AF40000        <1>  jne L_error_incorrect_type
  5664 00004278 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5665 0000427B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5666 0000427E 50                      	push rax
  5667 0000427F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5668 00004283 50                      	push rax
  5669 00004284 6A01                    	push 1
  5670 00004286 488B0425[80000000]      	mov rax, qword [free_var_16]
  5671                                  	assert_closure(rax)
    42 0000428E 803805              <1>  cmp byte [%1], %2
    43 00004291 0F852BF40000        <1>  jne L_error_incorrect_type
  5672 00004297 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5673 0000429A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5674 0000429D 50                      	push rax
  5675 0000429E 6A01                    	push 1
  5676 000042A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5677                                  	assert_closure(rax)
    42 000042A4 803805              <1>  cmp byte [%1], %2
    43 000042A7 0F8515F40000        <1>  jne L_error_incorrect_type
  5678 000042AD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5679 000042B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5680 000042B3 50                      	push rax
  5681 000042B4 6A02                    	push 2
  5682 000042B6 488B0425[68000000]      	mov rax, qword [free_var_13]
  5683                                  .L_applic_TC_3fed:
  5684 000042BE 803805                  	cmp byte [rax], T_closure
  5685 000042C1 0F85BCEB0000            	jne L_code_ptr_error
  5686 000042C7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5687 000042CB 53                      	push rbx
  5688 000042CC FF7508                  	push qword [rbp + 8]
  5689 000042CF FF7500                  	push qword [rbp]
  5690 000042D2 488B4D18                	mov rcx, [rbp + 3 * 8]
  5691 000042D6 488B542418              	mov rdx, [rsp + 3 * 8]
  5692 000042DB 488D7204                	lea rsi, [rdx + 4]
  5693 000042DF 4C8D4EFF                	lea r9, [rsi - 1]
  5694 000042E3 488D7903                	lea rdi, [rcx + 3]
  5695 000042E7 4D31C0                  	xor r8, r8
  5696                                  .L_tc_recycle_frame_loop_3fed:
  5697 000042EA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5698 000042EE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5699 000042F3 49FFC9                  	dec r9
  5700 000042F6 4D31C0                  	xor r8, r8
  5701 000042F9 48FFCF                  	dec rdi
  5702 000042FC 48FFCE                  	dec rsi
  5703 000042FF 4883FE00                	cmp rsi, 0
  5704 00004303 75E5                    	jne .L_tc_recycle_frame_loop_3fed
  5705                                  .L_tc_recycle_frame_done_3fed:
  5706                                  ;this pop rbp in sot to the right place
  5707 00004305 4989C9                  	mov r9, rcx
  5708 00004308 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5709 00004310 4C01CC                  	add rsp, r9
  5710 00004313 5D                      	pop rbp
  5711 00004314 488B4D00                	mov rcx, qword [rbp]
  5712 00004318 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5713 0000431C FFE3                    	jmp rbx
  5714                                  
  5715                                          	.L_if_end_47cc:
  5716 0000431E C9                      	leave
  5717 0000431F C22000                  	ret 8 * (2 + 2)
  5718                                  .L_lambda_simple_end_3751:	; new closure is in rax
  5719 00004322 50                      	push rax
  5720 00004323 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5721 00004327 8F00                    	pop qword [rax]
  5722 00004329 48B8-                   	mov rax, sob_void
  5722 0000432B [0000000000000000] 
  5723                                  
  5724 00004333 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5725 00004338 E891DB0000              	call malloc
  5726 0000433D 50                      	push rax
  5727 0000433E BF10000000              	mov rdi, 8 * 2	; new rib
  5728 00004343 E886DB0000              	call malloc
  5729 00004348 50                      	push rax
  5730 00004349 BF10000000              	mov rdi, 8 * 2	; extended env
  5731 0000434E E87BDB0000              	call malloc
  5732 00004353 488B7D10                	mov rdi, ENV
  5733 00004357 BE00000000              	mov rsi, 0
  5734 0000435C BA01000000              	mov rdx, 1
  5735                                  .L_lambda_simple_env_loop_3752:	; ext_env[i + 1] <-- env[i]
  5736 00004361 4883FE01                	cmp rsi, 1
  5737 00004365 7410                    	je .L_lambda_simple_env_end_3752
  5738 00004367 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5739 0000436B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5740 0000436F 48FFC6                  	inc rsi
  5741 00004372 48FFC2                  	inc rdx
  5742 00004375 EBEA                    	jmp .L_lambda_simple_env_loop_3752
  5743                                  .L_lambda_simple_env_end_3752:
  5744 00004377 5B                      	pop rbx
  5745 00004378 BE00000000              	mov rsi, 0
  5746                                  .L_lambda_simple_params_loop_3752:	; copy params
  5747 0000437D 4883FE02                	cmp rsi, 2
  5748 00004381 740E                    	je .L_lambda_simple_params_end_3752
  5749 00004383 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5750 00004388 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5751 0000438C 48FFC6                  	inc rsi
  5752 0000438F EBEC                    	jmp .L_lambda_simple_params_loop_3752
  5753                                  .L_lambda_simple_params_end_3752:
  5754 00004391 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5755 00004394 4889C3                  	mov rbx, rax
  5756 00004397 58                      	pop rax
  5757 00004398 C60005                  	mov byte [rax], T_closure
  5758 0000439B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5759 0000439F 48C74009[AC430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3752
  5760 000043A7 E972010000              	jmp .L_lambda_simple_end_3752
  5761                                  .L_lambda_simple_code_3752:	; lambda-simple body
  5762 000043AC 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5763 000043B2 740B                    	je .L_lambda_simple_arity_check_ok_3752
  5764 000043B4 FF742410                	push qword [rsp + 8 * 2]
  5765 000043B8 6A02                    	push 2
  5766 000043BA E9C8DA0000              	jmp L_error_incorrect_arity_simple
  5767                                  .L_lambda_simple_arity_check_ok_3752:
  5768 000043BF C8000000                	enter 0, 0
  5769 000043C3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5770 000043C7 50                      	push rax
  5771 000043C8 6A01                    	push 1
  5772 000043CA 488B0425[80000000]      	mov rax, qword [free_var_16]
  5773                                  	assert_closure(rax)
    42 000043D2 803805              <1>  cmp byte [%1], %2
    43 000043D5 0F85E7F20000        <1>  jne L_error_incorrect_type
  5774 000043DB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5775 000043DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5776 000043E1 50                      	push rax
  5777 000043E2 6A01                    	push 1
  5778 000043E4 488B0425[00000000]      	mov rax, qword [free_var_0]
  5779                                  	assert_closure(rax)
    42 000043EC 803805              <1>  cmp byte [%1], %2
    43 000043EF 0F85CDF20000        <1>  jne L_error_incorrect_type
  5780 000043F5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5781 000043F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5782                                  
  5783 000043FB 483D[02000000]                  	cmp rax, sob_boolean_false
  5784                                  
  5785 00004401 740F                            	je .L_if_else_47cd
  5786 00004403 48B8-                   	mov rax,L_constants + 1
  5786 00004405 [0100000000000000] 
  5787                                  
  5788 0000440D E908010000                      	jmp .L_if_end_47cd
  5789                                  
  5790                                          	.L_if_else_47cd:
  5791 00004412 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5792 00004416 50                      	push rax
  5793 00004417 488B0425[88000000]      	mov rax, qword [free_var_17]
  5794 0000441F 50                      	push rax
  5795 00004420 6A02                    	push 2
  5796 00004422 488B4510                	mov rax, qword [rbp + 8 * 2]
  5797                                  
  5798 00004426 488B00                                            	mov rax, qword[rax + 8 * 0]
  5799                                  
  5800 00004429 488B00                                            	mov rax, qword[rax + 8 * 0]
  5801 0000442C 488B00                  	mov rax, qword [rax]
  5802                                  	assert_closure(rax)
    42 0000442F 803805              <1>  cmp byte [%1], %2
    43 00004432 0F858AF20000        <1>  jne L_error_incorrect_type
  5803 00004438 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5804 0000443B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5805 0000443E 50                      	push rax
  5806 0000443F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5807 00004443 50                      	push rax
  5808 00004444 6A02                    	push 2
  5809 00004446 488B4510                	mov rax, qword [rbp + 8 * 2]
  5810                                  
  5811 0000444A 488B00                                            	mov rax, qword[rax + 8 * 0]
  5812                                  
  5813 0000444D 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5814 00004451 488B00                  	mov rax, qword [rax]
  5815                                  	assert_closure(rax)
    42 00004454 803805              <1>  cmp byte [%1], %2
    43 00004457 0F8565F20000        <1>  jne L_error_incorrect_type
  5816 0000445D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5817 00004460 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5818 00004463 50                      	push rax
  5819 00004464 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5820 00004468 50                      	push rax
  5821 00004469 488B0425[80000000]      	mov rax, qword [free_var_16]
  5822 00004471 50                      	push rax
  5823 00004472 6A02                    	push 2
  5824 00004474 488B4510                	mov rax, qword [rbp + 8 * 2]
  5825                                  
  5826 00004478 488B00                                            	mov rax, qword[rax + 8 * 0]
  5827                                  
  5828 0000447B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5829 0000447E 488B00                  	mov rax, qword [rax]
  5830                                  	assert_closure(rax)
    42 00004481 803805              <1>  cmp byte [%1], %2
    43 00004484 0F8538F20000        <1>  jne L_error_incorrect_type
  5831 0000448A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5832 0000448D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5833 00004490 50                      	push rax
  5834 00004491 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5835 00004495 50                      	push rax
  5836 00004496 6A02                    	push 2
  5837 00004498 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5838                                  	assert_closure(rax)
    42 000044A0 803805              <1>  cmp byte [%1], %2
    43 000044A3 0F8519F20000        <1>  jne L_error_incorrect_type
  5839 000044A9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5840 000044AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5841 000044AF 50                      	push rax
  5842 000044B0 6A02                    	push 2
  5843 000044B2 488B0425[68000000]      	mov rax, qword [free_var_13]
  5844                                  .L_applic_TC_3fee:
  5845 000044BA 803805                  	cmp byte [rax], T_closure
  5846 000044BD 0F85C0E90000            	jne L_code_ptr_error
  5847 000044C3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5848 000044C7 53                      	push rbx
  5849 000044C8 FF7508                  	push qword [rbp + 8]
  5850 000044CB FF7500                  	push qword [rbp]
  5851 000044CE 488B4D18                	mov rcx, [rbp + 3 * 8]
  5852 000044D2 488B542418              	mov rdx, [rsp + 3 * 8]
  5853 000044D7 488D7204                	lea rsi, [rdx + 4]
  5854 000044DB 4C8D4EFF                	lea r9, [rsi - 1]
  5855 000044DF 488D7903                	lea rdi, [rcx + 3]
  5856 000044E3 4D31C0                  	xor r8, r8
  5857                                  .L_tc_recycle_frame_loop_3fee:
  5858 000044E6 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5859 000044EA 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5860 000044EF 49FFC9                  	dec r9
  5861 000044F2 4D31C0                  	xor r8, r8
  5862 000044F5 48FFCF                  	dec rdi
  5863 000044F8 48FFCE                  	dec rsi
  5864 000044FB 4883FE00                	cmp rsi, 0
  5865 000044FF 75E5                    	jne .L_tc_recycle_frame_loop_3fee
  5866                                  .L_tc_recycle_frame_done_3fee:
  5867                                  ;this pop rbp in sot to the right place
  5868 00004501 4989C9                  	mov r9, rcx
  5869 00004504 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5870 0000450C 4C01CC                  	add rsp, r9
  5871 0000450F 5D                      	pop rbp
  5872 00004510 488B4D00                	mov rcx, qword [rbp]
  5873 00004514 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5874 00004518 FFE3                    	jmp rbx
  5875                                  
  5876                                          	.L_if_end_47cd:
  5877 0000451A C9                      	leave
  5878 0000451B C22000                  	ret 8 * (2 + 2)
  5879                                  .L_lambda_simple_end_3752:	; new closure is in rax
  5880 0000451E 50                      	push rax
  5881 0000451F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5882 00004523 8F00                    	pop qword [rax]
  5883 00004525 48B8-                   	mov rax, sob_void
  5883 00004527 [0000000000000000] 
  5884                                  
  5885 0000452F BF11000000              	mov rdi, (1 + 8 + 8)
  5886 00004534 E895D90000              	call malloc
  5887 00004539 50                      	push rax
  5888 0000453A BF10000000              	mov rdi, 8 * 2
  5889 0000453F E88AD90000              	call malloc
  5890 00004544 50                      	push rax
  5891 00004545 BF10000000              	mov rdi, 8 * 2
  5892 0000454A E87FD90000              	call malloc
  5893 0000454F 488B7D10                	mov rdi, ENV
  5894 00004553 4831F6                  	xor rsi, rsi
  5895 00004556 4831D2                  	xor rdx, rdx
  5896 00004559 48FFC2                  	inc rdx
  5897                                  	.L_lambda_opt_env_loop_087f:
  5898                                  
  5899 0000455C 4883FE01                        	cmp rsi, 1
  5900                                  
  5901 00004560 7412                            	je .L_lambda_opt_env_end_087f
  5902 00004562 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5903 00004566 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5904 0000456A 4883C201                	add rdx, 1
  5905 0000456E 4883C601                	add rsi, 1
  5906 00004572 EBE8                    	jmp .L_lambda_opt_env_loop_087f
  5907                                  
  5908                                          	.L_lambda_opt_env_end_087f:
  5909 00004574 5B                      	pop rbx
  5910 00004575 4831F6                  	xor rsi, rsi
  5911                                  	.L_lambda_opt_params_loop_087f:
  5912                                  
  5913 00004578 4883FE02                        	cmp rsi, 2
  5914                                  
  5915 0000457C 740F                            	je .L_lambda_opt_params_end_087f
  5916 0000457E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5917 00004583 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5918 00004587 4883C601                	add rsi, 1
  5919 0000458B EBEB                    	jmp .L_lambda_opt_params_loop_087f
  5920                                  
  5921                                          	.L_lambda_opt_params_end_087f:
  5922 0000458D 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  5923 00004590 4889C3                  	mov rbx, rax
  5924 00004593 58                      	pop rax
  5925 00004594 C60005                  	mov byte [rax], T_closure
  5926 00004597 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5927 0000459B 48C74009[A8450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_087f
  5928                                  
  5929 000045A3 E9BA010000                      	jmp .L_lambda_opt_end_087f
  5930                                  
  5931                                          	.L_lambda_opt_code_087f:
  5932                                  
  5933 000045A8 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  5934                                  
  5935 000045AE 740D                            	je .L_lambda_opt_arity_check_exact_087f  ;same num_of_args
  5936                                  
  5937 000045B0 7F65                            	jg .L_lambda_opt_arity_check_more_087f  ;greater num_of_args
  5938 000045B2 FF742410                	push qword [rsp + 8 * 2]
  5939 000045B6 6A01                    	push 1
  5940 000045B8 E9DED80000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  5941                                  .L_lambda_opt_arity_check_exact_087f:
  5942 000045BD 4883EC08                	sub rsp, 8 * 1
  5943 000045C1 488D7F10                	lea rdi, [rdi + (8 * 2)]
  5944 000045C5 4889E7                  	mov rdi, rsp 
  5945 000045C8 488B4708                	mov rax, qword [rdi + 8]
  5946 000045CC 488907                  	mov qword [rdi], rax
  5947 000045CF 488D7F08                	lea rdi, [rdi + 8]
  5948 000045D3 488B4708                	mov rax, qword [rdi + 8]
  5949 000045D7 488907                  	mov qword [rdi], rax
  5950 000045DA 488D7F08                	lea rdi, [rdi + 8]
  5951 000045DE 488B4708                	mov rax, qword [rdi + 8]
  5952 000045E2 4889C1                  	mov rcx, rax
  5953 000045E5 4883C001                	add rax, 1
  5954 000045E9 488907                  	mov qword [rdi], rax
  5955 000045EC 488D7F08                	lea rdi, [rdi + 8]
  5956                                  	.L_lambda_opt_stack_shrink_loop_197b:
  5957 000045F0 4883F900                	cmp rcx, 0
  5958 000045F4 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_197b
  5959 000045F6 4883E901                	sub rcx, 1
  5960 000045FA 488D4010                	lea rax, [rax + (8 * 2)]
  5961 000045FE 488B4708                	mov rax, qword [rdi + 8]
  5962 00004602 488907                  	mov qword [rdi], rax
  5963 00004605 488D7F08                	lea rdi, [rdi + 8]
  5964 00004609 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_197b
  5965                                  
  5966                                          	.L_lambda_opt_stack_shrink_loop_exit_197b:
  5967 0000460B 48C707[01000000]        	mov qword [rdi], sob_nil
  5968 00004612 E997000000              	jmp .L_lambda_opt_stack_adjusted_087f
  5969                                  
  5970                                          	.L_lambda_opt_arity_check_more_087f:
  5971 00004617 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  5972 0000461C 488D4EFF                	lea rcx, [rsi - 1]
  5973 00004620 49B8-                   	mov r8, sob_nil
  5973 00004622 [0100000000000000] 
  5974 0000462A 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  5975 0000462F 4889F2                  	mov rdx, rsi
  5976                                  	.L_lambda_opt_stack_shrink_loop_197c:
  5977 00004632 4883F900                	cmp rcx, 0
  5978 00004636 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_197c
  5979 00004638 BF11000000              	mov rdi, 1 + (8 * 2)
  5980 0000463D E88CD80000              	call malloc
  5981 00004642 C60021                  	mov byte [rax], T_pair
  5982 00004645 488B1E                  	mov rbx, qword [rsi]
  5983 00004648 48895801                	mov SOB_PAIR_CAR(rax), rbx
  5984 0000464C 4C894009                	mov SOB_PAIR_CDR(rax), r8
  5985 00004650 4883C6F8                	add rsi, -8
  5986 00004654 4883E901                	sub rcx, 1
  5987 00004658 4989C0                  	mov r8, rax
  5988 0000465B EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_197c
  5989                                  
  5990                                          	.L_lambda_opt_stack_shrink_loop_exit_197c:
  5991 0000465D 4C8902                  	mov qword [rdx], r8
  5992 00004660 4883EA08                	sub rdx, 8 * 1
  5993 00004664 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  5994                                  
  5995 00004669 B901000000                      	mov rcx, 1 
  5996                                  
  5997                                          	.L_lambda_opt_stack_shrink_loop_197d:
  5998 0000466E 4883F900                	cmp rcx, 0
  5999 00004672 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_197d
  6000 00004674 488B06                  	mov rax, qword [rsi]
  6001 00004677 488902                  	mov qword [rdx], rax
  6002 0000467A 488D76F8                	lea rsi, [rsi - 8]
  6003 0000467E 4883C2F8                	add rdx, -8
  6004 00004682 4883C1FF                	add rcx, -1
  6005 00004686 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_197d
  6006                                  
  6007                                          	.L_lambda_opt_stack_shrink_loop_exit_197d:
  6008                                  
  6009 00004688 48C70202000000                  	mov qword [rdx], 1 + 1
  6010 0000468F 4883C6F8                	add rsi, -8
  6011 00004693 4883C2F8                	add rdx, -8
  6012 00004697 488B06                  	mov rax, qword [rsi]
  6013 0000469A 488902                  	mov qword [rdx], rax
  6014 0000469D 4883C2F8                	add rdx, -8
  6015 000046A1 488D76F8                	lea rsi, [rsi - 8]
  6016 000046A5 488B06                  	mov rax, qword [rsi]
  6017 000046A8 488902                  	mov qword [rdx], rax
  6018 000046AB 4889D4                  	mov rsp, rdx
  6019                                  	.L_lambda_opt_stack_adjusted_087f:
  6020 000046AE C8000000                	enter 0, 0
  6021 000046B2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6022 000046B6 50                      	push rax
  6023 000046B7 6A01                    	push 1
  6024 000046B9 488B0425[00000000]      	mov rax, qword [free_var_0]
  6025                                  	assert_closure(rax)
    42 000046C1 803805              <1>  cmp byte [%1], %2
    43 000046C4 0F85F8EF0000        <1>  jne L_error_incorrect_type
  6026 000046CA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6027 000046CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6028                                  
  6029 000046D0 483D[02000000]                  	cmp rax, sob_boolean_false
  6030                                  
  6031 000046D6 740C                            	je .L_if_else_47ce
  6032 000046D8 48B8-                   	mov rax,L_constants + 1
  6032 000046DA [0100000000000000] 
  6033                                  
  6034 000046E2 EB7A                            	jmp .L_if_end_47ce
  6035                                  
  6036                                          	.L_if_else_47ce:
  6037 000046E4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6038 000046E8 50                      	push rax
  6039 000046E9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6040 000046ED 50                      	push rax
  6041 000046EE 6A02                    	push 2
  6042 000046F0 488B4510                	mov rax, qword [rbp + 8 * 2]
  6043                                  
  6044 000046F4 488B00                                            	mov rax, qword[rax + 8 * 0]
  6045                                  
  6046 000046F7 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6047 000046FB 488B00                  	mov rax, qword [rax]
  6048                                  .L_applic_TC_3fef:
  6049 000046FE 803805                  	cmp byte [rax], T_closure
  6050 00004701 0F857CE70000            	jne L_code_ptr_error
  6051 00004707 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6052 0000470B 53                      	push rbx
  6053 0000470C FF7508                  	push qword [rbp + 8]
  6054 0000470F FF7500                  	push qword [rbp]
  6055 00004712 488B4D18                	mov rcx, [rbp + 3 * 8]
  6056 00004716 488B542418              	mov rdx, [rsp + 3 * 8]
  6057 0000471B 488D7204                	lea rsi, [rdx + 4]
  6058 0000471F 4C8D4EFF                	lea r9, [rsi - 1]
  6059 00004723 488D7903                	lea rdi, [rcx + 3]
  6060 00004727 4D31C0                  	xor r8, r8
  6061                                  .L_tc_recycle_frame_loop_3fef:
  6062 0000472A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6063 0000472E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6064 00004733 49FFC9                  	dec r9
  6065 00004736 4D31C0                  	xor r8, r8
  6066 00004739 48FFCF                  	dec rdi
  6067 0000473C 48FFCE                  	dec rsi
  6068 0000473F 4883FE00                	cmp rsi, 0
  6069 00004743 75E5                    	jne .L_tc_recycle_frame_loop_3fef
  6070                                  .L_tc_recycle_frame_done_3fef:
  6071                                  ;this pop rbp in sot to the right place
  6072 00004745 4989C9                  	mov r9, rcx
  6073 00004748 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6074 00004750 4C01CC                  	add rsp, r9
  6075 00004753 5D                      	pop rbp
  6076 00004754 488B4D00                	mov rcx, qword [rbp]
  6077 00004758 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6078 0000475C FFE3                    	jmp rbx
  6079                                  
  6080                                          	.L_if_end_47ce:
  6081 0000475E C9                      	leave
  6082 0000475F C22000                  	ret 8 * (2 + 2)
  6083                                  .L_lambda_opt_end_087f:	; new closure is in rax
  6084 00004762 C9                      	leave
  6085 00004763 C22000                  	ret 8 * (2 + 2)
  6086                                  .L_lambda_simple_end_3750:	; new closure is in rax
  6087                                  	assert_closure(rax)
    42 00004766 803805              <1>  cmp byte [%1], %2
    43 00004769 0F8553EF0000        <1>  jne L_error_incorrect_type
  6088 0000476F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6089 00004772 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6090 00004775 48890425[D8020000]      	mov qword [free_var_91], rax
  6091 0000477D 48B8-                   	mov rax, sob_void
  6091 0000477F [0000000000000000] 
  6092                                  
  6093 00004787 4889C7                  	mov rdi, rax
  6094 0000478A E850D70000              	call print_sexpr_if_not_void
  6095                                  
  6096 0000478F 48B8-                   	mov rax,L_constants + 23
  6096 00004791 [1700000000000000] 
  6097 00004799 50                      	push rax
  6098 0000479A 6A01                    	push 1
  6099 0000479C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6100 000047A1 E828D70000              	call malloc
  6101 000047A6 50                      	push rax
  6102 000047A7 BF00000000              	mov rdi, 8 * 0	; new rib
  6103 000047AC E81DD70000              	call malloc
  6104 000047B1 50                      	push rax
  6105 000047B2 BF08000000              	mov rdi, 8 * 1	; extended env
  6106 000047B7 E812D70000              	call malloc
  6107 000047BC 488B7D10                	mov rdi, ENV
  6108 000047C0 BE00000000              	mov rsi, 0
  6109 000047C5 BA01000000              	mov rdx, 1
  6110                                  .L_lambda_simple_env_loop_3753:	; ext_env[i + 1] <-- env[i]
  6111 000047CA 4883FE00                	cmp rsi, 0
  6112 000047CE 7410                    	je .L_lambda_simple_env_end_3753
  6113 000047D0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6114 000047D4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6115 000047D8 48FFC6                  	inc rsi
  6116 000047DB 48FFC2                  	inc rdx
  6117 000047DE EBEA                    	jmp .L_lambda_simple_env_loop_3753
  6118                                  .L_lambda_simple_env_end_3753:
  6119 000047E0 5B                      	pop rbx
  6120 000047E1 BE00000000              	mov rsi, 0
  6121                                  .L_lambda_simple_params_loop_3753:	; copy params
  6122 000047E6 4883FE00                	cmp rsi, 0
  6123 000047EA 740E                    	je .L_lambda_simple_params_end_3753
  6124 000047EC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6125 000047F1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6126 000047F5 48FFC6                  	inc rsi
  6127 000047F8 EBEC                    	jmp .L_lambda_simple_params_loop_3753
  6128                                  .L_lambda_simple_params_end_3753:
  6129 000047FA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6130 000047FD 4889C3                  	mov rbx, rax
  6131 00004800 58                      	pop rax
  6132 00004801 C60005                  	mov byte [rax], T_closure
  6133 00004804 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6134 00004808 48C74009[15480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3753
  6135 00004810 E9ED020000              	jmp .L_lambda_simple_end_3753
  6136                                  .L_lambda_simple_code_3753:	; lambda-simple body
  6137 00004815 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6138 0000481B 740B                    	je .L_lambda_simple_arity_check_ok_3753
  6139 0000481D FF742410                	push qword [rsp + 8 * 2]
  6140 00004821 6A01                    	push 1
  6141 00004823 E95FD60000              	jmp L_error_incorrect_arity_simple
  6142                                  .L_lambda_simple_arity_check_ok_3753:
  6143 00004828 C8000000                	enter 0, 0
  6144 0000482C BF08000000              	mov rdi, 8
  6145 00004831 E898D60000              	call malloc
  6146 00004836 488B5D20                	mov rbx, PARAM(0)
  6147 0000483A 488918                  	mov qword [rax], rbx
  6148 0000483D 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6149                                  
  6150 00004841 48B8-                            	mov rax, sob_void
  6150 00004843 [0000000000000000] 
  6151                                  
  6152 0000484B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6153 00004850 E879D60000              	call malloc
  6154 00004855 50                      	push rax
  6155 00004856 BF08000000              	mov rdi, 8 * 1	; new rib
  6156 0000485B E86ED60000              	call malloc
  6157 00004860 50                      	push rax
  6158 00004861 BF10000000              	mov rdi, 8 * 2	; extended env
  6159 00004866 E863D60000              	call malloc
  6160 0000486B 488B7D10                	mov rdi, ENV
  6161 0000486F BE00000000              	mov rsi, 0
  6162 00004874 BA01000000              	mov rdx, 1
  6163                                  .L_lambda_simple_env_loop_3754:	; ext_env[i + 1] <-- env[i]
  6164 00004879 4883FE01                	cmp rsi, 1
  6165 0000487D 7410                    	je .L_lambda_simple_env_end_3754
  6166 0000487F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6167 00004883 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6168 00004887 48FFC6                  	inc rsi
  6169 0000488A 48FFC2                  	inc rdx
  6170 0000488D EBEA                    	jmp .L_lambda_simple_env_loop_3754
  6171                                  .L_lambda_simple_env_end_3754:
  6172 0000488F 5B                      	pop rbx
  6173 00004890 BE00000000              	mov rsi, 0
  6174                                  .L_lambda_simple_params_loop_3754:	; copy params
  6175 00004895 4883FE01                	cmp rsi, 1
  6176 00004899 740E                    	je .L_lambda_simple_params_end_3754
  6177 0000489B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6178 000048A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6179 000048A4 48FFC6                  	inc rsi
  6180 000048A7 EBEC                    	jmp .L_lambda_simple_params_loop_3754
  6181                                  .L_lambda_simple_params_end_3754:
  6182 000048A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6183 000048AC 4889C3                  	mov rbx, rax
  6184 000048AF 58                      	pop rax
  6185 000048B0 C60005                  	mov byte [rax], T_closure
  6186 000048B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6187 000048B7 48C74009[C4480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3754
  6188 000048BF E916010000              	jmp .L_lambda_simple_end_3754
  6189                                  .L_lambda_simple_code_3754:	; lambda-simple body
  6190 000048C4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6191 000048CA 740B                    	je .L_lambda_simple_arity_check_ok_3754
  6192 000048CC FF742410                	push qword [rsp + 8 * 2]
  6193 000048D0 6A02                    	push 2
  6194 000048D2 E9B0D50000              	jmp L_error_incorrect_arity_simple
  6195                                  .L_lambda_simple_arity_check_ok_3754:
  6196 000048D7 C8000000                	enter 0, 0
  6197 000048DB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6198 000048DF 50                      	push rax
  6199 000048E0 6A01                    	push 1
  6200 000048E2 488B0425[00000000]      	mov rax, qword [free_var_0]
  6201                                  	assert_closure(rax)
    42 000048EA 803805              <1>  cmp byte [%1], %2
    43 000048ED 0F85CFED0000        <1>  jne L_error_incorrect_type
  6202 000048F3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6203 000048F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6204                                  
  6205 000048F9 483D[02000000]                  	cmp rax, sob_boolean_false
  6206                                  
  6207 000048FF 7409                            	je .L_if_else_47cf
  6208 00004901 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6209                                  
  6210 00004905 E9CC000000                      	jmp .L_if_end_47cf
  6211                                  
  6212                                          	.L_if_else_47cf:
  6213 0000490A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6214 0000490E 50                      	push rax
  6215 0000490F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6216 00004913 50                      	push rax
  6217 00004914 6A01                    	push 1
  6218 00004916 488B0425[80000000]      	mov rax, qword [free_var_16]
  6219                                  	assert_closure(rax)
    42 0000491E 803805              <1>  cmp byte [%1], %2
    43 00004921 0F859BED0000        <1>  jne L_error_incorrect_type
  6220 00004927 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6221 0000492A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6222 0000492D 50                      	push rax
  6223 0000492E 6A02                    	push 2
  6224 00004930 488B0425[68000000]      	mov rax, qword [free_var_13]
  6225                                  	assert_closure(rax)
    42 00004938 803805              <1>  cmp byte [%1], %2
    43 0000493B 0F8581ED0000        <1>  jne L_error_incorrect_type
  6226 00004941 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6227 00004944 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6228 00004947 50                      	push rax
  6229 00004948 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6230 0000494C 50                      	push rax
  6231 0000494D 6A01                    	push 1
  6232 0000494F 488B0425[88000000]      	mov rax, qword [free_var_17]
  6233                                  	assert_closure(rax)
    42 00004957 803805              <1>  cmp byte [%1], %2
    43 0000495A 0F8562ED0000        <1>  jne L_error_incorrect_type
  6234 00004960 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6235 00004963 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6236 00004966 50                      	push rax
  6237 00004967 6A02                    	push 2
  6238 00004969 488B4510                	mov rax, qword [rbp + 8 * 2]
  6239                                  
  6240 0000496D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6241                                  
  6242 00004970 488B00                                            	mov rax, qword[rax + 8 * 0]
  6243 00004973 488B00                  	mov rax, qword [rax]
  6244                                  .L_applic_TC_3ff0:
  6245 00004976 803805                  	cmp byte [rax], T_closure
  6246 00004979 0F8504E50000            	jne L_code_ptr_error
  6247 0000497F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6248 00004983 53                      	push rbx
  6249 00004984 FF7508                  	push qword [rbp + 8]
  6250 00004987 FF7500                  	push qword [rbp]
  6251 0000498A 488B4D18                	mov rcx, [rbp + 3 * 8]
  6252 0000498E 488B542418              	mov rdx, [rsp + 3 * 8]
  6253 00004993 488D7204                	lea rsi, [rdx + 4]
  6254 00004997 4C8D4EFF                	lea r9, [rsi - 1]
  6255 0000499B 488D7903                	lea rdi, [rcx + 3]
  6256 0000499F 4D31C0                  	xor r8, r8
  6257                                  .L_tc_recycle_frame_loop_3ff0:
  6258 000049A2 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6259 000049A6 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6260 000049AB 49FFC9                  	dec r9
  6261 000049AE 4D31C0                  	xor r8, r8
  6262 000049B1 48FFCF                  	dec rdi
  6263 000049B4 48FFCE                  	dec rsi
  6264 000049B7 4883FE00                	cmp rsi, 0
  6265 000049BB 75E5                    	jne .L_tc_recycle_frame_loop_3ff0
  6266                                  .L_tc_recycle_frame_done_3ff0:
  6267                                  ;this pop rbp in sot to the right place
  6268 000049BD 4989C9                  	mov r9, rcx
  6269 000049C0 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6270 000049C8 4C01CC                  	add rsp, r9
  6271 000049CB 5D                      	pop rbp
  6272 000049CC 488B4D00                	mov rcx, qword [rbp]
  6273 000049D0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6274 000049D4 FFE3                    	jmp rbx
  6275                                  
  6276                                          	.L_if_end_47cf:
  6277 000049D6 C9                      	leave
  6278 000049D7 C22000                  	ret 8 * (2 + 2)
  6279                                  .L_lambda_simple_end_3754:	; new closure is in rax
  6280 000049DA 50                      	push rax
  6281 000049DB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6282 000049DF 8F00                    	pop qword [rax]
  6283 000049E1 48B8-                   	mov rax, sob_void
  6283 000049E3 [0000000000000000] 
  6284                                  
  6285 000049EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6286 000049F0 E8D9D40000              	call malloc
  6287 000049F5 50                      	push rax
  6288 000049F6 BF08000000              	mov rdi, 8 * 1	; new rib
  6289 000049FB E8CED40000              	call malloc
  6290 00004A00 50                      	push rax
  6291 00004A01 BF10000000              	mov rdi, 8 * 2	; extended env
  6292 00004A06 E8C3D40000              	call malloc
  6293 00004A0B 488B7D10                	mov rdi, ENV
  6294 00004A0F BE00000000              	mov rsi, 0
  6295 00004A14 BA01000000              	mov rdx, 1
  6296                                  .L_lambda_simple_env_loop_3755:	; ext_env[i + 1] <-- env[i]
  6297 00004A19 4883FE01                	cmp rsi, 1
  6298 00004A1D 7410                    	je .L_lambda_simple_env_end_3755
  6299 00004A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6300 00004A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6301 00004A27 48FFC6                  	inc rsi
  6302 00004A2A 48FFC2                  	inc rdx
  6303 00004A2D EBEA                    	jmp .L_lambda_simple_env_loop_3755
  6304                                  .L_lambda_simple_env_end_3755:
  6305 00004A2F 5B                      	pop rbx
  6306 00004A30 BE00000000              	mov rsi, 0
  6307                                  .L_lambda_simple_params_loop_3755:	; copy params
  6308 00004A35 4883FE01                	cmp rsi, 1
  6309 00004A39 740E                    	je .L_lambda_simple_params_end_3755
  6310 00004A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6311 00004A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6312 00004A44 48FFC6                  	inc rsi
  6313 00004A47 EBEC                    	jmp .L_lambda_simple_params_loop_3755
  6314                                  .L_lambda_simple_params_end_3755:
  6315 00004A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6316 00004A4C 4889C3                  	mov rbx, rax
  6317 00004A4F 58                      	pop rax
  6318 00004A50 C60005                  	mov byte [rax], T_closure
  6319 00004A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6320 00004A57 48C74009[644A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3755
  6321 00004A5F E99A000000              	jmp .L_lambda_simple_end_3755
  6322                                  .L_lambda_simple_code_3755:	; lambda-simple body
  6323 00004A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6324 00004A6A 740B                    	je .L_lambda_simple_arity_check_ok_3755
  6325 00004A6C FF742410                	push qword [rsp + 8 * 2]
  6326 00004A70 6A01                    	push 1
  6327 00004A72 E910D40000              	jmp L_error_incorrect_arity_simple
  6328                                  .L_lambda_simple_arity_check_ok_3755:
  6329 00004A77 C8000000                	enter 0, 0
  6330 00004A7B 48B8-                   	mov rax,L_constants + 1
  6330 00004A7D [0100000000000000] 
  6331 00004A85 50                      	push rax
  6332 00004A86 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6333 00004A8A 50                      	push rax
  6334 00004A8B 6A02                    	push 2
  6335 00004A8D 488B4510                	mov rax, qword [rbp + 8 * 2]
  6336                                  
  6337 00004A91 488B00                                            	mov rax, qword[rax + 8 * 0]
  6338                                  
  6339 00004A94 488B00                                            	mov rax, qword[rax + 8 * 0]
  6340 00004A97 488B00                  	mov rax, qword [rax]
  6341                                  .L_applic_TC_3ff1:
  6342 00004A9A 803805                  	cmp byte [rax], T_closure
  6343 00004A9D 0F85E0E30000            	jne L_code_ptr_error
  6344 00004AA3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6345 00004AA7 53                      	push rbx
  6346 00004AA8 FF7508                  	push qword [rbp + 8]
  6347 00004AAB FF7500                  	push qword [rbp]
  6348 00004AAE 488B4D18                	mov rcx, [rbp + 3 * 8]
  6349 00004AB2 488B542418              	mov rdx, [rsp + 3 * 8]
  6350 00004AB7 488D7204                	lea rsi, [rdx + 4]
  6351 00004ABB 4C8D4EFF                	lea r9, [rsi - 1]
  6352 00004ABF 488D7903                	lea rdi, [rcx + 3]
  6353 00004AC3 4D31C0                  	xor r8, r8
  6354                                  .L_tc_recycle_frame_loop_3ff1:
  6355 00004AC6 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6356 00004ACA 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6357 00004ACF 49FFC9                  	dec r9
  6358 00004AD2 4D31C0                  	xor r8, r8
  6359 00004AD5 48FFCF                  	dec rdi
  6360 00004AD8 48FFCE                  	dec rsi
  6361 00004ADB 4883FE00                	cmp rsi, 0
  6362 00004ADF 75E5                    	jne .L_tc_recycle_frame_loop_3ff1
  6363                                  .L_tc_recycle_frame_done_3ff1:
  6364                                  ;this pop rbp in sot to the right place
  6365 00004AE1 4989C9                  	mov r9, rcx
  6366 00004AE4 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6367 00004AEC 4C01CC                  	add rsp, r9
  6368 00004AEF 5D                      	pop rbp
  6369 00004AF0 488B4D00                	mov rcx, qword [rbp]
  6370 00004AF4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6371 00004AF8 FFE3                    	jmp rbx
  6372 00004AFA C9                      	leave
  6373 00004AFB C21800                  	ret 8 * (2 + 1)
  6374                                  .L_lambda_simple_end_3755:	; new closure is in rax
  6375 00004AFE C9                      	leave
  6376 00004AFF C21800                  	ret 8 * (2 + 1)
  6377                                  .L_lambda_simple_end_3753:	; new closure is in rax
  6378                                  	assert_closure(rax)
    42 00004B02 803805              <1>  cmp byte [%1], %2
    43 00004B05 0F85B7EB0000        <1>  jne L_error_incorrect_type
  6379 00004B0B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6380 00004B0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6381 00004B11 48890425[E8020000]      	mov qword [free_var_93], rax
  6382 00004B19 48B8-                   	mov rax, sob_void
  6382 00004B1B [0000000000000000] 
  6383                                  
  6384 00004B23 4889C7                  	mov rdi, rax
  6385 00004B26 E8B4D30000              	call print_sexpr_if_not_void
  6386                                  
  6387 00004B2B 48B8-                   	mov rax,L_constants + 23
  6387 00004B2D [1700000000000000] 
  6388 00004B35 50                      	push rax
  6389 00004B36 48B8-                   	mov rax,L_constants + 23
  6389 00004B38 [1700000000000000] 
  6390 00004B40 50                      	push rax
  6391 00004B41 6A02                    	push 2
  6392 00004B43 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6393 00004B48 E881D30000              	call malloc
  6394 00004B4D 50                      	push rax
  6395 00004B4E BF00000000              	mov rdi, 8 * 0	; new rib
  6396 00004B53 E876D30000              	call malloc
  6397 00004B58 50                      	push rax
  6398 00004B59 BF08000000              	mov rdi, 8 * 1	; extended env
  6399 00004B5E E86BD30000              	call malloc
  6400 00004B63 488B7D10                	mov rdi, ENV
  6401 00004B67 BE00000000              	mov rsi, 0
  6402 00004B6C BA01000000              	mov rdx, 1
  6403                                  .L_lambda_simple_env_loop_3756:	; ext_env[i + 1] <-- env[i]
  6404 00004B71 4883FE00                	cmp rsi, 0
  6405 00004B75 7410                    	je .L_lambda_simple_env_end_3756
  6406 00004B77 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6407 00004B7B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6408 00004B7F 48FFC6                  	inc rsi
  6409 00004B82 48FFC2                  	inc rdx
  6410 00004B85 EBEA                    	jmp .L_lambda_simple_env_loop_3756
  6411                                  .L_lambda_simple_env_end_3756:
  6412 00004B87 5B                      	pop rbx
  6413 00004B88 BE00000000              	mov rsi, 0
  6414                                  .L_lambda_simple_params_loop_3756:	; copy params
  6415 00004B8D 4883FE00                	cmp rsi, 0
  6416 00004B91 740E                    	je .L_lambda_simple_params_end_3756
  6417 00004B93 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6418 00004B98 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6419 00004B9C 48FFC6                  	inc rsi
  6420 00004B9F EBEC                    	jmp .L_lambda_simple_params_loop_3756
  6421                                  .L_lambda_simple_params_end_3756:
  6422 00004BA1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6423 00004BA4 4889C3                  	mov rbx, rax
  6424 00004BA7 58                      	pop rax
  6425 00004BA8 C60005                  	mov byte [rax], T_closure
  6426 00004BAB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6427 00004BAF 48C74009[BC4B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3756
  6428 00004BB7 E908060000              	jmp .L_lambda_simple_end_3756
  6429                                  .L_lambda_simple_code_3756:	; lambda-simple body
  6430 00004BBC 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6431 00004BC2 740B                    	je .L_lambda_simple_arity_check_ok_3756
  6432 00004BC4 FF742410                	push qword [rsp + 8 * 2]
  6433 00004BC8 6A02                    	push 2
  6434 00004BCA E9B8D20000              	jmp L_error_incorrect_arity_simple
  6435                                  .L_lambda_simple_arity_check_ok_3756:
  6436 00004BCF C8000000                	enter 0, 0
  6437 00004BD3 BF08000000              	mov rdi, 8
  6438 00004BD8 E8F1D20000              	call malloc
  6439 00004BDD 488B5D20                	mov rbx, PARAM(0)
  6440 00004BE1 488918                  	mov qword [rax], rbx
  6441 00004BE4 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6442                                  
  6443 00004BE8 48B8-                            	mov rax, sob_void
  6443 00004BEA [0000000000000000] 
  6444                                  
  6445 00004BF2 BF08000000              	mov rdi, 8
  6446 00004BF7 E8D2D20000              	call malloc
  6447 00004BFC 488B5D28                	mov rbx, PARAM(1)
  6448 00004C00 488918                  	mov qword [rax], rbx
  6449 00004C03 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  6450                                  
  6451 00004C07 48B8-                            	mov rax, sob_void
  6451 00004C09 [0000000000000000] 
  6452                                  
  6453 00004C11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6454 00004C16 E8B3D20000              	call malloc
  6455 00004C1B 50                      	push rax
  6456 00004C1C BF10000000              	mov rdi, 8 * 2	; new rib
  6457 00004C21 E8A8D20000              	call malloc
  6458 00004C26 50                      	push rax
  6459 00004C27 BF10000000              	mov rdi, 8 * 2	; extended env
  6460 00004C2C E89DD20000              	call malloc
  6461 00004C31 488B7D10                	mov rdi, ENV
  6462 00004C35 BE00000000              	mov rsi, 0
  6463 00004C3A BA01000000              	mov rdx, 1
  6464                                  .L_lambda_simple_env_loop_3757:	; ext_env[i + 1] <-- env[i]
  6465 00004C3F 4883FE01                	cmp rsi, 1
  6466 00004C43 7410                    	je .L_lambda_simple_env_end_3757
  6467 00004C45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6468 00004C49 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6469 00004C4D 48FFC6                  	inc rsi
  6470 00004C50 48FFC2                  	inc rdx
  6471 00004C53 EBEA                    	jmp .L_lambda_simple_env_loop_3757
  6472                                  .L_lambda_simple_env_end_3757:
  6473 00004C55 5B                      	pop rbx
  6474 00004C56 BE00000000              	mov rsi, 0
  6475                                  .L_lambda_simple_params_loop_3757:	; copy params
  6476 00004C5B 4883FE02                	cmp rsi, 2
  6477 00004C5F 740E                    	je .L_lambda_simple_params_end_3757
  6478 00004C61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6479 00004C66 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6480 00004C6A 48FFC6                  	inc rsi
  6481 00004C6D EBEC                    	jmp .L_lambda_simple_params_loop_3757
  6482                                  .L_lambda_simple_params_end_3757:
  6483 00004C6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6484 00004C72 4889C3                  	mov rbx, rax
  6485 00004C75 58                      	pop rax
  6486 00004C76 C60005                  	mov byte [rax], T_closure
  6487 00004C79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6488 00004C7D 48C74009[8A4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3757
  6489 00004C85 E91C010000              	jmp .L_lambda_simple_end_3757
  6490                                  .L_lambda_simple_code_3757:	; lambda-simple body
  6491 00004C8A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6492 00004C90 740B                    	je .L_lambda_simple_arity_check_ok_3757
  6493 00004C92 FF742410                	push qword [rsp + 8 * 2]
  6494 00004C96 6A02                    	push 2
  6495 00004C98 E9EAD10000              	jmp L_error_incorrect_arity_simple
  6496                                  .L_lambda_simple_arity_check_ok_3757:
  6497 00004C9D C8000000                	enter 0, 0
  6498 00004CA1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6499 00004CA5 50                      	push rax
  6500 00004CA6 6A01                    	push 1
  6501 00004CA8 488B0425[00000000]      	mov rax, qword [free_var_0]
  6502                                  	assert_closure(rax)
    42 00004CB0 803805              <1>  cmp byte [%1], %2
    43 00004CB3 0F8509EA0000        <1>  jne L_error_incorrect_type
  6503 00004CB9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6504 00004CBC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6505                                  
  6506 00004CBF 483D[02000000]                  	cmp rax, sob_boolean_false
  6507                                  
  6508 00004CC5 7409                            	je .L_if_else_47d0
  6509 00004CC7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6510                                  
  6511 00004CCB E9D2000000                      	jmp .L_if_end_47d0
  6512                                  
  6513                                          	.L_if_else_47d0:
  6514 00004CD0 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6515 00004CD4 50                      	push rax
  6516 00004CD5 6A01                    	push 1
  6517 00004CD7 488B0425[88000000]      	mov rax, qword [free_var_17]
  6518                                  	assert_closure(rax)
    42 00004CDF 803805              <1>  cmp byte [%1], %2
    43 00004CE2 0F85DAE90000        <1>  jne L_error_incorrect_type
  6519 00004CE8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6520 00004CEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6521 00004CEE 50                      	push rax
  6522 00004CEF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6523 00004CF3 50                      	push rax
  6524 00004CF4 6A01                    	push 1
  6525 00004CF6 488B0425[80000000]      	mov rax, qword [free_var_16]
  6526                                  	assert_closure(rax)
    42 00004CFE 803805              <1>  cmp byte [%1], %2
    43 00004D01 0F85BBE90000        <1>  jne L_error_incorrect_type
  6527 00004D07 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6528 00004D0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6529 00004D0D 50                      	push rax
  6530 00004D0E 6A02                    	push 2
  6531 00004D10 488B4510                	mov rax, qword [rbp + 8 * 2]
  6532                                  
  6533 00004D14 488B00                                            	mov rax, qword[rax + 8 * 0]
  6534                                  
  6535 00004D17 488B00                                            	mov rax, qword[rax + 8 * 0]
  6536 00004D1A 488B00                  	mov rax, qword [rax]
  6537                                  	assert_closure(rax)
    42 00004D1D 803805              <1>  cmp byte [%1], %2
    43 00004D20 0F859CE90000        <1>  jne L_error_incorrect_type
  6538 00004D26 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6539 00004D29 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6540 00004D2C 50                      	push rax
  6541 00004D2D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6542 00004D31 50                      	push rax
  6543 00004D32 6A02                    	push 2
  6544 00004D34 488B4510                	mov rax, qword [rbp + 8 * 2]
  6545                                  
  6546 00004D38 488B00                                            	mov rax, qword[rax + 8 * 0]
  6547                                  
  6548 00004D3B 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6549 00004D3F 488B00                  	mov rax, qword [rax]
  6550                                  .L_applic_TC_3ff2:
  6551 00004D42 803805                  	cmp byte [rax], T_closure
  6552 00004D45 0F8538E10000            	jne L_code_ptr_error
  6553 00004D4B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6554 00004D4F 53                      	push rbx
  6555 00004D50 FF7508                  	push qword [rbp + 8]
  6556 00004D53 FF7500                  	push qword [rbp]
  6557 00004D56 488B4D18                	mov rcx, [rbp + 3 * 8]
  6558 00004D5A 488B542418              	mov rdx, [rsp + 3 * 8]
  6559 00004D5F 488D7204                	lea rsi, [rdx + 4]
  6560 00004D63 4C8D4EFF                	lea r9, [rsi - 1]
  6561 00004D67 488D7903                	lea rdi, [rcx + 3]
  6562 00004D6B 4D31C0                  	xor r8, r8
  6563                                  .L_tc_recycle_frame_loop_3ff2:
  6564 00004D6E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6565 00004D72 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6566 00004D77 49FFC9                  	dec r9
  6567 00004D7A 4D31C0                  	xor r8, r8
  6568 00004D7D 48FFCF                  	dec rdi
  6569 00004D80 48FFCE                  	dec rsi
  6570 00004D83 4883FE00                	cmp rsi, 0
  6571 00004D87 75E5                    	jne .L_tc_recycle_frame_loop_3ff2
  6572                                  .L_tc_recycle_frame_done_3ff2:
  6573                                  ;this pop rbp in sot to the right place
  6574 00004D89 4989C9                  	mov r9, rcx
  6575 00004D8C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6576 00004D94 4C01CC                  	add rsp, r9
  6577 00004D97 5D                      	pop rbp
  6578 00004D98 488B4D00                	mov rcx, qword [rbp]
  6579 00004D9C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6580 00004DA0 FFE3                    	jmp rbx
  6581                                  
  6582                                          	.L_if_end_47d0:
  6583 00004DA2 C9                      	leave
  6584 00004DA3 C22000                  	ret 8 * (2 + 2)
  6585                                  .L_lambda_simple_end_3757:	; new closure is in rax
  6586 00004DA6 50                      	push rax
  6587 00004DA7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6588 00004DAB 8F00                    	pop qword [rax]
  6589 00004DAD 48B8-                   	mov rax, sob_void
  6589 00004DAF [0000000000000000] 
  6590                                  
  6591 00004DB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6592 00004DBC E80DD10000              	call malloc
  6593 00004DC1 50                      	push rax
  6594 00004DC2 BF10000000              	mov rdi, 8 * 2	; new rib
  6595 00004DC7 E802D10000              	call malloc
  6596 00004DCC 50                      	push rax
  6597 00004DCD BF10000000              	mov rdi, 8 * 2	; extended env
  6598 00004DD2 E8F7D00000              	call malloc
  6599 00004DD7 488B7D10                	mov rdi, ENV
  6600 00004DDB BE00000000              	mov rsi, 0
  6601 00004DE0 BA01000000              	mov rdx, 1
  6602                                  .L_lambda_simple_env_loop_3758:	; ext_env[i + 1] <-- env[i]
  6603 00004DE5 4883FE01                	cmp rsi, 1
  6604 00004DE9 7410                    	je .L_lambda_simple_env_end_3758
  6605 00004DEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6606 00004DEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6607 00004DF3 48FFC6                  	inc rsi
  6608 00004DF6 48FFC2                  	inc rdx
  6609 00004DF9 EBEA                    	jmp .L_lambda_simple_env_loop_3758
  6610                                  .L_lambda_simple_env_end_3758:
  6611 00004DFB 5B                      	pop rbx
  6612 00004DFC BE00000000              	mov rsi, 0
  6613                                  .L_lambda_simple_params_loop_3758:	; copy params
  6614 00004E01 4883FE02                	cmp rsi, 2
  6615 00004E05 740E                    	je .L_lambda_simple_params_end_3758
  6616 00004E07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6617 00004E0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6618 00004E10 48FFC6                  	inc rsi
  6619 00004E13 EBEC                    	jmp .L_lambda_simple_params_loop_3758
  6620                                  .L_lambda_simple_params_end_3758:
  6621 00004E15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6622 00004E18 4889C3                  	mov rbx, rax
  6623 00004E1B 58                      	pop rax
  6624 00004E1C C60005                  	mov byte [rax], T_closure
  6625 00004E1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6626 00004E23 48C74009[304E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3758
  6627 00004E2B E917010000              	jmp .L_lambda_simple_end_3758
  6628                                  .L_lambda_simple_code_3758:	; lambda-simple body
  6629 00004E30 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6630 00004E36 740B                    	je .L_lambda_simple_arity_check_ok_3758
  6631 00004E38 FF742410                	push qword [rsp + 8 * 2]
  6632 00004E3C 6A02                    	push 2
  6633 00004E3E E944D00000              	jmp L_error_incorrect_arity_simple
  6634                                  .L_lambda_simple_arity_check_ok_3758:
  6635 00004E43 C8000000                	enter 0, 0
  6636 00004E47 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6637 00004E4B 50                      	push rax
  6638 00004E4C 6A01                    	push 1
  6639 00004E4E 488B0425[00000000]      	mov rax, qword [free_var_0]
  6640                                  	assert_closure(rax)
    42 00004E56 803805              <1>  cmp byte [%1], %2
    43 00004E59 0F8563E80000        <1>  jne L_error_incorrect_type
  6641 00004E5F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6642 00004E62 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6643                                  
  6644 00004E65 483D[02000000]                  	cmp rax, sob_boolean_false
  6645                                  
  6646 00004E6B 7409                            	je .L_if_else_47d1
  6647 00004E6D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6648                                  
  6649 00004E71 E9CD000000                      	jmp .L_if_end_47d1
  6650                                  
  6651                                          	.L_if_else_47d1:
  6652 00004E76 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6653 00004E7A 50                      	push rax
  6654 00004E7B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6655 00004E7F 50                      	push rax
  6656 00004E80 6A01                    	push 1
  6657 00004E82 488B0425[88000000]      	mov rax, qword [free_var_17]
  6658                                  	assert_closure(rax)
    42 00004E8A 803805              <1>  cmp byte [%1], %2
    43 00004E8D 0F852FE80000        <1>  jne L_error_incorrect_type
  6659 00004E93 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6660 00004E96 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6661 00004E99 50                      	push rax
  6662 00004E9A 6A02                    	push 2
  6663 00004E9C 488B4510                	mov rax, qword [rbp + 8 * 2]
  6664                                  
  6665 00004EA0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6666                                  
  6667 00004EA3 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6668 00004EA7 488B00                  	mov rax, qword [rax]
  6669                                  	assert_closure(rax)
    42 00004EAA 803805              <1>  cmp byte [%1], %2
    43 00004EAD 0F850FE80000        <1>  jne L_error_incorrect_type
  6670 00004EB3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6671 00004EB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6672 00004EB9 50                      	push rax
  6673 00004EBA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6674 00004EBE 50                      	push rax
  6675 00004EBF 6A01                    	push 1
  6676 00004EC1 488B0425[80000000]      	mov rax, qword [free_var_16]
  6677                                  	assert_closure(rax)
    42 00004EC9 803805              <1>  cmp byte [%1], %2
    43 00004ECC 0F85F0E70000        <1>  jne L_error_incorrect_type
  6678 00004ED2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6679 00004ED5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6680 00004ED8 50                      	push rax
  6681 00004ED9 6A02                    	push 2
  6682 00004EDB 488B0425[68000000]      	mov rax, qword [free_var_13]
  6683                                  .L_applic_TC_3ff3:
  6684 00004EE3 803805                  	cmp byte [rax], T_closure
  6685 00004EE6 0F8597DF0000            	jne L_code_ptr_error
  6686 00004EEC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6687 00004EF0 53                      	push rbx
  6688 00004EF1 FF7508                  	push qword [rbp + 8]
  6689 00004EF4 FF7500                  	push qword [rbp]
  6690 00004EF7 488B4D18                	mov rcx, [rbp + 3 * 8]
  6691 00004EFB 488B542418              	mov rdx, [rsp + 3 * 8]
  6692 00004F00 488D7204                	lea rsi, [rdx + 4]
  6693 00004F04 4C8D4EFF                	lea r9, [rsi - 1]
  6694 00004F08 488D7903                	lea rdi, [rcx + 3]
  6695 00004F0C 4D31C0                  	xor r8, r8
  6696                                  .L_tc_recycle_frame_loop_3ff3:
  6697 00004F0F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6698 00004F13 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6699 00004F18 49FFC9                  	dec r9
  6700 00004F1B 4D31C0                  	xor r8, r8
  6701 00004F1E 48FFCF                  	dec rdi
  6702 00004F21 48FFCE                  	dec rsi
  6703 00004F24 4883FE00                	cmp rsi, 0
  6704 00004F28 75E5                    	jne .L_tc_recycle_frame_loop_3ff3
  6705                                  .L_tc_recycle_frame_done_3ff3:
  6706                                  ;this pop rbp in sot to the right place
  6707 00004F2A 4989C9                  	mov r9, rcx
  6708 00004F2D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6709 00004F35 4C01CC                  	add rsp, r9
  6710 00004F38 5D                      	pop rbp
  6711 00004F39 488B4D00                	mov rcx, qword [rbp]
  6712 00004F3D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6713 00004F41 FFE3                    	jmp rbx
  6714                                  
  6715                                          	.L_if_end_47d1:
  6716 00004F43 C9                      	leave
  6717 00004F44 C22000                  	ret 8 * (2 + 2)
  6718                                  .L_lambda_simple_end_3758:	; new closure is in rax
  6719 00004F47 50                      	push rax
  6720 00004F48 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6721 00004F4C 8F00                    	pop qword [rax]
  6722 00004F4E 48B8-                   	mov rax, sob_void
  6722 00004F50 [0000000000000000] 
  6723                                  
  6724 00004F58 BF11000000              	mov rdi, (1 + 8 + 8)
  6725 00004F5D E86CCF0000              	call malloc
  6726 00004F62 50                      	push rax
  6727 00004F63 BF10000000              	mov rdi, 8 * 2
  6728 00004F68 E861CF0000              	call malloc
  6729 00004F6D 50                      	push rax
  6730 00004F6E BF10000000              	mov rdi, 8 * 2
  6731 00004F73 E856CF0000              	call malloc
  6732 00004F78 488B7D10                	mov rdi, ENV
  6733 00004F7C 4831F6                  	xor rsi, rsi
  6734 00004F7F 4831D2                  	xor rdx, rdx
  6735 00004F82 48FFC2                  	inc rdx
  6736                                  	.L_lambda_opt_env_loop_0880:
  6737                                  
  6738 00004F85 4883FE01                        	cmp rsi, 1
  6739                                  
  6740 00004F89 7412                            	je .L_lambda_opt_env_end_0880
  6741 00004F8B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6742 00004F8F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6743 00004F93 4883C201                	add rdx, 1
  6744 00004F97 4883C601                	add rsi, 1
  6745 00004F9B EBE8                    	jmp .L_lambda_opt_env_loop_0880
  6746                                  
  6747                                          	.L_lambda_opt_env_end_0880:
  6748 00004F9D 5B                      	pop rbx
  6749 00004F9E 4831F6                  	xor rsi, rsi
  6750                                  	.L_lambda_opt_params_loop_0880:
  6751                                  
  6752 00004FA1 4883FE02                        	cmp rsi, 2
  6753                                  
  6754 00004FA5 740F                            	je .L_lambda_opt_params_end_0880
  6755 00004FA7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6756 00004FAC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6757 00004FB0 4883C601                	add rsi, 1
  6758 00004FB4 EBEB                    	jmp .L_lambda_opt_params_loop_0880
  6759                                  
  6760                                          	.L_lambda_opt_params_end_0880:
  6761 00004FB6 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  6762 00004FB9 4889C3                  	mov rbx, rax
  6763 00004FBC 58                      	pop rax
  6764 00004FBD C60005                  	mov byte [rax], T_closure
  6765 00004FC0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6766 00004FC4 48C74009[D14F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0880
  6767                                  
  6768 00004FCC E9EF010000                      	jmp .L_lambda_opt_end_0880
  6769                                  
  6770                                          	.L_lambda_opt_code_0880:
  6771                                  
  6772 00004FD1 48837C241000                    	cmp qword [rsp + 8 * 2], 0
  6773                                  
  6774 00004FD7 740D                            	je .L_lambda_opt_arity_check_exact_0880  ;same num_of_args
  6775                                  
  6776 00004FD9 7F65                            	jg .L_lambda_opt_arity_check_more_0880  ;greater num_of_args
  6777 00004FDB FF742410                	push qword [rsp + 8 * 2]
  6778 00004FDF 6A00                    	push 0
  6779 00004FE1 E9B5CE0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  6780                                  .L_lambda_opt_arity_check_exact_0880:
  6781 00004FE6 4883EC08                	sub rsp, 8 * 1
  6782 00004FEA 488D7F10                	lea rdi, [rdi + (8 * 2)]
  6783 00004FEE 4889E7                  	mov rdi, rsp 
  6784 00004FF1 488B4708                	mov rax, qword [rdi + 8]
  6785 00004FF5 488907                  	mov qword [rdi], rax
  6786 00004FF8 488D7F08                	lea rdi, [rdi + 8]
  6787 00004FFC 488B4708                	mov rax, qword [rdi + 8]
  6788 00005000 488907                  	mov qword [rdi], rax
  6789 00005003 488D7F08                	lea rdi, [rdi + 8]
  6790 00005007 488B4708                	mov rax, qword [rdi + 8]
  6791 0000500B 4889C1                  	mov rcx, rax
  6792 0000500E 4883C001                	add rax, 1
  6793 00005012 488907                  	mov qword [rdi], rax
  6794 00005015 488D7F08                	lea rdi, [rdi + 8]
  6795                                  	.L_lambda_opt_stack_shrink_loop_197e:
  6796 00005019 4883F900                	cmp rcx, 0
  6797 0000501D 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_197e
  6798 0000501F 4883E901                	sub rcx, 1
  6799 00005023 488D4010                	lea rax, [rax + (8 * 2)]
  6800 00005027 488B4708                	mov rax, qword [rdi + 8]
  6801 0000502B 488907                  	mov qword [rdi], rax
  6802 0000502E 488D7F08                	lea rdi, [rdi + 8]
  6803 00005032 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_197e
  6804                                  
  6805                                          	.L_lambda_opt_stack_shrink_loop_exit_197e:
  6806 00005034 48C707[01000000]        	mov qword [rdi], sob_nil
  6807 0000503B E996000000              	jmp .L_lambda_opt_stack_adjusted_0880
  6808                                  
  6809                                          	.L_lambda_opt_arity_check_more_0880:
  6810 00005040 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  6811 00005045 488D0E                  	lea rcx, [rsi - 0]
  6812 00005048 49B8-                   	mov r8, sob_nil
  6812 0000504A [0100000000000000] 
  6813 00005052 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  6814 00005057 4889F2                  	mov rdx, rsi
  6815                                  	.L_lambda_opt_stack_shrink_loop_197f:
  6816 0000505A 4883F900                	cmp rcx, 0
  6817 0000505E 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_197f
  6818 00005060 BF11000000              	mov rdi, 1 + (8 * 2)
  6819 00005065 E864CE0000              	call malloc
  6820 0000506A C60021                  	mov byte [rax], T_pair
  6821 0000506D 488B1E                  	mov rbx, qword [rsi]
  6822 00005070 48895801                	mov SOB_PAIR_CAR(rax), rbx
  6823 00005074 4C894009                	mov SOB_PAIR_CDR(rax), r8
  6824 00005078 4883C6F8                	add rsi, -8
  6825 0000507C 4883E901                	sub rcx, 1
  6826 00005080 4989C0                  	mov r8, rax
  6827 00005083 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_197f
  6828                                  
  6829                                          	.L_lambda_opt_stack_shrink_loop_exit_197f:
  6830 00005085 4C8902                  	mov qword [rdx], r8
  6831 00005088 4883EA08                	sub rdx, 8 * 1
  6832 0000508C 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
  6833                                  
  6834 00005091 B900000000                      	mov rcx, 0 
  6835                                  
  6836                                          	.L_lambda_opt_stack_shrink_loop_1980:
  6837 00005096 4883F900                	cmp rcx, 0
  6838 0000509A 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1980
  6839 0000509C 488B06                  	mov rax, qword [rsi]
  6840 0000509F 488902                  	mov qword [rdx], rax
  6841 000050A2 488D76F8                	lea rsi, [rsi - 8]
  6842 000050A6 4883C2F8                	add rdx, -8
  6843 000050AA 4883C1FF                	add rcx, -1
  6844 000050AE EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1980
  6845                                  
  6846                                          	.L_lambda_opt_stack_shrink_loop_exit_1980:
  6847                                  
  6848 000050B0 48C70201000000                  	mov qword [rdx], 1 + 0
  6849 000050B7 4883C6F8                	add rsi, -8
  6850 000050BB 4883C2F8                	add rdx, -8
  6851 000050BF 488B06                  	mov rax, qword [rsi]
  6852 000050C2 488902                  	mov qword [rdx], rax
  6853 000050C5 4883C2F8                	add rdx, -8
  6854 000050C9 488D76F8                	lea rsi, [rsi - 8]
  6855 000050CD 488B06                  	mov rax, qword [rsi]
  6856 000050D0 488902                  	mov qword [rdx], rax
  6857 000050D3 4889D4                  	mov rsp, rdx
  6858                                  	.L_lambda_opt_stack_adjusted_0880:
  6859 000050D6 C8000000                	enter 0, 0
  6860 000050DA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6861 000050DE 50                      	push rax
  6862 000050DF 6A01                    	push 1
  6863 000050E1 488B0425[00000000]      	mov rax, qword [free_var_0]
  6864                                  	assert_closure(rax)
    42 000050E9 803805              <1>  cmp byte [%1], %2
    43 000050EC 0F85D0E50000        <1>  jne L_error_incorrect_type
  6865 000050F2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6866 000050F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6867                                  
  6868 000050F8 483D[02000000]                  	cmp rax, sob_boolean_false
  6869                                  
  6870 000050FE 740F                            	je .L_if_else_47d2
  6871 00005100 48B8-                   	mov rax,L_constants + 1
  6871 00005102 [0100000000000000] 
  6872                                  
  6873 0000510A E9AD000000                      	jmp .L_if_end_47d2
  6874                                  
  6875                                          	.L_if_else_47d2:
  6876 0000510F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6877 00005113 50                      	push rax
  6878 00005114 6A01                    	push 1
  6879 00005116 488B0425[88000000]      	mov rax, qword [free_var_17]
  6880                                  	assert_closure(rax)
    42 0000511E 803805              <1>  cmp byte [%1], %2
    43 00005121 0F859BE50000        <1>  jne L_error_incorrect_type
  6881 00005127 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6882 0000512A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6883 0000512D 50                      	push rax
  6884 0000512E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6885 00005132 50                      	push rax
  6886 00005133 6A01                    	push 1
  6887 00005135 488B0425[80000000]      	mov rax, qword [free_var_16]
  6888                                  	assert_closure(rax)
    42 0000513D 803805              <1>  cmp byte [%1], %2
    43 00005140 0F857CE50000        <1>  jne L_error_incorrect_type
  6889 00005146 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6890 00005149 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6891 0000514C 50                      	push rax
  6892 0000514D 6A02                    	push 2
  6893 0000514F 488B4510                	mov rax, qword [rbp + 8 * 2]
  6894                                  
  6895 00005153 488B00                                            	mov rax, qword[rax + 8 * 0]
  6896                                  
  6897 00005156 488B00                                            	mov rax, qword[rax + 8 * 0]
  6898 00005159 488B00                  	mov rax, qword [rax]
  6899                                  .L_applic_TC_3ff4:
  6900 0000515C 803805                  	cmp byte [rax], T_closure
  6901 0000515F 0F851EDD0000            	jne L_code_ptr_error
  6902 00005165 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6903 00005169 53                      	push rbx
  6904 0000516A FF7508                  	push qword [rbp + 8]
  6905 0000516D FF7500                  	push qword [rbp]
  6906 00005170 488B4D18                	mov rcx, [rbp + 3 * 8]
  6907 00005174 488B542418              	mov rdx, [rsp + 3 * 8]
  6908 00005179 488D7204                	lea rsi, [rdx + 4]
  6909 0000517D 4C8D4EFF                	lea r9, [rsi - 1]
  6910 00005181 488D7903                	lea rdi, [rcx + 3]
  6911 00005185 4D31C0                  	xor r8, r8
  6912                                  .L_tc_recycle_frame_loop_3ff4:
  6913 00005188 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6914 0000518C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6915 00005191 49FFC9                  	dec r9
  6916 00005194 4D31C0                  	xor r8, r8
  6917 00005197 48FFCF                  	dec rdi
  6918 0000519A 48FFCE                  	dec rsi
  6919 0000519D 4883FE00                	cmp rsi, 0
  6920 000051A1 75E5                    	jne .L_tc_recycle_frame_loop_3ff4
  6921                                  .L_tc_recycle_frame_done_3ff4:
  6922                                  ;this pop rbp in sot to the right place
  6923 000051A3 4989C9                  	mov r9, rcx
  6924 000051A6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6925 000051AE 4C01CC                  	add rsp, r9
  6926 000051B1 5D                      	pop rbp
  6927 000051B2 488B4D00                	mov rcx, qword [rbp]
  6928 000051B6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6929 000051BA FFE3                    	jmp rbx
  6930                                  
  6931                                          	.L_if_end_47d2:
  6932 000051BC C9                      	leave
  6933 000051BD C21800                  	ret 8 * (2 + 1)
  6934                                  .L_lambda_opt_end_0880:	; new closure is in rax
  6935 000051C0 C9                      	leave
  6936 000051C1 C22000                  	ret 8 * (2 + 2)
  6937                                  .L_lambda_simple_end_3756:	; new closure is in rax
  6938                                  	assert_closure(rax)
    42 000051C4 803805              <1>  cmp byte [%1], %2
    43 000051C7 0F85F5E40000        <1>  jne L_error_incorrect_type
  6939 000051CD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6940 000051D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6941 000051D3 48890425[F0020000]      	mov qword [free_var_94], rax
  6942 000051DB 48B8-                   	mov rax, sob_void
  6942 000051DD [0000000000000000] 
  6943                                  
  6944 000051E5 4889C7                  	mov rdi, rax
  6945 000051E8 E8F2CC0000              	call print_sexpr_if_not_void
  6946                                  
  6947 000051ED 48B8-                   	mov rax,L_constants + 23
  6947 000051EF [1700000000000000] 
  6948 000051F7 50                      	push rax
  6949 000051F8 6A01                    	push 1
  6950 000051FA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6951 000051FF E8CACC0000              	call malloc
  6952 00005204 50                      	push rax
  6953 00005205 BF00000000              	mov rdi, 8 * 0	; new rib
  6954 0000520A E8BFCC0000              	call malloc
  6955 0000520F 50                      	push rax
  6956 00005210 BF08000000              	mov rdi, 8 * 1	; extended env
  6957 00005215 E8B4CC0000              	call malloc
  6958 0000521A 488B7D10                	mov rdi, ENV
  6959 0000521E BE00000000              	mov rsi, 0
  6960 00005223 BA01000000              	mov rdx, 1
  6961                                  .L_lambda_simple_env_loop_3759:	; ext_env[i + 1] <-- env[i]
  6962 00005228 4883FE00                	cmp rsi, 0
  6963 0000522C 7410                    	je .L_lambda_simple_env_end_3759
  6964 0000522E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6965 00005232 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6966 00005236 48FFC6                  	inc rsi
  6967 00005239 48FFC2                  	inc rdx
  6968 0000523C EBEA                    	jmp .L_lambda_simple_env_loop_3759
  6969                                  .L_lambda_simple_env_end_3759:
  6970 0000523E 5B                      	pop rbx
  6971 0000523F BE00000000              	mov rsi, 0
  6972                                  .L_lambda_simple_params_loop_3759:	; copy params
  6973 00005244 4883FE00                	cmp rsi, 0
  6974 00005248 740E                    	je .L_lambda_simple_params_end_3759
  6975 0000524A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6976 0000524F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6977 00005253 48FFC6                  	inc rsi
  6978 00005256 EBEC                    	jmp .L_lambda_simple_params_loop_3759
  6979                                  .L_lambda_simple_params_end_3759:
  6980 00005258 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6981 0000525B 4889C3                  	mov rbx, rax
  6982 0000525E 58                      	pop rax
  6983 0000525F C60005                  	mov byte [rax], T_closure
  6984 00005262 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6985 00005266 48C74009[73520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3759
  6986 0000526E E904040000              	jmp .L_lambda_simple_end_3759
  6987                                  .L_lambda_simple_code_3759:	; lambda-simple body
  6988 00005273 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6989 00005279 740B                    	je .L_lambda_simple_arity_check_ok_3759
  6990 0000527B FF742410                	push qword [rsp + 8 * 2]
  6991 0000527F 6A01                    	push 1
  6992 00005281 E901CC0000              	jmp L_error_incorrect_arity_simple
  6993                                  .L_lambda_simple_arity_check_ok_3759:
  6994 00005286 C8000000                	enter 0, 0
  6995 0000528A BF08000000              	mov rdi, 8
  6996 0000528F E83ACC0000              	call malloc
  6997 00005294 488B5D20                	mov rbx, PARAM(0)
  6998 00005298 488918                  	mov qword [rax], rbx
  6999 0000529B 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  7000                                  
  7001 0000529F 48B8-                            	mov rax, sob_void
  7001 000052A1 [0000000000000000] 
  7002                                  
  7003 000052A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7004 000052AE E81BCC0000              	call malloc
  7005 000052B3 50                      	push rax
  7006 000052B4 BF08000000              	mov rdi, 8 * 1	; new rib
  7007 000052B9 E810CC0000              	call malloc
  7008 000052BE 50                      	push rax
  7009 000052BF BF10000000              	mov rdi, 8 * 2	; extended env
  7010 000052C4 E805CC0000              	call malloc
  7011 000052C9 488B7D10                	mov rdi, ENV
  7012 000052CD BE00000000              	mov rsi, 0
  7013 000052D2 BA01000000              	mov rdx, 1
  7014                                  .L_lambda_simple_env_loop_375a:	; ext_env[i + 1] <-- env[i]
  7015 000052D7 4883FE01                	cmp rsi, 1
  7016 000052DB 7410                    	je .L_lambda_simple_env_end_375a
  7017 000052DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7018 000052E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7019 000052E5 48FFC6                  	inc rsi
  7020 000052E8 48FFC2                  	inc rdx
  7021 000052EB EBEA                    	jmp .L_lambda_simple_env_loop_375a
  7022                                  .L_lambda_simple_env_end_375a:
  7023 000052ED 5B                      	pop rbx
  7024 000052EE BE00000000              	mov rsi, 0
  7025                                  .L_lambda_simple_params_loop_375a:	; copy params
  7026 000052F3 4883FE01                	cmp rsi, 1
  7027 000052F7 740E                    	je .L_lambda_simple_params_end_375a
  7028 000052F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7029 000052FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7030 00005302 48FFC6                  	inc rsi
  7031 00005305 EBEC                    	jmp .L_lambda_simple_params_loop_375a
  7032                                  .L_lambda_simple_params_end_375a:
  7033 00005307 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7034 0000530A 4889C3                  	mov rbx, rax
  7035 0000530D 58                      	pop rax
  7036 0000530E C60005                  	mov byte [rax], T_closure
  7037 00005311 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7038 00005315 48C74009[22530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_375a
  7039 0000531D E93B010000              	jmp .L_lambda_simple_end_375a
  7040                                  .L_lambda_simple_code_375a:	; lambda-simple body
  7041 00005322 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7042 00005328 740B                    	je .L_lambda_simple_arity_check_ok_375a
  7043 0000532A FF742410                	push qword [rsp + 8 * 2]
  7044 0000532E 6A03                    	push 3
  7045 00005330 E952CB0000              	jmp L_error_incorrect_arity_simple
  7046                                  .L_lambda_simple_arity_check_ok_375a:
  7047 00005335 C8000000                	enter 0, 0
  7048 00005339 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7049 0000533D 50                      	push rax
  7050 0000533E 488B0425[00000000]      	mov rax, qword [free_var_0]
  7051 00005346 50                      	push rax
  7052 00005347 6A02                    	push 2
  7053 00005349 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7054                                  	assert_closure(rax)
    42 00005351 803805              <1>  cmp byte [%1], %2
    43 00005354 0F8568E30000        <1>  jne L_error_incorrect_type
  7055 0000535A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7056 0000535D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7057                                  
  7058 00005360 483D[02000000]                  	cmp rax, sob_boolean_false
  7059                                  
  7060 00005366 7409                            	je .L_if_else_47d3
  7061 00005368 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7062                                  
  7063 0000536C E9E8000000                      	jmp .L_if_end_47d3
  7064                                  
  7065                                          	.L_if_else_47d3:
  7066 00005371 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7067 00005375 50                      	push rax
  7068 00005376 488B0425[88000000]      	mov rax, qword [free_var_17]
  7069 0000537E 50                      	push rax
  7070 0000537F 6A02                    	push 2
  7071 00005381 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7072                                  	assert_closure(rax)
    42 00005389 803805              <1>  cmp byte [%1], %2
    43 0000538C 0F8530E30000        <1>  jne L_error_incorrect_type
  7073 00005392 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7074 00005395 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7075 00005398 50                      	push rax
  7076 00005399 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7077 0000539D 50                      	push rax
  7078 0000539E 488B0425[80000000]      	mov rax, qword [free_var_16]
  7079 000053A6 50                      	push rax
  7080 000053A7 6A02                    	push 2
  7081 000053A9 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7082                                  	assert_closure(rax)
    42 000053B1 803805              <1>  cmp byte [%1], %2
    43 000053B4 0F8508E30000        <1>  jne L_error_incorrect_type
  7083 000053BA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7084 000053BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7085 000053C0 50                      	push rax
  7086 000053C1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7087 000053C5 50                      	push rax
  7088 000053C6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7089 000053CA 50                      	push rax
  7090 000053CB 6A03                    	push 3
  7091 000053CD 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7092                                  	assert_closure(rax)
    42 000053D5 803805              <1>  cmp byte [%1], %2
    43 000053D8 0F85E4E20000        <1>  jne L_error_incorrect_type
  7093 000053DE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7094 000053E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7095 000053E4 50                      	push rax
  7096 000053E5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7097 000053E9 50                      	push rax
  7098 000053EA 6A03                    	push 3
  7099 000053EC 488B4510                	mov rax, qword [rbp + 8 * 2]
  7100                                  
  7101 000053F0 488B00                                            	mov rax, qword[rax + 8 * 0]
  7102                                  
  7103 000053F3 488B00                                            	mov rax, qword[rax + 8 * 0]
  7104 000053F6 488B00                  	mov rax, qword [rax]
  7105                                  .L_applic_TC_3ff5:
  7106 000053F9 803805                  	cmp byte [rax], T_closure
  7107 000053FC 0F8581DA0000            	jne L_code_ptr_error
  7108 00005402 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7109 00005406 53                      	push rbx
  7110 00005407 FF7508                  	push qword [rbp + 8]
  7111 0000540A FF7500                  	push qword [rbp]
  7112 0000540D 488B4D18                	mov rcx, [rbp + 3 * 8]
  7113 00005411 488B542418              	mov rdx, [rsp + 3 * 8]
  7114 00005416 488D7204                	lea rsi, [rdx + 4]
  7115 0000541A 4C8D4EFF                	lea r9, [rsi - 1]
  7116 0000541E 488D7903                	lea rdi, [rcx + 3]
  7117 00005422 4D31C0                  	xor r8, r8
  7118                                  .L_tc_recycle_frame_loop_3ff5:
  7119 00005425 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7120 00005429 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7121 0000542E 49FFC9                  	dec r9
  7122 00005431 4D31C0                  	xor r8, r8
  7123 00005434 48FFCF                  	dec rdi
  7124 00005437 48FFCE                  	dec rsi
  7125 0000543A 4883FE00                	cmp rsi, 0
  7126 0000543E 75E5                    	jne .L_tc_recycle_frame_loop_3ff5
  7127                                  .L_tc_recycle_frame_done_3ff5:
  7128                                  ;this pop rbp in sot to the right place
  7129 00005440 4989C9                  	mov r9, rcx
  7130 00005443 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7131 0000544B 4C01CC                  	add rsp, r9
  7132 0000544E 5D                      	pop rbp
  7133 0000544F 488B4D00                	mov rcx, qword [rbp]
  7134 00005453 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7135 00005457 FFE3                    	jmp rbx
  7136                                  
  7137                                          	.L_if_end_47d3:
  7138 00005459 C9                      	leave
  7139 0000545A C22800                  	ret 8 * (2 + 3)
  7140                                  .L_lambda_simple_end_375a:	; new closure is in rax
  7141 0000545D 50                      	push rax
  7142 0000545E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7143 00005462 8F00                    	pop qword [rax]
  7144 00005464 48B8-                   	mov rax, sob_void
  7144 00005466 [0000000000000000] 
  7145                                  
  7146 0000546E BF11000000              	mov rdi, (1 + 8 + 8)
  7147 00005473 E856CA0000              	call malloc
  7148 00005478 50                      	push rax
  7149 00005479 BF08000000              	mov rdi, 8 * 1
  7150 0000547E E84BCA0000              	call malloc
  7151 00005483 50                      	push rax
  7152 00005484 BF10000000              	mov rdi, 8 * 2
  7153 00005489 E840CA0000              	call malloc
  7154 0000548E 488B7D10                	mov rdi, ENV
  7155 00005492 4831F6                  	xor rsi, rsi
  7156 00005495 4831D2                  	xor rdx, rdx
  7157 00005498 48FFC2                  	inc rdx
  7158                                  	.L_lambda_opt_env_loop_0881:
  7159                                  
  7160 0000549B 4883FE01                        	cmp rsi, 1
  7161                                  
  7162 0000549F 7412                            	je .L_lambda_opt_env_end_0881
  7163 000054A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7164 000054A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7165 000054A9 4883C201                	add rdx, 1
  7166 000054AD 4883C601                	add rsi, 1
  7167 000054B1 EBE8                    	jmp .L_lambda_opt_env_loop_0881
  7168                                  
  7169                                          	.L_lambda_opt_env_end_0881:
  7170 000054B3 5B                      	pop rbx
  7171 000054B4 4831F6                  	xor rsi, rsi
  7172                                  	.L_lambda_opt_params_loop_0881:
  7173                                  
  7174 000054B7 4883FE01                        	cmp rsi, 1
  7175                                  
  7176 000054BB 740F                            	je .L_lambda_opt_params_end_0881
  7177 000054BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7178 000054C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7179 000054C6 4883C601                	add rsi, 1
  7180 000054CA EBEB                    	jmp .L_lambda_opt_params_loop_0881
  7181                                  
  7182                                          	.L_lambda_opt_params_end_0881:
  7183 000054CC 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  7184 000054CF 4889C3                  	mov rbx, rax
  7185 000054D2 58                      	pop rax
  7186 000054D3 C60005                  	mov byte [rax], T_closure
  7187 000054D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7188 000054DA 48C74009[E7540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0881
  7189                                  
  7190 000054E2 E98C010000                      	jmp .L_lambda_opt_end_0881
  7191                                  
  7192                                          	.L_lambda_opt_code_0881:
  7193                                  
  7194 000054E7 48837C241002                    	cmp qword [rsp + 8 * 2], 2
  7195                                  
  7196 000054ED 740D                            	je .L_lambda_opt_arity_check_exact_0881  ;same num_of_args
  7197                                  
  7198 000054EF 7F65                            	jg .L_lambda_opt_arity_check_more_0881  ;greater num_of_args
  7199 000054F1 FF742410                	push qword [rsp + 8 * 2]
  7200 000054F5 6A02                    	push 2
  7201 000054F7 E99FC90000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  7202                                  .L_lambda_opt_arity_check_exact_0881:
  7203 000054FC 4883EC08                	sub rsp, 8 * 1
  7204 00005500 488D7F10                	lea rdi, [rdi + (8 * 2)]
  7205 00005504 4889E7                  	mov rdi, rsp 
  7206 00005507 488B4708                	mov rax, qword [rdi + 8]
  7207 0000550B 488907                  	mov qword [rdi], rax
  7208 0000550E 488D7F08                	lea rdi, [rdi + 8]
  7209 00005512 488B4708                	mov rax, qword [rdi + 8]
  7210 00005516 488907                  	mov qword [rdi], rax
  7211 00005519 488D7F08                	lea rdi, [rdi + 8]
  7212 0000551D 488B4708                	mov rax, qword [rdi + 8]
  7213 00005521 4889C1                  	mov rcx, rax
  7214 00005524 4883C001                	add rax, 1
  7215 00005528 488907                  	mov qword [rdi], rax
  7216 0000552B 488D7F08                	lea rdi, [rdi + 8]
  7217                                  	.L_lambda_opt_stack_shrink_loop_1981:
  7218 0000552F 4883F900                	cmp rcx, 0
  7219 00005533 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1981
  7220 00005535 4883E901                	sub rcx, 1
  7221 00005539 488D4010                	lea rax, [rax + (8 * 2)]
  7222 0000553D 488B4708                	mov rax, qword [rdi + 8]
  7223 00005541 488907                  	mov qword [rdi], rax
  7224 00005544 488D7F08                	lea rdi, [rdi + 8]
  7225 00005548 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1981
  7226                                  
  7227                                          	.L_lambda_opt_stack_shrink_loop_exit_1981:
  7228 0000554A 48C707[01000000]        	mov qword [rdi], sob_nil
  7229 00005551 E997000000              	jmp .L_lambda_opt_stack_adjusted_0881
  7230                                  
  7231                                          	.L_lambda_opt_arity_check_more_0881:
  7232 00005556 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  7233 0000555B 488D4EFE                	lea rcx, [rsi - 2]
  7234 0000555F 49B8-                   	mov r8, sob_nil
  7234 00005561 [0100000000000000] 
  7235 00005569 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  7236 0000556E 4889F2                  	mov rdx, rsi
  7237                                  	.L_lambda_opt_stack_shrink_loop_1982:
  7238 00005571 4883F900                	cmp rcx, 0
  7239 00005575 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1982
  7240 00005577 BF11000000              	mov rdi, 1 + (8 * 2)
  7241 0000557C E84DC90000              	call malloc
  7242 00005581 C60021                  	mov byte [rax], T_pair
  7243 00005584 488B1E                  	mov rbx, qword [rsi]
  7244 00005587 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7245 0000558B 4C894009                	mov SOB_PAIR_CDR(rax), r8
  7246 0000558F 4883C6F8                	add rsi, -8
  7247 00005593 4883E901                	sub rcx, 1
  7248 00005597 4989C0                  	mov r8, rax
  7249 0000559A EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1982
  7250                                  
  7251                                          	.L_lambda_opt_stack_shrink_loop_exit_1982:
  7252 0000559C 4C8902                  	mov qword [rdx], r8
  7253 0000559F 4883EA08                	sub rdx, 8 * 1
  7254 000055A3 488D742420              	lea rsi, [rsp + (8 * (2 + 2))]
  7255                                  
  7256 000055A8 B902000000                      	mov rcx, 2 
  7257                                  
  7258                                          	.L_lambda_opt_stack_shrink_loop_1983:
  7259 000055AD 4883F900                	cmp rcx, 0
  7260 000055B1 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1983
  7261 000055B3 488B06                  	mov rax, qword [rsi]
  7262 000055B6 488902                  	mov qword [rdx], rax
  7263 000055B9 488D76F8                	lea rsi, [rsi - 8]
  7264 000055BD 4883C2F8                	add rdx, -8
  7265 000055C1 4883C1FF                	add rcx, -1
  7266 000055C5 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1983
  7267                                  
  7268                                          	.L_lambda_opt_stack_shrink_loop_exit_1983:
  7269                                  
  7270 000055C7 48C70203000000                  	mov qword [rdx], 1 + 2
  7271 000055CE 4883C6F8                	add rsi, -8
  7272 000055D2 4883C2F8                	add rdx, -8
  7273 000055D6 488B06                  	mov rax, qword [rsi]
  7274 000055D9 488902                  	mov qword [rdx], rax
  7275 000055DC 4883C2F8                	add rdx, -8
  7276 000055E0 488D76F8                	lea rsi, [rsi - 8]
  7277 000055E4 488B06                  	mov rax, qword [rsi]
  7278 000055E7 488902                  	mov qword [rdx], rax
  7279 000055EA 4889D4                  	mov rsp, rdx
  7280                                  	.L_lambda_opt_stack_adjusted_0881:
  7281 000055ED C8000000                	enter 0, 0
  7282 000055F1 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7283 000055F5 50                      	push rax
  7284 000055F6 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7285 000055FA 50                      	push rax
  7286 000055FB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7287 000055FF 50                      	push rax
  7288 00005600 6A03                    	push 3
  7289 00005602 488B4510                	mov rax, qword [rbp + 8 * 2]
  7290                                  
  7291 00005606 488B00                                            	mov rax, qword[rax + 8 * 0]
  7292                                  
  7293 00005609 488B00                                            	mov rax, qword[rax + 8 * 0]
  7294 0000560C 488B00                  	mov rax, qword [rax]
  7295                                  .L_applic_TC_3ff6:
  7296 0000560F 803805                  	cmp byte [rax], T_closure
  7297 00005612 0F856BD80000            	jne L_code_ptr_error
  7298 00005618 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7299 0000561C 53                      	push rbx
  7300 0000561D FF7508                  	push qword [rbp + 8]
  7301 00005620 FF7500                  	push qword [rbp]
  7302 00005623 488B4D18                	mov rcx, [rbp + 3 * 8]
  7303 00005627 488B542418              	mov rdx, [rsp + 3 * 8]
  7304 0000562C 488D7204                	lea rsi, [rdx + 4]
  7305 00005630 4C8D4EFF                	lea r9, [rsi - 1]
  7306 00005634 488D7903                	lea rdi, [rcx + 3]
  7307 00005638 4D31C0                  	xor r8, r8
  7308                                  .L_tc_recycle_frame_loop_3ff6:
  7309 0000563B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7310 0000563F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7311 00005644 49FFC9                  	dec r9
  7312 00005647 4D31C0                  	xor r8, r8
  7313 0000564A 48FFCF                  	dec rdi
  7314 0000564D 48FFCE                  	dec rsi
  7315 00005650 4883FE00                	cmp rsi, 0
  7316 00005654 75E5                    	jne .L_tc_recycle_frame_loop_3ff6
  7317                                  .L_tc_recycle_frame_done_3ff6:
  7318                                  ;this pop rbp in sot to the right place
  7319 00005656 4989C9                  	mov r9, rcx
  7320 00005659 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7321 00005661 4C01CC                  	add rsp, r9
  7322 00005664 5D                      	pop rbp
  7323 00005665 488B4D00                	mov rcx, qword [rbp]
  7324 00005669 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7325 0000566D FFE3                    	jmp rbx
  7326 0000566F C9                      	leave
  7327 00005670 C22800                  	ret 8 * (2 + 3)
  7328                                  .L_lambda_opt_end_0881:	; new closure is in rax
  7329 00005673 C9                      	leave
  7330 00005674 C21800                  	ret 8 * (2 + 1)
  7331                                  .L_lambda_simple_end_3759:	; new closure is in rax
  7332                                  	assert_closure(rax)
    42 00005677 803805              <1>  cmp byte [%1], %2
    43 0000567A 0F8542E00000        <1>  jne L_error_incorrect_type
  7333 00005680 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7334 00005683 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7335 00005686 48890425[F8020000]      	mov qword [free_var_95], rax
  7336 0000568E 48B8-                   	mov rax, sob_void
  7336 00005690 [0000000000000000] 
  7337                                  
  7338 00005698 4889C7                  	mov rdi, rax
  7339 0000569B E83FC80000              	call print_sexpr_if_not_void
  7340                                  
  7341 000056A0 48B8-                   	mov rax,L_constants + 23
  7341 000056A2 [1700000000000000] 
  7342 000056AA 50                      	push rax
  7343 000056AB 6A01                    	push 1
  7344 000056AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7345 000056B2 E817C80000              	call malloc
  7346 000056B7 50                      	push rax
  7347 000056B8 BF00000000              	mov rdi, 8 * 0	; new rib
  7348 000056BD E80CC80000              	call malloc
  7349 000056C2 50                      	push rax
  7350 000056C3 BF08000000              	mov rdi, 8 * 1	; extended env
  7351 000056C8 E801C80000              	call malloc
  7352 000056CD 488B7D10                	mov rdi, ENV
  7353 000056D1 BE00000000              	mov rsi, 0
  7354 000056D6 BA01000000              	mov rdx, 1
  7355                                  .L_lambda_simple_env_loop_375b:	; ext_env[i + 1] <-- env[i]
  7356 000056DB 4883FE00                	cmp rsi, 0
  7357 000056DF 7410                    	je .L_lambda_simple_env_end_375b
  7358 000056E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7359 000056E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7360 000056E9 48FFC6                  	inc rsi
  7361 000056EC 48FFC2                  	inc rdx
  7362 000056EF EBEA                    	jmp .L_lambda_simple_env_loop_375b
  7363                                  .L_lambda_simple_env_end_375b:
  7364 000056F1 5B                      	pop rbx
  7365 000056F2 BE00000000              	mov rsi, 0
  7366                                  .L_lambda_simple_params_loop_375b:	; copy params
  7367 000056F7 4883FE00                	cmp rsi, 0
  7368 000056FB 740E                    	je .L_lambda_simple_params_end_375b
  7369 000056FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7370 00005702 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7371 00005706 48FFC6                  	inc rsi
  7372 00005709 EBEC                    	jmp .L_lambda_simple_params_loop_375b
  7373                                  .L_lambda_simple_params_end_375b:
  7374 0000570B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7375 0000570E 4889C3                  	mov rbx, rax
  7376 00005711 58                      	pop rax
  7377 00005712 C60005                  	mov byte [rax], T_closure
  7378 00005715 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7379 00005719 48C74009[26570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_375b
  7380 00005721 E943040000              	jmp .L_lambda_simple_end_375b
  7381                                  .L_lambda_simple_code_375b:	; lambda-simple body
  7382 00005726 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7383 0000572C 740B                    	je .L_lambda_simple_arity_check_ok_375b
  7384 0000572E FF742410                	push qword [rsp + 8 * 2]
  7385 00005732 6A01                    	push 1
  7386 00005734 E94EC70000              	jmp L_error_incorrect_arity_simple
  7387                                  .L_lambda_simple_arity_check_ok_375b:
  7388 00005739 C8000000                	enter 0, 0
  7389 0000573D BF08000000              	mov rdi, 8
  7390 00005742 E887C70000              	call malloc
  7391 00005747 488B5D20                	mov rbx, PARAM(0)
  7392 0000574B 488918                  	mov qword [rax], rbx
  7393 0000574E 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  7394                                  
  7395 00005752 48B8-                            	mov rax, sob_void
  7395 00005754 [0000000000000000] 
  7396                                  
  7397 0000575C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7398 00005761 E868C70000              	call malloc
  7399 00005766 50                      	push rax
  7400 00005767 BF08000000              	mov rdi, 8 * 1	; new rib
  7401 0000576C E85DC70000              	call malloc
  7402 00005771 50                      	push rax
  7403 00005772 BF10000000              	mov rdi, 8 * 2	; extended env
  7404 00005777 E852C70000              	call malloc
  7405 0000577C 488B7D10                	mov rdi, ENV
  7406 00005780 BE00000000              	mov rsi, 0
  7407 00005785 BA01000000              	mov rdx, 1
  7408                                  .L_lambda_simple_env_loop_375c:	; ext_env[i + 1] <-- env[i]
  7409 0000578A 4883FE01                	cmp rsi, 1
  7410 0000578E 7410                    	je .L_lambda_simple_env_end_375c
  7411 00005790 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7412 00005794 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7413 00005798 48FFC6                  	inc rsi
  7414 0000579B 48FFC2                  	inc rdx
  7415 0000579E EBEA                    	jmp .L_lambda_simple_env_loop_375c
  7416                                  .L_lambda_simple_env_end_375c:
  7417 000057A0 5B                      	pop rbx
  7418 000057A1 BE00000000              	mov rsi, 0
  7419                                  .L_lambda_simple_params_loop_375c:	; copy params
  7420 000057A6 4883FE01                	cmp rsi, 1
  7421 000057AA 740E                    	je .L_lambda_simple_params_end_375c
  7422 000057AC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7423 000057B1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7424 000057B5 48FFC6                  	inc rsi
  7425 000057B8 EBEC                    	jmp .L_lambda_simple_params_loop_375c
  7426                                  .L_lambda_simple_params_end_375c:
  7427 000057BA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7428 000057BD 4889C3                  	mov rbx, rax
  7429 000057C0 58                      	pop rax
  7430 000057C1 C60005                  	mov byte [rax], T_closure
  7431 000057C4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7432 000057C8 48C74009[D5570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_375c
  7433 000057D0 E97A010000              	jmp .L_lambda_simple_end_375c
  7434                                  .L_lambda_simple_code_375c:	; lambda-simple body
  7435 000057D5 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7436 000057DB 740B                    	je .L_lambda_simple_arity_check_ok_375c
  7437 000057DD FF742410                	push qword [rsp + 8 * 2]
  7438 000057E1 6A03                    	push 3
  7439 000057E3 E99FC60000              	jmp L_error_incorrect_arity_simple
  7440                                  .L_lambda_simple_arity_check_ok_375c:
  7441 000057E8 C8000000                	enter 0, 0
  7442 000057EC 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7443 000057F0 50                      	push rax
  7444 000057F1 488B0425[00000000]      	mov rax, qword [free_var_0]
  7445 000057F9 50                      	push rax
  7446 000057FA 6A02                    	push 2
  7447 000057FC 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7448                                  	assert_closure(rax)
    42 00005804 803805              <1>  cmp byte [%1], %2
    43 00005807 0F85B5DE0000        <1>  jne L_error_incorrect_type
  7449 0000580D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7450 00005810 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7451                                  
  7452 00005813 483D[02000000]                  	cmp rax, sob_boolean_false
  7453                                  
  7454 00005819 7409                            	je .L_if_else_47d4
  7455 0000581B 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7456                                  
  7457 0000581F E927010000                      	jmp .L_if_end_47d4
  7458                                  
  7459                                          	.L_if_else_47d4:
  7460 00005824 48B8-                   	mov rax,L_constants + 1
  7460 00005826 [0100000000000000] 
  7461 0000582E 50                      	push rax
  7462 0000582F 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7463 00005833 50                      	push rax
  7464 00005834 488B0425[88000000]      	mov rax, qword [free_var_17]
  7465 0000583C 50                      	push rax
  7466 0000583D 6A02                    	push 2
  7467 0000583F 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7468                                  	assert_closure(rax)
    42 00005847 803805              <1>  cmp byte [%1], %2
    43 0000584A 0F8572DE0000        <1>  jne L_error_incorrect_type
  7469 00005850 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7470 00005853 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7471 00005856 50                      	push rax
  7472 00005857 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7473 0000585B 50                      	push rax
  7474 0000585C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7475 00005860 50                      	push rax
  7476 00005861 6A03                    	push 3
  7477 00005863 488B4510                	mov rax, qword [rbp + 8 * 2]
  7478                                  
  7479 00005867 488B00                                            	mov rax, qword[rax + 8 * 0]
  7480                                  
  7481 0000586A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7482 0000586D 488B00                  	mov rax, qword [rax]
  7483                                  	assert_closure(rax)
    42 00005870 803805              <1>  cmp byte [%1], %2
    43 00005873 0F8549DE0000        <1>  jne L_error_incorrect_type
  7484 00005879 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7485 0000587C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7486 0000587F 50                      	push rax
  7487 00005880 6A02                    	push 2
  7488 00005882 488B0425[68000000]      	mov rax, qword [free_var_13]
  7489                                  	assert_closure(rax)
    42 0000588A 803805              <1>  cmp byte [%1], %2
    43 0000588D 0F852FDE0000        <1>  jne L_error_incorrect_type
  7490 00005893 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7491 00005896 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7492 00005899 50                      	push rax
  7493 0000589A 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7494 0000589E 50                      	push rax
  7495 0000589F 488B0425[80000000]      	mov rax, qword [free_var_16]
  7496 000058A7 50                      	push rax
  7497 000058A8 6A02                    	push 2
  7498 000058AA 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7499                                  	assert_closure(rax)
    42 000058B2 803805              <1>  cmp byte [%1], %2
    43 000058B5 0F8507DE0000        <1>  jne L_error_incorrect_type
  7500 000058BB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7501 000058BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7502 000058C1 50                      	push rax
  7503 000058C2 6A02                    	push 2
  7504 000058C4 488B0425[F0020000]      	mov rax, qword [free_var_94]
  7505                                  	assert_closure(rax)
    42 000058CC 803805              <1>  cmp byte [%1], %2
    43 000058CF 0F85EDDD0000        <1>  jne L_error_incorrect_type
  7506 000058D5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7507 000058D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7508 000058DB 50                      	push rax
  7509 000058DC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7510 000058E0 50                      	push rax
  7511 000058E1 6A02                    	push 2
  7512 000058E3 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7513                                  .L_applic_TC_3ff7:
  7514 000058EB 803805                  	cmp byte [rax], T_closure
  7515 000058EE 0F858FD50000            	jne L_code_ptr_error
  7516 000058F4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7517 000058F8 53                      	push rbx
  7518 000058F9 FF7508                  	push qword [rbp + 8]
  7519 000058FC FF7500                  	push qword [rbp]
  7520 000058FF 488B4D18                	mov rcx, [rbp + 3 * 8]
  7521 00005903 488B542418              	mov rdx, [rsp + 3 * 8]
  7522 00005908 488D7204                	lea rsi, [rdx + 4]
  7523 0000590C 4C8D4EFF                	lea r9, [rsi - 1]
  7524 00005910 488D7903                	lea rdi, [rcx + 3]
  7525 00005914 4D31C0                  	xor r8, r8
  7526                                  .L_tc_recycle_frame_loop_3ff7:
  7527 00005917 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7528 0000591B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7529 00005920 49FFC9                  	dec r9
  7530 00005923 4D31C0                  	xor r8, r8
  7531 00005926 48FFCF                  	dec rdi
  7532 00005929 48FFCE                  	dec rsi
  7533 0000592C 4883FE00                	cmp rsi, 0
  7534 00005930 75E5                    	jne .L_tc_recycle_frame_loop_3ff7
  7535                                  .L_tc_recycle_frame_done_3ff7:
  7536                                  ;this pop rbp in sot to the right place
  7537 00005932 4989C9                  	mov r9, rcx
  7538 00005935 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7539 0000593D 4C01CC                  	add rsp, r9
  7540 00005940 5D                      	pop rbp
  7541 00005941 488B4D00                	mov rcx, qword [rbp]
  7542 00005945 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7543 00005949 FFE3                    	jmp rbx
  7544                                  
  7545                                          	.L_if_end_47d4:
  7546 0000594B C9                      	leave
  7547 0000594C C22800                  	ret 8 * (2 + 3)
  7548                                  .L_lambda_simple_end_375c:	; new closure is in rax
  7549 0000594F 50                      	push rax
  7550 00005950 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7551 00005954 8F00                    	pop qword [rax]
  7552 00005956 48B8-                   	mov rax, sob_void
  7552 00005958 [0000000000000000] 
  7553                                  
  7554 00005960 BF11000000              	mov rdi, (1 + 8 + 8)
  7555 00005965 E864C50000              	call malloc
  7556 0000596A 50                      	push rax
  7557 0000596B BF08000000              	mov rdi, 8 * 1
  7558 00005970 E859C50000              	call malloc
  7559 00005975 50                      	push rax
  7560 00005976 BF10000000              	mov rdi, 8 * 2
  7561 0000597B E84EC50000              	call malloc
  7562 00005980 488B7D10                	mov rdi, ENV
  7563 00005984 4831F6                  	xor rsi, rsi
  7564 00005987 4831D2                  	xor rdx, rdx
  7565 0000598A 48FFC2                  	inc rdx
  7566                                  	.L_lambda_opt_env_loop_0882:
  7567                                  
  7568 0000598D 4883FE01                        	cmp rsi, 1
  7569                                  
  7570 00005991 7412                            	je .L_lambda_opt_env_end_0882
  7571 00005993 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7572 00005997 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7573 0000599B 4883C201                	add rdx, 1
  7574 0000599F 4883C601                	add rsi, 1
  7575 000059A3 EBE8                    	jmp .L_lambda_opt_env_loop_0882
  7576                                  
  7577                                          	.L_lambda_opt_env_end_0882:
  7578 000059A5 5B                      	pop rbx
  7579 000059A6 4831F6                  	xor rsi, rsi
  7580                                  	.L_lambda_opt_params_loop_0882:
  7581                                  
  7582 000059A9 4883FE01                        	cmp rsi, 1
  7583                                  
  7584 000059AD 740F                            	je .L_lambda_opt_params_end_0882
  7585 000059AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7586 000059B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7587 000059B8 4883C601                	add rsi, 1
  7588 000059BC EBEB                    	jmp .L_lambda_opt_params_loop_0882
  7589                                  
  7590                                          	.L_lambda_opt_params_end_0882:
  7591 000059BE 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  7592 000059C1 4889C3                  	mov rbx, rax
  7593 000059C4 58                      	pop rax
  7594 000059C5 C60005                  	mov byte [rax], T_closure
  7595 000059C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7596 000059CC 48C74009[D9590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0882
  7597                                  
  7598 000059D4 E98C010000                      	jmp .L_lambda_opt_end_0882
  7599                                  
  7600                                          	.L_lambda_opt_code_0882:
  7601                                  
  7602 000059D9 48837C241002                    	cmp qword [rsp + 8 * 2], 2
  7603                                  
  7604 000059DF 740D                            	je .L_lambda_opt_arity_check_exact_0882  ;same num_of_args
  7605                                  
  7606 000059E1 7F65                            	jg .L_lambda_opt_arity_check_more_0882  ;greater num_of_args
  7607 000059E3 FF742410                	push qword [rsp + 8 * 2]
  7608 000059E7 6A02                    	push 2
  7609 000059E9 E9ADC40000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  7610                                  .L_lambda_opt_arity_check_exact_0882:
  7611 000059EE 4883EC08                	sub rsp, 8 * 1
  7612 000059F2 488D7F10                	lea rdi, [rdi + (8 * 2)]
  7613 000059F6 4889E7                  	mov rdi, rsp 
  7614 000059F9 488B4708                	mov rax, qword [rdi + 8]
  7615 000059FD 488907                  	mov qword [rdi], rax
  7616 00005A00 488D7F08                	lea rdi, [rdi + 8]
  7617 00005A04 488B4708                	mov rax, qword [rdi + 8]
  7618 00005A08 488907                  	mov qword [rdi], rax
  7619 00005A0B 488D7F08                	lea rdi, [rdi + 8]
  7620 00005A0F 488B4708                	mov rax, qword [rdi + 8]
  7621 00005A13 4889C1                  	mov rcx, rax
  7622 00005A16 4883C001                	add rax, 1
  7623 00005A1A 488907                  	mov qword [rdi], rax
  7624 00005A1D 488D7F08                	lea rdi, [rdi + 8]
  7625                                  	.L_lambda_opt_stack_shrink_loop_1984:
  7626 00005A21 4883F900                	cmp rcx, 0
  7627 00005A25 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1984
  7628 00005A27 4883E901                	sub rcx, 1
  7629 00005A2B 488D4010                	lea rax, [rax + (8 * 2)]
  7630 00005A2F 488B4708                	mov rax, qword [rdi + 8]
  7631 00005A33 488907                  	mov qword [rdi], rax
  7632 00005A36 488D7F08                	lea rdi, [rdi + 8]
  7633 00005A3A EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1984
  7634                                  
  7635                                          	.L_lambda_opt_stack_shrink_loop_exit_1984:
  7636 00005A3C 48C707[01000000]        	mov qword [rdi], sob_nil
  7637 00005A43 E997000000              	jmp .L_lambda_opt_stack_adjusted_0882
  7638                                  
  7639                                          	.L_lambda_opt_arity_check_more_0882:
  7640 00005A48 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  7641 00005A4D 488D4EFE                	lea rcx, [rsi - 2]
  7642 00005A51 49B8-                   	mov r8, sob_nil
  7642 00005A53 [0100000000000000] 
  7643 00005A5B 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  7644 00005A60 4889F2                  	mov rdx, rsi
  7645                                  	.L_lambda_opt_stack_shrink_loop_1985:
  7646 00005A63 4883F900                	cmp rcx, 0
  7647 00005A67 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1985
  7648 00005A69 BF11000000              	mov rdi, 1 + (8 * 2)
  7649 00005A6E E85BC40000              	call malloc
  7650 00005A73 C60021                  	mov byte [rax], T_pair
  7651 00005A76 488B1E                  	mov rbx, qword [rsi]
  7652 00005A79 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7653 00005A7D 4C894009                	mov SOB_PAIR_CDR(rax), r8
  7654 00005A81 4883C6F8                	add rsi, -8
  7655 00005A85 4883E901                	sub rcx, 1
  7656 00005A89 4989C0                  	mov r8, rax
  7657 00005A8C EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1985
  7658                                  
  7659                                          	.L_lambda_opt_stack_shrink_loop_exit_1985:
  7660 00005A8E 4C8902                  	mov qword [rdx], r8
  7661 00005A91 4883EA08                	sub rdx, 8 * 1
  7662 00005A95 488D742420              	lea rsi, [rsp + (8 * (2 + 2))]
  7663                                  
  7664 00005A9A B902000000                      	mov rcx, 2 
  7665                                  
  7666                                          	.L_lambda_opt_stack_shrink_loop_1986:
  7667 00005A9F 4883F900                	cmp rcx, 0
  7668 00005AA3 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1986
  7669 00005AA5 488B06                  	mov rax, qword [rsi]
  7670 00005AA8 488902                  	mov qword [rdx], rax
  7671 00005AAB 488D76F8                	lea rsi, [rsi - 8]
  7672 00005AAF 4883C2F8                	add rdx, -8
  7673 00005AB3 4883C1FF                	add rcx, -1
  7674 00005AB7 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1986
  7675                                  
  7676                                          	.L_lambda_opt_stack_shrink_loop_exit_1986:
  7677                                  
  7678 00005AB9 48C70203000000                  	mov qword [rdx], 1 + 2
  7679 00005AC0 4883C6F8                	add rsi, -8
  7680 00005AC4 4883C2F8                	add rdx, -8
  7681 00005AC8 488B06                  	mov rax, qword [rsi]
  7682 00005ACB 488902                  	mov qword [rdx], rax
  7683 00005ACE 4883C2F8                	add rdx, -8
  7684 00005AD2 488D76F8                	lea rsi, [rsi - 8]
  7685 00005AD6 488B06                  	mov rax, qword [rsi]
  7686 00005AD9 488902                  	mov qword [rdx], rax
  7687 00005ADC 4889D4                  	mov rsp, rdx
  7688                                  	.L_lambda_opt_stack_adjusted_0882:
  7689 00005ADF C8000000                	enter 0, 0
  7690 00005AE3 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7691 00005AE7 50                      	push rax
  7692 00005AE8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7693 00005AEC 50                      	push rax
  7694 00005AED 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7695 00005AF1 50                      	push rax
  7696 00005AF2 6A03                    	push 3
  7697 00005AF4 488B4510                	mov rax, qword [rbp + 8 * 2]
  7698                                  
  7699 00005AF8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7700                                  
  7701 00005AFB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7702 00005AFE 488B00                  	mov rax, qword [rax]
  7703                                  .L_applic_TC_3ff8:
  7704 00005B01 803805                  	cmp byte [rax], T_closure
  7705 00005B04 0F8579D30000            	jne L_code_ptr_error
  7706 00005B0A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7707 00005B0E 53                      	push rbx
  7708 00005B0F FF7508                  	push qword [rbp + 8]
  7709 00005B12 FF7500                  	push qword [rbp]
  7710 00005B15 488B4D18                	mov rcx, [rbp + 3 * 8]
  7711 00005B19 488B542418              	mov rdx, [rsp + 3 * 8]
  7712 00005B1E 488D7204                	lea rsi, [rdx + 4]
  7713 00005B22 4C8D4EFF                	lea r9, [rsi - 1]
  7714 00005B26 488D7903                	lea rdi, [rcx + 3]
  7715 00005B2A 4D31C0                  	xor r8, r8
  7716                                  .L_tc_recycle_frame_loop_3ff8:
  7717 00005B2D 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7718 00005B31 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7719 00005B36 49FFC9                  	dec r9
  7720 00005B39 4D31C0                  	xor r8, r8
  7721 00005B3C 48FFCF                  	dec rdi
  7722 00005B3F 48FFCE                  	dec rsi
  7723 00005B42 4883FE00                	cmp rsi, 0
  7724 00005B46 75E5                    	jne .L_tc_recycle_frame_loop_3ff8
  7725                                  .L_tc_recycle_frame_done_3ff8:
  7726                                  ;this pop rbp in sot to the right place
  7727 00005B48 4989C9                  	mov r9, rcx
  7728 00005B4B 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7729 00005B53 4C01CC                  	add rsp, r9
  7730 00005B56 5D                      	pop rbp
  7731 00005B57 488B4D00                	mov rcx, qword [rbp]
  7732 00005B5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7733 00005B5F FFE3                    	jmp rbx
  7734 00005B61 C9                      	leave
  7735 00005B62 C22800                  	ret 8 * (2 + 3)
  7736                                  .L_lambda_opt_end_0882:	; new closure is in rax
  7737 00005B65 C9                      	leave
  7738 00005B66 C21800                  	ret 8 * (2 + 1)
  7739                                  .L_lambda_simple_end_375b:	; new closure is in rax
  7740                                  	assert_closure(rax)
    42 00005B69 803805              <1>  cmp byte [%1], %2
    43 00005B6C 0F8550DB0000        <1>  jne L_error_incorrect_type
  7741 00005B72 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7742 00005B75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7743 00005B78 48890425[00030000]      	mov qword [free_var_96], rax
  7744 00005B80 48B8-                   	mov rax, sob_void
  7744 00005B82 [0000000000000000] 
  7745                                  
  7746 00005B8A 4889C7                  	mov rdi, rax
  7747 00005B8D E84DC30000              	call print_sexpr_if_not_void
  7748                                  
  7749 00005B92 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7750 00005B97 E832C30000              	call malloc
  7751 00005B9C 50                      	push rax
  7752 00005B9D BF00000000              	mov rdi, 8 * 0	; new rib
  7753 00005BA2 E827C30000              	call malloc
  7754 00005BA7 50                      	push rax
  7755 00005BA8 BF08000000              	mov rdi, 8 * 1	; extended env
  7756 00005BAD E81CC30000              	call malloc
  7757 00005BB2 488B7D10                	mov rdi, ENV
  7758 00005BB6 BE00000000              	mov rsi, 0
  7759 00005BBB BA01000000              	mov rdx, 1
  7760                                  .L_lambda_simple_env_loop_375d:	; ext_env[i + 1] <-- env[i]
  7761 00005BC0 4883FE00                	cmp rsi, 0
  7762 00005BC4 7410                    	je .L_lambda_simple_env_end_375d
  7763 00005BC6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7764 00005BCA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7765 00005BCE 48FFC6                  	inc rsi
  7766 00005BD1 48FFC2                  	inc rdx
  7767 00005BD4 EBEA                    	jmp .L_lambda_simple_env_loop_375d
  7768                                  .L_lambda_simple_env_end_375d:
  7769 00005BD6 5B                      	pop rbx
  7770 00005BD7 BE00000000              	mov rsi, 0
  7771                                  .L_lambda_simple_params_loop_375d:	; copy params
  7772 00005BDC 4883FE00                	cmp rsi, 0
  7773 00005BE0 740E                    	je .L_lambda_simple_params_end_375d
  7774 00005BE2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7775 00005BE7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7776 00005BEB 48FFC6                  	inc rsi
  7777 00005BEE EBEC                    	jmp .L_lambda_simple_params_loop_375d
  7778                                  .L_lambda_simple_params_end_375d:
  7779 00005BF0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7780 00005BF3 4889C3                  	mov rbx, rax
  7781 00005BF6 58                      	pop rax
  7782 00005BF7 C60005                  	mov byte [rax], T_closure
  7783 00005BFA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7784 00005BFE 48C74009[0B5C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_375d
  7785 00005C06 E99B000000              	jmp .L_lambda_simple_end_375d
  7786                                  .L_lambda_simple_code_375d:	; lambda-simple body
  7787 00005C0B 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7788 00005C11 740B                    	je .L_lambda_simple_arity_check_ok_375d
  7789 00005C13 FF742410                	push qword [rsp + 8 * 2]
  7790 00005C17 6A00                    	push 0
  7791 00005C19 E969C20000              	jmp L_error_incorrect_arity_simple
  7792                                  .L_lambda_simple_arity_check_ok_375d:
  7793 00005C1E C8000000                	enter 0, 0
  7794 00005C22 48B8-                   	mov rax,L_constants + 68
  7794 00005C24 [4400000000000000] 
  7795 00005C2C 50                      	push rax
  7796 00005C2D 48B8-                   	mov rax,L_constants + 59
  7796 00005C2F [3B00000000000000] 
  7797 00005C37 50                      	push rax
  7798 00005C38 6A02                    	push 2
  7799 00005C3A 488B0425[30010000]      	mov rax, qword [free_var_38]
  7800                                  .L_applic_TC_3ff9:
  7801 00005C42 803805                  	cmp byte [rax], T_closure
  7802 00005C45 0F8538D20000            	jne L_code_ptr_error
  7803 00005C4B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7804 00005C4F 53                      	push rbx
  7805 00005C50 FF7508                  	push qword [rbp + 8]
  7806 00005C53 FF7500                  	push qword [rbp]
  7807 00005C56 488B4D18                	mov rcx, [rbp + 3 * 8]
  7808 00005C5A 488B542418              	mov rdx, [rsp + 3 * 8]
  7809 00005C5F 488D7204                	lea rsi, [rdx + 4]
  7810 00005C63 4C8D4EFF                	lea r9, [rsi - 1]
  7811 00005C67 488D7903                	lea rdi, [rcx + 3]
  7812 00005C6B 4D31C0                  	xor r8, r8
  7813                                  .L_tc_recycle_frame_loop_3ff9:
  7814 00005C6E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7815 00005C72 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7816 00005C77 49FFC9                  	dec r9
  7817 00005C7A 4D31C0                  	xor r8, r8
  7818 00005C7D 48FFCF                  	dec rdi
  7819 00005C80 48FFCE                  	dec rsi
  7820 00005C83 4883FE00                	cmp rsi, 0
  7821 00005C87 75E5                    	jne .L_tc_recycle_frame_loop_3ff9
  7822                                  .L_tc_recycle_frame_done_3ff9:
  7823                                  ;this pop rbp in sot to the right place
  7824 00005C89 4989C9                  	mov r9, rcx
  7825 00005C8C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7826 00005C94 4C01CC                  	add rsp, r9
  7827 00005C97 5D                      	pop rbp
  7828 00005C98 488B4D00                	mov rcx, qword [rbp]
  7829 00005C9C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7830 00005CA0 FFE3                    	jmp rbx
  7831 00005CA2 C9                      	leave
  7832 00005CA3 C21000                  	ret 8 * (2 + 0)
  7833                                  .L_lambda_simple_end_375d:	; new closure is in rax
  7834 00005CA6 50                      	push rax
  7835 00005CA7 6A01                    	push 1
  7836 00005CA9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7837 00005CAE E81BC20000              	call malloc
  7838 00005CB3 50                      	push rax
  7839 00005CB4 BF00000000              	mov rdi, 8 * 0	; new rib
  7840 00005CB9 E810C20000              	call malloc
  7841 00005CBE 50                      	push rax
  7842 00005CBF BF08000000              	mov rdi, 8 * 1	; extended env
  7843 00005CC4 E805C20000              	call malloc
  7844 00005CC9 488B7D10                	mov rdi, ENV
  7845 00005CCD BE00000000              	mov rsi, 0
  7846 00005CD2 BA01000000              	mov rdx, 1
  7847                                  .L_lambda_simple_env_loop_375e:	; ext_env[i + 1] <-- env[i]
  7848 00005CD7 4883FE00                	cmp rsi, 0
  7849 00005CDB 7410                    	je .L_lambda_simple_env_end_375e
  7850 00005CDD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7851 00005CE1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7852 00005CE5 48FFC6                  	inc rsi
  7853 00005CE8 48FFC2                  	inc rdx
  7854 00005CEB EBEA                    	jmp .L_lambda_simple_env_loop_375e
  7855                                  .L_lambda_simple_env_end_375e:
  7856 00005CED 5B                      	pop rbx
  7857 00005CEE BE00000000              	mov rsi, 0
  7858                                  .L_lambda_simple_params_loop_375e:	; copy params
  7859 00005CF3 4883FE00                	cmp rsi, 0
  7860 00005CF7 740E                    	je .L_lambda_simple_params_end_375e
  7861 00005CF9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7862 00005CFE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7863 00005D02 48FFC6                  	inc rsi
  7864 00005D05 EBEC                    	jmp .L_lambda_simple_params_loop_375e
  7865                                  .L_lambda_simple_params_end_375e:
  7866 00005D07 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7867 00005D0A 4889C3                  	mov rbx, rax
  7868 00005D0D 58                      	pop rax
  7869 00005D0E C60005                  	mov byte [rax], T_closure
  7870 00005D11 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7871 00005D15 48C74009[225D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_375e
  7872 00005D1D E902080000              	jmp .L_lambda_simple_end_375e
  7873                                  .L_lambda_simple_code_375e:	; lambda-simple body
  7874 00005D22 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7875 00005D28 740B                    	je .L_lambda_simple_arity_check_ok_375e
  7876 00005D2A FF742410                	push qword [rsp + 8 * 2]
  7877 00005D2E 6A01                    	push 1
  7878 00005D30 E952C10000              	jmp L_error_incorrect_arity_simple
  7879                                  .L_lambda_simple_arity_check_ok_375e:
  7880 00005D35 C8000000                	enter 0, 0
  7881 00005D39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7882 00005D3E E88BC10000              	call malloc
  7883 00005D43 50                      	push rax
  7884 00005D44 BF08000000              	mov rdi, 8 * 1	; new rib
  7885 00005D49 E880C10000              	call malloc
  7886 00005D4E 50                      	push rax
  7887 00005D4F BF10000000              	mov rdi, 8 * 2	; extended env
  7888 00005D54 E875C10000              	call malloc
  7889 00005D59 488B7D10                	mov rdi, ENV
  7890 00005D5D BE00000000              	mov rsi, 0
  7891 00005D62 BA01000000              	mov rdx, 1
  7892                                  .L_lambda_simple_env_loop_375f:	; ext_env[i + 1] <-- env[i]
  7893 00005D67 4883FE01                	cmp rsi, 1
  7894 00005D6B 7410                    	je .L_lambda_simple_env_end_375f
  7895 00005D6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7896 00005D71 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7897 00005D75 48FFC6                  	inc rsi
  7898 00005D78 48FFC2                  	inc rdx
  7899 00005D7B EBEA                    	jmp .L_lambda_simple_env_loop_375f
  7900                                  .L_lambda_simple_env_end_375f:
  7901 00005D7D 5B                      	pop rbx
  7902 00005D7E BE00000000              	mov rsi, 0
  7903                                  .L_lambda_simple_params_loop_375f:	; copy params
  7904 00005D83 4883FE01                	cmp rsi, 1
  7905 00005D87 740E                    	je .L_lambda_simple_params_end_375f
  7906 00005D89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7907 00005D8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7908 00005D92 48FFC6                  	inc rsi
  7909 00005D95 EBEC                    	jmp .L_lambda_simple_params_loop_375f
  7910                                  .L_lambda_simple_params_end_375f:
  7911 00005D97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7912 00005D9A 4889C3                  	mov rbx, rax
  7913 00005D9D 58                      	pop rax
  7914 00005D9E C60005                  	mov byte [rax], T_closure
  7915 00005DA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7916 00005DA5 48C74009[B25D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_375f
  7917 00005DAD E96C040000              	jmp .L_lambda_simple_end_375f
  7918                                  .L_lambda_simple_code_375f:	; lambda-simple body
  7919 00005DB2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7920 00005DB8 740B                    	je .L_lambda_simple_arity_check_ok_375f
  7921 00005DBA FF742410                	push qword [rsp + 8 * 2]
  7922 00005DBE 6A02                    	push 2
  7923 00005DC0 E9C2C00000              	jmp L_error_incorrect_arity_simple
  7924                                  .L_lambda_simple_arity_check_ok_375f:
  7925 00005DC5 C8000000                	enter 0, 0
  7926 00005DC9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7927 00005DCD 50                      	push rax
  7928 00005DCE 6A01                    	push 1
  7929 00005DD0 488B0425[48000000]      	mov rax, qword [free_var_9]
  7930                                  	assert_closure(rax)
    42 00005DD8 803805              <1>  cmp byte [%1], %2
    43 00005DDB 0F85E1D80000        <1>  jne L_error_incorrect_type
  7931 00005DE1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7932 00005DE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7933                                  
  7934 00005DE7 483D[02000000]                  	cmp rax, sob_boolean_false
  7935                                  
  7936 00005DED 0F84CA010000                    	je .L_if_else_47d5
  7937 00005DF3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7938 00005DF7 50                      	push rax
  7939 00005DF8 6A01                    	push 1
  7940 00005DFA 488B0425[48000000]      	mov rax, qword [free_var_9]
  7941                                  	assert_closure(rax)
    42 00005E02 803805              <1>  cmp byte [%1], %2
    43 00005E05 0F85B7D80000        <1>  jne L_error_incorrect_type
  7942 00005E0B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7943 00005E0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7944                                  
  7945 00005E11 483D[02000000]                  	cmp rax, sob_boolean_false
  7946                                  
  7947 00005E17 7479                            	je .L_if_else_47d9
  7948 00005E19 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7949 00005E1D 50                      	push rax
  7950 00005E1E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7951 00005E22 50                      	push rax
  7952 00005E23 6A02                    	push 2
  7953 00005E25 488B0425[10010000]      	mov rax, qword [free_var_34]
  7954                                  .L_applic_TC_4000:
  7955 00005E2D 803805                  	cmp byte [rax], T_closure
  7956 00005E30 0F854DD00000            	jne L_code_ptr_error
  7957 00005E36 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7958 00005E3A 53                      	push rbx
  7959 00005E3B FF7508                  	push qword [rbp + 8]
  7960 00005E3E FF7500                  	push qword [rbp]
  7961 00005E41 488B4D18                	mov rcx, [rbp + 3 * 8]
  7962 00005E45 488B542418              	mov rdx, [rsp + 3 * 8]
  7963 00005E4A 488D7204                	lea rsi, [rdx + 4]
  7964 00005E4E 4C8D4EFF                	lea r9, [rsi - 1]
  7965 00005E52 488D7903                	lea rdi, [rcx + 3]
  7966 00005E56 4D31C0                  	xor r8, r8
  7967                                  .L_tc_recycle_frame_loop_4000:
  7968 00005E59 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7969 00005E5D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7970 00005E62 49FFC9                  	dec r9
  7971 00005E65 4D31C0                  	xor r8, r8
  7972 00005E68 48FFCF                  	dec rdi
  7973 00005E6B 48FFCE                  	dec rsi
  7974 00005E6E 4883FE00                	cmp rsi, 0
  7975 00005E72 75E5                    	jne .L_tc_recycle_frame_loop_4000
  7976                                  .L_tc_recycle_frame_done_4000:
  7977                                  ;this pop rbp in sot to the right place
  7978 00005E74 4989C9                  	mov r9, rcx
  7979 00005E77 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7980 00005E7F 4C01CC                  	add rsp, r9
  7981 00005E82 5D                      	pop rbp
  7982 00005E83 488B4D00                	mov rcx, qword [rbp]
  7983 00005E87 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7984 00005E8B FFE3                    	jmp rbx
  7985                                  
  7986 00005E8D E926010000                      	jmp .L_if_end_47d9
  7987                                  
  7988                                          	.L_if_else_47d9:
  7989 00005E92 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7990 00005E96 50                      	push rax
  7991 00005E97 6A01                    	push 1
  7992 00005E99 488B0425[40000000]      	mov rax, qword [free_var_8]
  7993                                  	assert_closure(rax)
    42 00005EA1 803805              <1>  cmp byte [%1], %2
    43 00005EA4 0F8518D80000        <1>  jne L_error_incorrect_type
  7994 00005EAA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7995 00005EAD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7996                                  
  7997 00005EB0 483D[02000000]                  	cmp rax, sob_boolean_false
  7998                                  
  7999 00005EB6 0F8490000000                    	je .L_if_else_47da
  8000 00005EBC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8001 00005EC0 50                      	push rax
  8002 00005EC1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8003 00005EC5 50                      	push rax
  8004 00005EC6 6A01                    	push 1
  8005 00005EC8 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8006                                  	assert_closure(rax)
    42 00005ED0 803805              <1>  cmp byte [%1], %2
    43 00005ED3 0F85E9D70000        <1>  jne L_error_incorrect_type
  8007 00005ED9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8008 00005EDC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8009 00005EDF 50                      	push rax
  8010 00005EE0 6A02                    	push 2
  8011 00005EE2 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8012                                  .L_applic_TC_3fff:
  8013 00005EEA 803805                  	cmp byte [rax], T_closure
  8014 00005EED 0F8590CF0000            	jne L_code_ptr_error
  8015 00005EF3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8016 00005EF7 53                      	push rbx
  8017 00005EF8 FF7508                  	push qword [rbp + 8]
  8018 00005EFB FF7500                  	push qword [rbp]
  8019 00005EFE 488B4D18                	mov rcx, [rbp + 3 * 8]
  8020 00005F02 488B542418              	mov rdx, [rsp + 3 * 8]
  8021 00005F07 488D7204                	lea rsi, [rdx + 4]
  8022 00005F0B 4C8D4EFF                	lea r9, [rsi - 1]
  8023 00005F0F 488D7903                	lea rdi, [rcx + 3]
  8024 00005F13 4D31C0                  	xor r8, r8
  8025                                  .L_tc_recycle_frame_loop_3fff:
  8026 00005F16 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8027 00005F1A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8028 00005F1F 49FFC9                  	dec r9
  8029 00005F22 4D31C0                  	xor r8, r8
  8030 00005F25 48FFCF                  	dec rdi
  8031 00005F28 48FFCE                  	dec rsi
  8032 00005F2B 4883FE00                	cmp rsi, 0
  8033 00005F2F 75E5                    	jne .L_tc_recycle_frame_loop_3fff
  8034                                  .L_tc_recycle_frame_done_3fff:
  8035                                  ;this pop rbp in sot to the right place
  8036 00005F31 4989C9                  	mov r9, rcx
  8037 00005F34 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8038 00005F3C 4C01CC                  	add rsp, r9
  8039 00005F3F 5D                      	pop rbp
  8040 00005F40 488B4D00                	mov rcx, qword [rbp]
  8041 00005F44 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8042 00005F48 FFE3                    	jmp rbx
  8043                                  
  8044 00005F4A EB6C                            	jmp .L_if_end_47da
  8045                                  
  8046                                          	.L_if_else_47da:
  8047 00005F4C 6A00                    	push 0
  8048 00005F4E 488B4510                	mov rax, qword [rbp + 8 * 2]
  8049                                  
  8050 00005F52 488B00                                            	mov rax, qword[rax + 8 * 0]
  8051                                  
  8052 00005F55 488B00                                            	mov rax, qword[rax + 8 * 0]
  8053                                  .L_applic_TC_3ffe:
  8054 00005F58 803805                  	cmp byte [rax], T_closure
  8055 00005F5B 0F8522CF0000            	jne L_code_ptr_error
  8056 00005F61 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8057 00005F65 53                      	push rbx
  8058 00005F66 FF7508                  	push qword [rbp + 8]
  8059 00005F69 FF7500                  	push qword [rbp]
  8060 00005F6C 488B4D18                	mov rcx, [rbp + 3 * 8]
  8061 00005F70 488B542418              	mov rdx, [rsp + 3 * 8]
  8062 00005F75 488D7204                	lea rsi, [rdx + 4]
  8063 00005F79 4C8D4EFF                	lea r9, [rsi - 1]
  8064 00005F7D 488D7903                	lea rdi, [rcx + 3]
  8065 00005F81 4D31C0                  	xor r8, r8
  8066                                  .L_tc_recycle_frame_loop_3ffe:
  8067 00005F84 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8068 00005F88 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8069 00005F8D 49FFC9                  	dec r9
  8070 00005F90 4D31C0                  	xor r8, r8
  8071 00005F93 48FFCF                  	dec rdi
  8072 00005F96 48FFCE                  	dec rsi
  8073 00005F99 4883FE00                	cmp rsi, 0
  8074 00005F9D 75E5                    	jne .L_tc_recycle_frame_loop_3ffe
  8075                                  .L_tc_recycle_frame_done_3ffe:
  8076                                  ;this pop rbp in sot to the right place
  8077 00005F9F 4989C9                  	mov r9, rcx
  8078 00005FA2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8079 00005FAA 4C01CC                  	add rsp, r9
  8080 00005FAD 5D                      	pop rbp
  8081 00005FAE 488B4D00                	mov rcx, qword [rbp]
  8082 00005FB2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8083 00005FB6 FFE3                    	jmp rbx
  8084                                  
  8085                                          	.L_if_end_47da:
  8086                                  
  8087                                          	.L_if_end_47d9:
  8088                                  
  8089 00005FB8 E95D020000                      	jmp .L_if_end_47d5
  8090                                  
  8091                                          	.L_if_else_47d5:
  8092 00005FBD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8093 00005FC1 50                      	push rax
  8094 00005FC2 6A01                    	push 1
  8095 00005FC4 488B0425[40000000]      	mov rax, qword [free_var_8]
  8096                                  	assert_closure(rax)
    42 00005FCC 803805              <1>  cmp byte [%1], %2
    43 00005FCF 0F85EDD60000        <1>  jne L_error_incorrect_type
  8097 00005FD5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8098 00005FD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8099                                  
  8100 00005FDB 483D[02000000]                  	cmp rax, sob_boolean_false
  8101                                  
  8102 00005FE1 0F84C7010000                    	je .L_if_else_47d6
  8103 00005FE7 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8104 00005FEB 50                      	push rax
  8105 00005FEC 6A01                    	push 1
  8106 00005FEE 488B0425[48000000]      	mov rax, qword [free_var_9]
  8107                                  	assert_closure(rax)
    42 00005FF6 803805              <1>  cmp byte [%1], %2
    43 00005FF9 0F85C3D60000        <1>  jne L_error_incorrect_type
  8108 00005FFF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8109 00006002 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8110                                  
  8111 00006005 483D[02000000]                  	cmp rax, sob_boolean_false
  8112                                  
  8113 0000600B 0F8493000000                    	je .L_if_else_47d7
  8114 00006011 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8115 00006015 50                      	push rax
  8116 00006016 6A01                    	push 1
  8117 00006018 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8118                                  	assert_closure(rax)
    42 00006020 803805              <1>  cmp byte [%1], %2
    43 00006023 0F8599D60000        <1>  jne L_error_incorrect_type
  8119 00006029 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8120 0000602C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8121 0000602F 50                      	push rax
  8122 00006030 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8123 00006034 50                      	push rax
  8124 00006035 6A02                    	push 2
  8125 00006037 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8126                                  .L_applic_TC_3ffd:
  8127 0000603F 803805                  	cmp byte [rax], T_closure
  8128 00006042 0F853BCE0000            	jne L_code_ptr_error
  8129 00006048 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8130 0000604C 53                      	push rbx
  8131 0000604D FF7508                  	push qword [rbp + 8]
  8132 00006050 FF7500                  	push qword [rbp]
  8133 00006053 488B4D18                	mov rcx, [rbp + 3 * 8]
  8134 00006057 488B542418              	mov rdx, [rsp + 3 * 8]
  8135 0000605C 488D7204                	lea rsi, [rdx + 4]
  8136 00006060 4C8D4EFF                	lea r9, [rsi - 1]
  8137 00006064 488D7903                	lea rdi, [rcx + 3]
  8138 00006068 4D31C0                  	xor r8, r8
  8139                                  .L_tc_recycle_frame_loop_3ffd:
  8140 0000606B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8141 0000606F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8142 00006074 49FFC9                  	dec r9
  8143 00006077 4D31C0                  	xor r8, r8
  8144 0000607A 48FFCF                  	dec rdi
  8145 0000607D 48FFCE                  	dec rsi
  8146 00006080 4883FE00                	cmp rsi, 0
  8147 00006084 75E5                    	jne .L_tc_recycle_frame_loop_3ffd
  8148                                  .L_tc_recycle_frame_done_3ffd:
  8149                                  ;this pop rbp in sot to the right place
  8150 00006086 4989C9                  	mov r9, rcx
  8151 00006089 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8152 00006091 4C01CC                  	add rsp, r9
  8153 00006094 5D                      	pop rbp
  8154 00006095 488B4D00                	mov rcx, qword [rbp]
  8155 00006099 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8156 0000609D FFE3                    	jmp rbx
  8157                                  
  8158 0000609F E908010000                      	jmp .L_if_end_47d7
  8159                                  
  8160                                          	.L_if_else_47d7:
  8161 000060A4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8162 000060A8 50                      	push rax
  8163 000060A9 6A01                    	push 1
  8164 000060AB 488B0425[40000000]      	mov rax, qword [free_var_8]
  8165                                  	assert_closure(rax)
    42 000060B3 803805              <1>  cmp byte [%1], %2
    43 000060B6 0F8506D60000        <1>  jne L_error_incorrect_type
  8166 000060BC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8167 000060BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8168                                  
  8169 000060C2 483D[02000000]                  	cmp rax, sob_boolean_false
  8170                                  
  8171 000060C8 7476                            	je .L_if_else_47d8
  8172 000060CA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8173 000060CE 50                      	push rax
  8174 000060CF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8175 000060D3 50                      	push rax
  8176 000060D4 6A02                    	push 2
  8177 000060D6 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8178                                  .L_applic_TC_3ffc:
  8179 000060DE 803805                  	cmp byte [rax], T_closure
  8180 000060E1 0F859CCD0000            	jne L_code_ptr_error
  8181 000060E7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8182 000060EB 53                      	push rbx
  8183 000060EC FF7508                  	push qword [rbp + 8]
  8184 000060EF FF7500                  	push qword [rbp]
  8185 000060F2 488B4D18                	mov rcx, [rbp + 3 * 8]
  8186 000060F6 488B542418              	mov rdx, [rsp + 3 * 8]
  8187 000060FB 488D7204                	lea rsi, [rdx + 4]
  8188 000060FF 4C8D4EFF                	lea r9, [rsi - 1]
  8189 00006103 488D7903                	lea rdi, [rcx + 3]
  8190 00006107 4D31C0                  	xor r8, r8
  8191                                  .L_tc_recycle_frame_loop_3ffc:
  8192 0000610A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8193 0000610E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8194 00006113 49FFC9                  	dec r9
  8195 00006116 4D31C0                  	xor r8, r8
  8196 00006119 48FFCF                  	dec rdi
  8197 0000611C 48FFCE                  	dec rsi
  8198 0000611F 4883FE00                	cmp rsi, 0
  8199 00006123 75E5                    	jne .L_tc_recycle_frame_loop_3ffc
  8200                                  .L_tc_recycle_frame_done_3ffc:
  8201                                  ;this pop rbp in sot to the right place
  8202 00006125 4989C9                  	mov r9, rcx
  8203 00006128 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8204 00006130 4C01CC                  	add rsp, r9
  8205 00006133 5D                      	pop rbp
  8206 00006134 488B4D00                	mov rcx, qword [rbp]
  8207 00006138 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8208 0000613C FFE3                    	jmp rbx
  8209                                  
  8210 0000613E EB6C                            	jmp .L_if_end_47d8
  8211                                  
  8212                                          	.L_if_else_47d8:
  8213 00006140 6A00                    	push 0
  8214 00006142 488B4510                	mov rax, qword [rbp + 8 * 2]
  8215                                  
  8216 00006146 488B00                                            	mov rax, qword[rax + 8 * 0]
  8217                                  
  8218 00006149 488B00                                            	mov rax, qword[rax + 8 * 0]
  8219                                  .L_applic_TC_3ffb:
  8220 0000614C 803805                  	cmp byte [rax], T_closure
  8221 0000614F 0F852ECD0000            	jne L_code_ptr_error
  8222 00006155 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8223 00006159 53                      	push rbx
  8224 0000615A FF7508                  	push qword [rbp + 8]
  8225 0000615D FF7500                  	push qword [rbp]
  8226 00006160 488B4D18                	mov rcx, [rbp + 3 * 8]
  8227 00006164 488B542418              	mov rdx, [rsp + 3 * 8]
  8228 00006169 488D7204                	lea rsi, [rdx + 4]
  8229 0000616D 4C8D4EFF                	lea r9, [rsi - 1]
  8230 00006171 488D7903                	lea rdi, [rcx + 3]
  8231 00006175 4D31C0                  	xor r8, r8
  8232                                  .L_tc_recycle_frame_loop_3ffb:
  8233 00006178 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8234 0000617C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8235 00006181 49FFC9                  	dec r9
  8236 00006184 4D31C0                  	xor r8, r8
  8237 00006187 48FFCF                  	dec rdi
  8238 0000618A 48FFCE                  	dec rsi
  8239 0000618D 4883FE00                	cmp rsi, 0
  8240 00006191 75E5                    	jne .L_tc_recycle_frame_loop_3ffb
  8241                                  .L_tc_recycle_frame_done_3ffb:
  8242                                  ;this pop rbp in sot to the right place
  8243 00006193 4989C9                  	mov r9, rcx
  8244 00006196 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8245 0000619E 4C01CC                  	add rsp, r9
  8246 000061A1 5D                      	pop rbp
  8247 000061A2 488B4D00                	mov rcx, qword [rbp]
  8248 000061A6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8249 000061AA FFE3                    	jmp rbx
  8250                                  
  8251                                          	.L_if_end_47d8:
  8252                                  
  8253                                          	.L_if_end_47d7:
  8254                                  
  8255 000061AC EB6C                            	jmp .L_if_end_47d6
  8256                                  
  8257                                          	.L_if_else_47d6:
  8258 000061AE 6A00                    	push 0
  8259 000061B0 488B4510                	mov rax, qword [rbp + 8 * 2]
  8260                                  
  8261 000061B4 488B00                                            	mov rax, qword[rax + 8 * 0]
  8262                                  
  8263 000061B7 488B00                                            	mov rax, qword[rax + 8 * 0]
  8264                                  .L_applic_TC_3ffa:
  8265 000061BA 803805                  	cmp byte [rax], T_closure
  8266 000061BD 0F85C0CC0000            	jne L_code_ptr_error
  8267 000061C3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8268 000061C7 53                      	push rbx
  8269 000061C8 FF7508                  	push qword [rbp + 8]
  8270 000061CB FF7500                  	push qword [rbp]
  8271 000061CE 488B4D18                	mov rcx, [rbp + 3 * 8]
  8272 000061D2 488B542418              	mov rdx, [rsp + 3 * 8]
  8273 000061D7 488D7204                	lea rsi, [rdx + 4]
  8274 000061DB 4C8D4EFF                	lea r9, [rsi - 1]
  8275 000061DF 488D7903                	lea rdi, [rcx + 3]
  8276 000061E3 4D31C0                  	xor r8, r8
  8277                                  .L_tc_recycle_frame_loop_3ffa:
  8278 000061E6 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8279 000061EA 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8280 000061EF 49FFC9                  	dec r9
  8281 000061F2 4D31C0                  	xor r8, r8
  8282 000061F5 48FFCF                  	dec rdi
  8283 000061F8 48FFCE                  	dec rsi
  8284 000061FB 4883FE00                	cmp rsi, 0
  8285 000061FF 75E5                    	jne .L_tc_recycle_frame_loop_3ffa
  8286                                  .L_tc_recycle_frame_done_3ffa:
  8287                                  ;this pop rbp in sot to the right place
  8288 00006201 4989C9                  	mov r9, rcx
  8289 00006204 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8290 0000620C 4C01CC                  	add rsp, r9
  8291 0000620F 5D                      	pop rbp
  8292 00006210 488B4D00                	mov rcx, qword [rbp]
  8293 00006214 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8294 00006218 FFE3                    	jmp rbx
  8295                                  
  8296                                          	.L_if_end_47d6:
  8297                                  
  8298                                          	.L_if_end_47d5:
  8299 0000621A C9                      	leave
  8300 0000621B C22000                  	ret 8 * (2 + 2)
  8301                                  .L_lambda_simple_end_375f:	; new closure is in rax
  8302 0000621E 50                      	push rax
  8303 0000621F 6A01                    	push 1
  8304 00006221 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8305 00006226 E8A3BC0000              	call malloc
  8306 0000622B 50                      	push rax
  8307 0000622C BF08000000              	mov rdi, 8 * 1	; new rib
  8308 00006231 E898BC0000              	call malloc
  8309 00006236 50                      	push rax
  8310 00006237 BF10000000              	mov rdi, 8 * 2	; extended env
  8311 0000623C E88DBC0000              	call malloc
  8312 00006241 488B7D10                	mov rdi, ENV
  8313 00006245 BE00000000              	mov rsi, 0
  8314 0000624A BA01000000              	mov rdx, 1
  8315                                  .L_lambda_simple_env_loop_3760:	; ext_env[i + 1] <-- env[i]
  8316 0000624F 4883FE01                	cmp rsi, 1
  8317 00006253 7410                    	je .L_lambda_simple_env_end_3760
  8318 00006255 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8319 00006259 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8320 0000625D 48FFC6                  	inc rsi
  8321 00006260 48FFC2                  	inc rdx
  8322 00006263 EBEA                    	jmp .L_lambda_simple_env_loop_3760
  8323                                  .L_lambda_simple_env_end_3760:
  8324 00006265 5B                      	pop rbx
  8325 00006266 BE00000000              	mov rsi, 0
  8326                                  .L_lambda_simple_params_loop_3760:	; copy params
  8327 0000626B 4883FE01                	cmp rsi, 1
  8328 0000626F 740E                    	je .L_lambda_simple_params_end_3760
  8329 00006271 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8330 00006276 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8331 0000627A 48FFC6                  	inc rsi
  8332 0000627D EBEC                    	jmp .L_lambda_simple_params_loop_3760
  8333                                  .L_lambda_simple_params_end_3760:
  8334 0000627F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8335 00006282 4889C3                  	mov rbx, rax
  8336 00006285 58                      	pop rax
  8337 00006286 C60005                  	mov byte [rax], T_closure
  8338 00006289 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8339 0000628D 48C74009[9A620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3760
  8340 00006295 E926020000              	jmp .L_lambda_simple_end_3760
  8341                                  .L_lambda_simple_code_3760:	; lambda-simple body
  8342 0000629A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8343 000062A0 740B                    	je .L_lambda_simple_arity_check_ok_3760
  8344 000062A2 FF742410                	push qword [rsp + 8 * 2]
  8345 000062A6 6A01                    	push 1
  8346 000062A8 E9DABB0000              	jmp L_error_incorrect_arity_simple
  8347                                  .L_lambda_simple_arity_check_ok_3760:
  8348 000062AD C8000000                	enter 0, 0
  8349 000062B1 BF11000000              	mov rdi, (1 + 8 + 8)
  8350 000062B6 E813BC0000              	call malloc
  8351 000062BB 50                      	push rax
  8352 000062BC BF08000000              	mov rdi, 8 * 1
  8353 000062C1 E808BC0000              	call malloc
  8354 000062C6 50                      	push rax
  8355 000062C7 BF18000000              	mov rdi, 8 * 3
  8356 000062CC E8FDBB0000              	call malloc
  8357 000062D1 488B7D10                	mov rdi, ENV
  8358 000062D5 4831F6                  	xor rsi, rsi
  8359 000062D8 4831D2                  	xor rdx, rdx
  8360 000062DB 48FFC2                  	inc rdx
  8361                                  	.L_lambda_opt_env_loop_0883:
  8362                                  
  8363 000062DE 4883FE02                        	cmp rsi, 2
  8364                                  
  8365 000062E2 7412                            	je .L_lambda_opt_env_end_0883
  8366 000062E4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8367 000062E8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8368 000062EC 4883C201                	add rdx, 1
  8369 000062F0 4883C601                	add rsi, 1
  8370 000062F4 EBE8                    	jmp .L_lambda_opt_env_loop_0883
  8371                                  
  8372                                          	.L_lambda_opt_env_end_0883:
  8373 000062F6 5B                      	pop rbx
  8374 000062F7 4831F6                  	xor rsi, rsi
  8375                                  	.L_lambda_opt_params_loop_0883:
  8376                                  
  8377 000062FA 4883FE01                        	cmp rsi, 1
  8378                                  
  8379 000062FE 740F                            	je .L_lambda_opt_params_end_0883
  8380 00006300 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8381 00006305 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8382 00006309 4883C601                	add rsi, 1
  8383 0000630D EBEB                    	jmp .L_lambda_opt_params_loop_0883
  8384                                  
  8385                                          	.L_lambda_opt_params_end_0883:
  8386 0000630F 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  8387 00006312 4889C3                  	mov rbx, rax
  8388 00006315 58                      	pop rax
  8389 00006316 C60005                  	mov byte [rax], T_closure
  8390 00006319 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8391 0000631D 48C74009[2A630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0883
  8392                                  
  8393 00006325 E992010000                      	jmp .L_lambda_opt_end_0883
  8394                                  
  8395                                          	.L_lambda_opt_code_0883:
  8396                                  
  8397 0000632A 48837C241000                    	cmp qword [rsp + 8 * 2], 0
  8398                                  
  8399 00006330 740D                            	je .L_lambda_opt_arity_check_exact_0883  ;same num_of_args
  8400                                  
  8401 00006332 7F65                            	jg .L_lambda_opt_arity_check_more_0883  ;greater num_of_args
  8402 00006334 FF742410                	push qword [rsp + 8 * 2]
  8403 00006338 6A00                    	push 0
  8404 0000633A E95CBB0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  8405                                  .L_lambda_opt_arity_check_exact_0883:
  8406 0000633F 4883EC08                	sub rsp, 8 * 1
  8407 00006343 488D7F10                	lea rdi, [rdi + (8 * 2)]
  8408 00006347 4889E7                  	mov rdi, rsp 
  8409 0000634A 488B4708                	mov rax, qword [rdi + 8]
  8410 0000634E 488907                  	mov qword [rdi], rax
  8411 00006351 488D7F08                	lea rdi, [rdi + 8]
  8412 00006355 488B4708                	mov rax, qword [rdi + 8]
  8413 00006359 488907                  	mov qword [rdi], rax
  8414 0000635C 488D7F08                	lea rdi, [rdi + 8]
  8415 00006360 488B4708                	mov rax, qword [rdi + 8]
  8416 00006364 4889C1                  	mov rcx, rax
  8417 00006367 4883C001                	add rax, 1
  8418 0000636B 488907                  	mov qword [rdi], rax
  8419 0000636E 488D7F08                	lea rdi, [rdi + 8]
  8420                                  	.L_lambda_opt_stack_shrink_loop_1987:
  8421 00006372 4883F900                	cmp rcx, 0
  8422 00006376 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1987
  8423 00006378 4883E901                	sub rcx, 1
  8424 0000637C 488D4010                	lea rax, [rax + (8 * 2)]
  8425 00006380 488B4708                	mov rax, qword [rdi + 8]
  8426 00006384 488907                  	mov qword [rdi], rax
  8427 00006387 488D7F08                	lea rdi, [rdi + 8]
  8428 0000638B EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1987
  8429                                  
  8430                                          	.L_lambda_opt_stack_shrink_loop_exit_1987:
  8431 0000638D 48C707[01000000]        	mov qword [rdi], sob_nil
  8432 00006394 E996000000              	jmp .L_lambda_opt_stack_adjusted_0883
  8433                                  
  8434                                          	.L_lambda_opt_arity_check_more_0883:
  8435 00006399 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  8436 0000639E 488D0E                  	lea rcx, [rsi - 0]
  8437 000063A1 49B8-                   	mov r8, sob_nil
  8437 000063A3 [0100000000000000] 
  8438 000063AB 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  8439 000063B0 4889F2                  	mov rdx, rsi
  8440                                  	.L_lambda_opt_stack_shrink_loop_1988:
  8441 000063B3 4883F900                	cmp rcx, 0
  8442 000063B7 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1988
  8443 000063B9 BF11000000              	mov rdi, 1 + (8 * 2)
  8444 000063BE E80BBB0000              	call malloc
  8445 000063C3 C60021                  	mov byte [rax], T_pair
  8446 000063C6 488B1E                  	mov rbx, qword [rsi]
  8447 000063C9 48895801                	mov SOB_PAIR_CAR(rax), rbx
  8448 000063CD 4C894009                	mov SOB_PAIR_CDR(rax), r8
  8449 000063D1 4883C6F8                	add rsi, -8
  8450 000063D5 4883E901                	sub rcx, 1
  8451 000063D9 4989C0                  	mov r8, rax
  8452 000063DC EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1988
  8453                                  
  8454                                          	.L_lambda_opt_stack_shrink_loop_exit_1988:
  8455 000063DE 4C8902                  	mov qword [rdx], r8
  8456 000063E1 4883EA08                	sub rdx, 8 * 1
  8457 000063E5 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
  8458                                  
  8459 000063EA B900000000                      	mov rcx, 0 
  8460                                  
  8461                                          	.L_lambda_opt_stack_shrink_loop_1989:
  8462 000063EF 4883F900                	cmp rcx, 0
  8463 000063F3 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1989
  8464 000063F5 488B06                  	mov rax, qword [rsi]
  8465 000063F8 488902                  	mov qword [rdx], rax
  8466 000063FB 488D76F8                	lea rsi, [rsi - 8]
  8467 000063FF 4883C2F8                	add rdx, -8
  8468 00006403 4883C1FF                	add rcx, -1
  8469 00006407 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1989
  8470                                  
  8471                                          	.L_lambda_opt_stack_shrink_loop_exit_1989:
  8472                                  
  8473 00006409 48C70201000000                  	mov qword [rdx], 1 + 0
  8474 00006410 4883C6F8                	add rsi, -8
  8475 00006414 4883C2F8                	add rdx, -8
  8476 00006418 488B06                  	mov rax, qword [rsi]
  8477 0000641B 488902                  	mov qword [rdx], rax
  8478 0000641E 4883C2F8                	add rdx, -8
  8479 00006422 488D76F8                	lea rsi, [rsi - 8]
  8480 00006426 488B06                  	mov rax, qword [rsi]
  8481 00006429 488902                  	mov qword [rdx], rax
  8482 0000642C 4889D4                  	mov rsp, rdx
  8483                                  	.L_lambda_opt_stack_adjusted_0883:
  8484 0000642F C8000000                	enter 0, 0
  8485 00006433 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8486 00006437 50                      	push rax
  8487 00006438 48B8-                   	mov rax,L_constants + 32
  8487 0000643A [2000000000000000] 
  8488 00006442 50                      	push rax
  8489 00006443 488B4510                	mov rax, qword [rbp + 8 * 2]
  8490                                  
  8491 00006447 488B00                                            	mov rax, qword[rax + 8 * 0]
  8492                                  
  8493 0000644A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8494 0000644D 50                      	push rax
  8495 0000644E 6A03                    	push 3
  8496 00006450 488B0425[F8020000]      	mov rax, qword [free_var_95]
  8497                                  .L_applic_TC_4001:
  8498 00006458 803805                  	cmp byte [rax], T_closure
  8499 0000645B 0F8522CA0000            	jne L_code_ptr_error
  8500 00006461 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8501 00006465 53                      	push rbx
  8502 00006466 FF7508                  	push qword [rbp + 8]
  8503 00006469 FF7500                  	push qword [rbp]
  8504 0000646C 488B4D18                	mov rcx, [rbp + 3 * 8]
  8505 00006470 488B542418              	mov rdx, [rsp + 3 * 8]
  8506 00006475 488D7204                	lea rsi, [rdx + 4]
  8507 00006479 4C8D4EFF                	lea r9, [rsi - 1]
  8508 0000647D 488D7903                	lea rdi, [rcx + 3]
  8509 00006481 4D31C0                  	xor r8, r8
  8510                                  .L_tc_recycle_frame_loop_4001:
  8511 00006484 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8512 00006488 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8513 0000648D 49FFC9                  	dec r9
  8514 00006490 4D31C0                  	xor r8, r8
  8515 00006493 48FFCF                  	dec rdi
  8516 00006496 48FFCE                  	dec rsi
  8517 00006499 4883FE00                	cmp rsi, 0
  8518 0000649D 75E5                    	jne .L_tc_recycle_frame_loop_4001
  8519                                  .L_tc_recycle_frame_done_4001:
  8520                                  ;this pop rbp in sot to the right place
  8521 0000649F 4989C9                  	mov r9, rcx
  8522 000064A2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8523 000064AA 4C01CC                  	add rsp, r9
  8524 000064AD 5D                      	pop rbp
  8525 000064AE 488B4D00                	mov rcx, qword [rbp]
  8526 000064B2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8527 000064B6 FFE3                    	jmp rbx
  8528 000064B8 C9                      	leave
  8529 000064B9 C21800                  	ret 8 * (2 + 1)
  8530                                  .L_lambda_opt_end_0883:	; new closure is in rax
  8531 000064BC C9                      	leave
  8532 000064BD C21800                  	ret 8 * (2 + 1)
  8533                                  .L_lambda_simple_end_3760:	; new closure is in rax
  8534                                  .L_applic_TC_4002:
  8535 000064C0 803805                  	cmp byte [rax], T_closure
  8536 000064C3 0F85BAC90000            	jne L_code_ptr_error
  8537 000064C9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8538 000064CD 53                      	push rbx
  8539 000064CE FF7508                  	push qword [rbp + 8]
  8540 000064D1 FF7500                  	push qword [rbp]
  8541 000064D4 488B4D18                	mov rcx, [rbp + 3 * 8]
  8542 000064D8 488B542418              	mov rdx, [rsp + 3 * 8]
  8543 000064DD 488D7204                	lea rsi, [rdx + 4]
  8544 000064E1 4C8D4EFF                	lea r9, [rsi - 1]
  8545 000064E5 488D7903                	lea rdi, [rcx + 3]
  8546 000064E9 4D31C0                  	xor r8, r8
  8547                                  .L_tc_recycle_frame_loop_4002:
  8548 000064EC 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8549 000064F0 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8550 000064F5 49FFC9                  	dec r9
  8551 000064F8 4D31C0                  	xor r8, r8
  8552 000064FB 48FFCF                  	dec rdi
  8553 000064FE 48FFCE                  	dec rsi
  8554 00006501 4883FE00                	cmp rsi, 0
  8555 00006505 75E5                    	jne .L_tc_recycle_frame_loop_4002
  8556                                  .L_tc_recycle_frame_done_4002:
  8557                                  ;this pop rbp in sot to the right place
  8558 00006507 4989C9                  	mov r9, rcx
  8559 0000650A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8560 00006512 4C01CC                  	add rsp, r9
  8561 00006515 5D                      	pop rbp
  8562 00006516 488B4D00                	mov rcx, qword [rbp]
  8563 0000651A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8564 0000651E FFE3                    	jmp rbx
  8565 00006520 C9                      	leave
  8566 00006521 C21800                  	ret 8 * (2 + 1)
  8567                                  .L_lambda_simple_end_375e:	; new closure is in rax
  8568                                  	assert_closure(rax)
    42 00006524 803805              <1>  cmp byte [%1], %2
    43 00006527 0F8595D10000        <1>  jne L_error_incorrect_type
  8569 0000652D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8570 00006530 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8571 00006533 48890425[08030000]      	mov qword [free_var_97], rax
  8572 0000653B 48B8-                   	mov rax, sob_void
  8572 0000653D [0000000000000000] 
  8573                                  
  8574 00006545 4889C7                  	mov rdi, rax
  8575 00006548 E892B90000              	call print_sexpr_if_not_void
  8576                                  
  8577 0000654D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8578 00006552 E877B90000              	call malloc
  8579 00006557 50                      	push rax
  8580 00006558 BF00000000              	mov rdi, 8 * 0	; new rib
  8581 0000655D E86CB90000              	call malloc
  8582 00006562 50                      	push rax
  8583 00006563 BF08000000              	mov rdi, 8 * 1	; extended env
  8584 00006568 E861B90000              	call malloc
  8585 0000656D 488B7D10                	mov rdi, ENV
  8586 00006571 BE00000000              	mov rsi, 0
  8587 00006576 BA01000000              	mov rdx, 1
  8588                                  .L_lambda_simple_env_loop_3761:	; ext_env[i + 1] <-- env[i]
  8589 0000657B 4883FE00                	cmp rsi, 0
  8590 0000657F 7410                    	je .L_lambda_simple_env_end_3761
  8591 00006581 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8592 00006585 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8593 00006589 48FFC6                  	inc rsi
  8594 0000658C 48FFC2                  	inc rdx
  8595 0000658F EBEA                    	jmp .L_lambda_simple_env_loop_3761
  8596                                  .L_lambda_simple_env_end_3761:
  8597 00006591 5B                      	pop rbx
  8598 00006592 BE00000000              	mov rsi, 0
  8599                                  .L_lambda_simple_params_loop_3761:	; copy params
  8600 00006597 4883FE00                	cmp rsi, 0
  8601 0000659B 740E                    	je .L_lambda_simple_params_end_3761
  8602 0000659D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8603 000065A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8604 000065A6 48FFC6                  	inc rsi
  8605 000065A9 EBEC                    	jmp .L_lambda_simple_params_loop_3761
  8606                                  .L_lambda_simple_params_end_3761:
  8607 000065AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8608 000065AE 4889C3                  	mov rbx, rax
  8609 000065B1 58                      	pop rax
  8610 000065B2 C60005                  	mov byte [rax], T_closure
  8611 000065B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8612 000065B9 48C74009[C6650000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3761
  8613 000065C1 E99B000000              	jmp .L_lambda_simple_end_3761
  8614                                  .L_lambda_simple_code_3761:	; lambda-simple body
  8615 000065C6 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8616 000065CC 740B                    	je .L_lambda_simple_arity_check_ok_3761
  8617 000065CE FF742410                	push qword [rsp + 8 * 2]
  8618 000065D2 6A00                    	push 0
  8619 000065D4 E9AEB80000              	jmp L_error_incorrect_arity_simple
  8620                                  .L_lambda_simple_arity_check_ok_3761:
  8621 000065D9 C8000000                	enter 0, 0
  8622 000065DD 48B8-                   	mov rax,L_constants + 68
  8622 000065DF [4400000000000000] 
  8623 000065E7 50                      	push rax
  8624 000065E8 48B8-                   	mov rax,L_constants + 119
  8624 000065EA [7700000000000000] 
  8625 000065F2 50                      	push rax
  8626 000065F3 6A02                    	push 2
  8627 000065F5 488B0425[30010000]      	mov rax, qword [free_var_38]
  8628                                  .L_applic_TC_4003:
  8629 000065FD 803805                  	cmp byte [rax], T_closure
  8630 00006600 0F857DC80000            	jne L_code_ptr_error
  8631 00006606 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8632 0000660A 53                      	push rbx
  8633 0000660B FF7508                  	push qword [rbp + 8]
  8634 0000660E FF7500                  	push qword [rbp]
  8635 00006611 488B4D18                	mov rcx, [rbp + 3 * 8]
  8636 00006615 488B542418              	mov rdx, [rsp + 3 * 8]
  8637 0000661A 488D7204                	lea rsi, [rdx + 4]
  8638 0000661E 4C8D4EFF                	lea r9, [rsi - 1]
  8639 00006622 488D7903                	lea rdi, [rcx + 3]
  8640 00006626 4D31C0                  	xor r8, r8
  8641                                  .L_tc_recycle_frame_loop_4003:
  8642 00006629 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8643 0000662D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8644 00006632 49FFC9                  	dec r9
  8645 00006635 4D31C0                  	xor r8, r8
  8646 00006638 48FFCF                  	dec rdi
  8647 0000663B 48FFCE                  	dec rsi
  8648 0000663E 4883FE00                	cmp rsi, 0
  8649 00006642 75E5                    	jne .L_tc_recycle_frame_loop_4003
  8650                                  .L_tc_recycle_frame_done_4003:
  8651                                  ;this pop rbp in sot to the right place
  8652 00006644 4989C9                  	mov r9, rcx
  8653 00006647 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8654 0000664F 4C01CC                  	add rsp, r9
  8655 00006652 5D                      	pop rbp
  8656 00006653 488B4D00                	mov rcx, qword [rbp]
  8657 00006657 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8658 0000665B FFE3                    	jmp rbx
  8659 0000665D C9                      	leave
  8660 0000665E C21000                  	ret 8 * (2 + 0)
  8661                                  .L_lambda_simple_end_3761:	; new closure is in rax
  8662 00006661 50                      	push rax
  8663 00006662 6A01                    	push 1
  8664 00006664 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8665 00006669 E860B80000              	call malloc
  8666 0000666E 50                      	push rax
  8667 0000666F BF00000000              	mov rdi, 8 * 0	; new rib
  8668 00006674 E855B80000              	call malloc
  8669 00006679 50                      	push rax
  8670 0000667A BF08000000              	mov rdi, 8 * 1	; extended env
  8671 0000667F E84AB80000              	call malloc
  8672 00006684 488B7D10                	mov rdi, ENV
  8673 00006688 BE00000000              	mov rsi, 0
  8674 0000668D BA01000000              	mov rdx, 1
  8675                                  .L_lambda_simple_env_loop_3762:	; ext_env[i + 1] <-- env[i]
  8676 00006692 4883FE00                	cmp rsi, 0
  8677 00006696 7410                    	je .L_lambda_simple_env_end_3762
  8678 00006698 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8679 0000669C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8680 000066A0 48FFC6                  	inc rsi
  8681 000066A3 48FFC2                  	inc rdx
  8682 000066A6 EBEA                    	jmp .L_lambda_simple_env_loop_3762
  8683                                  .L_lambda_simple_env_end_3762:
  8684 000066A8 5B                      	pop rbx
  8685 000066A9 BE00000000              	mov rsi, 0
  8686                                  .L_lambda_simple_params_loop_3762:	; copy params
  8687 000066AE 4883FE00                	cmp rsi, 0
  8688 000066B2 740E                    	je .L_lambda_simple_params_end_3762
  8689 000066B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8690 000066B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8691 000066BD 48FFC6                  	inc rsi
  8692 000066C0 EBEC                    	jmp .L_lambda_simple_params_loop_3762
  8693                                  .L_lambda_simple_params_end_3762:
  8694 000066C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8695 000066C5 4889C3                  	mov rbx, rax
  8696 000066C8 58                      	pop rax
  8697 000066C9 C60005                  	mov byte [rax], T_closure
  8698 000066CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8699 000066D0 48C74009[DD660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3762
  8700 000066D8 E9CF090000              	jmp .L_lambda_simple_end_3762
  8701                                  .L_lambda_simple_code_3762:	; lambda-simple body
  8702 000066DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8703 000066E3 740B                    	je .L_lambda_simple_arity_check_ok_3762
  8704 000066E5 FF742410                	push qword [rsp + 8 * 2]
  8705 000066E9 6A01                    	push 1
  8706 000066EB E997B70000              	jmp L_error_incorrect_arity_simple
  8707                                  .L_lambda_simple_arity_check_ok_3762:
  8708 000066F0 C8000000                	enter 0, 0
  8709 000066F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8710 000066F9 E8D0B70000              	call malloc
  8711 000066FE 50                      	push rax
  8712 000066FF BF08000000              	mov rdi, 8 * 1	; new rib
  8713 00006704 E8C5B70000              	call malloc
  8714 00006709 50                      	push rax
  8715 0000670A BF10000000              	mov rdi, 8 * 2	; extended env
  8716 0000670F E8BAB70000              	call malloc
  8717 00006714 488B7D10                	mov rdi, ENV
  8718 00006718 BE00000000              	mov rsi, 0
  8719 0000671D BA01000000              	mov rdx, 1
  8720                                  .L_lambda_simple_env_loop_3763:	; ext_env[i + 1] <-- env[i]
  8721 00006722 4883FE01                	cmp rsi, 1
  8722 00006726 7410                    	je .L_lambda_simple_env_end_3763
  8723 00006728 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8724 0000672C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8725 00006730 48FFC6                  	inc rsi
  8726 00006733 48FFC2                  	inc rdx
  8727 00006736 EBEA                    	jmp .L_lambda_simple_env_loop_3763
  8728                                  .L_lambda_simple_env_end_3763:
  8729 00006738 5B                      	pop rbx
  8730 00006739 BE00000000              	mov rsi, 0
  8731                                  .L_lambda_simple_params_loop_3763:	; copy params
  8732 0000673E 4883FE01                	cmp rsi, 1
  8733 00006742 740E                    	je .L_lambda_simple_params_end_3763
  8734 00006744 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8735 00006749 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8736 0000674D 48FFC6                  	inc rsi
  8737 00006750 EBEC                    	jmp .L_lambda_simple_params_loop_3763
  8738                                  .L_lambda_simple_params_end_3763:
  8739 00006752 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8740 00006755 4889C3                  	mov rbx, rax
  8741 00006758 58                      	pop rax
  8742 00006759 C60005                  	mov byte [rax], T_closure
  8743 0000675C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8744 00006760 48C74009[6D670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3763
  8745 00006768 E96C040000              	jmp .L_lambda_simple_end_3763
  8746                                  .L_lambda_simple_code_3763:	; lambda-simple body
  8747 0000676D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8748 00006773 740B                    	je .L_lambda_simple_arity_check_ok_3763
  8749 00006775 FF742410                	push qword [rsp + 8 * 2]
  8750 00006779 6A02                    	push 2
  8751 0000677B E907B70000              	jmp L_error_incorrect_arity_simple
  8752                                  .L_lambda_simple_arity_check_ok_3763:
  8753 00006780 C8000000                	enter 0, 0
  8754 00006784 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8755 00006788 50                      	push rax
  8756 00006789 6A01                    	push 1
  8757 0000678B 488B0425[48000000]      	mov rax, qword [free_var_9]
  8758                                  	assert_closure(rax)
    42 00006793 803805              <1>  cmp byte [%1], %2
    43 00006796 0F8526CF0000        <1>  jne L_error_incorrect_type
  8759 0000679C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8760 0000679F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8761                                  
  8762 000067A2 483D[02000000]                  	cmp rax, sob_boolean_false
  8763                                  
  8764 000067A8 0F84CA010000                    	je .L_if_else_47db
  8765 000067AE 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8766 000067B2 50                      	push rax
  8767 000067B3 6A01                    	push 1
  8768 000067B5 488B0425[48000000]      	mov rax, qword [free_var_9]
  8769                                  	assert_closure(rax)
    42 000067BD 803805              <1>  cmp byte [%1], %2
    43 000067C0 0F85FCCE0000        <1>  jne L_error_incorrect_type
  8770 000067C6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8771 000067C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8772                                  
  8773 000067CC 483D[02000000]                  	cmp rax, sob_boolean_false
  8774                                  
  8775 000067D2 7479                            	je .L_if_else_47df
  8776 000067D4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8777 000067D8 50                      	push rax
  8778 000067D9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8779 000067DD 50                      	push rax
  8780 000067DE 6A02                    	push 2
  8781 000067E0 488B0425[18010000]      	mov rax, qword [free_var_35]
  8782                                  .L_applic_TC_400a:
  8783 000067E8 803805                  	cmp byte [rax], T_closure
  8784 000067EB 0F8592C60000            	jne L_code_ptr_error
  8785 000067F1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8786 000067F5 53                      	push rbx
  8787 000067F6 FF7508                  	push qword [rbp + 8]
  8788 000067F9 FF7500                  	push qword [rbp]
  8789 000067FC 488B4D18                	mov rcx, [rbp + 3 * 8]
  8790 00006800 488B542418              	mov rdx, [rsp + 3 * 8]
  8791 00006805 488D7204                	lea rsi, [rdx + 4]
  8792 00006809 4C8D4EFF                	lea r9, [rsi - 1]
  8793 0000680D 488D7903                	lea rdi, [rcx + 3]
  8794 00006811 4D31C0                  	xor r8, r8
  8795                                  .L_tc_recycle_frame_loop_400a:
  8796 00006814 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8797 00006818 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8798 0000681D 49FFC9                  	dec r9
  8799 00006820 4D31C0                  	xor r8, r8
  8800 00006823 48FFCF                  	dec rdi
  8801 00006826 48FFCE                  	dec rsi
  8802 00006829 4883FE00                	cmp rsi, 0
  8803 0000682D 75E5                    	jne .L_tc_recycle_frame_loop_400a
  8804                                  .L_tc_recycle_frame_done_400a:
  8805                                  ;this pop rbp in sot to the right place
  8806 0000682F 4989C9                  	mov r9, rcx
  8807 00006832 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8808 0000683A 4C01CC                  	add rsp, r9
  8809 0000683D 5D                      	pop rbp
  8810 0000683E 488B4D00                	mov rcx, qword [rbp]
  8811 00006842 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8812 00006846 FFE3                    	jmp rbx
  8813                                  
  8814 00006848 E926010000                      	jmp .L_if_end_47df
  8815                                  
  8816                                          	.L_if_else_47df:
  8817 0000684D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8818 00006851 50                      	push rax
  8819 00006852 6A01                    	push 1
  8820 00006854 488B0425[40000000]      	mov rax, qword [free_var_8]
  8821                                  	assert_closure(rax)
    42 0000685C 803805              <1>  cmp byte [%1], %2
    43 0000685F 0F855DCE0000        <1>  jne L_error_incorrect_type
  8822 00006865 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8823 00006868 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8824                                  
  8825 0000686B 483D[02000000]                  	cmp rax, sob_boolean_false
  8826                                  
  8827 00006871 0F8490000000                    	je .L_if_else_47e0
  8828 00006877 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8829 0000687B 50                      	push rax
  8830 0000687C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8831 00006880 50                      	push rax
  8832 00006881 6A01                    	push 1
  8833 00006883 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8834                                  	assert_closure(rax)
    42 0000688B 803805              <1>  cmp byte [%1], %2
    43 0000688E 0F852ECE0000        <1>  jne L_error_incorrect_type
  8835 00006894 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8836 00006897 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8837 0000689A 50                      	push rax
  8838 0000689B 6A02                    	push 2
  8839 0000689D 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8840                                  .L_applic_TC_4009:
  8841 000068A5 803805                  	cmp byte [rax], T_closure
  8842 000068A8 0F85D5C50000            	jne L_code_ptr_error
  8843 000068AE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8844 000068B2 53                      	push rbx
  8845 000068B3 FF7508                  	push qword [rbp + 8]
  8846 000068B6 FF7500                  	push qword [rbp]
  8847 000068B9 488B4D18                	mov rcx, [rbp + 3 * 8]
  8848 000068BD 488B542418              	mov rdx, [rsp + 3 * 8]
  8849 000068C2 488D7204                	lea rsi, [rdx + 4]
  8850 000068C6 4C8D4EFF                	lea r9, [rsi - 1]
  8851 000068CA 488D7903                	lea rdi, [rcx + 3]
  8852 000068CE 4D31C0                  	xor r8, r8
  8853                                  .L_tc_recycle_frame_loop_4009:
  8854 000068D1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8855 000068D5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8856 000068DA 49FFC9                  	dec r9
  8857 000068DD 4D31C0                  	xor r8, r8
  8858 000068E0 48FFCF                  	dec rdi
  8859 000068E3 48FFCE                  	dec rsi
  8860 000068E6 4883FE00                	cmp rsi, 0
  8861 000068EA 75E5                    	jne .L_tc_recycle_frame_loop_4009
  8862                                  .L_tc_recycle_frame_done_4009:
  8863                                  ;this pop rbp in sot to the right place
  8864 000068EC 4989C9                  	mov r9, rcx
  8865 000068EF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8866 000068F7 4C01CC                  	add rsp, r9
  8867 000068FA 5D                      	pop rbp
  8868 000068FB 488B4D00                	mov rcx, qword [rbp]
  8869 000068FF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8870 00006903 FFE3                    	jmp rbx
  8871                                  
  8872 00006905 EB6C                            	jmp .L_if_end_47e0
  8873                                  
  8874                                          	.L_if_else_47e0:
  8875 00006907 6A00                    	push 0
  8876 00006909 488B4510                	mov rax, qword [rbp + 8 * 2]
  8877                                  
  8878 0000690D 488B00                                            	mov rax, qword[rax + 8 * 0]
  8879                                  
  8880 00006910 488B00                                            	mov rax, qword[rax + 8 * 0]
  8881                                  .L_applic_TC_4008:
  8882 00006913 803805                  	cmp byte [rax], T_closure
  8883 00006916 0F8567C50000            	jne L_code_ptr_error
  8884 0000691C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8885 00006920 53                      	push rbx
  8886 00006921 FF7508                  	push qword [rbp + 8]
  8887 00006924 FF7500                  	push qword [rbp]
  8888 00006927 488B4D18                	mov rcx, [rbp + 3 * 8]
  8889 0000692B 488B542418              	mov rdx, [rsp + 3 * 8]
  8890 00006930 488D7204                	lea rsi, [rdx + 4]
  8891 00006934 4C8D4EFF                	lea r9, [rsi - 1]
  8892 00006938 488D7903                	lea rdi, [rcx + 3]
  8893 0000693C 4D31C0                  	xor r8, r8
  8894                                  .L_tc_recycle_frame_loop_4008:
  8895 0000693F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8896 00006943 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8897 00006948 49FFC9                  	dec r9
  8898 0000694B 4D31C0                  	xor r8, r8
  8899 0000694E 48FFCF                  	dec rdi
  8900 00006951 48FFCE                  	dec rsi
  8901 00006954 4883FE00                	cmp rsi, 0
  8902 00006958 75E5                    	jne .L_tc_recycle_frame_loop_4008
  8903                                  .L_tc_recycle_frame_done_4008:
  8904                                  ;this pop rbp in sot to the right place
  8905 0000695A 4989C9                  	mov r9, rcx
  8906 0000695D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8907 00006965 4C01CC                  	add rsp, r9
  8908 00006968 5D                      	pop rbp
  8909 00006969 488B4D00                	mov rcx, qword [rbp]
  8910 0000696D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8911 00006971 FFE3                    	jmp rbx
  8912                                  
  8913                                          	.L_if_end_47e0:
  8914                                  
  8915                                          	.L_if_end_47df:
  8916                                  
  8917 00006973 E95D020000                      	jmp .L_if_end_47db
  8918                                  
  8919                                          	.L_if_else_47db:
  8920 00006978 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8921 0000697C 50                      	push rax
  8922 0000697D 6A01                    	push 1
  8923 0000697F 488B0425[40000000]      	mov rax, qword [free_var_8]
  8924                                  	assert_closure(rax)
    42 00006987 803805              <1>  cmp byte [%1], %2
    43 0000698A 0F8532CD0000        <1>  jne L_error_incorrect_type
  8925 00006990 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8926 00006993 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8927                                  
  8928 00006996 483D[02000000]                  	cmp rax, sob_boolean_false
  8929                                  
  8930 0000699C 0F84C7010000                    	je .L_if_else_47dc
  8931 000069A2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8932 000069A6 50                      	push rax
  8933 000069A7 6A01                    	push 1
  8934 000069A9 488B0425[48000000]      	mov rax, qword [free_var_9]
  8935                                  	assert_closure(rax)
    42 000069B1 803805              <1>  cmp byte [%1], %2
    43 000069B4 0F8508CD0000        <1>  jne L_error_incorrect_type
  8936 000069BA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8937 000069BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  8938                                  
  8939 000069C0 483D[02000000]                  	cmp rax, sob_boolean_false
  8940                                  
  8941 000069C6 0F8493000000                    	je .L_if_else_47dd
  8942 000069CC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8943 000069D0 50                      	push rax
  8944 000069D1 6A01                    	push 1
  8945 000069D3 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8946                                  	assert_closure(rax)
    42 000069DB 803805              <1>  cmp byte [%1], %2
    43 000069DE 0F85DECC0000        <1>  jne L_error_incorrect_type
  8947 000069E4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8948 000069E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8949 000069EA 50                      	push rax
  8950 000069EB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8951 000069EF 50                      	push rax
  8952 000069F0 6A02                    	push 2
  8953 000069F2 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8954                                  .L_applic_TC_4007:
  8955 000069FA 803805                  	cmp byte [rax], T_closure
  8956 000069FD 0F8580C40000            	jne L_code_ptr_error
  8957 00006A03 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8958 00006A07 53                      	push rbx
  8959 00006A08 FF7508                  	push qword [rbp + 8]
  8960 00006A0B FF7500                  	push qword [rbp]
  8961 00006A0E 488B4D18                	mov rcx, [rbp + 3 * 8]
  8962 00006A12 488B542418              	mov rdx, [rsp + 3 * 8]
  8963 00006A17 488D7204                	lea rsi, [rdx + 4]
  8964 00006A1B 4C8D4EFF                	lea r9, [rsi - 1]
  8965 00006A1F 488D7903                	lea rdi, [rcx + 3]
  8966 00006A23 4D31C0                  	xor r8, r8
  8967                                  .L_tc_recycle_frame_loop_4007:
  8968 00006A26 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8969 00006A2A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8970 00006A2F 49FFC9                  	dec r9
  8971 00006A32 4D31C0                  	xor r8, r8
  8972 00006A35 48FFCF                  	dec rdi
  8973 00006A38 48FFCE                  	dec rsi
  8974 00006A3B 4883FE00                	cmp rsi, 0
  8975 00006A3F 75E5                    	jne .L_tc_recycle_frame_loop_4007
  8976                                  .L_tc_recycle_frame_done_4007:
  8977                                  ;this pop rbp in sot to the right place
  8978 00006A41 4989C9                  	mov r9, rcx
  8979 00006A44 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8980 00006A4C 4C01CC                  	add rsp, r9
  8981 00006A4F 5D                      	pop rbp
  8982 00006A50 488B4D00                	mov rcx, qword [rbp]
  8983 00006A54 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8984 00006A58 FFE3                    	jmp rbx
  8985                                  
  8986 00006A5A E908010000                      	jmp .L_if_end_47dd
  8987                                  
  8988                                          	.L_if_else_47dd:
  8989 00006A5F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8990 00006A63 50                      	push rax
  8991 00006A64 6A01                    	push 1
  8992 00006A66 488B0425[40000000]      	mov rax, qword [free_var_8]
  8993                                  	assert_closure(rax)
    42 00006A6E 803805              <1>  cmp byte [%1], %2
    43 00006A71 0F854BCC0000        <1>  jne L_error_incorrect_type
  8994 00006A77 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8995 00006A7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8996                                  
  8997 00006A7D 483D[02000000]                  	cmp rax, sob_boolean_false
  8998                                  
  8999 00006A83 7476                            	je .L_if_else_47de
  9000 00006A85 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9001 00006A89 50                      	push rax
  9002 00006A8A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9003 00006A8E 50                      	push rax
  9004 00006A8F 6A02                    	push 2
  9005 00006A91 488B0425[F8000000]      	mov rax, qword [free_var_31]
  9006                                  .L_applic_TC_4006:
  9007 00006A99 803805                  	cmp byte [rax], T_closure
  9008 00006A9C 0F85E1C30000            	jne L_code_ptr_error
  9009 00006AA2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9010 00006AA6 53                      	push rbx
  9011 00006AA7 FF7508                  	push qword [rbp + 8]
  9012 00006AAA FF7500                  	push qword [rbp]
  9013 00006AAD 488B4D18                	mov rcx, [rbp + 3 * 8]
  9014 00006AB1 488B542418              	mov rdx, [rsp + 3 * 8]
  9015 00006AB6 488D7204                	lea rsi, [rdx + 4]
  9016 00006ABA 4C8D4EFF                	lea r9, [rsi - 1]
  9017 00006ABE 488D7903                	lea rdi, [rcx + 3]
  9018 00006AC2 4D31C0                  	xor r8, r8
  9019                                  .L_tc_recycle_frame_loop_4006:
  9020 00006AC5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9021 00006AC9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9022 00006ACE 49FFC9                  	dec r9
  9023 00006AD1 4D31C0                  	xor r8, r8
  9024 00006AD4 48FFCF                  	dec rdi
  9025 00006AD7 48FFCE                  	dec rsi
  9026 00006ADA 4883FE00                	cmp rsi, 0
  9027 00006ADE 75E5                    	jne .L_tc_recycle_frame_loop_4006
  9028                                  .L_tc_recycle_frame_done_4006:
  9029                                  ;this pop rbp in sot to the right place
  9030 00006AE0 4989C9                  	mov r9, rcx
  9031 00006AE3 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9032 00006AEB 4C01CC                  	add rsp, r9
  9033 00006AEE 5D                      	pop rbp
  9034 00006AEF 488B4D00                	mov rcx, qword [rbp]
  9035 00006AF3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9036 00006AF7 FFE3                    	jmp rbx
  9037                                  
  9038 00006AF9 EB6C                            	jmp .L_if_end_47de
  9039                                  
  9040                                          	.L_if_else_47de:
  9041 00006AFB 6A00                    	push 0
  9042 00006AFD 488B4510                	mov rax, qword [rbp + 8 * 2]
  9043                                  
  9044 00006B01 488B00                                            	mov rax, qword[rax + 8 * 0]
  9045                                  
  9046 00006B04 488B00                                            	mov rax, qword[rax + 8 * 0]
  9047                                  .L_applic_TC_4005:
  9048 00006B07 803805                  	cmp byte [rax], T_closure
  9049 00006B0A 0F8573C30000            	jne L_code_ptr_error
  9050 00006B10 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9051 00006B14 53                      	push rbx
  9052 00006B15 FF7508                  	push qword [rbp + 8]
  9053 00006B18 FF7500                  	push qword [rbp]
  9054 00006B1B 488B4D18                	mov rcx, [rbp + 3 * 8]
  9055 00006B1F 488B542418              	mov rdx, [rsp + 3 * 8]
  9056 00006B24 488D7204                	lea rsi, [rdx + 4]
  9057 00006B28 4C8D4EFF                	lea r9, [rsi - 1]
  9058 00006B2C 488D7903                	lea rdi, [rcx + 3]
  9059 00006B30 4D31C0                  	xor r8, r8
  9060                                  .L_tc_recycle_frame_loop_4005:
  9061 00006B33 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9062 00006B37 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9063 00006B3C 49FFC9                  	dec r9
  9064 00006B3F 4D31C0                  	xor r8, r8
  9065 00006B42 48FFCF                  	dec rdi
  9066 00006B45 48FFCE                  	dec rsi
  9067 00006B48 4883FE00                	cmp rsi, 0
  9068 00006B4C 75E5                    	jne .L_tc_recycle_frame_loop_4005
  9069                                  .L_tc_recycle_frame_done_4005:
  9070                                  ;this pop rbp in sot to the right place
  9071 00006B4E 4989C9                  	mov r9, rcx
  9072 00006B51 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9073 00006B59 4C01CC                  	add rsp, r9
  9074 00006B5C 5D                      	pop rbp
  9075 00006B5D 488B4D00                	mov rcx, qword [rbp]
  9076 00006B61 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9077 00006B65 FFE3                    	jmp rbx
  9078                                  
  9079                                          	.L_if_end_47de:
  9080                                  
  9081                                          	.L_if_end_47dd:
  9082                                  
  9083 00006B67 EB6C                            	jmp .L_if_end_47dc
  9084                                  
  9085                                          	.L_if_else_47dc:
  9086 00006B69 6A00                    	push 0
  9087 00006B6B 488B4510                	mov rax, qword [rbp + 8 * 2]
  9088                                  
  9089 00006B6F 488B00                                            	mov rax, qword[rax + 8 * 0]
  9090                                  
  9091 00006B72 488B00                                            	mov rax, qword[rax + 8 * 0]
  9092                                  .L_applic_TC_4004:
  9093 00006B75 803805                  	cmp byte [rax], T_closure
  9094 00006B78 0F8505C30000            	jne L_code_ptr_error
  9095 00006B7E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9096 00006B82 53                      	push rbx
  9097 00006B83 FF7508                  	push qword [rbp + 8]
  9098 00006B86 FF7500                  	push qword [rbp]
  9099 00006B89 488B4D18                	mov rcx, [rbp + 3 * 8]
  9100 00006B8D 488B542418              	mov rdx, [rsp + 3 * 8]
  9101 00006B92 488D7204                	lea rsi, [rdx + 4]
  9102 00006B96 4C8D4EFF                	lea r9, [rsi - 1]
  9103 00006B9A 488D7903                	lea rdi, [rcx + 3]
  9104 00006B9E 4D31C0                  	xor r8, r8
  9105                                  .L_tc_recycle_frame_loop_4004:
  9106 00006BA1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9107 00006BA5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9108 00006BAA 49FFC9                  	dec r9
  9109 00006BAD 4D31C0                  	xor r8, r8
  9110 00006BB0 48FFCF                  	dec rdi
  9111 00006BB3 48FFCE                  	dec rsi
  9112 00006BB6 4883FE00                	cmp rsi, 0
  9113 00006BBA 75E5                    	jne .L_tc_recycle_frame_loop_4004
  9114                                  .L_tc_recycle_frame_done_4004:
  9115                                  ;this pop rbp in sot to the right place
  9116 00006BBC 4989C9                  	mov r9, rcx
  9117 00006BBF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9118 00006BC7 4C01CC                  	add rsp, r9
  9119 00006BCA 5D                      	pop rbp
  9120 00006BCB 488B4D00                	mov rcx, qword [rbp]
  9121 00006BCF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9122 00006BD3 FFE3                    	jmp rbx
  9123                                  
  9124                                          	.L_if_end_47dc:
  9125                                  
  9126                                          	.L_if_end_47db:
  9127 00006BD5 C9                      	leave
  9128 00006BD6 C22000                  	ret 8 * (2 + 2)
  9129                                  .L_lambda_simple_end_3763:	; new closure is in rax
  9130 00006BD9 50                      	push rax
  9131 00006BDA 6A01                    	push 1
  9132 00006BDC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9133 00006BE1 E8E8B20000              	call malloc
  9134 00006BE6 50                      	push rax
  9135 00006BE7 BF08000000              	mov rdi, 8 * 1	; new rib
  9136 00006BEC E8DDB20000              	call malloc
  9137 00006BF1 50                      	push rax
  9138 00006BF2 BF10000000              	mov rdi, 8 * 2	; extended env
  9139 00006BF7 E8D2B20000              	call malloc
  9140 00006BFC 488B7D10                	mov rdi, ENV
  9141 00006C00 BE00000000              	mov rsi, 0
  9142 00006C05 BA01000000              	mov rdx, 1
  9143                                  .L_lambda_simple_env_loop_3764:	; ext_env[i + 1] <-- env[i]
  9144 00006C0A 4883FE01                	cmp rsi, 1
  9145 00006C0E 7410                    	je .L_lambda_simple_env_end_3764
  9146 00006C10 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9147 00006C14 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9148 00006C18 48FFC6                  	inc rsi
  9149 00006C1B 48FFC2                  	inc rdx
  9150 00006C1E EBEA                    	jmp .L_lambda_simple_env_loop_3764
  9151                                  .L_lambda_simple_env_end_3764:
  9152 00006C20 5B                      	pop rbx
  9153 00006C21 BE00000000              	mov rsi, 0
  9154                                  .L_lambda_simple_params_loop_3764:	; copy params
  9155 00006C26 4883FE01                	cmp rsi, 1
  9156 00006C2A 740E                    	je .L_lambda_simple_params_end_3764
  9157 00006C2C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9158 00006C31 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9159 00006C35 48FFC6                  	inc rsi
  9160 00006C38 EBEC                    	jmp .L_lambda_simple_params_loop_3764
  9161                                  .L_lambda_simple_params_end_3764:
  9162 00006C3A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9163 00006C3D 4889C3                  	mov rbx, rax
  9164 00006C40 58                      	pop rax
  9165 00006C41 C60005                  	mov byte [rax], T_closure
  9166 00006C44 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9167 00006C48 48C74009[556C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3764
  9168 00006C50 E9F3030000              	jmp .L_lambda_simple_end_3764
  9169                                  .L_lambda_simple_code_3764:	; lambda-simple body
  9170 00006C55 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9171 00006C5B 740B                    	je .L_lambda_simple_arity_check_ok_3764
  9172 00006C5D FF742410                	push qword [rsp + 8 * 2]
  9173 00006C61 6A01                    	push 1
  9174 00006C63 E91FB20000              	jmp L_error_incorrect_arity_simple
  9175                                  .L_lambda_simple_arity_check_ok_3764:
  9176 00006C68 C8000000                	enter 0, 0
  9177 00006C6C BF11000000              	mov rdi, (1 + 8 + 8)
  9178 00006C71 E858B20000              	call malloc
  9179 00006C76 50                      	push rax
  9180 00006C77 BF08000000              	mov rdi, 8 * 1
  9181 00006C7C E84DB20000              	call malloc
  9182 00006C81 50                      	push rax
  9183 00006C82 BF18000000              	mov rdi, 8 * 3
  9184 00006C87 E842B20000              	call malloc
  9185 00006C8C 488B7D10                	mov rdi, ENV
  9186 00006C90 4831F6                  	xor rsi, rsi
  9187 00006C93 4831D2                  	xor rdx, rdx
  9188 00006C96 48FFC2                  	inc rdx
  9189                                  	.L_lambda_opt_env_loop_0884:
  9190                                  
  9191 00006C99 4883FE02                        	cmp rsi, 2
  9192                                  
  9193 00006C9D 7412                            	je .L_lambda_opt_env_end_0884
  9194 00006C9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9195 00006CA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9196 00006CA7 4883C201                	add rdx, 1
  9197 00006CAB 4883C601                	add rsi, 1
  9198 00006CAF EBE8                    	jmp .L_lambda_opt_env_loop_0884
  9199                                  
  9200                                          	.L_lambda_opt_env_end_0884:
  9201 00006CB1 5B                      	pop rbx
  9202 00006CB2 4831F6                  	xor rsi, rsi
  9203                                  	.L_lambda_opt_params_loop_0884:
  9204                                  
  9205 00006CB5 4883FE01                        	cmp rsi, 1
  9206                                  
  9207 00006CB9 740F                            	je .L_lambda_opt_params_end_0884
  9208 00006CBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9209 00006CC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9210 00006CC4 4883C601                	add rsi, 1
  9211 00006CC8 EBEB                    	jmp .L_lambda_opt_params_loop_0884
  9212                                  
  9213                                          	.L_lambda_opt_params_end_0884:
  9214 00006CCA 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  9215 00006CCD 4889C3                  	mov rbx, rax
  9216 00006CD0 58                      	pop rax
  9217 00006CD1 C60005                  	mov byte [rax], T_closure
  9218 00006CD4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9219 00006CD8 48C74009[E56C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0884
  9220                                  
  9221 00006CE0 E95F030000                      	jmp .L_lambda_opt_end_0884
  9222                                  
  9223                                          	.L_lambda_opt_code_0884:
  9224                                  
  9225 00006CE5 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  9226                                  
  9227 00006CEB 740D                            	je .L_lambda_opt_arity_check_exact_0884  ;same num_of_args
  9228                                  
  9229 00006CED 7F65                            	jg .L_lambda_opt_arity_check_more_0884  ;greater num_of_args
  9230 00006CEF FF742410                	push qword [rsp + 8 * 2]
  9231 00006CF3 6A01                    	push 1
  9232 00006CF5 E9A1B10000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  9233                                  .L_lambda_opt_arity_check_exact_0884:
  9234 00006CFA 4883EC08                	sub rsp, 8 * 1
  9235 00006CFE 488D7F10                	lea rdi, [rdi + (8 * 2)]
  9236 00006D02 4889E7                  	mov rdi, rsp 
  9237 00006D05 488B4708                	mov rax, qword [rdi + 8]
  9238 00006D09 488907                  	mov qword [rdi], rax
  9239 00006D0C 488D7F08                	lea rdi, [rdi + 8]
  9240 00006D10 488B4708                	mov rax, qword [rdi + 8]
  9241 00006D14 488907                  	mov qword [rdi], rax
  9242 00006D17 488D7F08                	lea rdi, [rdi + 8]
  9243 00006D1B 488B4708                	mov rax, qword [rdi + 8]
  9244 00006D1F 4889C1                  	mov rcx, rax
  9245 00006D22 4883C001                	add rax, 1
  9246 00006D26 488907                  	mov qword [rdi], rax
  9247 00006D29 488D7F08                	lea rdi, [rdi + 8]
  9248                                  	.L_lambda_opt_stack_shrink_loop_198a:
  9249 00006D2D 4883F900                	cmp rcx, 0
  9250 00006D31 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_198a
  9251 00006D33 4883E901                	sub rcx, 1
  9252 00006D37 488D4010                	lea rax, [rax + (8 * 2)]
  9253 00006D3B 488B4708                	mov rax, qword [rdi + 8]
  9254 00006D3F 488907                  	mov qword [rdi], rax
  9255 00006D42 488D7F08                	lea rdi, [rdi + 8]
  9256 00006D46 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_198a
  9257                                  
  9258                                          	.L_lambda_opt_stack_shrink_loop_exit_198a:
  9259 00006D48 48C707[01000000]        	mov qword [rdi], sob_nil
  9260 00006D4F E997000000              	jmp .L_lambda_opt_stack_adjusted_0884
  9261                                  
  9262                                          	.L_lambda_opt_arity_check_more_0884:
  9263 00006D54 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  9264 00006D59 488D4EFF                	lea rcx, [rsi - 1]
  9265 00006D5D 49B8-                   	mov r8, sob_nil
  9265 00006D5F [0100000000000000] 
  9266 00006D67 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  9267 00006D6C 4889F2                  	mov rdx, rsi
  9268                                  	.L_lambda_opt_stack_shrink_loop_198b:
  9269 00006D6F 4883F900                	cmp rcx, 0
  9270 00006D73 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_198b
  9271 00006D75 BF11000000              	mov rdi, 1 + (8 * 2)
  9272 00006D7A E84FB10000              	call malloc
  9273 00006D7F C60021                  	mov byte [rax], T_pair
  9274 00006D82 488B1E                  	mov rbx, qword [rsi]
  9275 00006D85 48895801                	mov SOB_PAIR_CAR(rax), rbx
  9276 00006D89 4C894009                	mov SOB_PAIR_CDR(rax), r8
  9277 00006D8D 4883C6F8                	add rsi, -8
  9278 00006D91 4883E901                	sub rcx, 1
  9279 00006D95 4989C0                  	mov r8, rax
  9280 00006D98 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_198b
  9281                                  
  9282                                          	.L_lambda_opt_stack_shrink_loop_exit_198b:
  9283 00006D9A 4C8902                  	mov qword [rdx], r8
  9284 00006D9D 4883EA08                	sub rdx, 8 * 1
  9285 00006DA1 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  9286                                  
  9287 00006DA6 B901000000                      	mov rcx, 1 
  9288                                  
  9289                                          	.L_lambda_opt_stack_shrink_loop_198c:
  9290 00006DAB 4883F900                	cmp rcx, 0
  9291 00006DAF 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_198c
  9292 00006DB1 488B06                  	mov rax, qword [rsi]
  9293 00006DB4 488902                  	mov qword [rdx], rax
  9294 00006DB7 488D76F8                	lea rsi, [rsi - 8]
  9295 00006DBB 4883C2F8                	add rdx, -8
  9296 00006DBF 4883C1FF                	add rcx, -1
  9297 00006DC3 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_198c
  9298                                  
  9299                                          	.L_lambda_opt_stack_shrink_loop_exit_198c:
  9300                                  
  9301 00006DC5 48C70202000000                  	mov qword [rdx], 1 + 1
  9302 00006DCC 4883C6F8                	add rsi, -8
  9303 00006DD0 4883C2F8                	add rdx, -8
  9304 00006DD4 488B06                  	mov rax, qword [rsi]
  9305 00006DD7 488902                  	mov qword [rdx], rax
  9306 00006DDA 4883C2F8                	add rdx, -8
  9307 00006DDE 488D76F8                	lea rsi, [rsi - 8]
  9308 00006DE2 488B06                  	mov rax, qword [rsi]
  9309 00006DE5 488902                  	mov qword [rdx], rax
  9310 00006DE8 4889D4                  	mov rsp, rdx
  9311                                  	.L_lambda_opt_stack_adjusted_0884:
  9312 00006DEB C8000000                	enter 0, 0
  9313 00006DEF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9314 00006DF3 50                      	push rax
  9315 00006DF4 6A01                    	push 1
  9316 00006DF6 488B0425[00000000]      	mov rax, qword [free_var_0]
  9317                                  	assert_closure(rax)
    42 00006DFE 803805              <1>  cmp byte [%1], %2
    43 00006E01 0F85BBC80000        <1>  jne L_error_incorrect_type
  9318 00006E07 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9319 00006E0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9320                                  
  9321 00006E0D 483D[02000000]                  	cmp rax, sob_boolean_false
  9322                                  
  9323 00006E13 0F8481000000                    	je .L_if_else_47e1
  9324 00006E19 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9325 00006E1D 50                      	push rax
  9326 00006E1E 48B8-                   	mov rax,L_constants + 32
  9326 00006E20 [2000000000000000] 
  9327 00006E28 50                      	push rax
  9328 00006E29 6A02                    	push 2
  9329 00006E2B 488B4510                	mov rax, qword [rbp + 8 * 2]
  9330                                  
  9331 00006E2F 488B00                                            	mov rax, qword[rax + 8 * 0]
  9332                                  
  9333 00006E32 488B00                                            	mov rax, qword[rax + 8 * 0]
  9334                                  .L_applic_TC_400d:
  9335 00006E35 803805                  	cmp byte [rax], T_closure
  9336 00006E38 0F8545C00000            	jne L_code_ptr_error
  9337 00006E3E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9338 00006E42 53                      	push rbx
  9339 00006E43 FF7508                  	push qword [rbp + 8]
  9340 00006E46 FF7500                  	push qword [rbp]
  9341 00006E49 488B4D18                	mov rcx, [rbp + 3 * 8]
  9342 00006E4D 488B542418              	mov rdx, [rsp + 3 * 8]
  9343 00006E52 488D7204                	lea rsi, [rdx + 4]
  9344 00006E56 4C8D4EFF                	lea r9, [rsi - 1]
  9345 00006E5A 488D7903                	lea rdi, [rcx + 3]
  9346 00006E5E 4D31C0                  	xor r8, r8
  9347                                  .L_tc_recycle_frame_loop_400d:
  9348 00006E61 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9349 00006E65 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9350 00006E6A 49FFC9                  	dec r9
  9351 00006E6D 4D31C0                  	xor r8, r8
  9352 00006E70 48FFCF                  	dec rdi
  9353 00006E73 48FFCE                  	dec rsi
  9354 00006E76 4883FE00                	cmp rsi, 0
  9355 00006E7A 75E5                    	jne .L_tc_recycle_frame_loop_400d
  9356                                  .L_tc_recycle_frame_done_400d:
  9357                                  ;this pop rbp in sot to the right place
  9358 00006E7C 4989C9                  	mov r9, rcx
  9359 00006E7F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9360 00006E87 4C01CC                  	add rsp, r9
  9361 00006E8A 5D                      	pop rbp
  9362 00006E8B 488B4D00                	mov rcx, qword [rbp]
  9363 00006E8F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9364 00006E93 FFE3                    	jmp rbx
  9365                                  
  9366 00006E95 E9A6010000                      	jmp .L_if_end_47e1
  9367                                  
  9368                                          	.L_if_else_47e1:
  9369 00006E9A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9370 00006E9E 50                      	push rax
  9371 00006E9F 48B8-                   	mov rax,L_constants + 32
  9371 00006EA1 [2000000000000000] 
  9372 00006EA9 50                      	push rax
  9373 00006EAA 488B0425[08030000]      	mov rax, qword [free_var_97]
  9374 00006EB2 50                      	push rax
  9375 00006EB3 6A03                    	push 3
  9376 00006EB5 488B0425[F8020000]      	mov rax, qword [free_var_95]
  9377                                  	assert_closure(rax)
    42 00006EBD 803805              <1>  cmp byte [%1], %2
    43 00006EC0 0F85FCC70000        <1>  jne L_error_incorrect_type
  9378 00006EC6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9379 00006EC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9380 00006ECC 50                      	push rax
  9381 00006ECD 6A01                    	push 1
  9382 00006ECF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9383 00006ED4 E8F5AF0000              	call malloc
  9384 00006ED9 50                      	push rax
  9385 00006EDA BF10000000              	mov rdi, 8 * 2	; new rib
  9386 00006EDF E8EAAF0000              	call malloc
  9387 00006EE4 50                      	push rax
  9388 00006EE5 BF20000000              	mov rdi, 8 * 4	; extended env
  9389 00006EEA E8DFAF0000              	call malloc
  9390 00006EEF 488B7D10                	mov rdi, ENV
  9391 00006EF3 BE00000000              	mov rsi, 0
  9392 00006EF8 BA01000000              	mov rdx, 1
  9393                                  .L_lambda_simple_env_loop_3765:	; ext_env[i + 1] <-- env[i]
  9394 00006EFD 4883FE03                	cmp rsi, 3
  9395 00006F01 7410                    	je .L_lambda_simple_env_end_3765
  9396 00006F03 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9397 00006F07 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9398 00006F0B 48FFC6                  	inc rsi
  9399 00006F0E 48FFC2                  	inc rdx
  9400 00006F11 EBEA                    	jmp .L_lambda_simple_env_loop_3765
  9401                                  .L_lambda_simple_env_end_3765:
  9402 00006F13 5B                      	pop rbx
  9403 00006F14 BE00000000              	mov rsi, 0
  9404                                  .L_lambda_simple_params_loop_3765:	; copy params
  9405 00006F19 4883FE02                	cmp rsi, 2
  9406 00006F1D 740E                    	je .L_lambda_simple_params_end_3765
  9407 00006F1F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9408 00006F24 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9409 00006F28 48FFC6                  	inc rsi
  9410 00006F2B EBEC                    	jmp .L_lambda_simple_params_loop_3765
  9411                                  .L_lambda_simple_params_end_3765:
  9412 00006F2D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9413 00006F30 4889C3                  	mov rbx, rax
  9414 00006F33 58                      	pop rax
  9415 00006F34 C60005                  	mov byte [rax], T_closure
  9416 00006F37 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9417 00006F3B 48C74009[486F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3765
  9418 00006F43 E998000000              	jmp .L_lambda_simple_end_3765
  9419                                  .L_lambda_simple_code_3765:	; lambda-simple body
  9420 00006F48 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9421 00006F4E 740B                    	je .L_lambda_simple_arity_check_ok_3765
  9422 00006F50 FF742410                	push qword [rsp + 8 * 2]
  9423 00006F54 6A01                    	push 1
  9424 00006F56 E92CAF0000              	jmp L_error_incorrect_arity_simple
  9425                                  .L_lambda_simple_arity_check_ok_3765:
  9426 00006F5B C8000000                	enter 0, 0
  9427 00006F5F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9428 00006F63 50                      	push rax
  9429 00006F64 488B4510                	mov rax, qword [rbp + 8 * 2]
  9430                                  
  9431 00006F68 488B00                                            	mov rax, qword[rax + 8 * 0]
  9432                                  
  9433 00006F6B 488B00                                            	mov rax, qword[rax + 8 * 0]
  9434 00006F6E 50                      	push rax
  9435 00006F6F 6A02                    	push 2
  9436 00006F71 488B4510                	mov rax, qword [rbp + 8 * 2]
  9437                                  
  9438 00006F75 488B4008                                          	mov rax, qword[rax + 8 * 1]
  9439                                  
  9440 00006F79 488B00                                            	mov rax, qword[rax + 8 * 0]
  9441                                  .L_applic_TC_400b:
  9442 00006F7C 803805                  	cmp byte [rax], T_closure
  9443 00006F7F 0F85FEBE0000            	jne L_code_ptr_error
  9444 00006F85 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9445 00006F89 53                      	push rbx
  9446 00006F8A FF7508                  	push qword [rbp + 8]
  9447 00006F8D FF7500                  	push qword [rbp]
  9448 00006F90 488B4D18                	mov rcx, [rbp + 3 * 8]
  9449 00006F94 488B542418              	mov rdx, [rsp + 3 * 8]
  9450 00006F99 488D7204                	lea rsi, [rdx + 4]
  9451 00006F9D 4C8D4EFF                	lea r9, [rsi - 1]
  9452 00006FA1 488D7903                	lea rdi, [rcx + 3]
  9453 00006FA5 4D31C0                  	xor r8, r8
  9454                                  .L_tc_recycle_frame_loop_400b:
  9455 00006FA8 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9456 00006FAC 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9457 00006FB1 49FFC9                  	dec r9
  9458 00006FB4 4D31C0                  	xor r8, r8
  9459 00006FB7 48FFCF                  	dec rdi
  9460 00006FBA 48FFCE                  	dec rsi
  9461 00006FBD 4883FE00                	cmp rsi, 0
  9462 00006FC1 75E5                    	jne .L_tc_recycle_frame_loop_400b
  9463                                  .L_tc_recycle_frame_done_400b:
  9464                                  ;this pop rbp in sot to the right place
  9465 00006FC3 4989C9                  	mov r9, rcx
  9466 00006FC6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9467 00006FCE 4C01CC                  	add rsp, r9
  9468 00006FD1 5D                      	pop rbp
  9469 00006FD2 488B4D00                	mov rcx, qword [rbp]
  9470 00006FD6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9471 00006FDA FFE3                    	jmp rbx
  9472 00006FDC C9                      	leave
  9473 00006FDD C21800                  	ret 8 * (2 + 1)
  9474                                  .L_lambda_simple_end_3765:	; new closure is in rax
  9475                                  .L_applic_TC_400c:
  9476 00006FE0 803805                  	cmp byte [rax], T_closure
  9477 00006FE3 0F859ABE0000            	jne L_code_ptr_error
  9478 00006FE9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9479 00006FED 53                      	push rbx
  9480 00006FEE FF7508                  	push qword [rbp + 8]
  9481 00006FF1 FF7500                  	push qword [rbp]
  9482 00006FF4 488B4D18                	mov rcx, [rbp + 3 * 8]
  9483 00006FF8 488B542418              	mov rdx, [rsp + 3 * 8]
  9484 00006FFD 488D7204                	lea rsi, [rdx + 4]
  9485 00007001 4C8D4EFF                	lea r9, [rsi - 1]
  9486 00007005 488D7903                	lea rdi, [rcx + 3]
  9487 00007009 4D31C0                  	xor r8, r8
  9488                                  .L_tc_recycle_frame_loop_400c:
  9489 0000700C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9490 00007010 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9491 00007015 49FFC9                  	dec r9
  9492 00007018 4D31C0                  	xor r8, r8
  9493 0000701B 48FFCF                  	dec rdi
  9494 0000701E 48FFCE                  	dec rsi
  9495 00007021 4883FE00                	cmp rsi, 0
  9496 00007025 75E5                    	jne .L_tc_recycle_frame_loop_400c
  9497                                  .L_tc_recycle_frame_done_400c:
  9498                                  ;this pop rbp in sot to the right place
  9499 00007027 4989C9                  	mov r9, rcx
  9500 0000702A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9501 00007032 4C01CC                  	add rsp, r9
  9502 00007035 5D                      	pop rbp
  9503 00007036 488B4D00                	mov rcx, qword [rbp]
  9504 0000703A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9505 0000703E FFE3                    	jmp rbx
  9506                                  
  9507                                          	.L_if_end_47e1:
  9508 00007040 C9                      	leave
  9509 00007041 C22000                  	ret 8 * (2 + 2)
  9510                                  .L_lambda_opt_end_0884:	; new closure is in rax
  9511 00007044 C9                      	leave
  9512 00007045 C21800                  	ret 8 * (2 + 1)
  9513                                  .L_lambda_simple_end_3764:	; new closure is in rax
  9514                                  .L_applic_TC_400e:
  9515 00007048 803805                  	cmp byte [rax], T_closure
  9516 0000704B 0F8532BE0000            	jne L_code_ptr_error
  9517 00007051 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9518 00007055 53                      	push rbx
  9519 00007056 FF7508                  	push qword [rbp + 8]
  9520 00007059 FF7500                  	push qword [rbp]
  9521 0000705C 488B4D18                	mov rcx, [rbp + 3 * 8]
  9522 00007060 488B542418              	mov rdx, [rsp + 3 * 8]
  9523 00007065 488D7204                	lea rsi, [rdx + 4]
  9524 00007069 4C8D4EFF                	lea r9, [rsi - 1]
  9525 0000706D 488D7903                	lea rdi, [rcx + 3]
  9526 00007071 4D31C0                  	xor r8, r8
  9527                                  .L_tc_recycle_frame_loop_400e:
  9528 00007074 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9529 00007078 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9530 0000707D 49FFC9                  	dec r9
  9531 00007080 4D31C0                  	xor r8, r8
  9532 00007083 48FFCF                  	dec rdi
  9533 00007086 48FFCE                  	dec rsi
  9534 00007089 4883FE00                	cmp rsi, 0
  9535 0000708D 75E5                    	jne .L_tc_recycle_frame_loop_400e
  9536                                  .L_tc_recycle_frame_done_400e:
  9537                                  ;this pop rbp in sot to the right place
  9538 0000708F 4989C9                  	mov r9, rcx
  9539 00007092 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9540 0000709A 4C01CC                  	add rsp, r9
  9541 0000709D 5D                      	pop rbp
  9542 0000709E 488B4D00                	mov rcx, qword [rbp]
  9543 000070A2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9544 000070A6 FFE3                    	jmp rbx
  9545 000070A8 C9                      	leave
  9546 000070A9 C21800                  	ret 8 * (2 + 1)
  9547                                  .L_lambda_simple_end_3762:	; new closure is in rax
  9548                                  	assert_closure(rax)
    42 000070AC 803805              <1>  cmp byte [%1], %2
    43 000070AF 0F850DC60000        <1>  jne L_error_incorrect_type
  9549 000070B5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9550 000070B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9551 000070BB 48890425[10030000]      	mov qword [free_var_98], rax
  9552 000070C3 48B8-                   	mov rax, sob_void
  9552 000070C5 [0000000000000000] 
  9553                                  
  9554 000070CD 4889C7                  	mov rdi, rax
  9555 000070D0 E80AAE0000              	call print_sexpr_if_not_void
  9556                                  
  9557 000070D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9558 000070DA E8EFAD0000              	call malloc
  9559 000070DF 50                      	push rax
  9560 000070E0 BF00000000              	mov rdi, 8 * 0	; new rib
  9561 000070E5 E8E4AD0000              	call malloc
  9562 000070EA 50                      	push rax
  9563 000070EB BF08000000              	mov rdi, 8 * 1	; extended env
  9564 000070F0 E8D9AD0000              	call malloc
  9565 000070F5 488B7D10                	mov rdi, ENV
  9566 000070F9 BE00000000              	mov rsi, 0
  9567 000070FE BA01000000              	mov rdx, 1
  9568                                  .L_lambda_simple_env_loop_3766:	; ext_env[i + 1] <-- env[i]
  9569 00007103 4883FE00                	cmp rsi, 0
  9570 00007107 7410                    	je .L_lambda_simple_env_end_3766
  9571 00007109 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9572 0000710D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9573 00007111 48FFC6                  	inc rsi
  9574 00007114 48FFC2                  	inc rdx
  9575 00007117 EBEA                    	jmp .L_lambda_simple_env_loop_3766
  9576                                  .L_lambda_simple_env_end_3766:
  9577 00007119 5B                      	pop rbx
  9578 0000711A BE00000000              	mov rsi, 0
  9579                                  .L_lambda_simple_params_loop_3766:	; copy params
  9580 0000711F 4883FE00                	cmp rsi, 0
  9581 00007123 740E                    	je .L_lambda_simple_params_end_3766
  9582 00007125 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9583 0000712A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9584 0000712E 48FFC6                  	inc rsi
  9585 00007131 EBEC                    	jmp .L_lambda_simple_params_loop_3766
  9586                                  .L_lambda_simple_params_end_3766:
  9587 00007133 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9588 00007136 4889C3                  	mov rbx, rax
  9589 00007139 58                      	pop rax
  9590 0000713A C60005                  	mov byte [rax], T_closure
  9591 0000713D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9592 00007141 48C74009[4E710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3766
  9593 00007149 E99B000000              	jmp .L_lambda_simple_end_3766
  9594                                  .L_lambda_simple_code_3766:	; lambda-simple body
  9595 0000714E 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9596 00007154 740B                    	je .L_lambda_simple_arity_check_ok_3766
  9597 00007156 FF742410                	push qword [rsp + 8 * 2]
  9598 0000715A 6A00                    	push 0
  9599 0000715C E926AD0000              	jmp L_error_incorrect_arity_simple
  9600                                  .L_lambda_simple_arity_check_ok_3766:
  9601 00007161 C8000000                	enter 0, 0
  9602 00007165 48B8-                   	mov rax,L_constants + 68
  9602 00007167 [4400000000000000] 
  9603 0000716F 50                      	push rax
  9604 00007170 48B8-                   	mov rax,L_constants + 155
  9604 00007172 [9B00000000000000] 
  9605 0000717A 50                      	push rax
  9606 0000717B 6A02                    	push 2
  9607 0000717D 488B0425[30010000]      	mov rax, qword [free_var_38]
  9608                                  .L_applic_TC_400f:
  9609 00007185 803805                  	cmp byte [rax], T_closure
  9610 00007188 0F85F5BC0000            	jne L_code_ptr_error
  9611 0000718E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9612 00007192 53                      	push rbx
  9613 00007193 FF7508                  	push qword [rbp + 8]
  9614 00007196 FF7500                  	push qword [rbp]
  9615 00007199 488B4D18                	mov rcx, [rbp + 3 * 8]
  9616 0000719D 488B542418              	mov rdx, [rsp + 3 * 8]
  9617 000071A2 488D7204                	lea rsi, [rdx + 4]
  9618 000071A6 4C8D4EFF                	lea r9, [rsi - 1]
  9619 000071AA 488D7903                	lea rdi, [rcx + 3]
  9620 000071AE 4D31C0                  	xor r8, r8
  9621                                  .L_tc_recycle_frame_loop_400f:
  9622 000071B1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9623 000071B5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9624 000071BA 49FFC9                  	dec r9
  9625 000071BD 4D31C0                  	xor r8, r8
  9626 000071C0 48FFCF                  	dec rdi
  9627 000071C3 48FFCE                  	dec rsi
  9628 000071C6 4883FE00                	cmp rsi, 0
  9629 000071CA 75E5                    	jne .L_tc_recycle_frame_loop_400f
  9630                                  .L_tc_recycle_frame_done_400f:
  9631                                  ;this pop rbp in sot to the right place
  9632 000071CC 4989C9                  	mov r9, rcx
  9633 000071CF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9634 000071D7 4C01CC                  	add rsp, r9
  9635 000071DA 5D                      	pop rbp
  9636 000071DB 488B4D00                	mov rcx, qword [rbp]
  9637 000071DF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9638 000071E3 FFE3                    	jmp rbx
  9639 000071E5 C9                      	leave
  9640 000071E6 C21000                  	ret 8 * (2 + 0)
  9641                                  .L_lambda_simple_end_3766:	; new closure is in rax
  9642 000071E9 50                      	push rax
  9643 000071EA 6A01                    	push 1
  9644 000071EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9645 000071F1 E8D8AC0000              	call malloc
  9646 000071F6 50                      	push rax
  9647 000071F7 BF00000000              	mov rdi, 8 * 0	; new rib
  9648 000071FC E8CDAC0000              	call malloc
  9649 00007201 50                      	push rax
  9650 00007202 BF08000000              	mov rdi, 8 * 1	; extended env
  9651 00007207 E8C2AC0000              	call malloc
  9652 0000720C 488B7D10                	mov rdi, ENV
  9653 00007210 BE00000000              	mov rsi, 0
  9654 00007215 BA01000000              	mov rdx, 1
  9655                                  .L_lambda_simple_env_loop_3767:	; ext_env[i + 1] <-- env[i]
  9656 0000721A 4883FE00                	cmp rsi, 0
  9657 0000721E 7410                    	je .L_lambda_simple_env_end_3767
  9658 00007220 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9659 00007224 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9660 00007228 48FFC6                  	inc rsi
  9661 0000722B 48FFC2                  	inc rdx
  9662 0000722E EBEA                    	jmp .L_lambda_simple_env_loop_3767
  9663                                  .L_lambda_simple_env_end_3767:
  9664 00007230 5B                      	pop rbx
  9665 00007231 BE00000000              	mov rsi, 0
  9666                                  .L_lambda_simple_params_loop_3767:	; copy params
  9667 00007236 4883FE00                	cmp rsi, 0
  9668 0000723A 740E                    	je .L_lambda_simple_params_end_3767
  9669 0000723C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9670 00007241 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9671 00007245 48FFC6                  	inc rsi
  9672 00007248 EBEC                    	jmp .L_lambda_simple_params_loop_3767
  9673                                  .L_lambda_simple_params_end_3767:
  9674 0000724A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9675 0000724D 4889C3                  	mov rbx, rax
  9676 00007250 58                      	pop rax
  9677 00007251 C60005                  	mov byte [rax], T_closure
  9678 00007254 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9679 00007258 48C74009[65720000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3767
  9680 00007260 E902080000              	jmp .L_lambda_simple_end_3767
  9681                                  .L_lambda_simple_code_3767:	; lambda-simple body
  9682 00007265 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9683 0000726B 740B                    	je .L_lambda_simple_arity_check_ok_3767
  9684 0000726D FF742410                	push qword [rsp + 8 * 2]
  9685 00007271 6A01                    	push 1
  9686 00007273 E90FAC0000              	jmp L_error_incorrect_arity_simple
  9687                                  .L_lambda_simple_arity_check_ok_3767:
  9688 00007278 C8000000                	enter 0, 0
  9689 0000727C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9690 00007281 E848AC0000              	call malloc
  9691 00007286 50                      	push rax
  9692 00007287 BF08000000              	mov rdi, 8 * 1	; new rib
  9693 0000728C E83DAC0000              	call malloc
  9694 00007291 50                      	push rax
  9695 00007292 BF10000000              	mov rdi, 8 * 2	; extended env
  9696 00007297 E832AC0000              	call malloc
  9697 0000729C 488B7D10                	mov rdi, ENV
  9698 000072A0 BE00000000              	mov rsi, 0
  9699 000072A5 BA01000000              	mov rdx, 1
  9700                                  .L_lambda_simple_env_loop_3768:	; ext_env[i + 1] <-- env[i]
  9701 000072AA 4883FE01                	cmp rsi, 1
  9702 000072AE 7410                    	je .L_lambda_simple_env_end_3768
  9703 000072B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9704 000072B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9705 000072B8 48FFC6                  	inc rsi
  9706 000072BB 48FFC2                  	inc rdx
  9707 000072BE EBEA                    	jmp .L_lambda_simple_env_loop_3768
  9708                                  .L_lambda_simple_env_end_3768:
  9709 000072C0 5B                      	pop rbx
  9710 000072C1 BE00000000              	mov rsi, 0
  9711                                  .L_lambda_simple_params_loop_3768:	; copy params
  9712 000072C6 4883FE01                	cmp rsi, 1
  9713 000072CA 740E                    	je .L_lambda_simple_params_end_3768
  9714 000072CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9715 000072D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9716 000072D5 48FFC6                  	inc rsi
  9717 000072D8 EBEC                    	jmp .L_lambda_simple_params_loop_3768
  9718                                  .L_lambda_simple_params_end_3768:
  9719 000072DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9720 000072DD 4889C3                  	mov rbx, rax
  9721 000072E0 58                      	pop rax
  9722 000072E1 C60005                  	mov byte [rax], T_closure
  9723 000072E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9724 000072E8 48C74009[F5720000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3768
  9725 000072F0 E96C040000              	jmp .L_lambda_simple_end_3768
  9726                                  .L_lambda_simple_code_3768:	; lambda-simple body
  9727 000072F5 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9728 000072FB 740B                    	je .L_lambda_simple_arity_check_ok_3768
  9729 000072FD FF742410                	push qword [rsp + 8 * 2]
  9730 00007301 6A02                    	push 2
  9731 00007303 E97FAB0000              	jmp L_error_incorrect_arity_simple
  9732                                  .L_lambda_simple_arity_check_ok_3768:
  9733 00007308 C8000000                	enter 0, 0
  9734 0000730C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9735 00007310 50                      	push rax
  9736 00007311 6A01                    	push 1
  9737 00007313 488B0425[48000000]      	mov rax, qword [free_var_9]
  9738                                  	assert_closure(rax)
    42 0000731B 803805              <1>  cmp byte [%1], %2
    43 0000731E 0F859EC30000        <1>  jne L_error_incorrect_type
  9739 00007324 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9740 00007327 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9741                                  
  9742 0000732A 483D[02000000]                  	cmp rax, sob_boolean_false
  9743                                  
  9744 00007330 0F84CA010000                    	je .L_if_else_47e2
  9745 00007336 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9746 0000733A 50                      	push rax
  9747 0000733B 6A01                    	push 1
  9748 0000733D 488B0425[48000000]      	mov rax, qword [free_var_9]
  9749                                  	assert_closure(rax)
    42 00007345 803805              <1>  cmp byte [%1], %2
    43 00007348 0F8574C30000        <1>  jne L_error_incorrect_type
  9750 0000734E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9751 00007351 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9752                                  
  9753 00007354 483D[02000000]                  	cmp rax, sob_boolean_false
  9754                                  
  9755 0000735A 7479                            	je .L_if_else_47e6
  9756 0000735C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9757 00007360 50                      	push rax
  9758 00007361 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9759 00007365 50                      	push rax
  9760 00007366 6A02                    	push 2
  9761 00007368 488B0425[20010000]      	mov rax, qword [free_var_36]
  9762                                  .L_applic_TC_4016:
  9763 00007370 803805                  	cmp byte [rax], T_closure
  9764 00007373 0F850ABB0000            	jne L_code_ptr_error
  9765 00007379 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9766 0000737D 53                      	push rbx
  9767 0000737E FF7508                  	push qword [rbp + 8]
  9768 00007381 FF7500                  	push qword [rbp]
  9769 00007384 488B4D18                	mov rcx, [rbp + 3 * 8]
  9770 00007388 488B542418              	mov rdx, [rsp + 3 * 8]
  9771 0000738D 488D7204                	lea rsi, [rdx + 4]
  9772 00007391 4C8D4EFF                	lea r9, [rsi - 1]
  9773 00007395 488D7903                	lea rdi, [rcx + 3]
  9774 00007399 4D31C0                  	xor r8, r8
  9775                                  .L_tc_recycle_frame_loop_4016:
  9776 0000739C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9777 000073A0 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9778 000073A5 49FFC9                  	dec r9
  9779 000073A8 4D31C0                  	xor r8, r8
  9780 000073AB 48FFCF                  	dec rdi
  9781 000073AE 48FFCE                  	dec rsi
  9782 000073B1 4883FE00                	cmp rsi, 0
  9783 000073B5 75E5                    	jne .L_tc_recycle_frame_loop_4016
  9784                                  .L_tc_recycle_frame_done_4016:
  9785                                  ;this pop rbp in sot to the right place
  9786 000073B7 4989C9                  	mov r9, rcx
  9787 000073BA 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9788 000073C2 4C01CC                  	add rsp, r9
  9789 000073C5 5D                      	pop rbp
  9790 000073C6 488B4D00                	mov rcx, qword [rbp]
  9791 000073CA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9792 000073CE FFE3                    	jmp rbx
  9793                                  
  9794 000073D0 E926010000                      	jmp .L_if_end_47e6
  9795                                  
  9796                                          	.L_if_else_47e6:
  9797 000073D5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9798 000073D9 50                      	push rax
  9799 000073DA 6A01                    	push 1
  9800 000073DC 488B0425[40000000]      	mov rax, qword [free_var_8]
  9801                                  	assert_closure(rax)
    42 000073E4 803805              <1>  cmp byte [%1], %2
    43 000073E7 0F85D5C20000        <1>  jne L_error_incorrect_type
  9802 000073ED FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9803 000073F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9804                                  
  9805 000073F3 483D[02000000]                  	cmp rax, sob_boolean_false
  9806                                  
  9807 000073F9 0F8490000000                    	je .L_if_else_47e7
  9808 000073FF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9809 00007403 50                      	push rax
  9810 00007404 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9811 00007408 50                      	push rax
  9812 00007409 6A01                    	push 1
  9813 0000740B 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9814                                  	assert_closure(rax)
    42 00007413 803805              <1>  cmp byte [%1], %2
    43 00007416 0F85A6C20000        <1>  jne L_error_incorrect_type
  9815 0000741C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9816 0000741F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9817 00007422 50                      	push rax
  9818 00007423 6A02                    	push 2
  9819 00007425 488B0425[00010000]      	mov rax, qword [free_var_32]
  9820                                  .L_applic_TC_4015:
  9821 0000742D 803805                  	cmp byte [rax], T_closure
  9822 00007430 0F854DBA0000            	jne L_code_ptr_error
  9823 00007436 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9824 0000743A 53                      	push rbx
  9825 0000743B FF7508                  	push qword [rbp + 8]
  9826 0000743E FF7500                  	push qword [rbp]
  9827 00007441 488B4D18                	mov rcx, [rbp + 3 * 8]
  9828 00007445 488B542418              	mov rdx, [rsp + 3 * 8]
  9829 0000744A 488D7204                	lea rsi, [rdx + 4]
  9830 0000744E 4C8D4EFF                	lea r9, [rsi - 1]
  9831 00007452 488D7903                	lea rdi, [rcx + 3]
  9832 00007456 4D31C0                  	xor r8, r8
  9833                                  .L_tc_recycle_frame_loop_4015:
  9834 00007459 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9835 0000745D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9836 00007462 49FFC9                  	dec r9
  9837 00007465 4D31C0                  	xor r8, r8
  9838 00007468 48FFCF                  	dec rdi
  9839 0000746B 48FFCE                  	dec rsi
  9840 0000746E 4883FE00                	cmp rsi, 0
  9841 00007472 75E5                    	jne .L_tc_recycle_frame_loop_4015
  9842                                  .L_tc_recycle_frame_done_4015:
  9843                                  ;this pop rbp in sot to the right place
  9844 00007474 4989C9                  	mov r9, rcx
  9845 00007477 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9846 0000747F 4C01CC                  	add rsp, r9
  9847 00007482 5D                      	pop rbp
  9848 00007483 488B4D00                	mov rcx, qword [rbp]
  9849 00007487 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9850 0000748B FFE3                    	jmp rbx
  9851                                  
  9852 0000748D EB6C                            	jmp .L_if_end_47e7
  9853                                  
  9854                                          	.L_if_else_47e7:
  9855 0000748F 6A00                    	push 0
  9856 00007491 488B4510                	mov rax, qword [rbp + 8 * 2]
  9857                                  
  9858 00007495 488B00                                            	mov rax, qword[rax + 8 * 0]
  9859                                  
  9860 00007498 488B00                                            	mov rax, qword[rax + 8 * 0]
  9861                                  .L_applic_TC_4014:
  9862 0000749B 803805                  	cmp byte [rax], T_closure
  9863 0000749E 0F85DFB90000            	jne L_code_ptr_error
  9864 000074A4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9865 000074A8 53                      	push rbx
  9866 000074A9 FF7508                  	push qword [rbp + 8]
  9867 000074AC FF7500                  	push qword [rbp]
  9868 000074AF 488B4D18                	mov rcx, [rbp + 3 * 8]
  9869 000074B3 488B542418              	mov rdx, [rsp + 3 * 8]
  9870 000074B8 488D7204                	lea rsi, [rdx + 4]
  9871 000074BC 4C8D4EFF                	lea r9, [rsi - 1]
  9872 000074C0 488D7903                	lea rdi, [rcx + 3]
  9873 000074C4 4D31C0                  	xor r8, r8
  9874                                  .L_tc_recycle_frame_loop_4014:
  9875 000074C7 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9876 000074CB 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9877 000074D0 49FFC9                  	dec r9
  9878 000074D3 4D31C0                  	xor r8, r8
  9879 000074D6 48FFCF                  	dec rdi
  9880 000074D9 48FFCE                  	dec rsi
  9881 000074DC 4883FE00                	cmp rsi, 0
  9882 000074E0 75E5                    	jne .L_tc_recycle_frame_loop_4014
  9883                                  .L_tc_recycle_frame_done_4014:
  9884                                  ;this pop rbp in sot to the right place
  9885 000074E2 4989C9                  	mov r9, rcx
  9886 000074E5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9887 000074ED 4C01CC                  	add rsp, r9
  9888 000074F0 5D                      	pop rbp
  9889 000074F1 488B4D00                	mov rcx, qword [rbp]
  9890 000074F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9891 000074F9 FFE3                    	jmp rbx
  9892                                  
  9893                                          	.L_if_end_47e7:
  9894                                  
  9895                                          	.L_if_end_47e6:
  9896                                  
  9897 000074FB E95D020000                      	jmp .L_if_end_47e2
  9898                                  
  9899                                          	.L_if_else_47e2:
  9900 00007500 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9901 00007504 50                      	push rax
  9902 00007505 6A01                    	push 1
  9903 00007507 488B0425[40000000]      	mov rax, qword [free_var_8]
  9904                                  	assert_closure(rax)
    42 0000750F 803805              <1>  cmp byte [%1], %2
    43 00007512 0F85AAC10000        <1>  jne L_error_incorrect_type
  9905 00007518 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9906 0000751B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9907                                  
  9908 0000751E 483D[02000000]                  	cmp rax, sob_boolean_false
  9909                                  
  9910 00007524 0F84C7010000                    	je .L_if_else_47e3
  9911 0000752A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9912 0000752E 50                      	push rax
  9913 0000752F 6A01                    	push 1
  9914 00007531 488B0425[48000000]      	mov rax, qword [free_var_9]
  9915                                  	assert_closure(rax)
    42 00007539 803805              <1>  cmp byte [%1], %2
    43 0000753C 0F8580C10000        <1>  jne L_error_incorrect_type
  9916 00007542 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9917 00007545 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9918                                  
  9919 00007548 483D[02000000]                  	cmp rax, sob_boolean_false
  9920                                  
  9921 0000754E 0F8493000000                    	je .L_if_else_47e4
  9922 00007554 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9923 00007558 50                      	push rax
  9924 00007559 6A01                    	push 1
  9925 0000755B 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9926                                  	assert_closure(rax)
    42 00007563 803805              <1>  cmp byte [%1], %2
    43 00007566 0F8556C10000        <1>  jne L_error_incorrect_type
  9927 0000756C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9928 0000756F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9929 00007572 50                      	push rax
  9930 00007573 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9931 00007577 50                      	push rax
  9932 00007578 6A02                    	push 2
  9933 0000757A 488B0425[00010000]      	mov rax, qword [free_var_32]
  9934                                  .L_applic_TC_4013:
  9935 00007582 803805                  	cmp byte [rax], T_closure
  9936 00007585 0F85F8B80000            	jne L_code_ptr_error
  9937 0000758B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9938 0000758F 53                      	push rbx
  9939 00007590 FF7508                  	push qword [rbp + 8]
  9940 00007593 FF7500                  	push qword [rbp]
  9941 00007596 488B4D18                	mov rcx, [rbp + 3 * 8]
  9942 0000759A 488B542418              	mov rdx, [rsp + 3 * 8]
  9943 0000759F 488D7204                	lea rsi, [rdx + 4]
  9944 000075A3 4C8D4EFF                	lea r9, [rsi - 1]
  9945 000075A7 488D7903                	lea rdi, [rcx + 3]
  9946 000075AB 4D31C0                  	xor r8, r8
  9947                                  .L_tc_recycle_frame_loop_4013:
  9948 000075AE 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9949 000075B2 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9950 000075B7 49FFC9                  	dec r9
  9951 000075BA 4D31C0                  	xor r8, r8
  9952 000075BD 48FFCF                  	dec rdi
  9953 000075C0 48FFCE                  	dec rsi
  9954 000075C3 4883FE00                	cmp rsi, 0
  9955 000075C7 75E5                    	jne .L_tc_recycle_frame_loop_4013
  9956                                  .L_tc_recycle_frame_done_4013:
  9957                                  ;this pop rbp in sot to the right place
  9958 000075C9 4989C9                  	mov r9, rcx
  9959 000075CC 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9960 000075D4 4C01CC                  	add rsp, r9
  9961 000075D7 5D                      	pop rbp
  9962 000075D8 488B4D00                	mov rcx, qword [rbp]
  9963 000075DC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9964 000075E0 FFE3                    	jmp rbx
  9965                                  
  9966 000075E2 E908010000                      	jmp .L_if_end_47e4
  9967                                  
  9968                                          	.L_if_else_47e4:
  9969 000075E7 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9970 000075EB 50                      	push rax
  9971 000075EC 6A01                    	push 1
  9972 000075EE 488B0425[40000000]      	mov rax, qword [free_var_8]
  9973                                  	assert_closure(rax)
    42 000075F6 803805              <1>  cmp byte [%1], %2
    43 000075F9 0F85C3C00000        <1>  jne L_error_incorrect_type
  9974 000075FF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9975 00007602 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9976                                  
  9977 00007605 483D[02000000]                  	cmp rax, sob_boolean_false
  9978                                  
  9979 0000760B 7476                            	je .L_if_else_47e5
  9980 0000760D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9981 00007611 50                      	push rax
  9982 00007612 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9983 00007616 50                      	push rax
  9984 00007617 6A02                    	push 2
  9985 00007619 488B0425[00010000]      	mov rax, qword [free_var_32]
  9986                                  .L_applic_TC_4012:
  9987 00007621 803805                  	cmp byte [rax], T_closure
  9988 00007624 0F8559B80000            	jne L_code_ptr_error
  9989 0000762A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9990 0000762E 53                      	push rbx
  9991 0000762F FF7508                  	push qword [rbp + 8]
  9992 00007632 FF7500                  	push qword [rbp]
  9993 00007635 488B4D18                	mov rcx, [rbp + 3 * 8]
  9994 00007639 488B542418              	mov rdx, [rsp + 3 * 8]
  9995 0000763E 488D7204                	lea rsi, [rdx + 4]
  9996 00007642 4C8D4EFF                	lea r9, [rsi - 1]
  9997 00007646 488D7903                	lea rdi, [rcx + 3]
  9998 0000764A 4D31C0                  	xor r8, r8
  9999                                  .L_tc_recycle_frame_loop_4012:
 10000 0000764D 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10001 00007651 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10002 00007656 49FFC9                  	dec r9
 10003 00007659 4D31C0                  	xor r8, r8
 10004 0000765C 48FFCF                  	dec rdi
 10005 0000765F 48FFCE                  	dec rsi
 10006 00007662 4883FE00                	cmp rsi, 0
 10007 00007666 75E5                    	jne .L_tc_recycle_frame_loop_4012
 10008                                  .L_tc_recycle_frame_done_4012:
 10009                                  ;this pop rbp in sot to the right place
 10010 00007668 4989C9                  	mov r9, rcx
 10011 0000766B 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10012 00007673 4C01CC                  	add rsp, r9
 10013 00007676 5D                      	pop rbp
 10014 00007677 488B4D00                	mov rcx, qword [rbp]
 10015 0000767B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10016 0000767F FFE3                    	jmp rbx
 10017                                  
 10018 00007681 EB6C                            	jmp .L_if_end_47e5
 10019                                  
 10020                                          	.L_if_else_47e5:
 10021 00007683 6A00                    	push 0
 10022 00007685 488B4510                	mov rax, qword [rbp + 8 * 2]
 10023                                  
 10024 00007689 488B00                                            	mov rax, qword[rax + 8 * 0]
 10025                                  
 10026 0000768C 488B00                                            	mov rax, qword[rax + 8 * 0]
 10027                                  .L_applic_TC_4011:
 10028 0000768F 803805                  	cmp byte [rax], T_closure
 10029 00007692 0F85EBB70000            	jne L_code_ptr_error
 10030 00007698 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10031 0000769C 53                      	push rbx
 10032 0000769D FF7508                  	push qword [rbp + 8]
 10033 000076A0 FF7500                  	push qword [rbp]
 10034 000076A3 488B4D18                	mov rcx, [rbp + 3 * 8]
 10035 000076A7 488B542418              	mov rdx, [rsp + 3 * 8]
 10036 000076AC 488D7204                	lea rsi, [rdx + 4]
 10037 000076B0 4C8D4EFF                	lea r9, [rsi - 1]
 10038 000076B4 488D7903                	lea rdi, [rcx + 3]
 10039 000076B8 4D31C0                  	xor r8, r8
 10040                                  .L_tc_recycle_frame_loop_4011:
 10041 000076BB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10042 000076BF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10043 000076C4 49FFC9                  	dec r9
 10044 000076C7 4D31C0                  	xor r8, r8
 10045 000076CA 48FFCF                  	dec rdi
 10046 000076CD 48FFCE                  	dec rsi
 10047 000076D0 4883FE00                	cmp rsi, 0
 10048 000076D4 75E5                    	jne .L_tc_recycle_frame_loop_4011
 10049                                  .L_tc_recycle_frame_done_4011:
 10050                                  ;this pop rbp in sot to the right place
 10051 000076D6 4989C9                  	mov r9, rcx
 10052 000076D9 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10053 000076E1 4C01CC                  	add rsp, r9
 10054 000076E4 5D                      	pop rbp
 10055 000076E5 488B4D00                	mov rcx, qword [rbp]
 10056 000076E9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10057 000076ED FFE3                    	jmp rbx
 10058                                  
 10059                                          	.L_if_end_47e5:
 10060                                  
 10061                                          	.L_if_end_47e4:
 10062                                  
 10063 000076EF EB6C                            	jmp .L_if_end_47e3
 10064                                  
 10065                                          	.L_if_else_47e3:
 10066 000076F1 6A00                    	push 0
 10067 000076F3 488B4510                	mov rax, qword [rbp + 8 * 2]
 10068                                  
 10069 000076F7 488B00                                            	mov rax, qword[rax + 8 * 0]
 10070                                  
 10071 000076FA 488B00                                            	mov rax, qword[rax + 8 * 0]
 10072                                  .L_applic_TC_4010:
 10073 000076FD 803805                  	cmp byte [rax], T_closure
 10074 00007700 0F857DB70000            	jne L_code_ptr_error
 10075 00007706 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10076 0000770A 53                      	push rbx
 10077 0000770B FF7508                  	push qword [rbp + 8]
 10078 0000770E FF7500                  	push qword [rbp]
 10079 00007711 488B4D18                	mov rcx, [rbp + 3 * 8]
 10080 00007715 488B542418              	mov rdx, [rsp + 3 * 8]
 10081 0000771A 488D7204                	lea rsi, [rdx + 4]
 10082 0000771E 4C8D4EFF                	lea r9, [rsi - 1]
 10083 00007722 488D7903                	lea rdi, [rcx + 3]
 10084 00007726 4D31C0                  	xor r8, r8
 10085                                  .L_tc_recycle_frame_loop_4010:
 10086 00007729 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10087 0000772D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10088 00007732 49FFC9                  	dec r9
 10089 00007735 4D31C0                  	xor r8, r8
 10090 00007738 48FFCF                  	dec rdi
 10091 0000773B 48FFCE                  	dec rsi
 10092 0000773E 4883FE00                	cmp rsi, 0
 10093 00007742 75E5                    	jne .L_tc_recycle_frame_loop_4010
 10094                                  .L_tc_recycle_frame_done_4010:
 10095                                  ;this pop rbp in sot to the right place
 10096 00007744 4989C9                  	mov r9, rcx
 10097 00007747 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10098 0000774F 4C01CC                  	add rsp, r9
 10099 00007752 5D                      	pop rbp
 10100 00007753 488B4D00                	mov rcx, qword [rbp]
 10101 00007757 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10102 0000775B FFE3                    	jmp rbx
 10103                                  
 10104                                          	.L_if_end_47e3:
 10105                                  
 10106                                          	.L_if_end_47e2:
 10107 0000775D C9                      	leave
 10108 0000775E C22000                  	ret 8 * (2 + 2)
 10109                                  .L_lambda_simple_end_3768:	; new closure is in rax
 10110 00007761 50                      	push rax
 10111 00007762 6A01                    	push 1
 10112 00007764 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10113 00007769 E860A70000              	call malloc
 10114 0000776E 50                      	push rax
 10115 0000776F BF08000000              	mov rdi, 8 * 1	; new rib
 10116 00007774 E855A70000              	call malloc
 10117 00007779 50                      	push rax
 10118 0000777A BF10000000              	mov rdi, 8 * 2	; extended env
 10119 0000777F E84AA70000              	call malloc
 10120 00007784 488B7D10                	mov rdi, ENV
 10121 00007788 BE00000000              	mov rsi, 0
 10122 0000778D BA01000000              	mov rdx, 1
 10123                                  .L_lambda_simple_env_loop_3769:	; ext_env[i + 1] <-- env[i]
 10124 00007792 4883FE01                	cmp rsi, 1
 10125 00007796 7410                    	je .L_lambda_simple_env_end_3769
 10126 00007798 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10127 0000779C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10128 000077A0 48FFC6                  	inc rsi
 10129 000077A3 48FFC2                  	inc rdx
 10130 000077A6 EBEA                    	jmp .L_lambda_simple_env_loop_3769
 10131                                  .L_lambda_simple_env_end_3769:
 10132 000077A8 5B                      	pop rbx
 10133 000077A9 BE00000000              	mov rsi, 0
 10134                                  .L_lambda_simple_params_loop_3769:	; copy params
 10135 000077AE 4883FE01                	cmp rsi, 1
 10136 000077B2 740E                    	je .L_lambda_simple_params_end_3769
 10137 000077B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10138 000077B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10139 000077BD 48FFC6                  	inc rsi
 10140 000077C0 EBEC                    	jmp .L_lambda_simple_params_loop_3769
 10141                                  .L_lambda_simple_params_end_3769:
 10142 000077C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10143 000077C5 4889C3                  	mov rbx, rax
 10144 000077C8 58                      	pop rax
 10145 000077C9 C60005                  	mov byte [rax], T_closure
 10146 000077CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10147 000077D0 48C74009[DD770000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3769
 10148 000077D8 E926020000              	jmp .L_lambda_simple_end_3769
 10149                                  .L_lambda_simple_code_3769:	; lambda-simple body
 10150 000077DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10151 000077E3 740B                    	je .L_lambda_simple_arity_check_ok_3769
 10152 000077E5 FF742410                	push qword [rsp + 8 * 2]
 10153 000077E9 6A01                    	push 1
 10154 000077EB E997A60000              	jmp L_error_incorrect_arity_simple
 10155                                  .L_lambda_simple_arity_check_ok_3769:
 10156 000077F0 C8000000                	enter 0, 0
 10157 000077F4 BF11000000              	mov rdi, (1 + 8 + 8)
 10158 000077F9 E8D0A60000              	call malloc
 10159 000077FE 50                      	push rax
 10160 000077FF BF08000000              	mov rdi, 8 * 1
 10161 00007804 E8C5A60000              	call malloc
 10162 00007809 50                      	push rax
 10163 0000780A BF18000000              	mov rdi, 8 * 3
 10164 0000780F E8BAA60000              	call malloc
 10165 00007814 488B7D10                	mov rdi, ENV
 10166 00007818 4831F6                  	xor rsi, rsi
 10167 0000781B 4831D2                  	xor rdx, rdx
 10168 0000781E 48FFC2                  	inc rdx
 10169                                  	.L_lambda_opt_env_loop_0885:
 10170                                  
 10171 00007821 4883FE02                        	cmp rsi, 2
 10172                                  
 10173 00007825 7412                            	je .L_lambda_opt_env_end_0885
 10174 00007827 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10175 0000782B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10176 0000782F 4883C201                	add rdx, 1
 10177 00007833 4883C601                	add rsi, 1
 10178 00007837 EBE8                    	jmp .L_lambda_opt_env_loop_0885
 10179                                  
 10180                                          	.L_lambda_opt_env_end_0885:
 10181 00007839 5B                      	pop rbx
 10182 0000783A 4831F6                  	xor rsi, rsi
 10183                                  	.L_lambda_opt_params_loop_0885:
 10184                                  
 10185 0000783D 4883FE01                        	cmp rsi, 1
 10186                                  
 10187 00007841 740F                            	je .L_lambda_opt_params_end_0885
 10188 00007843 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10189 00007848 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10190 0000784C 4883C601                	add rsi, 1
 10191 00007850 EBEB                    	jmp .L_lambda_opt_params_loop_0885
 10192                                  
 10193                                          	.L_lambda_opt_params_end_0885:
 10194 00007852 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 10195 00007855 4889C3                  	mov rbx, rax
 10196 00007858 58                      	pop rax
 10197 00007859 C60005                  	mov byte [rax], T_closure
 10198 0000785C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10199 00007860 48C74009[6D780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0885
 10200                                  
 10201 00007868 E992010000                      	jmp .L_lambda_opt_end_0885
 10202                                  
 10203                                          	.L_lambda_opt_code_0885:
 10204                                  
 10205 0000786D 48837C241000                    	cmp qword [rsp + 8 * 2], 0
 10206                                  
 10207 00007873 740D                            	je .L_lambda_opt_arity_check_exact_0885  ;same num_of_args
 10208                                  
 10209 00007875 7F65                            	jg .L_lambda_opt_arity_check_more_0885  ;greater num_of_args
 10210 00007877 FF742410                	push qword [rsp + 8 * 2]
 10211 0000787B 6A00                    	push 0
 10212 0000787D E919A60000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 10213                                  .L_lambda_opt_arity_check_exact_0885:
 10214 00007882 4883EC08                	sub rsp, 8 * 1
 10215 00007886 488D7F10                	lea rdi, [rdi + (8 * 2)]
 10216 0000788A 4889E7                  	mov rdi, rsp 
 10217 0000788D 488B4708                	mov rax, qword [rdi + 8]
 10218 00007891 488907                  	mov qword [rdi], rax
 10219 00007894 488D7F08                	lea rdi, [rdi + 8]
 10220 00007898 488B4708                	mov rax, qword [rdi + 8]
 10221 0000789C 488907                  	mov qword [rdi], rax
 10222 0000789F 488D7F08                	lea rdi, [rdi + 8]
 10223 000078A3 488B4708                	mov rax, qword [rdi + 8]
 10224 000078A7 4889C1                  	mov rcx, rax
 10225 000078AA 4883C001                	add rax, 1
 10226 000078AE 488907                  	mov qword [rdi], rax
 10227 000078B1 488D7F08                	lea rdi, [rdi + 8]
 10228                                  	.L_lambda_opt_stack_shrink_loop_198d:
 10229 000078B5 4883F900                	cmp rcx, 0
 10230 000078B9 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_198d
 10231 000078BB 4883E901                	sub rcx, 1
 10232 000078BF 488D4010                	lea rax, [rax + (8 * 2)]
 10233 000078C3 488B4708                	mov rax, qword [rdi + 8]
 10234 000078C7 488907                  	mov qword [rdi], rax
 10235 000078CA 488D7F08                	lea rdi, [rdi + 8]
 10236 000078CE EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_198d
 10237                                  
 10238                                          	.L_lambda_opt_stack_shrink_loop_exit_198d:
 10239 000078D0 48C707[01000000]        	mov qword [rdi], sob_nil
 10240 000078D7 E996000000              	jmp .L_lambda_opt_stack_adjusted_0885
 10241                                  
 10242                                          	.L_lambda_opt_arity_check_more_0885:
 10243 000078DC 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 10244 000078E1 488D0E                  	lea rcx, [rsi - 0]
 10245 000078E4 49B8-                   	mov r8, sob_nil
 10245 000078E6 [0100000000000000] 
 10246 000078EE 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 10247 000078F3 4889F2                  	mov rdx, rsi
 10248                                  	.L_lambda_opt_stack_shrink_loop_198e:
 10249 000078F6 4883F900                	cmp rcx, 0
 10250 000078FA 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_198e
 10251 000078FC BF11000000              	mov rdi, 1 + (8 * 2)
 10252 00007901 E8C8A50000              	call malloc
 10253 00007906 C60021                  	mov byte [rax], T_pair
 10254 00007909 488B1E                  	mov rbx, qword [rsi]
 10255 0000790C 48895801                	mov SOB_PAIR_CAR(rax), rbx
 10256 00007910 4C894009                	mov SOB_PAIR_CDR(rax), r8
 10257 00007914 4883C6F8                	add rsi, -8
 10258 00007918 4883E901                	sub rcx, 1
 10259 0000791C 4989C0                  	mov r8, rax
 10260 0000791F EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_198e
 10261                                  
 10262                                          	.L_lambda_opt_stack_shrink_loop_exit_198e:
 10263 00007921 4C8902                  	mov qword [rdx], r8
 10264 00007924 4883EA08                	sub rdx, 8 * 1
 10265 00007928 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
 10266                                  
 10267 0000792D B900000000                      	mov rcx, 0 
 10268                                  
 10269                                          	.L_lambda_opt_stack_shrink_loop_198f:
 10270 00007932 4883F900                	cmp rcx, 0
 10271 00007936 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_198f
 10272 00007938 488B06                  	mov rax, qword [rsi]
 10273 0000793B 488902                  	mov qword [rdx], rax
 10274 0000793E 488D76F8                	lea rsi, [rsi - 8]
 10275 00007942 4883C2F8                	add rdx, -8
 10276 00007946 4883C1FF                	add rcx, -1
 10277 0000794A EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_198f
 10278                                  
 10279                                          	.L_lambda_opt_stack_shrink_loop_exit_198f:
 10280                                  
 10281 0000794C 48C70201000000                  	mov qword [rdx], 1 + 0
 10282 00007953 4883C6F8                	add rsi, -8
 10283 00007957 4883C2F8                	add rdx, -8
 10284 0000795B 488B06                  	mov rax, qword [rsi]
 10285 0000795E 488902                  	mov qword [rdx], rax
 10286 00007961 4883C2F8                	add rdx, -8
 10287 00007965 488D76F8                	lea rsi, [rsi - 8]
 10288 00007969 488B06                  	mov rax, qword [rsi]
 10289 0000796C 488902                  	mov qword [rdx], rax
 10290 0000796F 4889D4                  	mov rsp, rdx
 10291                                  	.L_lambda_opt_stack_adjusted_0885:
 10292 00007972 C8000000                	enter 0, 0
 10293 00007976 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10294 0000797A 50                      	push rax
 10295 0000797B 48B8-                   	mov rax,L_constants + 128
 10295 0000797D [8000000000000000] 
 10296 00007985 50                      	push rax
 10297 00007986 488B4510                	mov rax, qword [rbp + 8 * 2]
 10298                                  
 10299 0000798A 488B00                                            	mov rax, qword[rax + 8 * 0]
 10300                                  
 10301 0000798D 488B00                                            	mov rax, qword[rax + 8 * 0]
 10302 00007990 50                      	push rax
 10303 00007991 6A03                    	push 3
 10304 00007993 488B0425[F8020000]      	mov rax, qword [free_var_95]
 10305                                  .L_applic_TC_4017:
 10306 0000799B 803805                  	cmp byte [rax], T_closure
 10307 0000799E 0F85DFB40000            	jne L_code_ptr_error
 10308 000079A4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10309 000079A8 53                      	push rbx
 10310 000079A9 FF7508                  	push qword [rbp + 8]
 10311 000079AC FF7500                  	push qword [rbp]
 10312 000079AF 488B4D18                	mov rcx, [rbp + 3 * 8]
 10313 000079B3 488B542418              	mov rdx, [rsp + 3 * 8]
 10314 000079B8 488D7204                	lea rsi, [rdx + 4]
 10315 000079BC 4C8D4EFF                	lea r9, [rsi - 1]
 10316 000079C0 488D7903                	lea rdi, [rcx + 3]
 10317 000079C4 4D31C0                  	xor r8, r8
 10318                                  .L_tc_recycle_frame_loop_4017:
 10319 000079C7 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10320 000079CB 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10321 000079D0 49FFC9                  	dec r9
 10322 000079D3 4D31C0                  	xor r8, r8
 10323 000079D6 48FFCF                  	dec rdi
 10324 000079D9 48FFCE                  	dec rsi
 10325 000079DC 4883FE00                	cmp rsi, 0
 10326 000079E0 75E5                    	jne .L_tc_recycle_frame_loop_4017
 10327                                  .L_tc_recycle_frame_done_4017:
 10328                                  ;this pop rbp in sot to the right place
 10329 000079E2 4989C9                  	mov r9, rcx
 10330 000079E5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10331 000079ED 4C01CC                  	add rsp, r9
 10332 000079F0 5D                      	pop rbp
 10333 000079F1 488B4D00                	mov rcx, qword [rbp]
 10334 000079F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10335 000079F9 FFE3                    	jmp rbx
 10336 000079FB C9                      	leave
 10337 000079FC C21800                  	ret 8 * (2 + 1)
 10338                                  .L_lambda_opt_end_0885:	; new closure is in rax
 10339 000079FF C9                      	leave
 10340 00007A00 C21800                  	ret 8 * (2 + 1)
 10341                                  .L_lambda_simple_end_3769:	; new closure is in rax
 10342                                  .L_applic_TC_4018:
 10343 00007A03 803805                  	cmp byte [rax], T_closure
 10344 00007A06 0F8577B40000            	jne L_code_ptr_error
 10345 00007A0C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10346 00007A10 53                      	push rbx
 10347 00007A11 FF7508                  	push qword [rbp + 8]
 10348 00007A14 FF7500                  	push qword [rbp]
 10349 00007A17 488B4D18                	mov rcx, [rbp + 3 * 8]
 10350 00007A1B 488B542418              	mov rdx, [rsp + 3 * 8]
 10351 00007A20 488D7204                	lea rsi, [rdx + 4]
 10352 00007A24 4C8D4EFF                	lea r9, [rsi - 1]
 10353 00007A28 488D7903                	lea rdi, [rcx + 3]
 10354 00007A2C 4D31C0                  	xor r8, r8
 10355                                  .L_tc_recycle_frame_loop_4018:
 10356 00007A2F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10357 00007A33 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10358 00007A38 49FFC9                  	dec r9
 10359 00007A3B 4D31C0                  	xor r8, r8
 10360 00007A3E 48FFCF                  	dec rdi
 10361 00007A41 48FFCE                  	dec rsi
 10362 00007A44 4883FE00                	cmp rsi, 0
 10363 00007A48 75E5                    	jne .L_tc_recycle_frame_loop_4018
 10364                                  .L_tc_recycle_frame_done_4018:
 10365                                  ;this pop rbp in sot to the right place
 10366 00007A4A 4989C9                  	mov r9, rcx
 10367 00007A4D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10368 00007A55 4C01CC                  	add rsp, r9
 10369 00007A58 5D                      	pop rbp
 10370 00007A59 488B4D00                	mov rcx, qword [rbp]
 10371 00007A5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10372 00007A61 FFE3                    	jmp rbx
 10373 00007A63 C9                      	leave
 10374 00007A64 C21800                  	ret 8 * (2 + 1)
 10375                                  .L_lambda_simple_end_3767:	; new closure is in rax
 10376                                  	assert_closure(rax)
    42 00007A67 803805              <1>  cmp byte [%1], %2
    43 00007A6A 0F8552BC0000        <1>  jne L_error_incorrect_type
 10377 00007A70 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10378 00007A73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10379 00007A76 48890425[18030000]      	mov qword [free_var_99], rax
 10380 00007A7E 48B8-                   	mov rax, sob_void
 10380 00007A80 [0000000000000000] 
 10381                                  
 10382 00007A88 4889C7                  	mov rdi, rax
 10383 00007A8B E84FA40000              	call print_sexpr_if_not_void
 10384                                  
 10385 00007A90 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10386 00007A95 E834A40000              	call malloc
 10387 00007A9A 50                      	push rax
 10388 00007A9B BF00000000              	mov rdi, 8 * 0	; new rib
 10389 00007AA0 E829A40000              	call malloc
 10390 00007AA5 50                      	push rax
 10391 00007AA6 BF08000000              	mov rdi, 8 * 1	; extended env
 10392 00007AAB E81EA40000              	call malloc
 10393 00007AB0 488B7D10                	mov rdi, ENV
 10394 00007AB4 BE00000000              	mov rsi, 0
 10395 00007AB9 BA01000000              	mov rdx, 1
 10396                                  .L_lambda_simple_env_loop_376a:	; ext_env[i + 1] <-- env[i]
 10397 00007ABE 4883FE00                	cmp rsi, 0
 10398 00007AC2 7410                    	je .L_lambda_simple_env_end_376a
 10399 00007AC4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10400 00007AC8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10401 00007ACC 48FFC6                  	inc rsi
 10402 00007ACF 48FFC2                  	inc rdx
 10403 00007AD2 EBEA                    	jmp .L_lambda_simple_env_loop_376a
 10404                                  .L_lambda_simple_env_end_376a:
 10405 00007AD4 5B                      	pop rbx
 10406 00007AD5 BE00000000              	mov rsi, 0
 10407                                  .L_lambda_simple_params_loop_376a:	; copy params
 10408 00007ADA 4883FE00                	cmp rsi, 0
 10409 00007ADE 740E                    	je .L_lambda_simple_params_end_376a
 10410 00007AE0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10411 00007AE5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10412 00007AE9 48FFC6                  	inc rsi
 10413 00007AEC EBEC                    	jmp .L_lambda_simple_params_loop_376a
 10414                                  .L_lambda_simple_params_end_376a:
 10415 00007AEE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10416 00007AF1 4889C3                  	mov rbx, rax
 10417 00007AF4 58                      	pop rax
 10418 00007AF5 C60005                  	mov byte [rax], T_closure
 10419 00007AF8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10420 00007AFC 48C74009[097B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_376a
 10421 00007B04 E99B000000              	jmp .L_lambda_simple_end_376a
 10422                                  .L_lambda_simple_code_376a:	; lambda-simple body
 10423 00007B09 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10424 00007B0F 740B                    	je .L_lambda_simple_arity_check_ok_376a
 10425 00007B11 FF742410                	push qword [rsp + 8 * 2]
 10426 00007B15 6A00                    	push 0
 10427 00007B17 E96BA30000              	jmp L_error_incorrect_arity_simple
 10428                                  .L_lambda_simple_arity_check_ok_376a:
 10429 00007B1C C8000000                	enter 0, 0
 10430 00007B20 48B8-                   	mov rax,L_constants + 68
 10430 00007B22 [4400000000000000] 
 10431 00007B2A 50                      	push rax
 10432 00007B2B 48B8-                   	mov rax,L_constants + 174
 10432 00007B2D [AE00000000000000] 
 10433 00007B35 50                      	push rax
 10434 00007B36 6A02                    	push 2
 10435 00007B38 488B0425[30010000]      	mov rax, qword [free_var_38]
 10436                                  .L_applic_TC_4019:
 10437 00007B40 803805                  	cmp byte [rax], T_closure
 10438 00007B43 0F853AB30000            	jne L_code_ptr_error
 10439 00007B49 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10440 00007B4D 53                      	push rbx
 10441 00007B4E FF7508                  	push qword [rbp + 8]
 10442 00007B51 FF7500                  	push qword [rbp]
 10443 00007B54 488B4D18                	mov rcx, [rbp + 3 * 8]
 10444 00007B58 488B542418              	mov rdx, [rsp + 3 * 8]
 10445 00007B5D 488D7204                	lea rsi, [rdx + 4]
 10446 00007B61 4C8D4EFF                	lea r9, [rsi - 1]
 10447 00007B65 488D7903                	lea rdi, [rcx + 3]
 10448 00007B69 4D31C0                  	xor r8, r8
 10449                                  .L_tc_recycle_frame_loop_4019:
 10450 00007B6C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10451 00007B70 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10452 00007B75 49FFC9                  	dec r9
 10453 00007B78 4D31C0                  	xor r8, r8
 10454 00007B7B 48FFCF                  	dec rdi
 10455 00007B7E 48FFCE                  	dec rsi
 10456 00007B81 4883FE00                	cmp rsi, 0
 10457 00007B85 75E5                    	jne .L_tc_recycle_frame_loop_4019
 10458                                  .L_tc_recycle_frame_done_4019:
 10459                                  ;this pop rbp in sot to the right place
 10460 00007B87 4989C9                  	mov r9, rcx
 10461 00007B8A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10462 00007B92 4C01CC                  	add rsp, r9
 10463 00007B95 5D                      	pop rbp
 10464 00007B96 488B4D00                	mov rcx, qword [rbp]
 10465 00007B9A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10466 00007B9E FFE3                    	jmp rbx
 10467 00007BA0 C9                      	leave
 10468 00007BA1 C21000                  	ret 8 * (2 + 0)
 10469                                  .L_lambda_simple_end_376a:	; new closure is in rax
 10470 00007BA4 50                      	push rax
 10471 00007BA5 6A01                    	push 1
 10472 00007BA7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10473 00007BAC E81DA30000              	call malloc
 10474 00007BB1 50                      	push rax
 10475 00007BB2 BF00000000              	mov rdi, 8 * 0	; new rib
 10476 00007BB7 E812A30000              	call malloc
 10477 00007BBC 50                      	push rax
 10478 00007BBD BF08000000              	mov rdi, 8 * 1	; extended env
 10479 00007BC2 E807A30000              	call malloc
 10480 00007BC7 488B7D10                	mov rdi, ENV
 10481 00007BCB BE00000000              	mov rsi, 0
 10482 00007BD0 BA01000000              	mov rdx, 1
 10483                                  .L_lambda_simple_env_loop_376b:	; ext_env[i + 1] <-- env[i]
 10484 00007BD5 4883FE00                	cmp rsi, 0
 10485 00007BD9 7410                    	je .L_lambda_simple_env_end_376b
 10486 00007BDB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10487 00007BDF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10488 00007BE3 48FFC6                  	inc rsi
 10489 00007BE6 48FFC2                  	inc rdx
 10490 00007BE9 EBEA                    	jmp .L_lambda_simple_env_loop_376b
 10491                                  .L_lambda_simple_env_end_376b:
 10492 00007BEB 5B                      	pop rbx
 10493 00007BEC BE00000000              	mov rsi, 0
 10494                                  .L_lambda_simple_params_loop_376b:	; copy params
 10495 00007BF1 4883FE00                	cmp rsi, 0
 10496 00007BF5 740E                    	je .L_lambda_simple_params_end_376b
 10497 00007BF7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10498 00007BFC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10499 00007C00 48FFC6                  	inc rsi
 10500 00007C03 EBEC                    	jmp .L_lambda_simple_params_loop_376b
 10501                                  .L_lambda_simple_params_end_376b:
 10502 00007C05 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10503 00007C08 4889C3                  	mov rbx, rax
 10504 00007C0B 58                      	pop rax
 10505 00007C0C C60005                  	mov byte [rax], T_closure
 10506 00007C0F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10507 00007C13 48C74009[207C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_376b
 10508 00007C1B E9CF090000              	jmp .L_lambda_simple_end_376b
 10509                                  .L_lambda_simple_code_376b:	; lambda-simple body
 10510 00007C20 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10511 00007C26 740B                    	je .L_lambda_simple_arity_check_ok_376b
 10512 00007C28 FF742410                	push qword [rsp + 8 * 2]
 10513 00007C2C 6A01                    	push 1
 10514 00007C2E E954A20000              	jmp L_error_incorrect_arity_simple
 10515                                  .L_lambda_simple_arity_check_ok_376b:
 10516 00007C33 C8000000                	enter 0, 0
 10517 00007C37 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10518 00007C3C E88DA20000              	call malloc
 10519 00007C41 50                      	push rax
 10520 00007C42 BF08000000              	mov rdi, 8 * 1	; new rib
 10521 00007C47 E882A20000              	call malloc
 10522 00007C4C 50                      	push rax
 10523 00007C4D BF10000000              	mov rdi, 8 * 2	; extended env
 10524 00007C52 E877A20000              	call malloc
 10525 00007C57 488B7D10                	mov rdi, ENV
 10526 00007C5B BE00000000              	mov rsi, 0
 10527 00007C60 BA01000000              	mov rdx, 1
 10528                                  .L_lambda_simple_env_loop_376c:	; ext_env[i + 1] <-- env[i]
 10529 00007C65 4883FE01                	cmp rsi, 1
 10530 00007C69 7410                    	je .L_lambda_simple_env_end_376c
 10531 00007C6B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10532 00007C6F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10533 00007C73 48FFC6                  	inc rsi
 10534 00007C76 48FFC2                  	inc rdx
 10535 00007C79 EBEA                    	jmp .L_lambda_simple_env_loop_376c
 10536                                  .L_lambda_simple_env_end_376c:
 10537 00007C7B 5B                      	pop rbx
 10538 00007C7C BE00000000              	mov rsi, 0
 10539                                  .L_lambda_simple_params_loop_376c:	; copy params
 10540 00007C81 4883FE01                	cmp rsi, 1
 10541 00007C85 740E                    	je .L_lambda_simple_params_end_376c
 10542 00007C87 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10543 00007C8C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10544 00007C90 48FFC6                  	inc rsi
 10545 00007C93 EBEC                    	jmp .L_lambda_simple_params_loop_376c
 10546                                  .L_lambda_simple_params_end_376c:
 10547 00007C95 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10548 00007C98 4889C3                  	mov rbx, rax
 10549 00007C9B 58                      	pop rax
 10550 00007C9C C60005                  	mov byte [rax], T_closure
 10551 00007C9F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10552 00007CA3 48C74009[B07C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_376c
 10553 00007CAB E96C040000              	jmp .L_lambda_simple_end_376c
 10554                                  .L_lambda_simple_code_376c:	; lambda-simple body
 10555 00007CB0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10556 00007CB6 740B                    	je .L_lambda_simple_arity_check_ok_376c
 10557 00007CB8 FF742410                	push qword [rsp + 8 * 2]
 10558 00007CBC 6A02                    	push 2
 10559 00007CBE E9C4A10000              	jmp L_error_incorrect_arity_simple
 10560                                  .L_lambda_simple_arity_check_ok_376c:
 10561 00007CC3 C8000000                	enter 0, 0
 10562 00007CC7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10563 00007CCB 50                      	push rax
 10564 00007CCC 6A01                    	push 1
 10565 00007CCE 488B0425[48000000]      	mov rax, qword [free_var_9]
 10566                                  	assert_closure(rax)
    42 00007CD6 803805              <1>  cmp byte [%1], %2
    43 00007CD9 0F85E3B90000        <1>  jne L_error_incorrect_type
 10567 00007CDF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10568 00007CE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10569                                  
 10570 00007CE5 483D[02000000]                  	cmp rax, sob_boolean_false
 10571                                  
 10572 00007CEB 0F84CA010000                    	je .L_if_else_47e8
 10573 00007CF1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10574 00007CF5 50                      	push rax
 10575 00007CF6 6A01                    	push 1
 10576 00007CF8 488B0425[48000000]      	mov rax, qword [free_var_9]
 10577                                  	assert_closure(rax)
    42 00007D00 803805              <1>  cmp byte [%1], %2
    43 00007D03 0F85B9B90000        <1>  jne L_error_incorrect_type
 10578 00007D09 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10579 00007D0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10580                                  
 10581 00007D0F 483D[02000000]                  	cmp rax, sob_boolean_false
 10582                                  
 10583 00007D15 7479                            	je .L_if_else_47ec
 10584 00007D17 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10585 00007D1B 50                      	push rax
 10586 00007D1C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10587 00007D20 50                      	push rax
 10588 00007D21 6A02                    	push 2
 10589 00007D23 488B0425[28010000]      	mov rax, qword [free_var_37]
 10590                                  .L_applic_TC_4020:
 10591 00007D2B 803805                  	cmp byte [rax], T_closure
 10592 00007D2E 0F854FB10000            	jne L_code_ptr_error
 10593 00007D34 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10594 00007D38 53                      	push rbx
 10595 00007D39 FF7508                  	push qword [rbp + 8]
 10596 00007D3C FF7500                  	push qword [rbp]
 10597 00007D3F 488B4D18                	mov rcx, [rbp + 3 * 8]
 10598 00007D43 488B542418              	mov rdx, [rsp + 3 * 8]
 10599 00007D48 488D7204                	lea rsi, [rdx + 4]
 10600 00007D4C 4C8D4EFF                	lea r9, [rsi - 1]
 10601 00007D50 488D7903                	lea rdi, [rcx + 3]
 10602 00007D54 4D31C0                  	xor r8, r8
 10603                                  .L_tc_recycle_frame_loop_4020:
 10604 00007D57 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10605 00007D5B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10606 00007D60 49FFC9                  	dec r9
 10607 00007D63 4D31C0                  	xor r8, r8
 10608 00007D66 48FFCF                  	dec rdi
 10609 00007D69 48FFCE                  	dec rsi
 10610 00007D6C 4883FE00                	cmp rsi, 0
 10611 00007D70 75E5                    	jne .L_tc_recycle_frame_loop_4020
 10612                                  .L_tc_recycle_frame_done_4020:
 10613                                  ;this pop rbp in sot to the right place
 10614 00007D72 4989C9                  	mov r9, rcx
 10615 00007D75 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10616 00007D7D 4C01CC                  	add rsp, r9
 10617 00007D80 5D                      	pop rbp
 10618 00007D81 488B4D00                	mov rcx, qword [rbp]
 10619 00007D85 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10620 00007D89 FFE3                    	jmp rbx
 10621                                  
 10622 00007D8B E926010000                      	jmp .L_if_end_47ec
 10623                                  
 10624                                          	.L_if_else_47ec:
 10625 00007D90 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10626 00007D94 50                      	push rax
 10627 00007D95 6A01                    	push 1
 10628 00007D97 488B0425[40000000]      	mov rax, qword [free_var_8]
 10629                                  	assert_closure(rax)
    42 00007D9F 803805              <1>  cmp byte [%1], %2
    43 00007DA2 0F851AB90000        <1>  jne L_error_incorrect_type
 10630 00007DA8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10631 00007DAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 10632                                  
 10633 00007DAE 483D[02000000]                  	cmp rax, sob_boolean_false
 10634                                  
 10635 00007DB4 0F8490000000                    	je .L_if_else_47ed
 10636 00007DBA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10637 00007DBE 50                      	push rax
 10638 00007DBF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10639 00007DC3 50                      	push rax
 10640 00007DC4 6A01                    	push 1
 10641 00007DC6 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10642                                  	assert_closure(rax)
    42 00007DCE 803805              <1>  cmp byte [%1], %2
    43 00007DD1 0F85EBB80000        <1>  jne L_error_incorrect_type
 10643 00007DD7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10644 00007DDA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10645 00007DDD 50                      	push rax
 10646 00007DDE 6A02                    	push 2
 10647 00007DE0 488B0425[08010000]      	mov rax, qword [free_var_33]
 10648                                  .L_applic_TC_401f:
 10649 00007DE8 803805                  	cmp byte [rax], T_closure
 10650 00007DEB 0F8592B00000            	jne L_code_ptr_error
 10651 00007DF1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10652 00007DF5 53                      	push rbx
 10653 00007DF6 FF7508                  	push qword [rbp + 8]
 10654 00007DF9 FF7500                  	push qword [rbp]
 10655 00007DFC 488B4D18                	mov rcx, [rbp + 3 * 8]
 10656 00007E00 488B542418              	mov rdx, [rsp + 3 * 8]
 10657 00007E05 488D7204                	lea rsi, [rdx + 4]
 10658 00007E09 4C8D4EFF                	lea r9, [rsi - 1]
 10659 00007E0D 488D7903                	lea rdi, [rcx + 3]
 10660 00007E11 4D31C0                  	xor r8, r8
 10661                                  .L_tc_recycle_frame_loop_401f:
 10662 00007E14 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10663 00007E18 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10664 00007E1D 49FFC9                  	dec r9
 10665 00007E20 4D31C0                  	xor r8, r8
 10666 00007E23 48FFCF                  	dec rdi
 10667 00007E26 48FFCE                  	dec rsi
 10668 00007E29 4883FE00                	cmp rsi, 0
 10669 00007E2D 75E5                    	jne .L_tc_recycle_frame_loop_401f
 10670                                  .L_tc_recycle_frame_done_401f:
 10671                                  ;this pop rbp in sot to the right place
 10672 00007E2F 4989C9                  	mov r9, rcx
 10673 00007E32 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10674 00007E3A 4C01CC                  	add rsp, r9
 10675 00007E3D 5D                      	pop rbp
 10676 00007E3E 488B4D00                	mov rcx, qword [rbp]
 10677 00007E42 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10678 00007E46 FFE3                    	jmp rbx
 10679                                  
 10680 00007E48 EB6C                            	jmp .L_if_end_47ed
 10681                                  
 10682                                          	.L_if_else_47ed:
 10683 00007E4A 6A00                    	push 0
 10684 00007E4C 488B4510                	mov rax, qword [rbp + 8 * 2]
 10685                                  
 10686 00007E50 488B00                                            	mov rax, qword[rax + 8 * 0]
 10687                                  
 10688 00007E53 488B00                                            	mov rax, qword[rax + 8 * 0]
 10689                                  .L_applic_TC_401e:
 10690 00007E56 803805                  	cmp byte [rax], T_closure
 10691 00007E59 0F8524B00000            	jne L_code_ptr_error
 10692 00007E5F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10693 00007E63 53                      	push rbx
 10694 00007E64 FF7508                  	push qword [rbp + 8]
 10695 00007E67 FF7500                  	push qword [rbp]
 10696 00007E6A 488B4D18                	mov rcx, [rbp + 3 * 8]
 10697 00007E6E 488B542418              	mov rdx, [rsp + 3 * 8]
 10698 00007E73 488D7204                	lea rsi, [rdx + 4]
 10699 00007E77 4C8D4EFF                	lea r9, [rsi - 1]
 10700 00007E7B 488D7903                	lea rdi, [rcx + 3]
 10701 00007E7F 4D31C0                  	xor r8, r8
 10702                                  .L_tc_recycle_frame_loop_401e:
 10703 00007E82 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10704 00007E86 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10705 00007E8B 49FFC9                  	dec r9
 10706 00007E8E 4D31C0                  	xor r8, r8
 10707 00007E91 48FFCF                  	dec rdi
 10708 00007E94 48FFCE                  	dec rsi
 10709 00007E97 4883FE00                	cmp rsi, 0
 10710 00007E9B 75E5                    	jne .L_tc_recycle_frame_loop_401e
 10711                                  .L_tc_recycle_frame_done_401e:
 10712                                  ;this pop rbp in sot to the right place
 10713 00007E9D 4989C9                  	mov r9, rcx
 10714 00007EA0 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10715 00007EA8 4C01CC                  	add rsp, r9
 10716 00007EAB 5D                      	pop rbp
 10717 00007EAC 488B4D00                	mov rcx, qword [rbp]
 10718 00007EB0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10719 00007EB4 FFE3                    	jmp rbx
 10720                                  
 10721                                          	.L_if_end_47ed:
 10722                                  
 10723                                          	.L_if_end_47ec:
 10724                                  
 10725 00007EB6 E95D020000                      	jmp .L_if_end_47e8
 10726                                  
 10727                                          	.L_if_else_47e8:
 10728 00007EBB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10729 00007EBF 50                      	push rax
 10730 00007EC0 6A01                    	push 1
 10731 00007EC2 488B0425[40000000]      	mov rax, qword [free_var_8]
 10732                                  	assert_closure(rax)
    42 00007ECA 803805              <1>  cmp byte [%1], %2
    43 00007ECD 0F85EFB70000        <1>  jne L_error_incorrect_type
 10733 00007ED3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10734 00007ED6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10735                                  
 10736 00007ED9 483D[02000000]                  	cmp rax, sob_boolean_false
 10737                                  
 10738 00007EDF 0F84C7010000                    	je .L_if_else_47e9
 10739 00007EE5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10740 00007EE9 50                      	push rax
 10741 00007EEA 6A01                    	push 1
 10742 00007EEC 488B0425[48000000]      	mov rax, qword [free_var_9]
 10743                                  	assert_closure(rax)
    42 00007EF4 803805              <1>  cmp byte [%1], %2
    43 00007EF7 0F85C5B70000        <1>  jne L_error_incorrect_type
 10744 00007EFD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10745 00007F00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10746                                  
 10747 00007F03 483D[02000000]                  	cmp rax, sob_boolean_false
 10748                                  
 10749 00007F09 0F8493000000                    	je .L_if_else_47ea
 10750 00007F0F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10751 00007F13 50                      	push rax
 10752 00007F14 6A01                    	push 1
 10753 00007F16 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10754                                  	assert_closure(rax)
    42 00007F1E 803805              <1>  cmp byte [%1], %2
    43 00007F21 0F859BB70000        <1>  jne L_error_incorrect_type
 10755 00007F27 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10756 00007F2A FF5009                  	call SOB_CLOSURE_CODE(rax)
 10757 00007F2D 50                      	push rax
 10758 00007F2E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10759 00007F32 50                      	push rax
 10760 00007F33 6A02                    	push 2
 10761 00007F35 488B0425[08010000]      	mov rax, qword [free_var_33]
 10762                                  .L_applic_TC_401d:
 10763 00007F3D 803805                  	cmp byte [rax], T_closure
 10764 00007F40 0F853DAF0000            	jne L_code_ptr_error
 10765 00007F46 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10766 00007F4A 53                      	push rbx
 10767 00007F4B FF7508                  	push qword [rbp + 8]
 10768 00007F4E FF7500                  	push qword [rbp]
 10769 00007F51 488B4D18                	mov rcx, [rbp + 3 * 8]
 10770 00007F55 488B542418              	mov rdx, [rsp + 3 * 8]
 10771 00007F5A 488D7204                	lea rsi, [rdx + 4]
 10772 00007F5E 4C8D4EFF                	lea r9, [rsi - 1]
 10773 00007F62 488D7903                	lea rdi, [rcx + 3]
 10774 00007F66 4D31C0                  	xor r8, r8
 10775                                  .L_tc_recycle_frame_loop_401d:
 10776 00007F69 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10777 00007F6D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10778 00007F72 49FFC9                  	dec r9
 10779 00007F75 4D31C0                  	xor r8, r8
 10780 00007F78 48FFCF                  	dec rdi
 10781 00007F7B 48FFCE                  	dec rsi
 10782 00007F7E 4883FE00                	cmp rsi, 0
 10783 00007F82 75E5                    	jne .L_tc_recycle_frame_loop_401d
 10784                                  .L_tc_recycle_frame_done_401d:
 10785                                  ;this pop rbp in sot to the right place
 10786 00007F84 4989C9                  	mov r9, rcx
 10787 00007F87 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10788 00007F8F 4C01CC                  	add rsp, r9
 10789 00007F92 5D                      	pop rbp
 10790 00007F93 488B4D00                	mov rcx, qword [rbp]
 10791 00007F97 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10792 00007F9B FFE3                    	jmp rbx
 10793                                  
 10794 00007F9D E908010000                      	jmp .L_if_end_47ea
 10795                                  
 10796                                          	.L_if_else_47ea:
 10797 00007FA2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10798 00007FA6 50                      	push rax
 10799 00007FA7 6A01                    	push 1
 10800 00007FA9 488B0425[40000000]      	mov rax, qword [free_var_8]
 10801                                  	assert_closure(rax)
    42 00007FB1 803805              <1>  cmp byte [%1], %2
    43 00007FB4 0F8508B70000        <1>  jne L_error_incorrect_type
 10802 00007FBA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10803 00007FBD FF5009                  	call SOB_CLOSURE_CODE(rax)
 10804                                  
 10805 00007FC0 483D[02000000]                  	cmp rax, sob_boolean_false
 10806                                  
 10807 00007FC6 7476                            	je .L_if_else_47eb
 10808 00007FC8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10809 00007FCC 50                      	push rax
 10810 00007FCD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10811 00007FD1 50                      	push rax
 10812 00007FD2 6A02                    	push 2
 10813 00007FD4 488B0425[08010000]      	mov rax, qword [free_var_33]
 10814                                  .L_applic_TC_401c:
 10815 00007FDC 803805                  	cmp byte [rax], T_closure
 10816 00007FDF 0F859EAE0000            	jne L_code_ptr_error
 10817 00007FE5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10818 00007FE9 53                      	push rbx
 10819 00007FEA FF7508                  	push qword [rbp + 8]
 10820 00007FED FF7500                  	push qword [rbp]
 10821 00007FF0 488B4D18                	mov rcx, [rbp + 3 * 8]
 10822 00007FF4 488B542418              	mov rdx, [rsp + 3 * 8]
 10823 00007FF9 488D7204                	lea rsi, [rdx + 4]
 10824 00007FFD 4C8D4EFF                	lea r9, [rsi - 1]
 10825 00008001 488D7903                	lea rdi, [rcx + 3]
 10826 00008005 4D31C0                  	xor r8, r8
 10827                                  .L_tc_recycle_frame_loop_401c:
 10828 00008008 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10829 0000800C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10830 00008011 49FFC9                  	dec r9
 10831 00008014 4D31C0                  	xor r8, r8
 10832 00008017 48FFCF                  	dec rdi
 10833 0000801A 48FFCE                  	dec rsi
 10834 0000801D 4883FE00                	cmp rsi, 0
 10835 00008021 75E5                    	jne .L_tc_recycle_frame_loop_401c
 10836                                  .L_tc_recycle_frame_done_401c:
 10837                                  ;this pop rbp in sot to the right place
 10838 00008023 4989C9                  	mov r9, rcx
 10839 00008026 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10840 0000802E 4C01CC                  	add rsp, r9
 10841 00008031 5D                      	pop rbp
 10842 00008032 488B4D00                	mov rcx, qword [rbp]
 10843 00008036 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10844 0000803A FFE3                    	jmp rbx
 10845                                  
 10846 0000803C EB6C                            	jmp .L_if_end_47eb
 10847                                  
 10848                                          	.L_if_else_47eb:
 10849 0000803E 6A00                    	push 0
 10850 00008040 488B4510                	mov rax, qword [rbp + 8 * 2]
 10851                                  
 10852 00008044 488B00                                            	mov rax, qword[rax + 8 * 0]
 10853                                  
 10854 00008047 488B00                                            	mov rax, qword[rax + 8 * 0]
 10855                                  .L_applic_TC_401b:
 10856 0000804A 803805                  	cmp byte [rax], T_closure
 10857 0000804D 0F8530AE0000            	jne L_code_ptr_error
 10858 00008053 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10859 00008057 53                      	push rbx
 10860 00008058 FF7508                  	push qword [rbp + 8]
 10861 0000805B FF7500                  	push qword [rbp]
 10862 0000805E 488B4D18                	mov rcx, [rbp + 3 * 8]
 10863 00008062 488B542418              	mov rdx, [rsp + 3 * 8]
 10864 00008067 488D7204                	lea rsi, [rdx + 4]
 10865 0000806B 4C8D4EFF                	lea r9, [rsi - 1]
 10866 0000806F 488D7903                	lea rdi, [rcx + 3]
 10867 00008073 4D31C0                  	xor r8, r8
 10868                                  .L_tc_recycle_frame_loop_401b:
 10869 00008076 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10870 0000807A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10871 0000807F 49FFC9                  	dec r9
 10872 00008082 4D31C0                  	xor r8, r8
 10873 00008085 48FFCF                  	dec rdi
 10874 00008088 48FFCE                  	dec rsi
 10875 0000808B 4883FE00                	cmp rsi, 0
 10876 0000808F 75E5                    	jne .L_tc_recycle_frame_loop_401b
 10877                                  .L_tc_recycle_frame_done_401b:
 10878                                  ;this pop rbp in sot to the right place
 10879 00008091 4989C9                  	mov r9, rcx
 10880 00008094 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10881 0000809C 4C01CC                  	add rsp, r9
 10882 0000809F 5D                      	pop rbp
 10883 000080A0 488B4D00                	mov rcx, qword [rbp]
 10884 000080A4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10885 000080A8 FFE3                    	jmp rbx
 10886                                  
 10887                                          	.L_if_end_47eb:
 10888                                  
 10889                                          	.L_if_end_47ea:
 10890                                  
 10891 000080AA EB6C                            	jmp .L_if_end_47e9
 10892                                  
 10893                                          	.L_if_else_47e9:
 10894 000080AC 6A00                    	push 0
 10895 000080AE 488B4510                	mov rax, qword [rbp + 8 * 2]
 10896                                  
 10897 000080B2 488B00                                            	mov rax, qword[rax + 8 * 0]
 10898                                  
 10899 000080B5 488B00                                            	mov rax, qword[rax + 8 * 0]
 10900                                  .L_applic_TC_401a:
 10901 000080B8 803805                  	cmp byte [rax], T_closure
 10902 000080BB 0F85C2AD0000            	jne L_code_ptr_error
 10903 000080C1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10904 000080C5 53                      	push rbx
 10905 000080C6 FF7508                  	push qword [rbp + 8]
 10906 000080C9 FF7500                  	push qword [rbp]
 10907 000080CC 488B4D18                	mov rcx, [rbp + 3 * 8]
 10908 000080D0 488B542418              	mov rdx, [rsp + 3 * 8]
 10909 000080D5 488D7204                	lea rsi, [rdx + 4]
 10910 000080D9 4C8D4EFF                	lea r9, [rsi - 1]
 10911 000080DD 488D7903                	lea rdi, [rcx + 3]
 10912 000080E1 4D31C0                  	xor r8, r8
 10913                                  .L_tc_recycle_frame_loop_401a:
 10914 000080E4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10915 000080E8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10916 000080ED 49FFC9                  	dec r9
 10917 000080F0 4D31C0                  	xor r8, r8
 10918 000080F3 48FFCF                  	dec rdi
 10919 000080F6 48FFCE                  	dec rsi
 10920 000080F9 4883FE00                	cmp rsi, 0
 10921 000080FD 75E5                    	jne .L_tc_recycle_frame_loop_401a
 10922                                  .L_tc_recycle_frame_done_401a:
 10923                                  ;this pop rbp in sot to the right place
 10924 000080FF 4989C9                  	mov r9, rcx
 10925 00008102 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10926 0000810A 4C01CC                  	add rsp, r9
 10927 0000810D 5D                      	pop rbp
 10928 0000810E 488B4D00                	mov rcx, qword [rbp]
 10929 00008112 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10930 00008116 FFE3                    	jmp rbx
 10931                                  
 10932                                          	.L_if_end_47e9:
 10933                                  
 10934                                          	.L_if_end_47e8:
 10935 00008118 C9                      	leave
 10936 00008119 C22000                  	ret 8 * (2 + 2)
 10937                                  .L_lambda_simple_end_376c:	; new closure is in rax
 10938 0000811C 50                      	push rax
 10939 0000811D 6A01                    	push 1
 10940 0000811F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10941 00008124 E8A59D0000              	call malloc
 10942 00008129 50                      	push rax
 10943 0000812A BF08000000              	mov rdi, 8 * 1	; new rib
 10944 0000812F E89A9D0000              	call malloc
 10945 00008134 50                      	push rax
 10946 00008135 BF10000000              	mov rdi, 8 * 2	; extended env
 10947 0000813A E88F9D0000              	call malloc
 10948 0000813F 488B7D10                	mov rdi, ENV
 10949 00008143 BE00000000              	mov rsi, 0
 10950 00008148 BA01000000              	mov rdx, 1
 10951                                  .L_lambda_simple_env_loop_376d:	; ext_env[i + 1] <-- env[i]
 10952 0000814D 4883FE01                	cmp rsi, 1
 10953 00008151 7410                    	je .L_lambda_simple_env_end_376d
 10954 00008153 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10955 00008157 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10956 0000815B 48FFC6                  	inc rsi
 10957 0000815E 48FFC2                  	inc rdx
 10958 00008161 EBEA                    	jmp .L_lambda_simple_env_loop_376d
 10959                                  .L_lambda_simple_env_end_376d:
 10960 00008163 5B                      	pop rbx
 10961 00008164 BE00000000              	mov rsi, 0
 10962                                  .L_lambda_simple_params_loop_376d:	; copy params
 10963 00008169 4883FE01                	cmp rsi, 1
 10964 0000816D 740E                    	je .L_lambda_simple_params_end_376d
 10965 0000816F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10966 00008174 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10967 00008178 48FFC6                  	inc rsi
 10968 0000817B EBEC                    	jmp .L_lambda_simple_params_loop_376d
 10969                                  .L_lambda_simple_params_end_376d:
 10970 0000817D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10971 00008180 4889C3                  	mov rbx, rax
 10972 00008183 58                      	pop rax
 10973 00008184 C60005                  	mov byte [rax], T_closure
 10974 00008187 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10975 0000818B 48C74009[98810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_376d
 10976 00008193 E9F3030000              	jmp .L_lambda_simple_end_376d
 10977                                  .L_lambda_simple_code_376d:	; lambda-simple body
 10978 00008198 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10979 0000819E 740B                    	je .L_lambda_simple_arity_check_ok_376d
 10980 000081A0 FF742410                	push qword [rsp + 8 * 2]
 10981 000081A4 6A01                    	push 1
 10982 000081A6 E9DC9C0000              	jmp L_error_incorrect_arity_simple
 10983                                  .L_lambda_simple_arity_check_ok_376d:
 10984 000081AB C8000000                	enter 0, 0
 10985 000081AF BF11000000              	mov rdi, (1 + 8 + 8)
 10986 000081B4 E8159D0000              	call malloc
 10987 000081B9 50                      	push rax
 10988 000081BA BF08000000              	mov rdi, 8 * 1
 10989 000081BF E80A9D0000              	call malloc
 10990 000081C4 50                      	push rax
 10991 000081C5 BF18000000              	mov rdi, 8 * 3
 10992 000081CA E8FF9C0000              	call malloc
 10993 000081CF 488B7D10                	mov rdi, ENV
 10994 000081D3 4831F6                  	xor rsi, rsi
 10995 000081D6 4831D2                  	xor rdx, rdx
 10996 000081D9 48FFC2                  	inc rdx
 10997                                  	.L_lambda_opt_env_loop_0886:
 10998                                  
 10999 000081DC 4883FE02                        	cmp rsi, 2
 11000                                  
 11001 000081E0 7412                            	je .L_lambda_opt_env_end_0886
 11002 000081E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11003 000081E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11004 000081EA 4883C201                	add rdx, 1
 11005 000081EE 4883C601                	add rsi, 1
 11006 000081F2 EBE8                    	jmp .L_lambda_opt_env_loop_0886
 11007                                  
 11008                                          	.L_lambda_opt_env_end_0886:
 11009 000081F4 5B                      	pop rbx
 11010 000081F5 4831F6                  	xor rsi, rsi
 11011                                  	.L_lambda_opt_params_loop_0886:
 11012                                  
 11013 000081F8 4883FE01                        	cmp rsi, 1
 11014                                  
 11015 000081FC 740F                            	je .L_lambda_opt_params_end_0886
 11016 000081FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11017 00008203 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11018 00008207 4883C601                	add rsi, 1
 11019 0000820B EBEB                    	jmp .L_lambda_opt_params_loop_0886
 11020                                  
 11021                                          	.L_lambda_opt_params_end_0886:
 11022 0000820D 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 11023 00008210 4889C3                  	mov rbx, rax
 11024 00008213 58                      	pop rax
 11025 00008214 C60005                  	mov byte [rax], T_closure
 11026 00008217 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11027 0000821B 48C74009[28820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0886
 11028                                  
 11029 00008223 E95F030000                      	jmp .L_lambda_opt_end_0886
 11030                                  
 11031                                          	.L_lambda_opt_code_0886:
 11032                                  
 11033 00008228 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 11034                                  
 11035 0000822E 740D                            	je .L_lambda_opt_arity_check_exact_0886  ;same num_of_args
 11036                                  
 11037 00008230 7F65                            	jg .L_lambda_opt_arity_check_more_0886  ;greater num_of_args
 11038 00008232 FF742410                	push qword [rsp + 8 * 2]
 11039 00008236 6A01                    	push 1
 11040 00008238 E95E9C0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 11041                                  .L_lambda_opt_arity_check_exact_0886:
 11042 0000823D 4883EC08                	sub rsp, 8 * 1
 11043 00008241 488D7F10                	lea rdi, [rdi + (8 * 2)]
 11044 00008245 4889E7                  	mov rdi, rsp 
 11045 00008248 488B4708                	mov rax, qword [rdi + 8]
 11046 0000824C 488907                  	mov qword [rdi], rax
 11047 0000824F 488D7F08                	lea rdi, [rdi + 8]
 11048 00008253 488B4708                	mov rax, qword [rdi + 8]
 11049 00008257 488907                  	mov qword [rdi], rax
 11050 0000825A 488D7F08                	lea rdi, [rdi + 8]
 11051 0000825E 488B4708                	mov rax, qword [rdi + 8]
 11052 00008262 4889C1                  	mov rcx, rax
 11053 00008265 4883C001                	add rax, 1
 11054 00008269 488907                  	mov qword [rdi], rax
 11055 0000826C 488D7F08                	lea rdi, [rdi + 8]
 11056                                  	.L_lambda_opt_stack_shrink_loop_1990:
 11057 00008270 4883F900                	cmp rcx, 0
 11058 00008274 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1990
 11059 00008276 4883E901                	sub rcx, 1
 11060 0000827A 488D4010                	lea rax, [rax + (8 * 2)]
 11061 0000827E 488B4708                	mov rax, qword [rdi + 8]
 11062 00008282 488907                  	mov qword [rdi], rax
 11063 00008285 488D7F08                	lea rdi, [rdi + 8]
 11064 00008289 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1990
 11065                                  
 11066                                          	.L_lambda_opt_stack_shrink_loop_exit_1990:
 11067 0000828B 48C707[01000000]        	mov qword [rdi], sob_nil
 11068 00008292 E997000000              	jmp .L_lambda_opt_stack_adjusted_0886
 11069                                  
 11070                                          	.L_lambda_opt_arity_check_more_0886:
 11071 00008297 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 11072 0000829C 488D4EFF                	lea rcx, [rsi - 1]
 11073 000082A0 49B8-                   	mov r8, sob_nil
 11073 000082A2 [0100000000000000] 
 11074 000082AA 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 11075 000082AF 4889F2                  	mov rdx, rsi
 11076                                  	.L_lambda_opt_stack_shrink_loop_1991:
 11077 000082B2 4883F900                	cmp rcx, 0
 11078 000082B6 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1991
 11079 000082B8 BF11000000              	mov rdi, 1 + (8 * 2)
 11080 000082BD E80C9C0000              	call malloc
 11081 000082C2 C60021                  	mov byte [rax], T_pair
 11082 000082C5 488B1E                  	mov rbx, qword [rsi]
 11083 000082C8 48895801                	mov SOB_PAIR_CAR(rax), rbx
 11084 000082CC 4C894009                	mov SOB_PAIR_CDR(rax), r8
 11085 000082D0 4883C6F8                	add rsi, -8
 11086 000082D4 4883E901                	sub rcx, 1
 11087 000082D8 4989C0                  	mov r8, rax
 11088 000082DB EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1991
 11089                                  
 11090                                          	.L_lambda_opt_stack_shrink_loop_exit_1991:
 11091 000082DD 4C8902                  	mov qword [rdx], r8
 11092 000082E0 4883EA08                	sub rdx, 8 * 1
 11093 000082E4 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 11094                                  
 11095 000082E9 B901000000                      	mov rcx, 1 
 11096                                  
 11097                                          	.L_lambda_opt_stack_shrink_loop_1992:
 11098 000082EE 4883F900                	cmp rcx, 0
 11099 000082F2 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1992
 11100 000082F4 488B06                  	mov rax, qword [rsi]
 11101 000082F7 488902                  	mov qword [rdx], rax
 11102 000082FA 488D76F8                	lea rsi, [rsi - 8]
 11103 000082FE 4883C2F8                	add rdx, -8
 11104 00008302 4883C1FF                	add rcx, -1
 11105 00008306 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1992
 11106                                  
 11107                                          	.L_lambda_opt_stack_shrink_loop_exit_1992:
 11108                                  
 11109 00008308 48C70202000000                  	mov qword [rdx], 1 + 1
 11110 0000830F 4883C6F8                	add rsi, -8
 11111 00008313 4883C2F8                	add rdx, -8
 11112 00008317 488B06                  	mov rax, qword [rsi]
 11113 0000831A 488902                  	mov qword [rdx], rax
 11114 0000831D 4883C2F8                	add rdx, -8
 11115 00008321 488D76F8                	lea rsi, [rsi - 8]
 11116 00008325 488B06                  	mov rax, qword [rsi]
 11117 00008328 488902                  	mov qword [rdx], rax
 11118 0000832B 4889D4                  	mov rsp, rdx
 11119                                  	.L_lambda_opt_stack_adjusted_0886:
 11120 0000832E C8000000                	enter 0, 0
 11121 00008332 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11122 00008336 50                      	push rax
 11123 00008337 6A01                    	push 1
 11124 00008339 488B0425[00000000]      	mov rax, qword [free_var_0]
 11125                                  	assert_closure(rax)
    42 00008341 803805              <1>  cmp byte [%1], %2
    43 00008344 0F8578B30000        <1>  jne L_error_incorrect_type
 11126 0000834A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11127 0000834D FF5009                  	call SOB_CLOSURE_CODE(rax)
 11128                                  
 11129 00008350 483D[02000000]                  	cmp rax, sob_boolean_false
 11130                                  
 11131 00008356 0F8481000000                    	je .L_if_else_47ee
 11132 0000835C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11133 00008360 50                      	push rax
 11134 00008361 48B8-                   	mov rax,L_constants + 128
 11134 00008363 [8000000000000000] 
 11135 0000836B 50                      	push rax
 11136 0000836C 6A02                    	push 2
 11137 0000836E 488B4510                	mov rax, qword [rbp + 8 * 2]
 11138                                  
 11139 00008372 488B00                                            	mov rax, qword[rax + 8 * 0]
 11140                                  
 11141 00008375 488B00                                            	mov rax, qword[rax + 8 * 0]
 11142                                  .L_applic_TC_4023:
 11143 00008378 803805                  	cmp byte [rax], T_closure
 11144 0000837B 0F8502AB0000            	jne L_code_ptr_error
 11145 00008381 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11146 00008385 53                      	push rbx
 11147 00008386 FF7508                  	push qword [rbp + 8]
 11148 00008389 FF7500                  	push qword [rbp]
 11149 0000838C 488B4D18                	mov rcx, [rbp + 3 * 8]
 11150 00008390 488B542418              	mov rdx, [rsp + 3 * 8]
 11151 00008395 488D7204                	lea rsi, [rdx + 4]
 11152 00008399 4C8D4EFF                	lea r9, [rsi - 1]
 11153 0000839D 488D7903                	lea rdi, [rcx + 3]
 11154 000083A1 4D31C0                  	xor r8, r8
 11155                                  .L_tc_recycle_frame_loop_4023:
 11156 000083A4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11157 000083A8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11158 000083AD 49FFC9                  	dec r9
 11159 000083B0 4D31C0                  	xor r8, r8
 11160 000083B3 48FFCF                  	dec rdi
 11161 000083B6 48FFCE                  	dec rsi
 11162 000083B9 4883FE00                	cmp rsi, 0
 11163 000083BD 75E5                    	jne .L_tc_recycle_frame_loop_4023
 11164                                  .L_tc_recycle_frame_done_4023:
 11165                                  ;this pop rbp in sot to the right place
 11166 000083BF 4989C9                  	mov r9, rcx
 11167 000083C2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11168 000083CA 4C01CC                  	add rsp, r9
 11169 000083CD 5D                      	pop rbp
 11170 000083CE 488B4D00                	mov rcx, qword [rbp]
 11171 000083D2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11172 000083D6 FFE3                    	jmp rbx
 11173                                  
 11174 000083D8 E9A6010000                      	jmp .L_if_end_47ee
 11175                                  
 11176                                          	.L_if_else_47ee:
 11177 000083DD 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11178 000083E1 50                      	push rax
 11179 000083E2 48B8-                   	mov rax,L_constants + 128
 11179 000083E4 [8000000000000000] 
 11180 000083EC 50                      	push rax
 11181 000083ED 488B0425[18030000]      	mov rax, qword [free_var_99]
 11182 000083F5 50                      	push rax
 11183 000083F6 6A03                    	push 3
 11184 000083F8 488B0425[F8020000]      	mov rax, qword [free_var_95]
 11185                                  	assert_closure(rax)
    42 00008400 803805              <1>  cmp byte [%1], %2
    43 00008403 0F85B9B20000        <1>  jne L_error_incorrect_type
 11186 00008409 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11187 0000840C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11188 0000840F 50                      	push rax
 11189 00008410 6A01                    	push 1
 11190 00008412 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11191 00008417 E8B29A0000              	call malloc
 11192 0000841C 50                      	push rax
 11193 0000841D BF10000000              	mov rdi, 8 * 2	; new rib
 11194 00008422 E8A79A0000              	call malloc
 11195 00008427 50                      	push rax
 11196 00008428 BF20000000              	mov rdi, 8 * 4	; extended env
 11197 0000842D E89C9A0000              	call malloc
 11198 00008432 488B7D10                	mov rdi, ENV
 11199 00008436 BE00000000              	mov rsi, 0
 11200 0000843B BA01000000              	mov rdx, 1
 11201                                  .L_lambda_simple_env_loop_376e:	; ext_env[i + 1] <-- env[i]
 11202 00008440 4883FE03                	cmp rsi, 3
 11203 00008444 7410                    	je .L_lambda_simple_env_end_376e
 11204 00008446 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11205 0000844A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11206 0000844E 48FFC6                  	inc rsi
 11207 00008451 48FFC2                  	inc rdx
 11208 00008454 EBEA                    	jmp .L_lambda_simple_env_loop_376e
 11209                                  .L_lambda_simple_env_end_376e:
 11210 00008456 5B                      	pop rbx
 11211 00008457 BE00000000              	mov rsi, 0
 11212                                  .L_lambda_simple_params_loop_376e:	; copy params
 11213 0000845C 4883FE02                	cmp rsi, 2
 11214 00008460 740E                    	je .L_lambda_simple_params_end_376e
 11215 00008462 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11216 00008467 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11217 0000846B 48FFC6                  	inc rsi
 11218 0000846E EBEC                    	jmp .L_lambda_simple_params_loop_376e
 11219                                  .L_lambda_simple_params_end_376e:
 11220 00008470 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11221 00008473 4889C3                  	mov rbx, rax
 11222 00008476 58                      	pop rax
 11223 00008477 C60005                  	mov byte [rax], T_closure
 11224 0000847A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11225 0000847E 48C74009[8B840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_376e
 11226 00008486 E998000000              	jmp .L_lambda_simple_end_376e
 11227                                  .L_lambda_simple_code_376e:	; lambda-simple body
 11228 0000848B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11229 00008491 740B                    	je .L_lambda_simple_arity_check_ok_376e
 11230 00008493 FF742410                	push qword [rsp + 8 * 2]
 11231 00008497 6A01                    	push 1
 11232 00008499 E9E9990000              	jmp L_error_incorrect_arity_simple
 11233                                  .L_lambda_simple_arity_check_ok_376e:
 11234 0000849E C8000000                	enter 0, 0
 11235 000084A2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11236 000084A6 50                      	push rax
 11237 000084A7 488B4510                	mov rax, qword [rbp + 8 * 2]
 11238                                  
 11239 000084AB 488B00                                            	mov rax, qword[rax + 8 * 0]
 11240                                  
 11241 000084AE 488B00                                            	mov rax, qword[rax + 8 * 0]
 11242 000084B1 50                      	push rax
 11243 000084B2 6A02                    	push 2
 11244 000084B4 488B4510                	mov rax, qword [rbp + 8 * 2]
 11245                                  
 11246 000084B8 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11247                                  
 11248 000084BC 488B00                                            	mov rax, qword[rax + 8 * 0]
 11249                                  .L_applic_TC_4021:
 11250 000084BF 803805                  	cmp byte [rax], T_closure
 11251 000084C2 0F85BBA90000            	jne L_code_ptr_error
 11252 000084C8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11253 000084CC 53                      	push rbx
 11254 000084CD FF7508                  	push qword [rbp + 8]
 11255 000084D0 FF7500                  	push qword [rbp]
 11256 000084D3 488B4D18                	mov rcx, [rbp + 3 * 8]
 11257 000084D7 488B542418              	mov rdx, [rsp + 3 * 8]
 11258 000084DC 488D7204                	lea rsi, [rdx + 4]
 11259 000084E0 4C8D4EFF                	lea r9, [rsi - 1]
 11260 000084E4 488D7903                	lea rdi, [rcx + 3]
 11261 000084E8 4D31C0                  	xor r8, r8
 11262                                  .L_tc_recycle_frame_loop_4021:
 11263 000084EB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11264 000084EF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11265 000084F4 49FFC9                  	dec r9
 11266 000084F7 4D31C0                  	xor r8, r8
 11267 000084FA 48FFCF                  	dec rdi
 11268 000084FD 48FFCE                  	dec rsi
 11269 00008500 4883FE00                	cmp rsi, 0
 11270 00008504 75E5                    	jne .L_tc_recycle_frame_loop_4021
 11271                                  .L_tc_recycle_frame_done_4021:
 11272                                  ;this pop rbp in sot to the right place
 11273 00008506 4989C9                  	mov r9, rcx
 11274 00008509 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11275 00008511 4C01CC                  	add rsp, r9
 11276 00008514 5D                      	pop rbp
 11277 00008515 488B4D00                	mov rcx, qword [rbp]
 11278 00008519 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11279 0000851D FFE3                    	jmp rbx
 11280 0000851F C9                      	leave
 11281 00008520 C21800                  	ret 8 * (2 + 1)
 11282                                  .L_lambda_simple_end_376e:	; new closure is in rax
 11283                                  .L_applic_TC_4022:
 11284 00008523 803805                  	cmp byte [rax], T_closure
 11285 00008526 0F8557A90000            	jne L_code_ptr_error
 11286 0000852C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11287 00008530 53                      	push rbx
 11288 00008531 FF7508                  	push qword [rbp + 8]
 11289 00008534 FF7500                  	push qword [rbp]
 11290 00008537 488B4D18                	mov rcx, [rbp + 3 * 8]
 11291 0000853B 488B542418              	mov rdx, [rsp + 3 * 8]
 11292 00008540 488D7204                	lea rsi, [rdx + 4]
 11293 00008544 4C8D4EFF                	lea r9, [rsi - 1]
 11294 00008548 488D7903                	lea rdi, [rcx + 3]
 11295 0000854C 4D31C0                  	xor r8, r8
 11296                                  .L_tc_recycle_frame_loop_4022:
 11297 0000854F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11298 00008553 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11299 00008558 49FFC9                  	dec r9
 11300 0000855B 4D31C0                  	xor r8, r8
 11301 0000855E 48FFCF                  	dec rdi
 11302 00008561 48FFCE                  	dec rsi
 11303 00008564 4883FE00                	cmp rsi, 0
 11304 00008568 75E5                    	jne .L_tc_recycle_frame_loop_4022
 11305                                  .L_tc_recycle_frame_done_4022:
 11306                                  ;this pop rbp in sot to the right place
 11307 0000856A 4989C9                  	mov r9, rcx
 11308 0000856D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11309 00008575 4C01CC                  	add rsp, r9
 11310 00008578 5D                      	pop rbp
 11311 00008579 488B4D00                	mov rcx, qword [rbp]
 11312 0000857D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11313 00008581 FFE3                    	jmp rbx
 11314                                  
 11315                                          	.L_if_end_47ee:
 11316 00008583 C9                      	leave
 11317 00008584 C22000                  	ret 8 * (2 + 2)
 11318                                  .L_lambda_opt_end_0886:	; new closure is in rax
 11319 00008587 C9                      	leave
 11320 00008588 C21800                  	ret 8 * (2 + 1)
 11321                                  .L_lambda_simple_end_376d:	; new closure is in rax
 11322                                  .L_applic_TC_4024:
 11323 0000858B 803805                  	cmp byte [rax], T_closure
 11324 0000858E 0F85EFA80000            	jne L_code_ptr_error
 11325 00008594 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11326 00008598 53                      	push rbx
 11327 00008599 FF7508                  	push qword [rbp + 8]
 11328 0000859C FF7500                  	push qword [rbp]
 11329 0000859F 488B4D18                	mov rcx, [rbp + 3 * 8]
 11330 000085A3 488B542418              	mov rdx, [rsp + 3 * 8]
 11331 000085A8 488D7204                	lea rsi, [rdx + 4]
 11332 000085AC 4C8D4EFF                	lea r9, [rsi - 1]
 11333 000085B0 488D7903                	lea rdi, [rcx + 3]
 11334 000085B4 4D31C0                  	xor r8, r8
 11335                                  .L_tc_recycle_frame_loop_4024:
 11336 000085B7 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11337 000085BB 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11338 000085C0 49FFC9                  	dec r9
 11339 000085C3 4D31C0                  	xor r8, r8
 11340 000085C6 48FFCF                  	dec rdi
 11341 000085C9 48FFCE                  	dec rsi
 11342 000085CC 4883FE00                	cmp rsi, 0
 11343 000085D0 75E5                    	jne .L_tc_recycle_frame_loop_4024
 11344                                  .L_tc_recycle_frame_done_4024:
 11345                                  ;this pop rbp in sot to the right place
 11346 000085D2 4989C9                  	mov r9, rcx
 11347 000085D5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11348 000085DD 4C01CC                  	add rsp, r9
 11349 000085E0 5D                      	pop rbp
 11350 000085E1 488B4D00                	mov rcx, qword [rbp]
 11351 000085E5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11352 000085E9 FFE3                    	jmp rbx
 11353 000085EB C9                      	leave
 11354 000085EC C21800                  	ret 8 * (2 + 1)
 11355                                  .L_lambda_simple_end_376b:	; new closure is in rax
 11356                                  	assert_closure(rax)
    42 000085EF 803805              <1>  cmp byte [%1], %2
    43 000085F2 0F85CAB00000        <1>  jne L_error_incorrect_type
 11357 000085F8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11358 000085FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 11359 000085FE 48890425[20030000]      	mov qword [free_var_100], rax
 11360 00008606 48B8-                   	mov rax, sob_void
 11360 00008608 [0000000000000000] 
 11361                                  
 11362 00008610 4889C7                  	mov rdi, rax
 11363 00008613 E8C7980000              	call print_sexpr_if_not_void
 11364                                  
 11365 00008618 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11366 0000861D E8AC980000              	call malloc
 11367 00008622 50                      	push rax
 11368 00008623 BF00000000              	mov rdi, 8 * 0	; new rib
 11369 00008628 E8A1980000              	call malloc
 11370 0000862D 50                      	push rax
 11371 0000862E BF08000000              	mov rdi, 8 * 1	; extended env
 11372 00008633 E896980000              	call malloc
 11373 00008638 488B7D10                	mov rdi, ENV
 11374 0000863C BE00000000              	mov rsi, 0
 11375 00008641 BA01000000              	mov rdx, 1
 11376                                  .L_lambda_simple_env_loop_376f:	; ext_env[i + 1] <-- env[i]
 11377 00008646 4883FE00                	cmp rsi, 0
 11378 0000864A 7410                    	je .L_lambda_simple_env_end_376f
 11379 0000864C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11380 00008650 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11381 00008654 48FFC6                  	inc rsi
 11382 00008657 48FFC2                  	inc rdx
 11383 0000865A EBEA                    	jmp .L_lambda_simple_env_loop_376f
 11384                                  .L_lambda_simple_env_end_376f:
 11385 0000865C 5B                      	pop rbx
 11386 0000865D BE00000000              	mov rsi, 0
 11387                                  .L_lambda_simple_params_loop_376f:	; copy params
 11388 00008662 4883FE00                	cmp rsi, 0
 11389 00008666 740E                    	je .L_lambda_simple_params_end_376f
 11390 00008668 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11391 0000866D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11392 00008671 48FFC6                  	inc rsi
 11393 00008674 EBEC                    	jmp .L_lambda_simple_params_loop_376f
 11394                                  .L_lambda_simple_params_end_376f:
 11395 00008676 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11396 00008679 4889C3                  	mov rbx, rax
 11397 0000867C 58                      	pop rax
 11398 0000867D C60005                  	mov byte [rax], T_closure
 11399 00008680 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11400 00008684 48C74009[91860000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_376f
 11401 0000868C E903010000              	jmp .L_lambda_simple_end_376f
 11402                                  .L_lambda_simple_code_376f:	; lambda-simple body
 11403 00008691 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11404 00008697 740B                    	je .L_lambda_simple_arity_check_ok_376f
 11405 00008699 FF742410                	push qword [rsp + 8 * 2]
 11406 0000869D 6A01                    	push 1
 11407 0000869F E9E3970000              	jmp L_error_incorrect_arity_simple
 11408                                  .L_lambda_simple_arity_check_ok_376f:
 11409 000086A4 C8000000                	enter 0, 0
 11410 000086A8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11411 000086AC 50                      	push rax
 11412 000086AD 6A01                    	push 1
 11413 000086AF 488B0425[D8000000]      	mov rax, qword [free_var_27]
 11414                                  	assert_closure(rax)
    42 000086B7 803805              <1>  cmp byte [%1], %2
    43 000086BA 0F8502B00000        <1>  jne L_error_incorrect_type
 11415 000086C0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11416 000086C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11417                                  
 11418 000086C6 483D[02000000]                  	cmp rax, sob_boolean_false
 11419                                  
 11420 000086CC 740F                            	je .L_if_else_47ef
 11421 000086CE 48B8-                   	mov rax,L_constants + 128
 11421 000086D0 [8000000000000000] 
 11422                                  
 11423 000086D8 E9B3000000                      	jmp .L_if_end_47ef
 11424                                  
 11425                                          	.L_if_else_47ef:
 11426 000086DD 48B8-                   	mov rax,L_constants + 128
 11426 000086DF [8000000000000000] 
 11427 000086E7 50                      	push rax
 11428 000086E8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11429 000086EC 50                      	push rax
 11430 000086ED 6A02                    	push 2
 11431 000086EF 488B0425[10030000]      	mov rax, qword [free_var_98]
 11432                                  	assert_closure(rax)
    42 000086F7 803805              <1>  cmp byte [%1], %2
    43 000086FA 0F85C2AF0000        <1>  jne L_error_incorrect_type
 11433 00008700 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11434 00008703 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11435 00008706 50                      	push rax
 11436 00008707 6A01                    	push 1
 11437 00008709 488B0425[28030000]      	mov rax, qword [free_var_101]
 11438                                  	assert_closure(rax)
    42 00008711 803805              <1>  cmp byte [%1], %2
    43 00008714 0F85A8AF0000        <1>  jne L_error_incorrect_type
 11439 0000871A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11440 0000871D FF5009                  	call SOB_CLOSURE_CODE(rax)
 11441 00008720 50                      	push rax
 11442 00008721 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11443 00008725 50                      	push rax
 11444 00008726 6A02                    	push 2
 11445 00008728 488B0425[18030000]      	mov rax, qword [free_var_99]
 11446                                  .L_applic_TC_4025:
 11447 00008730 803805                  	cmp byte [rax], T_closure
 11448 00008733 0F854AA70000            	jne L_code_ptr_error
 11449 00008739 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11450 0000873D 53                      	push rbx
 11451 0000873E FF7508                  	push qword [rbp + 8]
 11452 00008741 FF7500                  	push qword [rbp]
 11453 00008744 488B4D18                	mov rcx, [rbp + 3 * 8]
 11454 00008748 488B542418              	mov rdx, [rsp + 3 * 8]
 11455 0000874D 488D7204                	lea rsi, [rdx + 4]
 11456 00008751 4C8D4EFF                	lea r9, [rsi - 1]
 11457 00008755 488D7903                	lea rdi, [rcx + 3]
 11458 00008759 4D31C0                  	xor r8, r8
 11459                                  .L_tc_recycle_frame_loop_4025:
 11460 0000875C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11461 00008760 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11462 00008765 49FFC9                  	dec r9
 11463 00008768 4D31C0                  	xor r8, r8
 11464 0000876B 48FFCF                  	dec rdi
 11465 0000876E 48FFCE                  	dec rsi
 11466 00008771 4883FE00                	cmp rsi, 0
 11467 00008775 75E5                    	jne .L_tc_recycle_frame_loop_4025
 11468                                  .L_tc_recycle_frame_done_4025:
 11469                                  ;this pop rbp in sot to the right place
 11470 00008777 4989C9                  	mov r9, rcx
 11471 0000877A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11472 00008782 4C01CC                  	add rsp, r9
 11473 00008785 5D                      	pop rbp
 11474 00008786 488B4D00                	mov rcx, qword [rbp]
 11475 0000878A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11476 0000878E FFE3                    	jmp rbx
 11477                                  
 11478                                          	.L_if_end_47ef:
 11479 00008790 C9                      	leave
 11480 00008791 C21800                  	ret 8 * (2 + 1)
 11481                                  .L_lambda_simple_end_376f:	; new closure is in rax
 11482 00008794 48890425[28030000]      	mov qword [free_var_101], rax
 11483 0000879C 48B8-                   	mov rax, sob_void
 11483 0000879E [0000000000000000] 
 11484                                  
 11485 000087A6 4889C7                  	mov rdi, rax
 11486 000087A9 E831970000              	call print_sexpr_if_not_void
 11487                                  
 11488 000087AE 48B8-                   	mov rax,L_constants + 0
 11488 000087B0 [0000000000000000] 
 11489 000087B8 48890425[30030000]      	mov qword [free_var_102], rax
 11490 000087C0 48B8-                   	mov rax, sob_void
 11490 000087C2 [0000000000000000] 
 11491                                  
 11492 000087CA 4889C7                  	mov rdi, rax
 11493 000087CD E80D970000              	call print_sexpr_if_not_void
 11494                                  
 11495 000087D2 48B8-                   	mov rax,L_constants + 0
 11495 000087D4 [0000000000000000] 
 11496 000087DC 48890425[38030000]      	mov qword [free_var_103], rax
 11497 000087E4 48B8-                   	mov rax, sob_void
 11497 000087E6 [0000000000000000] 
 11498                                  
 11499 000087EE 4889C7                  	mov rdi, rax
 11500 000087F1 E8E9960000              	call print_sexpr_if_not_void
 11501                                  
 11502 000087F6 48B8-                   	mov rax,L_constants + 0
 11502 000087F8 [0000000000000000] 
 11503 00008800 48890425[40030000]      	mov qword [free_var_104], rax
 11504 00008808 48B8-                   	mov rax, sob_void
 11504 0000880A [0000000000000000] 
 11505                                  
 11506 00008812 4889C7                  	mov rdi, rax
 11507 00008815 E8C5960000              	call print_sexpr_if_not_void
 11508                                  
 11509 0000881A 48B8-                   	mov rax,L_constants + 0
 11509 0000881C [0000000000000000] 
 11510 00008824 48890425[48030000]      	mov qword [free_var_105], rax
 11511 0000882C 48B8-                   	mov rax, sob_void
 11511 0000882E [0000000000000000] 
 11512                                  
 11513 00008836 4889C7                  	mov rdi, rax
 11514 00008839 E8A1960000              	call print_sexpr_if_not_void
 11515                                  
 11516 0000883E 48B8-                   	mov rax,L_constants + 0
 11516 00008840 [0000000000000000] 
 11517 00008848 48890425[50030000]      	mov qword [free_var_106], rax
 11518 00008850 48B8-                   	mov rax, sob_void
 11518 00008852 [0000000000000000] 
 11519                                  
 11520 0000885A 4889C7                  	mov rdi, rax
 11521 0000885D E87D960000              	call print_sexpr_if_not_void
 11522                                  
 11523 00008862 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11524 00008867 E862960000              	call malloc
 11525 0000886C 50                      	push rax
 11526 0000886D BF00000000              	mov rdi, 8 * 0	; new rib
 11527 00008872 E857960000              	call malloc
 11528 00008877 50                      	push rax
 11529 00008878 BF08000000              	mov rdi, 8 * 1	; extended env
 11530 0000887D E84C960000              	call malloc
 11531 00008882 488B7D10                	mov rdi, ENV
 11532 00008886 BE00000000              	mov rsi, 0
 11533 0000888B BA01000000              	mov rdx, 1
 11534                                  .L_lambda_simple_env_loop_3770:	; ext_env[i + 1] <-- env[i]
 11535 00008890 4883FE00                	cmp rsi, 0
 11536 00008894 7410                    	je .L_lambda_simple_env_end_3770
 11537 00008896 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11538 0000889A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11539 0000889E 48FFC6                  	inc rsi
 11540 000088A1 48FFC2                  	inc rdx
 11541 000088A4 EBEA                    	jmp .L_lambda_simple_env_loop_3770
 11542                                  .L_lambda_simple_env_end_3770:
 11543 000088A6 5B                      	pop rbx
 11544 000088A7 BE00000000              	mov rsi, 0
 11545                                  .L_lambda_simple_params_loop_3770:	; copy params
 11546 000088AC 4883FE00                	cmp rsi, 0
 11547 000088B0 740E                    	je .L_lambda_simple_params_end_3770
 11548 000088B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11549 000088B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11550 000088BB 48FFC6                  	inc rsi
 11551 000088BE EBEC                    	jmp .L_lambda_simple_params_loop_3770
 11552                                  .L_lambda_simple_params_end_3770:
 11553 000088C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11554 000088C3 4889C3                  	mov rbx, rax
 11555 000088C6 58                      	pop rax
 11556 000088C7 C60005                  	mov byte [rax], T_closure
 11557 000088CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11558 000088CE 48C74009[DB880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3770
 11559 000088D6 E99B000000              	jmp .L_lambda_simple_end_3770
 11560                                  .L_lambda_simple_code_3770:	; lambda-simple body
 11561 000088DB 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11562 000088E1 740B                    	je .L_lambda_simple_arity_check_ok_3770
 11563 000088E3 FF742410                	push qword [rsp + 8 * 2]
 11564 000088E7 6A00                    	push 0
 11565 000088E9 E999950000              	jmp L_error_incorrect_arity_simple
 11566                                  .L_lambda_simple_arity_check_ok_3770:
 11567 000088EE C8000000                	enter 0, 0
 11568 000088F2 48B8-                   	mov rax,L_constants + 219
 11568 000088F4 [DB00000000000000] 
 11569 000088FC 50                      	push rax
 11570 000088FD 48B8-                   	mov rax,L_constants + 210
 11570 000088FF [D200000000000000] 
 11571 00008907 50                      	push rax
 11572 00008908 6A02                    	push 2
 11573 0000890A 488B0425[30010000]      	mov rax, qword [free_var_38]
 11574                                  .L_applic_TC_4026:
 11575 00008912 803805                  	cmp byte [rax], T_closure
 11576 00008915 0F8568A50000            	jne L_code_ptr_error
 11577 0000891B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11578 0000891F 53                      	push rbx
 11579 00008920 FF7508                  	push qword [rbp + 8]
 11580 00008923 FF7500                  	push qword [rbp]
 11581 00008926 488B4D18                	mov rcx, [rbp + 3 * 8]
 11582 0000892A 488B542418              	mov rdx, [rsp + 3 * 8]
 11583 0000892F 488D7204                	lea rsi, [rdx + 4]
 11584 00008933 4C8D4EFF                	lea r9, [rsi - 1]
 11585 00008937 488D7903                	lea rdi, [rcx + 3]
 11586 0000893B 4D31C0                  	xor r8, r8
 11587                                  .L_tc_recycle_frame_loop_4026:
 11588 0000893E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11589 00008942 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11590 00008947 49FFC9                  	dec r9
 11591 0000894A 4D31C0                  	xor r8, r8
 11592 0000894D 48FFCF                  	dec rdi
 11593 00008950 48FFCE                  	dec rsi
 11594 00008953 4883FE00                	cmp rsi, 0
 11595 00008957 75E5                    	jne .L_tc_recycle_frame_loop_4026
 11596                                  .L_tc_recycle_frame_done_4026:
 11597                                  ;this pop rbp in sot to the right place
 11598 00008959 4989C9                  	mov r9, rcx
 11599 0000895C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11600 00008964 4C01CC                  	add rsp, r9
 11601 00008967 5D                      	pop rbp
 11602 00008968 488B4D00                	mov rcx, qword [rbp]
 11603 0000896C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11604 00008970 FFE3                    	jmp rbx
 11605 00008972 C9                      	leave
 11606 00008973 C21000                  	ret 8 * (2 + 0)
 11607                                  .L_lambda_simple_end_3770:	; new closure is in rax
 11608 00008976 50                      	push rax
 11609 00008977 6A01                    	push 1
 11610 00008979 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11611 0000897E E84B950000              	call malloc
 11612 00008983 50                      	push rax
 11613 00008984 BF00000000              	mov rdi, 8 * 0	; new rib
 11614 00008989 E840950000              	call malloc
 11615 0000898E 50                      	push rax
 11616 0000898F BF08000000              	mov rdi, 8 * 1	; extended env
 11617 00008994 E835950000              	call malloc
 11618 00008999 488B7D10                	mov rdi, ENV
 11619 0000899D BE00000000              	mov rsi, 0
 11620 000089A2 BA01000000              	mov rdx, 1
 11621                                  .L_lambda_simple_env_loop_3771:	; ext_env[i + 1] <-- env[i]
 11622 000089A7 4883FE00                	cmp rsi, 0
 11623 000089AB 7410                    	je .L_lambda_simple_env_end_3771
 11624 000089AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11625 000089B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11626 000089B5 48FFC6                  	inc rsi
 11627 000089B8 48FFC2                  	inc rdx
 11628 000089BB EBEA                    	jmp .L_lambda_simple_env_loop_3771
 11629                                  .L_lambda_simple_env_end_3771:
 11630 000089BD 5B                      	pop rbx
 11631 000089BE BE00000000              	mov rsi, 0
 11632                                  .L_lambda_simple_params_loop_3771:	; copy params
 11633 000089C3 4883FE00                	cmp rsi, 0
 11634 000089C7 740E                    	je .L_lambda_simple_params_end_3771
 11635 000089C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11636 000089CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11637 000089D2 48FFC6                  	inc rsi
 11638 000089D5 EBEC                    	jmp .L_lambda_simple_params_loop_3771
 11639                                  .L_lambda_simple_params_end_3771:
 11640 000089D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11641 000089DA 4889C3                  	mov rbx, rax
 11642 000089DD 58                      	pop rax
 11643 000089DE C60005                  	mov byte [rax], T_closure
 11644 000089E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11645 000089E5 48C74009[F2890000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3771
 11646 000089ED E92E160000              	jmp .L_lambda_simple_end_3771
 11647                                  .L_lambda_simple_code_3771:	; lambda-simple body
 11648 000089F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11649 000089F8 740B                    	je .L_lambda_simple_arity_check_ok_3771
 11650 000089FA FF742410                	push qword [rsp + 8 * 2]
 11651 000089FE 6A01                    	push 1
 11652 00008A00 E982940000              	jmp L_error_incorrect_arity_simple
 11653                                  .L_lambda_simple_arity_check_ok_3771:
 11654 00008A05 C8000000                	enter 0, 0
 11655 00008A09 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11656 00008A0E E8BB940000              	call malloc
 11657 00008A13 50                      	push rax
 11658 00008A14 BF08000000              	mov rdi, 8 * 1	; new rib
 11659 00008A19 E8B0940000              	call malloc
 11660 00008A1E 50                      	push rax
 11661 00008A1F BF10000000              	mov rdi, 8 * 2	; extended env
 11662 00008A24 E8A5940000              	call malloc
 11663 00008A29 488B7D10                	mov rdi, ENV
 11664 00008A2D BE00000000              	mov rsi, 0
 11665 00008A32 BA01000000              	mov rdx, 1
 11666                                  .L_lambda_simple_env_loop_3772:	; ext_env[i + 1] <-- env[i]
 11667 00008A37 4883FE01                	cmp rsi, 1
 11668 00008A3B 7410                    	je .L_lambda_simple_env_end_3772
 11669 00008A3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11670 00008A41 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11671 00008A45 48FFC6                  	inc rsi
 11672 00008A48 48FFC2                  	inc rdx
 11673 00008A4B EBEA                    	jmp .L_lambda_simple_env_loop_3772
 11674                                  .L_lambda_simple_env_end_3772:
 11675 00008A4D 5B                      	pop rbx
 11676 00008A4E BE00000000              	mov rsi, 0
 11677                                  .L_lambda_simple_params_loop_3772:	; copy params
 11678 00008A53 4883FE01                	cmp rsi, 1
 11679 00008A57 740E                    	je .L_lambda_simple_params_end_3772
 11680 00008A59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11681 00008A5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11682 00008A62 48FFC6                  	inc rsi
 11683 00008A65 EBEC                    	jmp .L_lambda_simple_params_loop_3772
 11684                                  .L_lambda_simple_params_end_3772:
 11685 00008A67 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11686 00008A6A 4889C3                  	mov rbx, rax
 11687 00008A6D 58                      	pop rax
 11688 00008A6E C60005                  	mov byte [rax], T_closure
 11689 00008A71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11690 00008A75 48C74009[828A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3772
 11691 00008A7D E9AB040000              	jmp .L_lambda_simple_end_3772
 11692                                  .L_lambda_simple_code_3772:	; lambda-simple body
 11693 00008A82 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11694 00008A88 740B                    	je .L_lambda_simple_arity_check_ok_3772
 11695 00008A8A FF742410                	push qword [rsp + 8 * 2]
 11696 00008A8E 6A02                    	push 2
 11697 00008A90 E9F2930000              	jmp L_error_incorrect_arity_simple
 11698                                  .L_lambda_simple_arity_check_ok_3772:
 11699 00008A95 C8000000                	enter 0, 0
 11700 00008A99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11701 00008A9E E82B940000              	call malloc
 11702 00008AA3 50                      	push rax
 11703 00008AA4 BF10000000              	mov rdi, 8 * 2	; new rib
 11704 00008AA9 E820940000              	call malloc
 11705 00008AAE 50                      	push rax
 11706 00008AAF BF18000000              	mov rdi, 8 * 3	; extended env
 11707 00008AB4 E815940000              	call malloc
 11708 00008AB9 488B7D10                	mov rdi, ENV
 11709 00008ABD BE00000000              	mov rsi, 0
 11710 00008AC2 BA01000000              	mov rdx, 1
 11711                                  .L_lambda_simple_env_loop_3773:	; ext_env[i + 1] <-- env[i]
 11712 00008AC7 4883FE02                	cmp rsi, 2
 11713 00008ACB 7410                    	je .L_lambda_simple_env_end_3773
 11714 00008ACD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11715 00008AD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11716 00008AD5 48FFC6                  	inc rsi
 11717 00008AD8 48FFC2                  	inc rdx
 11718 00008ADB EBEA                    	jmp .L_lambda_simple_env_loop_3773
 11719                                  .L_lambda_simple_env_end_3773:
 11720 00008ADD 5B                      	pop rbx
 11721 00008ADE BE00000000              	mov rsi, 0
 11722                                  .L_lambda_simple_params_loop_3773:	; copy params
 11723 00008AE3 4883FE02                	cmp rsi, 2
 11724 00008AE7 740E                    	je .L_lambda_simple_params_end_3773
 11725 00008AE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11726 00008AEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11727 00008AF2 48FFC6                  	inc rsi
 11728 00008AF5 EBEC                    	jmp .L_lambda_simple_params_loop_3773
 11729                                  .L_lambda_simple_params_end_3773:
 11730 00008AF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11731 00008AFA 4889C3                  	mov rbx, rax
 11732 00008AFD 58                      	pop rax
 11733 00008AFE C60005                  	mov byte [rax], T_closure
 11734 00008B01 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11735 00008B05 48C74009[128B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3773
 11736 00008B0D E917040000              	jmp .L_lambda_simple_end_3773
 11737                                  .L_lambda_simple_code_3773:	; lambda-simple body
 11738 00008B12 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11739 00008B18 740B                    	je .L_lambda_simple_arity_check_ok_3773
 11740 00008B1A FF742410                	push qword [rsp + 8 * 2]
 11741 00008B1E 6A02                    	push 2
 11742 00008B20 E962930000              	jmp L_error_incorrect_arity_simple
 11743                                  .L_lambda_simple_arity_check_ok_3773:
 11744 00008B25 C8000000                	enter 0, 0
 11745 00008B29 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11746 00008B2D 50                      	push rax
 11747 00008B2E 6A01                    	push 1
 11748 00008B30 488B0425[48000000]      	mov rax, qword [free_var_9]
 11749                                  	assert_closure(rax)
    42 00008B38 803805              <1>  cmp byte [%1], %2
    43 00008B3B 0F8581AB0000        <1>  jne L_error_incorrect_type
 11750 00008B41 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11751 00008B44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11752                                  
 11753 00008B47 483D[02000000]                  	cmp rax, sob_boolean_false
 11754                                  
 11755 00008B4D 0F84D0010000                    	je .L_if_else_47f0
 11756 00008B53 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11757 00008B57 50                      	push rax
 11758 00008B58 6A01                    	push 1
 11759 00008B5A 488B0425[48000000]      	mov rax, qword [free_var_9]
 11760                                  	assert_closure(rax)
    42 00008B62 803805              <1>  cmp byte [%1], %2
    43 00008B65 0F8557AB0000        <1>  jne L_error_incorrect_type
 11761 00008B6B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11762 00008B6E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11763                                  
 11764 00008B71 483D[02000000]                  	cmp rax, sob_boolean_false
 11765                                  
 11766 00008B77 747B                            	je .L_if_else_47f4
 11767 00008B79 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11768 00008B7D 50                      	push rax
 11769 00008B7E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11770 00008B82 50                      	push rax
 11771 00008B83 6A02                    	push 2
 11772 00008B85 488B4510                	mov rax, qword [rbp + 8 * 2]
 11773                                  
 11774 00008B89 488B00                                            	mov rax, qword[rax + 8 * 0]
 11775                                  
 11776 00008B8C 488B00                                            	mov rax, qword[rax + 8 * 0]
 11777                                  .L_applic_TC_402c:
 11778 00008B8F 803805                  	cmp byte [rax], T_closure
 11779 00008B92 0F85EBA20000            	jne L_code_ptr_error
 11780 00008B98 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11781 00008B9C 53                      	push rbx
 11782 00008B9D FF7508                  	push qword [rbp + 8]
 11783 00008BA0 FF7500                  	push qword [rbp]
 11784 00008BA3 488B4D18                	mov rcx, [rbp + 3 * 8]
 11785 00008BA7 488B542418              	mov rdx, [rsp + 3 * 8]
 11786 00008BAC 488D7204                	lea rsi, [rdx + 4]
 11787 00008BB0 4C8D4EFF                	lea r9, [rsi - 1]
 11788 00008BB4 488D7903                	lea rdi, [rcx + 3]
 11789 00008BB8 4D31C0                  	xor r8, r8
 11790                                  .L_tc_recycle_frame_loop_402c:
 11791 00008BBB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11792 00008BBF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11793 00008BC4 49FFC9                  	dec r9
 11794 00008BC7 4D31C0                  	xor r8, r8
 11795 00008BCA 48FFCF                  	dec rdi
 11796 00008BCD 48FFCE                  	dec rsi
 11797 00008BD0 4883FE00                	cmp rsi, 0
 11798 00008BD4 75E5                    	jne .L_tc_recycle_frame_loop_402c
 11799                                  .L_tc_recycle_frame_done_402c:
 11800                                  ;this pop rbp in sot to the right place
 11801 00008BD6 4989C9                  	mov r9, rcx
 11802 00008BD9 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11803 00008BE1 4C01CC                  	add rsp, r9
 11804 00008BE4 5D                      	pop rbp
 11805 00008BE5 488B4D00                	mov rcx, qword [rbp]
 11806 00008BE9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11807 00008BED FFE3                    	jmp rbx
 11808                                  
 11809 00008BEF E92A010000                      	jmp .L_if_end_47f4
 11810                                  
 11811                                          	.L_if_else_47f4:
 11812 00008BF4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11813 00008BF8 50                      	push rax
 11814 00008BF9 6A01                    	push 1
 11815 00008BFB 488B0425[40000000]      	mov rax, qword [free_var_8]
 11816                                  	assert_closure(rax)
    42 00008C03 803805              <1>  cmp byte [%1], %2
    43 00008C06 0F85B6AA0000        <1>  jne L_error_incorrect_type
 11817 00008C0C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11818 00008C0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11819                                  
 11820 00008C12 483D[02000000]                  	cmp rax, sob_boolean_false
 11821                                  
 11822 00008C18 0F8493000000                    	je .L_if_else_47f5
 11823 00008C1E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11824 00008C22 50                      	push rax
 11825 00008C23 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11826 00008C27 50                      	push rax
 11827 00008C28 6A01                    	push 1
 11828 00008C2A 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11829                                  	assert_closure(rax)
    42 00008C32 803805              <1>  cmp byte [%1], %2
    43 00008C35 0F8587AA0000        <1>  jne L_error_incorrect_type
 11830 00008C3B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11831 00008C3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11832 00008C41 50                      	push rax
 11833 00008C42 6A02                    	push 2
 11834 00008C44 488B4510                	mov rax, qword [rbp + 8 * 2]
 11835                                  
 11836 00008C48 488B00                                            	mov rax, qword[rax + 8 * 0]
 11837                                  
 11838 00008C4B 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11839                                  .L_applic_TC_402b:
 11840 00008C4F 803805                  	cmp byte [rax], T_closure
 11841 00008C52 0F852BA20000            	jne L_code_ptr_error
 11842 00008C58 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11843 00008C5C 53                      	push rbx
 11844 00008C5D FF7508                  	push qword [rbp + 8]
 11845 00008C60 FF7500                  	push qword [rbp]
 11846 00008C63 488B4D18                	mov rcx, [rbp + 3 * 8]
 11847 00008C67 488B542418              	mov rdx, [rsp + 3 * 8]
 11848 00008C6C 488D7204                	lea rsi, [rdx + 4]
 11849 00008C70 4C8D4EFF                	lea r9, [rsi - 1]
 11850 00008C74 488D7903                	lea rdi, [rcx + 3]
 11851 00008C78 4D31C0                  	xor r8, r8
 11852                                  .L_tc_recycle_frame_loop_402b:
 11853 00008C7B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11854 00008C7F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11855 00008C84 49FFC9                  	dec r9
 11856 00008C87 4D31C0                  	xor r8, r8
 11857 00008C8A 48FFCF                  	dec rdi
 11858 00008C8D 48FFCE                  	dec rsi
 11859 00008C90 4883FE00                	cmp rsi, 0
 11860 00008C94 75E5                    	jne .L_tc_recycle_frame_loop_402b
 11861                                  .L_tc_recycle_frame_done_402b:
 11862                                  ;this pop rbp in sot to the right place
 11863 00008C96 4989C9                  	mov r9, rcx
 11864 00008C99 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11865 00008CA1 4C01CC                  	add rsp, r9
 11866 00008CA4 5D                      	pop rbp
 11867 00008CA5 488B4D00                	mov rcx, qword [rbp]
 11868 00008CA9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11869 00008CAD FFE3                    	jmp rbx
 11870                                  
 11871 00008CAF EB6D                            	jmp .L_if_end_47f5
 11872                                  
 11873                                          	.L_if_else_47f5:
 11874 00008CB1 6A00                    	push 0
 11875 00008CB3 488B4510                	mov rax, qword [rbp + 8 * 2]
 11876                                  
 11877 00008CB7 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11878                                  
 11879 00008CBB 488B00                                            	mov rax, qword[rax + 8 * 0]
 11880                                  .L_applic_TC_402a:
 11881 00008CBE 803805                  	cmp byte [rax], T_closure
 11882 00008CC1 0F85BCA10000            	jne L_code_ptr_error
 11883 00008CC7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11884 00008CCB 53                      	push rbx
 11885 00008CCC FF7508                  	push qword [rbp + 8]
 11886 00008CCF FF7500                  	push qword [rbp]
 11887 00008CD2 488B4D18                	mov rcx, [rbp + 3 * 8]
 11888 00008CD6 488B542418              	mov rdx, [rsp + 3 * 8]
 11889 00008CDB 488D7204                	lea rsi, [rdx + 4]
 11890 00008CDF 4C8D4EFF                	lea r9, [rsi - 1]
 11891 00008CE3 488D7903                	lea rdi, [rcx + 3]
 11892 00008CE7 4D31C0                  	xor r8, r8
 11893                                  .L_tc_recycle_frame_loop_402a:
 11894 00008CEA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11895 00008CEE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11896 00008CF3 49FFC9                  	dec r9
 11897 00008CF6 4D31C0                  	xor r8, r8
 11898 00008CF9 48FFCF                  	dec rdi
 11899 00008CFC 48FFCE                  	dec rsi
 11900 00008CFF 4883FE00                	cmp rsi, 0
 11901 00008D03 75E5                    	jne .L_tc_recycle_frame_loop_402a
 11902                                  .L_tc_recycle_frame_done_402a:
 11903                                  ;this pop rbp in sot to the right place
 11904 00008D05 4989C9                  	mov r9, rcx
 11905 00008D08 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11906 00008D10 4C01CC                  	add rsp, r9
 11907 00008D13 5D                      	pop rbp
 11908 00008D14 488B4D00                	mov rcx, qword [rbp]
 11909 00008D18 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11910 00008D1C FFE3                    	jmp rbx
 11911                                  
 11912                                          	.L_if_end_47f5:
 11913                                  
 11914                                          	.L_if_end_47f4:
 11915                                  
 11916 00008D1E E902020000                      	jmp .L_if_end_47f0
 11917                                  
 11918                                          	.L_if_else_47f0:
 11919 00008D23 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11920 00008D27 50                      	push rax
 11921 00008D28 6A01                    	push 1
 11922 00008D2A 488B0425[40000000]      	mov rax, qword [free_var_8]
 11923                                  	assert_closure(rax)
    42 00008D32 803805              <1>  cmp byte [%1], %2
    43 00008D35 0F8587A90000        <1>  jne L_error_incorrect_type
 11924 00008D3B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11925 00008D3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11926                                  
 11927 00008D41 483D[02000000]                  	cmp rax, sob_boolean_false
 11928                                  
 11929 00008D47 0F84CE010000                    	je .L_if_else_47f1
 11930 00008D4D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11931 00008D51 50                      	push rax
 11932 00008D52 6A01                    	push 1
 11933 00008D54 488B0425[48000000]      	mov rax, qword [free_var_9]
 11934                                  	assert_closure(rax)
    42 00008D5C 803805              <1>  cmp byte [%1], %2
    43 00008D5F 0F855DA90000        <1>  jne L_error_incorrect_type
 11935 00008D65 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11936 00008D68 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11937                                  
 11938 00008D6B 483D[02000000]                  	cmp rax, sob_boolean_false
 11939                                  
 11940 00008D71 0F8496000000                    	je .L_if_else_47f2
 11941 00008D77 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11942 00008D7B 50                      	push rax
 11943 00008D7C 6A01                    	push 1
 11944 00008D7E 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11945                                  	assert_closure(rax)
    42 00008D86 803805              <1>  cmp byte [%1], %2
    43 00008D89 0F8533A90000        <1>  jne L_error_incorrect_type
 11946 00008D8F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11947 00008D92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11948 00008D95 50                      	push rax
 11949 00008D96 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11950 00008D9A 50                      	push rax
 11951 00008D9B 6A02                    	push 2
 11952 00008D9D 488B4510                	mov rax, qword [rbp + 8 * 2]
 11953                                  
 11954 00008DA1 488B00                                            	mov rax, qword[rax + 8 * 0]
 11955                                  
 11956 00008DA4 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11957                                  .L_applic_TC_4029:
 11958 00008DA8 803805                  	cmp byte [rax], T_closure
 11959 00008DAB 0F85D2A00000            	jne L_code_ptr_error
 11960 00008DB1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11961 00008DB5 53                      	push rbx
 11962 00008DB6 FF7508                  	push qword [rbp + 8]
 11963 00008DB9 FF7500                  	push qword [rbp]
 11964 00008DBC 488B4D18                	mov rcx, [rbp + 3 * 8]
 11965 00008DC0 488B542418              	mov rdx, [rsp + 3 * 8]
 11966 00008DC5 488D7204                	lea rsi, [rdx + 4]
 11967 00008DC9 4C8D4EFF                	lea r9, [rsi - 1]
 11968 00008DCD 488D7903                	lea rdi, [rcx + 3]
 11969 00008DD1 4D31C0                  	xor r8, r8
 11970                                  .L_tc_recycle_frame_loop_4029:
 11971 00008DD4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11972 00008DD8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11973 00008DDD 49FFC9                  	dec r9
 11974 00008DE0 4D31C0                  	xor r8, r8
 11975 00008DE3 48FFCF                  	dec rdi
 11976 00008DE6 48FFCE                  	dec rsi
 11977 00008DE9 4883FE00                	cmp rsi, 0
 11978 00008DED 75E5                    	jne .L_tc_recycle_frame_loop_4029
 11979                                  .L_tc_recycle_frame_done_4029:
 11980                                  ;this pop rbp in sot to the right place
 11981 00008DEF 4989C9                  	mov r9, rcx
 11982 00008DF2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11983 00008DFA 4C01CC                  	add rsp, r9
 11984 00008DFD 5D                      	pop rbp
 11985 00008DFE 488B4D00                	mov rcx, qword [rbp]
 11986 00008E02 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11987 00008E06 FFE3                    	jmp rbx
 11988                                  
 11989 00008E08 E90C010000                      	jmp .L_if_end_47f2
 11990                                  
 11991                                          	.L_if_else_47f2:
 11992 00008E0D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11993 00008E11 50                      	push rax
 11994 00008E12 6A01                    	push 1
 11995 00008E14 488B0425[40000000]      	mov rax, qword [free_var_8]
 11996                                  	assert_closure(rax)
    42 00008E1C 803805              <1>  cmp byte [%1], %2
    43 00008E1F 0F859DA80000        <1>  jne L_error_incorrect_type
 11997 00008E25 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11998 00008E28 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11999                                  
 12000 00008E2B 483D[02000000]                  	cmp rax, sob_boolean_false
 12001                                  
 12002 00008E31 7479                            	je .L_if_else_47f3
 12003 00008E33 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12004 00008E37 50                      	push rax
 12005 00008E38 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12006 00008E3C 50                      	push rax
 12007 00008E3D 6A02                    	push 2
 12008 00008E3F 488B4510                	mov rax, qword [rbp + 8 * 2]
 12009                                  
 12010 00008E43 488B00                                            	mov rax, qword[rax + 8 * 0]
 12011                                  
 12012 00008E46 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12013                                  .L_applic_TC_4028:
 12014 00008E4A 803805                  	cmp byte [rax], T_closure
 12015 00008E4D 0F8530A00000            	jne L_code_ptr_error
 12016 00008E53 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12017 00008E57 53                      	push rbx
 12018 00008E58 FF7508                  	push qword [rbp + 8]
 12019 00008E5B FF7500                  	push qword [rbp]
 12020 00008E5E 488B4D18                	mov rcx, [rbp + 3 * 8]
 12021 00008E62 488B542418              	mov rdx, [rsp + 3 * 8]
 12022 00008E67 488D7204                	lea rsi, [rdx + 4]
 12023 00008E6B 4C8D4EFF                	lea r9, [rsi - 1]
 12024 00008E6F 488D7903                	lea rdi, [rcx + 3]
 12025 00008E73 4D31C0                  	xor r8, r8
 12026                                  .L_tc_recycle_frame_loop_4028:
 12027 00008E76 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12028 00008E7A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12029 00008E7F 49FFC9                  	dec r9
 12030 00008E82 4D31C0                  	xor r8, r8
 12031 00008E85 48FFCF                  	dec rdi
 12032 00008E88 48FFCE                  	dec rsi
 12033 00008E8B 4883FE00                	cmp rsi, 0
 12034 00008E8F 75E5                    	jne .L_tc_recycle_frame_loop_4028
 12035                                  .L_tc_recycle_frame_done_4028:
 12036                                  ;this pop rbp in sot to the right place
 12037 00008E91 4989C9                  	mov r9, rcx
 12038 00008E94 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12039 00008E9C 4C01CC                  	add rsp, r9
 12040 00008E9F 5D                      	pop rbp
 12041 00008EA0 488B4D00                	mov rcx, qword [rbp]
 12042 00008EA4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12043 00008EA8 FFE3                    	jmp rbx
 12044                                  
 12045 00008EAA EB6D                            	jmp .L_if_end_47f3
 12046                                  
 12047                                          	.L_if_else_47f3:
 12048 00008EAC 6A00                    	push 0
 12049 00008EAE 488B4510                	mov rax, qword [rbp + 8 * 2]
 12050                                  
 12051 00008EB2 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12052                                  
 12053 00008EB6 488B00                                            	mov rax, qword[rax + 8 * 0]
 12054                                  .L_applic_TC_4027:
 12055 00008EB9 803805                  	cmp byte [rax], T_closure
 12056 00008EBC 0F85C19F0000            	jne L_code_ptr_error
 12057 00008EC2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12058 00008EC6 53                      	push rbx
 12059 00008EC7 FF7508                  	push qword [rbp + 8]
 12060 00008ECA FF7500                  	push qword [rbp]
 12061 00008ECD 488B4D18                	mov rcx, [rbp + 3 * 8]
 12062 00008ED1 488B542418              	mov rdx, [rsp + 3 * 8]
 12063 00008ED6 488D7204                	lea rsi, [rdx + 4]
 12064 00008EDA 4C8D4EFF                	lea r9, [rsi - 1]
 12065 00008EDE 488D7903                	lea rdi, [rcx + 3]
 12066 00008EE2 4D31C0                  	xor r8, r8
 12067                                  .L_tc_recycle_frame_loop_4027:
 12068 00008EE5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12069 00008EE9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12070 00008EEE 49FFC9                  	dec r9
 12071 00008EF1 4D31C0                  	xor r8, r8
 12072 00008EF4 48FFCF                  	dec rdi
 12073 00008EF7 48FFCE                  	dec rsi
 12074 00008EFA 4883FE00                	cmp rsi, 0
 12075 00008EFE 75E5                    	jne .L_tc_recycle_frame_loop_4027
 12076                                  .L_tc_recycle_frame_done_4027:
 12077                                  ;this pop rbp in sot to the right place
 12078 00008F00 4989C9                  	mov r9, rcx
 12079 00008F03 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12080 00008F0B 4C01CC                  	add rsp, r9
 12081 00008F0E 5D                      	pop rbp
 12082 00008F0F 488B4D00                	mov rcx, qword [rbp]
 12083 00008F13 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12084 00008F17 FFE3                    	jmp rbx
 12085                                  
 12086                                          	.L_if_end_47f3:
 12087                                  
 12088                                          	.L_if_end_47f2:
 12089                                  
 12090 00008F19 EB0A                            	jmp .L_if_end_47f1
 12091                                  
 12092                                          	.L_if_else_47f1:
 12093 00008F1B 48B8-                   	mov rax,L_constants + 0
 12093 00008F1D [0000000000000000] 
 12094                                  
 12095                                          	.L_if_end_47f1:
 12096                                  
 12097                                          	.L_if_end_47f0:
 12098 00008F25 C9                      	leave
 12099 00008F26 C22000                  	ret 8 * (2 + 2)
 12100                                  .L_lambda_simple_end_3773:	; new closure is in rax
 12101 00008F29 C9                      	leave
 12102 00008F2A C22000                  	ret 8 * (2 + 2)
 12103                                  .L_lambda_simple_end_3772:	; new closure is in rax
 12104 00008F2D 50                      	push rax
 12105 00008F2E 6A01                    	push 1
 12106 00008F30 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12107 00008F35 E8948F0000              	call malloc
 12108 00008F3A 50                      	push rax
 12109 00008F3B BF08000000              	mov rdi, 8 * 1	; new rib
 12110 00008F40 E8898F0000              	call malloc
 12111 00008F45 50                      	push rax
 12112 00008F46 BF10000000              	mov rdi, 8 * 2	; extended env
 12113 00008F4B E87E8F0000              	call malloc
 12114 00008F50 488B7D10                	mov rdi, ENV
 12115 00008F54 BE00000000              	mov rsi, 0
 12116 00008F59 BA01000000              	mov rdx, 1
 12117                                  .L_lambda_simple_env_loop_3774:	; ext_env[i + 1] <-- env[i]
 12118 00008F5E 4883FE01                	cmp rsi, 1
 12119 00008F62 7410                    	je .L_lambda_simple_env_end_3774
 12120 00008F64 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12121 00008F68 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12122 00008F6C 48FFC6                  	inc rsi
 12123 00008F6F 48FFC2                  	inc rdx
 12124 00008F72 EBEA                    	jmp .L_lambda_simple_env_loop_3774
 12125                                  .L_lambda_simple_env_end_3774:
 12126 00008F74 5B                      	pop rbx
 12127 00008F75 BE00000000              	mov rsi, 0
 12128                                  .L_lambda_simple_params_loop_3774:	; copy params
 12129 00008F7A 4883FE01                	cmp rsi, 1
 12130 00008F7E 740E                    	je .L_lambda_simple_params_end_3774
 12131 00008F80 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12132 00008F85 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12133 00008F89 48FFC6                  	inc rsi
 12134 00008F8C EBEC                    	jmp .L_lambda_simple_params_loop_3774
 12135                                  .L_lambda_simple_params_end_3774:
 12136 00008F8E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12137 00008F91 4889C3                  	mov rbx, rax
 12138 00008F94 58                      	pop rax
 12139 00008F95 C60005                  	mov byte [rax], T_closure
 12140 00008F98 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12141 00008F9C 48C74009[A98F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3774
 12142 00008FA4 E913100000              	jmp .L_lambda_simple_end_3774
 12143                                  .L_lambda_simple_code_3774:	; lambda-simple body
 12144 00008FA9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12145 00008FAF 740B                    	je .L_lambda_simple_arity_check_ok_3774
 12146 00008FB1 FF742410                	push qword [rsp + 8 * 2]
 12147 00008FB5 6A01                    	push 1
 12148 00008FB7 E9CB8E0000              	jmp L_error_incorrect_arity_simple
 12149                                  .L_lambda_simple_arity_check_ok_3774:
 12150 00008FBC C8000000                	enter 0, 0
 12151 00008FC0 488B0425[38010000]      	mov rax, qword [free_var_39]
 12152 00008FC8 50                      	push rax
 12153 00008FC9 488B0425[40010000]      	mov rax, qword [free_var_40]
 12154 00008FD1 50                      	push rax
 12155 00008FD2 6A02                    	push 2
 12156 00008FD4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12157                                  	assert_closure(rax)
    42 00008FD8 803805              <1>  cmp byte [%1], %2
    43 00008FDB 0F85E1A60000        <1>  jne L_error_incorrect_type
 12158 00008FE1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12159 00008FE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12160 00008FE7 50                      	push rax
 12161 00008FE8 6A01                    	push 1
 12162 00008FEA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12163 00008FEF E8DA8E0000              	call malloc
 12164 00008FF4 50                      	push rax
 12165 00008FF5 BF08000000              	mov rdi, 8 * 1	; new rib
 12166 00008FFA E8CF8E0000              	call malloc
 12167 00008FFF 50                      	push rax
 12168 00009000 BF18000000              	mov rdi, 8 * 3	; extended env
 12169 00009005 E8C48E0000              	call malloc
 12170 0000900A 488B7D10                	mov rdi, ENV
 12171 0000900E BE00000000              	mov rsi, 0
 12172 00009013 BA01000000              	mov rdx, 1
 12173                                  .L_lambda_simple_env_loop_3775:	; ext_env[i + 1] <-- env[i]
 12174 00009018 4883FE02                	cmp rsi, 2
 12175 0000901C 7410                    	je .L_lambda_simple_env_end_3775
 12176 0000901E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12177 00009022 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12178 00009026 48FFC6                  	inc rsi
 12179 00009029 48FFC2                  	inc rdx
 12180 0000902C EBEA                    	jmp .L_lambda_simple_env_loop_3775
 12181                                  .L_lambda_simple_env_end_3775:
 12182 0000902E 5B                      	pop rbx
 12183 0000902F BE00000000              	mov rsi, 0
 12184                                  .L_lambda_simple_params_loop_3775:	; copy params
 12185 00009034 4883FE01                	cmp rsi, 1
 12186 00009038 740E                    	je .L_lambda_simple_params_end_3775
 12187 0000903A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12188 0000903F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12189 00009043 48FFC6                  	inc rsi
 12190 00009046 EBEC                    	jmp .L_lambda_simple_params_loop_3775
 12191                                  .L_lambda_simple_params_end_3775:
 12192 00009048 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12193 0000904B 4889C3                  	mov rbx, rax
 12194 0000904E 58                      	pop rax
 12195 0000904F C60005                  	mov byte [rax], T_closure
 12196 00009052 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12197 00009056 48C74009[63900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3775
 12198 0000905E E9F50E0000              	jmp .L_lambda_simple_end_3775
 12199                                  .L_lambda_simple_code_3775:	; lambda-simple body
 12200 00009063 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12201 00009069 740B                    	je .L_lambda_simple_arity_check_ok_3775
 12202 0000906B FF742410                	push qword [rsp + 8 * 2]
 12203 0000906F 6A01                    	push 1
 12204 00009071 E9118E0000              	jmp L_error_incorrect_arity_simple
 12205                                  .L_lambda_simple_arity_check_ok_3775:
 12206 00009076 C8000000                	enter 0, 0
 12207 0000907A 488B0425[48010000]      	mov rax, qword [free_var_41]
 12208 00009082 50                      	push rax
 12209 00009083 488B0425[50010000]      	mov rax, qword [free_var_42]
 12210 0000908B 50                      	push rax
 12211 0000908C 6A02                    	push 2
 12212 0000908E 488B4510                	mov rax, qword [rbp + 8 * 2]
 12213                                  
 12214 00009092 488B00                                            	mov rax, qword[rax + 8 * 0]
 12215                                  
 12216 00009095 488B00                                            	mov rax, qword[rax + 8 * 0]
 12217                                  	assert_closure(rax)
    42 00009098 803805              <1>  cmp byte [%1], %2
    43 0000909B 0F8521A60000        <1>  jne L_error_incorrect_type
 12218 000090A1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12219 000090A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12220 000090A7 50                      	push rax
 12221 000090A8 6A01                    	push 1
 12222 000090AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12223 000090AF E81A8E0000              	call malloc
 12224 000090B4 50                      	push rax
 12225 000090B5 BF08000000              	mov rdi, 8 * 1	; new rib
 12226 000090BA E80F8E0000              	call malloc
 12227 000090BF 50                      	push rax
 12228 000090C0 BF20000000              	mov rdi, 8 * 4	; extended env
 12229 000090C5 E8048E0000              	call malloc
 12230 000090CA 488B7D10                	mov rdi, ENV
 12231 000090CE BE00000000              	mov rsi, 0
 12232 000090D3 BA01000000              	mov rdx, 1
 12233                                  .L_lambda_simple_env_loop_3776:	; ext_env[i + 1] <-- env[i]
 12234 000090D8 4883FE03                	cmp rsi, 3
 12235 000090DC 7410                    	je .L_lambda_simple_env_end_3776
 12236 000090DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12237 000090E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12238 000090E6 48FFC6                  	inc rsi
 12239 000090E9 48FFC2                  	inc rdx
 12240 000090EC EBEA                    	jmp .L_lambda_simple_env_loop_3776
 12241                                  .L_lambda_simple_env_end_3776:
 12242 000090EE 5B                      	pop rbx
 12243 000090EF BE00000000              	mov rsi, 0
 12244                                  .L_lambda_simple_params_loop_3776:	; copy params
 12245 000090F4 4883FE01                	cmp rsi, 1
 12246 000090F8 740E                    	je .L_lambda_simple_params_end_3776
 12247 000090FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12248 000090FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12249 00009103 48FFC6                  	inc rsi
 12250 00009106 EBEC                    	jmp .L_lambda_simple_params_loop_3776
 12251                                  .L_lambda_simple_params_end_3776:
 12252 00009108 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12253 0000910B 4889C3                  	mov rbx, rax
 12254 0000910E 58                      	pop rax
 12255 0000910F C60005                  	mov byte [rax], T_closure
 12256 00009112 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12257 00009116 48C74009[23910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3776
 12258 0000911E E9D10D0000              	jmp .L_lambda_simple_end_3776
 12259                                  .L_lambda_simple_code_3776:	; lambda-simple body
 12260 00009123 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12261 00009129 740B                    	je .L_lambda_simple_arity_check_ok_3776
 12262 0000912B FF742410                	push qword [rsp + 8 * 2]
 12263 0000912F 6A01                    	push 1
 12264 00009131 E9518D0000              	jmp L_error_incorrect_arity_simple
 12265                                  .L_lambda_simple_arity_check_ok_3776:
 12266 00009136 C8000000                	enter 0, 0
 12267 0000913A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12268 0000913F E88A8D0000              	call malloc
 12269 00009144 50                      	push rax
 12270 00009145 BF08000000              	mov rdi, 8 * 1	; new rib
 12271 0000914A E87F8D0000              	call malloc
 12272 0000914F 50                      	push rax
 12273 00009150 BF28000000              	mov rdi, 8 * 5	; extended env
 12274 00009155 E8748D0000              	call malloc
 12275 0000915A 488B7D10                	mov rdi, ENV
 12276 0000915E BE00000000              	mov rsi, 0
 12277 00009163 BA01000000              	mov rdx, 1
 12278                                  .L_lambda_simple_env_loop_3777:	; ext_env[i + 1] <-- env[i]
 12279 00009168 4883FE04                	cmp rsi, 4
 12280 0000916C 7410                    	je .L_lambda_simple_env_end_3777
 12281 0000916E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12282 00009172 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12283 00009176 48FFC6                  	inc rsi
 12284 00009179 48FFC2                  	inc rdx
 12285 0000917C EBEA                    	jmp .L_lambda_simple_env_loop_3777
 12286                                  .L_lambda_simple_env_end_3777:
 12287 0000917E 5B                      	pop rbx
 12288 0000917F BE00000000              	mov rsi, 0
 12289                                  .L_lambda_simple_params_loop_3777:	; copy params
 12290 00009184 4883FE01                	cmp rsi, 1
 12291 00009188 740E                    	je .L_lambda_simple_params_end_3777
 12292 0000918A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12293 0000918F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12294 00009193 48FFC6                  	inc rsi
 12295 00009196 EBEC                    	jmp .L_lambda_simple_params_loop_3777
 12296                                  .L_lambda_simple_params_end_3777:
 12297 00009198 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12298 0000919B 4889C3                  	mov rbx, rax
 12299 0000919E 58                      	pop rax
 12300 0000919F C60005                  	mov byte [rax], T_closure
 12301 000091A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12302 000091A6 48C74009[B3910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3777
 12303 000091AE E9AC000000              	jmp .L_lambda_simple_end_3777
 12304                                  .L_lambda_simple_code_3777:	; lambda-simple body
 12305 000091B3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12306 000091B9 740B                    	je .L_lambda_simple_arity_check_ok_3777
 12307 000091BB FF742410                	push qword [rsp + 8 * 2]
 12308 000091BF 6A02                    	push 2
 12309 000091C1 E9C18C0000              	jmp L_error_incorrect_arity_simple
 12310                                  .L_lambda_simple_arity_check_ok_3777:
 12311 000091C6 C8000000                	enter 0, 0
 12312 000091CA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12313 000091CE 50                      	push rax
 12314 000091CF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12315 000091D3 50                      	push rax
 12316 000091D4 6A02                    	push 2
 12317 000091D6 488B4510                	mov rax, qword [rbp + 8 * 2]
 12318                                  
 12319 000091DA 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12320                                  
 12321 000091DE 488B00                                            	mov rax, qword[rax + 8 * 0]
 12322                                  	assert_closure(rax)
    42 000091E1 803805              <1>  cmp byte [%1], %2
    43 000091E4 0F85D8A40000        <1>  jne L_error_incorrect_type
 12323 000091EA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12324 000091ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 12325 000091F0 50                      	push rax
 12326 000091F1 6A01                    	push 1
 12327 000091F3 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12328                                  .L_applic_TC_402d:
 12329 000091FB 803805                  	cmp byte [rax], T_closure
 12330 000091FE 0F857F9C0000            	jne L_code_ptr_error
 12331 00009204 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12332 00009208 53                      	push rbx
 12333 00009209 FF7508                  	push qword [rbp + 8]
 12334 0000920C FF7500                  	push qword [rbp]
 12335 0000920F 488B4D18                	mov rcx, [rbp + 3 * 8]
 12336 00009213 488B542418              	mov rdx, [rsp + 3 * 8]
 12337 00009218 488D7204                	lea rsi, [rdx + 4]
 12338 0000921C 4C8D4EFF                	lea r9, [rsi - 1]
 12339 00009220 488D7903                	lea rdi, [rcx + 3]
 12340 00009224 4D31C0                  	xor r8, r8
 12341                                  .L_tc_recycle_frame_loop_402d:
 12342 00009227 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12343 0000922B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12344 00009230 49FFC9                  	dec r9
 12345 00009233 4D31C0                  	xor r8, r8
 12346 00009236 48FFCF                  	dec rdi
 12347 00009239 48FFCE                  	dec rsi
 12348 0000923C 4883FE00                	cmp rsi, 0
 12349 00009240 75E5                    	jne .L_tc_recycle_frame_loop_402d
 12350                                  .L_tc_recycle_frame_done_402d:
 12351                                  ;this pop rbp in sot to the right place
 12352 00009242 4989C9                  	mov r9, rcx
 12353 00009245 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12354 0000924D 4C01CC                  	add rsp, r9
 12355 00009250 5D                      	pop rbp
 12356 00009251 488B4D00                	mov rcx, qword [rbp]
 12357 00009255 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12358 00009259 FFE3                    	jmp rbx
 12359 0000925B C9                      	leave
 12360 0000925C C22000                  	ret 8 * (2 + 2)
 12361                                  .L_lambda_simple_end_3777:	; new closure is in rax
 12362 0000925F 50                      	push rax
 12363 00009260 6A01                    	push 1
 12364 00009262 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12365 00009267 E8628C0000              	call malloc
 12366 0000926C 50                      	push rax
 12367 0000926D BF08000000              	mov rdi, 8 * 1	; new rib
 12368 00009272 E8578C0000              	call malloc
 12369 00009277 50                      	push rax
 12370 00009278 BF28000000              	mov rdi, 8 * 5	; extended env
 12371 0000927D E84C8C0000              	call malloc
 12372 00009282 488B7D10                	mov rdi, ENV
 12373 00009286 BE00000000              	mov rsi, 0
 12374 0000928B BA01000000              	mov rdx, 1
 12375                                  .L_lambda_simple_env_loop_3778:	; ext_env[i + 1] <-- env[i]
 12376 00009290 4883FE04                	cmp rsi, 4
 12377 00009294 7410                    	je .L_lambda_simple_env_end_3778
 12378 00009296 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12379 0000929A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12380 0000929E 48FFC6                  	inc rsi
 12381 000092A1 48FFC2                  	inc rdx
 12382 000092A4 EBEA                    	jmp .L_lambda_simple_env_loop_3778
 12383                                  .L_lambda_simple_env_end_3778:
 12384 000092A6 5B                      	pop rbx
 12385 000092A7 BE00000000              	mov rsi, 0
 12386                                  .L_lambda_simple_params_loop_3778:	; copy params
 12387 000092AC 4883FE01                	cmp rsi, 1
 12388 000092B0 740E                    	je .L_lambda_simple_params_end_3778
 12389 000092B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12390 000092B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12391 000092BB 48FFC6                  	inc rsi
 12392 000092BE EBEC                    	jmp .L_lambda_simple_params_loop_3778
 12393                                  .L_lambda_simple_params_end_3778:
 12394 000092C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12395 000092C3 4889C3                  	mov rbx, rax
 12396 000092C6 58                      	pop rax
 12397 000092C7 C60005                  	mov byte [rax], T_closure
 12398 000092CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12399 000092CE 48C74009[DB920000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3778
 12400 000092D6 E9B50B0000              	jmp .L_lambda_simple_end_3778
 12401                                  .L_lambda_simple_code_3778:	; lambda-simple body
 12402 000092DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12403 000092E1 740B                    	je .L_lambda_simple_arity_check_ok_3778
 12404 000092E3 FF742410                	push qword [rsp + 8 * 2]
 12405 000092E7 6A01                    	push 1
 12406 000092E9 E9998B0000              	jmp L_error_incorrect_arity_simple
 12407                                  .L_lambda_simple_arity_check_ok_3778:
 12408 000092EE C8000000                	enter 0, 0
 12409 000092F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12410 000092F7 E8D28B0000              	call malloc
 12411 000092FC 50                      	push rax
 12412 000092FD BF08000000              	mov rdi, 8 * 1	; new rib
 12413 00009302 E8C78B0000              	call malloc
 12414 00009307 50                      	push rax
 12415 00009308 BF30000000              	mov rdi, 8 * 6	; extended env
 12416 0000930D E8BC8B0000              	call malloc
 12417 00009312 488B7D10                	mov rdi, ENV
 12418 00009316 BE00000000              	mov rsi, 0
 12419 0000931B BA01000000              	mov rdx, 1
 12420                                  .L_lambda_simple_env_loop_3779:	; ext_env[i + 1] <-- env[i]
 12421 00009320 4883FE05                	cmp rsi, 5
 12422 00009324 7410                    	je .L_lambda_simple_env_end_3779
 12423 00009326 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12424 0000932A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12425 0000932E 48FFC6                  	inc rsi
 12426 00009331 48FFC2                  	inc rdx
 12427 00009334 EBEA                    	jmp .L_lambda_simple_env_loop_3779
 12428                                  .L_lambda_simple_env_end_3779:
 12429 00009336 5B                      	pop rbx
 12430 00009337 BE00000000              	mov rsi, 0
 12431                                  .L_lambda_simple_params_loop_3779:	; copy params
 12432 0000933C 4883FE01                	cmp rsi, 1
 12433 00009340 740E                    	je .L_lambda_simple_params_end_3779
 12434 00009342 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12435 00009347 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12436 0000934B 48FFC6                  	inc rsi
 12437 0000934E EBEC                    	jmp .L_lambda_simple_params_loop_3779
 12438                                  .L_lambda_simple_params_end_3779:
 12439 00009350 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12440 00009353 4889C3                  	mov rbx, rax
 12441 00009356 58                      	pop rax
 12442 00009357 C60005                  	mov byte [rax], T_closure
 12443 0000935A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12444 0000935E 48C74009[6B930000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3779
 12445 00009366 E992000000              	jmp .L_lambda_simple_end_3779
 12446                                  .L_lambda_simple_code_3779:	; lambda-simple body
 12447 0000936B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12448 00009371 740B                    	je .L_lambda_simple_arity_check_ok_3779
 12449 00009373 FF742410                	push qword [rsp + 8 * 2]
 12450 00009377 6A02                    	push 2
 12451 00009379 E9098B0000              	jmp L_error_incorrect_arity_simple
 12452                                  .L_lambda_simple_arity_check_ok_3779:
 12453 0000937E C8000000                	enter 0, 0
 12454 00009382 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12455 00009386 50                      	push rax
 12456 00009387 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12457 0000938B 50                      	push rax
 12458 0000938C 6A02                    	push 2
 12459 0000938E 488B4510                	mov rax, qword [rbp + 8 * 2]
 12460                                  
 12461 00009392 488B4010                                          	mov rax, qword[rax + 8 * 2]
 12462                                  
 12463 00009396 488B00                                            	mov rax, qword[rax + 8 * 0]
 12464                                  .L_applic_TC_402e:
 12465 00009399 803805                  	cmp byte [rax], T_closure
 12466 0000939C 0F85E19A0000            	jne L_code_ptr_error
 12467 000093A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12468 000093A6 53                      	push rbx
 12469 000093A7 FF7508                  	push qword [rbp + 8]
 12470 000093AA FF7500                  	push qword [rbp]
 12471 000093AD 488B4D18                	mov rcx, [rbp + 3 * 8]
 12472 000093B1 488B542418              	mov rdx, [rsp + 3 * 8]
 12473 000093B6 488D7204                	lea rsi, [rdx + 4]
 12474 000093BA 4C8D4EFF                	lea r9, [rsi - 1]
 12475 000093BE 488D7903                	lea rdi, [rcx + 3]
 12476 000093C2 4D31C0                  	xor r8, r8
 12477                                  .L_tc_recycle_frame_loop_402e:
 12478 000093C5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12479 000093C9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12480 000093CE 49FFC9                  	dec r9
 12481 000093D1 4D31C0                  	xor r8, r8
 12482 000093D4 48FFCF                  	dec rdi
 12483 000093D7 48FFCE                  	dec rsi
 12484 000093DA 4883FE00                	cmp rsi, 0
 12485 000093DE 75E5                    	jne .L_tc_recycle_frame_loop_402e
 12486                                  .L_tc_recycle_frame_done_402e:
 12487                                  ;this pop rbp in sot to the right place
 12488 000093E0 4989C9                  	mov r9, rcx
 12489 000093E3 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12490 000093EB 4C01CC                  	add rsp, r9
 12491 000093EE 5D                      	pop rbp
 12492 000093EF 488B4D00                	mov rcx, qword [rbp]
 12493 000093F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12494 000093F7 FFE3                    	jmp rbx
 12495 000093F9 C9                      	leave
 12496 000093FA C22000                  	ret 8 * (2 + 2)
 12497                                  .L_lambda_simple_end_3779:	; new closure is in rax
 12498 000093FD 50                      	push rax
 12499 000093FE 6A01                    	push 1
 12500 00009400 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12501 00009405 E8C48A0000              	call malloc
 12502 0000940A 50                      	push rax
 12503 0000940B BF08000000              	mov rdi, 8 * 1	; new rib
 12504 00009410 E8B98A0000              	call malloc
 12505 00009415 50                      	push rax
 12506 00009416 BF30000000              	mov rdi, 8 * 6	; extended env
 12507 0000941B E8AE8A0000              	call malloc
 12508 00009420 488B7D10                	mov rdi, ENV
 12509 00009424 BE00000000              	mov rsi, 0
 12510 00009429 BA01000000              	mov rdx, 1
 12511                                  .L_lambda_simple_env_loop_377a:	; ext_env[i + 1] <-- env[i]
 12512 0000942E 4883FE05                	cmp rsi, 5
 12513 00009432 7410                    	je .L_lambda_simple_env_end_377a
 12514 00009434 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12515 00009438 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12516 0000943C 48FFC6                  	inc rsi
 12517 0000943F 48FFC2                  	inc rdx
 12518 00009442 EBEA                    	jmp .L_lambda_simple_env_loop_377a
 12519                                  .L_lambda_simple_env_end_377a:
 12520 00009444 5B                      	pop rbx
 12521 00009445 BE00000000              	mov rsi, 0
 12522                                  .L_lambda_simple_params_loop_377a:	; copy params
 12523 0000944A 4883FE01                	cmp rsi, 1
 12524 0000944E 740E                    	je .L_lambda_simple_params_end_377a
 12525 00009450 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12526 00009455 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12527 00009459 48FFC6                  	inc rsi
 12528 0000945C EBEC                    	jmp .L_lambda_simple_params_loop_377a
 12529                                  .L_lambda_simple_params_end_377a:
 12530 0000945E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12531 00009461 4889C3                  	mov rbx, rax
 12532 00009464 58                      	pop rax
 12533 00009465 C60005                  	mov byte [rax], T_closure
 12534 00009468 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12535 0000946C 48C74009[79940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_377a
 12536 00009474 E9B3090000              	jmp .L_lambda_simple_end_377a
 12537                                  .L_lambda_simple_code_377a:	; lambda-simple body
 12538 00009479 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12539 0000947F 740B                    	je .L_lambda_simple_arity_check_ok_377a
 12540 00009481 FF742410                	push qword [rsp + 8 * 2]
 12541 00009485 6A01                    	push 1
 12542 00009487 E9FB890000              	jmp L_error_incorrect_arity_simple
 12543                                  .L_lambda_simple_arity_check_ok_377a:
 12544 0000948C C8000000                	enter 0, 0
 12545 00009490 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12546 00009495 E8348A0000              	call malloc
 12547 0000949A 50                      	push rax
 12548 0000949B BF08000000              	mov rdi, 8 * 1	; new rib
 12549 000094A0 E8298A0000              	call malloc
 12550 000094A5 50                      	push rax
 12551 000094A6 BF38000000              	mov rdi, 8 * 7	; extended env
 12552 000094AB E81E8A0000              	call malloc
 12553 000094B0 488B7D10                	mov rdi, ENV
 12554 000094B4 BE00000000              	mov rsi, 0
 12555 000094B9 BA01000000              	mov rdx, 1
 12556                                  .L_lambda_simple_env_loop_377b:	; ext_env[i + 1] <-- env[i]
 12557 000094BE 4883FE06                	cmp rsi, 6
 12558 000094C2 7410                    	je .L_lambda_simple_env_end_377b
 12559 000094C4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12560 000094C8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12561 000094CC 48FFC6                  	inc rsi
 12562 000094CF 48FFC2                  	inc rdx
 12563 000094D2 EBEA                    	jmp .L_lambda_simple_env_loop_377b
 12564                                  .L_lambda_simple_env_end_377b:
 12565 000094D4 5B                      	pop rbx
 12566 000094D5 BE00000000              	mov rsi, 0
 12567                                  .L_lambda_simple_params_loop_377b:	; copy params
 12568 000094DA 4883FE01                	cmp rsi, 1
 12569 000094DE 740E                    	je .L_lambda_simple_params_end_377b
 12570 000094E0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12571 000094E5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12572 000094E9 48FFC6                  	inc rsi
 12573 000094EC EBEC                    	jmp .L_lambda_simple_params_loop_377b
 12574                                  .L_lambda_simple_params_end_377b:
 12575 000094EE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12576 000094F1 4889C3                  	mov rbx, rax
 12577 000094F4 58                      	pop rax
 12578 000094F5 C60005                  	mov byte [rax], T_closure
 12579 000094F8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12580 000094FC 48C74009[09950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_377b
 12581 00009504 E9AB000000              	jmp .L_lambda_simple_end_377b
 12582                                  .L_lambda_simple_code_377b:	; lambda-simple body
 12583 00009509 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12584 0000950F 740B                    	je .L_lambda_simple_arity_check_ok_377b
 12585 00009511 FF742410                	push qword [rsp + 8 * 2]
 12586 00009515 6A02                    	push 2
 12587 00009517 E96B890000              	jmp L_error_incorrect_arity_simple
 12588                                  .L_lambda_simple_arity_check_ok_377b:
 12589 0000951C C8000000                	enter 0, 0
 12590 00009520 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12591 00009524 50                      	push rax
 12592 00009525 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12593 00009529 50                      	push rax
 12594 0000952A 6A02                    	push 2
 12595 0000952C 488B4510                	mov rax, qword [rbp + 8 * 2]
 12596                                  
 12597 00009530 488B00                                            	mov rax, qword[rax + 8 * 0]
 12598                                  
 12599 00009533 488B00                                            	mov rax, qword[rax + 8 * 0]
 12600                                  	assert_closure(rax)
    42 00009536 803805              <1>  cmp byte [%1], %2
    43 00009539 0F8583A10000        <1>  jne L_error_incorrect_type
 12601 0000953F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12602 00009542 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12603 00009545 50                      	push rax
 12604 00009546 6A01                    	push 1
 12605 00009548 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12606                                  .L_applic_TC_402f:
 12607 00009550 803805                  	cmp byte [rax], T_closure
 12608 00009553 0F852A990000            	jne L_code_ptr_error
 12609 00009559 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12610 0000955D 53                      	push rbx
 12611 0000955E FF7508                  	push qword [rbp + 8]
 12612 00009561 FF7500                  	push qword [rbp]
 12613 00009564 488B4D18                	mov rcx, [rbp + 3 * 8]
 12614 00009568 488B542418              	mov rdx, [rsp + 3 * 8]
 12615 0000956D 488D7204                	lea rsi, [rdx + 4]
 12616 00009571 4C8D4EFF                	lea r9, [rsi - 1]
 12617 00009575 488D7903                	lea rdi, [rcx + 3]
 12618 00009579 4D31C0                  	xor r8, r8
 12619                                  .L_tc_recycle_frame_loop_402f:
 12620 0000957C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12621 00009580 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12622 00009585 49FFC9                  	dec r9
 12623 00009588 4D31C0                  	xor r8, r8
 12624 0000958B 48FFCF                  	dec rdi
 12625 0000958E 48FFCE                  	dec rsi
 12626 00009591 4883FE00                	cmp rsi, 0
 12627 00009595 75E5                    	jne .L_tc_recycle_frame_loop_402f
 12628                                  .L_tc_recycle_frame_done_402f:
 12629                                  ;this pop rbp in sot to the right place
 12630 00009597 4989C9                  	mov r9, rcx
 12631 0000959A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12632 000095A2 4C01CC                  	add rsp, r9
 12633 000095A5 5D                      	pop rbp
 12634 000095A6 488B4D00                	mov rcx, qword [rbp]
 12635 000095AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12636 000095AE FFE3                    	jmp rbx
 12637 000095B0 C9                      	leave
 12638 000095B1 C22000                  	ret 8 * (2 + 2)
 12639                                  .L_lambda_simple_end_377b:	; new closure is in rax
 12640 000095B4 50                      	push rax
 12641 000095B5 6A01                    	push 1
 12642 000095B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12643 000095BC E80D890000              	call malloc
 12644 000095C1 50                      	push rax
 12645 000095C2 BF08000000              	mov rdi, 8 * 1	; new rib
 12646 000095C7 E802890000              	call malloc
 12647 000095CC 50                      	push rax
 12648 000095CD BF38000000              	mov rdi, 8 * 7	; extended env
 12649 000095D2 E8F7880000              	call malloc
 12650 000095D7 488B7D10                	mov rdi, ENV
 12651 000095DB BE00000000              	mov rsi, 0
 12652 000095E0 BA01000000              	mov rdx, 1
 12653                                  .L_lambda_simple_env_loop_377c:	; ext_env[i + 1] <-- env[i]
 12654 000095E5 4883FE06                	cmp rsi, 6
 12655 000095E9 7410                    	je .L_lambda_simple_env_end_377c
 12656 000095EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12657 000095EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12658 000095F3 48FFC6                  	inc rsi
 12659 000095F6 48FFC2                  	inc rdx
 12660 000095F9 EBEA                    	jmp .L_lambda_simple_env_loop_377c
 12661                                  .L_lambda_simple_env_end_377c:
 12662 000095FB 5B                      	pop rbx
 12663 000095FC BE00000000              	mov rsi, 0
 12664                                  .L_lambda_simple_params_loop_377c:	; copy params
 12665 00009601 4883FE01                	cmp rsi, 1
 12666 00009605 740E                    	je .L_lambda_simple_params_end_377c
 12667 00009607 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12668 0000960C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12669 00009610 48FFC6                  	inc rsi
 12670 00009613 EBEC                    	jmp .L_lambda_simple_params_loop_377c
 12671                                  .L_lambda_simple_params_end_377c:
 12672 00009615 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12673 00009618 4889C3                  	mov rbx, rax
 12674 0000961B 58                      	pop rax
 12675 0000961C C60005                  	mov byte [rax], T_closure
 12676 0000961F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12677 00009623 48C74009[30960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_377c
 12678 0000962B E998070000              	jmp .L_lambda_simple_end_377c
 12679                                  .L_lambda_simple_code_377c:	; lambda-simple body
 12680 00009630 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12681 00009636 740B                    	je .L_lambda_simple_arity_check_ok_377c
 12682 00009638 FF742410                	push qword [rsp + 8 * 2]
 12683 0000963C 6A01                    	push 1
 12684 0000963E E944880000              	jmp L_error_incorrect_arity_simple
 12685                                  .L_lambda_simple_arity_check_ok_377c:
 12686 00009643 C8000000                	enter 0, 0
 12687 00009647 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12688 0000964C E87D880000              	call malloc
 12689 00009651 50                      	push rax
 12690 00009652 BF08000000              	mov rdi, 8 * 1	; new rib
 12691 00009657 E872880000              	call malloc
 12692 0000965C 50                      	push rax
 12693 0000965D BF40000000              	mov rdi, 8 * 8	; extended env
 12694 00009662 E867880000              	call malloc
 12695 00009667 488B7D10                	mov rdi, ENV
 12696 0000966B BE00000000              	mov rsi, 0
 12697 00009670 BA01000000              	mov rdx, 1
 12698                                  .L_lambda_simple_env_loop_377d:	; ext_env[i + 1] <-- env[i]
 12699 00009675 4883FE07                	cmp rsi, 7
 12700 00009679 7410                    	je .L_lambda_simple_env_end_377d
 12701 0000967B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12702 0000967F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12703 00009683 48FFC6                  	inc rsi
 12704 00009686 48FFC2                  	inc rdx
 12705 00009689 EBEA                    	jmp .L_lambda_simple_env_loop_377d
 12706                                  .L_lambda_simple_env_end_377d:
 12707 0000968B 5B                      	pop rbx
 12708 0000968C BE00000000              	mov rsi, 0
 12709                                  .L_lambda_simple_params_loop_377d:	; copy params
 12710 00009691 4883FE01                	cmp rsi, 1
 12711 00009695 740E                    	je .L_lambda_simple_params_end_377d
 12712 00009697 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12713 0000969C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12714 000096A0 48FFC6                  	inc rsi
 12715 000096A3 EBEC                    	jmp .L_lambda_simple_params_loop_377d
 12716                                  .L_lambda_simple_params_end_377d:
 12717 000096A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12718 000096A8 4889C3                  	mov rbx, rax
 12719 000096AB 58                      	pop rax
 12720 000096AC C60005                  	mov byte [rax], T_closure
 12721 000096AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12722 000096B3 48C74009[C0960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_377d
 12723 000096BB E90F050000              	jmp .L_lambda_simple_end_377d
 12724                                  .L_lambda_simple_code_377d:	; lambda-simple body
 12725 000096C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12726 000096C6 740B                    	je .L_lambda_simple_arity_check_ok_377d
 12727 000096C8 FF742410                	push qword [rsp + 8 * 2]
 12728 000096CC 6A01                    	push 1
 12729 000096CE E9B4870000              	jmp L_error_incorrect_arity_simple
 12730                                  .L_lambda_simple_arity_check_ok_377d:
 12731 000096D3 C8000000                	enter 0, 0
 12732 000096D7 48B8-                   	mov rax,L_constants + 23
 12732 000096D9 [1700000000000000] 
 12733 000096E1 50                      	push rax
 12734 000096E2 6A01                    	push 1
 12735 000096E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12736 000096E9 E8E0870000              	call malloc
 12737 000096EE 50                      	push rax
 12738 000096EF BF08000000              	mov rdi, 8 * 1	; new rib
 12739 000096F4 E8D5870000              	call malloc
 12740 000096F9 50                      	push rax
 12741 000096FA BF48000000              	mov rdi, 8 * 9	; extended env
 12742 000096FF E8CA870000              	call malloc
 12743 00009704 488B7D10                	mov rdi, ENV
 12744 00009708 BE00000000              	mov rsi, 0
 12745 0000970D BA01000000              	mov rdx, 1
 12746                                  .L_lambda_simple_env_loop_377e:	; ext_env[i + 1] <-- env[i]
 12747 00009712 4883FE08                	cmp rsi, 8
 12748 00009716 7410                    	je .L_lambda_simple_env_end_377e
 12749 00009718 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12750 0000971C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12751 00009720 48FFC6                  	inc rsi
 12752 00009723 48FFC2                  	inc rdx
 12753 00009726 EBEA                    	jmp .L_lambda_simple_env_loop_377e
 12754                                  .L_lambda_simple_env_end_377e:
 12755 00009728 5B                      	pop rbx
 12756 00009729 BE00000000              	mov rsi, 0
 12757                                  .L_lambda_simple_params_loop_377e:	; copy params
 12758 0000972E 4883FE01                	cmp rsi, 1
 12759 00009732 740E                    	je .L_lambda_simple_params_end_377e
 12760 00009734 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12761 00009739 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12762 0000973D 48FFC6                  	inc rsi
 12763 00009740 EBEC                    	jmp .L_lambda_simple_params_loop_377e
 12764                                  .L_lambda_simple_params_end_377e:
 12765 00009742 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12766 00009745 4889C3                  	mov rbx, rax
 12767 00009748 58                      	pop rax
 12768 00009749 C60005                  	mov byte [rax], T_closure
 12769 0000974C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12770 00009750 48C74009[5D970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_377e
 12771 00009758 E90E040000              	jmp .L_lambda_simple_end_377e
 12772                                  .L_lambda_simple_code_377e:	; lambda-simple body
 12773 0000975D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12774 00009763 740B                    	je .L_lambda_simple_arity_check_ok_377e
 12775 00009765 FF742410                	push qword [rsp + 8 * 2]
 12776 00009769 6A01                    	push 1
 12777 0000976B E917870000              	jmp L_error_incorrect_arity_simple
 12778                                  .L_lambda_simple_arity_check_ok_377e:
 12779 00009770 C8000000                	enter 0, 0
 12780 00009774 BF08000000              	mov rdi, 8
 12781 00009779 E850870000              	call malloc
 12782 0000977E 488B5D20                	mov rbx, PARAM(0)
 12783 00009782 488918                  	mov qword [rax], rbx
 12784 00009785 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 12785                                  
 12786 00009789 48B8-                            	mov rax, sob_void
 12786 0000978B [0000000000000000] 
 12787                                  
 12788 00009793 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12789 00009798 E831870000              	call malloc
 12790 0000979D 50                      	push rax
 12791 0000979E BF08000000              	mov rdi, 8 * 1	; new rib
 12792 000097A3 E826870000              	call malloc
 12793 000097A8 50                      	push rax
 12794 000097A9 BF50000000              	mov rdi, 8 * 10	; extended env
 12795 000097AE E81B870000              	call malloc
 12796 000097B3 488B7D10                	mov rdi, ENV
 12797 000097B7 BE00000000              	mov rsi, 0
 12798 000097BC BA01000000              	mov rdx, 1
 12799                                  .L_lambda_simple_env_loop_377f:	; ext_env[i + 1] <-- env[i]
 12800 000097C1 4883FE09                	cmp rsi, 9
 12801 000097C5 7410                    	je .L_lambda_simple_env_end_377f
 12802 000097C7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12803 000097CB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12804 000097CF 48FFC6                  	inc rsi
 12805 000097D2 48FFC2                  	inc rdx
 12806 000097D5 EBEA                    	jmp .L_lambda_simple_env_loop_377f
 12807                                  .L_lambda_simple_env_end_377f:
 12808 000097D7 5B                      	pop rbx
 12809 000097D8 BE00000000              	mov rsi, 0
 12810                                  .L_lambda_simple_params_loop_377f:	; copy params
 12811 000097DD 4883FE01                	cmp rsi, 1
 12812 000097E1 740E                    	je .L_lambda_simple_params_end_377f
 12813 000097E3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12814 000097E8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12815 000097EC 48FFC6                  	inc rsi
 12816 000097EF EBEC                    	jmp .L_lambda_simple_params_loop_377f
 12817                                  .L_lambda_simple_params_end_377f:
 12818 000097F1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12819 000097F4 4889C3                  	mov rbx, rax
 12820 000097F7 58                      	pop rax
 12821 000097F8 C60005                  	mov byte [rax], T_closure
 12822 000097FB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12823 000097FF 48C74009[0C980000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_377f
 12824 00009807 E94A010000              	jmp .L_lambda_simple_end_377f
 12825                                  .L_lambda_simple_code_377f:	; lambda-simple body
 12826 0000980C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12827 00009812 740B                    	je .L_lambda_simple_arity_check_ok_377f
 12828 00009814 FF742410                	push qword [rsp + 8 * 2]
 12829 00009818 6A02                    	push 2
 12830 0000981A E968860000              	jmp L_error_incorrect_arity_simple
 12831                                  .L_lambda_simple_arity_check_ok_377f:
 12832 0000981F C8000000                	enter 0, 0
 12833 00009823 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12834 00009827 50                      	push rax
 12835 00009828 6A01                    	push 1
 12836 0000982A 488B0425[00000000]      	mov rax, qword [free_var_0]
 12837                                  	assert_closure(rax)
    42 00009832 803805              <1>  cmp byte [%1], %2
    43 00009835 0F85879E0000        <1>  jne L_error_incorrect_type
 12838 0000983B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12839 0000983E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12840 00009841 483D[02000000]          	cmp rax, sob_boolean_false
 12841 00009847 0F8505010000            	jne .L_or_end_0427
 12842 0000984D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12843 00009851 50                      	push rax
 12844 00009852 6A01                    	push 1
 12845 00009854 488B0425[80000000]      	mov rax, qword [free_var_16]
 12846                                  	assert_closure(rax)
    42 0000985C 803805              <1>  cmp byte [%1], %2
    43 0000985F 0F855D9E0000        <1>  jne L_error_incorrect_type
 12847 00009865 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12848 00009868 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12849 0000986B 50                      	push rax
 12850 0000986C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12851 00009870 50                      	push rax
 12852 00009871 6A02                    	push 2
 12853 00009873 488B4510                	mov rax, qword [rbp + 8 * 2]
 12854                                  
 12855 00009877 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12856                                  
 12857 0000987B 488B00                                            	mov rax, qword[rax + 8 * 0]
 12858                                  	assert_closure(rax)
    42 0000987E 803805              <1>  cmp byte [%1], %2
    43 00009881 0F853B9E0000        <1>  jne L_error_incorrect_type
 12859 00009887 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12860 0000988A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12861                                  
 12862 0000988D 483D[02000000]                  	cmp rax, sob_boolean_false
 12863                                  
 12864 00009893 0F84AF000000                    	je .L_if_else_47f6
 12865 00009899 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12866 0000989D 50                      	push rax
 12867 0000989E 6A01                    	push 1
 12868 000098A0 488B0425[88000000]      	mov rax, qword [free_var_17]
 12869                                  	assert_closure(rax)
    42 000098A8 803805              <1>  cmp byte [%1], %2
    43 000098AB 0F85119E0000        <1>  jne L_error_incorrect_type
 12870 000098B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12871 000098B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12872 000098B7 50                      	push rax
 12873 000098B8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12874 000098BC 50                      	push rax
 12875 000098BD 6A01                    	push 1
 12876 000098BF 488B0425[80000000]      	mov rax, qword [free_var_16]
 12877                                  	assert_closure(rax)
    42 000098C7 803805              <1>  cmp byte [%1], %2
    43 000098CA 0F85F29D0000        <1>  jne L_error_incorrect_type
 12878 000098D0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12879 000098D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12880 000098D6 50                      	push rax
 12881 000098D7 6A02                    	push 2
 12882 000098D9 488B4510                	mov rax, qword [rbp + 8 * 2]
 12883                                  
 12884 000098DD 488B00                                            	mov rax, qword[rax + 8 * 0]
 12885                                  
 12886 000098E0 488B00                                            	mov rax, qword[rax + 8 * 0]
 12887 000098E3 488B00                  	mov rax, qword [rax]
 12888                                  .L_applic_TC_4030:
 12889 000098E6 803805                  	cmp byte [rax], T_closure
 12890 000098E9 0F8594950000            	jne L_code_ptr_error
 12891 000098EF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12892 000098F3 53                      	push rbx
 12893 000098F4 FF7508                  	push qword [rbp + 8]
 12894 000098F7 FF7500                  	push qword [rbp]
 12895 000098FA 488B4D18                	mov rcx, [rbp + 3 * 8]
 12896 000098FE 488B542418              	mov rdx, [rsp + 3 * 8]
 12897 00009903 488D7204                	lea rsi, [rdx + 4]
 12898 00009907 4C8D4EFF                	lea r9, [rsi - 1]
 12899 0000990B 488D7903                	lea rdi, [rcx + 3]
 12900 0000990F 4D31C0                  	xor r8, r8
 12901                                  .L_tc_recycle_frame_loop_4030:
 12902 00009912 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12903 00009916 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12904 0000991B 49FFC9                  	dec r9
 12905 0000991E 4D31C0                  	xor r8, r8
 12906 00009921 48FFCF                  	dec rdi
 12907 00009924 48FFCE                  	dec rsi
 12908 00009927 4883FE00                	cmp rsi, 0
 12909 0000992B 75E5                    	jne .L_tc_recycle_frame_loop_4030
 12910                                  .L_tc_recycle_frame_done_4030:
 12911                                  ;this pop rbp in sot to the right place
 12912 0000992D 4989C9                  	mov r9, rcx
 12913 00009930 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12914 00009938 4C01CC                  	add rsp, r9
 12915 0000993B 5D                      	pop rbp
 12916 0000993C 488B4D00                	mov rcx, qword [rbp]
 12917 00009940 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12918 00009944 FFE3                    	jmp rbx
 12919                                  
 12920 00009946 EB0A                            	jmp .L_if_end_47f6
 12921                                  
 12922                                          	.L_if_else_47f6:
 12923 00009948 48B8-                   	mov rax,L_constants + 2
 12923 0000994A [0200000000000000] 
 12924                                  
 12925                                          	.L_if_end_47f6:
 12926                                  .L_or_end_0427:
 12927 00009952 C9                      	leave
 12928 00009953 C22000                  	ret 8 * (2 + 2)
 12929                                  .L_lambda_simple_end_377f:	; new closure is in rax
 12930 00009956 50                      	push rax
 12931 00009957 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12932 0000995B 8F00                    	pop qword [rax]
 12933 0000995D 48B8-                   	mov rax, sob_void
 12933 0000995F [0000000000000000] 
 12934                                  
 12935 00009967 BF11000000              	mov rdi, (1 + 8 + 8)
 12936 0000996C E85D850000              	call malloc
 12937 00009971 50                      	push rax
 12938 00009972 BF08000000              	mov rdi, 8 * 1
 12939 00009977 E852850000              	call malloc
 12940 0000997C 50                      	push rax
 12941 0000997D BF50000000              	mov rdi, 8 * 10
 12942 00009982 E847850000              	call malloc
 12943 00009987 488B7D10                	mov rdi, ENV
 12944 0000998B 4831F6                  	xor rsi, rsi
 12945 0000998E 4831D2                  	xor rdx, rdx
 12946 00009991 48FFC2                  	inc rdx
 12947                                  	.L_lambda_opt_env_loop_0887:
 12948                                  
 12949 00009994 4883FE09                        	cmp rsi, 9
 12950                                  
 12951 00009998 7412                            	je .L_lambda_opt_env_end_0887
 12952 0000999A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12953 0000999E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12954 000099A2 4883C201                	add rdx, 1
 12955 000099A6 4883C601                	add rsi, 1
 12956 000099AA EBE8                    	jmp .L_lambda_opt_env_loop_0887
 12957                                  
 12958                                          	.L_lambda_opt_env_end_0887:
 12959 000099AC 5B                      	pop rbx
 12960 000099AD 4831F6                  	xor rsi, rsi
 12961                                  	.L_lambda_opt_params_loop_0887:
 12962                                  
 12963 000099B0 4883FE01                        	cmp rsi, 1
 12964                                  
 12965 000099B4 740F                            	je .L_lambda_opt_params_end_0887
 12966 000099B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12967 000099BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12968 000099BF 4883C601                	add rsi, 1
 12969 000099C3 EBEB                    	jmp .L_lambda_opt_params_loop_0887
 12970                                  
 12971                                          	.L_lambda_opt_params_end_0887:
 12972 000099C5 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 12973 000099C8 4889C3                  	mov rbx, rax
 12974 000099CB 58                      	pop rax
 12975 000099CC C60005                  	mov byte [rax], T_closure
 12976 000099CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12977 000099D3 48C74009[E0990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0887
 12978                                  
 12979 000099DB E987010000                      	jmp .L_lambda_opt_end_0887
 12980                                  
 12981                                          	.L_lambda_opt_code_0887:
 12982                                  
 12983 000099E0 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 12984                                  
 12985 000099E6 740D                            	je .L_lambda_opt_arity_check_exact_0887  ;same num_of_args
 12986                                  
 12987 000099E8 7F65                            	jg .L_lambda_opt_arity_check_more_0887  ;greater num_of_args
 12988 000099EA FF742410                	push qword [rsp + 8 * 2]
 12989 000099EE 6A01                    	push 1
 12990 000099F0 E9A6840000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 12991                                  .L_lambda_opt_arity_check_exact_0887:
 12992 000099F5 4883EC08                	sub rsp, 8 * 1
 12993 000099F9 488D7F10                	lea rdi, [rdi + (8 * 2)]
 12994 000099FD 4889E7                  	mov rdi, rsp 
 12995 00009A00 488B4708                	mov rax, qword [rdi + 8]
 12996 00009A04 488907                  	mov qword [rdi], rax
 12997 00009A07 488D7F08                	lea rdi, [rdi + 8]
 12998 00009A0B 488B4708                	mov rax, qword [rdi + 8]
 12999 00009A0F 488907                  	mov qword [rdi], rax
 13000 00009A12 488D7F08                	lea rdi, [rdi + 8]
 13001 00009A16 488B4708                	mov rax, qword [rdi + 8]
 13002 00009A1A 4889C1                  	mov rcx, rax
 13003 00009A1D 4883C001                	add rax, 1
 13004 00009A21 488907                  	mov qword [rdi], rax
 13005 00009A24 488D7F08                	lea rdi, [rdi + 8]
 13006                                  	.L_lambda_opt_stack_shrink_loop_1993:
 13007 00009A28 4883F900                	cmp rcx, 0
 13008 00009A2C 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1993
 13009 00009A2E 4883E901                	sub rcx, 1
 13010 00009A32 488D4010                	lea rax, [rax + (8 * 2)]
 13011 00009A36 488B4708                	mov rax, qword [rdi + 8]
 13012 00009A3A 488907                  	mov qword [rdi], rax
 13013 00009A3D 488D7F08                	lea rdi, [rdi + 8]
 13014 00009A41 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1993
 13015                                  
 13016                                          	.L_lambda_opt_stack_shrink_loop_exit_1993:
 13017 00009A43 48C707[01000000]        	mov qword [rdi], sob_nil
 13018 00009A4A E997000000              	jmp .L_lambda_opt_stack_adjusted_0887
 13019                                  
 13020                                          	.L_lambda_opt_arity_check_more_0887:
 13021 00009A4F 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 13022 00009A54 488D4EFF                	lea rcx, [rsi - 1]
 13023 00009A58 49B8-                   	mov r8, sob_nil
 13023 00009A5A [0100000000000000] 
 13024 00009A62 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 13025 00009A67 4889F2                  	mov rdx, rsi
 13026                                  	.L_lambda_opt_stack_shrink_loop_1994:
 13027 00009A6A 4883F900                	cmp rcx, 0
 13028 00009A6E 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1994
 13029 00009A70 BF11000000              	mov rdi, 1 + (8 * 2)
 13030 00009A75 E854840000              	call malloc
 13031 00009A7A C60021                  	mov byte [rax], T_pair
 13032 00009A7D 488B1E                  	mov rbx, qword [rsi]
 13033 00009A80 48895801                	mov SOB_PAIR_CAR(rax), rbx
 13034 00009A84 4C894009                	mov SOB_PAIR_CDR(rax), r8
 13035 00009A88 4883C6F8                	add rsi, -8
 13036 00009A8C 4883E901                	sub rcx, 1
 13037 00009A90 4989C0                  	mov r8, rax
 13038 00009A93 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1994
 13039                                  
 13040                                          	.L_lambda_opt_stack_shrink_loop_exit_1994:
 13041 00009A95 4C8902                  	mov qword [rdx], r8
 13042 00009A98 4883EA08                	sub rdx, 8 * 1
 13043 00009A9C 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 13044                                  
 13045 00009AA1 B901000000                      	mov rcx, 1 
 13046                                  
 13047                                          	.L_lambda_opt_stack_shrink_loop_1995:
 13048 00009AA6 4883F900                	cmp rcx, 0
 13049 00009AAA 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1995
 13050 00009AAC 488B06                  	mov rax, qword [rsi]
 13051 00009AAF 488902                  	mov qword [rdx], rax
 13052 00009AB2 488D76F8                	lea rsi, [rsi - 8]
 13053 00009AB6 4883C2F8                	add rdx, -8
 13054 00009ABA 4883C1FF                	add rcx, -1
 13055 00009ABE EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1995
 13056                                  
 13057                                          	.L_lambda_opt_stack_shrink_loop_exit_1995:
 13058                                  
 13059 00009AC0 48C70202000000                  	mov qword [rdx], 1 + 1
 13060 00009AC7 4883C6F8                	add rsi, -8
 13061 00009ACB 4883C2F8                	add rdx, -8
 13062 00009ACF 488B06                  	mov rax, qword [rsi]
 13063 00009AD2 488902                  	mov qword [rdx], rax
 13064 00009AD5 4883C2F8                	add rdx, -8
 13065 00009AD9 488D76F8                	lea rsi, [rsi - 8]
 13066 00009ADD 488B06                  	mov rax, qword [rsi]
 13067 00009AE0 488902                  	mov qword [rdx], rax
 13068 00009AE3 4889D4                  	mov rsp, rdx
 13069                                  	.L_lambda_opt_stack_adjusted_0887:
 13070 00009AE6 C8000000                	enter 0, 0
 13071 00009AEA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13072 00009AEE 50                      	push rax
 13073 00009AEF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13074 00009AF3 50                      	push rax
 13075 00009AF4 6A02                    	push 2
 13076 00009AF6 488B4510                	mov rax, qword [rbp + 8 * 2]
 13077                                  
 13078 00009AFA 488B00                                            	mov rax, qword[rax + 8 * 0]
 13079                                  
 13080 00009AFD 488B00                                            	mov rax, qword[rax + 8 * 0]
 13081 00009B00 488B00                  	mov rax, qword [rax]
 13082                                  .L_applic_TC_4031:
 13083 00009B03 803805                  	cmp byte [rax], T_closure
 13084 00009B06 0F8577930000            	jne L_code_ptr_error
 13085 00009B0C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13086 00009B10 53                      	push rbx
 13087 00009B11 FF7508                  	push qword [rbp + 8]
 13088 00009B14 FF7500                  	push qword [rbp]
 13089 00009B17 488B4D18                	mov rcx, [rbp + 3 * 8]
 13090 00009B1B 488B542418              	mov rdx, [rsp + 3 * 8]
 13091 00009B20 488D7204                	lea rsi, [rdx + 4]
 13092 00009B24 4C8D4EFF                	lea r9, [rsi - 1]
 13093 00009B28 488D7903                	lea rdi, [rcx + 3]
 13094 00009B2C 4D31C0                  	xor r8, r8
 13095                                  .L_tc_recycle_frame_loop_4031:
 13096 00009B2F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13097 00009B33 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13098 00009B38 49FFC9                  	dec r9
 13099 00009B3B 4D31C0                  	xor r8, r8
 13100 00009B3E 48FFCF                  	dec rdi
 13101 00009B41 48FFCE                  	dec rsi
 13102 00009B44 4883FE00                	cmp rsi, 0
 13103 00009B48 75E5                    	jne .L_tc_recycle_frame_loop_4031
 13104                                  .L_tc_recycle_frame_done_4031:
 13105                                  ;this pop rbp in sot to the right place
 13106 00009B4A 4989C9                  	mov r9, rcx
 13107 00009B4D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13108 00009B55 4C01CC                  	add rsp, r9
 13109 00009B58 5D                      	pop rbp
 13110 00009B59 488B4D00                	mov rcx, qword [rbp]
 13111 00009B5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13112 00009B61 FFE3                    	jmp rbx
 13113 00009B63 C9                      	leave
 13114 00009B64 C22000                  	ret 8 * (2 + 2)
 13115                                  .L_lambda_opt_end_0887:	; new closure is in rax
 13116 00009B67 C9                      	leave
 13117 00009B68 C21800                  	ret 8 * (2 + 1)
 13118                                  .L_lambda_simple_end_377e:	; new closure is in rax
 13119                                  .L_applic_TC_4032:
 13120 00009B6B 803805                  	cmp byte [rax], T_closure
 13121 00009B6E 0F850F930000            	jne L_code_ptr_error
 13122 00009B74 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13123 00009B78 53                      	push rbx
 13124 00009B79 FF7508                  	push qword [rbp + 8]
 13125 00009B7C FF7500                  	push qword [rbp]
 13126 00009B7F 488B4D18                	mov rcx, [rbp + 3 * 8]
 13127 00009B83 488B542418              	mov rdx, [rsp + 3 * 8]
 13128 00009B88 488D7204                	lea rsi, [rdx + 4]
 13129 00009B8C 4C8D4EFF                	lea r9, [rsi - 1]
 13130 00009B90 488D7903                	lea rdi, [rcx + 3]
 13131 00009B94 4D31C0                  	xor r8, r8
 13132                                  .L_tc_recycle_frame_loop_4032:
 13133 00009B97 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13134 00009B9B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13135 00009BA0 49FFC9                  	dec r9
 13136 00009BA3 4D31C0                  	xor r8, r8
 13137 00009BA6 48FFCF                  	dec rdi
 13138 00009BA9 48FFCE                  	dec rsi
 13139 00009BAC 4883FE00                	cmp rsi, 0
 13140 00009BB0 75E5                    	jne .L_tc_recycle_frame_loop_4032
 13141                                  .L_tc_recycle_frame_done_4032:
 13142                                  ;this pop rbp in sot to the right place
 13143 00009BB2 4989C9                  	mov r9, rcx
 13144 00009BB5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13145 00009BBD 4C01CC                  	add rsp, r9
 13146 00009BC0 5D                      	pop rbp
 13147 00009BC1 488B4D00                	mov rcx, qword [rbp]
 13148 00009BC5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13149 00009BC9 FFE3                    	jmp rbx
 13150 00009BCB C9                      	leave
 13151 00009BCC C21800                  	ret 8 * (2 + 1)
 13152                                  .L_lambda_simple_end_377d:	; new closure is in rax
 13153 00009BCF 50                      	push rax
 13154 00009BD0 6A01                    	push 1
 13155 00009BD2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13156 00009BD7 E8F2820000              	call malloc
 13157 00009BDC 50                      	push rax
 13158 00009BDD BF08000000              	mov rdi, 8 * 1	; new rib
 13159 00009BE2 E8E7820000              	call malloc
 13160 00009BE7 50                      	push rax
 13161 00009BE8 BF40000000              	mov rdi, 8 * 8	; extended env
 13162 00009BED E8DC820000              	call malloc
 13163 00009BF2 488B7D10                	mov rdi, ENV
 13164 00009BF6 BE00000000              	mov rsi, 0
 13165 00009BFB BA01000000              	mov rdx, 1
 13166                                  .L_lambda_simple_env_loop_3780:	; ext_env[i + 1] <-- env[i]
 13167 00009C00 4883FE07                	cmp rsi, 7
 13168 00009C04 7410                    	je .L_lambda_simple_env_end_3780
 13169 00009C06 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13170 00009C0A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13171 00009C0E 48FFC6                  	inc rsi
 13172 00009C11 48FFC2                  	inc rdx
 13173 00009C14 EBEA                    	jmp .L_lambda_simple_env_loop_3780
 13174                                  .L_lambda_simple_env_end_3780:
 13175 00009C16 5B                      	pop rbx
 13176 00009C17 BE00000000              	mov rsi, 0
 13177                                  .L_lambda_simple_params_loop_3780:	; copy params
 13178 00009C1C 4883FE01                	cmp rsi, 1
 13179 00009C20 740E                    	je .L_lambda_simple_params_end_3780
 13180 00009C22 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13181 00009C27 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13182 00009C2B 48FFC6                  	inc rsi
 13183 00009C2E EBEC                    	jmp .L_lambda_simple_params_loop_3780
 13184                                  .L_lambda_simple_params_end_3780:
 13185 00009C30 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13186 00009C33 4889C3                  	mov rbx, rax
 13187 00009C36 58                      	pop rax
 13188 00009C37 C60005                  	mov byte [rax], T_closure
 13189 00009C3A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13190 00009C3E 48C74009[4B9C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3780
 13191 00009C46 E919010000              	jmp .L_lambda_simple_end_3780
 13192                                  .L_lambda_simple_code_3780:	; lambda-simple body
 13193 00009C4B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13194 00009C51 740B                    	je .L_lambda_simple_arity_check_ok_3780
 13195 00009C53 FF742410                	push qword [rsp + 8 * 2]
 13196 00009C57 6A01                    	push 1
 13197 00009C59 E929820000              	jmp L_error_incorrect_arity_simple
 13198                                  .L_lambda_simple_arity_check_ok_3780:
 13199 00009C5E C8000000                	enter 0, 0
 13200 00009C62 488B4510                	mov rax, qword [rbp + 8 * 2]
 13201                                  
 13202 00009C66 488B4020                                          	mov rax, qword[rax + 8 * 4]
 13203                                  
 13204 00009C6A 488B00                                            	mov rax, qword[rax + 8 * 0]
 13205 00009C6D 50                      	push rax
 13206 00009C6E 6A01                    	push 1
 13207 00009C70 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13208                                  	assert_closure(rax)
    42 00009C74 803805              <1>  cmp byte [%1], %2
    43 00009C77 0F85459A0000        <1>  jne L_error_incorrect_type
 13209 00009C7D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13210 00009C80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13211 00009C83 48890425[30030000]      	mov qword [free_var_102], rax
 13212                                  
 13213 00009C8B 48B8-                           	mov rax, sob_void
 13213 00009C8D [0000000000000000] 
 13214                                  
 13215 00009C95 488B4510                	mov rax, qword [rbp + 8 * 2]
 13216                                  
 13217 00009C99 488B00                                            	mov rax, qword[rax + 8 * 0]
 13218                                  
 13219 00009C9C 488B00                                            	mov rax, qword[rax + 8 * 0]
 13220 00009C9F 50                      	push rax
 13221 00009CA0 6A01                    	push 1
 13222 00009CA2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13223                                  	assert_closure(rax)
    42 00009CA6 803805              <1>  cmp byte [%1], %2
    43 00009CA9 0F85139A0000        <1>  jne L_error_incorrect_type
 13224 00009CAF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13225 00009CB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13226 00009CB5 48890425[38030000]      	mov qword [free_var_103], rax
 13227                                  
 13228 00009CBD 48B8-                           	mov rax, sob_void
 13228 00009CBF [0000000000000000] 
 13229                                  
 13230 00009CC7 488B4510                	mov rax, qword [rbp + 8 * 2]
 13231                                  
 13232 00009CCB 488B4008                                          	mov rax, qword[rax + 8 * 1]
 13233                                  
 13234 00009CCF 488B00                                            	mov rax, qword[rax + 8 * 0]
 13235 00009CD2 50                      	push rax
 13236 00009CD3 6A01                    	push 1
 13237 00009CD5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13238                                  	assert_closure(rax)
    42 00009CD9 803805              <1>  cmp byte [%1], %2
    43 00009CDC 0F85E0990000        <1>  jne L_error_incorrect_type
 13239 00009CE2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13240 00009CE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13241 00009CE8 48890425[40030000]      	mov qword [free_var_104], rax
 13242                                  
 13243 00009CF0 48B8-                           	mov rax, sob_void
 13243 00009CF2 [0000000000000000] 
 13244                                  
 13245 00009CFA 488B4510                	mov rax, qword [rbp + 8 * 2]
 13246                                  
 13247 00009CFE 488B4010                                          	mov rax, qword[rax + 8 * 2]
 13248                                  
 13249 00009D02 488B00                                            	mov rax, qword[rax + 8 * 0]
 13250 00009D05 50                      	push rax
 13251 00009D06 6A01                    	push 1
 13252 00009D08 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13253                                  	assert_closure(rax)
    42 00009D0C 803805              <1>  cmp byte [%1], %2
    43 00009D0F 0F85AD990000        <1>  jne L_error_incorrect_type
 13254 00009D15 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13255 00009D18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13256 00009D1B 48890425[48030000]      	mov qword [free_var_105], rax
 13257                                  
 13258 00009D23 48B8-                           	mov rax, sob_void
 13258 00009D25 [0000000000000000] 
 13259                                  
 13260 00009D2D 488B4510                	mov rax, qword [rbp + 8 * 2]
 13261                                  
 13262 00009D31 488B4018                                          	mov rax, qword[rax + 8 * 3]
 13263                                  
 13264 00009D35 488B00                                            	mov rax, qword[rax + 8 * 0]
 13265 00009D38 50                      	push rax
 13266 00009D39 6A01                    	push 1
 13267 00009D3B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13268                                  	assert_closure(rax)
    42 00009D3F 803805              <1>  cmp byte [%1], %2
    43 00009D42 0F857A990000        <1>  jne L_error_incorrect_type
 13269 00009D48 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13270 00009D4B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13271 00009D4E 48890425[50030000]      	mov qword [free_var_106], rax
 13272                                  
 13273 00009D56 48B8-                           	mov rax, sob_void
 13273 00009D58 [0000000000000000] 
 13274 00009D60 C9                      	leave
 13275 00009D61 C21800                  	ret 8 * (2 + 1)
 13276                                  .L_lambda_simple_end_3780:	; new closure is in rax
 13277                                  .L_applic_TC_4033:
 13278 00009D64 803805                  	cmp byte [rax], T_closure
 13279 00009D67 0F8516910000            	jne L_code_ptr_error
 13280 00009D6D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13281 00009D71 53                      	push rbx
 13282 00009D72 FF7508                  	push qword [rbp + 8]
 13283 00009D75 FF7500                  	push qword [rbp]
 13284 00009D78 488B4D18                	mov rcx, [rbp + 3 * 8]
 13285 00009D7C 488B542418              	mov rdx, [rsp + 3 * 8]
 13286 00009D81 488D7204                	lea rsi, [rdx + 4]
 13287 00009D85 4C8D4EFF                	lea r9, [rsi - 1]
 13288 00009D89 488D7903                	lea rdi, [rcx + 3]
 13289 00009D8D 4D31C0                  	xor r8, r8
 13290                                  .L_tc_recycle_frame_loop_4033:
 13291 00009D90 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13292 00009D94 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13293 00009D99 49FFC9                  	dec r9
 13294 00009D9C 4D31C0                  	xor r8, r8
 13295 00009D9F 48FFCF                  	dec rdi
 13296 00009DA2 48FFCE                  	dec rsi
 13297 00009DA5 4883FE00                	cmp rsi, 0
 13298 00009DA9 75E5                    	jne .L_tc_recycle_frame_loop_4033
 13299                                  .L_tc_recycle_frame_done_4033:
 13300                                  ;this pop rbp in sot to the right place
 13301 00009DAB 4989C9                  	mov r9, rcx
 13302 00009DAE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13303 00009DB6 4C01CC                  	add rsp, r9
 13304 00009DB9 5D                      	pop rbp
 13305 00009DBA 488B4D00                	mov rcx, qword [rbp]
 13306 00009DBE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13307 00009DC2 FFE3                    	jmp rbx
 13308 00009DC4 C9                      	leave
 13309 00009DC5 C21800                  	ret 8 * (2 + 1)
 13310                                  .L_lambda_simple_end_377c:	; new closure is in rax
 13311                                  .L_applic_TC_4034:
 13312 00009DC8 803805                  	cmp byte [rax], T_closure
 13313 00009DCB 0F85B2900000            	jne L_code_ptr_error
 13314 00009DD1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13315 00009DD5 53                      	push rbx
 13316 00009DD6 FF7508                  	push qword [rbp + 8]
 13317 00009DD9 FF7500                  	push qword [rbp]
 13318 00009DDC 488B4D18                	mov rcx, [rbp + 3 * 8]
 13319 00009DE0 488B542418              	mov rdx, [rsp + 3 * 8]
 13320 00009DE5 488D7204                	lea rsi, [rdx + 4]
 13321 00009DE9 4C8D4EFF                	lea r9, [rsi - 1]
 13322 00009DED 488D7903                	lea rdi, [rcx + 3]
 13323 00009DF1 4D31C0                  	xor r8, r8
 13324                                  .L_tc_recycle_frame_loop_4034:
 13325 00009DF4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13326 00009DF8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13327 00009DFD 49FFC9                  	dec r9
 13328 00009E00 4D31C0                  	xor r8, r8
 13329 00009E03 48FFCF                  	dec rdi
 13330 00009E06 48FFCE                  	dec rsi
 13331 00009E09 4883FE00                	cmp rsi, 0
 13332 00009E0D 75E5                    	jne .L_tc_recycle_frame_loop_4034
 13333                                  .L_tc_recycle_frame_done_4034:
 13334                                  ;this pop rbp in sot to the right place
 13335 00009E0F 4989C9                  	mov r9, rcx
 13336 00009E12 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13337 00009E1A 4C01CC                  	add rsp, r9
 13338 00009E1D 5D                      	pop rbp
 13339 00009E1E 488B4D00                	mov rcx, qword [rbp]
 13340 00009E22 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13341 00009E26 FFE3                    	jmp rbx
 13342 00009E28 C9                      	leave
 13343 00009E29 C21800                  	ret 8 * (2 + 1)
 13344                                  .L_lambda_simple_end_377a:	; new closure is in rax
 13345                                  .L_applic_TC_4035:
 13346 00009E2C 803805                  	cmp byte [rax], T_closure
 13347 00009E2F 0F854E900000            	jne L_code_ptr_error
 13348 00009E35 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13349 00009E39 53                      	push rbx
 13350 00009E3A FF7508                  	push qword [rbp + 8]
 13351 00009E3D FF7500                  	push qword [rbp]
 13352 00009E40 488B4D18                	mov rcx, [rbp + 3 * 8]
 13353 00009E44 488B542418              	mov rdx, [rsp + 3 * 8]
 13354 00009E49 488D7204                	lea rsi, [rdx + 4]
 13355 00009E4D 4C8D4EFF                	lea r9, [rsi - 1]
 13356 00009E51 488D7903                	lea rdi, [rcx + 3]
 13357 00009E55 4D31C0                  	xor r8, r8
 13358                                  .L_tc_recycle_frame_loop_4035:
 13359 00009E58 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13360 00009E5C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13361 00009E61 49FFC9                  	dec r9
 13362 00009E64 4D31C0                  	xor r8, r8
 13363 00009E67 48FFCF                  	dec rdi
 13364 00009E6A 48FFCE                  	dec rsi
 13365 00009E6D 4883FE00                	cmp rsi, 0
 13366 00009E71 75E5                    	jne .L_tc_recycle_frame_loop_4035
 13367                                  .L_tc_recycle_frame_done_4035:
 13368                                  ;this pop rbp in sot to the right place
 13369 00009E73 4989C9                  	mov r9, rcx
 13370 00009E76 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13371 00009E7E 4C01CC                  	add rsp, r9
 13372 00009E81 5D                      	pop rbp
 13373 00009E82 488B4D00                	mov rcx, qword [rbp]
 13374 00009E86 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13375 00009E8A FFE3                    	jmp rbx
 13376 00009E8C C9                      	leave
 13377 00009E8D C21800                  	ret 8 * (2 + 1)
 13378                                  .L_lambda_simple_end_3778:	; new closure is in rax
 13379                                  .L_applic_TC_4036:
 13380 00009E90 803805                  	cmp byte [rax], T_closure
 13381 00009E93 0F85EA8F0000            	jne L_code_ptr_error
 13382 00009E99 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13383 00009E9D 53                      	push rbx
 13384 00009E9E FF7508                  	push qword [rbp + 8]
 13385 00009EA1 FF7500                  	push qword [rbp]
 13386 00009EA4 488B4D18                	mov rcx, [rbp + 3 * 8]
 13387 00009EA8 488B542418              	mov rdx, [rsp + 3 * 8]
 13388 00009EAD 488D7204                	lea rsi, [rdx + 4]
 13389 00009EB1 4C8D4EFF                	lea r9, [rsi - 1]
 13390 00009EB5 488D7903                	lea rdi, [rcx + 3]
 13391 00009EB9 4D31C0                  	xor r8, r8
 13392                                  .L_tc_recycle_frame_loop_4036:
 13393 00009EBC 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13394 00009EC0 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13395 00009EC5 49FFC9                  	dec r9
 13396 00009EC8 4D31C0                  	xor r8, r8
 13397 00009ECB 48FFCF                  	dec rdi
 13398 00009ECE 48FFCE                  	dec rsi
 13399 00009ED1 4883FE00                	cmp rsi, 0
 13400 00009ED5 75E5                    	jne .L_tc_recycle_frame_loop_4036
 13401                                  .L_tc_recycle_frame_done_4036:
 13402                                  ;this pop rbp in sot to the right place
 13403 00009ED7 4989C9                  	mov r9, rcx
 13404 00009EDA 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13405 00009EE2 4C01CC                  	add rsp, r9
 13406 00009EE5 5D                      	pop rbp
 13407 00009EE6 488B4D00                	mov rcx, qword [rbp]
 13408 00009EEA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13409 00009EEE FFE3                    	jmp rbx
 13410 00009EF0 C9                      	leave
 13411 00009EF1 C21800                  	ret 8 * (2 + 1)
 13412                                  .L_lambda_simple_end_3776:	; new closure is in rax
 13413                                  .L_applic_TC_4037:
 13414 00009EF4 803805                  	cmp byte [rax], T_closure
 13415 00009EF7 0F85868F0000            	jne L_code_ptr_error
 13416 00009EFD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13417 00009F01 53                      	push rbx
 13418 00009F02 FF7508                  	push qword [rbp + 8]
 13419 00009F05 FF7500                  	push qword [rbp]
 13420 00009F08 488B4D18                	mov rcx, [rbp + 3 * 8]
 13421 00009F0C 488B542418              	mov rdx, [rsp + 3 * 8]
 13422 00009F11 488D7204                	lea rsi, [rdx + 4]
 13423 00009F15 4C8D4EFF                	lea r9, [rsi - 1]
 13424 00009F19 488D7903                	lea rdi, [rcx + 3]
 13425 00009F1D 4D31C0                  	xor r8, r8
 13426                                  .L_tc_recycle_frame_loop_4037:
 13427 00009F20 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13428 00009F24 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13429 00009F29 49FFC9                  	dec r9
 13430 00009F2C 4D31C0                  	xor r8, r8
 13431 00009F2F 48FFCF                  	dec rdi
 13432 00009F32 48FFCE                  	dec rsi
 13433 00009F35 4883FE00                	cmp rsi, 0
 13434 00009F39 75E5                    	jne .L_tc_recycle_frame_loop_4037
 13435                                  .L_tc_recycle_frame_done_4037:
 13436                                  ;this pop rbp in sot to the right place
 13437 00009F3B 4989C9                  	mov r9, rcx
 13438 00009F3E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13439 00009F46 4C01CC                  	add rsp, r9
 13440 00009F49 5D                      	pop rbp
 13441 00009F4A 488B4D00                	mov rcx, qword [rbp]
 13442 00009F4E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13443 00009F52 FFE3                    	jmp rbx
 13444 00009F54 C9                      	leave
 13445 00009F55 C21800                  	ret 8 * (2 + 1)
 13446                                  .L_lambda_simple_end_3775:	; new closure is in rax
 13447                                  .L_applic_TC_4038:
 13448 00009F58 803805                  	cmp byte [rax], T_closure
 13449 00009F5B 0F85228F0000            	jne L_code_ptr_error
 13450 00009F61 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13451 00009F65 53                      	push rbx
 13452 00009F66 FF7508                  	push qword [rbp + 8]
 13453 00009F69 FF7500                  	push qword [rbp]
 13454 00009F6C 488B4D18                	mov rcx, [rbp + 3 * 8]
 13455 00009F70 488B542418              	mov rdx, [rsp + 3 * 8]
 13456 00009F75 488D7204                	lea rsi, [rdx + 4]
 13457 00009F79 4C8D4EFF                	lea r9, [rsi - 1]
 13458 00009F7D 488D7903                	lea rdi, [rcx + 3]
 13459 00009F81 4D31C0                  	xor r8, r8
 13460                                  .L_tc_recycle_frame_loop_4038:
 13461 00009F84 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13462 00009F88 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13463 00009F8D 49FFC9                  	dec r9
 13464 00009F90 4D31C0                  	xor r8, r8
 13465 00009F93 48FFCF                  	dec rdi
 13466 00009F96 48FFCE                  	dec rsi
 13467 00009F99 4883FE00                	cmp rsi, 0
 13468 00009F9D 75E5                    	jne .L_tc_recycle_frame_loop_4038
 13469                                  .L_tc_recycle_frame_done_4038:
 13470                                  ;this pop rbp in sot to the right place
 13471 00009F9F 4989C9                  	mov r9, rcx
 13472 00009FA2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13473 00009FAA 4C01CC                  	add rsp, r9
 13474 00009FAD 5D                      	pop rbp
 13475 00009FAE 488B4D00                	mov rcx, qword [rbp]
 13476 00009FB2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13477 00009FB6 FFE3                    	jmp rbx
 13478 00009FB8 C9                      	leave
 13479 00009FB9 C21800                  	ret 8 * (2 + 1)
 13480                                  .L_lambda_simple_end_3774:	; new closure is in rax
 13481                                  .L_applic_TC_4039:
 13482 00009FBC 803805                  	cmp byte [rax], T_closure
 13483 00009FBF 0F85BE8E0000            	jne L_code_ptr_error
 13484 00009FC5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13485 00009FC9 53                      	push rbx
 13486 00009FCA FF7508                  	push qword [rbp + 8]
 13487 00009FCD FF7500                  	push qword [rbp]
 13488 00009FD0 488B4D18                	mov rcx, [rbp + 3 * 8]
 13489 00009FD4 488B542418              	mov rdx, [rsp + 3 * 8]
 13490 00009FD9 488D7204                	lea rsi, [rdx + 4]
 13491 00009FDD 4C8D4EFF                	lea r9, [rsi - 1]
 13492 00009FE1 488D7903                	lea rdi, [rcx + 3]
 13493 00009FE5 4D31C0                  	xor r8, r8
 13494                                  .L_tc_recycle_frame_loop_4039:
 13495 00009FE8 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13496 00009FEC 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13497 00009FF1 49FFC9                  	dec r9
 13498 00009FF4 4D31C0                  	xor r8, r8
 13499 00009FF7 48FFCF                  	dec rdi
 13500 00009FFA 48FFCE                  	dec rsi
 13501 00009FFD 4883FE00                	cmp rsi, 0
 13502 0000A001 75E5                    	jne .L_tc_recycle_frame_loop_4039
 13503                                  .L_tc_recycle_frame_done_4039:
 13504                                  ;this pop rbp in sot to the right place
 13505 0000A003 4989C9                  	mov r9, rcx
 13506 0000A006 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13507 0000A00E 4C01CC                  	add rsp, r9
 13508 0000A011 5D                      	pop rbp
 13509 0000A012 488B4D00                	mov rcx, qword [rbp]
 13510 0000A016 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13511 0000A01A FFE3                    	jmp rbx
 13512 0000A01C C9                      	leave
 13513 0000A01D C21800                  	ret 8 * (2 + 1)
 13514                                  .L_lambda_simple_end_3771:	; new closure is in rax
 13515                                  	assert_closure(rax)
    42 0000A020 803805              <1>  cmp byte [%1], %2
    43 0000A023 0F8599960000        <1>  jne L_error_incorrect_type
 13516 0000A029 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13517 0000A02C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13518                                  
 13519 0000A02F 4889C7                  	mov rdi, rax
 13520 0000A032 E8A87E0000              	call print_sexpr_if_not_void
 13521                                  
 13522 0000A037 48B8-                   	mov rax,L_constants + 23
 13522 0000A039 [1700000000000000] 
 13523 0000A041 50                      	push rax
 13524 0000A042 6A01                    	push 1
 13525 0000A044 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13526 0000A049 E8807E0000              	call malloc
 13527 0000A04E 50                      	push rax
 13528 0000A04F BF00000000              	mov rdi, 8 * 0	; new rib
 13529 0000A054 E8757E0000              	call malloc
 13530 0000A059 50                      	push rax
 13531 0000A05A BF08000000              	mov rdi, 8 * 1	; extended env
 13532 0000A05F E86A7E0000              	call malloc
 13533 0000A064 488B7D10                	mov rdi, ENV
 13534 0000A068 BE00000000              	mov rsi, 0
 13535 0000A06D BA01000000              	mov rdx, 1
 13536                                  .L_lambda_simple_env_loop_3781:	; ext_env[i + 1] <-- env[i]
 13537 0000A072 4883FE00                	cmp rsi, 0
 13538 0000A076 7410                    	je .L_lambda_simple_env_end_3781
 13539 0000A078 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13540 0000A07C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13541 0000A080 48FFC6                  	inc rsi
 13542 0000A083 48FFC2                  	inc rdx
 13543 0000A086 EBEA                    	jmp .L_lambda_simple_env_loop_3781
 13544                                  .L_lambda_simple_env_end_3781:
 13545 0000A088 5B                      	pop rbx
 13546 0000A089 BE00000000              	mov rsi, 0
 13547                                  .L_lambda_simple_params_loop_3781:	; copy params
 13548 0000A08E 4883FE00                	cmp rsi, 0
 13549 0000A092 740E                    	je .L_lambda_simple_params_end_3781
 13550 0000A094 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13551 0000A099 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13552 0000A09D 48FFC6                  	inc rsi
 13553 0000A0A0 EBEC                    	jmp .L_lambda_simple_params_loop_3781
 13554                                  .L_lambda_simple_params_end_3781:
 13555 0000A0A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13556 0000A0A5 4889C3                  	mov rbx, rax
 13557 0000A0A8 58                      	pop rax
 13558 0000A0A9 C60005                  	mov byte [rax], T_closure
 13559 0000A0AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13560 0000A0B0 48C74009[BDA00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3781
 13561 0000A0B8 E9E4050000              	jmp .L_lambda_simple_end_3781
 13562                                  .L_lambda_simple_code_3781:	; lambda-simple body
 13563 0000A0BD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13564 0000A0C3 740B                    	je .L_lambda_simple_arity_check_ok_3781
 13565 0000A0C5 FF742410                	push qword [rsp + 8 * 2]
 13566 0000A0C9 6A01                    	push 1
 13567 0000A0CB E9B77D0000              	jmp L_error_incorrect_arity_simple
 13568                                  .L_lambda_simple_arity_check_ok_3781:
 13569 0000A0D0 C8000000                	enter 0, 0
 13570 0000A0D4 BF08000000              	mov rdi, 8
 13571 0000A0D9 E8F07D0000              	call malloc
 13572 0000A0DE 488B5D20                	mov rbx, PARAM(0)
 13573 0000A0E2 488918                  	mov qword [rax], rbx
 13574 0000A0E5 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 13575                                  
 13576 0000A0E9 48B8-                            	mov rax, sob_void
 13576 0000A0EB [0000000000000000] 
 13577                                  
 13578 0000A0F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13579 0000A0F8 E8D17D0000              	call malloc
 13580 0000A0FD 50                      	push rax
 13581 0000A0FE BF08000000              	mov rdi, 8 * 1	; new rib
 13582 0000A103 E8C67D0000              	call malloc
 13583 0000A108 50                      	push rax
 13584 0000A109 BF10000000              	mov rdi, 8 * 2	; extended env
 13585 0000A10E E8BB7D0000              	call malloc
 13586 0000A113 488B7D10                	mov rdi, ENV
 13587 0000A117 BE00000000              	mov rsi, 0
 13588 0000A11C BA01000000              	mov rdx, 1
 13589                                  .L_lambda_simple_env_loop_3782:	; ext_env[i + 1] <-- env[i]
 13590 0000A121 4883FE01                	cmp rsi, 1
 13591 0000A125 7410                    	je .L_lambda_simple_env_end_3782
 13592 0000A127 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13593 0000A12B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13594 0000A12F 48FFC6                  	inc rsi
 13595 0000A132 48FFC2                  	inc rdx
 13596 0000A135 EBEA                    	jmp .L_lambda_simple_env_loop_3782
 13597                                  .L_lambda_simple_env_end_3782:
 13598 0000A137 5B                      	pop rbx
 13599 0000A138 BE00000000              	mov rsi, 0
 13600                                  .L_lambda_simple_params_loop_3782:	; copy params
 13601 0000A13D 4883FE01                	cmp rsi, 1
 13602 0000A141 740E                    	je .L_lambda_simple_params_end_3782
 13603 0000A143 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13604 0000A148 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13605 0000A14C 48FFC6                  	inc rsi
 13606 0000A14F EBEC                    	jmp .L_lambda_simple_params_loop_3782
 13607                                  .L_lambda_simple_params_end_3782:
 13608 0000A151 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13609 0000A154 4889C3                  	mov rbx, rax
 13610 0000A157 58                      	pop rax
 13611 0000A158 C60005                  	mov byte [rax], T_closure
 13612 0000A15B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13613 0000A15F 48C74009[6CA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3782
 13614 0000A167 E90D010000              	jmp .L_lambda_simple_end_3782
 13615                                  .L_lambda_simple_code_3782:	; lambda-simple body
 13616 0000A16C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13617 0000A172 740B                    	je .L_lambda_simple_arity_check_ok_3782
 13618 0000A174 FF742410                	push qword [rsp + 8 * 2]
 13619 0000A178 6A02                    	push 2
 13620 0000A17A E9087D0000              	jmp L_error_incorrect_arity_simple
 13621                                  .L_lambda_simple_arity_check_ok_3782:
 13622 0000A17F C8000000                	enter 0, 0
 13623 0000A183 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13624 0000A187 50                      	push rax
 13625 0000A188 6A01                    	push 1
 13626 0000A18A 488B0425[D8000000]      	mov rax, qword [free_var_27]
 13627                                  	assert_closure(rax)
    42 0000A192 803805              <1>  cmp byte [%1], %2
    43 0000A195 0F8527950000        <1>  jne L_error_incorrect_type
 13628 0000A19B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13629 0000A19E FF5009                  	call SOB_CLOSURE_CODE(rax)
 13630                                  
 13631 0000A1A1 483D[02000000]                  	cmp rax, sob_boolean_false
 13632                                  
 13633 0000A1A7 740F                            	je .L_if_else_47f7
 13634 0000A1A9 48B8-                   	mov rax,L_constants + 1
 13634 0000A1AB [0100000000000000] 
 13635                                  
 13636 0000A1B3 E9BD000000                      	jmp .L_if_end_47f7
 13637                                  
 13638                                          	.L_if_else_47f7:
 13639 0000A1B8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13640 0000A1BC 50                      	push rax
 13641 0000A1BD 48B8-                   	mov rax,L_constants + 128
 13641 0000A1BF [8000000000000000] 
 13642 0000A1C7 50                      	push rax
 13643 0000A1C8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13644 0000A1CC 50                      	push rax
 13645 0000A1CD 6A02                    	push 2
 13646 0000A1CF 488B0425[10030000]      	mov rax, qword [free_var_98]
 13647                                  	assert_closure(rax)
    42 0000A1D7 803805              <1>  cmp byte [%1], %2
    43 0000A1DA 0F85E2940000        <1>  jne L_error_incorrect_type
 13648 0000A1E0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13649 0000A1E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13650 0000A1E6 50                      	push rax
 13651 0000A1E7 6A02                    	push 2
 13652 0000A1E9 488B4510                	mov rax, qword [rbp + 8 * 2]
 13653                                  
 13654 0000A1ED 488B00                                            	mov rax, qword[rax + 8 * 0]
 13655                                  
 13656 0000A1F0 488B00                                            	mov rax, qword[rax + 8 * 0]
 13657 0000A1F3 488B00                  	mov rax, qword [rax]
 13658                                  	assert_closure(rax)
    42 0000A1F6 803805              <1>  cmp byte [%1], %2
    43 0000A1F9 0F85C3940000        <1>  jne L_error_incorrect_type
 13659 0000A1FF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13660 0000A202 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13661 0000A205 50                      	push rax
 13662 0000A206 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13663 0000A20A 50                      	push rax
 13664 0000A20B 6A02                    	push 2
 13665 0000A20D 488B0425[68000000]      	mov rax, qword [free_var_13]
 13666                                  .L_applic_TC_403a:
 13667 0000A215 803805                  	cmp byte [rax], T_closure
 13668 0000A218 0F85658C0000            	jne L_code_ptr_error
 13669 0000A21E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13670 0000A222 53                      	push rbx
 13671 0000A223 FF7508                  	push qword [rbp + 8]
 13672 0000A226 FF7500                  	push qword [rbp]
 13673 0000A229 488B4D18                	mov rcx, [rbp + 3 * 8]
 13674 0000A22D 488B542418              	mov rdx, [rsp + 3 * 8]
 13675 0000A232 488D7204                	lea rsi, [rdx + 4]
 13676 0000A236 4C8D4EFF                	lea r9, [rsi - 1]
 13677 0000A23A 488D7903                	lea rdi, [rcx + 3]
 13678 0000A23E 4D31C0                  	xor r8, r8
 13679                                  .L_tc_recycle_frame_loop_403a:
 13680 0000A241 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13681 0000A245 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13682 0000A24A 49FFC9                  	dec r9
 13683 0000A24D 4D31C0                  	xor r8, r8
 13684 0000A250 48FFCF                  	dec rdi
 13685 0000A253 48FFCE                  	dec rsi
 13686 0000A256 4883FE00                	cmp rsi, 0
 13687 0000A25A 75E5                    	jne .L_tc_recycle_frame_loop_403a
 13688                                  .L_tc_recycle_frame_done_403a:
 13689                                  ;this pop rbp in sot to the right place
 13690 0000A25C 4989C9                  	mov r9, rcx
 13691 0000A25F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13692 0000A267 4C01CC                  	add rsp, r9
 13693 0000A26A 5D                      	pop rbp
 13694 0000A26B 488B4D00                	mov rcx, qword [rbp]
 13695 0000A26F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13696 0000A273 FFE3                    	jmp rbx
 13697                                  
 13698                                          	.L_if_end_47f7:
 13699 0000A275 C9                      	leave
 13700 0000A276 C22000                  	ret 8 * (2 + 2)
 13701                                  .L_lambda_simple_end_3782:	; new closure is in rax
 13702 0000A279 50                      	push rax
 13703 0000A27A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13704 0000A27E 8F00                    	pop qword [rax]
 13705 0000A280 48B8-                   	mov rax, sob_void
 13705 0000A282 [0000000000000000] 
 13706                                  
 13707 0000A28A BF11000000              	mov rdi, (1 + 8 + 8)
 13708 0000A28F E83A7C0000              	call malloc
 13709 0000A294 50                      	push rax
 13710 0000A295 BF08000000              	mov rdi, 8 * 1
 13711 0000A29A E82F7C0000              	call malloc
 13712 0000A29F 50                      	push rax
 13713 0000A2A0 BF10000000              	mov rdi, 8 * 2
 13714 0000A2A5 E8247C0000              	call malloc
 13715 0000A2AA 488B7D10                	mov rdi, ENV
 13716 0000A2AE 4831F6                  	xor rsi, rsi
 13717 0000A2B1 4831D2                  	xor rdx, rdx
 13718 0000A2B4 48FFC2                  	inc rdx
 13719                                  	.L_lambda_opt_env_loop_0888:
 13720                                  
 13721 0000A2B7 4883FE01                        	cmp rsi, 1
 13722                                  
 13723 0000A2BB 7412                            	je .L_lambda_opt_env_end_0888
 13724 0000A2BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13725 0000A2C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13726 0000A2C5 4883C201                	add rdx, 1
 13727 0000A2C9 4883C601                	add rsi, 1
 13728 0000A2CD EBE8                    	jmp .L_lambda_opt_env_loop_0888
 13729                                  
 13730                                          	.L_lambda_opt_env_end_0888:
 13731 0000A2CF 5B                      	pop rbx
 13732 0000A2D0 4831F6                  	xor rsi, rsi
 13733                                  	.L_lambda_opt_params_loop_0888:
 13734                                  
 13735 0000A2D3 4883FE01                        	cmp rsi, 1
 13736                                  
 13737 0000A2D7 740F                            	je .L_lambda_opt_params_end_0888
 13738 0000A2D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13739 0000A2DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13740 0000A2E2 4883C601                	add rsi, 1
 13741 0000A2E6 EBEB                    	jmp .L_lambda_opt_params_loop_0888
 13742                                  
 13743                                          	.L_lambda_opt_params_end_0888:
 13744 0000A2E8 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 13745 0000A2EB 4889C3                  	mov rbx, rax
 13746 0000A2EE 58                      	pop rax
 13747 0000A2EF C60005                  	mov byte [rax], T_closure
 13748 0000A2F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13749 0000A2F6 48C74009[03A30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0888
 13750                                  
 13751 0000A2FE E99A030000                      	jmp .L_lambda_opt_end_0888
 13752                                  
 13753                                          	.L_lambda_opt_code_0888:
 13754                                  
 13755 0000A303 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 13756                                  
 13757 0000A309 740D                            	je .L_lambda_opt_arity_check_exact_0888  ;same num_of_args
 13758                                  
 13759 0000A30B 7F65                            	jg .L_lambda_opt_arity_check_more_0888  ;greater num_of_args
 13760 0000A30D FF742410                	push qword [rsp + 8 * 2]
 13761 0000A311 6A01                    	push 1
 13762 0000A313 E9837B0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 13763                                  .L_lambda_opt_arity_check_exact_0888:
 13764 0000A318 4883EC08                	sub rsp, 8 * 1
 13765 0000A31C 488D7F10                	lea rdi, [rdi + (8 * 2)]
 13766 0000A320 4889E7                  	mov rdi, rsp 
 13767 0000A323 488B4708                	mov rax, qword [rdi + 8]
 13768 0000A327 488907                  	mov qword [rdi], rax
 13769 0000A32A 488D7F08                	lea rdi, [rdi + 8]
 13770 0000A32E 488B4708                	mov rax, qword [rdi + 8]
 13771 0000A332 488907                  	mov qword [rdi], rax
 13772 0000A335 488D7F08                	lea rdi, [rdi + 8]
 13773 0000A339 488B4708                	mov rax, qword [rdi + 8]
 13774 0000A33D 4889C1                  	mov rcx, rax
 13775 0000A340 4883C001                	add rax, 1
 13776 0000A344 488907                  	mov qword [rdi], rax
 13777 0000A347 488D7F08                	lea rdi, [rdi + 8]
 13778                                  	.L_lambda_opt_stack_shrink_loop_1996:
 13779 0000A34B 4883F900                	cmp rcx, 0
 13780 0000A34F 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1996
 13781 0000A351 4883E901                	sub rcx, 1
 13782 0000A355 488D4010                	lea rax, [rax + (8 * 2)]
 13783 0000A359 488B4708                	mov rax, qword [rdi + 8]
 13784 0000A35D 488907                  	mov qword [rdi], rax
 13785 0000A360 488D7F08                	lea rdi, [rdi + 8]
 13786 0000A364 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1996
 13787                                  
 13788                                          	.L_lambda_opt_stack_shrink_loop_exit_1996:
 13789 0000A366 48C707[01000000]        	mov qword [rdi], sob_nil
 13790 0000A36D E997000000              	jmp .L_lambda_opt_stack_adjusted_0888
 13791                                  
 13792                                          	.L_lambda_opt_arity_check_more_0888:
 13793 0000A372 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 13794 0000A377 488D4EFF                	lea rcx, [rsi - 1]
 13795 0000A37B 49B8-                   	mov r8, sob_nil
 13795 0000A37D [0100000000000000] 
 13796 0000A385 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 13797 0000A38A 4889F2                  	mov rdx, rsi
 13798                                  	.L_lambda_opt_stack_shrink_loop_1997:
 13799 0000A38D 4883F900                	cmp rcx, 0
 13800 0000A391 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_1997
 13801 0000A393 BF11000000              	mov rdi, 1 + (8 * 2)
 13802 0000A398 E8317B0000              	call malloc
 13803 0000A39D C60021                  	mov byte [rax], T_pair
 13804 0000A3A0 488B1E                  	mov rbx, qword [rsi]
 13805 0000A3A3 48895801                	mov SOB_PAIR_CAR(rax), rbx
 13806 0000A3A7 4C894009                	mov SOB_PAIR_CDR(rax), r8
 13807 0000A3AB 4883C6F8                	add rsi, -8
 13808 0000A3AF 4883E901                	sub rcx, 1
 13809 0000A3B3 4989C0                  	mov r8, rax
 13810 0000A3B6 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_1997
 13811                                  
 13812                                          	.L_lambda_opt_stack_shrink_loop_exit_1997:
 13813 0000A3B8 4C8902                  	mov qword [rdx], r8
 13814 0000A3BB 4883EA08                	sub rdx, 8 * 1
 13815 0000A3BF 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 13816                                  
 13817 0000A3C4 B901000000                      	mov rcx, 1 
 13818                                  
 13819                                          	.L_lambda_opt_stack_shrink_loop_1998:
 13820 0000A3C9 4883F900                	cmp rcx, 0
 13821 0000A3CD 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_1998
 13822 0000A3CF 488B06                  	mov rax, qword [rsi]
 13823 0000A3D2 488902                  	mov qword [rdx], rax
 13824 0000A3D5 488D76F8                	lea rsi, [rsi - 8]
 13825 0000A3D9 4883C2F8                	add rdx, -8
 13826 0000A3DD 4883C1FF                	add rcx, -1
 13827 0000A3E1 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_1998
 13828                                  
 13829                                          	.L_lambda_opt_stack_shrink_loop_exit_1998:
 13830                                  
 13831 0000A3E3 48C70202000000                  	mov qword [rdx], 1 + 1
 13832 0000A3EA 4883C6F8                	add rsi, -8
 13833 0000A3EE 4883C2F8                	add rdx, -8
 13834 0000A3F2 488B06                  	mov rax, qword [rsi]
 13835 0000A3F5 488902                  	mov qword [rdx], rax
 13836 0000A3F8 4883C2F8                	add rdx, -8
 13837 0000A3FC 488D76F8                	lea rsi, [rsi - 8]
 13838 0000A400 488B06                  	mov rax, qword [rsi]
 13839 0000A403 488902                  	mov qword [rdx], rax
 13840 0000A406 4889D4                  	mov rsp, rdx
 13841                                  	.L_lambda_opt_stack_adjusted_0888:
 13842 0000A409 C8000000                	enter 0, 0
 13843 0000A40D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13844 0000A411 50                      	push rax
 13845 0000A412 6A01                    	push 1
 13846 0000A414 488B0425[00000000]      	mov rax, qword [free_var_0]
 13847                                  	assert_closure(rax)
    42 0000A41C 803805              <1>  cmp byte [%1], %2
    43 0000A41F 0F859D920000        <1>  jne L_error_incorrect_type
 13848 0000A425 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13849 0000A428 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13850                                  
 13851 0000A42B 483D[02000000]                  	cmp rax, sob_boolean_false
 13852                                  
 13853 0000A431 0F8484000000                    	je .L_if_else_47f8
 13854 0000A437 48B8-                   	mov rax,L_constants + 4
 13854 0000A439 [0400000000000000] 
 13855 0000A441 50                      	push rax
 13856 0000A442 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13857 0000A446 50                      	push rax
 13858 0000A447 6A02                    	push 2
 13859 0000A449 488B4510                	mov rax, qword [rbp + 8 * 2]
 13860                                  
 13861 0000A44D 488B00                                            	mov rax, qword[rax + 8 * 0]
 13862                                  
 13863 0000A450 488B00                                            	mov rax, qword[rax + 8 * 0]
 13864 0000A453 488B00                  	mov rax, qword [rax]
 13865                                  .L_applic_TC_403d:
 13866 0000A456 803805                  	cmp byte [rax], T_closure
 13867 0000A459 0F85248A0000            	jne L_code_ptr_error
 13868 0000A45F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13869 0000A463 53                      	push rbx
 13870 0000A464 FF7508                  	push qword [rbp + 8]
 13871 0000A467 FF7500                  	push qword [rbp]
 13872 0000A46A 488B4D18                	mov rcx, [rbp + 3 * 8]
 13873 0000A46E 488B542418              	mov rdx, [rsp + 3 * 8]
 13874 0000A473 488D7204                	lea rsi, [rdx + 4]
 13875 0000A477 4C8D4EFF                	lea r9, [rsi - 1]
 13876 0000A47B 488D7903                	lea rdi, [rcx + 3]
 13877 0000A47F 4D31C0                  	xor r8, r8
 13878                                  .L_tc_recycle_frame_loop_403d:
 13879 0000A482 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13880 0000A486 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13881 0000A48B 49FFC9                  	dec r9
 13882 0000A48E 4D31C0                  	xor r8, r8
 13883 0000A491 48FFCF                  	dec rdi
 13884 0000A494 48FFCE                  	dec rsi
 13885 0000A497 4883FE00                	cmp rsi, 0
 13886 0000A49B 75E5                    	jne .L_tc_recycle_frame_loop_403d
 13887                                  .L_tc_recycle_frame_done_403d:
 13888                                  ;this pop rbp in sot to the right place
 13889 0000A49D 4989C9                  	mov r9, rcx
 13890 0000A4A0 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13891 0000A4A8 4C01CC                  	add rsp, r9
 13892 0000A4AB 5D                      	pop rbp
 13893 0000A4AC 488B4D00                	mov rcx, qword [rbp]
 13894 0000A4B0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13895 0000A4B4 FFE3                    	jmp rbx
 13896                                  
 13897 0000A4B6 E9DE010000                      	jmp .L_if_end_47f8
 13898                                  
 13899                                          	.L_if_else_47f8:
 13900 0000A4BB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13901 0000A4BF 50                      	push rax
 13902 0000A4C0 6A01                    	push 1
 13903 0000A4C2 488B0425[08000000]      	mov rax, qword [free_var_1]
 13904                                  	assert_closure(rax)
    42 0000A4CA 803805              <1>  cmp byte [%1], %2
    43 0000A4CD 0F85EF910000        <1>  jne L_error_incorrect_type
 13905 0000A4D3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13906 0000A4D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13907                                  
 13908 0000A4D9 483D[02000000]                  	cmp rax, sob_boolean_false
 13909                                  
 13910 0000A4DF 0F8486000000                    	je .L_if_else_47fa
 13911 0000A4E5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13912 0000A4E9 50                      	push rax
 13913 0000A4EA 6A01                    	push 1
 13914 0000A4EC 488B0425[88000000]      	mov rax, qword [free_var_17]
 13915                                  	assert_closure(rax)
    42 0000A4F4 803805              <1>  cmp byte [%1], %2
    43 0000A4F7 0F85C5910000        <1>  jne L_error_incorrect_type
 13916 0000A4FD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13917 0000A500 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13918 0000A503 50                      	push rax
 13919 0000A504 6A01                    	push 1
 13920 0000A506 488B0425[00000000]      	mov rax, qword [free_var_0]
 13921                                  	assert_closure(rax)
    42 0000A50E 803805              <1>  cmp byte [%1], %2
    43 0000A511 0F85AB910000        <1>  jne L_error_incorrect_type
 13922 0000A517 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13923 0000A51A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13924                                  
 13925 0000A51D 483D[02000000]                  	cmp rax, sob_boolean_false
 13926                                  
 13927 0000A523 743A                            	je .L_if_else_47fb
 13928 0000A525 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13929 0000A529 50                      	push rax
 13930 0000A52A 6A01                    	push 1
 13931 0000A52C 488B0425[80000000]      	mov rax, qword [free_var_16]
 13932                                  	assert_closure(rax)
    42 0000A534 803805              <1>  cmp byte [%1], %2
    43 0000A537 0F8585910000        <1>  jne L_error_incorrect_type
 13933 0000A53D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13934 0000A540 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13935 0000A543 50                      	push rax
 13936 0000A544 6A01                    	push 1
 13937 0000A546 488B0425[18000000]      	mov rax, qword [free_var_3]
 13938                                  	assert_closure(rax)
    42 0000A54E 803805              <1>  cmp byte [%1], %2
    43 0000A551 0F856B910000        <1>  jne L_error_incorrect_type
 13939 0000A557 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13940 0000A55A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13941                                  
 13942 0000A55D EB0A                            	jmp .L_if_end_47fb
 13943                                  
 13944                                          	.L_if_else_47fb:
 13945 0000A55F 48B8-                   	mov rax,L_constants + 2
 13945 0000A561 [0200000000000000] 
 13946                                  
 13947                                          	.L_if_end_47fb:
 13948                                  
 13949 0000A569 EB0A                            	jmp .L_if_end_47fa
 13950                                  
 13951                                          	.L_if_else_47fa:
 13952 0000A56B 48B8-                   	mov rax,L_constants + 2
 13952 0000A56D [0200000000000000] 
 13953                                  
 13954                                          	.L_if_end_47fa:
 13955                                  
 13956 0000A575 483D[02000000]                  	cmp rax, sob_boolean_false
 13957                                  
 13958 0000A57B 0F8498000000                    	je .L_if_else_47f9
 13959 0000A581 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13960 0000A585 50                      	push rax
 13961 0000A586 6A01                    	push 1
 13962 0000A588 488B0425[80000000]      	mov rax, qword [free_var_16]
 13963                                  	assert_closure(rax)
    42 0000A590 803805              <1>  cmp byte [%1], %2
    43 0000A593 0F8529910000        <1>  jne L_error_incorrect_type
 13964 0000A599 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13965 0000A59C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13966 0000A59F 50                      	push rax
 13967 0000A5A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13968 0000A5A4 50                      	push rax
 13969 0000A5A5 6A02                    	push 2
 13970 0000A5A7 488B4510                	mov rax, qword [rbp + 8 * 2]
 13971                                  
 13972 0000A5AB 488B00                                            	mov rax, qword[rax + 8 * 0]
 13973                                  
 13974 0000A5AE 488B00                                            	mov rax, qword[rax + 8 * 0]
 13975 0000A5B1 488B00                  	mov rax, qword [rax]
 13976                                  .L_applic_TC_403c:
 13977 0000A5B4 803805                  	cmp byte [rax], T_closure
 13978 0000A5B7 0F85C6880000            	jne L_code_ptr_error
 13979 0000A5BD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13980 0000A5C1 53                      	push rbx
 13981 0000A5C2 FF7508                  	push qword [rbp + 8]
 13982 0000A5C5 FF7500                  	push qword [rbp]
 13983 0000A5C8 488B4D18                	mov rcx, [rbp + 3 * 8]
 13984 0000A5CC 488B542418              	mov rdx, [rsp + 3 * 8]
 13985 0000A5D1 488D7204                	lea rsi, [rdx + 4]
 13986 0000A5D5 4C8D4EFF                	lea r9, [rsi - 1]
 13987 0000A5D9 488D7903                	lea rdi, [rcx + 3]
 13988 0000A5DD 4D31C0                  	xor r8, r8
 13989                                  .L_tc_recycle_frame_loop_403c:
 13990 0000A5E0 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13991 0000A5E4 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13992 0000A5E9 49FFC9                  	dec r9
 13993 0000A5EC 4D31C0                  	xor r8, r8
 13994 0000A5EF 48FFCF                  	dec rdi
 13995 0000A5F2 48FFCE                  	dec rsi
 13996 0000A5F5 4883FE00                	cmp rsi, 0
 13997 0000A5F9 75E5                    	jne .L_tc_recycle_frame_loop_403c
 13998                                  .L_tc_recycle_frame_done_403c:
 13999                                  ;this pop rbp in sot to the right place
 14000 0000A5FB 4989C9                  	mov r9, rcx
 14001 0000A5FE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14002 0000A606 4C01CC                  	add rsp, r9
 14003 0000A609 5D                      	pop rbp
 14004 0000A60A 488B4D00                	mov rcx, qword [rbp]
 14005 0000A60E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14006 0000A612 FFE3                    	jmp rbx
 14007                                  
 14008 0000A614 E980000000                      	jmp .L_if_end_47f9
 14009                                  
 14010                                          	.L_if_else_47f9:
 14011 0000A619 48B8-                   	mov rax,L_constants + 288
 14011 0000A61B [2001000000000000] 
 14012 0000A623 50                      	push rax
 14013 0000A624 48B8-                   	mov rax,L_constants + 279
 14013 0000A626 [1701000000000000] 
 14014 0000A62E 50                      	push rax
 14015 0000A62F 6A02                    	push 2
 14016 0000A631 488B0425[30010000]      	mov rax, qword [free_var_38]
 14017                                  .L_applic_TC_403b:
 14018 0000A639 803805                  	cmp byte [rax], T_closure
 14019 0000A63C 0F8541880000            	jne L_code_ptr_error
 14020 0000A642 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14021 0000A646 53                      	push rbx
 14022 0000A647 FF7508                  	push qword [rbp + 8]
 14023 0000A64A FF7500                  	push qword [rbp]
 14024 0000A64D 488B4D18                	mov rcx, [rbp + 3 * 8]
 14025 0000A651 488B542418              	mov rdx, [rsp + 3 * 8]
 14026 0000A656 488D7204                	lea rsi, [rdx + 4]
 14027 0000A65A 4C8D4EFF                	lea r9, [rsi - 1]
 14028 0000A65E 488D7903                	lea rdi, [rcx + 3]
 14029 0000A662 4D31C0                  	xor r8, r8
 14030                                  .L_tc_recycle_frame_loop_403b:
 14031 0000A665 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 14032 0000A669 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 14033 0000A66E 49FFC9                  	dec r9
 14034 0000A671 4D31C0                  	xor r8, r8
 14035 0000A674 48FFCF                  	dec rdi
 14036 0000A677 48FFCE                  	dec rsi
 14037 0000A67A 4883FE00                	cmp rsi, 0
 14038 0000A67E 75E5                    	jne .L_tc_recycle_frame_loop_403b
 14039                                  .L_tc_recycle_frame_done_403b:
 14040                                  ;this pop rbp in sot to the right place
 14041 0000A680 4989C9                  	mov r9, rcx
 14042 0000A683 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14043 0000A68B 4C01CC                  	add rsp, r9
 14044 0000A68E 5D                      	pop rbp
 14045 0000A68F 488B4D00                	mov rcx, qword [rbp]
 14046 0000A693 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14047 0000A697 FFE3                    	jmp rbx
 14048                                  
 14049                                          	.L_if_end_47f9:
 14050                                  
 14051                                          	.L_if_end_47f8:
 14052 0000A699 C9                      	leave
 14053 0000A69A C22000                  	ret 8 * (2 + 2)
 14054                                  .L_lambda_opt_end_0888:	; new closure is in rax
 14055 0000A69D C9                      	leave
 14056 0000A69E C21800                  	ret 8 * (2 + 1)
 14057                                  .L_lambda_simple_end_3781:	; new closure is in rax
 14058                                  	assert_closure(rax)
    42 0000A6A1 803805              <1>  cmp byte [%1], %2
    43 0000A6A4 0F8518900000        <1>  jne L_error_incorrect_type
 14059 0000A6AA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14060 0000A6AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14061 0000A6B0 48890425[58030000]      	mov qword [free_var_107], rax
 14062 0000A6B8 48B8-                   	mov rax, sob_void
 14062 0000A6BA [0000000000000000] 
 14063                                  
 14064 0000A6C2 4889C7                  	mov rdi, rax
 14065 0000A6C5 E815780000              	call print_sexpr_if_not_void
 14066                                  
 14067 0000A6CA 48B8-                   	mov rax,L_constants + 0
 14067 0000A6CC [0000000000000000] 
 14068 0000A6D4 48890425[60030000]      	mov qword [free_var_108], rax
 14069 0000A6DC 48B8-                   	mov rax, sob_void
 14069 0000A6DE [0000000000000000] 
 14070                                  
 14071 0000A6E6 4889C7                  	mov rdi, rax
 14072 0000A6E9 E8F1770000              	call print_sexpr_if_not_void
 14073                                  
 14074 0000A6EE 48B8-                   	mov rax,L_constants + 0
 14074 0000A6F0 [0000000000000000] 
 14075 0000A6F8 48890425[68030000]      	mov qword [free_var_109], rax
 14076 0000A700 48B8-                   	mov rax, sob_void
 14076 0000A702 [0000000000000000] 
 14077                                  
 14078 0000A70A 4889C7                  	mov rdi, rax
 14079 0000A70D E8CD770000              	call print_sexpr_if_not_void
 14080                                  
 14081 0000A712 48B8-                   	mov rax,L_constants + 0
 14081 0000A714 [0000000000000000] 
 14082 0000A71C 48890425[70030000]      	mov qword [free_var_110], rax
 14083 0000A724 48B8-                   	mov rax, sob_void
 14083 0000A726 [0000000000000000] 
 14084                                  
 14085 0000A72E 4889C7                  	mov rdi, rax
 14086 0000A731 E8A9770000              	call print_sexpr_if_not_void
 14087                                  
 14088 0000A736 48B8-                   	mov rax,L_constants + 0
 14088 0000A738 [0000000000000000] 
 14089 0000A740 48890425[78030000]      	mov qword [free_var_111], rax
 14090 0000A748 48B8-                   	mov rax, sob_void
 14090 0000A74A [0000000000000000] 
 14091                                  
 14092 0000A752 4889C7                  	mov rdi, rax
 14093 0000A755 E885770000              	call print_sexpr_if_not_void
 14094                                  
 14095 0000A75A 48B8-                   	mov rax,L_constants + 0
 14095 0000A75C [0000000000000000] 
 14096 0000A764 48890425[80030000]      	mov qword [free_var_112], rax
 14097 0000A76C 48B8-                   	mov rax, sob_void
 14097 0000A76E [0000000000000000] 
 14098                                  
 14099 0000A776 4889C7                  	mov rdi, rax
 14100 0000A779 E861770000              	call print_sexpr_if_not_void
 14101                                  
 14102 0000A77E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14103 0000A783 E846770000              	call malloc
 14104 0000A788 50                      	push rax
 14105 0000A789 BF00000000              	mov rdi, 8 * 0	; new rib
 14106 0000A78E E83B770000              	call malloc
 14107 0000A793 50                      	push rax
 14108 0000A794 BF08000000              	mov rdi, 8 * 1	; extended env
 14109 0000A799 E830770000              	call malloc
 14110 0000A79E 488B7D10                	mov rdi, ENV
 14111 0000A7A2 BE00000000              	mov rsi, 0
 14112 0000A7A7 BA01000000              	mov rdx, 1
 14113                                  .L_lambda_simple_env_loop_3783:	; ext_env[i + 1] <-- env[i]
 14114 0000A7AC 4883FE00                	cmp rsi, 0
 14115 0000A7B0 7410                    	je .L_lambda_simple_env_end_3783
 14116 0000A7B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14117 0000A7B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14118 0000A7BA 48FFC6                  	inc rsi
 14119 0000A7BD 48FFC2                  	inc rdx
 14120 0000A7C0 EBEA                    	jmp .L_lambda_simple_env_loop_3783
 14121                                  .L_lambda_simple_env_end_3783:
 14122 0000A7C2 5B                      	pop rbx
 14123 0000A7C3 BE00000000              	mov rsi, 0
 14124                                  .L_lambda_simple_params_loop_3783:	; copy params
 14125 0000A7C8 4883FE00                	cmp rsi, 0
 14126 0000A7CC 740E                    	je .L_lambda_simple_params_end_3783
 14127 0000A7CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14128 0000A7D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14129 0000A7D7 48FFC6                  	inc rsi
 14130 0000A7DA EBEC                    	jmp .L_lambda_simple_params_loop_3783
 14131                                  .L_lambda_simple_params_end_3783:
 14132 0000A7DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14133 0000A7DF 4889C3                  	mov rbx, rax
 14134 0000A7E2 58                      	pop rax
 14135 0000A7E3 C60005                  	mov byte [rax], T_closure
 14136 0000A7E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14137 0000A7EA 48C74009[F7A70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3783
 14138 0000A7F2 E93E020000              	jmp .L_lambda_simple_end_3783
 14139                                  .L_lambda_simple_code_3783:	; lambda-simple body
 14140 0000A7F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14141 0000A7FD 740B                    	je .L_lambda_simple_arity_check_ok_3783
 14142 0000A7FF FF742410                	push qword [rsp + 8 * 2]
 14143 0000A803 6A01                    	push 1
 14144 0000A805 E97D760000              	jmp L_error_incorrect_arity_simple
 14145                                  .L_lambda_simple_arity_check_ok_3783:
 14146 0000A80A C8000000                	enter 0, 0
 14147 0000A80E BF11000000              	mov rdi, (1 + 8 + 8)
 14148 0000A813 E8B6760000              	call malloc
 14149 0000A818 50                      	push rax
 14150 0000A819 BF08000000              	mov rdi, 8 * 1
 14151 0000A81E E8AB760000              	call malloc
 14152 0000A823 50                      	push rax
 14153 0000A824 BF10000000              	mov rdi, 8 * 2
 14154 0000A829 E8A0760000              	call malloc
 14155 0000A82E 488B7D10                	mov rdi, ENV
 14156 0000A832 4831F6                  	xor rsi, rsi
 14157 0000A835 4831D2                  	xor rdx, rdx
 14158 0000A838 48FFC2                  	inc rdx
 14159                                  	.L_lambda_opt_env_loop_0889:
 14160                                  
 14161 0000A83B 4883FE01                        	cmp rsi, 1
 14162                                  
 14163 0000A83F 7412                            	je .L_lambda_opt_env_end_0889
 14164 0000A841 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14165 0000A845 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14166 0000A849 4883C201                	add rdx, 1
 14167 0000A84D 4883C601                	add rsi, 1
 14168 0000A851 EBE8                    	jmp .L_lambda_opt_env_loop_0889
 14169                                  
 14170                                          	.L_lambda_opt_env_end_0889:
 14171 0000A853 5B                      	pop rbx
 14172 0000A854 4831F6                  	xor rsi, rsi
 14173                                  	.L_lambda_opt_params_loop_0889:
 14174                                  
 14175 0000A857 4883FE01                        	cmp rsi, 1
 14176                                  
 14177 0000A85B 740F                            	je .L_lambda_opt_params_end_0889
 14178 0000A85D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14179 0000A862 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14180 0000A866 4883C601                	add rsi, 1
 14181 0000A86A EBEB                    	jmp .L_lambda_opt_params_loop_0889
 14182                                  
 14183                                          	.L_lambda_opt_params_end_0889:
 14184 0000A86C 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 14185 0000A86F 4889C3                  	mov rbx, rax
 14186 0000A872 58                      	pop rax
 14187 0000A873 C60005                  	mov byte [rax], T_closure
 14188 0000A876 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14189 0000A87A 48C74009[87A80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0889
 14190                                  
 14191 0000A882 E9AA010000                      	jmp .L_lambda_opt_end_0889
 14192                                  
 14193                                          	.L_lambda_opt_code_0889:
 14194                                  
 14195 0000A887 48837C241000                    	cmp qword [rsp + 8 * 2], 0
 14196                                  
 14197 0000A88D 740D                            	je .L_lambda_opt_arity_check_exact_0889  ;same num_of_args
 14198                                  
 14199 0000A88F 7F65                            	jg .L_lambda_opt_arity_check_more_0889  ;greater num_of_args
 14200 0000A891 FF742410                	push qword [rsp + 8 * 2]
 14201 0000A895 6A00                    	push 0
 14202 0000A897 E9FF750000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 14203                                  .L_lambda_opt_arity_check_exact_0889:
 14204 0000A89C 4883EC08                	sub rsp, 8 * 1
 14205 0000A8A0 488D7F10                	lea rdi, [rdi + (8 * 2)]
 14206 0000A8A4 4889E7                  	mov rdi, rsp 
 14207 0000A8A7 488B4708                	mov rax, qword [rdi + 8]
 14208 0000A8AB 488907                  	mov qword [rdi], rax
 14209 0000A8AE 488D7F08                	lea rdi, [rdi + 8]
 14210 0000A8B2 488B4708                	mov rax, qword [rdi + 8]
 14211 0000A8B6 488907                  	mov qword [rdi], rax
 14212 0000A8B9 488D7F08                	lea rdi, [rdi + 8]
 14213 0000A8BD 488B4708                	mov rax, qword [rdi + 8]
 14214 0000A8C1 4889C1                  	mov rcx, rax
 14215 0000A8C4 4883C001                	add rax, 1
 14216 0000A8C8 488907                  	mov qword [rdi], rax
 14217 0000A8CB 488D7F08                	lea rdi, [rdi + 8]
 14218                                  	.L_lambda_opt_stack_shrink_loop_1999:
 14219 0000A8CF 4883F900                	cmp rcx, 0
 14220 0000A8D3 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_1999
 14221 0000A8D5 4883E901                	sub rcx, 1
 14222 0000A8D9 488D4010                	lea rax, [rax + (8 * 2)]
 14223 0000A8DD 488B4708                	mov rax, qword [rdi + 8]
 14224 0000A8E1 488907                  	mov qword [rdi], rax
 14225 0000A8E4 488D7F08                	lea rdi, [rdi + 8]
 14226 0000A8E8 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_1999
 14227                                  
 14228                                          	.L_lambda_opt_stack_shrink_loop_exit_1999:
 14229 0000A8EA 48C707[01000000]        	mov qword [rdi], sob_nil
 14230 0000A8F1 E996000000              	jmp .L_lambda_opt_stack_adjusted_0889
 14231                                  
 14232                                          	.L_lambda_opt_arity_check_more_0889:
 14233 0000A8F6 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 14234 0000A8FB 488D0E                  	lea rcx, [rsi - 0]
 14235 0000A8FE 49B8-                   	mov r8, sob_nil
 14235 0000A900 [0100000000000000] 
 14236 0000A908 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 14237 0000A90D 4889F2                  	mov rdx, rsi
 14238                                  	.L_lambda_opt_stack_shrink_loop_199a:
 14239 0000A910 4883F900                	cmp rcx, 0
 14240 0000A914 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_199a
 14241 0000A916 BF11000000              	mov rdi, 1 + (8 * 2)
 14242 0000A91B E8AE750000              	call malloc
 14243 0000A920 C60021                  	mov byte [rax], T_pair
 14244 0000A923 488B1E                  	mov rbx, qword [rsi]
 14245 0000A926 48895801                	mov SOB_PAIR_CAR(rax), rbx
 14246 0000A92A 4C894009                	mov SOB_PAIR_CDR(rax), r8
 14247 0000A92E 4883C6F8                	add rsi, -8
 14248 0000A932 4883E901                	sub rcx, 1
 14249 0000A936 4989C0                  	mov r8, rax
 14250 0000A939 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_199a
 14251                                  
 14252                                          	.L_lambda_opt_stack_shrink_loop_exit_199a:
 14253 0000A93B 4C8902                  	mov qword [rdx], r8
 14254 0000A93E 4883EA08                	sub rdx, 8 * 1
 14255 0000A942 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
 14256                                  
 14257 0000A947 B900000000                      	mov rcx, 0 
 14258                                  
 14259                                          	.L_lambda_opt_stack_shrink_loop_199b:
 14260 0000A94C 4883F900                	cmp rcx, 0
 14261 0000A950 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_199b
 14262 0000A952 488B06                  	mov rax, qword [rsi]
 14263 0000A955 488902                  	mov qword [rdx], rax
 14264 0000A958 488D76F8                	lea rsi, [rsi - 8]
 14265 0000A95C 4883C2F8                	add rdx, -8
 14266 0000A960 4883C1FF                	add rcx, -1
 14267 0000A964 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_199b
 14268                                  
 14269                                          	.L_lambda_opt_stack_shrink_loop_exit_199b:
 14270                                  
 14271 0000A966 48C70201000000                  	mov qword [rdx], 1 + 0
 14272 0000A96D 4883C6F8                	add rsi, -8
 14273 0000A971 4883C2F8                	add rdx, -8
 14274 0000A975 488B06                  	mov rax, qword [rsi]
 14275 0000A978 488902                  	mov qword [rdx], rax
 14276 0000A97B 4883C2F8                	add rdx, -8
 14277 0000A97F 488D76F8                	lea rsi, [rsi - 8]
 14278 0000A983 488B06                  	mov rax, qword [rsi]
 14279 0000A986 488902                  	mov qword [rdx], rax
 14280 0000A989 4889D4                  	mov rsp, rdx
 14281                                  	.L_lambda_opt_stack_adjusted_0889:
 14282 0000A98C C8000000                	enter 0, 0
 14283 0000A990 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14284 0000A994 50                      	push rax
 14285 0000A995 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14286 0000A99D 50                      	push rax
 14287 0000A99E 6A02                    	push 2
 14288 0000A9A0 488B0425[D8020000]      	mov rax, qword [free_var_91]
 14289                                  	assert_closure(rax)
    42 0000A9A8 803805              <1>  cmp byte [%1], %2
    43 0000A9AB 0F85118D0000        <1>  jne L_error_incorrect_type
 14290 0000A9B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14291 0000A9B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14292 0000A9B7 50                      	push rax
 14293 0000A9B8 488B4510                	mov rax, qword [rbp + 8 * 2]
 14294                                  
 14295 0000A9BC 488B00                                            	mov rax, qword[rax + 8 * 0]
 14296                                  
 14297 0000A9BF 488B00                                            	mov rax, qword[rax + 8 * 0]
 14298 0000A9C2 50                      	push rax
 14299 0000A9C3 6A02                    	push 2
 14300 0000A9C5 488B0425[C8020000]      	mov rax, qword [free_var_89]
 14301                                  .L_applic_TC_403e:
 14302 0000A9CD 803805                  	cmp byte [rax], T_closure
 14303 0000A9D0 0F85AD840000            	jne L_code_ptr_error
 14304 0000A9D6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14305 0000A9DA 53                      	push rbx
 14306 0000A9DB FF7508                  	push qword [rbp + 8]
 14307 0000A9DE FF7500                  	push qword [rbp]
 14308 0000A9E1 488B4D18                	mov rcx, [rbp + 3 * 8]
 14309 0000A9E5 488B542418              	mov rdx, [rsp + 3 * 8]
 14310 0000A9EA 488D7204                	lea rsi, [rdx + 4]
 14311 0000A9EE 4C8D4EFF                	lea r9, [rsi - 1]
 14312 0000A9F2 488D7903                	lea rdi, [rcx + 3]
 14313 0000A9F6 4D31C0                  	xor r8, r8
 14314                                  .L_tc_recycle_frame_loop_403e:
 14315 0000A9F9 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 14316 0000A9FD 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 14317 0000AA02 49FFC9                  	dec r9
 14318 0000AA05 4D31C0                  	xor r8, r8
 14319 0000AA08 48FFCF                  	dec rdi
 14320 0000AA0B 48FFCE                  	dec rsi
 14321 0000AA0E 4883FE00                	cmp rsi, 0
 14322 0000AA12 75E5                    	jne .L_tc_recycle_frame_loop_403e
 14323                                  .L_tc_recycle_frame_done_403e:
 14324                                  ;this pop rbp in sot to the right place
 14325 0000AA14 4989C9                  	mov r9, rcx
 14326 0000AA17 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14327 0000AA1F 4C01CC                  	add rsp, r9
 14328 0000AA22 5D                      	pop rbp
 14329 0000AA23 488B4D00                	mov rcx, qword [rbp]
 14330 0000AA27 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14331 0000AA2B FFE3                    	jmp rbx
 14332 0000AA2D C9                      	leave
 14333 0000AA2E C21800                  	ret 8 * (2 + 1)
 14334                                  .L_lambda_opt_end_0889:	; new closure is in rax
 14335 0000AA31 C9                      	leave
 14336 0000AA32 C21800                  	ret 8 * (2 + 1)
 14337                                  .L_lambda_simple_end_3783:	; new closure is in rax
 14338 0000AA35 50                      	push rax
 14339 0000AA36 6A01                    	push 1
 14340 0000AA38 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14341 0000AA3D E88C740000              	call malloc
 14342 0000AA42 50                      	push rax
 14343 0000AA43 BF00000000              	mov rdi, 8 * 0	; new rib
 14344 0000AA48 E881740000              	call malloc
 14345 0000AA4D 50                      	push rax
 14346 0000AA4E BF08000000              	mov rdi, 8 * 1	; extended env
 14347 0000AA53 E876740000              	call malloc
 14348 0000AA58 488B7D10                	mov rdi, ENV
 14349 0000AA5C BE00000000              	mov rsi, 0
 14350 0000AA61 BA01000000              	mov rdx, 1
 14351                                  .L_lambda_simple_env_loop_3784:	; ext_env[i + 1] <-- env[i]
 14352 0000AA66 4883FE00                	cmp rsi, 0
 14353 0000AA6A 7410                    	je .L_lambda_simple_env_end_3784
 14354 0000AA6C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14355 0000AA70 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14356 0000AA74 48FFC6                  	inc rsi
 14357 0000AA77 48FFC2                  	inc rdx
 14358 0000AA7A EBEA                    	jmp .L_lambda_simple_env_loop_3784
 14359                                  .L_lambda_simple_env_end_3784:
 14360 0000AA7C 5B                      	pop rbx
 14361 0000AA7D BE00000000              	mov rsi, 0
 14362                                  .L_lambda_simple_params_loop_3784:	; copy params
 14363 0000AA82 4883FE00                	cmp rsi, 0
 14364 0000AA86 740E                    	je .L_lambda_simple_params_end_3784
 14365 0000AA88 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14366 0000AA8D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14367 0000AA91 48FFC6                  	inc rsi
 14368 0000AA94 EBEC                    	jmp .L_lambda_simple_params_loop_3784
 14369                                  .L_lambda_simple_params_end_3784:
 14370 0000AA96 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14371 0000AA99 4889C3                  	mov rbx, rax
 14372 0000AA9C 58                      	pop rax
 14373 0000AA9D C60005                  	mov byte [rax], T_closure
 14374 0000AAA0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14375 0000AAA4 48C74009[B1AA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3784
 14376 0000AAAC E90B010000              	jmp .L_lambda_simple_end_3784
 14377                                  .L_lambda_simple_code_3784:	; lambda-simple body
 14378 0000AAB1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14379 0000AAB7 740B                    	je .L_lambda_simple_arity_check_ok_3784
 14380 0000AAB9 FF742410                	push qword [rsp + 8 * 2]
 14381 0000AABD 6A01                    	push 1
 14382 0000AABF E9C3730000              	jmp L_error_incorrect_arity_simple
 14383                                  .L_lambda_simple_arity_check_ok_3784:
 14384 0000AAC4 C8000000                	enter 0, 0
 14385 0000AAC8 488B0425[30030000]      	mov rax, qword [free_var_102]
 14386 0000AAD0 50                      	push rax
 14387 0000AAD1 6A01                    	push 1
 14388 0000AAD3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14389                                  	assert_closure(rax)
    42 0000AAD7 803805              <1>  cmp byte [%1], %2
    43 0000AADA 0F85E28B0000        <1>  jne L_error_incorrect_type
 14390 0000AAE0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14391 0000AAE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14392 0000AAE6 48890425[60030000]      	mov qword [free_var_108], rax
 14393                                  
 14394 0000AAEE 48B8-                           	mov rax, sob_void
 14394 0000AAF0 [0000000000000000] 
 14395                                  
 14396 0000AAF8 488B0425[38030000]      	mov rax, qword [free_var_103]
 14397 0000AB00 50                      	push rax
 14398 0000AB01 6A01                    	push 1
 14399 0000AB03 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14400                                  	assert_closure(rax)
    42 0000AB07 803805              <1>  cmp byte [%1], %2
    43 0000AB0A 0F85B28B0000        <1>  jne L_error_incorrect_type
 14401 0000AB10 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14402 0000AB13 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14403 0000AB16 48890425[68030000]      	mov qword [free_var_109], rax
 14404                                  
 14405 0000AB1E 48B8-                           	mov rax, sob_void
 14405 0000AB20 [0000000000000000] 
 14406                                  
 14407 0000AB28 488B0425[50030000]      	mov rax, qword [free_var_106]
 14408 0000AB30 50                      	push rax
 14409 0000AB31 6A01                    	push 1
 14410 0000AB33 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14411                                  	assert_closure(rax)
    42 0000AB37 803805              <1>  cmp byte [%1], %2
    43 0000AB3A 0F85828B0000        <1>  jne L_error_incorrect_type
 14412 0000AB40 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14413 0000AB43 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14414 0000AB46 48890425[70030000]      	mov qword [free_var_110], rax
 14415                                  
 14416 0000AB4E 48B8-                           	mov rax, sob_void
 14416 0000AB50 [0000000000000000] 
 14417                                  
 14418 0000AB58 488B0425[40030000]      	mov rax, qword [free_var_104]
 14419 0000AB60 50                      	push rax
 14420 0000AB61 6A01                    	push 1
 14421 0000AB63 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14422                                  	assert_closure(rax)
    42 0000AB67 803805              <1>  cmp byte [%1], %2
    43 0000AB6A 0F85528B0000        <1>  jne L_error_incorrect_type
 14423 0000AB70 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14424 0000AB73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14425 0000AB76 48890425[78030000]      	mov qword [free_var_111], rax
 14426                                  
 14427 0000AB7E 48B8-                           	mov rax, sob_void
 14427 0000AB80 [0000000000000000] 
 14428                                  
 14429 0000AB88 488B0425[48030000]      	mov rax, qword [free_var_105]
 14430 0000AB90 50                      	push rax
 14431 0000AB91 6A01                    	push 1
 14432 0000AB93 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14433                                  	assert_closure(rax)
    42 0000AB97 803805              <1>  cmp byte [%1], %2
    43 0000AB9A 0F85228B0000        <1>  jne L_error_incorrect_type
 14434 0000ABA0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14435 0000ABA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14436 0000ABA6 48890425[80030000]      	mov qword [free_var_112], rax
 14437                                  
 14438 0000ABAE 48B8-                           	mov rax, sob_void
 14438 0000ABB0 [0000000000000000] 
 14439 0000ABB8 C9                      	leave
 14440 0000ABB9 C21800                  	ret 8 * (2 + 1)
 14441                                  .L_lambda_simple_end_3784:	; new closure is in rax
 14442                                  	assert_closure(rax)
    42 0000ABBC 803805              <1>  cmp byte [%1], %2
    43 0000ABBF 0F85FD8A0000        <1>  jne L_error_incorrect_type
 14443 0000ABC5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14444 0000ABC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14445                                  
 14446 0000ABCB 4889C7                  	mov rdi, rax
 14447 0000ABCE E80C730000              	call print_sexpr_if_not_void
 14448                                  
 14449 0000ABD3 48B8-                   	mov rax,L_constants + 0
 14449 0000ABD5 [0000000000000000] 
 14450 0000ABDD 48890425[88030000]      	mov qword [free_var_113], rax
 14451 0000ABE5 48B8-                   	mov rax, sob_void
 14451 0000ABE7 [0000000000000000] 
 14452                                  
 14453 0000ABEF 4889C7                  	mov rdi, rax
 14454 0000ABF2 E8E8720000              	call print_sexpr_if_not_void
 14455                                  
 14456 0000ABF7 48B8-                   	mov rax,L_constants + 0
 14456 0000ABF9 [0000000000000000] 
 14457 0000AC01 48890425[90030000]      	mov qword [free_var_114], rax
 14458 0000AC09 48B8-                   	mov rax, sob_void
 14458 0000AC0B [0000000000000000] 
 14459                                  
 14460 0000AC13 4889C7                  	mov rdi, rax
 14461 0000AC16 E8C4720000              	call print_sexpr_if_not_void
 14462                                  
 14463 0000AC1B 48B8-                   	mov rax,L_constants + 342
 14463 0000AC1D [5601000000000000] 
 14464 0000AC25 50                      	push rax
 14465 0000AC26 6A01                    	push 1
 14466 0000AC28 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14467                                  	assert_closure(rax)
    42 0000AC30 803805              <1>  cmp byte [%1], %2
    43 0000AC33 0F85898A0000        <1>  jne L_error_incorrect_type
 14468 0000AC39 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14469 0000AC3C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14470 0000AC3F 50                      	push rax
 14471 0000AC40 48B8-                   	mov rax,L_constants + 346
 14471 0000AC42 [5A01000000000000] 
 14472 0000AC4A 50                      	push rax
 14473 0000AC4B 6A01                    	push 1
 14474 0000AC4D 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14475                                  	assert_closure(rax)
    42 0000AC55 803805              <1>  cmp byte [%1], %2
    43 0000AC58 0F85648A0000        <1>  jne L_error_incorrect_type
 14476 0000AC5E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14477 0000AC61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14478 0000AC64 50                      	push rax
 14479 0000AC65 6A02                    	push 2
 14480 0000AC67 488B0425[10030000]      	mov rax, qword [free_var_98]
 14481                                  	assert_closure(rax)
    42 0000AC6F 803805              <1>  cmp byte [%1], %2
    43 0000AC72 0F854A8A0000        <1>  jne L_error_incorrect_type
 14482 0000AC78 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14483 0000AC7B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14484 0000AC7E 50                      	push rax
 14485 0000AC7F 6A01                    	push 1
 14486 0000AC81 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14487 0000AC86 E843720000              	call malloc
 14488 0000AC8B 50                      	push rax
 14489 0000AC8C BF00000000              	mov rdi, 8 * 0	; new rib
 14490 0000AC91 E838720000              	call malloc
 14491 0000AC96 50                      	push rax
 14492 0000AC97 BF08000000              	mov rdi, 8 * 1	; extended env
 14493 0000AC9C E82D720000              	call malloc
 14494 0000ACA1 488B7D10                	mov rdi, ENV
 14495 0000ACA5 BE00000000              	mov rsi, 0
 14496 0000ACAA BA01000000              	mov rdx, 1
 14497                                  .L_lambda_simple_env_loop_3785:	; ext_env[i + 1] <-- env[i]
 14498 0000ACAF 4883FE00                	cmp rsi, 0
 14499 0000ACB3 7410                    	je .L_lambda_simple_env_end_3785
 14500 0000ACB5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14501 0000ACB9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14502 0000ACBD 48FFC6                  	inc rsi
 14503 0000ACC0 48FFC2                  	inc rdx
 14504 0000ACC3 EBEA                    	jmp .L_lambda_simple_env_loop_3785
 14505                                  .L_lambda_simple_env_end_3785:
 14506 0000ACC5 5B                      	pop rbx
 14507 0000ACC6 BE00000000              	mov rsi, 0
 14508                                  .L_lambda_simple_params_loop_3785:	; copy params
 14509 0000ACCB 4883FE00                	cmp rsi, 0
 14510 0000ACCF 740E                    	je .L_lambda_simple_params_end_3785
 14511 0000ACD1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14512 0000ACD6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14513 0000ACDA 48FFC6                  	inc rsi
 14514 0000ACDD EBEC                    	jmp .L_lambda_simple_params_loop_3785
 14515                                  .L_lambda_simple_params_end_3785:
 14516 0000ACDF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14517 0000ACE2 4889C3                  	mov rbx, rax
 14518 0000ACE5 58                      	pop rax
 14519 0000ACE6 C60005                  	mov byte [rax], T_closure
 14520 0000ACE9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14521 0000ACED 48C74009[FAAC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3785
 14522 0000ACF5 E94F030000              	jmp .L_lambda_simple_end_3785
 14523                                  .L_lambda_simple_code_3785:	; lambda-simple body
 14524 0000ACFA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14525 0000AD00 740B                    	je .L_lambda_simple_arity_check_ok_3785
 14526 0000AD02 FF742410                	push qword [rsp + 8 * 2]
 14527 0000AD06 6A01                    	push 1
 14528 0000AD08 E97A710000              	jmp L_error_incorrect_arity_simple
 14529                                  .L_lambda_simple_arity_check_ok_3785:
 14530 0000AD0D C8000000                	enter 0, 0
 14531 0000AD11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14532 0000AD16 E8B3710000              	call malloc
 14533 0000AD1B 50                      	push rax
 14534 0000AD1C BF08000000              	mov rdi, 8 * 1	; new rib
 14535 0000AD21 E8A8710000              	call malloc
 14536 0000AD26 50                      	push rax
 14537 0000AD27 BF10000000              	mov rdi, 8 * 2	; extended env
 14538 0000AD2C E89D710000              	call malloc
 14539 0000AD31 488B7D10                	mov rdi, ENV
 14540 0000AD35 BE00000000              	mov rsi, 0
 14541 0000AD3A BA01000000              	mov rdx, 1
 14542                                  .L_lambda_simple_env_loop_3786:	; ext_env[i + 1] <-- env[i]
 14543 0000AD3F 4883FE01                	cmp rsi, 1
 14544 0000AD43 7410                    	je .L_lambda_simple_env_end_3786
 14545 0000AD45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14546 0000AD49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14547 0000AD4D 48FFC6                  	inc rsi
 14548 0000AD50 48FFC2                  	inc rdx
 14549 0000AD53 EBEA                    	jmp .L_lambda_simple_env_loop_3786
 14550                                  .L_lambda_simple_env_end_3786:
 14551 0000AD55 5B                      	pop rbx
 14552 0000AD56 BE00000000              	mov rsi, 0
 14553                                  .L_lambda_simple_params_loop_3786:	; copy params
 14554 0000AD5B 4883FE01                	cmp rsi, 1
 14555 0000AD5F 740E                    	je .L_lambda_simple_params_end_3786
 14556 0000AD61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14557 0000AD66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14558 0000AD6A 48FFC6                  	inc rsi
 14559 0000AD6D EBEC                    	jmp .L_lambda_simple_params_loop_3786
 14560                                  .L_lambda_simple_params_end_3786:
 14561 0000AD6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14562 0000AD72 4889C3                  	mov rbx, rax
 14563 0000AD75 58                      	pop rax
 14564 0000AD76 C60005                  	mov byte [rax], T_closure
 14565 0000AD79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14566 0000AD7D 48C74009[8AAD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3786
 14567 0000AD85 E90F010000              	jmp .L_lambda_simple_end_3786
 14568                                  .L_lambda_simple_code_3786:	; lambda-simple body
 14569 0000AD8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14570 0000AD90 740B                    	je .L_lambda_simple_arity_check_ok_3786
 14571 0000AD92 FF742410                	push qword [rsp + 8 * 2]
 14572 0000AD96 6A01                    	push 1
 14573 0000AD98 E9EA700000              	jmp L_error_incorrect_arity_simple
 14574                                  .L_lambda_simple_arity_check_ok_3786:
 14575 0000AD9D C8000000                	enter 0, 0
 14576 0000ADA1 48B8-                   	mov rax,L_constants + 344
 14576 0000ADA3 [5801000000000000] 
 14577 0000ADAB 50                      	push rax
 14578 0000ADAC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14579 0000ADB0 50                      	push rax
 14580 0000ADB1 48B8-                   	mov rax,L_constants + 342
 14580 0000ADB3 [5601000000000000] 
 14581 0000ADBB 50                      	push rax
 14582 0000ADBC 6A03                    	push 3
 14583 0000ADBE 488B0425[68030000]      	mov rax, qword [free_var_109]
 14584                                  	assert_closure(rax)
    42 0000ADC6 803805              <1>  cmp byte [%1], %2
    43 0000ADC9 0F85F3880000        <1>  jne L_error_incorrect_type
 14585 0000ADCF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14586 0000ADD2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14587                                  
 14588 0000ADD5 483D[02000000]                  	cmp rax, sob_boolean_false
 14589                                  
 14590 0000ADDB 0F84B0000000                    	je .L_if_else_47fc
 14591 0000ADE1 488B4510                	mov rax, qword [rbp + 8 * 2]
 14592                                  
 14593 0000ADE5 488B00                                            	mov rax, qword[rax + 8 * 0]
 14594                                  
 14595 0000ADE8 488B00                                            	mov rax, qword[rax + 8 * 0]
 14596 0000ADEB 50                      	push rax
 14597 0000ADEC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14598 0000ADF0 50                      	push rax
 14599 0000ADF1 6A01                    	push 1
 14600 0000ADF3 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14601                                  	assert_closure(rax)
    42 0000ADFB 803805              <1>  cmp byte [%1], %2
    43 0000ADFE 0F85BE880000        <1>  jne L_error_incorrect_type
 14602 0000AE04 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14603 0000AE07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14604 0000AE0A 50                      	push rax
 14605 0000AE0B 6A02                    	push 2
 14606 0000AE0D 488B0425[08030000]      	mov rax, qword [free_var_97]
 14607                                  	assert_closure(rax)
    42 0000AE15 803805              <1>  cmp byte [%1], %2
    43 0000AE18 0F85A4880000        <1>  jne L_error_incorrect_type
 14608 0000AE1E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14609 0000AE21 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14610 0000AE24 50                      	push rax
 14611 0000AE25 6A01                    	push 1
 14612 0000AE27 488B0425[C8000000]      	mov rax, qword [free_var_25]
 14613                                  .L_applic_TC_403f:
 14614 0000AE2F 803805                  	cmp byte [rax], T_closure
 14615 0000AE32 0F854B800000            	jne L_code_ptr_error
 14616 0000AE38 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14617 0000AE3C 53                      	push rbx
 14618 0000AE3D FF7508                  	push qword [rbp + 8]
 14619 0000AE40 FF7500                  	push qword [rbp]
 14620 0000AE43 488B4D18                	mov rcx, [rbp + 3 * 8]
 14621 0000AE47 488B542418              	mov rdx, [rsp + 3 * 8]
 14622 0000AE4C 488D7204                	lea rsi, [rdx + 4]
 14623 0000AE50 4C8D4EFF                	lea r9, [rsi - 1]
 14624 0000AE54 488D7903                	lea rdi, [rcx + 3]
 14625 0000AE58 4D31C0                  	xor r8, r8
 14626                                  .L_tc_recycle_frame_loop_403f:
 14627 0000AE5B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 14628 0000AE5F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 14629 0000AE64 49FFC9                  	dec r9
 14630 0000AE67 4D31C0                  	xor r8, r8
 14631 0000AE6A 48FFCF                  	dec rdi
 14632 0000AE6D 48FFCE                  	dec rsi
 14633 0000AE70 4883FE00                	cmp rsi, 0
 14634 0000AE74 75E5                    	jne .L_tc_recycle_frame_loop_403f
 14635                                  .L_tc_recycle_frame_done_403f:
 14636                                  ;this pop rbp in sot to the right place
 14637 0000AE76 4989C9                  	mov r9, rcx
 14638 0000AE79 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14639 0000AE81 4C01CC                  	add rsp, r9
 14640 0000AE84 5D                      	pop rbp
 14641 0000AE85 488B4D00                	mov rcx, qword [rbp]
 14642 0000AE89 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14643 0000AE8D FFE3                    	jmp rbx
 14644                                  
 14645 0000AE8F EB04                            	jmp .L_if_end_47fc
 14646                                  
 14647                                          	.L_if_else_47fc:
 14648 0000AE91 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14649                                  
 14650                                          	.L_if_end_47fc:
 14651 0000AE95 C9                      	leave
 14652 0000AE96 C21800                  	ret 8 * (2 + 1)
 14653                                  .L_lambda_simple_end_3786:	; new closure is in rax
 14654 0000AE99 48890425[88030000]      	mov qword [free_var_113], rax
 14655                                  
 14656 0000AEA1 48B8-                           	mov rax, sob_void
 14656 0000AEA3 [0000000000000000] 
 14657                                  
 14658 0000AEAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14659 0000AEB0 E819700000              	call malloc
 14660 0000AEB5 50                      	push rax
 14661 0000AEB6 BF08000000              	mov rdi, 8 * 1	; new rib
 14662 0000AEBB E80E700000              	call malloc
 14663 0000AEC0 50                      	push rax
 14664 0000AEC1 BF10000000              	mov rdi, 8 * 2	; extended env
 14665 0000AEC6 E803700000              	call malloc
 14666 0000AECB 488B7D10                	mov rdi, ENV
 14667 0000AECF BE00000000              	mov rsi, 0
 14668 0000AED4 BA01000000              	mov rdx, 1
 14669                                  .L_lambda_simple_env_loop_3787:	; ext_env[i + 1] <-- env[i]
 14670 0000AED9 4883FE01                	cmp rsi, 1
 14671 0000AEDD 7410                    	je .L_lambda_simple_env_end_3787
 14672 0000AEDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14673 0000AEE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14674 0000AEE7 48FFC6                  	inc rsi
 14675 0000AEEA 48FFC2                  	inc rdx
 14676 0000AEED EBEA                    	jmp .L_lambda_simple_env_loop_3787
 14677                                  .L_lambda_simple_env_end_3787:
 14678 0000AEEF 5B                      	pop rbx
 14679 0000AEF0 BE00000000              	mov rsi, 0
 14680                                  .L_lambda_simple_params_loop_3787:	; copy params
 14681 0000AEF5 4883FE01                	cmp rsi, 1
 14682 0000AEF9 740E                    	je .L_lambda_simple_params_end_3787
 14683 0000AEFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14684 0000AF00 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14685 0000AF04 48FFC6                  	inc rsi
 14686 0000AF07 EBEC                    	jmp .L_lambda_simple_params_loop_3787
 14687                                  .L_lambda_simple_params_end_3787:
 14688 0000AF09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14689 0000AF0C 4889C3                  	mov rbx, rax
 14690 0000AF0F 58                      	pop rax
 14691 0000AF10 C60005                  	mov byte [rax], T_closure
 14692 0000AF13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14693 0000AF17 48C74009[24AF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3787
 14694 0000AF1F E90F010000              	jmp .L_lambda_simple_end_3787
 14695                                  .L_lambda_simple_code_3787:	; lambda-simple body
 14696 0000AF24 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14697 0000AF2A 740B                    	je .L_lambda_simple_arity_check_ok_3787
 14698 0000AF2C FF742410                	push qword [rsp + 8 * 2]
 14699 0000AF30 6A01                    	push 1
 14700 0000AF32 E9506F0000              	jmp L_error_incorrect_arity_simple
 14701                                  .L_lambda_simple_arity_check_ok_3787:
 14702 0000AF37 C8000000                	enter 0, 0
 14703 0000AF3B 48B8-                   	mov rax,L_constants + 348
 14703 0000AF3D [5C01000000000000] 
 14704 0000AF45 50                      	push rax
 14705 0000AF46 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14706 0000AF4A 50                      	push rax
 14707 0000AF4B 48B8-                   	mov rax,L_constants + 346
 14707 0000AF4D [5A01000000000000] 
 14708 0000AF55 50                      	push rax
 14709 0000AF56 6A03                    	push 3
 14710 0000AF58 488B0425[68030000]      	mov rax, qword [free_var_109]
 14711                                  	assert_closure(rax)
    42 0000AF60 803805              <1>  cmp byte [%1], %2
    43 0000AF63 0F8559870000        <1>  jne L_error_incorrect_type
 14712 0000AF69 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14713 0000AF6C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14714                                  
 14715 0000AF6F 483D[02000000]                  	cmp rax, sob_boolean_false
 14716                                  
 14717 0000AF75 0F84B0000000                    	je .L_if_else_47fd
 14718 0000AF7B 488B4510                	mov rax, qword [rbp + 8 * 2]
 14719                                  
 14720 0000AF7F 488B00                                            	mov rax, qword[rax + 8 * 0]
 14721                                  
 14722 0000AF82 488B00                                            	mov rax, qword[rax + 8 * 0]
 14723 0000AF85 50                      	push rax
 14724 0000AF86 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14725 0000AF8A 50                      	push rax
 14726 0000AF8B 6A01                    	push 1
 14727 0000AF8D 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14728                                  	assert_closure(rax)
    42 0000AF95 803805              <1>  cmp byte [%1], %2
    43 0000AF98 0F8524870000        <1>  jne L_error_incorrect_type
 14729 0000AF9E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14730 0000AFA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14731 0000AFA4 50                      	push rax
 14732 0000AFA5 6A02                    	push 2
 14733 0000AFA7 488B0425[10030000]      	mov rax, qword [free_var_98]
 14734                                  	assert_closure(rax)
    42 0000AFAF 803805              <1>  cmp byte [%1], %2
    43 0000AFB2 0F850A870000        <1>  jne L_error_incorrect_type
 14735 0000AFB8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14736 0000AFBB FF5009                  	call SOB_CLOSURE_CODE(rax)
 14737 0000AFBE 50                      	push rax
 14738 0000AFBF 6A01                    	push 1
 14739 0000AFC1 488B0425[C8000000]      	mov rax, qword [free_var_25]
 14740                                  .L_applic_TC_4040:
 14741 0000AFC9 803805                  	cmp byte [rax], T_closure
 14742 0000AFCC 0F85B17E0000            	jne L_code_ptr_error
 14743 0000AFD2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14744 0000AFD6 53                      	push rbx
 14745 0000AFD7 FF7508                  	push qword [rbp + 8]
 14746 0000AFDA FF7500                  	push qword [rbp]
 14747 0000AFDD 488B4D18                	mov rcx, [rbp + 3 * 8]
 14748 0000AFE1 488B542418              	mov rdx, [rsp + 3 * 8]
 14749 0000AFE6 488D7204                	lea rsi, [rdx + 4]
 14750 0000AFEA 4C8D4EFF                	lea r9, [rsi - 1]
 14751 0000AFEE 488D7903                	lea rdi, [rcx + 3]
 14752 0000AFF2 4D31C0                  	xor r8, r8
 14753                                  .L_tc_recycle_frame_loop_4040:
 14754 0000AFF5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 14755 0000AFF9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 14756 0000AFFE 49FFC9                  	dec r9
 14757 0000B001 4D31C0                  	xor r8, r8
 14758 0000B004 48FFCF                  	dec rdi
 14759 0000B007 48FFCE                  	dec rsi
 14760 0000B00A 4883FE00                	cmp rsi, 0
 14761 0000B00E 75E5                    	jne .L_tc_recycle_frame_loop_4040
 14762                                  .L_tc_recycle_frame_done_4040:
 14763                                  ;this pop rbp in sot to the right place
 14764 0000B010 4989C9                  	mov r9, rcx
 14765 0000B013 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14766 0000B01B 4C01CC                  	add rsp, r9
 14767 0000B01E 5D                      	pop rbp
 14768 0000B01F 488B4D00                	mov rcx, qword [rbp]
 14769 0000B023 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14770 0000B027 FFE3                    	jmp rbx
 14771                                  
 14772 0000B029 EB04                            	jmp .L_if_end_47fd
 14773                                  
 14774                                          	.L_if_else_47fd:
 14775 0000B02B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14776                                  
 14777                                          	.L_if_end_47fd:
 14778 0000B02F C9                      	leave
 14779 0000B030 C21800                  	ret 8 * (2 + 1)
 14780                                  .L_lambda_simple_end_3787:	; new closure is in rax
 14781 0000B033 48890425[90030000]      	mov qword [free_var_114], rax
 14782                                  
 14783 0000B03B 48B8-                           	mov rax, sob_void
 14783 0000B03D [0000000000000000] 
 14784 0000B045 C9                      	leave
 14785 0000B046 C21800                  	ret 8 * (2 + 1)
 14786                                  .L_lambda_simple_end_3785:	; new closure is in rax
 14787                                  	assert_closure(rax)
    42 0000B049 803805              <1>  cmp byte [%1], %2
    43 0000B04C 0F8570860000        <1>  jne L_error_incorrect_type
 14788 0000B052 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14789 0000B055 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14790                                  
 14791 0000B058 4889C7                  	mov rdi, rax
 14792 0000B05B E87F6E0000              	call print_sexpr_if_not_void
 14793                                  
 14794 0000B060 48B8-                   	mov rax,L_constants + 0
 14794 0000B062 [0000000000000000] 
 14795 0000B06A 48890425[98030000]      	mov qword [free_var_115], rax
 14796 0000B072 48B8-                   	mov rax, sob_void
 14796 0000B074 [0000000000000000] 
 14797                                  
 14798 0000B07C 4889C7                  	mov rdi, rax
 14799 0000B07F E85B6E0000              	call print_sexpr_if_not_void
 14800                                  
 14801 0000B084 48B8-                   	mov rax,L_constants + 0
 14801 0000B086 [0000000000000000] 
 14802 0000B08E 48890425[A0030000]      	mov qword [free_var_116], rax
 14803 0000B096 48B8-                   	mov rax, sob_void
 14803 0000B098 [0000000000000000] 
 14804                                  
 14805 0000B0A0 4889C7                  	mov rdi, rax
 14806 0000B0A3 E8376E0000              	call print_sexpr_if_not_void
 14807                                  
 14808 0000B0A8 48B8-                   	mov rax,L_constants + 0
 14808 0000B0AA [0000000000000000] 
 14809 0000B0B2 48890425[A8030000]      	mov qword [free_var_117], rax
 14810 0000B0BA 48B8-                   	mov rax, sob_void
 14810 0000B0BC [0000000000000000] 
 14811                                  
 14812 0000B0C4 4889C7                  	mov rdi, rax
 14813 0000B0C7 E8136E0000              	call print_sexpr_if_not_void
 14814                                  
 14815 0000B0CC 48B8-                   	mov rax,L_constants + 0
 14815 0000B0CE [0000000000000000] 
 14816 0000B0D6 48890425[B0030000]      	mov qword [free_var_118], rax
 14817 0000B0DE 48B8-                   	mov rax, sob_void
 14817 0000B0E0 [0000000000000000] 
 14818                                  
 14819 0000B0E8 4889C7                  	mov rdi, rax
 14820 0000B0EB E8EF6D0000              	call print_sexpr_if_not_void
 14821                                  
 14822 0000B0F0 48B8-                   	mov rax,L_constants + 0
 14822 0000B0F2 [0000000000000000] 
 14823 0000B0FA 48890425[B8030000]      	mov qword [free_var_119], rax
 14824 0000B102 48B8-                   	mov rax, sob_void
 14824 0000B104 [0000000000000000] 
 14825                                  
 14826 0000B10C 4889C7                  	mov rdi, rax
 14827 0000B10F E8CB6D0000              	call print_sexpr_if_not_void
 14828                                  
 14829 0000B114 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14830 0000B119 E8B06D0000              	call malloc
 14831 0000B11E 50                      	push rax
 14832 0000B11F BF00000000              	mov rdi, 8 * 0	; new rib
 14833 0000B124 E8A56D0000              	call malloc
 14834 0000B129 50                      	push rax
 14835 0000B12A BF08000000              	mov rdi, 8 * 1	; extended env
 14836 0000B12F E89A6D0000              	call malloc
 14837 0000B134 488B7D10                	mov rdi, ENV
 14838 0000B138 BE00000000              	mov rsi, 0
 14839 0000B13D BA01000000              	mov rdx, 1
 14840                                  .L_lambda_simple_env_loop_3788:	; ext_env[i + 1] <-- env[i]
 14841 0000B142 4883FE00                	cmp rsi, 0
 14842 0000B146 7410                    	je .L_lambda_simple_env_end_3788
 14843 0000B148 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14844 0000B14C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14845 0000B150 48FFC6                  	inc rsi
 14846 0000B153 48FFC2                  	inc rdx
 14847 0000B156 EBEA                    	jmp .L_lambda_simple_env_loop_3788
 14848                                  .L_lambda_simple_env_end_3788:
 14849 0000B158 5B                      	pop rbx
 14850 0000B159 BE00000000              	mov rsi, 0
 14851                                  .L_lambda_simple_params_loop_3788:	; copy params
 14852 0000B15E 4883FE00                	cmp rsi, 0
 14853 0000B162 740E                    	je .L_lambda_simple_params_end_3788
 14854 0000B164 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14855 0000B169 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14856 0000B16D 48FFC6                  	inc rsi
 14857 0000B170 EBEC                    	jmp .L_lambda_simple_params_loop_3788
 14858                                  .L_lambda_simple_params_end_3788:
 14859 0000B172 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14860 0000B175 4889C3                  	mov rbx, rax
 14861 0000B178 58                      	pop rax
 14862 0000B179 C60005                  	mov byte [rax], T_closure
 14863 0000B17C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14864 0000B180 48C74009[8DB10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3788
 14865 0000B188 E953030000              	jmp .L_lambda_simple_end_3788
 14866                                  .L_lambda_simple_code_3788:	; lambda-simple body
 14867 0000B18D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14868 0000B193 740B                    	je .L_lambda_simple_arity_check_ok_3788
 14869 0000B195 FF742410                	push qword [rsp + 8 * 2]
 14870 0000B199 6A01                    	push 1
 14871 0000B19B E9E76C0000              	jmp L_error_incorrect_arity_simple
 14872                                  .L_lambda_simple_arity_check_ok_3788:
 14873 0000B1A0 C8000000                	enter 0, 0
 14874 0000B1A4 BF11000000              	mov rdi, (1 + 8 + 8)
 14875 0000B1A9 E8206D0000              	call malloc
 14876 0000B1AE 50                      	push rax
 14877 0000B1AF BF08000000              	mov rdi, 8 * 1
 14878 0000B1B4 E8156D0000              	call malloc
 14879 0000B1B9 50                      	push rax
 14880 0000B1BA BF10000000              	mov rdi, 8 * 2
 14881 0000B1BF E80A6D0000              	call malloc
 14882 0000B1C4 488B7D10                	mov rdi, ENV
 14883 0000B1C8 4831F6                  	xor rsi, rsi
 14884 0000B1CB 4831D2                  	xor rdx, rdx
 14885 0000B1CE 48FFC2                  	inc rdx
 14886                                  	.L_lambda_opt_env_loop_088a:
 14887                                  
 14888 0000B1D1 4883FE01                        	cmp rsi, 1
 14889                                  
 14890 0000B1D5 7412                            	je .L_lambda_opt_env_end_088a
 14891 0000B1D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14892 0000B1DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14893 0000B1DF 4883C201                	add rdx, 1
 14894 0000B1E3 4883C601                	add rsi, 1
 14895 0000B1E7 EBE8                    	jmp .L_lambda_opt_env_loop_088a
 14896                                  
 14897                                          	.L_lambda_opt_env_end_088a:
 14898 0000B1E9 5B                      	pop rbx
 14899 0000B1EA 4831F6                  	xor rsi, rsi
 14900                                  	.L_lambda_opt_params_loop_088a:
 14901                                  
 14902 0000B1ED 4883FE01                        	cmp rsi, 1
 14903                                  
 14904 0000B1F1 740F                            	je .L_lambda_opt_params_end_088a
 14905 0000B1F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14906 0000B1F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14907 0000B1FC 4883C601                	add rsi, 1
 14908 0000B200 EBEB                    	jmp .L_lambda_opt_params_loop_088a
 14909                                  
 14910                                          	.L_lambda_opt_params_end_088a:
 14911 0000B202 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 14912 0000B205 4889C3                  	mov rbx, rax
 14913 0000B208 58                      	pop rax
 14914 0000B209 C60005                  	mov byte [rax], T_closure
 14915 0000B20C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14916 0000B210 48C74009[1DB20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_088a
 14917                                  
 14918 0000B218 E9BF020000                      	jmp .L_lambda_opt_end_088a
 14919                                  
 14920                                          	.L_lambda_opt_code_088a:
 14921                                  
 14922 0000B21D 48837C241000                    	cmp qword [rsp + 8 * 2], 0
 14923                                  
 14924 0000B223 740D                            	je .L_lambda_opt_arity_check_exact_088a  ;same num_of_args
 14925                                  
 14926 0000B225 7F65                            	jg .L_lambda_opt_arity_check_more_088a  ;greater num_of_args
 14927 0000B227 FF742410                	push qword [rsp + 8 * 2]
 14928 0000B22B 6A00                    	push 0
 14929 0000B22D E9696C0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 14930                                  .L_lambda_opt_arity_check_exact_088a:
 14931 0000B232 4883EC08                	sub rsp, 8 * 1
 14932 0000B236 488D7F10                	lea rdi, [rdi + (8 * 2)]
 14933 0000B23A 4889E7                  	mov rdi, rsp 
 14934 0000B23D 488B4708                	mov rax, qword [rdi + 8]
 14935 0000B241 488907                  	mov qword [rdi], rax
 14936 0000B244 488D7F08                	lea rdi, [rdi + 8]
 14937 0000B248 488B4708                	mov rax, qword [rdi + 8]
 14938 0000B24C 488907                  	mov qword [rdi], rax
 14939 0000B24F 488D7F08                	lea rdi, [rdi + 8]
 14940 0000B253 488B4708                	mov rax, qword [rdi + 8]
 14941 0000B257 4889C1                  	mov rcx, rax
 14942 0000B25A 4883C001                	add rax, 1
 14943 0000B25E 488907                  	mov qword [rdi], rax
 14944 0000B261 488D7F08                	lea rdi, [rdi + 8]
 14945                                  	.L_lambda_opt_stack_shrink_loop_199c:
 14946 0000B265 4883F900                	cmp rcx, 0
 14947 0000B269 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_199c
 14948 0000B26B 4883E901                	sub rcx, 1
 14949 0000B26F 488D4010                	lea rax, [rax + (8 * 2)]
 14950 0000B273 488B4708                	mov rax, qword [rdi + 8]
 14951 0000B277 488907                  	mov qword [rdi], rax
 14952 0000B27A 488D7F08                	lea rdi, [rdi + 8]
 14953 0000B27E EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_199c
 14954                                  
 14955                                          	.L_lambda_opt_stack_shrink_loop_exit_199c:
 14956 0000B280 48C707[01000000]        	mov qword [rdi], sob_nil
 14957 0000B287 E996000000              	jmp .L_lambda_opt_stack_adjusted_088a
 14958                                  
 14959                                          	.L_lambda_opt_arity_check_more_088a:
 14960 0000B28C 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 14961 0000B291 488D0E                  	lea rcx, [rsi - 0]
 14962 0000B294 49B8-                   	mov r8, sob_nil
 14962 0000B296 [0100000000000000] 
 14963 0000B29E 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 14964 0000B2A3 4889F2                  	mov rdx, rsi
 14965                                  	.L_lambda_opt_stack_shrink_loop_199d:
 14966 0000B2A6 4883F900                	cmp rcx, 0
 14967 0000B2AA 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_199d
 14968 0000B2AC BF11000000              	mov rdi, 1 + (8 * 2)
 14969 0000B2B1 E8186C0000              	call malloc
 14970 0000B2B6 C60021                  	mov byte [rax], T_pair
 14971 0000B2B9 488B1E                  	mov rbx, qword [rsi]
 14972 0000B2BC 48895801                	mov SOB_PAIR_CAR(rax), rbx
 14973 0000B2C0 4C894009                	mov SOB_PAIR_CDR(rax), r8
 14974 0000B2C4 4883C6F8                	add rsi, -8
 14975 0000B2C8 4883E901                	sub rcx, 1
 14976 0000B2CC 4989C0                  	mov r8, rax
 14977 0000B2CF EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_199d
 14978                                  
 14979                                          	.L_lambda_opt_stack_shrink_loop_exit_199d:
 14980 0000B2D1 4C8902                  	mov qword [rdx], r8
 14981 0000B2D4 4883EA08                	sub rdx, 8 * 1
 14982 0000B2D8 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
 14983                                  
 14984 0000B2DD B900000000                      	mov rcx, 0 
 14985                                  
 14986                                          	.L_lambda_opt_stack_shrink_loop_199e:
 14987 0000B2E2 4883F900                	cmp rcx, 0
 14988 0000B2E6 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_199e
 14989 0000B2E8 488B06                  	mov rax, qword [rsi]
 14990 0000B2EB 488902                  	mov qword [rdx], rax
 14991 0000B2EE 488D76F8                	lea rsi, [rsi - 8]
 14992 0000B2F2 4883C2F8                	add rdx, -8
 14993 0000B2F6 4883C1FF                	add rcx, -1
 14994 0000B2FA EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_199e
 14995                                  
 14996                                          	.L_lambda_opt_stack_shrink_loop_exit_199e:
 14997                                  
 14998 0000B2FC 48C70201000000                  	mov qword [rdx], 1 + 0
 14999 0000B303 4883C6F8                	add rsi, -8
 15000 0000B307 4883C2F8                	add rdx, -8
 15001 0000B30B 488B06                  	mov rax, qword [rsi]
 15002 0000B30E 488902                  	mov qword [rdx], rax
 15003 0000B311 4883C2F8                	add rdx, -8
 15004 0000B315 488D76F8                	lea rsi, [rsi - 8]
 15005 0000B319 488B06                  	mov rax, qword [rsi]
 15006 0000B31C 488902                  	mov qword [rdx], rax
 15007 0000B31F 4889D4                  	mov rsp, rdx
 15008                                  	.L_lambda_opt_stack_adjusted_088a:
 15009 0000B322 C8000000                	enter 0, 0
 15010 0000B326 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15011 0000B32A 50                      	push rax
 15012 0000B32B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15013 0000B330 E8996B0000              	call malloc
 15014 0000B335 50                      	push rax
 15015 0000B336 BF08000000              	mov rdi, 8 * 1	; new rib
 15016 0000B33B E88E6B0000              	call malloc
 15017 0000B340 50                      	push rax
 15018 0000B341 BF18000000              	mov rdi, 8 * 3	; extended env
 15019 0000B346 E8836B0000              	call malloc
 15020 0000B34B 488B7D10                	mov rdi, ENV
 15021 0000B34F BE00000000              	mov rsi, 0
 15022 0000B354 BA01000000              	mov rdx, 1
 15023                                  .L_lambda_simple_env_loop_3789:	; ext_env[i + 1] <-- env[i]
 15024 0000B359 4883FE02                	cmp rsi, 2
 15025 0000B35D 7410                    	je .L_lambda_simple_env_end_3789
 15026 0000B35F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15027 0000B363 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15028 0000B367 48FFC6                  	inc rsi
 15029 0000B36A 48FFC2                  	inc rdx
 15030 0000B36D EBEA                    	jmp .L_lambda_simple_env_loop_3789
 15031                                  .L_lambda_simple_env_end_3789:
 15032 0000B36F 5B                      	pop rbx
 15033 0000B370 BE00000000              	mov rsi, 0
 15034                                  .L_lambda_simple_params_loop_3789:	; copy params
 15035 0000B375 4883FE01                	cmp rsi, 1
 15036 0000B379 740E                    	je .L_lambda_simple_params_end_3789
 15037 0000B37B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15038 0000B380 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15039 0000B384 48FFC6                  	inc rsi
 15040 0000B387 EBEC                    	jmp .L_lambda_simple_params_loop_3789
 15041                                  .L_lambda_simple_params_end_3789:
 15042 0000B389 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15043 0000B38C 4889C3                  	mov rbx, rax
 15044 0000B38F 58                      	pop rax
 15045 0000B390 C60005                  	mov byte [rax], T_closure
 15046 0000B393 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15047 0000B397 48C74009[A4B30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3789
 15048 0000B39F E9A4000000              	jmp .L_lambda_simple_end_3789
 15049                                  .L_lambda_simple_code_3789:	; lambda-simple body
 15050 0000B3A4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15051 0000B3AA 740B                    	je .L_lambda_simple_arity_check_ok_3789
 15052 0000B3AC FF742410                	push qword [rsp + 8 * 2]
 15053 0000B3B0 6A01                    	push 1
 15054 0000B3B2 E9D06A0000              	jmp L_error_incorrect_arity_simple
 15055                                  .L_lambda_simple_arity_check_ok_3789:
 15056 0000B3B7 C8000000                	enter 0, 0
 15057 0000B3BB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15058 0000B3BF 50                      	push rax
 15059 0000B3C0 6A01                    	push 1
 15060 0000B3C2 488B0425[88030000]      	mov rax, qword [free_var_113]
 15061                                  	assert_closure(rax)
    42 0000B3CA 803805              <1>  cmp byte [%1], %2
    43 0000B3CD 0F85EF820000        <1>  jne L_error_incorrect_type
 15062 0000B3D3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15063 0000B3D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15064 0000B3D9 50                      	push rax
 15065 0000B3DA 6A01                    	push 1
 15066 0000B3DC 488B0425[C0000000]      	mov rax, qword [free_var_24]
 15067                                  .L_applic_TC_4041:
 15068 0000B3E4 803805                  	cmp byte [rax], T_closure
 15069 0000B3E7 0F85967A0000            	jne L_code_ptr_error
 15070 0000B3ED 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15071 0000B3F1 53                      	push rbx
 15072 0000B3F2 FF7508                  	push qword [rbp + 8]
 15073 0000B3F5 FF7500                  	push qword [rbp]
 15074 0000B3F8 488B4D18                	mov rcx, [rbp + 3 * 8]
 15075 0000B3FC 488B542418              	mov rdx, [rsp + 3 * 8]
 15076 0000B401 488D7204                	lea rsi, [rdx + 4]
 15077 0000B405 4C8D4EFF                	lea r9, [rsi - 1]
 15078 0000B409 488D7903                	lea rdi, [rcx + 3]
 15079 0000B40D 4D31C0                  	xor r8, r8
 15080                                  .L_tc_recycle_frame_loop_4041:
 15081 0000B410 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 15082 0000B414 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 15083 0000B419 49FFC9                  	dec r9
 15084 0000B41C 4D31C0                  	xor r8, r8
 15085 0000B41F 48FFCF                  	dec rdi
 15086 0000B422 48FFCE                  	dec rsi
 15087 0000B425 4883FE00                	cmp rsi, 0
 15088 0000B429 75E5                    	jne .L_tc_recycle_frame_loop_4041
 15089                                  .L_tc_recycle_frame_done_4041:
 15090                                  ;this pop rbp in sot to the right place
 15091 0000B42B 4989C9                  	mov r9, rcx
 15092 0000B42E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 15093 0000B436 4C01CC                  	add rsp, r9
 15094 0000B439 5D                      	pop rbp
 15095 0000B43A 488B4D00                	mov rcx, qword [rbp]
 15096 0000B43E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15097 0000B442 FFE3                    	jmp rbx
 15098 0000B444 C9                      	leave
 15099 0000B445 C21800                  	ret 8 * (2 + 1)
 15100                                  .L_lambda_simple_end_3789:	; new closure is in rax
 15101 0000B448 50                      	push rax
 15102 0000B449 6A02                    	push 2
 15103 0000B44B 488B0425[D8020000]      	mov rax, qword [free_var_91]
 15104                                  	assert_closure(rax)
    42 0000B453 803805              <1>  cmp byte [%1], %2
    43 0000B456 0F8566820000        <1>  jne L_error_incorrect_type
 15105 0000B45C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15106 0000B45F FF5009                  	call SOB_CLOSURE_CODE(rax)
 15107 0000B462 50                      	push rax
 15108 0000B463 488B4510                	mov rax, qword [rbp + 8 * 2]
 15109                                  
 15110 0000B467 488B00                                            	mov rax, qword[rax + 8 * 0]
 15111                                  
 15112 0000B46A 488B00                                            	mov rax, qword[rax + 8 * 0]
 15113 0000B46D 50                      	push rax
 15114 0000B46E 6A02                    	push 2
 15115 0000B470 488B0425[C8020000]      	mov rax, qword [free_var_89]
 15116                                  .L_applic_TC_4042:
 15117 0000B478 803805                  	cmp byte [rax], T_closure
 15118 0000B47B 0F85027A0000            	jne L_code_ptr_error
 15119 0000B481 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15120 0000B485 53                      	push rbx
 15121 0000B486 FF7508                  	push qword [rbp + 8]
 15122 0000B489 FF7500                  	push qword [rbp]
 15123 0000B48C 488B4D18                	mov rcx, [rbp + 3 * 8]
 15124 0000B490 488B542418              	mov rdx, [rsp + 3 * 8]
 15125 0000B495 488D7204                	lea rsi, [rdx + 4]
 15126 0000B499 4C8D4EFF                	lea r9, [rsi - 1]
 15127 0000B49D 488D7903                	lea rdi, [rcx + 3]
 15128 0000B4A1 4D31C0                  	xor r8, r8
 15129                                  .L_tc_recycle_frame_loop_4042:
 15130 0000B4A4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 15131 0000B4A8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 15132 0000B4AD 49FFC9                  	dec r9
 15133 0000B4B0 4D31C0                  	xor r8, r8
 15134 0000B4B3 48FFCF                  	dec rdi
 15135 0000B4B6 48FFCE                  	dec rsi
 15136 0000B4B9 4883FE00                	cmp rsi, 0
 15137 0000B4BD 75E5                    	jne .L_tc_recycle_frame_loop_4042
 15138                                  .L_tc_recycle_frame_done_4042:
 15139                                  ;this pop rbp in sot to the right place
 15140 0000B4BF 4989C9                  	mov r9, rcx
 15141 0000B4C2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 15142 0000B4CA 4C01CC                  	add rsp, r9
 15143 0000B4CD 5D                      	pop rbp
 15144 0000B4CE 488B4D00                	mov rcx, qword [rbp]
 15145 0000B4D2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15146 0000B4D6 FFE3                    	jmp rbx
 15147 0000B4D8 C9                      	leave
 15148 0000B4D9 C21800                  	ret 8 * (2 + 1)
 15149                                  .L_lambda_opt_end_088a:	; new closure is in rax
 15150 0000B4DC C9                      	leave
 15151 0000B4DD C21800                  	ret 8 * (2 + 1)
 15152                                  .L_lambda_simple_end_3788:	; new closure is in rax
 15153 0000B4E0 50                      	push rax
 15154 0000B4E1 6A01                    	push 1
 15155 0000B4E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15156 0000B4E8 E8E1690000              	call malloc
 15157 0000B4ED 50                      	push rax
 15158 0000B4EE BF00000000              	mov rdi, 8 * 0	; new rib
 15159 0000B4F3 E8D6690000              	call malloc
 15160 0000B4F8 50                      	push rax
 15161 0000B4F9 BF08000000              	mov rdi, 8 * 1	; extended env
 15162 0000B4FE E8CB690000              	call malloc
 15163 0000B503 488B7D10                	mov rdi, ENV
 15164 0000B507 BE00000000              	mov rsi, 0
 15165 0000B50C BA01000000              	mov rdx, 1
 15166                                  .L_lambda_simple_env_loop_378a:	; ext_env[i + 1] <-- env[i]
 15167 0000B511 4883FE00                	cmp rsi, 0
 15168 0000B515 7410                    	je .L_lambda_simple_env_end_378a
 15169 0000B517 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15170 0000B51B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15171 0000B51F 48FFC6                  	inc rsi
 15172 0000B522 48FFC2                  	inc rdx
 15173 0000B525 EBEA                    	jmp .L_lambda_simple_env_loop_378a
 15174                                  .L_lambda_simple_env_end_378a:
 15175 0000B527 5B                      	pop rbx
 15176 0000B528 BE00000000              	mov rsi, 0
 15177                                  .L_lambda_simple_params_loop_378a:	; copy params
 15178 0000B52D 4883FE00                	cmp rsi, 0
 15179 0000B531 740E                    	je .L_lambda_simple_params_end_378a
 15180 0000B533 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15181 0000B538 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15182 0000B53C 48FFC6                  	inc rsi
 15183 0000B53F EBEC                    	jmp .L_lambda_simple_params_loop_378a
 15184                                  .L_lambda_simple_params_end_378a:
 15185 0000B541 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15186 0000B544 4889C3                  	mov rbx, rax
 15187 0000B547 58                      	pop rax
 15188 0000B548 C60005                  	mov byte [rax], T_closure
 15189 0000B54B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15190 0000B54F 48C74009[5CB50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_378a
 15191 0000B557 E90B010000              	jmp .L_lambda_simple_end_378a
 15192                                  .L_lambda_simple_code_378a:	; lambda-simple body
 15193 0000B55C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15194 0000B562 740B                    	je .L_lambda_simple_arity_check_ok_378a
 15195 0000B564 FF742410                	push qword [rsp + 8 * 2]
 15196 0000B568 6A01                    	push 1
 15197 0000B56A E918690000              	jmp L_error_incorrect_arity_simple
 15198                                  .L_lambda_simple_arity_check_ok_378a:
 15199 0000B56F C8000000                	enter 0, 0
 15200 0000B573 488B0425[30030000]      	mov rax, qword [free_var_102]
 15201 0000B57B 50                      	push rax
 15202 0000B57C 6A01                    	push 1
 15203 0000B57E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15204                                  	assert_closure(rax)
    42 0000B582 803805              <1>  cmp byte [%1], %2
    43 0000B585 0F8537810000        <1>  jne L_error_incorrect_type
 15205 0000B58B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15206 0000B58E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15207 0000B591 48890425[98030000]      	mov qword [free_var_115], rax
 15208                                  
 15209 0000B599 48B8-                           	mov rax, sob_void
 15209 0000B59B [0000000000000000] 
 15210                                  
 15211 0000B5A3 488B0425[38030000]      	mov rax, qword [free_var_103]
 15212 0000B5AB 50                      	push rax
 15213 0000B5AC 6A01                    	push 1
 15214 0000B5AE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15215                                  	assert_closure(rax)
    42 0000B5B2 803805              <1>  cmp byte [%1], %2
    43 0000B5B5 0F8507810000        <1>  jne L_error_incorrect_type
 15216 0000B5BB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15217 0000B5BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 15218 0000B5C1 48890425[A0030000]      	mov qword [free_var_116], rax
 15219                                  
 15220 0000B5C9 48B8-                           	mov rax, sob_void
 15220 0000B5CB [0000000000000000] 
 15221                                  
 15222 0000B5D3 488B0425[50030000]      	mov rax, qword [free_var_106]
 15223 0000B5DB 50                      	push rax
 15224 0000B5DC 6A01                    	push 1
 15225 0000B5DE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15226                                  	assert_closure(rax)
    42 0000B5E2 803805              <1>  cmp byte [%1], %2
    43 0000B5E5 0F85D7800000        <1>  jne L_error_incorrect_type
 15227 0000B5EB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15228 0000B5EE FF5009                  	call SOB_CLOSURE_CODE(rax)
 15229 0000B5F1 48890425[A8030000]      	mov qword [free_var_117], rax
 15230                                  
 15231 0000B5F9 48B8-                           	mov rax, sob_void
 15231 0000B5FB [0000000000000000] 
 15232                                  
 15233 0000B603 488B0425[40030000]      	mov rax, qword [free_var_104]
 15234 0000B60B 50                      	push rax
 15235 0000B60C 6A01                    	push 1
 15236 0000B60E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15237                                  	assert_closure(rax)
    42 0000B612 803805              <1>  cmp byte [%1], %2
    43 0000B615 0F85A7800000        <1>  jne L_error_incorrect_type
 15238 0000B61B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15239 0000B61E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15240 0000B621 48890425[B0030000]      	mov qword [free_var_118], rax
 15241                                  
 15242 0000B629 48B8-                           	mov rax, sob_void
 15242 0000B62B [0000000000000000] 
 15243                                  
 15244 0000B633 488B0425[48030000]      	mov rax, qword [free_var_105]
 15245 0000B63B 50                      	push rax
 15246 0000B63C 6A01                    	push 1
 15247 0000B63E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15248                                  	assert_closure(rax)
    42 0000B642 803805              <1>  cmp byte [%1], %2
    43 0000B645 0F8577800000        <1>  jne L_error_incorrect_type
 15249 0000B64B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15250 0000B64E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15251 0000B651 48890425[B8030000]      	mov qword [free_var_119], rax
 15252                                  
 15253 0000B659 48B8-                           	mov rax, sob_void
 15253 0000B65B [0000000000000000] 
 15254 0000B663 C9                      	leave
 15255 0000B664 C21800                  	ret 8 * (2 + 1)
 15256                                  .L_lambda_simple_end_378a:	; new closure is in rax
 15257                                  	assert_closure(rax)
    42 0000B667 803805              <1>  cmp byte [%1], %2
    43 0000B66A 0F8552800000        <1>  jne L_error_incorrect_type
 15258 0000B670 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15259 0000B673 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15260                                  
 15261 0000B676 4889C7                  	mov rdi, rax
 15262 0000B679 E861680000              	call print_sexpr_if_not_void
 15263                                  
 15264 0000B67E 48B8-                   	mov rax,L_constants + 0
 15264 0000B680 [0000000000000000] 
 15265 0000B688 48890425[C0030000]      	mov qword [free_var_120], rax
 15266 0000B690 48B8-                   	mov rax, sob_void
 15266 0000B692 [0000000000000000] 
 15267                                  
 15268 0000B69A 4889C7                  	mov rdi, rax
 15269 0000B69D E83D680000              	call print_sexpr_if_not_void
 15270                                  
 15271 0000B6A2 48B8-                   	mov rax,L_constants + 0
 15271 0000B6A4 [0000000000000000] 
 15272 0000B6AC 48890425[C8030000]      	mov qword [free_var_121], rax
 15273 0000B6B4 48B8-                   	mov rax, sob_void
 15273 0000B6B6 [0000000000000000] 
 15274                                  
 15275 0000B6BE 4889C7                  	mov rdi, rax
 15276 0000B6C1 E819680000              	call print_sexpr_if_not_void
 15277                                  
 15278 0000B6C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15279 0000B6CB E8FE670000              	call malloc
 15280 0000B6D0 50                      	push rax
 15281 0000B6D1 BF00000000              	mov rdi, 8 * 0	; new rib
 15282 0000B6D6 E8F3670000              	call malloc
 15283 0000B6DB 50                      	push rax
 15284 0000B6DC BF08000000              	mov rdi, 8 * 1	; extended env
 15285 0000B6E1 E8E8670000              	call malloc
 15286 0000B6E6 488B7D10                	mov rdi, ENV
 15287 0000B6EA BE00000000              	mov rsi, 0
 15288 0000B6EF BA01000000              	mov rdx, 1
 15289                                  .L_lambda_simple_env_loop_378b:	; ext_env[i + 1] <-- env[i]
 15290 0000B6F4 4883FE00                	cmp rsi, 0
 15291 0000B6F8 7410                    	je .L_lambda_simple_env_end_378b
 15292 0000B6FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15293 0000B6FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15294 0000B702 48FFC6                  	inc rsi
 15295 0000B705 48FFC2                  	inc rdx
 15296 0000B708 EBEA                    	jmp .L_lambda_simple_env_loop_378b
 15297                                  .L_lambda_simple_env_end_378b:
 15298 0000B70A 5B                      	pop rbx
 15299 0000B70B BE00000000              	mov rsi, 0
 15300                                  .L_lambda_simple_params_loop_378b:	; copy params
 15301 0000B710 4883FE00                	cmp rsi, 0
 15302 0000B714 740E                    	je .L_lambda_simple_params_end_378b
 15303 0000B716 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15304 0000B71B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15305 0000B71F 48FFC6                  	inc rsi
 15306 0000B722 EBEC                    	jmp .L_lambda_simple_params_loop_378b
 15307                                  .L_lambda_simple_params_end_378b:
 15308 0000B724 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15309 0000B727 4889C3                  	mov rbx, rax
 15310 0000B72A 58                      	pop rax
 15311 0000B72B C60005                  	mov byte [rax], T_closure
 15312 0000B72E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15313 0000B732 48C74009[3FB70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_378b
 15314 0000B73A E95D010000              	jmp .L_lambda_simple_end_378b
 15315                                  .L_lambda_simple_code_378b:	; lambda-simple body
 15316 0000B73F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15317 0000B745 740B                    	je .L_lambda_simple_arity_check_ok_378b
 15318 0000B747 FF742410                	push qword [rsp + 8 * 2]
 15319 0000B74B 6A01                    	push 1
 15320 0000B74D E935670000              	jmp L_error_incorrect_arity_simple
 15321                                  .L_lambda_simple_arity_check_ok_378b:
 15322 0000B752 C8000000                	enter 0, 0
 15323 0000B756 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15324 0000B75B E86E670000              	call malloc
 15325 0000B760 50                      	push rax
 15326 0000B761 BF08000000              	mov rdi, 8 * 1	; new rib
 15327 0000B766 E863670000              	call malloc
 15328 0000B76B 50                      	push rax
 15329 0000B76C BF10000000              	mov rdi, 8 * 2	; extended env
 15330 0000B771 E858670000              	call malloc
 15331 0000B776 488B7D10                	mov rdi, ENV
 15332 0000B77A BE00000000              	mov rsi, 0
 15333 0000B77F BA01000000              	mov rdx, 1
 15334                                  .L_lambda_simple_env_loop_378c:	; ext_env[i + 1] <-- env[i]
 15335 0000B784 4883FE01                	cmp rsi, 1
 15336 0000B788 7410                    	je .L_lambda_simple_env_end_378c
 15337 0000B78A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15338 0000B78E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15339 0000B792 48FFC6                  	inc rsi
 15340 0000B795 48FFC2                  	inc rdx
 15341 0000B798 EBEA                    	jmp .L_lambda_simple_env_loop_378c
 15342                                  .L_lambda_simple_env_end_378c:
 15343 0000B79A 5B                      	pop rbx
 15344 0000B79B BE00000000              	mov rsi, 0
 15345                                  .L_lambda_simple_params_loop_378c:	; copy params
 15346 0000B7A0 4883FE01                	cmp rsi, 1
 15347 0000B7A4 740E                    	je .L_lambda_simple_params_end_378c
 15348 0000B7A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15349 0000B7AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15350 0000B7AF 48FFC6                  	inc rsi
 15351 0000B7B2 EBEC                    	jmp .L_lambda_simple_params_loop_378c
 15352                                  .L_lambda_simple_params_end_378c:
 15353 0000B7B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15354 0000B7B7 4889C3                  	mov rbx, rax
 15355 0000B7BA 58                      	pop rax
 15356 0000B7BB C60005                  	mov byte [rax], T_closure
 15357 0000B7BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15358 0000B7C2 48C74009[CFB70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_378c
 15359 0000B7CA E9C9000000              	jmp .L_lambda_simple_end_378c
 15360                                  .L_lambda_simple_code_378c:	; lambda-simple body
 15361 0000B7CF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15362 0000B7D5 740B                    	je .L_lambda_simple_arity_check_ok_378c
 15363 0000B7D7 FF742410                	push qword [rsp + 8 * 2]
 15364 0000B7DB 6A01                    	push 1
 15365 0000B7DD E9A5660000              	jmp L_error_incorrect_arity_simple
 15366                                  .L_lambda_simple_arity_check_ok_378c:
 15367 0000B7E2 C8000000                	enter 0, 0
 15368 0000B7E6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15369 0000B7EA 50                      	push rax
 15370 0000B7EB 6A01                    	push 1
 15371 0000B7ED 488B0425[D8030000]      	mov rax, qword [free_var_123]
 15372                                  	assert_closure(rax)
    42 0000B7F5 803805              <1>  cmp byte [%1], %2
    43 0000B7F8 0F85C47E0000        <1>  jne L_error_incorrect_type
 15373 0000B7FE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15374 0000B801 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15375 0000B804 50                      	push rax
 15376 0000B805 488B4510                	mov rax, qword [rbp + 8 * 2]
 15377                                  
 15378 0000B809 488B00                                            	mov rax, qword[rax + 8 * 0]
 15379                                  
 15380 0000B80C 488B00                                            	mov rax, qword[rax + 8 * 0]
 15381 0000B80F 50                      	push rax
 15382 0000B810 6A02                    	push 2
 15383 0000B812 488B0425[D8020000]      	mov rax, qword [free_var_91]
 15384                                  	assert_closure(rax)
    42 0000B81A 803805              <1>  cmp byte [%1], %2
    43 0000B81D 0F859F7E0000        <1>  jne L_error_incorrect_type
 15385 0000B823 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15386 0000B826 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15387 0000B829 50                      	push rax
 15388 0000B82A 6A01                    	push 1
 15389 0000B82C 488B0425[D0030000]      	mov rax, qword [free_var_122]
 15390                                  .L_applic_TC_4043:
 15391 0000B834 803805                  	cmp byte [rax], T_closure
 15392 0000B837 0F8546760000            	jne L_code_ptr_error
 15393 0000B83D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15394 0000B841 53                      	push rbx
 15395 0000B842 FF7508                  	push qword [rbp + 8]
 15396 0000B845 FF7500                  	push qword [rbp]
 15397 0000B848 488B4D18                	mov rcx, [rbp + 3 * 8]
 15398 0000B84C 488B542418              	mov rdx, [rsp + 3 * 8]
 15399 0000B851 488D7204                	lea rsi, [rdx + 4]
 15400 0000B855 4C8D4EFF                	lea r9, [rsi - 1]
 15401 0000B859 488D7903                	lea rdi, [rcx + 3]
 15402 0000B85D 4D31C0                  	xor r8, r8
 15403                                  .L_tc_recycle_frame_loop_4043:
 15404 0000B860 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 15405 0000B864 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 15406 0000B869 49FFC9                  	dec r9
 15407 0000B86C 4D31C0                  	xor r8, r8
 15408 0000B86F 48FFCF                  	dec rdi
 15409 0000B872 48FFCE                  	dec rsi
 15410 0000B875 4883FE00                	cmp rsi, 0
 15411 0000B879 75E5                    	jne .L_tc_recycle_frame_loop_4043
 15412                                  .L_tc_recycle_frame_done_4043:
 15413                                  ;this pop rbp in sot to the right place
 15414 0000B87B 4989C9                  	mov r9, rcx
 15415 0000B87E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 15416 0000B886 4C01CC                  	add rsp, r9
 15417 0000B889 5D                      	pop rbp
 15418 0000B88A 488B4D00                	mov rcx, qword [rbp]
 15419 0000B88E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15420 0000B892 FFE3                    	jmp rbx
 15421 0000B894 C9                      	leave
 15422 0000B895 C21800                  	ret 8 * (2 + 1)
 15423                                  .L_lambda_simple_end_378c:	; new closure is in rax
 15424 0000B898 C9                      	leave
 15425 0000B899 C21800                  	ret 8 * (2 + 1)
 15426                                  .L_lambda_simple_end_378b:	; new closure is in rax
 15427 0000B89C 50                      	push rax
 15428 0000B89D 6A01                    	push 1
 15429 0000B89F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15430 0000B8A4 E825660000              	call malloc
 15431 0000B8A9 50                      	push rax
 15432 0000B8AA BF00000000              	mov rdi, 8 * 0	; new rib
 15433 0000B8AF E81A660000              	call malloc
 15434 0000B8B4 50                      	push rax
 15435 0000B8B5 BF08000000              	mov rdi, 8 * 1	; extended env
 15436 0000B8BA E80F660000              	call malloc
 15437 0000B8BF 488B7D10                	mov rdi, ENV
 15438 0000B8C3 BE00000000              	mov rsi, 0
 15439 0000B8C8 BA01000000              	mov rdx, 1
 15440                                  .L_lambda_simple_env_loop_378d:	; ext_env[i + 1] <-- env[i]
 15441 0000B8CD 4883FE00                	cmp rsi, 0
 15442 0000B8D1 7410                    	je .L_lambda_simple_env_end_378d
 15443 0000B8D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15444 0000B8D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15445 0000B8DB 48FFC6                  	inc rsi
 15446 0000B8DE 48FFC2                  	inc rdx
 15447 0000B8E1 EBEA                    	jmp .L_lambda_simple_env_loop_378d
 15448                                  .L_lambda_simple_env_end_378d:
 15449 0000B8E3 5B                      	pop rbx
 15450 0000B8E4 BE00000000              	mov rsi, 0
 15451                                  .L_lambda_simple_params_loop_378d:	; copy params
 15452 0000B8E9 4883FE00                	cmp rsi, 0
 15453 0000B8ED 740E                    	je .L_lambda_simple_params_end_378d
 15454 0000B8EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15455 0000B8F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15456 0000B8F8 48FFC6                  	inc rsi
 15457 0000B8FB EBEC                    	jmp .L_lambda_simple_params_loop_378d
 15458                                  .L_lambda_simple_params_end_378d:
 15459 0000B8FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15460 0000B900 4889C3                  	mov rbx, rax
 15461 0000B903 58                      	pop rax
 15462 0000B904 C60005                  	mov byte [rax], T_closure
 15463 0000B907 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15464 0000B90B 48C74009[15B90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_378d
 15465 0000B913 EB7B                    	jmp .L_lambda_simple_end_378d
 15466                                  .L_lambda_simple_code_378d:	; lambda-simple body
 15467 0000B915 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15468 0000B91B 740B                    	je .L_lambda_simple_arity_check_ok_378d
 15469 0000B91D FF742410                	push qword [rsp + 8 * 2]
 15470 0000B921 6A01                    	push 1
 15471 0000B923 E95F650000              	jmp L_error_incorrect_arity_simple
 15472                                  .L_lambda_simple_arity_check_ok_378d:
 15473 0000B928 C8000000                	enter 0, 0
 15474 0000B92C 488B0425[88030000]      	mov rax, qword [free_var_113]
 15475 0000B934 50                      	push rax
 15476 0000B935 6A01                    	push 1
 15477 0000B937 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15478                                  	assert_closure(rax)
    42 0000B93B 803805              <1>  cmp byte [%1], %2
    43 0000B93E 0F857E7D0000        <1>  jne L_error_incorrect_type
 15479 0000B944 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15480 0000B947 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15481 0000B94A 48890425[C0030000]      	mov qword [free_var_120], rax
 15482                                  
 15483 0000B952 48B8-                           	mov rax, sob_void
 15483 0000B954 [0000000000000000] 
 15484                                  
 15485 0000B95C 488B0425[90030000]      	mov rax, qword [free_var_114]
 15486 0000B964 50                      	push rax
 15487 0000B965 6A01                    	push 1
 15488 0000B967 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15489                                  	assert_closure(rax)
    42 0000B96B 803805              <1>  cmp byte [%1], %2
    43 0000B96E 0F854E7D0000        <1>  jne L_error_incorrect_type
 15490 0000B974 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15491 0000B977 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15492 0000B97A 48890425[C8030000]      	mov qword [free_var_121], rax
 15493                                  
 15494 0000B982 48B8-                           	mov rax, sob_void
 15494 0000B984 [0000000000000000] 
 15495 0000B98C C9                      	leave
 15496 0000B98D C21800                  	ret 8 * (2 + 1)
 15497                                  .L_lambda_simple_end_378d:	; new closure is in rax
 15498                                  	assert_closure(rax)
    42 0000B990 803805              <1>  cmp byte [%1], %2
    43 0000B993 0F85297D0000        <1>  jne L_error_incorrect_type
 15499 0000B999 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15500 0000B99C FF5009                  	call SOB_CLOSURE_CODE(rax)
 15501                                  
 15502 0000B99F 4889C7                  	mov rdi, rax
 15503 0000B9A2 E838650000              	call print_sexpr_if_not_void
 15504                                  
 15505 0000B9A7 48B8-                   	mov rax,L_constants + 0
 15505 0000B9A9 [0000000000000000] 
 15506 0000B9B1 48890425[E0030000]      	mov qword [free_var_124], rax
 15507 0000B9B9 48B8-                   	mov rax, sob_void
 15507 0000B9BB [0000000000000000] 
 15508                                  
 15509 0000B9C3 4889C7                  	mov rdi, rax
 15510 0000B9C6 E814650000              	call print_sexpr_if_not_void
 15511                                  
 15512 0000B9CB 48B8-                   	mov rax,L_constants + 0
 15512 0000B9CD [0000000000000000] 
 15513 0000B9D5 48890425[E8030000]      	mov qword [free_var_125], rax
 15514 0000B9DD 48B8-                   	mov rax, sob_void
 15514 0000B9DF [0000000000000000] 
 15515                                  
 15516 0000B9E7 4889C7                  	mov rdi, rax
 15517 0000B9EA E8F0640000              	call print_sexpr_if_not_void
 15518                                  
 15519 0000B9EF 48B8-                   	mov rax,L_constants + 0
 15519 0000B9F1 [0000000000000000] 
 15520 0000B9F9 48890425[F0030000]      	mov qword [free_var_126], rax
 15521 0000BA01 48B8-                   	mov rax, sob_void
 15521 0000BA03 [0000000000000000] 
 15522                                  
 15523 0000BA0B 4889C7                  	mov rdi, rax
 15524 0000BA0E E8CC640000              	call print_sexpr_if_not_void
 15525                                  
 15526 0000BA13 48B8-                   	mov rax,L_constants + 0
 15526 0000BA15 [0000000000000000] 
 15527 0000BA1D 48890425[F8030000]      	mov qword [free_var_127], rax
 15528 0000BA25 48B8-                   	mov rax, sob_void
 15528 0000BA27 [0000000000000000] 
 15529                                  
 15530 0000BA2F 4889C7                  	mov rdi, rax
 15531 0000BA32 E8A8640000              	call print_sexpr_if_not_void
 15532                                  
 15533 0000BA37 48B8-                   	mov rax,L_constants + 0
 15533 0000BA39 [0000000000000000] 
 15534 0000BA41 48890425[00040000]      	mov qword [free_var_128], rax
 15535 0000BA49 48B8-                   	mov rax, sob_void
 15535 0000BA4B [0000000000000000] 
 15536                                  
 15537 0000BA53 4889C7                  	mov rdi, rax
 15538 0000BA56 E884640000              	call print_sexpr_if_not_void
 15539                                  
 15540 0000BA5B 48B8-                   	mov rax,L_constants + 0
 15540 0000BA5D [0000000000000000] 
 15541 0000BA65 48890425[08040000]      	mov qword [free_var_129], rax
 15542 0000BA6D 48B8-                   	mov rax, sob_void
 15542 0000BA6F [0000000000000000] 
 15543                                  
 15544 0000BA77 4889C7                  	mov rdi, rax
 15545 0000BA7A E860640000              	call print_sexpr_if_not_void
 15546                                  
 15547 0000BA7F 48B8-                   	mov rax,L_constants + 0
 15547 0000BA81 [0000000000000000] 
 15548 0000BA89 48890425[10040000]      	mov qword [free_var_130], rax
 15549 0000BA91 48B8-                   	mov rax, sob_void
 15549 0000BA93 [0000000000000000] 
 15550                                  
 15551 0000BA9B 4889C7                  	mov rdi, rax
 15552 0000BA9E E83C640000              	call print_sexpr_if_not_void
 15553                                  
 15554 0000BAA3 48B8-                   	mov rax,L_constants + 0
 15554 0000BAA5 [0000000000000000] 
 15555 0000BAAD 48890425[18040000]      	mov qword [free_var_131], rax
 15556 0000BAB5 48B8-                   	mov rax, sob_void
 15556 0000BAB7 [0000000000000000] 
 15557                                  
 15558 0000BABF 4889C7                  	mov rdi, rax
 15559 0000BAC2 E818640000              	call print_sexpr_if_not_void
 15560                                  
 15561 0000BAC7 48B8-                   	mov rax,L_constants + 0
 15561 0000BAC9 [0000000000000000] 
 15562 0000BAD1 48890425[20040000]      	mov qword [free_var_132], rax
 15563 0000BAD9 48B8-                   	mov rax, sob_void
 15563 0000BADB [0000000000000000] 
 15564                                  
 15565 0000BAE3 4889C7                  	mov rdi, rax
 15566 0000BAE6 E8F4630000              	call print_sexpr_if_not_void
 15567                                  
 15568 0000BAEB 48B8-                   	mov rax,L_constants + 0
 15568 0000BAED [0000000000000000] 
 15569 0000BAF5 48890425[28040000]      	mov qword [free_var_133], rax
 15570 0000BAFD 48B8-                   	mov rax, sob_void
 15570 0000BAFF [0000000000000000] 
 15571                                  
 15572 0000BB07 4889C7                  	mov rdi, rax
 15573 0000BB0A E8D0630000              	call print_sexpr_if_not_void
 15574                                  
 15575 0000BB0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15576 0000BB14 E8B5630000              	call malloc
 15577 0000BB19 50                      	push rax
 15578 0000BB1A BF00000000              	mov rdi, 8 * 0	; new rib
 15579 0000BB1F E8AA630000              	call malloc
 15580 0000BB24 50                      	push rax
 15581 0000BB25 BF08000000              	mov rdi, 8 * 1	; extended env
 15582 0000BB2A E89F630000              	call malloc
 15583 0000BB2F 488B7D10                	mov rdi, ENV
 15584 0000BB33 BE00000000              	mov rsi, 0
 15585 0000BB38 BA01000000              	mov rdx, 1
 15586                                  .L_lambda_simple_env_loop_378e:	; ext_env[i + 1] <-- env[i]
 15587 0000BB3D 4883FE00                	cmp rsi, 0
 15588 0000BB41 7410                    	je .L_lambda_simple_env_end_378e
 15589 0000BB43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15590 0000BB47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15591 0000BB4B 48FFC6                  	inc rsi
 15592 0000BB4E 48FFC2                  	inc rdx
 15593 0000BB51 EBEA                    	jmp .L_lambda_simple_env_loop_378e
 15594                                  .L_lambda_simple_env_end_378e:
 15595 0000BB53 5B                      	pop rbx
 15596 0000BB54 BE00000000              	mov rsi, 0
 15597                                  .L_lambda_simple_params_loop_378e:	; copy params
 15598 0000BB59 4883FE00                	cmp rsi, 0
 15599 0000BB5D 740E                    	je .L_lambda_simple_params_end_378e
 15600 0000BB5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15601 0000BB64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15602 0000BB68 48FFC6                  	inc rsi
 15603 0000BB6B EBEC                    	jmp .L_lambda_simple_params_loop_378e
 15604                                  .L_lambda_simple_params_end_378e:
 15605 0000BB6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15606 0000BB70 4889C3                  	mov rbx, rax
 15607 0000BB73 58                      	pop rax
 15608 0000BB74 C60005                  	mov byte [rax], T_closure
 15609 0000BB77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15610 0000BB7B 48C74009[88BB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_378e
 15611 0000BB83 E93A0D0000              	jmp .L_lambda_simple_end_378e
 15612                                  .L_lambda_simple_code_378e:	; lambda-simple body
 15613 0000BB88 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15614 0000BB8E 740B                    	je .L_lambda_simple_arity_check_ok_378e
 15615 0000BB90 FF742410                	push qword [rsp + 8 * 2]
 15616 0000BB94 6A02                    	push 2
 15617 0000BB96 E9EC620000              	jmp L_error_incorrect_arity_simple
 15618                                  .L_lambda_simple_arity_check_ok_378e:
 15619 0000BB9B C8000000                	enter 0, 0
 15620 0000BB9F 48B8-                   	mov rax,L_constants + 23
 15620 0000BBA1 [1700000000000000] 
 15621 0000BBA9 50                      	push rax
 15622 0000BBAA 6A01                    	push 1
 15623 0000BBAC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15624 0000BBB1 E818630000              	call malloc
 15625 0000BBB6 50                      	push rax
 15626 0000BBB7 BF10000000              	mov rdi, 8 * 2	; new rib
 15627 0000BBBC E80D630000              	call malloc
 15628 0000BBC1 50                      	push rax
 15629 0000BBC2 BF10000000              	mov rdi, 8 * 2	; extended env
 15630 0000BBC7 E802630000              	call malloc
 15631 0000BBCC 488B7D10                	mov rdi, ENV
 15632 0000BBD0 BE00000000              	mov rsi, 0
 15633 0000BBD5 BA01000000              	mov rdx, 1
 15634                                  .L_lambda_simple_env_loop_378f:	; ext_env[i + 1] <-- env[i]
 15635 0000BBDA 4883FE01                	cmp rsi, 1
 15636 0000BBDE 7410                    	je .L_lambda_simple_env_end_378f
 15637 0000BBE0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15638 0000BBE4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15639 0000BBE8 48FFC6                  	inc rsi
 15640 0000BBEB 48FFC2                  	inc rdx
 15641 0000BBEE EBEA                    	jmp .L_lambda_simple_env_loop_378f
 15642                                  .L_lambda_simple_env_end_378f:
 15643 0000BBF0 5B                      	pop rbx
 15644 0000BBF1 BE00000000              	mov rsi, 0
 15645                                  .L_lambda_simple_params_loop_378f:	; copy params
 15646 0000BBF6 4883FE02                	cmp rsi, 2
 15647 0000BBFA 740E                    	je .L_lambda_simple_params_end_378f
 15648 0000BBFC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15649 0000BC01 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15650 0000BC05 48FFC6                  	inc rsi
 15651 0000BC08 EBEC                    	jmp .L_lambda_simple_params_loop_378f
 15652                                  .L_lambda_simple_params_end_378f:
 15653 0000BC0A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15654 0000BC0D 4889C3                  	mov rbx, rax
 15655 0000BC10 58                      	pop rax
 15656 0000BC11 C60005                  	mov byte [rax], T_closure
 15657 0000BC14 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15658 0000BC18 48C74009[25BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_378f
 15659 0000BC20 E9390C0000              	jmp .L_lambda_simple_end_378f
 15660                                  .L_lambda_simple_code_378f:	; lambda-simple body
 15661 0000BC25 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15662 0000BC2B 740B                    	je .L_lambda_simple_arity_check_ok_378f
 15663 0000BC2D FF742410                	push qword [rsp + 8 * 2]
 15664 0000BC31 6A01                    	push 1
 15665 0000BC33 E94F620000              	jmp L_error_incorrect_arity_simple
 15666                                  .L_lambda_simple_arity_check_ok_378f:
 15667 0000BC38 C8000000                	enter 0, 0
 15668 0000BC3C BF08000000              	mov rdi, 8
 15669 0000BC41 E888620000              	call malloc
 15670 0000BC46 488B5D20                	mov rbx, PARAM(0)
 15671 0000BC4A 488918                  	mov qword [rax], rbx
 15672 0000BC4D 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 15673                                  
 15674 0000BC51 48B8-                            	mov rax, sob_void
 15674 0000BC53 [0000000000000000] 
 15675                                  
 15676 0000BC5B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15677 0000BC60 E869620000              	call malloc
 15678 0000BC65 50                      	push rax
 15679 0000BC66 BF08000000              	mov rdi, 8 * 1	; new rib
 15680 0000BC6B E85E620000              	call malloc
 15681 0000BC70 50                      	push rax
 15682 0000BC71 BF18000000              	mov rdi, 8 * 3	; extended env
 15683 0000BC76 E853620000              	call malloc
 15684 0000BC7B 488B7D10                	mov rdi, ENV
 15685 0000BC7F BE00000000              	mov rsi, 0
 15686 0000BC84 BA01000000              	mov rdx, 1
 15687                                  .L_lambda_simple_env_loop_3790:	; ext_env[i + 1] <-- env[i]
 15688 0000BC89 4883FE02                	cmp rsi, 2
 15689 0000BC8D 7410                    	je .L_lambda_simple_env_end_3790
 15690 0000BC8F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15691 0000BC93 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15692 0000BC97 48FFC6                  	inc rsi
 15693 0000BC9A 48FFC2                  	inc rdx
 15694 0000BC9D EBEA                    	jmp .L_lambda_simple_env_loop_3790
 15695                                  .L_lambda_simple_env_end_3790:
 15696 0000BC9F 5B                      	pop rbx
 15697 0000BCA0 BE00000000              	mov rsi, 0
 15698                                  .L_lambda_simple_params_loop_3790:	; copy params
 15699 0000BCA5 4883FE01                	cmp rsi, 1
 15700 0000BCA9 740E                    	je .L_lambda_simple_params_end_3790
 15701 0000BCAB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15702 0000BCB0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15703 0000BCB4 48FFC6                  	inc rsi
 15704 0000BCB7 EBEC                    	jmp .L_lambda_simple_params_loop_3790
 15705                                  .L_lambda_simple_params_end_3790:
 15706 0000BCB9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15707 0000BCBC 4889C3                  	mov rbx, rax
 15708 0000BCBF 58                      	pop rax
 15709 0000BCC0 C60005                  	mov byte [rax], T_closure
 15710 0000BCC3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15711 0000BCC7 48C74009[D4BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3790
 15712 0000BCCF E956020000              	jmp .L_lambda_simple_end_3790
 15713                                  .L_lambda_simple_code_3790:	; lambda-simple body
 15714 0000BCD4 48837C241005            	cmp qword [rsp + 8 * 2], 5
 15715 0000BCDA 740B                    	je .L_lambda_simple_arity_check_ok_3790
 15716 0000BCDC FF742410                	push qword [rsp + 8 * 2]
 15717 0000BCE0 6A05                    	push 5
 15718 0000BCE2 E9A0610000              	jmp L_error_incorrect_arity_simple
 15719                                  .L_lambda_simple_arity_check_ok_3790:
 15720 0000BCE7 C8000000                	enter 0, 0
 15721 0000BCEB 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 15722 0000BCEF 50                      	push rax
 15723 0000BCF0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15724 0000BCF4 50                      	push rax
 15725 0000BCF5 6A02                    	push 2
 15726 0000BCF7 488B0425[50030000]      	mov rax, qword [free_var_106]
 15727                                  	assert_closure(rax)
    42 0000BCFF 803805              <1>  cmp byte [%1], %2
    43 0000BD02 0F85BA790000        <1>  jne L_error_incorrect_type
 15728 0000BD08 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15729 0000BD0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15730                                  
 15731 0000BD0E 483D[02000000]                  	cmp rax, sob_boolean_false
 15732                                  
 15733 0000BD14 7425                            	je .L_if_else_47fe
 15734 0000BD16 488B4540                	mov rax ,qword[rbp + 8 * (4 + 4)]
 15735 0000BD1A 50                      	push rax
 15736 0000BD1B 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 15737 0000BD1F 50                      	push rax
 15738 0000BD20 6A02                    	push 2
 15739 0000BD22 488B0425[30030000]      	mov rax, qword [free_var_102]
 15740                                  	assert_closure(rax)
    42 0000BD2A 803805              <1>  cmp byte [%1], %2
    43 0000BD2D 0F858F790000        <1>  jne L_error_incorrect_type
 15741 0000BD33 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15742 0000BD36 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15743                                  
 15744 0000BD39 EB0A                            	jmp .L_if_end_47fe
 15745                                  
 15746                                          	.L_if_else_47fe:
 15747 0000BD3B 48B8-                   	mov rax,L_constants + 2
 15747 0000BD3D [0200000000000000] 
 15748                                  
 15749                                          	.L_if_end_47fe:
 15750 0000BD45 483D[02000000]          	cmp rax, sob_boolean_false
 15751 0000BD4B 0F85D5010000            	jne .L_or_end_0428
 15752 0000BD51 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 15753 0000BD55 50                      	push rax
 15754 0000BD56 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15755 0000BD5A 50                      	push rax
 15756 0000BD5B 6A02                    	push 2
 15757 0000BD5D 488B0425[30030000]      	mov rax, qword [free_var_102]
 15758                                  	assert_closure(rax)
    42 0000BD65 803805              <1>  cmp byte [%1], %2
    43 0000BD68 0F8554790000        <1>  jne L_error_incorrect_type
 15759 0000BD6E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15760 0000BD71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15761                                  
 15762 0000BD74 483D[02000000]                  	cmp rax, sob_boolean_false
 15763                                  
 15764 0000BD7A 0F849C010000                    	je .L_if_else_47ff
 15765 0000BD80 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15766 0000BD84 50                      	push rax
 15767 0000BD85 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 15768 0000BD89 50                      	push rax
 15769 0000BD8A 6A02                    	push 2
 15770 0000BD8C 488B0425[78010000]      	mov rax, qword [free_var_47]
 15771                                  	assert_closure(rax)
    42 0000BD94 803805              <1>  cmp byte [%1], %2
    43 0000BD97 0F8525790000        <1>  jne L_error_incorrect_type
 15772 0000BD9D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15773 0000BDA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15774 0000BDA3 50                      	push rax
 15775 0000BDA4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15776 0000BDA8 50                      	push rax
 15777 0000BDA9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 15778 0000BDAD 50                      	push rax
 15779 0000BDAE 6A02                    	push 2
 15780 0000BDB0 488B0425[78010000]      	mov rax, qword [free_var_47]
 15781                                  	assert_closure(rax)
    42 0000BDB8 803805              <1>  cmp byte [%1], %2
    43 0000BDBB 0F8501790000        <1>  jne L_error_incorrect_type
 15782 0000BDC1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15783 0000BDC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15784 0000BDC7 50                      	push rax
 15785 0000BDC8 6A02                    	push 2
 15786 0000BDCA 488B4510                	mov rax, qword [rbp + 8 * 2]
 15787                                  
 15788 0000BDCE 488B4008                                          	mov rax, qword[rax + 8 * 1]
 15789                                  
 15790 0000BDD2 488B00                                            	mov rax, qword[rax + 8 * 0]
 15791                                  	assert_closure(rax)
    42 0000BDD5 803805              <1>  cmp byte [%1], %2
    43 0000BDD8 0F85E4780000        <1>  jne L_error_incorrect_type
 15792 0000BDDE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15793 0000BDE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15794 0000BDE4 483D[02000000]          	cmp rax, sob_boolean_false
 15795 0000BDEA 0F852A010000            	jne .L_or_end_0429
 15796 0000BDF0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15797 0000BDF4 50                      	push rax
 15798 0000BDF5 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 15799 0000BDF9 50                      	push rax
 15800 0000BDFA 6A02                    	push 2
 15801 0000BDFC 488B0425[78010000]      	mov rax, qword [free_var_47]
 15802                                  	assert_closure(rax)
    42 0000BE04 803805              <1>  cmp byte [%1], %2
    43 0000BE07 0F85B5780000        <1>  jne L_error_incorrect_type
 15803 0000BE0D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15804 0000BE10 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15805 0000BE13 50                      	push rax
 15806 0000BE14 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15807 0000BE18 50                      	push rax
 15808 0000BE19 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 15809 0000BE1D 50                      	push rax
 15810 0000BE1E 6A02                    	push 2
 15811 0000BE20 488B0425[78010000]      	mov rax, qword [free_var_47]
 15812                                  	assert_closure(rax)
    42 0000BE28 803805              <1>  cmp byte [%1], %2
    43 0000BE2B 0F8591780000        <1>  jne L_error_incorrect_type
 15813 0000BE31 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15814 0000BE34 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15815 0000BE37 50                      	push rax
 15816 0000BE38 6A02                    	push 2
 15817 0000BE3A 488B4510                	mov rax, qword [rbp + 8 * 2]
 15818                                  
 15819 0000BE3E 488B4008                                          	mov rax, qword[rax + 8 * 1]
 15820                                  
 15821 0000BE42 488B4008                                          	mov rax, qword[rax + 8 * 1]
 15822                                  	assert_closure(rax)
    42 0000BE46 803805              <1>  cmp byte [%1], %2
    43 0000BE49 0F8573780000        <1>  jne L_error_incorrect_type
 15823 0000BE4F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15824 0000BE52 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15825                                  
 15826 0000BE55 483D[02000000]                  	cmp rax, sob_boolean_false
 15827                                  
 15828 0000BE5B 0F84AF000000                    	je .L_if_else_4800
 15829 0000BE61 488B4540                	mov rax ,qword[rbp + 8 * (4 + 4)]
 15830 0000BE65 50                      	push rax
 15831 0000BE66 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 15832 0000BE6A 50                      	push rax
 15833 0000BE6B 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 15834 0000BE6F 50                      	push rax
 15835 0000BE70 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 15836 0000BE74 50                      	push rax
 15837 0000BE75 48B8-                   	mov rax,L_constants + 128
 15837 0000BE77 [8000000000000000] 
 15838 0000BE7F 50                      	push rax
 15839 0000BE80 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15840 0000BE84 50                      	push rax
 15841 0000BE85 6A02                    	push 2
 15842 0000BE87 488B0425[08030000]      	mov rax, qword [free_var_97]
 15843                                  	assert_closure(rax)
    42 0000BE8F 803805              <1>  cmp byte [%1], %2
    43 0000BE92 0F852A780000        <1>  jne L_error_incorrect_type
 15844 0000BE98 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15845 0000BE9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15846 0000BE9E 50                      	push rax
 15847 0000BE9F 6A05                    	push 5
 15848 0000BEA1 488B4510                	mov rax, qword [rbp + 8 * 2]
 15849                                  
 15850 0000BEA5 488B00                                            	mov rax, qword[rax + 8 * 0]
 15851                                  
 15852 0000BEA8 488B00                                            	mov rax, qword[rax + 8 * 0]
 15853 0000BEAB 488B00                  	mov rax, qword [rax]
 15854                                  .L_applic_TC_4044:
 15855 0000BEAE 803805                  	cmp byte [rax], T_closure
 15856 0000BEB1 0F85CC6F0000            	jne L_code_ptr_error
 15857 0000BEB7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15858 0000BEBB 53                      	push rbx
 15859 0000BEBC FF7508                  	push qword [rbp + 8]
 15860 0000BEBF FF7500                  	push qword [rbp]
 15861 0000BEC2 488B4D18                	mov rcx, [rbp + 3 * 8]
 15862 0000BEC6 488B542418              	mov rdx, [rsp + 3 * 8]
 15863 0000BECB 488D7204                	lea rsi, [rdx + 4]
 15864 0000BECF 4C8D4EFF                	lea r9, [rsi - 1]
 15865 0000BED3 488D7903                	lea rdi, [rcx + 3]
 15866 0000BED7 4D31C0                  	xor r8, r8
 15867                                  .L_tc_recycle_frame_loop_4044:
 15868 0000BEDA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 15869 0000BEDE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 15870 0000BEE3 49FFC9                  	dec r9
 15871 0000BEE6 4D31C0                  	xor r8, r8
 15872 0000BEE9 48FFCF                  	dec rdi
 15873 0000BEEC 48FFCE                  	dec rsi
 15874 0000BEEF 4883FE00                	cmp rsi, 0
 15875 0000BEF3 75E5                    	jne .L_tc_recycle_frame_loop_4044
 15876                                  .L_tc_recycle_frame_done_4044:
 15877                                  ;this pop rbp in sot to the right place
 15878 0000BEF5 4989C9                  	mov r9, rcx
 15879 0000BEF8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 15880 0000BF00 4C01CC                  	add rsp, r9
 15881 0000BF03 5D                      	pop rbp
 15882 0000BF04 488B4D00                	mov rcx, qword [rbp]
 15883 0000BF08 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15884 0000BF0C FFE3                    	jmp rbx
 15885                                  
 15886 0000BF0E EB0A                            	jmp .L_if_end_4800
 15887                                  
 15888                                          	.L_if_else_4800:
 15889 0000BF10 48B8-                   	mov rax,L_constants + 2
 15889 0000BF12 [0200000000000000] 
 15890                                  
 15891                                          	.L_if_end_4800:
 15892                                  .L_or_end_0429:
 15893                                  
 15894 0000BF1A EB0A                            	jmp .L_if_end_47ff
 15895                                  
 15896                                          	.L_if_else_47ff:
 15897 0000BF1C 48B8-                   	mov rax,L_constants + 2
 15897 0000BF1E [0200000000000000] 
 15898                                  
 15899                                          	.L_if_end_47ff:
 15900                                  .L_or_end_0428:
 15901 0000BF26 C9                      	leave
 15902 0000BF27 C23800                  	ret 8 * (2 + 5)
 15903                                  .L_lambda_simple_end_3790:	; new closure is in rax
 15904 0000BF2A 50                      	push rax
 15905 0000BF2B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15906 0000BF2F 8F00                    	pop qword [rax]
 15907 0000BF31 48B8-                   	mov rax, sob_void
 15907 0000BF33 [0000000000000000] 
 15908                                  
 15909 0000BF3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15910 0000BF40 E8895F0000              	call malloc
 15911 0000BF45 50                      	push rax
 15912 0000BF46 BF08000000              	mov rdi, 8 * 1	; new rib
 15913 0000BF4B E87E5F0000              	call malloc
 15914 0000BF50 50                      	push rax
 15915 0000BF51 BF18000000              	mov rdi, 8 * 3	; extended env
 15916 0000BF56 E8735F0000              	call malloc
 15917 0000BF5B 488B7D10                	mov rdi, ENV
 15918 0000BF5F BE00000000              	mov rsi, 0
 15919 0000BF64 BA01000000              	mov rdx, 1
 15920                                  .L_lambda_simple_env_loop_3791:	; ext_env[i + 1] <-- env[i]
 15921 0000BF69 4883FE02                	cmp rsi, 2
 15922 0000BF6D 7410                    	je .L_lambda_simple_env_end_3791
 15923 0000BF6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15924 0000BF73 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15925 0000BF77 48FFC6                  	inc rsi
 15926 0000BF7A 48FFC2                  	inc rdx
 15927 0000BF7D EBEA                    	jmp .L_lambda_simple_env_loop_3791
 15928                                  .L_lambda_simple_env_end_3791:
 15929 0000BF7F 5B                      	pop rbx
 15930 0000BF80 BE00000000              	mov rsi, 0
 15931                                  .L_lambda_simple_params_loop_3791:	; copy params
 15932 0000BF85 4883FE01                	cmp rsi, 1
 15933 0000BF89 740E                    	je .L_lambda_simple_params_end_3791
 15934 0000BF8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15935 0000BF90 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15936 0000BF94 48FFC6                  	inc rsi
 15937 0000BF97 EBEC                    	jmp .L_lambda_simple_params_loop_3791
 15938                                  .L_lambda_simple_params_end_3791:
 15939 0000BF99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15940 0000BF9C 4889C3                  	mov rbx, rax
 15941 0000BF9F 58                      	pop rax
 15942 0000BFA0 C60005                  	mov byte [rax], T_closure
 15943 0000BFA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15944 0000BFA7 48C74009[B4BF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3791
 15945 0000BFAF E9BB020000              	jmp .L_lambda_simple_end_3791
 15946                                  .L_lambda_simple_code_3791:	; lambda-simple body
 15947 0000BFB4 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15948 0000BFBA 740B                    	je .L_lambda_simple_arity_check_ok_3791
 15949 0000BFBC FF742410                	push qword [rsp + 8 * 2]
 15950 0000BFC0 6A02                    	push 2
 15951 0000BFC2 E9C05E0000              	jmp L_error_incorrect_arity_simple
 15952                                  .L_lambda_simple_arity_check_ok_3791:
 15953 0000BFC7 C8000000                	enter 0, 0
 15954 0000BFCB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 15955 0000BFCF 50                      	push rax
 15956 0000BFD0 6A01                    	push 1
 15957 0000BFD2 488B0425[90000000]      	mov rax, qword [free_var_18]
 15958                                  	assert_closure(rax)
    42 0000BFDA 803805              <1>  cmp byte [%1], %2
    43 0000BFDD 0F85DF760000        <1>  jne L_error_incorrect_type
 15959 0000BFE3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15960 0000BFE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15961 0000BFE9 50                      	push rax
 15962 0000BFEA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15963 0000BFEE 50                      	push rax
 15964 0000BFEF 6A01                    	push 1
 15965 0000BFF1 488B0425[90000000]      	mov rax, qword [free_var_18]
 15966                                  	assert_closure(rax)
    42 0000BFF9 803805              <1>  cmp byte [%1], %2
    43 0000BFFC 0F85C0760000        <1>  jne L_error_incorrect_type
 15967 0000C002 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15968 0000C005 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15969 0000C008 50                      	push rax
 15970 0000C009 6A02                    	push 2
 15971 0000C00B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15972 0000C010 E8B95E0000              	call malloc
 15973 0000C015 50                      	push rax
 15974 0000C016 BF10000000              	mov rdi, 8 * 2	; new rib
 15975 0000C01B E8AE5E0000              	call malloc
 15976 0000C020 50                      	push rax
 15977 0000C021 BF20000000              	mov rdi, 8 * 4	; extended env
 15978 0000C026 E8A35E0000              	call malloc
 15979 0000C02B 488B7D10                	mov rdi, ENV
 15980 0000C02F BE00000000              	mov rsi, 0
 15981 0000C034 BA01000000              	mov rdx, 1
 15982                                  .L_lambda_simple_env_loop_3792:	; ext_env[i + 1] <-- env[i]
 15983 0000C039 4883FE03                	cmp rsi, 3
 15984 0000C03D 7410                    	je .L_lambda_simple_env_end_3792
 15985 0000C03F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15986 0000C043 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15987 0000C047 48FFC6                  	inc rsi
 15988 0000C04A 48FFC2                  	inc rdx
 15989 0000C04D EBEA                    	jmp .L_lambda_simple_env_loop_3792
 15990                                  .L_lambda_simple_env_end_3792:
 15991 0000C04F 5B                      	pop rbx
 15992 0000C050 BE00000000              	mov rsi, 0
 15993                                  .L_lambda_simple_params_loop_3792:	; copy params
 15994 0000C055 4883FE02                	cmp rsi, 2
 15995 0000C059 740E                    	je .L_lambda_simple_params_end_3792
 15996 0000C05B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15997 0000C060 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15998 0000C064 48FFC6                  	inc rsi
 15999 0000C067 EBEC                    	jmp .L_lambda_simple_params_loop_3792
 16000                                  .L_lambda_simple_params_end_3792:
 16001 0000C069 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16002 0000C06C 4889C3                  	mov rbx, rax
 16003 0000C06F 58                      	pop rax
 16004 0000C070 C60005                  	mov byte [rax], T_closure
 16005 0000C073 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16006 0000C077 48C74009[84C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3792
 16007 0000C07F E987010000              	jmp .L_lambda_simple_end_3792
 16008                                  .L_lambda_simple_code_3792:	; lambda-simple body
 16009 0000C084 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16010 0000C08A 740B                    	je .L_lambda_simple_arity_check_ok_3792
 16011 0000C08C FF742410                	push qword [rsp + 8 * 2]
 16012 0000C090 6A02                    	push 2
 16013 0000C092 E9F05D0000              	jmp L_error_incorrect_arity_simple
 16014                                  .L_lambda_simple_arity_check_ok_3792:
 16015 0000C097 C8000000                	enter 0, 0
 16016 0000C09B 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16017 0000C09F 50                      	push rax
 16018 0000C0A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16019 0000C0A4 50                      	push rax
 16020 0000C0A5 6A02                    	push 2
 16021 0000C0A7 488B0425[38030000]      	mov rax, qword [free_var_103]
 16022                                  	assert_closure(rax)
    42 0000C0AF 803805              <1>  cmp byte [%1], %2
    43 0000C0B2 0F850A760000        <1>  jne L_error_incorrect_type
 16023 0000C0B8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16024 0000C0BB FF5009                  	call SOB_CLOSURE_CODE(rax)
 16025                                  
 16026 0000C0BE 483D[02000000]                  	cmp rax, sob_boolean_false
 16027                                  
 16028 0000C0C4 0F84A1000000                    	je .L_if_else_4801
 16029 0000C0CA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16030 0000C0CE 50                      	push rax
 16031 0000C0CF 488B4510                	mov rax, qword [rbp + 8 * 2]
 16032                                  
 16033 0000C0D3 488B00                                            	mov rax, qword[rax + 8 * 0]
 16034                                  
 16035 0000C0D6 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16036 0000C0DA 50                      	push rax
 16037 0000C0DB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16038 0000C0DF 50                      	push rax
 16039 0000C0E0 488B4510                	mov rax, qword [rbp + 8 * 2]
 16040                                  
 16041 0000C0E4 488B00                                            	mov rax, qword[rax + 8 * 0]
 16042                                  
 16043 0000C0E7 488B00                                            	mov rax, qword[rax + 8 * 0]
 16044 0000C0EA 50                      	push rax
 16045 0000C0EB 48B8-                   	mov rax,L_constants + 32
 16045 0000C0ED [2000000000000000] 
 16046 0000C0F5 50                      	push rax
 16047 0000C0F6 6A05                    	push 5
 16048 0000C0F8 488B4510                	mov rax, qword [rbp + 8 * 2]
 16049                                  
 16050 0000C0FC 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16051                                  
 16052 0000C100 488B00                                            	mov rax, qword[rax + 8 * 0]
 16053 0000C103 488B00                  	mov rax, qword [rax]
 16054                                  .L_applic_TC_4046:
 16055 0000C106 803805                  	cmp byte [rax], T_closure
 16056 0000C109 0F85746D0000            	jne L_code_ptr_error
 16057 0000C10F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16058 0000C113 53                      	push rbx
 16059 0000C114 FF7508                  	push qword [rbp + 8]
 16060 0000C117 FF7500                  	push qword [rbp]
 16061 0000C11A 488B4D18                	mov rcx, [rbp + 3 * 8]
 16062 0000C11E 488B542418              	mov rdx, [rsp + 3 * 8]
 16063 0000C123 488D7204                	lea rsi, [rdx + 4]
 16064 0000C127 4C8D4EFF                	lea r9, [rsi - 1]
 16065 0000C12B 488D7903                	lea rdi, [rcx + 3]
 16066 0000C12F 4D31C0                  	xor r8, r8
 16067                                  .L_tc_recycle_frame_loop_4046:
 16068 0000C132 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16069 0000C136 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16070 0000C13B 49FFC9                  	dec r9
 16071 0000C13E 4D31C0                  	xor r8, r8
 16072 0000C141 48FFCF                  	dec rdi
 16073 0000C144 48FFCE                  	dec rsi
 16074 0000C147 4883FE00                	cmp rsi, 0
 16075 0000C14B 75E5                    	jne .L_tc_recycle_frame_loop_4046
 16076                                  .L_tc_recycle_frame_done_4046:
 16077                                  ;this pop rbp in sot to the right place
 16078 0000C14D 4989C9                  	mov r9, rcx
 16079 0000C150 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16080 0000C158 4C01CC                  	add rsp, r9
 16081 0000C15B 5D                      	pop rbp
 16082 0000C15C 488B4D00                	mov rcx, qword [rbp]
 16083 0000C160 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16084 0000C164 FFE3                    	jmp rbx
 16085                                  
 16086 0000C166 E99C000000                      	jmp .L_if_end_4801
 16087                                  
 16088                                          	.L_if_else_4801:
 16089 0000C16B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16090 0000C16F 50                      	push rax
 16091 0000C170 488B4510                	mov rax, qword [rbp + 8 * 2]
 16092                                  
 16093 0000C174 488B00                                            	mov rax, qword[rax + 8 * 0]
 16094                                  
 16095 0000C177 488B00                                            	mov rax, qword[rax + 8 * 0]
 16096 0000C17A 50                      	push rax
 16097 0000C17B 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16098 0000C17F 50                      	push rax
 16099 0000C180 488B4510                	mov rax, qword [rbp + 8 * 2]
 16100                                  
 16101 0000C184 488B00                                            	mov rax, qword[rax + 8 * 0]
 16102                                  
 16103 0000C187 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16104 0000C18B 50                      	push rax
 16105 0000C18C 48B8-                   	mov rax,L_constants + 32
 16105 0000C18E [2000000000000000] 
 16106 0000C196 50                      	push rax
 16107 0000C197 6A05                    	push 5
 16108 0000C199 488B4510                	mov rax, qword [rbp + 8 * 2]
 16109                                  
 16110 0000C19D 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16111                                  
 16112 0000C1A1 488B00                                            	mov rax, qword[rax + 8 * 0]
 16113 0000C1A4 488B00                  	mov rax, qword [rax]
 16114                                  .L_applic_TC_4045:
 16115 0000C1A7 803805                  	cmp byte [rax], T_closure
 16116 0000C1AA 0F85D36C0000            	jne L_code_ptr_error
 16117 0000C1B0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16118 0000C1B4 53                      	push rbx
 16119 0000C1B5 FF7508                  	push qword [rbp + 8]
 16120 0000C1B8 FF7500                  	push qword [rbp]
 16121 0000C1BB 488B4D18                	mov rcx, [rbp + 3 * 8]
 16122 0000C1BF 488B542418              	mov rdx, [rsp + 3 * 8]
 16123 0000C1C4 488D7204                	lea rsi, [rdx + 4]
 16124 0000C1C8 4C8D4EFF                	lea r9, [rsi - 1]
 16125 0000C1CC 488D7903                	lea rdi, [rcx + 3]
 16126 0000C1D0 4D31C0                  	xor r8, r8
 16127                                  .L_tc_recycle_frame_loop_4045:
 16128 0000C1D3 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16129 0000C1D7 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16130 0000C1DC 49FFC9                  	dec r9
 16131 0000C1DF 4D31C0                  	xor r8, r8
 16132 0000C1E2 48FFCF                  	dec rdi
 16133 0000C1E5 48FFCE                  	dec rsi
 16134 0000C1E8 4883FE00                	cmp rsi, 0
 16135 0000C1EC 75E5                    	jne .L_tc_recycle_frame_loop_4045
 16136                                  .L_tc_recycle_frame_done_4045:
 16137                                  ;this pop rbp in sot to the right place
 16138 0000C1EE 4989C9                  	mov r9, rcx
 16139 0000C1F1 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16140 0000C1F9 4C01CC                  	add rsp, r9
 16141 0000C1FC 5D                      	pop rbp
 16142 0000C1FD 488B4D00                	mov rcx, qword [rbp]
 16143 0000C201 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16144 0000C205 FFE3                    	jmp rbx
 16145                                  
 16146                                          	.L_if_end_4801:
 16147 0000C207 C9                      	leave
 16148 0000C208 C22000                  	ret 8 * (2 + 2)
 16149                                  .L_lambda_simple_end_3792:	; new closure is in rax
 16150                                  .L_applic_TC_4047:
 16151 0000C20B 803805                  	cmp byte [rax], T_closure
 16152 0000C20E 0F856F6C0000            	jne L_code_ptr_error
 16153 0000C214 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16154 0000C218 53                      	push rbx
 16155 0000C219 FF7508                  	push qword [rbp + 8]
 16156 0000C21C FF7500                  	push qword [rbp]
 16157 0000C21F 488B4D18                	mov rcx, [rbp + 3 * 8]
 16158 0000C223 488B542418              	mov rdx, [rsp + 3 * 8]
 16159 0000C228 488D7204                	lea rsi, [rdx + 4]
 16160 0000C22C 4C8D4EFF                	lea r9, [rsi - 1]
 16161 0000C230 488D7903                	lea rdi, [rcx + 3]
 16162 0000C234 4D31C0                  	xor r8, r8
 16163                                  .L_tc_recycle_frame_loop_4047:
 16164 0000C237 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16165 0000C23B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16166 0000C240 49FFC9                  	dec r9
 16167 0000C243 4D31C0                  	xor r8, r8
 16168 0000C246 48FFCF                  	dec rdi
 16169 0000C249 48FFCE                  	dec rsi
 16170 0000C24C 4883FE00                	cmp rsi, 0
 16171 0000C250 75E5                    	jne .L_tc_recycle_frame_loop_4047
 16172                                  .L_tc_recycle_frame_done_4047:
 16173                                  ;this pop rbp in sot to the right place
 16174 0000C252 4989C9                  	mov r9, rcx
 16175 0000C255 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16176 0000C25D 4C01CC                  	add rsp, r9
 16177 0000C260 5D                      	pop rbp
 16178 0000C261 488B4D00                	mov rcx, qword [rbp]
 16179 0000C265 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16180 0000C269 FFE3                    	jmp rbx
 16181 0000C26B C9                      	leave
 16182 0000C26C C22000                  	ret 8 * (2 + 2)
 16183                                  .L_lambda_simple_end_3791:	; new closure is in rax
 16184 0000C26F 50                      	push rax
 16185 0000C270 6A01                    	push 1
 16186 0000C272 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16187 0000C277 E8525C0000              	call malloc
 16188 0000C27C 50                      	push rax
 16189 0000C27D BF08000000              	mov rdi, 8 * 1	; new rib
 16190 0000C282 E8475C0000              	call malloc
 16191 0000C287 50                      	push rax
 16192 0000C288 BF18000000              	mov rdi, 8 * 3	; extended env
 16193 0000C28D E83C5C0000              	call malloc
 16194 0000C292 488B7D10                	mov rdi, ENV
 16195 0000C296 BE00000000              	mov rsi, 0
 16196 0000C29B BA01000000              	mov rdx, 1
 16197                                  .L_lambda_simple_env_loop_3793:	; ext_env[i + 1] <-- env[i]
 16198 0000C2A0 4883FE02                	cmp rsi, 2
 16199 0000C2A4 7410                    	je .L_lambda_simple_env_end_3793
 16200 0000C2A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16201 0000C2AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16202 0000C2AE 48FFC6                  	inc rsi
 16203 0000C2B1 48FFC2                  	inc rdx
 16204 0000C2B4 EBEA                    	jmp .L_lambda_simple_env_loop_3793
 16205                                  .L_lambda_simple_env_end_3793:
 16206 0000C2B6 5B                      	pop rbx
 16207 0000C2B7 BE00000000              	mov rsi, 0
 16208                                  .L_lambda_simple_params_loop_3793:	; copy params
 16209 0000C2BC 4883FE01                	cmp rsi, 1
 16210 0000C2C0 740E                    	je .L_lambda_simple_params_end_3793
 16211 0000C2C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16212 0000C2C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16213 0000C2CB 48FFC6                  	inc rsi
 16214 0000C2CE EBEC                    	jmp .L_lambda_simple_params_loop_3793
 16215                                  .L_lambda_simple_params_end_3793:
 16216 0000C2D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16217 0000C2D3 4889C3                  	mov rbx, rax
 16218 0000C2D6 58                      	pop rax
 16219 0000C2D7 C60005                  	mov byte [rax], T_closure
 16220 0000C2DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16221 0000C2DE 48C74009[EBC20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3793
 16222 0000C2E6 E90F050000              	jmp .L_lambda_simple_end_3793
 16223                                  .L_lambda_simple_code_3793:	; lambda-simple body
 16224 0000C2EB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16225 0000C2F1 740B                    	je .L_lambda_simple_arity_check_ok_3793
 16226 0000C2F3 FF742410                	push qword [rsp + 8 * 2]
 16227 0000C2F7 6A01                    	push 1
 16228 0000C2F9 E9895B0000              	jmp L_error_incorrect_arity_simple
 16229                                  .L_lambda_simple_arity_check_ok_3793:
 16230 0000C2FE C8000000                	enter 0, 0
 16231 0000C302 48B8-                   	mov rax,L_constants + 23
 16231 0000C304 [1700000000000000] 
 16232 0000C30C 50                      	push rax
 16233 0000C30D 6A01                    	push 1
 16234 0000C30F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16235 0000C314 E8B55B0000              	call malloc
 16236 0000C319 50                      	push rax
 16237 0000C31A BF08000000              	mov rdi, 8 * 1	; new rib
 16238 0000C31F E8AA5B0000              	call malloc
 16239 0000C324 50                      	push rax
 16240 0000C325 BF20000000              	mov rdi, 8 * 4	; extended env
 16241 0000C32A E89F5B0000              	call malloc
 16242 0000C32F 488B7D10                	mov rdi, ENV
 16243 0000C333 BE00000000              	mov rsi, 0
 16244 0000C338 BA01000000              	mov rdx, 1
 16245                                  .L_lambda_simple_env_loop_3794:	; ext_env[i + 1] <-- env[i]
 16246 0000C33D 4883FE03                	cmp rsi, 3
 16247 0000C341 7410                    	je .L_lambda_simple_env_end_3794
 16248 0000C343 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16249 0000C347 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16250 0000C34B 48FFC6                  	inc rsi
 16251 0000C34E 48FFC2                  	inc rdx
 16252 0000C351 EBEA                    	jmp .L_lambda_simple_env_loop_3794
 16253                                  .L_lambda_simple_env_end_3794:
 16254 0000C353 5B                      	pop rbx
 16255 0000C354 BE00000000              	mov rsi, 0
 16256                                  .L_lambda_simple_params_loop_3794:	; copy params
 16257 0000C359 4883FE01                	cmp rsi, 1
 16258 0000C35D 740E                    	je .L_lambda_simple_params_end_3794
 16259 0000C35F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16260 0000C364 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16261 0000C368 48FFC6                  	inc rsi
 16262 0000C36B EBEC                    	jmp .L_lambda_simple_params_loop_3794
 16263                                  .L_lambda_simple_params_end_3794:
 16264 0000C36D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16265 0000C370 4889C3                  	mov rbx, rax
 16266 0000C373 58                      	pop rax
 16267 0000C374 C60005                  	mov byte [rax], T_closure
 16268 0000C377 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16269 0000C37B 48C74009[88C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3794
 16270 0000C383 E90E040000              	jmp .L_lambda_simple_end_3794
 16271                                  .L_lambda_simple_code_3794:	; lambda-simple body
 16272 0000C388 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16273 0000C38E 740B                    	je .L_lambda_simple_arity_check_ok_3794
 16274 0000C390 FF742410                	push qword [rsp + 8 * 2]
 16275 0000C394 6A01                    	push 1
 16276 0000C396 E9EC5A0000              	jmp L_error_incorrect_arity_simple
 16277                                  .L_lambda_simple_arity_check_ok_3794:
 16278 0000C39B C8000000                	enter 0, 0
 16279 0000C39F BF08000000              	mov rdi, 8
 16280 0000C3A4 E8255B0000              	call malloc
 16281 0000C3A9 488B5D20                	mov rbx, PARAM(0)
 16282 0000C3AD 488918                  	mov qword [rax], rbx
 16283 0000C3B0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 16284                                  
 16285 0000C3B4 48B8-                            	mov rax, sob_void
 16285 0000C3B6 [0000000000000000] 
 16286                                  
 16287 0000C3BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16288 0000C3C3 E8065B0000              	call malloc
 16289 0000C3C8 50                      	push rax
 16290 0000C3C9 BF08000000              	mov rdi, 8 * 1	; new rib
 16291 0000C3CE E8FB5A0000              	call malloc
 16292 0000C3D3 50                      	push rax
 16293 0000C3D4 BF28000000              	mov rdi, 8 * 5	; extended env
 16294 0000C3D9 E8F05A0000              	call malloc
 16295 0000C3DE 488B7D10                	mov rdi, ENV
 16296 0000C3E2 BE00000000              	mov rsi, 0
 16297 0000C3E7 BA01000000              	mov rdx, 1
 16298                                  .L_lambda_simple_env_loop_3795:	; ext_env[i + 1] <-- env[i]
 16299 0000C3EC 4883FE04                	cmp rsi, 4
 16300 0000C3F0 7410                    	je .L_lambda_simple_env_end_3795
 16301 0000C3F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16302 0000C3F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16303 0000C3FA 48FFC6                  	inc rsi
 16304 0000C3FD 48FFC2                  	inc rdx
 16305 0000C400 EBEA                    	jmp .L_lambda_simple_env_loop_3795
 16306                                  .L_lambda_simple_env_end_3795:
 16307 0000C402 5B                      	pop rbx
 16308 0000C403 BE00000000              	mov rsi, 0
 16309                                  .L_lambda_simple_params_loop_3795:	; copy params
 16310 0000C408 4883FE01                	cmp rsi, 1
 16311 0000C40C 740E                    	je .L_lambda_simple_params_end_3795
 16312 0000C40E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16313 0000C413 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16314 0000C417 48FFC6                  	inc rsi
 16315 0000C41A EBEC                    	jmp .L_lambda_simple_params_loop_3795
 16316                                  .L_lambda_simple_params_end_3795:
 16317 0000C41C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16318 0000C41F 4889C3                  	mov rbx, rax
 16319 0000C422 58                      	pop rax
 16320 0000C423 C60005                  	mov byte [rax], T_closure
 16321 0000C426 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16322 0000C42A 48C74009[37C40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3795
 16323 0000C432 E94A010000              	jmp .L_lambda_simple_end_3795
 16324                                  .L_lambda_simple_code_3795:	; lambda-simple body
 16325 0000C437 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16326 0000C43D 740B                    	je .L_lambda_simple_arity_check_ok_3795
 16327 0000C43F FF742410                	push qword [rsp + 8 * 2]
 16328 0000C443 6A02                    	push 2
 16329 0000C445 E93D5A0000              	jmp L_error_incorrect_arity_simple
 16330                                  .L_lambda_simple_arity_check_ok_3795:
 16331 0000C44A C8000000                	enter 0, 0
 16332 0000C44E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16333 0000C452 50                      	push rax
 16334 0000C453 6A01                    	push 1
 16335 0000C455 488B0425[00000000]      	mov rax, qword [free_var_0]
 16336                                  	assert_closure(rax)
    42 0000C45D 803805              <1>  cmp byte [%1], %2
    43 0000C460 0F855C720000        <1>  jne L_error_incorrect_type
 16337 0000C466 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16338 0000C469 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16339 0000C46C 483D[02000000]          	cmp rax, sob_boolean_false
 16340 0000C472 0F8505010000            	jne .L_or_end_042a
 16341 0000C478 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16342 0000C47C 50                      	push rax
 16343 0000C47D 6A01                    	push 1
 16344 0000C47F 488B0425[80000000]      	mov rax, qword [free_var_16]
 16345                                  	assert_closure(rax)
    42 0000C487 803805              <1>  cmp byte [%1], %2
    43 0000C48A 0F8532720000        <1>  jne L_error_incorrect_type
 16346 0000C490 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16347 0000C493 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16348 0000C496 50                      	push rax
 16349 0000C497 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16350 0000C49B 50                      	push rax
 16351 0000C49C 6A02                    	push 2
 16352 0000C49E 488B4510                	mov rax, qword [rbp + 8 * 2]
 16353                                  
 16354 0000C4A2 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16355                                  
 16356 0000C4A6 488B00                                            	mov rax, qword[rax + 8 * 0]
 16357                                  	assert_closure(rax)
    42 0000C4A9 803805              <1>  cmp byte [%1], %2
    43 0000C4AC 0F8510720000        <1>  jne L_error_incorrect_type
 16358 0000C4B2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16359 0000C4B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16360                                  
 16361 0000C4B8 483D[02000000]                  	cmp rax, sob_boolean_false
 16362                                  
 16363 0000C4BE 0F84AF000000                    	je .L_if_else_4802
 16364 0000C4C4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16365 0000C4C8 50                      	push rax
 16366 0000C4C9 6A01                    	push 1
 16367 0000C4CB 488B0425[88000000]      	mov rax, qword [free_var_17]
 16368                                  	assert_closure(rax)
    42 0000C4D3 803805              <1>  cmp byte [%1], %2
    43 0000C4D6 0F85E6710000        <1>  jne L_error_incorrect_type
 16369 0000C4DC FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16370 0000C4DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 16371 0000C4E2 50                      	push rax
 16372 0000C4E3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16373 0000C4E7 50                      	push rax
 16374 0000C4E8 6A01                    	push 1
 16375 0000C4EA 488B0425[80000000]      	mov rax, qword [free_var_16]
 16376                                  	assert_closure(rax)
    42 0000C4F2 803805              <1>  cmp byte [%1], %2
    43 0000C4F5 0F85C7710000        <1>  jne L_error_incorrect_type
 16377 0000C4FB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16378 0000C4FE FF5009                  	call SOB_CLOSURE_CODE(rax)
 16379 0000C501 50                      	push rax
 16380 0000C502 6A02                    	push 2
 16381 0000C504 488B4510                	mov rax, qword [rbp + 8 * 2]
 16382                                  
 16383 0000C508 488B00                                            	mov rax, qword[rax + 8 * 0]
 16384                                  
 16385 0000C50B 488B00                                            	mov rax, qword[rax + 8 * 0]
 16386 0000C50E 488B00                  	mov rax, qword [rax]
 16387                                  .L_applic_TC_4048:
 16388 0000C511 803805                  	cmp byte [rax], T_closure
 16389 0000C514 0F8569690000            	jne L_code_ptr_error
 16390 0000C51A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16391 0000C51E 53                      	push rbx
 16392 0000C51F FF7508                  	push qword [rbp + 8]
 16393 0000C522 FF7500                  	push qword [rbp]
 16394 0000C525 488B4D18                	mov rcx, [rbp + 3 * 8]
 16395 0000C529 488B542418              	mov rdx, [rsp + 3 * 8]
 16396 0000C52E 488D7204                	lea rsi, [rdx + 4]
 16397 0000C532 4C8D4EFF                	lea r9, [rsi - 1]
 16398 0000C536 488D7903                	lea rdi, [rcx + 3]
 16399 0000C53A 4D31C0                  	xor r8, r8
 16400                                  .L_tc_recycle_frame_loop_4048:
 16401 0000C53D 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16402 0000C541 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16403 0000C546 49FFC9                  	dec r9
 16404 0000C549 4D31C0                  	xor r8, r8
 16405 0000C54C 48FFCF                  	dec rdi
 16406 0000C54F 48FFCE                  	dec rsi
 16407 0000C552 4883FE00                	cmp rsi, 0
 16408 0000C556 75E5                    	jne .L_tc_recycle_frame_loop_4048
 16409                                  .L_tc_recycle_frame_done_4048:
 16410                                  ;this pop rbp in sot to the right place
 16411 0000C558 4989C9                  	mov r9, rcx
 16412 0000C55B 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16413 0000C563 4C01CC                  	add rsp, r9
 16414 0000C566 5D                      	pop rbp
 16415 0000C567 488B4D00                	mov rcx, qword [rbp]
 16416 0000C56B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16417 0000C56F FFE3                    	jmp rbx
 16418                                  
 16419 0000C571 EB0A                            	jmp .L_if_end_4802
 16420                                  
 16421                                          	.L_if_else_4802:
 16422 0000C573 48B8-                   	mov rax,L_constants + 2
 16422 0000C575 [0200000000000000] 
 16423                                  
 16424                                          	.L_if_end_4802:
 16425                                  .L_or_end_042a:
 16426 0000C57D C9                      	leave
 16427 0000C57E C22000                  	ret 8 * (2 + 2)
 16428                                  .L_lambda_simple_end_3795:	; new closure is in rax
 16429 0000C581 50                      	push rax
 16430 0000C582 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16431 0000C586 8F00                    	pop qword [rax]
 16432 0000C588 48B8-                   	mov rax, sob_void
 16432 0000C58A [0000000000000000] 
 16433                                  
 16434 0000C592 BF11000000              	mov rdi, (1 + 8 + 8)
 16435 0000C597 E832590000              	call malloc
 16436 0000C59C 50                      	push rax
 16437 0000C59D BF08000000              	mov rdi, 8 * 1
 16438 0000C5A2 E827590000              	call malloc
 16439 0000C5A7 50                      	push rax
 16440 0000C5A8 BF28000000              	mov rdi, 8 * 5
 16441 0000C5AD E81C590000              	call malloc
 16442 0000C5B2 488B7D10                	mov rdi, ENV
 16443 0000C5B6 4831F6                  	xor rsi, rsi
 16444 0000C5B9 4831D2                  	xor rdx, rdx
 16445 0000C5BC 48FFC2                  	inc rdx
 16446                                  	.L_lambda_opt_env_loop_088b:
 16447                                  
 16448 0000C5BF 4883FE04                        	cmp rsi, 4
 16449                                  
 16450 0000C5C3 7412                            	je .L_lambda_opt_env_end_088b
 16451 0000C5C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16452 0000C5C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16453 0000C5CD 4883C201                	add rdx, 1
 16454 0000C5D1 4883C601                	add rsi, 1
 16455 0000C5D5 EBE8                    	jmp .L_lambda_opt_env_loop_088b
 16456                                  
 16457                                          	.L_lambda_opt_env_end_088b:
 16458 0000C5D7 5B                      	pop rbx
 16459 0000C5D8 4831F6                  	xor rsi, rsi
 16460                                  	.L_lambda_opt_params_loop_088b:
 16461                                  
 16462 0000C5DB 4883FE01                        	cmp rsi, 1
 16463                                  
 16464 0000C5DF 740F                            	je .L_lambda_opt_params_end_088b
 16465 0000C5E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16466 0000C5E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16467 0000C5EA 4883C601                	add rsi, 1
 16468 0000C5EE EBEB                    	jmp .L_lambda_opt_params_loop_088b
 16469                                  
 16470                                          	.L_lambda_opt_params_end_088b:
 16471 0000C5F0 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 16472 0000C5F3 4889C3                  	mov rbx, rax
 16473 0000C5F6 58                      	pop rax
 16474 0000C5F7 C60005                  	mov byte [rax], T_closure
 16475 0000C5FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16476 0000C5FE 48C74009[0BC60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_088b
 16477                                  
 16478 0000C606 E987010000                      	jmp .L_lambda_opt_end_088b
 16479                                  
 16480                                          	.L_lambda_opt_code_088b:
 16481                                  
 16482 0000C60B 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 16483                                  
 16484 0000C611 740D                            	je .L_lambda_opt_arity_check_exact_088b  ;same num_of_args
 16485                                  
 16486 0000C613 7F65                            	jg .L_lambda_opt_arity_check_more_088b  ;greater num_of_args
 16487 0000C615 FF742410                	push qword [rsp + 8 * 2]
 16488 0000C619 6A01                    	push 1
 16489 0000C61B E97B580000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 16490                                  .L_lambda_opt_arity_check_exact_088b:
 16491 0000C620 4883EC08                	sub rsp, 8 * 1
 16492 0000C624 488D7F10                	lea rdi, [rdi + (8 * 2)]
 16493 0000C628 4889E7                  	mov rdi, rsp 
 16494 0000C62B 488B4708                	mov rax, qword [rdi + 8]
 16495 0000C62F 488907                  	mov qword [rdi], rax
 16496 0000C632 488D7F08                	lea rdi, [rdi + 8]
 16497 0000C636 488B4708                	mov rax, qword [rdi + 8]
 16498 0000C63A 488907                  	mov qword [rdi], rax
 16499 0000C63D 488D7F08                	lea rdi, [rdi + 8]
 16500 0000C641 488B4708                	mov rax, qword [rdi + 8]
 16501 0000C645 4889C1                  	mov rcx, rax
 16502 0000C648 4883C001                	add rax, 1
 16503 0000C64C 488907                  	mov qword [rdi], rax
 16504 0000C64F 488D7F08                	lea rdi, [rdi + 8]
 16505                                  	.L_lambda_opt_stack_shrink_loop_199f:
 16506 0000C653 4883F900                	cmp rcx, 0
 16507 0000C657 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_199f
 16508 0000C659 4883E901                	sub rcx, 1
 16509 0000C65D 488D4010                	lea rax, [rax + (8 * 2)]
 16510 0000C661 488B4708                	mov rax, qword [rdi + 8]
 16511 0000C665 488907                  	mov qword [rdi], rax
 16512 0000C668 488D7F08                	lea rdi, [rdi + 8]
 16513 0000C66C EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_199f
 16514                                  
 16515                                          	.L_lambda_opt_stack_shrink_loop_exit_199f:
 16516 0000C66E 48C707[01000000]        	mov qword [rdi], sob_nil
 16517 0000C675 E997000000              	jmp .L_lambda_opt_stack_adjusted_088b
 16518                                  
 16519                                          	.L_lambda_opt_arity_check_more_088b:
 16520 0000C67A 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 16521 0000C67F 488D4EFF                	lea rcx, [rsi - 1]
 16522 0000C683 49B8-                   	mov r8, sob_nil
 16522 0000C685 [0100000000000000] 
 16523 0000C68D 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 16524 0000C692 4889F2                  	mov rdx, rsi
 16525                                  	.L_lambda_opt_stack_shrink_loop_19a0:
 16526 0000C695 4883F900                	cmp rcx, 0
 16527 0000C699 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_19a0
 16528 0000C69B BF11000000              	mov rdi, 1 + (8 * 2)
 16529 0000C6A0 E829580000              	call malloc
 16530 0000C6A5 C60021                  	mov byte [rax], T_pair
 16531 0000C6A8 488B1E                  	mov rbx, qword [rsi]
 16532 0000C6AB 48895801                	mov SOB_PAIR_CAR(rax), rbx
 16533 0000C6AF 4C894009                	mov SOB_PAIR_CDR(rax), r8
 16534 0000C6B3 4883C6F8                	add rsi, -8
 16535 0000C6B7 4883E901                	sub rcx, 1
 16536 0000C6BB 4989C0                  	mov r8, rax
 16537 0000C6BE EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_19a0
 16538                                  
 16539                                          	.L_lambda_opt_stack_shrink_loop_exit_19a0:
 16540 0000C6C0 4C8902                  	mov qword [rdx], r8
 16541 0000C6C3 4883EA08                	sub rdx, 8 * 1
 16542 0000C6C7 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 16543                                  
 16544 0000C6CC B901000000                      	mov rcx, 1 
 16545                                  
 16546                                          	.L_lambda_opt_stack_shrink_loop_19a1:
 16547 0000C6D1 4883F900                	cmp rcx, 0
 16548 0000C6D5 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_19a1
 16549 0000C6D7 488B06                  	mov rax, qword [rsi]
 16550 0000C6DA 488902                  	mov qword [rdx], rax
 16551 0000C6DD 488D76F8                	lea rsi, [rsi - 8]
 16552 0000C6E1 4883C2F8                	add rdx, -8
 16553 0000C6E5 4883C1FF                	add rcx, -1
 16554 0000C6E9 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_19a1
 16555                                  
 16556                                          	.L_lambda_opt_stack_shrink_loop_exit_19a1:
 16557                                  
 16558 0000C6EB 48C70202000000                  	mov qword [rdx], 1 + 1
 16559 0000C6F2 4883C6F8                	add rsi, -8
 16560 0000C6F6 4883C2F8                	add rdx, -8
 16561 0000C6FA 488B06                  	mov rax, qword [rsi]
 16562 0000C6FD 488902                  	mov qword [rdx], rax
 16563 0000C700 4883C2F8                	add rdx, -8
 16564 0000C704 488D76F8                	lea rsi, [rsi - 8]
 16565 0000C708 488B06                  	mov rax, qword [rsi]
 16566 0000C70B 488902                  	mov qword [rdx], rax
 16567 0000C70E 4889D4                  	mov rsp, rdx
 16568                                  	.L_lambda_opt_stack_adjusted_088b:
 16569 0000C711 C8000000                	enter 0, 0
 16570 0000C715 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16571 0000C719 50                      	push rax
 16572 0000C71A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16573 0000C71E 50                      	push rax
 16574 0000C71F 6A02                    	push 2
 16575 0000C721 488B4510                	mov rax, qword [rbp + 8 * 2]
 16576                                  
 16577 0000C725 488B00                                            	mov rax, qword[rax + 8 * 0]
 16578                                  
 16579 0000C728 488B00                                            	mov rax, qword[rax + 8 * 0]
 16580 0000C72B 488B00                  	mov rax, qword [rax]
 16581                                  .L_applic_TC_4049:
 16582 0000C72E 803805                  	cmp byte [rax], T_closure
 16583 0000C731 0F854C670000            	jne L_code_ptr_error
 16584 0000C737 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16585 0000C73B 53                      	push rbx
 16586 0000C73C FF7508                  	push qword [rbp + 8]
 16587 0000C73F FF7500                  	push qword [rbp]
 16588 0000C742 488B4D18                	mov rcx, [rbp + 3 * 8]
 16589 0000C746 488B542418              	mov rdx, [rsp + 3 * 8]
 16590 0000C74B 488D7204                	lea rsi, [rdx + 4]
 16591 0000C74F 4C8D4EFF                	lea r9, [rsi - 1]
 16592 0000C753 488D7903                	lea rdi, [rcx + 3]
 16593 0000C757 4D31C0                  	xor r8, r8
 16594                                  .L_tc_recycle_frame_loop_4049:
 16595 0000C75A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16596 0000C75E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16597 0000C763 49FFC9                  	dec r9
 16598 0000C766 4D31C0                  	xor r8, r8
 16599 0000C769 48FFCF                  	dec rdi
 16600 0000C76C 48FFCE                  	dec rsi
 16601 0000C76F 4883FE00                	cmp rsi, 0
 16602 0000C773 75E5                    	jne .L_tc_recycle_frame_loop_4049
 16603                                  .L_tc_recycle_frame_done_4049:
 16604                                  ;this pop rbp in sot to the right place
 16605 0000C775 4989C9                  	mov r9, rcx
 16606 0000C778 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16607 0000C780 4C01CC                  	add rsp, r9
 16608 0000C783 5D                      	pop rbp
 16609 0000C784 488B4D00                	mov rcx, qword [rbp]
 16610 0000C788 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16611 0000C78C FFE3                    	jmp rbx
 16612 0000C78E C9                      	leave
 16613 0000C78F C22000                  	ret 8 * (2 + 2)
 16614                                  .L_lambda_opt_end_088b:	; new closure is in rax
 16615 0000C792 C9                      	leave
 16616 0000C793 C21800                  	ret 8 * (2 + 1)
 16617                                  .L_lambda_simple_end_3794:	; new closure is in rax
 16618                                  .L_applic_TC_404a:
 16619 0000C796 803805                  	cmp byte [rax], T_closure
 16620 0000C799 0F85E4660000            	jne L_code_ptr_error
 16621 0000C79F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16622 0000C7A3 53                      	push rbx
 16623 0000C7A4 FF7508                  	push qword [rbp + 8]
 16624 0000C7A7 FF7500                  	push qword [rbp]
 16625 0000C7AA 488B4D18                	mov rcx, [rbp + 3 * 8]
 16626 0000C7AE 488B542418              	mov rdx, [rsp + 3 * 8]
 16627 0000C7B3 488D7204                	lea rsi, [rdx + 4]
 16628 0000C7B7 4C8D4EFF                	lea r9, [rsi - 1]
 16629 0000C7BB 488D7903                	lea rdi, [rcx + 3]
 16630 0000C7BF 4D31C0                  	xor r8, r8
 16631                                  .L_tc_recycle_frame_loop_404a:
 16632 0000C7C2 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16633 0000C7C6 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16634 0000C7CB 49FFC9                  	dec r9
 16635 0000C7CE 4D31C0                  	xor r8, r8
 16636 0000C7D1 48FFCF                  	dec rdi
 16637 0000C7D4 48FFCE                  	dec rsi
 16638 0000C7D7 4883FE00                	cmp rsi, 0
 16639 0000C7DB 75E5                    	jne .L_tc_recycle_frame_loop_404a
 16640                                  .L_tc_recycle_frame_done_404a:
 16641                                  ;this pop rbp in sot to the right place
 16642 0000C7DD 4989C9                  	mov r9, rcx
 16643 0000C7E0 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16644 0000C7E8 4C01CC                  	add rsp, r9
 16645 0000C7EB 5D                      	pop rbp
 16646 0000C7EC 488B4D00                	mov rcx, qword [rbp]
 16647 0000C7F0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16648 0000C7F4 FFE3                    	jmp rbx
 16649 0000C7F6 C9                      	leave
 16650 0000C7F7 C21800                  	ret 8 * (2 + 1)
 16651                                  .L_lambda_simple_end_3793:	; new closure is in rax
 16652                                  .L_applic_TC_404b:
 16653 0000C7FA 803805                  	cmp byte [rax], T_closure
 16654 0000C7FD 0F8580660000            	jne L_code_ptr_error
 16655 0000C803 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16656 0000C807 53                      	push rbx
 16657 0000C808 FF7508                  	push qword [rbp + 8]
 16658 0000C80B FF7500                  	push qword [rbp]
 16659 0000C80E 488B4D18                	mov rcx, [rbp + 3 * 8]
 16660 0000C812 488B542418              	mov rdx, [rsp + 3 * 8]
 16661 0000C817 488D7204                	lea rsi, [rdx + 4]
 16662 0000C81B 4C8D4EFF                	lea r9, [rsi - 1]
 16663 0000C81F 488D7903                	lea rdi, [rcx + 3]
 16664 0000C823 4D31C0                  	xor r8, r8
 16665                                  .L_tc_recycle_frame_loop_404b:
 16666 0000C826 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16667 0000C82A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16668 0000C82F 49FFC9                  	dec r9
 16669 0000C832 4D31C0                  	xor r8, r8
 16670 0000C835 48FFCF                  	dec rdi
 16671 0000C838 48FFCE                  	dec rsi
 16672 0000C83B 4883FE00                	cmp rsi, 0
 16673 0000C83F 75E5                    	jne .L_tc_recycle_frame_loop_404b
 16674                                  .L_tc_recycle_frame_done_404b:
 16675                                  ;this pop rbp in sot to the right place
 16676 0000C841 4989C9                  	mov r9, rcx
 16677 0000C844 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16678 0000C84C 4C01CC                  	add rsp, r9
 16679 0000C84F 5D                      	pop rbp
 16680 0000C850 488B4D00                	mov rcx, qword [rbp]
 16681 0000C854 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16682 0000C858 FFE3                    	jmp rbx
 16683 0000C85A C9                      	leave
 16684 0000C85B C21800                  	ret 8 * (2 + 1)
 16685                                  .L_lambda_simple_end_378f:	; new closure is in rax
 16686                                  .L_applic_TC_404c:
 16687 0000C85E 803805                  	cmp byte [rax], T_closure
 16688 0000C861 0F851C660000            	jne L_code_ptr_error
 16689 0000C867 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16690 0000C86B 53                      	push rbx
 16691 0000C86C FF7508                  	push qword [rbp + 8]
 16692 0000C86F FF7500                  	push qword [rbp]
 16693 0000C872 488B4D18                	mov rcx, [rbp + 3 * 8]
 16694 0000C876 488B542418              	mov rdx, [rsp + 3 * 8]
 16695 0000C87B 488D7204                	lea rsi, [rdx + 4]
 16696 0000C87F 4C8D4EFF                	lea r9, [rsi - 1]
 16697 0000C883 488D7903                	lea rdi, [rcx + 3]
 16698 0000C887 4D31C0                  	xor r8, r8
 16699                                  .L_tc_recycle_frame_loop_404c:
 16700 0000C88A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16701 0000C88E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16702 0000C893 49FFC9                  	dec r9
 16703 0000C896 4D31C0                  	xor r8, r8
 16704 0000C899 48FFCF                  	dec rdi
 16705 0000C89C 48FFCE                  	dec rsi
 16706 0000C89F 4883FE00                	cmp rsi, 0
 16707 0000C8A3 75E5                    	jne .L_tc_recycle_frame_loop_404c
 16708                                  .L_tc_recycle_frame_done_404c:
 16709                                  ;this pop rbp in sot to the right place
 16710 0000C8A5 4989C9                  	mov r9, rcx
 16711 0000C8A8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16712 0000C8B0 4C01CC                  	add rsp, r9
 16713 0000C8B3 5D                      	pop rbp
 16714 0000C8B4 488B4D00                	mov rcx, qword [rbp]
 16715 0000C8B8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16716 0000C8BC FFE3                    	jmp rbx
 16717 0000C8BE C9                      	leave
 16718 0000C8BF C22000                  	ret 8 * (2 + 2)
 16719                                  .L_lambda_simple_end_378e:	; new closure is in rax
 16720 0000C8C2 50                      	push rax
 16721 0000C8C3 6A01                    	push 1
 16722 0000C8C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16723 0000C8CA E8FF550000              	call malloc
 16724 0000C8CF 50                      	push rax
 16725 0000C8D0 BF00000000              	mov rdi, 8 * 0	; new rib
 16726 0000C8D5 E8F4550000              	call malloc
 16727 0000C8DA 50                      	push rax
 16728 0000C8DB BF08000000              	mov rdi, 8 * 1	; extended env
 16729 0000C8E0 E8E9550000              	call malloc
 16730 0000C8E5 488B7D10                	mov rdi, ENV
 16731 0000C8E9 BE00000000              	mov rsi, 0
 16732 0000C8EE BA01000000              	mov rdx, 1
 16733                                  .L_lambda_simple_env_loop_3796:	; ext_env[i + 1] <-- env[i]
 16734 0000C8F3 4883FE00                	cmp rsi, 0
 16735 0000C8F7 7410                    	je .L_lambda_simple_env_end_3796
 16736 0000C8F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16737 0000C8FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16738 0000C901 48FFC6                  	inc rsi
 16739 0000C904 48FFC2                  	inc rdx
 16740 0000C907 EBEA                    	jmp .L_lambda_simple_env_loop_3796
 16741                                  .L_lambda_simple_env_end_3796:
 16742 0000C909 5B                      	pop rbx
 16743 0000C90A BE00000000              	mov rsi, 0
 16744                                  .L_lambda_simple_params_loop_3796:	; copy params
 16745 0000C90F 4883FE00                	cmp rsi, 0
 16746 0000C913 740E                    	je .L_lambda_simple_params_end_3796
 16747 0000C915 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16748 0000C91A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16749 0000C91E 48FFC6                  	inc rsi
 16750 0000C921 EBEC                    	jmp .L_lambda_simple_params_loop_3796
 16751                                  .L_lambda_simple_params_end_3796:
 16752 0000C923 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16753 0000C926 4889C3                  	mov rbx, rax
 16754 0000C929 58                      	pop rax
 16755 0000C92A C60005                  	mov byte [rax], T_closure
 16756 0000C92D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16757 0000C931 48C74009[3EC90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3796
 16758 0000C939 E9FF000000              	jmp .L_lambda_simple_end_3796
 16759                                  .L_lambda_simple_code_3796:	; lambda-simple body
 16760 0000C93E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16761 0000C944 740B                    	je .L_lambda_simple_arity_check_ok_3796
 16762 0000C946 FF742410                	push qword [rsp + 8 * 2]
 16763 0000C94A 6A01                    	push 1
 16764 0000C94C E936550000              	jmp L_error_incorrect_arity_simple
 16765                                  .L_lambda_simple_arity_check_ok_3796:
 16766 0000C951 C8000000                	enter 0, 0
 16767 0000C955 488B0425[70030000]      	mov rax, qword [free_var_110]
 16768 0000C95D 50                      	push rax
 16769 0000C95E 488B0425[60030000]      	mov rax, qword [free_var_108]
 16770 0000C966 50                      	push rax
 16771 0000C967 6A02                    	push 2
 16772 0000C969 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16773                                  	assert_closure(rax)
    42 0000C96D 803805              <1>  cmp byte [%1], %2
    43 0000C970 0F854C6D0000        <1>  jne L_error_incorrect_type
 16774 0000C976 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16775 0000C979 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16776 0000C97C 48890425[E0030000]      	mov qword [free_var_124], rax
 16777                                  
 16778 0000C984 48B8-                           	mov rax, sob_void
 16778 0000C986 [0000000000000000] 
 16779                                  
 16780 0000C98E 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16781 0000C996 50                      	push rax
 16782 0000C997 488B0425[98030000]      	mov rax, qword [free_var_115]
 16783 0000C99F 50                      	push rax
 16784 0000C9A0 6A02                    	push 2
 16785 0000C9A2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16786                                  	assert_closure(rax)
    42 0000C9A6 803805              <1>  cmp byte [%1], %2
    43 0000C9A9 0F85136D0000        <1>  jne L_error_incorrect_type
 16787 0000C9AF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16788 0000C9B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16789 0000C9B5 48890425[08040000]      	mov qword [free_var_129], rax
 16790                                  
 16791 0000C9BD 48B8-                           	mov rax, sob_void
 16791 0000C9BF [0000000000000000] 
 16792                                  
 16793 0000C9C7 488B0425[70030000]      	mov rax, qword [free_var_110]
 16794 0000C9CF 50                      	push rax
 16795 0000C9D0 488B0425[78030000]      	mov rax, qword [free_var_111]
 16796 0000C9D8 50                      	push rax
 16797 0000C9D9 6A02                    	push 2
 16798 0000C9DB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16799                                  	assert_closure(rax)
    42 0000C9DF 803805              <1>  cmp byte [%1], %2
    43 0000C9E2 0F85DA6C0000        <1>  jne L_error_incorrect_type
 16800 0000C9E8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16801 0000C9EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 16802 0000C9EE 48890425[00040000]      	mov qword [free_var_128], rax
 16803                                  
 16804 0000C9F6 48B8-                           	mov rax, sob_void
 16804 0000C9F8 [0000000000000000] 
 16805                                  
 16806 0000CA00 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16807 0000CA08 50                      	push rax
 16808 0000CA09 488B0425[B0030000]      	mov rax, qword [free_var_118]
 16809 0000CA11 50                      	push rax
 16810 0000CA12 6A02                    	push 2
 16811 0000CA14 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16812                                  	assert_closure(rax)
    42 0000CA18 803805              <1>  cmp byte [%1], %2
    43 0000CA1B 0F85A16C0000        <1>  jne L_error_incorrect_type
 16813 0000CA21 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16814 0000CA24 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16815 0000CA27 48890425[28040000]      	mov qword [free_var_133], rax
 16816                                  
 16817 0000CA2F 48B8-                           	mov rax, sob_void
 16817 0000CA31 [0000000000000000] 
 16818 0000CA39 C9                      	leave
 16819 0000CA3A C21800                  	ret 8 * (2 + 1)
 16820                                  .L_lambda_simple_end_3796:	; new closure is in rax
 16821                                  	assert_closure(rax)
    42 0000CA3D 803805              <1>  cmp byte [%1], %2
    43 0000CA40 0F857C6C0000        <1>  jne L_error_incorrect_type
 16822 0000CA46 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16823 0000CA49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16824                                  
 16825 0000CA4C 4889C7                  	mov rdi, rax
 16826 0000CA4F E88B540000              	call print_sexpr_if_not_void
 16827                                  
 16828 0000CA54 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16829 0000CA59 E870540000              	call malloc
 16830 0000CA5E 50                      	push rax
 16831 0000CA5F BF00000000              	mov rdi, 8 * 0	; new rib
 16832 0000CA64 E865540000              	call malloc
 16833 0000CA69 50                      	push rax
 16834 0000CA6A BF08000000              	mov rdi, 8 * 1	; extended env
 16835 0000CA6F E85A540000              	call malloc
 16836 0000CA74 488B7D10                	mov rdi, ENV
 16837 0000CA78 BE00000000              	mov rsi, 0
 16838 0000CA7D BA01000000              	mov rdx, 1
 16839                                  .L_lambda_simple_env_loop_3797:	; ext_env[i + 1] <-- env[i]
 16840 0000CA82 4883FE00                	cmp rsi, 0
 16841 0000CA86 7410                    	je .L_lambda_simple_env_end_3797
 16842 0000CA88 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16843 0000CA8C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16844 0000CA90 48FFC6                  	inc rsi
 16845 0000CA93 48FFC2                  	inc rdx
 16846 0000CA96 EBEA                    	jmp .L_lambda_simple_env_loop_3797
 16847                                  .L_lambda_simple_env_end_3797:
 16848 0000CA98 5B                      	pop rbx
 16849 0000CA99 BE00000000              	mov rsi, 0
 16850                                  .L_lambda_simple_params_loop_3797:	; copy params
 16851 0000CA9E 4883FE00                	cmp rsi, 0
 16852 0000CAA2 740E                    	je .L_lambda_simple_params_end_3797
 16853 0000CAA4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16854 0000CAA9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16855 0000CAAD 48FFC6                  	inc rsi
 16856 0000CAB0 EBEC                    	jmp .L_lambda_simple_params_loop_3797
 16857                                  .L_lambda_simple_params_end_3797:
 16858 0000CAB2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16859 0000CAB5 4889C3                  	mov rbx, rax
 16860 0000CAB8 58                      	pop rax
 16861 0000CAB9 C60005                  	mov byte [rax], T_closure
 16862 0000CABC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16863 0000CAC0 48C74009[CDCA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3797
 16864 0000CAC8 E9030D0000              	jmp .L_lambda_simple_end_3797
 16865                                  .L_lambda_simple_code_3797:	; lambda-simple body
 16866 0000CACD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16867 0000CAD3 740B                    	je .L_lambda_simple_arity_check_ok_3797
 16868 0000CAD5 FF742410                	push qword [rsp + 8 * 2]
 16869 0000CAD9 6A02                    	push 2
 16870 0000CADB E9A7530000              	jmp L_error_incorrect_arity_simple
 16871                                  .L_lambda_simple_arity_check_ok_3797:
 16872 0000CAE0 C8000000                	enter 0, 0
 16873 0000CAE4 48B8-                   	mov rax,L_constants + 23
 16873 0000CAE6 [1700000000000000] 
 16874 0000CAEE 50                      	push rax
 16875 0000CAEF 6A01                    	push 1
 16876 0000CAF1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16877 0000CAF6 E8D3530000              	call malloc
 16878 0000CAFB 50                      	push rax
 16879 0000CAFC BF10000000              	mov rdi, 8 * 2	; new rib
 16880 0000CB01 E8C8530000              	call malloc
 16881 0000CB06 50                      	push rax
 16882 0000CB07 BF10000000              	mov rdi, 8 * 2	; extended env
 16883 0000CB0C E8BD530000              	call malloc
 16884 0000CB11 488B7D10                	mov rdi, ENV
 16885 0000CB15 BE00000000              	mov rsi, 0
 16886 0000CB1A BA01000000              	mov rdx, 1
 16887                                  .L_lambda_simple_env_loop_3798:	; ext_env[i + 1] <-- env[i]
 16888 0000CB1F 4883FE01                	cmp rsi, 1
 16889 0000CB23 7410                    	je .L_lambda_simple_env_end_3798
 16890 0000CB25 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16891 0000CB29 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16892 0000CB2D 48FFC6                  	inc rsi
 16893 0000CB30 48FFC2                  	inc rdx
 16894 0000CB33 EBEA                    	jmp .L_lambda_simple_env_loop_3798
 16895                                  .L_lambda_simple_env_end_3798:
 16896 0000CB35 5B                      	pop rbx
 16897 0000CB36 BE00000000              	mov rsi, 0
 16898                                  .L_lambda_simple_params_loop_3798:	; copy params
 16899 0000CB3B 4883FE02                	cmp rsi, 2
 16900 0000CB3F 740E                    	je .L_lambda_simple_params_end_3798
 16901 0000CB41 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16902 0000CB46 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16903 0000CB4A 48FFC6                  	inc rsi
 16904 0000CB4D EBEC                    	jmp .L_lambda_simple_params_loop_3798
 16905                                  .L_lambda_simple_params_end_3798:
 16906 0000CB4F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16907 0000CB52 4889C3                  	mov rbx, rax
 16908 0000CB55 58                      	pop rax
 16909 0000CB56 C60005                  	mov byte [rax], T_closure
 16910 0000CB59 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16911 0000CB5D 48C74009[6ACB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3798
 16912 0000CB65 E9020C0000              	jmp .L_lambda_simple_end_3798
 16913                                  .L_lambda_simple_code_3798:	; lambda-simple body
 16914 0000CB6A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16915 0000CB70 740B                    	je .L_lambda_simple_arity_check_ok_3798
 16916 0000CB72 FF742410                	push qword [rsp + 8 * 2]
 16917 0000CB76 6A01                    	push 1
 16918 0000CB78 E90A530000              	jmp L_error_incorrect_arity_simple
 16919                                  .L_lambda_simple_arity_check_ok_3798:
 16920 0000CB7D C8000000                	enter 0, 0
 16921 0000CB81 BF08000000              	mov rdi, 8
 16922 0000CB86 E843530000              	call malloc
 16923 0000CB8B 488B5D20                	mov rbx, PARAM(0)
 16924 0000CB8F 488918                  	mov qword [rax], rbx
 16925 0000CB92 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 16926                                  
 16927 0000CB96 48B8-                            	mov rax, sob_void
 16927 0000CB98 [0000000000000000] 
 16928                                  
 16929 0000CBA0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16930 0000CBA5 E824530000              	call malloc
 16931 0000CBAA 50                      	push rax
 16932 0000CBAB BF08000000              	mov rdi, 8 * 1	; new rib
 16933 0000CBB0 E819530000              	call malloc
 16934 0000CBB5 50                      	push rax
 16935 0000CBB6 BF18000000              	mov rdi, 8 * 3	; extended env
 16936 0000CBBB E80E530000              	call malloc
 16937 0000CBC0 488B7D10                	mov rdi, ENV
 16938 0000CBC4 BE00000000              	mov rsi, 0
 16939 0000CBC9 BA01000000              	mov rdx, 1
 16940                                  .L_lambda_simple_env_loop_3799:	; ext_env[i + 1] <-- env[i]
 16941 0000CBCE 4883FE02                	cmp rsi, 2
 16942 0000CBD2 7410                    	je .L_lambda_simple_env_end_3799
 16943 0000CBD4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16944 0000CBD8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16945 0000CBDC 48FFC6                  	inc rsi
 16946 0000CBDF 48FFC2                  	inc rdx
 16947 0000CBE2 EBEA                    	jmp .L_lambda_simple_env_loop_3799
 16948                                  .L_lambda_simple_env_end_3799:
 16949 0000CBE4 5B                      	pop rbx
 16950 0000CBE5 BE00000000              	mov rsi, 0
 16951                                  .L_lambda_simple_params_loop_3799:	; copy params
 16952 0000CBEA 4883FE01                	cmp rsi, 1
 16953 0000CBEE 740E                    	je .L_lambda_simple_params_end_3799
 16954 0000CBF0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16955 0000CBF5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16956 0000CBF9 48FFC6                  	inc rsi
 16957 0000CBFC EBEC                    	jmp .L_lambda_simple_params_loop_3799
 16958                                  .L_lambda_simple_params_end_3799:
 16959 0000CBFE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16960 0000CC01 4889C3                  	mov rbx, rax
 16961 0000CC04 58                      	pop rax
 16962 0000CC05 C60005                  	mov byte [rax], T_closure
 16963 0000CC08 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16964 0000CC0C 48C74009[19CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_3799
 16965 0000CC14 E91F020000              	jmp .L_lambda_simple_end_3799
 16966                                  .L_lambda_simple_code_3799:	; lambda-simple body
 16967 0000CC19 48837C241005            	cmp qword [rsp + 8 * 2], 5
 16968 0000CC1F 740B                    	je .L_lambda_simple_arity_check_ok_3799
 16969 0000CC21 FF742410                	push qword [rsp + 8 * 2]
 16970 0000CC25 6A05                    	push 5
 16971 0000CC27 E95B520000              	jmp L_error_incorrect_arity_simple
 16972                                  .L_lambda_simple_arity_check_ok_3799:
 16973 0000CC2C C8000000                	enter 0, 0
 16974 0000CC30 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 16975 0000CC34 50                      	push rax
 16976 0000CC35 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16977 0000CC39 50                      	push rax
 16978 0000CC3A 6A02                    	push 2
 16979 0000CC3C 488B0425[50030000]      	mov rax, qword [free_var_106]
 16980                                  	assert_closure(rax)
    42 0000CC44 803805              <1>  cmp byte [%1], %2
    43 0000CC47 0F85756A0000        <1>  jne L_error_incorrect_type
 16981 0000CC4D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16982 0000CC50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16983 0000CC53 483D[02000000]          	cmp rax, sob_boolean_false
 16984 0000CC59 0F85D5010000            	jne .L_or_end_042b
 16985 0000CC5F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16986 0000CC63 50                      	push rax
 16987 0000CC64 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 16988 0000CC68 50                      	push rax
 16989 0000CC69 6A02                    	push 2
 16990 0000CC6B 488B0425[78010000]      	mov rax, qword [free_var_47]
 16991                                  	assert_closure(rax)
    42 0000CC73 803805              <1>  cmp byte [%1], %2
    43 0000CC76 0F85466A0000        <1>  jne L_error_incorrect_type
 16992 0000CC7C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16993 0000CC7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16994 0000CC82 50                      	push rax
 16995 0000CC83 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16996 0000CC87 50                      	push rax
 16997 0000CC88 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16998 0000CC8C 50                      	push rax
 16999 0000CC8D 6A02                    	push 2
 17000 0000CC8F 488B0425[78010000]      	mov rax, qword [free_var_47]
 17001                                  	assert_closure(rax)
    42 0000CC97 803805              <1>  cmp byte [%1], %2
    43 0000CC9A 0F85226A0000        <1>  jne L_error_incorrect_type
 17002 0000CCA0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17003 0000CCA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17004 0000CCA6 50                      	push rax
 17005 0000CCA7 6A02                    	push 2
 17006 0000CCA9 488B4510                	mov rax, qword [rbp + 8 * 2]
 17007                                  
 17008 0000CCAD 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17009                                  
 17010 0000CCB1 488B00                                            	mov rax, qword[rax + 8 * 0]
 17011                                  	assert_closure(rax)
    42 0000CCB4 803805              <1>  cmp byte [%1], %2
    43 0000CCB7 0F85056A0000        <1>  jne L_error_incorrect_type
 17012 0000CCBD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17013 0000CCC0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17014 0000CCC3 483D[02000000]          	cmp rax, sob_boolean_false
 17015 0000CCC9 0F8565010000            	jne .L_or_end_042b
 17016 0000CCCF 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 17017 0000CCD3 50                      	push rax
 17018 0000CCD4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17019 0000CCD8 50                      	push rax
 17020 0000CCD9 6A02                    	push 2
 17021 0000CCDB 488B0425[30030000]      	mov rax, qword [free_var_102]
 17022                                  	assert_closure(rax)
    42 0000CCE3 803805              <1>  cmp byte [%1], %2
    43 0000CCE6 0F85D6690000        <1>  jne L_error_incorrect_type
 17023 0000CCEC FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17024 0000CCEF FF5009                  	call SOB_CLOSURE_CODE(rax)
 17025                                  
 17026 0000CCF2 483D[02000000]                  	cmp rax, sob_boolean_false
 17027                                  
 17028 0000CCF8 0F842C010000                    	je .L_if_else_4803
 17029 0000CCFE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17030 0000CD02 50                      	push rax
 17031 0000CD03 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 17032 0000CD07 50                      	push rax
 17033 0000CD08 6A02                    	push 2
 17034 0000CD0A 488B0425[78010000]      	mov rax, qword [free_var_47]
 17035                                  	assert_closure(rax)
    42 0000CD12 803805              <1>  cmp byte [%1], %2
    43 0000CD15 0F85A7690000        <1>  jne L_error_incorrect_type
 17036 0000CD1B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17037 0000CD1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17038 0000CD21 50                      	push rax
 17039 0000CD22 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17040 0000CD26 50                      	push rax
 17041 0000CD27 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17042 0000CD2B 50                      	push rax
 17043 0000CD2C 6A02                    	push 2
 17044 0000CD2E 488B0425[78010000]      	mov rax, qword [free_var_47]
 17045                                  	assert_closure(rax)
    42 0000CD36 803805              <1>  cmp byte [%1], %2
    43 0000CD39 0F8583690000        <1>  jne L_error_incorrect_type
 17046 0000CD3F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17047 0000CD42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17048 0000CD45 50                      	push rax
 17049 0000CD46 6A02                    	push 2
 17050 0000CD48 488B4510                	mov rax, qword [rbp + 8 * 2]
 17051                                  
 17052 0000CD4C 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17053                                  
 17054 0000CD50 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17055                                  	assert_closure(rax)
    42 0000CD54 803805              <1>  cmp byte [%1], %2
    43 0000CD57 0F8565690000        <1>  jne L_error_incorrect_type
 17056 0000CD5D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17057 0000CD60 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17058                                  
 17059 0000CD63 483D[02000000]                  	cmp rax, sob_boolean_false
 17060                                  
 17061 0000CD69 0F84AF000000                    	je .L_if_else_4804
 17062 0000CD6F 488B4540                	mov rax ,qword[rbp + 8 * (4 + 4)]
 17063 0000CD73 50                      	push rax
 17064 0000CD74 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 17065 0000CD78 50                      	push rax
 17066 0000CD79 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 17067 0000CD7D 50                      	push rax
 17068 0000CD7E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17069 0000CD82 50                      	push rax
 17070 0000CD83 48B8-                   	mov rax,L_constants + 128
 17070 0000CD85 [8000000000000000] 
 17071 0000CD8D 50                      	push rax
 17072 0000CD8E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17073 0000CD92 50                      	push rax
 17074 0000CD93 6A02                    	push 2
 17075 0000CD95 488B0425[08030000]      	mov rax, qword [free_var_97]
 17076                                  	assert_closure(rax)
    42 0000CD9D 803805              <1>  cmp byte [%1], %2
    43 0000CDA0 0F851C690000        <1>  jne L_error_incorrect_type
 17077 0000CDA6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17078 0000CDA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17079 0000CDAC 50                      	push rax
 17080 0000CDAD 6A05                    	push 5
 17081 0000CDAF 488B4510                	mov rax, qword [rbp + 8 * 2]
 17082                                  
 17083 0000CDB3 488B00                                            	mov rax, qword[rax + 8 * 0]
 17084                                  
 17085 0000CDB6 488B00                                            	mov rax, qword[rax + 8 * 0]
 17086 0000CDB9 488B00                  	mov rax, qword [rax]
 17087                                  .L_applic_TC_404d:
 17088 0000CDBC 803805                  	cmp byte [rax], T_closure
 17089 0000CDBF 0F85BE600000            	jne L_code_ptr_error
 17090 0000CDC5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17091 0000CDC9 53                      	push rbx
 17092 0000CDCA FF7508                  	push qword [rbp + 8]
 17093 0000CDCD FF7500                  	push qword [rbp]
 17094 0000CDD0 488B4D18                	mov rcx, [rbp + 3 * 8]
 17095 0000CDD4 488B542418              	mov rdx, [rsp + 3 * 8]
 17096 0000CDD9 488D7204                	lea rsi, [rdx + 4]
 17097 0000CDDD 4C8D4EFF                	lea r9, [rsi - 1]
 17098 0000CDE1 488D7903                	lea rdi, [rcx + 3]
 17099 0000CDE5 4D31C0                  	xor r8, r8
 17100                                  .L_tc_recycle_frame_loop_404d:
 17101 0000CDE8 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17102 0000CDEC 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17103 0000CDF1 49FFC9                  	dec r9
 17104 0000CDF4 4D31C0                  	xor r8, r8
 17105 0000CDF7 48FFCF                  	dec rdi
 17106 0000CDFA 48FFCE                  	dec rsi
 17107 0000CDFD 4883FE00                	cmp rsi, 0
 17108 0000CE01 75E5                    	jne .L_tc_recycle_frame_loop_404d
 17109                                  .L_tc_recycle_frame_done_404d:
 17110                                  ;this pop rbp in sot to the right place
 17111 0000CE03 4989C9                  	mov r9, rcx
 17112 0000CE06 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17113 0000CE0E 4C01CC                  	add rsp, r9
 17114 0000CE11 5D                      	pop rbp
 17115 0000CE12 488B4D00                	mov rcx, qword [rbp]
 17116 0000CE16 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17117 0000CE1A FFE3                    	jmp rbx
 17118                                  
 17119 0000CE1C EB0A                            	jmp .L_if_end_4804
 17120                                  
 17121                                          	.L_if_else_4804:
 17122 0000CE1E 48B8-                   	mov rax,L_constants + 2
 17122 0000CE20 [0200000000000000] 
 17123                                  
 17124                                          	.L_if_end_4804:
 17125                                  
 17126 0000CE28 EB0A                            	jmp .L_if_end_4803
 17127                                  
 17128                                          	.L_if_else_4803:
 17129 0000CE2A 48B8-                   	mov rax,L_constants + 2
 17129 0000CE2C [0200000000000000] 
 17130                                  
 17131                                          	.L_if_end_4803:
 17132                                  .L_or_end_042b:
 17133 0000CE34 C9                      	leave
 17134 0000CE35 C23800                  	ret 8 * (2 + 5)
 17135                                  .L_lambda_simple_end_3799:	; new closure is in rax
 17136 0000CE38 50                      	push rax
 17137 0000CE39 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17138 0000CE3D 8F00                    	pop qword [rax]
 17139 0000CE3F 48B8-                   	mov rax, sob_void
 17139 0000CE41 [0000000000000000] 
 17140                                  
 17141 0000CE49 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17142 0000CE4E E87B500000              	call malloc
 17143 0000CE53 50                      	push rax
 17144 0000CE54 BF08000000              	mov rdi, 8 * 1	; new rib
 17145 0000CE59 E870500000              	call malloc
 17146 0000CE5E 50                      	push rax
 17147 0000CE5F BF18000000              	mov rdi, 8 * 3	; extended env
 17148 0000CE64 E865500000              	call malloc
 17149 0000CE69 488B7D10                	mov rdi, ENV
 17150 0000CE6D BE00000000              	mov rsi, 0
 17151 0000CE72 BA01000000              	mov rdx, 1
 17152                                  .L_lambda_simple_env_loop_379a:	; ext_env[i + 1] <-- env[i]
 17153 0000CE77 4883FE02                	cmp rsi, 2
 17154 0000CE7B 7410                    	je .L_lambda_simple_env_end_379a
 17155 0000CE7D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17156 0000CE81 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17157 0000CE85 48FFC6                  	inc rsi
 17158 0000CE88 48FFC2                  	inc rdx
 17159 0000CE8B EBEA                    	jmp .L_lambda_simple_env_loop_379a
 17160                                  .L_lambda_simple_env_end_379a:
 17161 0000CE8D 5B                      	pop rbx
 17162 0000CE8E BE00000000              	mov rsi, 0
 17163                                  .L_lambda_simple_params_loop_379a:	; copy params
 17164 0000CE93 4883FE01                	cmp rsi, 1
 17165 0000CE97 740E                    	je .L_lambda_simple_params_end_379a
 17166 0000CE99 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17167 0000CE9E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17168 0000CEA2 48FFC6                  	inc rsi
 17169 0000CEA5 EBEC                    	jmp .L_lambda_simple_params_loop_379a
 17170                                  .L_lambda_simple_params_end_379a:
 17171 0000CEA7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17172 0000CEAA 4889C3                  	mov rbx, rax
 17173 0000CEAD 58                      	pop rax
 17174 0000CEAE C60005                  	mov byte [rax], T_closure
 17175 0000CEB1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17176 0000CEB5 48C74009[C2CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_379a
 17177 0000CEBD E9BB020000              	jmp .L_lambda_simple_end_379a
 17178                                  .L_lambda_simple_code_379a:	; lambda-simple body
 17179 0000CEC2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17180 0000CEC8 740B                    	je .L_lambda_simple_arity_check_ok_379a
 17181 0000CECA FF742410                	push qword [rsp + 8 * 2]
 17182 0000CECE 6A02                    	push 2
 17183 0000CED0 E9B24F0000              	jmp L_error_incorrect_arity_simple
 17184                                  .L_lambda_simple_arity_check_ok_379a:
 17185 0000CED5 C8000000                	enter 0, 0
 17186 0000CED9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17187 0000CEDD 50                      	push rax
 17188 0000CEDE 6A01                    	push 1
 17189 0000CEE0 488B0425[90000000]      	mov rax, qword [free_var_18]
 17190                                  	assert_closure(rax)
    42 0000CEE8 803805              <1>  cmp byte [%1], %2
    43 0000CEEB 0F85D1670000        <1>  jne L_error_incorrect_type
 17191 0000CEF1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17192 0000CEF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17193 0000CEF7 50                      	push rax
 17194 0000CEF8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17195 0000CEFC 50                      	push rax
 17196 0000CEFD 6A01                    	push 1
 17197 0000CEFF 488B0425[90000000]      	mov rax, qword [free_var_18]
 17198                                  	assert_closure(rax)
    42 0000CF07 803805              <1>  cmp byte [%1], %2
    43 0000CF0A 0F85B2670000        <1>  jne L_error_incorrect_type
 17199 0000CF10 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17200 0000CF13 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17201 0000CF16 50                      	push rax
 17202 0000CF17 6A02                    	push 2
 17203 0000CF19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17204 0000CF1E E8AB4F0000              	call malloc
 17205 0000CF23 50                      	push rax
 17206 0000CF24 BF10000000              	mov rdi, 8 * 2	; new rib
 17207 0000CF29 E8A04F0000              	call malloc
 17208 0000CF2E 50                      	push rax
 17209 0000CF2F BF20000000              	mov rdi, 8 * 4	; extended env
 17210 0000CF34 E8954F0000              	call malloc
 17211 0000CF39 488B7D10                	mov rdi, ENV
 17212 0000CF3D BE00000000              	mov rsi, 0
 17213 0000CF42 BA01000000              	mov rdx, 1
 17214                                  .L_lambda_simple_env_loop_379b:	; ext_env[i + 1] <-- env[i]
 17215 0000CF47 4883FE03                	cmp rsi, 3
 17216 0000CF4B 7410                    	je .L_lambda_simple_env_end_379b
 17217 0000CF4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17218 0000CF51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17219 0000CF55 48FFC6                  	inc rsi
 17220 0000CF58 48FFC2                  	inc rdx
 17221 0000CF5B EBEA                    	jmp .L_lambda_simple_env_loop_379b
 17222                                  .L_lambda_simple_env_end_379b:
 17223 0000CF5D 5B                      	pop rbx
 17224 0000CF5E BE00000000              	mov rsi, 0
 17225                                  .L_lambda_simple_params_loop_379b:	; copy params
 17226 0000CF63 4883FE02                	cmp rsi, 2
 17227 0000CF67 740E                    	je .L_lambda_simple_params_end_379b
 17228 0000CF69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17229 0000CF6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17230 0000CF72 48FFC6                  	inc rsi
 17231 0000CF75 EBEC                    	jmp .L_lambda_simple_params_loop_379b
 17232                                  .L_lambda_simple_params_end_379b:
 17233 0000CF77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17234 0000CF7A 4889C3                  	mov rbx, rax
 17235 0000CF7D 58                      	pop rax
 17236 0000CF7E C60005                  	mov byte [rax], T_closure
 17237 0000CF81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17238 0000CF85 48C74009[92CF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_379b
 17239 0000CF8D E987010000              	jmp .L_lambda_simple_end_379b
 17240                                  .L_lambda_simple_code_379b:	; lambda-simple body
 17241 0000CF92 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17242 0000CF98 740B                    	je .L_lambda_simple_arity_check_ok_379b
 17243 0000CF9A FF742410                	push qword [rsp + 8 * 2]
 17244 0000CF9E 6A02                    	push 2
 17245 0000CFA0 E9E24E0000              	jmp L_error_incorrect_arity_simple
 17246                                  .L_lambda_simple_arity_check_ok_379b:
 17247 0000CFA5 C8000000                	enter 0, 0
 17248 0000CFA9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17249 0000CFAD 50                      	push rax
 17250 0000CFAE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17251 0000CFB2 50                      	push rax
 17252 0000CFB3 6A02                    	push 2
 17253 0000CFB5 488B0425[38030000]      	mov rax, qword [free_var_103]
 17254                                  	assert_closure(rax)
    42 0000CFBD 803805              <1>  cmp byte [%1], %2
    43 0000CFC0 0F85FC660000        <1>  jne L_error_incorrect_type
 17255 0000CFC6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17256 0000CFC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17257                                  
 17258 0000CFCC 483D[02000000]                  	cmp rax, sob_boolean_false
 17259                                  
 17260 0000CFD2 0F84A1000000                    	je .L_if_else_4805
 17261 0000CFD8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17262 0000CFDC 50                      	push rax
 17263 0000CFDD 488B4510                	mov rax, qword [rbp + 8 * 2]
 17264                                  
 17265 0000CFE1 488B00                                            	mov rax, qword[rax + 8 * 0]
 17266                                  
 17267 0000CFE4 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17268 0000CFE8 50                      	push rax
 17269 0000CFE9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17270 0000CFED 50                      	push rax
 17271 0000CFEE 488B4510                	mov rax, qword [rbp + 8 * 2]
 17272                                  
 17273 0000CFF2 488B00                                            	mov rax, qword[rax + 8 * 0]
 17274                                  
 17275 0000CFF5 488B00                                            	mov rax, qword[rax + 8 * 0]
 17276 0000CFF8 50                      	push rax
 17277 0000CFF9 48B8-                   	mov rax,L_constants + 32
 17277 0000CFFB [2000000000000000] 
 17278 0000D003 50                      	push rax
 17279 0000D004 6A05                    	push 5
 17280 0000D006 488B4510                	mov rax, qword [rbp + 8 * 2]
 17281                                  
 17282 0000D00A 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17283                                  
 17284 0000D00E 488B00                                            	mov rax, qword[rax + 8 * 0]
 17285 0000D011 488B00                  	mov rax, qword [rax]
 17286                                  .L_applic_TC_404f:
 17287 0000D014 803805                  	cmp byte [rax], T_closure
 17288 0000D017 0F85665E0000            	jne L_code_ptr_error
 17289 0000D01D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17290 0000D021 53                      	push rbx
 17291 0000D022 FF7508                  	push qword [rbp + 8]
 17292 0000D025 FF7500                  	push qword [rbp]
 17293 0000D028 488B4D18                	mov rcx, [rbp + 3 * 8]
 17294 0000D02C 488B542418              	mov rdx, [rsp + 3 * 8]
 17295 0000D031 488D7204                	lea rsi, [rdx + 4]
 17296 0000D035 4C8D4EFF                	lea r9, [rsi - 1]
 17297 0000D039 488D7903                	lea rdi, [rcx + 3]
 17298 0000D03D 4D31C0                  	xor r8, r8
 17299                                  .L_tc_recycle_frame_loop_404f:
 17300 0000D040 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17301 0000D044 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17302 0000D049 49FFC9                  	dec r9
 17303 0000D04C 4D31C0                  	xor r8, r8
 17304 0000D04F 48FFCF                  	dec rdi
 17305 0000D052 48FFCE                  	dec rsi
 17306 0000D055 4883FE00                	cmp rsi, 0
 17307 0000D059 75E5                    	jne .L_tc_recycle_frame_loop_404f
 17308                                  .L_tc_recycle_frame_done_404f:
 17309                                  ;this pop rbp in sot to the right place
 17310 0000D05B 4989C9                  	mov r9, rcx
 17311 0000D05E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17312 0000D066 4C01CC                  	add rsp, r9
 17313 0000D069 5D                      	pop rbp
 17314 0000D06A 488B4D00                	mov rcx, qword [rbp]
 17315 0000D06E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17316 0000D072 FFE3                    	jmp rbx
 17317                                  
 17318 0000D074 E99C000000                      	jmp .L_if_end_4805
 17319                                  
 17320                                          	.L_if_else_4805:
 17321 0000D079 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17322 0000D07D 50                      	push rax
 17323 0000D07E 488B4510                	mov rax, qword [rbp + 8 * 2]
 17324                                  
 17325 0000D082 488B00                                            	mov rax, qword[rax + 8 * 0]
 17326                                  
 17327 0000D085 488B00                                            	mov rax, qword[rax + 8 * 0]
 17328 0000D088 50                      	push rax
 17329 0000D089 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17330 0000D08D 50                      	push rax
 17331 0000D08E 488B4510                	mov rax, qword [rbp + 8 * 2]
 17332                                  
 17333 0000D092 488B00                                            	mov rax, qword[rax + 8 * 0]
 17334                                  
 17335 0000D095 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17336 0000D099 50                      	push rax
 17337 0000D09A 48B8-                   	mov rax,L_constants + 32
 17337 0000D09C [2000000000000000] 
 17338 0000D0A4 50                      	push rax
 17339 0000D0A5 6A05                    	push 5
 17340 0000D0A7 488B4510                	mov rax, qword [rbp + 8 * 2]
 17341                                  
 17342 0000D0AB 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17343                                  
 17344 0000D0AF 488B00                                            	mov rax, qword[rax + 8 * 0]
 17345 0000D0B2 488B00                  	mov rax, qword [rax]
 17346                                  .L_applic_TC_404e:
 17347 0000D0B5 803805                  	cmp byte [rax], T_closure
 17348 0000D0B8 0F85C55D0000            	jne L_code_ptr_error
 17349 0000D0BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17350 0000D0C2 53                      	push rbx
 17351 0000D0C3 FF7508                  	push qword [rbp + 8]
 17352 0000D0C6 FF7500                  	push qword [rbp]
 17353 0000D0C9 488B4D18                	mov rcx, [rbp + 3 * 8]
 17354 0000D0CD 488B542418              	mov rdx, [rsp + 3 * 8]
 17355 0000D0D2 488D7204                	lea rsi, [rdx + 4]
 17356 0000D0D6 4C8D4EFF                	lea r9, [rsi - 1]
 17357 0000D0DA 488D7903                	lea rdi, [rcx + 3]
 17358 0000D0DE 4D31C0                  	xor r8, r8
 17359                                  .L_tc_recycle_frame_loop_404e:
 17360 0000D0E1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17361 0000D0E5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17362 0000D0EA 49FFC9                  	dec r9
 17363 0000D0ED 4D31C0                  	xor r8, r8
 17364 0000D0F0 48FFCF                  	dec rdi
 17365 0000D0F3 48FFCE                  	dec rsi
 17366 0000D0F6 4883FE00                	cmp rsi, 0
 17367 0000D0FA 75E5                    	jne .L_tc_recycle_frame_loop_404e
 17368                                  .L_tc_recycle_frame_done_404e:
 17369                                  ;this pop rbp in sot to the right place
 17370 0000D0FC 4989C9                  	mov r9, rcx
 17371 0000D0FF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17372 0000D107 4C01CC                  	add rsp, r9
 17373 0000D10A 5D                      	pop rbp
 17374 0000D10B 488B4D00                	mov rcx, qword [rbp]
 17375 0000D10F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17376 0000D113 FFE3                    	jmp rbx
 17377                                  
 17378                                          	.L_if_end_4805:
 17379 0000D115 C9                      	leave
 17380 0000D116 C22000                  	ret 8 * (2 + 2)
 17381                                  .L_lambda_simple_end_379b:	; new closure is in rax
 17382                                  .L_applic_TC_4050:
 17383 0000D119 803805                  	cmp byte [rax], T_closure
 17384 0000D11C 0F85615D0000            	jne L_code_ptr_error
 17385 0000D122 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17386 0000D126 53                      	push rbx
 17387 0000D127 FF7508                  	push qword [rbp + 8]
 17388 0000D12A FF7500                  	push qword [rbp]
 17389 0000D12D 488B4D18                	mov rcx, [rbp + 3 * 8]
 17390 0000D131 488B542418              	mov rdx, [rsp + 3 * 8]
 17391 0000D136 488D7204                	lea rsi, [rdx + 4]
 17392 0000D13A 4C8D4EFF                	lea r9, [rsi - 1]
 17393 0000D13E 488D7903                	lea rdi, [rcx + 3]
 17394 0000D142 4D31C0                  	xor r8, r8
 17395                                  .L_tc_recycle_frame_loop_4050:
 17396 0000D145 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17397 0000D149 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17398 0000D14E 49FFC9                  	dec r9
 17399 0000D151 4D31C0                  	xor r8, r8
 17400 0000D154 48FFCF                  	dec rdi
 17401 0000D157 48FFCE                  	dec rsi
 17402 0000D15A 4883FE00                	cmp rsi, 0
 17403 0000D15E 75E5                    	jne .L_tc_recycle_frame_loop_4050
 17404                                  .L_tc_recycle_frame_done_4050:
 17405                                  ;this pop rbp in sot to the right place
 17406 0000D160 4989C9                  	mov r9, rcx
 17407 0000D163 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17408 0000D16B 4C01CC                  	add rsp, r9
 17409 0000D16E 5D                      	pop rbp
 17410 0000D16F 488B4D00                	mov rcx, qword [rbp]
 17411 0000D173 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17412 0000D177 FFE3                    	jmp rbx
 17413 0000D179 C9                      	leave
 17414 0000D17A C22000                  	ret 8 * (2 + 2)
 17415                                  .L_lambda_simple_end_379a:	; new closure is in rax
 17416 0000D17D 50                      	push rax
 17417 0000D17E 6A01                    	push 1
 17418 0000D180 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17419 0000D185 E8444D0000              	call malloc
 17420 0000D18A 50                      	push rax
 17421 0000D18B BF08000000              	mov rdi, 8 * 1	; new rib
 17422 0000D190 E8394D0000              	call malloc
 17423 0000D195 50                      	push rax
 17424 0000D196 BF18000000              	mov rdi, 8 * 3	; extended env
 17425 0000D19B E82E4D0000              	call malloc
 17426 0000D1A0 488B7D10                	mov rdi, ENV
 17427 0000D1A4 BE00000000              	mov rsi, 0
 17428 0000D1A9 BA01000000              	mov rdx, 1
 17429                                  .L_lambda_simple_env_loop_379c:	; ext_env[i + 1] <-- env[i]
 17430 0000D1AE 4883FE02                	cmp rsi, 2
 17431 0000D1B2 7410                    	je .L_lambda_simple_env_end_379c
 17432 0000D1B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17433 0000D1B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17434 0000D1BC 48FFC6                  	inc rsi
 17435 0000D1BF 48FFC2                  	inc rdx
 17436 0000D1C2 EBEA                    	jmp .L_lambda_simple_env_loop_379c
 17437                                  .L_lambda_simple_env_end_379c:
 17438 0000D1C4 5B                      	pop rbx
 17439 0000D1C5 BE00000000              	mov rsi, 0
 17440                                  .L_lambda_simple_params_loop_379c:	; copy params
 17441 0000D1CA 4883FE01                	cmp rsi, 1
 17442 0000D1CE 740E                    	je .L_lambda_simple_params_end_379c
 17443 0000D1D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17444 0000D1D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17445 0000D1D9 48FFC6                  	inc rsi
 17446 0000D1DC EBEC                    	jmp .L_lambda_simple_params_loop_379c
 17447                                  .L_lambda_simple_params_end_379c:
 17448 0000D1DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17449 0000D1E1 4889C3                  	mov rbx, rax
 17450 0000D1E4 58                      	pop rax
 17451 0000D1E5 C60005                  	mov byte [rax], T_closure
 17452 0000D1E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17453 0000D1EC 48C74009[F9D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_379c
 17454 0000D1F4 E90F050000              	jmp .L_lambda_simple_end_379c
 17455                                  .L_lambda_simple_code_379c:	; lambda-simple body
 17456 0000D1F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17457 0000D1FF 740B                    	je .L_lambda_simple_arity_check_ok_379c
 17458 0000D201 FF742410                	push qword [rsp + 8 * 2]
 17459 0000D205 6A01                    	push 1
 17460 0000D207 E97B4C0000              	jmp L_error_incorrect_arity_simple
 17461                                  .L_lambda_simple_arity_check_ok_379c:
 17462 0000D20C C8000000                	enter 0, 0
 17463 0000D210 48B8-                   	mov rax,L_constants + 23
 17463 0000D212 [1700000000000000] 
 17464 0000D21A 50                      	push rax
 17465 0000D21B 6A01                    	push 1
 17466 0000D21D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17467 0000D222 E8A74C0000              	call malloc
 17468 0000D227 50                      	push rax
 17469 0000D228 BF08000000              	mov rdi, 8 * 1	; new rib
 17470 0000D22D E89C4C0000              	call malloc
 17471 0000D232 50                      	push rax
 17472 0000D233 BF20000000              	mov rdi, 8 * 4	; extended env
 17473 0000D238 E8914C0000              	call malloc
 17474 0000D23D 488B7D10                	mov rdi, ENV
 17475 0000D241 BE00000000              	mov rsi, 0
 17476 0000D246 BA01000000              	mov rdx, 1
 17477                                  .L_lambda_simple_env_loop_379d:	; ext_env[i + 1] <-- env[i]
 17478 0000D24B 4883FE03                	cmp rsi, 3
 17479 0000D24F 7410                    	je .L_lambda_simple_env_end_379d
 17480 0000D251 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17481 0000D255 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17482 0000D259 48FFC6                  	inc rsi
 17483 0000D25C 48FFC2                  	inc rdx
 17484 0000D25F EBEA                    	jmp .L_lambda_simple_env_loop_379d
 17485                                  .L_lambda_simple_env_end_379d:
 17486 0000D261 5B                      	pop rbx
 17487 0000D262 BE00000000              	mov rsi, 0
 17488                                  .L_lambda_simple_params_loop_379d:	; copy params
 17489 0000D267 4883FE01                	cmp rsi, 1
 17490 0000D26B 740E                    	je .L_lambda_simple_params_end_379d
 17491 0000D26D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17492 0000D272 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17493 0000D276 48FFC6                  	inc rsi
 17494 0000D279 EBEC                    	jmp .L_lambda_simple_params_loop_379d
 17495                                  .L_lambda_simple_params_end_379d:
 17496 0000D27B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17497 0000D27E 4889C3                  	mov rbx, rax
 17498 0000D281 58                      	pop rax
 17499 0000D282 C60005                  	mov byte [rax], T_closure
 17500 0000D285 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17501 0000D289 48C74009[96D20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_379d
 17502 0000D291 E90E040000              	jmp .L_lambda_simple_end_379d
 17503                                  .L_lambda_simple_code_379d:	; lambda-simple body
 17504 0000D296 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17505 0000D29C 740B                    	je .L_lambda_simple_arity_check_ok_379d
 17506 0000D29E FF742410                	push qword [rsp + 8 * 2]
 17507 0000D2A2 6A01                    	push 1
 17508 0000D2A4 E9DE4B0000              	jmp L_error_incorrect_arity_simple
 17509                                  .L_lambda_simple_arity_check_ok_379d:
 17510 0000D2A9 C8000000                	enter 0, 0
 17511 0000D2AD BF08000000              	mov rdi, 8
 17512 0000D2B2 E8174C0000              	call malloc
 17513 0000D2B7 488B5D20                	mov rbx, PARAM(0)
 17514 0000D2BB 488918                  	mov qword [rax], rbx
 17515 0000D2BE 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17516                                  
 17517 0000D2C2 48B8-                            	mov rax, sob_void
 17517 0000D2C4 [0000000000000000] 
 17518                                  
 17519 0000D2CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17520 0000D2D1 E8F84B0000              	call malloc
 17521 0000D2D6 50                      	push rax
 17522 0000D2D7 BF08000000              	mov rdi, 8 * 1	; new rib
 17523 0000D2DC E8ED4B0000              	call malloc
 17524 0000D2E1 50                      	push rax
 17525 0000D2E2 BF28000000              	mov rdi, 8 * 5	; extended env
 17526 0000D2E7 E8E24B0000              	call malloc
 17527 0000D2EC 488B7D10                	mov rdi, ENV
 17528 0000D2F0 BE00000000              	mov rsi, 0
 17529 0000D2F5 BA01000000              	mov rdx, 1
 17530                                  .L_lambda_simple_env_loop_379e:	; ext_env[i + 1] <-- env[i]
 17531 0000D2FA 4883FE04                	cmp rsi, 4
 17532 0000D2FE 7410                    	je .L_lambda_simple_env_end_379e
 17533 0000D300 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17534 0000D304 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17535 0000D308 48FFC6                  	inc rsi
 17536 0000D30B 48FFC2                  	inc rdx
 17537 0000D30E EBEA                    	jmp .L_lambda_simple_env_loop_379e
 17538                                  .L_lambda_simple_env_end_379e:
 17539 0000D310 5B                      	pop rbx
 17540 0000D311 BE00000000              	mov rsi, 0
 17541                                  .L_lambda_simple_params_loop_379e:	; copy params
 17542 0000D316 4883FE01                	cmp rsi, 1
 17543 0000D31A 740E                    	je .L_lambda_simple_params_end_379e
 17544 0000D31C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17545 0000D321 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17546 0000D325 48FFC6                  	inc rsi
 17547 0000D328 EBEC                    	jmp .L_lambda_simple_params_loop_379e
 17548                                  .L_lambda_simple_params_end_379e:
 17549 0000D32A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17550 0000D32D 4889C3                  	mov rbx, rax
 17551 0000D330 58                      	pop rax
 17552 0000D331 C60005                  	mov byte [rax], T_closure
 17553 0000D334 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17554 0000D338 48C74009[45D30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_379e
 17555 0000D340 E94A010000              	jmp .L_lambda_simple_end_379e
 17556                                  .L_lambda_simple_code_379e:	; lambda-simple body
 17557 0000D345 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17558 0000D34B 740B                    	je .L_lambda_simple_arity_check_ok_379e
 17559 0000D34D FF742410                	push qword [rsp + 8 * 2]
 17560 0000D351 6A02                    	push 2
 17561 0000D353 E92F4B0000              	jmp L_error_incorrect_arity_simple
 17562                                  .L_lambda_simple_arity_check_ok_379e:
 17563 0000D358 C8000000                	enter 0, 0
 17564 0000D35C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17565 0000D360 50                      	push rax
 17566 0000D361 6A01                    	push 1
 17567 0000D363 488B0425[00000000]      	mov rax, qword [free_var_0]
 17568                                  	assert_closure(rax)
    42 0000D36B 803805              <1>  cmp byte [%1], %2
    43 0000D36E 0F854E630000        <1>  jne L_error_incorrect_type
 17569 0000D374 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17570 0000D377 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17571 0000D37A 483D[02000000]          	cmp rax, sob_boolean_false
 17572 0000D380 0F8505010000            	jne .L_or_end_042c
 17573 0000D386 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17574 0000D38A 50                      	push rax
 17575 0000D38B 6A01                    	push 1
 17576 0000D38D 488B0425[80000000]      	mov rax, qword [free_var_16]
 17577                                  	assert_closure(rax)
    42 0000D395 803805              <1>  cmp byte [%1], %2
    43 0000D398 0F8524630000        <1>  jne L_error_incorrect_type
 17578 0000D39E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17579 0000D3A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17580 0000D3A4 50                      	push rax
 17581 0000D3A5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17582 0000D3A9 50                      	push rax
 17583 0000D3AA 6A02                    	push 2
 17584 0000D3AC 488B4510                	mov rax, qword [rbp + 8 * 2]
 17585                                  
 17586 0000D3B0 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17587                                  
 17588 0000D3B4 488B00                                            	mov rax, qword[rax + 8 * 0]
 17589                                  	assert_closure(rax)
    42 0000D3B7 803805              <1>  cmp byte [%1], %2
    43 0000D3BA 0F8502630000        <1>  jne L_error_incorrect_type
 17590 0000D3C0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17591 0000D3C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17592                                  
 17593 0000D3C6 483D[02000000]                  	cmp rax, sob_boolean_false
 17594                                  
 17595 0000D3CC 0F84AF000000                    	je .L_if_else_4806
 17596 0000D3D2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17597 0000D3D6 50                      	push rax
 17598 0000D3D7 6A01                    	push 1
 17599 0000D3D9 488B0425[88000000]      	mov rax, qword [free_var_17]
 17600                                  	assert_closure(rax)
    42 0000D3E1 803805              <1>  cmp byte [%1], %2
    43 0000D3E4 0F85D8620000        <1>  jne L_error_incorrect_type
 17601 0000D3EA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17602 0000D3ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 17603 0000D3F0 50                      	push rax
 17604 0000D3F1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17605 0000D3F5 50                      	push rax
 17606 0000D3F6 6A01                    	push 1
 17607 0000D3F8 488B0425[80000000]      	mov rax, qword [free_var_16]
 17608                                  	assert_closure(rax)
    42 0000D400 803805              <1>  cmp byte [%1], %2
    43 0000D403 0F85B9620000        <1>  jne L_error_incorrect_type
 17609 0000D409 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17610 0000D40C FF5009                  	call SOB_CLOSURE_CODE(rax)
 17611 0000D40F 50                      	push rax
 17612 0000D410 6A02                    	push 2
 17613 0000D412 488B4510                	mov rax, qword [rbp + 8 * 2]
 17614                                  
 17615 0000D416 488B00                                            	mov rax, qword[rax + 8 * 0]
 17616                                  
 17617 0000D419 488B00                                            	mov rax, qword[rax + 8 * 0]
 17618 0000D41C 488B00                  	mov rax, qword [rax]
 17619                                  .L_applic_TC_4051:
 17620 0000D41F 803805                  	cmp byte [rax], T_closure
 17621 0000D422 0F855B5A0000            	jne L_code_ptr_error
 17622 0000D428 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17623 0000D42C 53                      	push rbx
 17624 0000D42D FF7508                  	push qword [rbp + 8]
 17625 0000D430 FF7500                  	push qword [rbp]
 17626 0000D433 488B4D18                	mov rcx, [rbp + 3 * 8]
 17627 0000D437 488B542418              	mov rdx, [rsp + 3 * 8]
 17628 0000D43C 488D7204                	lea rsi, [rdx + 4]
 17629 0000D440 4C8D4EFF                	lea r9, [rsi - 1]
 17630 0000D444 488D7903                	lea rdi, [rcx + 3]
 17631 0000D448 4D31C0                  	xor r8, r8
 17632                                  .L_tc_recycle_frame_loop_4051:
 17633 0000D44B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17634 0000D44F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17635 0000D454 49FFC9                  	dec r9
 17636 0000D457 4D31C0                  	xor r8, r8
 17637 0000D45A 48FFCF                  	dec rdi
 17638 0000D45D 48FFCE                  	dec rsi
 17639 0000D460 4883FE00                	cmp rsi, 0
 17640 0000D464 75E5                    	jne .L_tc_recycle_frame_loop_4051
 17641                                  .L_tc_recycle_frame_done_4051:
 17642                                  ;this pop rbp in sot to the right place
 17643 0000D466 4989C9                  	mov r9, rcx
 17644 0000D469 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17645 0000D471 4C01CC                  	add rsp, r9
 17646 0000D474 5D                      	pop rbp
 17647 0000D475 488B4D00                	mov rcx, qword [rbp]
 17648 0000D479 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17649 0000D47D FFE3                    	jmp rbx
 17650                                  
 17651 0000D47F EB0A                            	jmp .L_if_end_4806
 17652                                  
 17653                                          	.L_if_else_4806:
 17654 0000D481 48B8-                   	mov rax,L_constants + 2
 17654 0000D483 [0200000000000000] 
 17655                                  
 17656                                          	.L_if_end_4806:
 17657                                  .L_or_end_042c:
 17658 0000D48B C9                      	leave
 17659 0000D48C C22000                  	ret 8 * (2 + 2)
 17660                                  .L_lambda_simple_end_379e:	; new closure is in rax
 17661 0000D48F 50                      	push rax
 17662 0000D490 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17663 0000D494 8F00                    	pop qword [rax]
 17664 0000D496 48B8-                   	mov rax, sob_void
 17664 0000D498 [0000000000000000] 
 17665                                  
 17666 0000D4A0 BF11000000              	mov rdi, (1 + 8 + 8)
 17667 0000D4A5 E8244A0000              	call malloc
 17668 0000D4AA 50                      	push rax
 17669 0000D4AB BF08000000              	mov rdi, 8 * 1
 17670 0000D4B0 E8194A0000              	call malloc
 17671 0000D4B5 50                      	push rax
 17672 0000D4B6 BF28000000              	mov rdi, 8 * 5
 17673 0000D4BB E80E4A0000              	call malloc
 17674 0000D4C0 488B7D10                	mov rdi, ENV
 17675 0000D4C4 4831F6                  	xor rsi, rsi
 17676 0000D4C7 4831D2                  	xor rdx, rdx
 17677 0000D4CA 48FFC2                  	inc rdx
 17678                                  	.L_lambda_opt_env_loop_088c:
 17679                                  
 17680 0000D4CD 4883FE04                        	cmp rsi, 4
 17681                                  
 17682 0000D4D1 7412                            	je .L_lambda_opt_env_end_088c
 17683 0000D4D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17684 0000D4D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17685 0000D4DB 4883C201                	add rdx, 1
 17686 0000D4DF 4883C601                	add rsi, 1
 17687 0000D4E3 EBE8                    	jmp .L_lambda_opt_env_loop_088c
 17688                                  
 17689                                          	.L_lambda_opt_env_end_088c:
 17690 0000D4E5 5B                      	pop rbx
 17691 0000D4E6 4831F6                  	xor rsi, rsi
 17692                                  	.L_lambda_opt_params_loop_088c:
 17693                                  
 17694 0000D4E9 4883FE01                        	cmp rsi, 1
 17695                                  
 17696 0000D4ED 740F                            	je .L_lambda_opt_params_end_088c
 17697 0000D4EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17698 0000D4F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17699 0000D4F8 4883C601                	add rsi, 1
 17700 0000D4FC EBEB                    	jmp .L_lambda_opt_params_loop_088c
 17701                                  
 17702                                          	.L_lambda_opt_params_end_088c:
 17703 0000D4FE 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 17704 0000D501 4889C3                  	mov rbx, rax
 17705 0000D504 58                      	pop rax
 17706 0000D505 C60005                  	mov byte [rax], T_closure
 17707 0000D508 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17708 0000D50C 48C74009[19D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_088c
 17709                                  
 17710 0000D514 E987010000                      	jmp .L_lambda_opt_end_088c
 17711                                  
 17712                                          	.L_lambda_opt_code_088c:
 17713                                  
 17714 0000D519 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 17715                                  
 17716 0000D51F 740D                            	je .L_lambda_opt_arity_check_exact_088c  ;same num_of_args
 17717                                  
 17718 0000D521 7F65                            	jg .L_lambda_opt_arity_check_more_088c  ;greater num_of_args
 17719 0000D523 FF742410                	push qword [rsp + 8 * 2]
 17720 0000D527 6A01                    	push 1
 17721 0000D529 E96D490000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 17722                                  .L_lambda_opt_arity_check_exact_088c:
 17723 0000D52E 4883EC08                	sub rsp, 8 * 1
 17724 0000D532 488D7F10                	lea rdi, [rdi + (8 * 2)]
 17725 0000D536 4889E7                  	mov rdi, rsp 
 17726 0000D539 488B4708                	mov rax, qword [rdi + 8]
 17727 0000D53D 488907                  	mov qword [rdi], rax
 17728 0000D540 488D7F08                	lea rdi, [rdi + 8]
 17729 0000D544 488B4708                	mov rax, qword [rdi + 8]
 17730 0000D548 488907                  	mov qword [rdi], rax
 17731 0000D54B 488D7F08                	lea rdi, [rdi + 8]
 17732 0000D54F 488B4708                	mov rax, qword [rdi + 8]
 17733 0000D553 4889C1                  	mov rcx, rax
 17734 0000D556 4883C001                	add rax, 1
 17735 0000D55A 488907                  	mov qword [rdi], rax
 17736 0000D55D 488D7F08                	lea rdi, [rdi + 8]
 17737                                  	.L_lambda_opt_stack_shrink_loop_19a2:
 17738 0000D561 4883F900                	cmp rcx, 0
 17739 0000D565 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_19a2
 17740 0000D567 4883E901                	sub rcx, 1
 17741 0000D56B 488D4010                	lea rax, [rax + (8 * 2)]
 17742 0000D56F 488B4708                	mov rax, qword [rdi + 8]
 17743 0000D573 488907                  	mov qword [rdi], rax
 17744 0000D576 488D7F08                	lea rdi, [rdi + 8]
 17745 0000D57A EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_19a2
 17746                                  
 17747                                          	.L_lambda_opt_stack_shrink_loop_exit_19a2:
 17748 0000D57C 48C707[01000000]        	mov qword [rdi], sob_nil
 17749 0000D583 E997000000              	jmp .L_lambda_opt_stack_adjusted_088c
 17750                                  
 17751                                          	.L_lambda_opt_arity_check_more_088c:
 17752 0000D588 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 17753 0000D58D 488D4EFF                	lea rcx, [rsi - 1]
 17754 0000D591 49B8-                   	mov r8, sob_nil
 17754 0000D593 [0100000000000000] 
 17755 0000D59B 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 17756 0000D5A0 4889F2                  	mov rdx, rsi
 17757                                  	.L_lambda_opt_stack_shrink_loop_19a3:
 17758 0000D5A3 4883F900                	cmp rcx, 0
 17759 0000D5A7 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_19a3
 17760 0000D5A9 BF11000000              	mov rdi, 1 + (8 * 2)
 17761 0000D5AE E81B490000              	call malloc
 17762 0000D5B3 C60021                  	mov byte [rax], T_pair
 17763 0000D5B6 488B1E                  	mov rbx, qword [rsi]
 17764 0000D5B9 48895801                	mov SOB_PAIR_CAR(rax), rbx
 17765 0000D5BD 4C894009                	mov SOB_PAIR_CDR(rax), r8
 17766 0000D5C1 4883C6F8                	add rsi, -8
 17767 0000D5C5 4883E901                	sub rcx, 1
 17768 0000D5C9 4989C0                  	mov r8, rax
 17769 0000D5CC EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_19a3
 17770                                  
 17771                                          	.L_lambda_opt_stack_shrink_loop_exit_19a3:
 17772 0000D5CE 4C8902                  	mov qword [rdx], r8
 17773 0000D5D1 4883EA08                	sub rdx, 8 * 1
 17774 0000D5D5 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 17775                                  
 17776 0000D5DA B901000000                      	mov rcx, 1 
 17777                                  
 17778                                          	.L_lambda_opt_stack_shrink_loop_19a4:
 17779 0000D5DF 4883F900                	cmp rcx, 0
 17780 0000D5E3 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_19a4
 17781 0000D5E5 488B06                  	mov rax, qword [rsi]
 17782 0000D5E8 488902                  	mov qword [rdx], rax
 17783 0000D5EB 488D76F8                	lea rsi, [rsi - 8]
 17784 0000D5EF 4883C2F8                	add rdx, -8
 17785 0000D5F3 4883C1FF                	add rcx, -1
 17786 0000D5F7 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_19a4
 17787                                  
 17788                                          	.L_lambda_opt_stack_shrink_loop_exit_19a4:
 17789                                  
 17790 0000D5F9 48C70202000000                  	mov qword [rdx], 1 + 1
 17791 0000D600 4883C6F8                	add rsi, -8
 17792 0000D604 4883C2F8                	add rdx, -8
 17793 0000D608 488B06                  	mov rax, qword [rsi]
 17794 0000D60B 488902                  	mov qword [rdx], rax
 17795 0000D60E 4883C2F8                	add rdx, -8
 17796 0000D612 488D76F8                	lea rsi, [rsi - 8]
 17797 0000D616 488B06                  	mov rax, qword [rsi]
 17798 0000D619 488902                  	mov qword [rdx], rax
 17799 0000D61C 4889D4                  	mov rsp, rdx
 17800                                  	.L_lambda_opt_stack_adjusted_088c:
 17801 0000D61F C8000000                	enter 0, 0
 17802 0000D623 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17803 0000D627 50                      	push rax
 17804 0000D628 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17805 0000D62C 50                      	push rax
 17806 0000D62D 6A02                    	push 2
 17807 0000D62F 488B4510                	mov rax, qword [rbp + 8 * 2]
 17808                                  
 17809 0000D633 488B00                                            	mov rax, qword[rax + 8 * 0]
 17810                                  
 17811 0000D636 488B00                                            	mov rax, qword[rax + 8 * 0]
 17812 0000D639 488B00                  	mov rax, qword [rax]
 17813                                  .L_applic_TC_4052:
 17814 0000D63C 803805                  	cmp byte [rax], T_closure
 17815 0000D63F 0F853E580000            	jne L_code_ptr_error
 17816 0000D645 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17817 0000D649 53                      	push rbx
 17818 0000D64A FF7508                  	push qword [rbp + 8]
 17819 0000D64D FF7500                  	push qword [rbp]
 17820 0000D650 488B4D18                	mov rcx, [rbp + 3 * 8]
 17821 0000D654 488B542418              	mov rdx, [rsp + 3 * 8]
 17822 0000D659 488D7204                	lea rsi, [rdx + 4]
 17823 0000D65D 4C8D4EFF                	lea r9, [rsi - 1]
 17824 0000D661 488D7903                	lea rdi, [rcx + 3]
 17825 0000D665 4D31C0                  	xor r8, r8
 17826                                  .L_tc_recycle_frame_loop_4052:
 17827 0000D668 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17828 0000D66C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17829 0000D671 49FFC9                  	dec r9
 17830 0000D674 4D31C0                  	xor r8, r8
 17831 0000D677 48FFCF                  	dec rdi
 17832 0000D67A 48FFCE                  	dec rsi
 17833 0000D67D 4883FE00                	cmp rsi, 0
 17834 0000D681 75E5                    	jne .L_tc_recycle_frame_loop_4052
 17835                                  .L_tc_recycle_frame_done_4052:
 17836                                  ;this pop rbp in sot to the right place
 17837 0000D683 4989C9                  	mov r9, rcx
 17838 0000D686 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17839 0000D68E 4C01CC                  	add rsp, r9
 17840 0000D691 5D                      	pop rbp
 17841 0000D692 488B4D00                	mov rcx, qword [rbp]
 17842 0000D696 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17843 0000D69A FFE3                    	jmp rbx
 17844 0000D69C C9                      	leave
 17845 0000D69D C22000                  	ret 8 * (2 + 2)
 17846                                  .L_lambda_opt_end_088c:	; new closure is in rax
 17847 0000D6A0 C9                      	leave
 17848 0000D6A1 C21800                  	ret 8 * (2 + 1)
 17849                                  .L_lambda_simple_end_379d:	; new closure is in rax
 17850                                  .L_applic_TC_4053:
 17851 0000D6A4 803805                  	cmp byte [rax], T_closure
 17852 0000D6A7 0F85D6570000            	jne L_code_ptr_error
 17853 0000D6AD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17854 0000D6B1 53                      	push rbx
 17855 0000D6B2 FF7508                  	push qword [rbp + 8]
 17856 0000D6B5 FF7500                  	push qword [rbp]
 17857 0000D6B8 488B4D18                	mov rcx, [rbp + 3 * 8]
 17858 0000D6BC 488B542418              	mov rdx, [rsp + 3 * 8]
 17859 0000D6C1 488D7204                	lea rsi, [rdx + 4]
 17860 0000D6C5 4C8D4EFF                	lea r9, [rsi - 1]
 17861 0000D6C9 488D7903                	lea rdi, [rcx + 3]
 17862 0000D6CD 4D31C0                  	xor r8, r8
 17863                                  .L_tc_recycle_frame_loop_4053:
 17864 0000D6D0 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17865 0000D6D4 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17866 0000D6D9 49FFC9                  	dec r9
 17867 0000D6DC 4D31C0                  	xor r8, r8
 17868 0000D6DF 48FFCF                  	dec rdi
 17869 0000D6E2 48FFCE                  	dec rsi
 17870 0000D6E5 4883FE00                	cmp rsi, 0
 17871 0000D6E9 75E5                    	jne .L_tc_recycle_frame_loop_4053
 17872                                  .L_tc_recycle_frame_done_4053:
 17873                                  ;this pop rbp in sot to the right place
 17874 0000D6EB 4989C9                  	mov r9, rcx
 17875 0000D6EE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17876 0000D6F6 4C01CC                  	add rsp, r9
 17877 0000D6F9 5D                      	pop rbp
 17878 0000D6FA 488B4D00                	mov rcx, qword [rbp]
 17879 0000D6FE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17880 0000D702 FFE3                    	jmp rbx
 17881 0000D704 C9                      	leave
 17882 0000D705 C21800                  	ret 8 * (2 + 1)
 17883                                  .L_lambda_simple_end_379c:	; new closure is in rax
 17884                                  .L_applic_TC_4054:
 17885 0000D708 803805                  	cmp byte [rax], T_closure
 17886 0000D70B 0F8572570000            	jne L_code_ptr_error
 17887 0000D711 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17888 0000D715 53                      	push rbx
 17889 0000D716 FF7508                  	push qword [rbp + 8]
 17890 0000D719 FF7500                  	push qword [rbp]
 17891 0000D71C 488B4D18                	mov rcx, [rbp + 3 * 8]
 17892 0000D720 488B542418              	mov rdx, [rsp + 3 * 8]
 17893 0000D725 488D7204                	lea rsi, [rdx + 4]
 17894 0000D729 4C8D4EFF                	lea r9, [rsi - 1]
 17895 0000D72D 488D7903                	lea rdi, [rcx + 3]
 17896 0000D731 4D31C0                  	xor r8, r8
 17897                                  .L_tc_recycle_frame_loop_4054:
 17898 0000D734 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17899 0000D738 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17900 0000D73D 49FFC9                  	dec r9
 17901 0000D740 4D31C0                  	xor r8, r8
 17902 0000D743 48FFCF                  	dec rdi
 17903 0000D746 48FFCE                  	dec rsi
 17904 0000D749 4883FE00                	cmp rsi, 0
 17905 0000D74D 75E5                    	jne .L_tc_recycle_frame_loop_4054
 17906                                  .L_tc_recycle_frame_done_4054:
 17907                                  ;this pop rbp in sot to the right place
 17908 0000D74F 4989C9                  	mov r9, rcx
 17909 0000D752 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17910 0000D75A 4C01CC                  	add rsp, r9
 17911 0000D75D 5D                      	pop rbp
 17912 0000D75E 488B4D00                	mov rcx, qword [rbp]
 17913 0000D762 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17914 0000D766 FFE3                    	jmp rbx
 17915 0000D768 C9                      	leave
 17916 0000D769 C21800                  	ret 8 * (2 + 1)
 17917                                  .L_lambda_simple_end_3798:	; new closure is in rax
 17918                                  .L_applic_TC_4055:
 17919 0000D76C 803805                  	cmp byte [rax], T_closure
 17920 0000D76F 0F850E570000            	jne L_code_ptr_error
 17921 0000D775 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17922 0000D779 53                      	push rbx
 17923 0000D77A FF7508                  	push qword [rbp + 8]
 17924 0000D77D FF7500                  	push qword [rbp]
 17925 0000D780 488B4D18                	mov rcx, [rbp + 3 * 8]
 17926 0000D784 488B542418              	mov rdx, [rsp + 3 * 8]
 17927 0000D789 488D7204                	lea rsi, [rdx + 4]
 17928 0000D78D 4C8D4EFF                	lea r9, [rsi - 1]
 17929 0000D791 488D7903                	lea rdi, [rcx + 3]
 17930 0000D795 4D31C0                  	xor r8, r8
 17931                                  .L_tc_recycle_frame_loop_4055:
 17932 0000D798 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17933 0000D79C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17934 0000D7A1 49FFC9                  	dec r9
 17935 0000D7A4 4D31C0                  	xor r8, r8
 17936 0000D7A7 48FFCF                  	dec rdi
 17937 0000D7AA 48FFCE                  	dec rsi
 17938 0000D7AD 4883FE00                	cmp rsi, 0
 17939 0000D7B1 75E5                    	jne .L_tc_recycle_frame_loop_4055
 17940                                  .L_tc_recycle_frame_done_4055:
 17941                                  ;this pop rbp in sot to the right place
 17942 0000D7B3 4989C9                  	mov r9, rcx
 17943 0000D7B6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17944 0000D7BE 4C01CC                  	add rsp, r9
 17945 0000D7C1 5D                      	pop rbp
 17946 0000D7C2 488B4D00                	mov rcx, qword [rbp]
 17947 0000D7C6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17948 0000D7CA FFE3                    	jmp rbx
 17949 0000D7CC C9                      	leave
 17950 0000D7CD C22000                  	ret 8 * (2 + 2)
 17951                                  .L_lambda_simple_end_3797:	; new closure is in rax
 17952 0000D7D0 50                      	push rax
 17953 0000D7D1 6A01                    	push 1
 17954 0000D7D3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17955 0000D7D8 E8F1460000              	call malloc
 17956 0000D7DD 50                      	push rax
 17957 0000D7DE BF00000000              	mov rdi, 8 * 0	; new rib
 17958 0000D7E3 E8E6460000              	call malloc
 17959 0000D7E8 50                      	push rax
 17960 0000D7E9 BF08000000              	mov rdi, 8 * 1	; extended env
 17961 0000D7EE E8DB460000              	call malloc
 17962 0000D7F3 488B7D10                	mov rdi, ENV
 17963 0000D7F7 BE00000000              	mov rsi, 0
 17964 0000D7FC BA01000000              	mov rdx, 1
 17965                                  .L_lambda_simple_env_loop_379f:	; ext_env[i + 1] <-- env[i]
 17966 0000D801 4883FE00                	cmp rsi, 0
 17967 0000D805 7410                    	je .L_lambda_simple_env_end_379f
 17968 0000D807 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17969 0000D80B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17970 0000D80F 48FFC6                  	inc rsi
 17971 0000D812 48FFC2                  	inc rdx
 17972 0000D815 EBEA                    	jmp .L_lambda_simple_env_loop_379f
 17973                                  .L_lambda_simple_env_end_379f:
 17974 0000D817 5B                      	pop rbx
 17975 0000D818 BE00000000              	mov rsi, 0
 17976                                  .L_lambda_simple_params_loop_379f:	; copy params
 17977 0000D81D 4883FE00                	cmp rsi, 0
 17978 0000D821 740E                    	je .L_lambda_simple_params_end_379f
 17979 0000D823 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17980 0000D828 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17981 0000D82C 48FFC6                  	inc rsi
 17982 0000D82F EBEC                    	jmp .L_lambda_simple_params_loop_379f
 17983                                  .L_lambda_simple_params_end_379f:
 17984 0000D831 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17985 0000D834 4889C3                  	mov rbx, rax
 17986 0000D837 58                      	pop rax
 17987 0000D838 C60005                  	mov byte [rax], T_closure
 17988 0000D83B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17989 0000D83F 48C74009[4CD80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_379f
 17990 0000D847 E9FF000000              	jmp .L_lambda_simple_end_379f
 17991                                  .L_lambda_simple_code_379f:	; lambda-simple body
 17992 0000D84C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17993 0000D852 740B                    	je .L_lambda_simple_arity_check_ok_379f
 17994 0000D854 FF742410                	push qword [rsp + 8 * 2]
 17995 0000D858 6A01                    	push 1
 17996 0000D85A E928460000              	jmp L_error_incorrect_arity_simple
 17997                                  .L_lambda_simple_arity_check_ok_379f:
 17998 0000D85F C8000000                	enter 0, 0
 17999 0000D863 488B0425[70030000]      	mov rax, qword [free_var_110]
 18000 0000D86B 50                      	push rax
 18001 0000D86C 488B0425[60030000]      	mov rax, qword [free_var_108]
 18002 0000D874 50                      	push rax
 18003 0000D875 6A02                    	push 2
 18004 0000D877 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18005                                  	assert_closure(rax)
    42 0000D87B 803805              <1>  cmp byte [%1], %2
    43 0000D87E 0F853E5E0000        <1>  jne L_error_incorrect_type
 18006 0000D884 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18007 0000D887 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18008 0000D88A 48890425[E8030000]      	mov qword [free_var_125], rax
 18009                                  
 18010 0000D892 48B8-                           	mov rax, sob_void
 18010 0000D894 [0000000000000000] 
 18011                                  
 18012 0000D89C 488B0425[70030000]      	mov rax, qword [free_var_110]
 18013 0000D8A4 50                      	push rax
 18014 0000D8A5 488B0425[60030000]      	mov rax, qword [free_var_108]
 18015 0000D8AD 50                      	push rax
 18016 0000D8AE 6A02                    	push 2
 18017 0000D8B0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18018                                  	assert_closure(rax)
    42 0000D8B4 803805              <1>  cmp byte [%1], %2
    43 0000D8B7 0F85055E0000        <1>  jne L_error_incorrect_type
 18019 0000D8BD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18020 0000D8C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18021 0000D8C3 48890425[10040000]      	mov qword [free_var_130], rax
 18022                                  
 18023 0000D8CB 48B8-                           	mov rax, sob_void
 18023 0000D8CD [0000000000000000] 
 18024                                  
 18025 0000D8D5 488B0425[70030000]      	mov rax, qword [free_var_110]
 18026 0000D8DD 50                      	push rax
 18027 0000D8DE 488B0425[78030000]      	mov rax, qword [free_var_111]
 18028 0000D8E6 50                      	push rax
 18029 0000D8E7 6A02                    	push 2
 18030 0000D8E9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18031                                  	assert_closure(rax)
    42 0000D8ED 803805              <1>  cmp byte [%1], %2
    43 0000D8F0 0F85CC5D0000        <1>  jne L_error_incorrect_type
 18032 0000D8F6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18033 0000D8F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18034 0000D8FC 48890425[F8030000]      	mov qword [free_var_127], rax
 18035                                  
 18036 0000D904 48B8-                           	mov rax, sob_void
 18036 0000D906 [0000000000000000] 
 18037                                  
 18038 0000D90E 488B0425[A8030000]      	mov rax, qword [free_var_117]
 18039 0000D916 50                      	push rax
 18040 0000D917 488B0425[B0030000]      	mov rax, qword [free_var_118]
 18041 0000D91F 50                      	push rax
 18042 0000D920 6A02                    	push 2
 18043 0000D922 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18044                                  	assert_closure(rax)
    42 0000D926 803805              <1>  cmp byte [%1], %2
    43 0000D929 0F85935D0000        <1>  jne L_error_incorrect_type
 18045 0000D92F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18046 0000D932 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18047 0000D935 48890425[20040000]      	mov qword [free_var_132], rax
 18048                                  
 18049 0000D93D 48B8-                           	mov rax, sob_void
 18049 0000D93F [0000000000000000] 
 18050 0000D947 C9                      	leave
 18051 0000D948 C21800                  	ret 8 * (2 + 1)
 18052                                  .L_lambda_simple_end_379f:	; new closure is in rax
 18053                                  	assert_closure(rax)
    42 0000D94B 803805              <1>  cmp byte [%1], %2
    43 0000D94E 0F856E5D0000        <1>  jne L_error_incorrect_type
 18054 0000D954 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18055 0000D957 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18056                                  
 18057 0000D95A 4889C7                  	mov rdi, rax
 18058 0000D95D E87D450000              	call print_sexpr_if_not_void
 18059                                  
 18060 0000D962 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18061 0000D967 E862450000              	call malloc
 18062 0000D96C 50                      	push rax
 18063 0000D96D BF00000000              	mov rdi, 8 * 0	; new rib
 18064 0000D972 E857450000              	call malloc
 18065 0000D977 50                      	push rax
 18066 0000D978 BF08000000              	mov rdi, 8 * 1	; extended env
 18067 0000D97D E84C450000              	call malloc
 18068 0000D982 488B7D10                	mov rdi, ENV
 18069 0000D986 BE00000000              	mov rsi, 0
 18070 0000D98B BA01000000              	mov rdx, 1
 18071                                  .L_lambda_simple_env_loop_37a0:	; ext_env[i + 1] <-- env[i]
 18072 0000D990 4883FE00                	cmp rsi, 0
 18073 0000D994 7410                    	je .L_lambda_simple_env_end_37a0
 18074 0000D996 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18075 0000D99A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18076 0000D99E 48FFC6                  	inc rsi
 18077 0000D9A1 48FFC2                  	inc rdx
 18078 0000D9A4 EBEA                    	jmp .L_lambda_simple_env_loop_37a0
 18079                                  .L_lambda_simple_env_end_37a0:
 18080 0000D9A6 5B                      	pop rbx
 18081 0000D9A7 BE00000000              	mov rsi, 0
 18082                                  .L_lambda_simple_params_loop_37a0:	; copy params
 18083 0000D9AC 4883FE00                	cmp rsi, 0
 18084 0000D9B0 740E                    	je .L_lambda_simple_params_end_37a0
 18085 0000D9B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18086 0000D9B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18087 0000D9BB 48FFC6                  	inc rsi
 18088 0000D9BE EBEC                    	jmp .L_lambda_simple_params_loop_37a0
 18089                                  .L_lambda_simple_params_end_37a0:
 18090 0000D9C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18091 0000D9C3 4889C3                  	mov rbx, rax
 18092 0000D9C6 58                      	pop rax
 18093 0000D9C7 C60005                  	mov byte [rax], T_closure
 18094 0000D9CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18095 0000D9CE 48C74009[DBD90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a0
 18096 0000D9D6 E9F30B0000              	jmp .L_lambda_simple_end_37a0
 18097                                  .L_lambda_simple_code_37a0:	; lambda-simple body
 18098 0000D9DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18099 0000D9E1 740B                    	je .L_lambda_simple_arity_check_ok_37a0
 18100 0000D9E3 FF742410                	push qword [rsp + 8 * 2]
 18101 0000D9E7 6A01                    	push 1
 18102 0000D9E9 E999440000              	jmp L_error_incorrect_arity_simple
 18103                                  .L_lambda_simple_arity_check_ok_37a0:
 18104 0000D9EE C8000000                	enter 0, 0
 18105 0000D9F2 48B8-                   	mov rax,L_constants + 23
 18105 0000D9F4 [1700000000000000] 
 18106 0000D9FC 50                      	push rax
 18107 0000D9FD 6A01                    	push 1
 18108 0000D9FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18109 0000DA04 E8C5440000              	call malloc
 18110 0000DA09 50                      	push rax
 18111 0000DA0A BF08000000              	mov rdi, 8 * 1	; new rib
 18112 0000DA0F E8BA440000              	call malloc
 18113 0000DA14 50                      	push rax
 18114 0000DA15 BF10000000              	mov rdi, 8 * 2	; extended env
 18115 0000DA1A E8AF440000              	call malloc
 18116 0000DA1F 488B7D10                	mov rdi, ENV
 18117 0000DA23 BE00000000              	mov rsi, 0
 18118 0000DA28 BA01000000              	mov rdx, 1
 18119                                  .L_lambda_simple_env_loop_37a1:	; ext_env[i + 1] <-- env[i]
 18120 0000DA2D 4883FE01                	cmp rsi, 1
 18121 0000DA31 7410                    	je .L_lambda_simple_env_end_37a1
 18122 0000DA33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18123 0000DA37 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18124 0000DA3B 48FFC6                  	inc rsi
 18125 0000DA3E 48FFC2                  	inc rdx
 18126 0000DA41 EBEA                    	jmp .L_lambda_simple_env_loop_37a1
 18127                                  .L_lambda_simple_env_end_37a1:
 18128 0000DA43 5B                      	pop rbx
 18129 0000DA44 BE00000000              	mov rsi, 0
 18130                                  .L_lambda_simple_params_loop_37a1:	; copy params
 18131 0000DA49 4883FE01                	cmp rsi, 1
 18132 0000DA4D 740E                    	je .L_lambda_simple_params_end_37a1
 18133 0000DA4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18134 0000DA54 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18135 0000DA58 48FFC6                  	inc rsi
 18136 0000DA5B EBEC                    	jmp .L_lambda_simple_params_loop_37a1
 18137                                  .L_lambda_simple_params_end_37a1:
 18138 0000DA5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18139 0000DA60 4889C3                  	mov rbx, rax
 18140 0000DA63 58                      	pop rax
 18141 0000DA64 C60005                  	mov byte [rax], T_closure
 18142 0000DA67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18143 0000DA6B 48C74009[78DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a1
 18144 0000DA73 E9F20A0000              	jmp .L_lambda_simple_end_37a1
 18145                                  .L_lambda_simple_code_37a1:	; lambda-simple body
 18146 0000DA78 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18147 0000DA7E 740B                    	je .L_lambda_simple_arity_check_ok_37a1
 18148 0000DA80 FF742410                	push qword [rsp + 8 * 2]
 18149 0000DA84 6A01                    	push 1
 18150 0000DA86 E9FC430000              	jmp L_error_incorrect_arity_simple
 18151                                  .L_lambda_simple_arity_check_ok_37a1:
 18152 0000DA8B C8000000                	enter 0, 0
 18153 0000DA8F BF08000000              	mov rdi, 8
 18154 0000DA94 E835440000              	call malloc
 18155 0000DA99 488B5D20                	mov rbx, PARAM(0)
 18156 0000DA9D 488918                  	mov qword [rax], rbx
 18157 0000DAA0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18158                                  
 18159 0000DAA4 48B8-                            	mov rax, sob_void
 18159 0000DAA6 [0000000000000000] 
 18160                                  
 18161 0000DAAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18162 0000DAB3 E816440000              	call malloc
 18163 0000DAB8 50                      	push rax
 18164 0000DAB9 BF08000000              	mov rdi, 8 * 1	; new rib
 18165 0000DABE E80B440000              	call malloc
 18166 0000DAC3 50                      	push rax
 18167 0000DAC4 BF18000000              	mov rdi, 8 * 3	; extended env
 18168 0000DAC9 E800440000              	call malloc
 18169 0000DACE 488B7D10                	mov rdi, ENV
 18170 0000DAD2 BE00000000              	mov rsi, 0
 18171 0000DAD7 BA01000000              	mov rdx, 1
 18172                                  .L_lambda_simple_env_loop_37a2:	; ext_env[i + 1] <-- env[i]
 18173 0000DADC 4883FE02                	cmp rsi, 2
 18174 0000DAE0 7410                    	je .L_lambda_simple_env_end_37a2
 18175 0000DAE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18176 0000DAE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18177 0000DAEA 48FFC6                  	inc rsi
 18178 0000DAED 48FFC2                  	inc rdx
 18179 0000DAF0 EBEA                    	jmp .L_lambda_simple_env_loop_37a2
 18180                                  .L_lambda_simple_env_end_37a2:
 18181 0000DAF2 5B                      	pop rbx
 18182 0000DAF3 BE00000000              	mov rsi, 0
 18183                                  .L_lambda_simple_params_loop_37a2:	; copy params
 18184 0000DAF8 4883FE01                	cmp rsi, 1
 18185 0000DAFC 740E                    	je .L_lambda_simple_params_end_37a2
 18186 0000DAFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18187 0000DB03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18188 0000DB07 48FFC6                  	inc rsi
 18189 0000DB0A EBEC                    	jmp .L_lambda_simple_params_loop_37a2
 18190                                  .L_lambda_simple_params_end_37a2:
 18191 0000DB0C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18192 0000DB0F 4889C3                  	mov rbx, rax
 18193 0000DB12 58                      	pop rax
 18194 0000DB13 C60005                  	mov byte [rax], T_closure
 18195 0000DB16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18196 0000DB1A 48C74009[27DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a2
 18197 0000DB22 E9A9010000              	jmp .L_lambda_simple_end_37a2
 18198                                  .L_lambda_simple_code_37a2:	; lambda-simple body
 18199 0000DB27 48837C241004            	cmp qword [rsp + 8 * 2], 4
 18200 0000DB2D 740B                    	je .L_lambda_simple_arity_check_ok_37a2
 18201 0000DB2F FF742410                	push qword [rsp + 8 * 2]
 18202 0000DB33 6A04                    	push 4
 18203 0000DB35 E94D430000              	jmp L_error_incorrect_arity_simple
 18204                                  .L_lambda_simple_arity_check_ok_37a2:
 18205 0000DB3A C8000000                	enter 0, 0
 18206 0000DB3E 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 18207 0000DB42 50                      	push rax
 18208 0000DB43 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18209 0000DB47 50                      	push rax
 18210 0000DB48 6A02                    	push 2
 18211 0000DB4A 488B0425[50030000]      	mov rax, qword [free_var_106]
 18212                                  	assert_closure(rax)
    42 0000DB52 803805              <1>  cmp byte [%1], %2
    43 0000DB55 0F85675B0000        <1>  jne L_error_incorrect_type
 18213 0000DB5B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18214 0000DB5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18215 0000DB61 483D[02000000]          	cmp rax, sob_boolean_false
 18216 0000DB67 0F855F010000            	jne .L_or_end_042d
 18217 0000DB6D 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 18218 0000DB71 50                      	push rax
 18219 0000DB72 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18220 0000DB76 50                      	push rax
 18221 0000DB77 6A02                    	push 2
 18222 0000DB79 488B0425[30030000]      	mov rax, qword [free_var_102]
 18223                                  	assert_closure(rax)
    42 0000DB81 803805              <1>  cmp byte [%1], %2
    43 0000DB84 0F85385B0000        <1>  jne L_error_incorrect_type
 18224 0000DB8A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18225 0000DB8D FF5009                  	call SOB_CLOSURE_CODE(rax)
 18226                                  
 18227 0000DB90 483D[02000000]                  	cmp rax, sob_boolean_false
 18228                                  
 18229 0000DB96 0F8426010000                    	je .L_if_else_4807
 18230 0000DB9C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18231 0000DBA0 50                      	push rax
 18232 0000DBA1 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 18233 0000DBA5 50                      	push rax
 18234 0000DBA6 6A02                    	push 2
 18235 0000DBA8 488B0425[78010000]      	mov rax, qword [free_var_47]
 18236                                  	assert_closure(rax)
    42 0000DBB0 803805              <1>  cmp byte [%1], %2
    43 0000DBB3 0F85095B0000        <1>  jne L_error_incorrect_type
 18237 0000DBB9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18238 0000DBBC FF5009                  	call SOB_CLOSURE_CODE(rax)
 18239 0000DBBF 50                      	push rax
 18240 0000DBC0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18241 0000DBC4 50                      	push rax
 18242 0000DBC5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18243 0000DBC9 50                      	push rax
 18244 0000DBCA 6A02                    	push 2
 18245 0000DBCC 488B0425[78010000]      	mov rax, qword [free_var_47]
 18246                                  	assert_closure(rax)
    42 0000DBD4 803805              <1>  cmp byte [%1], %2
    43 0000DBD7 0F85E55A0000        <1>  jne L_error_incorrect_type
 18247 0000DBDD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18248 0000DBE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18249 0000DBE3 50                      	push rax
 18250 0000DBE4 6A02                    	push 2
 18251 0000DBE6 488B4510                	mov rax, qword [rbp + 8 * 2]
 18252                                  
 18253 0000DBEA 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18254                                  
 18255 0000DBEE 488B00                                            	mov rax, qword[rax + 8 * 0]
 18256                                  	assert_closure(rax)
    42 0000DBF1 803805              <1>  cmp byte [%1], %2
    43 0000DBF4 0F85C85A0000        <1>  jne L_error_incorrect_type
 18257 0000DBFA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18258 0000DBFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 18259                                  
 18260 0000DC00 483D[02000000]                  	cmp rax, sob_boolean_false
 18261                                  
 18262 0000DC06 0F84AA000000                    	je .L_if_else_4808
 18263 0000DC0C 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 18264 0000DC10 50                      	push rax
 18265 0000DC11 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 18266 0000DC15 50                      	push rax
 18267 0000DC16 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18268 0000DC1A 50                      	push rax
 18269 0000DC1B 48B8-                   	mov rax,L_constants + 128
 18269 0000DC1D [8000000000000000] 
 18270 0000DC25 50                      	push rax
 18271 0000DC26 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18272 0000DC2A 50                      	push rax
 18273 0000DC2B 6A02                    	push 2
 18274 0000DC2D 488B0425[08030000]      	mov rax, qword [free_var_97]
 18275                                  	assert_closure(rax)
    42 0000DC35 803805              <1>  cmp byte [%1], %2
    43 0000DC38 0F85845A0000        <1>  jne L_error_incorrect_type
 18276 0000DC3E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18277 0000DC41 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18278 0000DC44 50                      	push rax
 18279 0000DC45 6A04                    	push 4
 18280 0000DC47 488B4510                	mov rax, qword [rbp + 8 * 2]
 18281                                  
 18282 0000DC4B 488B00                                            	mov rax, qword[rax + 8 * 0]
 18283                                  
 18284 0000DC4E 488B00                                            	mov rax, qword[rax + 8 * 0]
 18285 0000DC51 488B00                  	mov rax, qword [rax]
 18286                                  .L_applic_TC_4056:
 18287 0000DC54 803805                  	cmp byte [rax], T_closure
 18288 0000DC57 0F8526520000            	jne L_code_ptr_error
 18289 0000DC5D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18290 0000DC61 53                      	push rbx
 18291 0000DC62 FF7508                  	push qword [rbp + 8]
 18292 0000DC65 FF7500                  	push qword [rbp]
 18293 0000DC68 488B4D18                	mov rcx, [rbp + 3 * 8]
 18294 0000DC6C 488B542418              	mov rdx, [rsp + 3 * 8]
 18295 0000DC71 488D7204                	lea rsi, [rdx + 4]
 18296 0000DC75 4C8D4EFF                	lea r9, [rsi - 1]
 18297 0000DC79 488D7903                	lea rdi, [rcx + 3]
 18298 0000DC7D 4D31C0                  	xor r8, r8
 18299                                  .L_tc_recycle_frame_loop_4056:
 18300 0000DC80 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18301 0000DC84 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18302 0000DC89 49FFC9                  	dec r9
 18303 0000DC8C 4D31C0                  	xor r8, r8
 18304 0000DC8F 48FFCF                  	dec rdi
 18305 0000DC92 48FFCE                  	dec rsi
 18306 0000DC95 4883FE00                	cmp rsi, 0
 18307 0000DC99 75E5                    	jne .L_tc_recycle_frame_loop_4056
 18308                                  .L_tc_recycle_frame_done_4056:
 18309                                  ;this pop rbp in sot to the right place
 18310 0000DC9B 4989C9                  	mov r9, rcx
 18311 0000DC9E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18312 0000DCA6 4C01CC                  	add rsp, r9
 18313 0000DCA9 5D                      	pop rbp
 18314 0000DCAA 488B4D00                	mov rcx, qword [rbp]
 18315 0000DCAE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18316 0000DCB2 FFE3                    	jmp rbx
 18317                                  
 18318 0000DCB4 EB0A                            	jmp .L_if_end_4808
 18319                                  
 18320                                          	.L_if_else_4808:
 18321 0000DCB6 48B8-                   	mov rax,L_constants + 2
 18321 0000DCB8 [0200000000000000] 
 18322                                  
 18323                                          	.L_if_end_4808:
 18324                                  
 18325 0000DCC0 EB0A                            	jmp .L_if_end_4807
 18326                                  
 18327                                          	.L_if_else_4807:
 18328 0000DCC2 48B8-                   	mov rax,L_constants + 2
 18328 0000DCC4 [0200000000000000] 
 18329                                  
 18330                                          	.L_if_end_4807:
 18331                                  .L_or_end_042d:
 18332 0000DCCC C9                      	leave
 18333 0000DCCD C23000                  	ret 8 * (2 + 4)
 18334                                  .L_lambda_simple_end_37a2:	; new closure is in rax
 18335 0000DCD0 50                      	push rax
 18336 0000DCD1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18337 0000DCD5 8F00                    	pop qword [rax]
 18338 0000DCD7 48B8-                   	mov rax, sob_void
 18338 0000DCD9 [0000000000000000] 
 18339                                  
 18340 0000DCE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18341 0000DCE6 E8E3410000              	call malloc
 18342 0000DCEB 50                      	push rax
 18343 0000DCEC BF08000000              	mov rdi, 8 * 1	; new rib
 18344 0000DCF1 E8D8410000              	call malloc
 18345 0000DCF6 50                      	push rax
 18346 0000DCF7 BF18000000              	mov rdi, 8 * 3	; extended env
 18347 0000DCFC E8CD410000              	call malloc
 18348 0000DD01 488B7D10                	mov rdi, ENV
 18349 0000DD05 BE00000000              	mov rsi, 0
 18350 0000DD0A BA01000000              	mov rdx, 1
 18351                                  .L_lambda_simple_env_loop_37a3:	; ext_env[i + 1] <-- env[i]
 18352 0000DD0F 4883FE02                	cmp rsi, 2
 18353 0000DD13 7410                    	je .L_lambda_simple_env_end_37a3
 18354 0000DD15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18355 0000DD19 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18356 0000DD1D 48FFC6                  	inc rsi
 18357 0000DD20 48FFC2                  	inc rdx
 18358 0000DD23 EBEA                    	jmp .L_lambda_simple_env_loop_37a3
 18359                                  .L_lambda_simple_env_end_37a3:
 18360 0000DD25 5B                      	pop rbx
 18361 0000DD26 BE00000000              	mov rsi, 0
 18362                                  .L_lambda_simple_params_loop_37a3:	; copy params
 18363 0000DD2B 4883FE01                	cmp rsi, 1
 18364 0000DD2F 740E                    	je .L_lambda_simple_params_end_37a3
 18365 0000DD31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18366 0000DD36 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18367 0000DD3A 48FFC6                  	inc rsi
 18368 0000DD3D EBEC                    	jmp .L_lambda_simple_params_loop_37a3
 18369                                  .L_lambda_simple_params_end_37a3:
 18370 0000DD3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18371 0000DD42 4889C3                  	mov rbx, rax
 18372 0000DD45 58                      	pop rax
 18373 0000DD46 C60005                  	mov byte [rax], T_closure
 18374 0000DD49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18375 0000DD4D 48C74009[5ADD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a3
 18376 0000DD55 E921020000              	jmp .L_lambda_simple_end_37a3
 18377                                  .L_lambda_simple_code_37a3:	; lambda-simple body
 18378 0000DD5A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18379 0000DD60 740B                    	je .L_lambda_simple_arity_check_ok_37a3
 18380 0000DD62 FF742410                	push qword [rsp + 8 * 2]
 18381 0000DD66 6A02                    	push 2
 18382 0000DD68 E91A410000              	jmp L_error_incorrect_arity_simple
 18383                                  .L_lambda_simple_arity_check_ok_37a3:
 18384 0000DD6D C8000000                	enter 0, 0
 18385 0000DD71 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18386 0000DD75 50                      	push rax
 18387 0000DD76 6A01                    	push 1
 18388 0000DD78 488B0425[90000000]      	mov rax, qword [free_var_18]
 18389                                  	assert_closure(rax)
    42 0000DD80 803805              <1>  cmp byte [%1], %2
    43 0000DD83 0F8539590000        <1>  jne L_error_incorrect_type
 18390 0000DD89 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18391 0000DD8C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18392 0000DD8F 50                      	push rax
 18393 0000DD90 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18394 0000DD94 50                      	push rax
 18395 0000DD95 6A01                    	push 1
 18396 0000DD97 488B0425[90000000]      	mov rax, qword [free_var_18]
 18397                                  	assert_closure(rax)
    42 0000DD9F 803805              <1>  cmp byte [%1], %2
    43 0000DDA2 0F851A590000        <1>  jne L_error_incorrect_type
 18398 0000DDA8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18399 0000DDAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 18400 0000DDAE 50                      	push rax
 18401 0000DDAF 6A02                    	push 2
 18402 0000DDB1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18403 0000DDB6 E813410000              	call malloc
 18404 0000DDBB 50                      	push rax
 18405 0000DDBC BF10000000              	mov rdi, 8 * 2	; new rib
 18406 0000DDC1 E808410000              	call malloc
 18407 0000DDC6 50                      	push rax
 18408 0000DDC7 BF20000000              	mov rdi, 8 * 4	; extended env
 18409 0000DDCC E8FD400000              	call malloc
 18410 0000DDD1 488B7D10                	mov rdi, ENV
 18411 0000DDD5 BE00000000              	mov rsi, 0
 18412 0000DDDA BA01000000              	mov rdx, 1
 18413                                  .L_lambda_simple_env_loop_37a4:	; ext_env[i + 1] <-- env[i]
 18414 0000DDDF 4883FE03                	cmp rsi, 3
 18415 0000DDE3 7410                    	je .L_lambda_simple_env_end_37a4
 18416 0000DDE5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18417 0000DDE9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18418 0000DDED 48FFC6                  	inc rsi
 18419 0000DDF0 48FFC2                  	inc rdx
 18420 0000DDF3 EBEA                    	jmp .L_lambda_simple_env_loop_37a4
 18421                                  .L_lambda_simple_env_end_37a4:
 18422 0000DDF5 5B                      	pop rbx
 18423 0000DDF6 BE00000000              	mov rsi, 0
 18424                                  .L_lambda_simple_params_loop_37a4:	; copy params
 18425 0000DDFB 4883FE02                	cmp rsi, 2
 18426 0000DDFF 740E                    	je .L_lambda_simple_params_end_37a4
 18427 0000DE01 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18428 0000DE06 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18429 0000DE0A 48FFC6                  	inc rsi
 18430 0000DE0D EBEC                    	jmp .L_lambda_simple_params_loop_37a4
 18431                                  .L_lambda_simple_params_end_37a4:
 18432 0000DE0F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18433 0000DE12 4889C3                  	mov rbx, rax
 18434 0000DE15 58                      	pop rax
 18435 0000DE16 C60005                  	mov byte [rax], T_closure
 18436 0000DE19 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18437 0000DE1D 48C74009[2ADE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a4
 18438 0000DE25 E9ED000000              	jmp .L_lambda_simple_end_37a4
 18439                                  .L_lambda_simple_code_37a4:	; lambda-simple body
 18440 0000DE2A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18441 0000DE30 740B                    	je .L_lambda_simple_arity_check_ok_37a4
 18442 0000DE32 FF742410                	push qword [rsp + 8 * 2]
 18443 0000DE36 6A02                    	push 2
 18444 0000DE38 E94A400000              	jmp L_error_incorrect_arity_simple
 18445                                  .L_lambda_simple_arity_check_ok_37a4:
 18446 0000DE3D C8000000                	enter 0, 0
 18447 0000DE41 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18448 0000DE45 50                      	push rax
 18449 0000DE46 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18450 0000DE4A 50                      	push rax
 18451 0000DE4B 6A02                    	push 2
 18452 0000DE4D 488B0425[50030000]      	mov rax, qword [free_var_106]
 18453                                  	assert_closure(rax)
    42 0000DE55 803805              <1>  cmp byte [%1], %2
    43 0000DE58 0F8564580000        <1>  jne L_error_incorrect_type
 18454 0000DE5E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18455 0000DE61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18456                                  
 18457 0000DE64 483D[02000000]                  	cmp rax, sob_boolean_false
 18458                                  
 18459 0000DE6A 0F8499000000                    	je .L_if_else_4809
 18460 0000DE70 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18461 0000DE74 50                      	push rax
 18462 0000DE75 488B4510                	mov rax, qword [rbp + 8 * 2]
 18463                                  
 18464 0000DE79 488B00                                            	mov rax, qword[rax + 8 * 0]
 18465                                  
 18466 0000DE7C 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18467 0000DE80 50                      	push rax
 18468 0000DE81 488B4510                	mov rax, qword [rbp + 8 * 2]
 18469                                  
 18470 0000DE85 488B00                                            	mov rax, qword[rax + 8 * 0]
 18471                                  
 18472 0000DE88 488B00                                            	mov rax, qword[rax + 8 * 0]
 18473 0000DE8B 50                      	push rax
 18474 0000DE8C 48B8-                   	mov rax,L_constants + 32
 18474 0000DE8E [2000000000000000] 
 18475 0000DE96 50                      	push rax
 18476 0000DE97 6A04                    	push 4
 18477 0000DE99 488B4510                	mov rax, qword [rbp + 8 * 2]
 18478                                  
 18479 0000DE9D 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18480                                  
 18481 0000DEA1 488B00                                            	mov rax, qword[rax + 8 * 0]
 18482 0000DEA4 488B00                  	mov rax, qword [rax]
 18483                                  .L_applic_TC_4057:
 18484 0000DEA7 803805                  	cmp byte [rax], T_closure
 18485 0000DEAA 0F85D34F0000            	jne L_code_ptr_error
 18486 0000DEB0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18487 0000DEB4 53                      	push rbx
 18488 0000DEB5 FF7508                  	push qword [rbp + 8]
 18489 0000DEB8 FF7500                  	push qword [rbp]
 18490 0000DEBB 488B4D18                	mov rcx, [rbp + 3 * 8]
 18491 0000DEBF 488B542418              	mov rdx, [rsp + 3 * 8]
 18492 0000DEC4 488D7204                	lea rsi, [rdx + 4]
 18493 0000DEC8 4C8D4EFF                	lea r9, [rsi - 1]
 18494 0000DECC 488D7903                	lea rdi, [rcx + 3]
 18495 0000DED0 4D31C0                  	xor r8, r8
 18496                                  .L_tc_recycle_frame_loop_4057:
 18497 0000DED3 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18498 0000DED7 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18499 0000DEDC 49FFC9                  	dec r9
 18500 0000DEDF 4D31C0                  	xor r8, r8
 18501 0000DEE2 48FFCF                  	dec rdi
 18502 0000DEE5 48FFCE                  	dec rsi
 18503 0000DEE8 4883FE00                	cmp rsi, 0
 18504 0000DEEC 75E5                    	jne .L_tc_recycle_frame_loop_4057
 18505                                  .L_tc_recycle_frame_done_4057:
 18506                                  ;this pop rbp in sot to the right place
 18507 0000DEEE 4989C9                  	mov r9, rcx
 18508 0000DEF1 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18509 0000DEF9 4C01CC                  	add rsp, r9
 18510 0000DEFC 5D                      	pop rbp
 18511 0000DEFD 488B4D00                	mov rcx, qword [rbp]
 18512 0000DF01 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18513 0000DF05 FFE3                    	jmp rbx
 18514                                  
 18515 0000DF07 EB0A                            	jmp .L_if_end_4809
 18516                                  
 18517                                          	.L_if_else_4809:
 18518 0000DF09 48B8-                   	mov rax,L_constants + 2
 18518 0000DF0B [0200000000000000] 
 18519                                  
 18520                                          	.L_if_end_4809:
 18521 0000DF13 C9                      	leave
 18522 0000DF14 C22000                  	ret 8 * (2 + 2)
 18523                                  .L_lambda_simple_end_37a4:	; new closure is in rax
 18524                                  .L_applic_TC_4058:
 18525 0000DF17 803805                  	cmp byte [rax], T_closure
 18526 0000DF1A 0F85634F0000            	jne L_code_ptr_error
 18527 0000DF20 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18528 0000DF24 53                      	push rbx
 18529 0000DF25 FF7508                  	push qword [rbp + 8]
 18530 0000DF28 FF7500                  	push qword [rbp]
 18531 0000DF2B 488B4D18                	mov rcx, [rbp + 3 * 8]
 18532 0000DF2F 488B542418              	mov rdx, [rsp + 3 * 8]
 18533 0000DF34 488D7204                	lea rsi, [rdx + 4]
 18534 0000DF38 4C8D4EFF                	lea r9, [rsi - 1]
 18535 0000DF3C 488D7903                	lea rdi, [rcx + 3]
 18536 0000DF40 4D31C0                  	xor r8, r8
 18537                                  .L_tc_recycle_frame_loop_4058:
 18538 0000DF43 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18539 0000DF47 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18540 0000DF4C 49FFC9                  	dec r9
 18541 0000DF4F 4D31C0                  	xor r8, r8
 18542 0000DF52 48FFCF                  	dec rdi
 18543 0000DF55 48FFCE                  	dec rsi
 18544 0000DF58 4883FE00                	cmp rsi, 0
 18545 0000DF5C 75E5                    	jne .L_tc_recycle_frame_loop_4058
 18546                                  .L_tc_recycle_frame_done_4058:
 18547                                  ;this pop rbp in sot to the right place
 18548 0000DF5E 4989C9                  	mov r9, rcx
 18549 0000DF61 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18550 0000DF69 4C01CC                  	add rsp, r9
 18551 0000DF6C 5D                      	pop rbp
 18552 0000DF6D 488B4D00                	mov rcx, qword [rbp]
 18553 0000DF71 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18554 0000DF75 FFE3                    	jmp rbx
 18555 0000DF77 C9                      	leave
 18556 0000DF78 C22000                  	ret 8 * (2 + 2)
 18557                                  .L_lambda_simple_end_37a3:	; new closure is in rax
 18558 0000DF7B 50                      	push rax
 18559 0000DF7C 6A01                    	push 1
 18560 0000DF7E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18561 0000DF83 E8463F0000              	call malloc
 18562 0000DF88 50                      	push rax
 18563 0000DF89 BF08000000              	mov rdi, 8 * 1	; new rib
 18564 0000DF8E E83B3F0000              	call malloc
 18565 0000DF93 50                      	push rax
 18566 0000DF94 BF18000000              	mov rdi, 8 * 3	; extended env
 18567 0000DF99 E8303F0000              	call malloc
 18568 0000DF9E 488B7D10                	mov rdi, ENV
 18569 0000DFA2 BE00000000              	mov rsi, 0
 18570 0000DFA7 BA01000000              	mov rdx, 1
 18571                                  .L_lambda_simple_env_loop_37a5:	; ext_env[i + 1] <-- env[i]
 18572 0000DFAC 4883FE02                	cmp rsi, 2
 18573 0000DFB0 7410                    	je .L_lambda_simple_env_end_37a5
 18574 0000DFB2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18575 0000DFB6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18576 0000DFBA 48FFC6                  	inc rsi
 18577 0000DFBD 48FFC2                  	inc rdx
 18578 0000DFC0 EBEA                    	jmp .L_lambda_simple_env_loop_37a5
 18579                                  .L_lambda_simple_env_end_37a5:
 18580 0000DFC2 5B                      	pop rbx
 18581 0000DFC3 BE00000000              	mov rsi, 0
 18582                                  .L_lambda_simple_params_loop_37a5:	; copy params
 18583 0000DFC8 4883FE01                	cmp rsi, 1
 18584 0000DFCC 740E                    	je .L_lambda_simple_params_end_37a5
 18585 0000DFCE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18586 0000DFD3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18587 0000DFD7 48FFC6                  	inc rsi
 18588 0000DFDA EBEC                    	jmp .L_lambda_simple_params_loop_37a5
 18589                                  .L_lambda_simple_params_end_37a5:
 18590 0000DFDC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18591 0000DFDF 4889C3                  	mov rbx, rax
 18592 0000DFE2 58                      	pop rax
 18593 0000DFE3 C60005                  	mov byte [rax], T_closure
 18594 0000DFE6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18595 0000DFEA 48C74009[F7DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a5
 18596 0000DFF2 E90F050000              	jmp .L_lambda_simple_end_37a5
 18597                                  .L_lambda_simple_code_37a5:	; lambda-simple body
 18598 0000DFF7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18599 0000DFFD 740B                    	je .L_lambda_simple_arity_check_ok_37a5
 18600 0000DFFF FF742410                	push qword [rsp + 8 * 2]
 18601 0000E003 6A01                    	push 1
 18602 0000E005 E97D3E0000              	jmp L_error_incorrect_arity_simple
 18603                                  .L_lambda_simple_arity_check_ok_37a5:
 18604 0000E00A C8000000                	enter 0, 0
 18605 0000E00E 48B8-                   	mov rax,L_constants + 23
 18605 0000E010 [1700000000000000] 
 18606 0000E018 50                      	push rax
 18607 0000E019 6A01                    	push 1
 18608 0000E01B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18609 0000E020 E8A93E0000              	call malloc
 18610 0000E025 50                      	push rax
 18611 0000E026 BF08000000              	mov rdi, 8 * 1	; new rib
 18612 0000E02B E89E3E0000              	call malloc
 18613 0000E030 50                      	push rax
 18614 0000E031 BF20000000              	mov rdi, 8 * 4	; extended env
 18615 0000E036 E8933E0000              	call malloc
 18616 0000E03B 488B7D10                	mov rdi, ENV
 18617 0000E03F BE00000000              	mov rsi, 0
 18618 0000E044 BA01000000              	mov rdx, 1
 18619                                  .L_lambda_simple_env_loop_37a6:	; ext_env[i + 1] <-- env[i]
 18620 0000E049 4883FE03                	cmp rsi, 3
 18621 0000E04D 7410                    	je .L_lambda_simple_env_end_37a6
 18622 0000E04F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18623 0000E053 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18624 0000E057 48FFC6                  	inc rsi
 18625 0000E05A 48FFC2                  	inc rdx
 18626 0000E05D EBEA                    	jmp .L_lambda_simple_env_loop_37a6
 18627                                  .L_lambda_simple_env_end_37a6:
 18628 0000E05F 5B                      	pop rbx
 18629 0000E060 BE00000000              	mov rsi, 0
 18630                                  .L_lambda_simple_params_loop_37a6:	; copy params
 18631 0000E065 4883FE01                	cmp rsi, 1
 18632 0000E069 740E                    	je .L_lambda_simple_params_end_37a6
 18633 0000E06B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18634 0000E070 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18635 0000E074 48FFC6                  	inc rsi
 18636 0000E077 EBEC                    	jmp .L_lambda_simple_params_loop_37a6
 18637                                  .L_lambda_simple_params_end_37a6:
 18638 0000E079 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18639 0000E07C 4889C3                  	mov rbx, rax
 18640 0000E07F 58                      	pop rax
 18641 0000E080 C60005                  	mov byte [rax], T_closure
 18642 0000E083 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18643 0000E087 48C74009[94E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a6
 18644 0000E08F E90E040000              	jmp .L_lambda_simple_end_37a6
 18645                                  .L_lambda_simple_code_37a6:	; lambda-simple body
 18646 0000E094 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18647 0000E09A 740B                    	je .L_lambda_simple_arity_check_ok_37a6
 18648 0000E09C FF742410                	push qword [rsp + 8 * 2]
 18649 0000E0A0 6A01                    	push 1
 18650 0000E0A2 E9E03D0000              	jmp L_error_incorrect_arity_simple
 18651                                  .L_lambda_simple_arity_check_ok_37a6:
 18652 0000E0A7 C8000000                	enter 0, 0
 18653 0000E0AB BF08000000              	mov rdi, 8
 18654 0000E0B0 E8193E0000              	call malloc
 18655 0000E0B5 488B5D20                	mov rbx, PARAM(0)
 18656 0000E0B9 488918                  	mov qword [rax], rbx
 18657 0000E0BC 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18658                                  
 18659 0000E0C0 48B8-                            	mov rax, sob_void
 18659 0000E0C2 [0000000000000000] 
 18660                                  
 18661 0000E0CA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18662 0000E0CF E8FA3D0000              	call malloc
 18663 0000E0D4 50                      	push rax
 18664 0000E0D5 BF08000000              	mov rdi, 8 * 1	; new rib
 18665 0000E0DA E8EF3D0000              	call malloc
 18666 0000E0DF 50                      	push rax
 18667 0000E0E0 BF28000000              	mov rdi, 8 * 5	; extended env
 18668 0000E0E5 E8E43D0000              	call malloc
 18669 0000E0EA 488B7D10                	mov rdi, ENV
 18670 0000E0EE BE00000000              	mov rsi, 0
 18671 0000E0F3 BA01000000              	mov rdx, 1
 18672                                  .L_lambda_simple_env_loop_37a7:	; ext_env[i + 1] <-- env[i]
 18673 0000E0F8 4883FE04                	cmp rsi, 4
 18674 0000E0FC 7410                    	je .L_lambda_simple_env_end_37a7
 18675 0000E0FE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18676 0000E102 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18677 0000E106 48FFC6                  	inc rsi
 18678 0000E109 48FFC2                  	inc rdx
 18679 0000E10C EBEA                    	jmp .L_lambda_simple_env_loop_37a7
 18680                                  .L_lambda_simple_env_end_37a7:
 18681 0000E10E 5B                      	pop rbx
 18682 0000E10F BE00000000              	mov rsi, 0
 18683                                  .L_lambda_simple_params_loop_37a7:	; copy params
 18684 0000E114 4883FE01                	cmp rsi, 1
 18685 0000E118 740E                    	je .L_lambda_simple_params_end_37a7
 18686 0000E11A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18687 0000E11F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18688 0000E123 48FFC6                  	inc rsi
 18689 0000E126 EBEC                    	jmp .L_lambda_simple_params_loop_37a7
 18690                                  .L_lambda_simple_params_end_37a7:
 18691 0000E128 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18692 0000E12B 4889C3                  	mov rbx, rax
 18693 0000E12E 58                      	pop rax
 18694 0000E12F C60005                  	mov byte [rax], T_closure
 18695 0000E132 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18696 0000E136 48C74009[43E10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a7
 18697 0000E13E E94A010000              	jmp .L_lambda_simple_end_37a7
 18698                                  .L_lambda_simple_code_37a7:	; lambda-simple body
 18699 0000E143 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18700 0000E149 740B                    	je .L_lambda_simple_arity_check_ok_37a7
 18701 0000E14B FF742410                	push qword [rsp + 8 * 2]
 18702 0000E14F 6A02                    	push 2
 18703 0000E151 E9313D0000              	jmp L_error_incorrect_arity_simple
 18704                                  .L_lambda_simple_arity_check_ok_37a7:
 18705 0000E156 C8000000                	enter 0, 0
 18706 0000E15A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18707 0000E15E 50                      	push rax
 18708 0000E15F 6A01                    	push 1
 18709 0000E161 488B0425[00000000]      	mov rax, qword [free_var_0]
 18710                                  	assert_closure(rax)
    42 0000E169 803805              <1>  cmp byte [%1], %2
    43 0000E16C 0F8550550000        <1>  jne L_error_incorrect_type
 18711 0000E172 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18712 0000E175 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18713 0000E178 483D[02000000]          	cmp rax, sob_boolean_false
 18714 0000E17E 0F8505010000            	jne .L_or_end_042e
 18715 0000E184 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18716 0000E188 50                      	push rax
 18717 0000E189 6A01                    	push 1
 18718 0000E18B 488B0425[80000000]      	mov rax, qword [free_var_16]
 18719                                  	assert_closure(rax)
    42 0000E193 803805              <1>  cmp byte [%1], %2
    43 0000E196 0F8526550000        <1>  jne L_error_incorrect_type
 18720 0000E19C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18721 0000E19F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18722 0000E1A2 50                      	push rax
 18723 0000E1A3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18724 0000E1A7 50                      	push rax
 18725 0000E1A8 6A02                    	push 2
 18726 0000E1AA 488B4510                	mov rax, qword [rbp + 8 * 2]
 18727                                  
 18728 0000E1AE 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18729                                  
 18730 0000E1B2 488B00                                            	mov rax, qword[rax + 8 * 0]
 18731                                  	assert_closure(rax)
    42 0000E1B5 803805              <1>  cmp byte [%1], %2
    43 0000E1B8 0F8504550000        <1>  jne L_error_incorrect_type
 18732 0000E1BE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18733 0000E1C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18734                                  
 18735 0000E1C4 483D[02000000]                  	cmp rax, sob_boolean_false
 18736                                  
 18737 0000E1CA 0F84AF000000                    	je .L_if_else_480a
 18738 0000E1D0 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18739 0000E1D4 50                      	push rax
 18740 0000E1D5 6A01                    	push 1
 18741 0000E1D7 488B0425[88000000]      	mov rax, qword [free_var_17]
 18742                                  	assert_closure(rax)
    42 0000E1DF 803805              <1>  cmp byte [%1], %2
    43 0000E1E2 0F85DA540000        <1>  jne L_error_incorrect_type
 18743 0000E1E8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18744 0000E1EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 18745 0000E1EE 50                      	push rax
 18746 0000E1EF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18747 0000E1F3 50                      	push rax
 18748 0000E1F4 6A01                    	push 1
 18749 0000E1F6 488B0425[80000000]      	mov rax, qword [free_var_16]
 18750                                  	assert_closure(rax)
    42 0000E1FE 803805              <1>  cmp byte [%1], %2
    43 0000E201 0F85BB540000        <1>  jne L_error_incorrect_type
 18751 0000E207 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18752 0000E20A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18753 0000E20D 50                      	push rax
 18754 0000E20E 6A02                    	push 2
 18755 0000E210 488B4510                	mov rax, qword [rbp + 8 * 2]
 18756                                  
 18757 0000E214 488B00                                            	mov rax, qword[rax + 8 * 0]
 18758                                  
 18759 0000E217 488B00                                            	mov rax, qword[rax + 8 * 0]
 18760 0000E21A 488B00                  	mov rax, qword [rax]
 18761                                  .L_applic_TC_4059:
 18762 0000E21D 803805                  	cmp byte [rax], T_closure
 18763 0000E220 0F855D4C0000            	jne L_code_ptr_error
 18764 0000E226 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18765 0000E22A 53                      	push rbx
 18766 0000E22B FF7508                  	push qword [rbp + 8]
 18767 0000E22E FF7500                  	push qword [rbp]
 18768 0000E231 488B4D18                	mov rcx, [rbp + 3 * 8]
 18769 0000E235 488B542418              	mov rdx, [rsp + 3 * 8]
 18770 0000E23A 488D7204                	lea rsi, [rdx + 4]
 18771 0000E23E 4C8D4EFF                	lea r9, [rsi - 1]
 18772 0000E242 488D7903                	lea rdi, [rcx + 3]
 18773 0000E246 4D31C0                  	xor r8, r8
 18774                                  .L_tc_recycle_frame_loop_4059:
 18775 0000E249 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18776 0000E24D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18777 0000E252 49FFC9                  	dec r9
 18778 0000E255 4D31C0                  	xor r8, r8
 18779 0000E258 48FFCF                  	dec rdi
 18780 0000E25B 48FFCE                  	dec rsi
 18781 0000E25E 4883FE00                	cmp rsi, 0
 18782 0000E262 75E5                    	jne .L_tc_recycle_frame_loop_4059
 18783                                  .L_tc_recycle_frame_done_4059:
 18784                                  ;this pop rbp in sot to the right place
 18785 0000E264 4989C9                  	mov r9, rcx
 18786 0000E267 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18787 0000E26F 4C01CC                  	add rsp, r9
 18788 0000E272 5D                      	pop rbp
 18789 0000E273 488B4D00                	mov rcx, qword [rbp]
 18790 0000E277 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18791 0000E27B FFE3                    	jmp rbx
 18792                                  
 18793 0000E27D EB0A                            	jmp .L_if_end_480a
 18794                                  
 18795                                          	.L_if_else_480a:
 18796 0000E27F 48B8-                   	mov rax,L_constants + 2
 18796 0000E281 [0200000000000000] 
 18797                                  
 18798                                          	.L_if_end_480a:
 18799                                  .L_or_end_042e:
 18800 0000E289 C9                      	leave
 18801 0000E28A C22000                  	ret 8 * (2 + 2)
 18802                                  .L_lambda_simple_end_37a7:	; new closure is in rax
 18803 0000E28D 50                      	push rax
 18804 0000E28E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18805 0000E292 8F00                    	pop qword [rax]
 18806 0000E294 48B8-                   	mov rax, sob_void
 18806 0000E296 [0000000000000000] 
 18807                                  
 18808 0000E29E BF11000000              	mov rdi, (1 + 8 + 8)
 18809 0000E2A3 E8263C0000              	call malloc
 18810 0000E2A8 50                      	push rax
 18811 0000E2A9 BF08000000              	mov rdi, 8 * 1
 18812 0000E2AE E81B3C0000              	call malloc
 18813 0000E2B3 50                      	push rax
 18814 0000E2B4 BF28000000              	mov rdi, 8 * 5
 18815 0000E2B9 E8103C0000              	call malloc
 18816 0000E2BE 488B7D10                	mov rdi, ENV
 18817 0000E2C2 4831F6                  	xor rsi, rsi
 18818 0000E2C5 4831D2                  	xor rdx, rdx
 18819 0000E2C8 48FFC2                  	inc rdx
 18820                                  	.L_lambda_opt_env_loop_088d:
 18821                                  
 18822 0000E2CB 4883FE04                        	cmp rsi, 4
 18823                                  
 18824 0000E2CF 7412                            	je .L_lambda_opt_env_end_088d
 18825 0000E2D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18826 0000E2D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18827 0000E2D9 4883C201                	add rdx, 1
 18828 0000E2DD 4883C601                	add rsi, 1
 18829 0000E2E1 EBE8                    	jmp .L_lambda_opt_env_loop_088d
 18830                                  
 18831                                          	.L_lambda_opt_env_end_088d:
 18832 0000E2E3 5B                      	pop rbx
 18833 0000E2E4 4831F6                  	xor rsi, rsi
 18834                                  	.L_lambda_opt_params_loop_088d:
 18835                                  
 18836 0000E2E7 4883FE01                        	cmp rsi, 1
 18837                                  
 18838 0000E2EB 740F                            	je .L_lambda_opt_params_end_088d
 18839 0000E2ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18840 0000E2F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18841 0000E2F6 4883C601                	add rsi, 1
 18842 0000E2FA EBEB                    	jmp .L_lambda_opt_params_loop_088d
 18843                                  
 18844                                          	.L_lambda_opt_params_end_088d:
 18845 0000E2FC 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 18846 0000E2FF 4889C3                  	mov rbx, rax
 18847 0000E302 58                      	pop rax
 18848 0000E303 C60005                  	mov byte [rax], T_closure
 18849 0000E306 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18850 0000E30A 48C74009[17E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_088d
 18851                                  
 18852 0000E312 E987010000                      	jmp .L_lambda_opt_end_088d
 18853                                  
 18854                                          	.L_lambda_opt_code_088d:
 18855                                  
 18856 0000E317 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 18857                                  
 18858 0000E31D 740D                            	je .L_lambda_opt_arity_check_exact_088d  ;same num_of_args
 18859                                  
 18860 0000E31F 7F65                            	jg .L_lambda_opt_arity_check_more_088d  ;greater num_of_args
 18861 0000E321 FF742410                	push qword [rsp + 8 * 2]
 18862 0000E325 6A01                    	push 1
 18863 0000E327 E96F3B0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 18864                                  .L_lambda_opt_arity_check_exact_088d:
 18865 0000E32C 4883EC08                	sub rsp, 8 * 1
 18866 0000E330 488D7F10                	lea rdi, [rdi + (8 * 2)]
 18867 0000E334 4889E7                  	mov rdi, rsp 
 18868 0000E337 488B4708                	mov rax, qword [rdi + 8]
 18869 0000E33B 488907                  	mov qword [rdi], rax
 18870 0000E33E 488D7F08                	lea rdi, [rdi + 8]
 18871 0000E342 488B4708                	mov rax, qword [rdi + 8]
 18872 0000E346 488907                  	mov qword [rdi], rax
 18873 0000E349 488D7F08                	lea rdi, [rdi + 8]
 18874 0000E34D 488B4708                	mov rax, qword [rdi + 8]
 18875 0000E351 4889C1                  	mov rcx, rax
 18876 0000E354 4883C001                	add rax, 1
 18877 0000E358 488907                  	mov qword [rdi], rax
 18878 0000E35B 488D7F08                	lea rdi, [rdi + 8]
 18879                                  	.L_lambda_opt_stack_shrink_loop_19a5:
 18880 0000E35F 4883F900                	cmp rcx, 0
 18881 0000E363 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_19a5
 18882 0000E365 4883E901                	sub rcx, 1
 18883 0000E369 488D4010                	lea rax, [rax + (8 * 2)]
 18884 0000E36D 488B4708                	mov rax, qword [rdi + 8]
 18885 0000E371 488907                  	mov qword [rdi], rax
 18886 0000E374 488D7F08                	lea rdi, [rdi + 8]
 18887 0000E378 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_19a5
 18888                                  
 18889                                          	.L_lambda_opt_stack_shrink_loop_exit_19a5:
 18890 0000E37A 48C707[01000000]        	mov qword [rdi], sob_nil
 18891 0000E381 E997000000              	jmp .L_lambda_opt_stack_adjusted_088d
 18892                                  
 18893                                          	.L_lambda_opt_arity_check_more_088d:
 18894 0000E386 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 18895 0000E38B 488D4EFF                	lea rcx, [rsi - 1]
 18896 0000E38F 49B8-                   	mov r8, sob_nil
 18896 0000E391 [0100000000000000] 
 18897 0000E399 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 18898 0000E39E 4889F2                  	mov rdx, rsi
 18899                                  	.L_lambda_opt_stack_shrink_loop_19a6:
 18900 0000E3A1 4883F900                	cmp rcx, 0
 18901 0000E3A5 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_19a6
 18902 0000E3A7 BF11000000              	mov rdi, 1 + (8 * 2)
 18903 0000E3AC E81D3B0000              	call malloc
 18904 0000E3B1 C60021                  	mov byte [rax], T_pair
 18905 0000E3B4 488B1E                  	mov rbx, qword [rsi]
 18906 0000E3B7 48895801                	mov SOB_PAIR_CAR(rax), rbx
 18907 0000E3BB 4C894009                	mov SOB_PAIR_CDR(rax), r8
 18908 0000E3BF 4883C6F8                	add rsi, -8
 18909 0000E3C3 4883E901                	sub rcx, 1
 18910 0000E3C7 4989C0                  	mov r8, rax
 18911 0000E3CA EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_19a6
 18912                                  
 18913                                          	.L_lambda_opt_stack_shrink_loop_exit_19a6:
 18914 0000E3CC 4C8902                  	mov qword [rdx], r8
 18915 0000E3CF 4883EA08                	sub rdx, 8 * 1
 18916 0000E3D3 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 18917                                  
 18918 0000E3D8 B901000000                      	mov rcx, 1 
 18919                                  
 18920                                          	.L_lambda_opt_stack_shrink_loop_19a7:
 18921 0000E3DD 4883F900                	cmp rcx, 0
 18922 0000E3E1 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_19a7
 18923 0000E3E3 488B06                  	mov rax, qword [rsi]
 18924 0000E3E6 488902                  	mov qword [rdx], rax
 18925 0000E3E9 488D76F8                	lea rsi, [rsi - 8]
 18926 0000E3ED 4883C2F8                	add rdx, -8
 18927 0000E3F1 4883C1FF                	add rcx, -1
 18928 0000E3F5 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_19a7
 18929                                  
 18930                                          	.L_lambda_opt_stack_shrink_loop_exit_19a7:
 18931                                  
 18932 0000E3F7 48C70202000000                  	mov qword [rdx], 1 + 1
 18933 0000E3FE 4883C6F8                	add rsi, -8
 18934 0000E402 4883C2F8                	add rdx, -8
 18935 0000E406 488B06                  	mov rax, qword [rsi]
 18936 0000E409 488902                  	mov qword [rdx], rax
 18937 0000E40C 4883C2F8                	add rdx, -8
 18938 0000E410 488D76F8                	lea rsi, [rsi - 8]
 18939 0000E414 488B06                  	mov rax, qword [rsi]
 18940 0000E417 488902                  	mov qword [rdx], rax
 18941 0000E41A 4889D4                  	mov rsp, rdx
 18942                                  	.L_lambda_opt_stack_adjusted_088d:
 18943 0000E41D C8000000                	enter 0, 0
 18944 0000E421 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18945 0000E425 50                      	push rax
 18946 0000E426 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18947 0000E42A 50                      	push rax
 18948 0000E42B 6A02                    	push 2
 18949 0000E42D 488B4510                	mov rax, qword [rbp + 8 * 2]
 18950                                  
 18951 0000E431 488B00                                            	mov rax, qword[rax + 8 * 0]
 18952                                  
 18953 0000E434 488B00                                            	mov rax, qword[rax + 8 * 0]
 18954 0000E437 488B00                  	mov rax, qword [rax]
 18955                                  .L_applic_TC_405a:
 18956 0000E43A 803805                  	cmp byte [rax], T_closure
 18957 0000E43D 0F85404A0000            	jne L_code_ptr_error
 18958 0000E443 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18959 0000E447 53                      	push rbx
 18960 0000E448 FF7508                  	push qword [rbp + 8]
 18961 0000E44B FF7500                  	push qword [rbp]
 18962 0000E44E 488B4D18                	mov rcx, [rbp + 3 * 8]
 18963 0000E452 488B542418              	mov rdx, [rsp + 3 * 8]
 18964 0000E457 488D7204                	lea rsi, [rdx + 4]
 18965 0000E45B 4C8D4EFF                	lea r9, [rsi - 1]
 18966 0000E45F 488D7903                	lea rdi, [rcx + 3]
 18967 0000E463 4D31C0                  	xor r8, r8
 18968                                  .L_tc_recycle_frame_loop_405a:
 18969 0000E466 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18970 0000E46A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18971 0000E46F 49FFC9                  	dec r9
 18972 0000E472 4D31C0                  	xor r8, r8
 18973 0000E475 48FFCF                  	dec rdi
 18974 0000E478 48FFCE                  	dec rsi
 18975 0000E47B 4883FE00                	cmp rsi, 0
 18976 0000E47F 75E5                    	jne .L_tc_recycle_frame_loop_405a
 18977                                  .L_tc_recycle_frame_done_405a:
 18978                                  ;this pop rbp in sot to the right place
 18979 0000E481 4989C9                  	mov r9, rcx
 18980 0000E484 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18981 0000E48C 4C01CC                  	add rsp, r9
 18982 0000E48F 5D                      	pop rbp
 18983 0000E490 488B4D00                	mov rcx, qword [rbp]
 18984 0000E494 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18985 0000E498 FFE3                    	jmp rbx
 18986 0000E49A C9                      	leave
 18987 0000E49B C22000                  	ret 8 * (2 + 2)
 18988                                  .L_lambda_opt_end_088d:	; new closure is in rax
 18989 0000E49E C9                      	leave
 18990 0000E49F C21800                  	ret 8 * (2 + 1)
 18991                                  .L_lambda_simple_end_37a6:	; new closure is in rax
 18992                                  .L_applic_TC_405b:
 18993 0000E4A2 803805                  	cmp byte [rax], T_closure
 18994 0000E4A5 0F85D8490000            	jne L_code_ptr_error
 18995 0000E4AB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18996 0000E4AF 53                      	push rbx
 18997 0000E4B0 FF7508                  	push qword [rbp + 8]
 18998 0000E4B3 FF7500                  	push qword [rbp]
 18999 0000E4B6 488B4D18                	mov rcx, [rbp + 3 * 8]
 19000 0000E4BA 488B542418              	mov rdx, [rsp + 3 * 8]
 19001 0000E4BF 488D7204                	lea rsi, [rdx + 4]
 19002 0000E4C3 4C8D4EFF                	lea r9, [rsi - 1]
 19003 0000E4C7 488D7903                	lea rdi, [rcx + 3]
 19004 0000E4CB 4D31C0                  	xor r8, r8
 19005                                  .L_tc_recycle_frame_loop_405b:
 19006 0000E4CE 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19007 0000E4D2 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19008 0000E4D7 49FFC9                  	dec r9
 19009 0000E4DA 4D31C0                  	xor r8, r8
 19010 0000E4DD 48FFCF                  	dec rdi
 19011 0000E4E0 48FFCE                  	dec rsi
 19012 0000E4E3 4883FE00                	cmp rsi, 0
 19013 0000E4E7 75E5                    	jne .L_tc_recycle_frame_loop_405b
 19014                                  .L_tc_recycle_frame_done_405b:
 19015                                  ;this pop rbp in sot to the right place
 19016 0000E4E9 4989C9                  	mov r9, rcx
 19017 0000E4EC 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19018 0000E4F4 4C01CC                  	add rsp, r9
 19019 0000E4F7 5D                      	pop rbp
 19020 0000E4F8 488B4D00                	mov rcx, qword [rbp]
 19021 0000E4FC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19022 0000E500 FFE3                    	jmp rbx
 19023 0000E502 C9                      	leave
 19024 0000E503 C21800                  	ret 8 * (2 + 1)
 19025                                  .L_lambda_simple_end_37a5:	; new closure is in rax
 19026                                  .L_applic_TC_405c:
 19027 0000E506 803805                  	cmp byte [rax], T_closure
 19028 0000E509 0F8574490000            	jne L_code_ptr_error
 19029 0000E50F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19030 0000E513 53                      	push rbx
 19031 0000E514 FF7508                  	push qword [rbp + 8]
 19032 0000E517 FF7500                  	push qword [rbp]
 19033 0000E51A 488B4D18                	mov rcx, [rbp + 3 * 8]
 19034 0000E51E 488B542418              	mov rdx, [rsp + 3 * 8]
 19035 0000E523 488D7204                	lea rsi, [rdx + 4]
 19036 0000E527 4C8D4EFF                	lea r9, [rsi - 1]
 19037 0000E52B 488D7903                	lea rdi, [rcx + 3]
 19038 0000E52F 4D31C0                  	xor r8, r8
 19039                                  .L_tc_recycle_frame_loop_405c:
 19040 0000E532 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19041 0000E536 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19042 0000E53B 49FFC9                  	dec r9
 19043 0000E53E 4D31C0                  	xor r8, r8
 19044 0000E541 48FFCF                  	dec rdi
 19045 0000E544 48FFCE                  	dec rsi
 19046 0000E547 4883FE00                	cmp rsi, 0
 19047 0000E54B 75E5                    	jne .L_tc_recycle_frame_loop_405c
 19048                                  .L_tc_recycle_frame_done_405c:
 19049                                  ;this pop rbp in sot to the right place
 19050 0000E54D 4989C9                  	mov r9, rcx
 19051 0000E550 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19052 0000E558 4C01CC                  	add rsp, r9
 19053 0000E55B 5D                      	pop rbp
 19054 0000E55C 488B4D00                	mov rcx, qword [rbp]
 19055 0000E560 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19056 0000E564 FFE3                    	jmp rbx
 19057 0000E566 C9                      	leave
 19058 0000E567 C21800                  	ret 8 * (2 + 1)
 19059                                  .L_lambda_simple_end_37a1:	; new closure is in rax
 19060                                  .L_applic_TC_405d:
 19061 0000E56A 803805                  	cmp byte [rax], T_closure
 19062 0000E56D 0F8510490000            	jne L_code_ptr_error
 19063 0000E573 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19064 0000E577 53                      	push rbx
 19065 0000E578 FF7508                  	push qword [rbp + 8]
 19066 0000E57B FF7500                  	push qword [rbp]
 19067 0000E57E 488B4D18                	mov rcx, [rbp + 3 * 8]
 19068 0000E582 488B542418              	mov rdx, [rsp + 3 * 8]
 19069 0000E587 488D7204                	lea rsi, [rdx + 4]
 19070 0000E58B 4C8D4EFF                	lea r9, [rsi - 1]
 19071 0000E58F 488D7903                	lea rdi, [rcx + 3]
 19072 0000E593 4D31C0                  	xor r8, r8
 19073                                  .L_tc_recycle_frame_loop_405d:
 19074 0000E596 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19075 0000E59A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19076 0000E59F 49FFC9                  	dec r9
 19077 0000E5A2 4D31C0                  	xor r8, r8
 19078 0000E5A5 48FFCF                  	dec rdi
 19079 0000E5A8 48FFCE                  	dec rsi
 19080 0000E5AB 4883FE00                	cmp rsi, 0
 19081 0000E5AF 75E5                    	jne .L_tc_recycle_frame_loop_405d
 19082                                  .L_tc_recycle_frame_done_405d:
 19083                                  ;this pop rbp in sot to the right place
 19084 0000E5B1 4989C9                  	mov r9, rcx
 19085 0000E5B4 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19086 0000E5BC 4C01CC                  	add rsp, r9
 19087 0000E5BF 5D                      	pop rbp
 19088 0000E5C0 488B4D00                	mov rcx, qword [rbp]
 19089 0000E5C4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19090 0000E5C8 FFE3                    	jmp rbx
 19091 0000E5CA C9                      	leave
 19092 0000E5CB C21800                  	ret 8 * (2 + 1)
 19093                                  .L_lambda_simple_end_37a0:	; new closure is in rax
 19094 0000E5CE 50                      	push rax
 19095 0000E5CF 6A01                    	push 1
 19096 0000E5D1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19097 0000E5D6 E8F3380000              	call malloc
 19098 0000E5DB 50                      	push rax
 19099 0000E5DC BF00000000              	mov rdi, 8 * 0	; new rib
 19100 0000E5E1 E8E8380000              	call malloc
 19101 0000E5E6 50                      	push rax
 19102 0000E5E7 BF08000000              	mov rdi, 8 * 1	; extended env
 19103 0000E5EC E8DD380000              	call malloc
 19104 0000E5F1 488B7D10                	mov rdi, ENV
 19105 0000E5F5 BE00000000              	mov rsi, 0
 19106 0000E5FA BA01000000              	mov rdx, 1
 19107                                  .L_lambda_simple_env_loop_37a8:	; ext_env[i + 1] <-- env[i]
 19108 0000E5FF 4883FE00                	cmp rsi, 0
 19109 0000E603 7410                    	je .L_lambda_simple_env_end_37a8
 19110 0000E605 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19111 0000E609 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19112 0000E60D 48FFC6                  	inc rsi
 19113 0000E610 48FFC2                  	inc rdx
 19114 0000E613 EBEA                    	jmp .L_lambda_simple_env_loop_37a8
 19115                                  .L_lambda_simple_env_end_37a8:
 19116 0000E615 5B                      	pop rbx
 19117 0000E616 BE00000000              	mov rsi, 0
 19118                                  .L_lambda_simple_params_loop_37a8:	; copy params
 19119 0000E61B 4883FE00                	cmp rsi, 0
 19120 0000E61F 740E                    	je .L_lambda_simple_params_end_37a8
 19121 0000E621 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19122 0000E626 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19123 0000E62A 48FFC6                  	inc rsi
 19124 0000E62D EBEC                    	jmp .L_lambda_simple_params_loop_37a8
 19125                                  .L_lambda_simple_params_end_37a8:
 19126 0000E62F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19127 0000E632 4889C3                  	mov rbx, rax
 19128 0000E635 58                      	pop rax
 19129 0000E636 C60005                  	mov byte [rax], T_closure
 19130 0000E639 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19131 0000E63D 48C74009[47E60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a8
 19132 0000E645 EB7B                    	jmp .L_lambda_simple_end_37a8
 19133                                  .L_lambda_simple_code_37a8:	; lambda-simple body
 19134 0000E647 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19135 0000E64D 740B                    	je .L_lambda_simple_arity_check_ok_37a8
 19136 0000E64F FF742410                	push qword [rsp + 8 * 2]
 19137 0000E653 6A01                    	push 1
 19138 0000E655 E92D380000              	jmp L_error_incorrect_arity_simple
 19139                                  .L_lambda_simple_arity_check_ok_37a8:
 19140 0000E65A C8000000                	enter 0, 0
 19141 0000E65E 488B0425[70030000]      	mov rax, qword [free_var_110]
 19142 0000E666 50                      	push rax
 19143 0000E667 6A01                    	push 1
 19144 0000E669 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19145                                  	assert_closure(rax)
    42 0000E66D 803805              <1>  cmp byte [%1], %2
    43 0000E670 0F854C500000        <1>  jne L_error_incorrect_type
 19146 0000E676 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19147 0000E679 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19148 0000E67C 48890425[F0030000]      	mov qword [free_var_126], rax
 19149                                  
 19150 0000E684 48B8-                           	mov rax, sob_void
 19150 0000E686 [0000000000000000] 
 19151                                  
 19152 0000E68E 488B0425[A8030000]      	mov rax, qword [free_var_117]
 19153 0000E696 50                      	push rax
 19154 0000E697 6A01                    	push 1
 19155 0000E699 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19156                                  	assert_closure(rax)
    42 0000E69D 803805              <1>  cmp byte [%1], %2
    43 0000E6A0 0F851C500000        <1>  jne L_error_incorrect_type
 19157 0000E6A6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19158 0000E6A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19159 0000E6AC 48890425[18040000]      	mov qword [free_var_131], rax
 19160                                  
 19161 0000E6B4 48B8-                           	mov rax, sob_void
 19161 0000E6B6 [0000000000000000] 
 19162 0000E6BE C9                      	leave
 19163 0000E6BF C21800                  	ret 8 * (2 + 1)
 19164                                  .L_lambda_simple_end_37a8:	; new closure is in rax
 19165                                  	assert_closure(rax)
    42 0000E6C2 803805              <1>  cmp byte [%1], %2
    43 0000E6C5 0F85F74F0000        <1>  jne L_error_incorrect_type
 19166 0000E6CB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19167 0000E6CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19168                                  
 19169 0000E6D1 4889C7                  	mov rdi, rax
 19170 0000E6D4 E806380000              	call print_sexpr_if_not_void
 19171                                  
 19172 0000E6D9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19173 0000E6DE E8EB370000              	call malloc
 19174 0000E6E3 50                      	push rax
 19175 0000E6E4 BF00000000              	mov rdi, 8 * 0	; new rib
 19176 0000E6E9 E8E0370000              	call malloc
 19177 0000E6EE 50                      	push rax
 19178 0000E6EF BF08000000              	mov rdi, 8 * 1	; extended env
 19179 0000E6F4 E8D5370000              	call malloc
 19180 0000E6F9 488B7D10                	mov rdi, ENV
 19181 0000E6FD BE00000000              	mov rsi, 0
 19182 0000E702 BA01000000              	mov rdx, 1
 19183                                  .L_lambda_simple_env_loop_37a9:	; ext_env[i + 1] <-- env[i]
 19184 0000E707 4883FE00                	cmp rsi, 0
 19185 0000E70B 7410                    	je .L_lambda_simple_env_end_37a9
 19186 0000E70D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19187 0000E711 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19188 0000E715 48FFC6                  	inc rsi
 19189 0000E718 48FFC2                  	inc rdx
 19190 0000E71B EBEA                    	jmp .L_lambda_simple_env_loop_37a9
 19191                                  .L_lambda_simple_env_end_37a9:
 19192 0000E71D 5B                      	pop rbx
 19193 0000E71E BE00000000              	mov rsi, 0
 19194                                  .L_lambda_simple_params_loop_37a9:	; copy params
 19195 0000E723 4883FE00                	cmp rsi, 0
 19196 0000E727 740E                    	je .L_lambda_simple_params_end_37a9
 19197 0000E729 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19198 0000E72E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19199 0000E732 48FFC6                  	inc rsi
 19200 0000E735 EBEC                    	jmp .L_lambda_simple_params_loop_37a9
 19201                                  .L_lambda_simple_params_end_37a9:
 19202 0000E737 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19203 0000E73A 4889C3                  	mov rbx, rax
 19204 0000E73D 58                      	pop rax
 19205 0000E73E C60005                  	mov byte [rax], T_closure
 19206 0000E741 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19207 0000E745 48C74009[52E70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37a9
 19208 0000E74D E9FE000000              	jmp .L_lambda_simple_end_37a9
 19209                                  .L_lambda_simple_code_37a9:	; lambda-simple body
 19210 0000E752 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19211 0000E758 740B                    	je .L_lambda_simple_arity_check_ok_37a9
 19212 0000E75A FF742410                	push qword [rsp + 8 * 2]
 19213 0000E75E 6A01                    	push 1
 19214 0000E760 E922370000              	jmp L_error_incorrect_arity_simple
 19215                                  .L_lambda_simple_arity_check_ok_37a9:
 19216 0000E765 C8000000                	enter 0, 0
 19217 0000E769 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19218 0000E76D 50                      	push rax
 19219 0000E76E 6A01                    	push 1
 19220 0000E770 488B0425[00000000]      	mov rax, qword [free_var_0]
 19221                                  	assert_closure(rax)
    42 0000E778 803805              <1>  cmp byte [%1], %2
    43 0000E77B 0F85414F0000        <1>  jne L_error_incorrect_type
 19222 0000E781 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19223 0000E784 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19224                                  
 19225 0000E787 483D[02000000]                  	cmp rax, sob_boolean_false
 19226                                  
 19227 0000E78D 740F                            	je .L_if_else_480b
 19228 0000E78F 48B8-                   	mov rax,L_constants + 32
 19228 0000E791 [2000000000000000] 
 19229                                  
 19230 0000E799 E9AE000000                      	jmp .L_if_end_480b
 19231                                  
 19232                                          	.L_if_else_480b:
 19233 0000E79E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19234 0000E7A2 50                      	push rax
 19235 0000E7A3 6A01                    	push 1
 19236 0000E7A5 488B0425[88000000]      	mov rax, qword [free_var_17]
 19237                                  	assert_closure(rax)
    42 0000E7AD 803805              <1>  cmp byte [%1], %2
    43 0000E7B0 0F850C4F0000        <1>  jne L_error_incorrect_type
 19238 0000E7B6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19239 0000E7B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19240 0000E7BC 50                      	push rax
 19241 0000E7BD 6A01                    	push 1
 19242 0000E7BF 488B0425[30040000]      	mov rax, qword [free_var_134]
 19243                                  	assert_closure(rax)
    42 0000E7C7 803805              <1>  cmp byte [%1], %2
    43 0000E7CA 0F85F24E0000        <1>  jne L_error_incorrect_type
 19244 0000E7D0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19245 0000E7D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19246 0000E7D6 50                      	push rax
 19247 0000E7D7 48B8-                   	mov rax,L_constants + 128
 19247 0000E7D9 [8000000000000000] 
 19248 0000E7E1 50                      	push rax
 19249 0000E7E2 6A02                    	push 2
 19250 0000E7E4 488B0425[08030000]      	mov rax, qword [free_var_97]
 19251                                  .L_applic_TC_405e:
 19252 0000E7EC 803805                  	cmp byte [rax], T_closure
 19253 0000E7EF 0F858E460000            	jne L_code_ptr_error
 19254 0000E7F5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19255 0000E7F9 53                      	push rbx
 19256 0000E7FA FF7508                  	push qword [rbp + 8]
 19257 0000E7FD FF7500                  	push qword [rbp]
 19258 0000E800 488B4D18                	mov rcx, [rbp + 3 * 8]
 19259 0000E804 488B542418              	mov rdx, [rsp + 3 * 8]
 19260 0000E809 488D7204                	lea rsi, [rdx + 4]
 19261 0000E80D 4C8D4EFF                	lea r9, [rsi - 1]
 19262 0000E811 488D7903                	lea rdi, [rcx + 3]
 19263 0000E815 4D31C0                  	xor r8, r8
 19264                                  .L_tc_recycle_frame_loop_405e:
 19265 0000E818 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19266 0000E81C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19267 0000E821 49FFC9                  	dec r9
 19268 0000E824 4D31C0                  	xor r8, r8
 19269 0000E827 48FFCF                  	dec rdi
 19270 0000E82A 48FFCE                  	dec rsi
 19271 0000E82D 4883FE00                	cmp rsi, 0
 19272 0000E831 75E5                    	jne .L_tc_recycle_frame_loop_405e
 19273                                  .L_tc_recycle_frame_done_405e:
 19274                                  ;this pop rbp in sot to the right place
 19275 0000E833 4989C9                  	mov r9, rcx
 19276 0000E836 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19277 0000E83E 4C01CC                  	add rsp, r9
 19278 0000E841 5D                      	pop rbp
 19279 0000E842 488B4D00                	mov rcx, qword [rbp]
 19280 0000E846 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19281 0000E84A FFE3                    	jmp rbx
 19282                                  
 19283                                          	.L_if_end_480b:
 19284 0000E84C C9                      	leave
 19285 0000E84D C21800                  	ret 8 * (2 + 1)
 19286                                  .L_lambda_simple_end_37a9:	; new closure is in rax
 19287 0000E850 48890425[30040000]      	mov qword [free_var_134], rax
 19288 0000E858 48B8-                   	mov rax, sob_void
 19288 0000E85A [0000000000000000] 
 19289                                  
 19290 0000E862 4889C7                  	mov rdi, rax
 19291 0000E865 E875360000              	call print_sexpr_if_not_void
 19292                                  
 19293 0000E86A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19294 0000E86F E85A360000              	call malloc
 19295 0000E874 50                      	push rax
 19296 0000E875 BF00000000              	mov rdi, 8 * 0	; new rib
 19297 0000E87A E84F360000              	call malloc
 19298 0000E87F 50                      	push rax
 19299 0000E880 BF08000000              	mov rdi, 8 * 1	; extended env
 19300 0000E885 E844360000              	call malloc
 19301 0000E88A 488B7D10                	mov rdi, ENV
 19302 0000E88E BE00000000              	mov rsi, 0
 19303 0000E893 BA01000000              	mov rdx, 1
 19304                                  .L_lambda_simple_env_loop_37aa:	; ext_env[i + 1] <-- env[i]
 19305 0000E898 4883FE00                	cmp rsi, 0
 19306 0000E89C 7410                    	je .L_lambda_simple_env_end_37aa
 19307 0000E89E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19308 0000E8A2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19309 0000E8A6 48FFC6                  	inc rsi
 19310 0000E8A9 48FFC2                  	inc rdx
 19311 0000E8AC EBEA                    	jmp .L_lambda_simple_env_loop_37aa
 19312                                  .L_lambda_simple_env_end_37aa:
 19313 0000E8AE 5B                      	pop rbx
 19314 0000E8AF BE00000000              	mov rsi, 0
 19315                                  .L_lambda_simple_params_loop_37aa:	; copy params
 19316 0000E8B4 4883FE00                	cmp rsi, 0
 19317 0000E8B8 740E                    	je .L_lambda_simple_params_end_37aa
 19318 0000E8BA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19319 0000E8BF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19320 0000E8C3 48FFC6                  	inc rsi
 19321 0000E8C6 EBEC                    	jmp .L_lambda_simple_params_loop_37aa
 19322                                  .L_lambda_simple_params_end_37aa:
 19323 0000E8C8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19324 0000E8CB 4889C3                  	mov rbx, rax
 19325 0000E8CE 58                      	pop rax
 19326 0000E8CF C60005                  	mov byte [rax], T_closure
 19327 0000E8D2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19328 0000E8D6 48C74009[E3E80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37aa
 19329 0000E8DE E904010000              	jmp .L_lambda_simple_end_37aa
 19330                                  .L_lambda_simple_code_37aa:	; lambda-simple body
 19331 0000E8E3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19332 0000E8E9 740B                    	je .L_lambda_simple_arity_check_ok_37aa
 19333 0000E8EB FF742410                	push qword [rsp + 8 * 2]
 19334 0000E8EF 6A01                    	push 1
 19335 0000E8F1 E991350000              	jmp L_error_incorrect_arity_simple
 19336                                  .L_lambda_simple_arity_check_ok_37aa:
 19337 0000E8F6 C8000000                	enter 0, 0
 19338 0000E8FA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19339 0000E8FE 50                      	push rax
 19340 0000E8FF 6A01                    	push 1
 19341 0000E901 488B0425[00000000]      	mov rax, qword [free_var_0]
 19342                                  	assert_closure(rax)
    42 0000E909 803805              <1>  cmp byte [%1], %2
    43 0000E90C 0F85B04D0000        <1>  jne L_error_incorrect_type
 19343 0000E912 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19344 0000E915 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19345 0000E918 483D[02000000]          	cmp rax, sob_boolean_false
 19346 0000E91E 0F85BF000000            	jne .L_or_end_042f
 19347 0000E924 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19348 0000E928 50                      	push rax
 19349 0000E929 6A01                    	push 1
 19350 0000E92B 488B0425[08000000]      	mov rax, qword [free_var_1]
 19351                                  	assert_closure(rax)
    42 0000E933 803805              <1>  cmp byte [%1], %2
    43 0000E936 0F85864D0000        <1>  jne L_error_incorrect_type
 19352 0000E93C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19353 0000E93F FF5009                  	call SOB_CLOSURE_CODE(rax)
 19354                                  
 19355 0000E942 483D[02000000]                  	cmp rax, sob_boolean_false
 19356                                  
 19357 0000E948 0F848B000000                    	je .L_if_else_480c
 19358 0000E94E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19359 0000E952 50                      	push rax
 19360 0000E953 6A01                    	push 1
 19361 0000E955 488B0425[88000000]      	mov rax, qword [free_var_17]
 19362                                  	assert_closure(rax)
    42 0000E95D 803805              <1>  cmp byte [%1], %2
    43 0000E960 0F855C4D0000        <1>  jne L_error_incorrect_type
 19363 0000E966 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19364 0000E969 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19365 0000E96C 50                      	push rax
 19366 0000E96D 6A01                    	push 1
 19367 0000E96F 488B0425[A0020000]      	mov rax, qword [free_var_84]
 19368                                  .L_applic_TC_405f:
 19369 0000E977 803805                  	cmp byte [rax], T_closure
 19370 0000E97A 0F8503450000            	jne L_code_ptr_error
 19371 0000E980 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19372 0000E984 53                      	push rbx
 19373 0000E985 FF7508                  	push qword [rbp + 8]
 19374 0000E988 FF7500                  	push qword [rbp]
 19375 0000E98B 488B4D18                	mov rcx, [rbp + 3 * 8]
 19376 0000E98F 488B542418              	mov rdx, [rsp + 3 * 8]
 19377 0000E994 488D7204                	lea rsi, [rdx + 4]
 19378 0000E998 4C8D4EFF                	lea r9, [rsi - 1]
 19379 0000E99C 488D7903                	lea rdi, [rcx + 3]
 19380 0000E9A0 4D31C0                  	xor r8, r8
 19381                                  .L_tc_recycle_frame_loop_405f:
 19382 0000E9A3 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19383 0000E9A7 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19384 0000E9AC 49FFC9                  	dec r9
 19385 0000E9AF 4D31C0                  	xor r8, r8
 19386 0000E9B2 48FFCF                  	dec rdi
 19387 0000E9B5 48FFCE                  	dec rsi
 19388 0000E9B8 4883FE00                	cmp rsi, 0
 19389 0000E9BC 75E5                    	jne .L_tc_recycle_frame_loop_405f
 19390                                  .L_tc_recycle_frame_done_405f:
 19391                                  ;this pop rbp in sot to the right place
 19392 0000E9BE 4989C9                  	mov r9, rcx
 19393 0000E9C1 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19394 0000E9C9 4C01CC                  	add rsp, r9
 19395 0000E9CC 5D                      	pop rbp
 19396 0000E9CD 488B4D00                	mov rcx, qword [rbp]
 19397 0000E9D1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19398 0000E9D5 FFE3                    	jmp rbx
 19399                                  
 19400 0000E9D7 EB0A                            	jmp .L_if_end_480c
 19401                                  
 19402                                          	.L_if_else_480c:
 19403 0000E9D9 48B8-                   	mov rax,L_constants + 2
 19403 0000E9DB [0200000000000000] 
 19404                                  
 19405                                          	.L_if_end_480c:
 19406                                  .L_or_end_042f:
 19407 0000E9E3 C9                      	leave
 19408 0000E9E4 C21800                  	ret 8 * (2 + 1)
 19409                                  .L_lambda_simple_end_37aa:	; new closure is in rax
 19410 0000E9E7 48890425[A0020000]      	mov qword [free_var_84], rax
 19411 0000E9EF 48B8-                   	mov rax, sob_void
 19411 0000E9F1 [0000000000000000] 
 19412                                  
 19413 0000E9F9 4889C7                  	mov rdi, rax
 19414 0000E9FC E8DE340000              	call print_sexpr_if_not_void
 19415                                  
 19416 0000EA01 488B0425[98010000]      	mov rax, qword [free_var_51]
 19417 0000EA09 50                      	push rax
 19418 0000EA0A 6A01                    	push 1
 19419 0000EA0C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19420 0000EA11 E8B8340000              	call malloc
 19421 0000EA16 50                      	push rax
 19422 0000EA17 BF00000000              	mov rdi, 8 * 0	; new rib
 19423 0000EA1C E8AD340000              	call malloc
 19424 0000EA21 50                      	push rax
 19425 0000EA22 BF08000000              	mov rdi, 8 * 1	; extended env
 19426 0000EA27 E8A2340000              	call malloc
 19427 0000EA2C 488B7D10                	mov rdi, ENV
 19428 0000EA30 BE00000000              	mov rsi, 0
 19429 0000EA35 BA01000000              	mov rdx, 1
 19430                                  .L_lambda_simple_env_loop_37ab:	; ext_env[i + 1] <-- env[i]
 19431 0000EA3A 4883FE00                	cmp rsi, 0
 19432 0000EA3E 7410                    	je .L_lambda_simple_env_end_37ab
 19433 0000EA40 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19434 0000EA44 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19435 0000EA48 48FFC6                  	inc rsi
 19436 0000EA4B 48FFC2                  	inc rdx
 19437 0000EA4E EBEA                    	jmp .L_lambda_simple_env_loop_37ab
 19438                                  .L_lambda_simple_env_end_37ab:
 19439 0000EA50 5B                      	pop rbx
 19440 0000EA51 BE00000000              	mov rsi, 0
 19441                                  .L_lambda_simple_params_loop_37ab:	; copy params
 19442 0000EA56 4883FE00                	cmp rsi, 0
 19443 0000EA5A 740E                    	je .L_lambda_simple_params_end_37ab
 19444 0000EA5C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19445 0000EA61 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19446 0000EA65 48FFC6                  	inc rsi
 19447 0000EA68 EBEC                    	jmp .L_lambda_simple_params_loop_37ab
 19448                                  .L_lambda_simple_params_end_37ab:
 19449 0000EA6A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19450 0000EA6D 4889C3                  	mov rbx, rax
 19451 0000EA70 58                      	pop rax
 19452 0000EA71 C60005                  	mov byte [rax], T_closure
 19453 0000EA74 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19454 0000EA78 48C74009[85EA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37ab
 19455 0000EA80 E90C040000              	jmp .L_lambda_simple_end_37ab
 19456                                  .L_lambda_simple_code_37ab:	; lambda-simple body
 19457 0000EA85 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19458 0000EA8B 740B                    	je .L_lambda_simple_arity_check_ok_37ab
 19459 0000EA8D FF742410                	push qword [rsp + 8 * 2]
 19460 0000EA91 6A01                    	push 1
 19461 0000EA93 E9EF330000              	jmp L_error_incorrect_arity_simple
 19462                                  .L_lambda_simple_arity_check_ok_37ab:
 19463 0000EA98 C8000000                	enter 0, 0
 19464 0000EA9C BF11000000              	mov rdi, (1 + 8 + 8)
 19465 0000EAA1 E828340000              	call malloc
 19466 0000EAA6 50                      	push rax
 19467 0000EAA7 BF08000000              	mov rdi, 8 * 1
 19468 0000EAAC E81D340000              	call malloc
 19469 0000EAB1 50                      	push rax
 19470 0000EAB2 BF10000000              	mov rdi, 8 * 2
 19471 0000EAB7 E812340000              	call malloc
 19472 0000EABC 488B7D10                	mov rdi, ENV
 19473 0000EAC0 4831F6                  	xor rsi, rsi
 19474 0000EAC3 4831D2                  	xor rdx, rdx
 19475 0000EAC6 48FFC2                  	inc rdx
 19476                                  	.L_lambda_opt_env_loop_088e:
 19477                                  
 19478 0000EAC9 4883FE01                        	cmp rsi, 1
 19479                                  
 19480 0000EACD 7412                            	je .L_lambda_opt_env_end_088e
 19481 0000EACF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19482 0000EAD3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19483 0000EAD7 4883C201                	add rdx, 1
 19484 0000EADB 4883C601                	add rsi, 1
 19485 0000EADF EBE8                    	jmp .L_lambda_opt_env_loop_088e
 19486                                  
 19487                                          	.L_lambda_opt_env_end_088e:
 19488 0000EAE1 5B                      	pop rbx
 19489 0000EAE2 4831F6                  	xor rsi, rsi
 19490                                  	.L_lambda_opt_params_loop_088e:
 19491                                  
 19492 0000EAE5 4883FE01                        	cmp rsi, 1
 19493                                  
 19494 0000EAE9 740F                            	je .L_lambda_opt_params_end_088e
 19495 0000EAEB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19496 0000EAF0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19497 0000EAF4 4883C601                	add rsi, 1
 19498 0000EAF8 EBEB                    	jmp .L_lambda_opt_params_loop_088e
 19499                                  
 19500                                          	.L_lambda_opt_params_end_088e:
 19501 0000EAFA 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 19502 0000EAFD 4889C3                  	mov rbx, rax
 19503 0000EB00 58                      	pop rax
 19504 0000EB01 C60005                  	mov byte [rax], T_closure
 19505 0000EB04 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19506 0000EB08 48C74009[15EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_088e
 19507                                  
 19508 0000EB10 E978030000                      	jmp .L_lambda_opt_end_088e
 19509                                  
 19510                                          	.L_lambda_opt_code_088e:
 19511                                  
 19512 0000EB15 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 19513                                  
 19514 0000EB1B 740D                            	je .L_lambda_opt_arity_check_exact_088e  ;same num_of_args
 19515                                  
 19516 0000EB1D 7F65                            	jg .L_lambda_opt_arity_check_more_088e  ;greater num_of_args
 19517 0000EB1F FF742410                	push qword [rsp + 8 * 2]
 19518 0000EB23 6A01                    	push 1
 19519 0000EB25 E971330000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 19520                                  .L_lambda_opt_arity_check_exact_088e:
 19521 0000EB2A 4883EC08                	sub rsp, 8 * 1
 19522 0000EB2E 488D7F10                	lea rdi, [rdi + (8 * 2)]
 19523 0000EB32 4889E7                  	mov rdi, rsp 
 19524 0000EB35 488B4708                	mov rax, qword [rdi + 8]
 19525 0000EB39 488907                  	mov qword [rdi], rax
 19526 0000EB3C 488D7F08                	lea rdi, [rdi + 8]
 19527 0000EB40 488B4708                	mov rax, qword [rdi + 8]
 19528 0000EB44 488907                  	mov qword [rdi], rax
 19529 0000EB47 488D7F08                	lea rdi, [rdi + 8]
 19530 0000EB4B 488B4708                	mov rax, qword [rdi + 8]
 19531 0000EB4F 4889C1                  	mov rcx, rax
 19532 0000EB52 4883C001                	add rax, 1
 19533 0000EB56 488907                  	mov qword [rdi], rax
 19534 0000EB59 488D7F08                	lea rdi, [rdi + 8]
 19535                                  	.L_lambda_opt_stack_shrink_loop_19a8:
 19536 0000EB5D 4883F900                	cmp rcx, 0
 19537 0000EB61 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_19a8
 19538 0000EB63 4883E901                	sub rcx, 1
 19539 0000EB67 488D4010                	lea rax, [rax + (8 * 2)]
 19540 0000EB6B 488B4708                	mov rax, qword [rdi + 8]
 19541 0000EB6F 488907                  	mov qword [rdi], rax
 19542 0000EB72 488D7F08                	lea rdi, [rdi + 8]
 19543 0000EB76 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_19a8
 19544                                  
 19545                                          	.L_lambda_opt_stack_shrink_loop_exit_19a8:
 19546 0000EB78 48C707[01000000]        	mov qword [rdi], sob_nil
 19547 0000EB7F E997000000              	jmp .L_lambda_opt_stack_adjusted_088e
 19548                                  
 19549                                          	.L_lambda_opt_arity_check_more_088e:
 19550 0000EB84 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 19551 0000EB89 488D4EFF                	lea rcx, [rsi - 1]
 19552 0000EB8D 49B8-                   	mov r8, sob_nil
 19552 0000EB8F [0100000000000000] 
 19553 0000EB97 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 19554 0000EB9C 4889F2                  	mov rdx, rsi
 19555                                  	.L_lambda_opt_stack_shrink_loop_19a9:
 19556 0000EB9F 4883F900                	cmp rcx, 0
 19557 0000EBA3 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_19a9
 19558 0000EBA5 BF11000000              	mov rdi, 1 + (8 * 2)
 19559 0000EBAA E81F330000              	call malloc
 19560 0000EBAF C60021                  	mov byte [rax], T_pair
 19561 0000EBB2 488B1E                  	mov rbx, qword [rsi]
 19562 0000EBB5 48895801                	mov SOB_PAIR_CAR(rax), rbx
 19563 0000EBB9 4C894009                	mov SOB_PAIR_CDR(rax), r8
 19564 0000EBBD 4883C6F8                	add rsi, -8
 19565 0000EBC1 4883E901                	sub rcx, 1
 19566 0000EBC5 4989C0                  	mov r8, rax
 19567 0000EBC8 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_19a9
 19568                                  
 19569                                          	.L_lambda_opt_stack_shrink_loop_exit_19a9:
 19570 0000EBCA 4C8902                  	mov qword [rdx], r8
 19571 0000EBCD 4883EA08                	sub rdx, 8 * 1
 19572 0000EBD1 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 19573                                  
 19574 0000EBD6 B901000000                      	mov rcx, 1 
 19575                                  
 19576                                          	.L_lambda_opt_stack_shrink_loop_19aa:
 19577 0000EBDB 4883F900                	cmp rcx, 0
 19578 0000EBDF 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_19aa
 19579 0000EBE1 488B06                  	mov rax, qword [rsi]
 19580 0000EBE4 488902                  	mov qword [rdx], rax
 19581 0000EBE7 488D76F8                	lea rsi, [rsi - 8]
 19582 0000EBEB 4883C2F8                	add rdx, -8
 19583 0000EBEF 4883C1FF                	add rcx, -1
 19584 0000EBF3 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_19aa
 19585                                  
 19586                                          	.L_lambda_opt_stack_shrink_loop_exit_19aa:
 19587                                  
 19588 0000EBF5 48C70202000000                  	mov qword [rdx], 1 + 1
 19589 0000EBFC 4883C6F8                	add rsi, -8
 19590 0000EC00 4883C2F8                	add rdx, -8
 19591 0000EC04 488B06                  	mov rax, qword [rsi]
 19592 0000EC07 488902                  	mov qword [rdx], rax
 19593 0000EC0A 4883C2F8                	add rdx, -8
 19594 0000EC0E 488D76F8                	lea rsi, [rsi - 8]
 19595 0000EC12 488B06                  	mov rax, qword [rsi]
 19596 0000EC15 488902                  	mov qword [rdx], rax
 19597 0000EC18 4889D4                  	mov rsp, rdx
 19598                                  	.L_lambda_opt_stack_adjusted_088e:
 19599 0000EC1B C8000000                	enter 0, 0
 19600 0000EC1F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19601 0000EC23 50                      	push rax
 19602 0000EC24 6A01                    	push 1
 19603 0000EC26 488B0425[00000000]      	mov rax, qword [free_var_0]
 19604                                  	assert_closure(rax)
    42 0000EC2E 803805              <1>  cmp byte [%1], %2
    43 0000EC31 0F858B4A0000        <1>  jne L_error_incorrect_type
 19605 0000EC37 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19606 0000EC3A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19607                                  
 19608 0000EC3D 483D[02000000]                  	cmp rax, sob_boolean_false
 19609                                  
 19610 0000EC43 740F                            	je .L_if_else_480d
 19611 0000EC45 48B8-                   	mov rax,L_constants + 0
 19611 0000EC47 [0000000000000000] 
 19612                                  
 19613 0000EC4F E9C1000000                      	jmp .L_if_end_480d
 19614                                  
 19615                                          	.L_if_else_480d:
 19616 0000EC54 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19617 0000EC58 50                      	push rax
 19618 0000EC59 6A01                    	push 1
 19619 0000EC5B 488B0425[08000000]      	mov rax, qword [free_var_1]
 19620                                  	assert_closure(rax)
    42 0000EC63 803805              <1>  cmp byte [%1], %2
    43 0000EC66 0F85564A0000        <1>  jne L_error_incorrect_type
 19621 0000EC6C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19622 0000EC6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 19623                                  
 19624 0000EC72 483D[02000000]                  	cmp rax, sob_boolean_false
 19625                                  
 19626 0000EC78 743A                            	je .L_if_else_480f
 19627 0000EC7A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19628 0000EC7E 50                      	push rax
 19629 0000EC7F 6A01                    	push 1
 19630 0000EC81 488B0425[88000000]      	mov rax, qword [free_var_17]
 19631                                  	assert_closure(rax)
    42 0000EC89 803805              <1>  cmp byte [%1], %2
    43 0000EC8C 0F85304A0000        <1>  jne L_error_incorrect_type
 19632 0000EC92 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19633 0000EC95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19634 0000EC98 50                      	push rax
 19635 0000EC99 6A01                    	push 1
 19636 0000EC9B 488B0425[00000000]      	mov rax, qword [free_var_0]
 19637                                  	assert_closure(rax)
    42 0000ECA3 803805              <1>  cmp byte [%1], %2
    43 0000ECA6 0F85164A0000        <1>  jne L_error_incorrect_type
 19638 0000ECAC FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19639 0000ECAF FF5009                  	call SOB_CLOSURE_CODE(rax)
 19640                                  
 19641 0000ECB2 EB0A                            	jmp .L_if_end_480f
 19642                                  
 19643                                          	.L_if_else_480f:
 19644 0000ECB4 48B8-                   	mov rax,L_constants + 2
 19644 0000ECB6 [0200000000000000] 
 19645                                  
 19646                                          	.L_if_end_480f:
 19647                                  
 19648 0000ECBE 483D[02000000]                  	cmp rax, sob_boolean_false
 19649                                  
 19650 0000ECC4 7420                            	je .L_if_else_480e
 19651 0000ECC6 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19652 0000ECCA 50                      	push rax
 19653 0000ECCB 6A01                    	push 1
 19654 0000ECCD 488B0425[80000000]      	mov rax, qword [free_var_16]
 19655                                  	assert_closure(rax)
    42 0000ECD5 803805              <1>  cmp byte [%1], %2
    43 0000ECD8 0F85E4490000        <1>  jne L_error_incorrect_type
 19656 0000ECDE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19657 0000ECE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19658                                  
 19659 0000ECE4 EB2F                            	jmp .L_if_end_480e
 19660                                  
 19661                                          	.L_if_else_480e:
 19662 0000ECE6 48B8-                   	mov rax,L_constants + 379
 19662 0000ECE8 [7B01000000000000] 
 19663 0000ECF0 50                      	push rax
 19664 0000ECF1 48B8-                   	mov rax,L_constants + 370
 19664 0000ECF3 [7201000000000000] 
 19665 0000ECFB 50                      	push rax
 19666 0000ECFC 6A02                    	push 2
 19667 0000ECFE 488B0425[30010000]      	mov rax, qword [free_var_38]
 19668                                  	assert_closure(rax)
    42 0000ED06 803805              <1>  cmp byte [%1], %2
    43 0000ED09 0F85B3490000        <1>  jne L_error_incorrect_type
 19669 0000ED0F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19670 0000ED12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19671                                  
 19672                                          	.L_if_end_480e:
 19673                                  
 19674                                          	.L_if_end_480d:
 19675 0000ED15 50                      	push rax
 19676 0000ED16 6A01                    	push 1
 19677 0000ED18 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19678 0000ED1D E8AC310000              	call malloc
 19679 0000ED22 50                      	push rax
 19680 0000ED23 BF10000000              	mov rdi, 8 * 2	; new rib
 19681 0000ED28 E8A1310000              	call malloc
 19682 0000ED2D 50                      	push rax
 19683 0000ED2E BF18000000              	mov rdi, 8 * 3	; extended env
 19684 0000ED33 E896310000              	call malloc
 19685 0000ED38 488B7D10                	mov rdi, ENV
 19686 0000ED3C BE00000000              	mov rsi, 0
 19687 0000ED41 BA01000000              	mov rdx, 1
 19688                                  .L_lambda_simple_env_loop_37ac:	; ext_env[i + 1] <-- env[i]
 19689 0000ED46 4883FE02                	cmp rsi, 2
 19690 0000ED4A 7410                    	je .L_lambda_simple_env_end_37ac
 19691 0000ED4C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19692 0000ED50 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19693 0000ED54 48FFC6                  	inc rsi
 19694 0000ED57 48FFC2                  	inc rdx
 19695 0000ED5A EBEA                    	jmp .L_lambda_simple_env_loop_37ac
 19696                                  .L_lambda_simple_env_end_37ac:
 19697 0000ED5C 5B                      	pop rbx
 19698 0000ED5D BE00000000              	mov rsi, 0
 19699                                  .L_lambda_simple_params_loop_37ac:	; copy params
 19700 0000ED62 4883FE02                	cmp rsi, 2
 19701 0000ED66 740E                    	je .L_lambda_simple_params_end_37ac
 19702 0000ED68 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19703 0000ED6D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19704 0000ED71 48FFC6                  	inc rsi
 19705 0000ED74 EBEC                    	jmp .L_lambda_simple_params_loop_37ac
 19706                                  .L_lambda_simple_params_end_37ac:
 19707 0000ED76 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19708 0000ED79 4889C3                  	mov rbx, rax
 19709 0000ED7C 58                      	pop rax
 19710 0000ED7D C60005                  	mov byte [rax], T_closure
 19711 0000ED80 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19712 0000ED84 48C74009[91ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37ac
 19713 0000ED8C E998000000              	jmp .L_lambda_simple_end_37ac
 19714                                  .L_lambda_simple_code_37ac:	; lambda-simple body
 19715 0000ED91 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19716 0000ED97 740B                    	je .L_lambda_simple_arity_check_ok_37ac
 19717 0000ED99 FF742410                	push qword [rsp + 8 * 2]
 19718 0000ED9D 6A01                    	push 1
 19719 0000ED9F E9E3300000              	jmp L_error_incorrect_arity_simple
 19720                                  .L_lambda_simple_arity_check_ok_37ac:
 19721 0000EDA4 C8000000                	enter 0, 0
 19722 0000EDA8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19723 0000EDAC 50                      	push rax
 19724 0000EDAD 488B4510                	mov rax, qword [rbp + 8 * 2]
 19725                                  
 19726 0000EDB1 488B00                                            	mov rax, qword[rax + 8 * 0]
 19727                                  
 19728 0000EDB4 488B00                                            	mov rax, qword[rax + 8 * 0]
 19729 0000EDB7 50                      	push rax
 19730 0000EDB8 6A02                    	push 2
 19731 0000EDBA 488B4510                	mov rax, qword [rbp + 8 * 2]
 19732                                  
 19733 0000EDBE 488B4008                                          	mov rax, qword[rax + 8 * 1]
 19734                                  
 19735 0000EDC2 488B00                                            	mov rax, qword[rax + 8 * 0]
 19736                                  .L_applic_TC_4060:
 19737 0000EDC5 803805                  	cmp byte [rax], T_closure
 19738 0000EDC8 0F85B5400000            	jne L_code_ptr_error
 19739 0000EDCE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19740 0000EDD2 53                      	push rbx
 19741 0000EDD3 FF7508                  	push qword [rbp + 8]
 19742 0000EDD6 FF7500                  	push qword [rbp]
 19743 0000EDD9 488B4D18                	mov rcx, [rbp + 3 * 8]
 19744 0000EDDD 488B542418              	mov rdx, [rsp + 3 * 8]
 19745 0000EDE2 488D7204                	lea rsi, [rdx + 4]
 19746 0000EDE6 4C8D4EFF                	lea r9, [rsi - 1]
 19747 0000EDEA 488D7903                	lea rdi, [rcx + 3]
 19748 0000EDEE 4D31C0                  	xor r8, r8
 19749                                  .L_tc_recycle_frame_loop_4060:
 19750 0000EDF1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19751 0000EDF5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19752 0000EDFA 49FFC9                  	dec r9
 19753 0000EDFD 4D31C0                  	xor r8, r8
 19754 0000EE00 48FFCF                  	dec rdi
 19755 0000EE03 48FFCE                  	dec rsi
 19756 0000EE06 4883FE00                	cmp rsi, 0
 19757 0000EE0A 75E5                    	jne .L_tc_recycle_frame_loop_4060
 19758                                  .L_tc_recycle_frame_done_4060:
 19759                                  ;this pop rbp in sot to the right place
 19760 0000EE0C 4989C9                  	mov r9, rcx
 19761 0000EE0F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19762 0000EE17 4C01CC                  	add rsp, r9
 19763 0000EE1A 5D                      	pop rbp
 19764 0000EE1B 488B4D00                	mov rcx, qword [rbp]
 19765 0000EE1F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19766 0000EE23 FFE3                    	jmp rbx
 19767 0000EE25 C9                      	leave
 19768 0000EE26 C21800                  	ret 8 * (2 + 1)
 19769                                  .L_lambda_simple_end_37ac:	; new closure is in rax
 19770                                  .L_applic_TC_4061:
 19771 0000EE29 803805                  	cmp byte [rax], T_closure
 19772 0000EE2C 0F8551400000            	jne L_code_ptr_error
 19773 0000EE32 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19774 0000EE36 53                      	push rbx
 19775 0000EE37 FF7508                  	push qword [rbp + 8]
 19776 0000EE3A FF7500                  	push qword [rbp]
 19777 0000EE3D 488B4D18                	mov rcx, [rbp + 3 * 8]
 19778 0000EE41 488B542418              	mov rdx, [rsp + 3 * 8]
 19779 0000EE46 488D7204                	lea rsi, [rdx + 4]
 19780 0000EE4A 4C8D4EFF                	lea r9, [rsi - 1]
 19781 0000EE4E 488D7903                	lea rdi, [rcx + 3]
 19782 0000EE52 4D31C0                  	xor r8, r8
 19783                                  .L_tc_recycle_frame_loop_4061:
 19784 0000EE55 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19785 0000EE59 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19786 0000EE5E 49FFC9                  	dec r9
 19787 0000EE61 4D31C0                  	xor r8, r8
 19788 0000EE64 48FFCF                  	dec rdi
 19789 0000EE67 48FFCE                  	dec rsi
 19790 0000EE6A 4883FE00                	cmp rsi, 0
 19791 0000EE6E 75E5                    	jne .L_tc_recycle_frame_loop_4061
 19792                                  .L_tc_recycle_frame_done_4061:
 19793                                  ;this pop rbp in sot to the right place
 19794 0000EE70 4989C9                  	mov r9, rcx
 19795 0000EE73 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19796 0000EE7B 4C01CC                  	add rsp, r9
 19797 0000EE7E 5D                      	pop rbp
 19798 0000EE7F 488B4D00                	mov rcx, qword [rbp]
 19799 0000EE83 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19800 0000EE87 FFE3                    	jmp rbx
 19801 0000EE89 C9                      	leave
 19802 0000EE8A C22000                  	ret 8 * (2 + 2)
 19803                                  .L_lambda_opt_end_088e:	; new closure is in rax
 19804 0000EE8D C9                      	leave
 19805 0000EE8E C21800                  	ret 8 * (2 + 1)
 19806                                  .L_lambda_simple_end_37ab:	; new closure is in rax
 19807                                  	assert_closure(rax)
    42 0000EE91 803805              <1>  cmp byte [%1], %2
    43 0000EE94 0F8528480000        <1>  jne L_error_incorrect_type
 19808 0000EE9A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19809 0000EE9D FF5009                  	call SOB_CLOSURE_CODE(rax)
 19810 0000EEA0 48890425[98010000]      	mov qword [free_var_51], rax
 19811 0000EEA8 48B8-                   	mov rax, sob_void
 19811 0000EEAA [0000000000000000] 
 19812                                  
 19813 0000EEB2 4889C7                  	mov rdi, rax
 19814 0000EEB5 E825300000              	call print_sexpr_if_not_void
 19815                                  
 19816 0000EEBA 488B0425[A0010000]      	mov rax, qword [free_var_52]
 19817 0000EEC2 50                      	push rax
 19818 0000EEC3 6A01                    	push 1
 19819 0000EEC5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19820 0000EECA E8FF2F0000              	call malloc
 19821 0000EECF 50                      	push rax
 19822 0000EED0 BF00000000              	mov rdi, 8 * 0	; new rib
 19823 0000EED5 E8F42F0000              	call malloc
 19824 0000EEDA 50                      	push rax
 19825 0000EEDB BF08000000              	mov rdi, 8 * 1	; extended env
 19826 0000EEE0 E8E92F0000              	call malloc
 19827 0000EEE5 488B7D10                	mov rdi, ENV
 19828 0000EEE9 BE00000000              	mov rsi, 0
 19829 0000EEEE BA01000000              	mov rdx, 1
 19830                                  .L_lambda_simple_env_loop_37ad:	; ext_env[i + 1] <-- env[i]
 19831 0000EEF3 4883FE00                	cmp rsi, 0
 19832 0000EEF7 7410                    	je .L_lambda_simple_env_end_37ad
 19833 0000EEF9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19834 0000EEFD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19835 0000EF01 48FFC6                  	inc rsi
 19836 0000EF04 48FFC2                  	inc rdx
 19837 0000EF07 EBEA                    	jmp .L_lambda_simple_env_loop_37ad
 19838                                  .L_lambda_simple_env_end_37ad:
 19839 0000EF09 5B                      	pop rbx
 19840 0000EF0A BE00000000              	mov rsi, 0
 19841                                  .L_lambda_simple_params_loop_37ad:	; copy params
 19842 0000EF0F 4883FE00                	cmp rsi, 0
 19843 0000EF13 740E                    	je .L_lambda_simple_params_end_37ad
 19844 0000EF15 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19845 0000EF1A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19846 0000EF1E 48FFC6                  	inc rsi
 19847 0000EF21 EBEC                    	jmp .L_lambda_simple_params_loop_37ad
 19848                                  .L_lambda_simple_params_end_37ad:
 19849 0000EF23 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19850 0000EF26 4889C3                  	mov rbx, rax
 19851 0000EF29 58                      	pop rax
 19852 0000EF2A C60005                  	mov byte [rax], T_closure
 19853 0000EF2D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19854 0000EF31 48C74009[3EEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37ad
 19855 0000EF39 E90C040000              	jmp .L_lambda_simple_end_37ad
 19856                                  .L_lambda_simple_code_37ad:	; lambda-simple body
 19857 0000EF3E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19858 0000EF44 740B                    	je .L_lambda_simple_arity_check_ok_37ad
 19859 0000EF46 FF742410                	push qword [rsp + 8 * 2]
 19860 0000EF4A 6A01                    	push 1
 19861 0000EF4C E9362F0000              	jmp L_error_incorrect_arity_simple
 19862                                  .L_lambda_simple_arity_check_ok_37ad:
 19863 0000EF51 C8000000                	enter 0, 0
 19864 0000EF55 BF11000000              	mov rdi, (1 + 8 + 8)
 19865 0000EF5A E86F2F0000              	call malloc
 19866 0000EF5F 50                      	push rax
 19867 0000EF60 BF08000000              	mov rdi, 8 * 1
 19868 0000EF65 E8642F0000              	call malloc
 19869 0000EF6A 50                      	push rax
 19870 0000EF6B BF10000000              	mov rdi, 8 * 2
 19871 0000EF70 E8592F0000              	call malloc
 19872 0000EF75 488B7D10                	mov rdi, ENV
 19873 0000EF79 4831F6                  	xor rsi, rsi
 19874 0000EF7C 4831D2                  	xor rdx, rdx
 19875 0000EF7F 48FFC2                  	inc rdx
 19876                                  	.L_lambda_opt_env_loop_088f:
 19877                                  
 19878 0000EF82 4883FE01                        	cmp rsi, 1
 19879                                  
 19880 0000EF86 7412                            	je .L_lambda_opt_env_end_088f
 19881 0000EF88 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19882 0000EF8C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19883 0000EF90 4883C201                	add rdx, 1
 19884 0000EF94 4883C601                	add rsi, 1
 19885 0000EF98 EBE8                    	jmp .L_lambda_opt_env_loop_088f
 19886                                  
 19887                                          	.L_lambda_opt_env_end_088f:
 19888 0000EF9A 5B                      	pop rbx
 19889 0000EF9B 4831F6                  	xor rsi, rsi
 19890                                  	.L_lambda_opt_params_loop_088f:
 19891                                  
 19892 0000EF9E 4883FE01                        	cmp rsi, 1
 19893                                  
 19894 0000EFA2 740F                            	je .L_lambda_opt_params_end_088f
 19895 0000EFA4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19896 0000EFA9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19897 0000EFAD 4883C601                	add rsi, 1
 19898 0000EFB1 EBEB                    	jmp .L_lambda_opt_params_loop_088f
 19899                                  
 19900                                          	.L_lambda_opt_params_end_088f:
 19901 0000EFB3 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 19902 0000EFB6 4889C3                  	mov rbx, rax
 19903 0000EFB9 58                      	pop rax
 19904 0000EFBA C60005                  	mov byte [rax], T_closure
 19905 0000EFBD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19906 0000EFC1 48C74009[CEEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_088f
 19907                                  
 19908 0000EFC9 E978030000                      	jmp .L_lambda_opt_end_088f
 19909                                  
 19910                                          	.L_lambda_opt_code_088f:
 19911                                  
 19912 0000EFCE 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 19913                                  
 19914 0000EFD4 740D                            	je .L_lambda_opt_arity_check_exact_088f  ;same num_of_args
 19915                                  
 19916 0000EFD6 7F65                            	jg .L_lambda_opt_arity_check_more_088f  ;greater num_of_args
 19917 0000EFD8 FF742410                	push qword [rsp + 8 * 2]
 19918 0000EFDC 6A01                    	push 1
 19919 0000EFDE E9B82E0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 19920                                  .L_lambda_opt_arity_check_exact_088f:
 19921 0000EFE3 4883EC08                	sub rsp, 8 * 1
 19922 0000EFE7 488D7F10                	lea rdi, [rdi + (8 * 2)]
 19923 0000EFEB 4889E7                  	mov rdi, rsp 
 19924 0000EFEE 488B4708                	mov rax, qword [rdi + 8]
 19925 0000EFF2 488907                  	mov qword [rdi], rax
 19926 0000EFF5 488D7F08                	lea rdi, [rdi + 8]
 19927 0000EFF9 488B4708                	mov rax, qword [rdi + 8]
 19928 0000EFFD 488907                  	mov qword [rdi], rax
 19929 0000F000 488D7F08                	lea rdi, [rdi + 8]
 19930 0000F004 488B4708                	mov rax, qword [rdi + 8]
 19931 0000F008 4889C1                  	mov rcx, rax
 19932 0000F00B 4883C001                	add rax, 1
 19933 0000F00F 488907                  	mov qword [rdi], rax
 19934 0000F012 488D7F08                	lea rdi, [rdi + 8]
 19935                                  	.L_lambda_opt_stack_shrink_loop_19ab:
 19936 0000F016 4883F900                	cmp rcx, 0
 19937 0000F01A 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_19ab
 19938 0000F01C 4883E901                	sub rcx, 1
 19939 0000F020 488D4010                	lea rax, [rax + (8 * 2)]
 19940 0000F024 488B4708                	mov rax, qword [rdi + 8]
 19941 0000F028 488907                  	mov qword [rdi], rax
 19942 0000F02B 488D7F08                	lea rdi, [rdi + 8]
 19943 0000F02F EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_19ab
 19944                                  
 19945                                          	.L_lambda_opt_stack_shrink_loop_exit_19ab:
 19946 0000F031 48C707[01000000]        	mov qword [rdi], sob_nil
 19947 0000F038 E997000000              	jmp .L_lambda_opt_stack_adjusted_088f
 19948                                  
 19949                                          	.L_lambda_opt_arity_check_more_088f:
 19950 0000F03D 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 19951 0000F042 488D4EFF                	lea rcx, [rsi - 1]
 19952 0000F046 49B8-                   	mov r8, sob_nil
 19952 0000F048 [0100000000000000] 
 19953 0000F050 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 19954 0000F055 4889F2                  	mov rdx, rsi
 19955                                  	.L_lambda_opt_stack_shrink_loop_19ac:
 19956 0000F058 4883F900                	cmp rcx, 0
 19957 0000F05C 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_19ac
 19958 0000F05E BF11000000              	mov rdi, 1 + (8 * 2)
 19959 0000F063 E8662E0000              	call malloc
 19960 0000F068 C60021                  	mov byte [rax], T_pair
 19961 0000F06B 488B1E                  	mov rbx, qword [rsi]
 19962 0000F06E 48895801                	mov SOB_PAIR_CAR(rax), rbx
 19963 0000F072 4C894009                	mov SOB_PAIR_CDR(rax), r8
 19964 0000F076 4883C6F8                	add rsi, -8
 19965 0000F07A 4883E901                	sub rcx, 1
 19966 0000F07E 4989C0                  	mov r8, rax
 19967 0000F081 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_19ac
 19968                                  
 19969                                          	.L_lambda_opt_stack_shrink_loop_exit_19ac:
 19970 0000F083 4C8902                  	mov qword [rdx], r8
 19971 0000F086 4883EA08                	sub rdx, 8 * 1
 19972 0000F08A 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 19973                                  
 19974 0000F08F B901000000                      	mov rcx, 1 
 19975                                  
 19976                                          	.L_lambda_opt_stack_shrink_loop_19ad:
 19977 0000F094 4883F900                	cmp rcx, 0
 19978 0000F098 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_19ad
 19979 0000F09A 488B06                  	mov rax, qword [rsi]
 19980 0000F09D 488902                  	mov qword [rdx], rax
 19981 0000F0A0 488D76F8                	lea rsi, [rsi - 8]
 19982 0000F0A4 4883C2F8                	add rdx, -8
 19983 0000F0A8 4883C1FF                	add rcx, -1
 19984 0000F0AC EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_19ad
 19985                                  
 19986                                          	.L_lambda_opt_stack_shrink_loop_exit_19ad:
 19987                                  
 19988 0000F0AE 48C70202000000                  	mov qword [rdx], 1 + 1
 19989 0000F0B5 4883C6F8                	add rsi, -8
 19990 0000F0B9 4883C2F8                	add rdx, -8
 19991 0000F0BD 488B06                  	mov rax, qword [rsi]
 19992 0000F0C0 488902                  	mov qword [rdx], rax
 19993 0000F0C3 4883C2F8                	add rdx, -8
 19994 0000F0C7 488D76F8                	lea rsi, [rsi - 8]
 19995 0000F0CB 488B06                  	mov rax, qword [rsi]
 19996 0000F0CE 488902                  	mov qword [rdx], rax
 19997 0000F0D1 4889D4                  	mov rsp, rdx
 19998                                  	.L_lambda_opt_stack_adjusted_088f:
 19999 0000F0D4 C8000000                	enter 0, 0
 20000 0000F0D8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20001 0000F0DC 50                      	push rax
 20002 0000F0DD 6A01                    	push 1
 20003 0000F0DF 488B0425[00000000]      	mov rax, qword [free_var_0]
 20004                                  	assert_closure(rax)
    42 0000F0E7 803805              <1>  cmp byte [%1], %2
    43 0000F0EA 0F85D2450000        <1>  jne L_error_incorrect_type
 20005 0000F0F0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20006 0000F0F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20007                                  
 20008 0000F0F6 483D[02000000]                  	cmp rax, sob_boolean_false
 20009                                  
 20010 0000F0FC 740F                            	je .L_if_else_4810
 20011 0000F0FE 48B8-                   	mov rax,L_constants + 4
 20011 0000F100 [0400000000000000] 
 20012                                  
 20013 0000F108 E9C1000000                      	jmp .L_if_end_4810
 20014                                  
 20015                                          	.L_if_else_4810:
 20016 0000F10D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20017 0000F111 50                      	push rax
 20018 0000F112 6A01                    	push 1
 20019 0000F114 488B0425[08000000]      	mov rax, qword [free_var_1]
 20020                                  	assert_closure(rax)
    42 0000F11C 803805              <1>  cmp byte [%1], %2
    43 0000F11F 0F859D450000        <1>  jne L_error_incorrect_type
 20021 0000F125 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20022 0000F128 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20023                                  
 20024 0000F12B 483D[02000000]                  	cmp rax, sob_boolean_false
 20025                                  
 20026 0000F131 743A                            	je .L_if_else_4812
 20027 0000F133 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20028 0000F137 50                      	push rax
 20029 0000F138 6A01                    	push 1
 20030 0000F13A 488B0425[88000000]      	mov rax, qword [free_var_17]
 20031                                  	assert_closure(rax)
    42 0000F142 803805              <1>  cmp byte [%1], %2
    43 0000F145 0F8577450000        <1>  jne L_error_incorrect_type
 20032 0000F14B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20033 0000F14E FF5009                  	call SOB_CLOSURE_CODE(rax)
 20034 0000F151 50                      	push rax
 20035 0000F152 6A01                    	push 1
 20036 0000F154 488B0425[00000000]      	mov rax, qword [free_var_0]
 20037                                  	assert_closure(rax)
    42 0000F15C 803805              <1>  cmp byte [%1], %2
    43 0000F15F 0F855D450000        <1>  jne L_error_incorrect_type
 20038 0000F165 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20039 0000F168 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20040                                  
 20041 0000F16B EB0A                            	jmp .L_if_end_4812
 20042                                  
 20043                                          	.L_if_else_4812:
 20044 0000F16D 48B8-                   	mov rax,L_constants + 2
 20044 0000F16F [0200000000000000] 
 20045                                  
 20046                                          	.L_if_end_4812:
 20047                                  
 20048 0000F177 483D[02000000]                  	cmp rax, sob_boolean_false
 20049                                  
 20050 0000F17D 7420                            	je .L_if_else_4811
 20051 0000F17F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20052 0000F183 50                      	push rax
 20053 0000F184 6A01                    	push 1
 20054 0000F186 488B0425[80000000]      	mov rax, qword [free_var_16]
 20055                                  	assert_closure(rax)
    42 0000F18E 803805              <1>  cmp byte [%1], %2
    43 0000F191 0F852B450000        <1>  jne L_error_incorrect_type
 20056 0000F197 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20057 0000F19A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20058                                  
 20059 0000F19D EB2F                            	jmp .L_if_end_4811
 20060                                  
 20061                                          	.L_if_else_4811:
 20062 0000F19F 48B8-                   	mov rax,L_constants + 460
 20062 0000F1A1 [CC01000000000000] 
 20063 0000F1A9 50                      	push rax
 20064 0000F1AA 48B8-                   	mov rax,L_constants + 451
 20064 0000F1AC [C301000000000000] 
 20065 0000F1B4 50                      	push rax
 20066 0000F1B5 6A02                    	push 2
 20067 0000F1B7 488B0425[30010000]      	mov rax, qword [free_var_38]
 20068                                  	assert_closure(rax)
    42 0000F1BF 803805              <1>  cmp byte [%1], %2
    43 0000F1C2 0F85FA440000        <1>  jne L_error_incorrect_type
 20069 0000F1C8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20070 0000F1CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 20071                                  
 20072                                          	.L_if_end_4811:
 20073                                  
 20074                                          	.L_if_end_4810:
 20075 0000F1CE 50                      	push rax
 20076 0000F1CF 6A01                    	push 1
 20077 0000F1D1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20078 0000F1D6 E8F32C0000              	call malloc
 20079 0000F1DB 50                      	push rax
 20080 0000F1DC BF10000000              	mov rdi, 8 * 2	; new rib
 20081 0000F1E1 E8E82C0000              	call malloc
 20082 0000F1E6 50                      	push rax
 20083 0000F1E7 BF18000000              	mov rdi, 8 * 3	; extended env
 20084 0000F1EC E8DD2C0000              	call malloc
 20085 0000F1F1 488B7D10                	mov rdi, ENV
 20086 0000F1F5 BE00000000              	mov rsi, 0
 20087 0000F1FA BA01000000              	mov rdx, 1
 20088                                  .L_lambda_simple_env_loop_37ae:	; ext_env[i + 1] <-- env[i]
 20089 0000F1FF 4883FE02                	cmp rsi, 2
 20090 0000F203 7410                    	je .L_lambda_simple_env_end_37ae
 20091 0000F205 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20092 0000F209 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20093 0000F20D 48FFC6                  	inc rsi
 20094 0000F210 48FFC2                  	inc rdx
 20095 0000F213 EBEA                    	jmp .L_lambda_simple_env_loop_37ae
 20096                                  .L_lambda_simple_env_end_37ae:
 20097 0000F215 5B                      	pop rbx
 20098 0000F216 BE00000000              	mov rsi, 0
 20099                                  .L_lambda_simple_params_loop_37ae:	; copy params
 20100 0000F21B 4883FE02                	cmp rsi, 2
 20101 0000F21F 740E                    	je .L_lambda_simple_params_end_37ae
 20102 0000F221 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20103 0000F226 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20104 0000F22A 48FFC6                  	inc rsi
 20105 0000F22D EBEC                    	jmp .L_lambda_simple_params_loop_37ae
 20106                                  .L_lambda_simple_params_end_37ae:
 20107 0000F22F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20108 0000F232 4889C3                  	mov rbx, rax
 20109 0000F235 58                      	pop rax
 20110 0000F236 C60005                  	mov byte [rax], T_closure
 20111 0000F239 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20112 0000F23D 48C74009[4AF20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37ae
 20113 0000F245 E998000000              	jmp .L_lambda_simple_end_37ae
 20114                                  .L_lambda_simple_code_37ae:	; lambda-simple body
 20115 0000F24A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20116 0000F250 740B                    	je .L_lambda_simple_arity_check_ok_37ae
 20117 0000F252 FF742410                	push qword [rsp + 8 * 2]
 20118 0000F256 6A01                    	push 1
 20119 0000F258 E92A2C0000              	jmp L_error_incorrect_arity_simple
 20120                                  .L_lambda_simple_arity_check_ok_37ae:
 20121 0000F25D C8000000                	enter 0, 0
 20122 0000F261 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20123 0000F265 50                      	push rax
 20124 0000F266 488B4510                	mov rax, qword [rbp + 8 * 2]
 20125                                  
 20126 0000F26A 488B00                                            	mov rax, qword[rax + 8 * 0]
 20127                                  
 20128 0000F26D 488B00                                            	mov rax, qword[rax + 8 * 0]
 20129 0000F270 50                      	push rax
 20130 0000F271 6A02                    	push 2
 20131 0000F273 488B4510                	mov rax, qword [rbp + 8 * 2]
 20132                                  
 20133 0000F277 488B4008                                          	mov rax, qword[rax + 8 * 1]
 20134                                  
 20135 0000F27B 488B00                                            	mov rax, qword[rax + 8 * 0]
 20136                                  .L_applic_TC_4062:
 20137 0000F27E 803805                  	cmp byte [rax], T_closure
 20138 0000F281 0F85FC3B0000            	jne L_code_ptr_error
 20139 0000F287 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20140 0000F28B 53                      	push rbx
 20141 0000F28C FF7508                  	push qword [rbp + 8]
 20142 0000F28F FF7500                  	push qword [rbp]
 20143 0000F292 488B4D18                	mov rcx, [rbp + 3 * 8]
 20144 0000F296 488B542418              	mov rdx, [rsp + 3 * 8]
 20145 0000F29B 488D7204                	lea rsi, [rdx + 4]
 20146 0000F29F 4C8D4EFF                	lea r9, [rsi - 1]
 20147 0000F2A3 488D7903                	lea rdi, [rcx + 3]
 20148 0000F2A7 4D31C0                  	xor r8, r8
 20149                                  .L_tc_recycle_frame_loop_4062:
 20150 0000F2AA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20151 0000F2AE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20152 0000F2B3 49FFC9                  	dec r9
 20153 0000F2B6 4D31C0                  	xor r8, r8
 20154 0000F2B9 48FFCF                  	dec rdi
 20155 0000F2BC 48FFCE                  	dec rsi
 20156 0000F2BF 4883FE00                	cmp rsi, 0
 20157 0000F2C3 75E5                    	jne .L_tc_recycle_frame_loop_4062
 20158                                  .L_tc_recycle_frame_done_4062:
 20159                                  ;this pop rbp in sot to the right place
 20160 0000F2C5 4989C9                  	mov r9, rcx
 20161 0000F2C8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20162 0000F2D0 4C01CC                  	add rsp, r9
 20163 0000F2D3 5D                      	pop rbp
 20164 0000F2D4 488B4D00                	mov rcx, qword [rbp]
 20165 0000F2D8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20166 0000F2DC FFE3                    	jmp rbx
 20167 0000F2DE C9                      	leave
 20168 0000F2DF C21800                  	ret 8 * (2 + 1)
 20169                                  .L_lambda_simple_end_37ae:	; new closure is in rax
 20170                                  .L_applic_TC_4063:
 20171 0000F2E2 803805                  	cmp byte [rax], T_closure
 20172 0000F2E5 0F85983B0000            	jne L_code_ptr_error
 20173 0000F2EB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20174 0000F2EF 53                      	push rbx
 20175 0000F2F0 FF7508                  	push qword [rbp + 8]
 20176 0000F2F3 FF7500                  	push qword [rbp]
 20177 0000F2F6 488B4D18                	mov rcx, [rbp + 3 * 8]
 20178 0000F2FA 488B542418              	mov rdx, [rsp + 3 * 8]
 20179 0000F2FF 488D7204                	lea rsi, [rdx + 4]
 20180 0000F303 4C8D4EFF                	lea r9, [rsi - 1]
 20181 0000F307 488D7903                	lea rdi, [rcx + 3]
 20182 0000F30B 4D31C0                  	xor r8, r8
 20183                                  .L_tc_recycle_frame_loop_4063:
 20184 0000F30E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20185 0000F312 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20186 0000F317 49FFC9                  	dec r9
 20187 0000F31A 4D31C0                  	xor r8, r8
 20188 0000F31D 48FFCF                  	dec rdi
 20189 0000F320 48FFCE                  	dec rsi
 20190 0000F323 4883FE00                	cmp rsi, 0
 20191 0000F327 75E5                    	jne .L_tc_recycle_frame_loop_4063
 20192                                  .L_tc_recycle_frame_done_4063:
 20193                                  ;this pop rbp in sot to the right place
 20194 0000F329 4989C9                  	mov r9, rcx
 20195 0000F32C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20196 0000F334 4C01CC                  	add rsp, r9
 20197 0000F337 5D                      	pop rbp
 20198 0000F338 488B4D00                	mov rcx, qword [rbp]
 20199 0000F33C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20200 0000F340 FFE3                    	jmp rbx
 20201 0000F342 C9                      	leave
 20202 0000F343 C22000                  	ret 8 * (2 + 2)
 20203                                  .L_lambda_opt_end_088f:	; new closure is in rax
 20204 0000F346 C9                      	leave
 20205 0000F347 C21800                  	ret 8 * (2 + 1)
 20206                                  .L_lambda_simple_end_37ad:	; new closure is in rax
 20207                                  	assert_closure(rax)
    42 0000F34A 803805              <1>  cmp byte [%1], %2
    43 0000F34D 0F856F430000        <1>  jne L_error_incorrect_type
 20208 0000F353 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20209 0000F356 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20210 0000F359 48890425[A0010000]      	mov qword [free_var_52], rax
 20211 0000F361 48B8-                   	mov rax, sob_void
 20211 0000F363 [0000000000000000] 
 20212                                  
 20213 0000F36B 4889C7                  	mov rdi, rax
 20214 0000F36E E86C2B0000              	call print_sexpr_if_not_void
 20215                                  
 20216 0000F373 48B8-                   	mov rax,L_constants + 23
 20216 0000F375 [1700000000000000] 
 20217 0000F37D 50                      	push rax
 20218 0000F37E 6A01                    	push 1
 20219 0000F380 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20220 0000F385 E8442B0000              	call malloc
 20221 0000F38A 50                      	push rax
 20222 0000F38B BF00000000              	mov rdi, 8 * 0	; new rib
 20223 0000F390 E8392B0000              	call malloc
 20224 0000F395 50                      	push rax
 20225 0000F396 BF08000000              	mov rdi, 8 * 1	; extended env
 20226 0000F39B E82E2B0000              	call malloc
 20227 0000F3A0 488B7D10                	mov rdi, ENV
 20228 0000F3A4 BE00000000              	mov rsi, 0
 20229 0000F3A9 BA01000000              	mov rdx, 1
 20230                                  .L_lambda_simple_env_loop_37af:	; ext_env[i + 1] <-- env[i]
 20231 0000F3AE 4883FE00                	cmp rsi, 0
 20232 0000F3B2 7410                    	je .L_lambda_simple_env_end_37af
 20233 0000F3B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20234 0000F3B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20235 0000F3BC 48FFC6                  	inc rsi
 20236 0000F3BF 48FFC2                  	inc rdx
 20237 0000F3C2 EBEA                    	jmp .L_lambda_simple_env_loop_37af
 20238                                  .L_lambda_simple_env_end_37af:
 20239 0000F3C4 5B                      	pop rbx
 20240 0000F3C5 BE00000000              	mov rsi, 0
 20241                                  .L_lambda_simple_params_loop_37af:	; copy params
 20242 0000F3CA 4883FE00                	cmp rsi, 0
 20243 0000F3CE 740E                    	je .L_lambda_simple_params_end_37af
 20244 0000F3D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20245 0000F3D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20246 0000F3D9 48FFC6                  	inc rsi
 20247 0000F3DC EBEC                    	jmp .L_lambda_simple_params_loop_37af
 20248                                  .L_lambda_simple_params_end_37af:
 20249 0000F3DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20250 0000F3E1 4889C3                  	mov rbx, rax
 20251 0000F3E4 58                      	pop rax
 20252 0000F3E5 C60005                  	mov byte [rax], T_closure
 20253 0000F3E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20254 0000F3EC 48C74009[F9F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37af
 20255 0000F3F4 E949040000              	jmp .L_lambda_simple_end_37af
 20256                                  .L_lambda_simple_code_37af:	; lambda-simple body
 20257 0000F3F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20258 0000F3FF 740B                    	je .L_lambda_simple_arity_check_ok_37af
 20259 0000F401 FF742410                	push qword [rsp + 8 * 2]
 20260 0000F405 6A01                    	push 1
 20261 0000F407 E97B2A0000              	jmp L_error_incorrect_arity_simple
 20262                                  .L_lambda_simple_arity_check_ok_37af:
 20263 0000F40C C8000000                	enter 0, 0
 20264 0000F410 BF08000000              	mov rdi, 8
 20265 0000F415 E8B42A0000              	call malloc
 20266 0000F41A 488B5D20                	mov rbx, PARAM(0)
 20267 0000F41E 488918                  	mov qword [rax], rbx
 20268 0000F421 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 20269                                  
 20270 0000F425 48B8-                            	mov rax, sob_void
 20270 0000F427 [0000000000000000] 
 20271                                  
 20272 0000F42F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20273 0000F434 E8952A0000              	call malloc
 20274 0000F439 50                      	push rax
 20275 0000F43A BF08000000              	mov rdi, 8 * 1	; new rib
 20276 0000F43F E88A2A0000              	call malloc
 20277 0000F444 50                      	push rax
 20278 0000F445 BF10000000              	mov rdi, 8 * 2	; extended env
 20279 0000F44A E87F2A0000              	call malloc
 20280 0000F44F 488B7D10                	mov rdi, ENV
 20281 0000F453 BE00000000              	mov rsi, 0
 20282 0000F458 BA01000000              	mov rdx, 1
 20283                                  .L_lambda_simple_env_loop_37b0:	; ext_env[i + 1] <-- env[i]
 20284 0000F45D 4883FE01                	cmp rsi, 1
 20285 0000F461 7410                    	je .L_lambda_simple_env_end_37b0
 20286 0000F463 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20287 0000F467 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20288 0000F46B 48FFC6                  	inc rsi
 20289 0000F46E 48FFC2                  	inc rdx
 20290 0000F471 EBEA                    	jmp .L_lambda_simple_env_loop_37b0
 20291                                  .L_lambda_simple_env_end_37b0:
 20292 0000F473 5B                      	pop rbx
 20293 0000F474 BE00000000              	mov rsi, 0
 20294                                  .L_lambda_simple_params_loop_37b0:	; copy params
 20295 0000F479 4883FE01                	cmp rsi, 1
 20296 0000F47D 740E                    	je .L_lambda_simple_params_end_37b0
 20297 0000F47F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20298 0000F484 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20299 0000F488 48FFC6                  	inc rsi
 20300 0000F48B EBEC                    	jmp .L_lambda_simple_params_loop_37b0
 20301                                  .L_lambda_simple_params_end_37b0:
 20302 0000F48D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20303 0000F490 4889C3                  	mov rbx, rax
 20304 0000F493 58                      	pop rax
 20305 0000F494 C60005                  	mov byte [rax], T_closure
 20306 0000F497 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20307 0000F49B 48C74009[A8F40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b0
 20308 0000F4A3 E972020000              	jmp .L_lambda_simple_end_37b0
 20309                                  .L_lambda_simple_code_37b0:	; lambda-simple body
 20310 0000F4A8 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20311 0000F4AE 740B                    	je .L_lambda_simple_arity_check_ok_37b0
 20312 0000F4B0 FF742410                	push qword [rsp + 8 * 2]
 20313 0000F4B4 6A02                    	push 2
 20314 0000F4B6 E9CC290000              	jmp L_error_incorrect_arity_simple
 20315                                  .L_lambda_simple_arity_check_ok_37b0:
 20316 0000F4BB C8000000                	enter 0, 0
 20317 0000F4BF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20318 0000F4C3 50                      	push rax
 20319 0000F4C4 6A01                    	push 1
 20320 0000F4C6 488B0425[00000000]      	mov rax, qword [free_var_0]
 20321                                  	assert_closure(rax)
    42 0000F4CE 803805              <1>  cmp byte [%1], %2
    43 0000F4D1 0F85EB410000        <1>  jne L_error_incorrect_type
 20322 0000F4D7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20323 0000F4DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 20324                                  
 20325 0000F4DD 483D[02000000]                  	cmp rax, sob_boolean_false
 20326                                  
 20327 0000F4E3 0F847F000000                    	je .L_if_else_4813
 20328 0000F4E9 48B8-                   	mov rax,L_constants + 0
 20328 0000F4EB [0000000000000000] 
 20329 0000F4F3 50                      	push rax
 20330 0000F4F4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20331 0000F4F8 50                      	push rax
 20332 0000F4F9 6A02                    	push 2
 20333 0000F4FB 488B0425[98010000]      	mov rax, qword [free_var_51]
 20334                                  .L_applic_TC_4065:
 20335 0000F503 803805                  	cmp byte [rax], T_closure
 20336 0000F506 0F8577390000            	jne L_code_ptr_error
 20337 0000F50C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20338 0000F510 53                      	push rbx
 20339 0000F511 FF7508                  	push qword [rbp + 8]
 20340 0000F514 FF7500                  	push qword [rbp]
 20341 0000F517 488B4D18                	mov rcx, [rbp + 3 * 8]
 20342 0000F51B 488B542418              	mov rdx, [rsp + 3 * 8]
 20343 0000F520 488D7204                	lea rsi, [rdx + 4]
 20344 0000F524 4C8D4EFF                	lea r9, [rsi - 1]
 20345 0000F528 488D7903                	lea rdi, [rcx + 3]
 20346 0000F52C 4D31C0                  	xor r8, r8
 20347                                  .L_tc_recycle_frame_loop_4065:
 20348 0000F52F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20349 0000F533 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20350 0000F538 49FFC9                  	dec r9
 20351 0000F53B 4D31C0                  	xor r8, r8
 20352 0000F53E 48FFCF                  	dec rdi
 20353 0000F541 48FFCE                  	dec rsi
 20354 0000F544 4883FE00                	cmp rsi, 0
 20355 0000F548 75E5                    	jne .L_tc_recycle_frame_loop_4065
 20356                                  .L_tc_recycle_frame_done_4065:
 20357                                  ;this pop rbp in sot to the right place
 20358 0000F54A 4989C9                  	mov r9, rcx
 20359 0000F54D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20360 0000F555 4C01CC                  	add rsp, r9
 20361 0000F558 5D                      	pop rbp
 20362 0000F559 488B4D00                	mov rcx, qword [rbp]
 20363 0000F55D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20364 0000F561 FFE3                    	jmp rbx
 20365                                  
 20366 0000F563 E9AE010000                      	jmp .L_if_end_4813
 20367                                  
 20368                                          	.L_if_else_4813:
 20369 0000F568 48B8-                   	mov rax,L_constants + 128
 20369 0000F56A [8000000000000000] 
 20370 0000F572 50                      	push rax
 20371 0000F573 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20372 0000F577 50                      	push rax
 20373 0000F578 6A02                    	push 2
 20374 0000F57A 488B0425[08030000]      	mov rax, qword [free_var_97]
 20375                                  	assert_closure(rax)
    42 0000F582 803805              <1>  cmp byte [%1], %2
    43 0000F585 0F8537410000        <1>  jne L_error_incorrect_type
 20376 0000F58B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20377 0000F58E FF5009                  	call SOB_CLOSURE_CODE(rax)
 20378 0000F591 50                      	push rax
 20379 0000F592 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20380 0000F596 50                      	push rax
 20381 0000F597 6A01                    	push 1
 20382 0000F599 488B0425[88000000]      	mov rax, qword [free_var_17]
 20383                                  	assert_closure(rax)
    42 0000F5A1 803805              <1>  cmp byte [%1], %2
    43 0000F5A4 0F8518410000        <1>  jne L_error_incorrect_type
 20384 0000F5AA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20385 0000F5AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 20386 0000F5B0 50                      	push rax
 20387 0000F5B1 6A02                    	push 2
 20388 0000F5B3 488B4510                	mov rax, qword [rbp + 8 * 2]
 20389                                  
 20390 0000F5B7 488B00                                            	mov rax, qword[rax + 8 * 0]
 20391                                  
 20392 0000F5BA 488B00                                            	mov rax, qword[rax + 8 * 0]
 20393 0000F5BD 488B00                  	mov rax, qword [rax]
 20394                                  	assert_closure(rax)
    42 0000F5C0 803805              <1>  cmp byte [%1], %2
    43 0000F5C3 0F85F9400000        <1>  jne L_error_incorrect_type
 20395 0000F5C9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20396 0000F5CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 20397 0000F5CF 50                      	push rax
 20398 0000F5D0 6A01                    	push 1
 20399 0000F5D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20400 0000F5D7 E8F2280000              	call malloc
 20401 0000F5DC 50                      	push rax
 20402 0000F5DD BF10000000              	mov rdi, 8 * 2	; new rib
 20403 0000F5E2 E8E7280000              	call malloc
 20404 0000F5E7 50                      	push rax
 20405 0000F5E8 BF18000000              	mov rdi, 8 * 3	; extended env
 20406 0000F5ED E8DC280000              	call malloc
 20407 0000F5F2 488B7D10                	mov rdi, ENV
 20408 0000F5F6 BE00000000              	mov rsi, 0
 20409 0000F5FB BA01000000              	mov rdx, 1
 20410                                  .L_lambda_simple_env_loop_37b1:	; ext_env[i + 1] <-- env[i]
 20411 0000F600 4883FE02                	cmp rsi, 2
 20412 0000F604 7410                    	je .L_lambda_simple_env_end_37b1
 20413 0000F606 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20414 0000F60A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20415 0000F60E 48FFC6                  	inc rsi
 20416 0000F611 48FFC2                  	inc rdx
 20417 0000F614 EBEA                    	jmp .L_lambda_simple_env_loop_37b1
 20418                                  .L_lambda_simple_env_end_37b1:
 20419 0000F616 5B                      	pop rbx
 20420 0000F617 BE00000000              	mov rsi, 0
 20421                                  .L_lambda_simple_params_loop_37b1:	; copy params
 20422 0000F61C 4883FE02                	cmp rsi, 2
 20423 0000F620 740E                    	je .L_lambda_simple_params_end_37b1
 20424 0000F622 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20425 0000F627 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20426 0000F62B 48FFC6                  	inc rsi
 20427 0000F62E EBEC                    	jmp .L_lambda_simple_params_loop_37b1
 20428                                  .L_lambda_simple_params_end_37b1:
 20429 0000F630 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20430 0000F633 4889C3                  	mov rbx, rax
 20431 0000F636 58                      	pop rax
 20432 0000F637 C60005                  	mov byte [rax], T_closure
 20433 0000F63A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20434 0000F63E 48C74009[48F60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b1
 20435 0000F646 EB6E                    	jmp .L_lambda_simple_end_37b1
 20436                                  .L_lambda_simple_code_37b1:	; lambda-simple body
 20437 0000F648 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20438 0000F64E 740B                    	je .L_lambda_simple_arity_check_ok_37b1
 20439 0000F650 FF742410                	push qword [rsp + 8 * 2]
 20440 0000F654 6A01                    	push 1
 20441 0000F656 E92C280000              	jmp L_error_incorrect_arity_simple
 20442                                  .L_lambda_simple_arity_check_ok_37b1:
 20443 0000F65B C8000000                	enter 0, 0
 20444 0000F65F 488B4510                	mov rax, qword [rbp + 8 * 2]
 20445                                  
 20446 0000F663 488B00                                            	mov rax, qword[rax + 8 * 0]
 20447                                  
 20448 0000F666 488B00                                            	mov rax, qword[rax + 8 * 0]
 20449 0000F669 50                      	push rax
 20450 0000F66A 6A01                    	push 1
 20451 0000F66C 488B0425[80000000]      	mov rax, qword [free_var_16]
 20452                                  	assert_closure(rax)
    42 0000F674 803805              <1>  cmp byte [%1], %2
    43 0000F677 0F8545400000        <1>  jne L_error_incorrect_type
 20453 0000F67D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20454 0000F680 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20455 0000F683 50                      	push rax
 20456 0000F684 488B4510                	mov rax, qword [rbp + 8 * 2]
 20457                                  
 20458 0000F688 488B00                                            	mov rax, qword[rax + 8 * 0]
 20459                                  
 20460 0000F68B 488B4008                                          	mov rax, qword[rax + 8 * 1]
 20461 0000F68F 50                      	push rax
 20462 0000F690 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20463 0000F694 50                      	push rax
 20464 0000F695 6A03                    	push 3
 20465 0000F697 488B0425[88010000]      	mov rax, qword [free_var_49]
 20466                                  	assert_closure(rax)
    42 0000F69F 803805              <1>  cmp byte [%1], %2
    43 0000F6A2 0F851A400000        <1>  jne L_error_incorrect_type
 20467 0000F6A8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20468 0000F6AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 20469                                  
 20470 0000F6AE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20471 0000F6B2 C9                      	leave
 20472 0000F6B3 C21800                  	ret 8 * (2 + 1)
 20473                                  .L_lambda_simple_end_37b1:	; new closure is in rax
 20474                                  .L_applic_TC_4064:
 20475 0000F6B6 803805                  	cmp byte [rax], T_closure
 20476 0000F6B9 0F85C4370000            	jne L_code_ptr_error
 20477 0000F6BF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20478 0000F6C3 53                      	push rbx
 20479 0000F6C4 FF7508                  	push qword [rbp + 8]
 20480 0000F6C7 FF7500                  	push qword [rbp]
 20481 0000F6CA 488B4D18                	mov rcx, [rbp + 3 * 8]
 20482 0000F6CE 488B542418              	mov rdx, [rsp + 3 * 8]
 20483 0000F6D3 488D7204                	lea rsi, [rdx + 4]
 20484 0000F6D7 4C8D4EFF                	lea r9, [rsi - 1]
 20485 0000F6DB 488D7903                	lea rdi, [rcx + 3]
 20486 0000F6DF 4D31C0                  	xor r8, r8
 20487                                  .L_tc_recycle_frame_loop_4064:
 20488 0000F6E2 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20489 0000F6E6 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20490 0000F6EB 49FFC9                  	dec r9
 20491 0000F6EE 4D31C0                  	xor r8, r8
 20492 0000F6F1 48FFCF                  	dec rdi
 20493 0000F6F4 48FFCE                  	dec rsi
 20494 0000F6F7 4883FE00                	cmp rsi, 0
 20495 0000F6FB 75E5                    	jne .L_tc_recycle_frame_loop_4064
 20496                                  .L_tc_recycle_frame_done_4064:
 20497                                  ;this pop rbp in sot to the right place
 20498 0000F6FD 4989C9                  	mov r9, rcx
 20499 0000F700 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20500 0000F708 4C01CC                  	add rsp, r9
 20501 0000F70B 5D                      	pop rbp
 20502 0000F70C 488B4D00                	mov rcx, qword [rbp]
 20503 0000F710 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20504 0000F714 FFE3                    	jmp rbx
 20505                                  
 20506                                          	.L_if_end_4813:
 20507 0000F716 C9                      	leave
 20508 0000F717 C22000                  	ret 8 * (2 + 2)
 20509                                  .L_lambda_simple_end_37b0:	; new closure is in rax
 20510 0000F71A 50                      	push rax
 20511 0000F71B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20512 0000F71F 8F00                    	pop qword [rax]
 20513 0000F721 48B8-                   	mov rax, sob_void
 20513 0000F723 [0000000000000000] 
 20514                                  
 20515 0000F72B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20516 0000F730 E899270000              	call malloc
 20517 0000F735 50                      	push rax
 20518 0000F736 BF08000000              	mov rdi, 8 * 1	; new rib
 20519 0000F73B E88E270000              	call malloc
 20520 0000F740 50                      	push rax
 20521 0000F741 BF10000000              	mov rdi, 8 * 2	; extended env
 20522 0000F746 E883270000              	call malloc
 20523 0000F74B 488B7D10                	mov rdi, ENV
 20524 0000F74F BE00000000              	mov rsi, 0
 20525 0000F754 BA01000000              	mov rdx, 1
 20526                                  .L_lambda_simple_env_loop_37b2:	; ext_env[i + 1] <-- env[i]
 20527 0000F759 4883FE01                	cmp rsi, 1
 20528 0000F75D 7410                    	je .L_lambda_simple_env_end_37b2
 20529 0000F75F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20530 0000F763 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20531 0000F767 48FFC6                  	inc rsi
 20532 0000F76A 48FFC2                  	inc rdx
 20533 0000F76D EBEA                    	jmp .L_lambda_simple_env_loop_37b2
 20534                                  .L_lambda_simple_env_end_37b2:
 20535 0000F76F 5B                      	pop rbx
 20536 0000F770 BE00000000              	mov rsi, 0
 20537                                  .L_lambda_simple_params_loop_37b2:	; copy params
 20538 0000F775 4883FE01                	cmp rsi, 1
 20539 0000F779 740E                    	je .L_lambda_simple_params_end_37b2
 20540 0000F77B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20541 0000F780 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20542 0000F784 48FFC6                  	inc rsi
 20543 0000F787 EBEC                    	jmp .L_lambda_simple_params_loop_37b2
 20544                                  .L_lambda_simple_params_end_37b2:
 20545 0000F789 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20546 0000F78C 4889C3                  	mov rbx, rax
 20547 0000F78F 58                      	pop rax
 20548 0000F790 C60005                  	mov byte [rax], T_closure
 20549 0000F793 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20550 0000F797 48C74009[A4F70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b2
 20551 0000F79F E99A000000              	jmp .L_lambda_simple_end_37b2
 20552                                  .L_lambda_simple_code_37b2:	; lambda-simple body
 20553 0000F7A4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20554 0000F7AA 740B                    	je .L_lambda_simple_arity_check_ok_37b2
 20555 0000F7AC FF742410                	push qword [rsp + 8 * 2]
 20556 0000F7B0 6A01                    	push 1
 20557 0000F7B2 E9D0260000              	jmp L_error_incorrect_arity_simple
 20558                                  .L_lambda_simple_arity_check_ok_37b2:
 20559 0000F7B7 C8000000                	enter 0, 0
 20560 0000F7BB 48B8-                   	mov rax,L_constants + 32
 20560 0000F7BD [2000000000000000] 
 20561 0000F7C5 50                      	push rax
 20562 0000F7C6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20563 0000F7CA 50                      	push rax
 20564 0000F7CB 6A02                    	push 2
 20565 0000F7CD 488B4510                	mov rax, qword [rbp + 8 * 2]
 20566                                  
 20567 0000F7D1 488B00                                            	mov rax, qword[rax + 8 * 0]
 20568                                  
 20569 0000F7D4 488B00                                            	mov rax, qword[rax + 8 * 0]
 20570 0000F7D7 488B00                  	mov rax, qword [rax]
 20571                                  .L_applic_TC_4066:
 20572 0000F7DA 803805                  	cmp byte [rax], T_closure
 20573 0000F7DD 0F85A0360000            	jne L_code_ptr_error
 20574 0000F7E3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20575 0000F7E7 53                      	push rbx
 20576 0000F7E8 FF7508                  	push qword [rbp + 8]
 20577 0000F7EB FF7500                  	push qword [rbp]
 20578 0000F7EE 488B4D18                	mov rcx, [rbp + 3 * 8]
 20579 0000F7F2 488B542418              	mov rdx, [rsp + 3 * 8]
 20580 0000F7F7 488D7204                	lea rsi, [rdx + 4]
 20581 0000F7FB 4C8D4EFF                	lea r9, [rsi - 1]
 20582 0000F7FF 488D7903                	lea rdi, [rcx + 3]
 20583 0000F803 4D31C0                  	xor r8, r8
 20584                                  .L_tc_recycle_frame_loop_4066:
 20585 0000F806 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20586 0000F80A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20587 0000F80F 49FFC9                  	dec r9
 20588 0000F812 4D31C0                  	xor r8, r8
 20589 0000F815 48FFCF                  	dec rdi
 20590 0000F818 48FFCE                  	dec rsi
 20591 0000F81B 4883FE00                	cmp rsi, 0
 20592 0000F81F 75E5                    	jne .L_tc_recycle_frame_loop_4066
 20593                                  .L_tc_recycle_frame_done_4066:
 20594                                  ;this pop rbp in sot to the right place
 20595 0000F821 4989C9                  	mov r9, rcx
 20596 0000F824 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20597 0000F82C 4C01CC                  	add rsp, r9
 20598 0000F82F 5D                      	pop rbp
 20599 0000F830 488B4D00                	mov rcx, qword [rbp]
 20600 0000F834 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20601 0000F838 FFE3                    	jmp rbx
 20602 0000F83A C9                      	leave
 20603 0000F83B C21800                  	ret 8 * (2 + 1)
 20604                                  .L_lambda_simple_end_37b2:	; new closure is in rax
 20605 0000F83E C9                      	leave
 20606 0000F83F C21800                  	ret 8 * (2 + 1)
 20607                                  .L_lambda_simple_end_37af:	; new closure is in rax
 20608                                  	assert_closure(rax)
    42 0000F842 803805              <1>  cmp byte [%1], %2
    43 0000F845 0F85773E0000        <1>  jne L_error_incorrect_type
 20609 0000F84B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20610 0000F84E FF5009                  	call SOB_CLOSURE_CODE(rax)
 20611 0000F851 48890425[38040000]      	mov qword [free_var_135], rax
 20612 0000F859 48B8-                   	mov rax, sob_void
 20612 0000F85B [0000000000000000] 
 20613                                  
 20614 0000F863 4889C7                  	mov rdi, rax
 20615 0000F866 E874260000              	call print_sexpr_if_not_void
 20616                                  
 20617 0000F86B 48B8-                   	mov rax,L_constants + 23
 20617 0000F86D [1700000000000000] 
 20618 0000F875 50                      	push rax
 20619 0000F876 6A01                    	push 1
 20620 0000F878 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20621 0000F87D E84C260000              	call malloc
 20622 0000F882 50                      	push rax
 20623 0000F883 BF00000000              	mov rdi, 8 * 0	; new rib
 20624 0000F888 E841260000              	call malloc
 20625 0000F88D 50                      	push rax
 20626 0000F88E BF08000000              	mov rdi, 8 * 1	; extended env
 20627 0000F893 E836260000              	call malloc
 20628 0000F898 488B7D10                	mov rdi, ENV
 20629 0000F89C BE00000000              	mov rsi, 0
 20630 0000F8A1 BA01000000              	mov rdx, 1
 20631                                  .L_lambda_simple_env_loop_37b3:	; ext_env[i + 1] <-- env[i]
 20632 0000F8A6 4883FE00                	cmp rsi, 0
 20633 0000F8AA 7410                    	je .L_lambda_simple_env_end_37b3
 20634 0000F8AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20635 0000F8B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20636 0000F8B4 48FFC6                  	inc rsi
 20637 0000F8B7 48FFC2                  	inc rdx
 20638 0000F8BA EBEA                    	jmp .L_lambda_simple_env_loop_37b3
 20639                                  .L_lambda_simple_env_end_37b3:
 20640 0000F8BC 5B                      	pop rbx
 20641 0000F8BD BE00000000              	mov rsi, 0
 20642                                  .L_lambda_simple_params_loop_37b3:	; copy params
 20643 0000F8C2 4883FE00                	cmp rsi, 0
 20644 0000F8C6 740E                    	je .L_lambda_simple_params_end_37b3
 20645 0000F8C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20646 0000F8CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20647 0000F8D1 48FFC6                  	inc rsi
 20648 0000F8D4 EBEC                    	jmp .L_lambda_simple_params_loop_37b3
 20649                                  .L_lambda_simple_params_end_37b3:
 20650 0000F8D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20651 0000F8D9 4889C3                  	mov rbx, rax
 20652 0000F8DC 58                      	pop rax
 20653 0000F8DD C60005                  	mov byte [rax], T_closure
 20654 0000F8E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20655 0000F8E4 48C74009[F1F80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b3
 20656 0000F8EC E949040000              	jmp .L_lambda_simple_end_37b3
 20657                                  .L_lambda_simple_code_37b3:	; lambda-simple body
 20658 0000F8F1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20659 0000F8F7 740B                    	je .L_lambda_simple_arity_check_ok_37b3
 20660 0000F8F9 FF742410                	push qword [rsp + 8 * 2]
 20661 0000F8FD 6A01                    	push 1
 20662 0000F8FF E983250000              	jmp L_error_incorrect_arity_simple
 20663                                  .L_lambda_simple_arity_check_ok_37b3:
 20664 0000F904 C8000000                	enter 0, 0
 20665 0000F908 BF08000000              	mov rdi, 8
 20666 0000F90D E8BC250000              	call malloc
 20667 0000F912 488B5D20                	mov rbx, PARAM(0)
 20668 0000F916 488918                  	mov qword [rax], rbx
 20669 0000F919 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 20670                                  
 20671 0000F91D 48B8-                            	mov rax, sob_void
 20671 0000F91F [0000000000000000] 
 20672                                  
 20673 0000F927 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20674 0000F92C E89D250000              	call malloc
 20675 0000F931 50                      	push rax
 20676 0000F932 BF08000000              	mov rdi, 8 * 1	; new rib
 20677 0000F937 E892250000              	call malloc
 20678 0000F93C 50                      	push rax
 20679 0000F93D BF10000000              	mov rdi, 8 * 2	; extended env
 20680 0000F942 E887250000              	call malloc
 20681 0000F947 488B7D10                	mov rdi, ENV
 20682 0000F94B BE00000000              	mov rsi, 0
 20683 0000F950 BA01000000              	mov rdx, 1
 20684                                  .L_lambda_simple_env_loop_37b4:	; ext_env[i + 1] <-- env[i]
 20685 0000F955 4883FE01                	cmp rsi, 1
 20686 0000F959 7410                    	je .L_lambda_simple_env_end_37b4
 20687 0000F95B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20688 0000F95F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20689 0000F963 48FFC6                  	inc rsi
 20690 0000F966 48FFC2                  	inc rdx
 20691 0000F969 EBEA                    	jmp .L_lambda_simple_env_loop_37b4
 20692                                  .L_lambda_simple_env_end_37b4:
 20693 0000F96B 5B                      	pop rbx
 20694 0000F96C BE00000000              	mov rsi, 0
 20695                                  .L_lambda_simple_params_loop_37b4:	; copy params
 20696 0000F971 4883FE01                	cmp rsi, 1
 20697 0000F975 740E                    	je .L_lambda_simple_params_end_37b4
 20698 0000F977 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20699 0000F97C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20700 0000F980 48FFC6                  	inc rsi
 20701 0000F983 EBEC                    	jmp .L_lambda_simple_params_loop_37b4
 20702                                  .L_lambda_simple_params_end_37b4:
 20703 0000F985 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20704 0000F988 4889C3                  	mov rbx, rax
 20705 0000F98B 58                      	pop rax
 20706 0000F98C C60005                  	mov byte [rax], T_closure
 20707 0000F98F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20708 0000F993 48C74009[A0F90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b4
 20709 0000F99B E972020000              	jmp .L_lambda_simple_end_37b4
 20710                                  .L_lambda_simple_code_37b4:	; lambda-simple body
 20711 0000F9A0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20712 0000F9A6 740B                    	je .L_lambda_simple_arity_check_ok_37b4
 20713 0000F9A8 FF742410                	push qword [rsp + 8 * 2]
 20714 0000F9AC 6A02                    	push 2
 20715 0000F9AE E9D4240000              	jmp L_error_incorrect_arity_simple
 20716                                  .L_lambda_simple_arity_check_ok_37b4:
 20717 0000F9B3 C8000000                	enter 0, 0
 20718 0000F9B7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20719 0000F9BB 50                      	push rax
 20720 0000F9BC 6A01                    	push 1
 20721 0000F9BE 488B0425[00000000]      	mov rax, qword [free_var_0]
 20722                                  	assert_closure(rax)
    42 0000F9C6 803805              <1>  cmp byte [%1], %2
    43 0000F9C9 0F85F33C0000        <1>  jne L_error_incorrect_type
 20723 0000F9CF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20724 0000F9D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20725                                  
 20726 0000F9D5 483D[02000000]                  	cmp rax, sob_boolean_false
 20727                                  
 20728 0000F9DB 0F847F000000                    	je .L_if_else_4814
 20729 0000F9E1 48B8-                   	mov rax,L_constants + 4
 20729 0000F9E3 [0400000000000000] 
 20730 0000F9EB 50                      	push rax
 20731 0000F9EC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20732 0000F9F0 50                      	push rax
 20733 0000F9F1 6A02                    	push 2
 20734 0000F9F3 488B0425[A0010000]      	mov rax, qword [free_var_52]
 20735                                  .L_applic_TC_4068:
 20736 0000F9FB 803805                  	cmp byte [rax], T_closure
 20737 0000F9FE 0F857F340000            	jne L_code_ptr_error
 20738 0000FA04 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20739 0000FA08 53                      	push rbx
 20740 0000FA09 FF7508                  	push qword [rbp + 8]
 20741 0000FA0C FF7500                  	push qword [rbp]
 20742 0000FA0F 488B4D18                	mov rcx, [rbp + 3 * 8]
 20743 0000FA13 488B542418              	mov rdx, [rsp + 3 * 8]
 20744 0000FA18 488D7204                	lea rsi, [rdx + 4]
 20745 0000FA1C 4C8D4EFF                	lea r9, [rsi - 1]
 20746 0000FA20 488D7903                	lea rdi, [rcx + 3]
 20747 0000FA24 4D31C0                  	xor r8, r8
 20748                                  .L_tc_recycle_frame_loop_4068:
 20749 0000FA27 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20750 0000FA2B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20751 0000FA30 49FFC9                  	dec r9
 20752 0000FA33 4D31C0                  	xor r8, r8
 20753 0000FA36 48FFCF                  	dec rdi
 20754 0000FA39 48FFCE                  	dec rsi
 20755 0000FA3C 4883FE00                	cmp rsi, 0
 20756 0000FA40 75E5                    	jne .L_tc_recycle_frame_loop_4068
 20757                                  .L_tc_recycle_frame_done_4068:
 20758                                  ;this pop rbp in sot to the right place
 20759 0000FA42 4989C9                  	mov r9, rcx
 20760 0000FA45 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20761 0000FA4D 4C01CC                  	add rsp, r9
 20762 0000FA50 5D                      	pop rbp
 20763 0000FA51 488B4D00                	mov rcx, qword [rbp]
 20764 0000FA55 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20765 0000FA59 FFE3                    	jmp rbx
 20766                                  
 20767 0000FA5B E9AE010000                      	jmp .L_if_end_4814
 20768                                  
 20769                                          	.L_if_else_4814:
 20770 0000FA60 48B8-                   	mov rax,L_constants + 128
 20770 0000FA62 [8000000000000000] 
 20771 0000FA6A 50                      	push rax
 20772 0000FA6B 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20773 0000FA6F 50                      	push rax
 20774 0000FA70 6A02                    	push 2
 20775 0000FA72 488B0425[08030000]      	mov rax, qword [free_var_97]
 20776                                  	assert_closure(rax)
    42 0000FA7A 803805              <1>  cmp byte [%1], %2
    43 0000FA7D 0F853F3C0000        <1>  jne L_error_incorrect_type
 20777 0000FA83 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20778 0000FA86 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20779 0000FA89 50                      	push rax
 20780 0000FA8A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20781 0000FA8E 50                      	push rax
 20782 0000FA8F 6A01                    	push 1
 20783 0000FA91 488B0425[88000000]      	mov rax, qword [free_var_17]
 20784                                  	assert_closure(rax)
    42 0000FA99 803805              <1>  cmp byte [%1], %2
    43 0000FA9C 0F85203C0000        <1>  jne L_error_incorrect_type
 20785 0000FAA2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20786 0000FAA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20787 0000FAA8 50                      	push rax
 20788 0000FAA9 6A02                    	push 2
 20789 0000FAAB 488B4510                	mov rax, qword [rbp + 8 * 2]
 20790                                  
 20791 0000FAAF 488B00                                            	mov rax, qword[rax + 8 * 0]
 20792                                  
 20793 0000FAB2 488B00                                            	mov rax, qword[rax + 8 * 0]
 20794 0000FAB5 488B00                  	mov rax, qword [rax]
 20795                                  	assert_closure(rax)
    42 0000FAB8 803805              <1>  cmp byte [%1], %2
    43 0000FABB 0F85013C0000        <1>  jne L_error_incorrect_type
 20796 0000FAC1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20797 0000FAC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20798 0000FAC7 50                      	push rax
 20799 0000FAC8 6A01                    	push 1
 20800 0000FACA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20801 0000FACF E8FA230000              	call malloc
 20802 0000FAD4 50                      	push rax
 20803 0000FAD5 BF10000000              	mov rdi, 8 * 2	; new rib
 20804 0000FADA E8EF230000              	call malloc
 20805 0000FADF 50                      	push rax
 20806 0000FAE0 BF18000000              	mov rdi, 8 * 3	; extended env
 20807 0000FAE5 E8E4230000              	call malloc
 20808 0000FAEA 488B7D10                	mov rdi, ENV
 20809 0000FAEE BE00000000              	mov rsi, 0
 20810 0000FAF3 BA01000000              	mov rdx, 1
 20811                                  .L_lambda_simple_env_loop_37b5:	; ext_env[i + 1] <-- env[i]
 20812 0000FAF8 4883FE02                	cmp rsi, 2
 20813 0000FAFC 7410                    	je .L_lambda_simple_env_end_37b5
 20814 0000FAFE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20815 0000FB02 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20816 0000FB06 48FFC6                  	inc rsi
 20817 0000FB09 48FFC2                  	inc rdx
 20818 0000FB0C EBEA                    	jmp .L_lambda_simple_env_loop_37b5
 20819                                  .L_lambda_simple_env_end_37b5:
 20820 0000FB0E 5B                      	pop rbx
 20821 0000FB0F BE00000000              	mov rsi, 0
 20822                                  .L_lambda_simple_params_loop_37b5:	; copy params
 20823 0000FB14 4883FE02                	cmp rsi, 2
 20824 0000FB18 740E                    	je .L_lambda_simple_params_end_37b5
 20825 0000FB1A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20826 0000FB1F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20827 0000FB23 48FFC6                  	inc rsi
 20828 0000FB26 EBEC                    	jmp .L_lambda_simple_params_loop_37b5
 20829                                  .L_lambda_simple_params_end_37b5:
 20830 0000FB28 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20831 0000FB2B 4889C3                  	mov rbx, rax
 20832 0000FB2E 58                      	pop rax
 20833 0000FB2F C60005                  	mov byte [rax], T_closure
 20834 0000FB32 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20835 0000FB36 48C74009[40FB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b5
 20836 0000FB3E EB6E                    	jmp .L_lambda_simple_end_37b5
 20837                                  .L_lambda_simple_code_37b5:	; lambda-simple body
 20838 0000FB40 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20839 0000FB46 740B                    	je .L_lambda_simple_arity_check_ok_37b5
 20840 0000FB48 FF742410                	push qword [rsp + 8 * 2]
 20841 0000FB4C 6A01                    	push 1
 20842 0000FB4E E934230000              	jmp L_error_incorrect_arity_simple
 20843                                  .L_lambda_simple_arity_check_ok_37b5:
 20844 0000FB53 C8000000                	enter 0, 0
 20845 0000FB57 488B4510                	mov rax, qword [rbp + 8 * 2]
 20846                                  
 20847 0000FB5B 488B00                                            	mov rax, qword[rax + 8 * 0]
 20848                                  
 20849 0000FB5E 488B00                                            	mov rax, qword[rax + 8 * 0]
 20850 0000FB61 50                      	push rax
 20851 0000FB62 6A01                    	push 1
 20852 0000FB64 488B0425[80000000]      	mov rax, qword [free_var_16]
 20853                                  	assert_closure(rax)
    42 0000FB6C 803805              <1>  cmp byte [%1], %2
    43 0000FB6F 0F854D3B0000        <1>  jne L_error_incorrect_type
 20854 0000FB75 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20855 0000FB78 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20856 0000FB7B 50                      	push rax
 20857 0000FB7C 488B4510                	mov rax, qword [rbp + 8 * 2]
 20858                                  
 20859 0000FB80 488B00                                            	mov rax, qword[rax + 8 * 0]
 20860                                  
 20861 0000FB83 488B4008                                          	mov rax, qword[rax + 8 * 1]
 20862 0000FB87 50                      	push rax
 20863 0000FB88 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20864 0000FB8C 50                      	push rax
 20865 0000FB8D 6A03                    	push 3
 20866 0000FB8F 488B0425[90010000]      	mov rax, qword [free_var_50]
 20867                                  	assert_closure(rax)
    42 0000FB97 803805              <1>  cmp byte [%1], %2
    43 0000FB9A 0F85223B0000        <1>  jne L_error_incorrect_type
 20868 0000FBA0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20869 0000FBA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20870                                  
 20871 0000FBA6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20872 0000FBAA C9                      	leave
 20873 0000FBAB C21800                  	ret 8 * (2 + 1)
 20874                                  .L_lambda_simple_end_37b5:	; new closure is in rax
 20875                                  .L_applic_TC_4067:
 20876 0000FBAE 803805                  	cmp byte [rax], T_closure
 20877 0000FBB1 0F85CC320000            	jne L_code_ptr_error
 20878 0000FBB7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20879 0000FBBB 53                      	push rbx
 20880 0000FBBC FF7508                  	push qword [rbp + 8]
 20881 0000FBBF FF7500                  	push qword [rbp]
 20882 0000FBC2 488B4D18                	mov rcx, [rbp + 3 * 8]
 20883 0000FBC6 488B542418              	mov rdx, [rsp + 3 * 8]
 20884 0000FBCB 488D7204                	lea rsi, [rdx + 4]
 20885 0000FBCF 4C8D4EFF                	lea r9, [rsi - 1]
 20886 0000FBD3 488D7903                	lea rdi, [rcx + 3]
 20887 0000FBD7 4D31C0                  	xor r8, r8
 20888                                  .L_tc_recycle_frame_loop_4067:
 20889 0000FBDA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20890 0000FBDE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20891 0000FBE3 49FFC9                  	dec r9
 20892 0000FBE6 4D31C0                  	xor r8, r8
 20893 0000FBE9 48FFCF                  	dec rdi
 20894 0000FBEC 48FFCE                  	dec rsi
 20895 0000FBEF 4883FE00                	cmp rsi, 0
 20896 0000FBF3 75E5                    	jne .L_tc_recycle_frame_loop_4067
 20897                                  .L_tc_recycle_frame_done_4067:
 20898                                  ;this pop rbp in sot to the right place
 20899 0000FBF5 4989C9                  	mov r9, rcx
 20900 0000FBF8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20901 0000FC00 4C01CC                  	add rsp, r9
 20902 0000FC03 5D                      	pop rbp
 20903 0000FC04 488B4D00                	mov rcx, qword [rbp]
 20904 0000FC08 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20905 0000FC0C FFE3                    	jmp rbx
 20906                                  
 20907                                          	.L_if_end_4814:
 20908 0000FC0E C9                      	leave
 20909 0000FC0F C22000                  	ret 8 * (2 + 2)
 20910                                  .L_lambda_simple_end_37b4:	; new closure is in rax
 20911 0000FC12 50                      	push rax
 20912 0000FC13 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20913 0000FC17 8F00                    	pop qword [rax]
 20914 0000FC19 48B8-                   	mov rax, sob_void
 20914 0000FC1B [0000000000000000] 
 20915                                  
 20916 0000FC23 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20917 0000FC28 E8A1220000              	call malloc
 20918 0000FC2D 50                      	push rax
 20919 0000FC2E BF08000000              	mov rdi, 8 * 1	; new rib
 20920 0000FC33 E896220000              	call malloc
 20921 0000FC38 50                      	push rax
 20922 0000FC39 BF10000000              	mov rdi, 8 * 2	; extended env
 20923 0000FC3E E88B220000              	call malloc
 20924 0000FC43 488B7D10                	mov rdi, ENV
 20925 0000FC47 BE00000000              	mov rsi, 0
 20926 0000FC4C BA01000000              	mov rdx, 1
 20927                                  .L_lambda_simple_env_loop_37b6:	; ext_env[i + 1] <-- env[i]
 20928 0000FC51 4883FE01                	cmp rsi, 1
 20929 0000FC55 7410                    	je .L_lambda_simple_env_end_37b6
 20930 0000FC57 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20931 0000FC5B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20932 0000FC5F 48FFC6                  	inc rsi
 20933 0000FC62 48FFC2                  	inc rdx
 20934 0000FC65 EBEA                    	jmp .L_lambda_simple_env_loop_37b6
 20935                                  .L_lambda_simple_env_end_37b6:
 20936 0000FC67 5B                      	pop rbx
 20937 0000FC68 BE00000000              	mov rsi, 0
 20938                                  .L_lambda_simple_params_loop_37b6:	; copy params
 20939 0000FC6D 4883FE01                	cmp rsi, 1
 20940 0000FC71 740E                    	je .L_lambda_simple_params_end_37b6
 20941 0000FC73 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20942 0000FC78 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20943 0000FC7C 48FFC6                  	inc rsi
 20944 0000FC7F EBEC                    	jmp .L_lambda_simple_params_loop_37b6
 20945                                  .L_lambda_simple_params_end_37b6:
 20946 0000FC81 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20947 0000FC84 4889C3                  	mov rbx, rax
 20948 0000FC87 58                      	pop rax
 20949 0000FC88 C60005                  	mov byte [rax], T_closure
 20950 0000FC8B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20951 0000FC8F 48C74009[9CFC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b6
 20952 0000FC97 E99A000000              	jmp .L_lambda_simple_end_37b6
 20953                                  .L_lambda_simple_code_37b6:	; lambda-simple body
 20954 0000FC9C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20955 0000FCA2 740B                    	je .L_lambda_simple_arity_check_ok_37b6
 20956 0000FCA4 FF742410                	push qword [rsp + 8 * 2]
 20957 0000FCA8 6A01                    	push 1
 20958 0000FCAA E9D8210000              	jmp L_error_incorrect_arity_simple
 20959                                  .L_lambda_simple_arity_check_ok_37b6:
 20960 0000FCAF C8000000                	enter 0, 0
 20961 0000FCB3 48B8-                   	mov rax,L_constants + 32
 20961 0000FCB5 [2000000000000000] 
 20962 0000FCBD 50                      	push rax
 20963 0000FCBE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20964 0000FCC2 50                      	push rax
 20965 0000FCC3 6A02                    	push 2
 20966 0000FCC5 488B4510                	mov rax, qword [rbp + 8 * 2]
 20967                                  
 20968 0000FCC9 488B00                                            	mov rax, qword[rax + 8 * 0]
 20969                                  
 20970 0000FCCC 488B00                                            	mov rax, qword[rax + 8 * 0]
 20971 0000FCCF 488B00                  	mov rax, qword [rax]
 20972                                  .L_applic_TC_4069:
 20973 0000FCD2 803805                  	cmp byte [rax], T_closure
 20974 0000FCD5 0F85A8310000            	jne L_code_ptr_error
 20975 0000FCDB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20976 0000FCDF 53                      	push rbx
 20977 0000FCE0 FF7508                  	push qword [rbp + 8]
 20978 0000FCE3 FF7500                  	push qword [rbp]
 20979 0000FCE6 488B4D18                	mov rcx, [rbp + 3 * 8]
 20980 0000FCEA 488B542418              	mov rdx, [rsp + 3 * 8]
 20981 0000FCEF 488D7204                	lea rsi, [rdx + 4]
 20982 0000FCF3 4C8D4EFF                	lea r9, [rsi - 1]
 20983 0000FCF7 488D7903                	lea rdi, [rcx + 3]
 20984 0000FCFB 4D31C0                  	xor r8, r8
 20985                                  .L_tc_recycle_frame_loop_4069:
 20986 0000FCFE 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20987 0000FD02 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20988 0000FD07 49FFC9                  	dec r9
 20989 0000FD0A 4D31C0                  	xor r8, r8
 20990 0000FD0D 48FFCF                  	dec rdi
 20991 0000FD10 48FFCE                  	dec rsi
 20992 0000FD13 4883FE00                	cmp rsi, 0
 20993 0000FD17 75E5                    	jne .L_tc_recycle_frame_loop_4069
 20994                                  .L_tc_recycle_frame_done_4069:
 20995                                  ;this pop rbp in sot to the right place
 20996 0000FD19 4989C9                  	mov r9, rcx
 20997 0000FD1C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20998 0000FD24 4C01CC                  	add rsp, r9
 20999 0000FD27 5D                      	pop rbp
 21000 0000FD28 488B4D00                	mov rcx, qword [rbp]
 21001 0000FD2C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21002 0000FD30 FFE3                    	jmp rbx
 21003 0000FD32 C9                      	leave
 21004 0000FD33 C21800                  	ret 8 * (2 + 1)
 21005                                  .L_lambda_simple_end_37b6:	; new closure is in rax
 21006 0000FD36 C9                      	leave
 21007 0000FD37 C21800                  	ret 8 * (2 + 1)
 21008                                  .L_lambda_simple_end_37b3:	; new closure is in rax
 21009                                  	assert_closure(rax)
    42 0000FD3A 803805              <1>  cmp byte [%1], %2
    43 0000FD3D 0F857F390000        <1>  jne L_error_incorrect_type
 21010 0000FD43 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21011 0000FD46 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21012 0000FD49 48890425[D0030000]      	mov qword [free_var_122], rax
 21013 0000FD51 48B8-                   	mov rax, sob_void
 21013 0000FD53 [0000000000000000] 
 21014                                  
 21015 0000FD5B 4889C7                  	mov rdi, rax
 21016 0000FD5E E87C210000              	call print_sexpr_if_not_void
 21017                                  
 21018 0000FD63 BF11000000              	mov rdi, (1 + 8 + 8)
 21019 0000FD68 E861210000              	call malloc
 21020 0000FD6D 50                      	push rax
 21021 0000FD6E BF00000000              	mov rdi, 8 * 0
 21022 0000FD73 E856210000              	call malloc
 21023 0000FD78 50                      	push rax
 21024 0000FD79 BF08000000              	mov rdi, 8 * 1
 21025 0000FD7E E84B210000              	call malloc
 21026 0000FD83 488B7D10                	mov rdi, ENV
 21027 0000FD87 4831F6                  	xor rsi, rsi
 21028 0000FD8A 4831D2                  	xor rdx, rdx
 21029 0000FD8D 48FFC2                  	inc rdx
 21030                                  	.L_lambda_opt_env_loop_0890:
 21031                                  
 21032 0000FD90 4883FE00                        	cmp rsi, 0
 21033                                  
 21034 0000FD94 7412                            	je .L_lambda_opt_env_end_0890
 21035 0000FD96 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21036 0000FD9A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21037 0000FD9E 4883C201                	add rdx, 1
 21038 0000FDA2 4883C601                	add rsi, 1
 21039 0000FDA6 EBE8                    	jmp .L_lambda_opt_env_loop_0890
 21040                                  
 21041                                          	.L_lambda_opt_env_end_0890:
 21042 0000FDA8 5B                      	pop rbx
 21043 0000FDA9 4831F6                  	xor rsi, rsi
 21044                                  	.L_lambda_opt_params_loop_0890:
 21045                                  
 21046 0000FDAC 4883FE00                        	cmp rsi, 0
 21047                                  
 21048 0000FDB0 740F                            	je .L_lambda_opt_params_end_0890
 21049 0000FDB2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21050 0000FDB7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21051 0000FDBB 4883C601                	add rsi, 1
 21052 0000FDBF EBEB                    	jmp .L_lambda_opt_params_loop_0890
 21053                                  
 21054                                          	.L_lambda_opt_params_end_0890:
 21055 0000FDC1 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 21056 0000FDC4 4889C3                  	mov rbx, rax
 21057 0000FDC7 58                      	pop rax
 21058 0000FDC8 C60005                  	mov byte [rax], T_closure
 21059 0000FDCB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21060 0000FDCF 48C74009[DCFD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0890
 21061                                  
 21062 0000FDD7 E97C010000                      	jmp .L_lambda_opt_end_0890
 21063                                  
 21064                                          	.L_lambda_opt_code_0890:
 21065                                  
 21066 0000FDDC 48837C241000                    	cmp qword [rsp + 8 * 2], 0
 21067                                  
 21068 0000FDE2 740D                            	je .L_lambda_opt_arity_check_exact_0890  ;same num_of_args
 21069                                  
 21070 0000FDE4 7F65                            	jg .L_lambda_opt_arity_check_more_0890  ;greater num_of_args
 21071 0000FDE6 FF742410                	push qword [rsp + 8 * 2]
 21072 0000FDEA 6A00                    	push 0
 21073 0000FDEC E9AA200000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 21074                                  .L_lambda_opt_arity_check_exact_0890:
 21075 0000FDF1 4883EC08                	sub rsp, 8 * 1
 21076 0000FDF5 488D7F10                	lea rdi, [rdi + (8 * 2)]
 21077 0000FDF9 4889E7                  	mov rdi, rsp 
 21078 0000FDFC 488B4708                	mov rax, qword [rdi + 8]
 21079 0000FE00 488907                  	mov qword [rdi], rax
 21080 0000FE03 488D7F08                	lea rdi, [rdi + 8]
 21081 0000FE07 488B4708                	mov rax, qword [rdi + 8]
 21082 0000FE0B 488907                  	mov qword [rdi], rax
 21083 0000FE0E 488D7F08                	lea rdi, [rdi + 8]
 21084 0000FE12 488B4708                	mov rax, qword [rdi + 8]
 21085 0000FE16 4889C1                  	mov rcx, rax
 21086 0000FE19 4883C001                	add rax, 1
 21087 0000FE1D 488907                  	mov qword [rdi], rax
 21088 0000FE20 488D7F08                	lea rdi, [rdi + 8]
 21089                                  	.L_lambda_opt_stack_shrink_loop_19ae:
 21090 0000FE24 4883F900                	cmp rcx, 0
 21091 0000FE28 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_19ae
 21092 0000FE2A 4883E901                	sub rcx, 1
 21093 0000FE2E 488D4010                	lea rax, [rax + (8 * 2)]
 21094 0000FE32 488B4708                	mov rax, qword [rdi + 8]
 21095 0000FE36 488907                  	mov qword [rdi], rax
 21096 0000FE39 488D7F08                	lea rdi, [rdi + 8]
 21097 0000FE3D EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_19ae
 21098                                  
 21099                                          	.L_lambda_opt_stack_shrink_loop_exit_19ae:
 21100 0000FE3F 48C707[01000000]        	mov qword [rdi], sob_nil
 21101 0000FE46 E996000000              	jmp .L_lambda_opt_stack_adjusted_0890
 21102                                  
 21103                                          	.L_lambda_opt_arity_check_more_0890:
 21104 0000FE4B 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 21105 0000FE50 488D0E                  	lea rcx, [rsi - 0]
 21106 0000FE53 49B8-                   	mov r8, sob_nil
 21106 0000FE55 [0100000000000000] 
 21107 0000FE5D 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 21108 0000FE62 4889F2                  	mov rdx, rsi
 21109                                  	.L_lambda_opt_stack_shrink_loop_19af:
 21110 0000FE65 4883F900                	cmp rcx, 0
 21111 0000FE69 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_19af
 21112 0000FE6B BF11000000              	mov rdi, 1 + (8 * 2)
 21113 0000FE70 E859200000              	call malloc
 21114 0000FE75 C60021                  	mov byte [rax], T_pair
 21115 0000FE78 488B1E                  	mov rbx, qword [rsi]
 21116 0000FE7B 48895801                	mov SOB_PAIR_CAR(rax), rbx
 21117 0000FE7F 4C894009                	mov SOB_PAIR_CDR(rax), r8
 21118 0000FE83 4883C6F8                	add rsi, -8
 21119 0000FE87 4883E901                	sub rcx, 1
 21120 0000FE8B 4989C0                  	mov r8, rax
 21121 0000FE8E EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_19af
 21122                                  
 21123                                          	.L_lambda_opt_stack_shrink_loop_exit_19af:
 21124 0000FE90 4C8902                  	mov qword [rdx], r8
 21125 0000FE93 4883EA08                	sub rdx, 8 * 1
 21126 0000FE97 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
 21127                                  
 21128 0000FE9C B900000000                      	mov rcx, 0 
 21129                                  
 21130                                          	.L_lambda_opt_stack_shrink_loop_19b0:
 21131 0000FEA1 4883F900                	cmp rcx, 0
 21132 0000FEA5 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_19b0
 21133 0000FEA7 488B06                  	mov rax, qword [rsi]
 21134 0000FEAA 488902                  	mov qword [rdx], rax
 21135 0000FEAD 488D76F8                	lea rsi, [rsi - 8]
 21136 0000FEB1 4883C2F8                	add rdx, -8
 21137 0000FEB5 4883C1FF                	add rcx, -1
 21138 0000FEB9 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_19b0
 21139                                  
 21140                                          	.L_lambda_opt_stack_shrink_loop_exit_19b0:
 21141                                  
 21142 0000FEBB 48C70201000000                  	mov qword [rdx], 1 + 0
 21143 0000FEC2 4883C6F8                	add rsi, -8
 21144 0000FEC6 4883C2F8                	add rdx, -8
 21145 0000FECA 488B06                  	mov rax, qword [rsi]
 21146 0000FECD 488902                  	mov qword [rdx], rax
 21147 0000FED0 4883C2F8                	add rdx, -8
 21148 0000FED4 488D76F8                	lea rsi, [rsi - 8]
 21149 0000FED8 488B06                  	mov rax, qword [rsi]
 21150 0000FEDB 488902                  	mov qword [rdx], rax
 21151 0000FEDE 4889D4                  	mov rsp, rdx
 21152                                  	.L_lambda_opt_stack_adjusted_0890:
 21153 0000FEE1 C8000000                	enter 0, 0
 21154 0000FEE5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21155 0000FEE9 50                      	push rax
 21156 0000FEEA 6A01                    	push 1
 21157 0000FEEC 488B0425[38040000]      	mov rax, qword [free_var_135]
 21158                                  .L_applic_TC_406a:
 21159 0000FEF4 803805                  	cmp byte [rax], T_closure
 21160 0000FEF7 0F85862F0000            	jne L_code_ptr_error
 21161 0000FEFD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21162 0000FF01 53                      	push rbx
 21163 0000FF02 FF7508                  	push qword [rbp + 8]
 21164 0000FF05 FF7500                  	push qword [rbp]
 21165 0000FF08 488B4D18                	mov rcx, [rbp + 3 * 8]
 21166 0000FF0C 488B542418              	mov rdx, [rsp + 3 * 8]
 21167 0000FF11 488D7204                	lea rsi, [rdx + 4]
 21168 0000FF15 4C8D4EFF                	lea r9, [rsi - 1]
 21169 0000FF19 488D7903                	lea rdi, [rcx + 3]
 21170 0000FF1D 4D31C0                  	xor r8, r8
 21171                                  .L_tc_recycle_frame_loop_406a:
 21172 0000FF20 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21173 0000FF24 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21174 0000FF29 49FFC9                  	dec r9
 21175 0000FF2C 4D31C0                  	xor r8, r8
 21176 0000FF2F 48FFCF                  	dec rdi
 21177 0000FF32 48FFCE                  	dec rsi
 21178 0000FF35 4883FE00                	cmp rsi, 0
 21179 0000FF39 75E5                    	jne .L_tc_recycle_frame_loop_406a
 21180                                  .L_tc_recycle_frame_done_406a:
 21181                                  ;this pop rbp in sot to the right place
 21182 0000FF3B 4989C9                  	mov r9, rcx
 21183 0000FF3E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21184 0000FF46 4C01CC                  	add rsp, r9
 21185 0000FF49 5D                      	pop rbp
 21186 0000FF4A 488B4D00                	mov rcx, qword [rbp]
 21187 0000FF4E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21188 0000FF52 FFE3                    	jmp rbx
 21189 0000FF54 C9                      	leave
 21190 0000FF55 C21800                  	ret 8 * (2 + 1)
 21191                                  .L_lambda_opt_end_0890:	; new closure is in rax
 21192 0000FF58 48890425[40040000]      	mov qword [free_var_136], rax
 21193 0000FF60 48B8-                   	mov rax, sob_void
 21193 0000FF62 [0000000000000000] 
 21194                                  
 21195 0000FF6A 4889C7                  	mov rdi, rax
 21196 0000FF6D E86D1F0000              	call print_sexpr_if_not_void
 21197                                  
 21198 0000FF72 48B8-                   	mov rax,L_constants + 23
 21198 0000FF74 [1700000000000000] 
 21199 0000FF7C 50                      	push rax
 21200 0000FF7D 6A01                    	push 1
 21201 0000FF7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21202 0000FF84 E8451F0000              	call malloc
 21203 0000FF89 50                      	push rax
 21204 0000FF8A BF00000000              	mov rdi, 8 * 0	; new rib
 21205 0000FF8F E83A1F0000              	call malloc
 21206 0000FF94 50                      	push rax
 21207 0000FF95 BF08000000              	mov rdi, 8 * 1	; extended env
 21208 0000FF9A E82F1F0000              	call malloc
 21209 0000FF9F 488B7D10                	mov rdi, ENV
 21210 0000FFA3 BE00000000              	mov rsi, 0
 21211 0000FFA8 BA01000000              	mov rdx, 1
 21212                                  .L_lambda_simple_env_loop_37b7:	; ext_env[i + 1] <-- env[i]
 21213 0000FFAD 4883FE00                	cmp rsi, 0
 21214 0000FFB1 7410                    	je .L_lambda_simple_env_end_37b7
 21215 0000FFB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21216 0000FFB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21217 0000FFBB 48FFC6                  	inc rsi
 21218 0000FFBE 48FFC2                  	inc rdx
 21219 0000FFC1 EBEA                    	jmp .L_lambda_simple_env_loop_37b7
 21220                                  .L_lambda_simple_env_end_37b7:
 21221 0000FFC3 5B                      	pop rbx
 21222 0000FFC4 BE00000000              	mov rsi, 0
 21223                                  .L_lambda_simple_params_loop_37b7:	; copy params
 21224 0000FFC9 4883FE00                	cmp rsi, 0
 21225 0000FFCD 740E                    	je .L_lambda_simple_params_end_37b7
 21226 0000FFCF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21227 0000FFD4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21228 0000FFD8 48FFC6                  	inc rsi
 21229 0000FFDB EBEC                    	jmp .L_lambda_simple_params_loop_37b7
 21230                                  .L_lambda_simple_params_end_37b7:
 21231 0000FFDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21232 0000FFE0 4889C3                  	mov rbx, rax
 21233 0000FFE3 58                      	pop rax
 21234 0000FFE4 C60005                  	mov byte [rax], T_closure
 21235 0000FFE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21236 0000FFEB 48C74009[F8FF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b7
 21237 0000FFF3 E92D030000              	jmp .L_lambda_simple_end_37b7
 21238                                  .L_lambda_simple_code_37b7:	; lambda-simple body
 21239 0000FFF8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21240 0000FFFE 740B                    	je .L_lambda_simple_arity_check_ok_37b7
 21241 00010000 FF742410                	push qword [rsp + 8 * 2]
 21242 00010004 6A01                    	push 1
 21243 00010006 E97C1E0000              	jmp L_error_incorrect_arity_simple
 21244                                  .L_lambda_simple_arity_check_ok_37b7:
 21245 0001000B C8000000                	enter 0, 0
 21246 0001000F BF08000000              	mov rdi, 8
 21247 00010014 E8B51E0000              	call malloc
 21248 00010019 488B5D20                	mov rbx, PARAM(0)
 21249 0001001D 488918                  	mov qword [rax], rbx
 21250 00010020 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 21251                                  
 21252 00010024 48B8-                            	mov rax, sob_void
 21252 00010026 [0000000000000000] 
 21253                                  
 21254 0001002E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21255 00010033 E8961E0000              	call malloc
 21256 00010038 50                      	push rax
 21257 00010039 BF08000000              	mov rdi, 8 * 1	; new rib
 21258 0001003E E88B1E0000              	call malloc
 21259 00010043 50                      	push rax
 21260 00010044 BF10000000              	mov rdi, 8 * 2	; extended env
 21261 00010049 E8801E0000              	call malloc
 21262 0001004E 488B7D10                	mov rdi, ENV
 21263 00010052 BE00000000              	mov rsi, 0
 21264 00010057 BA01000000              	mov rdx, 1
 21265                                  .L_lambda_simple_env_loop_37b8:	; ext_env[i + 1] <-- env[i]
 21266 0001005C 4883FE01                	cmp rsi, 1
 21267 00010060 7410                    	je .L_lambda_simple_env_end_37b8
 21268 00010062 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21269 00010066 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21270 0001006A 48FFC6                  	inc rsi
 21271 0001006D 48FFC2                  	inc rdx
 21272 00010070 EBEA                    	jmp .L_lambda_simple_env_loop_37b8
 21273                                  .L_lambda_simple_env_end_37b8:
 21274 00010072 5B                      	pop rbx
 21275 00010073 BE00000000              	mov rsi, 0
 21276                                  .L_lambda_simple_params_loop_37b8:	; copy params
 21277 00010078 4883FE01                	cmp rsi, 1
 21278 0001007C 740E                    	je .L_lambda_simple_params_end_37b8
 21279 0001007E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21280 00010083 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21281 00010087 48FFC6                  	inc rsi
 21282 0001008A EBEC                    	jmp .L_lambda_simple_params_loop_37b8
 21283                                  .L_lambda_simple_params_end_37b8:
 21284 0001008C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21285 0001008F 4889C3                  	mov rbx, rax
 21286 00010092 58                      	pop rax
 21287 00010093 C60005                  	mov byte [rax], T_closure
 21288 00010096 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21289 0001009A 48C74009[A7000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b8
 21290 000100A2 E937010000              	jmp .L_lambda_simple_end_37b8
 21291                                  .L_lambda_simple_code_37b8:	; lambda-simple body
 21292 000100A7 48837C241003            	cmp qword [rsp + 8 * 2], 3
 21293 000100AD 740B                    	je .L_lambda_simple_arity_check_ok_37b8
 21294 000100AF FF742410                	push qword [rsp + 8 * 2]
 21295 000100B3 6A03                    	push 3
 21296 000100B5 E9CD1D0000              	jmp L_error_incorrect_arity_simple
 21297                                  .L_lambda_simple_arity_check_ok_37b8:
 21298 000100BA C8000000                	enter 0, 0
 21299 000100BE 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 21300 000100C2 50                      	push rax
 21301 000100C3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21302 000100C7 50                      	push rax
 21303 000100C8 6A02                    	push 2
 21304 000100CA 488B0425[30030000]      	mov rax, qword [free_var_102]
 21305                                  	assert_closure(rax)
    42 000100D2 803805              <1>  cmp byte [%1], %2
    43 000100D5 0F85E7350000        <1>  jne L_error_incorrect_type
 21306 000100DB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21307 000100DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 21308                                  
 21309 000100E1 483D[02000000]                  	cmp rax, sob_boolean_false
 21310                                  
 21311 000100E7 0F84E3000000                    	je .L_if_else_4815
 21312 000100ED 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 21313 000100F1 50                      	push rax
 21314 000100F2 48B8-                   	mov rax,L_constants + 128
 21314 000100F4 [8000000000000000] 
 21315 000100FC 50                      	push rax
 21316 000100FD 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21317 00010101 50                      	push rax
 21318 00010102 6A02                    	push 2
 21319 00010104 488B0425[08030000]      	mov rax, qword [free_var_97]
 21320                                  	assert_closure(rax)
    42 0001010C 803805              <1>  cmp byte [%1], %2
    43 0001010F 0F85AD350000        <1>  jne L_error_incorrect_type
 21321 00010115 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21322 00010118 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21323 0001011B 50                      	push rax
 21324 0001011C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21325 00010120 50                      	push rax
 21326 00010121 6A03                    	push 3
 21327 00010123 488B4510                	mov rax, qword [rbp + 8 * 2]
 21328                                  
 21329 00010127 488B00                                            	mov rax, qword[rax + 8 * 0]
 21330                                  
 21331 0001012A 488B00                                            	mov rax, qword[rax + 8 * 0]
 21332 0001012D 488B00                  	mov rax, qword [rax]
 21333                                  	assert_closure(rax)
    42 00010130 803805              <1>  cmp byte [%1], %2
    43 00010133 0F8589350000        <1>  jne L_error_incorrect_type
 21334 00010139 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21335 0001013C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21336 0001013F 50                      	push rax
 21337 00010140 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21338 00010144 50                      	push rax
 21339 00010145 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21340 00010149 50                      	push rax
 21341 0001014A 6A02                    	push 2
 21342 0001014C 488B0425[78010000]      	mov rax, qword [free_var_47]
 21343                                  	assert_closure(rax)
    42 00010154 803805              <1>  cmp byte [%1], %2
    43 00010157 0F8565350000        <1>  jne L_error_incorrect_type
 21344 0001015D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21345 00010160 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21346 00010163 50                      	push rax
 21347 00010164 6A02                    	push 2
 21348 00010166 488B0425[68000000]      	mov rax, qword [free_var_13]
 21349                                  .L_applic_TC_406b:
 21350 0001016E 803805                  	cmp byte [rax], T_closure
 21351 00010171 0F850C2D0000            	jne L_code_ptr_error
 21352 00010177 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21353 0001017B 53                      	push rbx
 21354 0001017C FF7508                  	push qword [rbp + 8]
 21355 0001017F FF7500                  	push qword [rbp]
 21356 00010182 488B4D18                	mov rcx, [rbp + 3 * 8]
 21357 00010186 488B542418              	mov rdx, [rsp + 3 * 8]
 21358 0001018B 488D7204                	lea rsi, [rdx + 4]
 21359 0001018F 4C8D4EFF                	lea r9, [rsi - 1]
 21360 00010193 488D7903                	lea rdi, [rcx + 3]
 21361 00010197 4D31C0                  	xor r8, r8
 21362                                  .L_tc_recycle_frame_loop_406b:
 21363 0001019A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21364 0001019E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21365 000101A3 49FFC9                  	dec r9
 21366 000101A6 4D31C0                  	xor r8, r8
 21367 000101A9 48FFCF                  	dec rdi
 21368 000101AC 48FFCE                  	dec rsi
 21369 000101AF 4883FE00                	cmp rsi, 0
 21370 000101B3 75E5                    	jne .L_tc_recycle_frame_loop_406b
 21371                                  .L_tc_recycle_frame_done_406b:
 21372                                  ;this pop rbp in sot to the right place
 21373 000101B5 4989C9                  	mov r9, rcx
 21374 000101B8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21375 000101C0 4C01CC                  	add rsp, r9
 21376 000101C3 5D                      	pop rbp
 21377 000101C4 488B4D00                	mov rcx, qword [rbp]
 21378 000101C8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21379 000101CC FFE3                    	jmp rbx
 21380                                  
 21381 000101CE EB0A                            	jmp .L_if_end_4815
 21382                                  
 21383                                          	.L_if_else_4815:
 21384 000101D0 48B8-                   	mov rax,L_constants + 1
 21384 000101D2 [0100000000000000] 
 21385                                  
 21386                                          	.L_if_end_4815:
 21387 000101DA C9                      	leave
 21388 000101DB C22800                  	ret 8 * (2 + 3)
 21389                                  .L_lambda_simple_end_37b8:	; new closure is in rax
 21390 000101DE 50                      	push rax
 21391 000101DF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21392 000101E3 8F00                    	pop qword [rax]
 21393 000101E5 48B8-                   	mov rax, sob_void
 21393 000101E7 [0000000000000000] 
 21394                                  
 21395 000101EF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21396 000101F4 E8D51C0000              	call malloc
 21397 000101F9 50                      	push rax
 21398 000101FA BF08000000              	mov rdi, 8 * 1	; new rib
 21399 000101FF E8CA1C0000              	call malloc
 21400 00010204 50                      	push rax
 21401 00010205 BF10000000              	mov rdi, 8 * 2	; extended env
 21402 0001020A E8BF1C0000              	call malloc
 21403 0001020F 488B7D10                	mov rdi, ENV
 21404 00010213 BE00000000              	mov rsi, 0
 21405 00010218 BA01000000              	mov rdx, 1
 21406                                  .L_lambda_simple_env_loop_37b9:	; ext_env[i + 1] <-- env[i]
 21407 0001021D 4883FE01                	cmp rsi, 1
 21408 00010221 7410                    	je .L_lambda_simple_env_end_37b9
 21409 00010223 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21410 00010227 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21411 0001022B 48FFC6                  	inc rsi
 21412 0001022E 48FFC2                  	inc rdx
 21413 00010231 EBEA                    	jmp .L_lambda_simple_env_loop_37b9
 21414                                  .L_lambda_simple_env_end_37b9:
 21415 00010233 5B                      	pop rbx
 21416 00010234 BE00000000              	mov rsi, 0
 21417                                  .L_lambda_simple_params_loop_37b9:	; copy params
 21418 00010239 4883FE01                	cmp rsi, 1
 21419 0001023D 740E                    	je .L_lambda_simple_params_end_37b9
 21420 0001023F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21421 00010244 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21422 00010248 48FFC6                  	inc rsi
 21423 0001024B EBEC                    	jmp .L_lambda_simple_params_loop_37b9
 21424                                  .L_lambda_simple_params_end_37b9:
 21425 0001024D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21426 00010250 4889C3                  	mov rbx, rax
 21427 00010253 58                      	pop rax
 21428 00010254 C60005                  	mov byte [rax], T_closure
 21429 00010257 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21430 0001025B 48C74009[68020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37b9
 21431 00010263 E9B9000000              	jmp .L_lambda_simple_end_37b9
 21432                                  .L_lambda_simple_code_37b9:	; lambda-simple body
 21433 00010268 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21434 0001026E 740B                    	je .L_lambda_simple_arity_check_ok_37b9
 21435 00010270 FF742410                	push qword [rsp + 8 * 2]
 21436 00010274 6A01                    	push 1
 21437 00010276 E90C1C0000              	jmp L_error_incorrect_arity_simple
 21438                                  .L_lambda_simple_arity_check_ok_37b9:
 21439 0001027B C8000000                	enter 0, 0
 21440 0001027F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21441 00010283 50                      	push rax
 21442 00010284 6A01                    	push 1
 21443 00010286 488B0425[90000000]      	mov rax, qword [free_var_18]
 21444                                  	assert_closure(rax)
    42 0001028E 803805              <1>  cmp byte [%1], %2
    43 00010291 0F852B340000        <1>  jne L_error_incorrect_type
 21445 00010297 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21446 0001029A FF5009                  	call SOB_CLOSURE_CODE(rax)
 21447 0001029D 50                      	push rax
 21448 0001029E 48B8-                   	mov rax,L_constants + 32
 21448 000102A0 [2000000000000000] 
 21449 000102A8 50                      	push rax
 21450 000102A9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21451 000102AD 50                      	push rax
 21452 000102AE 6A03                    	push 3
 21453 000102B0 488B4510                	mov rax, qword [rbp + 8 * 2]
 21454                                  
 21455 000102B4 488B00                                            	mov rax, qword[rax + 8 * 0]
 21456                                  
 21457 000102B7 488B00                                            	mov rax, qword[rax + 8 * 0]
 21458 000102BA 488B00                  	mov rax, qword [rax]
 21459                                  .L_applic_TC_406c:
 21460 000102BD 803805                  	cmp byte [rax], T_closure
 21461 000102C0 0F85BD2B0000            	jne L_code_ptr_error
 21462 000102C6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21463 000102CA 53                      	push rbx
 21464 000102CB FF7508                  	push qword [rbp + 8]
 21465 000102CE FF7500                  	push qword [rbp]
 21466 000102D1 488B4D18                	mov rcx, [rbp + 3 * 8]
 21467 000102D5 488B542418              	mov rdx, [rsp + 3 * 8]
 21468 000102DA 488D7204                	lea rsi, [rdx + 4]
 21469 000102DE 4C8D4EFF                	lea r9, [rsi - 1]
 21470 000102E2 488D7903                	lea rdi, [rcx + 3]
 21471 000102E6 4D31C0                  	xor r8, r8
 21472                                  .L_tc_recycle_frame_loop_406c:
 21473 000102E9 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21474 000102ED 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21475 000102F2 49FFC9                  	dec r9
 21476 000102F5 4D31C0                  	xor r8, r8
 21477 000102F8 48FFCF                  	dec rdi
 21478 000102FB 48FFCE                  	dec rsi
 21479 000102FE 4883FE00                	cmp rsi, 0
 21480 00010302 75E5                    	jne .L_tc_recycle_frame_loop_406c
 21481                                  .L_tc_recycle_frame_done_406c:
 21482                                  ;this pop rbp in sot to the right place
 21483 00010304 4989C9                  	mov r9, rcx
 21484 00010307 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21485 0001030F 4C01CC                  	add rsp, r9
 21486 00010312 5D                      	pop rbp
 21487 00010313 488B4D00                	mov rcx, qword [rbp]
 21488 00010317 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21489 0001031B FFE3                    	jmp rbx
 21490 0001031D C9                      	leave
 21491 0001031E C21800                  	ret 8 * (2 + 1)
 21492                                  .L_lambda_simple_end_37b9:	; new closure is in rax
 21493 00010321 C9                      	leave
 21494 00010322 C21800                  	ret 8 * (2 + 1)
 21495                                  .L_lambda_simple_end_37b7:	; new closure is in rax
 21496                                  	assert_closure(rax)
    42 00010325 803805              <1>  cmp byte [%1], %2
    43 00010328 0F8594330000        <1>  jne L_error_incorrect_type
 21497 0001032E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21498 00010331 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21499 00010334 48890425[D8030000]      	mov qword [free_var_123], rax
 21500 0001033C 48B8-                   	mov rax, sob_void
 21500 0001033E [0000000000000000] 
 21501                                  
 21502 00010346 4889C7                  	mov rdi, rax
 21503 00010349 E8911B0000              	call print_sexpr_if_not_void
 21504                                  
 21505 0001034E 48B8-                   	mov rax,L_constants + 23
 21505 00010350 [1700000000000000] 
 21506 00010358 50                      	push rax
 21507 00010359 6A01                    	push 1
 21508 0001035B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21509 00010360 E8691B0000              	call malloc
 21510 00010365 50                      	push rax
 21511 00010366 BF00000000              	mov rdi, 8 * 0	; new rib
 21512 0001036B E85E1B0000              	call malloc
 21513 00010370 50                      	push rax
 21514 00010371 BF08000000              	mov rdi, 8 * 1	; extended env
 21515 00010376 E8531B0000              	call malloc
 21516 0001037B 488B7D10                	mov rdi, ENV
 21517 0001037F BE00000000              	mov rsi, 0
 21518 00010384 BA01000000              	mov rdx, 1
 21519                                  .L_lambda_simple_env_loop_37ba:	; ext_env[i + 1] <-- env[i]
 21520 00010389 4883FE00                	cmp rsi, 0
 21521 0001038D 7410                    	je .L_lambda_simple_env_end_37ba
 21522 0001038F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21523 00010393 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21524 00010397 48FFC6                  	inc rsi
 21525 0001039A 48FFC2                  	inc rdx
 21526 0001039D EBEA                    	jmp .L_lambda_simple_env_loop_37ba
 21527                                  .L_lambda_simple_env_end_37ba:
 21528 0001039F 5B                      	pop rbx
 21529 000103A0 BE00000000              	mov rsi, 0
 21530                                  .L_lambda_simple_params_loop_37ba:	; copy params
 21531 000103A5 4883FE00                	cmp rsi, 0
 21532 000103A9 740E                    	je .L_lambda_simple_params_end_37ba
 21533 000103AB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21534 000103B0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21535 000103B4 48FFC6                  	inc rsi
 21536 000103B7 EBEC                    	jmp .L_lambda_simple_params_loop_37ba
 21537                                  .L_lambda_simple_params_end_37ba:
 21538 000103B9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21539 000103BC 4889C3                  	mov rbx, rax
 21540 000103BF 58                      	pop rax
 21541 000103C0 C60005                  	mov byte [rax], T_closure
 21542 000103C3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21543 000103C7 48C74009[D4030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37ba
 21544 000103CF E92D030000              	jmp .L_lambda_simple_end_37ba
 21545                                  .L_lambda_simple_code_37ba:	; lambda-simple body
 21546 000103D4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21547 000103DA 740B                    	je .L_lambda_simple_arity_check_ok_37ba
 21548 000103DC FF742410                	push qword [rsp + 8 * 2]
 21549 000103E0 6A01                    	push 1
 21550 000103E2 E9A01A0000              	jmp L_error_incorrect_arity_simple
 21551                                  .L_lambda_simple_arity_check_ok_37ba:
 21552 000103E7 C8000000                	enter 0, 0
 21553 000103EB BF08000000              	mov rdi, 8
 21554 000103F0 E8D91A0000              	call malloc
 21555 000103F5 488B5D20                	mov rbx, PARAM(0)
 21556 000103F9 488918                  	mov qword [rax], rbx
 21557 000103FC 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 21558                                  
 21559 00010400 48B8-                            	mov rax, sob_void
 21559 00010402 [0000000000000000] 
 21560                                  
 21561 0001040A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21562 0001040F E8BA1A0000              	call malloc
 21563 00010414 50                      	push rax
 21564 00010415 BF08000000              	mov rdi, 8 * 1	; new rib
 21565 0001041A E8AF1A0000              	call malloc
 21566 0001041F 50                      	push rax
 21567 00010420 BF10000000              	mov rdi, 8 * 2	; extended env
 21568 00010425 E8A41A0000              	call malloc
 21569 0001042A 488B7D10                	mov rdi, ENV
 21570 0001042E BE00000000              	mov rsi, 0
 21571 00010433 BA01000000              	mov rdx, 1
 21572                                  .L_lambda_simple_env_loop_37bb:	; ext_env[i + 1] <-- env[i]
 21573 00010438 4883FE01                	cmp rsi, 1
 21574 0001043C 7410                    	je .L_lambda_simple_env_end_37bb
 21575 0001043E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21576 00010442 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21577 00010446 48FFC6                  	inc rsi
 21578 00010449 48FFC2                  	inc rdx
 21579 0001044C EBEA                    	jmp .L_lambda_simple_env_loop_37bb
 21580                                  .L_lambda_simple_env_end_37bb:
 21581 0001044E 5B                      	pop rbx
 21582 0001044F BE00000000              	mov rsi, 0
 21583                                  .L_lambda_simple_params_loop_37bb:	; copy params
 21584 00010454 4883FE01                	cmp rsi, 1
 21585 00010458 740E                    	je .L_lambda_simple_params_end_37bb
 21586 0001045A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21587 0001045F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21588 00010463 48FFC6                  	inc rsi
 21589 00010466 EBEC                    	jmp .L_lambda_simple_params_loop_37bb
 21590                                  .L_lambda_simple_params_end_37bb:
 21591 00010468 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21592 0001046B 4889C3                  	mov rbx, rax
 21593 0001046E 58                      	pop rax
 21594 0001046F C60005                  	mov byte [rax], T_closure
 21595 00010472 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21596 00010476 48C74009[83040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37bb
 21597 0001047E E937010000              	jmp .L_lambda_simple_end_37bb
 21598                                  .L_lambda_simple_code_37bb:	; lambda-simple body
 21599 00010483 48837C241003            	cmp qword [rsp + 8 * 2], 3
 21600 00010489 740B                    	je .L_lambda_simple_arity_check_ok_37bb
 21601 0001048B FF742410                	push qword [rsp + 8 * 2]
 21602 0001048F 6A03                    	push 3
 21603 00010491 E9F1190000              	jmp L_error_incorrect_arity_simple
 21604                                  .L_lambda_simple_arity_check_ok_37bb:
 21605 00010496 C8000000                	enter 0, 0
 21606 0001049A 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 21607 0001049E 50                      	push rax
 21608 0001049F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21609 000104A3 50                      	push rax
 21610 000104A4 6A02                    	push 2
 21611 000104A6 488B0425[30030000]      	mov rax, qword [free_var_102]
 21612                                  	assert_closure(rax)
    42 000104AE 803805              <1>  cmp byte [%1], %2
    43 000104B1 0F850B320000        <1>  jne L_error_incorrect_type
 21613 000104B7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21614 000104BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 21615                                  
 21616 000104BD 483D[02000000]                  	cmp rax, sob_boolean_false
 21617                                  
 21618 000104C3 0F84E3000000                    	je .L_if_else_4816
 21619 000104C9 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 21620 000104CD 50                      	push rax
 21621 000104CE 48B8-                   	mov rax,L_constants + 128
 21621 000104D0 [8000000000000000] 
 21622 000104D8 50                      	push rax
 21623 000104D9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21624 000104DD 50                      	push rax
 21625 000104DE 6A02                    	push 2
 21626 000104E0 488B0425[08030000]      	mov rax, qword [free_var_97]
 21627                                  	assert_closure(rax)
    42 000104E8 803805              <1>  cmp byte [%1], %2
    43 000104EB 0F85D1310000        <1>  jne L_error_incorrect_type
 21628 000104F1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21629 000104F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21630 000104F7 50                      	push rax
 21631 000104F8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21632 000104FC 50                      	push rax
 21633 000104FD 6A03                    	push 3
 21634 000104FF 488B4510                	mov rax, qword [rbp + 8 * 2]
 21635                                  
 21636 00010503 488B00                                            	mov rax, qword[rax + 8 * 0]
 21637                                  
 21638 00010506 488B00                                            	mov rax, qword[rax + 8 * 0]
 21639 00010509 488B00                  	mov rax, qword [rax]
 21640                                  	assert_closure(rax)
    42 0001050C 803805              <1>  cmp byte [%1], %2
    43 0001050F 0F85AD310000        <1>  jne L_error_incorrect_type
 21641 00010515 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21642 00010518 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21643 0001051B 50                      	push rax
 21644 0001051C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21645 00010520 50                      	push rax
 21646 00010521 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21647 00010525 50                      	push rax
 21648 00010526 6A02                    	push 2
 21649 00010528 488B0425[80010000]      	mov rax, qword [free_var_48]
 21650                                  	assert_closure(rax)
    42 00010530 803805              <1>  cmp byte [%1], %2
    43 00010533 0F8589310000        <1>  jne L_error_incorrect_type
 21651 00010539 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21652 0001053C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21653 0001053F 50                      	push rax
 21654 00010540 6A02                    	push 2
 21655 00010542 488B0425[68000000]      	mov rax, qword [free_var_13]
 21656                                  .L_applic_TC_406d:
 21657 0001054A 803805                  	cmp byte [rax], T_closure
 21658 0001054D 0F8530290000            	jne L_code_ptr_error
 21659 00010553 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21660 00010557 53                      	push rbx
 21661 00010558 FF7508                  	push qword [rbp + 8]
 21662 0001055B FF7500                  	push qword [rbp]
 21663 0001055E 488B4D18                	mov rcx, [rbp + 3 * 8]
 21664 00010562 488B542418              	mov rdx, [rsp + 3 * 8]
 21665 00010567 488D7204                	lea rsi, [rdx + 4]
 21666 0001056B 4C8D4EFF                	lea r9, [rsi - 1]
 21667 0001056F 488D7903                	lea rdi, [rcx + 3]
 21668 00010573 4D31C0                  	xor r8, r8
 21669                                  .L_tc_recycle_frame_loop_406d:
 21670 00010576 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21671 0001057A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21672 0001057F 49FFC9                  	dec r9
 21673 00010582 4D31C0                  	xor r8, r8
 21674 00010585 48FFCF                  	dec rdi
 21675 00010588 48FFCE                  	dec rsi
 21676 0001058B 4883FE00                	cmp rsi, 0
 21677 0001058F 75E5                    	jne .L_tc_recycle_frame_loop_406d
 21678                                  .L_tc_recycle_frame_done_406d:
 21679                                  ;this pop rbp in sot to the right place
 21680 00010591 4989C9                  	mov r9, rcx
 21681 00010594 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21682 0001059C 4C01CC                  	add rsp, r9
 21683 0001059F 5D                      	pop rbp
 21684 000105A0 488B4D00                	mov rcx, qword [rbp]
 21685 000105A4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21686 000105A8 FFE3                    	jmp rbx
 21687                                  
 21688 000105AA EB0A                            	jmp .L_if_end_4816
 21689                                  
 21690                                          	.L_if_else_4816:
 21691 000105AC 48B8-                   	mov rax,L_constants + 1
 21691 000105AE [0100000000000000] 
 21692                                  
 21693                                          	.L_if_end_4816:
 21694 000105B6 C9                      	leave
 21695 000105B7 C22800                  	ret 8 * (2 + 3)
 21696                                  .L_lambda_simple_end_37bb:	; new closure is in rax
 21697 000105BA 50                      	push rax
 21698 000105BB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21699 000105BF 8F00                    	pop qword [rax]
 21700 000105C1 48B8-                   	mov rax, sob_void
 21700 000105C3 [0000000000000000] 
 21701                                  
 21702 000105CB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21703 000105D0 E8F9180000              	call malloc
 21704 000105D5 50                      	push rax
 21705 000105D6 BF08000000              	mov rdi, 8 * 1	; new rib
 21706 000105DB E8EE180000              	call malloc
 21707 000105E0 50                      	push rax
 21708 000105E1 BF10000000              	mov rdi, 8 * 2	; extended env
 21709 000105E6 E8E3180000              	call malloc
 21710 000105EB 488B7D10                	mov rdi, ENV
 21711 000105EF BE00000000              	mov rsi, 0
 21712 000105F4 BA01000000              	mov rdx, 1
 21713                                  .L_lambda_simple_env_loop_37bc:	; ext_env[i + 1] <-- env[i]
 21714 000105F9 4883FE01                	cmp rsi, 1
 21715 000105FD 7410                    	je .L_lambda_simple_env_end_37bc
 21716 000105FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21717 00010603 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21718 00010607 48FFC6                  	inc rsi
 21719 0001060A 48FFC2                  	inc rdx
 21720 0001060D EBEA                    	jmp .L_lambda_simple_env_loop_37bc
 21721                                  .L_lambda_simple_env_end_37bc:
 21722 0001060F 5B                      	pop rbx
 21723 00010610 BE00000000              	mov rsi, 0
 21724                                  .L_lambda_simple_params_loop_37bc:	; copy params
 21725 00010615 4883FE01                	cmp rsi, 1
 21726 00010619 740E                    	je .L_lambda_simple_params_end_37bc
 21727 0001061B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21728 00010620 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21729 00010624 48FFC6                  	inc rsi
 21730 00010627 EBEC                    	jmp .L_lambda_simple_params_loop_37bc
 21731                                  .L_lambda_simple_params_end_37bc:
 21732 00010629 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21733 0001062C 4889C3                  	mov rbx, rax
 21734 0001062F 58                      	pop rax
 21735 00010630 C60005                  	mov byte [rax], T_closure
 21736 00010633 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21737 00010637 48C74009[44060100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37bc
 21738 0001063F E9B9000000              	jmp .L_lambda_simple_end_37bc
 21739                                  .L_lambda_simple_code_37bc:	; lambda-simple body
 21740 00010644 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21741 0001064A 740B                    	je .L_lambda_simple_arity_check_ok_37bc
 21742 0001064C FF742410                	push qword [rsp + 8 * 2]
 21743 00010650 6A01                    	push 1
 21744 00010652 E930180000              	jmp L_error_incorrect_arity_simple
 21745                                  .L_lambda_simple_arity_check_ok_37bc:
 21746 00010657 C8000000                	enter 0, 0
 21747 0001065B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21748 0001065F 50                      	push rax
 21749 00010660 6A01                    	push 1
 21750 00010662 488B0425[98000000]      	mov rax, qword [free_var_19]
 21751                                  	assert_closure(rax)
    42 0001066A 803805              <1>  cmp byte [%1], %2
    43 0001066D 0F854F300000        <1>  jne L_error_incorrect_type
 21752 00010673 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21753 00010676 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21754 00010679 50                      	push rax
 21755 0001067A 48B8-                   	mov rax,L_constants + 32
 21755 0001067C [2000000000000000] 
 21756 00010684 50                      	push rax
 21757 00010685 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21758 00010689 50                      	push rax
 21759 0001068A 6A03                    	push 3
 21760 0001068C 488B4510                	mov rax, qword [rbp + 8 * 2]
 21761                                  
 21762 00010690 488B00                                            	mov rax, qword[rax + 8 * 0]
 21763                                  
 21764 00010693 488B00                                            	mov rax, qword[rax + 8 * 0]
 21765 00010696 488B00                  	mov rax, qword [rax]
 21766                                  .L_applic_TC_406e:
 21767 00010699 803805                  	cmp byte [rax], T_closure
 21768 0001069C 0F85E1270000            	jne L_code_ptr_error
 21769 000106A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21770 000106A6 53                      	push rbx
 21771 000106A7 FF7508                  	push qword [rbp + 8]
 21772 000106AA FF7500                  	push qword [rbp]
 21773 000106AD 488B4D18                	mov rcx, [rbp + 3 * 8]
 21774 000106B1 488B542418              	mov rdx, [rsp + 3 * 8]
 21775 000106B6 488D7204                	lea rsi, [rdx + 4]
 21776 000106BA 4C8D4EFF                	lea r9, [rsi - 1]
 21777 000106BE 488D7903                	lea rdi, [rcx + 3]
 21778 000106C2 4D31C0                  	xor r8, r8
 21779                                  .L_tc_recycle_frame_loop_406e:
 21780 000106C5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21781 000106C9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21782 000106CE 49FFC9                  	dec r9
 21783 000106D1 4D31C0                  	xor r8, r8
 21784 000106D4 48FFCF                  	dec rdi
 21785 000106D7 48FFCE                  	dec rsi
 21786 000106DA 4883FE00                	cmp rsi, 0
 21787 000106DE 75E5                    	jne .L_tc_recycle_frame_loop_406e
 21788                                  .L_tc_recycle_frame_done_406e:
 21789                                  ;this pop rbp in sot to the right place
 21790 000106E0 4989C9                  	mov r9, rcx
 21791 000106E3 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21792 000106EB 4C01CC                  	add rsp, r9
 21793 000106EE 5D                      	pop rbp
 21794 000106EF 488B4D00                	mov rcx, qword [rbp]
 21795 000106F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21796 000106F7 FFE3                    	jmp rbx
 21797 000106F9 C9                      	leave
 21798 000106FA C21800                  	ret 8 * (2 + 1)
 21799                                  .L_lambda_simple_end_37bc:	; new closure is in rax
 21800 000106FD C9                      	leave
 21801 000106FE C21800                  	ret 8 * (2 + 1)
 21802                                  .L_lambda_simple_end_37ba:	; new closure is in rax
 21803                                  	assert_closure(rax)
    42 00010701 803805              <1>  cmp byte [%1], %2
    43 00010704 0F85B82F0000        <1>  jne L_error_incorrect_type
 21804 0001070A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21805 0001070D FF5009                  	call SOB_CLOSURE_CODE(rax)
 21806 00010710 48890425[48040000]      	mov qword [free_var_137], rax
 21807 00010718 48B8-                   	mov rax, sob_void
 21807 0001071A [0000000000000000] 
 21808                                  
 21809 00010722 4889C7                  	mov rdi, rax
 21810 00010725 E8B5170000              	call print_sexpr_if_not_void
 21811                                  
 21812 0001072A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21813 0001072F E89A170000              	call malloc
 21814 00010734 50                      	push rax
 21815 00010735 BF00000000              	mov rdi, 8 * 0	; new rib
 21816 0001073A E88F170000              	call malloc
 21817 0001073F 50                      	push rax
 21818 00010740 BF08000000              	mov rdi, 8 * 1	; extended env
 21819 00010745 E884170000              	call malloc
 21820 0001074A 488B7D10                	mov rdi, ENV
 21821 0001074E BE00000000              	mov rsi, 0
 21822 00010753 BA01000000              	mov rdx, 1
 21823                                  .L_lambda_simple_env_loop_37bd:	; ext_env[i + 1] <-- env[i]
 21824 00010758 4883FE00                	cmp rsi, 0
 21825 0001075C 7410                    	je .L_lambda_simple_env_end_37bd
 21826 0001075E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21827 00010762 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21828 00010766 48FFC6                  	inc rsi
 21829 00010769 48FFC2                  	inc rdx
 21830 0001076C EBEA                    	jmp .L_lambda_simple_env_loop_37bd
 21831                                  .L_lambda_simple_env_end_37bd:
 21832 0001076E 5B                      	pop rbx
 21833 0001076F BE00000000              	mov rsi, 0
 21834                                  .L_lambda_simple_params_loop_37bd:	; copy params
 21835 00010774 4883FE00                	cmp rsi, 0
 21836 00010778 740E                    	je .L_lambda_simple_params_end_37bd
 21837 0001077A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21838 0001077F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21839 00010783 48FFC6                  	inc rsi
 21840 00010786 EBEC                    	jmp .L_lambda_simple_params_loop_37bd
 21841                                  .L_lambda_simple_params_end_37bd:
 21842 00010788 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21843 0001078B 4889C3                  	mov rbx, rax
 21844 0001078E 58                      	pop rax
 21845 0001078F C60005                  	mov byte [rax], T_closure
 21846 00010792 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21847 00010796 48C74009[A3070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37bd
 21848 0001079E E9A4000000              	jmp .L_lambda_simple_end_37bd
 21849                                  .L_lambda_simple_code_37bd:	; lambda-simple body
 21850 000107A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21851 000107A9 740B                    	je .L_lambda_simple_arity_check_ok_37bd
 21852 000107AB FF742410                	push qword [rsp + 8 * 2]
 21853 000107AF 6A01                    	push 1
 21854 000107B1 E9D1160000              	jmp L_error_incorrect_arity_simple
 21855                                  .L_lambda_simple_arity_check_ok_37bd:
 21856 000107B6 C8000000                	enter 0, 0
 21857 000107BA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21858 000107BE 50                      	push rax
 21859 000107BF 6A00                    	push 0
 21860 000107C1 488B0425[D0000000]      	mov rax, qword [free_var_26]
 21861                                  	assert_closure(rax)
    42 000107C9 803805              <1>  cmp byte [%1], %2
    43 000107CC 0F85F02E0000        <1>  jne L_error_incorrect_type
 21862 000107D2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21863 000107D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21864 000107D8 50                      	push rax
 21865 000107D9 6A02                    	push 2
 21866 000107DB 488B0425[60010000]      	mov rax, qword [free_var_44]
 21867                                  .L_applic_TC_406f:
 21868 000107E3 803805                  	cmp byte [rax], T_closure
 21869 000107E6 0F8597260000            	jne L_code_ptr_error
 21870 000107EC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21871 000107F0 53                      	push rbx
 21872 000107F1 FF7508                  	push qword [rbp + 8]
 21873 000107F4 FF7500                  	push qword [rbp]
 21874 000107F7 488B4D18                	mov rcx, [rbp + 3 * 8]
 21875 000107FB 488B542418              	mov rdx, [rsp + 3 * 8]
 21876 00010800 488D7204                	lea rsi, [rdx + 4]
 21877 00010804 4C8D4EFF                	lea r9, [rsi - 1]
 21878 00010808 488D7903                	lea rdi, [rcx + 3]
 21879 0001080C 4D31C0                  	xor r8, r8
 21880                                  .L_tc_recycle_frame_loop_406f:
 21881 0001080F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21882 00010813 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21883 00010818 49FFC9                  	dec r9
 21884 0001081B 4D31C0                  	xor r8, r8
 21885 0001081E 48FFCF                  	dec rdi
 21886 00010821 48FFCE                  	dec rsi
 21887 00010824 4883FE00                	cmp rsi, 0
 21888 00010828 75E5                    	jne .L_tc_recycle_frame_loop_406f
 21889                                  .L_tc_recycle_frame_done_406f:
 21890                                  ;this pop rbp in sot to the right place
 21891 0001082A 4989C9                  	mov r9, rcx
 21892 0001082D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21893 00010835 4C01CC                  	add rsp, r9
 21894 00010838 5D                      	pop rbp
 21895 00010839 488B4D00                	mov rcx, qword [rbp]
 21896 0001083D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21897 00010841 FFE3                    	jmp rbx
 21898 00010843 C9                      	leave
 21899 00010844 C21800                  	ret 8 * (2 + 1)
 21900                                  .L_lambda_simple_end_37bd:	; new closure is in rax
 21901 00010847 48890425[50040000]      	mov qword [free_var_138], rax
 21902 0001084F 48B8-                   	mov rax, sob_void
 21902 00010851 [0000000000000000] 
 21903                                  
 21904 00010859 4889C7                  	mov rdi, rax
 21905 0001085C E87E160000              	call print_sexpr_if_not_void
 21906                                  
 21907 00010861 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21908 00010866 E863160000              	call malloc
 21909 0001086B 50                      	push rax
 21910 0001086C BF00000000              	mov rdi, 8 * 0	; new rib
 21911 00010871 E858160000              	call malloc
 21912 00010876 50                      	push rax
 21913 00010877 BF08000000              	mov rdi, 8 * 1	; extended env
 21914 0001087C E84D160000              	call malloc
 21915 00010881 488B7D10                	mov rdi, ENV
 21916 00010885 BE00000000              	mov rsi, 0
 21917 0001088A BA01000000              	mov rdx, 1
 21918                                  .L_lambda_simple_env_loop_37be:	; ext_env[i + 1] <-- env[i]
 21919 0001088F 4883FE00                	cmp rsi, 0
 21920 00010893 7410                    	je .L_lambda_simple_env_end_37be
 21921 00010895 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21922 00010899 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21923 0001089D 48FFC6                  	inc rsi
 21924 000108A0 48FFC2                  	inc rdx
 21925 000108A3 EBEA                    	jmp .L_lambda_simple_env_loop_37be
 21926                                  .L_lambda_simple_env_end_37be:
 21927 000108A5 5B                      	pop rbx
 21928 000108A6 BE00000000              	mov rsi, 0
 21929                                  .L_lambda_simple_params_loop_37be:	; copy params
 21930 000108AB 4883FE00                	cmp rsi, 0
 21931 000108AF 740E                    	je .L_lambda_simple_params_end_37be
 21932 000108B1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21933 000108B6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21934 000108BA 48FFC6                  	inc rsi
 21935 000108BD EBEC                    	jmp .L_lambda_simple_params_loop_37be
 21936                                  .L_lambda_simple_params_end_37be:
 21937 000108BF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21938 000108C2 4889C3                  	mov rbx, rax
 21939 000108C5 58                      	pop rax
 21940 000108C6 C60005                  	mov byte [rax], T_closure
 21941 000108C9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21942 000108CD 48C74009[DA080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37be
 21943 000108D5 E995000000              	jmp .L_lambda_simple_end_37be
 21944                                  .L_lambda_simple_code_37be:	; lambda-simple body
 21945 000108DA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21946 000108E0 740B                    	je .L_lambda_simple_arity_check_ok_37be
 21947 000108E2 FF742410                	push qword [rsp + 8 * 2]
 21948 000108E6 6A01                    	push 1
 21949 000108E8 E99A150000              	jmp L_error_incorrect_arity_simple
 21950                                  .L_lambda_simple_arity_check_ok_37be:
 21951 000108ED C8000000                	enter 0, 0
 21952 000108F1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21953 000108F5 50                      	push rax
 21954 000108F6 48B8-                   	mov rax,L_constants + 32
 21954 000108F8 [2000000000000000] 
 21955 00010900 50                      	push rax
 21956 00010901 6A02                    	push 2
 21957 00010903 488B0425[30030000]      	mov rax, qword [free_var_102]
 21958                                  .L_applic_TC_4070:
 21959 0001090B 803805                  	cmp byte [rax], T_closure
 21960 0001090E 0F856F250000            	jne L_code_ptr_error
 21961 00010914 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21962 00010918 53                      	push rbx
 21963 00010919 FF7508                  	push qword [rbp + 8]
 21964 0001091C FF7500                  	push qword [rbp]
 21965 0001091F 488B4D18                	mov rcx, [rbp + 3 * 8]
 21966 00010923 488B542418              	mov rdx, [rsp + 3 * 8]
 21967 00010928 488D7204                	lea rsi, [rdx + 4]
 21968 0001092C 4C8D4EFF                	lea r9, [rsi - 1]
 21969 00010930 488D7903                	lea rdi, [rcx + 3]
 21970 00010934 4D31C0                  	xor r8, r8
 21971                                  .L_tc_recycle_frame_loop_4070:
 21972 00010937 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21973 0001093B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21974 00010940 49FFC9                  	dec r9
 21975 00010943 4D31C0                  	xor r8, r8
 21976 00010946 48FFCF                  	dec rdi
 21977 00010949 48FFCE                  	dec rsi
 21978 0001094C 4883FE00                	cmp rsi, 0
 21979 00010950 75E5                    	jne .L_tc_recycle_frame_loop_4070
 21980                                  .L_tc_recycle_frame_done_4070:
 21981                                  ;this pop rbp in sot to the right place
 21982 00010952 4989C9                  	mov r9, rcx
 21983 00010955 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21984 0001095D 4C01CC                  	add rsp, r9
 21985 00010960 5D                      	pop rbp
 21986 00010961 488B4D00                	mov rcx, qword [rbp]
 21987 00010965 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21988 00010969 FFE3                    	jmp rbx
 21989 0001096B C9                      	leave
 21990 0001096C C21800                  	ret 8 * (2 + 1)
 21991                                  .L_lambda_simple_end_37be:	; new closure is in rax
 21992 0001096F 48890425[58040000]      	mov qword [free_var_139], rax
 21993 00010977 48B8-                   	mov rax, sob_void
 21993 00010979 [0000000000000000] 
 21994                                  
 21995 00010981 4889C7                  	mov rdi, rax
 21996 00010984 E856150000              	call print_sexpr_if_not_void
 21997                                  
 21998 00010989 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21999 0001098E E83B150000              	call malloc
 22000 00010993 50                      	push rax
 22001 00010994 BF00000000              	mov rdi, 8 * 0	; new rib
 22002 00010999 E830150000              	call malloc
 22003 0001099E 50                      	push rax
 22004 0001099F BF08000000              	mov rdi, 8 * 1	; extended env
 22005 000109A4 E825150000              	call malloc
 22006 000109A9 488B7D10                	mov rdi, ENV
 22007 000109AD BE00000000              	mov rsi, 0
 22008 000109B2 BA01000000              	mov rdx, 1
 22009                                  .L_lambda_simple_env_loop_37bf:	; ext_env[i + 1] <-- env[i]
 22010 000109B7 4883FE00                	cmp rsi, 0
 22011 000109BB 7410                    	je .L_lambda_simple_env_end_37bf
 22012 000109BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22013 000109C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22014 000109C5 48FFC6                  	inc rsi
 22015 000109C8 48FFC2                  	inc rdx
 22016 000109CB EBEA                    	jmp .L_lambda_simple_env_loop_37bf
 22017                                  .L_lambda_simple_env_end_37bf:
 22018 000109CD 5B                      	pop rbx
 22019 000109CE BE00000000              	mov rsi, 0
 22020                                  .L_lambda_simple_params_loop_37bf:	; copy params
 22021 000109D3 4883FE00                	cmp rsi, 0
 22022 000109D7 740E                    	je .L_lambda_simple_params_end_37bf
 22023 000109D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22024 000109DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22025 000109E2 48FFC6                  	inc rsi
 22026 000109E5 EBEC                    	jmp .L_lambda_simple_params_loop_37bf
 22027                                  .L_lambda_simple_params_end_37bf:
 22028 000109E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22029 000109EA 4889C3                  	mov rbx, rax
 22030 000109ED 58                      	pop rax
 22031 000109EE C60005                  	mov byte [rax], T_closure
 22032 000109F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22033 000109F5 48C74009[020A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37bf
 22034 000109FD E995000000              	jmp .L_lambda_simple_end_37bf
 22035                                  .L_lambda_simple_code_37bf:	; lambda-simple body
 22036 00010A02 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22037 00010A08 740B                    	je .L_lambda_simple_arity_check_ok_37bf
 22038 00010A0A FF742410                	push qword [rsp + 8 * 2]
 22039 00010A0E 6A01                    	push 1
 22040 00010A10 E972140000              	jmp L_error_incorrect_arity_simple
 22041                                  .L_lambda_simple_arity_check_ok_37bf:
 22042 00010A15 C8000000                	enter 0, 0
 22043 00010A19 48B8-                   	mov rax,L_constants + 32
 22043 00010A1B [2000000000000000] 
 22044 00010A23 50                      	push rax
 22045 00010A24 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22046 00010A28 50                      	push rax
 22047 00010A29 6A02                    	push 2
 22048 00010A2B 488B0425[30030000]      	mov rax, qword [free_var_102]
 22049                                  .L_applic_TC_4071:
 22050 00010A33 803805                  	cmp byte [rax], T_closure
 22051 00010A36 0F8547240000            	jne L_code_ptr_error
 22052 00010A3C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22053 00010A40 53                      	push rbx
 22054 00010A41 FF7508                  	push qword [rbp + 8]
 22055 00010A44 FF7500                  	push qword [rbp]
 22056 00010A47 488B4D18                	mov rcx, [rbp + 3 * 8]
 22057 00010A4B 488B542418              	mov rdx, [rsp + 3 * 8]
 22058 00010A50 488D7204                	lea rsi, [rdx + 4]
 22059 00010A54 4C8D4EFF                	lea r9, [rsi - 1]
 22060 00010A58 488D7903                	lea rdi, [rcx + 3]
 22061 00010A5C 4D31C0                  	xor r8, r8
 22062                                  .L_tc_recycle_frame_loop_4071:
 22063 00010A5F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22064 00010A63 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22065 00010A68 49FFC9                  	dec r9
 22066 00010A6B 4D31C0                  	xor r8, r8
 22067 00010A6E 48FFCF                  	dec rdi
 22068 00010A71 48FFCE                  	dec rsi
 22069 00010A74 4883FE00                	cmp rsi, 0
 22070 00010A78 75E5                    	jne .L_tc_recycle_frame_loop_4071
 22071                                  .L_tc_recycle_frame_done_4071:
 22072                                  ;this pop rbp in sot to the right place
 22073 00010A7A 4989C9                  	mov r9, rcx
 22074 00010A7D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22075 00010A85 4C01CC                  	add rsp, r9
 22076 00010A88 5D                      	pop rbp
 22077 00010A89 488B4D00                	mov rcx, qword [rbp]
 22078 00010A8D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22079 00010A91 FFE3                    	jmp rbx
 22080 00010A93 C9                      	leave
 22081 00010A94 C21800                  	ret 8 * (2 + 1)
 22082                                  .L_lambda_simple_end_37bf:	; new closure is in rax
 22083 00010A97 48890425[60040000]      	mov qword [free_var_140], rax
 22084 00010A9F 48B8-                   	mov rax, sob_void
 22084 00010AA1 [0000000000000000] 
 22085                                  
 22086 00010AA9 4889C7                  	mov rdi, rax
 22087 00010AAC E82E140000              	call print_sexpr_if_not_void
 22088                                  
 22089 00010AB1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22090 00010AB6 E813140000              	call malloc
 22091 00010ABB 50                      	push rax
 22092 00010ABC BF00000000              	mov rdi, 8 * 0	; new rib
 22093 00010AC1 E808140000              	call malloc
 22094 00010AC6 50                      	push rax
 22095 00010AC7 BF08000000              	mov rdi, 8 * 1	; extended env
 22096 00010ACC E8FD130000              	call malloc
 22097 00010AD1 488B7D10                	mov rdi, ENV
 22098 00010AD5 BE00000000              	mov rsi, 0
 22099 00010ADA BA01000000              	mov rdx, 1
 22100                                  .L_lambda_simple_env_loop_37c0:	; ext_env[i + 1] <-- env[i]
 22101 00010ADF 4883FE00                	cmp rsi, 0
 22102 00010AE3 7410                    	je .L_lambda_simple_env_end_37c0
 22103 00010AE5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22104 00010AE9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22105 00010AED 48FFC6                  	inc rsi
 22106 00010AF0 48FFC2                  	inc rdx
 22107 00010AF3 EBEA                    	jmp .L_lambda_simple_env_loop_37c0
 22108                                  .L_lambda_simple_env_end_37c0:
 22109 00010AF5 5B                      	pop rbx
 22110 00010AF6 BE00000000              	mov rsi, 0
 22111                                  .L_lambda_simple_params_loop_37c0:	; copy params
 22112 00010AFB 4883FE00                	cmp rsi, 0
 22113 00010AFF 740E                    	je .L_lambda_simple_params_end_37c0
 22114 00010B01 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22115 00010B06 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22116 00010B0A 48FFC6                  	inc rsi
 22117 00010B0D EBEC                    	jmp .L_lambda_simple_params_loop_37c0
 22118                                  .L_lambda_simple_params_end_37c0:
 22119 00010B0F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22120 00010B12 4889C3                  	mov rbx, rax
 22121 00010B15 58                      	pop rax
 22122 00010B16 C60005                  	mov byte [rax], T_closure
 22123 00010B19 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22124 00010B1D 48C74009[2A0B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c0
 22125 00010B25 E9AF000000              	jmp .L_lambda_simple_end_37c0
 22126                                  .L_lambda_simple_code_37c0:	; lambda-simple body
 22127 00010B2A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22128 00010B30 740B                    	je .L_lambda_simple_arity_check_ok_37c0
 22129 00010B32 FF742410                	push qword [rsp + 8 * 2]
 22130 00010B36 6A01                    	push 1
 22131 00010B38 E94A130000              	jmp L_error_incorrect_arity_simple
 22132                                  .L_lambda_simple_arity_check_ok_37c0:
 22133 00010B3D C8000000                	enter 0, 0
 22134 00010B41 48B8-                   	mov rax,L_constants + 512
 22134 00010B43 [0002000000000000] 
 22135 00010B4B 50                      	push rax
 22136 00010B4C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22137 00010B50 50                      	push rax
 22138 00010B51 6A02                    	push 2
 22139 00010B53 488B0425[60010000]      	mov rax, qword [free_var_44]
 22140                                  	assert_closure(rax)
    42 00010B5B 803805              <1>  cmp byte [%1], %2
    43 00010B5E 0F855E2B0000        <1>  jne L_error_incorrect_type
 22141 00010B64 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22142 00010B67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22143 00010B6A 50                      	push rax
 22144 00010B6B 6A01                    	push 1
 22145 00010B6D 488B0425[D8000000]      	mov rax, qword [free_var_27]
 22146                                  .L_applic_TC_4072:
 22147 00010B75 803805                  	cmp byte [rax], T_closure
 22148 00010B78 0F8505230000            	jne L_code_ptr_error
 22149 00010B7E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22150 00010B82 53                      	push rbx
 22151 00010B83 FF7508                  	push qword [rbp + 8]
 22152 00010B86 FF7500                  	push qword [rbp]
 22153 00010B89 488B4D18                	mov rcx, [rbp + 3 * 8]
 22154 00010B8D 488B542418              	mov rdx, [rsp + 3 * 8]
 22155 00010B92 488D7204                	lea rsi, [rdx + 4]
 22156 00010B96 4C8D4EFF                	lea r9, [rsi - 1]
 22157 00010B9A 488D7903                	lea rdi, [rcx + 3]
 22158 00010B9E 4D31C0                  	xor r8, r8
 22159                                  .L_tc_recycle_frame_loop_4072:
 22160 00010BA1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22161 00010BA5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22162 00010BAA 49FFC9                  	dec r9
 22163 00010BAD 4D31C0                  	xor r8, r8
 22164 00010BB0 48FFCF                  	dec rdi
 22165 00010BB3 48FFCE                  	dec rsi
 22166 00010BB6 4883FE00                	cmp rsi, 0
 22167 00010BBA 75E5                    	jne .L_tc_recycle_frame_loop_4072
 22168                                  .L_tc_recycle_frame_done_4072:
 22169                                  ;this pop rbp in sot to the right place
 22170 00010BBC 4989C9                  	mov r9, rcx
 22171 00010BBF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22172 00010BC7 4C01CC                  	add rsp, r9
 22173 00010BCA 5D                      	pop rbp
 22174 00010BCB 488B4D00                	mov rcx, qword [rbp]
 22175 00010BCF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22176 00010BD3 FFE3                    	jmp rbx
 22177 00010BD5 C9                      	leave
 22178 00010BD6 C21800                  	ret 8 * (2 + 1)
 22179                                  .L_lambda_simple_end_37c0:	; new closure is in rax
 22180 00010BD9 48890425[68040000]      	mov qword [free_var_141], rax
 22181 00010BE1 48B8-                   	mov rax, sob_void
 22181 00010BE3 [0000000000000000] 
 22182                                  
 22183 00010BEB 4889C7                  	mov rdi, rax
 22184 00010BEE E8EC120000              	call print_sexpr_if_not_void
 22185                                  
 22186 00010BF3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22187 00010BF8 E8D1120000              	call malloc
 22188 00010BFD 50                      	push rax
 22189 00010BFE BF00000000              	mov rdi, 8 * 0	; new rib
 22190 00010C03 E8C6120000              	call malloc
 22191 00010C08 50                      	push rax
 22192 00010C09 BF08000000              	mov rdi, 8 * 1	; extended env
 22193 00010C0E E8BB120000              	call malloc
 22194 00010C13 488B7D10                	mov rdi, ENV
 22195 00010C17 BE00000000              	mov rsi, 0
 22196 00010C1C BA01000000              	mov rdx, 1
 22197                                  .L_lambda_simple_env_loop_37c1:	; ext_env[i + 1] <-- env[i]
 22198 00010C21 4883FE00                	cmp rsi, 0
 22199 00010C25 7410                    	je .L_lambda_simple_env_end_37c1
 22200 00010C27 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22201 00010C2B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22202 00010C2F 48FFC6                  	inc rsi
 22203 00010C32 48FFC2                  	inc rdx
 22204 00010C35 EBEA                    	jmp .L_lambda_simple_env_loop_37c1
 22205                                  .L_lambda_simple_env_end_37c1:
 22206 00010C37 5B                      	pop rbx
 22207 00010C38 BE00000000              	mov rsi, 0
 22208                                  .L_lambda_simple_params_loop_37c1:	; copy params
 22209 00010C3D 4883FE00                	cmp rsi, 0
 22210 00010C41 740E                    	je .L_lambda_simple_params_end_37c1
 22211 00010C43 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22212 00010C48 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22213 00010C4C 48FFC6                  	inc rsi
 22214 00010C4F EBEC                    	jmp .L_lambda_simple_params_loop_37c1
 22215                                  .L_lambda_simple_params_end_37c1:
 22216 00010C51 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22217 00010C54 4889C3                  	mov rbx, rax
 22218 00010C57 58                      	pop rax
 22219 00010C58 C60005                  	mov byte [rax], T_closure
 22220 00010C5B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22221 00010C5F 48C74009[6C0C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c1
 22222 00010C67 E9A4000000              	jmp .L_lambda_simple_end_37c1
 22223                                  .L_lambda_simple_code_37c1:	; lambda-simple body
 22224 00010C6C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22225 00010C72 740B                    	je .L_lambda_simple_arity_check_ok_37c1
 22226 00010C74 FF742410                	push qword [rsp + 8 * 2]
 22227 00010C78 6A01                    	push 1
 22228 00010C7A E908120000              	jmp L_error_incorrect_arity_simple
 22229                                  .L_lambda_simple_arity_check_ok_37c1:
 22230 00010C7F C8000000                	enter 0, 0
 22231 00010C83 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22232 00010C87 50                      	push rax
 22233 00010C88 6A01                    	push 1
 22234 00010C8A 488B0425[68040000]      	mov rax, qword [free_var_141]
 22235                                  	assert_closure(rax)
    42 00010C92 803805              <1>  cmp byte [%1], %2
    43 00010C95 0F85272A0000        <1>  jne L_error_incorrect_type
 22236 00010C9B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22237 00010C9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22238 00010CA1 50                      	push rax
 22239 00010CA2 6A01                    	push 1
 22240 00010CA4 488B0425[B0020000]      	mov rax, qword [free_var_86]
 22241                                  .L_applic_TC_4073:
 22242 00010CAC 803805                  	cmp byte [rax], T_closure
 22243 00010CAF 0F85CE210000            	jne L_code_ptr_error
 22244 00010CB5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22245 00010CB9 53                      	push rbx
 22246 00010CBA FF7508                  	push qword [rbp + 8]
 22247 00010CBD FF7500                  	push qword [rbp]
 22248 00010CC0 488B4D18                	mov rcx, [rbp + 3 * 8]
 22249 00010CC4 488B542418              	mov rdx, [rsp + 3 * 8]
 22250 00010CC9 488D7204                	lea rsi, [rdx + 4]
 22251 00010CCD 4C8D4EFF                	lea r9, [rsi - 1]
 22252 00010CD1 488D7903                	lea rdi, [rcx + 3]
 22253 00010CD5 4D31C0                  	xor r8, r8
 22254                                  .L_tc_recycle_frame_loop_4073:
 22255 00010CD8 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22256 00010CDC 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22257 00010CE1 49FFC9                  	dec r9
 22258 00010CE4 4D31C0                  	xor r8, r8
 22259 00010CE7 48FFCF                  	dec rdi
 22260 00010CEA 48FFCE                  	dec rsi
 22261 00010CED 4883FE00                	cmp rsi, 0
 22262 00010CF1 75E5                    	jne .L_tc_recycle_frame_loop_4073
 22263                                  .L_tc_recycle_frame_done_4073:
 22264                                  ;this pop rbp in sot to the right place
 22265 00010CF3 4989C9                  	mov r9, rcx
 22266 00010CF6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22267 00010CFE 4C01CC                  	add rsp, r9
 22268 00010D01 5D                      	pop rbp
 22269 00010D02 488B4D00                	mov rcx, qword [rbp]
 22270 00010D06 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22271 00010D0A FFE3                    	jmp rbx
 22272 00010D0C C9                      	leave
 22273 00010D0D C21800                  	ret 8 * (2 + 1)
 22274                                  .L_lambda_simple_end_37c1:	; new closure is in rax
 22275 00010D10 48890425[70040000]      	mov qword [free_var_142], rax
 22276 00010D18 48B8-                   	mov rax, sob_void
 22276 00010D1A [0000000000000000] 
 22277                                  
 22278 00010D22 4889C7                  	mov rdi, rax
 22279 00010D25 E8B5110000              	call print_sexpr_if_not_void
 22280                                  
 22281 00010D2A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22282 00010D2F E89A110000              	call malloc
 22283 00010D34 50                      	push rax
 22284 00010D35 BF00000000              	mov rdi, 8 * 0	; new rib
 22285 00010D3A E88F110000              	call malloc
 22286 00010D3F 50                      	push rax
 22287 00010D40 BF08000000              	mov rdi, 8 * 1	; extended env
 22288 00010D45 E884110000              	call malloc
 22289 00010D4A 488B7D10                	mov rdi, ENV
 22290 00010D4E BE00000000              	mov rsi, 0
 22291 00010D53 BA01000000              	mov rdx, 1
 22292                                  .L_lambda_simple_env_loop_37c2:	; ext_env[i + 1] <-- env[i]
 22293 00010D58 4883FE00                	cmp rsi, 0
 22294 00010D5C 7410                    	je .L_lambda_simple_env_end_37c2
 22295 00010D5E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22296 00010D62 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22297 00010D66 48FFC6                  	inc rsi
 22298 00010D69 48FFC2                  	inc rdx
 22299 00010D6C EBEA                    	jmp .L_lambda_simple_env_loop_37c2
 22300                                  .L_lambda_simple_env_end_37c2:
 22301 00010D6E 5B                      	pop rbx
 22302 00010D6F BE00000000              	mov rsi, 0
 22303                                  .L_lambda_simple_params_loop_37c2:	; copy params
 22304 00010D74 4883FE00                	cmp rsi, 0
 22305 00010D78 740E                    	je .L_lambda_simple_params_end_37c2
 22306 00010D7A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22307 00010D7F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22308 00010D83 48FFC6                  	inc rsi
 22309 00010D86 EBEC                    	jmp .L_lambda_simple_params_loop_37c2
 22310                                  .L_lambda_simple_params_end_37c2:
 22311 00010D88 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22312 00010D8B 4889C3                  	mov rbx, rax
 22313 00010D8E 58                      	pop rax
 22314 00010D8F C60005                  	mov byte [rax], T_closure
 22315 00010D92 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22316 00010D96 48C74009[A30D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c2
 22317 00010D9E E9B6000000              	jmp .L_lambda_simple_end_37c2
 22318                                  .L_lambda_simple_code_37c2:	; lambda-simple body
 22319 00010DA3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22320 00010DA9 740B                    	je .L_lambda_simple_arity_check_ok_37c2
 22321 00010DAB FF742410                	push qword [rsp + 8 * 2]
 22322 00010DAF 6A01                    	push 1
 22323 00010DB1 E9D1100000              	jmp L_error_incorrect_arity_simple
 22324                                  .L_lambda_simple_arity_check_ok_37c2:
 22325 00010DB6 C8000000                	enter 0, 0
 22326 00010DBA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22327 00010DBE 50                      	push rax
 22328 00010DBF 6A01                    	push 1
 22329 00010DC1 488B0425[60040000]      	mov rax, qword [free_var_140]
 22330                                  	assert_closure(rax)
    42 00010DC9 803805              <1>  cmp byte [%1], %2
    43 00010DCC 0F85F0280000        <1>  jne L_error_incorrect_type
 22331 00010DD2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22332 00010DD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22333                                  
 22334 00010DD8 483D[02000000]                  	cmp rax, sob_boolean_false
 22335                                  
 22336 00010DDE 7471                            	je .L_if_else_4817
 22337 00010DE0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22338 00010DE4 50                      	push rax
 22339 00010DE5 6A01                    	push 1
 22340 00010DE7 488B0425[10030000]      	mov rax, qword [free_var_98]
 22341                                  .L_applic_TC_4074:
 22342 00010DEF 803805                  	cmp byte [rax], T_closure
 22343 00010DF2 0F858B200000            	jne L_code_ptr_error
 22344 00010DF8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22345 00010DFC 53                      	push rbx
 22346 00010DFD FF7508                  	push qword [rbp + 8]
 22347 00010E00 FF7500                  	push qword [rbp]
 22348 00010E03 488B4D18                	mov rcx, [rbp + 3 * 8]
 22349 00010E07 488B542418              	mov rdx, [rsp + 3 * 8]
 22350 00010E0C 488D7204                	lea rsi, [rdx + 4]
 22351 00010E10 4C8D4EFF                	lea r9, [rsi - 1]
 22352 00010E14 488D7903                	lea rdi, [rcx + 3]
 22353 00010E18 4D31C0                  	xor r8, r8
 22354                                  .L_tc_recycle_frame_loop_4074:
 22355 00010E1B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22356 00010E1F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22357 00010E24 49FFC9                  	dec r9
 22358 00010E27 4D31C0                  	xor r8, r8
 22359 00010E2A 48FFCF                  	dec rdi
 22360 00010E2D 48FFCE                  	dec rsi
 22361 00010E30 4883FE00                	cmp rsi, 0
 22362 00010E34 75E5                    	jne .L_tc_recycle_frame_loop_4074
 22363                                  .L_tc_recycle_frame_done_4074:
 22364                                  ;this pop rbp in sot to the right place
 22365 00010E36 4989C9                  	mov r9, rcx
 22366 00010E39 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22367 00010E41 4C01CC                  	add rsp, r9
 22368 00010E44 5D                      	pop rbp
 22369 00010E45 488B4D00                	mov rcx, qword [rbp]
 22370 00010E49 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22371 00010E4D FFE3                    	jmp rbx
 22372                                  
 22373 00010E4F EB04                            	jmp .L_if_end_4817
 22374                                  
 22375                                          	.L_if_else_4817:
 22376 00010E51 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22377                                  
 22378                                          	.L_if_end_4817:
 22379 00010E55 C9                      	leave
 22380 00010E56 C21800                  	ret 8 * (2 + 1)
 22381                                  .L_lambda_simple_end_37c2:	; new closure is in rax
 22382 00010E59 48890425[78040000]      	mov qword [free_var_143], rax
 22383 00010E61 48B8-                   	mov rax, sob_void
 22383 00010E63 [0000000000000000] 
 22384                                  
 22385 00010E6B 4889C7                  	mov rdi, rax
 22386 00010E6E E86C100000              	call print_sexpr_if_not_void
 22387                                  
 22388 00010E73 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22389 00010E78 E851100000              	call malloc
 22390 00010E7D 50                      	push rax
 22391 00010E7E BF00000000              	mov rdi, 8 * 0	; new rib
 22392 00010E83 E846100000              	call malloc
 22393 00010E88 50                      	push rax
 22394 00010E89 BF08000000              	mov rdi, 8 * 1	; extended env
 22395 00010E8E E83B100000              	call malloc
 22396 00010E93 488B7D10                	mov rdi, ENV
 22397 00010E97 BE00000000              	mov rsi, 0
 22398 00010E9C BA01000000              	mov rdx, 1
 22399                                  .L_lambda_simple_env_loop_37c3:	; ext_env[i + 1] <-- env[i]
 22400 00010EA1 4883FE00                	cmp rsi, 0
 22401 00010EA5 7410                    	je .L_lambda_simple_env_end_37c3
 22402 00010EA7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22403 00010EAB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22404 00010EAF 48FFC6                  	inc rsi
 22405 00010EB2 48FFC2                  	inc rdx
 22406 00010EB5 EBEA                    	jmp .L_lambda_simple_env_loop_37c3
 22407                                  .L_lambda_simple_env_end_37c3:
 22408 00010EB7 5B                      	pop rbx
 22409 00010EB8 BE00000000              	mov rsi, 0
 22410                                  .L_lambda_simple_params_loop_37c3:	; copy params
 22411 00010EBD 4883FE00                	cmp rsi, 0
 22412 00010EC1 740E                    	je .L_lambda_simple_params_end_37c3
 22413 00010EC3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22414 00010EC8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22415 00010ECC 48FFC6                  	inc rsi
 22416 00010ECF EBEC                    	jmp .L_lambda_simple_params_loop_37c3
 22417                                  .L_lambda_simple_params_end_37c3:
 22418 00010ED1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22419 00010ED4 4889C3                  	mov rbx, rax
 22420 00010ED7 58                      	pop rax
 22421 00010ED8 C60005                  	mov byte [rax], T_closure
 22422 00010EDB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22423 00010EDF 48C74009[EC0E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c3
 22424 00010EE7 E9BC040000              	jmp .L_lambda_simple_end_37c3
 22425                                  .L_lambda_simple_code_37c3:	; lambda-simple body
 22426 00010EEC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22427 00010EF2 740B                    	je .L_lambda_simple_arity_check_ok_37c3
 22428 00010EF4 FF742410                	push qword [rsp + 8 * 2]
 22429 00010EF8 6A02                    	push 2
 22430 00010EFA E9880F0000              	jmp L_error_incorrect_arity_simple
 22431                                  .L_lambda_simple_arity_check_ok_37c3:
 22432 00010EFF C8000000                	enter 0, 0
 22433 00010F03 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22434 00010F07 50                      	push rax
 22435 00010F08 6A01                    	push 1
 22436 00010F0A 488B0425[08000000]      	mov rax, qword [free_var_1]
 22437                                  	assert_closure(rax)
    42 00010F12 803805              <1>  cmp byte [%1], %2
    43 00010F15 0F85A7270000        <1>  jne L_error_incorrect_type
 22438 00010F1B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22439 00010F1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22440                                  
 22441 00010F21 483D[02000000]                  	cmp rax, sob_boolean_false
 22442                                  
 22443 00010F27 7420                            	je .L_if_else_4820
 22444 00010F29 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22445 00010F2D 50                      	push rax
 22446 00010F2E 6A01                    	push 1
 22447 00010F30 488B0425[08000000]      	mov rax, qword [free_var_1]
 22448                                  	assert_closure(rax)
    42 00010F38 803805              <1>  cmp byte [%1], %2
    43 00010F3B 0F8581270000        <1>  jne L_error_incorrect_type
 22449 00010F41 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22450 00010F44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22451                                  
 22452 00010F47 EB0A                            	jmp .L_if_end_4820
 22453                                  
 22454                                          	.L_if_else_4820:
 22455 00010F49 48B8-                   	mov rax,L_constants + 2
 22455 00010F4B [0200000000000000] 
 22456                                  
 22457                                          	.L_if_end_4820:
 22458                                  
 22459 00010F53 483D[02000000]                  	cmp rax, sob_boolean_false
 22460                                  
 22461 00010F59 0F841C010000                    	je .L_if_else_4818
 22462 00010F5F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22463 00010F63 50                      	push rax
 22464 00010F64 6A01                    	push 1
 22465 00010F66 488B0425[80000000]      	mov rax, qword [free_var_16]
 22466                                  	assert_closure(rax)
    42 00010F6E 803805              <1>  cmp byte [%1], %2
    43 00010F71 0F854B270000        <1>  jne L_error_incorrect_type
 22467 00010F77 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22468 00010F7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 22469 00010F7D 50                      	push rax
 22470 00010F7E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22471 00010F82 50                      	push rax
 22472 00010F83 6A01                    	push 1
 22473 00010F85 488B0425[80000000]      	mov rax, qword [free_var_16]
 22474                                  	assert_closure(rax)
    42 00010F8D 803805              <1>  cmp byte [%1], %2
    43 00010F90 0F852C270000        <1>  jne L_error_incorrect_type
 22475 00010F96 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22476 00010F99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22477 00010F9C 50                      	push rax
 22478 00010F9D 6A02                    	push 2
 22479 00010F9F 488B0425[80040000]      	mov rax, qword [free_var_144]
 22480                                  	assert_closure(rax)
    42 00010FA7 803805              <1>  cmp byte [%1], %2
    43 00010FAA 0F8512270000        <1>  jne L_error_incorrect_type
 22481 00010FB0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22482 00010FB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22483                                  
 22484 00010FB6 483D[02000000]                  	cmp rax, sob_boolean_false
 22485                                  
 22486 00010FBC 0F84AA000000                    	je .L_if_else_481f
 22487 00010FC2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22488 00010FC6 50                      	push rax
 22489 00010FC7 6A01                    	push 1
 22490 00010FC9 488B0425[88000000]      	mov rax, qword [free_var_17]
 22491                                  	assert_closure(rax)
    42 00010FD1 803805              <1>  cmp byte [%1], %2
    43 00010FD4 0F85E8260000        <1>  jne L_error_incorrect_type
 22492 00010FDA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22493 00010FDD FF5009                  	call SOB_CLOSURE_CODE(rax)
 22494 00010FE0 50                      	push rax
 22495 00010FE1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22496 00010FE5 50                      	push rax
 22497 00010FE6 6A01                    	push 1
 22498 00010FE8 488B0425[88000000]      	mov rax, qword [free_var_17]
 22499                                  	assert_closure(rax)
    42 00010FF0 803805              <1>  cmp byte [%1], %2
    43 00010FF3 0F85C9260000        <1>  jne L_error_incorrect_type
 22500 00010FF9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22501 00010FFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22502 00010FFF 50                      	push rax
 22503 00011000 6A02                    	push 2
 22504 00011002 488B0425[80040000]      	mov rax, qword [free_var_144]
 22505                                  .L_applic_TC_4078:
 22506 0001100A 803805                  	cmp byte [rax], T_closure
 22507 0001100D 0F85701E0000            	jne L_code_ptr_error
 22508 00011013 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22509 00011017 53                      	push rbx
 22510 00011018 FF7508                  	push qword [rbp + 8]
 22511 0001101B FF7500                  	push qword [rbp]
 22512 0001101E 488B4D18                	mov rcx, [rbp + 3 * 8]
 22513 00011022 488B542418              	mov rdx, [rsp + 3 * 8]
 22514 00011027 488D7204                	lea rsi, [rdx + 4]
 22515 0001102B 4C8D4EFF                	lea r9, [rsi - 1]
 22516 0001102F 488D7903                	lea rdi, [rcx + 3]
 22517 00011033 4D31C0                  	xor r8, r8
 22518                                  .L_tc_recycle_frame_loop_4078:
 22519 00011036 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22520 0001103A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22521 0001103F 49FFC9                  	dec r9
 22522 00011042 4D31C0                  	xor r8, r8
 22523 00011045 48FFCF                  	dec rdi
 22524 00011048 48FFCE                  	dec rsi
 22525 0001104B 4883FE00                	cmp rsi, 0
 22526 0001104F 75E5                    	jne .L_tc_recycle_frame_loop_4078
 22527                                  .L_tc_recycle_frame_done_4078:
 22528                                  ;this pop rbp in sot to the right place
 22529 00011051 4989C9                  	mov r9, rcx
 22530 00011054 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22531 0001105C 4C01CC                  	add rsp, r9
 22532 0001105F 5D                      	pop rbp
 22533 00011060 488B4D00                	mov rcx, qword [rbp]
 22534 00011064 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22535 00011068 FFE3                    	jmp rbx
 22536                                  
 22537 0001106A EB0A                            	jmp .L_if_end_481f
 22538                                  
 22539                                          	.L_if_else_481f:
 22540 0001106C 48B8-                   	mov rax,L_constants + 2
 22540 0001106E [0200000000000000] 
 22541                                  
 22542                                          	.L_if_end_481f:
 22543                                  
 22544 00011076 E929030000                      	jmp .L_if_end_4818
 22545                                  
 22546                                          	.L_if_else_4818:
 22547 0001107B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22548 0001107F 50                      	push rax
 22549 00011080 6A01                    	push 1
 22550 00011082 488B0425[30000000]      	mov rax, qword [free_var_6]
 22551                                  	assert_closure(rax)
    42 0001108A 803805              <1>  cmp byte [%1], %2
    43 0001108D 0F852F260000        <1>  jne L_error_incorrect_type
 22552 00011093 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22553 00011096 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22554                                  
 22555 00011099 483D[02000000]                  	cmp rax, sob_boolean_false
 22556                                  
 22557 0001109F 0F848B000000                    	je .L_if_else_481d
 22558 000110A5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22559 000110A9 50                      	push rax
 22560 000110AA 6A01                    	push 1
 22561 000110AC 488B0425[30000000]      	mov rax, qword [free_var_6]
 22562                                  	assert_closure(rax)
    42 000110B4 803805              <1>  cmp byte [%1], %2
    43 000110B7 0F8505260000        <1>  jne L_error_incorrect_type
 22563 000110BD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22564 000110C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22565                                  
 22566 000110C3 483D[02000000]                  	cmp rax, sob_boolean_false
 22567                                  
 22568 000110C9 7459                            	je .L_if_else_481e
 22569 000110CB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22570 000110CF 50                      	push rax
 22571 000110D0 6A01                    	push 1
 22572 000110D2 488B0425[98000000]      	mov rax, qword [free_var_19]
 22573                                  	assert_closure(rax)
    42 000110DA 803805              <1>  cmp byte [%1], %2
    43 000110DD 0F85DF250000        <1>  jne L_error_incorrect_type
 22574 000110E3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22575 000110E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22576 000110E9 50                      	push rax
 22577 000110EA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22578 000110EE 50                      	push rax
 22579 000110EF 6A01                    	push 1
 22580 000110F1 488B0425[98000000]      	mov rax, qword [free_var_19]
 22581                                  	assert_closure(rax)
    42 000110F9 803805              <1>  cmp byte [%1], %2
    43 000110FC 0F85C0250000        <1>  jne L_error_incorrect_type
 22582 00011102 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22583 00011105 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22584 00011108 50                      	push rax
 22585 00011109 6A02                    	push 2
 22586 0001110B 488B0425[50030000]      	mov rax, qword [free_var_106]
 22587                                  	assert_closure(rax)
    42 00011113 803805              <1>  cmp byte [%1], %2
    43 00011116 0F85A6250000        <1>  jne L_error_incorrect_type
 22588 0001111C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22589 0001111F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22590                                  
 22591 00011122 EB0A                            	jmp .L_if_end_481e
 22592                                  
 22593                                          	.L_if_else_481e:
 22594 00011124 48B8-                   	mov rax,L_constants + 2
 22594 00011126 [0200000000000000] 
 22595                                  
 22596                                          	.L_if_end_481e:
 22597                                  
 22598 0001112E EB0A                            	jmp .L_if_end_481d
 22599                                  
 22600                                          	.L_if_else_481d:
 22601 00011130 48B8-                   	mov rax,L_constants + 2
 22601 00011132 [0200000000000000] 
 22602                                  
 22603                                          	.L_if_end_481d:
 22604                                  
 22605 0001113A 483D[02000000]                  	cmp rax, sob_boolean_false
 22606                                  
 22607 00011140 0F84AD000000                    	je .L_if_else_4819
 22608 00011146 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22609 0001114A 50                      	push rax
 22610 0001114B 6A01                    	push 1
 22611 0001114D 488B0425[48040000]      	mov rax, qword [free_var_137]
 22612                                  	assert_closure(rax)
    42 00011155 803805              <1>  cmp byte [%1], %2
    43 00011158 0F8564250000        <1>  jne L_error_incorrect_type
 22613 0001115E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22614 00011161 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22615 00011164 50                      	push rax
 22616 00011165 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22617 00011169 50                      	push rax
 22618 0001116A 6A01                    	push 1
 22619 0001116C 488B0425[48040000]      	mov rax, qword [free_var_137]
 22620                                  	assert_closure(rax)
    42 00011174 803805              <1>  cmp byte [%1], %2
    43 00011177 0F8545250000        <1>  jne L_error_incorrect_type
 22621 0001117D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22622 00011180 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22623 00011183 50                      	push rax
 22624 00011184 6A02                    	push 2
 22625 00011186 488B0425[80040000]      	mov rax, qword [free_var_144]
 22626                                  .L_applic_TC_4077:
 22627 0001118E 803805                  	cmp byte [rax], T_closure
 22628 00011191 0F85EC1C0000            	jne L_code_ptr_error
 22629 00011197 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22630 0001119B 53                      	push rbx
 22631 0001119C FF7508                  	push qword [rbp + 8]
 22632 0001119F FF7500                  	push qword [rbp]
 22633 000111A2 488B4D18                	mov rcx, [rbp + 3 * 8]
 22634 000111A6 488B542418              	mov rdx, [rsp + 3 * 8]
 22635 000111AB 488D7204                	lea rsi, [rdx + 4]
 22636 000111AF 4C8D4EFF                	lea r9, [rsi - 1]
 22637 000111B3 488D7903                	lea rdi, [rcx + 3]
 22638 000111B7 4D31C0                  	xor r8, r8
 22639                                  .L_tc_recycle_frame_loop_4077:
 22640 000111BA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22641 000111BE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22642 000111C3 49FFC9                  	dec r9
 22643 000111C6 4D31C0                  	xor r8, r8
 22644 000111C9 48FFCF                  	dec rdi
 22645 000111CC 48FFCE                  	dec rsi
 22646 000111CF 4883FE00                	cmp rsi, 0
 22647 000111D3 75E5                    	jne .L_tc_recycle_frame_loop_4077
 22648                                  .L_tc_recycle_frame_done_4077:
 22649                                  ;this pop rbp in sot to the right place
 22650 000111D5 4989C9                  	mov r9, rcx
 22651 000111D8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22652 000111E0 4C01CC                  	add rsp, r9
 22653 000111E3 5D                      	pop rbp
 22654 000111E4 488B4D00                	mov rcx, qword [rbp]
 22655 000111E8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22656 000111EC FFE3                    	jmp rbx
 22657                                  
 22658 000111EE E9B1010000                      	jmp .L_if_end_4819
 22659                                  
 22660                                          	.L_if_else_4819:
 22661 000111F3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22662 000111F7 50                      	push rax
 22663 000111F8 6A01                    	push 1
 22664 000111FA 488B0425[20000000]      	mov rax, qword [free_var_4]
 22665                                  	assert_closure(rax)
    42 00011202 803805              <1>  cmp byte [%1], %2
    43 00011205 0F85B7240000        <1>  jne L_error_incorrect_type
 22666 0001120B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22667 0001120E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22668                                  
 22669 00011211 483D[02000000]                  	cmp rax, sob_boolean_false
 22670                                  
 22671 00011217 0F848B000000                    	je .L_if_else_481b
 22672 0001121D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22673 00011221 50                      	push rax
 22674 00011222 6A01                    	push 1
 22675 00011224 488B0425[20000000]      	mov rax, qword [free_var_4]
 22676                                  	assert_closure(rax)
    42 0001122C 803805              <1>  cmp byte [%1], %2
    43 0001122F 0F858D240000        <1>  jne L_error_incorrect_type
 22677 00011235 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22678 00011238 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22679                                  
 22680 0001123B 483D[02000000]                  	cmp rax, sob_boolean_false
 22681                                  
 22682 00011241 7459                            	je .L_if_else_481c
 22683 00011243 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22684 00011247 50                      	push rax
 22685 00011248 6A01                    	push 1
 22686 0001124A 488B0425[90000000]      	mov rax, qword [free_var_18]
 22687                                  	assert_closure(rax)
    42 00011252 803805              <1>  cmp byte [%1], %2
    43 00011255 0F8567240000        <1>  jne L_error_incorrect_type
 22688 0001125B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22689 0001125E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22690 00011261 50                      	push rax
 22691 00011262 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22692 00011266 50                      	push rax
 22693 00011267 6A01                    	push 1
 22694 00011269 488B0425[90000000]      	mov rax, qword [free_var_18]
 22695                                  	assert_closure(rax)
    42 00011271 803805              <1>  cmp byte [%1], %2
    43 00011274 0F8548240000        <1>  jne L_error_incorrect_type
 22696 0001127A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22697 0001127D FF5009                  	call SOB_CLOSURE_CODE(rax)
 22698 00011280 50                      	push rax
 22699 00011281 6A02                    	push 2
 22700 00011283 488B0425[50030000]      	mov rax, qword [free_var_106]
 22701                                  	assert_closure(rax)
    42 0001128B 803805              <1>  cmp byte [%1], %2
    43 0001128E 0F852E240000        <1>  jne L_error_incorrect_type
 22702 00011294 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22703 00011297 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22704                                  
 22705 0001129A EB0A                            	jmp .L_if_end_481c
 22706                                  
 22707                                          	.L_if_else_481c:
 22708 0001129C 48B8-                   	mov rax,L_constants + 2
 22708 0001129E [0200000000000000] 
 22709                                  
 22710                                          	.L_if_end_481c:
 22711                                  
 22712 000112A6 EB0A                            	jmp .L_if_end_481b
 22713                                  
 22714                                          	.L_if_else_481b:
 22715 000112A8 48B8-                   	mov rax,L_constants + 2
 22715 000112AA [0200000000000000] 
 22716                                  
 22717                                          	.L_if_end_481b:
 22718                                  
 22719 000112B2 483D[02000000]                  	cmp rax, sob_boolean_false
 22720                                  
 22721 000112B8 7476                            	je .L_if_else_481a
 22722 000112BA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22723 000112BE 50                      	push rax
 22724 000112BF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22725 000112C3 50                      	push rax
 22726 000112C4 6A02                    	push 2
 22727 000112C6 488B0425[F0030000]      	mov rax, qword [free_var_126]
 22728                                  .L_applic_TC_4076:
 22729 000112CE 803805                  	cmp byte [rax], T_closure
 22730 000112D1 0F85AC1B0000            	jne L_code_ptr_error
 22731 000112D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22732 000112DB 53                      	push rbx
 22733 000112DC FF7508                  	push qword [rbp + 8]
 22734 000112DF FF7500                  	push qword [rbp]
 22735 000112E2 488B4D18                	mov rcx, [rbp + 3 * 8]
 22736 000112E6 488B542418              	mov rdx, [rsp + 3 * 8]
 22737 000112EB 488D7204                	lea rsi, [rdx + 4]
 22738 000112EF 4C8D4EFF                	lea r9, [rsi - 1]
 22739 000112F3 488D7903                	lea rdi, [rcx + 3]
 22740 000112F7 4D31C0                  	xor r8, r8
 22741                                  .L_tc_recycle_frame_loop_4076:
 22742 000112FA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22743 000112FE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22744 00011303 49FFC9                  	dec r9
 22745 00011306 4D31C0                  	xor r8, r8
 22746 00011309 48FFCF                  	dec rdi
 22747 0001130C 48FFCE                  	dec rsi
 22748 0001130F 4883FE00                	cmp rsi, 0
 22749 00011313 75E5                    	jne .L_tc_recycle_frame_loop_4076
 22750                                  .L_tc_recycle_frame_done_4076:
 22751                                  ;this pop rbp in sot to the right place
 22752 00011315 4989C9                  	mov r9, rcx
 22753 00011318 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22754 00011320 4C01CC                  	add rsp, r9
 22755 00011323 5D                      	pop rbp
 22756 00011324 488B4D00                	mov rcx, qword [rbp]
 22757 00011328 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22758 0001132C FFE3                    	jmp rbx
 22759                                  
 22760 0001132E EB74                            	jmp .L_if_end_481a
 22761                                  
 22762                                          	.L_if_else_481a:
 22763 00011330 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22764 00011334 50                      	push rax
 22765 00011335 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22766 00011339 50                      	push rax
 22767 0001133A 6A02                    	push 2
 22768 0001133C 488B0425[B8010000]      	mov rax, qword [free_var_55]
 22769                                  .L_applic_TC_4075:
 22770 00011344 803805                  	cmp byte [rax], T_closure
 22771 00011347 0F85361B0000            	jne L_code_ptr_error
 22772 0001134D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22773 00011351 53                      	push rbx
 22774 00011352 FF7508                  	push qword [rbp + 8]
 22775 00011355 FF7500                  	push qword [rbp]
 22776 00011358 488B4D18                	mov rcx, [rbp + 3 * 8]
 22777 0001135C 488B542418              	mov rdx, [rsp + 3 * 8]
 22778 00011361 488D7204                	lea rsi, [rdx + 4]
 22779 00011365 4C8D4EFF                	lea r9, [rsi - 1]
 22780 00011369 488D7903                	lea rdi, [rcx + 3]
 22781 0001136D 4D31C0                  	xor r8, r8
 22782                                  .L_tc_recycle_frame_loop_4075:
 22783 00011370 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22784 00011374 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22785 00011379 49FFC9                  	dec r9
 22786 0001137C 4D31C0                  	xor r8, r8
 22787 0001137F 48FFCF                  	dec rdi
 22788 00011382 48FFCE                  	dec rsi
 22789 00011385 4883FE00                	cmp rsi, 0
 22790 00011389 75E5                    	jne .L_tc_recycle_frame_loop_4075
 22791                                  .L_tc_recycle_frame_done_4075:
 22792                                  ;this pop rbp in sot to the right place
 22793 0001138B 4989C9                  	mov r9, rcx
 22794 0001138E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22795 00011396 4C01CC                  	add rsp, r9
 22796 00011399 5D                      	pop rbp
 22797 0001139A 488B4D00                	mov rcx, qword [rbp]
 22798 0001139E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22799 000113A2 FFE3                    	jmp rbx
 22800                                  
 22801                                          	.L_if_end_481a:
 22802                                  
 22803                                          	.L_if_end_4819:
 22804                                  
 22805                                          	.L_if_end_4818:
 22806 000113A4 C9                      	leave
 22807 000113A5 C22000                  	ret 8 * (2 + 2)
 22808                                  .L_lambda_simple_end_37c3:	; new closure is in rax
 22809 000113A8 48890425[80040000]      	mov qword [free_var_144], rax
 22810 000113B0 48B8-                   	mov rax, sob_void
 22810 000113B2 [0000000000000000] 
 22811                                  
 22812 000113BA 4889C7                  	mov rdi, rax
 22813 000113BD E81D0B0000              	call print_sexpr_if_not_void
 22814                                  
 22815 000113C2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22816 000113C7 E8020B0000              	call malloc
 22817 000113CC 50                      	push rax
 22818 000113CD BF00000000              	mov rdi, 8 * 0	; new rib
 22819 000113D2 E8F70A0000              	call malloc
 22820 000113D7 50                      	push rax
 22821 000113D8 BF08000000              	mov rdi, 8 * 1	; extended env
 22822 000113DD E8EC0A0000              	call malloc
 22823 000113E2 488B7D10                	mov rdi, ENV
 22824 000113E6 BE00000000              	mov rsi, 0
 22825 000113EB BA01000000              	mov rdx, 1
 22826                                  .L_lambda_simple_env_loop_37c4:	; ext_env[i + 1] <-- env[i]
 22827 000113F0 4883FE00                	cmp rsi, 0
 22828 000113F4 7410                    	je .L_lambda_simple_env_end_37c4
 22829 000113F6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22830 000113FA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22831 000113FE 48FFC6                  	inc rsi
 22832 00011401 48FFC2                  	inc rdx
 22833 00011404 EBEA                    	jmp .L_lambda_simple_env_loop_37c4
 22834                                  .L_lambda_simple_env_end_37c4:
 22835 00011406 5B                      	pop rbx
 22836 00011407 BE00000000              	mov rsi, 0
 22837                                  .L_lambda_simple_params_loop_37c4:	; copy params
 22838 0001140C 4883FE00                	cmp rsi, 0
 22839 00011410 740E                    	je .L_lambda_simple_params_end_37c4
 22840 00011412 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22841 00011417 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22842 0001141B 48FFC6                  	inc rsi
 22843 0001141E EBEC                    	jmp .L_lambda_simple_params_loop_37c4
 22844                                  .L_lambda_simple_params_end_37c4:
 22845 00011420 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22846 00011423 4889C3                  	mov rbx, rax
 22847 00011426 58                      	pop rax
 22848 00011427 C60005                  	mov byte [rax], T_closure
 22849 0001142A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22850 0001142E 48C74009[3B140100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c4
 22851 00011436 E997010000              	jmp .L_lambda_simple_end_37c4
 22852                                  .L_lambda_simple_code_37c4:	; lambda-simple body
 22853 0001143B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22854 00011441 740B                    	je .L_lambda_simple_arity_check_ok_37c4
 22855 00011443 FF742410                	push qword [rsp + 8 * 2]
 22856 00011447 6A02                    	push 2
 22857 00011449 E9390A0000              	jmp L_error_incorrect_arity_simple
 22858                                  .L_lambda_simple_arity_check_ok_37c4:
 22859 0001144E C8000000                	enter 0, 0
 22860 00011452 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22861 00011456 50                      	push rax
 22862 00011457 6A01                    	push 1
 22863 00011459 488B0425[00000000]      	mov rax, qword [free_var_0]
 22864                                  	assert_closure(rax)
    42 00011461 803805              <1>  cmp byte [%1], %2
    43 00011464 0F8558220000        <1>  jne L_error_incorrect_type
 22865 0001146A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22866 0001146D FF5009                  	call SOB_CLOSURE_CODE(rax)
 22867                                  
 22868 00011470 483D[02000000]                  	cmp rax, sob_boolean_false
 22869                                  
 22870 00011476 740F                            	je .L_if_else_4821
 22871 00011478 48B8-                   	mov rax,L_constants + 2
 22871 0001147A [0200000000000000] 
 22872                                  
 22873 00011482 E947010000                      	jmp .L_if_end_4821
 22874                                  
 22875                                          	.L_if_else_4821:
 22876 00011487 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22877 0001148B 50                      	push rax
 22878 0001148C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22879 00011490 50                      	push rax
 22880 00011491 6A01                    	push 1
 22881 00011493 488B0425[C0010000]      	mov rax, qword [free_var_56]
 22882                                  	assert_closure(rax)
    42 0001149B 803805              <1>  cmp byte [%1], %2
    43 0001149E 0F851E220000        <1>  jne L_error_incorrect_type
 22883 000114A4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22884 000114A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22885 000114AA 50                      	push rax
 22886 000114AB 6A02                    	push 2
 22887 000114AD 488B0425[B8010000]      	mov rax, qword [free_var_55]
 22888                                  	assert_closure(rax)
    42 000114B5 803805              <1>  cmp byte [%1], %2
    43 000114B8 0F8504220000        <1>  jne L_error_incorrect_type
 22889 000114BE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22890 000114C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22891                                  
 22892 000114C4 483D[02000000]                  	cmp rax, sob_boolean_false
 22893                                  
 22894 000114CA 7474                            	je .L_if_else_4822
 22895 000114CC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22896 000114D0 50                      	push rax
 22897 000114D1 6A01                    	push 1
 22898 000114D3 488B0425[80000000]      	mov rax, qword [free_var_16]
 22899                                  .L_applic_TC_407a:
 22900 000114DB 803805                  	cmp byte [rax], T_closure
 22901 000114DE 0F859F190000            	jne L_code_ptr_error
 22902 000114E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22903 000114E8 53                      	push rbx
 22904 000114E9 FF7508                  	push qword [rbp + 8]
 22905 000114EC FF7500                  	push qword [rbp]
 22906 000114EF 488B4D18                	mov rcx, [rbp + 3 * 8]
 22907 000114F3 488B542418              	mov rdx, [rsp + 3 * 8]
 22908 000114F8 488D7204                	lea rsi, [rdx + 4]
 22909 000114FC 4C8D4EFF                	lea r9, [rsi - 1]
 22910 00011500 488D7903                	lea rdi, [rcx + 3]
 22911 00011504 4D31C0                  	xor r8, r8
 22912                                  .L_tc_recycle_frame_loop_407a:
 22913 00011507 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22914 0001150B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22915 00011510 49FFC9                  	dec r9
 22916 00011513 4D31C0                  	xor r8, r8
 22917 00011516 48FFCF                  	dec rdi
 22918 00011519 48FFCE                  	dec rsi
 22919 0001151C 4883FE00                	cmp rsi, 0
 22920 00011520 75E5                    	jne .L_tc_recycle_frame_loop_407a
 22921                                  .L_tc_recycle_frame_done_407a:
 22922                                  ;this pop rbp in sot to the right place
 22923 00011522 4989C9                  	mov r9, rcx
 22924 00011525 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22925 0001152D 4C01CC                  	add rsp, r9
 22926 00011530 5D                      	pop rbp
 22927 00011531 488B4D00                	mov rcx, qword [rbp]
 22928 00011535 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22929 00011539 FFE3                    	jmp rbx
 22930                                  
 22931 0001153B E98E000000                      	jmp .L_if_end_4822
 22932                                  
 22933                                          	.L_if_else_4822:
 22934 00011540 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22935 00011544 50                      	push rax
 22936 00011545 6A01                    	push 1
 22937 00011547 488B0425[88000000]      	mov rax, qword [free_var_17]
 22938                                  	assert_closure(rax)
    42 0001154F 803805              <1>  cmp byte [%1], %2
    43 00011552 0F856A210000        <1>  jne L_error_incorrect_type
 22939 00011558 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22940 0001155B FF5009                  	call SOB_CLOSURE_CODE(rax)
 22941 0001155E 50                      	push rax
 22942 0001155F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22943 00011563 50                      	push rax
 22944 00011564 6A02                    	push 2
 22945 00011566 488B0425[88040000]      	mov rax, qword [free_var_145]
 22946                                  .L_applic_TC_4079:
 22947 0001156E 803805                  	cmp byte [rax], T_closure
 22948 00011571 0F850C190000            	jne L_code_ptr_error
 22949 00011577 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22950 0001157B 53                      	push rbx
 22951 0001157C FF7508                  	push qword [rbp + 8]
 22952 0001157F FF7500                  	push qword [rbp]
 22953 00011582 488B4D18                	mov rcx, [rbp + 3 * 8]
 22954 00011586 488B542418              	mov rdx, [rsp + 3 * 8]
 22955 0001158B 488D7204                	lea rsi, [rdx + 4]
 22956 0001158F 4C8D4EFF                	lea r9, [rsi - 1]
 22957 00011593 488D7903                	lea rdi, [rcx + 3]
 22958 00011597 4D31C0                  	xor r8, r8
 22959                                  .L_tc_recycle_frame_loop_4079:
 22960 0001159A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22961 0001159E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22962 000115A3 49FFC9                  	dec r9
 22963 000115A6 4D31C0                  	xor r8, r8
 22964 000115A9 48FFCF                  	dec rdi
 22965 000115AC 48FFCE                  	dec rsi
 22966 000115AF 4883FE00                	cmp rsi, 0
 22967 000115B3 75E5                    	jne .L_tc_recycle_frame_loop_4079
 22968                                  .L_tc_recycle_frame_done_4079:
 22969                                  ;this pop rbp in sot to the right place
 22970 000115B5 4989C9                  	mov r9, rcx
 22971 000115B8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22972 000115C0 4C01CC                  	add rsp, r9
 22973 000115C3 5D                      	pop rbp
 22974 000115C4 488B4D00                	mov rcx, qword [rbp]
 22975 000115C8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22976 000115CC FFE3                    	jmp rbx
 22977                                  
 22978                                          	.L_if_end_4822:
 22979                                  
 22980                                          	.L_if_end_4821:
 22981 000115CE C9                      	leave
 22982 000115CF C22000                  	ret 8 * (2 + 2)
 22983                                  .L_lambda_simple_end_37c4:	; new closure is in rax
 22984 000115D2 48890425[88040000]      	mov qword [free_var_145], rax
 22985 000115DA 48B8-                   	mov rax, sob_void
 22985 000115DC [0000000000000000] 
 22986                                  
 22987 000115E4 4889C7                  	mov rdi, rax
 22988 000115E7 E8F3080000              	call print_sexpr_if_not_void
 22989                                  
 22990 000115EC 48B8-                   	mov rax,L_constants + 23
 22990 000115EE [1700000000000000] 
 22991 000115F6 50                      	push rax
 22992 000115F7 48B8-                   	mov rax,L_constants + 23
 22992 000115F9 [1700000000000000] 
 22993 00011601 50                      	push rax
 22994 00011602 48B8-                   	mov rax,L_constants + 23
 22994 00011604 [1700000000000000] 
 22995 0001160C 50                      	push rax
 22996 0001160D 48B8-                   	mov rax,L_constants + 23
 22996 0001160F [1700000000000000] 
 22997 00011617 50                      	push rax
 22998 00011618 6A04                    	push 4
 22999 0001161A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23000 0001161F E8AA080000              	call malloc
 23001 00011624 50                      	push rax
 23002 00011625 BF00000000              	mov rdi, 8 * 0	; new rib
 23003 0001162A E89F080000              	call malloc
 23004 0001162F 50                      	push rax
 23005 00011630 BF08000000              	mov rdi, 8 * 1	; extended env
 23006 00011635 E894080000              	call malloc
 23007 0001163A 488B7D10                	mov rdi, ENV
 23008 0001163E BE00000000              	mov rsi, 0
 23009 00011643 BA01000000              	mov rdx, 1
 23010                                  .L_lambda_simple_env_loop_37c5:	; ext_env[i + 1] <-- env[i]
 23011 00011648 4883FE00                	cmp rsi, 0
 23012 0001164C 7410                    	je .L_lambda_simple_env_end_37c5
 23013 0001164E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23014 00011652 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23015 00011656 48FFC6                  	inc rsi
 23016 00011659 48FFC2                  	inc rdx
 23017 0001165C EBEA                    	jmp .L_lambda_simple_env_loop_37c5
 23018                                  .L_lambda_simple_env_end_37c5:
 23019 0001165E 5B                      	pop rbx
 23020 0001165F BE00000000              	mov rsi, 0
 23021                                  .L_lambda_simple_params_loop_37c5:	; copy params
 23022 00011664 4883FE00                	cmp rsi, 0
 23023 00011668 740E                    	je .L_lambda_simple_params_end_37c5
 23024 0001166A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23025 0001166F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23026 00011673 48FFC6                  	inc rsi
 23027 00011676 EBEC                    	jmp .L_lambda_simple_params_loop_37c5
 23028                                  .L_lambda_simple_params_end_37c5:
 23029 00011678 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23030 0001167B 4889C3                  	mov rbx, rax
 23031 0001167E 58                      	pop rax
 23032 0001167F C60005                  	mov byte [rax], T_closure
 23033 00011682 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23034 00011686 48C74009[93160100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c5
 23035 0001168E E90F070000              	jmp .L_lambda_simple_end_37c5
 23036                                  .L_lambda_simple_code_37c5:	; lambda-simple body
 23037 00011693 48837C241004            	cmp qword [rsp + 8 * 2], 4
 23038 00011699 740B                    	je .L_lambda_simple_arity_check_ok_37c5
 23039 0001169B FF742410                	push qword [rsp + 8 * 2]
 23040 0001169F 6A04                    	push 4
 23041 000116A1 E9E1070000              	jmp L_error_incorrect_arity_simple
 23042                                  .L_lambda_simple_arity_check_ok_37c5:
 23043 000116A6 C8000000                	enter 0, 0
 23044 000116AA BF08000000              	mov rdi, 8
 23045 000116AF E81A080000              	call malloc
 23046 000116B4 488B5D20                	mov rbx, PARAM(0)
 23047 000116B8 488918                  	mov qword [rax], rbx
 23048 000116BB 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 23049                                  
 23050 000116BF 48B8-                            	mov rax, sob_void
 23050 000116C1 [0000000000000000] 
 23051                                  
 23052 000116C9 BF08000000              	mov rdi, 8
 23053 000116CE E8FB070000              	call malloc
 23054 000116D3 488B5D28                	mov rbx, PARAM(1)
 23055 000116D7 488918                  	mov qword [rax], rbx
 23056 000116DA 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
 23057                                  
 23058 000116DE 48B8-                            	mov rax, sob_void
 23058 000116E0 [0000000000000000] 
 23059                                  
 23060 000116E8 BF08000000              	mov rdi, 8
 23061 000116ED E8DC070000              	call malloc
 23062 000116F2 488B5D30                	mov rbx, PARAM(2)
 23063 000116F6 488918                  	mov qword [rax], rbx
 23064 000116F9 48894530                	mov qword [rbp + 8 * (4 + 2)], rax
 23065                                  
 23066 000116FD 48B8-                            	mov rax, sob_void
 23066 000116FF [0000000000000000] 
 23067                                  
 23068 00011707 BF08000000              	mov rdi, 8
 23069 0001170C E8BD070000              	call malloc
 23070 00011711 488B5D38                	mov rbx, PARAM(3)
 23071 00011715 488918                  	mov qword [rax], rbx
 23072 00011718 48894538                	mov qword [rbp + 8 * (4 + 3)], rax
 23073                                  
 23074 0001171C 48B8-                            	mov rax, sob_void
 23074 0001171E [0000000000000000] 
 23075                                  
 23076 00011726 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23077 0001172B E89E070000              	call malloc
 23078 00011730 50                      	push rax
 23079 00011731 BF20000000              	mov rdi, 8 * 4	; new rib
 23080 00011736 E893070000              	call malloc
 23081 0001173B 50                      	push rax
 23082 0001173C BF10000000              	mov rdi, 8 * 2	; extended env
 23083 00011741 E888070000              	call malloc
 23084 00011746 488B7D10                	mov rdi, ENV
 23085 0001174A BE00000000              	mov rsi, 0
 23086 0001174F BA01000000              	mov rdx, 1
 23087                                  .L_lambda_simple_env_loop_37c6:	; ext_env[i + 1] <-- env[i]
 23088 00011754 4883FE01                	cmp rsi, 1
 23089 00011758 7410                    	je .L_lambda_simple_env_end_37c6
 23090 0001175A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23091 0001175E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23092 00011762 48FFC6                  	inc rsi
 23093 00011765 48FFC2                  	inc rdx
 23094 00011768 EBEA                    	jmp .L_lambda_simple_env_loop_37c6
 23095                                  .L_lambda_simple_env_end_37c6:
 23096 0001176A 5B                      	pop rbx
 23097 0001176B BE00000000              	mov rsi, 0
 23098                                  .L_lambda_simple_params_loop_37c6:	; copy params
 23099 00011770 4883FE04                	cmp rsi, 4
 23100 00011774 740E                    	je .L_lambda_simple_params_end_37c6
 23101 00011776 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23102 0001177B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23103 0001177F 48FFC6                  	inc rsi
 23104 00011782 EBEC                    	jmp .L_lambda_simple_params_loop_37c6
 23105                                  .L_lambda_simple_params_end_37c6:
 23106 00011784 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23107 00011787 4889C3                  	mov rbx, rax
 23108 0001178A 58                      	pop rax
 23109 0001178B C60005                  	mov byte [rax], T_closure
 23110 0001178E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23111 00011792 48C74009[9F170100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c6
 23112 0001179A E9EA000000              	jmp .L_lambda_simple_end_37c6
 23113                                  .L_lambda_simple_code_37c6:	; lambda-simple body
 23114 0001179F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23115 000117A5 740B                    	je .L_lambda_simple_arity_check_ok_37c6
 23116 000117A7 FF742410                	push qword [rsp + 8 * 2]
 23117 000117AB 6A01                    	push 1
 23118 000117AD E9D5060000              	jmp L_error_incorrect_arity_simple
 23119                                  .L_lambda_simple_arity_check_ok_37c6:
 23120 000117B2 C8000000                	enter 0, 0
 23121 000117B6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23122 000117BA 50                      	push rax
 23123 000117BB 6A01                    	push 1
 23124 000117BD 488B0425[D8000000]      	mov rax, qword [free_var_27]
 23125                                  	assert_closure(rax)
    42 000117C5 803805              <1>  cmp byte [%1], %2
    43 000117C8 0F85F41E0000        <1>  jne L_error_incorrect_type
 23126 000117CE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23127 000117D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23128 000117D4 483D[02000000]          	cmp rax, sob_boolean_false
 23129 000117DA 0F85A5000000            	jne .L_or_end_0430
 23130 000117E0 48B8-                   	mov rax,L_constants + 543
 23130 000117E2 [1F02000000000000] 
 23131 000117EA 50                      	push rax
 23132 000117EB 48B8-                   	mov rax,L_constants + 128
 23132 000117ED [8000000000000000] 
 23133 000117F5 50                      	push rax
 23134 000117F6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23135 000117FA 50                      	push rax
 23136 000117FB 6A02                    	push 2
 23137 000117FD 488B0425[10030000]      	mov rax, qword [free_var_98]
 23138                                  	assert_closure(rax)
    42 00011805 803805              <1>  cmp byte [%1], %2
    43 00011808 0F85B41E0000        <1>  jne L_error_incorrect_type
 23139 0001180E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23140 00011811 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23141 00011814 50                      	push rax
 23142 00011815 6A02                    	push 2
 23143 00011817 488B4510                	mov rax, qword [rbp + 8 * 2]
 23144                                  
 23145 0001181B 488B00                                            	mov rax, qword[rax + 8 * 0]
 23146                                  
 23147 0001181E 488B4008                                          	mov rax, qword[rax + 8 * 1]
 23148 00011822 488B00                  	mov rax, qword [rax]
 23149                                  .L_applic_TC_407b:
 23150 00011825 803805                  	cmp byte [rax], T_closure
 23151 00011828 0F8555160000            	jne L_code_ptr_error
 23152 0001182E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23153 00011832 53                      	push rbx
 23154 00011833 FF7508                  	push qword [rbp + 8]
 23155 00011836 FF7500                  	push qword [rbp]
 23156 00011839 488B4D18                	mov rcx, [rbp + 3 * 8]
 23157 0001183D 488B542418              	mov rdx, [rsp + 3 * 8]
 23158 00011842 488D7204                	lea rsi, [rdx + 4]
 23159 00011846 4C8D4EFF                	lea r9, [rsi - 1]
 23160 0001184A 488D7903                	lea rdi, [rcx + 3]
 23161 0001184E 4D31C0                  	xor r8, r8
 23162                                  .L_tc_recycle_frame_loop_407b:
 23163 00011851 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 23164 00011855 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 23165 0001185A 49FFC9                  	dec r9
 23166 0001185D 4D31C0                  	xor r8, r8
 23167 00011860 48FFCF                  	dec rdi
 23168 00011863 48FFCE                  	dec rsi
 23169 00011866 4883FE00                	cmp rsi, 0
 23170 0001186A 75E5                    	jne .L_tc_recycle_frame_loop_407b
 23171                                  .L_tc_recycle_frame_done_407b:
 23172                                  ;this pop rbp in sot to the right place
 23173 0001186C 4989C9                  	mov r9, rcx
 23174 0001186F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 23175 00011877 4C01CC                  	add rsp, r9
 23176 0001187A 5D                      	pop rbp
 23177 0001187B 488B4D00                	mov rcx, qword [rbp]
 23178 0001187F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23179 00011883 FFE3                    	jmp rbx
 23180                                  .L_or_end_0430:
 23181 00011885 C9                      	leave
 23182 00011886 C21800                  	ret 8 * (2 + 1)
 23183                                  .L_lambda_simple_end_37c6:	; new closure is in rax
 23184 00011889 50                      	push rax
 23185 0001188A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23186 0001188E 8F00                    	pop qword [rax]
 23187 00011890 48B8-                   	mov rax, sob_void
 23187 00011892 [0000000000000000] 
 23188                                  
 23189 0001189A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23190 0001189F E82A060000              	call malloc
 23191 000118A4 50                      	push rax
 23192 000118A5 BF20000000              	mov rdi, 8 * 4	; new rib
 23193 000118AA E81F060000              	call malloc
 23194 000118AF 50                      	push rax
 23195 000118B0 BF10000000              	mov rdi, 8 * 2	; extended env
 23196 000118B5 E814060000              	call malloc
 23197 000118BA 488B7D10                	mov rdi, ENV
 23198 000118BE BE00000000              	mov rsi, 0
 23199 000118C3 BA01000000              	mov rdx, 1
 23200                                  .L_lambda_simple_env_loop_37c7:	; ext_env[i + 1] <-- env[i]
 23201 000118C8 4883FE01                	cmp rsi, 1
 23202 000118CC 7410                    	je .L_lambda_simple_env_end_37c7
 23203 000118CE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23204 000118D2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23205 000118D6 48FFC6                  	inc rsi
 23206 000118D9 48FFC2                  	inc rdx
 23207 000118DC EBEA                    	jmp .L_lambda_simple_env_loop_37c7
 23208                                  .L_lambda_simple_env_end_37c7:
 23209 000118DE 5B                      	pop rbx
 23210 000118DF BE00000000              	mov rsi, 0
 23211                                  .L_lambda_simple_params_loop_37c7:	; copy params
 23212 000118E4 4883FE04                	cmp rsi, 4
 23213 000118E8 740E                    	je .L_lambda_simple_params_end_37c7
 23214 000118EA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23215 000118EF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23216 000118F3 48FFC6                  	inc rsi
 23217 000118F6 EBEC                    	jmp .L_lambda_simple_params_loop_37c7
 23218                                  .L_lambda_simple_params_end_37c7:
 23219 000118F8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23220 000118FB 4889C3                  	mov rbx, rax
 23221 000118FE 58                      	pop rax
 23222 000118FF C60005                  	mov byte [rax], T_closure
 23223 00011902 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23224 00011906 48C74009[13190100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c7
 23225 0001190E E938010000              	jmp .L_lambda_simple_end_37c7
 23226                                  .L_lambda_simple_code_37c7:	; lambda-simple body
 23227 00011913 48837C241002            	cmp qword [rsp + 8 * 2], 2
 23228 00011919 740B                    	je .L_lambda_simple_arity_check_ok_37c7
 23229 0001191B FF742410                	push qword [rsp + 8 * 2]
 23230 0001191F 6A02                    	push 2
 23231 00011921 E961050000              	jmp L_error_incorrect_arity_simple
 23232                                  .L_lambda_simple_arity_check_ok_37c7:
 23233 00011926 C8000000                	enter 0, 0
 23234 0001192A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23235 0001192E 50                      	push rax
 23236 0001192F 6A01                    	push 1
 23237 00011931 488B0425[58040000]      	mov rax, qword [free_var_139]
 23238                                  	assert_closure(rax)
    42 00011939 803805              <1>  cmp byte [%1], %2
    43 0001193C 0F85801D0000        <1>  jne L_error_incorrect_type
 23239 00011942 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23240 00011945 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23241                                  
 23242 00011948 483D[02000000]                  	cmp rax, sob_boolean_false
 23243                                  
 23244 0001194E 0F84E9000000                    	je .L_if_else_4823
 23245 00011954 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23246 00011958 50                      	push rax
 23247 00011959 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23248 0001195D 50                      	push rax
 23249 0001195E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23250 00011962 50                      	push rax
 23251 00011963 6A03                    	push 3
 23252 00011965 488B0425[08030000]      	mov rax, qword [free_var_97]
 23253                                  	assert_closure(rax)
    42 0001196D 803805              <1>  cmp byte [%1], %2
    43 00011970 0F854C1D0000        <1>  jne L_error_incorrect_type
 23254 00011976 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23255 00011979 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23256 0001197C 50                      	push rax
 23257 0001197D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23258 00011981 50                      	push rax
 23259 00011982 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23260 00011986 50                      	push rax
 23261 00011987 6A02                    	push 2
 23262 00011989 488B0425[08030000]      	mov rax, qword [free_var_97]
 23263                                  	assert_closure(rax)
    42 00011991 803805              <1>  cmp byte [%1], %2
    43 00011994 0F85281D0000        <1>  jne L_error_incorrect_type
 23264 0001199A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23265 0001199D FF5009                  	call SOB_CLOSURE_CODE(rax)
 23266 000119A0 50                      	push rax
 23267 000119A1 48B8-                   	mov rax,L_constants + 128
 23267 000119A3 [8000000000000000] 
 23268 000119AB 50                      	push rax
 23269 000119AC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23270 000119B0 50                      	push rax
 23271 000119B1 6A02                    	push 2
 23272 000119B3 488B0425[10030000]      	mov rax, qword [free_var_98]
 23273                                  	assert_closure(rax)
    42 000119BB 803805              <1>  cmp byte [%1], %2
    43 000119BE 0F85FE1C0000        <1>  jne L_error_incorrect_type
 23274 000119C4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23275 000119C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23276 000119CA 50                      	push rax
 23277 000119CB 6A03                    	push 3
 23278 000119CD 488B4510                	mov rax, qword [rbp + 8 * 2]
 23279                                  
 23280 000119D1 488B00                                            	mov rax, qword[rax + 8 * 0]
 23281                                  
 23282 000119D4 488B4010                                          	mov rax, qword[rax + 8 * 2]
 23283 000119D8 488B00                  	mov rax, qword [rax]
 23284                                  .L_applic_TC_407c:
 23285 000119DB 803805                  	cmp byte [rax], T_closure
 23286 000119DE 0F859F140000            	jne L_code_ptr_error
 23287 000119E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23288 000119E8 53                      	push rbx
 23289 000119E9 FF7508                  	push qword [rbp + 8]
 23290 000119EC FF7500                  	push qword [rbp]
 23291 000119EF 488B4D18                	mov rcx, [rbp + 3 * 8]
 23292 000119F3 488B542418              	mov rdx, [rsp + 3 * 8]
 23293 000119F8 488D7204                	lea rsi, [rdx + 4]
 23294 000119FC 4C8D4EFF                	lea r9, [rsi - 1]
 23295 00011A00 488D7903                	lea rdi, [rcx + 3]
 23296 00011A04 4D31C0                  	xor r8, r8
 23297                                  .L_tc_recycle_frame_loop_407c:
 23298 00011A07 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 23299 00011A0B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 23300 00011A10 49FFC9                  	dec r9
 23301 00011A13 4D31C0                  	xor r8, r8
 23302 00011A16 48FFCF                  	dec rdi
 23303 00011A19 48FFCE                  	dec rsi
 23304 00011A1C 4883FE00                	cmp rsi, 0
 23305 00011A20 75E5                    	jne .L_tc_recycle_frame_loop_407c
 23306                                  .L_tc_recycle_frame_done_407c:
 23307                                  ;this pop rbp in sot to the right place
 23308 00011A22 4989C9                  	mov r9, rcx
 23309 00011A25 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 23310 00011A2D 4C01CC                  	add rsp, r9
 23311 00011A30 5D                      	pop rbp
 23312 00011A31 488B4D00                	mov rcx, qword [rbp]
 23313 00011A35 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23314 00011A39 FFE3                    	jmp rbx
 23315                                  
 23316 00011A3B EB0A                            	jmp .L_if_end_4823
 23317                                  
 23318                                          	.L_if_else_4823:
 23319 00011A3D 48B8-                   	mov rax,L_constants + 2
 23319 00011A3F [0200000000000000] 
 23320                                  
 23321                                          	.L_if_end_4823:
 23322 00011A47 C9                      	leave
 23323 00011A48 C22000                  	ret 8 * (2 + 2)
 23324                                  .L_lambda_simple_end_37c7:	; new closure is in rax
 23325 00011A4B 50                      	push rax
 23326 00011A4C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 23327 00011A50 8F00                    	pop qword [rax]
 23328 00011A52 48B8-                   	mov rax, sob_void
 23328 00011A54 [0000000000000000] 
 23329                                  
 23330 00011A5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23331 00011A61 E868040000              	call malloc
 23332 00011A66 50                      	push rax
 23333 00011A67 BF20000000              	mov rdi, 8 * 4	; new rib
 23334 00011A6C E85D040000              	call malloc
 23335 00011A71 50                      	push rax
 23336 00011A72 BF10000000              	mov rdi, 8 * 2	; extended env
 23337 00011A77 E852040000              	call malloc
 23338 00011A7C 488B7D10                	mov rdi, ENV
 23339 00011A80 BE00000000              	mov rsi, 0
 23340 00011A85 BA01000000              	mov rdx, 1
 23341                                  .L_lambda_simple_env_loop_37c8:	; ext_env[i + 1] <-- env[i]
 23342 00011A8A 4883FE01                	cmp rsi, 1
 23343 00011A8E 7410                    	je .L_lambda_simple_env_end_37c8
 23344 00011A90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23345 00011A94 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23346 00011A98 48FFC6                  	inc rsi
 23347 00011A9B 48FFC2                  	inc rdx
 23348 00011A9E EBEA                    	jmp .L_lambda_simple_env_loop_37c8
 23349                                  .L_lambda_simple_env_end_37c8:
 23350 00011AA0 5B                      	pop rbx
 23351 00011AA1 BE00000000              	mov rsi, 0
 23352                                  .L_lambda_simple_params_loop_37c8:	; copy params
 23353 00011AA6 4883FE04                	cmp rsi, 4
 23354 00011AAA 740E                    	je .L_lambda_simple_params_end_37c8
 23355 00011AAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23356 00011AB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23357 00011AB5 48FFC6                  	inc rsi
 23358 00011AB8 EBEC                    	jmp .L_lambda_simple_params_loop_37c8
 23359                                  .L_lambda_simple_params_end_37c8:
 23360 00011ABA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23361 00011ABD 4889C3                  	mov rbx, rax
 23362 00011AC0 58                      	pop rax
 23363 00011AC1 C60005                  	mov byte [rax], T_closure
 23364 00011AC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23365 00011AC8 48C74009[D51A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c8
 23366 00011AD0 E93D010000              	jmp .L_lambda_simple_end_37c8
 23367                                  .L_lambda_simple_code_37c8:	; lambda-simple body
 23368 00011AD5 48837C241003            	cmp qword [rsp + 8 * 2], 3
 23369 00011ADB 740B                    	je .L_lambda_simple_arity_check_ok_37c8
 23370 00011ADD FF742410                	push qword [rsp + 8 * 2]
 23371 00011AE1 6A03                    	push 3
 23372 00011AE3 E99F030000              	jmp L_error_incorrect_arity_simple
 23373                                  .L_lambda_simple_arity_check_ok_37c8:
 23374 00011AE8 C8000000                	enter 0, 0
 23375 00011AEC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23376 00011AF0 50                      	push rax
 23377 00011AF1 6A01                    	push 1
 23378 00011AF3 488B0425[D8000000]      	mov rax, qword [free_var_27]
 23379                                  	assert_closure(rax)
    42 00011AFB 803805              <1>  cmp byte [%1], %2
    43 00011AFE 0F85BE1B0000        <1>  jne L_error_incorrect_type
 23380 00011B04 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23381 00011B07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23382 00011B0A 483D[02000000]          	cmp rax, sob_boolean_false
 23383 00011B10 0F85F8000000            	jne .L_or_end_0431
 23384 00011B16 48B8-                   	mov rax,L_constants + 591
 23384 00011B18 [4F02000000000000] 
 23385 00011B20 50                      	push rax
 23386 00011B21 48B8-                   	mov rax,L_constants + 566
 23386 00011B23 [3602000000000000] 
 23387 00011B2B 50                      	push rax
 23388 00011B2C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23389 00011B30 50                      	push rax
 23390 00011B31 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23391 00011B35 50                      	push rax
 23392 00011B36 6A02                    	push 2
 23393 00011B38 488B0425[18030000]      	mov rax, qword [free_var_99]
 23394                                  	assert_closure(rax)
    42 00011B40 803805              <1>  cmp byte [%1], %2
    43 00011B43 0F85791B0000        <1>  jne L_error_incorrect_type
 23395 00011B49 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23396 00011B4C FF5009                  	call SOB_CLOSURE_CODE(rax)
 23397 00011B4F 50                      	push rax
 23398 00011B50 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23399 00011B54 50                      	push rax
 23400 00011B55 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23401 00011B59 50                      	push rax
 23402 00011B5A 6A02                    	push 2
 23403 00011B5C 488B0425[08030000]      	mov rax, qword [free_var_97]
 23404                                  	assert_closure(rax)
    42 00011B64 803805              <1>  cmp byte [%1], %2
    43 00011B67 0F85551B0000        <1>  jne L_error_incorrect_type
 23405 00011B6D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23406 00011B70 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23407 00011B73 50                      	push rax
 23408 00011B74 48B8-                   	mov rax,L_constants + 128
 23408 00011B76 [8000000000000000] 
 23409 00011B7E 50                      	push rax
 23410 00011B7F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23411 00011B83 50                      	push rax
 23412 00011B84 6A02                    	push 2
 23413 00011B86 488B0425[10030000]      	mov rax, qword [free_var_98]
 23414                                  	assert_closure(rax)
    42 00011B8E 803805              <1>  cmp byte [%1], %2
    43 00011B91 0F852B1B0000        <1>  jne L_error_incorrect_type
 23415 00011B97 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23416 00011B9A FF5009                  	call SOB_CLOSURE_CODE(rax)
 23417 00011B9D 50                      	push rax
 23418 00011B9E 6A05                    	push 5
 23419 00011BA0 488B4510                	mov rax, qword [rbp + 8 * 2]
 23420                                  
 23421 00011BA4 488B00                                            	mov rax, qword[rax + 8 * 0]
 23422                                  
 23423 00011BA7 488B4018                                          	mov rax, qword[rax + 8 * 3]
 23424 00011BAB 488B00                  	mov rax, qword [rax]
 23425                                  .L_applic_TC_407d:
 23426 00011BAE 803805                  	cmp byte [rax], T_closure
 23427 00011BB1 0F85CC120000            	jne L_code_ptr_error
 23428 00011BB7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23429 00011BBB 53                      	push rbx
 23430 00011BBC FF7508                  	push qword [rbp + 8]
 23431 00011BBF FF7500                  	push qword [rbp]
 23432 00011BC2 488B4D18                	mov rcx, [rbp + 3 * 8]
 23433 00011BC6 488B542418              	mov rdx, [rsp + 3 * 8]
 23434 00011BCB 488D7204                	lea rsi, [rdx + 4]
 23435 00011BCF 4C8D4EFF                	lea r9, [rsi - 1]
 23436 00011BD3 488D7903                	lea rdi, [rcx + 3]
 23437 00011BD7 4D31C0                  	xor r8, r8
 23438                                  .L_tc_recycle_frame_loop_407d:
 23439 00011BDA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 23440 00011BDE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 23441 00011BE3 49FFC9                  	dec r9
 23442 00011BE6 4D31C0                  	xor r8, r8
 23443 00011BE9 48FFCF                  	dec rdi
 23444 00011BEC 48FFCE                  	dec rsi
 23445 00011BEF 4883FE00                	cmp rsi, 0
 23446 00011BF3 75E5                    	jne .L_tc_recycle_frame_loop_407d
 23447                                  .L_tc_recycle_frame_done_407d:
 23448                                  ;this pop rbp in sot to the right place
 23449 00011BF5 4989C9                  	mov r9, rcx
 23450 00011BF8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 23451 00011C00 4C01CC                  	add rsp, r9
 23452 00011C03 5D                      	pop rbp
 23453 00011C04 488B4D00                	mov rcx, qword [rbp]
 23454 00011C08 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23455 00011C0C FFE3                    	jmp rbx
 23456                                  .L_or_end_0431:
 23457 00011C0E C9                      	leave
 23458 00011C0F C22800                  	ret 8 * (2 + 3)
 23459                                  .L_lambda_simple_end_37c8:	; new closure is in rax
 23460 00011C12 50                      	push rax
 23461 00011C13 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 23462 00011C17 8F00                    	pop qword [rax]
 23463 00011C19 48B8-                   	mov rax, sob_void
 23463 00011C1B [0000000000000000] 
 23464                                  
 23465 00011C23 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23466 00011C28 E8A1020000              	call malloc
 23467 00011C2D 50                      	push rax
 23468 00011C2E BF20000000              	mov rdi, 8 * 4	; new rib
 23469 00011C33 E896020000              	call malloc
 23470 00011C38 50                      	push rax
 23471 00011C39 BF10000000              	mov rdi, 8 * 2	; extended env
 23472 00011C3E E88B020000              	call malloc
 23473 00011C43 488B7D10                	mov rdi, ENV
 23474 00011C47 BE00000000              	mov rsi, 0
 23475 00011C4C BA01000000              	mov rdx, 1
 23476                                  .L_lambda_simple_env_loop_37c9:	; ext_env[i + 1] <-- env[i]
 23477 00011C51 4883FE01                	cmp rsi, 1
 23478 00011C55 7410                    	je .L_lambda_simple_env_end_37c9
 23479 00011C57 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23480 00011C5B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23481 00011C5F 48FFC6                  	inc rsi
 23482 00011C62 48FFC2                  	inc rdx
 23483 00011C65 EBEA                    	jmp .L_lambda_simple_env_loop_37c9
 23484                                  .L_lambda_simple_env_end_37c9:
 23485 00011C67 5B                      	pop rbx
 23486 00011C68 BE00000000              	mov rsi, 0
 23487                                  .L_lambda_simple_params_loop_37c9:	; copy params
 23488 00011C6D 4883FE04                	cmp rsi, 4
 23489 00011C71 740E                    	je .L_lambda_simple_params_end_37c9
 23490 00011C73 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23491 00011C78 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23492 00011C7C 48FFC6                  	inc rsi
 23493 00011C7F EBEC                    	jmp .L_lambda_simple_params_loop_37c9
 23494                                  .L_lambda_simple_params_end_37c9:
 23495 00011C81 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23496 00011C84 4889C3                  	mov rbx, rax
 23497 00011C87 58                      	pop rax
 23498 00011C88 C60005                  	mov byte [rax], T_closure
 23499 00011C8B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23500 00011C8F 48C74009[9C1C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_37c9
 23501 00011C97 E9EA000000              	jmp .L_lambda_simple_end_37c9
 23502                                  .L_lambda_simple_code_37c9:	; lambda-simple body
 23503 00011C9C 48837C241005            	cmp qword [rsp + 8 * 2], 5
 23504 00011CA2 740B                    	je .L_lambda_simple_arity_check_ok_37c9
 23505 00011CA4 FF742410                	push qword [rsp + 8 * 2]
 23506 00011CA8 6A05                    	push 5
 23507 00011CAA E9D8010000              	jmp L_error_incorrect_arity_simple
 23508                                  .L_lambda_simple_arity_check_ok_37c9:
 23509 00011CAF C8000000                	enter 0, 0
 23510 00011CB3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23511 00011CB7 50                      	push rax
 23512 00011CB8 6A01                    	push 1
 23513 00011CBA 488B0425[58040000]      	mov rax, qword [free_var_139]
 23514                                  	assert_closure(rax)
    42 00011CC2 803805              <1>  cmp byte [%1], %2
    43 00011CC5 0F85F7190000        <1>  jne L_error_incorrect_type
 23515 00011CCB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23516 00011CCE FF5009                  	call SOB_CLOSURE_CODE(rax)
 23517                                  
 23518 00011CD1 483D[02000000]                  	cmp rax, sob_boolean_false
 23519                                  
 23520 00011CD7 0F849B000000                    	je .L_if_else_4824
 23521 00011CDD 48B8-                   	mov rax,L_constants + 128
 23521 00011CDF [8000000000000000] 
 23522 00011CE7 50                      	push rax
 23523 00011CE8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23524 00011CEC 50                      	push rax
 23525 00011CED 6A02                    	push 2
 23526 00011CEF 488B0425[10030000]      	mov rax, qword [free_var_98]
 23527                                  	assert_closure(rax)
    42 00011CF7 803805              <1>  cmp byte [%1], %2
    43 00011CFA 0F85C2190000        <1>  jne L_error_incorrect_type
 23528 00011D00 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23529 00011D03 FF5009                  	call SOB_CLOSURE_CODE(rax)
 23530 00011D06 50                      	push rax
 23531 00011D07 6A01                    	push 1
 23532 00011D09 488B4510                	mov rax, qword [rbp + 8 * 2]
 23533                                  
 23534 00011D0D 488B00                                            	mov rax, qword[rax + 8 * 0]
 23535                                  
 23536 00011D10 488B00                                            	mov rax, qword[rax + 8 * 0]
 23537 00011D13 488B00                  	mov rax, qword [rax]
 23538                                  .L_applic_TC_407e:
 23539 00011D16 803805                  	cmp byte [rax], T_closure
 23540 00011D19 0F8564110000            	jne L_code_ptr_error
 23541 00011D1F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 23542 00011D23 53                      	push rbx
 23543 00011D24 FF7508                  	push qword [rbp + 8]
 23544 00011D27 FF7500                  	push qword [rbp]
 23545 00011D2A 488B4D18                	mov rcx, [rbp + 3 * 8]
 23546 00011D2E 488B542418              	mov rdx, [rsp + 3 * 8]
 23547 00011D33 488D7204                	lea rsi, [rdx + 4]
 23548 00011D37 4C8D4EFF                	lea r9, [rsi - 1]
 23549 00011D3B 488D7903                	lea rdi, [rcx + 3]
 23550 00011D3F 4D31C0                  	xor r8, r8
 23551                                  .L_tc_recycle_frame_loop_407e:
 23552 00011D42 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 23553 00011D46 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 23554 00011D4B 49FFC9                  	dec r9
 23555 00011D4E 4D31C0                  	xor r8, r8
 23556 00011D51 48FFCF                  	dec rdi
 23557 00011D54 48FFCE                  	dec rsi
 23558 00011D57 4883FE00                	cmp rsi, 0
 23559 00011D5B 75E5                    	jne .L_tc_recycle_frame_loop_407e
 23560                                  .L_tc_recycle_frame_done_407e:
 23561                                  ;this pop rbp in sot to the right place
 23562 00011D5D 4989C9                  	mov r9, rcx
 23563 00011D60 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 23564 00011D68 4C01CC                  	add rsp, r9
 23565 00011D6B 5D                      	pop rbp
 23566 00011D6C 488B4D00                	mov rcx, qword [rbp]
 23567 00011D70 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 23568 00011D74 FFE3                    	jmp rbx
 23569                                  
 23570 00011D76 EB0A                            	jmp .L_if_end_4824
 23571                                  
 23572                                          	.L_if_else_4824:
 23573 00011D78 48B8-                   	mov rax,L_constants + 2
 23573 00011D7A [0200000000000000] 
 23574                                  
 23575                                          	.L_if_end_4824:
 23576 00011D82 C9                      	leave
 23577 00011D83 C23800                  	ret 8 * (2 + 5)
 23578                                  .L_lambda_simple_end_37c9:	; new closure is in rax
 23579 00011D86 50                      	push rax
 23580 00011D87 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 23581 00011D8B 8F00                    	pop qword [rax]
 23582 00011D8D 48B8-                   	mov rax, sob_void
 23582 00011D8F [0000000000000000] 
 23583                                  
 23584 00011D97 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23585 00011D9B 488B00                  	mov rax, qword [rax]
 23586 00011D9E C9                      	leave
 23587 00011D9F C23000                  	ret 8 * (2 + 4)
 23588                                  .L_lambda_simple_end_37c5:	; new closure is in rax
 23589                                  	assert_closure(rax)
    42 00011DA2 803805              <1>  cmp byte [%1], %2
    43 00011DA5 0F8517190000        <1>  jne L_error_incorrect_type
 23590 00011DAB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23591 00011DAE FF5009                  	call SOB_CLOSURE_CODE(rax)
 23592 00011DB1 48890425[68040000]      	mov qword [free_var_141], rax
 23593 00011DB9 48B8-                   	mov rax, sob_void
 23593 00011DBB [0000000000000000] 
 23594                                  
 23595 00011DC3 4889C7                  	mov rdi, rax
 23596 00011DC6 E814010000              	call print_sexpr_if_not_void
 23597                                  
 23598 00011DCB 48B8-                   	mov rax,L_constants + 600
 23598 00011DCD [5802000000000000] 
 23599 00011DD5 50                      	push rax
 23600 00011DD6 6A01                    	push 1
 23601 00011DD8 488B0425[68040000]      	mov rax, qword [free_var_141]
 23602                                  	assert_closure(rax)
    42 00011DE0 803805              <1>  cmp byte [%1], %2
    43 00011DE3 0F85D9180000        <1>  jne L_error_incorrect_type
 23603 00011DE9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 23604 00011DEC FF5009                  	call SOB_CLOSURE_CODE(rax)
 23605                                  
 23606 00011DEF 4889C7                  	mov rdi, rax
 23607 00011DF2 E8E8000000              	call print_sexpr_if_not_void
 23608                                  
 23609 00011DF7 48BF-                           mov rdi, fmt_memory_usage
 23609 00011DF9 [C802000000000000] 
 23610 00011E01 488B3425[4F030000]              mov rsi, qword [top_of_memory]
 23611 00011E09 4881EE[90040000]                sub rsi, memory
 23612 00011E10 B800000000                      mov rax, 0
 23613                                  	ENTER
    33 00011E15 C8000000            <1>  enter 0, 0
    34 00011E19 4883E4F0            <1>  and rsp, ~15
 23614 00011E1D E8(00000000)                    call printf
 23615                                  	LEAVE
    38 00011E22 C9                  <1>  leave
 23616 00011E23 C9                      	leave
 23617 00011E24 C3                      	ret
 23618                                  
 23619                                  L_error_non_closure:
 23620 00011E25 488B3C25[00000000]              mov rdi, qword [stderr]
 23621 00011E2D 48BE-                           mov rsi, fmt_non_closure
 23621 00011E2F [FF02000000000000] 
 23622 00011E37 B800000000                      mov rax, 0
 23623                                  	ENTER
    33 00011E3C C8000000            <1>  enter 0, 0
    34 00011E40 4883E4F0            <1>  and rsp, ~15
 23624 00011E44 E8(00000000)                    call fprintf
 23625                                  	LEAVE
    38 00011E49 C9                  <1>  leave
 23626 00011E4A 48C7C0FEFFFFFF                  mov rax, -2
 23627 00011E51 E8(00000000)                    call exit
 23628                                  
 23629                                  L_error_improper_list:
 23630 00011E56 488B3C25[00000000]      	mov rdi, qword [stderr]
 23631 00011E5E 48BE-                   	mov rsi, fmt_error_improper_list
 23631 00011E60 [2703000000000000] 
 23632 00011E68 B800000000              	mov rax, 0
 23633                                  	ENTER
    33 00011E6D C8000000            <1>  enter 0, 0
    34 00011E71 4883E4F0            <1>  and rsp, ~15
 23634 00011E75 E8(00000000)            	call fprintf
 23635                                  	LEAVE
    38 00011E7A C9                  <1>  leave
 23636 00011E7B 48C7C0F9FFFFFF          	mov rax, -7
 23637 00011E82 E8(00000000)            	call exit
 23638                                  
 23639                                  L_error_incorrect_arity_simple:
 23640 00011E87 488B3C25[00000000]              mov rdi, qword [stderr]
 23641 00011E8F 48BE-                           mov rsi, fmt_incorrect_arity_simple
 23641 00011E91 [6902000000000000] 
 23642 00011E99 EB12                            jmp L_error_incorrect_arity_common
 23643                                  L_error_incorrect_arity_opt:
 23644 00011E9B 488B3C25[00000000]              mov rdi, qword [stderr]
 23645 00011EA3 48BE-                           mov rsi, fmt_incorrect_arity_opt
 23645 00011EA5 [9402000000000000] 
 23646                                  L_error_incorrect_arity_common:
 23647 00011EAD 5A                              pop rdx
 23648 00011EAE 59                              pop rcx
 23649 00011EAF B800000000                      mov rax, 0
 23650                                  	ENTER
    33 00011EB4 C8000000            <1>  enter 0, 0
    34 00011EB8 4883E4F0            <1>  and rsp, ~15
 23651 00011EBC E8(00000000)                    call fprintf
 23652                                  	LEAVE
    38 00011EC1 C9                  <1>  leave
 23653 00011EC2 48C7C0FAFFFFFF                  mov rax, -6
 23654 00011EC9 E8(00000000)                    call exit
 23655                                  
 23656                                  section .data
 23657                                  fmt_incorrect_arity_simple:
 23658 00000269 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 23658 00000272 74656420256C642061-
 23658 0000027B 7267756D656E74732C-
 23658 00000284 206275742067697665-
 23658 0000028D 6E20256C640A00     
 23659                                  fmt_incorrect_arity_opt:
 23660 00000294 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 23660 0000029D 746564206174206C65-
 23660 000002A6 61737420256C642061-
 23660 000002AF 7267756D656E74732C-
 23660 000002B8 206275742067697665-
 23660 000002C1 6E20256C640A00     
 23661                                  fmt_memory_usage:
 23662 000002C8 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 23662 000002D1 6420256C6420627974-
 23662 000002DA 6573206F662064796E-
 23662 000002E3 616D6963616C6C792D-
 23662 000002EC 616C6C6F6361746564-
 23662 000002F5 206D656D6F72790A0A-
 23662 000002FE 00                 
 23663                                  fmt_non_closure:
 23664 000002FF 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 23664 00000308 7074696E6720746F20-
 23664 00000311 6170706C792061206E-
 23664 0000031A 6F6E2D636C6F737572-
 23664 00000323 65210A00           
 23665                                  fmt_error_improper_list:
 23666 00000327 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 23666 00000330 7267756D656E742069-
 23666 00000339 73206E6F7420612070-
 23666 00000342 726F706572206C6973-
 23666 0000034B 74210A00           
 23667                                  
 23668                                  section .bss
 23669                                  memory:
 23670 00000490 <res 40000000h>         	resb gbytes(1)
 23671                                  
 23672                                  section .data
 23673                                  top_of_memory:
 23674 0000034F [9004000000000000]              dq memory
 23675                                  
 23676                                  section .text
 23677                                  malloc:
 23678 00011ECE 488B0425[4F030000]              mov rax, qword [top_of_memory]
 23679 00011ED6 48013C25[4F030000]              add qword [top_of_memory], rdi
 23680 00011EDE C3                              ret
 23681                                          
 23682                                  print_sexpr_if_not_void:
 23683 00011EDF 4881FF[00000000]        	cmp rdi, sob_void
 23684 00011EE6 7501                    	jne print_sexpr
 23685 00011EE8 C3                      	ret
 23686                                  
 23687                                  section .data
 23688                                  fmt_void:
 23689 00000357 233C766F69643E00        	db `#<void>\0`
 23690                                  fmt_nil:
 23691 0000035F 282900                  	db `()\0`
 23692                                  fmt_boolean_false:
 23693 00000362 236600                  	db `#f\0`
 23694                                  fmt_boolean_true:
 23695 00000365 237400                  	db `#t\0`
 23696                                  fmt_char_backslash:
 23697 00000368 235C5C00                	db `#\\\\\0`
 23698                                  fmt_char_dquote:
 23699 0000036C 235C2200                	db `#\\"\0`
 23700                                  fmt_char_simple:
 23701 00000370 235C256300              	db `#\\%c\0`
 23702                                  fmt_char_null:
 23703 00000375 235C6E756C00            	db `#\\nul\0`
 23704                                  fmt_char_bell:
 23705 0000037B 235C62656C6C00          	db `#\\bell\0`
 23706                                  fmt_char_backspace:
 23707 00000382 235C6261636B737061-     	db `#\\backspace\0`
 23707 0000038B 636500             
 23708                                  fmt_char_tab:
 23709 0000038E 235C74616200            	db `#\\tab\0`
 23710                                  fmt_char_newline:
 23711 00000394 235C6E65776C696E65-     	db `#\\newline\0`
 23711 0000039D 00                 
 23712                                  fmt_char_formfeed:
 23713 0000039E 235C7061676500          	db `#\\page\0`
 23714                                  fmt_char_return:
 23715 000003A5 235C72657475726E00      	db `#\\return\0`
 23716                                  fmt_char_escape:
 23717 000003AE 235C65736300            	db `#\\esc\0`
 23718                                  fmt_char_space:
 23719 000003B4 235C737061636500        	db `#\\space\0`
 23720                                  fmt_char_hex:
 23721 000003BC 235C782530325800        	db `#\\x%02X\0`
 23722                                  fmt_closure:
 23723 000003C4 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 23723 000003CD 206174203078253038-
 23723 000003D6 5820656E763D307825-
 23723 000003DF 30385820636F64653D-
 23723 000003E8 3078253038583E00   
 23724                                  fmt_lparen:
 23725 000003F0 2800                    	db `(\0`
 23726                                  fmt_dotted_pair:
 23727 000003F2 202E2000                	db ` . \0`
 23728                                  fmt_rparen:
 23729 000003F6 2900                    	db `)\0`
 23730                                  fmt_space:
 23731 000003F8 2000                    	db ` \0`
 23732                                  fmt_empty_vector:
 23733 000003FA 23282900                	db `#()\0`
 23734                                  fmt_vector:
 23735 000003FE 232800                  	db `#(\0`
 23736                                  fmt_real:
 23737 00000401 256600                  	db `%f\0`
 23738                                  fmt_fraction:
 23739 00000404 256C642F256C6400        	db `%ld/%ld\0`
 23740                                  fmt_zero:
 23741 0000040C 3000                    	db `0\0`
 23742                                  fmt_int:
 23743 0000040E 256C6400                	db `%ld\0`
 23744                                  fmt_unknown_sexpr_error:
 23745 00000412 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
 23745 0000041B 6F723A20556E6B6E6F-
 23745 00000424 776E2074797065206F-
 23745 0000042D 662073657870722028-
 23745 00000436 3078253032582920   
 23746 0000043E 617420616464726573-     	db `at address 0x%08X\n\n\0`
 23746 00000447 73203078253038580A-
 23746 00000450 0A00               
 23747                                  fmt_dquote:
 23748 00000452 2200                    	db `\"\0`
 23749                                  fmt_string_char:
 23750 00000454 256300                          db `%c\0`
 23751                                  fmt_string_char_7:
 23752 00000457 5C6100                          db `\\a\0`
 23753                                  fmt_string_char_8:
 23754 0000045A 5C6200                          db `\\b\0`
 23755                                  fmt_string_char_9:
 23756 0000045D 5C7400                          db `\\t\0`
 23757                                  fmt_string_char_10:
 23758 00000460 5C6E00                          db `\\n\0`
 23759                                  fmt_string_char_11:
 23760 00000463 5C7600                          db `\\v\0`
 23761                                  fmt_string_char_12:
 23762 00000466 5C6600                          db `\\f\0`
 23763                                  fmt_string_char_13:
 23764 00000469 5C7200                          db `\\r\0`
 23765                                  fmt_string_char_34:
 23766 0000046C 5C2200                          db `\\"\0`
 23767                                  fmt_string_char_92:
 23768 0000046F 5C5C00                          db `\\\\\0`
 23769                                  fmt_string_char_hex:
 23770 00000472 5C7825583B00                    db `\\x%X;\0`
 23771                                  
 23772                                  section .text
 23773                                  
 23774                                  print_sexpr:
 23775                                  	ENTER
    33 00011EE9 C8000000            <1>  enter 0, 0
    34 00011EED 4883E4F0            <1>  and rsp, ~15
 23776 00011EF1 8A07                    	mov al, byte [rdi]
 23777 00011EF3 3C00                    	cmp al, T_void
 23778 00011EF5 744D                    	je .Lvoid
 23779 00011EF7 3C01                    	cmp al, T_nil
 23780 00011EF9 7458                    	je .Lnil
 23781 00011EFB 3C09                    	cmp al, T_boolean_false
 23782 00011EFD 7463                    	je .Lboolean_false
 23783 00011EFF 3C0A                    	cmp al, T_boolean_true
 23784 00011F01 746E                    	je .Lboolean_true
 23785 00011F03 3C02                    	cmp al, T_char
 23786 00011F05 7479                    	je .Lchar
 23787 00011F07 3C04                    	cmp al, T_symbol
 23788 00011F09 0F84BB010000            	je .Lsymbol
 23789 00011F0F 3C21                    	cmp al, T_pair
 23790 00011F11 0F84D6010000            	je .Lpair
 23791 00011F17 3C22                    	cmp al, T_vector
 23792 00011F19 0F849F020000            	je .Lvector
 23793 00011F1F 3C05                    	cmp al, T_closure
 23794 00011F21 0F8489010000            	je .Lclosure
 23795 00011F27 3C12                    	cmp al, T_real
 23796 00011F29 0F8430030000            	je .Lreal
 23797 00011F2F 3C11                    	cmp al, T_rational
 23798 00011F31 0F8456030000            	je .Lrational
 23799 00011F37 3C03                    	cmp al, T_string
 23800 00011F39 0F848F030000            	je .Lstring
 23801                                  
 23802 00011F3F E9C7040000              	jmp .Lunknown_sexpr_type
 23803                                  
 23804                                  .Lvoid:
 23805 00011F44 48BF-                   	mov rdi, fmt_void
 23805 00011F46 [5703000000000000] 
 23806 00011F4E E9F5040000              	jmp .Lemit
 23807                                  
 23808                                  .Lnil:
 23809 00011F53 48BF-                   	mov rdi, fmt_nil
 23809 00011F55 [5F03000000000000] 
 23810 00011F5D E9E6040000              	jmp .Lemit
 23811                                  
 23812                                  .Lboolean_false:
 23813 00011F62 48BF-                   	mov rdi, fmt_boolean_false
 23813 00011F64 [6203000000000000] 
 23814 00011F6C E9D7040000              	jmp .Lemit
 23815                                  
 23816                                  .Lboolean_true:
 23817 00011F71 48BF-                   	mov rdi, fmt_boolean_true
 23817 00011F73 [6503000000000000] 
 23818 00011F7B E9C8040000              	jmp .Lemit
 23819                                  
 23820                                  .Lchar:
 23821 00011F80 8A4701                  	mov al, byte [rdi + 1]
 23822 00011F83 3C20                    	cmp al, ' '
 23823 00011F85 7E28                    	jle .Lchar_whitespace
 23824 00011F87 3C5C                    	cmp al, 92 		; backslash
 23825 00011F89 0F847C000000            	je .Lchar_backslash
 23826 00011F8F 3C22                    	cmp al, '"'
 23827 00011F91 0F8483000000            	je .Lchar_dquote
 23828 00011F97 4825FF000000            	and rax, 255
 23829 00011F9D 48BF-                   	mov rdi, fmt_char_simple
 23829 00011F9F [7003000000000000] 
 23830 00011FA7 4889C6                  	mov rsi, rax
 23831 00011FAA E999040000              	jmp .Lemit
 23832                                  
 23833                                  .Lchar_whitespace:
 23834 00011FAF 3C00                    	cmp al, 0
 23835 00011FB1 7476                    	je .Lchar_null
 23836 00011FB3 3C07                    	cmp al, 7
 23837 00011FB5 0F847D000000            	je .Lchar_bell
 23838 00011FBB 3C08                    	cmp al, 8
 23839 00011FBD 0F8484000000            	je .Lchar_backspace
 23840 00011FC3 3C09                    	cmp al, 9
 23841 00011FC5 0F848B000000            	je .Lchar_tab
 23842 00011FCB 3C0A                    	cmp al, 10
 23843 00011FCD 0F8492000000            	je .Lchar_newline
 23844 00011FD3 3C0C                    	cmp al, 12
 23845 00011FD5 0F8499000000            	je .Lchar_formfeed
 23846 00011FDB 3C0D                    	cmp al, 13
 23847 00011FDD 0F84A0000000            	je .Lchar_return
 23848 00011FE3 3C1B                    	cmp al, 27
 23849 00011FE5 0F84A7000000            	je .Lchar_escape
 23850 00011FEB 4825FF000000            	and rax, 255
 23851 00011FF1 3C20                    	cmp al, ' '
 23852 00011FF3 0F84A8000000            	je .Lchar_space
 23853 00011FF9 48BF-                   	mov rdi, fmt_char_hex
 23853 00011FFB [BC03000000000000] 
 23854 00012003 4889C6                  	mov rsi, rax
 23855 00012006 E93D040000              	jmp .Lemit	
 23856                                  
 23857                                  .Lchar_backslash:
 23858 0001200B 48BF-                   	mov rdi, fmt_char_backslash
 23858 0001200D [6803000000000000] 
 23859 00012015 E92E040000              	jmp .Lemit
 23860                                  
 23861                                  .Lchar_dquote:
 23862 0001201A 48BF-                   	mov rdi, fmt_char_dquote
 23862 0001201C [6C03000000000000] 
 23863 00012024 E91F040000              	jmp .Lemit
 23864                                  
 23865                                  .Lchar_null:
 23866 00012029 48BF-                   	mov rdi, fmt_char_null
 23866 0001202B [7503000000000000] 
 23867 00012033 E910040000              	jmp .Lemit
 23868                                  
 23869                                  .Lchar_bell:
 23870 00012038 48BF-                   	mov rdi, fmt_char_bell
 23870 0001203A [7B03000000000000] 
 23871 00012042 E901040000              	jmp .Lemit
 23872                                  
 23873                                  .Lchar_backspace:
 23874 00012047 48BF-                   	mov rdi, fmt_char_backspace
 23874 00012049 [8203000000000000] 
 23875 00012051 E9F2030000              	jmp .Lemit
 23876                                  
 23877                                  .Lchar_tab:
 23878 00012056 48BF-                   	mov rdi, fmt_char_tab
 23878 00012058 [8E03000000000000] 
 23879 00012060 E9E3030000              	jmp .Lemit
 23880                                  
 23881                                  .Lchar_newline:
 23882 00012065 48BF-                   	mov rdi, fmt_char_newline
 23882 00012067 [9403000000000000] 
 23883 0001206F E9D4030000              	jmp .Lemit
 23884                                  
 23885                                  .Lchar_formfeed:
 23886 00012074 48BF-                   	mov rdi, fmt_char_formfeed
 23886 00012076 [9E03000000000000] 
 23887 0001207E E9C5030000              	jmp .Lemit
 23888                                  
 23889                                  .Lchar_return:
 23890 00012083 48BF-                   	mov rdi, fmt_char_return
 23890 00012085 [A503000000000000] 
 23891 0001208D E9B6030000              	jmp .Lemit
 23892                                  
 23893                                  .Lchar_escape:
 23894 00012092 48BF-                   	mov rdi, fmt_char_escape
 23894 00012094 [AE03000000000000] 
 23895 0001209C E9A7030000              	jmp .Lemit
 23896                                  
 23897                                  .Lchar_space:
 23898 000120A1 48BF-                   	mov rdi, fmt_char_space
 23898 000120A3 [B403000000000000] 
 23899 000120AB E998030000              	jmp .Lemit
 23900                                  
 23901                                  .Lclosure:
 23902 000120B0 4889FE                  	mov rsi, qword rdi
 23903 000120B3 48BF-                   	mov rdi, fmt_closure
 23903 000120B5 [C403000000000000] 
 23904 000120BD 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 23905 000120C1 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 23906 000120C5 E97E030000              	jmp .Lemit
 23907                                  
 23908                                  .Lsymbol:
 23909 000120CA 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 23910 000120CE BE01000000              	mov rsi, 1		 ; size = 1 byte
 23911 000120D3 488B5701                	mov rdx, qword [rdi + 1] ; length
 23912 000120D7 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 23913 000120DB 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 23914 000120E3 E8(00000000)            	call fwrite
 23915 000120E8 E970030000              	jmp .Lend
 23916                                  	
 23917                                  .Lpair:
 23918 000120ED 57                      	push rdi
 23919 000120EE 48BF-                   	mov rdi, fmt_lparen
 23919 000120F0 [F003000000000000] 
 23920 000120F8 B800000000              	mov rax, 0
 23921                                          ENTER
    33 000120FD C8000000            <1>  enter 0, 0
    34 00012101 4883E4F0            <1>  and rsp, ~15
 23922 00012105 E8(00000000)            	call printf
 23923                                          LEAVE
    38 0001210A C9                  <1>  leave
 23924 0001210B 488B3C24                	mov rdi, qword [rsp] 	; pair
 23925 0001210F 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 23926 00012113 E8D1FDFFFF              	call print_sexpr
 23927 00012118 5F                      	pop rdi 		; pair
 23928 00012119 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 23929                                  .Lcdr:
 23930 0001211D 8A07                    	mov al, byte [rdi]
 23931 0001211F 3C01                    	cmp al, T_nil
 23932 00012121 7447                    	je .Lcdr_nil
 23933 00012123 3C21                    	cmp al, T_pair
 23934 00012125 7462                    	je .Lcdr_pair
 23935 00012127 57                      	push rdi
 23936 00012128 48BF-                   	mov rdi, fmt_dotted_pair
 23936 0001212A [F203000000000000] 
 23937 00012132 B800000000              	mov rax, 0
 23938                                  	ENTER
    33 00012137 C8000000            <1>  enter 0, 0
    34 0001213B 4883E4F0            <1>  and rsp, ~15
 23939 0001213F E8(00000000)            	call printf
 23940                                  	LEAVE
    38 00012144 C9                  <1>  leave
 23941 00012145 5F                      	pop rdi
 23942 00012146 E89EFDFFFF              	call print_sexpr
 23943 0001214B 48BF-                   	mov rdi, fmt_rparen
 23943 0001214D [F603000000000000] 
 23944 00012155 B800000000              	mov rax, 0
 23945                                  	ENTER
    33 0001215A C8000000            <1>  enter 0, 0
    34 0001215E 4883E4F0            <1>  and rsp, ~15
 23946 00012162 E8(00000000)            	call printf
 23947                                  	LEAVE
    38 00012167 C9                  <1>  leave
 23948                                  	LEAVE
    38 00012168 C9                  <1>  leave
 23949 00012169 C3                      	ret
 23950                                  
 23951                                  .Lcdr_nil:
 23952 0001216A 48BF-                   	mov rdi, fmt_rparen
 23952 0001216C [F603000000000000] 
 23953 00012174 B800000000              	mov rax, 0
 23954                                  	ENTER
    33 00012179 C8000000            <1>  enter 0, 0
    34 0001217D 4883E4F0            <1>  and rsp, ~15
 23955 00012181 E8(00000000)            	call printf
 23956                                  	LEAVE
    38 00012186 C9                  <1>  leave
 23957                                  	LEAVE
    38 00012187 C9                  <1>  leave
 23958 00012188 C3                      	ret
 23959                                  
 23960                                  .Lcdr_pair:
 23961 00012189 57                      	push rdi
 23962 0001218A 48BF-                   	mov rdi, fmt_space
 23962 0001218C [F803000000000000] 
 23963 00012194 B800000000              	mov rax, 0
 23964                                  	ENTER
    33 00012199 C8000000            <1>  enter 0, 0
    34 0001219D 4883E4F0            <1>  and rsp, ~15
 23965 000121A1 E8(00000000)            	call printf
 23966                                  	LEAVE
    38 000121A6 C9                  <1>  leave
 23967 000121A7 488B3C24                	mov rdi, qword [rsp]
 23968 000121AB 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 23969 000121AF E835FDFFFF              	call print_sexpr
 23970 000121B4 5F                      	pop rdi
 23971 000121B5 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 23972 000121B9 E95FFFFFFF              	jmp .Lcdr
 23973                                  
 23974                                  .Lvector:
 23975 000121BE 488B4701                	mov rax, qword [rdi + 1] ; length
 23976 000121C2 4883F800                	cmp rax, 0
 23977 000121C6 0F8484000000            	je .Lvector_empty
 23978 000121CC 57                      	push rdi
 23979 000121CD 48BF-                   	mov rdi, fmt_vector
 23979 000121CF [FE03000000000000] 
 23980 000121D7 B800000000              	mov rax, 0
 23981                                  	ENTER
    33 000121DC C8000000            <1>  enter 0, 0
    34 000121E0 4883E4F0            <1>  and rsp, ~15
 23982 000121E4 E8(00000000)            	call printf
 23983                                  	LEAVE
    38 000121E9 C9                  <1>  leave
 23984 000121EA 488B3C24                	mov rdi, qword [rsp]
 23985 000121EE FF7701                  	push qword [rdi + 1]
 23986 000121F1 6A01                    	push 1
 23987 000121F3 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 23988 000121F7 E8EDFCFFFF              	call print_sexpr
 23989                                  .Lvector_loop:
 23990                                  	; [rsp] index
 23991                                  	; [rsp + 8*1] limit
 23992                                  	; [rsp + 8*2] vector
 23993 000121FC 488B0424                	mov rax, qword [rsp]
 23994 00012200 483B442408              	cmp rax, qword [rsp + 8*1]
 23995 00012205 7436                    	je .Lvector_end
 23996 00012207 48BF-                   	mov rdi, fmt_space
 23996 00012209 [F803000000000000] 
 23997 00012211 B800000000              	mov rax, 0
 23998                                  	ENTER
    33 00012216 C8000000            <1>  enter 0, 0
    34 0001221A 4883E4F0            <1>  and rsp, ~15
 23999 0001221E E8(00000000)            	call printf
 24000                                  	LEAVE
    38 00012223 C9                  <1>  leave
 24001 00012224 488B0424                	mov rax, qword [rsp]
 24002 00012228 488B5C2410              	mov rbx, qword [rsp + 8*2]
 24003 0001222D 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 24004 00012232 E8B2FCFFFF              	call print_sexpr
 24005 00012237 48FF0424                	inc qword [rsp]
 24006 0001223B EBBF                    	jmp .Lvector_loop
 24007                                  
 24008                                  .Lvector_end:
 24009 0001223D 4883C418                	add rsp, 8*3
 24010 00012241 48BF-                   	mov rdi, fmt_rparen
 24010 00012243 [F603000000000000] 
 24011 0001224B E9F8010000              	jmp .Lemit	
 24012                                  
 24013                                  .Lvector_empty:
 24014 00012250 48BF-                   	mov rdi, fmt_empty_vector
 24014 00012252 [FA03000000000000] 
 24015 0001225A E9E9010000              	jmp .Lemit
 24016                                  
 24017                                  .Lreal:
 24018 0001225F FF7701                  	push qword [rdi + 1]
 24019 00012262 F20F100424              	movsd xmm0, qword [rsp]
 24020 00012267 4883C408                	add rsp, 8*1
 24021 0001226B 48BF-                   	mov rdi, fmt_real
 24021 0001226D [0104000000000000] 
 24022 00012275 B801000000              	mov rax, 1
 24023                                  	ENTER
    33 0001227A C8000000            <1>  enter 0, 0
    34 0001227E 4883E4F0            <1>  and rsp, ~15
 24024 00012282 E8(00000000)            	call printf
 24025                                  	LEAVE
    38 00012287 C9                  <1>  leave
 24026 00012288 E9D0010000              	jmp .Lend
 24027                                  
 24028                                  .Lrational:
 24029 0001228D 488B7701                	mov rsi, qword [rdi + 1]
 24030 00012291 488B5709                	mov rdx, qword [rdi + 1 + 8]
 24031 00012295 4883FE00                	cmp rsi, 0
 24032 00012299 7415                    	je .Lrat_zero
 24033 0001229B 4883FA01                	cmp rdx, 1
 24034 0001229F 741E                    	je .Lrat_int
 24035 000122A1 48BF-                   	mov rdi, fmt_fraction
 24035 000122A3 [0404000000000000] 
 24036 000122AB E998010000              	jmp .Lemit
 24037                                  
 24038                                  .Lrat_zero:
 24039 000122B0 48BF-                   	mov rdi, fmt_zero
 24039 000122B2 [0C04000000000000] 
 24040 000122BA E989010000              	jmp .Lemit
 24041                                  
 24042                                  .Lrat_int:
 24043 000122BF 48BF-                   	mov rdi, fmt_int
 24043 000122C1 [0E04000000000000] 
 24044 000122C9 E97A010000              	jmp .Lemit
 24045                                  
 24046                                  .Lstring:
 24047 000122CE 488D4709                	lea rax, [rdi + 1 + 8]
 24048 000122D2 50                      	push rax
 24049 000122D3 FF7701                  	push qword [rdi + 1]
 24050 000122D6 48BF-                   	mov rdi, fmt_dquote
 24050 000122D8 [5204000000000000] 
 24051 000122E0 B800000000              	mov rax, 0
 24052                                  	ENTER
    33 000122E5 C8000000            <1>  enter 0, 0
    34 000122E9 4883E4F0            <1>  and rsp, ~15
 24053 000122ED E8(00000000)            	call printf
 24054                                  	LEAVE
    38 000122F2 C9                  <1>  leave
 24055                                  .Lstring_loop:
 24056                                  	; qword [rsp]: limit
 24057                                  	; qword [rsp + 8*1]: char *
 24058 000122F3 48833C2400              	cmp qword [rsp], 0
 24059 000122F8 0F84FD000000            	je .Lstring_end
 24060 000122FE 488B442408              	mov rax, qword [rsp + 8*1]
 24061 00012303 8A00                    	mov al, byte [rax]
 24062 00012305 4825FF000000            	and rax, 255
 24063 0001230B 3C07                    	cmp al, 7
 24064 0001230D 7468                            je .Lstring_char_7
 24065 0001230F 3C08                            cmp al, 8
 24066 00012311 7470                            je .Lstring_char_8
 24067 00012313 3C09                            cmp al, 9
 24068 00012315 7478                            je .Lstring_char_9
 24069 00012317 3C0A                            cmp al, 10
 24070 00012319 0F847C000000                    je .Lstring_char_10
 24071 0001231F 3C0B                            cmp al, 11
 24072 00012321 0F8480000000                    je .Lstring_char_11
 24073 00012327 3C0C                            cmp al, 12
 24074 00012329 0F8484000000                    je .Lstring_char_12
 24075 0001232F 3C0D                            cmp al, 13
 24076 00012331 0F8488000000                    je .Lstring_char_13
 24077 00012337 3C22                            cmp al, 34
 24078 00012339 0F848C000000                    je .Lstring_char_34
 24079 0001233F 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 24081 00012341 3C20                            cmp al, ' '
 24082 00012343 0F8CA0000000                    jl .Lstring_char_hex
 24083 00012349 48BF-                           mov rdi, fmt_string_char
 24083 0001234B [5404000000000000] 
 24084 00012353 4889C6                          mov rsi, rax
 24085                                  .Lstring_char_emit:
 24086 00012356 B800000000                      mov rax, 0
 24087                                          ENTER
    33 0001235B C8000000            <1>  enter 0, 0
    34 0001235F 4883E4F0            <1>  and rsp, ~15
 24088 00012363 E8(00000000)                    call printf
 24089                                          LEAVE
    38 00012368 C9                  <1>  leave
 24090 00012369 48FF0C24                        dec qword [rsp]
 24091 0001236D 48FF442408                      inc qword [rsp + 8*1]
 24092 00012372 E97CFFFFFF                      jmp .Lstring_loop
 24093                                  
 24094                                  .Lstring_char_7:
 24095 00012377 48BF-                           mov rdi, fmt_string_char_7
 24095 00012379 [5704000000000000] 
 24096 00012381 EBD3                            jmp .Lstring_char_emit
 24097                                  
 24098                                  .Lstring_char_8:
 24099 00012383 48BF-                           mov rdi, fmt_string_char_8
 24099 00012385 [5A04000000000000] 
 24100 0001238D EBC7                            jmp .Lstring_char_emit
 24101                                          
 24102                                  .Lstring_char_9:
 24103 0001238F 48BF-                           mov rdi, fmt_string_char_9
 24103 00012391 [5D04000000000000] 
 24104 00012399 EBBB                            jmp .Lstring_char_emit
 24105                                  
 24106                                  .Lstring_char_10:
 24107 0001239B 48BF-                           mov rdi, fmt_string_char_10
 24107 0001239D [6004000000000000] 
 24108 000123A5 EBAF                            jmp .Lstring_char_emit
 24109                                  
 24110                                  .Lstring_char_11:
 24111 000123A7 48BF-                           mov rdi, fmt_string_char_11
 24111 000123A9 [6304000000000000] 
 24112 000123B1 EBA3                            jmp .Lstring_char_emit
 24113                                  
 24114                                  .Lstring_char_12:
 24115 000123B3 48BF-                           mov rdi, fmt_string_char_12
 24115 000123B5 [6604000000000000] 
 24116 000123BD EB97                            jmp .Lstring_char_emit
 24117                                  
 24118                                  .Lstring_char_13:
 24119 000123BF 48BF-                           mov rdi, fmt_string_char_13
 24119 000123C1 [6904000000000000] 
 24120 000123C9 EB8B                            jmp .Lstring_char_emit
 24121                                  
 24122                                  .Lstring_char_34:
 24123 000123CB 48BF-                           mov rdi, fmt_string_char_34
 24123 000123CD [6C04000000000000] 
 24124 000123D5 E97CFFFFFF                      jmp .Lstring_char_emit
 24125                                  
 24126                                  .Lstring_char_92:
 24127 000123DA 48BF-                           mov rdi, fmt_string_char_92
 24127 000123DC [6F04000000000000] 
 24128 000123E4 E96DFFFFFF                      jmp .Lstring_char_emit
 24129                                  
 24130                                  .Lstring_char_hex:
 24131 000123E9 48BF-                           mov rdi, fmt_string_char_hex
 24131 000123EB [7204000000000000] 
 24132 000123F3 4889C6                          mov rsi, rax
 24133 000123F6 E95BFFFFFF                      jmp .Lstring_char_emit        
 24134                                  
 24135                                  .Lstring_end:
 24136 000123FB 4883C410                	add rsp, 8 * 2
 24137 000123FF 48BF-                   	mov rdi, fmt_dquote
 24137 00012401 [5204000000000000] 
 24138 00012409 EB3D                    	jmp .Lemit
 24139                                  
 24140                                  .Lunknown_sexpr_type:
 24141 0001240B 48BE-                   	mov rsi, fmt_unknown_sexpr_error
 24141 0001240D [1204000000000000] 
 24142 00012415 4825FF000000            	and rax, 255
 24143 0001241B 4889C2                  	mov rdx, rax
 24144 0001241E 4889F9                  	mov rcx, rdi
 24145 00012421 488B3C25[00000000]      	mov rdi, qword [stderr]
 24146 00012429 B800000000              	mov rax, 0
 24147                                  	ENTER
    33 0001242E C8000000            <1>  enter 0, 0
    34 00012432 4883E4F0            <1>  and rsp, ~15
 24148 00012436 E8(00000000)            	call fprintf
 24149                                  	LEAVE
    38 0001243B C9                  <1>  leave
 24150 0001243C 48C7C0FFFFFFFF          	mov rax, -1
 24151 00012443 E8(00000000)            	call exit
 24152                                  
 24153                                  .Lemit:
 24154 00012448 B800000000              	mov rax, 0
 24155                                  	ENTER
    33 0001244D C8000000            <1>  enter 0, 0
    34 00012451 4883E4F0            <1>  and rsp, ~15
 24156 00012455 E8(00000000)            	call printf
 24157                                  	LEAVE
    38 0001245A C9                  <1>  leave
 24158 0001245B EB00                    	jmp .Lend
 24159                                  
 24160                                  .Lend:
 24161                                  	LEAVE
    38 0001245D C9                  <1>  leave
 24162 0001245E C3                      	ret
 24163                                  
 24164                                  ;;; rdi: address of free variable
 24165                                  ;;; rsi: address of code-pointer
 24166                                  bind_primitive:
 24167                                          ENTER
    33 0001245F C8000000            <1>  enter 0, 0
    34 00012463 4883E4F0            <1>  and rsp, ~15
 24168 00012467 57                              push rdi
 24169 00012468 BF11000000                      mov rdi, (1 + 8 + 8)
 24170 0001246D E85CFAFFFF                      call malloc
 24171 00012472 5F                              pop rdi
 24172 00012473 C60005                          mov byte [rax], T_closure
 24173 00012476 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 24174 0001247E 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 24175 00012482 488907                          mov qword [rdi], rax
 24176                                          LEAVE
    38 00012485 C9                  <1>  leave
 24177 00012486 C3                              ret
 24178                                  
 24179                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
 24180                                  L_code_ptr_bin_apply:
 24181 00012487 C8000000                        enter 0, 0
 24182                                          ;finding the list's length
 24183 0001248B 4831C9                          xor rcx, rcx ;0
 24184 0001248E 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
 24185                                          assert_pair(rax)
    42 00012492 803821              <1>  cmp byte [%1], %2
    43 00012495 0F8527120000        <1>  jne L_error_incorrect_type
 24186 0001249B 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
 24187                                          my_loop1:
 24188 0001249F 483D[01000000]                          cmp rax, sob_nil ;if nill
 24189 000124A5 7417                                    je my_loop_end1 ;jmp end
 24190 000124A7 48FFC1                                  inc rcx 
 24191 000124AA 53                                      push rbx ;insrting val to stack
 24192                                                  assert_pair(rax)
    42 000124AB 803821              <1>  cmp byte [%1], %2
    43 000124AE 0F850E120000        <1>  jne L_error_incorrect_type
 24193 000124B4 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
 24194 000124B8 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
 24195 000124BC EBE1                                    jmp my_loop1
 24196                                          my_loop_end1:
 24197                                          
 24198                                          
 24199                                  
 24200                                          ;make values in the opposite order:
 24201                                          ;1.pushing all argument one more time in the right order
 24202 000124BE 4889CB                          mov rbx, rcx ;count-up
 24203 000124C1 B900000000                      mov rcx, 0 
 24204 000124C6 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
 24205                                          my_loop2:
 24206 000124C9 4839D9                                  cmp rcx, rbx ; if rcx = n
 24207 000124CC 740A                                    je my_loop_end2 ;then: jump to the end
 24208 000124CE 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
 24209 000124D2 50                                      push rax
 24210 000124D3 48FFC1                                  inc rcx
 24211 000124D6 EBF1                                    jmp my_loop2
 24212                                          my_loop_end2:
 24213                                          
 24214                                          ;2.overwriting element above by element below but in correct order
 24215 000124D8 488D14DD30000000                lea rdx, [8 * (rbx + 6)] ;nubmer of *bytes* we need to skip
 24216 000124E0 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
 24217 000124E4 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
 24218 000124E8 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
 24219 000124EC B900000000                      mov rcx, 0
 24220                                          my_loop3:
 24221 000124F1 4839D9                                  cmp rcx, rbx ;if rcx = n
 24222 000124F4 7417                                    je my_loop_end3 ;then: jump to the end
 24223 000124F6 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
 24224 000124FA 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
 24225 000124FE 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
 24226 00012501 4883C408                                add rsp, 8 ;pop arg we used
 24227 00012505 48FFC1                                  inc rcx 
 24228 00012508 4831C0                                  xor rax, rax
 24229 0001250B EBE4                                    jmp my_loop3
 24230                                          my_loop_end3:
 24231                                          
 24232 0001250D 4883F906                        cmp rcx, 6
 24233 00012511 7F11                            jg seven_or_more
 24234 00012513 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
 24235 00012517 48F7DB                          neg rbx 
 24236 0001251A 4883C306                        add rbx, 6      ;sub 6 from num_of_args
 24237 0001251E 488D24DC                        lea rsp, [rsp + 8 * rbx] ; pop rest of old frame 
 24238 00012522 EB05                            jmp continu
 24239                                          seven_or_more:
 24240 00012524 488D642430                      lea rsp, [rsp + 8 * 6] ; pop rest of 1st time pushed args
 24241                                          continu:
 24242 00012529 51                              push rcx ;push number of arguments
 24243 0001252A 41FF7001                        push SOB_CLOSURE_ENV(r8) ; push lex-env
 24244 0001252E 57                              push rdi ; push old ret-add
 24245 0001252F 4889F5                          mov rbp, rsi ;rbp = old-rbp
 24246 00012532 41FF6009                        jmp SOB_CLOSURE_CODE(r8) ; fun to apply
 24247                                  	
 24248                                  L_code_ptr_is_null:
 24249                                          ENTER
    33 00012536 C8000000            <1>  enter 0, 0
    34 0001253A 4883E4F0            <1>  and rsp, ~15
 24250 0001253E 48837D1801                      cmp COUNT, 1
 24251 00012543 0F85A5100000                    jne L_error_arg_count_1
 24252 00012549 488B4520                        mov rax, PARAM(0)
 24253 0001254D 803801                          cmp byte [rax], T_nil
 24254 00012550 750C                            jne .L_false
 24255 00012552 48B8-                           mov rax, sob_boolean_true
 24255 00012554 [0300000000000000] 
 24256 0001255C EB0A                            jmp .L_end
 24257                                  .L_false:
 24258 0001255E 48B8-                           mov rax, sob_boolean_false
 24258 00012560 [0200000000000000] 
 24259                                  .L_end:
 24260                                          LEAVE
    38 00012568 C9                  <1>  leave
 24261 00012569 C21800                          ret AND_KILL_FRAME(1)
 24262                                  
 24263                                  L_code_ptr_is_pair:
 24264                                          ENTER
    33 0001256C C8000000            <1>  enter 0, 0
    34 00012570 4883E4F0            <1>  and rsp, ~15
 24265 00012574 48837D1801                      cmp COUNT, 1
 24266 00012579 0F856F100000                    jne L_error_arg_count_1
 24267 0001257F 488B4520                        mov rax, PARAM(0)
 24268 00012583 803821                          cmp byte [rax], T_pair
 24269 00012586 750C                            jne .L_false
 24270 00012588 48B8-                           mov rax, sob_boolean_true
 24270 0001258A [0300000000000000] 
 24271 00012592 EB0A                            jmp .L_end
 24272                                  .L_false:
 24273 00012594 48B8-                           mov rax, sob_boolean_false
 24273 00012596 [0200000000000000] 
 24274                                  .L_end:
 24275                                          LEAVE
    38 0001259E C9                  <1>  leave
 24276 0001259F C21800                          ret AND_KILL_FRAME(1)
 24277                                          
 24278                                  L_code_ptr_is_void:
 24279                                          ENTER
    33 000125A2 C8000000            <1>  enter 0, 0
    34 000125A6 4883E4F0            <1>  and rsp, ~15
 24280 000125AA 48837D1801                      cmp COUNT, 1
 24281 000125AF 0F8539100000                    jne L_error_arg_count_1
 24282 000125B5 488B4520                        mov rax, PARAM(0)
 24283 000125B9 803800                          cmp byte [rax], T_void
 24284 000125BC 750C                            jne .L_false
 24285 000125BE 48B8-                           mov rax, sob_boolean_true
 24285 000125C0 [0300000000000000] 
 24286 000125C8 EB0A                            jmp .L_end
 24287                                  .L_false:
 24288 000125CA 48B8-                           mov rax, sob_boolean_false
 24288 000125CC [0200000000000000] 
 24289                                  .L_end:
 24290                                          LEAVE
    38 000125D4 C9                  <1>  leave
 24291 000125D5 C21800                          ret AND_KILL_FRAME(1)
 24292                                  
 24293                                  L_code_ptr_is_char:
 24294                                          ENTER
    33 000125D8 C8000000            <1>  enter 0, 0
    34 000125DC 4883E4F0            <1>  and rsp, ~15
 24295 000125E0 48837D1801                      cmp COUNT, 1
 24296 000125E5 0F8503100000                    jne L_error_arg_count_1
 24297 000125EB 488B4520                        mov rax, PARAM(0)
 24298 000125EF 803802                          cmp byte [rax], T_char
 24299 000125F2 750C                            jne .L_false
 24300 000125F4 48B8-                           mov rax, sob_boolean_true
 24300 000125F6 [0300000000000000] 
 24301 000125FE EB0A                            jmp .L_end
 24302                                  .L_false:
 24303 00012600 48B8-                           mov rax, sob_boolean_false
 24303 00012602 [0200000000000000] 
 24304                                  .L_end:
 24305                                          LEAVE
    38 0001260A C9                  <1>  leave
 24306 0001260B C21800                          ret AND_KILL_FRAME(1)
 24307                                  
 24308                                  L_code_ptr_is_string:
 24309                                          ENTER
    33 0001260E C8000000            <1>  enter 0, 0
    34 00012612 4883E4F0            <1>  and rsp, ~15
 24310 00012616 48837D1801                      cmp COUNT, 1
 24311 0001261B 0F85CD0F0000                    jne L_error_arg_count_1
 24312 00012621 488B4520                        mov rax, PARAM(0)
 24313 00012625 803803                          cmp byte [rax], T_string
 24314 00012628 750C                            jne .L_false
 24315 0001262A 48B8-                           mov rax, sob_boolean_true
 24315 0001262C [0300000000000000] 
 24316 00012634 EB0A                            jmp .L_end
 24317                                  .L_false:
 24318 00012636 48B8-                           mov rax, sob_boolean_false
 24318 00012638 [0200000000000000] 
 24319                                  .L_end:
 24320                                          LEAVE
    38 00012640 C9                  <1>  leave
 24321 00012641 C21800                          ret AND_KILL_FRAME(1)
 24322                                  
 24323                                  L_code_ptr_is_symbol:
 24324                                          ENTER
    33 00012644 C8000000            <1>  enter 0, 0
    34 00012648 4883E4F0            <1>  and rsp, ~15
 24325 0001264C 48837D1801                      cmp COUNT, 1
 24326 00012651 0F85970F0000                    jne L_error_arg_count_1
 24327 00012657 488B4520                        mov rax, PARAM(0)
 24328 0001265B 803804                          cmp byte [rax], T_symbol
 24329 0001265E 750C                            jne .L_false
 24330 00012660 48B8-                           mov rax, sob_boolean_true
 24330 00012662 [0300000000000000] 
 24331 0001266A EB0A                            jmp .L_end
 24332                                  .L_false:
 24333 0001266C 48B8-                           mov rax, sob_boolean_false
 24333 0001266E [0200000000000000] 
 24334                                  .L_end:
 24335                                          LEAVE
    38 00012676 C9                  <1>  leave
 24336 00012677 C21800                          ret AND_KILL_FRAME(1)
 24337                                  
 24338                                  L_code_ptr_is_vector:
 24339                                          ENTER
    33 0001267A C8000000            <1>  enter 0, 0
    34 0001267E 4883E4F0            <1>  and rsp, ~15
 24340 00012682 48837D1801                      cmp COUNT, 1
 24341 00012687 0F85610F0000                    jne L_error_arg_count_1
 24342 0001268D 488B4520                        mov rax, PARAM(0)
 24343 00012691 803822                          cmp byte [rax], T_vector
 24344 00012694 750C                            jne .L_false
 24345 00012696 48B8-                           mov rax, sob_boolean_true
 24345 00012698 [0300000000000000] 
 24346 000126A0 EB0A                            jmp .L_end
 24347                                  .L_false:
 24348 000126A2 48B8-                           mov rax, sob_boolean_false
 24348 000126A4 [0200000000000000] 
 24349                                  .L_end:
 24350                                          LEAVE
    38 000126AC C9                  <1>  leave
 24351 000126AD C21800                          ret AND_KILL_FRAME(1)
 24352                                  
 24353                                  L_code_ptr_is_closure:
 24354                                          ENTER
    33 000126B0 C8000000            <1>  enter 0, 0
    34 000126B4 4883E4F0            <1>  and rsp, ~15
 24355 000126B8 48837D1801                      cmp COUNT, 1
 24356 000126BD 0F852B0F0000                    jne L_error_arg_count_1
 24357 000126C3 488B4520                        mov rax, PARAM(0)
 24358 000126C7 803805                          cmp byte [rax], T_closure
 24359 000126CA 750C                            jne .L_false
 24360 000126CC 48B8-                           mov rax, sob_boolean_true
 24360 000126CE [0300000000000000] 
 24361 000126D6 EB0A                            jmp .L_end
 24362                                  .L_false:
 24363 000126D8 48B8-                           mov rax, sob_boolean_false
 24363 000126DA [0200000000000000] 
 24364                                  .L_end:
 24365                                          LEAVE
    38 000126E2 C9                  <1>  leave
 24366 000126E3 C21800                          ret AND_KILL_FRAME(1)
 24367                                  
 24368                                  L_code_ptr_is_real:
 24369                                          ENTER
    33 000126E6 C8000000            <1>  enter 0, 0
    34 000126EA 4883E4F0            <1>  and rsp, ~15
 24370 000126EE 48837D1801                      cmp COUNT, 1
 24371 000126F3 0F85F50E0000                    jne L_error_arg_count_1
 24372 000126F9 488B4520                        mov rax, PARAM(0)
 24373 000126FD 803812                          cmp byte [rax], T_real
 24374 00012700 750C                            jne .L_false
 24375 00012702 48B8-                           mov rax, sob_boolean_true
 24375 00012704 [0300000000000000] 
 24376 0001270C EB0A                            jmp .L_end
 24377                                  .L_false:
 24378 0001270E 48B8-                           mov rax, sob_boolean_false
 24378 00012710 [0200000000000000] 
 24379                                  .L_end:
 24380                                          LEAVE
    38 00012718 C9                  <1>  leave
 24381 00012719 C21800                          ret AND_KILL_FRAME(1)
 24382                                  
 24383                                  L_code_ptr_is_rational:
 24384                                          ENTER
    33 0001271C C8000000            <1>  enter 0, 0
    34 00012720 4883E4F0            <1>  and rsp, ~15
 24385 00012724 48837D1801                      cmp COUNT, 1
 24386 00012729 0F85BF0E0000                    jne L_error_arg_count_1
 24387 0001272F 488B4520                        mov rax, PARAM(0)
 24388 00012733 803811                          cmp byte [rax], T_rational
 24389 00012736 750C                            jne .L_false
 24390 00012738 48B8-                           mov rax, sob_boolean_true
 24390 0001273A [0300000000000000] 
 24391 00012742 EB0A                            jmp .L_end
 24392                                  .L_false:
 24393 00012744 48B8-                           mov rax, sob_boolean_false
 24393 00012746 [0200000000000000] 
 24394                                  .L_end:
 24395                                          LEAVE
    38 0001274E C9                  <1>  leave
 24396 0001274F C21800                          ret AND_KILL_FRAME(1)
 24397                                  
 24398                                  L_code_ptr_is_boolean:
 24399                                          ENTER
    33 00012752 C8000000            <1>  enter 0, 0
    34 00012756 4883E4F0            <1>  and rsp, ~15
 24400 0001275A 48837D1801                      cmp COUNT, 1
 24401 0001275F 0F85890E0000                    jne L_error_arg_count_1
 24402 00012765 488B4520                        mov rax, PARAM(0)
 24403 00012769 8A18                            mov bl, byte [rax]
 24404 0001276B 80E308                          and bl, T_boolean
 24405 0001276E 740C                            je .L_false
 24406 00012770 48B8-                           mov rax, sob_boolean_true
 24406 00012772 [0300000000000000] 
 24407 0001277A EB0A                            jmp .L_end
 24408                                  .L_false:
 24409 0001277C 48B8-                           mov rax, sob_boolean_false
 24409 0001277E [0200000000000000] 
 24410                                  .L_end:
 24411                                          LEAVE
    38 00012786 C9                  <1>  leave
 24412 00012787 C21800                          ret AND_KILL_FRAME(1)
 24413                                          
 24414                                  L_code_ptr_is_number:
 24415                                          ENTER
    33 0001278A C8000000            <1>  enter 0, 0
    34 0001278E 4883E4F0            <1>  and rsp, ~15
 24416 00012792 48837D1801                      cmp COUNT, 1
 24417 00012797 0F85510E0000                    jne L_error_arg_count_1
 24418 0001279D 488B4520                        mov rax, PARAM(0)
 24419 000127A1 8A18                            mov bl, byte [rax]
 24420 000127A3 80E310                          and bl, T_number
 24421 000127A6 740C                            je .L_false
 24422 000127A8 48B8-                           mov rax, sob_boolean_true
 24422 000127AA [0300000000000000] 
 24423 000127B2 EB0A                            jmp .L_end
 24424                                  .L_false:
 24425 000127B4 48B8-                           mov rax, sob_boolean_false
 24425 000127B6 [0200000000000000] 
 24426                                  .L_end:
 24427                                          LEAVE
    38 000127BE C9                  <1>  leave
 24428 000127BF C21800                          ret AND_KILL_FRAME(1)
 24429                                          
 24430                                  L_code_ptr_is_collection:
 24431                                          ENTER
    33 000127C2 C8000000            <1>  enter 0, 0
    34 000127C6 4883E4F0            <1>  and rsp, ~15
 24432 000127CA 48837D1801                      cmp COUNT, 1
 24433 000127CF 0F85190E0000                    jne L_error_arg_count_1
 24434 000127D5 488B4520                        mov rax, PARAM(0)
 24435 000127D9 8A18                            mov bl, byte [rax]
 24436 000127DB 80E320                          and bl, T_collection
 24437 000127DE 740C                            je .L_false
 24438 000127E0 48B8-                           mov rax, sob_boolean_true
 24438 000127E2 [0300000000000000] 
 24439 000127EA EB0A                            jmp .L_end
 24440                                  .L_false:
 24441 000127EC 48B8-                           mov rax, sob_boolean_false
 24441 000127EE [0200000000000000] 
 24442                                  .L_end:
 24443                                          LEAVE
    38 000127F6 C9                  <1>  leave
 24444 000127F7 C21800                          ret AND_KILL_FRAME(1)
 24445                                  
 24446                                  L_code_ptr_cons:
 24447                                          ENTER
    33 000127FA C8000000            <1>  enter 0, 0
    34 000127FE 4883E4F0            <1>  and rsp, ~15
 24448 00012802 48837D1802                      cmp COUNT, 2
 24449 00012807 0F85160E0000                    jne L_error_arg_count_2
 24450 0001280D BF11000000                      mov rdi, (1 + 8 + 8)
 24451 00012812 E8B7F6FFFF                      call malloc
 24452 00012817 C60021                          mov byte [rax], T_pair
 24453 0001281A 488B5D20                        mov rbx, PARAM(0)
 24454 0001281E 48895801                        mov SOB_PAIR_CAR(rax), rbx
 24455 00012822 488B5D28                        mov rbx, PARAM(1)
 24456 00012826 48895809                        mov SOB_PAIR_CDR(rax), rbx
 24457                                          LEAVE
    38 0001282A C9                  <1>  leave
 24458 0001282B C22000                          ret AND_KILL_FRAME(2)
 24459                                  
 24460                                  L_code_ptr_display_sexpr:
 24461                                          ENTER
    33 0001282E C8000000            <1>  enter 0, 0
    34 00012832 4883E4F0            <1>  and rsp, ~15
 24462 00012836 48837D1801                      cmp COUNT, 1
 24463 0001283B 0F85AD0D0000                    jne L_error_arg_count_1
 24464 00012841 488B7D20                        mov rdi, PARAM(0)
 24465 00012845 E89FF6FFFF                      call print_sexpr
 24466 0001284A 48B8-                           mov rax, sob_void
 24466 0001284C [0000000000000000] 
 24467                                          LEAVE
    38 00012854 C9                  <1>  leave
 24468 00012855 C21800                          ret AND_KILL_FRAME(1)
 24469                                  
 24470                                  L_code_ptr_write_char:
 24471                                          ENTER
    33 00012858 C8000000            <1>  enter 0, 0
    34 0001285C 4883E4F0            <1>  and rsp, ~15
 24472 00012860 48837D1801                      cmp COUNT, 1
 24473 00012865 0F85830D0000                    jne L_error_arg_count_1
 24474 0001286B 488B4520                        mov rax, PARAM(0)
 24475                                          assert_char(rax)
    42 0001286F 803802              <1>  cmp byte [%1], %2
    43 00012872 0F854A0E0000        <1>  jne L_error_incorrect_type
 24476 00012878 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 24477 0001287B 4825FF000000                    and rax, 255
 24478 00012881 48BF-                           mov rdi, fmt_char
 24478 00012883 [7804000000000000] 
 24479 0001288B 4889C6                          mov rsi, rax
 24480 0001288E B800000000                      mov rax, 0
 24481                                  	ENTER
    33 00012893 C8000000            <1>  enter 0, 0
    34 00012897 4883E4F0            <1>  and rsp, ~15
 24482 0001289B E8(00000000)                    call printf
 24483                                  	LEAVE
    38 000128A0 C9                  <1>  leave
 24484 000128A1 48B8-                           mov rax, sob_void
 24484 000128A3 [0000000000000000] 
 24485                                          LEAVE
    38 000128AB C9                  <1>  leave
 24486 000128AC C21800                          ret AND_KILL_FRAME(1)
 24487                                  
 24488                                  L_code_ptr_car:
 24489                                          ENTER
    33 000128AF C8000000            <1>  enter 0, 0
    34 000128B3 4883E4F0            <1>  and rsp, ~15
 24490 000128B7 48837D1801                      cmp COUNT, 1
 24491 000128BC 0F852C0D0000                    jne L_error_arg_count_1
 24492 000128C2 488B4520                        mov rax, PARAM(0)
 24493                                          assert_pair(rax)
    42 000128C6 803821              <1>  cmp byte [%1], %2
    43 000128C9 0F85F30D0000        <1>  jne L_error_incorrect_type
 24494 000128CF 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 24495                                          LEAVE
    38 000128D3 C9                  <1>  leave
 24496 000128D4 C21800                          ret AND_KILL_FRAME(1)
 24497                                          
 24498                                  L_code_ptr_cdr:
 24499                                          ENTER
    33 000128D7 C8000000            <1>  enter 0, 0
    34 000128DB 4883E4F0            <1>  and rsp, ~15
 24500 000128DF 48837D1801                      cmp COUNT, 1
 24501 000128E4 0F85040D0000                    jne L_error_arg_count_1
 24502 000128EA 488B4520                        mov rax, PARAM(0)
 24503                                          assert_pair(rax)
    42 000128EE 803821              <1>  cmp byte [%1], %2
    43 000128F1 0F85CB0D0000        <1>  jne L_error_incorrect_type
 24504 000128F7 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 24505                                          LEAVE
    38 000128FB C9                  <1>  leave
 24506 000128FC C21800                          ret AND_KILL_FRAME(1)
 24507                                          
 24508                                  L_code_ptr_string_length:
 24509                                          ENTER
    33 000128FF C8000000            <1>  enter 0, 0
    34 00012903 4883E4F0            <1>  and rsp, ~15
 24510 00012907 48837D1801                      cmp COUNT, 1
 24511 0001290C 0F85DC0C0000                    jne L_error_arg_count_1
 24512 00012912 488B4520                        mov rax, PARAM(0)
 24513                                          assert_string(rax)
    42 00012916 803803              <1>  cmp byte [%1], %2
    43 00012919 0F85A30D0000        <1>  jne L_error_incorrect_type
 24514 0001291F 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 24515 00012923 E83A0C0000                      call make_integer
 24516                                          LEAVE
    38 00012928 C9                  <1>  leave
 24517 00012929 C21800                          ret AND_KILL_FRAME(1)
 24518                                  
 24519                                  L_code_ptr_vector_length:
 24520                                          ENTER
    33 0001292C C8000000            <1>  enter 0, 0
    34 00012930 4883E4F0            <1>  and rsp, ~15
 24521 00012934 48837D1801                      cmp COUNT, 1
 24522 00012939 0F85AF0C0000                    jne L_error_arg_count_1
 24523 0001293F 488B4520                        mov rax, PARAM(0)
 24524                                          assert_vector(rax)
    42 00012943 803822              <1>  cmp byte [%1], %2
    43 00012946 0F85760D0000        <1>  jne L_error_incorrect_type
 24525 0001294C 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 24526 00012950 E80D0C0000                      call make_integer
 24527                                          LEAVE
    38 00012955 C9                  <1>  leave
 24528 00012956 C21800                          ret AND_KILL_FRAME(1)
 24529                                  
 24530                                  L_code_ptr_real_to_integer:
 24531                                          ENTER
    33 00012959 C8000000            <1>  enter 0, 0
    34 0001295D 4883E4F0            <1>  and rsp, ~15
 24532 00012961 48837D1801                      cmp COUNT, 1
 24533 00012966 0F85820C0000                    jne L_error_arg_count_1
 24534 0001296C 488B5D20                        mov rbx, PARAM(0)
 24535                                          assert_real(rbx)
    42 00012970 803B12              <1>  cmp byte [%1], %2
    43 00012973 0F85490D0000        <1>  jne L_error_incorrect_type
 24536 00012979 F20F104301                      movsd xmm0, qword [rbx + 1]
 24537 0001297E F2480F2CF8                      cvttsd2si rdi, xmm0
 24538 00012983 E8DA0B0000                      call make_integer
 24539                                          LEAVE
    38 00012988 C9                  <1>  leave
 24540 00012989 C21800                          ret AND_KILL_FRAME(1)
 24541                                  
 24542                                  L_code_ptr_exit:
 24543                                          ENTER
    33 0001298C C8000000            <1>  enter 0, 0
    34 00012990 4883E4F0            <1>  and rsp, ~15
 24544 00012994 48837D1800                      cmp COUNT, 0
 24545 00012999 0F851A0C0000                    jne L_error_arg_count_0
 24546 0001299F B800000000                      mov rax, 0
 24547 000129A4 E8(00000000)                    call exit
 24548                                  
 24549                                  L_code_ptr_integer_to_real:
 24550                                          ENTER
    33 000129A9 C8000000            <1>  enter 0, 0
    34 000129AD 4883E4F0            <1>  and rsp, ~15
 24551 000129B1 48837D1801                      cmp COUNT, 1
 24552 000129B6 0F85320C0000                    jne L_error_arg_count_1
 24553 000129BC 488B4520                        mov rax, PARAM(0)
 24554                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000129C0 803811              <2>  cmp byte [%1], %2
    43 000129C3 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000129C9 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000129CE 0F85EE0C0000        <1>  jne L_error_incorrect_type
 24555 000129D4 FF7001                          push qword [rax + 1]
 24556 000129D7 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 24557 000129DD E8640B0000                      call make_real
 24558                                          LEAVE
    38 000129E2 C9                  <1>  leave
 24559 000129E3 C21800                          ret AND_KILL_FRAME(1)
 24560                                  
 24561                                  L_code_ptr_rational_to_real:
 24562                                          ENTER
    33 000129E6 C8000000            <1>  enter 0, 0
    34 000129EA 4883E4F0            <1>  and rsp, ~15
 24563 000129EE 48837D1801                      cmp COUNT, 1
 24564 000129F3 0F85F50B0000                    jne L_error_arg_count_1
 24565 000129F9 488B4520                        mov rax, PARAM(0)
 24566                                          assert_rational(rax)
    42 000129FD 803811              <1>  cmp byte [%1], %2
    43 00012A00 0F85BC0C0000        <1>  jne L_error_incorrect_type
 24567 00012A06 FF7001                          push qword [rax + 1]
 24568 00012A09 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 24569 00012A0F FF7009                          push qword [rax + 1 + 8]
 24570 00012A12 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 24571 00012A18 F20F5EC1                        divsd xmm0, xmm1
 24572 00012A1C E8250B0000                      call make_real
 24573                                          LEAVE
    38 00012A21 C9                  <1>  leave
 24574 00012A22 C21800                          ret AND_KILL_FRAME(1)
 24575                                  
 24576                                  L_code_ptr_char_to_integer:
 24577                                          ENTER
    33 00012A25 C8000000            <1>  enter 0, 0
    34 00012A29 4883E4F0            <1>  and rsp, ~15
 24578 00012A2D 48837D1801                      cmp COUNT, 1
 24579 00012A32 0F85B60B0000                    jne L_error_arg_count_1
 24580 00012A38 488B4520                        mov rax, PARAM(0)
 24581                                          assert_char(rax)
    42 00012A3C 803802              <1>  cmp byte [%1], %2
    43 00012A3F 0F857D0C0000        <1>  jne L_error_incorrect_type
 24582 00012A45 8A4001                          mov al, byte [rax + 1]
 24583 00012A48 4825FF000000                    and rax, 255
 24584 00012A4E 4889C7                          mov rdi, rax
 24585 00012A51 E80C0B0000                      call make_integer
 24586                                          LEAVE
    38 00012A56 C9                  <1>  leave
 24587 00012A57 C21800                          ret AND_KILL_FRAME(1)
 24588                                  
 24589                                  L_code_ptr_integer_to_char:
 24590                                          ENTER
    33 00012A5A C8000000            <1>  enter 0, 0
    34 00012A5E 4883E4F0            <1>  and rsp, ~15
 24591 00012A62 48837D1801                      cmp COUNT, 1
 24592 00012A67 0F85810B0000                    jne L_error_arg_count_1
 24593 00012A6D 488B4520                        mov rax, PARAM(0)
 24594                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00012A71 803811              <2>  cmp byte [%1], %2
    43 00012A74 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00012A7A 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012A7F 0F853D0C0000        <1>  jne L_error_incorrect_type
 24595 00012A85 488B5801                        mov rbx, qword [rax + 1]
 24596 00012A89 4883FB00                        cmp rbx, 0
 24597 00012A8D 0F8EF50A0000                    jle L_error_integer_range
 24598 00012A93 4881FB00010000                  cmp rbx, 256
 24599 00012A9A 0F8DE80A0000                    jge L_error_integer_range
 24600 00012AA0 BF02000000                      mov rdi, (1 + 1)
 24601 00012AA5 E824F4FFFF                      call malloc
 24602 00012AAA C60002                          mov byte [rax], T_char
 24603 00012AAD 885801                          mov byte [rax + 1], bl
 24604                                          LEAVE
    38 00012AB0 C9                  <1>  leave
 24605 00012AB1 C21800                          ret AND_KILL_FRAME(1)
 24606                                  
 24607                                  L_code_ptr_trng:
 24608                                          ENTER
    33 00012AB4 C8000000            <1>  enter 0, 0
    34 00012AB8 4883E4F0            <1>  and rsp, ~15
 24609 00012ABC 48837D1800                      cmp COUNT, 0
 24610 00012AC1 0F85F20A0000                    jne L_error_arg_count_0
 24611 00012AC7 480FC7F7                        rdrand rdi
 24612 00012ACB 48D1EF                          shr rdi, 1
 24613 00012ACE E88F0A0000                      call make_integer
 24614                                          LEAVE
    38 00012AD3 C9                  <1>  leave
 24615 00012AD4 C21000                          ret AND_KILL_FRAME(0)
 24616                                  
 24617                                  L_code_ptr_is_zero:
 24618                                          ENTER
    33 00012AD7 C8000000            <1>  enter 0, 0
    34 00012ADB 4883E4F0            <1>  and rsp, ~15
 24619 00012ADF 48837D1801                      cmp COUNT, 1
 24620 00012AE4 0F85040B0000                    jne L_error_arg_count_1
 24621 00012AEA 488B4520                        mov rax, PARAM(0)
 24622 00012AEE 803811                          cmp byte [rax], T_rational
 24623 00012AF1 740A                            je .L_rational
 24624 00012AF3 803812                          cmp byte [rax], T_real
 24625 00012AF6 740E                            je .L_real
 24626 00012AF8 E9C50B0000                      jmp L_error_incorrect_type
 24627                                  .L_rational:
 24628 00012AFD 4883780100                      cmp qword [rax + 1], 0
 24629 00012B02 7420                            je .L_zero
 24630 00012B04 EB12                            jmp .L_not_zero
 24631                                  .L_real:
 24632 00012B06 660FEFC0                        pxor xmm0, xmm0
 24633 00012B0A FF7001                          push qword [rax + 1]
 24634 00012B0D F20F100C24                      movsd xmm1, qword [rsp]
 24635 00012B12 660F2EC1                        ucomisd xmm0, xmm1
 24636 00012B16 740C                            je .L_zero
 24637                                  .L_not_zero:
 24638 00012B18 48B8-                           mov rax, sob_boolean_false
 24638 00012B1A [0200000000000000] 
 24639 00012B22 EB0A                            jmp .L_end
 24640                                  .L_zero:
 24641 00012B24 48B8-                           mov rax, sob_boolean_true
 24641 00012B26 [0300000000000000] 
 24642                                  .L_end:
 24643                                          LEAVE
    38 00012B2E C9                  <1>  leave
 24644 00012B2F C21800                          ret AND_KILL_FRAME(1)
 24645                                  
 24646                                  L_code_ptr_is_integer:
 24647                                          ENTER
    33 00012B32 C8000000            <1>  enter 0, 0
    34 00012B36 4883E4F0            <1>  and rsp, ~15
 24648 00012B3A 48837D1801                      cmp COUNT, 1
 24649 00012B3F 0F85A90A0000                    jne L_error_arg_count_1
 24650 00012B45 488B4520                        mov rax, PARAM(0)
 24651 00012B49 803811                          cmp byte [rax], T_rational
 24652 00012B4C 7513                            jne .L_false
 24653 00012B4E 4883780901                      cmp qword [rax + 1 + 8], 1
 24654 00012B53 750C                            jne .L_false
 24655 00012B55 48B8-                           mov rax, sob_boolean_true
 24655 00012B57 [0300000000000000] 
 24656 00012B5F EB0A                            jmp .L_exit
 24657                                  .L_false:
 24658 00012B61 48B8-                           mov rax, sob_boolean_false
 24658 00012B63 [0200000000000000] 
 24659                                  .L_exit:
 24660                                          LEAVE
    38 00012B6B C9                  <1>  leave
 24661 00012B6C C21800                          ret AND_KILL_FRAME(1)
 24662                                  
 24663                                  L_code_ptr_raw_bin_add_rr:
 24664                                          ENTER
    33 00012B6F C8000000            <1>  enter 0, 0
    34 00012B73 4883E4F0            <1>  and rsp, ~15
 24665 00012B77 48837D1802                      cmp COUNT, 2
 24666 00012B7C 0F85A10A0000                    jne L_error_arg_count_2
 24667 00012B82 488B5D20                        mov rbx, PARAM(0)
 24668                                          assert_real(rbx)
    42 00012B86 803B12              <1>  cmp byte [%1], %2
    43 00012B89 0F85330B0000        <1>  jne L_error_incorrect_type
 24669 00012B8F 488B4D28                        mov rcx, PARAM(1)
 24670                                          assert_real(rcx)
    42 00012B93 803912              <1>  cmp byte [%1], %2
    43 00012B96 0F85260B0000        <1>  jne L_error_incorrect_type
 24671 00012B9C F20F104301                      movsd xmm0, qword [rbx + 1]
 24672 00012BA1 F20F104901                      movsd xmm1, qword [rcx + 1]
 24673 00012BA6 F20F58C1                        addsd xmm0, xmm1
 24674 00012BAA E897090000                      call make_real
 24675                                          LEAVE
    38 00012BAF C9                  <1>  leave
 24676 00012BB0 C22000                          ret AND_KILL_FRAME(2)
 24677                                  
 24678                                  L_code_ptr_raw_bin_sub_rr:
 24679                                          ENTER
    33 00012BB3 C8000000            <1>  enter 0, 0
    34 00012BB7 4883E4F0            <1>  and rsp, ~15
 24680 00012BBB 48837D1802                      cmp COUNT, 2
 24681 00012BC0 0F855D0A0000                    jne L_error_arg_count_2
 24682 00012BC6 488B5D20                        mov rbx, PARAM(0)
 24683                                          assert_real(rbx)
    42 00012BCA 803B12              <1>  cmp byte [%1], %2
    43 00012BCD 0F85EF0A0000        <1>  jne L_error_incorrect_type
 24684 00012BD3 488B4D28                        mov rcx, PARAM(1)
 24685                                          assert_real(rcx)
    42 00012BD7 803912              <1>  cmp byte [%1], %2
    43 00012BDA 0F85E20A0000        <1>  jne L_error_incorrect_type
 24686 00012BE0 F20F104301                      movsd xmm0, qword [rbx + 1]
 24687 00012BE5 F20F104901                      movsd xmm1, qword [rcx + 1]
 24688 00012BEA F20F5CC1                        subsd xmm0, xmm1
 24689 00012BEE E853090000                      call make_real
 24690                                          LEAVE
    38 00012BF3 C9                  <1>  leave
 24691 00012BF4 C22000                          ret AND_KILL_FRAME(2)
 24692                                  
 24693                                  L_code_ptr_raw_bin_mul_rr:
 24694                                          ENTER
    33 00012BF7 C8000000            <1>  enter 0, 0
    34 00012BFB 4883E4F0            <1>  and rsp, ~15
 24695 00012BFF 48837D1802                      cmp COUNT, 2
 24696 00012C04 0F85190A0000                    jne L_error_arg_count_2
 24697 00012C0A 488B5D20                        mov rbx, PARAM(0)
 24698                                          assert_real(rbx)
    42 00012C0E 803B12              <1>  cmp byte [%1], %2
    43 00012C11 0F85AB0A0000        <1>  jne L_error_incorrect_type
 24699 00012C17 488B4D28                        mov rcx, PARAM(1)
 24700                                          assert_real(rcx)
    42 00012C1B 803912              <1>  cmp byte [%1], %2
    43 00012C1E 0F859E0A0000        <1>  jne L_error_incorrect_type
 24701 00012C24 F20F104301                      movsd xmm0, qword [rbx + 1]
 24702 00012C29 F20F104901                      movsd xmm1, qword [rcx + 1]
 24703 00012C2E F20F59C1                        mulsd xmm0, xmm1
 24704 00012C32 E80F090000                      call make_real
 24705                                          LEAVE
    38 00012C37 C9                  <1>  leave
 24706 00012C38 C22000                          ret AND_KILL_FRAME(2)
 24707                                  
 24708                                  L_code_ptr_raw_bin_div_rr:
 24709                                          ENTER
    33 00012C3B C8000000            <1>  enter 0, 0
    34 00012C3F 4883E4F0            <1>  and rsp, ~15
 24710 00012C43 48837D1802                      cmp COUNT, 2
 24711 00012C48 0F85D5090000                    jne L_error_arg_count_2
 24712 00012C4E 488B5D20                        mov rbx, PARAM(0)
 24713                                          assert_real(rbx)
    42 00012C52 803B12              <1>  cmp byte [%1], %2
    43 00012C55 0F85670A0000        <1>  jne L_error_incorrect_type
 24714 00012C5B 488B4D28                        mov rcx, PARAM(1)
 24715                                          assert_real(rcx)
    42 00012C5F 803912              <1>  cmp byte [%1], %2
    43 00012C62 0F855A0A0000        <1>  jne L_error_incorrect_type
 24716 00012C68 F20F104301                      movsd xmm0, qword [rbx + 1]
 24717 00012C6D F20F104901                      movsd xmm1, qword [rcx + 1]
 24718 00012C72 660FEFD2                        pxor xmm2, xmm2
 24719 00012C76 660F2ECA                        ucomisd xmm1, xmm2
 24720 00012C7A 0F84730A0000                    je L_error_division_by_zero
 24721 00012C80 F20F5EC1                        divsd xmm0, xmm1
 24722 00012C84 E8BD080000                      call make_real
 24723                                          LEAVE
    38 00012C89 C9                  <1>  leave
 24724 00012C8A C22000                          ret AND_KILL_FRAME(2)
 24725                                  
 24726                                  L_code_ptr_raw_bin_add_qq:
 24727                                          ENTER
    33 00012C8D C8000000            <1>  enter 0, 0
    34 00012C91 4883E4F0            <1>  and rsp, ~15
 24728 00012C95 48837D1802                      cmp COUNT, 2
 24729 00012C9A 0F8583090000                    jne L_error_arg_count_2
 24730 00012CA0 4C8B4520                        mov r8, PARAM(0)
 24731                                          assert_rational(r8)
    42 00012CA4 41803811            <1>  cmp byte [%1], %2
    43 00012CA8 0F85140A0000        <1>  jne L_error_incorrect_type
 24732 00012CAE 4C8B4D28                        mov r9, PARAM(1)
 24733                                          assert_rational(r9)
    42 00012CB2 41803911            <1>  cmp byte [%1], %2
    43 00012CB6 0F85060A0000        <1>  jne L_error_incorrect_type
 24734 00012CBC 498B4001                        mov rax, qword [r8 + 1] ; num1
 24735 00012CC0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24736 00012CC4 4899                            cqo
 24737 00012CC6 48F7EB                          imul rbx
 24738 00012CC9 4889C6                          mov rsi, rax
 24739 00012CCC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24740 00012CD0 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 24741 00012CD4 4899                            cqo
 24742 00012CD6 48F7EB                          imul rbx
 24743 00012CD9 4801C6                          add rsi, rax
 24744 00012CDC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24745 00012CE0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24746 00012CE4 4899                            cqo
 24747 00012CE6 48F7EB                          imul rbx
 24748 00012CE9 4889C7                          mov rdi, rax
 24749 00012CEC E827010000                      call normalize_rational
 24750                                          LEAVE
    38 00012CF1 C9                  <1>  leave
 24751 00012CF2 C22000                          ret AND_KILL_FRAME(2)
 24752                                  
 24753                                  L_code_ptr_raw_bin_sub_qq:
 24754                                          ENTER
    33 00012CF5 C8000000            <1>  enter 0, 0
    34 00012CF9 4883E4F0            <1>  and rsp, ~15
 24755 00012CFD 48837D1802                      cmp COUNT, 2
 24756 00012D02 0F851B090000                    jne L_error_arg_count_2
 24757 00012D08 4C8B4520                        mov r8, PARAM(0)
 24758                                          assert_rational(r8)
    42 00012D0C 41803811            <1>  cmp byte [%1], %2
    43 00012D10 0F85AC090000        <1>  jne L_error_incorrect_type
 24759 00012D16 4C8B4D28                        mov r9, PARAM(1)
 24760                                          assert_rational(r9)
    42 00012D1A 41803911            <1>  cmp byte [%1], %2
    43 00012D1E 0F859E090000        <1>  jne L_error_incorrect_type
 24761 00012D24 498B4001                        mov rax, qword [r8 + 1] ; num1
 24762 00012D28 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24763 00012D2C 4899                            cqo
 24764 00012D2E 48F7EB                          imul rbx
 24765 00012D31 4889C6                          mov rsi, rax
 24766 00012D34 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24767 00012D38 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 24768 00012D3C 4899                            cqo
 24769 00012D3E 48F7EB                          imul rbx
 24770 00012D41 4829C6                          sub rsi, rax
 24771 00012D44 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24772 00012D48 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24773 00012D4C 4899                            cqo
 24774 00012D4E 48F7EB                          imul rbx
 24775 00012D51 4889C7                          mov rdi, rax
 24776 00012D54 E8BF000000                      call normalize_rational
 24777                                          LEAVE
    38 00012D59 C9                  <1>  leave
 24778 00012D5A C22000                          ret AND_KILL_FRAME(2)
 24779                                  
 24780                                  L_code_ptr_raw_bin_mul_qq:
 24781                                          ENTER
    33 00012D5D C8000000            <1>  enter 0, 0
    34 00012D61 4883E4F0            <1>  and rsp, ~15
 24782 00012D65 48837D1802                      cmp COUNT, 2
 24783 00012D6A 0F85B3080000                    jne L_error_arg_count_2
 24784 00012D70 4C8B4520                        mov r8, PARAM(0)
 24785                                          assert_rational(r8)
    42 00012D74 41803811            <1>  cmp byte [%1], %2
    43 00012D78 0F8544090000        <1>  jne L_error_incorrect_type
 24786 00012D7E 4C8B4D28                        mov r9, PARAM(1)
 24787                                          assert_rational(r9)
    42 00012D82 41803911            <1>  cmp byte [%1], %2
    43 00012D86 0F8536090000        <1>  jne L_error_incorrect_type
 24788 00012D8C 498B4001                        mov rax, qword [r8 + 1] ; num1
 24789 00012D90 498B5901                        mov rbx, qword [r9 + 1] ; num2
 24790 00012D94 4899                            cqo
 24791 00012D96 48F7EB                          imul rbx
 24792 00012D99 4889C6                          mov rsi, rax
 24793 00012D9C 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24794 00012DA0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24795 00012DA4 4899                            cqo
 24796 00012DA6 48F7EB                          imul rbx
 24797 00012DA9 4889C7                          mov rdi, rax
 24798 00012DAC E867000000                      call normalize_rational
 24799                                          LEAVE
    38 00012DB1 C9                  <1>  leave
 24800 00012DB2 C22000                          ret AND_KILL_FRAME(2)
 24801                                          
 24802                                  L_code_ptr_raw_bin_div_qq:
 24803                                          ENTER
    33 00012DB5 C8000000            <1>  enter 0, 0
    34 00012DB9 4883E4F0            <1>  and rsp, ~15
 24804 00012DBD 48837D1802                      cmp COUNT, 2
 24805 00012DC2 0F855B080000                    jne L_error_arg_count_2
 24806 00012DC8 4C8B4520                        mov r8, PARAM(0)
 24807                                          assert_rational(r8)
    42 00012DCC 41803811            <1>  cmp byte [%1], %2
    43 00012DD0 0F85EC080000        <1>  jne L_error_incorrect_type
 24808 00012DD6 4C8B4D28                        mov r9, PARAM(1)
 24809                                          assert_rational(r9)
    42 00012DDA 41803911            <1>  cmp byte [%1], %2
    43 00012DDE 0F85DE080000        <1>  jne L_error_incorrect_type
 24810 00012DE4 4983790100                      cmp qword [r9 + 1], 0
 24811 00012DE9 0F8404090000                    je L_error_division_by_zero
 24812 00012DEF 498B4001                        mov rax, qword [r8 + 1] ; num1
 24813 00012DF3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24814 00012DF7 4899                            cqo
 24815 00012DF9 48F7EB                          imul rbx
 24816 00012DFC 4889C6                          mov rsi, rax
 24817 00012DFF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24818 00012E03 498B5901                        mov rbx, qword [r9 + 1] ; num2
 24819 00012E07 4899                            cqo
 24820 00012E09 48F7EB                          imul rbx
 24821 00012E0C 4889C7                          mov rdi, rax
 24822 00012E0F E804000000                      call normalize_rational
 24823                                          LEAVE
    38 00012E14 C9                  <1>  leave
 24824 00012E15 C22000                          ret AND_KILL_FRAME(2)
 24825                                          
 24826                                  normalize_rational:
 24827 00012E18 56                              push rsi
 24828 00012E19 57                              push rdi
 24829 00012E1A E839000000                      call gcd
 24830 00012E1F 4889C3                          mov rbx, rax
 24831 00012E22 58                              pop rax
 24832 00012E23 4899                            cqo
 24833 00012E25 48F7FB                          idiv rbx
 24834 00012E28 4989C0                          mov r8, rax
 24835 00012E2B 58                              pop rax
 24836 00012E2C 4899                            cqo
 24837 00012E2E 48F7FB                          idiv rbx
 24838 00012E31 4989C1                          mov r9, rax
 24839 00012E34 BF11000000                      mov rdi, (1 + 8 + 8)
 24840 00012E39 E890F0FFFF                      call malloc
 24841 00012E3E C60011                          mov byte [rax], T_rational
 24842 00012E41 4C894801                        mov qword [rax + 1], r9
 24843 00012E45 4C894009                        mov qword [rax + 1 + 8], r8
 24844 00012E49 C3                              ret
 24845                                  
 24846                                  iabs:
 24847 00012E4A 4889F8                          mov rax, rdi
 24848 00012E4D 4883F800                        cmp rax, 0
 24849 00012E51 7C01                            jl .Lneg
 24850 00012E53 C3                              ret
 24851                                  .Lneg:
 24852 00012E54 48F7D8                          neg rax
 24853 00012E57 C3                              ret
 24854                                  
 24855                                  gcd:
 24856 00012E58 E8EDFFFFFF                      call iabs
 24857 00012E5D 4889C3                          mov rbx, rax
 24858 00012E60 4889F7                          mov rdi, rsi
 24859 00012E63 E8E2FFFFFF                      call iabs
 24860 00012E68 4883F800                        cmp rax, 0
 24861 00012E6C 7502                            jne .L0
 24862 00012E6E 4893                            xchg rax, rbx
 24863                                  .L0:
 24864 00012E70 4883FB00                        cmp rbx, 0
 24865 00012E74 740C                            je .L1
 24866 00012E76 4899                            cqo
 24867 00012E78 48F7F3                          div rbx
 24868 00012E7B 4889D0                          mov rax, rdx
 24869 00012E7E 4893                            xchg rax, rbx
 24870 00012E80 EBEE                            jmp .L0
 24871                                  .L1:
 24872 00012E82 C3                              ret
 24873                                  
 24874                                  L_code_ptr_error:
 24875                                          ENTER
    33 00012E83 C8000000            <1>  enter 0, 0
    34 00012E87 4883E4F0            <1>  and rsp, ~15
 24876 00012E8B 48837D1802                      cmp COUNT, 2
 24877 00012E90 0F858D070000                    jne L_error_arg_count_2
 24878 00012E96 488B7520                        mov rsi, PARAM(0)
 24879                                          assert_symbol(rsi)
    42 00012E9A 803E04              <1>  cmp byte [%1], %2
    43 00012E9D 0F851F080000        <1>  jne L_error_incorrect_type
 24880 00012EA3 488B7528                        mov rsi, PARAM(1)
 24881                                          assert_string(rsi)
    42 00012EA7 803E03              <1>  cmp byte [%1], %2
    43 00012EAA 0F8512080000        <1>  jne L_error_incorrect_type
 24882 00012EB0 48BF-                           mov rdi, fmt_scheme_error_part_1
 24882 00012EB2 [B005000000000000] 
 24883 00012EBA B800000000                      mov rax, 0
 24884                                  	ENTER
    33 00012EBF C8000000            <1>  enter 0, 0
    34 00012EC3 4883E4F0            <1>  and rsp, ~15
 24885 00012EC7 E8(00000000)                    call printf
 24886                                  	LEAVE
    38 00012ECC C9                  <1>  leave
 24887 00012ECD 488B7D20                        mov rdi, PARAM(0)
 24888 00012ED1 E813F0FFFF                      call print_sexpr
 24889 00012ED6 48BF-                           mov rdi, fmt_scheme_error_part_2
 24889 00012ED8 [C405000000000000] 
 24890 00012EE0 B800000000                      mov rax, 0
 24891                                  	ENTER
    33 00012EE5 C8000000            <1>  enter 0, 0
    34 00012EE9 4883E4F0            <1>  and rsp, ~15
 24892 00012EED E8(00000000)                    call printf
 24893                                  	LEAVE
    38 00012EF2 C9                  <1>  leave
 24894 00012EF3 488B4528                        mov rax, PARAM(1)       ; sob_string
 24895 00012EF7 BE01000000                      mov rsi, 1              ; size = 1 byte
 24896 00012EFC 488B5001                        mov rdx, qword [rax + 1] ; length
 24897 00012F00 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 24898 00012F04 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 24899 00012F0C E8(00000000)                    call fwrite
 24900 00012F11 48BF-                           mov rdi, fmt_scheme_error_part_3
 24900 00012F13 [0606000000000000] 
 24901 00012F1B B800000000                      mov rax, 0
 24902                                  	ENTER
    33 00012F20 C8000000            <1>  enter 0, 0
    34 00012F24 4883E4F0            <1>  and rsp, ~15
 24903 00012F28 E8(00000000)                    call printf
 24904                                  	LEAVE
    38 00012F2D C9                  <1>  leave
 24905 00012F2E 48C7C0F7FFFFFF                  mov rax, -9
 24906 00012F35 E8(00000000)                    call exit
 24907                                  
 24908                                  L_code_ptr_raw_less_than_rr:
 24909                                          ENTER
    33 00012F3A C8000000            <1>  enter 0, 0
    34 00012F3E 4883E4F0            <1>  and rsp, ~15
 24910 00012F42 48837D1802                      cmp COUNT, 2
 24911 00012F47 0F85D6060000                    jne L_error_arg_count_2
 24912 00012F4D 488B7520                        mov rsi, PARAM(0)
 24913                                          assert_real(rsi)
    42 00012F51 803E12              <1>  cmp byte [%1], %2
    43 00012F54 0F8568070000        <1>  jne L_error_incorrect_type
 24914 00012F5A 488B7D28                        mov rdi, PARAM(1)
 24915                                          assert_real(rdi)
    42 00012F5E 803F12              <1>  cmp byte [%1], %2
    43 00012F61 0F855B070000        <1>  jne L_error_incorrect_type
 24916 00012F67 F20F104601                      movsd xmm0, qword [rsi + 1]
 24917 00012F6C F20F104F01                      movsd xmm1, qword [rdi + 1]
 24918 00012F71 660F2FC1                        comisd xmm0, xmm1
 24919 00012F75 730C                            jae .L_false
 24920 00012F77 48B8-                           mov rax, sob_boolean_true
 24920 00012F79 [0300000000000000] 
 24921 00012F81 EB0A                            jmp .L_exit
 24922                                  .L_false:
 24923 00012F83 48B8-                           mov rax, sob_boolean_false
 24923 00012F85 [0200000000000000] 
 24924                                  .L_exit:
 24925                                          LEAVE
    38 00012F8D C9                  <1>  leave
 24926 00012F8E C22000                          ret AND_KILL_FRAME(2)
 24927                                          
 24928                                  L_code_ptr_raw_less_than_qq:
 24929                                          ENTER
    33 00012F91 C8000000            <1>  enter 0, 0
    34 00012F95 4883E4F0            <1>  and rsp, ~15
 24930 00012F99 48837D1802                      cmp COUNT, 2
 24931 00012F9E 0F857F060000                    jne L_error_arg_count_2
 24932 00012FA4 488B7520                        mov rsi, PARAM(0)
 24933                                          assert_rational(rsi)
    42 00012FA8 803E11              <1>  cmp byte [%1], %2
    43 00012FAB 0F8511070000        <1>  jne L_error_incorrect_type
 24934 00012FB1 488B7D28                        mov rdi, PARAM(1)
 24935                                          assert_rational(rdi)
    42 00012FB5 803F11              <1>  cmp byte [%1], %2
    43 00012FB8 0F8504070000        <1>  jne L_error_incorrect_type
 24936 00012FBE 488B4601                        mov rax, qword [rsi + 1] ; num1
 24937 00012FC2 4899                            cqo
 24938 00012FC4 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 24939 00012FC8 4889C1                          mov rcx, rax
 24940 00012FCB 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 24941 00012FCF 4899                            cqo
 24942 00012FD1 48F76F01                        imul qword [rdi + 1]          ; num2
 24943 00012FD5 4829C1                          sub rcx, rax
 24944 00012FD8 7D0C                            jge .L_false
 24945 00012FDA 48B8-                           mov rax, sob_boolean_true
 24945 00012FDC [0300000000000000] 
 24946 00012FE4 EB0A                            jmp .L_exit
 24947                                  .L_false:
 24948 00012FE6 48B8-                           mov rax, sob_boolean_false
 24948 00012FE8 [0200000000000000] 
 24949                                  .L_exit:
 24950                                          LEAVE
    38 00012FF0 C9                  <1>  leave
 24951 00012FF1 C22000                          ret AND_KILL_FRAME(2)
 24952                                  
 24953                                  L_code_ptr_raw_equal_rr:
 24954                                          ENTER
    33 00012FF4 C8000000            <1>  enter 0, 0
    34 00012FF8 4883E4F0            <1>  and rsp, ~15
 24955 00012FFC 48837D1802                      cmp COUNT, 2
 24956 00013001 0F851C060000                    jne L_error_arg_count_2
 24957 00013007 488B7520                        mov rsi, PARAM(0)
 24958                                          assert_real(rsi)
    42 0001300B 803E12              <1>  cmp byte [%1], %2
    43 0001300E 0F85AE060000        <1>  jne L_error_incorrect_type
 24959 00013014 488B7D28                        mov rdi, PARAM(1)
 24960                                          assert_real(rdi)
    42 00013018 803F12              <1>  cmp byte [%1], %2
    43 0001301B 0F85A1060000        <1>  jne L_error_incorrect_type
 24961 00013021 F20F104601                      movsd xmm0, qword [rsi + 1]
 24962 00013026 F20F104F01                      movsd xmm1, qword [rdi + 1]
 24963 0001302B 660F2FC1                        comisd xmm0, xmm1
 24964 0001302F 750C                            jne .L_false
 24965 00013031 48B8-                           mov rax, sob_boolean_true
 24965 00013033 [0300000000000000] 
 24966 0001303B EB0A                            jmp .L_exit
 24967                                  .L_false:
 24968 0001303D 48B8-                           mov rax, sob_boolean_false
 24968 0001303F [0200000000000000] 
 24969                                  .L_exit:
 24970                                          LEAVE
    38 00013047 C9                  <1>  leave
 24971 00013048 C22000                          ret AND_KILL_FRAME(2)
 24972                                          
 24973                                  L_code_ptr_raw_equal_qq:
 24974                                          ENTER
    33 0001304B C8000000            <1>  enter 0, 0
    34 0001304F 4883E4F0            <1>  and rsp, ~15
 24975 00013053 48837D1802                      cmp COUNT, 2
 24976 00013058 0F85C5050000                    jne L_error_arg_count_2
 24977 0001305E 488B7520                        mov rsi, PARAM(0)
 24978                                          assert_rational(rsi)
    42 00013062 803E11              <1>  cmp byte [%1], %2
    43 00013065 0F8557060000        <1>  jne L_error_incorrect_type
 24979 0001306B 488B7D28                        mov rdi, PARAM(1)
 24980                                          assert_rational(rdi)
    42 0001306F 803F11              <1>  cmp byte [%1], %2
    43 00013072 0F854A060000        <1>  jne L_error_incorrect_type
 24981 00013078 488B4601                        mov rax, qword [rsi + 1] ; num1
 24982 0001307C 4899                            cqo
 24983 0001307E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 24984 00013082 4889C1                          mov rcx, rax
 24985 00013085 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 24986 00013089 4899                            cqo
 24987 0001308B 48F76F01                        imul qword [rdi + 1]          ; num2
 24988 0001308F 4829C1                          sub rcx, rax
 24989 00013092 750C                            jne .L_false
 24990 00013094 48B8-                           mov rax, sob_boolean_true
 24990 00013096 [0300000000000000] 
 24991 0001309E EB0A                            jmp .L_exit
 24992                                  .L_false:
 24993 000130A0 48B8-                           mov rax, sob_boolean_false
 24993 000130A2 [0200000000000000] 
 24994                                  .L_exit:
 24995                                          LEAVE
    38 000130AA C9                  <1>  leave
 24996 000130AB C22000                          ret AND_KILL_FRAME(2)
 24997                                  
 24998                                  L_code_ptr_quotient:
 24999                                          ENTER
    33 000130AE C8000000            <1>  enter 0, 0
    34 000130B2 4883E4F0            <1>  and rsp, ~15
 25000 000130B6 48837D1802                      cmp COUNT, 2
 25001 000130BB 0F8562050000                    jne L_error_arg_count_2
 25002 000130C1 488B7520                        mov rsi, PARAM(0)
 25003                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000130C5 803E11              <2>  cmp byte [%1], %2
    43 000130C8 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000130CE 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000130D3 0F85E9050000        <1>  jne L_error_incorrect_type
 25004 000130D9 488B7D28                        mov rdi, PARAM(1)
 25005                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000130DD 803F11              <2>  cmp byte [%1], %2
    43 000130E0 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000130E6 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000130EB 0F85D1050000        <1>  jne L_error_incorrect_type
 25006 000130F1 488B4601                        mov rax, qword [rsi + 1]
 25007 000130F5 488B5F01                        mov rbx, qword [rdi + 1]
 25008 000130F9 4883FB00                        cmp rbx, 0
 25009 000130FD 0F84F0050000                    je L_error_division_by_zero
 25010 00013103 4899                            cqo
 25011 00013105 48F7FB                          idiv rbx
 25012 00013108 4889C7                          mov rdi, rax
 25013 0001310B E852040000                      call make_integer
 25014                                          LEAVE
    38 00013110 C9                  <1>  leave
 25015 00013111 C22000                          ret AND_KILL_FRAME(2)
 25016                                          
 25017                                  L_code_ptr_remainder:
 25018                                          ENTER
    33 00013114 C8000000            <1>  enter 0, 0
    34 00013118 4883E4F0            <1>  and rsp, ~15
 25019 0001311C 48837D1802                      cmp COUNT, 2
 25020 00013121 0F85FC040000                    jne L_error_arg_count_2
 25021 00013127 488B7520                        mov rsi, PARAM(0)
 25022                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0001312B 803E11              <2>  cmp byte [%1], %2
    43 0001312E 0F858E050000        <2>  jne L_error_incorrect_type
    48 00013134 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013139 0F8583050000        <1>  jne L_error_incorrect_type
 25023 0001313F 488B7D28                        mov rdi, PARAM(1)
 25024                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00013143 803F11              <2>  cmp byte [%1], %2
    43 00013146 0F8576050000        <2>  jne L_error_incorrect_type
    48 0001314C 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013151 0F856B050000        <1>  jne L_error_incorrect_type
 25025 00013157 488B4601                        mov rax, qword [rsi + 1]
 25026 0001315B 488B5F01                        mov rbx, qword [rdi + 1]
 25027 0001315F 4883FB00                        cmp rbx, 0
 25028 00013163 0F848A050000                    je L_error_division_by_zero
 25029 00013169 4899                            cqo
 25030 0001316B 48F7FB                          idiv rbx
 25031 0001316E 4889D7                          mov rdi, rdx
 25032 00013171 E8EC030000                      call make_integer
 25033                                          LEAVE
    38 00013176 C9                  <1>  leave
 25034 00013177 C22000                          ret AND_KILL_FRAME(2)
 25035                                  
 25036                                  L_code_ptr_set_car:
 25037                                          ENTER
    33 0001317A C8000000            <1>  enter 0, 0
    34 0001317E 4883E4F0            <1>  and rsp, ~15
 25038 00013182 48837D1802                      cmp COUNT, 2
 25039 00013187 0F8596040000                    jne L_error_arg_count_2
 25040 0001318D 488B4520                        mov rax, PARAM(0)
 25041                                          assert_pair(rax)
    42 00013191 803821              <1>  cmp byte [%1], %2
    43 00013194 0F8528050000        <1>  jne L_error_incorrect_type
 25042 0001319A 488B5D28                        mov rbx, PARAM(1)
 25043 0001319E 48895801                        mov SOB_PAIR_CAR(rax), rbx
 25044 000131A2 48B8-                           mov rax, sob_void
 25044 000131A4 [0000000000000000] 
 25045                                          LEAVE
    38 000131AC C9                  <1>  leave
 25046 000131AD C22000                          ret AND_KILL_FRAME(2)
 25047                                  
 25048                                  L_code_ptr_set_cdr:
 25049                                          ENTER
    33 000131B0 C8000000            <1>  enter 0, 0
    34 000131B4 4883E4F0            <1>  and rsp, ~15
 25050 000131B8 48837D1802                      cmp COUNT, 2
 25051 000131BD 0F8560040000                    jne L_error_arg_count_2
 25052 000131C3 488B4520                        mov rax, PARAM(0)
 25053                                          assert_pair(rax)
    42 000131C7 803821              <1>  cmp byte [%1], %2
    43 000131CA 0F85F2040000        <1>  jne L_error_incorrect_type
 25054 000131D0 488B5D28                        mov rbx, PARAM(1)
 25055 000131D4 48895809                        mov SOB_PAIR_CDR(rax), rbx
 25056 000131D8 48B8-                           mov rax, sob_void
 25056 000131DA [0000000000000000] 
 25057                                          LEAVE
    38 000131E2 C9                  <1>  leave
 25058 000131E3 C22000                          ret AND_KILL_FRAME(2)
 25059                                  
 25060                                  L_code_ptr_string_ref:
 25061                                          ENTER
    33 000131E6 C8000000            <1>  enter 0, 0
    34 000131EA 4883E4F0            <1>  and rsp, ~15
 25062 000131EE 48837D1802                      cmp COUNT, 2
 25063 000131F3 0F852A040000                    jne L_error_arg_count_2
 25064 000131F9 488B7D20                        mov rdi, PARAM(0)
 25065                                          assert_string(rdi)
    42 000131FD 803F03              <1>  cmp byte [%1], %2
    43 00013200 0F85BC040000        <1>  jne L_error_incorrect_type
 25066 00013206 488B7528                        mov rsi, PARAM(1)
 25067                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0001320A 803E11              <2>  cmp byte [%1], %2
    43 0001320D 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00013213 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013218 0F85A4040000        <1>  jne L_error_incorrect_type
 25068 0001321E 488B5701                        mov rdx, qword [rdi + 1]
 25069 00013222 488B4E01                        mov rcx, qword [rsi + 1]
 25070 00013226 4839D1                          cmp rcx, rdx
 25071 00013229 0F8D59030000                    jge L_error_integer_range
 25072 0001322F 4883F900                        cmp rcx, 0
 25073 00013233 0F8C4F030000                    jl L_error_integer_range
 25074 00013239 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 25075 0001323D BF02000000                      mov rdi, 2
 25076 00013242 E887ECFFFF                      call malloc
 25077 00013247 C60002                          mov byte [rax], T_char
 25078 0001324A 885801                          mov byte [rax + 1], bl
 25079                                          LEAVE
    38 0001324D C9                  <1>  leave
 25080 0001324E C22000                          ret AND_KILL_FRAME(2)
 25081                                  
 25082                                  L_code_ptr_vector_ref:
 25083                                          ENTER
    33 00013251 C8000000            <1>  enter 0, 0
    34 00013255 4883E4F0            <1>  and rsp, ~15
 25084 00013259 48837D1802                      cmp COUNT, 2
 25085 0001325E 0F85BF030000                    jne L_error_arg_count_2
 25086 00013264 488B7D20                        mov rdi, PARAM(0)
 25087                                          assert_vector(rdi)
    42 00013268 803F22              <1>  cmp byte [%1], %2
    43 0001326B 0F8551040000        <1>  jne L_error_incorrect_type
 25088 00013271 488B7528                        mov rsi, PARAM(1)
 25089                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00013275 803E11              <2>  cmp byte [%1], %2
    43 00013278 0F8544040000        <2>  jne L_error_incorrect_type
    48 0001327E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013283 0F8539040000        <1>  jne L_error_incorrect_type
 25090 00013289 488B5701                        mov rdx, qword [rdi + 1]
 25091 0001328D 488B4E01                        mov rcx, qword [rsi + 1]
 25092 00013291 4839D1                          cmp rcx, rdx
 25093 00013294 0F8DEE020000                    jge L_error_integer_range
 25094 0001329A 4883F900                        cmp rcx, 0
 25095 0001329E 0F8CE4020000                    jl L_error_integer_range
 25096 000132A4 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 25097                                          LEAVE
    38 000132A9 C9                  <1>  leave
 25098 000132AA C22000                          ret AND_KILL_FRAME(2)
 25099                                  
 25100                                  L_code_ptr_vector_set:
 25101                                          ENTER
    33 000132AD C8000000            <1>  enter 0, 0
    34 000132B1 4883E4F0            <1>  and rsp, ~15
 25102 000132B5 48837D1803                      cmp COUNT, 3
 25103 000132BA 0F85CD030000                    jne L_error_arg_count_3
 25104 000132C0 488B7D20                        mov rdi, PARAM(0)
 25105                                          assert_vector(rdi)
    42 000132C4 803F22              <1>  cmp byte [%1], %2
    43 000132C7 0F85F5030000        <1>  jne L_error_incorrect_type
 25106 000132CD 488B7528                        mov rsi, PARAM(1)
 25107                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000132D1 803E11              <2>  cmp byte [%1], %2
    43 000132D4 0F85E8030000        <2>  jne L_error_incorrect_type
    48 000132DA 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000132DF 0F85DD030000        <1>  jne L_error_incorrect_type
 25108 000132E5 488B5701                        mov rdx, qword [rdi + 1]
 25109 000132E9 488B4E01                        mov rcx, qword [rsi + 1]
 25110 000132ED 4839D1                          cmp rcx, rdx
 25111 000132F0 0F8D92020000                    jge L_error_integer_range
 25112 000132F6 4883F900                        cmp rcx, 0
 25113 000132FA 0F8C88020000                    jl L_error_integer_range
 25114 00013300 488B4530                        mov rax, PARAM(2)
 25115 00013304 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 25116 00013309 48B8-                           mov rax, sob_void
 25116 0001330B [0000000000000000] 
 25117                                          LEAVE
    38 00013313 C9                  <1>  leave
 25118 00013314 C22800                          ret AND_KILL_FRAME(3)
 25119                                  
 25120                                  L_code_ptr_string_set:
 25121                                          ENTER
    33 00013317 C8000000            <1>  enter 0, 0
    34 0001331B 4883E4F0            <1>  and rsp, ~15
 25122 0001331F 48837D1803                      cmp COUNT, 3
 25123 00013324 0F8563030000                    jne L_error_arg_count_3
 25124 0001332A 488B7D20                        mov rdi, PARAM(0)
 25125                                          assert_string(rdi)
    42 0001332E 803F03              <1>  cmp byte [%1], %2
    43 00013331 0F858B030000        <1>  jne L_error_incorrect_type
 25126 00013337 488B7528                        mov rsi, PARAM(1)
 25127                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0001333B 803E11              <2>  cmp byte [%1], %2
    43 0001333E 0F857E030000        <2>  jne L_error_incorrect_type
    48 00013344 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00013349 0F8573030000        <1>  jne L_error_incorrect_type
 25128 0001334F 488B5701                        mov rdx, qword [rdi + 1]
 25129 00013353 488B4E01                        mov rcx, qword [rsi + 1]
 25130 00013357 4839D1                          cmp rcx, rdx
 25131 0001335A 0F8D28020000                    jge L_error_integer_range
 25132 00013360 4883F900                        cmp rcx, 0
 25133 00013364 0F8C1E020000                    jl L_error_integer_range
 25134 0001336A 488B4530                        mov rax, PARAM(2)
 25135                                          assert_char(rax)
    42 0001336E 803802              <1>  cmp byte [%1], %2
    43 00013371 0F854B030000        <1>  jne L_error_incorrect_type
 25136 00013377 8A4001                          mov al, byte [rax + 1]
 25137 0001337A 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 25138 0001337E 48B8-                           mov rax, sob_void
 25138 00013380 [0000000000000000] 
 25139                                          LEAVE
    38 00013388 C9                  <1>  leave
 25140 00013389 C22800                          ret AND_KILL_FRAME(3)
 25141                                  
 25142                                  L_code_ptr_make_vector:
 25143                                          ENTER
    33 0001338C C8000000            <1>  enter 0, 0
    34 00013390 4883E4F0            <1>  and rsp, ~15
 25144 00013394 48837D1802                      cmp COUNT, 2
 25145 00013399 0F8584020000                    jne L_error_arg_count_2
 25146 0001339F 488B4D20                        mov rcx, PARAM(0)
 25147                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000133A3 803911              <2>  cmp byte [%1], %2
    43 000133A6 0F8516030000        <2>  jne L_error_incorrect_type
    48 000133AC 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000133B1 0F850B030000        <1>  jne L_error_incorrect_type
 25148 000133B7 488B4901                        mov rcx, qword [rcx + 1]
 25149 000133BB 4883F900                        cmp rcx, 0
 25150 000133BF 0F8CC3010000                    jl L_error_integer_range
 25151 000133C5 488B5528                        mov rdx, PARAM(1)
 25152 000133C9 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 25153 000133D1 E8F8EAFFFF                      call malloc
 25154 000133D6 C60022                          mov byte [rax], T_vector
 25155 000133D9 48894801                        mov qword [rax + 1], rcx
 25156 000133DD 41B800000000                    mov r8, 0
 25157                                  .L0:
 25158 000133E3 4939C8                          cmp r8, rcx
 25159 000133E6 740A                            je .L1
 25160 000133E8 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 25161 000133ED 49FFC0                          inc r8
 25162 000133F0 EBF1                            jmp .L0
 25163                                  .L1:
 25164                                          LEAVE
    38 000133F2 C9                  <1>  leave
 25165 000133F3 C22000                          ret AND_KILL_FRAME(2)
 25166                                          
 25167                                  L_code_ptr_make_string:
 25168                                          ENTER
    33 000133F6 C8000000            <1>  enter 0, 0
    34 000133FA 4883E4F0            <1>  and rsp, ~15
 25169 000133FE 48837D1802                      cmp COUNT, 2
 25170 00013403 0F851A020000                    jne L_error_arg_count_2
 25171 00013409 488B4D20                        mov rcx, PARAM(0)
 25172                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 0001340D 803911              <2>  cmp byte [%1], %2
    43 00013410 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00013416 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0001341B 0F85A1020000        <1>  jne L_error_incorrect_type
 25173 00013421 488B4901                        mov rcx, qword [rcx + 1]
 25174 00013425 4883F900                        cmp rcx, 0
 25175 00013429 0F8C59010000                    jl L_error_integer_range
 25176 0001342F 488B5528                        mov rdx, PARAM(1)
 25177                                          assert_char(rdx)
    42 00013433 803A02              <1>  cmp byte [%1], %2
    43 00013436 0F8586020000        <1>  jne L_error_incorrect_type
 25178 0001343C 8A5201                          mov dl, byte [rdx + 1]
 25179 0001343F 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 25180 00013443 E886EAFFFF                      call malloc
 25181 00013448 C60003                          mov byte [rax], T_string
 25182 0001344B 48894801                        mov qword [rax + 1], rcx
 25183 0001344F 41B800000000                    mov r8, 0
 25184                                  .L0:
 25185 00013455 4939C8                          cmp r8, rcx
 25186 00013458 740A                            je .L1
 25187 0001345A 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 25188 0001345F 49FFC0                          inc r8
 25189 00013462 EBF1                            jmp .L0
 25190                                  .L1:
 25191                                          LEAVE
    38 00013464 C9                  <1>  leave
 25192 00013465 C22000                          ret AND_KILL_FRAME(2)
 25193                                  
 25194                                  L_code_ptr_numerator:
 25195                                          ENTER
    33 00013468 C8000000            <1>  enter 0, 0
    34 0001346C 4883E4F0            <1>  and rsp, ~15
 25196 00013470 48837D1801                      cmp COUNT, 1
 25197 00013475 0F8573010000                    jne L_error_arg_count_1
 25198 0001347B 488B4520                        mov rax, PARAM(0)
 25199                                          assert_rational(rax)
    42 0001347F 803811              <1>  cmp byte [%1], %2
    43 00013482 0F853A020000        <1>  jne L_error_incorrect_type
 25200 00013488 488B7801                        mov rdi, qword [rax + 1]
 25201 0001348C E8D1000000                      call make_integer
 25202                                          LEAVE
    38 00013491 C9                  <1>  leave
 25203 00013492 C21800                          ret AND_KILL_FRAME(1)
 25204                                          
 25205                                  L_code_ptr_denominator:
 25206                                          ENTER
    33 00013495 C8000000            <1>  enter 0, 0
    34 00013499 4883E4F0            <1>  and rsp, ~15
 25207 0001349D 48837D1801                      cmp COUNT, 1
 25208 000134A2 0F8546010000                    jne L_error_arg_count_1
 25209 000134A8 488B4520                        mov rax, PARAM(0)
 25210                                          assert_rational(rax)
    42 000134AC 803811              <1>  cmp byte [%1], %2
    43 000134AF 0F850D020000        <1>  jne L_error_incorrect_type
 25211 000134B5 488B7809                        mov rdi, qword [rax + 1 + 8]
 25212 000134B9 E8A4000000                      call make_integer
 25213                                          LEAVE
    38 000134BE C9                  <1>  leave
 25214 000134BF C21800                          ret AND_KILL_FRAME(1)
 25215                                  
 25216                                  L_code_ptr_eq:
 25217                                  	ENTER
    33 000134C2 C8000000            <1>  enter 0, 0
    34 000134C6 4883E4F0            <1>  and rsp, ~15
 25218 000134CA 48837D1802              	cmp COUNT, 2
 25219 000134CF 0F854E010000            	jne L_error_arg_count_2
 25220 000134D5 488B7D20                	mov rdi, PARAM(0)
 25221 000134D9 488B7528                	mov rsi, PARAM(1)
 25222 000134DD 4839F7                  	cmp rdi, rsi
 25223 000134E0 744A                    	je .L_eq_true
 25224 000134E2 8A17                    	mov dl, byte [rdi]
 25225 000134E4 3A16                    	cmp dl, byte [rsi]
 25226 000134E6 7550                    	jne .L_eq_false
 25227 000134E8 80FA02                  	cmp dl, T_char
 25228 000134EB 7437                    	je .L_char
 25229 000134ED 80FA04                  	cmp dl, T_symbol
 25230 000134F0 742A                    	je .L_symbol
 25231 000134F2 80FA12                  	cmp dl, T_real
 25232 000134F5 741D                    	je .L_real
 25233 000134F7 80FA11                  	cmp dl, T_rational
 25234 000134FA 7402                    	je .L_rational
 25235 000134FC EB3A                    	jmp .L_eq_false
 25236                                  .L_rational:
 25237 000134FE 488B4601                	mov rax, qword [rsi + 1]
 25238 00013502 483B4701                	cmp rax, qword [rdi + 1]
 25239 00013506 7530                    	jne .L_eq_false
 25240 00013508 488B4609                	mov rax, qword [rsi + 1 + 8]
 25241 0001350C 483B4709                	cmp rax, qword [rdi + 1 + 8]
 25242 00013510 7526                    	jne .L_eq_false
 25243 00013512 EB18                    	jmp .L_eq_true
 25244                                  .L_real:
 25245 00013514 488B4601                	mov rax, qword [rsi + 1]
 25246 00013518 483B4701                	cmp rax, qword [rdi + 1]
 25247                                  .L_symbol:
 25248                                  	; never reached, because symbols are static!
 25249                                  	; but I'm keeping it in case, I'll ever change
 25250                                  	; the implementation
 25251 0001351C 488B4601                	mov rax, qword [rsi + 1]
 25252 00013520 483B4701                	cmp rax, qword [rdi + 1]
 25253                                  .L_char:
 25254 00013524 8A5E01                  	mov bl, byte [rsi + 1]
 25255 00013527 3A5F01                  	cmp bl, byte [rdi + 1]
 25256 0001352A 750C                    	jne .L_eq_false
 25257                                  .L_eq_true:
 25258 0001352C 48B8-                   	mov rax, sob_boolean_true
 25258 0001352E [0300000000000000] 
 25259 00013536 EB0A                    	jmp .L_eq_exit
 25260                                  .L_eq_false:
 25261 00013538 48B8-                   	mov rax, sob_boolean_false
 25261 0001353A [0200000000000000] 
 25262                                  .L_eq_exit:
 25263                                  	LEAVE
    38 00013542 C9                  <1>  leave
 25264 00013543 C22000                  	ret AND_KILL_FRAME(2)
 25265                                  
 25266                                  make_real:
 25267                                          ENTER
    33 00013546 C8000000            <1>  enter 0, 0
    34 0001354A 4883E4F0            <1>  and rsp, ~15
 25268 0001354E BF09000000                      mov rdi, (1 + 8)
 25269 00013553 E876E9FFFF                      call malloc
 25270 00013558 C60012                          mov byte [rax], T_real
 25271 0001355B F20F114001                      movsd qword [rax + 1], xmm0
 25272                                          LEAVE
    38 00013560 C9                  <1>  leave
 25273 00013561 C3                              ret
 25274                                          
 25275                                  make_integer:
 25276                                          ENTER
    33 00013562 C8000000            <1>  enter 0, 0
    34 00013566 4883E4F0            <1>  and rsp, ~15
 25277 0001356A 4889FE                          mov rsi, rdi
 25278 0001356D BF11000000                      mov rdi, (1 + 8 + 8)
 25279 00013572 E857E9FFFF                      call malloc
 25280 00013577 C60011                          mov byte [rax], T_rational
 25281 0001357A 48897001                        mov qword [rax + 1], rsi
 25282 0001357E 48C7400901000000                mov qword [rax + 1 + 8], 1
 25283                                          LEAVE
    38 00013586 C9                  <1>  leave
 25284 00013587 C3                              ret
 25285                                          
 25286                                  L_error_integer_range:
 25287 00013588 488B3C25[00000000]              mov rdi, qword [stderr]
 25288 00013590 48BE-                           mov rsi, fmt_integer_range
 25288 00013592 [7D05000000000000] 
 25289 0001359A B800000000                      mov rax, 0
 25290                                  	ENTER
    33 0001359F C8000000            <1>  enter 0, 0
    34 000135A3 4883E4F0            <1>  and rsp, ~15
 25291 000135A7 E8(00000000)                    call fprintf
 25292                                  	LEAVE
    38 000135AC C9                  <1>  leave
 25293 000135AD 48C7C0FBFFFFFF                  mov rax, -5
 25294 000135B4 E8(00000000)                    call exit
 25295                                  
 25296                                  L_error_arg_count_0:
 25297 000135B9 488B3C25[00000000]              mov rdi, qword [stderr]
 25298 000135C1 48BE-                           mov rsi, fmt_arg_count_0
 25298 000135C3 [7B04000000000000] 
 25299 000135CB 488B5518                        mov rdx, COUNT
 25300 000135CF B800000000                      mov rax, 0
 25301                                  	ENTER
    33 000135D4 C8000000            <1>  enter 0, 0
    34 000135D8 4883E4F0            <1>  and rsp, ~15
 25302 000135DC E8(00000000)                    call fprintf
 25303                                  	LEAVE
    38 000135E1 C9                  <1>  leave
 25304 000135E2 48C7C0FDFFFFFF                  mov rax, -3
 25305 000135E9 E8(00000000)                    call exit
 25306                                  
 25307                                  L_error_arg_count_1:
 25308 000135EE 488B3C25[00000000]              mov rdi, qword [stderr]
 25309 000135F6 48BE-                           mov rsi, fmt_arg_count_1
 25309 000135F8 [A304000000000000] 
 25310 00013600 488B5518                        mov rdx, COUNT
 25311 00013604 B800000000                      mov rax, 0
 25312                                  	ENTER
    33 00013609 C8000000            <1>  enter 0, 0
    34 0001360D 4883E4F0            <1>  and rsp, ~15
 25313 00013611 E8(00000000)                    call fprintf
 25314                                  	LEAVE
    38 00013616 C9                  <1>  leave
 25315 00013617 48C7C0FDFFFFFF                  mov rax, -3
 25316 0001361E E8(00000000)                    call exit
 25317                                  
 25318                                  L_error_arg_count_2:
 25319 00013623 488B3C25[00000000]              mov rdi, qword [stderr]
 25320 0001362B 48BE-                           mov rsi, fmt_arg_count_2
 25320 0001362D [0905000000000000] 
 25321 00013635 488B5518                        mov rdx, COUNT
 25322 00013639 B800000000                      mov rax, 0
 25323                                  	ENTER
    33 0001363E C8000000            <1>  enter 0, 0
    34 00013642 4883E4F0            <1>  and rsp, ~15
 25324 00013646 E8(00000000)                    call fprintf
 25325                                  	LEAVE
    38 0001364B C9                  <1>  leave
 25326 0001364C 48C7C0FDFFFFFF                  mov rax, -3
 25327 00013653 E8(00000000)                    call exit
 25328                                  
 25329                                  L_error_arg_count_12:
 25330 00013658 488B3C25[00000000]              mov rdi, qword [stderr]
 25331 00013660 48BE-                           mov rsi, fmt_arg_count_12
 25331 00013662 [C904000000000000] 
 25332 0001366A 488B5518                        mov rdx, COUNT
 25333 0001366E B800000000                      mov rax, 0
 25334                                  	ENTER
    33 00013673 C8000000            <1>  enter 0, 0
    34 00013677 4883E4F0            <1>  and rsp, ~15
 25335 0001367B E8(00000000)                    call fprintf
 25336                                  	LEAVE
    38 00013680 C9                  <1>  leave
 25337 00013681 48C7C0FDFFFFFF                  mov rax, -3
 25338 00013688 E8(00000000)                    call exit
 25339                                  
 25340                                  L_error_arg_count_3:
 25341 0001368D 488B3C25[00000000]              mov rdi, qword [stderr]
 25342 00013695 48BE-                           mov rsi, fmt_arg_count_3
 25342 00013697 [3005000000000000] 
 25343 0001369F 488B5518                        mov rdx, COUNT
 25344 000136A3 B800000000                      mov rax, 0
 25345                                  	ENTER
    33 000136A8 C8000000            <1>  enter 0, 0
    34 000136AC 4883E4F0            <1>  and rsp, ~15
 25346 000136B0 E8(00000000)                    call fprintf
 25347                                  	LEAVE
    38 000136B5 C9                  <1>  leave
 25348 000136B6 48C7C0FDFFFFFF                  mov rax, -3
 25349 000136BD E8(00000000)                    call exit
 25350                                          
 25351                                  L_error_incorrect_type:
 25352 000136C2 488B3C25[00000000]              mov rdi, qword [stderr]
 25353 000136CA 48BE-                           mov rsi, fmt_type
 25353 000136CC [5905000000000000] 
 25354 000136D4 B800000000                      mov rax, 0
 25355                                  	ENTER
    33 000136D9 C8000000            <1>  enter 0, 0
    34 000136DD 4883E4F0            <1>  and rsp, ~15
 25356 000136E1 E8(00000000)                    call fprintf
 25357                                  	LEAVE
    38 000136E6 C9                  <1>  leave
 25358 000136E7 48C7C0FCFFFFFF                  mov rax, -4
 25359 000136EE E8(00000000)                    call exit
 25360                                  
 25361                                  L_error_division_by_zero:
 25362 000136F3 488B3C25[00000000]              mov rdi, qword [stderr]
 25363 000136FB 48BE-                           mov rsi, fmt_division_by_zero
 25363 000136FD [9A05000000000000] 
 25364 00013705 B800000000                      mov rax, 0
 25365                                  	ENTER
    33 0001370A C8000000            <1>  enter 0, 0
    34 0001370E 4883E4F0            <1>  and rsp, ~15
 25366 00013712 E8(00000000)                    call fprintf
 25367                                  	LEAVE
    38 00013717 C9                  <1>  leave
 25368 00013718 48C7C0F8FFFFFF                  mov rax, -8
 25369 0001371F E8(00000000)                    call exit
 25370                                  
 25371                                  section .data
 25372                                  fmt_char:
 25373 00000478 256300                          db `%c\0`
 25374                                  fmt_arg_count_0:
 25375 0000047B 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 25375 00000484 74696E67207A65726F-
 25375 0000048D 20617267756D656E74-
 25375 00000496 732E20466F756E6420-
 25375 0000049F 25640A00           
 25376                                  fmt_arg_count_1:
 25377 000004A3 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 25377 000004AC 74696E67206F6E6520-
 25377 000004B5 617267756D656E742E-
 25377 000004BE 20466F756E64202564-
 25377 000004C7 0A00               
 25378                                  fmt_arg_count_12:
 25379 000004C9 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 25379 000004D2 74696E67206F6E6520-
 25379 000004DB 726571756972656420-
 25379 000004E4 616E64206F6E65206F-
 25379 000004ED 7074696F6E616C2061-
 25379 000004F6 7267756D656E742E20-
 25379 000004FF 466F756E642025640A-
 25379 00000508 00                 
 25380                                  fmt_arg_count_2:
 25381 00000509 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 25381 00000512 74696E672074776F20-
 25381 0000051B 617267756D656E7473-
 25381 00000524 2E20466F756E642025-
 25381 0000052D 640A00             
 25382                                  fmt_arg_count_3:
 25383 00000530 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 25383 00000539 74696E672074687265-
 25383 00000542 6520617267756D656E-
 25383 0000054B 74732E20466F756E64-
 25383 00000554 2025640A00         
 25384                                  fmt_type:
 25385 00000559 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 25385 00000562 696F6E207061737365-
 25385 0000056B 6420696E636F727265-
 25385 00000574 637420747970650A00 
 25386                                  fmt_integer_range:
 25387 0000057D 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 25387 00000586 7265637420696E7465-
 25387 0000058F 6765722072616E6765-
 25387 00000598 0A00               
 25388                                  fmt_division_by_zero:
 25389 0000059A 212121204469766973-             db `!!! Division by zero\n\0`
 25389 000005A3 696F6E206279207A65-
 25389 000005AC 726F0A00           
 25390                                  fmt_scheme_error_part_1:
 25391 000005B0 0A2121212054686520-             db `\n!!! The procedure \0`
 25391 000005B9 70726F636564757265-
 25391 000005C2 2000               
 25392                                  fmt_scheme_error_part_2:
 25393 000005C4 2061736B656420746F-             db ` asked to terminate the program\n`
 25393 000005CD 207465726D696E6174-
 25393 000005D6 65207468652070726F-
 25393 000005DF 6772616D0A         
 25394 000005E4 202020207769746820-             db `    with the following message:\n\n\0`
 25394 000005ED 74686520666F6C6C6F-
 25394 000005F6 77696E67206D657373-
 25394 000005FF 6167653A0A0A00     
 25395                                  fmt_scheme_error_part_3:
 25396 00000606 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 25396 0000060F 210A0A00           
