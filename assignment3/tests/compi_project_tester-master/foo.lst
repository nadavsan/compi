     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 1
    84 00000007 010000000000000001-     	dq 1, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 0
    86 00000018 000000000000000001-     	dq 0, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 5
    88 00000029 050000000000000001-     	dq 5, 1
    88 00000032 00000000000000     
    89                                  
    90                                  section .bss
    91                                  free_var_0:	; location of null?
    92 00000000 ????????????????        	resq 1
    93                                  free_var_1:	; location of pair?
    94 00000008 ????????????????        	resq 1
    95                                  free_var_2:	; location of void?
    96 00000010 ????????????????        	resq 1
    97                                  free_var_3:	; location of char?
    98 00000018 ????????????????        	resq 1
    99                                  free_var_4:	; location of string?
   100 00000020 ????????????????        	resq 1
   101                                  free_var_5:	; location of symbol?
   102 00000028 ????????????????        	resq 1
   103                                  free_var_6:	; location of vector?
   104 00000030 ????????????????        	resq 1
   105                                  free_var_7:	; location of procedure?
   106 00000038 ????????????????        	resq 1
   107                                  free_var_8:	; location of real?
   108 00000040 ????????????????        	resq 1
   109                                  free_var_9:	; location of rational?
   110 00000048 ????????????????        	resq 1
   111                                  free_var_10:	; location of boolean?
   112 00000050 ????????????????        	resq 1
   113                                  free_var_11:	; location of number?
   114 00000058 ????????????????        	resq 1
   115                                  free_var_12:	; location of collection?
   116 00000060 ????????????????        	resq 1
   117                                  free_var_13:	; location of cons
   118 00000068 ????????????????        	resq 1
   119                                  free_var_14:	; location of display-sexpr
   120 00000070 ????????????????        	resq 1
   121                                  free_var_15:	; location of write-char
   122 00000078 ????????????????        	resq 1
   123                                  free_var_16:	; location of car
   124 00000080 ????????????????        	resq 1
   125                                  free_var_17:	; location of cdr
   126 00000088 ????????????????        	resq 1
   127                                  free_var_18:	; location of string-length
   128 00000090 ????????????????        	resq 1
   129                                  free_var_19:	; location of vector-length
   130 00000098 ????????????????        	resq 1
   131                                  free_var_20:	; location of real->integer
   132 000000A0 ????????????????        	resq 1
   133                                  free_var_21:	; location of exit
   134 000000A8 ????????????????        	resq 1
   135                                  free_var_22:	; location of integer->real
   136 000000B0 ????????????????        	resq 1
   137                                  free_var_23:	; location of rational->real
   138 000000B8 ????????????????        	resq 1
   139                                  free_var_24:	; location of char->integer
   140 000000C0 ????????????????        	resq 1
   141                                  free_var_25:	; location of integer->char
   142 000000C8 ????????????????        	resq 1
   143                                  free_var_26:	; location of trng
   144 000000D0 ????????????????        	resq 1
   145                                  free_var_27:	; location of zero?
   146 000000D8 ????????????????        	resq 1
   147                                  free_var_28:	; location of integer?
   148 000000E0 ????????????????        	resq 1
   149                                  free_var_29:	; location of __bin-apply
   150 000000E8 ????????????????        	resq 1
   151                                  free_var_30:	; location of __bin-add-rr
   152 000000F0 ????????????????        	resq 1
   153                                  free_var_31:	; location of __bin-sub-rr
   154 000000F8 ????????????????        	resq 1
   155                                  free_var_32:	; location of __bin-mul-rr
   156 00000100 ????????????????        	resq 1
   157                                  free_var_33:	; location of __bin-div-rr
   158 00000108 ????????????????        	resq 1
   159                                  free_var_34:	; location of __bin-add-qq
   160 00000110 ????????????????        	resq 1
   161                                  free_var_35:	; location of __bin-sub-qq
   162 00000118 ????????????????        	resq 1
   163                                  free_var_36:	; location of __bin-mul-qq
   164 00000120 ????????????????        	resq 1
   165                                  free_var_37:	; location of __bin-div-qq
   166 00000128 ????????????????        	resq 1
   167                                  free_var_38:	; location of error
   168 00000130 ????????????????        	resq 1
   169                                  free_var_39:	; location of __bin-less-than-rr
   170 00000138 ????????????????        	resq 1
   171                                  free_var_40:	; location of __bin-less-than-qq
   172 00000140 ????????????????        	resq 1
   173                                  free_var_41:	; location of __bin-equal-rr
   174 00000148 ????????????????        	resq 1
   175                                  free_var_42:	; location of __bin-equal-qq
   176 00000150 ????????????????        	resq 1
   177                                  free_var_43:	; location of quotient
   178 00000158 ????????????????        	resq 1
   179                                  free_var_44:	; location of remainder
   180 00000160 ????????????????        	resq 1
   181                                  free_var_45:	; location of set-car!
   182 00000168 ????????????????        	resq 1
   183                                  free_var_46:	; location of set-cdr!
   184 00000170 ????????????????        	resq 1
   185                                  free_var_47:	; location of string-ref
   186 00000178 ????????????????        	resq 1
   187                                  free_var_48:	; location of vector-ref
   188 00000180 ????????????????        	resq 1
   189                                  free_var_49:	; location of vector-set!
   190 00000188 ????????????????        	resq 1
   191                                  free_var_50:	; location of string-set!
   192 00000190 ????????????????        	resq 1
   193                                  free_var_51:	; location of make-vector
   194 00000198 ????????????????        	resq 1
   195                                  free_var_52:	; location of make-string
   196 000001A0 ????????????????        	resq 1
   197                                  free_var_53:	; location of numerator
   198 000001A8 ????????????????        	resq 1
   199                                  free_var_54:	; location of denominator
   200 000001B0 ????????????????        	resq 1
   201                                  free_var_55:	; location of eq?
   202 000001B8 ????????????????        	resq 1
   203                                  free_var_56:	; location of fact
   204 000001C0 ????????????????        	resq 1
   205                                  free_var_57:	; location of +
   206 000001C8 ????????????????        	resq 1
   207                                  free_var_58:	; location of -
   208 000001D0 ????????????????        	resq 1
   209                                  
   210                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   211                                  global main
   212                                  section .text
   213                                  main:
   214 00000000 C8000000                        enter 0, 0
   215                                          
   216                                  	; building closure for null?
   217 00000004 48BF-                   	mov rdi, free_var_0
   217 00000006 [0000000000000000] 
   218 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   218 00000010 [8A6D000000000000] 
   219 00000018 E8966C0000              	call bind_primitive
   220                                  
   221                                  	; building closure for pair?
   222 0000001D 48BF-                   	mov rdi, free_var_1
   222 0000001F [0800000000000000] 
   223 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   223 00000029 [C06D000000000000] 
   224 00000031 E87D6C0000              	call bind_primitive
   225                                  
   226                                  	; building closure for void?
   227 00000036 48BF-                   	mov rdi, free_var_2
   227 00000038 [1000000000000000] 
   228 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   228 00000042 [F66D000000000000] 
   229 0000004A E8646C0000              	call bind_primitive
   230                                  
   231                                  	; building closure for char?
   232 0000004F 48BF-                   	mov rdi, free_var_3
   232 00000051 [1800000000000000] 
   233 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   233 0000005B [2C6E000000000000] 
   234 00000063 E84B6C0000              	call bind_primitive
   235                                  
   236                                  	; building closure for string?
   237 00000068 48BF-                   	mov rdi, free_var_4
   237 0000006A [2000000000000000] 
   238 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   238 00000074 [626E000000000000] 
   239 0000007C E8326C0000              	call bind_primitive
   240                                  
   241                                  	; building closure for symbol?
   242 00000081 48BF-                   	mov rdi, free_var_5
   242 00000083 [2800000000000000] 
   243 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   243 0000008D [986E000000000000] 
   244 00000095 E8196C0000              	call bind_primitive
   245                                  
   246                                  	; building closure for vector?
   247 0000009A 48BF-                   	mov rdi, free_var_6
   247 0000009C [3000000000000000] 
   248 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   248 000000A6 [CE6E000000000000] 
   249 000000AE E8006C0000              	call bind_primitive
   250                                  
   251                                  	; building closure for procedure?
   252 000000B3 48BF-                   	mov rdi, free_var_7
   252 000000B5 [3800000000000000] 
   253 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   253 000000BF [046F000000000000] 
   254 000000C7 E8E76B0000              	call bind_primitive
   255                                  
   256                                  	; building closure for real?
   257 000000CC 48BF-                   	mov rdi, free_var_8
   257 000000CE [4000000000000000] 
   258 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   258 000000D8 [3A6F000000000000] 
   259 000000E0 E8CE6B0000              	call bind_primitive
   260                                  
   261                                  	; building closure for rational?
   262 000000E5 48BF-                   	mov rdi, free_var_9
   262 000000E7 [4800000000000000] 
   263 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   263 000000F1 [706F000000000000] 
   264 000000F9 E8B56B0000              	call bind_primitive
   265                                  
   266                                  	; building closure for boolean?
   267 000000FE 48BF-                   	mov rdi, free_var_10
   267 00000100 [5000000000000000] 
   268 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   268 0000010A [A66F000000000000] 
   269 00000112 E89C6B0000              	call bind_primitive
   270                                  
   271                                  	; building closure for number?
   272 00000117 48BF-                   	mov rdi, free_var_11
   272 00000119 [5800000000000000] 
   273 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   273 00000123 [DE6F000000000000] 
   274 0000012B E8836B0000              	call bind_primitive
   275                                  
   276                                  	; building closure for collection?
   277 00000130 48BF-                   	mov rdi, free_var_12
   277 00000132 [6000000000000000] 
   278 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   278 0000013C [1670000000000000] 
   279 00000144 E86A6B0000              	call bind_primitive
   280                                  
   281                                  	; building closure for cons
   282 00000149 48BF-                   	mov rdi, free_var_13
   282 0000014B [6800000000000000] 
   283 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   283 00000155 [4E70000000000000] 
   284 0000015D E8516B0000              	call bind_primitive
   285                                  
   286                                  	; building closure for display-sexpr
   287 00000162 48BF-                   	mov rdi, free_var_14
   287 00000164 [7000000000000000] 
   288 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   288 0000016E [8270000000000000] 
   289 00000176 E8386B0000              	call bind_primitive
   290                                  
   291                                  	; building closure for write-char
   292 0000017B 48BF-                   	mov rdi, free_var_15
   292 0000017D [7800000000000000] 
   293 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   293 00000187 [AC70000000000000] 
   294 0000018F E81F6B0000              	call bind_primitive
   295                                  
   296                                  	; building closure for car
   297 00000194 48BF-                   	mov rdi, free_var_16
   297 00000196 [8000000000000000] 
   298 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   298 000001A0 [0371000000000000] 
   299 000001A8 E8066B0000              	call bind_primitive
   300                                  
   301                                  	; building closure for cdr
   302 000001AD 48BF-                   	mov rdi, free_var_17
   302 000001AF [8800000000000000] 
   303 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   303 000001B9 [2B71000000000000] 
   304 000001C1 E8ED6A0000              	call bind_primitive
   305                                  
   306                                  	; building closure for string-length
   307 000001C6 48BF-                   	mov rdi, free_var_18
   307 000001C8 [9000000000000000] 
   308 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   308 000001D2 [5371000000000000] 
   309 000001DA E8D46A0000              	call bind_primitive
   310                                  
   311                                  	; building closure for vector-length
   312 000001DF 48BF-                   	mov rdi, free_var_19
   312 000001E1 [9800000000000000] 
   313 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   313 000001EB [8071000000000000] 
   314 000001F3 E8BB6A0000              	call bind_primitive
   315                                  
   316                                  	; building closure for real->integer
   317 000001F8 48BF-                   	mov rdi, free_var_20
   317 000001FA [A000000000000000] 
   318 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   318 00000204 [AD71000000000000] 
   319 0000020C E8A26A0000              	call bind_primitive
   320                                  
   321                                  	; building closure for exit
   322 00000211 48BF-                   	mov rdi, free_var_21
   322 00000213 [A800000000000000] 
   323 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   323 0000021D [E071000000000000] 
   324 00000225 E8896A0000              	call bind_primitive
   325                                  
   326                                  	; building closure for integer->real
   327 0000022A 48BF-                   	mov rdi, free_var_22
   327 0000022C [B000000000000000] 
   328 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   328 00000236 [FD71000000000000] 
   329 0000023E E8706A0000              	call bind_primitive
   330                                  
   331                                  	; building closure for rational->real
   332 00000243 48BF-                   	mov rdi, free_var_23
   332 00000245 [B800000000000000] 
   333 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   333 0000024F [3A72000000000000] 
   334 00000257 E8576A0000              	call bind_primitive
   335                                  
   336                                  	; building closure for char->integer
   337 0000025C 48BF-                   	mov rdi, free_var_24
   337 0000025E [C000000000000000] 
   338 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   338 00000268 [7972000000000000] 
   339 00000270 E83E6A0000              	call bind_primitive
   340                                  
   341                                  	; building closure for integer->char
   342 00000275 48BF-                   	mov rdi, free_var_25
   342 00000277 [C800000000000000] 
   343 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   343 00000281 [AE72000000000000] 
   344 00000289 E8256A0000              	call bind_primitive
   345                                  
   346                                  	; building closure for trng
   347 0000028E 48BF-                   	mov rdi, free_var_26
   347 00000290 [D000000000000000] 
   348 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   348 0000029A [0873000000000000] 
   349 000002A2 E80C6A0000              	call bind_primitive
   350                                  
   351                                  	; building closure for zero?
   352 000002A7 48BF-                   	mov rdi, free_var_27
   352 000002A9 [D800000000000000] 
   353 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   353 000002B3 [2B73000000000000] 
   354 000002BB E8F3690000              	call bind_primitive
   355                                  
   356                                  	; building closure for integer?
   357 000002C0 48BF-                   	mov rdi, free_var_28
   357 000002C2 [E000000000000000] 
   358 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   358 000002CC [8673000000000000] 
   359 000002D4 E8DA690000              	call bind_primitive
   360                                  
   361                                  	; building closure for __bin-apply
   362 000002D9 48BF-                   	mov rdi, free_var_29
   362 000002DB [E800000000000000] 
   363 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   363 000002E5 [DB6C000000000000] 
   364 000002ED E8C1690000              	call bind_primitive
   365                                  
   366                                  	; building closure for __bin-add-rr
   367 000002F2 48BF-                   	mov rdi, free_var_30
   367 000002F4 [F000000000000000] 
   368 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   368 000002FE [C373000000000000] 
   369 00000306 E8A8690000              	call bind_primitive
   370                                  
   371                                  	; building closure for __bin-sub-rr
   372 0000030B 48BF-                   	mov rdi, free_var_31
   372 0000030D [F800000000000000] 
   373 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   373 00000317 [0774000000000000] 
   374 0000031F E88F690000              	call bind_primitive
   375                                  
   376                                  	; building closure for __bin-mul-rr
   377 00000324 48BF-                   	mov rdi, free_var_32
   377 00000326 [0001000000000000] 
   378 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   378 00000330 [4B74000000000000] 
   379 00000338 E876690000              	call bind_primitive
   380                                  
   381                                  	; building closure for __bin-div-rr
   382 0000033D 48BF-                   	mov rdi, free_var_33
   382 0000033F [0801000000000000] 
   383 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   383 00000349 [8F74000000000000] 
   384 00000351 E85D690000              	call bind_primitive
   385                                  
   386                                  	; building closure for __bin-add-qq
   387 00000356 48BF-                   	mov rdi, free_var_34
   387 00000358 [1001000000000000] 
   388 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   388 00000362 [E174000000000000] 
   389 0000036A E844690000              	call bind_primitive
   390                                  
   391                                  	; building closure for __bin-sub-qq
   392 0000036F 48BF-                   	mov rdi, free_var_35
   392 00000371 [1801000000000000] 
   393 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   393 0000037B [4975000000000000] 
   394 00000383 E82B690000              	call bind_primitive
   395                                  
   396                                  	; building closure for __bin-mul-qq
   397 00000388 48BF-                   	mov rdi, free_var_36
   397 0000038A [2001000000000000] 
   398 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   398 00000394 [B175000000000000] 
   399 0000039C E812690000              	call bind_primitive
   400                                  
   401                                  	; building closure for __bin-div-qq
   402 000003A1 48BF-                   	mov rdi, free_var_37
   402 000003A3 [2801000000000000] 
   403 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   403 000003AD [0976000000000000] 
   404 000003B5 E8F9680000              	call bind_primitive
   405                                  
   406                                  	; building closure for error
   407 000003BA 48BF-                   	mov rdi, free_var_38
   407 000003BC [3001000000000000] 
   408 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   408 000003C6 [D776000000000000] 
   409 000003CE E8E0680000              	call bind_primitive
   410                                  
   411                                  	; building closure for __bin-less-than-rr
   412 000003D3 48BF-                   	mov rdi, free_var_39
   412 000003D5 [3801000000000000] 
   413 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   413 000003DF [8E77000000000000] 
   414 000003E7 E8C7680000              	call bind_primitive
   415                                  
   416                                  	; building closure for __bin-less-than-qq
   417 000003EC 48BF-                   	mov rdi, free_var_40
   417 000003EE [4001000000000000] 
   418 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   418 000003F8 [E577000000000000] 
   419 00000400 E8AE680000              	call bind_primitive
   420                                  
   421                                  	; building closure for __bin-equal-rr
   422 00000405 48BF-                   	mov rdi, free_var_41
   422 00000407 [4801000000000000] 
   423 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   423 00000411 [4878000000000000] 
   424 00000419 E895680000              	call bind_primitive
   425                                  
   426                                  	; building closure for __bin-equal-qq
   427 0000041E 48BF-                   	mov rdi, free_var_42
   427 00000420 [5001000000000000] 
   428 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   428 0000042A [9F78000000000000] 
   429 00000432 E87C680000              	call bind_primitive
   430                                  
   431                                  	; building closure for quotient
   432 00000437 48BF-                   	mov rdi, free_var_43
   432 00000439 [5801000000000000] 
   433 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   433 00000443 [0279000000000000] 
   434 0000044B E863680000              	call bind_primitive
   435                                  
   436                                  	; building closure for remainder
   437 00000450 48BF-                   	mov rdi, free_var_44
   437 00000452 [6001000000000000] 
   438 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   438 0000045C [6879000000000000] 
   439 00000464 E84A680000              	call bind_primitive
   440                                  
   441                                  	; building closure for set-car!
   442 00000469 48BF-                   	mov rdi, free_var_45
   442 0000046B [6801000000000000] 
   443 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   443 00000475 [CE79000000000000] 
   444 0000047D E831680000              	call bind_primitive
   445                                  
   446                                  	; building closure for set-cdr!
   447 00000482 48BF-                   	mov rdi, free_var_46
   447 00000484 [7001000000000000] 
   448 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   448 0000048E [047A000000000000] 
   449 00000496 E818680000              	call bind_primitive
   450                                  
   451                                  	; building closure for string-ref
   452 0000049B 48BF-                   	mov rdi, free_var_47
   452 0000049D [7801000000000000] 
   453 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   453 000004A7 [3A7A000000000000] 
   454 000004AF E8FF670000              	call bind_primitive
   455                                  
   456                                  	; building closure for vector-ref
   457 000004B4 48BF-                   	mov rdi, free_var_48
   457 000004B6 [8001000000000000] 
   458 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   458 000004C0 [A57A000000000000] 
   459 000004C8 E8E6670000              	call bind_primitive
   460                                  
   461                                  	; building closure for vector-set!
   462 000004CD 48BF-                   	mov rdi, free_var_49
   462 000004CF [8801000000000000] 
   463 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   463 000004D9 [017B000000000000] 
   464 000004E1 E8CD670000              	call bind_primitive
   465                                  
   466                                  	; building closure for string-set!
   467 000004E6 48BF-                   	mov rdi, free_var_50
   467 000004E8 [9001000000000000] 
   468 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   468 000004F2 [6B7B000000000000] 
   469 000004FA E8B4670000              	call bind_primitive
   470                                  
   471                                  	; building closure for make-vector
   472 000004FF 48BF-                   	mov rdi, free_var_51
   472 00000501 [9801000000000000] 
   473 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   473 0000050B [E07B000000000000] 
   474 00000513 E89B670000              	call bind_primitive
   475                                  
   476                                  	; building closure for make-string
   477 00000518 48BF-                   	mov rdi, free_var_52
   477 0000051A [A001000000000000] 
   478 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   478 00000524 [4A7C000000000000] 
   479 0000052C E882670000              	call bind_primitive
   480                                  
   481                                  	; building closure for numerator
   482 00000531 48BF-                   	mov rdi, free_var_53
   482 00000533 [A801000000000000] 
   483 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   483 0000053D [BC7C000000000000] 
   484 00000545 E869670000              	call bind_primitive
   485                                  
   486                                  	; building closure for denominator
   487 0000054A 48BF-                   	mov rdi, free_var_54
   487 0000054C [B001000000000000] 
   488 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   488 00000556 [E97C000000000000] 
   489 0000055E E850670000              	call bind_primitive
   490                                  
   491                                  	; building closure for eq?
   492 00000563 48BF-                   	mov rdi, free_var_55
   492 00000565 [B801000000000000] 
   493 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   493 0000056F [167D000000000000] 
   494 00000577 E837670000              	call bind_primitive
   495                                  
   496 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   497 00000581 E89C610000              	call malloc
   498 00000586 50                      	push rax
   499 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   500 0000058C E891610000              	call malloc
   501 00000591 50                      	push rax
   502 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   503 00000597 E886610000              	call malloc
   504 0000059C 488B7D10                	mov rdi, ENV
   505 000005A0 BE00000000              	mov rsi, 0
   506 000005A5 BA01000000              	mov rdx, 1
   507                                  .L_lambda_simple_env_loop_0150:	; ext_env[i + 1] <-- env[i]
   508 000005AA 4883FE00                	cmp rsi, 0
   509 000005AE 7410                    	je .L_lambda_simple_env_end_0150
   510 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   511 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   512 000005B8 48FFC6                  	inc rsi
   513 000005BB 48FFC2                  	inc rdx
   514 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_0150
   515                                  .L_lambda_simple_env_end_0150:
   516 000005C0 5B                      	pop rbx
   517 000005C1 BE00000000              	mov rsi, 0
   518                                  .L_lambda_simple_params_loop_0150:	; copy params
   519 000005C6 4883FE00                	cmp rsi, 0
   520 000005CA 740E                    	je .L_lambda_simple_params_end_0150
   521 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   522 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   523 000005D5 48FFC6                  	inc rsi
   524 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_0150
   525                                  .L_lambda_simple_params_end_0150:
   526 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   527 000005DD 4889C3                  	mov rbx, rax
   528 000005E0 58                      	pop rax
   529 000005E1 C60005                  	mov byte [rax], T_closure
   530 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   531 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0150
   532 000005F0 E98C040000              	jmp .L_lambda_simple_end_0150
   533                                  .L_lambda_simple_code_0150:	; lambda-simple body
   534 000005F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
   535 000005FB 740B                    	je .L_lambda_simple_arity_check_ok_0150
   536 000005FD FF742410                	push qword [rsp + 8 * 2]
   537 00000601 6A01                    	push 1
   538 00000603 E9D3600000              	jmp L_error_incorrect_arity_simple
   539                                  .L_lambda_simple_arity_check_ok_0150:
   540 00000608 C8000000                	enter 0, 0
   541 0000060C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   542 00000611 E80C610000              	call malloc
   543 00000616 50                      	push rax
   544 00000617 BF08000000              	mov rdi, 8 * 1	; new rib
   545 0000061C E801610000              	call malloc
   546 00000621 50                      	push rax
   547 00000622 BF10000000              	mov rdi, 8 * 2	; extended env
   548 00000627 E8F6600000              	call malloc
   549 0000062C 488B7D10                	mov rdi, ENV
   550 00000630 BE00000000              	mov rsi, 0
   551 00000635 BA01000000              	mov rdx, 1
   552                                  .L_lambda_simple_env_loop_0151:	; ext_env[i + 1] <-- env[i]
   553 0000063A 4883FE01                	cmp rsi, 1
   554 0000063E 7410                    	je .L_lambda_simple_env_end_0151
   555 00000640 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   556 00000644 48890CD0                	mov qword [rax + 8 * rdx], rcx
   557 00000648 48FFC6                  	inc rsi
   558 0000064B 48FFC2                  	inc rdx
   559 0000064E EBEA                    	jmp .L_lambda_simple_env_loop_0151
   560                                  .L_lambda_simple_env_end_0151:
   561 00000650 5B                      	pop rbx
   562 00000651 BE00000000              	mov rsi, 0
   563                                  .L_lambda_simple_params_loop_0151:	; copy params
   564 00000656 4883FE01                	cmp rsi, 1
   565 0000065A 740E                    	je .L_lambda_simple_params_end_0151
   566 0000065C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   567 00000661 488914F3                	mov qword [rbx + 8 * rsi], rdx
   568 00000665 48FFC6                  	inc rsi
   569 00000668 EBEC                    	jmp .L_lambda_simple_params_loop_0151
   570                                  .L_lambda_simple_params_end_0151:
   571 0000066A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   572 0000066D 4889C3                  	mov rbx, rax
   573 00000670 58                      	pop rax
   574 00000671 C60005                  	mov byte [rax], T_closure
   575 00000674 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   576 00000678 48C74009[85060000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0151
   577 00000680 E9F8030000              	jmp .L_lambda_simple_end_0151
   578                                  .L_lambda_simple_code_0151:	; lambda-simple body
   579 00000685 48837C241001            	cmp qword [rsp + 8 * 2], 1
   580 0000068B 740B                    	je .L_lambda_simple_arity_check_ok_0151
   581 0000068D FF742410                	push qword [rsp + 8 * 2]
   582 00000691 6A01                    	push 1
   583 00000693 E943600000              	jmp L_error_incorrect_arity_simple
   584                                  .L_lambda_simple_arity_check_ok_0151:
   585 00000698 C8000000                	enter 0, 0
   586 0000069C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   587 000006A0 50                      	push rax
   588 000006A1 6A01                    	push 1
   589 000006A3 488B0425[D8000000]      	mov rax, qword [free_var_27]
   590                                  	assert_closure(rax)
    42 000006AB 803805              <1>  cmp byte [%1], %2
    43 000006AE 0F8562780000        <1>  jne L_error_incorrect_type
   591 000006B4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   592 000006B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
   593                                  
   594 000006BA 483D[02000000]                  	cmp rax, sob_boolean_false
   595                                  
   596 000006C0 0F842E010000                    	je .L_if_else_0010
   597 000006C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   598 000006CB E852600000              	call malloc
   599 000006D0 50                      	push rax
   600 000006D1 BF08000000              	mov rdi, 8 * 1	; new rib
   601 000006D6 E847600000              	call malloc
   602 000006DB 50                      	push rax
   603 000006DC BF18000000              	mov rdi, 8 * 3	; extended env
   604 000006E1 E83C600000              	call malloc
   605 000006E6 488B7D10                	mov rdi, ENV
   606 000006EA BE00000000              	mov rsi, 0
   607 000006EF BA01000000              	mov rdx, 1
   608                                  .L_lambda_simple_env_loop_0155:	; ext_env[i + 1] <-- env[i]
   609 000006F4 4883FE02                	cmp rsi, 2
   610 000006F8 7410                    	je .L_lambda_simple_env_end_0155
   611 000006FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   612 000006FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   613 00000702 48FFC6                  	inc rsi
   614 00000705 48FFC2                  	inc rdx
   615 00000708 EBEA                    	jmp .L_lambda_simple_env_loop_0155
   616                                  .L_lambda_simple_env_end_0155:
   617 0000070A 5B                      	pop rbx
   618 0000070B BE00000000              	mov rsi, 0
   619                                  .L_lambda_simple_params_loop_0155:	; copy params
   620 00000710 4883FE01                	cmp rsi, 1
   621 00000714 740E                    	je .L_lambda_simple_params_end_0155
   622 00000716 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   623 0000071B 488914F3                	mov qword [rbx + 8 * rsi], rdx
   624 0000071F 48FFC6                  	inc rsi
   625 00000722 EBEC                    	jmp .L_lambda_simple_params_loop_0155
   626                                  .L_lambda_simple_params_end_0155:
   627 00000724 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   628 00000727 4889C3                  	mov rbx, rax
   629 0000072A 58                      	pop rax
   630 0000072B C60005                  	mov byte [rax], T_closure
   631 0000072E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   632 00000732 48C74009[3F070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0155
   633 0000073A E9B0000000              	jmp .L_lambda_simple_end_0155
   634                                  .L_lambda_simple_code_0155:	; lambda-simple body
   635 0000073F 48837C241001            	cmp qword [rsp + 8 * 2], 1
   636 00000745 740B                    	je .L_lambda_simple_arity_check_ok_0155
   637 00000747 FF742410                	push qword [rsp + 8 * 2]
   638 0000074B 6A01                    	push 1
   639 0000074D E9895F0000              	jmp L_error_incorrect_arity_simple
   640                                  .L_lambda_simple_arity_check_ok_0155:
   641 00000752 C8000000                	enter 0, 0
   642 00000756 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   643 0000075B E8C25F0000              	call malloc
   644 00000760 50                      	push rax
   645 00000761 BF08000000              	mov rdi, 8 * 1	; new rib
   646 00000766 E8B75F0000              	call malloc
   647 0000076B 50                      	push rax
   648 0000076C BF20000000              	mov rdi, 8 * 4	; extended env
   649 00000771 E8AC5F0000              	call malloc
   650 00000776 488B7D10                	mov rdi, ENV
   651 0000077A BE00000000              	mov rsi, 0
   652 0000077F BA01000000              	mov rdx, 1
   653                                  .L_lambda_simple_env_loop_0156:	; ext_env[i + 1] <-- env[i]
   654 00000784 4883FE03                	cmp rsi, 3
   655 00000788 7410                    	je .L_lambda_simple_env_end_0156
   656 0000078A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   657 0000078E 48890CD0                	mov qword [rax + 8 * rdx], rcx
   658 00000792 48FFC6                  	inc rsi
   659 00000795 48FFC2                  	inc rdx
   660 00000798 EBEA                    	jmp .L_lambda_simple_env_loop_0156
   661                                  .L_lambda_simple_env_end_0156:
   662 0000079A 5B                      	pop rbx
   663 0000079B BE00000000              	mov rsi, 0
   664                                  .L_lambda_simple_params_loop_0156:	; copy params
   665 000007A0 4883FE01                	cmp rsi, 1
   666 000007A4 740E                    	je .L_lambda_simple_params_end_0156
   667 000007A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   668 000007AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
   669 000007AF 48FFC6                  	inc rsi
   670 000007B2 EBEC                    	jmp .L_lambda_simple_params_loop_0156
   671                                  .L_lambda_simple_params_end_0156:
   672 000007B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   673 000007B7 4889C3                  	mov rbx, rax
   674 000007BA 58                      	pop rax
   675 000007BB C60005                  	mov byte [rax], T_closure
   676 000007BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   677 000007C2 48C74009[CC070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0156
   678 000007CA EB1F                    	jmp .L_lambda_simple_end_0156
   679                                  .L_lambda_simple_code_0156:	; lambda-simple body
   680 000007CC 48837C241001            	cmp qword [rsp + 8 * 2], 1
   681 000007D2 740B                    	je .L_lambda_simple_arity_check_ok_0156
   682 000007D4 FF742410                	push qword [rsp + 8 * 2]
   683 000007D8 6A01                    	push 1
   684 000007DA E9FC5E0000              	jmp L_error_incorrect_arity_simple
   685                                  .L_lambda_simple_arity_check_ok_0156:
   686 000007DF C8000000                	enter 0, 0
   687 000007E3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   688 000007E7 C9                      	leave
   689 000007E8 C21800                  	ret 8 * (2 + 1)
   690                                  .L_lambda_simple_end_0156:	; new closure is in rax
   691 000007EB C9                      	leave
   692 000007EC C21800                  	ret 8 * (2 + 1)
   693                                  .L_lambda_simple_end_0155:	; new closure is in rax
   694                                  
   695 000007EF E985020000                      	jmp .L_if_end_0010
   696                                  
   697                                          	.L_if_else_0010:
   698 000007F4 48B8-                   	mov rax,L_constants + 6
   698 000007F6 [0600000000000000] 
   699 000007FE 50                      	push rax
   700 000007FF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   701 00000803 50                      	push rax
   702 00000804 6A02                    	push 2
   703 00000806 488B0425[D0010000]      	mov rax, qword [free_var_58]
   704                                  	assert_closure(rax)
    42 0000080E 803805              <1>  cmp byte [%1], %2
    43 00000811 0F85FF760000        <1>  jne L_error_incorrect_type
   705 00000817 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   706 0000081A FF5009                  	call SOB_CLOSURE_CODE(rax)
   707 0000081D 50                      	push rax
   708 0000081E 6A01                    	push 1
   709 00000820 488B4510                	mov rax, qword [rbp + 8 * 2]
   710                                  
   711 00000824 488B00                                            	mov rax, qword[rax + 8 * 0]
   712                                  
   713 00000827 488B00                                            	mov rax, qword[rax + 8 * 0]
   714 0000082A 50                      	push rax
   715 0000082B 6A01                    	push 1
   716 0000082D 488B4510                	mov rax, qword [rbp + 8 * 2]
   717                                  
   718 00000831 488B00                                            	mov rax, qword[rax + 8 * 0]
   719                                  
   720 00000834 488B00                                            	mov rax, qword[rax + 8 * 0]
   721                                  	assert_closure(rax)
    42 00000837 803805              <1>  cmp byte [%1], %2
    43 0000083A 0F85D6760000        <1>  jne L_error_incorrect_type
   722 00000840 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   723 00000843 FF5009                  	call SOB_CLOSURE_CODE(rax)
   724                                  	assert_closure(rax)
    42 00000846 803805              <1>  cmp byte [%1], %2
    43 00000849 0F85C7760000        <1>  jne L_error_incorrect_type
   725 0000084F FF7001                  	push SOB_CLOSURE_ENV(rax) 
   726 00000852 FF5009                  	call SOB_CLOSURE_CODE(rax)
   727 00000855 50                      	push rax
   728 00000856 6A01                    	push 1
   729 00000858 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   730 0000085D E8C05E0000              	call malloc
   731 00000862 50                      	push rax
   732 00000863 BF08000000              	mov rdi, 8 * 1	; new rib
   733 00000868 E8B55E0000              	call malloc
   734 0000086D 50                      	push rax
   735 0000086E BF18000000              	mov rdi, 8 * 3	; extended env
   736 00000873 E8AA5E0000              	call malloc
   737 00000878 488B7D10                	mov rdi, ENV
   738 0000087C BE00000000              	mov rsi, 0
   739 00000881 BA01000000              	mov rdx, 1
   740                                  .L_lambda_simple_env_loop_0152:	; ext_env[i + 1] <-- env[i]
   741 00000886 4883FE02                	cmp rsi, 2
   742 0000088A 7410                    	je .L_lambda_simple_env_end_0152
   743 0000088C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   744 00000890 48890CD0                	mov qword [rax + 8 * rdx], rcx
   745 00000894 48FFC6                  	inc rsi
   746 00000897 48FFC2                  	inc rdx
   747 0000089A EBEA                    	jmp .L_lambda_simple_env_loop_0152
   748                                  .L_lambda_simple_env_end_0152:
   749 0000089C 5B                      	pop rbx
   750 0000089D BE00000000              	mov rsi, 0
   751                                  .L_lambda_simple_params_loop_0152:	; copy params
   752 000008A2 4883FE01                	cmp rsi, 1
   753 000008A6 740E                    	je .L_lambda_simple_params_end_0152
   754 000008A8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   755 000008AD 488914F3                	mov qword [rbx + 8 * rsi], rdx
   756 000008B1 48FFC6                  	inc rsi
   757 000008B4 EBEC                    	jmp .L_lambda_simple_params_loop_0152
   758                                  .L_lambda_simple_params_end_0152:
   759 000008B6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   760 000008B9 4889C3                  	mov rbx, rax
   761 000008BC 58                      	pop rax
   762 000008BD C60005                  	mov byte [rax], T_closure
   763 000008C0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   764 000008C4 48C74009[D1080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0152
   765 000008CC E999010000              	jmp .L_lambda_simple_end_0152
   766                                  .L_lambda_simple_code_0152:	; lambda-simple body
   767 000008D1 48837C241001            	cmp qword [rsp + 8 * 2], 1
   768 000008D7 740B                    	je .L_lambda_simple_arity_check_ok_0152
   769 000008D9 FF742410                	push qword [rsp + 8 * 2]
   770 000008DD 6A01                    	push 1
   771 000008DF E9F75D0000              	jmp L_error_incorrect_arity_simple
   772                                  .L_lambda_simple_arity_check_ok_0152:
   773 000008E4 C8000000                	enter 0, 0
   774 000008E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   775 000008ED E8305E0000              	call malloc
   776 000008F2 50                      	push rax
   777 000008F3 BF08000000              	mov rdi, 8 * 1	; new rib
   778 000008F8 E8255E0000              	call malloc
   779 000008FD 50                      	push rax
   780 000008FE BF20000000              	mov rdi, 8 * 4	; extended env
   781 00000903 E81A5E0000              	call malloc
   782 00000908 488B7D10                	mov rdi, ENV
   783 0000090C BE00000000              	mov rsi, 0
   784 00000911 BA01000000              	mov rdx, 1
   785                                  .L_lambda_simple_env_loop_0153:	; ext_env[i + 1] <-- env[i]
   786 00000916 4883FE03                	cmp rsi, 3
   787 0000091A 7410                    	je .L_lambda_simple_env_end_0153
   788 0000091C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   789 00000920 48890CD0                	mov qword [rax + 8 * rdx], rcx
   790 00000924 48FFC6                  	inc rsi
   791 00000927 48FFC2                  	inc rdx
   792 0000092A EBEA                    	jmp .L_lambda_simple_env_loop_0153
   793                                  .L_lambda_simple_env_end_0153:
   794 0000092C 5B                      	pop rbx
   795 0000092D BE00000000              	mov rsi, 0
   796                                  .L_lambda_simple_params_loop_0153:	; copy params
   797 00000932 4883FE01                	cmp rsi, 1
   798 00000936 740E                    	je .L_lambda_simple_params_end_0153
   799 00000938 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   800 0000093D 488914F3                	mov qword [rbx + 8 * rsi], rdx
   801 00000941 48FFC6                  	inc rsi
   802 00000944 EBEC                    	jmp .L_lambda_simple_params_loop_0153
   803                                  .L_lambda_simple_params_end_0153:
   804 00000946 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   805 00000949 4889C3                  	mov rbx, rax
   806 0000094C 58                      	pop rax
   807 0000094D C60005                  	mov byte [rax], T_closure
   808 00000950 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   809 00000954 48C74009[61090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0153
   810 0000095C E905010000              	jmp .L_lambda_simple_end_0153
   811                                  .L_lambda_simple_code_0153:	; lambda-simple body
   812 00000961 48837C241001            	cmp qword [rsp + 8 * 2], 1
   813 00000967 740B                    	je .L_lambda_simple_arity_check_ok_0153
   814 00000969 FF742410                	push qword [rsp + 8 * 2]
   815 0000096D 6A01                    	push 1
   816 0000096F E9675D0000              	jmp L_error_incorrect_arity_simple
   817                                  .L_lambda_simple_arity_check_ok_0153:
   818 00000974 C8000000                	enter 0, 0
   819 00000978 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   820 0000097D E8A05D0000              	call malloc
   821 00000982 50                      	push rax
   822 00000983 BF08000000              	mov rdi, 8 * 1	; new rib
   823 00000988 E8955D0000              	call malloc
   824 0000098D 50                      	push rax
   825 0000098E BF28000000              	mov rdi, 8 * 5	; extended env
   826 00000993 E88A5D0000              	call malloc
   827 00000998 488B7D10                	mov rdi, ENV
   828 0000099C BE00000000              	mov rsi, 0
   829 000009A1 BA01000000              	mov rdx, 1
   830                                  .L_lambda_simple_env_loop_0154:	; ext_env[i + 1] <-- env[i]
   831 000009A6 4883FE04                	cmp rsi, 4
   832 000009AA 7410                    	je .L_lambda_simple_env_end_0154
   833 000009AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   834 000009B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
   835 000009B4 48FFC6                  	inc rsi
   836 000009B7 48FFC2                  	inc rdx
   837 000009BA EBEA                    	jmp .L_lambda_simple_env_loop_0154
   838                                  .L_lambda_simple_env_end_0154:
   839 000009BC 5B                      	pop rbx
   840 000009BD BE00000000              	mov rsi, 0
   841                                  .L_lambda_simple_params_loop_0154:	; copy params
   842 000009C2 4883FE01                	cmp rsi, 1
   843 000009C6 740E                    	je .L_lambda_simple_params_end_0154
   844 000009C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   845 000009CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
   846 000009D1 48FFC6                  	inc rsi
   847 000009D4 EBEC                    	jmp .L_lambda_simple_params_loop_0154
   848                                  .L_lambda_simple_params_end_0154:
   849 000009D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   850 000009D9 4889C3                  	mov rbx, rax
   851 000009DC 58                      	pop rax
   852 000009DD C60005                  	mov byte [rax], T_closure
   853 000009E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   854 000009E4 48C74009[EE090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0154
   855 000009EC EB74                    	jmp .L_lambda_simple_end_0154
   856                                  .L_lambda_simple_code_0154:	; lambda-simple body
   857 000009EE 48837C241001            	cmp qword [rsp + 8 * 2], 1
   858 000009F4 740B                    	je .L_lambda_simple_arity_check_ok_0154
   859 000009F6 FF742410                	push qword [rsp + 8 * 2]
   860 000009FA 6A01                    	push 1
   861 000009FC E9DA5C0000              	jmp L_error_incorrect_arity_simple
   862                                  .L_lambda_simple_arity_check_ok_0154:
   863 00000A01 C8000000                	enter 0, 0
   864 00000A05 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   865 00000A09 50                      	push rax
   866 00000A0A 6A01                    	push 1
   867 00000A0C 488B4510                	mov rax, qword [rbp + 8 * 2]
   868                                  
   869 00000A10 488B00                                            	mov rax, qword[rax + 8 * 0]
   870                                  
   871 00000A13 488B00                                            	mov rax, qword[rax + 8 * 0]
   872 00000A16 50                      	push rax
   873 00000A17 6A01                    	push 1
   874 00000A19 488B4510                	mov rax, qword [rbp + 8 * 2]
   875                                  
   876 00000A1D 488B4008                                          	mov rax, qword[rax + 8 * 1]
   877                                  
   878 00000A21 488B00                                            	mov rax, qword[rax + 8 * 0]
   879                                  	assert_closure(rax)
    42 00000A24 803805              <1>  cmp byte [%1], %2
    43 00000A27 0F85E9740000        <1>  jne L_error_incorrect_type
   880 00000A2D FF7001                  	push SOB_CLOSURE_ENV(rax) 
   881 00000A30 FF5009                  	call SOB_CLOSURE_CODE(rax)
   882                                  	assert_closure(rax)
    42 00000A33 803805              <1>  cmp byte [%1], %2
    43 00000A36 0F85DA740000        <1>  jne L_error_incorrect_type
   883 00000A3C FF7001                  	push SOB_CLOSURE_ENV(rax) 
   884 00000A3F FF5009                  	call SOB_CLOSURE_CODE(rax)
   885 00000A42 50                      	push rax
   886 00000A43 6A01                    	push 1
   887 00000A45 488B4510                	mov rax, qword [rbp + 8 * 2]
   888                                  
   889 00000A49 488B00                                            	mov rax, qword[rax + 8 * 0]
   890                                  
   891 00000A4C 488B00                                            	mov rax, qword[rax + 8 * 0]
   892                                  	assert_closure(rax)
    42 00000A4F 803805              <1>  cmp byte [%1], %2
    43 00000A52 0F85BE740000        <1>  jne L_error_incorrect_type
   893 00000A58 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   894 00000A5B FF5009                  	call SOB_CLOSURE_CODE(rax)
   895 00000A5E C9                      	leave
   896 00000A5F C21800                  	ret 8 * (2 + 1)
   897                                  .L_lambda_simple_end_0154:	; new closure is in rax
   898 00000A62 C9                      	leave
   899 00000A63 C21800                  	ret 8 * (2 + 1)
   900                                  .L_lambda_simple_end_0153:	; new closure is in rax
   901 00000A66 C9                      	leave
   902 00000A67 C21800                  	ret 8 * (2 + 1)
   903                                  .L_lambda_simple_end_0152:	; new closure is in rax
   904                                  	assert_closure(rax)
    42 00000A6A 803805              <1>  cmp byte [%1], %2
    43 00000A6D 0F85A3740000        <1>  jne L_error_incorrect_type
   905 00000A73 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   906 00000A76 FF5009                  	call SOB_CLOSURE_CODE(rax)
   907                                  
   908                                          	.L_if_end_0010:
   909 00000A79 C9                      	leave
   910 00000A7A C21800                  	ret 8 * (2 + 1)
   911                                  .L_lambda_simple_end_0151:	; new closure is in rax
   912 00000A7D C9                      	leave
   913 00000A7E C21800                  	ret 8 * (2 + 1)
   914                                  .L_lambda_simple_end_0150:	; new closure is in rax
   915 00000A81 50                      	push rax
   916 00000A82 6A01                    	push 1
   917 00000A84 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   918 00000A89 E8945C0000              	call malloc
   919 00000A8E 50                      	push rax
   920 00000A8F BF00000000              	mov rdi, 8 * 0	; new rib
   921 00000A94 E8895C0000              	call malloc
   922 00000A99 50                      	push rax
   923 00000A9A BF08000000              	mov rdi, 8 * 1	; extended env
   924 00000A9F E87E5C0000              	call malloc
   925 00000AA4 488B7D10                	mov rdi, ENV
   926 00000AA8 BE00000000              	mov rsi, 0
   927 00000AAD BA01000000              	mov rdx, 1
   928                                  .L_lambda_simple_env_loop_0157:	; ext_env[i + 1] <-- env[i]
   929 00000AB2 4883FE00                	cmp rsi, 0
   930 00000AB6 7410                    	je .L_lambda_simple_env_end_0157
   931 00000AB8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   932 00000ABC 48890CD0                	mov qword [rax + 8 * rdx], rcx
   933 00000AC0 48FFC6                  	inc rsi
   934 00000AC3 48FFC2                  	inc rdx
   935 00000AC6 EBEA                    	jmp .L_lambda_simple_env_loop_0157
   936                                  .L_lambda_simple_env_end_0157:
   937 00000AC8 5B                      	pop rbx
   938 00000AC9 BE00000000              	mov rsi, 0
   939                                  .L_lambda_simple_params_loop_0157:	; copy params
   940 00000ACE 4883FE00                	cmp rsi, 0
   941 00000AD2 740E                    	je .L_lambda_simple_params_end_0157
   942 00000AD4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   943 00000AD9 488914F3                	mov qword [rbx + 8 * rsi], rdx
   944 00000ADD 48FFC6                  	inc rsi
   945 00000AE0 EBEC                    	jmp .L_lambda_simple_params_loop_0157
   946                                  .L_lambda_simple_params_end_0157:
   947 00000AE2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   948 00000AE5 4889C3                  	mov rbx, rax
   949 00000AE8 58                      	pop rax
   950 00000AE9 C60005                  	mov byte [rax], T_closure
   951 00000AEC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   952 00000AF0 48C74009[FA0A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0157
   953 00000AF8 EB35                    	jmp .L_lambda_simple_end_0157
   954                                  .L_lambda_simple_code_0157:	; lambda-simple body
   955 00000AFA 48837C241001            	cmp qword [rsp + 8 * 2], 1
   956 00000B00 740B                    	je .L_lambda_simple_arity_check_ok_0157
   957 00000B02 FF742410                	push qword [rsp + 8 * 2]
   958 00000B06 6A01                    	push 1
   959 00000B08 E9CE5B0000              	jmp L_error_incorrect_arity_simple
   960                                  .L_lambda_simple_arity_check_ok_0157:
   961 00000B0D C8000000                	enter 0, 0
   962 00000B11 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   963 00000B15 50                      	push rax
   964 00000B16 6A01                    	push 1
   965 00000B18 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   966                                  	assert_closure(rax)
    42 00000B1C 803805              <1>  cmp byte [%1], %2
    43 00000B1F 0F85F1730000        <1>  jne L_error_incorrect_type
   967 00000B25 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   968 00000B28 FF5009                  	call SOB_CLOSURE_CODE(rax)
   969 00000B2B C9                      	leave
   970 00000B2C C21800                  	ret 8 * (2 + 1)
   971                                  .L_lambda_simple_end_0157:	; new closure is in rax
   972                                  	assert_closure(rax)
    42 00000B2F 803805              <1>  cmp byte [%1], %2
    43 00000B32 0F85DE730000        <1>  jne L_error_incorrect_type
   973 00000B38 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   974 00000B3B FF5009                  	call SOB_CLOSURE_CODE(rax)
   975 00000B3E 50                      	push rax
   976 00000B3F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   977 00000B44 E8D95B0000              	call malloc
   978 00000B49 50                      	push rax
   979 00000B4A BF00000000              	mov rdi, 8 * 0	; new rib
   980 00000B4F E8CE5B0000              	call malloc
   981 00000B54 50                      	push rax
   982 00000B55 BF08000000              	mov rdi, 8 * 1	; extended env
   983 00000B5A E8C35B0000              	call malloc
   984 00000B5F 488B7D10                	mov rdi, ENV
   985 00000B63 BE00000000              	mov rsi, 0
   986 00000B68 BA01000000              	mov rdx, 1
   987                                  .L_lambda_simple_env_loop_0158:	; ext_env[i + 1] <-- env[i]
   988 00000B6D 4883FE00                	cmp rsi, 0
   989 00000B71 7410                    	je .L_lambda_simple_env_end_0158
   990 00000B73 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   991 00000B77 48890CD0                	mov qword [rax + 8 * rdx], rcx
   992 00000B7B 48FFC6                  	inc rsi
   993 00000B7E 48FFC2                  	inc rdx
   994 00000B81 EBEA                    	jmp .L_lambda_simple_env_loop_0158
   995                                  .L_lambda_simple_env_end_0158:
   996 00000B83 5B                      	pop rbx
   997 00000B84 BE00000000              	mov rsi, 0
   998                                  .L_lambda_simple_params_loop_0158:	; copy params
   999 00000B89 4883FE00                	cmp rsi, 0
  1000 00000B8D 740E                    	je .L_lambda_simple_params_end_0158
  1001 00000B8F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1002 00000B94 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1003 00000B98 48FFC6                  	inc rsi
  1004 00000B9B EBEC                    	jmp .L_lambda_simple_params_loop_0158
  1005                                  .L_lambda_simple_params_end_0158:
  1006 00000B9D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1007 00000BA0 4889C3                  	mov rbx, rax
  1008 00000BA3 58                      	pop rax
  1009 00000BA4 C60005                  	mov byte [rax], T_closure
  1010 00000BA7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1011 00000BAB 48C74009[B80B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0158
  1012 00000BB3 E97E030000              	jmp .L_lambda_simple_end_0158
  1013                                  .L_lambda_simple_code_0158:	; lambda-simple body
  1014 00000BB8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1015 00000BBE 740B                    	je .L_lambda_simple_arity_check_ok_0158
  1016 00000BC0 FF742410                	push qword [rsp + 8 * 2]
  1017 00000BC4 6A01                    	push 1
  1018 00000BC6 E9105B0000              	jmp L_error_incorrect_arity_simple
  1019                                  .L_lambda_simple_arity_check_ok_0158:
  1020 00000BCB C8000000                	enter 0, 0
  1021 00000BCF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1022 00000BD4 E8495B0000              	call malloc
  1023 00000BD9 50                      	push rax
  1024 00000BDA BF08000000              	mov rdi, 8 * 1	; new rib
  1025 00000BDF E83E5B0000              	call malloc
  1026 00000BE4 50                      	push rax
  1027 00000BE5 BF10000000              	mov rdi, 8 * 2	; extended env
  1028 00000BEA E8335B0000              	call malloc
  1029 00000BEF 488B7D10                	mov rdi, ENV
  1030 00000BF3 BE00000000              	mov rsi, 0
  1031 00000BF8 BA01000000              	mov rdx, 1
  1032                                  .L_lambda_simple_env_loop_0159:	; ext_env[i + 1] <-- env[i]
  1033 00000BFD 4883FE01                	cmp rsi, 1
  1034 00000C01 7410                    	je .L_lambda_simple_env_end_0159
  1035 00000C03 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1036 00000C07 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1037 00000C0B 48FFC6                  	inc rsi
  1038 00000C0E 48FFC2                  	inc rdx
  1039 00000C11 EBEA                    	jmp .L_lambda_simple_env_loop_0159
  1040                                  .L_lambda_simple_env_end_0159:
  1041 00000C13 5B                      	pop rbx
  1042 00000C14 BE00000000              	mov rsi, 0
  1043                                  .L_lambda_simple_params_loop_0159:	; copy params
  1044 00000C19 4883FE01                	cmp rsi, 1
  1045 00000C1D 740E                    	je .L_lambda_simple_params_end_0159
  1046 00000C1F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1047 00000C24 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1048 00000C28 48FFC6                  	inc rsi
  1049 00000C2B EBEC                    	jmp .L_lambda_simple_params_loop_0159
  1050                                  .L_lambda_simple_params_end_0159:
  1051 00000C2D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1052 00000C30 4889C3                  	mov rbx, rax
  1053 00000C33 58                      	pop rax
  1054 00000C34 C60005                  	mov byte [rax], T_closure
  1055 00000C37 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1056 00000C3B 48C74009[480C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0159
  1057 00000C43 E9B6000000              	jmp .L_lambda_simple_end_0159
  1058                                  .L_lambda_simple_code_0159:	; lambda-simple body
  1059 00000C48 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1060 00000C4E 740B                    	je .L_lambda_simple_arity_check_ok_0159
  1061 00000C50 FF742410                	push qword [rsp + 8 * 2]
  1062 00000C54 6A01                    	push 1
  1063 00000C56 E9805A0000              	jmp L_error_incorrect_arity_simple
  1064                                  .L_lambda_simple_arity_check_ok_0159:
  1065 00000C5B C8000000                	enter 0, 0
  1066 00000C5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1067 00000C64 E8B95A0000              	call malloc
  1068 00000C69 50                      	push rax
  1069 00000C6A BF08000000              	mov rdi, 8 * 1	; new rib
  1070 00000C6F E8AE5A0000              	call malloc
  1071 00000C74 50                      	push rax
  1072 00000C75 BF18000000              	mov rdi, 8 * 3	; extended env
  1073 00000C7A E8A35A0000              	call malloc
  1074 00000C7F 488B7D10                	mov rdi, ENV
  1075 00000C83 BE00000000              	mov rsi, 0
  1076 00000C88 BA01000000              	mov rdx, 1
  1077                                  .L_lambda_simple_env_loop_015a:	; ext_env[i + 1] <-- env[i]
  1078 00000C8D 4883FE02                	cmp rsi, 2
  1079 00000C91 7410                    	je .L_lambda_simple_env_end_015a
  1080 00000C93 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1081 00000C97 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1082 00000C9B 48FFC6                  	inc rsi
  1083 00000C9E 48FFC2                  	inc rdx
  1084 00000CA1 EBEA                    	jmp .L_lambda_simple_env_loop_015a
  1085                                  .L_lambda_simple_env_end_015a:
  1086 00000CA3 5B                      	pop rbx
  1087 00000CA4 BE00000000              	mov rsi, 0
  1088                                  .L_lambda_simple_params_loop_015a:	; copy params
  1089 00000CA9 4883FE01                	cmp rsi, 1
  1090 00000CAD 740E                    	je .L_lambda_simple_params_end_015a
  1091 00000CAF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1092 00000CB4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1093 00000CB8 48FFC6                  	inc rsi
  1094 00000CBB EBEC                    	jmp .L_lambda_simple_params_loop_015a
  1095                                  .L_lambda_simple_params_end_015a:
  1096 00000CBD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1097 00000CC0 4889C3                  	mov rbx, rax
  1098 00000CC3 58                      	pop rax
  1099 00000CC4 C60005                  	mov byte [rax], T_closure
  1100 00000CC7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1101 00000CCB 48C74009[D50C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015a
  1102 00000CD3 EB25                    	jmp .L_lambda_simple_end_015a
  1103                                  .L_lambda_simple_code_015a:	; lambda-simple body
  1104 00000CD5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1105 00000CDB 740B                    	je .L_lambda_simple_arity_check_ok_015a
  1106 00000CDD FF742410                	push qword [rsp + 8 * 2]
  1107 00000CE1 6A01                    	push 1
  1108 00000CE3 E9F3590000              	jmp L_error_incorrect_arity_simple
  1109                                  .L_lambda_simple_arity_check_ok_015a:
  1110 00000CE8 C8000000                	enter 0, 0
  1111 00000CEC 488B4510                	mov rax, qword [rbp + 8 * 2]
  1112                                  
  1113 00000CF0 488B00                                            	mov rax, qword[rax + 8 * 0]
  1114                                  
  1115 00000CF3 488B00                                            	mov rax, qword[rax + 8 * 0]
  1116 00000CF6 C9                      	leave
  1117 00000CF7 C21800                  	ret 8 * (2 + 1)
  1118                                  .L_lambda_simple_end_015a:	; new closure is in rax
  1119 00000CFA C9                      	leave
  1120 00000CFB C21800                  	ret 8 * (2 + 1)
  1121                                  .L_lambda_simple_end_0159:	; new closure is in rax
  1122 00000CFE 50                      	push rax
  1123 00000CFF 6A01                    	push 1
  1124 00000D01 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1125 00000D06 E8175A0000              	call malloc
  1126 00000D0B 50                      	push rax
  1127 00000D0C BF08000000              	mov rdi, 8 * 1	; new rib
  1128 00000D11 E80C5A0000              	call malloc
  1129 00000D16 50                      	push rax
  1130 00000D17 BF10000000              	mov rdi, 8 * 2	; extended env
  1131 00000D1C E8015A0000              	call malloc
  1132 00000D21 488B7D10                	mov rdi, ENV
  1133 00000D25 BE00000000              	mov rsi, 0
  1134 00000D2A BA01000000              	mov rdx, 1
  1135                                  .L_lambda_simple_env_loop_015b:	; ext_env[i + 1] <-- env[i]
  1136 00000D2F 4883FE01                	cmp rsi, 1
  1137 00000D33 7410                    	je .L_lambda_simple_env_end_015b
  1138 00000D35 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1139 00000D39 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1140 00000D3D 48FFC6                  	inc rsi
  1141 00000D40 48FFC2                  	inc rdx
  1142 00000D43 EBEA                    	jmp .L_lambda_simple_env_loop_015b
  1143                                  .L_lambda_simple_env_end_015b:
  1144 00000D45 5B                      	pop rbx
  1145 00000D46 BE00000000              	mov rsi, 0
  1146                                  .L_lambda_simple_params_loop_015b:	; copy params
  1147 00000D4B 4883FE01                	cmp rsi, 1
  1148 00000D4F 740E                    	je .L_lambda_simple_params_end_015b
  1149 00000D51 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1150 00000D56 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1151 00000D5A 48FFC6                  	inc rsi
  1152 00000D5D EBEC                    	jmp .L_lambda_simple_params_loop_015b
  1153                                  .L_lambda_simple_params_end_015b:
  1154 00000D5F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1155 00000D62 4889C3                  	mov rbx, rax
  1156 00000D65 58                      	pop rax
  1157 00000D66 C60005                  	mov byte [rax], T_closure
  1158 00000D69 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1159 00000D6D 48C74009[7A0D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015b
  1160 00000D75 E993010000              	jmp .L_lambda_simple_end_015b
  1161                                  .L_lambda_simple_code_015b:	; lambda-simple body
  1162 00000D7A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1163 00000D80 740B                    	je .L_lambda_simple_arity_check_ok_015b
  1164 00000D82 FF742410                	push qword [rsp + 8 * 2]
  1165 00000D86 6A01                    	push 1
  1166 00000D88 E94E590000              	jmp L_error_incorrect_arity_simple
  1167                                  .L_lambda_simple_arity_check_ok_015b:
  1168 00000D8D C8000000                	enter 0, 0
  1169 00000D91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1170 00000D96 E887590000              	call malloc
  1171 00000D9B 50                      	push rax
  1172 00000D9C BF08000000              	mov rdi, 8 * 1	; new rib
  1173 00000DA1 E87C590000              	call malloc
  1174 00000DA6 50                      	push rax
  1175 00000DA7 BF18000000              	mov rdi, 8 * 3	; extended env
  1176 00000DAC E871590000              	call malloc
  1177 00000DB1 488B7D10                	mov rdi, ENV
  1178 00000DB5 BE00000000              	mov rsi, 0
  1179 00000DBA BA01000000              	mov rdx, 1
  1180                                  .L_lambda_simple_env_loop_015c:	; ext_env[i + 1] <-- env[i]
  1181 00000DBF 4883FE02                	cmp rsi, 2
  1182 00000DC3 7410                    	je .L_lambda_simple_env_end_015c
  1183 00000DC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1184 00000DC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1185 00000DCD 48FFC6                  	inc rsi
  1186 00000DD0 48FFC2                  	inc rdx
  1187 00000DD3 EBEA                    	jmp .L_lambda_simple_env_loop_015c
  1188                                  .L_lambda_simple_env_end_015c:
  1189 00000DD5 5B                      	pop rbx
  1190 00000DD6 BE00000000              	mov rsi, 0
  1191                                  .L_lambda_simple_params_loop_015c:	; copy params
  1192 00000DDB 4883FE01                	cmp rsi, 1
  1193 00000DDF 740E                    	je .L_lambda_simple_params_end_015c
  1194 00000DE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1195 00000DE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1196 00000DEA 48FFC6                  	inc rsi
  1197 00000DED EBEC                    	jmp .L_lambda_simple_params_loop_015c
  1198                                  .L_lambda_simple_params_end_015c:
  1199 00000DEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1200 00000DF2 4889C3                  	mov rbx, rax
  1201 00000DF5 58                      	pop rax
  1202 00000DF6 C60005                  	mov byte [rax], T_closure
  1203 00000DF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1204 00000DFD 48C74009[0A0E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015c
  1205 00000E05 E9FF000000              	jmp .L_lambda_simple_end_015c
  1206                                  .L_lambda_simple_code_015c:	; lambda-simple body
  1207 00000E0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1208 00000E10 740B                    	je .L_lambda_simple_arity_check_ok_015c
  1209 00000E12 FF742410                	push qword [rsp + 8 * 2]
  1210 00000E16 6A01                    	push 1
  1211 00000E18 E9BE580000              	jmp L_error_incorrect_arity_simple
  1212                                  .L_lambda_simple_arity_check_ok_015c:
  1213 00000E1D C8000000                	enter 0, 0
  1214 00000E21 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1215 00000E26 E8F7580000              	call malloc
  1216 00000E2B 50                      	push rax
  1217 00000E2C BF08000000              	mov rdi, 8 * 1	; new rib
  1218 00000E31 E8EC580000              	call malloc
  1219 00000E36 50                      	push rax
  1220 00000E37 BF20000000              	mov rdi, 8 * 4	; extended env
  1221 00000E3C E8E1580000              	call malloc
  1222 00000E41 488B7D10                	mov rdi, ENV
  1223 00000E45 BE00000000              	mov rsi, 0
  1224 00000E4A BA01000000              	mov rdx, 1
  1225                                  .L_lambda_simple_env_loop_015d:	; ext_env[i + 1] <-- env[i]
  1226 00000E4F 4883FE03                	cmp rsi, 3
  1227 00000E53 7410                    	je .L_lambda_simple_env_end_015d
  1228 00000E55 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1229 00000E59 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1230 00000E5D 48FFC6                  	inc rsi
  1231 00000E60 48FFC2                  	inc rdx
  1232 00000E63 EBEA                    	jmp .L_lambda_simple_env_loop_015d
  1233                                  .L_lambda_simple_env_end_015d:
  1234 00000E65 5B                      	pop rbx
  1235 00000E66 BE00000000              	mov rsi, 0
  1236                                  .L_lambda_simple_params_loop_015d:	; copy params
  1237 00000E6B 4883FE01                	cmp rsi, 1
  1238 00000E6F 740E                    	je .L_lambda_simple_params_end_015d
  1239 00000E71 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1240 00000E76 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1241 00000E7A 48FFC6                  	inc rsi
  1242 00000E7D EBEC                    	jmp .L_lambda_simple_params_loop_015d
  1243                                  .L_lambda_simple_params_end_015d:
  1244 00000E7F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1245 00000E82 4889C3                  	mov rbx, rax
  1246 00000E85 58                      	pop rax
  1247 00000E86 C60005                  	mov byte [rax], T_closure
  1248 00000E89 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1249 00000E8D 48C74009[970E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015d
  1250 00000E95 EB6E                    	jmp .L_lambda_simple_end_015d
  1251                                  .L_lambda_simple_code_015d:	; lambda-simple body
  1252 00000E97 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1253 00000E9D 740B                    	je .L_lambda_simple_arity_check_ok_015d
  1254 00000E9F FF742410                	push qword [rsp + 8 * 2]
  1255 00000EA3 6A01                    	push 1
  1256 00000EA5 E931580000              	jmp L_error_incorrect_arity_simple
  1257                                  .L_lambda_simple_arity_check_ok_015d:
  1258 00000EAA C8000000                	enter 0, 0
  1259 00000EAE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1260 00000EB2 50                      	push rax
  1261 00000EB3 6A01                    	push 1
  1262 00000EB5 488B4510                	mov rax, qword [rbp + 8 * 2]
  1263                                  
  1264 00000EB9 488B00                                            	mov rax, qword[rax + 8 * 0]
  1265                                  
  1266 00000EBC 488B00                                            	mov rax, qword[rax + 8 * 0]
  1267                                  	assert_closure(rax)
    42 00000EBF 803805              <1>  cmp byte [%1], %2
    43 00000EC2 0F854E700000        <1>  jne L_error_incorrect_type
  1268 00000EC8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1269 00000ECB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1270 00000ECE 50                      	push rax
  1271 00000ECF 6A01                    	push 1
  1272 00000ED1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1273 00000ED5 50                      	push rax
  1274 00000ED6 6A01                    	push 1
  1275 00000ED8 488B4510                	mov rax, qword [rbp + 8 * 2]
  1276                                  
  1277 00000EDC 488B4008                                          	mov rax, qword[rax + 8 * 1]
  1278                                  
  1279 00000EE0 488B00                                            	mov rax, qword[rax + 8 * 0]
  1280                                  	assert_closure(rax)
    42 00000EE3 803805              <1>  cmp byte [%1], %2
    43 00000EE6 0F852A700000        <1>  jne L_error_incorrect_type
  1281 00000EEC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1282 00000EEF FF5009                  	call SOB_CLOSURE_CODE(rax)
  1283                                  	assert_closure(rax)
    42 00000EF2 803805              <1>  cmp byte [%1], %2
    43 00000EF5 0F851B700000        <1>  jne L_error_incorrect_type
  1284 00000EFB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1285 00000EFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  1286 00000F01 C9                      	leave
  1287 00000F02 C21800                  	ret 8 * (2 + 1)
  1288                                  .L_lambda_simple_end_015d:	; new closure is in rax
  1289 00000F05 C9                      	leave
  1290 00000F06 C21800                  	ret 8 * (2 + 1)
  1291                                  .L_lambda_simple_end_015c:	; new closure is in rax
  1292 00000F09 C9                      	leave
  1293 00000F0A C21800                  	ret 8 * (2 + 1)
  1294                                  .L_lambda_simple_end_015b:	; new closure is in rax
  1295 00000F0D 50                      	push rax
  1296 00000F0E 6A01                    	push 1
  1297 00000F10 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1298                                  	assert_closure(rax)
    42 00000F14 803805              <1>  cmp byte [%1], %2
    43 00000F17 0F85F96F0000        <1>  jne L_error_incorrect_type
  1299 00000F1D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1300 00000F20 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1301                                  	assert_closure(rax)
    42 00000F23 803805              <1>  cmp byte [%1], %2
    43 00000F26 0F85EA6F0000        <1>  jne L_error_incorrect_type
  1302 00000F2C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1303 00000F2F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1304 00000F32 C9                      	leave
  1305 00000F33 C21800                  	ret 8 * (2 + 1)
  1306                                  .L_lambda_simple_end_0158:	; new closure is in rax
  1307 00000F36 50                      	push rax
  1308 00000F37 6A02                    	push 2
  1309 00000F39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1310 00000F3E E8DF570000              	call malloc
  1311 00000F43 50                      	push rax
  1312 00000F44 BF00000000              	mov rdi, 8 * 0	; new rib
  1313 00000F49 E8D4570000              	call malloc
  1314 00000F4E 50                      	push rax
  1315 00000F4F BF08000000              	mov rdi, 8 * 1	; extended env
  1316 00000F54 E8C9570000              	call malloc
  1317 00000F59 488B7D10                	mov rdi, ENV
  1318 00000F5D BE00000000              	mov rsi, 0
  1319 00000F62 BA01000000              	mov rdx, 1
  1320                                  .L_lambda_simple_env_loop_015e:	; ext_env[i + 1] <-- env[i]
  1321 00000F67 4883FE00                	cmp rsi, 0
  1322 00000F6B 7410                    	je .L_lambda_simple_env_end_015e
  1323 00000F6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1324 00000F71 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1325 00000F75 48FFC6                  	inc rsi
  1326 00000F78 48FFC2                  	inc rdx
  1327 00000F7B EBEA                    	jmp .L_lambda_simple_env_loop_015e
  1328                                  .L_lambda_simple_env_end_015e:
  1329 00000F7D 5B                      	pop rbx
  1330 00000F7E BE00000000              	mov rsi, 0
  1331                                  .L_lambda_simple_params_loop_015e:	; copy params
  1332 00000F83 4883FE00                	cmp rsi, 0
  1333 00000F87 740E                    	je .L_lambda_simple_params_end_015e
  1334 00000F89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1335 00000F8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1336 00000F92 48FFC6                  	inc rsi
  1337 00000F95 EBEC                    	jmp .L_lambda_simple_params_loop_015e
  1338                                  .L_lambda_simple_params_end_015e:
  1339 00000F97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1340 00000F9A 4889C3                  	mov rbx, rax
  1341 00000F9D 58                      	pop rax
  1342 00000F9E C60005                  	mov byte [rax], T_closure
  1343 00000FA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1344 00000FA5 48C74009[B20F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015e
  1345 00000FAD E944560000              	jmp .L_lambda_simple_end_015e
  1346                                  .L_lambda_simple_code_015e:	; lambda-simple body
  1347 00000FB2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  1348 00000FB8 740B                    	je .L_lambda_simple_arity_check_ok_015e
  1349 00000FBA FF742410                	push qword [rsp + 8 * 2]
  1350 00000FBE 6A02                    	push 2
  1351 00000FC0 E916570000              	jmp L_error_incorrect_arity_simple
  1352                                  .L_lambda_simple_arity_check_ok_015e:
  1353 00000FC5 C8000000                	enter 0, 0
  1354 00000FC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1355 00000FCE E84F570000              	call malloc
  1356 00000FD3 50                      	push rax
  1357 00000FD4 BF10000000              	mov rdi, 8 * 2	; new rib
  1358 00000FD9 E844570000              	call malloc
  1359 00000FDE 50                      	push rax
  1360 00000FDF BF10000000              	mov rdi, 8 * 2	; extended env
  1361 00000FE4 E839570000              	call malloc
  1362 00000FE9 488B7D10                	mov rdi, ENV
  1363 00000FED BE00000000              	mov rsi, 0
  1364 00000FF2 BA01000000              	mov rdx, 1
  1365                                  .L_lambda_simple_env_loop_015f:	; ext_env[i + 1] <-- env[i]
  1366 00000FF7 4883FE01                	cmp rsi, 1
  1367 00000FFB 7410                    	je .L_lambda_simple_env_end_015f
  1368 00000FFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1369 00001001 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1370 00001005 48FFC6                  	inc rsi
  1371 00001008 48FFC2                  	inc rdx
  1372 0000100B EBEA                    	jmp .L_lambda_simple_env_loop_015f
  1373                                  .L_lambda_simple_env_end_015f:
  1374 0000100D 5B                      	pop rbx
  1375 0000100E BE00000000              	mov rsi, 0
  1376                                  .L_lambda_simple_params_loop_015f:	; copy params
  1377 00001013 4883FE02                	cmp rsi, 2
  1378 00001017 740E                    	je .L_lambda_simple_params_end_015f
  1379 00001019 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1380 0000101E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1381 00001022 48FFC6                  	inc rsi
  1382 00001025 EBEC                    	jmp .L_lambda_simple_params_loop_015f
  1383                                  .L_lambda_simple_params_end_015f:
  1384 00001027 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1385 0000102A 4889C3                  	mov rbx, rax
  1386 0000102D 58                      	pop rax
  1387 0000102E C60005                  	mov byte [rax], T_closure
  1388 00001031 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1389 00001035 48C74009[42100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_015f
  1390 0000103D E9B0550000              	jmp .L_lambda_simple_end_015f
  1391                                  .L_lambda_simple_code_015f:	; lambda-simple body
  1392 00001042 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1393 00001048 740B                    	je .L_lambda_simple_arity_check_ok_015f
  1394 0000104A FF742410                	push qword [rsp + 8 * 2]
  1395 0000104E 6A01                    	push 1
  1396 00001050 E986560000              	jmp L_error_incorrect_arity_simple
  1397                                  .L_lambda_simple_arity_check_ok_015f:
  1398 00001055 C8000000                	enter 0, 0
  1399 00001059 48B8-                   	mov rax,L_constants + 23
  1399 0000105B [1700000000000000] 
  1400 00001063 50                      	push rax
  1401 00001064 6A01                    	push 1
  1402 00001066 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1403 0000106B E8B2560000              	call malloc
  1404 00001070 50                      	push rax
  1405 00001071 BF08000000              	mov rdi, 8 * 1	; new rib
  1406 00001076 E8A7560000              	call malloc
  1407 0000107B 50                      	push rax
  1408 0000107C BF18000000              	mov rdi, 8 * 3	; extended env
  1409 00001081 E89C560000              	call malloc
  1410 00001086 488B7D10                	mov rdi, ENV
  1411 0000108A BE00000000              	mov rsi, 0
  1412 0000108F BA01000000              	mov rdx, 1
  1413                                  .L_lambda_simple_env_loop_0160:	; ext_env[i + 1] <-- env[i]
  1414 00001094 4883FE02                	cmp rsi, 2
  1415 00001098 7410                    	je .L_lambda_simple_env_end_0160
  1416 0000109A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1417 0000109E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1418 000010A2 48FFC6                  	inc rsi
  1419 000010A5 48FFC2                  	inc rdx
  1420 000010A8 EBEA                    	jmp .L_lambda_simple_env_loop_0160
  1421                                  .L_lambda_simple_env_end_0160:
  1422 000010AA 5B                      	pop rbx
  1423 000010AB BE00000000              	mov rsi, 0
  1424                                  .L_lambda_simple_params_loop_0160:	; copy params
  1425 000010B0 4883FE01                	cmp rsi, 1
  1426 000010B4 740E                    	je .L_lambda_simple_params_end_0160
  1427 000010B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1428 000010BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1429 000010BF 48FFC6                  	inc rsi
  1430 000010C2 EBEC                    	jmp .L_lambda_simple_params_loop_0160
  1431                                  .L_lambda_simple_params_end_0160:
  1432 000010C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1433 000010C7 4889C3                  	mov rbx, rax
  1434 000010CA 58                      	pop rax
  1435 000010CB C60005                  	mov byte [rax], T_closure
  1436 000010CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1437 000010D2 48C74009[DC100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0160
  1438 000010DA EB44                    	jmp .L_lambda_simple_end_0160
  1439                                  .L_lambda_simple_code_0160:	; lambda-simple body
  1440 000010DC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1441 000010E2 740B                    	je .L_lambda_simple_arity_check_ok_0160
  1442 000010E4 FF742410                	push qword [rsp + 8 * 2]
  1443 000010E8 6A01                    	push 1
  1444 000010EA E9EC550000              	jmp L_error_incorrect_arity_simple
  1445                                  .L_lambda_simple_arity_check_ok_0160:
  1446 000010EF C8000000                	enter 0, 0
  1447 000010F3 48B8-                   	mov rax,L_constants + 6
  1447 000010F5 [0600000000000000] 
  1448 000010FD 50                      	push rax
  1449 000010FE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1450 00001102 50                      	push rax
  1451 00001103 6A02                    	push 2
  1452 00001105 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1453                                  	assert_closure(rax)
    42 0000110D 803805              <1>  cmp byte [%1], %2
    43 00001110 0F85006E0000        <1>  jne L_error_incorrect_type
  1454 00001116 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1455 00001119 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1456 0000111C C9                      	leave
  1457 0000111D C21800                  	ret 8 * (2 + 1)
  1458                                  .L_lambda_simple_end_0160:	; new closure is in rax
  1459 00001120 50                      	push rax
  1460 00001121 6A01                    	push 1
  1461 00001123 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1462 00001127 50                      	push rax
  1463 00001128 6A01                    	push 1
  1464 0000112A 488B4510                	mov rax, qword [rbp + 8 * 2]
  1465                                  
  1466 0000112E 488B00                                            	mov rax, qword[rax + 8 * 0]
  1467                                  
  1468 00001131 488B4008                                          	mov rax, qword[rax + 8 * 1]
  1469                                  	assert_closure(rax)
    42 00001135 803805              <1>  cmp byte [%1], %2
    43 00001138 0F85D86D0000        <1>  jne L_error_incorrect_type
  1470 0000113E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1471 00001141 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1472 00001144 50                      	push rax
  1473 00001145 6A01                    	push 1
  1474 00001147 488B4510                	mov rax, qword [rbp + 8 * 2]
  1475                                  
  1476 0000114B 488B00                                            	mov rax, qword[rax + 8 * 0]
  1477                                  
  1478 0000114E 488B00                                            	mov rax, qword[rax + 8 * 0]
  1479 00001151 50                      	push rax
  1480 00001152 6A01                    	push 1
  1481 00001154 488B4510                	mov rax, qword [rbp + 8 * 2]
  1482                                  
  1483 00001158 488B00                                            	mov rax, qword[rax + 8 * 0]
  1484                                  
  1485 0000115B 488B00                                            	mov rax, qword[rax + 8 * 0]
  1486                                  	assert_closure(rax)
    42 0000115E 803805              <1>  cmp byte [%1], %2
    43 00001161 0F85AF6D0000        <1>  jne L_error_incorrect_type
  1487 00001167 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1488 0000116A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1489 0000116D 50                      	push rax
  1490 0000116E 6A01                    	push 1
  1491 00001170 488B4510                	mov rax, qword [rbp + 8 * 2]
  1492                                  
  1493 00001174 488B00                                            	mov rax, qword[rax + 8 * 0]
  1494                                  
  1495 00001177 488B00                                            	mov rax, qword[rax + 8 * 0]
  1496                                  	assert_closure(rax)
    42 0000117A 803805              <1>  cmp byte [%1], %2
    43 0000117D 0F85936D0000        <1>  jne L_error_incorrect_type
  1497 00001183 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1498 00001186 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1499 00001189 50                      	push rax
  1500 0000118A 6A01                    	push 1
  1501 0000118C 488B4510                	mov rax, qword [rbp + 8 * 2]
  1502                                  
  1503 00001190 488B00                                            	mov rax, qword[rax + 8 * 0]
  1504                                  
  1505 00001193 488B00                                            	mov rax, qword[rax + 8 * 0]
  1506                                  	assert_closure(rax)
    42 00001196 803805              <1>  cmp byte [%1], %2
    43 00001199 0F85776D0000        <1>  jne L_error_incorrect_type
  1507 0000119F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1508 000011A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1509 000011A5 50                      	push rax
  1510 000011A6 6A01                    	push 1
  1511 000011A8 488B4510                	mov rax, qword [rbp + 8 * 2]
  1512                                  
  1513 000011AC 488B00                                            	mov rax, qword[rax + 8 * 0]
  1514                                  
  1515 000011AF 488B00                                            	mov rax, qword[rax + 8 * 0]
  1516 000011B2 50                      	push rax
  1517 000011B3 6A01                    	push 1
  1518 000011B5 488B4510                	mov rax, qword [rbp + 8 * 2]
  1519                                  
  1520 000011B9 488B00                                            	mov rax, qword[rax + 8 * 0]
  1521                                  
  1522 000011BC 488B00                                            	mov rax, qword[rax + 8 * 0]
  1523                                  	assert_closure(rax)
    42 000011BF 803805              <1>  cmp byte [%1], %2
    43 000011C2 0F854E6D0000        <1>  jne L_error_incorrect_type
  1524 000011C8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1525 000011CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1526 000011CE 50                      	push rax
  1527 000011CF 6A01                    	push 1
  1528 000011D1 488B4510                	mov rax, qword [rbp + 8 * 2]
  1529                                  
  1530 000011D5 488B00                                            	mov rax, qword[rax + 8 * 0]
  1531                                  
  1532 000011D8 488B00                                            	mov rax, qword[rax + 8 * 0]
  1533                                  	assert_closure(rax)
    42 000011DB 803805              <1>  cmp byte [%1], %2
    43 000011DE 0F85326D0000        <1>  jne L_error_incorrect_type
  1534 000011E4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1535 000011E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1536 000011EA 50                      	push rax
  1537 000011EB 6A01                    	push 1
  1538 000011ED 488B4510                	mov rax, qword [rbp + 8 * 2]
  1539                                  
  1540 000011F1 488B00                                            	mov rax, qword[rax + 8 * 0]
  1541                                  
  1542 000011F4 488B00                                            	mov rax, qword[rax + 8 * 0]
  1543                                  	assert_closure(rax)
    42 000011F7 803805              <1>  cmp byte [%1], %2
    43 000011FA 0F85166D0000        <1>  jne L_error_incorrect_type
  1544 00001200 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1545 00001203 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1546 00001206 50                      	push rax
  1547 00001207 6A01                    	push 1
  1548 00001209 488B4510                	mov rax, qword [rbp + 8 * 2]
  1549                                  
  1550 0000120D 488B00                                            	mov rax, qword[rax + 8 * 0]
  1551                                  
  1552 00001210 488B00                                            	mov rax, qword[rax + 8 * 0]
  1553 00001213 50                      	push rax
  1554 00001214 6A01                    	push 1
  1555 00001216 488B4510                	mov rax, qword [rbp + 8 * 2]
  1556                                  
  1557 0000121A 488B00                                            	mov rax, qword[rax + 8 * 0]
  1558                                  
  1559 0000121D 488B00                                            	mov rax, qword[rax + 8 * 0]
  1560                                  	assert_closure(rax)
    42 00001220 803805              <1>  cmp byte [%1], %2
    43 00001223 0F85ED6C0000        <1>  jne L_error_incorrect_type
  1561 00001229 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1562 0000122C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1563 0000122F 50                      	push rax
  1564 00001230 6A01                    	push 1
  1565 00001232 488B4510                	mov rax, qword [rbp + 8 * 2]
  1566                                  
  1567 00001236 488B00                                            	mov rax, qword[rax + 8 * 0]
  1568                                  
  1569 00001239 488B00                                            	mov rax, qword[rax + 8 * 0]
  1570                                  	assert_closure(rax)
    42 0000123C 803805              <1>  cmp byte [%1], %2
    43 0000123F 0F85D16C0000        <1>  jne L_error_incorrect_type
  1571 00001245 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1572 00001248 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1573 0000124B 50                      	push rax
  1574 0000124C 6A01                    	push 1
  1575 0000124E 488B4510                	mov rax, qword [rbp + 8 * 2]
  1576                                  
  1577 00001252 488B00                                            	mov rax, qword[rax + 8 * 0]
  1578                                  
  1579 00001255 488B00                                            	mov rax, qword[rax + 8 * 0]
  1580                                  	assert_closure(rax)
    42 00001258 803805              <1>  cmp byte [%1], %2
    43 0000125B 0F85B56C0000        <1>  jne L_error_incorrect_type
  1581 00001261 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1582 00001264 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1583 00001267 50                      	push rax
  1584 00001268 6A01                    	push 1
  1585 0000126A 488B4510                	mov rax, qword [rbp + 8 * 2]
  1586                                  
  1587 0000126E 488B00                                            	mov rax, qword[rax + 8 * 0]
  1588                                  
  1589 00001271 488B00                                            	mov rax, qword[rax + 8 * 0]
  1590                                  	assert_closure(rax)
    42 00001274 803805              <1>  cmp byte [%1], %2
    43 00001277 0F85996C0000        <1>  jne L_error_incorrect_type
  1591 0000127D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1592 00001280 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1593                                  	assert_closure(rax)
    42 00001283 803805              <1>  cmp byte [%1], %2
    43 00001286 0F858A6C0000        <1>  jne L_error_incorrect_type
  1594 0000128C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1595 0000128F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1596                                  	assert_closure(rax)
    42 00001292 803805              <1>  cmp byte [%1], %2
    43 00001295 0F857B6C0000        <1>  jne L_error_incorrect_type
  1597 0000129B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1598 0000129E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1599 000012A1 50                      	push rax
  1600 000012A2 6A01                    	push 1
  1601 000012A4 488B4510                	mov rax, qword [rbp + 8 * 2]
  1602                                  
  1603 000012A8 488B00                                            	mov rax, qword[rax + 8 * 0]
  1604                                  
  1605 000012AB 488B00                                            	mov rax, qword[rax + 8 * 0]
  1606 000012AE 50                      	push rax
  1607 000012AF 6A01                    	push 1
  1608 000012B1 488B4510                	mov rax, qword [rbp + 8 * 2]
  1609                                  
  1610 000012B5 488B00                                            	mov rax, qword[rax + 8 * 0]
  1611                                  
  1612 000012B8 488B00                                            	mov rax, qword[rax + 8 * 0]
  1613                                  	assert_closure(rax)
    42 000012BB 803805              <1>  cmp byte [%1], %2
    43 000012BE 0F85526C0000        <1>  jne L_error_incorrect_type
  1614 000012C4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1615 000012C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1616 000012CA 50                      	push rax
  1617 000012CB 6A01                    	push 1
  1618 000012CD 488B4510                	mov rax, qword [rbp + 8 * 2]
  1619                                  
  1620 000012D1 488B00                                            	mov rax, qword[rax + 8 * 0]
  1621                                  
  1622 000012D4 488B00                                            	mov rax, qword[rax + 8 * 0]
  1623                                  	assert_closure(rax)
    42 000012D7 803805              <1>  cmp byte [%1], %2
    43 000012DA 0F85366C0000        <1>  jne L_error_incorrect_type
  1624 000012E0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1625 000012E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1626 000012E6 50                      	push rax
  1627 000012E7 6A01                    	push 1
  1628 000012E9 488B4510                	mov rax, qword [rbp + 8 * 2]
  1629                                  
  1630 000012ED 488B00                                            	mov rax, qword[rax + 8 * 0]
  1631                                  
  1632 000012F0 488B00                                            	mov rax, qword[rax + 8 * 0]
  1633                                  	assert_closure(rax)
    42 000012F3 803805              <1>  cmp byte [%1], %2
    43 000012F6 0F851A6C0000        <1>  jne L_error_incorrect_type
  1634 000012FC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1635 000012FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  1636                                  	assert_closure(rax)
    42 00001302 803805              <1>  cmp byte [%1], %2
    43 00001305 0F850B6C0000        <1>  jne L_error_incorrect_type
  1637 0000130B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1638 0000130E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1639 00001311 50                      	push rax
  1640 00001312 6A01                    	push 1
  1641 00001314 488B4510                	mov rax, qword [rbp + 8 * 2]
  1642                                  
  1643 00001318 488B00                                            	mov rax, qword[rax + 8 * 0]
  1644                                  
  1645 0000131B 488B00                                            	mov rax, qword[rax + 8 * 0]
  1646 0000131E 50                      	push rax
  1647 0000131F 6A01                    	push 1
  1648 00001321 488B4510                	mov rax, qword [rbp + 8 * 2]
  1649                                  
  1650 00001325 488B00                                            	mov rax, qword[rax + 8 * 0]
  1651                                  
  1652 00001328 488B00                                            	mov rax, qword[rax + 8 * 0]
  1653                                  	assert_closure(rax)
    42 0000132B 803805              <1>  cmp byte [%1], %2
    43 0000132E 0F85E26B0000        <1>  jne L_error_incorrect_type
  1654 00001334 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1655 00001337 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1656 0000133A 50                      	push rax
  1657 0000133B 6A01                    	push 1
  1658 0000133D 488B4510                	mov rax, qword [rbp + 8 * 2]
  1659                                  
  1660 00001341 488B00                                            	mov rax, qword[rax + 8 * 0]
  1661                                  
  1662 00001344 488B00                                            	mov rax, qword[rax + 8 * 0]
  1663                                  	assert_closure(rax)
    42 00001347 803805              <1>  cmp byte [%1], %2
    43 0000134A 0F85C66B0000        <1>  jne L_error_incorrect_type
  1664 00001350 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1665 00001353 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1666 00001356 50                      	push rax
  1667 00001357 6A01                    	push 1
  1668 00001359 488B4510                	mov rax, qword [rbp + 8 * 2]
  1669                                  
  1670 0000135D 488B00                                            	mov rax, qword[rax + 8 * 0]
  1671                                  
  1672 00001360 488B00                                            	mov rax, qword[rax + 8 * 0]
  1673                                  	assert_closure(rax)
    42 00001363 803805              <1>  cmp byte [%1], %2
    43 00001366 0F85AA6B0000        <1>  jne L_error_incorrect_type
  1674 0000136C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1675 0000136F FF5009                  	call SOB_CLOSURE_CODE(rax)
  1676 00001372 50                      	push rax
  1677 00001373 6A01                    	push 1
  1678 00001375 488B4510                	mov rax, qword [rbp + 8 * 2]
  1679                                  
  1680 00001379 488B00                                            	mov rax, qword[rax + 8 * 0]
  1681                                  
  1682 0000137C 488B00                                            	mov rax, qword[rax + 8 * 0]
  1683 0000137F 50                      	push rax
  1684 00001380 6A01                    	push 1
  1685 00001382 488B4510                	mov rax, qword [rbp + 8 * 2]
  1686                                  
  1687 00001386 488B00                                            	mov rax, qword[rax + 8 * 0]
  1688                                  
  1689 00001389 488B00                                            	mov rax, qword[rax + 8 * 0]
  1690                                  	assert_closure(rax)
    42 0000138C 803805              <1>  cmp byte [%1], %2
    43 0000138F 0F85816B0000        <1>  jne L_error_incorrect_type
  1691 00001395 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1692 00001398 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1693 0000139B 50                      	push rax
  1694 0000139C 6A01                    	push 1
  1695 0000139E 488B4510                	mov rax, qword [rbp + 8 * 2]
  1696                                  
  1697 000013A2 488B00                                            	mov rax, qword[rax + 8 * 0]
  1698                                  
  1699 000013A5 488B00                                            	mov rax, qword[rax + 8 * 0]
  1700                                  	assert_closure(rax)
    42 000013A8 803805              <1>  cmp byte [%1], %2
    43 000013AB 0F85656B0000        <1>  jne L_error_incorrect_type
  1701 000013B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1702 000013B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1703 000013B7 50                      	push rax
  1704 000013B8 6A01                    	push 1
  1705 000013BA 488B4510                	mov rax, qword [rbp + 8 * 2]
  1706                                  
  1707 000013BE 488B00                                            	mov rax, qword[rax + 8 * 0]
  1708                                  
  1709 000013C1 488B00                                            	mov rax, qword[rax + 8 * 0]
  1710                                  	assert_closure(rax)
    42 000013C4 803805              <1>  cmp byte [%1], %2
    43 000013C7 0F85496B0000        <1>  jne L_error_incorrect_type
  1711 000013CD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1712 000013D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1713 000013D3 50                      	push rax
  1714 000013D4 6A01                    	push 1
  1715 000013D6 488B4510                	mov rax, qword [rbp + 8 * 2]
  1716                                  
  1717 000013DA 488B00                                            	mov rax, qword[rax + 8 * 0]
  1718                                  
  1719 000013DD 488B00                                            	mov rax, qword[rax + 8 * 0]
  1720 000013E0 50                      	push rax
  1721 000013E1 6A01                    	push 1
  1722 000013E3 488B4510                	mov rax, qword [rbp + 8 * 2]
  1723                                  
  1724 000013E7 488B00                                            	mov rax, qword[rax + 8 * 0]
  1725                                  
  1726 000013EA 488B00                                            	mov rax, qword[rax + 8 * 0]
  1727                                  	assert_closure(rax)
    42 000013ED 803805              <1>  cmp byte [%1], %2
    43 000013F0 0F85206B0000        <1>  jne L_error_incorrect_type
  1728 000013F6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1729 000013F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1730 000013FC 50                      	push rax
  1731 000013FD 6A01                    	push 1
  1732 000013FF 488B4510                	mov rax, qword [rbp + 8 * 2]
  1733                                  
  1734 00001403 488B00                                            	mov rax, qword[rax + 8 * 0]
  1735                                  
  1736 00001406 488B00                                            	mov rax, qword[rax + 8 * 0]
  1737                                  	assert_closure(rax)
    42 00001409 803805              <1>  cmp byte [%1], %2
    43 0000140C 0F85046B0000        <1>  jne L_error_incorrect_type
  1738 00001412 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1739 00001415 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1740 00001418 50                      	push rax
  1741 00001419 6A01                    	push 1
  1742 0000141B 488B4510                	mov rax, qword [rbp + 8 * 2]
  1743                                  
  1744 0000141F 488B00                                            	mov rax, qword[rax + 8 * 0]
  1745                                  
  1746 00001422 488B00                                            	mov rax, qword[rax + 8 * 0]
  1747                                  	assert_closure(rax)
    42 00001425 803805              <1>  cmp byte [%1], %2
    43 00001428 0F85E86A0000        <1>  jne L_error_incorrect_type
  1748 0000142E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1749 00001431 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1750 00001434 50                      	push rax
  1751 00001435 6A01                    	push 1
  1752 00001437 488B4510                	mov rax, qword [rbp + 8 * 2]
  1753                                  
  1754 0000143B 488B00                                            	mov rax, qword[rax + 8 * 0]
  1755                                  
  1756 0000143E 488B00                                            	mov rax, qword[rax + 8 * 0]
  1757                                  	assert_closure(rax)
    42 00001441 803805              <1>  cmp byte [%1], %2
    43 00001444 0F85CC6A0000        <1>  jne L_error_incorrect_type
  1758 0000144A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1759 0000144D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1760                                  	assert_closure(rax)
    42 00001450 803805              <1>  cmp byte [%1], %2
    43 00001453 0F85BD6A0000        <1>  jne L_error_incorrect_type
  1761 00001459 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1762 0000145C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1763                                  	assert_closure(rax)
    42 0000145F 803805              <1>  cmp byte [%1], %2
    43 00001462 0F85AE6A0000        <1>  jne L_error_incorrect_type
  1764 00001468 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1765 0000146B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1766 0000146E 50                      	push rax
  1767 0000146F 6A01                    	push 1
  1768 00001471 488B4510                	mov rax, qword [rbp + 8 * 2]
  1769                                  
  1770 00001475 488B00                                            	mov rax, qword[rax + 8 * 0]
  1771                                  
  1772 00001478 488B00                                            	mov rax, qword[rax + 8 * 0]
  1773 0000147B 50                      	push rax
  1774 0000147C 6A01                    	push 1
  1775 0000147E 488B4510                	mov rax, qword [rbp + 8 * 2]
  1776                                  
  1777 00001482 488B00                                            	mov rax, qword[rax + 8 * 0]
  1778                                  
  1779 00001485 488B00                                            	mov rax, qword[rax + 8 * 0]
  1780                                  	assert_closure(rax)
    42 00001488 803805              <1>  cmp byte [%1], %2
    43 0000148B 0F85856A0000        <1>  jne L_error_incorrect_type
  1781 00001491 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1782 00001494 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1783 00001497 50                      	push rax
  1784 00001498 6A01                    	push 1
  1785 0000149A 488B4510                	mov rax, qword [rbp + 8 * 2]
  1786                                  
  1787 0000149E 488B00                                            	mov rax, qword[rax + 8 * 0]
  1788                                  
  1789 000014A1 488B00                                            	mov rax, qword[rax + 8 * 0]
  1790                                  	assert_closure(rax)
    42 000014A4 803805              <1>  cmp byte [%1], %2
    43 000014A7 0F85696A0000        <1>  jne L_error_incorrect_type
  1791 000014AD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1792 000014B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1793 000014B3 50                      	push rax
  1794 000014B4 6A01                    	push 1
  1795 000014B6 488B4510                	mov rax, qword [rbp + 8 * 2]
  1796                                  
  1797 000014BA 488B00                                            	mov rax, qword[rax + 8 * 0]
  1798                                  
  1799 000014BD 488B00                                            	mov rax, qword[rax + 8 * 0]
  1800                                  	assert_closure(rax)
    42 000014C0 803805              <1>  cmp byte [%1], %2
    43 000014C3 0F854D6A0000        <1>  jne L_error_incorrect_type
  1801 000014C9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1802 000014CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  1803                                  	assert_closure(rax)
    42 000014CF 803805              <1>  cmp byte [%1], %2
    43 000014D2 0F853E6A0000        <1>  jne L_error_incorrect_type
  1804 000014D8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1805 000014DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1806 000014DE 50                      	push rax
  1807 000014DF 6A01                    	push 1
  1808 000014E1 488B4510                	mov rax, qword [rbp + 8 * 2]
  1809                                  
  1810 000014E5 488B00                                            	mov rax, qword[rax + 8 * 0]
  1811                                  
  1812 000014E8 488B00                                            	mov rax, qword[rax + 8 * 0]
  1813 000014EB 50                      	push rax
  1814 000014EC 6A01                    	push 1
  1815 000014EE 488B4510                	mov rax, qword [rbp + 8 * 2]
  1816                                  
  1817 000014F2 488B00                                            	mov rax, qword[rax + 8 * 0]
  1818                                  
  1819 000014F5 488B00                                            	mov rax, qword[rax + 8 * 0]
  1820                                  	assert_closure(rax)
    42 000014F8 803805              <1>  cmp byte [%1], %2
    43 000014FB 0F85156A0000        <1>  jne L_error_incorrect_type
  1821 00001501 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1822 00001504 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1823 00001507 50                      	push rax
  1824 00001508 6A01                    	push 1
  1825 0000150A 488B4510                	mov rax, qword [rbp + 8 * 2]
  1826                                  
  1827 0000150E 488B00                                            	mov rax, qword[rax + 8 * 0]
  1828                                  
  1829 00001511 488B00                                            	mov rax, qword[rax + 8 * 0]
  1830                                  	assert_closure(rax)
    42 00001514 803805              <1>  cmp byte [%1], %2
    43 00001517 0F85F9690000        <1>  jne L_error_incorrect_type
  1831 0000151D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1832 00001520 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1833 00001523 50                      	push rax
  1834 00001524 6A01                    	push 1
  1835 00001526 488B4510                	mov rax, qword [rbp + 8 * 2]
  1836                                  
  1837 0000152A 488B00                                            	mov rax, qword[rax + 8 * 0]
  1838                                  
  1839 0000152D 488B00                                            	mov rax, qword[rax + 8 * 0]
  1840                                  	assert_closure(rax)
    42 00001530 803805              <1>  cmp byte [%1], %2
    43 00001533 0F85DD690000        <1>  jne L_error_incorrect_type
  1841 00001539 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1842 0000153C FF5009                  	call SOB_CLOSURE_CODE(rax)
  1843 0000153F 50                      	push rax
  1844 00001540 6A01                    	push 1
  1845 00001542 488B4510                	mov rax, qword [rbp + 8 * 2]
  1846                                  
  1847 00001546 488B00                                            	mov rax, qword[rax + 8 * 0]
  1848                                  
  1849 00001549 488B00                                            	mov rax, qword[rax + 8 * 0]
  1850 0000154C 50                      	push rax
  1851 0000154D 6A01                    	push 1
  1852 0000154F 488B4510                	mov rax, qword [rbp + 8 * 2]
  1853                                  
  1854 00001553 488B00                                            	mov rax, qword[rax + 8 * 0]
  1855                                  
  1856 00001556 488B00                                            	mov rax, qword[rax + 8 * 0]
  1857                                  	assert_closure(rax)
    42 00001559 803805              <1>  cmp byte [%1], %2
    43 0000155C 0F85B4690000        <1>  jne L_error_incorrect_type
  1858 00001562 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1859 00001565 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1860 00001568 50                      	push rax
  1861 00001569 6A01                    	push 1
  1862 0000156B 488B4510                	mov rax, qword [rbp + 8 * 2]
  1863                                  
  1864 0000156F 488B00                                            	mov rax, qword[rax + 8 * 0]
  1865                                  
  1866 00001572 488B00                                            	mov rax, qword[rax + 8 * 0]
  1867                                  	assert_closure(rax)
    42 00001575 803805              <1>  cmp byte [%1], %2
    43 00001578 0F8598690000        <1>  jne L_error_incorrect_type
  1868 0000157E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1869 00001581 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1870 00001584 50                      	push rax
  1871 00001585 6A01                    	push 1
  1872 00001587 488B4510                	mov rax, qword [rbp + 8 * 2]
  1873                                  
  1874 0000158B 488B00                                            	mov rax, qword[rax + 8 * 0]
  1875                                  
  1876 0000158E 488B00                                            	mov rax, qword[rax + 8 * 0]
  1877                                  	assert_closure(rax)
    42 00001591 803805              <1>  cmp byte [%1], %2
    43 00001594 0F857C690000        <1>  jne L_error_incorrect_type
  1878 0000159A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1879 0000159D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1880 000015A0 50                      	push rax
  1881 000015A1 6A01                    	push 1
  1882 000015A3 488B4510                	mov rax, qword [rbp + 8 * 2]
  1883                                  
  1884 000015A7 488B00                                            	mov rax, qword[rax + 8 * 0]
  1885                                  
  1886 000015AA 488B00                                            	mov rax, qword[rax + 8 * 0]
  1887                                  	assert_closure(rax)
    42 000015AD 803805              <1>  cmp byte [%1], %2
    43 000015B0 0F8560690000        <1>  jne L_error_incorrect_type
  1888 000015B6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1889 000015B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1890 000015BC 50                      	push rax
  1891 000015BD 6A01                    	push 1
  1892 000015BF 488B4510                	mov rax, qword [rbp + 8 * 2]
  1893                                  
  1894 000015C3 488B00                                            	mov rax, qword[rax + 8 * 0]
  1895                                  
  1896 000015C6 488B00                                            	mov rax, qword[rax + 8 * 0]
  1897 000015C9 50                      	push rax
  1898 000015CA 6A01                    	push 1
  1899 000015CC 488B4510                	mov rax, qword [rbp + 8 * 2]
  1900                                  
  1901 000015D0 488B00                                            	mov rax, qword[rax + 8 * 0]
  1902                                  
  1903 000015D3 488B00                                            	mov rax, qword[rax + 8 * 0]
  1904                                  	assert_closure(rax)
    42 000015D6 803805              <1>  cmp byte [%1], %2
    43 000015D9 0F8537690000        <1>  jne L_error_incorrect_type
  1905 000015DF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1906 000015E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1907 000015E5 50                      	push rax
  1908 000015E6 6A01                    	push 1
  1909 000015E8 488B4510                	mov rax, qword [rbp + 8 * 2]
  1910                                  
  1911 000015EC 488B00                                            	mov rax, qword[rax + 8 * 0]
  1912                                  
  1913 000015EF 488B00                                            	mov rax, qword[rax + 8 * 0]
  1914                                  	assert_closure(rax)
    42 000015F2 803805              <1>  cmp byte [%1], %2
    43 000015F5 0F851B690000        <1>  jne L_error_incorrect_type
  1915 000015FB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1916 000015FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  1917 00001601 50                      	push rax
  1918 00001602 6A01                    	push 1
  1919 00001604 488B4510                	mov rax, qword [rbp + 8 * 2]
  1920                                  
  1921 00001608 488B00                                            	mov rax, qword[rax + 8 * 0]
  1922                                  
  1923 0000160B 488B00                                            	mov rax, qword[rax + 8 * 0]
  1924                                  	assert_closure(rax)
    42 0000160E 803805              <1>  cmp byte [%1], %2
    43 00001611 0F85FF680000        <1>  jne L_error_incorrect_type
  1925 00001617 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1926 0000161A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1927                                  	assert_closure(rax)
    42 0000161D 803805              <1>  cmp byte [%1], %2
    43 00001620 0F85F0680000        <1>  jne L_error_incorrect_type
  1928 00001626 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1929 00001629 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1930 0000162C 50                      	push rax
  1931 0000162D 6A01                    	push 1
  1932 0000162F 488B4510                	mov rax, qword [rbp + 8 * 2]
  1933                                  
  1934 00001633 488B00                                            	mov rax, qword[rax + 8 * 0]
  1935                                  
  1936 00001636 488B00                                            	mov rax, qword[rax + 8 * 0]
  1937 00001639 50                      	push rax
  1938 0000163A 6A01                    	push 1
  1939 0000163C 488B4510                	mov rax, qword [rbp + 8 * 2]
  1940                                  
  1941 00001640 488B00                                            	mov rax, qword[rax + 8 * 0]
  1942                                  
  1943 00001643 488B00                                            	mov rax, qword[rax + 8 * 0]
  1944                                  	assert_closure(rax)
    42 00001646 803805              <1>  cmp byte [%1], %2
    43 00001649 0F85C7680000        <1>  jne L_error_incorrect_type
  1945 0000164F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1946 00001652 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1947 00001655 50                      	push rax
  1948 00001656 6A01                    	push 1
  1949 00001658 488B4510                	mov rax, qword [rbp + 8 * 2]
  1950                                  
  1951 0000165C 488B00                                            	mov rax, qword[rax + 8 * 0]
  1952                                  
  1953 0000165F 488B00                                            	mov rax, qword[rax + 8 * 0]
  1954                                  	assert_closure(rax)
    42 00001662 803805              <1>  cmp byte [%1], %2
    43 00001665 0F85AB680000        <1>  jne L_error_incorrect_type
  1955 0000166B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1956 0000166E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1957 00001671 50                      	push rax
  1958 00001672 6A01                    	push 1
  1959 00001674 488B4510                	mov rax, qword [rbp + 8 * 2]
  1960                                  
  1961 00001678 488B00                                            	mov rax, qword[rax + 8 * 0]
  1962                                  
  1963 0000167B 488B00                                            	mov rax, qword[rax + 8 * 0]
  1964                                  	assert_closure(rax)
    42 0000167E 803805              <1>  cmp byte [%1], %2
    43 00001681 0F858F680000        <1>  jne L_error_incorrect_type
  1965 00001687 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1966 0000168A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1967 0000168D 50                      	push rax
  1968 0000168E 6A01                    	push 1
  1969 00001690 488B4510                	mov rax, qword [rbp + 8 * 2]
  1970                                  
  1971 00001694 488B00                                            	mov rax, qword[rax + 8 * 0]
  1972                                  
  1973 00001697 488B00                                            	mov rax, qword[rax + 8 * 0]
  1974                                  	assert_closure(rax)
    42 0000169A 803805              <1>  cmp byte [%1], %2
    43 0000169D 0F8573680000        <1>  jne L_error_incorrect_type
  1975 000016A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1976 000016A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1977                                  	assert_closure(rax)
    42 000016A9 803805              <1>  cmp byte [%1], %2
    43 000016AC 0F8564680000        <1>  jne L_error_incorrect_type
  1978 000016B2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1979 000016B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1980                                  	assert_closure(rax)
    42 000016B8 803805              <1>  cmp byte [%1], %2
    43 000016BB 0F8555680000        <1>  jne L_error_incorrect_type
  1981 000016C1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1982 000016C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1983 000016C7 50                      	push rax
  1984 000016C8 6A01                    	push 1
  1985 000016CA 488B4510                	mov rax, qword [rbp + 8 * 2]
  1986                                  
  1987 000016CE 488B00                                            	mov rax, qword[rax + 8 * 0]
  1988                                  
  1989 000016D1 488B00                                            	mov rax, qword[rax + 8 * 0]
  1990 000016D4 50                      	push rax
  1991 000016D5 6A01                    	push 1
  1992 000016D7 488B4510                	mov rax, qword [rbp + 8 * 2]
  1993                                  
  1994 000016DB 488B00                                            	mov rax, qword[rax + 8 * 0]
  1995                                  
  1996 000016DE 488B00                                            	mov rax, qword[rax + 8 * 0]
  1997                                  	assert_closure(rax)
    42 000016E1 803805              <1>  cmp byte [%1], %2
    43 000016E4 0F852C680000        <1>  jne L_error_incorrect_type
  1998 000016EA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1999 000016ED FF5009                  	call SOB_CLOSURE_CODE(rax)
  2000 000016F0 50                      	push rax
  2001 000016F1 6A01                    	push 1
  2002 000016F3 488B4510                	mov rax, qword [rbp + 8 * 2]
  2003                                  
  2004 000016F7 488B00                                            	mov rax, qword[rax + 8 * 0]
  2005                                  
  2006 000016FA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2007                                  	assert_closure(rax)
    42 000016FD 803805              <1>  cmp byte [%1], %2
    43 00001700 0F8510680000        <1>  jne L_error_incorrect_type
  2008 00001706 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2009 00001709 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2010 0000170C 50                      	push rax
  2011 0000170D 6A01                    	push 1
  2012 0000170F 488B4510                	mov rax, qword [rbp + 8 * 2]
  2013                                  
  2014 00001713 488B00                                            	mov rax, qword[rax + 8 * 0]
  2015                                  
  2016 00001716 488B00                                            	mov rax, qword[rax + 8 * 0]
  2017                                  	assert_closure(rax)
    42 00001719 803805              <1>  cmp byte [%1], %2
    43 0000171C 0F85F4670000        <1>  jne L_error_incorrect_type
  2018 00001722 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2019 00001725 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2020 00001728 50                      	push rax
  2021 00001729 6A01                    	push 1
  2022 0000172B 488B4510                	mov rax, qword [rbp + 8 * 2]
  2023                                  
  2024 0000172F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2025                                  
  2026 00001732 488B00                                            	mov rax, qword[rax + 8 * 0]
  2027                                  	assert_closure(rax)
    42 00001735 803805              <1>  cmp byte [%1], %2
    43 00001738 0F85D8670000        <1>  jne L_error_incorrect_type
  2028 0000173E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2029 00001741 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2030                                  	assert_closure(rax)
    42 00001744 803805              <1>  cmp byte [%1], %2
    43 00001747 0F85C9670000        <1>  jne L_error_incorrect_type
  2031 0000174D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2032 00001750 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2033                                  	assert_closure(rax)
    42 00001753 803805              <1>  cmp byte [%1], %2
    43 00001756 0F85BA670000        <1>  jne L_error_incorrect_type
  2034 0000175C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2035 0000175F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2036 00001762 50                      	push rax
  2037 00001763 6A01                    	push 1
  2038 00001765 488B4510                	mov rax, qword [rbp + 8 * 2]
  2039                                  
  2040 00001769 488B00                                            	mov rax, qword[rax + 8 * 0]
  2041                                  
  2042 0000176C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2043 0000176F 50                      	push rax
  2044 00001770 6A01                    	push 1
  2045 00001772 488B4510                	mov rax, qword [rbp + 8 * 2]
  2046                                  
  2047 00001776 488B00                                            	mov rax, qword[rax + 8 * 0]
  2048                                  
  2049 00001779 488B00                                            	mov rax, qword[rax + 8 * 0]
  2050                                  	assert_closure(rax)
    42 0000177C 803805              <1>  cmp byte [%1], %2
    43 0000177F 0F8591670000        <1>  jne L_error_incorrect_type
  2051 00001785 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2052 00001788 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2053 0000178B 50                      	push rax
  2054 0000178C 6A01                    	push 1
  2055 0000178E 488B4510                	mov rax, qword [rbp + 8 * 2]
  2056                                  
  2057 00001792 488B00                                            	mov rax, qword[rax + 8 * 0]
  2058                                  
  2059 00001795 488B00                                            	mov rax, qword[rax + 8 * 0]
  2060                                  	assert_closure(rax)
    42 00001798 803805              <1>  cmp byte [%1], %2
    43 0000179B 0F8575670000        <1>  jne L_error_incorrect_type
  2061 000017A1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2062 000017A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2063 000017A7 50                      	push rax
  2064 000017A8 6A01                    	push 1
  2065 000017AA 488B4510                	mov rax, qword [rbp + 8 * 2]
  2066                                  
  2067 000017AE 488B00                                            	mov rax, qword[rax + 8 * 0]
  2068                                  
  2069 000017B1 488B00                                            	mov rax, qword[rax + 8 * 0]
  2070                                  	assert_closure(rax)
    42 000017B4 803805              <1>  cmp byte [%1], %2
    43 000017B7 0F8559670000        <1>  jne L_error_incorrect_type
  2071 000017BD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2072 000017C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2073 000017C3 50                      	push rax
  2074 000017C4 6A01                    	push 1
  2075 000017C6 488B4510                	mov rax, qword [rbp + 8 * 2]
  2076                                  
  2077 000017CA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2078                                  
  2079 000017CD 488B00                                            	mov rax, qword[rax + 8 * 0]
  2080 000017D0 50                      	push rax
  2081 000017D1 6A01                    	push 1
  2082 000017D3 488B4510                	mov rax, qword [rbp + 8 * 2]
  2083                                  
  2084 000017D7 488B00                                            	mov rax, qword[rax + 8 * 0]
  2085                                  
  2086 000017DA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2087                                  	assert_closure(rax)
    42 000017DD 803805              <1>  cmp byte [%1], %2
    43 000017E0 0F8530670000        <1>  jne L_error_incorrect_type
  2088 000017E6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2089 000017E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2090 000017EC 50                      	push rax
  2091 000017ED 6A01                    	push 1
  2092 000017EF 488B4510                	mov rax, qword [rbp + 8 * 2]
  2093                                  
  2094 000017F3 488B00                                            	mov rax, qword[rax + 8 * 0]
  2095                                  
  2096 000017F6 488B00                                            	mov rax, qword[rax + 8 * 0]
  2097                                  	assert_closure(rax)
    42 000017F9 803805              <1>  cmp byte [%1], %2
    43 000017FC 0F8514670000        <1>  jne L_error_incorrect_type
  2098 00001802 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2099 00001805 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2100 00001808 50                      	push rax
  2101 00001809 6A01                    	push 1
  2102 0000180B 488B4510                	mov rax, qword [rbp + 8 * 2]
  2103                                  
  2104 0000180F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2105                                  
  2106 00001812 488B00                                            	mov rax, qword[rax + 8 * 0]
  2107                                  	assert_closure(rax)
    42 00001815 803805              <1>  cmp byte [%1], %2
    43 00001818 0F85F8660000        <1>  jne L_error_incorrect_type
  2108 0000181E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2109 00001821 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2110 00001824 50                      	push rax
  2111 00001825 6A01                    	push 1
  2112 00001827 488B4510                	mov rax, qword [rbp + 8 * 2]
  2113                                  
  2114 0000182B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2115                                  
  2116 0000182E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2117 00001831 50                      	push rax
  2118 00001832 6A01                    	push 1
  2119 00001834 488B4510                	mov rax, qword [rbp + 8 * 2]
  2120                                  
  2121 00001838 488B00                                            	mov rax, qword[rax + 8 * 0]
  2122                                  
  2123 0000183B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2124                                  	assert_closure(rax)
    42 0000183E 803805              <1>  cmp byte [%1], %2
    43 00001841 0F85CF660000        <1>  jne L_error_incorrect_type
  2125 00001847 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2126 0000184A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2127 0000184D 50                      	push rax
  2128 0000184E 6A01                    	push 1
  2129 00001850 488B4510                	mov rax, qword [rbp + 8 * 2]
  2130                                  
  2131 00001854 488B00                                            	mov rax, qword[rax + 8 * 0]
  2132                                  
  2133 00001857 488B00                                            	mov rax, qword[rax + 8 * 0]
  2134                                  	assert_closure(rax)
    42 0000185A 803805              <1>  cmp byte [%1], %2
    43 0000185D 0F85B3660000        <1>  jne L_error_incorrect_type
  2135 00001863 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2136 00001866 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2137 00001869 50                      	push rax
  2138 0000186A 6A01                    	push 1
  2139 0000186C 488B4510                	mov rax, qword [rbp + 8 * 2]
  2140                                  
  2141 00001870 488B00                                            	mov rax, qword[rax + 8 * 0]
  2142                                  
  2143 00001873 488B00                                            	mov rax, qword[rax + 8 * 0]
  2144                                  	assert_closure(rax)
    42 00001876 803805              <1>  cmp byte [%1], %2
    43 00001879 0F8597660000        <1>  jne L_error_incorrect_type
  2145 0000187F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2146 00001882 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2147 00001885 50                      	push rax
  2148 00001886 6A01                    	push 1
  2149 00001888 488B4510                	mov rax, qword [rbp + 8 * 2]
  2150                                  
  2151 0000188C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2152                                  
  2153 0000188F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2154                                  	assert_closure(rax)
    42 00001892 803805              <1>  cmp byte [%1], %2
    43 00001895 0F857B660000        <1>  jne L_error_incorrect_type
  2155 0000189B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2156 0000189E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2157                                  	assert_closure(rax)
    42 000018A1 803805              <1>  cmp byte [%1], %2
    43 000018A4 0F856C660000        <1>  jne L_error_incorrect_type
  2158 000018AA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2159 000018AD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2160                                  	assert_closure(rax)
    42 000018B0 803805              <1>  cmp byte [%1], %2
    43 000018B3 0F855D660000        <1>  jne L_error_incorrect_type
  2161 000018B9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2162 000018BC FF5009                  	call SOB_CLOSURE_CODE(rax)
  2163 000018BF 50                      	push rax
  2164 000018C0 6A01                    	push 1
  2165 000018C2 488B4510                	mov rax, qword [rbp + 8 * 2]
  2166                                  
  2167 000018C6 488B00                                            	mov rax, qword[rax + 8 * 0]
  2168                                  
  2169 000018C9 488B00                                            	mov rax, qword[rax + 8 * 0]
  2170 000018CC 50                      	push rax
  2171 000018CD 6A01                    	push 1
  2172 000018CF 488B4510                	mov rax, qword [rbp + 8 * 2]
  2173                                  
  2174 000018D3 488B00                                            	mov rax, qword[rax + 8 * 0]
  2175                                  
  2176 000018D6 488B00                                            	mov rax, qword[rax + 8 * 0]
  2177                                  	assert_closure(rax)
    42 000018D9 803805              <1>  cmp byte [%1], %2
    43 000018DC 0F8534660000        <1>  jne L_error_incorrect_type
  2178 000018E2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2179 000018E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2180 000018E8 50                      	push rax
  2181 000018E9 6A01                    	push 1
  2182 000018EB 488B4510                	mov rax, qword [rbp + 8 * 2]
  2183                                  
  2184 000018EF 488B00                                            	mov rax, qword[rax + 8 * 0]
  2185                                  
  2186 000018F2 488B00                                            	mov rax, qword[rax + 8 * 0]
  2187                                  	assert_closure(rax)
    42 000018F5 803805              <1>  cmp byte [%1], %2
    43 000018F8 0F8518660000        <1>  jne L_error_incorrect_type
  2188 000018FE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2189 00001901 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2190 00001904 50                      	push rax
  2191 00001905 6A01                    	push 1
  2192 00001907 488B4510                	mov rax, qword [rbp + 8 * 2]
  2193                                  
  2194 0000190B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2195                                  
  2196 0000190E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2197                                  	assert_closure(rax)
    42 00001911 803805              <1>  cmp byte [%1], %2
    43 00001914 0F85FC650000        <1>  jne L_error_incorrect_type
  2198 0000191A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2199 0000191D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2200                                  	assert_closure(rax)
    42 00001920 803805              <1>  cmp byte [%1], %2
    43 00001923 0F85ED650000        <1>  jne L_error_incorrect_type
  2201 00001929 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2202 0000192C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2203 0000192F 50                      	push rax
  2204 00001930 6A01                    	push 1
  2205 00001932 488B4510                	mov rax, qword [rbp + 8 * 2]
  2206                                  
  2207 00001936 488B00                                            	mov rax, qword[rax + 8 * 0]
  2208                                  
  2209 00001939 488B00                                            	mov rax, qword[rax + 8 * 0]
  2210 0000193C 50                      	push rax
  2211 0000193D 6A01                    	push 1
  2212 0000193F 488B4510                	mov rax, qword [rbp + 8 * 2]
  2213                                  
  2214 00001943 488B00                                            	mov rax, qword[rax + 8 * 0]
  2215                                  
  2216 00001946 488B00                                            	mov rax, qword[rax + 8 * 0]
  2217                                  	assert_closure(rax)
    42 00001949 803805              <1>  cmp byte [%1], %2
    43 0000194C 0F85C4650000        <1>  jne L_error_incorrect_type
  2218 00001952 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2219 00001955 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2220 00001958 50                      	push rax
  2221 00001959 6A01                    	push 1
  2222 0000195B 488B4510                	mov rax, qword [rbp + 8 * 2]
  2223                                  
  2224 0000195F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2225                                  
  2226 00001962 488B00                                            	mov rax, qword[rax + 8 * 0]
  2227                                  	assert_closure(rax)
    42 00001965 803805              <1>  cmp byte [%1], %2
    43 00001968 0F85A8650000        <1>  jne L_error_incorrect_type
  2228 0000196E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2229 00001971 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2230 00001974 50                      	push rax
  2231 00001975 6A01                    	push 1
  2232 00001977 488B4510                	mov rax, qword [rbp + 8 * 2]
  2233                                  
  2234 0000197B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2235                                  
  2236 0000197E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2237                                  	assert_closure(rax)
    42 00001981 803805              <1>  cmp byte [%1], %2
    43 00001984 0F858C650000        <1>  jne L_error_incorrect_type
  2238 0000198A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2239 0000198D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2240 00001990 50                      	push rax
  2241 00001991 6A01                    	push 1
  2242 00001993 488B4510                	mov rax, qword [rbp + 8 * 2]
  2243                                  
  2244 00001997 488B00                                            	mov rax, qword[rax + 8 * 0]
  2245                                  
  2246 0000199A 488B00                                            	mov rax, qword[rax + 8 * 0]
  2247 0000199D 50                      	push rax
  2248 0000199E 6A01                    	push 1
  2249 000019A0 488B4510                	mov rax, qword [rbp + 8 * 2]
  2250                                  
  2251 000019A4 488B00                                            	mov rax, qword[rax + 8 * 0]
  2252                                  
  2253 000019A7 488B00                                            	mov rax, qword[rax + 8 * 0]
  2254                                  	assert_closure(rax)
    42 000019AA 803805              <1>  cmp byte [%1], %2
    43 000019AD 0F8563650000        <1>  jne L_error_incorrect_type
  2255 000019B3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2256 000019B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2257 000019B9 50                      	push rax
  2258 000019BA 6A01                    	push 1
  2259 000019BC 488B4510                	mov rax, qword [rbp + 8 * 2]
  2260                                  
  2261 000019C0 488B00                                            	mov rax, qword[rax + 8 * 0]
  2262                                  
  2263 000019C3 488B00                                            	mov rax, qword[rax + 8 * 0]
  2264                                  	assert_closure(rax)
    42 000019C6 803805              <1>  cmp byte [%1], %2
    43 000019C9 0F8547650000        <1>  jne L_error_incorrect_type
  2265 000019CF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2266 000019D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2267 000019D5 50                      	push rax
  2268 000019D6 6A01                    	push 1
  2269 000019D8 488B4510                	mov rax, qword [rbp + 8 * 2]
  2270                                  
  2271 000019DC 488B00                                            	mov rax, qword[rax + 8 * 0]
  2272                                  
  2273 000019DF 488B00                                            	mov rax, qword[rax + 8 * 0]
  2274                                  	assert_closure(rax)
    42 000019E2 803805              <1>  cmp byte [%1], %2
    43 000019E5 0F852B650000        <1>  jne L_error_incorrect_type
  2275 000019EB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2276 000019EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2277 000019F1 50                      	push rax
  2278 000019F2 6A01                    	push 1
  2279 000019F4 488B4510                	mov rax, qword [rbp + 8 * 2]
  2280                                  
  2281 000019F8 488B00                                            	mov rax, qword[rax + 8 * 0]
  2282                                  
  2283 000019FB 488B00                                            	mov rax, qword[rax + 8 * 0]
  2284                                  	assert_closure(rax)
    42 000019FE 803805              <1>  cmp byte [%1], %2
    43 00001A01 0F850F650000        <1>  jne L_error_incorrect_type
  2285 00001A07 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2286 00001A0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2287 00001A0D 50                      	push rax
  2288 00001A0E 6A01                    	push 1
  2289 00001A10 488B4510                	mov rax, qword [rbp + 8 * 2]
  2290                                  
  2291 00001A14 488B00                                            	mov rax, qword[rax + 8 * 0]
  2292                                  
  2293 00001A17 488B00                                            	mov rax, qword[rax + 8 * 0]
  2294 00001A1A 50                      	push rax
  2295 00001A1B 6A01                    	push 1
  2296 00001A1D 488B4510                	mov rax, qword [rbp + 8 * 2]
  2297                                  
  2298 00001A21 488B00                                            	mov rax, qword[rax + 8 * 0]
  2299                                  
  2300 00001A24 488B00                                            	mov rax, qword[rax + 8 * 0]
  2301                                  	assert_closure(rax)
    42 00001A27 803805              <1>  cmp byte [%1], %2
    43 00001A2A 0F85E6640000        <1>  jne L_error_incorrect_type
  2302 00001A30 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2303 00001A33 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2304 00001A36 50                      	push rax
  2305 00001A37 6A01                    	push 1
  2306 00001A39 488B4510                	mov rax, qword [rbp + 8 * 2]
  2307                                  
  2308 00001A3D 488B00                                            	mov rax, qword[rax + 8 * 0]
  2309                                  
  2310 00001A40 488B00                                            	mov rax, qword[rax + 8 * 0]
  2311                                  	assert_closure(rax)
    42 00001A43 803805              <1>  cmp byte [%1], %2
    43 00001A46 0F85CA640000        <1>  jne L_error_incorrect_type
  2312 00001A4C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2313 00001A4F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2314 00001A52 50                      	push rax
  2315 00001A53 6A01                    	push 1
  2316 00001A55 488B4510                	mov rax, qword [rbp + 8 * 2]
  2317                                  
  2318 00001A59 488B00                                            	mov rax, qword[rax + 8 * 0]
  2319                                  
  2320 00001A5C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2321                                  	assert_closure(rax)
    42 00001A5F 803805              <1>  cmp byte [%1], %2
    43 00001A62 0F85AE640000        <1>  jne L_error_incorrect_type
  2322 00001A68 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2323 00001A6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2324                                  	assert_closure(rax)
    42 00001A6E 803805              <1>  cmp byte [%1], %2
    43 00001A71 0F859F640000        <1>  jne L_error_incorrect_type
  2325 00001A77 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2326 00001A7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2327 00001A7D 50                      	push rax
  2328 00001A7E 6A01                    	push 1
  2329 00001A80 488B4510                	mov rax, qword [rbp + 8 * 2]
  2330                                  
  2331 00001A84 488B00                                            	mov rax, qword[rax + 8 * 0]
  2332                                  
  2333 00001A87 488B00                                            	mov rax, qword[rax + 8 * 0]
  2334 00001A8A 50                      	push rax
  2335 00001A8B 6A01                    	push 1
  2336 00001A8D 488B4510                	mov rax, qword [rbp + 8 * 2]
  2337                                  
  2338 00001A91 488B00                                            	mov rax, qword[rax + 8 * 0]
  2339                                  
  2340 00001A94 488B00                                            	mov rax, qword[rax + 8 * 0]
  2341                                  	assert_closure(rax)
    42 00001A97 803805              <1>  cmp byte [%1], %2
    43 00001A9A 0F8576640000        <1>  jne L_error_incorrect_type
  2342 00001AA0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2343 00001AA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2344 00001AA6 50                      	push rax
  2345 00001AA7 6A01                    	push 1
  2346 00001AA9 488B4510                	mov rax, qword [rbp + 8 * 2]
  2347                                  
  2348 00001AAD 488B00                                            	mov rax, qword[rax + 8 * 0]
  2349                                  
  2350 00001AB0 488B00                                            	mov rax, qword[rax + 8 * 0]
  2351                                  	assert_closure(rax)
    42 00001AB3 803805              <1>  cmp byte [%1], %2
    43 00001AB6 0F855A640000        <1>  jne L_error_incorrect_type
  2352 00001ABC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2353 00001ABF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2354 00001AC2 50                      	push rax
  2355 00001AC3 6A01                    	push 1
  2356 00001AC5 488B4510                	mov rax, qword [rbp + 8 * 2]
  2357                                  
  2358 00001AC9 488B00                                            	mov rax, qword[rax + 8 * 0]
  2359                                  
  2360 00001ACC 488B00                                            	mov rax, qword[rax + 8 * 0]
  2361                                  	assert_closure(rax)
    42 00001ACF 803805              <1>  cmp byte [%1], %2
    43 00001AD2 0F853E640000        <1>  jne L_error_incorrect_type
  2362 00001AD8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2363 00001ADB FF5009                  	call SOB_CLOSURE_CODE(rax)
  2364 00001ADE 50                      	push rax
  2365 00001ADF 6A01                    	push 1
  2366 00001AE1 488B4510                	mov rax, qword [rbp + 8 * 2]
  2367                                  
  2368 00001AE5 488B00                                            	mov rax, qword[rax + 8 * 0]
  2369                                  
  2370 00001AE8 488B00                                            	mov rax, qword[rax + 8 * 0]
  2371                                  	assert_closure(rax)
    42 00001AEB 803805              <1>  cmp byte [%1], %2
    43 00001AEE 0F8522640000        <1>  jne L_error_incorrect_type
  2372 00001AF4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2373 00001AF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2374                                  	assert_closure(rax)
    42 00001AFA 803805              <1>  cmp byte [%1], %2
    43 00001AFD 0F8513640000        <1>  jne L_error_incorrect_type
  2375 00001B03 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2376 00001B06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2377                                  	assert_closure(rax)
    42 00001B09 803805              <1>  cmp byte [%1], %2
    43 00001B0C 0F8504640000        <1>  jne L_error_incorrect_type
  2378 00001B12 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2379 00001B15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2380 00001B18 50                      	push rax
  2381 00001B19 6A01                    	push 1
  2382 00001B1B 488B4510                	mov rax, qword [rbp + 8 * 2]
  2383                                  
  2384 00001B1F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2385                                  
  2386 00001B22 488B00                                            	mov rax, qword[rax + 8 * 0]
  2387 00001B25 50                      	push rax
  2388 00001B26 6A01                    	push 1
  2389 00001B28 488B4510                	mov rax, qword [rbp + 8 * 2]
  2390                                  
  2391 00001B2C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2392                                  
  2393 00001B2F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2394                                  	assert_closure(rax)
    42 00001B32 803805              <1>  cmp byte [%1], %2
    43 00001B35 0F85DB630000        <1>  jne L_error_incorrect_type
  2395 00001B3B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2396 00001B3E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2397 00001B41 50                      	push rax
  2398 00001B42 6A01                    	push 1
  2399 00001B44 488B4510                	mov rax, qword [rbp + 8 * 2]
  2400                                  
  2401 00001B48 488B00                                            	mov rax, qword[rax + 8 * 0]
  2402                                  
  2403 00001B4B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2404                                  	assert_closure(rax)
    42 00001B4E 803805              <1>  cmp byte [%1], %2
    43 00001B51 0F85BF630000        <1>  jne L_error_incorrect_type
  2405 00001B57 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2406 00001B5A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2407 00001B5D 50                      	push rax
  2408 00001B5E 6A01                    	push 1
  2409 00001B60 488B4510                	mov rax, qword [rbp + 8 * 2]
  2410                                  
  2411 00001B64 488B00                                            	mov rax, qword[rax + 8 * 0]
  2412                                  
  2413 00001B67 488B00                                            	mov rax, qword[rax + 8 * 0]
  2414                                  	assert_closure(rax)
    42 00001B6A 803805              <1>  cmp byte [%1], %2
    43 00001B6D 0F85A3630000        <1>  jne L_error_incorrect_type
  2415 00001B73 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2416 00001B76 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2417 00001B79 50                      	push rax
  2418 00001B7A 6A01                    	push 1
  2419 00001B7C 488B4510                	mov rax, qword [rbp + 8 * 2]
  2420                                  
  2421 00001B80 488B00                                            	mov rax, qword[rax + 8 * 0]
  2422                                  
  2423 00001B83 488B00                                            	mov rax, qword[rax + 8 * 0]
  2424                                  	assert_closure(rax)
    42 00001B86 803805              <1>  cmp byte [%1], %2
    43 00001B89 0F8587630000        <1>  jne L_error_incorrect_type
  2425 00001B8F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2426 00001B92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2427                                  	assert_closure(rax)
    42 00001B95 803805              <1>  cmp byte [%1], %2
    43 00001B98 0F8578630000        <1>  jne L_error_incorrect_type
  2428 00001B9E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2429 00001BA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2430                                  	assert_closure(rax)
    42 00001BA4 803805              <1>  cmp byte [%1], %2
    43 00001BA7 0F8569630000        <1>  jne L_error_incorrect_type
  2431 00001BAD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2432 00001BB0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2433 00001BB3 50                      	push rax
  2434 00001BB4 6A01                    	push 1
  2435 00001BB6 488B4510                	mov rax, qword [rbp + 8 * 2]
  2436                                  
  2437 00001BBA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2438                                  
  2439 00001BBD 488B00                                            	mov rax, qword[rax + 8 * 0]
  2440 00001BC0 50                      	push rax
  2441 00001BC1 6A01                    	push 1
  2442 00001BC3 488B4510                	mov rax, qword [rbp + 8 * 2]
  2443                                  
  2444 00001BC7 488B00                                            	mov rax, qword[rax + 8 * 0]
  2445                                  
  2446 00001BCA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2447                                  	assert_closure(rax)
    42 00001BCD 803805              <1>  cmp byte [%1], %2
    43 00001BD0 0F8540630000        <1>  jne L_error_incorrect_type
  2448 00001BD6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2449 00001BD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2450 00001BDC 50                      	push rax
  2451 00001BDD 6A01                    	push 1
  2452 00001BDF 488B4510                	mov rax, qword [rbp + 8 * 2]
  2453                                  
  2454 00001BE3 488B00                                            	mov rax, qword[rax + 8 * 0]
  2455                                  
  2456 00001BE6 488B00                                            	mov rax, qword[rax + 8 * 0]
  2457                                  	assert_closure(rax)
    42 00001BE9 803805              <1>  cmp byte [%1], %2
    43 00001BEC 0F8524630000        <1>  jne L_error_incorrect_type
  2458 00001BF2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2459 00001BF5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2460 00001BF8 50                      	push rax
  2461 00001BF9 6A01                    	push 1
  2462 00001BFB 488B4510                	mov rax, qword [rbp + 8 * 2]
  2463                                  
  2464 00001BFF 488B00                                            	mov rax, qword[rax + 8 * 0]
  2465                                  
  2466 00001C02 488B00                                            	mov rax, qword[rax + 8 * 0]
  2467                                  	assert_closure(rax)
    42 00001C05 803805              <1>  cmp byte [%1], %2
    43 00001C08 0F8508630000        <1>  jne L_error_incorrect_type
  2468 00001C0E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2469 00001C11 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2470 00001C14 50                      	push rax
  2471 00001C15 6A01                    	push 1
  2472 00001C17 488B4510                	mov rax, qword [rbp + 8 * 2]
  2473                                  
  2474 00001C1B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2475                                  
  2476 00001C1E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2477 00001C21 50                      	push rax
  2478 00001C22 6A01                    	push 1
  2479 00001C24 488B4510                	mov rax, qword [rbp + 8 * 2]
  2480                                  
  2481 00001C28 488B00                                            	mov rax, qword[rax + 8 * 0]
  2482                                  
  2483 00001C2B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2484                                  	assert_closure(rax)
    42 00001C2E 803805              <1>  cmp byte [%1], %2
    43 00001C31 0F85DF620000        <1>  jne L_error_incorrect_type
  2485 00001C37 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2486 00001C3A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2487 00001C3D 50                      	push rax
  2488 00001C3E 6A01                    	push 1
  2489 00001C40 488B4510                	mov rax, qword [rbp + 8 * 2]
  2490                                  
  2491 00001C44 488B00                                            	mov rax, qword[rax + 8 * 0]
  2492                                  
  2493 00001C47 488B00                                            	mov rax, qword[rax + 8 * 0]
  2494                                  	assert_closure(rax)
    42 00001C4A 803805              <1>  cmp byte [%1], %2
    43 00001C4D 0F85C3620000        <1>  jne L_error_incorrect_type
  2495 00001C53 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2496 00001C56 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2497 00001C59 50                      	push rax
  2498 00001C5A 6A01                    	push 1
  2499 00001C5C 488B4510                	mov rax, qword [rbp + 8 * 2]
  2500                                  
  2501 00001C60 488B00                                            	mov rax, qword[rax + 8 * 0]
  2502                                  
  2503 00001C63 488B00                                            	mov rax, qword[rax + 8 * 0]
  2504                                  	assert_closure(rax)
    42 00001C66 803805              <1>  cmp byte [%1], %2
    43 00001C69 0F85A7620000        <1>  jne L_error_incorrect_type
  2505 00001C6F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2506 00001C72 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2507 00001C75 50                      	push rax
  2508 00001C76 6A01                    	push 1
  2509 00001C78 488B4510                	mov rax, qword [rbp + 8 * 2]
  2510                                  
  2511 00001C7C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2512                                  
  2513 00001C7F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2514 00001C82 50                      	push rax
  2515 00001C83 6A01                    	push 1
  2516 00001C85 488B4510                	mov rax, qword [rbp + 8 * 2]
  2517                                  
  2518 00001C89 488B00                                            	mov rax, qword[rax + 8 * 0]
  2519                                  
  2520 00001C8C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2521                                  	assert_closure(rax)
    42 00001C8F 803805              <1>  cmp byte [%1], %2
    43 00001C92 0F857E620000        <1>  jne L_error_incorrect_type
  2522 00001C98 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2523 00001C9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2524 00001C9E 50                      	push rax
  2525 00001C9F 6A01                    	push 1
  2526 00001CA1 488B4510                	mov rax, qword [rbp + 8 * 2]
  2527                                  
  2528 00001CA5 488B00                                            	mov rax, qword[rax + 8 * 0]
  2529                                  
  2530 00001CA8 488B00                                            	mov rax, qword[rax + 8 * 0]
  2531                                  	assert_closure(rax)
    42 00001CAB 803805              <1>  cmp byte [%1], %2
    43 00001CAE 0F8562620000        <1>  jne L_error_incorrect_type
  2532 00001CB4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2533 00001CB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2534 00001CBA 50                      	push rax
  2535 00001CBB 6A01                    	push 1
  2536 00001CBD 488B4510                	mov rax, qword [rbp + 8 * 2]
  2537                                  
  2538 00001CC1 488B00                                            	mov rax, qword[rax + 8 * 0]
  2539                                  
  2540 00001CC4 488B00                                            	mov rax, qword[rax + 8 * 0]
  2541                                  	assert_closure(rax)
    42 00001CC7 803805              <1>  cmp byte [%1], %2
    43 00001CCA 0F8546620000        <1>  jne L_error_incorrect_type
  2542 00001CD0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2543 00001CD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2544 00001CD6 50                      	push rax
  2545 00001CD7 6A01                    	push 1
  2546 00001CD9 488B4510                	mov rax, qword [rbp + 8 * 2]
  2547                                  
  2548 00001CDD 488B00                                            	mov rax, qword[rax + 8 * 0]
  2549                                  
  2550 00001CE0 488B00                                            	mov rax, qword[rax + 8 * 0]
  2551                                  	assert_closure(rax)
    42 00001CE3 803805              <1>  cmp byte [%1], %2
    43 00001CE6 0F852A620000        <1>  jne L_error_incorrect_type
  2552 00001CEC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2553 00001CEF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2554                                  	assert_closure(rax)
    42 00001CF2 803805              <1>  cmp byte [%1], %2
    43 00001CF5 0F851B620000        <1>  jne L_error_incorrect_type
  2555 00001CFB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2556 00001CFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2557                                  	assert_closure(rax)
    42 00001D01 803805              <1>  cmp byte [%1], %2
    43 00001D04 0F850C620000        <1>  jne L_error_incorrect_type
  2558 00001D0A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2559 00001D0D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2560 00001D10 50                      	push rax
  2561 00001D11 6A01                    	push 1
  2562 00001D13 488B4510                	mov rax, qword [rbp + 8 * 2]
  2563                                  
  2564 00001D17 488B00                                            	mov rax, qword[rax + 8 * 0]
  2565                                  
  2566 00001D1A 488B00                                            	mov rax, qword[rax + 8 * 0]
  2567 00001D1D 50                      	push rax
  2568 00001D1E 6A01                    	push 1
  2569 00001D20 488B4510                	mov rax, qword [rbp + 8 * 2]
  2570                                  
  2571 00001D24 488B00                                            	mov rax, qword[rax + 8 * 0]
  2572                                  
  2573 00001D27 488B00                                            	mov rax, qword[rax + 8 * 0]
  2574                                  	assert_closure(rax)
    42 00001D2A 803805              <1>  cmp byte [%1], %2
    43 00001D2D 0F85E3610000        <1>  jne L_error_incorrect_type
  2575 00001D33 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2576 00001D36 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2577 00001D39 50                      	push rax
  2578 00001D3A 6A01                    	push 1
  2579 00001D3C 488B4510                	mov rax, qword [rbp + 8 * 2]
  2580                                  
  2581 00001D40 488B00                                            	mov rax, qword[rax + 8 * 0]
  2582                                  
  2583 00001D43 488B00                                            	mov rax, qword[rax + 8 * 0]
  2584                                  	assert_closure(rax)
    42 00001D46 803805              <1>  cmp byte [%1], %2
    43 00001D49 0F85C7610000        <1>  jne L_error_incorrect_type
  2585 00001D4F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2586 00001D52 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2587 00001D55 50                      	push rax
  2588 00001D56 6A01                    	push 1
  2589 00001D58 488B4510                	mov rax, qword [rbp + 8 * 2]
  2590                                  
  2591 00001D5C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2592                                  
  2593 00001D5F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2594                                  	assert_closure(rax)
    42 00001D62 803805              <1>  cmp byte [%1], %2
    43 00001D65 0F85AB610000        <1>  jne L_error_incorrect_type
  2595 00001D6B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2596 00001D6E FF5009                  	call SOB_CLOSURE_CODE(rax)
  2597 00001D71 50                      	push rax
  2598 00001D72 6A01                    	push 1
  2599 00001D74 488B4510                	mov rax, qword [rbp + 8 * 2]
  2600                                  
  2601 00001D78 488B00                                            	mov rax, qword[rax + 8 * 0]
  2602                                  
  2603 00001D7B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2604 00001D7E 50                      	push rax
  2605 00001D7F 6A01                    	push 1
  2606 00001D81 488B4510                	mov rax, qword [rbp + 8 * 2]
  2607                                  
  2608 00001D85 488B00                                            	mov rax, qword[rax + 8 * 0]
  2609                                  
  2610 00001D88 488B00                                            	mov rax, qword[rax + 8 * 0]
  2611                                  	assert_closure(rax)
    42 00001D8B 803805              <1>  cmp byte [%1], %2
    43 00001D8E 0F8582610000        <1>  jne L_error_incorrect_type
  2612 00001D94 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2613 00001D97 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2614 00001D9A 50                      	push rax
  2615 00001D9B 6A01                    	push 1
  2616 00001D9D 488B4510                	mov rax, qword [rbp + 8 * 2]
  2617                                  
  2618 00001DA1 488B00                                            	mov rax, qword[rax + 8 * 0]
  2619                                  
  2620 00001DA4 488B00                                            	mov rax, qword[rax + 8 * 0]
  2621                                  	assert_closure(rax)
    42 00001DA7 803805              <1>  cmp byte [%1], %2
    43 00001DAA 0F8566610000        <1>  jne L_error_incorrect_type
  2622 00001DB0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2623 00001DB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2624 00001DB6 50                      	push rax
  2625 00001DB7 6A01                    	push 1
  2626 00001DB9 488B4510                	mov rax, qword [rbp + 8 * 2]
  2627                                  
  2628 00001DBD 488B00                                            	mov rax, qword[rax + 8 * 0]
  2629                                  
  2630 00001DC0 488B00                                            	mov rax, qword[rax + 8 * 0]
  2631                                  	assert_closure(rax)
    42 00001DC3 803805              <1>  cmp byte [%1], %2
    43 00001DC6 0F854A610000        <1>  jne L_error_incorrect_type
  2632 00001DCC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2633 00001DCF FF5009                  	call SOB_CLOSURE_CODE(rax)
  2634                                  	assert_closure(rax)
    42 00001DD2 803805              <1>  cmp byte [%1], %2
    43 00001DD5 0F853B610000        <1>  jne L_error_incorrect_type
  2635 00001DDB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2636 00001DDE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2637 00001DE1 50                      	push rax
  2638 00001DE2 6A01                    	push 1
  2639 00001DE4 488B4510                	mov rax, qword [rbp + 8 * 2]
  2640                                  
  2641 00001DE8 488B00                                            	mov rax, qword[rax + 8 * 0]
  2642                                  
  2643 00001DEB 488B00                                            	mov rax, qword[rax + 8 * 0]
  2644 00001DEE 50                      	push rax
  2645 00001DEF 6A01                    	push 1
  2646 00001DF1 488B4510                	mov rax, qword [rbp + 8 * 2]
  2647                                  
  2648 00001DF5 488B00                                            	mov rax, qword[rax + 8 * 0]
  2649                                  
  2650 00001DF8 488B00                                            	mov rax, qword[rax + 8 * 0]
  2651                                  	assert_closure(rax)
    42 00001DFB 803805              <1>  cmp byte [%1], %2
    43 00001DFE 0F8512610000        <1>  jne L_error_incorrect_type
  2652 00001E04 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2653 00001E07 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2654 00001E0A 50                      	push rax
  2655 00001E0B 6A01                    	push 1
  2656 00001E0D 488B4510                	mov rax, qword [rbp + 8 * 2]
  2657                                  
  2658 00001E11 488B00                                            	mov rax, qword[rax + 8 * 0]
  2659                                  
  2660 00001E14 488B00                                            	mov rax, qword[rax + 8 * 0]
  2661                                  	assert_closure(rax)
    42 00001E17 803805              <1>  cmp byte [%1], %2
    43 00001E1A 0F85F6600000        <1>  jne L_error_incorrect_type
  2662 00001E20 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2663 00001E23 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2664 00001E26 50                      	push rax
  2665 00001E27 6A01                    	push 1
  2666 00001E29 488B4510                	mov rax, qword [rbp + 8 * 2]
  2667                                  
  2668 00001E2D 488B00                                            	mov rax, qword[rax + 8 * 0]
  2669                                  
  2670 00001E30 488B00                                            	mov rax, qword[rax + 8 * 0]
  2671                                  	assert_closure(rax)
    42 00001E33 803805              <1>  cmp byte [%1], %2
    43 00001E36 0F85DA600000        <1>  jne L_error_incorrect_type
  2672 00001E3C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2673 00001E3F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2674 00001E42 50                      	push rax
  2675 00001E43 6A01                    	push 1
  2676 00001E45 488B4510                	mov rax, qword [rbp + 8 * 2]
  2677                                  
  2678 00001E49 488B00                                            	mov rax, qword[rax + 8 * 0]
  2679                                  
  2680 00001E4C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2681                                  	assert_closure(rax)
    42 00001E4F 803805              <1>  cmp byte [%1], %2
    43 00001E52 0F85BE600000        <1>  jne L_error_incorrect_type
  2682 00001E58 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2683 00001E5B FF5009                  	call SOB_CLOSURE_CODE(rax)
  2684 00001E5E 50                      	push rax
  2685 00001E5F 6A01                    	push 1
  2686 00001E61 488B4510                	mov rax, qword [rbp + 8 * 2]
  2687                                  
  2688 00001E65 488B00                                            	mov rax, qword[rax + 8 * 0]
  2689                                  
  2690 00001E68 488B00                                            	mov rax, qword[rax + 8 * 0]
  2691 00001E6B 50                      	push rax
  2692 00001E6C 6A01                    	push 1
  2693 00001E6E 488B4510                	mov rax, qword [rbp + 8 * 2]
  2694                                  
  2695 00001E72 488B00                                            	mov rax, qword[rax + 8 * 0]
  2696                                  
  2697 00001E75 488B00                                            	mov rax, qword[rax + 8 * 0]
  2698                                  	assert_closure(rax)
    42 00001E78 803805              <1>  cmp byte [%1], %2
    43 00001E7B 0F8595600000        <1>  jne L_error_incorrect_type
  2699 00001E81 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2700 00001E84 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2701 00001E87 50                      	push rax
  2702 00001E88 6A01                    	push 1
  2703 00001E8A 488B4510                	mov rax, qword [rbp + 8 * 2]
  2704                                  
  2705 00001E8E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2706                                  
  2707 00001E91 488B00                                            	mov rax, qword[rax + 8 * 0]
  2708                                  	assert_closure(rax)
    42 00001E94 803805              <1>  cmp byte [%1], %2
    43 00001E97 0F8579600000        <1>  jne L_error_incorrect_type
  2709 00001E9D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2710 00001EA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2711 00001EA3 50                      	push rax
  2712 00001EA4 6A01                    	push 1
  2713 00001EA6 488B4510                	mov rax, qword [rbp + 8 * 2]
  2714                                  
  2715 00001EAA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2716                                  
  2717 00001EAD 488B00                                            	mov rax, qword[rax + 8 * 0]
  2718                                  	assert_closure(rax)
    42 00001EB0 803805              <1>  cmp byte [%1], %2
    43 00001EB3 0F855D600000        <1>  jne L_error_incorrect_type
  2719 00001EB9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2720 00001EBC FF5009                  	call SOB_CLOSURE_CODE(rax)
  2721 00001EBF 50                      	push rax
  2722 00001EC0 6A01                    	push 1
  2723 00001EC2 488B4510                	mov rax, qword [rbp + 8 * 2]
  2724                                  
  2725 00001EC6 488B00                                            	mov rax, qword[rax + 8 * 0]
  2726                                  
  2727 00001EC9 488B00                                            	mov rax, qword[rax + 8 * 0]
  2728 00001ECC 50                      	push rax
  2729 00001ECD 6A01                    	push 1
  2730 00001ECF 488B4510                	mov rax, qword [rbp + 8 * 2]
  2731                                  
  2732 00001ED3 488B00                                            	mov rax, qword[rax + 8 * 0]
  2733                                  
  2734 00001ED6 488B00                                            	mov rax, qword[rax + 8 * 0]
  2735                                  	assert_closure(rax)
    42 00001ED9 803805              <1>  cmp byte [%1], %2
    43 00001EDC 0F8534600000        <1>  jne L_error_incorrect_type
  2736 00001EE2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2737 00001EE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2738 00001EE8 50                      	push rax
  2739 00001EE9 6A01                    	push 1
  2740 00001EEB 488B4510                	mov rax, qword [rbp + 8 * 2]
  2741                                  
  2742 00001EEF 488B00                                            	mov rax, qword[rax + 8 * 0]
  2743                                  
  2744 00001EF2 488B00                                            	mov rax, qword[rax + 8 * 0]
  2745                                  	assert_closure(rax)
    42 00001EF5 803805              <1>  cmp byte [%1], %2
    43 00001EF8 0F8518600000        <1>  jne L_error_incorrect_type
  2746 00001EFE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2747 00001F01 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2748 00001F04 50                      	push rax
  2749 00001F05 6A01                    	push 1
  2750 00001F07 488B4510                	mov rax, qword [rbp + 8 * 2]
  2751                                  
  2752 00001F0B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2753                                  
  2754 00001F0E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2755                                  	assert_closure(rax)
    42 00001F11 803805              <1>  cmp byte [%1], %2
    43 00001F14 0F85FC5F0000        <1>  jne L_error_incorrect_type
  2756 00001F1A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2757 00001F1D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2758                                  	assert_closure(rax)
    42 00001F20 803805              <1>  cmp byte [%1], %2
    43 00001F23 0F85ED5F0000        <1>  jne L_error_incorrect_type
  2759 00001F29 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2760 00001F2C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2761 00001F2F 50                      	push rax
  2762 00001F30 6A01                    	push 1
  2763 00001F32 488B4510                	mov rax, qword [rbp + 8 * 2]
  2764                                  
  2765 00001F36 488B00                                            	mov rax, qword[rax + 8 * 0]
  2766                                  
  2767 00001F39 488B00                                            	mov rax, qword[rax + 8 * 0]
  2768 00001F3C 50                      	push rax
  2769 00001F3D 6A01                    	push 1
  2770 00001F3F 488B4510                	mov rax, qword [rbp + 8 * 2]
  2771                                  
  2772 00001F43 488B00                                            	mov rax, qword[rax + 8 * 0]
  2773                                  
  2774 00001F46 488B00                                            	mov rax, qword[rax + 8 * 0]
  2775                                  	assert_closure(rax)
    42 00001F49 803805              <1>  cmp byte [%1], %2
    43 00001F4C 0F85C45F0000        <1>  jne L_error_incorrect_type
  2776 00001F52 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2777 00001F55 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2778 00001F58 50                      	push rax
  2779 00001F59 6A01                    	push 1
  2780 00001F5B 488B4510                	mov rax, qword [rbp + 8 * 2]
  2781                                  
  2782 00001F5F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2783                                  
  2784 00001F62 488B00                                            	mov rax, qword[rax + 8 * 0]
  2785                                  	assert_closure(rax)
    42 00001F65 803805              <1>  cmp byte [%1], %2
    43 00001F68 0F85A85F0000        <1>  jne L_error_incorrect_type
  2786 00001F6E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2787 00001F71 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2788 00001F74 50                      	push rax
  2789 00001F75 6A01                    	push 1
  2790 00001F77 488B4510                	mov rax, qword [rbp + 8 * 2]
  2791                                  
  2792 00001F7B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2793                                  
  2794 00001F7E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2795                                  	assert_closure(rax)
    42 00001F81 803805              <1>  cmp byte [%1], %2
    43 00001F84 0F858C5F0000        <1>  jne L_error_incorrect_type
  2796 00001F8A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2797 00001F8D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2798 00001F90 50                      	push rax
  2799 00001F91 6A01                    	push 1
  2800 00001F93 488B4510                	mov rax, qword [rbp + 8 * 2]
  2801                                  
  2802 00001F97 488B00                                            	mov rax, qword[rax + 8 * 0]
  2803                                  
  2804 00001F9A 488B00                                            	mov rax, qword[rax + 8 * 0]
  2805                                  	assert_closure(rax)
    42 00001F9D 803805              <1>  cmp byte [%1], %2
    43 00001FA0 0F85705F0000        <1>  jne L_error_incorrect_type
  2806 00001FA6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2807 00001FA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2808                                  	assert_closure(rax)
    42 00001FAC 803805              <1>  cmp byte [%1], %2
    43 00001FAF 0F85615F0000        <1>  jne L_error_incorrect_type
  2809 00001FB5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2810 00001FB8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2811                                  	assert_closure(rax)
    42 00001FBB 803805              <1>  cmp byte [%1], %2
    43 00001FBE 0F85525F0000        <1>  jne L_error_incorrect_type
  2812 00001FC4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2813 00001FC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2814 00001FCA 50                      	push rax
  2815 00001FCB 6A01                    	push 1
  2816 00001FCD 488B4510                	mov rax, qword [rbp + 8 * 2]
  2817                                  
  2818 00001FD1 488B00                                            	mov rax, qword[rax + 8 * 0]
  2819                                  
  2820 00001FD4 488B00                                            	mov rax, qword[rax + 8 * 0]
  2821 00001FD7 50                      	push rax
  2822 00001FD8 6A01                    	push 1
  2823 00001FDA 488B4510                	mov rax, qword [rbp + 8 * 2]
  2824                                  
  2825 00001FDE 488B00                                            	mov rax, qword[rax + 8 * 0]
  2826                                  
  2827 00001FE1 488B00                                            	mov rax, qword[rax + 8 * 0]
  2828                                  	assert_closure(rax)
    42 00001FE4 803805              <1>  cmp byte [%1], %2
    43 00001FE7 0F85295F0000        <1>  jne L_error_incorrect_type
  2829 00001FED FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2830 00001FF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2831 00001FF3 50                      	push rax
  2832 00001FF4 6A01                    	push 1
  2833 00001FF6 488B4510                	mov rax, qword [rbp + 8 * 2]
  2834                                  
  2835 00001FFA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2836                                  
  2837 00001FFD 488B00                                            	mov rax, qword[rax + 8 * 0]
  2838                                  	assert_closure(rax)
    42 00002000 803805              <1>  cmp byte [%1], %2
    43 00002003 0F850D5F0000        <1>  jne L_error_incorrect_type
  2839 00002009 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2840 0000200C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2841 0000200F 50                      	push rax
  2842 00002010 6A01                    	push 1
  2843 00002012 488B4510                	mov rax, qword [rbp + 8 * 2]
  2844                                  
  2845 00002016 488B00                                            	mov rax, qword[rax + 8 * 0]
  2846                                  
  2847 00002019 488B00                                            	mov rax, qword[rax + 8 * 0]
  2848                                  	assert_closure(rax)
    42 0000201C 803805              <1>  cmp byte [%1], %2
    43 0000201F 0F85F15E0000        <1>  jne L_error_incorrect_type
  2849 00002025 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2850 00002028 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2851 0000202B 50                      	push rax
  2852 0000202C 6A01                    	push 1
  2853 0000202E 488B4510                	mov rax, qword [rbp + 8 * 2]
  2854                                  
  2855 00002032 488B00                                            	mov rax, qword[rax + 8 * 0]
  2856                                  
  2857 00002035 488B00                                            	mov rax, qword[rax + 8 * 0]
  2858                                  	assert_closure(rax)
    42 00002038 803805              <1>  cmp byte [%1], %2
    43 0000203B 0F85D55E0000        <1>  jne L_error_incorrect_type
  2859 00002041 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2860 00002044 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2861 00002047 50                      	push rax
  2862 00002048 6A01                    	push 1
  2863 0000204A 488B4510                	mov rax, qword [rbp + 8 * 2]
  2864                                  
  2865 0000204E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2866                                  
  2867 00002051 488B00                                            	mov rax, qword[rax + 8 * 0]
  2868 00002054 50                      	push rax
  2869 00002055 6A01                    	push 1
  2870 00002057 488B4510                	mov rax, qword [rbp + 8 * 2]
  2871                                  
  2872 0000205B 488B00                                            	mov rax, qword[rax + 8 * 0]
  2873                                  
  2874 0000205E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2875                                  	assert_closure(rax)
    42 00002061 803805              <1>  cmp byte [%1], %2
    43 00002064 0F85AC5E0000        <1>  jne L_error_incorrect_type
  2876 0000206A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2877 0000206D FF5009                  	call SOB_CLOSURE_CODE(rax)
  2878 00002070 50                      	push rax
  2879 00002071 6A01                    	push 1
  2880 00002073 488B4510                	mov rax, qword [rbp + 8 * 2]
  2881                                  
  2882 00002077 488B00                                            	mov rax, qword[rax + 8 * 0]
  2883                                  
  2884 0000207A 488B00                                            	mov rax, qword[rax + 8 * 0]
  2885                                  	assert_closure(rax)
    42 0000207D 803805              <1>  cmp byte [%1], %2
    43 00002080 0F85905E0000        <1>  jne L_error_incorrect_type
  2886 00002086 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2887 00002089 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2888 0000208C 50                      	push rax
  2889 0000208D 6A01                    	push 1
  2890 0000208F 488B4510                	mov rax, qword [rbp + 8 * 2]
  2891                                  
  2892 00002093 488B00                                            	mov rax, qword[rax + 8 * 0]
  2893                                  
  2894 00002096 488B00                                            	mov rax, qword[rax + 8 * 0]
  2895                                  	assert_closure(rax)
    42 00002099 803805              <1>  cmp byte [%1], %2
    43 0000209C 0F85745E0000        <1>  jne L_error_incorrect_type
  2896 000020A2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2897 000020A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2898                                  	assert_closure(rax)
    42 000020A8 803805              <1>  cmp byte [%1], %2
    43 000020AB 0F85655E0000        <1>  jne L_error_incorrect_type
  2899 000020B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2900 000020B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2901 000020B7 50                      	push rax
  2902 000020B8 6A01                    	push 1
  2903 000020BA 488B4510                	mov rax, qword [rbp + 8 * 2]
  2904                                  
  2905 000020BE 488B00                                            	mov rax, qword[rax + 8 * 0]
  2906                                  
  2907 000020C1 488B00                                            	mov rax, qword[rax + 8 * 0]
  2908 000020C4 50                      	push rax
  2909 000020C5 6A01                    	push 1
  2910 000020C7 488B4510                	mov rax, qword [rbp + 8 * 2]
  2911                                  
  2912 000020CB 488B00                                            	mov rax, qword[rax + 8 * 0]
  2913                                  
  2914 000020CE 488B00                                            	mov rax, qword[rax + 8 * 0]
  2915                                  	assert_closure(rax)
    42 000020D1 803805              <1>  cmp byte [%1], %2
    43 000020D4 0F853C5E0000        <1>  jne L_error_incorrect_type
  2916 000020DA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2917 000020DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  2918 000020E0 50                      	push rax
  2919 000020E1 6A01                    	push 1
  2920 000020E3 488B4510                	mov rax, qword [rbp + 8 * 2]
  2921                                  
  2922 000020E7 488B00                                            	mov rax, qword[rax + 8 * 0]
  2923                                  
  2924 000020EA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2925                                  	assert_closure(rax)
    42 000020ED 803805              <1>  cmp byte [%1], %2
    43 000020F0 0F85205E0000        <1>  jne L_error_incorrect_type
  2926 000020F6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2927 000020F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2928 000020FC 50                      	push rax
  2929 000020FD 6A01                    	push 1
  2930 000020FF 488B4510                	mov rax, qword [rbp + 8 * 2]
  2931                                  
  2932 00002103 488B00                                            	mov rax, qword[rax + 8 * 0]
  2933                                  
  2934 00002106 488B00                                            	mov rax, qword[rax + 8 * 0]
  2935                                  	assert_closure(rax)
    42 00002109 803805              <1>  cmp byte [%1], %2
    43 0000210C 0F85045E0000        <1>  jne L_error_incorrect_type
  2936 00002112 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2937 00002115 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2938 00002118 50                      	push rax
  2939 00002119 6A01                    	push 1
  2940 0000211B 488B4510                	mov rax, qword [rbp + 8 * 2]
  2941                                  
  2942 0000211F 488B00                                            	mov rax, qword[rax + 8 * 0]
  2943                                  
  2944 00002122 488B00                                            	mov rax, qword[rax + 8 * 0]
  2945                                  	assert_closure(rax)
    42 00002125 803805              <1>  cmp byte [%1], %2
    43 00002128 0F85E85D0000        <1>  jne L_error_incorrect_type
  2946 0000212E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2947 00002131 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2948                                  	assert_closure(rax)
    42 00002134 803805              <1>  cmp byte [%1], %2
    43 00002137 0F85D95D0000        <1>  jne L_error_incorrect_type
  2949 0000213D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2950 00002140 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2951                                  	assert_closure(rax)
    42 00002143 803805              <1>  cmp byte [%1], %2
    43 00002146 0F85CA5D0000        <1>  jne L_error_incorrect_type
  2952 0000214C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2953 0000214F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2954 00002152 50                      	push rax
  2955 00002153 6A01                    	push 1
  2956 00002155 488B4510                	mov rax, qword [rbp + 8 * 2]
  2957                                  
  2958 00002159 488B00                                            	mov rax, qword[rax + 8 * 0]
  2959                                  
  2960 0000215C 488B00                                            	mov rax, qword[rax + 8 * 0]
  2961 0000215F 50                      	push rax
  2962 00002160 6A01                    	push 1
  2963 00002162 488B4510                	mov rax, qword [rbp + 8 * 2]
  2964                                  
  2965 00002166 488B00                                            	mov rax, qword[rax + 8 * 0]
  2966                                  
  2967 00002169 488B00                                            	mov rax, qword[rax + 8 * 0]
  2968                                  	assert_closure(rax)
    42 0000216C 803805              <1>  cmp byte [%1], %2
    43 0000216F 0F85A15D0000        <1>  jne L_error_incorrect_type
  2969 00002175 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2970 00002178 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2971 0000217B 50                      	push rax
  2972 0000217C 6A01                    	push 1
  2973 0000217E 488B4510                	mov rax, qword [rbp + 8 * 2]
  2974                                  
  2975 00002182 488B00                                            	mov rax, qword[rax + 8 * 0]
  2976                                  
  2977 00002185 488B00                                            	mov rax, qword[rax + 8 * 0]
  2978                                  	assert_closure(rax)
    42 00002188 803805              <1>  cmp byte [%1], %2
    43 0000218B 0F85855D0000        <1>  jne L_error_incorrect_type
  2979 00002191 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2980 00002194 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2981 00002197 50                      	push rax
  2982 00002198 6A01                    	push 1
  2983 0000219A 488B4510                	mov rax, qword [rbp + 8 * 2]
  2984                                  
  2985 0000219E 488B00                                            	mov rax, qword[rax + 8 * 0]
  2986                                  
  2987 000021A1 488B00                                            	mov rax, qword[rax + 8 * 0]
  2988                                  	assert_closure(rax)
    42 000021A4 803805              <1>  cmp byte [%1], %2
    43 000021A7 0F85695D0000        <1>  jne L_error_incorrect_type
  2989 000021AD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2990 000021B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2991 000021B3 50                      	push rax
  2992 000021B4 6A01                    	push 1
  2993 000021B6 488B4510                	mov rax, qword [rbp + 8 * 2]
  2994                                  
  2995 000021BA 488B00                                            	mov rax, qword[rax + 8 * 0]
  2996                                  
  2997 000021BD 488B00                                            	mov rax, qword[rax + 8 * 0]
  2998                                  	assert_closure(rax)
    42 000021C0 803805              <1>  cmp byte [%1], %2
    43 000021C3 0F854D5D0000        <1>  jne L_error_incorrect_type
  2999 000021C9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3000 000021CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3001                                  	assert_closure(rax)
    42 000021CF 803805              <1>  cmp byte [%1], %2
    43 000021D2 0F853E5D0000        <1>  jne L_error_incorrect_type
  3002 000021D8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3003 000021DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3004                                  	assert_closure(rax)
    42 000021DE 803805              <1>  cmp byte [%1], %2
    43 000021E1 0F852F5D0000        <1>  jne L_error_incorrect_type
  3005 000021E7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3006 000021EA FF5009                  	call SOB_CLOSURE_CODE(rax)
  3007                                  	assert_closure(rax)
    42 000021ED 803805              <1>  cmp byte [%1], %2
    43 000021F0 0F85205D0000        <1>  jne L_error_incorrect_type
  3008 000021F6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3009 000021F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3010 000021FC 50                      	push rax
  3011 000021FD 6A01                    	push 1
  3012 000021FF 488B4510                	mov rax, qword [rbp + 8 * 2]
  3013                                  
  3014 00002203 488B00                                            	mov rax, qword[rax + 8 * 0]
  3015                                  
  3016 00002206 488B00                                            	mov rax, qword[rax + 8 * 0]
  3017 00002209 50                      	push rax
  3018 0000220A 6A01                    	push 1
  3019 0000220C 488B4510                	mov rax, qword [rbp + 8 * 2]
  3020                                  
  3021 00002210 488B00                                            	mov rax, qword[rax + 8 * 0]
  3022                                  
  3023 00002213 488B00                                            	mov rax, qword[rax + 8 * 0]
  3024                                  	assert_closure(rax)
    42 00002216 803805              <1>  cmp byte [%1], %2
    43 00002219 0F85F75C0000        <1>  jne L_error_incorrect_type
  3025 0000221F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3026 00002222 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3027 00002225 50                      	push rax
  3028 00002226 6A01                    	push 1
  3029 00002228 488B4510                	mov rax, qword [rbp + 8 * 2]
  3030                                  
  3031 0000222C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3032                                  
  3033 0000222F 488B00                                            	mov rax, qword[rax + 8 * 0]
  3034                                  	assert_closure(rax)
    42 00002232 803805              <1>  cmp byte [%1], %2
    43 00002235 0F85DB5C0000        <1>  jne L_error_incorrect_type
  3035 0000223B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3036 0000223E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3037 00002241 50                      	push rax
  3038 00002242 6A01                    	push 1
  3039 00002244 488B4510                	mov rax, qword [rbp + 8 * 2]
  3040                                  
  3041 00002248 488B00                                            	mov rax, qword[rax + 8 * 0]
  3042                                  
  3043 0000224B 488B00                                            	mov rax, qword[rax + 8 * 0]
  3044                                  	assert_closure(rax)
    42 0000224E 803805              <1>  cmp byte [%1], %2
    43 00002251 0F85BF5C0000        <1>  jne L_error_incorrect_type
  3045 00002257 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3046 0000225A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3047 0000225D 50                      	push rax
  3048 0000225E 6A01                    	push 1
  3049 00002260 488B4510                	mov rax, qword [rbp + 8 * 2]
  3050                                  
  3051 00002264 488B00                                            	mov rax, qword[rax + 8 * 0]
  3052                                  
  3053 00002267 488B00                                            	mov rax, qword[rax + 8 * 0]
  3054 0000226A 50                      	push rax
  3055 0000226B 6A01                    	push 1
  3056 0000226D 488B4510                	mov rax, qword [rbp + 8 * 2]
  3057                                  
  3058 00002271 488B00                                            	mov rax, qword[rax + 8 * 0]
  3059                                  
  3060 00002274 488B00                                            	mov rax, qword[rax + 8 * 0]
  3061                                  	assert_closure(rax)
    42 00002277 803805              <1>  cmp byte [%1], %2
    43 0000227A 0F85965C0000        <1>  jne L_error_incorrect_type
  3062 00002280 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3063 00002283 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3064 00002286 50                      	push rax
  3065 00002287 6A01                    	push 1
  3066 00002289 488B4510                	mov rax, qword [rbp + 8 * 2]
  3067                                  
  3068 0000228D 488B00                                            	mov rax, qword[rax + 8 * 0]
  3069                                  
  3070 00002290 488B00                                            	mov rax, qword[rax + 8 * 0]
  3071                                  	assert_closure(rax)
    42 00002293 803805              <1>  cmp byte [%1], %2
    43 00002296 0F857A5C0000        <1>  jne L_error_incorrect_type
  3072 0000229C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3073 0000229F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3074 000022A2 50                      	push rax
  3075 000022A3 6A01                    	push 1
  3076 000022A5 488B4510                	mov rax, qword [rbp + 8 * 2]
  3077                                  
  3078 000022A9 488B00                                            	mov rax, qword[rax + 8 * 0]
  3079                                  
  3080 000022AC 488B00                                            	mov rax, qword[rax + 8 * 0]
  3081                                  	assert_closure(rax)
    42 000022AF 803805              <1>  cmp byte [%1], %2
    43 000022B2 0F855E5C0000        <1>  jne L_error_incorrect_type
  3082 000022B8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3083 000022BB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3084                                  	assert_closure(rax)
    42 000022BE 803805              <1>  cmp byte [%1], %2
    43 000022C1 0F854F5C0000        <1>  jne L_error_incorrect_type
  3085 000022C7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3086 000022CA FF5009                  	call SOB_CLOSURE_CODE(rax)
  3087 000022CD 50                      	push rax
  3088 000022CE 6A01                    	push 1
  3089 000022D0 488B4510                	mov rax, qword [rbp + 8 * 2]
  3090                                  
  3091 000022D4 488B00                                            	mov rax, qword[rax + 8 * 0]
  3092                                  
  3093 000022D7 488B00                                            	mov rax, qword[rax + 8 * 0]
  3094 000022DA 50                      	push rax
  3095 000022DB 6A01                    	push 1
  3096 000022DD 488B4510                	mov rax, qword [rbp + 8 * 2]
  3097                                  
  3098 000022E1 488B00                                            	mov rax, qword[rax + 8 * 0]
  3099                                  
  3100 000022E4 488B00                                            	mov rax, qword[rax + 8 * 0]
  3101                                  	assert_closure(rax)
    42 000022E7 803805              <1>  cmp byte [%1], %2
    43 000022EA 0F85265C0000        <1>  jne L_error_incorrect_type
  3102 000022F0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3103 000022F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3104 000022F6 50                      	push rax
  3105 000022F7 6A01                    	push 1
  3106 000022F9 488B4510                	mov rax, qword [rbp + 8 * 2]
  3107                                  
  3108 000022FD 488B00                                            	mov rax, qword[rax + 8 * 0]
  3109                                  
  3110 00002300 488B00                                            	mov rax, qword[rax + 8 * 0]
  3111                                  	assert_closure(rax)
    42 00002303 803805              <1>  cmp byte [%1], %2
    43 00002306 0F850A5C0000        <1>  jne L_error_incorrect_type
  3112 0000230C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3113 0000230F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3114 00002312 50                      	push rax
  3115 00002313 6A01                    	push 1
  3116 00002315 488B4510                	mov rax, qword [rbp + 8 * 2]
  3117                                  
  3118 00002319 488B00                                            	mov rax, qword[rax + 8 * 0]
  3119                                  
  3120 0000231C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3121                                  	assert_closure(rax)
    42 0000231F 803805              <1>  cmp byte [%1], %2
    43 00002322 0F85EE5B0000        <1>  jne L_error_incorrect_type
  3122 00002328 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3123 0000232B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3124 0000232E 50                      	push rax
  3125 0000232F 6A01                    	push 1
  3126 00002331 488B4510                	mov rax, qword [rbp + 8 * 2]
  3127                                  
  3128 00002335 488B00                                            	mov rax, qword[rax + 8 * 0]
  3129                                  
  3130 00002338 488B00                                            	mov rax, qword[rax + 8 * 0]
  3131                                  	assert_closure(rax)
    42 0000233B 803805              <1>  cmp byte [%1], %2
    43 0000233E 0F85D25B0000        <1>  jne L_error_incorrect_type
  3132 00002344 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3133 00002347 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3134 0000234A 50                      	push rax
  3135 0000234B 6A01                    	push 1
  3136 0000234D 488B4510                	mov rax, qword [rbp + 8 * 2]
  3137                                  
  3138 00002351 488B00                                            	mov rax, qword[rax + 8 * 0]
  3139                                  
  3140 00002354 488B00                                            	mov rax, qword[rax + 8 * 0]
  3141 00002357 50                      	push rax
  3142 00002358 6A01                    	push 1
  3143 0000235A 488B4510                	mov rax, qword [rbp + 8 * 2]
  3144                                  
  3145 0000235E 488B00                                            	mov rax, qword[rax + 8 * 0]
  3146                                  
  3147 00002361 488B00                                            	mov rax, qword[rax + 8 * 0]
  3148                                  	assert_closure(rax)
    42 00002364 803805              <1>  cmp byte [%1], %2
    43 00002367 0F85A95B0000        <1>  jne L_error_incorrect_type
  3149 0000236D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3150 00002370 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3151 00002373 50                      	push rax
  3152 00002374 6A01                    	push 1
  3153 00002376 488B4510                	mov rax, qword [rbp + 8 * 2]
  3154                                  
  3155 0000237A 488B00                                            	mov rax, qword[rax + 8 * 0]
  3156                                  
  3157 0000237D 488B00                                            	mov rax, qword[rax + 8 * 0]
  3158                                  	assert_closure(rax)
    42 00002380 803805              <1>  cmp byte [%1], %2
    43 00002383 0F858D5B0000        <1>  jne L_error_incorrect_type
  3159 00002389 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3160 0000238C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3161 0000238F 50                      	push rax
  3162 00002390 6A01                    	push 1
  3163 00002392 488B4510                	mov rax, qword [rbp + 8 * 2]
  3164                                  
  3165 00002396 488B00                                            	mov rax, qword[rax + 8 * 0]
  3166                                  
  3167 00002399 488B00                                            	mov rax, qword[rax + 8 * 0]
  3168                                  	assert_closure(rax)
    42 0000239C 803805              <1>  cmp byte [%1], %2
    43 0000239F 0F85715B0000        <1>  jne L_error_incorrect_type
  3169 000023A5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3170 000023A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3171 000023AB 50                      	push rax
  3172 000023AC 6A01                    	push 1
  3173 000023AE 488B4510                	mov rax, qword [rbp + 8 * 2]
  3174                                  
  3175 000023B2 488B00                                            	mov rax, qword[rax + 8 * 0]
  3176                                  
  3177 000023B5 488B00                                            	mov rax, qword[rax + 8 * 0]
  3178 000023B8 50                      	push rax
  3179 000023B9 6A01                    	push 1
  3180 000023BB 488B4510                	mov rax, qword [rbp + 8 * 2]
  3181                                  
  3182 000023BF 488B00                                            	mov rax, qword[rax + 8 * 0]
  3183                                  
  3184 000023C2 488B00                                            	mov rax, qword[rax + 8 * 0]
  3185                                  	assert_closure(rax)
    42 000023C5 803805              <1>  cmp byte [%1], %2
    43 000023C8 0F85485B0000        <1>  jne L_error_incorrect_type
  3186 000023CE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3187 000023D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3188 000023D4 50                      	push rax
  3189 000023D5 6A01                    	push 1
  3190 000023D7 488B4510                	mov rax, qword [rbp + 8 * 2]
  3191                                  
  3192 000023DB 488B00                                            	mov rax, qword[rax + 8 * 0]
  3193                                  
  3194 000023DE 488B00                                            	mov rax, qword[rax + 8 * 0]
  3195                                  	assert_closure(rax)
    42 000023E1 803805              <1>  cmp byte [%1], %2
    43 000023E4 0F852C5B0000        <1>  jne L_error_incorrect_type
  3196 000023EA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3197 000023ED FF5009                  	call SOB_CLOSURE_CODE(rax)
  3198 000023F0 50                      	push rax
  3199 000023F1 6A01                    	push 1
  3200 000023F3 488B4510                	mov rax, qword [rbp + 8 * 2]
  3201                                  
  3202 000023F7 488B00                                            	mov rax, qword[rax + 8 * 0]
  3203                                  
  3204 000023FA 488B00                                            	mov rax, qword[rax + 8 * 0]
  3205                                  	assert_closure(rax)
    42 000023FD 803805              <1>  cmp byte [%1], %2
    43 00002400 0F85105B0000        <1>  jne L_error_incorrect_type
  3206 00002406 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3207 00002409 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3208                                  	assert_closure(rax)
    42 0000240C 803805              <1>  cmp byte [%1], %2
    43 0000240F 0F85015B0000        <1>  jne L_error_incorrect_type
  3209 00002415 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3210 00002418 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3211 0000241B 50                      	push rax
  3212 0000241C 6A01                    	push 1
  3213 0000241E 488B4510                	mov rax, qword [rbp + 8 * 2]
  3214                                  
  3215 00002422 488B00                                            	mov rax, qword[rax + 8 * 0]
  3216                                  
  3217 00002425 488B00                                            	mov rax, qword[rax + 8 * 0]
  3218 00002428 50                      	push rax
  3219 00002429 6A01                    	push 1
  3220 0000242B 488B4510                	mov rax, qword [rbp + 8 * 2]
  3221                                  
  3222 0000242F 488B00                                            	mov rax, qword[rax + 8 * 0]
  3223                                  
  3224 00002432 488B00                                            	mov rax, qword[rax + 8 * 0]
  3225                                  	assert_closure(rax)
    42 00002435 803805              <1>  cmp byte [%1], %2
    43 00002438 0F85D85A0000        <1>  jne L_error_incorrect_type
  3226 0000243E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3227 00002441 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3228 00002444 50                      	push rax
  3229 00002445 6A01                    	push 1
  3230 00002447 488B4510                	mov rax, qword [rbp + 8 * 2]
  3231                                  
  3232 0000244B 488B00                                            	mov rax, qword[rax + 8 * 0]
  3233                                  
  3234 0000244E 488B00                                            	mov rax, qword[rax + 8 * 0]
  3235                                  	assert_closure(rax)
    42 00002451 803805              <1>  cmp byte [%1], %2
    43 00002454 0F85BC5A0000        <1>  jne L_error_incorrect_type
  3236 0000245A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3237 0000245D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3238 00002460 50                      	push rax
  3239 00002461 6A01                    	push 1
  3240 00002463 488B4510                	mov rax, qword [rbp + 8 * 2]
  3241                                  
  3242 00002467 488B00                                            	mov rax, qword[rax + 8 * 0]
  3243                                  
  3244 0000246A 488B00                                            	mov rax, qword[rax + 8 * 0]
  3245                                  	assert_closure(rax)
    42 0000246D 803805              <1>  cmp byte [%1], %2
    43 00002470 0F85A05A0000        <1>  jne L_error_incorrect_type
  3246 00002476 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3247 00002479 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3248 0000247C 50                      	push rax
  3249 0000247D 6A01                    	push 1
  3250 0000247F 488B4510                	mov rax, qword [rbp + 8 * 2]
  3251                                  
  3252 00002483 488B00                                            	mov rax, qword[rax + 8 * 0]
  3253                                  
  3254 00002486 488B00                                            	mov rax, qword[rax + 8 * 0]
  3255                                  	assert_closure(rax)
    42 00002489 803805              <1>  cmp byte [%1], %2
    43 0000248C 0F85845A0000        <1>  jne L_error_incorrect_type
  3256 00002492 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3257 00002495 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3258                                  	assert_closure(rax)
    42 00002498 803805              <1>  cmp byte [%1], %2
    43 0000249B 0F85755A0000        <1>  jne L_error_incorrect_type
  3259 000024A1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3260 000024A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3261                                  	assert_closure(rax)
    42 000024A7 803805              <1>  cmp byte [%1], %2
    43 000024AA 0F85665A0000        <1>  jne L_error_incorrect_type
  3262 000024B0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3263 000024B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3264 000024B6 50                      	push rax
  3265 000024B7 6A01                    	push 1
  3266 000024B9 488B4510                	mov rax, qword [rbp + 8 * 2]
  3267                                  
  3268 000024BD 488B00                                            	mov rax, qword[rax + 8 * 0]
  3269                                  
  3270 000024C0 488B00                                            	mov rax, qword[rax + 8 * 0]
  3271 000024C3 50                      	push rax
  3272 000024C4 6A01                    	push 1
  3273 000024C6 488B4510                	mov rax, qword [rbp + 8 * 2]
  3274                                  
  3275 000024CA 488B00                                            	mov rax, qword[rax + 8 * 0]
  3276                                  
  3277 000024CD 488B00                                            	mov rax, qword[rax + 8 * 0]
  3278                                  	assert_closure(rax)
    42 000024D0 803805              <1>  cmp byte [%1], %2
    43 000024D3 0F853D5A0000        <1>  jne L_error_incorrect_type
  3279 000024D9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3280 000024DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3281 000024DF 50                      	push rax
  3282 000024E0 6A01                    	push 1
  3283 000024E2 488B4510                	mov rax, qword [rbp + 8 * 2]
  3284                                  
  3285 000024E6 488B00                                            	mov rax, qword[rax + 8 * 0]
  3286                                  
  3287 000024E9 488B00                                            	mov rax, qword[rax + 8 * 0]
  3288                                  	assert_closure(rax)
    42 000024EC 803805              <1>  cmp byte [%1], %2
    43 000024EF 0F85215A0000        <1>  jne L_error_incorrect_type
  3289 000024F5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3290 000024F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3291 000024FB 50                      	push rax
  3292 000024FC 6A01                    	push 1
  3293 000024FE 488B4510                	mov rax, qword [rbp + 8 * 2]
  3294                                  
  3295 00002502 488B00                                            	mov rax, qword[rax + 8 * 0]
  3296                                  
  3297 00002505 488B00                                            	mov rax, qword[rax + 8 * 0]
  3298                                  	assert_closure(rax)
    42 00002508 803805              <1>  cmp byte [%1], %2
    43 0000250B 0F85055A0000        <1>  jne L_error_incorrect_type
  3299 00002511 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3300 00002514 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3301 00002517 50                      	push rax
  3302 00002518 6A01                    	push 1
  3303 0000251A 488B4510                	mov rax, qword [rbp + 8 * 2]
  3304                                  
  3305 0000251E 488B00                                            	mov rax, qword[rax + 8 * 0]
  3306                                  
  3307 00002521 488B00                                            	mov rax, qword[rax + 8 * 0]
  3308                                  	assert_closure(rax)
    42 00002524 803805              <1>  cmp byte [%1], %2
    43 00002527 0F85E9590000        <1>  jne L_error_incorrect_type
  3309 0000252D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3310 00002530 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3311 00002533 50                      	push rax
  3312 00002534 6A01                    	push 1
  3313 00002536 488B4510                	mov rax, qword [rbp + 8 * 2]
  3314                                  
  3315 0000253A 488B00                                            	mov rax, qword[rax + 8 * 0]
  3316                                  
  3317 0000253D 488B00                                            	mov rax, qword[rax + 8 * 0]
  3318 00002540 50                      	push rax
  3319 00002541 6A01                    	push 1
  3320 00002543 488B4510                	mov rax, qword [rbp + 8 * 2]
  3321                                  
  3322 00002547 488B00                                            	mov rax, qword[rax + 8 * 0]
  3323                                  
  3324 0000254A 488B00                                            	mov rax, qword[rax + 8 * 0]
  3325                                  	assert_closure(rax)
    42 0000254D 803805              <1>  cmp byte [%1], %2
    43 00002550 0F85C0590000        <1>  jne L_error_incorrect_type
  3326 00002556 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3327 00002559 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3328 0000255C 50                      	push rax
  3329 0000255D 6A01                    	push 1
  3330 0000255F 488B4510                	mov rax, qword [rbp + 8 * 2]
  3331                                  
  3332 00002563 488B00                                            	mov rax, qword[rax + 8 * 0]
  3333                                  
  3334 00002566 488B00                                            	mov rax, qword[rax + 8 * 0]
  3335                                  	assert_closure(rax)
    42 00002569 803805              <1>  cmp byte [%1], %2
    43 0000256C 0F85A4590000        <1>  jne L_error_incorrect_type
  3336 00002572 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3337 00002575 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3338 00002578 50                      	push rax
  3339 00002579 6A01                    	push 1
  3340 0000257B 488B4510                	mov rax, qword [rbp + 8 * 2]
  3341                                  
  3342 0000257F 488B00                                            	mov rax, qword[rax + 8 * 0]
  3343                                  
  3344 00002582 488B00                                            	mov rax, qword[rax + 8 * 0]
  3345                                  	assert_closure(rax)
    42 00002585 803805              <1>  cmp byte [%1], %2
    43 00002588 0F8588590000        <1>  jne L_error_incorrect_type
  3346 0000258E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3347 00002591 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3348                                  	assert_closure(rax)
    42 00002594 803805              <1>  cmp byte [%1], %2
    43 00002597 0F8579590000        <1>  jne L_error_incorrect_type
  3349 0000259D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3350 000025A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3351 000025A3 50                      	push rax
  3352 000025A4 6A01                    	push 1
  3353 000025A6 488B4510                	mov rax, qword [rbp + 8 * 2]
  3354                                  
  3355 000025AA 488B00                                            	mov rax, qword[rax + 8 * 0]
  3356                                  
  3357 000025AD 488B00                                            	mov rax, qword[rax + 8 * 0]
  3358 000025B0 50                      	push rax
  3359 000025B1 6A01                    	push 1
  3360 000025B3 488B4510                	mov rax, qword [rbp + 8 * 2]
  3361                                  
  3362 000025B7 488B00                                            	mov rax, qword[rax + 8 * 0]
  3363                                  
  3364 000025BA 488B00                                            	mov rax, qword[rax + 8 * 0]
  3365                                  	assert_closure(rax)
    42 000025BD 803805              <1>  cmp byte [%1], %2
    43 000025C0 0F8550590000        <1>  jne L_error_incorrect_type
  3366 000025C6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3367 000025C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3368 000025CC 50                      	push rax
  3369 000025CD 6A01                    	push 1
  3370 000025CF 488B4510                	mov rax, qword [rbp + 8 * 2]
  3371                                  
  3372 000025D3 488B00                                            	mov rax, qword[rax + 8 * 0]
  3373                                  
  3374 000025D6 488B00                                            	mov rax, qword[rax + 8 * 0]
  3375                                  	assert_closure(rax)
    42 000025D9 803805              <1>  cmp byte [%1], %2
    43 000025DC 0F8534590000        <1>  jne L_error_incorrect_type
  3376 000025E2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3377 000025E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3378 000025E8 50                      	push rax
  3379 000025E9 6A01                    	push 1
  3380 000025EB 488B4510                	mov rax, qword [rbp + 8 * 2]
  3381                                  
  3382 000025EF 488B00                                            	mov rax, qword[rax + 8 * 0]
  3383                                  
  3384 000025F2 488B00                                            	mov rax, qword[rax + 8 * 0]
  3385                                  	assert_closure(rax)
    42 000025F5 803805              <1>  cmp byte [%1], %2
    43 000025F8 0F8518590000        <1>  jne L_error_incorrect_type
  3386 000025FE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3387 00002601 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3388 00002604 50                      	push rax
  3389 00002605 6A01                    	push 1
  3390 00002607 488B4510                	mov rax, qword [rbp + 8 * 2]
  3391                                  
  3392 0000260B 488B00                                            	mov rax, qword[rax + 8 * 0]
  3393                                  
  3394 0000260E 488B00                                            	mov rax, qword[rax + 8 * 0]
  3395                                  	assert_closure(rax)
    42 00002611 803805              <1>  cmp byte [%1], %2
    43 00002614 0F85FC580000        <1>  jne L_error_incorrect_type
  3396 0000261A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3397 0000261D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3398                                  	assert_closure(rax)
    42 00002620 803805              <1>  cmp byte [%1], %2
    43 00002623 0F85ED580000        <1>  jne L_error_incorrect_type
  3399 00002629 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3400 0000262C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3401                                  	assert_closure(rax)
    42 0000262F 803805              <1>  cmp byte [%1], %2
    43 00002632 0F85DE580000        <1>  jne L_error_incorrect_type
  3402 00002638 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3403 0000263B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3404 0000263E 50                      	push rax
  3405 0000263F 6A01                    	push 1
  3406 00002641 488B4510                	mov rax, qword [rbp + 8 * 2]
  3407                                  
  3408 00002645 488B00                                            	mov rax, qword[rax + 8 * 0]
  3409                                  
  3410 00002648 488B00                                            	mov rax, qword[rax + 8 * 0]
  3411 0000264B 50                      	push rax
  3412 0000264C 6A01                    	push 1
  3413 0000264E 488B4510                	mov rax, qword [rbp + 8 * 2]
  3414                                  
  3415 00002652 488B00                                            	mov rax, qword[rax + 8 * 0]
  3416                                  
  3417 00002655 488B00                                            	mov rax, qword[rax + 8 * 0]
  3418                                  	assert_closure(rax)
    42 00002658 803805              <1>  cmp byte [%1], %2
    43 0000265B 0F85B5580000        <1>  jne L_error_incorrect_type
  3419 00002661 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3420 00002664 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3421 00002667 50                      	push rax
  3422 00002668 6A01                    	push 1
  3423 0000266A 488B4510                	mov rax, qword [rbp + 8 * 2]
  3424                                  
  3425 0000266E 488B00                                            	mov rax, qword[rax + 8 * 0]
  3426                                  
  3427 00002671 488B00                                            	mov rax, qword[rax + 8 * 0]
  3428                                  	assert_closure(rax)
    42 00002674 803805              <1>  cmp byte [%1], %2
    43 00002677 0F8599580000        <1>  jne L_error_incorrect_type
  3429 0000267D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3430 00002680 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3431 00002683 50                      	push rax
  3432 00002684 6A01                    	push 1
  3433 00002686 488B4510                	mov rax, qword [rbp + 8 * 2]
  3434                                  
  3435 0000268A 488B00                                            	mov rax, qword[rax + 8 * 0]
  3436                                  
  3437 0000268D 488B00                                            	mov rax, qword[rax + 8 * 0]
  3438                                  	assert_closure(rax)
    42 00002690 803805              <1>  cmp byte [%1], %2
    43 00002693 0F857D580000        <1>  jne L_error_incorrect_type
  3439 00002699 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3440 0000269C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3441 0000269F 50                      	push rax
  3442 000026A0 6A01                    	push 1
  3443 000026A2 488B4510                	mov rax, qword [rbp + 8 * 2]
  3444                                  
  3445 000026A6 488B00                                            	mov rax, qword[rax + 8 * 0]
  3446                                  
  3447 000026A9 488B00                                            	mov rax, qword[rax + 8 * 0]
  3448                                  	assert_closure(rax)
    42 000026AC 803805              <1>  cmp byte [%1], %2
    43 000026AF 0F8561580000        <1>  jne L_error_incorrect_type
  3449 000026B5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3450 000026B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3451                                  	assert_closure(rax)
    42 000026BB 803805              <1>  cmp byte [%1], %2
    43 000026BE 0F8552580000        <1>  jne L_error_incorrect_type
  3452 000026C4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3453 000026C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3454                                  	assert_closure(rax)
    42 000026CA 803805              <1>  cmp byte [%1], %2
    43 000026CD 0F8543580000        <1>  jne L_error_incorrect_type
  3455 000026D3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3456 000026D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3457 000026D9 50                      	push rax
  3458 000026DA 6A01                    	push 1
  3459 000026DC 488B4510                	mov rax, qword [rbp + 8 * 2]
  3460                                  
  3461 000026E0 488B00                                            	mov rax, qword[rax + 8 * 0]
  3462                                  
  3463 000026E3 488B00                                            	mov rax, qword[rax + 8 * 0]
  3464 000026E6 50                      	push rax
  3465 000026E7 6A01                    	push 1
  3466 000026E9 488B4510                	mov rax, qword [rbp + 8 * 2]
  3467                                  
  3468 000026ED 488B00                                            	mov rax, qword[rax + 8 * 0]
  3469                                  
  3470 000026F0 488B00                                            	mov rax, qword[rax + 8 * 0]
  3471                                  	assert_closure(rax)
    42 000026F3 803805              <1>  cmp byte [%1], %2
    43 000026F6 0F851A580000        <1>  jne L_error_incorrect_type
  3472 000026FC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3473 000026FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3474 00002702 50                      	push rax
  3475 00002703 6A01                    	push 1
  3476 00002705 488B4510                	mov rax, qword [rbp + 8 * 2]
  3477                                  
  3478 00002709 488B00                                            	mov rax, qword[rax + 8 * 0]
  3479                                  
  3480 0000270C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3481                                  	assert_closure(rax)
    42 0000270F 803805              <1>  cmp byte [%1], %2
    43 00002712 0F85FE570000        <1>  jne L_error_incorrect_type
  3482 00002718 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3483 0000271B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3484 0000271E 50                      	push rax
  3485 0000271F 6A01                    	push 1
  3486 00002721 488B4510                	mov rax, qword [rbp + 8 * 2]
  3487                                  
  3488 00002725 488B00                                            	mov rax, qword[rax + 8 * 0]
  3489                                  
  3490 00002728 488B00                                            	mov rax, qword[rax + 8 * 0]
  3491                                  	assert_closure(rax)
    42 0000272B 803805              <1>  cmp byte [%1], %2
    43 0000272E 0F85E2570000        <1>  jne L_error_incorrect_type
  3492 00002734 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3493 00002737 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3494                                  	assert_closure(rax)
    42 0000273A 803805              <1>  cmp byte [%1], %2
    43 0000273D 0F85D3570000        <1>  jne L_error_incorrect_type
  3495 00002743 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3496 00002746 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3497 00002749 50                      	push rax
  3498 0000274A 6A01                    	push 1
  3499 0000274C 488B4510                	mov rax, qword [rbp + 8 * 2]
  3500                                  
  3501 00002750 488B00                                            	mov rax, qword[rax + 8 * 0]
  3502                                  
  3503 00002753 488B00                                            	mov rax, qword[rax + 8 * 0]
  3504 00002756 50                      	push rax
  3505 00002757 6A01                    	push 1
  3506 00002759 488B4510                	mov rax, qword [rbp + 8 * 2]
  3507                                  
  3508 0000275D 488B00                                            	mov rax, qword[rax + 8 * 0]
  3509                                  
  3510 00002760 488B00                                            	mov rax, qword[rax + 8 * 0]
  3511                                  	assert_closure(rax)
    42 00002763 803805              <1>  cmp byte [%1], %2
    43 00002766 0F85AA570000        <1>  jne L_error_incorrect_type
  3512 0000276C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3513 0000276F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3514 00002772 50                      	push rax
  3515 00002773 6A01                    	push 1
  3516 00002775 488B4510                	mov rax, qword [rbp + 8 * 2]
  3517                                  
  3518 00002779 488B00                                            	mov rax, qword[rax + 8 * 0]
  3519                                  
  3520 0000277C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3521                                  	assert_closure(rax)
    42 0000277F 803805              <1>  cmp byte [%1], %2
    43 00002782 0F858E570000        <1>  jne L_error_incorrect_type
  3522 00002788 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3523 0000278B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3524 0000278E 50                      	push rax
  3525 0000278F 6A01                    	push 1
  3526 00002791 488B4510                	mov rax, qword [rbp + 8 * 2]
  3527                                  
  3528 00002795 488B00                                            	mov rax, qword[rax + 8 * 0]
  3529                                  
  3530 00002798 488B00                                            	mov rax, qword[rax + 8 * 0]
  3531                                  	assert_closure(rax)
    42 0000279B 803805              <1>  cmp byte [%1], %2
    43 0000279E 0F8572570000        <1>  jne L_error_incorrect_type
  3532 000027A4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3533 000027A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3534 000027AA 50                      	push rax
  3535 000027AB 6A01                    	push 1
  3536 000027AD 488B4510                	mov rax, qword [rbp + 8 * 2]
  3537                                  
  3538 000027B1 488B00                                            	mov rax, qword[rax + 8 * 0]
  3539                                  
  3540 000027B4 488B00                                            	mov rax, qword[rax + 8 * 0]
  3541                                  	assert_closure(rax)
    42 000027B7 803805              <1>  cmp byte [%1], %2
    43 000027BA 0F8556570000        <1>  jne L_error_incorrect_type
  3542 000027C0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3543 000027C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3544                                  	assert_closure(rax)
    42 000027C6 803805              <1>  cmp byte [%1], %2
    43 000027C9 0F8547570000        <1>  jne L_error_incorrect_type
  3545 000027CF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3546 000027D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3547                                  	assert_closure(rax)
    42 000027D5 803805              <1>  cmp byte [%1], %2
    43 000027D8 0F8538570000        <1>  jne L_error_incorrect_type
  3548 000027DE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3549 000027E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3550                                  	assert_closure(rax)
    42 000027E4 803805              <1>  cmp byte [%1], %2
    43 000027E7 0F8529570000        <1>  jne L_error_incorrect_type
  3551 000027ED FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3552 000027F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3553                                  	assert_closure(rax)
    42 000027F3 803805              <1>  cmp byte [%1], %2
    43 000027F6 0F851A570000        <1>  jne L_error_incorrect_type
  3554 000027FC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3555 000027FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3556 00002802 50                      	push rax
  3557 00002803 6A01                    	push 1
  3558 00002805 488B4510                	mov rax, qword [rbp + 8 * 2]
  3559                                  
  3560 00002809 488B00                                            	mov rax, qword[rax + 8 * 0]
  3561                                  
  3562 0000280C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3563 0000280F 50                      	push rax
  3564 00002810 6A01                    	push 1
  3565 00002812 488B4510                	mov rax, qword [rbp + 8 * 2]
  3566                                  
  3567 00002816 488B00                                            	mov rax, qword[rax + 8 * 0]
  3568                                  
  3569 00002819 488B00                                            	mov rax, qword[rax + 8 * 0]
  3570                                  	assert_closure(rax)
    42 0000281C 803805              <1>  cmp byte [%1], %2
    43 0000281F 0F85F1560000        <1>  jne L_error_incorrect_type
  3571 00002825 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3572 00002828 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3573 0000282B 50                      	push rax
  3574 0000282C 6A01                    	push 1
  3575 0000282E 488B4510                	mov rax, qword [rbp + 8 * 2]
  3576                                  
  3577 00002832 488B00                                            	mov rax, qword[rax + 8 * 0]
  3578                                  
  3579 00002835 488B00                                            	mov rax, qword[rax + 8 * 0]
  3580                                  	assert_closure(rax)
    42 00002838 803805              <1>  cmp byte [%1], %2
    43 0000283B 0F85D5560000        <1>  jne L_error_incorrect_type
  3581 00002841 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3582 00002844 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3583 00002847 50                      	push rax
  3584 00002848 6A01                    	push 1
  3585 0000284A 488B4510                	mov rax, qword [rbp + 8 * 2]
  3586                                  
  3587 0000284E 488B00                                            	mov rax, qword[rax + 8 * 0]
  3588                                  
  3589 00002851 488B00                                            	mov rax, qword[rax + 8 * 0]
  3590                                  	assert_closure(rax)
    42 00002854 803805              <1>  cmp byte [%1], %2
    43 00002857 0F85B9560000        <1>  jne L_error_incorrect_type
  3591 0000285D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3592 00002860 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3593 00002863 50                      	push rax
  3594 00002864 6A01                    	push 1
  3595 00002866 488B4510                	mov rax, qword [rbp + 8 * 2]
  3596                                  
  3597 0000286A 488B00                                            	mov rax, qword[rax + 8 * 0]
  3598                                  
  3599 0000286D 488B00                                            	mov rax, qword[rax + 8 * 0]
  3600 00002870 50                      	push rax
  3601 00002871 6A01                    	push 1
  3602 00002873 488B4510                	mov rax, qword [rbp + 8 * 2]
  3603                                  
  3604 00002877 488B00                                            	mov rax, qword[rax + 8 * 0]
  3605                                  
  3606 0000287A 488B00                                            	mov rax, qword[rax + 8 * 0]
  3607                                  	assert_closure(rax)
    42 0000287D 803805              <1>  cmp byte [%1], %2
    43 00002880 0F8590560000        <1>  jne L_error_incorrect_type
  3608 00002886 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3609 00002889 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3610 0000288C 50                      	push rax
  3611 0000288D 6A01                    	push 1
  3612 0000288F 488B4510                	mov rax, qword [rbp + 8 * 2]
  3613                                  
  3614 00002893 488B00                                            	mov rax, qword[rax + 8 * 0]
  3615                                  
  3616 00002896 488B00                                            	mov rax, qword[rax + 8 * 0]
  3617                                  	assert_closure(rax)
    42 00002899 803805              <1>  cmp byte [%1], %2
    43 0000289C 0F8574560000        <1>  jne L_error_incorrect_type
  3618 000028A2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3619 000028A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3620 000028A8 50                      	push rax
  3621 000028A9 6A01                    	push 1
  3622 000028AB 488B4510                	mov rax, qword [rbp + 8 * 2]
  3623                                  
  3624 000028AF 488B00                                            	mov rax, qword[rax + 8 * 0]
  3625                                  
  3626 000028B2 488B00                                            	mov rax, qword[rax + 8 * 0]
  3627                                  	assert_closure(rax)
    42 000028B5 803805              <1>  cmp byte [%1], %2
    43 000028B8 0F8558560000        <1>  jne L_error_incorrect_type
  3628 000028BE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3629 000028C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3630 000028C4 50                      	push rax
  3631 000028C5 6A01                    	push 1
  3632 000028C7 488B4510                	mov rax, qword [rbp + 8 * 2]
  3633                                  
  3634 000028CB 488B00                                            	mov rax, qword[rax + 8 * 0]
  3635                                  
  3636 000028CE 488B00                                            	mov rax, qword[rax + 8 * 0]
  3637 000028D1 50                      	push rax
  3638 000028D2 6A01                    	push 1
  3639 000028D4 488B4510                	mov rax, qword [rbp + 8 * 2]
  3640                                  
  3641 000028D8 488B00                                            	mov rax, qword[rax + 8 * 0]
  3642                                  
  3643 000028DB 488B00                                            	mov rax, qword[rax + 8 * 0]
  3644                                  	assert_closure(rax)
    42 000028DE 803805              <1>  cmp byte [%1], %2
    43 000028E1 0F852F560000        <1>  jne L_error_incorrect_type
  3645 000028E7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3646 000028EA FF5009                  	call SOB_CLOSURE_CODE(rax)
  3647 000028ED 50                      	push rax
  3648 000028EE 6A01                    	push 1
  3649 000028F0 488B4510                	mov rax, qword [rbp + 8 * 2]
  3650                                  
  3651 000028F4 488B00                                            	mov rax, qword[rax + 8 * 0]
  3652                                  
  3653 000028F7 488B00                                            	mov rax, qword[rax + 8 * 0]
  3654                                  	assert_closure(rax)
    42 000028FA 803805              <1>  cmp byte [%1], %2
    43 000028FD 0F8513560000        <1>  jne L_error_incorrect_type
  3655 00002903 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3656 00002906 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3657 00002909 50                      	push rax
  3658 0000290A 6A01                    	push 1
  3659 0000290C 488B4510                	mov rax, qword [rbp + 8 * 2]
  3660                                  
  3661 00002910 488B00                                            	mov rax, qword[rax + 8 * 0]
  3662                                  
  3663 00002913 488B00                                            	mov rax, qword[rax + 8 * 0]
  3664                                  	assert_closure(rax)
    42 00002916 803805              <1>  cmp byte [%1], %2
    43 00002919 0F85F7550000        <1>  jne L_error_incorrect_type
  3665 0000291F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3666 00002922 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3667 00002925 50                      	push rax
  3668 00002926 6A01                    	push 1
  3669 00002928 488B4510                	mov rax, qword [rbp + 8 * 2]
  3670                                  
  3671 0000292C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3672                                  
  3673 0000292F 488B00                                            	mov rax, qword[rax + 8 * 0]
  3674                                  	assert_closure(rax)
    42 00002932 803805              <1>  cmp byte [%1], %2
    43 00002935 0F85DB550000        <1>  jne L_error_incorrect_type
  3675 0000293B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3676 0000293E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3677                                  	assert_closure(rax)
    42 00002941 803805              <1>  cmp byte [%1], %2
    43 00002944 0F85CC550000        <1>  jne L_error_incorrect_type
  3678 0000294A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3679 0000294D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3680                                  	assert_closure(rax)
    42 00002950 803805              <1>  cmp byte [%1], %2
    43 00002953 0F85BD550000        <1>  jne L_error_incorrect_type
  3681 00002959 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3682 0000295C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3683 0000295F 50                      	push rax
  3684 00002960 6A01                    	push 1
  3685 00002962 488B4510                	mov rax, qword [rbp + 8 * 2]
  3686                                  
  3687 00002966 488B00                                            	mov rax, qword[rax + 8 * 0]
  3688                                  
  3689 00002969 488B00                                            	mov rax, qword[rax + 8 * 0]
  3690 0000296C 50                      	push rax
  3691 0000296D 6A01                    	push 1
  3692 0000296F 488B4510                	mov rax, qword [rbp + 8 * 2]
  3693                                  
  3694 00002973 488B00                                            	mov rax, qword[rax + 8 * 0]
  3695                                  
  3696 00002976 488B00                                            	mov rax, qword[rax + 8 * 0]
  3697                                  	assert_closure(rax)
    42 00002979 803805              <1>  cmp byte [%1], %2
    43 0000297C 0F8594550000        <1>  jne L_error_incorrect_type
  3698 00002982 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3699 00002985 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3700 00002988 50                      	push rax
  3701 00002989 6A01                    	push 1
  3702 0000298B 488B4510                	mov rax, qword [rbp + 8 * 2]
  3703                                  
  3704 0000298F 488B00                                            	mov rax, qword[rax + 8 * 0]
  3705                                  
  3706 00002992 488B00                                            	mov rax, qword[rax + 8 * 0]
  3707                                  	assert_closure(rax)
    42 00002995 803805              <1>  cmp byte [%1], %2
    43 00002998 0F8578550000        <1>  jne L_error_incorrect_type
  3708 0000299E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3709 000029A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3710 000029A4 50                      	push rax
  3711 000029A5 6A01                    	push 1
  3712 000029A7 488B4510                	mov rax, qword [rbp + 8 * 2]
  3713                                  
  3714 000029AB 488B00                                            	mov rax, qword[rax + 8 * 0]
  3715                                  
  3716 000029AE 488B00                                            	mov rax, qword[rax + 8 * 0]
  3717                                  	assert_closure(rax)
    42 000029B1 803805              <1>  cmp byte [%1], %2
    43 000029B4 0F855C550000        <1>  jne L_error_incorrect_type
  3718 000029BA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3719 000029BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3720                                  	assert_closure(rax)
    42 000029C0 803805              <1>  cmp byte [%1], %2
    43 000029C3 0F854D550000        <1>  jne L_error_incorrect_type
  3721 000029C9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3722 000029CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  3723 000029CF 50                      	push rax
  3724 000029D0 6A01                    	push 1
  3725 000029D2 488B4510                	mov rax, qword [rbp + 8 * 2]
  3726                                  
  3727 000029D6 488B00                                            	mov rax, qword[rax + 8 * 0]
  3728                                  
  3729 000029D9 488B00                                            	mov rax, qword[rax + 8 * 0]
  3730 000029DC 50                      	push rax
  3731 000029DD 6A01                    	push 1
  3732 000029DF 488B4510                	mov rax, qword [rbp + 8 * 2]
  3733                                  
  3734 000029E3 488B00                                            	mov rax, qword[rax + 8 * 0]
  3735                                  
  3736 000029E6 488B00                                            	mov rax, qword[rax + 8 * 0]
  3737                                  	assert_closure(rax)
    42 000029E9 803805              <1>  cmp byte [%1], %2
    43 000029EC 0F8524550000        <1>  jne L_error_incorrect_type
  3738 000029F2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3739 000029F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3740 000029F8 50                      	push rax
  3741 000029F9 6A01                    	push 1
  3742 000029FB 488B4510                	mov rax, qword [rbp + 8 * 2]
  3743                                  
  3744 000029FF 488B00                                            	mov rax, qword[rax + 8 * 0]
  3745                                  
  3746 00002A02 488B00                                            	mov rax, qword[rax + 8 * 0]
  3747                                  	assert_closure(rax)
    42 00002A05 803805              <1>  cmp byte [%1], %2
    43 00002A08 0F8508550000        <1>  jne L_error_incorrect_type
  3748 00002A0E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3749 00002A11 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3750 00002A14 50                      	push rax
  3751 00002A15 6A01                    	push 1
  3752 00002A17 488B4510                	mov rax, qword [rbp + 8 * 2]
  3753                                  
  3754 00002A1B 488B00                                            	mov rax, qword[rax + 8 * 0]
  3755                                  
  3756 00002A1E 488B00                                            	mov rax, qword[rax + 8 * 0]
  3757                                  	assert_closure(rax)
    42 00002A21 803805              <1>  cmp byte [%1], %2
    43 00002A24 0F85EC540000        <1>  jne L_error_incorrect_type
  3758 00002A2A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3759 00002A2D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3760 00002A30 50                      	push rax
  3761 00002A31 6A01                    	push 1
  3762 00002A33 488B4510                	mov rax, qword [rbp + 8 * 2]
  3763                                  
  3764 00002A37 488B00                                            	mov rax, qword[rax + 8 * 0]
  3765                                  
  3766 00002A3A 488B00                                            	mov rax, qword[rax + 8 * 0]
  3767 00002A3D 50                      	push rax
  3768 00002A3E 6A01                    	push 1
  3769 00002A40 488B4510                	mov rax, qword [rbp + 8 * 2]
  3770                                  
  3771 00002A44 488B00                                            	mov rax, qword[rax + 8 * 0]
  3772                                  
  3773 00002A47 488B00                                            	mov rax, qword[rax + 8 * 0]
  3774                                  	assert_closure(rax)
    42 00002A4A 803805              <1>  cmp byte [%1], %2
    43 00002A4D 0F85C3540000        <1>  jne L_error_incorrect_type
  3775 00002A53 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3776 00002A56 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3777 00002A59 50                      	push rax
  3778 00002A5A 6A01                    	push 1
  3779 00002A5C 488B4510                	mov rax, qword [rbp + 8 * 2]
  3780                                  
  3781 00002A60 488B00                                            	mov rax, qword[rax + 8 * 0]
  3782                                  
  3783 00002A63 488B00                                            	mov rax, qword[rax + 8 * 0]
  3784                                  	assert_closure(rax)
    42 00002A66 803805              <1>  cmp byte [%1], %2
    43 00002A69 0F85A7540000        <1>  jne L_error_incorrect_type
  3785 00002A6F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3786 00002A72 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3787 00002A75 50                      	push rax
  3788 00002A76 6A01                    	push 1
  3789 00002A78 488B4510                	mov rax, qword [rbp + 8 * 2]
  3790                                  
  3791 00002A7C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3792                                  
  3793 00002A7F 488B00                                            	mov rax, qword[rax + 8 * 0]
  3794                                  	assert_closure(rax)
    42 00002A82 803805              <1>  cmp byte [%1], %2
    43 00002A85 0F858B540000        <1>  jne L_error_incorrect_type
  3795 00002A8B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3796 00002A8E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3797 00002A91 50                      	push rax
  3798 00002A92 6A01                    	push 1
  3799 00002A94 488B4510                	mov rax, qword [rbp + 8 * 2]
  3800                                  
  3801 00002A98 488B00                                            	mov rax, qword[rax + 8 * 0]
  3802                                  
  3803 00002A9B 488B00                                            	mov rax, qword[rax + 8 * 0]
  3804 00002A9E 50                      	push rax
  3805 00002A9F 6A01                    	push 1
  3806 00002AA1 488B4510                	mov rax, qword [rbp + 8 * 2]
  3807                                  
  3808 00002AA5 488B00                                            	mov rax, qword[rax + 8 * 0]
  3809                                  
  3810 00002AA8 488B00                                            	mov rax, qword[rax + 8 * 0]
  3811                                  	assert_closure(rax)
    42 00002AAB 803805              <1>  cmp byte [%1], %2
    43 00002AAE 0F8562540000        <1>  jne L_error_incorrect_type
  3812 00002AB4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3813 00002AB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3814 00002ABA 50                      	push rax
  3815 00002ABB 6A01                    	push 1
  3816 00002ABD 488B4510                	mov rax, qword [rbp + 8 * 2]
  3817                                  
  3818 00002AC1 488B00                                            	mov rax, qword[rax + 8 * 0]
  3819                                  
  3820 00002AC4 488B00                                            	mov rax, qword[rax + 8 * 0]
  3821                                  	assert_closure(rax)
    42 00002AC7 803805              <1>  cmp byte [%1], %2
    43 00002ACA 0F8546540000        <1>  jne L_error_incorrect_type
  3822 00002AD0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3823 00002AD3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3824 00002AD6 50                      	push rax
  3825 00002AD7 6A01                    	push 1
  3826 00002AD9 488B4510                	mov rax, qword [rbp + 8 * 2]
  3827                                  
  3828 00002ADD 488B00                                            	mov rax, qword[rax + 8 * 0]
  3829                                  
  3830 00002AE0 488B00                                            	mov rax, qword[rax + 8 * 0]
  3831                                  	assert_closure(rax)
    42 00002AE3 803805              <1>  cmp byte [%1], %2
    43 00002AE6 0F852A540000        <1>  jne L_error_incorrect_type
  3832 00002AEC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3833 00002AEF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3834 00002AF2 50                      	push rax
  3835 00002AF3 6A01                    	push 1
  3836 00002AF5 488B4510                	mov rax, qword [rbp + 8 * 2]
  3837                                  
  3838 00002AF9 488B00                                            	mov rax, qword[rax + 8 * 0]
  3839                                  
  3840 00002AFC 488B00                                            	mov rax, qword[rax + 8 * 0]
  3841                                  	assert_closure(rax)
    42 00002AFF 803805              <1>  cmp byte [%1], %2
    43 00002B02 0F850E540000        <1>  jne L_error_incorrect_type
  3842 00002B08 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3843 00002B0B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3844                                  	assert_closure(rax)
    42 00002B0E 803805              <1>  cmp byte [%1], %2
    43 00002B11 0F85FF530000        <1>  jne L_error_incorrect_type
  3845 00002B17 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3846 00002B1A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3847                                  	assert_closure(rax)
    42 00002B1D 803805              <1>  cmp byte [%1], %2
    43 00002B20 0F85F0530000        <1>  jne L_error_incorrect_type
  3848 00002B26 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3849 00002B29 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3850 00002B2C 50                      	push rax
  3851 00002B2D 6A01                    	push 1
  3852 00002B2F 488B4510                	mov rax, qword [rbp + 8 * 2]
  3853                                  
  3854 00002B33 488B00                                            	mov rax, qword[rax + 8 * 0]
  3855                                  
  3856 00002B36 488B00                                            	mov rax, qword[rax + 8 * 0]
  3857 00002B39 50                      	push rax
  3858 00002B3A 6A01                    	push 1
  3859 00002B3C 488B4510                	mov rax, qword [rbp + 8 * 2]
  3860                                  
  3861 00002B40 488B00                                            	mov rax, qword[rax + 8 * 0]
  3862                                  
  3863 00002B43 488B00                                            	mov rax, qword[rax + 8 * 0]
  3864                                  	assert_closure(rax)
    42 00002B46 803805              <1>  cmp byte [%1], %2
    43 00002B49 0F85C7530000        <1>  jne L_error_incorrect_type
  3865 00002B4F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3866 00002B52 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3867 00002B55 50                      	push rax
  3868 00002B56 6A01                    	push 1
  3869 00002B58 488B4510                	mov rax, qword [rbp + 8 * 2]
  3870                                  
  3871 00002B5C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3872                                  
  3873 00002B5F 488B00                                            	mov rax, qword[rax + 8 * 0]
  3874                                  	assert_closure(rax)
    42 00002B62 803805              <1>  cmp byte [%1], %2
    43 00002B65 0F85AB530000        <1>  jne L_error_incorrect_type
  3875 00002B6B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3876 00002B6E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3877 00002B71 50                      	push rax
  3878 00002B72 6A01                    	push 1
  3879 00002B74 488B4510                	mov rax, qword [rbp + 8 * 2]
  3880                                  
  3881 00002B78 488B00                                            	mov rax, qword[rax + 8 * 0]
  3882                                  
  3883 00002B7B 488B00                                            	mov rax, qword[rax + 8 * 0]
  3884                                  	assert_closure(rax)
    42 00002B7E 803805              <1>  cmp byte [%1], %2
    43 00002B81 0F858F530000        <1>  jne L_error_incorrect_type
  3885 00002B87 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3886 00002B8A FF5009                  	call SOB_CLOSURE_CODE(rax)
  3887 00002B8D 50                      	push rax
  3888 00002B8E 6A01                    	push 1
  3889 00002B90 488B4510                	mov rax, qword [rbp + 8 * 2]
  3890                                  
  3891 00002B94 488B00                                            	mov rax, qword[rax + 8 * 0]
  3892                                  
  3893 00002B97 488B00                                            	mov rax, qword[rax + 8 * 0]
  3894 00002B9A 50                      	push rax
  3895 00002B9B 6A01                    	push 1
  3896 00002B9D 488B4510                	mov rax, qword [rbp + 8 * 2]
  3897                                  
  3898 00002BA1 488B00                                            	mov rax, qword[rax + 8 * 0]
  3899                                  
  3900 00002BA4 488B00                                            	mov rax, qword[rax + 8 * 0]
  3901                                  	assert_closure(rax)
    42 00002BA7 803805              <1>  cmp byte [%1], %2
    43 00002BAA 0F8566530000        <1>  jne L_error_incorrect_type
  3902 00002BB0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3903 00002BB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3904 00002BB6 50                      	push rax
  3905 00002BB7 6A01                    	push 1
  3906 00002BB9 488B4510                	mov rax, qword [rbp + 8 * 2]
  3907                                  
  3908 00002BBD 488B00                                            	mov rax, qword[rax + 8 * 0]
  3909                                  
  3910 00002BC0 488B00                                            	mov rax, qword[rax + 8 * 0]
  3911                                  	assert_closure(rax)
    42 00002BC3 803805              <1>  cmp byte [%1], %2
    43 00002BC6 0F854A530000        <1>  jne L_error_incorrect_type
  3912 00002BCC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3913 00002BCF FF5009                  	call SOB_CLOSURE_CODE(rax)
  3914 00002BD2 50                      	push rax
  3915 00002BD3 6A01                    	push 1
  3916 00002BD5 488B4510                	mov rax, qword [rbp + 8 * 2]
  3917                                  
  3918 00002BD9 488B00                                            	mov rax, qword[rax + 8 * 0]
  3919                                  
  3920 00002BDC 488B00                                            	mov rax, qword[rax + 8 * 0]
  3921                                  	assert_closure(rax)
    42 00002BDF 803805              <1>  cmp byte [%1], %2
    43 00002BE2 0F852E530000        <1>  jne L_error_incorrect_type
  3922 00002BE8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3923 00002BEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  3924                                  	assert_closure(rax)
    42 00002BEE 803805              <1>  cmp byte [%1], %2
    43 00002BF1 0F851F530000        <1>  jne L_error_incorrect_type
  3925 00002BF7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3926 00002BFA FF5009                  	call SOB_CLOSURE_CODE(rax)
  3927 00002BFD 50                      	push rax
  3928 00002BFE 6A01                    	push 1
  3929 00002C00 488B4510                	mov rax, qword [rbp + 8 * 2]
  3930                                  
  3931 00002C04 488B00                                            	mov rax, qword[rax + 8 * 0]
  3932                                  
  3933 00002C07 488B00                                            	mov rax, qword[rax + 8 * 0]
  3934 00002C0A 50                      	push rax
  3935 00002C0B 6A01                    	push 1
  3936 00002C0D 488B4510                	mov rax, qword [rbp + 8 * 2]
  3937                                  
  3938 00002C11 488B00                                            	mov rax, qword[rax + 8 * 0]
  3939                                  
  3940 00002C14 488B00                                            	mov rax, qword[rax + 8 * 0]
  3941                                  	assert_closure(rax)
    42 00002C17 803805              <1>  cmp byte [%1], %2
    43 00002C1A 0F85F6520000        <1>  jne L_error_incorrect_type
  3942 00002C20 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3943 00002C23 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3944 00002C26 50                      	push rax
  3945 00002C27 6A01                    	push 1
  3946 00002C29 488B4510                	mov rax, qword [rbp + 8 * 2]
  3947                                  
  3948 00002C2D 488B00                                            	mov rax, qword[rax + 8 * 0]
  3949                                  
  3950 00002C30 488B00                                            	mov rax, qword[rax + 8 * 0]
  3951                                  	assert_closure(rax)
    42 00002C33 803805              <1>  cmp byte [%1], %2
    43 00002C36 0F85DA520000        <1>  jne L_error_incorrect_type
  3952 00002C3C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3953 00002C3F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3954 00002C42 50                      	push rax
  3955 00002C43 6A01                    	push 1
  3956 00002C45 488B4510                	mov rax, qword [rbp + 8 * 2]
  3957                                  
  3958 00002C49 488B00                                            	mov rax, qword[rax + 8 * 0]
  3959                                  
  3960 00002C4C 488B00                                            	mov rax, qword[rax + 8 * 0]
  3961                                  	assert_closure(rax)
    42 00002C4F 803805              <1>  cmp byte [%1], %2
    43 00002C52 0F85BE520000        <1>  jne L_error_incorrect_type
  3962 00002C58 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3963 00002C5B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3964 00002C5E 50                      	push rax
  3965 00002C5F 6A01                    	push 1
  3966 00002C61 488B4510                	mov rax, qword [rbp + 8 * 2]
  3967                                  
  3968 00002C65 488B00                                            	mov rax, qword[rax + 8 * 0]
  3969                                  
  3970 00002C68 488B00                                            	mov rax, qword[rax + 8 * 0]
  3971                                  	assert_closure(rax)
    42 00002C6B 803805              <1>  cmp byte [%1], %2
    43 00002C6E 0F85A2520000        <1>  jne L_error_incorrect_type
  3972 00002C74 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3973 00002C77 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3974 00002C7A 50                      	push rax
  3975 00002C7B 6A01                    	push 1
  3976 00002C7D 488B4510                	mov rax, qword [rbp + 8 * 2]
  3977                                  
  3978 00002C81 488B00                                            	mov rax, qword[rax + 8 * 0]
  3979                                  
  3980 00002C84 488B00                                            	mov rax, qword[rax + 8 * 0]
  3981 00002C87 50                      	push rax
  3982 00002C88 6A01                    	push 1
  3983 00002C8A 488B4510                	mov rax, qword [rbp + 8 * 2]
  3984                                  
  3985 00002C8E 488B00                                            	mov rax, qword[rax + 8 * 0]
  3986                                  
  3987 00002C91 488B00                                            	mov rax, qword[rax + 8 * 0]
  3988                                  	assert_closure(rax)
    42 00002C94 803805              <1>  cmp byte [%1], %2
    43 00002C97 0F8579520000        <1>  jne L_error_incorrect_type
  3989 00002C9D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3990 00002CA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3991 00002CA3 50                      	push rax
  3992 00002CA4 6A01                    	push 1
  3993 00002CA6 488B4510                	mov rax, qword [rbp + 8 * 2]
  3994                                  
  3995 00002CAA 488B00                                            	mov rax, qword[rax + 8 * 0]
  3996                                  
  3997 00002CAD 488B00                                            	mov rax, qword[rax + 8 * 0]
  3998                                  	assert_closure(rax)
    42 00002CB0 803805              <1>  cmp byte [%1], %2
    43 00002CB3 0F855D520000        <1>  jne L_error_incorrect_type
  3999 00002CB9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4000 00002CBC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4001 00002CBF 50                      	push rax
  4002 00002CC0 6A01                    	push 1
  4003 00002CC2 488B4510                	mov rax, qword [rbp + 8 * 2]
  4004                                  
  4005 00002CC6 488B00                                            	mov rax, qword[rax + 8 * 0]
  4006                                  
  4007 00002CC9 488B00                                            	mov rax, qword[rax + 8 * 0]
  4008                                  	assert_closure(rax)
    42 00002CCC 803805              <1>  cmp byte [%1], %2
    43 00002CCF 0F8541520000        <1>  jne L_error_incorrect_type
  4009 00002CD5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4010 00002CD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4011 00002CDB 50                      	push rax
  4012 00002CDC 6A01                    	push 1
  4013 00002CDE 488B4510                	mov rax, qword [rbp + 8 * 2]
  4014                                  
  4015 00002CE2 488B00                                            	mov rax, qword[rax + 8 * 0]
  4016                                  
  4017 00002CE5 488B00                                            	mov rax, qword[rax + 8 * 0]
  4018 00002CE8 50                      	push rax
  4019 00002CE9 6A01                    	push 1
  4020 00002CEB 488B4510                	mov rax, qword [rbp + 8 * 2]
  4021                                  
  4022 00002CEF 488B00                                            	mov rax, qword[rax + 8 * 0]
  4023                                  
  4024 00002CF2 488B00                                            	mov rax, qword[rax + 8 * 0]
  4025                                  	assert_closure(rax)
    42 00002CF5 803805              <1>  cmp byte [%1], %2
    43 00002CF8 0F8518520000        <1>  jne L_error_incorrect_type
  4026 00002CFE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4027 00002D01 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4028 00002D04 50                      	push rax
  4029 00002D05 6A01                    	push 1
  4030 00002D07 488B4510                	mov rax, qword [rbp + 8 * 2]
  4031                                  
  4032 00002D0B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4033                                  
  4034 00002D0E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4035                                  	assert_closure(rax)
    42 00002D11 803805              <1>  cmp byte [%1], %2
    43 00002D14 0F85FC510000        <1>  jne L_error_incorrect_type
  4036 00002D1A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4037 00002D1D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4038 00002D20 50                      	push rax
  4039 00002D21 6A01                    	push 1
  4040 00002D23 488B4510                	mov rax, qword [rbp + 8 * 2]
  4041                                  
  4042 00002D27 488B00                                            	mov rax, qword[rax + 8 * 0]
  4043                                  
  4044 00002D2A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4045                                  	assert_closure(rax)
    42 00002D2D 803805              <1>  cmp byte [%1], %2
    43 00002D30 0F85E0510000        <1>  jne L_error_incorrect_type
  4046 00002D36 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4047 00002D39 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4048                                  	assert_closure(rax)
    42 00002D3C 803805              <1>  cmp byte [%1], %2
    43 00002D3F 0F85D1510000        <1>  jne L_error_incorrect_type
  4049 00002D45 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4050 00002D48 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4051 00002D4B 50                      	push rax
  4052 00002D4C 6A01                    	push 1
  4053 00002D4E 488B4510                	mov rax, qword [rbp + 8 * 2]
  4054                                  
  4055 00002D52 488B00                                            	mov rax, qword[rax + 8 * 0]
  4056                                  
  4057 00002D55 488B00                                            	mov rax, qword[rax + 8 * 0]
  4058 00002D58 50                      	push rax
  4059 00002D59 6A01                    	push 1
  4060 00002D5B 488B4510                	mov rax, qword [rbp + 8 * 2]
  4061                                  
  4062 00002D5F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4063                                  
  4064 00002D62 488B00                                            	mov rax, qword[rax + 8 * 0]
  4065                                  	assert_closure(rax)
    42 00002D65 803805              <1>  cmp byte [%1], %2
    43 00002D68 0F85A8510000        <1>  jne L_error_incorrect_type
  4066 00002D6E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4067 00002D71 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4068 00002D74 50                      	push rax
  4069 00002D75 6A01                    	push 1
  4070 00002D77 488B4510                	mov rax, qword [rbp + 8 * 2]
  4071                                  
  4072 00002D7B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4073                                  
  4074 00002D7E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4075                                  	assert_closure(rax)
    42 00002D81 803805              <1>  cmp byte [%1], %2
    43 00002D84 0F858C510000        <1>  jne L_error_incorrect_type
  4076 00002D8A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4077 00002D8D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4078 00002D90 50                      	push rax
  4079 00002D91 6A01                    	push 1
  4080 00002D93 488B4510                	mov rax, qword [rbp + 8 * 2]
  4081                                  
  4082 00002D97 488B00                                            	mov rax, qword[rax + 8 * 0]
  4083                                  
  4084 00002D9A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4085                                  	assert_closure(rax)
    42 00002D9D 803805              <1>  cmp byte [%1], %2
    43 00002DA0 0F8570510000        <1>  jne L_error_incorrect_type
  4086 00002DA6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4087 00002DA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4088 00002DAC 50                      	push rax
  4089 00002DAD 6A01                    	push 1
  4090 00002DAF 488B4510                	mov rax, qword [rbp + 8 * 2]
  4091                                  
  4092 00002DB3 488B00                                            	mov rax, qword[rax + 8 * 0]
  4093                                  
  4094 00002DB6 488B00                                            	mov rax, qword[rax + 8 * 0]
  4095                                  	assert_closure(rax)
    42 00002DB9 803805              <1>  cmp byte [%1], %2
    43 00002DBC 0F8554510000        <1>  jne L_error_incorrect_type
  4096 00002DC2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4097 00002DC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4098                                  	assert_closure(rax)
    42 00002DC8 803805              <1>  cmp byte [%1], %2
    43 00002DCB 0F8545510000        <1>  jne L_error_incorrect_type
  4099 00002DD1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4100 00002DD4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4101                                  	assert_closure(rax)
    42 00002DD7 803805              <1>  cmp byte [%1], %2
    43 00002DDA 0F8536510000        <1>  jne L_error_incorrect_type
  4102 00002DE0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4103 00002DE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4104 00002DE6 50                      	push rax
  4105 00002DE7 6A01                    	push 1
  4106 00002DE9 488B4510                	mov rax, qword [rbp + 8 * 2]
  4107                                  
  4108 00002DED 488B00                                            	mov rax, qword[rax + 8 * 0]
  4109                                  
  4110 00002DF0 488B00                                            	mov rax, qword[rax + 8 * 0]
  4111 00002DF3 50                      	push rax
  4112 00002DF4 6A01                    	push 1
  4113 00002DF6 488B4510                	mov rax, qword [rbp + 8 * 2]
  4114                                  
  4115 00002DFA 488B00                                            	mov rax, qword[rax + 8 * 0]
  4116                                  
  4117 00002DFD 488B00                                            	mov rax, qword[rax + 8 * 0]
  4118                                  	assert_closure(rax)
    42 00002E00 803805              <1>  cmp byte [%1], %2
    43 00002E03 0F850D510000        <1>  jne L_error_incorrect_type
  4119 00002E09 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4120 00002E0C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4121 00002E0F 50                      	push rax
  4122 00002E10 6A01                    	push 1
  4123 00002E12 488B4510                	mov rax, qword [rbp + 8 * 2]
  4124                                  
  4125 00002E16 488B00                                            	mov rax, qword[rax + 8 * 0]
  4126                                  
  4127 00002E19 488B00                                            	mov rax, qword[rax + 8 * 0]
  4128                                  	assert_closure(rax)
    42 00002E1C 803805              <1>  cmp byte [%1], %2
    43 00002E1F 0F85F1500000        <1>  jne L_error_incorrect_type
  4129 00002E25 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4130 00002E28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4131 00002E2B 50                      	push rax
  4132 00002E2C 6A01                    	push 1
  4133 00002E2E 488B4510                	mov rax, qword [rbp + 8 * 2]
  4134                                  
  4135 00002E32 488B00                                            	mov rax, qword[rax + 8 * 0]
  4136                                  
  4137 00002E35 488B00                                            	mov rax, qword[rax + 8 * 0]
  4138                                  	assert_closure(rax)
    42 00002E38 803805              <1>  cmp byte [%1], %2
    43 00002E3B 0F85D5500000        <1>  jne L_error_incorrect_type
  4139 00002E41 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4140 00002E44 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4141 00002E47 50                      	push rax
  4142 00002E48 6A01                    	push 1
  4143 00002E4A 488B4510                	mov rax, qword [rbp + 8 * 2]
  4144                                  
  4145 00002E4E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4146                                  
  4147 00002E51 488B00                                            	mov rax, qword[rax + 8 * 0]
  4148                                  	assert_closure(rax)
    42 00002E54 803805              <1>  cmp byte [%1], %2
    43 00002E57 0F85B9500000        <1>  jne L_error_incorrect_type
  4149 00002E5D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4150 00002E60 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4151 00002E63 50                      	push rax
  4152 00002E64 6A01                    	push 1
  4153 00002E66 488B4510                	mov rax, qword [rbp + 8 * 2]
  4154                                  
  4155 00002E6A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4156                                  
  4157 00002E6D 488B00                                            	mov rax, qword[rax + 8 * 0]
  4158 00002E70 50                      	push rax
  4159 00002E71 6A01                    	push 1
  4160 00002E73 488B4510                	mov rax, qword [rbp + 8 * 2]
  4161                                  
  4162 00002E77 488B00                                            	mov rax, qword[rax + 8 * 0]
  4163                                  
  4164 00002E7A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4165                                  	assert_closure(rax)
    42 00002E7D 803805              <1>  cmp byte [%1], %2
    43 00002E80 0F8590500000        <1>  jne L_error_incorrect_type
  4166 00002E86 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4167 00002E89 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4168 00002E8C 50                      	push rax
  4169 00002E8D 6A01                    	push 1
  4170 00002E8F 488B4510                	mov rax, qword [rbp + 8 * 2]
  4171                                  
  4172 00002E93 488B00                                            	mov rax, qword[rax + 8 * 0]
  4173                                  
  4174 00002E96 488B00                                            	mov rax, qword[rax + 8 * 0]
  4175                                  	assert_closure(rax)
    42 00002E99 803805              <1>  cmp byte [%1], %2
    43 00002E9C 0F8574500000        <1>  jne L_error_incorrect_type
  4176 00002EA2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4177 00002EA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4178 00002EA8 50                      	push rax
  4179 00002EA9 6A01                    	push 1
  4180 00002EAB 488B4510                	mov rax, qword [rbp + 8 * 2]
  4181                                  
  4182 00002EAF 488B00                                            	mov rax, qword[rax + 8 * 0]
  4183                                  
  4184 00002EB2 488B00                                            	mov rax, qword[rax + 8 * 0]
  4185                                  	assert_closure(rax)
    42 00002EB5 803805              <1>  cmp byte [%1], %2
    43 00002EB8 0F8558500000        <1>  jne L_error_incorrect_type
  4186 00002EBE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4187 00002EC1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4188                                  	assert_closure(rax)
    42 00002EC4 803805              <1>  cmp byte [%1], %2
    43 00002EC7 0F8549500000        <1>  jne L_error_incorrect_type
  4189 00002ECD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4190 00002ED0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4191 00002ED3 50                      	push rax
  4192 00002ED4 6A01                    	push 1
  4193 00002ED6 488B4510                	mov rax, qword [rbp + 8 * 2]
  4194                                  
  4195 00002EDA 488B00                                            	mov rax, qword[rax + 8 * 0]
  4196                                  
  4197 00002EDD 488B00                                            	mov rax, qword[rax + 8 * 0]
  4198 00002EE0 50                      	push rax
  4199 00002EE1 6A01                    	push 1
  4200 00002EE3 488B4510                	mov rax, qword [rbp + 8 * 2]
  4201                                  
  4202 00002EE7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4203                                  
  4204 00002EEA 488B00                                            	mov rax, qword[rax + 8 * 0]
  4205                                  	assert_closure(rax)
    42 00002EED 803805              <1>  cmp byte [%1], %2
    43 00002EF0 0F8520500000        <1>  jne L_error_incorrect_type
  4206 00002EF6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4207 00002EF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4208 00002EFC 50                      	push rax
  4209 00002EFD 6A01                    	push 1
  4210 00002EFF 488B4510                	mov rax, qword [rbp + 8 * 2]
  4211                                  
  4212 00002F03 488B00                                            	mov rax, qword[rax + 8 * 0]
  4213                                  
  4214 00002F06 488B00                                            	mov rax, qword[rax + 8 * 0]
  4215                                  	assert_closure(rax)
    42 00002F09 803805              <1>  cmp byte [%1], %2
    43 00002F0C 0F8504500000        <1>  jne L_error_incorrect_type
  4216 00002F12 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4217 00002F15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4218 00002F18 50                      	push rax
  4219 00002F19 6A01                    	push 1
  4220 00002F1B 488B4510                	mov rax, qword [rbp + 8 * 2]
  4221                                  
  4222 00002F1F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4223                                  
  4224 00002F22 488B00                                            	mov rax, qword[rax + 8 * 0]
  4225                                  	assert_closure(rax)
    42 00002F25 803805              <1>  cmp byte [%1], %2
    43 00002F28 0F85E84F0000        <1>  jne L_error_incorrect_type
  4226 00002F2E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4227 00002F31 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4228 00002F34 50                      	push rax
  4229 00002F35 6A01                    	push 1
  4230 00002F37 488B4510                	mov rax, qword [rbp + 8 * 2]
  4231                                  
  4232 00002F3B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4233                                  
  4234 00002F3E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4235                                  	assert_closure(rax)
    42 00002F41 803805              <1>  cmp byte [%1], %2
    43 00002F44 0F85CC4F0000        <1>  jne L_error_incorrect_type
  4236 00002F4A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4237 00002F4D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4238                                  	assert_closure(rax)
    42 00002F50 803805              <1>  cmp byte [%1], %2
    43 00002F53 0F85BD4F0000        <1>  jne L_error_incorrect_type
  4239 00002F59 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4240 00002F5C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4241                                  	assert_closure(rax)
    42 00002F5F 803805              <1>  cmp byte [%1], %2
    43 00002F62 0F85AE4F0000        <1>  jne L_error_incorrect_type
  4242 00002F68 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4243 00002F6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4244 00002F6E 50                      	push rax
  4245 00002F6F 6A01                    	push 1
  4246 00002F71 488B4510                	mov rax, qword [rbp + 8 * 2]
  4247                                  
  4248 00002F75 488B00                                            	mov rax, qword[rax + 8 * 0]
  4249                                  
  4250 00002F78 488B00                                            	mov rax, qword[rax + 8 * 0]
  4251 00002F7B 50                      	push rax
  4252 00002F7C 6A01                    	push 1
  4253 00002F7E 488B4510                	mov rax, qword [rbp + 8 * 2]
  4254                                  
  4255 00002F82 488B00                                            	mov rax, qword[rax + 8 * 0]
  4256                                  
  4257 00002F85 488B00                                            	mov rax, qword[rax + 8 * 0]
  4258                                  	assert_closure(rax)
    42 00002F88 803805              <1>  cmp byte [%1], %2
    43 00002F8B 0F85854F0000        <1>  jne L_error_incorrect_type
  4259 00002F91 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4260 00002F94 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4261 00002F97 50                      	push rax
  4262 00002F98 6A01                    	push 1
  4263 00002F9A 488B4510                	mov rax, qword [rbp + 8 * 2]
  4264                                  
  4265 00002F9E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4266                                  
  4267 00002FA1 488B00                                            	mov rax, qword[rax + 8 * 0]
  4268                                  	assert_closure(rax)
    42 00002FA4 803805              <1>  cmp byte [%1], %2
    43 00002FA7 0F85694F0000        <1>  jne L_error_incorrect_type
  4269 00002FAD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4270 00002FB0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4271 00002FB3 50                      	push rax
  4272 00002FB4 6A01                    	push 1
  4273 00002FB6 488B4510                	mov rax, qword [rbp + 8 * 2]
  4274                                  
  4275 00002FBA 488B00                                            	mov rax, qword[rax + 8 * 0]
  4276                                  
  4277 00002FBD 488B00                                            	mov rax, qword[rax + 8 * 0]
  4278                                  	assert_closure(rax)
    42 00002FC0 803805              <1>  cmp byte [%1], %2
    43 00002FC3 0F854D4F0000        <1>  jne L_error_incorrect_type
  4279 00002FC9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4280 00002FCC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4281 00002FCF 50                      	push rax
  4282 00002FD0 6A01                    	push 1
  4283 00002FD2 488B4510                	mov rax, qword [rbp + 8 * 2]
  4284                                  
  4285 00002FD6 488B00                                            	mov rax, qword[rax + 8 * 0]
  4286                                  
  4287 00002FD9 488B00                                            	mov rax, qword[rax + 8 * 0]
  4288                                  	assert_closure(rax)
    42 00002FDC 803805              <1>  cmp byte [%1], %2
    43 00002FDF 0F85314F0000        <1>  jne L_error_incorrect_type
  4289 00002FE5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4290 00002FE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4291                                  	assert_closure(rax)
    42 00002FEB 803805              <1>  cmp byte [%1], %2
    43 00002FEE 0F85224F0000        <1>  jne L_error_incorrect_type
  4292 00002FF4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4293 00002FF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4294                                  	assert_closure(rax)
    42 00002FFA 803805              <1>  cmp byte [%1], %2
    43 00002FFD 0F85134F0000        <1>  jne L_error_incorrect_type
  4295 00003003 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4296 00003006 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4297                                  	assert_closure(rax)
    42 00003009 803805              <1>  cmp byte [%1], %2
    43 0000300C 0F85044F0000        <1>  jne L_error_incorrect_type
  4298 00003012 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4299 00003015 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4300                                  	assert_closure(rax)
    42 00003018 803805              <1>  cmp byte [%1], %2
    43 0000301B 0F85F54E0000        <1>  jne L_error_incorrect_type
  4301 00003021 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4302 00003024 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4303 00003027 50                      	push rax
  4304 00003028 6A01                    	push 1
  4305 0000302A 488B4510                	mov rax, qword [rbp + 8 * 2]
  4306                                  
  4307 0000302E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4308                                  
  4309 00003031 488B00                                            	mov rax, qword[rax + 8 * 0]
  4310 00003034 50                      	push rax
  4311 00003035 6A01                    	push 1
  4312 00003037 488B4510                	mov rax, qword [rbp + 8 * 2]
  4313                                  
  4314 0000303B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4315                                  
  4316 0000303E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4317                                  	assert_closure(rax)
    42 00003041 803805              <1>  cmp byte [%1], %2
    43 00003044 0F85CC4E0000        <1>  jne L_error_incorrect_type
  4318 0000304A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4319 0000304D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4320 00003050 50                      	push rax
  4321 00003051 6A01                    	push 1
  4322 00003053 488B4510                	mov rax, qword [rbp + 8 * 2]
  4323                                  
  4324 00003057 488B00                                            	mov rax, qword[rax + 8 * 0]
  4325                                  
  4326 0000305A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4327                                  	assert_closure(rax)
    42 0000305D 803805              <1>  cmp byte [%1], %2
    43 00003060 0F85B04E0000        <1>  jne L_error_incorrect_type
  4328 00003066 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4329 00003069 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4330 0000306C 50                      	push rax
  4331 0000306D 6A01                    	push 1
  4332 0000306F 488B4510                	mov rax, qword [rbp + 8 * 2]
  4333                                  
  4334 00003073 488B00                                            	mov rax, qword[rax + 8 * 0]
  4335                                  
  4336 00003076 488B00                                            	mov rax, qword[rax + 8 * 0]
  4337                                  	assert_closure(rax)
    42 00003079 803805              <1>  cmp byte [%1], %2
    43 0000307C 0F85944E0000        <1>  jne L_error_incorrect_type
  4338 00003082 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4339 00003085 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4340 00003088 50                      	push rax
  4341 00003089 6A01                    	push 1
  4342 0000308B 488B4510                	mov rax, qword [rbp + 8 * 2]
  4343                                  
  4344 0000308F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4345                                  
  4346 00003092 488B00                                            	mov rax, qword[rax + 8 * 0]
  4347 00003095 50                      	push rax
  4348 00003096 6A01                    	push 1
  4349 00003098 488B4510                	mov rax, qword [rbp + 8 * 2]
  4350                                  
  4351 0000309C 488B00                                            	mov rax, qword[rax + 8 * 0]
  4352                                  
  4353 0000309F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4354                                  	assert_closure(rax)
    42 000030A2 803805              <1>  cmp byte [%1], %2
    43 000030A5 0F856B4E0000        <1>  jne L_error_incorrect_type
  4355 000030AB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4356 000030AE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4357 000030B1 50                      	push rax
  4358 000030B2 6A01                    	push 1
  4359 000030B4 488B4510                	mov rax, qword [rbp + 8 * 2]
  4360                                  
  4361 000030B8 488B00                                            	mov rax, qword[rax + 8 * 0]
  4362                                  
  4363 000030BB 488B00                                            	mov rax, qword[rax + 8 * 0]
  4364                                  	assert_closure(rax)
    42 000030BE 803805              <1>  cmp byte [%1], %2
    43 000030C1 0F854F4E0000        <1>  jne L_error_incorrect_type
  4365 000030C7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4366 000030CA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4367 000030CD 50                      	push rax
  4368 000030CE 6A01                    	push 1
  4369 000030D0 488B4510                	mov rax, qword [rbp + 8 * 2]
  4370                                  
  4371 000030D4 488B00                                            	mov rax, qword[rax + 8 * 0]
  4372                                  
  4373 000030D7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4374                                  	assert_closure(rax)
    42 000030DA 803805              <1>  cmp byte [%1], %2
    43 000030DD 0F85334E0000        <1>  jne L_error_incorrect_type
  4375 000030E3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4376 000030E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4377 000030E9 50                      	push rax
  4378 000030EA 6A01                    	push 1
  4379 000030EC 488B4510                	mov rax, qword [rbp + 8 * 2]
  4380                                  
  4381 000030F0 488B00                                            	mov rax, qword[rax + 8 * 0]
  4382                                  
  4383 000030F3 488B00                                            	mov rax, qword[rax + 8 * 0]
  4384 000030F6 50                      	push rax
  4385 000030F7 6A01                    	push 1
  4386 000030F9 488B4510                	mov rax, qword [rbp + 8 * 2]
  4387                                  
  4388 000030FD 488B00                                            	mov rax, qword[rax + 8 * 0]
  4389                                  
  4390 00003100 488B00                                            	mov rax, qword[rax + 8 * 0]
  4391                                  	assert_closure(rax)
    42 00003103 803805              <1>  cmp byte [%1], %2
    43 00003106 0F850A4E0000        <1>  jne L_error_incorrect_type
  4392 0000310C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4393 0000310F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4394 00003112 50                      	push rax
  4395 00003113 6A01                    	push 1
  4396 00003115 488B4510                	mov rax, qword [rbp + 8 * 2]
  4397                                  
  4398 00003119 488B00                                            	mov rax, qword[rax + 8 * 0]
  4399                                  
  4400 0000311C 488B00                                            	mov rax, qword[rax + 8 * 0]
  4401                                  	assert_closure(rax)
    42 0000311F 803805              <1>  cmp byte [%1], %2
    43 00003122 0F85EE4D0000        <1>  jne L_error_incorrect_type
  4402 00003128 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4403 0000312B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4404 0000312E 50                      	push rax
  4405 0000312F 6A01                    	push 1
  4406 00003131 488B4510                	mov rax, qword [rbp + 8 * 2]
  4407                                  
  4408 00003135 488B00                                            	mov rax, qword[rax + 8 * 0]
  4409                                  
  4410 00003138 488B00                                            	mov rax, qword[rax + 8 * 0]
  4411                                  	assert_closure(rax)
    42 0000313B 803805              <1>  cmp byte [%1], %2
    43 0000313E 0F85D24D0000        <1>  jne L_error_incorrect_type
  4412 00003144 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4413 00003147 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4414 0000314A 50                      	push rax
  4415 0000314B 6A01                    	push 1
  4416 0000314D 488B4510                	mov rax, qword [rbp + 8 * 2]
  4417                                  
  4418 00003151 488B00                                            	mov rax, qword[rax + 8 * 0]
  4419                                  
  4420 00003154 488B00                                            	mov rax, qword[rax + 8 * 0]
  4421 00003157 50                      	push rax
  4422 00003158 6A01                    	push 1
  4423 0000315A 488B4510                	mov rax, qword [rbp + 8 * 2]
  4424                                  
  4425 0000315E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4426                                  
  4427 00003161 488B00                                            	mov rax, qword[rax + 8 * 0]
  4428                                  	assert_closure(rax)
    42 00003164 803805              <1>  cmp byte [%1], %2
    43 00003167 0F85A94D0000        <1>  jne L_error_incorrect_type
  4429 0000316D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4430 00003170 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4431 00003173 50                      	push rax
  4432 00003174 6A01                    	push 1
  4433 00003176 488B4510                	mov rax, qword [rbp + 8 * 2]
  4434                                  
  4435 0000317A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4436                                  
  4437 0000317D 488B00                                            	mov rax, qword[rax + 8 * 0]
  4438                                  	assert_closure(rax)
    42 00003180 803805              <1>  cmp byte [%1], %2
    43 00003183 0F858D4D0000        <1>  jne L_error_incorrect_type
  4439 00003189 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4440 0000318C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4441 0000318F 50                      	push rax
  4442 00003190 6A01                    	push 1
  4443 00003192 488B4510                	mov rax, qword [rbp + 8 * 2]
  4444                                  
  4445 00003196 488B00                                            	mov rax, qword[rax + 8 * 0]
  4446                                  
  4447 00003199 488B00                                            	mov rax, qword[rax + 8 * 0]
  4448                                  	assert_closure(rax)
    42 0000319C 803805              <1>  cmp byte [%1], %2
    43 0000319F 0F85714D0000        <1>  jne L_error_incorrect_type
  4449 000031A5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4450 000031A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4451 000031AB 50                      	push rax
  4452 000031AC 6A01                    	push 1
  4453 000031AE 488B4510                	mov rax, qword [rbp + 8 * 2]
  4454                                  
  4455 000031B2 488B00                                            	mov rax, qword[rax + 8 * 0]
  4456                                  
  4457 000031B5 488B00                                            	mov rax, qword[rax + 8 * 0]
  4458                                  	assert_closure(rax)
    42 000031B8 803805              <1>  cmp byte [%1], %2
    43 000031BB 0F85554D0000        <1>  jne L_error_incorrect_type
  4459 000031C1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4460 000031C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4461                                  	assert_closure(rax)
    42 000031C7 803805              <1>  cmp byte [%1], %2
    43 000031CA 0F85464D0000        <1>  jne L_error_incorrect_type
  4462 000031D0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4463 000031D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4464                                  	assert_closure(rax)
    42 000031D6 803805              <1>  cmp byte [%1], %2
    43 000031D9 0F85374D0000        <1>  jne L_error_incorrect_type
  4465 000031DF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4466 000031E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4467 000031E5 50                      	push rax
  4468 000031E6 6A01                    	push 1
  4469 000031E8 488B4510                	mov rax, qword [rbp + 8 * 2]
  4470                                  
  4471 000031EC 488B00                                            	mov rax, qword[rax + 8 * 0]
  4472                                  
  4473 000031EF 488B00                                            	mov rax, qword[rax + 8 * 0]
  4474 000031F2 50                      	push rax
  4475 000031F3 6A01                    	push 1
  4476 000031F5 488B4510                	mov rax, qword [rbp + 8 * 2]
  4477                                  
  4478 000031F9 488B00                                            	mov rax, qword[rax + 8 * 0]
  4479                                  
  4480 000031FC 488B00                                            	mov rax, qword[rax + 8 * 0]
  4481                                  	assert_closure(rax)
    42 000031FF 803805              <1>  cmp byte [%1], %2
    43 00003202 0F850E4D0000        <1>  jne L_error_incorrect_type
  4482 00003208 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4483 0000320B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4484 0000320E 50                      	push rax
  4485 0000320F 6A01                    	push 1
  4486 00003211 488B4510                	mov rax, qword [rbp + 8 * 2]
  4487                                  
  4488 00003215 488B00                                            	mov rax, qword[rax + 8 * 0]
  4489                                  
  4490 00003218 488B00                                            	mov rax, qword[rax + 8 * 0]
  4491                                  	assert_closure(rax)
    42 0000321B 803805              <1>  cmp byte [%1], %2
    43 0000321E 0F85F24C0000        <1>  jne L_error_incorrect_type
  4492 00003224 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4493 00003227 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4494 0000322A 50                      	push rax
  4495 0000322B 6A01                    	push 1
  4496 0000322D 488B4510                	mov rax, qword [rbp + 8 * 2]
  4497                                  
  4498 00003231 488B00                                            	mov rax, qword[rax + 8 * 0]
  4499                                  
  4500 00003234 488B00                                            	mov rax, qword[rax + 8 * 0]
  4501                                  	assert_closure(rax)
    42 00003237 803805              <1>  cmp byte [%1], %2
    43 0000323A 0F85D64C0000        <1>  jne L_error_incorrect_type
  4502 00003240 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4503 00003243 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4504 00003246 50                      	push rax
  4505 00003247 6A01                    	push 1
  4506 00003249 488B4510                	mov rax, qword [rbp + 8 * 2]
  4507                                  
  4508 0000324D 488B00                                            	mov rax, qword[rax + 8 * 0]
  4509                                  
  4510 00003250 488B00                                            	mov rax, qword[rax + 8 * 0]
  4511 00003253 50                      	push rax
  4512 00003254 6A01                    	push 1
  4513 00003256 488B4510                	mov rax, qword [rbp + 8 * 2]
  4514                                  
  4515 0000325A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4516                                  
  4517 0000325D 488B00                                            	mov rax, qword[rax + 8 * 0]
  4518                                  	assert_closure(rax)
    42 00003260 803805              <1>  cmp byte [%1], %2
    43 00003263 0F85AD4C0000        <1>  jne L_error_incorrect_type
  4519 00003269 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4520 0000326C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4521 0000326F 50                      	push rax
  4522 00003270 6A01                    	push 1
  4523 00003272 488B4510                	mov rax, qword [rbp + 8 * 2]
  4524                                  
  4525 00003276 488B00                                            	mov rax, qword[rax + 8 * 0]
  4526                                  
  4527 00003279 488B00                                            	mov rax, qword[rax + 8 * 0]
  4528                                  	assert_closure(rax)
    42 0000327C 803805              <1>  cmp byte [%1], %2
    43 0000327F 0F85914C0000        <1>  jne L_error_incorrect_type
  4529 00003285 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4530 00003288 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4531 0000328B 50                      	push rax
  4532 0000328C 6A01                    	push 1
  4533 0000328E 488B4510                	mov rax, qword [rbp + 8 * 2]
  4534                                  
  4535 00003292 488B00                                            	mov rax, qword[rax + 8 * 0]
  4536                                  
  4537 00003295 488B00                                            	mov rax, qword[rax + 8 * 0]
  4538                                  	assert_closure(rax)
    42 00003298 803805              <1>  cmp byte [%1], %2
    43 0000329B 0F85754C0000        <1>  jne L_error_incorrect_type
  4539 000032A1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4540 000032A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4541                                  	assert_closure(rax)
    42 000032A7 803805              <1>  cmp byte [%1], %2
    43 000032AA 0F85664C0000        <1>  jne L_error_incorrect_type
  4542 000032B0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4543 000032B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4544 000032B6 50                      	push rax
  4545 000032B7 6A01                    	push 1
  4546 000032B9 488B4510                	mov rax, qword [rbp + 8 * 2]
  4547                                  
  4548 000032BD 488B00                                            	mov rax, qword[rax + 8 * 0]
  4549                                  
  4550 000032C0 488B00                                            	mov rax, qword[rax + 8 * 0]
  4551 000032C3 50                      	push rax
  4552 000032C4 6A01                    	push 1
  4553 000032C6 488B4510                	mov rax, qword [rbp + 8 * 2]
  4554                                  
  4555 000032CA 488B00                                            	mov rax, qword[rax + 8 * 0]
  4556                                  
  4557 000032CD 488B00                                            	mov rax, qword[rax + 8 * 0]
  4558                                  	assert_closure(rax)
    42 000032D0 803805              <1>  cmp byte [%1], %2
    43 000032D3 0F853D4C0000        <1>  jne L_error_incorrect_type
  4559 000032D9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4560 000032DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  4561 000032DF 50                      	push rax
  4562 000032E0 6A01                    	push 1
  4563 000032E2 488B4510                	mov rax, qword [rbp + 8 * 2]
  4564                                  
  4565 000032E6 488B00                                            	mov rax, qword[rax + 8 * 0]
  4566                                  
  4567 000032E9 488B00                                            	mov rax, qword[rax + 8 * 0]
  4568                                  	assert_closure(rax)
    42 000032EC 803805              <1>  cmp byte [%1], %2
    43 000032EF 0F85214C0000        <1>  jne L_error_incorrect_type
  4569 000032F5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4570 000032F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4571 000032FB 50                      	push rax
  4572 000032FC 6A01                    	push 1
  4573 000032FE 488B4510                	mov rax, qword [rbp + 8 * 2]
  4574                                  
  4575 00003302 488B00                                            	mov rax, qword[rax + 8 * 0]
  4576                                  
  4577 00003305 488B00                                            	mov rax, qword[rax + 8 * 0]
  4578                                  	assert_closure(rax)
    42 00003308 803805              <1>  cmp byte [%1], %2
    43 0000330B 0F85054C0000        <1>  jne L_error_incorrect_type
  4579 00003311 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4580 00003314 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4581 00003317 50                      	push rax
  4582 00003318 6A01                    	push 1
  4583 0000331A 488B4510                	mov rax, qword [rbp + 8 * 2]
  4584                                  
  4585 0000331E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4586                                  
  4587 00003321 488B00                                            	mov rax, qword[rax + 8 * 0]
  4588                                  	assert_closure(rax)
    42 00003324 803805              <1>  cmp byte [%1], %2
    43 00003327 0F85E94B0000        <1>  jne L_error_incorrect_type
  4589 0000332D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4590 00003330 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4591 00003333 50                      	push rax
  4592 00003334 6A01                    	push 1
  4593 00003336 488B4510                	mov rax, qword [rbp + 8 * 2]
  4594                                  
  4595 0000333A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4596                                  
  4597 0000333D 488B00                                            	mov rax, qword[rax + 8 * 0]
  4598 00003340 50                      	push rax
  4599 00003341 6A01                    	push 1
  4600 00003343 488B4510                	mov rax, qword [rbp + 8 * 2]
  4601                                  
  4602 00003347 488B00                                            	mov rax, qword[rax + 8 * 0]
  4603                                  
  4604 0000334A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4605                                  	assert_closure(rax)
    42 0000334D 803805              <1>  cmp byte [%1], %2
    43 00003350 0F85C04B0000        <1>  jne L_error_incorrect_type
  4606 00003356 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4607 00003359 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4608 0000335C 50                      	push rax
  4609 0000335D 6A01                    	push 1
  4610 0000335F 488B4510                	mov rax, qword [rbp + 8 * 2]
  4611                                  
  4612 00003363 488B00                                            	mov rax, qword[rax + 8 * 0]
  4613                                  
  4614 00003366 488B00                                            	mov rax, qword[rax + 8 * 0]
  4615                                  	assert_closure(rax)
    42 00003369 803805              <1>  cmp byte [%1], %2
    43 0000336C 0F85A44B0000        <1>  jne L_error_incorrect_type
  4616 00003372 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4617 00003375 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4618 00003378 50                      	push rax
  4619 00003379 6A01                    	push 1
  4620 0000337B 488B4510                	mov rax, qword [rbp + 8 * 2]
  4621                                  
  4622 0000337F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4623                                  
  4624 00003382 488B00                                            	mov rax, qword[rax + 8 * 0]
  4625                                  	assert_closure(rax)
    42 00003385 803805              <1>  cmp byte [%1], %2
    43 00003388 0F85884B0000        <1>  jne L_error_incorrect_type
  4626 0000338E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4627 00003391 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4628 00003394 50                      	push rax
  4629 00003395 6A01                    	push 1
  4630 00003397 488B4510                	mov rax, qword [rbp + 8 * 2]
  4631                                  
  4632 0000339B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4633                                  
  4634 0000339E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4635 000033A1 50                      	push rax
  4636 000033A2 6A01                    	push 1
  4637 000033A4 488B4510                	mov rax, qword [rbp + 8 * 2]
  4638                                  
  4639 000033A8 488B00                                            	mov rax, qword[rax + 8 * 0]
  4640                                  
  4641 000033AB 488B00                                            	mov rax, qword[rax + 8 * 0]
  4642                                  	assert_closure(rax)
    42 000033AE 803805              <1>  cmp byte [%1], %2
    43 000033B1 0F855F4B0000        <1>  jne L_error_incorrect_type
  4643 000033B7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4644 000033BA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4645 000033BD 50                      	push rax
  4646 000033BE 6A01                    	push 1
  4647 000033C0 488B4510                	mov rax, qword [rbp + 8 * 2]
  4648                                  
  4649 000033C4 488B00                                            	mov rax, qword[rax + 8 * 0]
  4650                                  
  4651 000033C7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4652                                  	assert_closure(rax)
    42 000033CA 803805              <1>  cmp byte [%1], %2
    43 000033CD 0F85434B0000        <1>  jne L_error_incorrect_type
  4653 000033D3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4654 000033D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4655 000033D9 50                      	push rax
  4656 000033DA 6A01                    	push 1
  4657 000033DC 488B4510                	mov rax, qword [rbp + 8 * 2]
  4658                                  
  4659 000033E0 488B00                                            	mov rax, qword[rax + 8 * 0]
  4660                                  
  4661 000033E3 488B00                                            	mov rax, qword[rax + 8 * 0]
  4662                                  	assert_closure(rax)
    42 000033E6 803805              <1>  cmp byte [%1], %2
    43 000033E9 0F85274B0000        <1>  jne L_error_incorrect_type
  4663 000033EF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4664 000033F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4665                                  	assert_closure(rax)
    42 000033F5 803805              <1>  cmp byte [%1], %2
    43 000033F8 0F85184B0000        <1>  jne L_error_incorrect_type
  4666 000033FE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4667 00003401 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4668 00003404 50                      	push rax
  4669 00003405 6A01                    	push 1
  4670 00003407 488B4510                	mov rax, qword [rbp + 8 * 2]
  4671                                  
  4672 0000340B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4673                                  
  4674 0000340E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4675 00003411 50                      	push rax
  4676 00003412 6A01                    	push 1
  4677 00003414 488B4510                	mov rax, qword [rbp + 8 * 2]
  4678                                  
  4679 00003418 488B00                                            	mov rax, qword[rax + 8 * 0]
  4680                                  
  4681 0000341B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4682                                  	assert_closure(rax)
    42 0000341E 803805              <1>  cmp byte [%1], %2
    43 00003421 0F85EF4A0000        <1>  jne L_error_incorrect_type
  4683 00003427 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4684 0000342A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4685 0000342D 50                      	push rax
  4686 0000342E 6A01                    	push 1
  4687 00003430 488B4510                	mov rax, qword [rbp + 8 * 2]
  4688                                  
  4689 00003434 488B00                                            	mov rax, qword[rax + 8 * 0]
  4690                                  
  4691 00003437 488B00                                            	mov rax, qword[rax + 8 * 0]
  4692                                  	assert_closure(rax)
    42 0000343A 803805              <1>  cmp byte [%1], %2
    43 0000343D 0F85D34A0000        <1>  jne L_error_incorrect_type
  4693 00003443 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4694 00003446 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4695 00003449 50                      	push rax
  4696 0000344A 6A01                    	push 1
  4697 0000344C 488B4510                	mov rax, qword [rbp + 8 * 2]
  4698                                  
  4699 00003450 488B00                                            	mov rax, qword[rax + 8 * 0]
  4700                                  
  4701 00003453 488B00                                            	mov rax, qword[rax + 8 * 0]
  4702                                  	assert_closure(rax)
    42 00003456 803805              <1>  cmp byte [%1], %2
    43 00003459 0F85B74A0000        <1>  jne L_error_incorrect_type
  4703 0000345F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4704 00003462 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4705 00003465 50                      	push rax
  4706 00003466 6A01                    	push 1
  4707 00003468 488B4510                	mov rax, qword [rbp + 8 * 2]
  4708                                  
  4709 0000346C 488B00                                            	mov rax, qword[rax + 8 * 0]
  4710                                  
  4711 0000346F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4712                                  	assert_closure(rax)
    42 00003472 803805              <1>  cmp byte [%1], %2
    43 00003475 0F859B4A0000        <1>  jne L_error_incorrect_type
  4713 0000347B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4714 0000347E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4715                                  	assert_closure(rax)
    42 00003481 803805              <1>  cmp byte [%1], %2
    43 00003484 0F858C4A0000        <1>  jne L_error_incorrect_type
  4716 0000348A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4717 0000348D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4718                                  	assert_closure(rax)
    42 00003490 803805              <1>  cmp byte [%1], %2
    43 00003493 0F857D4A0000        <1>  jne L_error_incorrect_type
  4719 00003499 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4720 0000349C FF5009                  	call SOB_CLOSURE_CODE(rax)
  4721 0000349F 50                      	push rax
  4722 000034A0 6A01                    	push 1
  4723 000034A2 488B4510                	mov rax, qword [rbp + 8 * 2]
  4724                                  
  4725 000034A6 488B00                                            	mov rax, qword[rax + 8 * 0]
  4726                                  
  4727 000034A9 488B00                                            	mov rax, qword[rax + 8 * 0]
  4728 000034AC 50                      	push rax
  4729 000034AD 6A01                    	push 1
  4730 000034AF 488B4510                	mov rax, qword [rbp + 8 * 2]
  4731                                  
  4732 000034B3 488B00                                            	mov rax, qword[rax + 8 * 0]
  4733                                  
  4734 000034B6 488B00                                            	mov rax, qword[rax + 8 * 0]
  4735                                  	assert_closure(rax)
    42 000034B9 803805              <1>  cmp byte [%1], %2
    43 000034BC 0F85544A0000        <1>  jne L_error_incorrect_type
  4736 000034C2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4737 000034C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4738 000034C8 50                      	push rax
  4739 000034C9 6A01                    	push 1
  4740 000034CB 488B4510                	mov rax, qword [rbp + 8 * 2]
  4741                                  
  4742 000034CF 488B00                                            	mov rax, qword[rax + 8 * 0]
  4743                                  
  4744 000034D2 488B00                                            	mov rax, qword[rax + 8 * 0]
  4745                                  	assert_closure(rax)
    42 000034D5 803805              <1>  cmp byte [%1], %2
    43 000034D8 0F85384A0000        <1>  jne L_error_incorrect_type
  4746 000034DE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4747 000034E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4748 000034E4 50                      	push rax
  4749 000034E5 6A01                    	push 1
  4750 000034E7 488B4510                	mov rax, qword [rbp + 8 * 2]
  4751                                  
  4752 000034EB 488B00                                            	mov rax, qword[rax + 8 * 0]
  4753                                  
  4754 000034EE 488B00                                            	mov rax, qword[rax + 8 * 0]
  4755                                  	assert_closure(rax)
    42 000034F1 803805              <1>  cmp byte [%1], %2
    43 000034F4 0F851C4A0000        <1>  jne L_error_incorrect_type
  4756 000034FA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4757 000034FD FF5009                  	call SOB_CLOSURE_CODE(rax)
  4758 00003500 50                      	push rax
  4759 00003501 6A01                    	push 1
  4760 00003503 488B4510                	mov rax, qword [rbp + 8 * 2]
  4761                                  
  4762 00003507 488B00                                            	mov rax, qword[rax + 8 * 0]
  4763                                  
  4764 0000350A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4765                                  	assert_closure(rax)
    42 0000350D 803805              <1>  cmp byte [%1], %2
    43 00003510 0F85004A0000        <1>  jne L_error_incorrect_type
  4766 00003516 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4767 00003519 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4768 0000351C 50                      	push rax
  4769 0000351D 6A01                    	push 1
  4770 0000351F 488B4510                	mov rax, qword [rbp + 8 * 2]
  4771                                  
  4772 00003523 488B00                                            	mov rax, qword[rax + 8 * 0]
  4773                                  
  4774 00003526 488B00                                            	mov rax, qword[rax + 8 * 0]
  4775 00003529 50                      	push rax
  4776 0000352A 6A01                    	push 1
  4777 0000352C 488B4510                	mov rax, qword [rbp + 8 * 2]
  4778                                  
  4779 00003530 488B00                                            	mov rax, qword[rax + 8 * 0]
  4780                                  
  4781 00003533 488B00                                            	mov rax, qword[rax + 8 * 0]
  4782                                  	assert_closure(rax)
    42 00003536 803805              <1>  cmp byte [%1], %2
    43 00003539 0F85D7490000        <1>  jne L_error_incorrect_type
  4783 0000353F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4784 00003542 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4785 00003545 50                      	push rax
  4786 00003546 6A01                    	push 1
  4787 00003548 488B4510                	mov rax, qword [rbp + 8 * 2]
  4788                                  
  4789 0000354C 488B00                                            	mov rax, qword[rax + 8 * 0]
  4790                                  
  4791 0000354F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4792                                  	assert_closure(rax)
    42 00003552 803805              <1>  cmp byte [%1], %2
    43 00003555 0F85BB490000        <1>  jne L_error_incorrect_type
  4793 0000355B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4794 0000355E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4795 00003561 50                      	push rax
  4796 00003562 6A01                    	push 1
  4797 00003564 488B4510                	mov rax, qword [rbp + 8 * 2]
  4798                                  
  4799 00003568 488B00                                            	mov rax, qword[rax + 8 * 0]
  4800                                  
  4801 0000356B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4802                                  	assert_closure(rax)
    42 0000356E 803805              <1>  cmp byte [%1], %2
    43 00003571 0F859F490000        <1>  jne L_error_incorrect_type
  4803 00003577 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4804 0000357A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4805                                  	assert_closure(rax)
    42 0000357D 803805              <1>  cmp byte [%1], %2
    43 00003580 0F8590490000        <1>  jne L_error_incorrect_type
  4806 00003586 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4807 00003589 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4808 0000358C 50                      	push rax
  4809 0000358D 6A01                    	push 1
  4810 0000358F 488B4510                	mov rax, qword [rbp + 8 * 2]
  4811                                  
  4812 00003593 488B00                                            	mov rax, qword[rax + 8 * 0]
  4813                                  
  4814 00003596 488B00                                            	mov rax, qword[rax + 8 * 0]
  4815 00003599 50                      	push rax
  4816 0000359A 6A01                    	push 1
  4817 0000359C 488B4510                	mov rax, qword [rbp + 8 * 2]
  4818                                  
  4819 000035A0 488B00                                            	mov rax, qword[rax + 8 * 0]
  4820                                  
  4821 000035A3 488B00                                            	mov rax, qword[rax + 8 * 0]
  4822                                  	assert_closure(rax)
    42 000035A6 803805              <1>  cmp byte [%1], %2
    43 000035A9 0F8567490000        <1>  jne L_error_incorrect_type
  4823 000035AF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4824 000035B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4825 000035B5 50                      	push rax
  4826 000035B6 6A01                    	push 1
  4827 000035B8 488B4510                	mov rax, qword [rbp + 8 * 2]
  4828                                  
  4829 000035BC 488B00                                            	mov rax, qword[rax + 8 * 0]
  4830                                  
  4831 000035BF 488B00                                            	mov rax, qword[rax + 8 * 0]
  4832                                  	assert_closure(rax)
    42 000035C2 803805              <1>  cmp byte [%1], %2
    43 000035C5 0F854B490000        <1>  jne L_error_incorrect_type
  4833 000035CB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4834 000035CE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4835 000035D1 50                      	push rax
  4836 000035D2 6A01                    	push 1
  4837 000035D4 488B4510                	mov rax, qword [rbp + 8 * 2]
  4838                                  
  4839 000035D8 488B00                                            	mov rax, qword[rax + 8 * 0]
  4840                                  
  4841 000035DB 488B00                                            	mov rax, qword[rax + 8 * 0]
  4842                                  	assert_closure(rax)
    42 000035DE 803805              <1>  cmp byte [%1], %2
    43 000035E1 0F852F490000        <1>  jne L_error_incorrect_type
  4843 000035E7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4844 000035EA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4845 000035ED 50                      	push rax
  4846 000035EE 6A01                    	push 1
  4847 000035F0 488B4510                	mov rax, qword [rbp + 8 * 2]
  4848                                  
  4849 000035F4 488B00                                            	mov rax, qword[rax + 8 * 0]
  4850                                  
  4851 000035F7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4852                                  	assert_closure(rax)
    42 000035FA 803805              <1>  cmp byte [%1], %2
    43 000035FD 0F8513490000        <1>  jne L_error_incorrect_type
  4853 00003603 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4854 00003606 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4855                                  	assert_closure(rax)
    42 00003609 803805              <1>  cmp byte [%1], %2
    43 0000360C 0F8504490000        <1>  jne L_error_incorrect_type
  4856 00003612 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4857 00003615 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4858                                  	assert_closure(rax)
    42 00003618 803805              <1>  cmp byte [%1], %2
    43 0000361B 0F85F5480000        <1>  jne L_error_incorrect_type
  4859 00003621 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4860 00003624 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4861 00003627 50                      	push rax
  4862 00003628 6A01                    	push 1
  4863 0000362A 488B4510                	mov rax, qword [rbp + 8 * 2]
  4864                                  
  4865 0000362E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4866                                  
  4867 00003631 488B00                                            	mov rax, qword[rax + 8 * 0]
  4868 00003634 50                      	push rax
  4869 00003635 6A01                    	push 1
  4870 00003637 488B4510                	mov rax, qword [rbp + 8 * 2]
  4871                                  
  4872 0000363B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4873                                  
  4874 0000363E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4875                                  	assert_closure(rax)
    42 00003641 803805              <1>  cmp byte [%1], %2
    43 00003644 0F85CC480000        <1>  jne L_error_incorrect_type
  4876 0000364A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4877 0000364D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4878 00003650 50                      	push rax
  4879 00003651 6A01                    	push 1
  4880 00003653 488B4510                	mov rax, qword [rbp + 8 * 2]
  4881                                  
  4882 00003657 488B00                                            	mov rax, qword[rax + 8 * 0]
  4883                                  
  4884 0000365A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4885                                  	assert_closure(rax)
    42 0000365D 803805              <1>  cmp byte [%1], %2
    43 00003660 0F85B0480000        <1>  jne L_error_incorrect_type
  4886 00003666 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4887 00003669 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4888 0000366C 50                      	push rax
  4889 0000366D 6A01                    	push 1
  4890 0000366F 488B4510                	mov rax, qword [rbp + 8 * 2]
  4891                                  
  4892 00003673 488B00                                            	mov rax, qword[rax + 8 * 0]
  4893                                  
  4894 00003676 488B00                                            	mov rax, qword[rax + 8 * 0]
  4895                                  	assert_closure(rax)
    42 00003679 803805              <1>  cmp byte [%1], %2
    43 0000367C 0F8594480000        <1>  jne L_error_incorrect_type
  4896 00003682 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4897 00003685 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4898 00003688 50                      	push rax
  4899 00003689 6A01                    	push 1
  4900 0000368B 488B4510                	mov rax, qword [rbp + 8 * 2]
  4901                                  
  4902 0000368F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4903                                  
  4904 00003692 488B00                                            	mov rax, qword[rax + 8 * 0]
  4905                                  	assert_closure(rax)
    42 00003695 803805              <1>  cmp byte [%1], %2
    43 00003698 0F8578480000        <1>  jne L_error_incorrect_type
  4906 0000369E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4907 000036A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4908                                  	assert_closure(rax)
    42 000036A4 803805              <1>  cmp byte [%1], %2
    43 000036A7 0F8569480000        <1>  jne L_error_incorrect_type
  4909 000036AD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4910 000036B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4911                                  	assert_closure(rax)
    42 000036B3 803805              <1>  cmp byte [%1], %2
    43 000036B6 0F855A480000        <1>  jne L_error_incorrect_type
  4912 000036BC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4913 000036BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  4914                                  	assert_closure(rax)
    42 000036C2 803805              <1>  cmp byte [%1], %2
    43 000036C5 0F854B480000        <1>  jne L_error_incorrect_type
  4915 000036CB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4916 000036CE FF5009                  	call SOB_CLOSURE_CODE(rax)
  4917                                  	assert_closure(rax)
    42 000036D1 803805              <1>  cmp byte [%1], %2
    43 000036D4 0F853C480000        <1>  jne L_error_incorrect_type
  4918 000036DA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4919 000036DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  4920 000036E0 50                      	push rax
  4921 000036E1 6A01                    	push 1
  4922 000036E3 488B4510                	mov rax, qword [rbp + 8 * 2]
  4923                                  
  4924 000036E7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4925                                  
  4926 000036EA 488B00                                            	mov rax, qword[rax + 8 * 0]
  4927 000036ED 50                      	push rax
  4928 000036EE 6A01                    	push 1
  4929 000036F0 488B4510                	mov rax, qword [rbp + 8 * 2]
  4930                                  
  4931 000036F4 488B00                                            	mov rax, qword[rax + 8 * 0]
  4932                                  
  4933 000036F7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4934                                  	assert_closure(rax)
    42 000036FA 803805              <1>  cmp byte [%1], %2
    43 000036FD 0F8513480000        <1>  jne L_error_incorrect_type
  4935 00003703 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4936 00003706 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4937 00003709 50                      	push rax
  4938 0000370A 6A01                    	push 1
  4939 0000370C 488B4510                	mov rax, qword [rbp + 8 * 2]
  4940                                  
  4941 00003710 488B00                                            	mov rax, qword[rax + 8 * 0]
  4942                                  
  4943 00003713 488B00                                            	mov rax, qword[rax + 8 * 0]
  4944                                  	assert_closure(rax)
    42 00003716 803805              <1>  cmp byte [%1], %2
    43 00003719 0F85F7470000        <1>  jne L_error_incorrect_type
  4945 0000371F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4946 00003722 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4947 00003725 50                      	push rax
  4948 00003726 6A01                    	push 1
  4949 00003728 488B4510                	mov rax, qword [rbp + 8 * 2]
  4950                                  
  4951 0000372C 488B00                                            	mov rax, qword[rax + 8 * 0]
  4952                                  
  4953 0000372F 488B00                                            	mov rax, qword[rax + 8 * 0]
  4954                                  	assert_closure(rax)
    42 00003732 803805              <1>  cmp byte [%1], %2
    43 00003735 0F85DB470000        <1>  jne L_error_incorrect_type
  4955 0000373B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4956 0000373E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4957 00003741 50                      	push rax
  4958 00003742 6A01                    	push 1
  4959 00003744 488B4510                	mov rax, qword [rbp + 8 * 2]
  4960                                  
  4961 00003748 488B00                                            	mov rax, qword[rax + 8 * 0]
  4962                                  
  4963 0000374B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4964 0000374E 50                      	push rax
  4965 0000374F 6A01                    	push 1
  4966 00003751 488B4510                	mov rax, qword [rbp + 8 * 2]
  4967                                  
  4968 00003755 488B00                                            	mov rax, qword[rax + 8 * 0]
  4969                                  
  4970 00003758 488B00                                            	mov rax, qword[rax + 8 * 0]
  4971                                  	assert_closure(rax)
    42 0000375B 803805              <1>  cmp byte [%1], %2
    43 0000375E 0F85B2470000        <1>  jne L_error_incorrect_type
  4972 00003764 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4973 00003767 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4974 0000376A 50                      	push rax
  4975 0000376B 6A01                    	push 1
  4976 0000376D 488B4510                	mov rax, qword [rbp + 8 * 2]
  4977                                  
  4978 00003771 488B00                                            	mov rax, qword[rax + 8 * 0]
  4979                                  
  4980 00003774 488B00                                            	mov rax, qword[rax + 8 * 0]
  4981                                  	assert_closure(rax)
    42 00003777 803805              <1>  cmp byte [%1], %2
    43 0000377A 0F8596470000        <1>  jne L_error_incorrect_type
  4982 00003780 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4983 00003783 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4984 00003786 50                      	push rax
  4985 00003787 6A01                    	push 1
  4986 00003789 488B4510                	mov rax, qword [rbp + 8 * 2]
  4987                                  
  4988 0000378D 488B00                                            	mov rax, qword[rax + 8 * 0]
  4989                                  
  4990 00003790 488B00                                            	mov rax, qword[rax + 8 * 0]
  4991                                  	assert_closure(rax)
    42 00003793 803805              <1>  cmp byte [%1], %2
    43 00003796 0F857A470000        <1>  jne L_error_incorrect_type
  4992 0000379C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4993 0000379F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4994 000037A2 50                      	push rax
  4995 000037A3 6A01                    	push 1
  4996 000037A5 488B4510                	mov rax, qword [rbp + 8 * 2]
  4997                                  
  4998 000037A9 488B00                                            	mov rax, qword[rax + 8 * 0]
  4999                                  
  5000 000037AC 488B00                                            	mov rax, qword[rax + 8 * 0]
  5001                                  	assert_closure(rax)
    42 000037AF 803805              <1>  cmp byte [%1], %2
    43 000037B2 0F855E470000        <1>  jne L_error_incorrect_type
  5002 000037B8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5003 000037BB FF5009                  	call SOB_CLOSURE_CODE(rax)
  5004 000037BE 50                      	push rax
  5005 000037BF 6A01                    	push 1
  5006 000037C1 488B4510                	mov rax, qword [rbp + 8 * 2]
  5007                                  
  5008 000037C5 488B00                                            	mov rax, qword[rax + 8 * 0]
  5009                                  
  5010 000037C8 488B00                                            	mov rax, qword[rax + 8 * 0]
  5011 000037CB 50                      	push rax
  5012 000037CC 6A01                    	push 1
  5013 000037CE 488B4510                	mov rax, qword [rbp + 8 * 2]
  5014                                  
  5015 000037D2 488B00                                            	mov rax, qword[rax + 8 * 0]
  5016                                  
  5017 000037D5 488B00                                            	mov rax, qword[rax + 8 * 0]
  5018                                  	assert_closure(rax)
    42 000037D8 803805              <1>  cmp byte [%1], %2
    43 000037DB 0F8535470000        <1>  jne L_error_incorrect_type
  5019 000037E1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5020 000037E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5021 000037E7 50                      	push rax
  5022 000037E8 6A01                    	push 1
  5023 000037EA 488B4510                	mov rax, qword [rbp + 8 * 2]
  5024                                  
  5025 000037EE 488B00                                            	mov rax, qword[rax + 8 * 0]
  5026                                  
  5027 000037F1 488B00                                            	mov rax, qword[rax + 8 * 0]
  5028                                  	assert_closure(rax)
    42 000037F4 803805              <1>  cmp byte [%1], %2
    43 000037F7 0F8519470000        <1>  jne L_error_incorrect_type
  5029 000037FD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5030 00003800 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5031 00003803 50                      	push rax
  5032 00003804 6A01                    	push 1
  5033 00003806 488B4510                	mov rax, qword [rbp + 8 * 2]
  5034                                  
  5035 0000380A 488B00                                            	mov rax, qword[rax + 8 * 0]
  5036                                  
  5037 0000380D 488B00                                            	mov rax, qword[rax + 8 * 0]
  5038                                  	assert_closure(rax)
    42 00003810 803805              <1>  cmp byte [%1], %2
    43 00003813 0F85FD460000        <1>  jne L_error_incorrect_type
  5039 00003819 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5040 0000381C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5041                                  	assert_closure(rax)
    42 0000381F 803805              <1>  cmp byte [%1], %2
    43 00003822 0F85EE460000        <1>  jne L_error_incorrect_type
  5042 00003828 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5043 0000382B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5044 0000382E 50                      	push rax
  5045 0000382F 6A01                    	push 1
  5046 00003831 488B4510                	mov rax, qword [rbp + 8 * 2]
  5047                                  
  5048 00003835 488B00                                            	mov rax, qword[rax + 8 * 0]
  5049                                  
  5050 00003838 488B00                                            	mov rax, qword[rax + 8 * 0]
  5051 0000383B 50                      	push rax
  5052 0000383C 6A01                    	push 1
  5053 0000383E 488B4510                	mov rax, qword [rbp + 8 * 2]
  5054                                  
  5055 00003842 488B00                                            	mov rax, qword[rax + 8 * 0]
  5056                                  
  5057 00003845 488B00                                            	mov rax, qword[rax + 8 * 0]
  5058                                  	assert_closure(rax)
    42 00003848 803805              <1>  cmp byte [%1], %2
    43 0000384B 0F85C5460000        <1>  jne L_error_incorrect_type
  5059 00003851 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5060 00003854 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5061 00003857 50                      	push rax
  5062 00003858 6A01                    	push 1
  5063 0000385A 488B4510                	mov rax, qword [rbp + 8 * 2]
  5064                                  
  5065 0000385E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5066                                  
  5067 00003861 488B00                                            	mov rax, qword[rax + 8 * 0]
  5068                                  	assert_closure(rax)
    42 00003864 803805              <1>  cmp byte [%1], %2
    43 00003867 0F85A9460000        <1>  jne L_error_incorrect_type
  5069 0000386D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5070 00003870 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5071 00003873 50                      	push rax
  5072 00003874 6A01                    	push 1
  5073 00003876 488B4510                	mov rax, qword [rbp + 8 * 2]
  5074                                  
  5075 0000387A 488B00                                            	mov rax, qword[rax + 8 * 0]
  5076                                  
  5077 0000387D 488B00                                            	mov rax, qword[rax + 8 * 0]
  5078                                  	assert_closure(rax)
    42 00003880 803805              <1>  cmp byte [%1], %2
    43 00003883 0F858D460000        <1>  jne L_error_incorrect_type
  5079 00003889 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5080 0000388C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5081 0000388F 50                      	push rax
  5082 00003890 6A01                    	push 1
  5083 00003892 488B4510                	mov rax, qword [rbp + 8 * 2]
  5084                                  
  5085 00003896 488B00                                            	mov rax, qword[rax + 8 * 0]
  5086                                  
  5087 00003899 488B00                                            	mov rax, qword[rax + 8 * 0]
  5088                                  	assert_closure(rax)
    42 0000389C 803805              <1>  cmp byte [%1], %2
    43 0000389F 0F8571460000        <1>  jne L_error_incorrect_type
  5089 000038A5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5090 000038A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5091                                  	assert_closure(rax)
    42 000038AB 803805              <1>  cmp byte [%1], %2
    43 000038AE 0F8562460000        <1>  jne L_error_incorrect_type
  5092 000038B4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5093 000038B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5094                                  	assert_closure(rax)
    42 000038BA 803805              <1>  cmp byte [%1], %2
    43 000038BD 0F8553460000        <1>  jne L_error_incorrect_type
  5095 000038C3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5096 000038C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5097 000038C9 50                      	push rax
  5098 000038CA 6A01                    	push 1
  5099 000038CC 488B4510                	mov rax, qword [rbp + 8 * 2]
  5100                                  
  5101 000038D0 488B00                                            	mov rax, qword[rax + 8 * 0]
  5102                                  
  5103 000038D3 488B00                                            	mov rax, qword[rax + 8 * 0]
  5104 000038D6 50                      	push rax
  5105 000038D7 6A01                    	push 1
  5106 000038D9 488B4510                	mov rax, qword [rbp + 8 * 2]
  5107                                  
  5108 000038DD 488B00                                            	mov rax, qword[rax + 8 * 0]
  5109                                  
  5110 000038E0 488B00                                            	mov rax, qword[rax + 8 * 0]
  5111                                  	assert_closure(rax)
    42 000038E3 803805              <1>  cmp byte [%1], %2
    43 000038E6 0F852A460000        <1>  jne L_error_incorrect_type
  5112 000038EC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5113 000038EF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5114 000038F2 50                      	push rax
  5115 000038F3 6A01                    	push 1
  5116 000038F5 488B4510                	mov rax, qword [rbp + 8 * 2]
  5117                                  
  5118 000038F9 488B00                                            	mov rax, qword[rax + 8 * 0]
  5119                                  
  5120 000038FC 488B00                                            	mov rax, qword[rax + 8 * 0]
  5121                                  	assert_closure(rax)
    42 000038FF 803805              <1>  cmp byte [%1], %2
    43 00003902 0F850E460000        <1>  jne L_error_incorrect_type
  5122 00003908 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5123 0000390B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5124 0000390E 50                      	push rax
  5125 0000390F 6A01                    	push 1
  5126 00003911 488B4510                	mov rax, qword [rbp + 8 * 2]
  5127                                  
  5128 00003915 488B00                                            	mov rax, qword[rax + 8 * 0]
  5129                                  
  5130 00003918 488B00                                            	mov rax, qword[rax + 8 * 0]
  5131                                  	assert_closure(rax)
    42 0000391B 803805              <1>  cmp byte [%1], %2
    43 0000391E 0F85F2450000        <1>  jne L_error_incorrect_type
  5132 00003924 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5133 00003927 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5134 0000392A 50                      	push rax
  5135 0000392B 6A01                    	push 1
  5136 0000392D 488B4510                	mov rax, qword [rbp + 8 * 2]
  5137                                  
  5138 00003931 488B00                                            	mov rax, qword[rax + 8 * 0]
  5139                                  
  5140 00003934 488B00                                            	mov rax, qword[rax + 8 * 0]
  5141 00003937 50                      	push rax
  5142 00003938 6A01                    	push 1
  5143 0000393A 488B4510                	mov rax, qword [rbp + 8 * 2]
  5144                                  
  5145 0000393E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5146                                  
  5147 00003941 488B00                                            	mov rax, qword[rax + 8 * 0]
  5148                                  	assert_closure(rax)
    42 00003944 803805              <1>  cmp byte [%1], %2
    43 00003947 0F85C9450000        <1>  jne L_error_incorrect_type
  5149 0000394D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5150 00003950 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5151 00003953 50                      	push rax
  5152 00003954 6A01                    	push 1
  5153 00003956 488B4510                	mov rax, qword [rbp + 8 * 2]
  5154                                  
  5155 0000395A 488B00                                            	mov rax, qword[rax + 8 * 0]
  5156                                  
  5157 0000395D 488B00                                            	mov rax, qword[rax + 8 * 0]
  5158                                  	assert_closure(rax)
    42 00003960 803805              <1>  cmp byte [%1], %2
    43 00003963 0F85AD450000        <1>  jne L_error_incorrect_type
  5159 00003969 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5160 0000396C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5161 0000396F 50                      	push rax
  5162 00003970 6A01                    	push 1
  5163 00003972 488B4510                	mov rax, qword [rbp + 8 * 2]
  5164                                  
  5165 00003976 488B00                                            	mov rax, qword[rax + 8 * 0]
  5166                                  
  5167 00003979 488B00                                            	mov rax, qword[rax + 8 * 0]
  5168                                  	assert_closure(rax)
    42 0000397C 803805              <1>  cmp byte [%1], %2
    43 0000397F 0F8591450000        <1>  jne L_error_incorrect_type
  5169 00003985 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5170 00003988 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5171 0000398B 50                      	push rax
  5172 0000398C 6A01                    	push 1
  5173 0000398E 488B4510                	mov rax, qword [rbp + 8 * 2]
  5174                                  
  5175 00003992 488B00                                            	mov rax, qword[rax + 8 * 0]
  5176                                  
  5177 00003995 488B00                                            	mov rax, qword[rax + 8 * 0]
  5178                                  	assert_closure(rax)
    42 00003998 803805              <1>  cmp byte [%1], %2
    43 0000399B 0F8575450000        <1>  jne L_error_incorrect_type
  5179 000039A1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5180 000039A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5181 000039A7 50                      	push rax
  5182 000039A8 6A01                    	push 1
  5183 000039AA 488B4510                	mov rax, qword [rbp + 8 * 2]
  5184                                  
  5185 000039AE 488B00                                            	mov rax, qword[rax + 8 * 0]
  5186                                  
  5187 000039B1 488B00                                            	mov rax, qword[rax + 8 * 0]
  5188 000039B4 50                      	push rax
  5189 000039B5 6A01                    	push 1
  5190 000039B7 488B4510                	mov rax, qword [rbp + 8 * 2]
  5191                                  
  5192 000039BB 488B00                                            	mov rax, qword[rax + 8 * 0]
  5193                                  
  5194 000039BE 488B00                                            	mov rax, qword[rax + 8 * 0]
  5195                                  	assert_closure(rax)
    42 000039C1 803805              <1>  cmp byte [%1], %2
    43 000039C4 0F854C450000        <1>  jne L_error_incorrect_type
  5196 000039CA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5197 000039CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5198 000039D0 50                      	push rax
  5199 000039D1 6A01                    	push 1
  5200 000039D3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5201                                  
  5202 000039D7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5203                                  
  5204 000039DA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5205                                  	assert_closure(rax)
    42 000039DD 803805              <1>  cmp byte [%1], %2
    43 000039E0 0F8530450000        <1>  jne L_error_incorrect_type
  5206 000039E6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5207 000039E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5208 000039EC 50                      	push rax
  5209 000039ED 6A01                    	push 1
  5210 000039EF 488B4510                	mov rax, qword [rbp + 8 * 2]
  5211                                  
  5212 000039F3 488B00                                            	mov rax, qword[rax + 8 * 0]
  5213                                  
  5214 000039F6 488B00                                            	mov rax, qword[rax + 8 * 0]
  5215                                  	assert_closure(rax)
    42 000039F9 803805              <1>  cmp byte [%1], %2
    43 000039FC 0F8514450000        <1>  jne L_error_incorrect_type
  5216 00003A02 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5217 00003A05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5218                                  	assert_closure(rax)
    42 00003A08 803805              <1>  cmp byte [%1], %2
    43 00003A0B 0F8505450000        <1>  jne L_error_incorrect_type
  5219 00003A11 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5220 00003A14 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5221 00003A17 50                      	push rax
  5222 00003A18 6A01                    	push 1
  5223 00003A1A 488B4510                	mov rax, qword [rbp + 8 * 2]
  5224                                  
  5225 00003A1E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5226                                  
  5227 00003A21 488B00                                            	mov rax, qword[rax + 8 * 0]
  5228 00003A24 50                      	push rax
  5229 00003A25 6A01                    	push 1
  5230 00003A27 488B4510                	mov rax, qword [rbp + 8 * 2]
  5231                                  
  5232 00003A2B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5233                                  
  5234 00003A2E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5235                                  	assert_closure(rax)
    42 00003A31 803805              <1>  cmp byte [%1], %2
    43 00003A34 0F85DC440000        <1>  jne L_error_incorrect_type
  5236 00003A3A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5237 00003A3D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5238 00003A40 50                      	push rax
  5239 00003A41 6A01                    	push 1
  5240 00003A43 488B4510                	mov rax, qword [rbp + 8 * 2]
  5241                                  
  5242 00003A47 488B00                                            	mov rax, qword[rax + 8 * 0]
  5243                                  
  5244 00003A4A 488B00                                            	mov rax, qword[rax + 8 * 0]
  5245                                  	assert_closure(rax)
    42 00003A4D 803805              <1>  cmp byte [%1], %2
    43 00003A50 0F85C0440000        <1>  jne L_error_incorrect_type
  5246 00003A56 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5247 00003A59 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5248 00003A5C 50                      	push rax
  5249 00003A5D 6A01                    	push 1
  5250 00003A5F 488B4510                	mov rax, qword [rbp + 8 * 2]
  5251                                  
  5252 00003A63 488B00                                            	mov rax, qword[rax + 8 * 0]
  5253                                  
  5254 00003A66 488B00                                            	mov rax, qword[rax + 8 * 0]
  5255                                  	assert_closure(rax)
    42 00003A69 803805              <1>  cmp byte [%1], %2
    43 00003A6C 0F85A4440000        <1>  jne L_error_incorrect_type
  5256 00003A72 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5257 00003A75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5258 00003A78 50                      	push rax
  5259 00003A79 6A01                    	push 1
  5260 00003A7B 488B4510                	mov rax, qword [rbp + 8 * 2]
  5261                                  
  5262 00003A7F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5263                                  
  5264 00003A82 488B00                                            	mov rax, qword[rax + 8 * 0]
  5265                                  	assert_closure(rax)
    42 00003A85 803805              <1>  cmp byte [%1], %2
    43 00003A88 0F8588440000        <1>  jne L_error_incorrect_type
  5266 00003A8E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5267 00003A91 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5268                                  	assert_closure(rax)
    42 00003A94 803805              <1>  cmp byte [%1], %2
    43 00003A97 0F8579440000        <1>  jne L_error_incorrect_type
  5269 00003A9D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5270 00003AA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5271                                  	assert_closure(rax)
    42 00003AA3 803805              <1>  cmp byte [%1], %2
    43 00003AA6 0F856A440000        <1>  jne L_error_incorrect_type
  5272 00003AAC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5273 00003AAF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5274                                  	assert_closure(rax)
    42 00003AB2 803805              <1>  cmp byte [%1], %2
    43 00003AB5 0F855B440000        <1>  jne L_error_incorrect_type
  5275 00003ABB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5276 00003ABE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5277                                  	assert_closure(rax)
    42 00003AC1 803805              <1>  cmp byte [%1], %2
    43 00003AC4 0F854C440000        <1>  jne L_error_incorrect_type
  5278 00003ACA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5279 00003ACD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5280 00003AD0 50                      	push rax
  5281 00003AD1 6A01                    	push 1
  5282 00003AD3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5283                                  
  5284 00003AD7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5285                                  
  5286 00003ADA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5287 00003ADD 50                      	push rax
  5288 00003ADE 6A01                    	push 1
  5289 00003AE0 488B4510                	mov rax, qword [rbp + 8 * 2]
  5290                                  
  5291 00003AE4 488B00                                            	mov rax, qword[rax + 8 * 0]
  5292                                  
  5293 00003AE7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5294                                  	assert_closure(rax)
    42 00003AEA 803805              <1>  cmp byte [%1], %2
    43 00003AED 0F8523440000        <1>  jne L_error_incorrect_type
  5295 00003AF3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5296 00003AF6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5297 00003AF9 50                      	push rax
  5298 00003AFA 6A01                    	push 1
  5299 00003AFC 488B4510                	mov rax, qword [rbp + 8 * 2]
  5300                                  
  5301 00003B00 488B00                                            	mov rax, qword[rax + 8 * 0]
  5302                                  
  5303 00003B03 488B00                                            	mov rax, qword[rax + 8 * 0]
  5304                                  	assert_closure(rax)
    42 00003B06 803805              <1>  cmp byte [%1], %2
    43 00003B09 0F8507440000        <1>  jne L_error_incorrect_type
  5305 00003B0F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5306 00003B12 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5307 00003B15 50                      	push rax
  5308 00003B16 6A01                    	push 1
  5309 00003B18 488B4510                	mov rax, qword [rbp + 8 * 2]
  5310                                  
  5311 00003B1C 488B00                                            	mov rax, qword[rax + 8 * 0]
  5312                                  
  5313 00003B1F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5314                                  	assert_closure(rax)
    42 00003B22 803805              <1>  cmp byte [%1], %2
    43 00003B25 0F85EB430000        <1>  jne L_error_incorrect_type
  5315 00003B2B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5316 00003B2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5317 00003B31 50                      	push rax
  5318 00003B32 6A01                    	push 1
  5319 00003B34 488B4510                	mov rax, qword [rbp + 8 * 2]
  5320                                  
  5321 00003B38 488B00                                            	mov rax, qword[rax + 8 * 0]
  5322                                  
  5323 00003B3B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5324                                  	assert_closure(rax)
    42 00003B3E 803805              <1>  cmp byte [%1], %2
    43 00003B41 0F85CF430000        <1>  jne L_error_incorrect_type
  5325 00003B47 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5326 00003B4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5327                                  	assert_closure(rax)
    42 00003B4D 803805              <1>  cmp byte [%1], %2
    43 00003B50 0F85C0430000        <1>  jne L_error_incorrect_type
  5328 00003B56 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5329 00003B59 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5330                                  	assert_closure(rax)
    42 00003B5C 803805              <1>  cmp byte [%1], %2
    43 00003B5F 0F85B1430000        <1>  jne L_error_incorrect_type
  5331 00003B65 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5332 00003B68 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5333 00003B6B 50                      	push rax
  5334 00003B6C 6A01                    	push 1
  5335 00003B6E 488B4510                	mov rax, qword [rbp + 8 * 2]
  5336                                  
  5337 00003B72 488B00                                            	mov rax, qword[rax + 8 * 0]
  5338                                  
  5339 00003B75 488B00                                            	mov rax, qword[rax + 8 * 0]
  5340 00003B78 50                      	push rax
  5341 00003B79 6A01                    	push 1
  5342 00003B7B 488B4510                	mov rax, qword [rbp + 8 * 2]
  5343                                  
  5344 00003B7F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5345                                  
  5346 00003B82 488B00                                            	mov rax, qword[rax + 8 * 0]
  5347                                  	assert_closure(rax)
    42 00003B85 803805              <1>  cmp byte [%1], %2
    43 00003B88 0F8588430000        <1>  jne L_error_incorrect_type
  5348 00003B8E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5349 00003B91 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5350 00003B94 50                      	push rax
  5351 00003B95 6A01                    	push 1
  5352 00003B97 488B4510                	mov rax, qword [rbp + 8 * 2]
  5353                                  
  5354 00003B9B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5355                                  
  5356 00003B9E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5357                                  	assert_closure(rax)
    42 00003BA1 803805              <1>  cmp byte [%1], %2
    43 00003BA4 0F856C430000        <1>  jne L_error_incorrect_type
  5358 00003BAA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5359 00003BAD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5360 00003BB0 50                      	push rax
  5361 00003BB1 6A01                    	push 1
  5362 00003BB3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5363                                  
  5364 00003BB7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5365                                  
  5366 00003BBA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5367                                  	assert_closure(rax)
    42 00003BBD 803805              <1>  cmp byte [%1], %2
    43 00003BC0 0F8550430000        <1>  jne L_error_incorrect_type
  5368 00003BC6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5369 00003BC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5370 00003BCC 50                      	push rax
  5371 00003BCD 6A01                    	push 1
  5372 00003BCF 488B4510                	mov rax, qword [rbp + 8 * 2]
  5373                                  
  5374 00003BD3 488B00                                            	mov rax, qword[rax + 8 * 0]
  5375                                  
  5376 00003BD6 488B00                                            	mov rax, qword[rax + 8 * 0]
  5377 00003BD9 50                      	push rax
  5378 00003BDA 6A01                    	push 1
  5379 00003BDC 488B4510                	mov rax, qword [rbp + 8 * 2]
  5380                                  
  5381 00003BE0 488B00                                            	mov rax, qword[rax + 8 * 0]
  5382                                  
  5383 00003BE3 488B00                                            	mov rax, qword[rax + 8 * 0]
  5384                                  	assert_closure(rax)
    42 00003BE6 803805              <1>  cmp byte [%1], %2
    43 00003BE9 0F8527430000        <1>  jne L_error_incorrect_type
  5385 00003BEF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5386 00003BF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5387 00003BF5 50                      	push rax
  5388 00003BF6 6A01                    	push 1
  5389 00003BF8 488B4510                	mov rax, qword [rbp + 8 * 2]
  5390                                  
  5391 00003BFC 488B00                                            	mov rax, qword[rax + 8 * 0]
  5392                                  
  5393 00003BFF 488B00                                            	mov rax, qword[rax + 8 * 0]
  5394                                  	assert_closure(rax)
    42 00003C02 803805              <1>  cmp byte [%1], %2
    43 00003C05 0F850B430000        <1>  jne L_error_incorrect_type
  5395 00003C0B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5396 00003C0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5397 00003C11 50                      	push rax
  5398 00003C12 6A01                    	push 1
  5399 00003C14 488B4510                	mov rax, qword [rbp + 8 * 2]
  5400                                  
  5401 00003C18 488B00                                            	mov rax, qword[rax + 8 * 0]
  5402                                  
  5403 00003C1B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5404                                  	assert_closure(rax)
    42 00003C1E 803805              <1>  cmp byte [%1], %2
    43 00003C21 0F85EF420000        <1>  jne L_error_incorrect_type
  5405 00003C27 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5406 00003C2A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5407 00003C2D 50                      	push rax
  5408 00003C2E 6A01                    	push 1
  5409 00003C30 488B4510                	mov rax, qword [rbp + 8 * 2]
  5410                                  
  5411 00003C34 488B00                                            	mov rax, qword[rax + 8 * 0]
  5412                                  
  5413 00003C37 488B00                                            	mov rax, qword[rax + 8 * 0]
  5414 00003C3A 50                      	push rax
  5415 00003C3B 6A01                    	push 1
  5416 00003C3D 488B4510                	mov rax, qword [rbp + 8 * 2]
  5417                                  
  5418 00003C41 488B00                                            	mov rax, qword[rax + 8 * 0]
  5419                                  
  5420 00003C44 488B00                                            	mov rax, qword[rax + 8 * 0]
  5421                                  	assert_closure(rax)
    42 00003C47 803805              <1>  cmp byte [%1], %2
    43 00003C4A 0F85C6420000        <1>  jne L_error_incorrect_type
  5422 00003C50 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5423 00003C53 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5424 00003C56 50                      	push rax
  5425 00003C57 6A01                    	push 1
  5426 00003C59 488B4510                	mov rax, qword [rbp + 8 * 2]
  5427                                  
  5428 00003C5D 488B00                                            	mov rax, qword[rax + 8 * 0]
  5429                                  
  5430 00003C60 488B00                                            	mov rax, qword[rax + 8 * 0]
  5431                                  	assert_closure(rax)
    42 00003C63 803805              <1>  cmp byte [%1], %2
    43 00003C66 0F85AA420000        <1>  jne L_error_incorrect_type
  5432 00003C6C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5433 00003C6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5434 00003C72 50                      	push rax
  5435 00003C73 6A01                    	push 1
  5436 00003C75 488B4510                	mov rax, qword [rbp + 8 * 2]
  5437                                  
  5438 00003C79 488B00                                            	mov rax, qword[rax + 8 * 0]
  5439                                  
  5440 00003C7C 488B00                                            	mov rax, qword[rax + 8 * 0]
  5441                                  	assert_closure(rax)
    42 00003C7F 803805              <1>  cmp byte [%1], %2
    43 00003C82 0F858E420000        <1>  jne L_error_incorrect_type
  5442 00003C88 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5443 00003C8B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5444 00003C8E 50                      	push rax
  5445 00003C8F 6A01                    	push 1
  5446 00003C91 488B4510                	mov rax, qword [rbp + 8 * 2]
  5447                                  
  5448 00003C95 488B00                                            	mov rax, qword[rax + 8 * 0]
  5449                                  
  5450 00003C98 488B00                                            	mov rax, qword[rax + 8 * 0]
  5451 00003C9B 50                      	push rax
  5452 00003C9C 6A01                    	push 1
  5453 00003C9E 488B4510                	mov rax, qword [rbp + 8 * 2]
  5454                                  
  5455 00003CA2 488B00                                            	mov rax, qword[rax + 8 * 0]
  5456                                  
  5457 00003CA5 488B00                                            	mov rax, qword[rax + 8 * 0]
  5458                                  	assert_closure(rax)
    42 00003CA8 803805              <1>  cmp byte [%1], %2
    43 00003CAB 0F8565420000        <1>  jne L_error_incorrect_type
  5459 00003CB1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5460 00003CB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5461 00003CB7 50                      	push rax
  5462 00003CB8 6A01                    	push 1
  5463 00003CBA 488B4510                	mov rax, qword [rbp + 8 * 2]
  5464                                  
  5465 00003CBE 488B00                                            	mov rax, qword[rax + 8 * 0]
  5466                                  
  5467 00003CC1 488B00                                            	mov rax, qword[rax + 8 * 0]
  5468                                  	assert_closure(rax)
    42 00003CC4 803805              <1>  cmp byte [%1], %2
    43 00003CC7 0F8549420000        <1>  jne L_error_incorrect_type
  5469 00003CCD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5470 00003CD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5471 00003CD3 50                      	push rax
  5472 00003CD4 6A01                    	push 1
  5473 00003CD6 488B4510                	mov rax, qword [rbp + 8 * 2]
  5474                                  
  5475 00003CDA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5476                                  
  5477 00003CDD 488B00                                            	mov rax, qword[rax + 8 * 0]
  5478                                  	assert_closure(rax)
    42 00003CE0 803805              <1>  cmp byte [%1], %2
    43 00003CE3 0F852D420000        <1>  jne L_error_incorrect_type
  5479 00003CE9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5480 00003CEC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5481 00003CEF 50                      	push rax
  5482 00003CF0 6A01                    	push 1
  5483 00003CF2 488B4510                	mov rax, qword [rbp + 8 * 2]
  5484                                  
  5485 00003CF6 488B00                                            	mov rax, qword[rax + 8 * 0]
  5486                                  
  5487 00003CF9 488B00                                            	mov rax, qword[rax + 8 * 0]
  5488                                  	assert_closure(rax)
    42 00003CFC 803805              <1>  cmp byte [%1], %2
    43 00003CFF 0F8511420000        <1>  jne L_error_incorrect_type
  5489 00003D05 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5490 00003D08 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5491                                  	assert_closure(rax)
    42 00003D0B 803805              <1>  cmp byte [%1], %2
    43 00003D0E 0F8502420000        <1>  jne L_error_incorrect_type
  5492 00003D14 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5493 00003D17 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5494                                  	assert_closure(rax)
    42 00003D1A 803805              <1>  cmp byte [%1], %2
    43 00003D1D 0F85F3410000        <1>  jne L_error_incorrect_type
  5495 00003D23 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5496 00003D26 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5497 00003D29 50                      	push rax
  5498 00003D2A 6A01                    	push 1
  5499 00003D2C 488B4510                	mov rax, qword [rbp + 8 * 2]
  5500                                  
  5501 00003D30 488B00                                            	mov rax, qword[rax + 8 * 0]
  5502                                  
  5503 00003D33 488B00                                            	mov rax, qword[rax + 8 * 0]
  5504 00003D36 50                      	push rax
  5505 00003D37 6A01                    	push 1
  5506 00003D39 488B4510                	mov rax, qword [rbp + 8 * 2]
  5507                                  
  5508 00003D3D 488B00                                            	mov rax, qword[rax + 8 * 0]
  5509                                  
  5510 00003D40 488B00                                            	mov rax, qword[rax + 8 * 0]
  5511                                  	assert_closure(rax)
    42 00003D43 803805              <1>  cmp byte [%1], %2
    43 00003D46 0F85CA410000        <1>  jne L_error_incorrect_type
  5512 00003D4C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5513 00003D4F FF5009                  	call SOB_CLOSURE_CODE(rax)
  5514 00003D52 50                      	push rax
  5515 00003D53 6A01                    	push 1
  5516 00003D55 488B4510                	mov rax, qword [rbp + 8 * 2]
  5517                                  
  5518 00003D59 488B00                                            	mov rax, qword[rax + 8 * 0]
  5519                                  
  5520 00003D5C 488B00                                            	mov rax, qword[rax + 8 * 0]
  5521                                  	assert_closure(rax)
    42 00003D5F 803805              <1>  cmp byte [%1], %2
    43 00003D62 0F85AE410000        <1>  jne L_error_incorrect_type
  5522 00003D68 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5523 00003D6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5524 00003D6E 50                      	push rax
  5525 00003D6F 6A01                    	push 1
  5526 00003D71 488B4510                	mov rax, qword [rbp + 8 * 2]
  5527                                  
  5528 00003D75 488B00                                            	mov rax, qword[rax + 8 * 0]
  5529                                  
  5530 00003D78 488B00                                            	mov rax, qword[rax + 8 * 0]
  5531                                  	assert_closure(rax)
    42 00003D7B 803805              <1>  cmp byte [%1], %2
    43 00003D7E 0F8592410000        <1>  jne L_error_incorrect_type
  5532 00003D84 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5533 00003D87 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5534 00003D8A 50                      	push rax
  5535 00003D8B 6A01                    	push 1
  5536 00003D8D 488B4510                	mov rax, qword [rbp + 8 * 2]
  5537                                  
  5538 00003D91 488B00                                            	mov rax, qword[rax + 8 * 0]
  5539                                  
  5540 00003D94 488B00                                            	mov rax, qword[rax + 8 * 0]
  5541 00003D97 50                      	push rax
  5542 00003D98 6A01                    	push 1
  5543 00003D9A 488B4510                	mov rax, qword [rbp + 8 * 2]
  5544                                  
  5545 00003D9E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5546                                  
  5547 00003DA1 488B00                                            	mov rax, qword[rax + 8 * 0]
  5548                                  	assert_closure(rax)
    42 00003DA4 803805              <1>  cmp byte [%1], %2
    43 00003DA7 0F8569410000        <1>  jne L_error_incorrect_type
  5549 00003DAD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5550 00003DB0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5551 00003DB3 50                      	push rax
  5552 00003DB4 6A01                    	push 1
  5553 00003DB6 488B4510                	mov rax, qword [rbp + 8 * 2]
  5554                                  
  5555 00003DBA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5556                                  
  5557 00003DBD 488B00                                            	mov rax, qword[rax + 8 * 0]
  5558                                  	assert_closure(rax)
    42 00003DC0 803805              <1>  cmp byte [%1], %2
    43 00003DC3 0F854D410000        <1>  jne L_error_incorrect_type
  5559 00003DC9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5560 00003DCC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5561 00003DCF 50                      	push rax
  5562 00003DD0 6A01                    	push 1
  5563 00003DD2 488B4510                	mov rax, qword [rbp + 8 * 2]
  5564                                  
  5565 00003DD6 488B00                                            	mov rax, qword[rax + 8 * 0]
  5566                                  
  5567 00003DD9 488B00                                            	mov rax, qword[rax + 8 * 0]
  5568                                  	assert_closure(rax)
    42 00003DDC 803805              <1>  cmp byte [%1], %2
    43 00003DDF 0F8531410000        <1>  jne L_error_incorrect_type
  5569 00003DE5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5570 00003DE8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5571                                  	assert_closure(rax)
    42 00003DEB 803805              <1>  cmp byte [%1], %2
    43 00003DEE 0F8522410000        <1>  jne L_error_incorrect_type
  5572 00003DF4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5573 00003DF7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5574 00003DFA 50                      	push rax
  5575 00003DFB 6A01                    	push 1
  5576 00003DFD 488B4510                	mov rax, qword [rbp + 8 * 2]
  5577                                  
  5578 00003E01 488B00                                            	mov rax, qword[rax + 8 * 0]
  5579                                  
  5580 00003E04 488B00                                            	mov rax, qword[rax + 8 * 0]
  5581 00003E07 50                      	push rax
  5582 00003E08 6A01                    	push 1
  5583 00003E0A 488B4510                	mov rax, qword [rbp + 8 * 2]
  5584                                  
  5585 00003E0E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5586                                  
  5587 00003E11 488B00                                            	mov rax, qword[rax + 8 * 0]
  5588                                  	assert_closure(rax)
    42 00003E14 803805              <1>  cmp byte [%1], %2
    43 00003E17 0F85F9400000        <1>  jne L_error_incorrect_type
  5589 00003E1D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5590 00003E20 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5591 00003E23 50                      	push rax
  5592 00003E24 6A01                    	push 1
  5593 00003E26 488B4510                	mov rax, qword [rbp + 8 * 2]
  5594                                  
  5595 00003E2A 488B00                                            	mov rax, qword[rax + 8 * 0]
  5596                                  
  5597 00003E2D 488B00                                            	mov rax, qword[rax + 8 * 0]
  5598                                  	assert_closure(rax)
    42 00003E30 803805              <1>  cmp byte [%1], %2
    43 00003E33 0F85DD400000        <1>  jne L_error_incorrect_type
  5599 00003E39 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5600 00003E3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5601 00003E3F 50                      	push rax
  5602 00003E40 6A01                    	push 1
  5603 00003E42 488B4510                	mov rax, qword [rbp + 8 * 2]
  5604                                  
  5605 00003E46 488B00                                            	mov rax, qword[rax + 8 * 0]
  5606                                  
  5607 00003E49 488B00                                            	mov rax, qword[rax + 8 * 0]
  5608                                  	assert_closure(rax)
    42 00003E4C 803805              <1>  cmp byte [%1], %2
    43 00003E4F 0F85C1400000        <1>  jne L_error_incorrect_type
  5609 00003E55 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5610 00003E58 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5611 00003E5B 50                      	push rax
  5612 00003E5C 6A01                    	push 1
  5613 00003E5E 488B4510                	mov rax, qword [rbp + 8 * 2]
  5614                                  
  5615 00003E62 488B00                                            	mov rax, qword[rax + 8 * 0]
  5616                                  
  5617 00003E65 488B00                                            	mov rax, qword[rax + 8 * 0]
  5618                                  	assert_closure(rax)
    42 00003E68 803805              <1>  cmp byte [%1], %2
    43 00003E6B 0F85A5400000        <1>  jne L_error_incorrect_type
  5619 00003E71 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5620 00003E74 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5621 00003E77 50                      	push rax
  5622 00003E78 6A01                    	push 1
  5623 00003E7A 488B4510                	mov rax, qword [rbp + 8 * 2]
  5624                                  
  5625 00003E7E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5626                                  
  5627 00003E81 488B00                                            	mov rax, qword[rax + 8 * 0]
  5628 00003E84 50                      	push rax
  5629 00003E85 6A01                    	push 1
  5630 00003E87 488B4510                	mov rax, qword [rbp + 8 * 2]
  5631                                  
  5632 00003E8B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5633                                  
  5634 00003E8E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5635                                  	assert_closure(rax)
    42 00003E91 803805              <1>  cmp byte [%1], %2
    43 00003E94 0F857C400000        <1>  jne L_error_incorrect_type
  5636 00003E9A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5637 00003E9D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5638 00003EA0 50                      	push rax
  5639 00003EA1 6A01                    	push 1
  5640 00003EA3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5641                                  
  5642 00003EA7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5643                                  
  5644 00003EAA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5645                                  	assert_closure(rax)
    42 00003EAD 803805              <1>  cmp byte [%1], %2
    43 00003EB0 0F8560400000        <1>  jne L_error_incorrect_type
  5646 00003EB6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5647 00003EB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5648 00003EBC 50                      	push rax
  5649 00003EBD 6A01                    	push 1
  5650 00003EBF 488B4510                	mov rax, qword [rbp + 8 * 2]
  5651                                  
  5652 00003EC3 488B00                                            	mov rax, qword[rax + 8 * 0]
  5653                                  
  5654 00003EC6 488B00                                            	mov rax, qword[rax + 8 * 0]
  5655                                  	assert_closure(rax)
    42 00003EC9 803805              <1>  cmp byte [%1], %2
    43 00003ECC 0F8544400000        <1>  jne L_error_incorrect_type
  5656 00003ED2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5657 00003ED5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5658 00003ED8 50                      	push rax
  5659 00003ED9 6A01                    	push 1
  5660 00003EDB 488B4510                	mov rax, qword [rbp + 8 * 2]
  5661                                  
  5662 00003EDF 488B00                                            	mov rax, qword[rax + 8 * 0]
  5663                                  
  5664 00003EE2 488B00                                            	mov rax, qword[rax + 8 * 0]
  5665 00003EE5 50                      	push rax
  5666 00003EE6 6A01                    	push 1
  5667 00003EE8 488B4510                	mov rax, qword [rbp + 8 * 2]
  5668                                  
  5669 00003EEC 488B00                                            	mov rax, qword[rax + 8 * 0]
  5670                                  
  5671 00003EEF 488B00                                            	mov rax, qword[rax + 8 * 0]
  5672                                  	assert_closure(rax)
    42 00003EF2 803805              <1>  cmp byte [%1], %2
    43 00003EF5 0F851B400000        <1>  jne L_error_incorrect_type
  5673 00003EFB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5674 00003EFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5675 00003F01 50                      	push rax
  5676 00003F02 6A01                    	push 1
  5677 00003F04 488B4510                	mov rax, qword [rbp + 8 * 2]
  5678                                  
  5679 00003F08 488B00                                            	mov rax, qword[rax + 8 * 0]
  5680                                  
  5681 00003F0B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5682                                  	assert_closure(rax)
    42 00003F0E 803805              <1>  cmp byte [%1], %2
    43 00003F11 0F85FF3F0000        <1>  jne L_error_incorrect_type
  5683 00003F17 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5684 00003F1A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5685 00003F1D 50                      	push rax
  5686 00003F1E 6A01                    	push 1
  5687 00003F20 488B4510                	mov rax, qword [rbp + 8 * 2]
  5688                                  
  5689 00003F24 488B00                                            	mov rax, qword[rax + 8 * 0]
  5690                                  
  5691 00003F27 488B00                                            	mov rax, qword[rax + 8 * 0]
  5692                                  	assert_closure(rax)
    42 00003F2A 803805              <1>  cmp byte [%1], %2
    43 00003F2D 0F85E33F0000        <1>  jne L_error_incorrect_type
  5693 00003F33 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5694 00003F36 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5695                                  	assert_closure(rax)
    42 00003F39 803805              <1>  cmp byte [%1], %2
    43 00003F3C 0F85D43F0000        <1>  jne L_error_incorrect_type
  5696 00003F42 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5697 00003F45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5698 00003F48 50                      	push rax
  5699 00003F49 6A01                    	push 1
  5700 00003F4B 488B4510                	mov rax, qword [rbp + 8 * 2]
  5701                                  
  5702 00003F4F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5703                                  
  5704 00003F52 488B00                                            	mov rax, qword[rax + 8 * 0]
  5705 00003F55 50                      	push rax
  5706 00003F56 6A01                    	push 1
  5707 00003F58 488B4510                	mov rax, qword [rbp + 8 * 2]
  5708                                  
  5709 00003F5C 488B00                                            	mov rax, qword[rax + 8 * 0]
  5710                                  
  5711 00003F5F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5712                                  	assert_closure(rax)
    42 00003F62 803805              <1>  cmp byte [%1], %2
    43 00003F65 0F85AB3F0000        <1>  jne L_error_incorrect_type
  5713 00003F6B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5714 00003F6E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5715 00003F71 50                      	push rax
  5716 00003F72 6A01                    	push 1
  5717 00003F74 488B4510                	mov rax, qword [rbp + 8 * 2]
  5718                                  
  5719 00003F78 488B00                                            	mov rax, qword[rax + 8 * 0]
  5720                                  
  5721 00003F7B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5722                                  	assert_closure(rax)
    42 00003F7E 803805              <1>  cmp byte [%1], %2
    43 00003F81 0F858F3F0000        <1>  jne L_error_incorrect_type
  5723 00003F87 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5724 00003F8A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5725 00003F8D 50                      	push rax
  5726 00003F8E 6A01                    	push 1
  5727 00003F90 488B4510                	mov rax, qword [rbp + 8 * 2]
  5728                                  
  5729 00003F94 488B00                                            	mov rax, qword[rax + 8 * 0]
  5730                                  
  5731 00003F97 488B00                                            	mov rax, qword[rax + 8 * 0]
  5732                                  	assert_closure(rax)
    42 00003F9A 803805              <1>  cmp byte [%1], %2
    43 00003F9D 0F85733F0000        <1>  jne L_error_incorrect_type
  5733 00003FA3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5734 00003FA6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5735 00003FA9 50                      	push rax
  5736 00003FAA 6A01                    	push 1
  5737 00003FAC 488B4510                	mov rax, qword [rbp + 8 * 2]
  5738                                  
  5739 00003FB0 488B00                                            	mov rax, qword[rax + 8 * 0]
  5740                                  
  5741 00003FB3 488B00                                            	mov rax, qword[rax + 8 * 0]
  5742                                  	assert_closure(rax)
    42 00003FB6 803805              <1>  cmp byte [%1], %2
    43 00003FB9 0F85573F0000        <1>  jne L_error_incorrect_type
  5743 00003FBF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5744 00003FC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5745                                  	assert_closure(rax)
    42 00003FC5 803805              <1>  cmp byte [%1], %2
    43 00003FC8 0F85483F0000        <1>  jne L_error_incorrect_type
  5746 00003FCE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5747 00003FD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5748                                  	assert_closure(rax)
    42 00003FD4 803805              <1>  cmp byte [%1], %2
    43 00003FD7 0F85393F0000        <1>  jne L_error_incorrect_type
  5749 00003FDD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5750 00003FE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5751 00003FE3 50                      	push rax
  5752 00003FE4 6A01                    	push 1
  5753 00003FE6 488B4510                	mov rax, qword [rbp + 8 * 2]
  5754                                  
  5755 00003FEA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5756                                  
  5757 00003FED 488B00                                            	mov rax, qword[rax + 8 * 0]
  5758 00003FF0 50                      	push rax
  5759 00003FF1 6A01                    	push 1
  5760 00003FF3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5761                                  
  5762 00003FF7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5763                                  
  5764 00003FFA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5765                                  	assert_closure(rax)
    42 00003FFD 803805              <1>  cmp byte [%1], %2
    43 00004000 0F85103F0000        <1>  jne L_error_incorrect_type
  5766 00004006 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5767 00004009 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5768 0000400C 50                      	push rax
  5769 0000400D 6A01                    	push 1
  5770 0000400F 488B4510                	mov rax, qword [rbp + 8 * 2]
  5771                                  
  5772 00004013 488B00                                            	mov rax, qword[rax + 8 * 0]
  5773                                  
  5774 00004016 488B00                                            	mov rax, qword[rax + 8 * 0]
  5775                                  	assert_closure(rax)
    42 00004019 803805              <1>  cmp byte [%1], %2
    43 0000401C 0F85F43E0000        <1>  jne L_error_incorrect_type
  5776 00004022 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5777 00004025 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5778 00004028 50                      	push rax
  5779 00004029 6A01                    	push 1
  5780 0000402B 488B4510                	mov rax, qword [rbp + 8 * 2]
  5781                                  
  5782 0000402F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5783                                  
  5784 00004032 488B00                                            	mov rax, qword[rax + 8 * 0]
  5785                                  	assert_closure(rax)
    42 00004035 803805              <1>  cmp byte [%1], %2
    43 00004038 0F85D83E0000        <1>  jne L_error_incorrect_type
  5786 0000403E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5787 00004041 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5788 00004044 50                      	push rax
  5789 00004045 6A01                    	push 1
  5790 00004047 488B4510                	mov rax, qword [rbp + 8 * 2]
  5791                                  
  5792 0000404B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5793                                  
  5794 0000404E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5795                                  	assert_closure(rax)
    42 00004051 803805              <1>  cmp byte [%1], %2
    43 00004054 0F85BC3E0000        <1>  jne L_error_incorrect_type
  5796 0000405A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5797 0000405D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5798 00004060 50                      	push rax
  5799 00004061 6A01                    	push 1
  5800 00004063 488B4510                	mov rax, qword [rbp + 8 * 2]
  5801                                  
  5802 00004067 488B00                                            	mov rax, qword[rax + 8 * 0]
  5803                                  
  5804 0000406A 488B00                                            	mov rax, qword[rax + 8 * 0]
  5805 0000406D 50                      	push rax
  5806 0000406E 6A01                    	push 1
  5807 00004070 488B4510                	mov rax, qword [rbp + 8 * 2]
  5808                                  
  5809 00004074 488B00                                            	mov rax, qword[rax + 8 * 0]
  5810                                  
  5811 00004077 488B00                                            	mov rax, qword[rax + 8 * 0]
  5812                                  	assert_closure(rax)
    42 0000407A 803805              <1>  cmp byte [%1], %2
    43 0000407D 0F85933E0000        <1>  jne L_error_incorrect_type
  5813 00004083 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5814 00004086 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5815 00004089 50                      	push rax
  5816 0000408A 6A01                    	push 1
  5817 0000408C 488B4510                	mov rax, qword [rbp + 8 * 2]
  5818                                  
  5819 00004090 488B00                                            	mov rax, qword[rax + 8 * 0]
  5820                                  
  5821 00004093 488B00                                            	mov rax, qword[rax + 8 * 0]
  5822                                  	assert_closure(rax)
    42 00004096 803805              <1>  cmp byte [%1], %2
    43 00004099 0F85773E0000        <1>  jne L_error_incorrect_type
  5823 0000409F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5824 000040A2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5825 000040A5 50                      	push rax
  5826 000040A6 6A01                    	push 1
  5827 000040A8 488B4510                	mov rax, qword [rbp + 8 * 2]
  5828                                  
  5829 000040AC 488B00                                            	mov rax, qword[rax + 8 * 0]
  5830                                  
  5831 000040AF 488B00                                            	mov rax, qword[rax + 8 * 0]
  5832                                  	assert_closure(rax)
    42 000040B2 803805              <1>  cmp byte [%1], %2
    43 000040B5 0F855B3E0000        <1>  jne L_error_incorrect_type
  5833 000040BB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5834 000040BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5835                                  	assert_closure(rax)
    42 000040C1 803805              <1>  cmp byte [%1], %2
    43 000040C4 0F854C3E0000        <1>  jne L_error_incorrect_type
  5836 000040CA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5837 000040CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5838 000040D0 50                      	push rax
  5839 000040D1 6A01                    	push 1
  5840 000040D3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5841                                  
  5842 000040D7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5843                                  
  5844 000040DA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5845 000040DD 50                      	push rax
  5846 000040DE 6A01                    	push 1
  5847 000040E0 488B4510                	mov rax, qword [rbp + 8 * 2]
  5848                                  
  5849 000040E4 488B00                                            	mov rax, qword[rax + 8 * 0]
  5850                                  
  5851 000040E7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5852                                  	assert_closure(rax)
    42 000040EA 803805              <1>  cmp byte [%1], %2
    43 000040ED 0F85233E0000        <1>  jne L_error_incorrect_type
  5853 000040F3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5854 000040F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5855 000040F9 50                      	push rax
  5856 000040FA 6A01                    	push 1
  5857 000040FC 488B4510                	mov rax, qword [rbp + 8 * 2]
  5858                                  
  5859 00004100 488B00                                            	mov rax, qword[rax + 8 * 0]
  5860                                  
  5861 00004103 488B00                                            	mov rax, qword[rax + 8 * 0]
  5862                                  	assert_closure(rax)
    42 00004106 803805              <1>  cmp byte [%1], %2
    43 00004109 0F85073E0000        <1>  jne L_error_incorrect_type
  5863 0000410F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5864 00004112 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5865 00004115 50                      	push rax
  5866 00004116 6A01                    	push 1
  5867 00004118 488B4510                	mov rax, qword [rbp + 8 * 2]
  5868                                  
  5869 0000411C 488B00                                            	mov rax, qword[rax + 8 * 0]
  5870                                  
  5871 0000411F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5872                                  	assert_closure(rax)
    42 00004122 803805              <1>  cmp byte [%1], %2
    43 00004125 0F85EB3D0000        <1>  jne L_error_incorrect_type
  5873 0000412B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5874 0000412E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5875 00004131 50                      	push rax
  5876 00004132 6A01                    	push 1
  5877 00004134 488B4510                	mov rax, qword [rbp + 8 * 2]
  5878                                  
  5879 00004138 488B00                                            	mov rax, qword[rax + 8 * 0]
  5880                                  
  5881 0000413B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5882                                  	assert_closure(rax)
    42 0000413E 803805              <1>  cmp byte [%1], %2
    43 00004141 0F85CF3D0000        <1>  jne L_error_incorrect_type
  5883 00004147 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5884 0000414A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5885                                  	assert_closure(rax)
    42 0000414D 803805              <1>  cmp byte [%1], %2
    43 00004150 0F85C03D0000        <1>  jne L_error_incorrect_type
  5886 00004156 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5887 00004159 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5888                                  	assert_closure(rax)
    42 0000415C 803805              <1>  cmp byte [%1], %2
    43 0000415F 0F85B13D0000        <1>  jne L_error_incorrect_type
  5889 00004165 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5890 00004168 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5891 0000416B 50                      	push rax
  5892 0000416C 6A01                    	push 1
  5893 0000416E 488B4510                	mov rax, qword [rbp + 8 * 2]
  5894                                  
  5895 00004172 488B00                                            	mov rax, qword[rax + 8 * 0]
  5896                                  
  5897 00004175 488B00                                            	mov rax, qword[rax + 8 * 0]
  5898 00004178 50                      	push rax
  5899 00004179 6A01                    	push 1
  5900 0000417B 488B4510                	mov rax, qword [rbp + 8 * 2]
  5901                                  
  5902 0000417F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5903                                  
  5904 00004182 488B00                                            	mov rax, qword[rax + 8 * 0]
  5905                                  	assert_closure(rax)
    42 00004185 803805              <1>  cmp byte [%1], %2
    43 00004188 0F85883D0000        <1>  jne L_error_incorrect_type
  5906 0000418E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5907 00004191 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5908 00004194 50                      	push rax
  5909 00004195 6A01                    	push 1
  5910 00004197 488B4510                	mov rax, qword [rbp + 8 * 2]
  5911                                  
  5912 0000419B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5913                                  
  5914 0000419E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5915                                  	assert_closure(rax)
    42 000041A1 803805              <1>  cmp byte [%1], %2
    43 000041A4 0F856C3D0000        <1>  jne L_error_incorrect_type
  5916 000041AA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5917 000041AD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5918 000041B0 50                      	push rax
  5919 000041B1 6A01                    	push 1
  5920 000041B3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5921                                  
  5922 000041B7 488B00                                            	mov rax, qword[rax + 8 * 0]
  5923                                  
  5924 000041BA 488B00                                            	mov rax, qword[rax + 8 * 0]
  5925                                  	assert_closure(rax)
    42 000041BD 803805              <1>  cmp byte [%1], %2
    43 000041C0 0F85503D0000        <1>  jne L_error_incorrect_type
  5926 000041C6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5927 000041C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5928 000041CC 50                      	push rax
  5929 000041CD 6A01                    	push 1
  5930 000041CF 488B4510                	mov rax, qword [rbp + 8 * 2]
  5931                                  
  5932 000041D3 488B00                                            	mov rax, qword[rax + 8 * 0]
  5933                                  
  5934 000041D6 488B00                                            	mov rax, qword[rax + 8 * 0]
  5935                                  	assert_closure(rax)
    42 000041D9 803805              <1>  cmp byte [%1], %2
    43 000041DC 0F85343D0000        <1>  jne L_error_incorrect_type
  5936 000041E2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5937 000041E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5938                                  	assert_closure(rax)
    42 000041E8 803805              <1>  cmp byte [%1], %2
    43 000041EB 0F85253D0000        <1>  jne L_error_incorrect_type
  5939 000041F1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5940 000041F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5941                                  	assert_closure(rax)
    42 000041F7 803805              <1>  cmp byte [%1], %2
    43 000041FA 0F85163D0000        <1>  jne L_error_incorrect_type
  5942 00004200 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5943 00004203 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5944                                  	assert_closure(rax)
    42 00004206 803805              <1>  cmp byte [%1], %2
    43 00004209 0F85073D0000        <1>  jne L_error_incorrect_type
  5945 0000420F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5946 00004212 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5947                                  	assert_closure(rax)
    42 00004215 803805              <1>  cmp byte [%1], %2
    43 00004218 0F85F83C0000        <1>  jne L_error_incorrect_type
  5948 0000421E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5949 00004221 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5950 00004224 50                      	push rax
  5951 00004225 6A01                    	push 1
  5952 00004227 488B4510                	mov rax, qword [rbp + 8 * 2]
  5953                                  
  5954 0000422B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5955                                  
  5956 0000422E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5957 00004231 50                      	push rax
  5958 00004232 6A01                    	push 1
  5959 00004234 488B4510                	mov rax, qword [rbp + 8 * 2]
  5960                                  
  5961 00004238 488B00                                            	mov rax, qword[rax + 8 * 0]
  5962                                  
  5963 0000423B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5964                                  	assert_closure(rax)
    42 0000423E 803805              <1>  cmp byte [%1], %2
    43 00004241 0F85CF3C0000        <1>  jne L_error_incorrect_type
  5965 00004247 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5966 0000424A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5967 0000424D 50                      	push rax
  5968 0000424E 6A01                    	push 1
  5969 00004250 488B4510                	mov rax, qword [rbp + 8 * 2]
  5970                                  
  5971 00004254 488B00                                            	mov rax, qword[rax + 8 * 0]
  5972                                  
  5973 00004257 488B00                                            	mov rax, qword[rax + 8 * 0]
  5974                                  	assert_closure(rax)
    42 0000425A 803805              <1>  cmp byte [%1], %2
    43 0000425D 0F85B33C0000        <1>  jne L_error_incorrect_type
  5975 00004263 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5976 00004266 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5977 00004269 50                      	push rax
  5978 0000426A 6A01                    	push 1
  5979 0000426C 488B4510                	mov rax, qword [rbp + 8 * 2]
  5980                                  
  5981 00004270 488B00                                            	mov rax, qword[rax + 8 * 0]
  5982                                  
  5983 00004273 488B00                                            	mov rax, qword[rax + 8 * 0]
  5984                                  	assert_closure(rax)
    42 00004276 803805              <1>  cmp byte [%1], %2
    43 00004279 0F85973C0000        <1>  jne L_error_incorrect_type
  5985 0000427F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5986 00004282 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5987 00004285 50                      	push rax
  5988 00004286 6A01                    	push 1
  5989 00004288 488B4510                	mov rax, qword [rbp + 8 * 2]
  5990                                  
  5991 0000428C 488B00                                            	mov rax, qword[rax + 8 * 0]
  5992                                  
  5993 0000428F 488B00                                            	mov rax, qword[rax + 8 * 0]
  5994 00004292 50                      	push rax
  5995 00004293 6A01                    	push 1
  5996 00004295 488B4510                	mov rax, qword [rbp + 8 * 2]
  5997                                  
  5998 00004299 488B00                                            	mov rax, qword[rax + 8 * 0]
  5999                                  
  6000 0000429C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6001                                  	assert_closure(rax)
    42 0000429F 803805              <1>  cmp byte [%1], %2
    43 000042A2 0F856E3C0000        <1>  jne L_error_incorrect_type
  6002 000042A8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6003 000042AB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6004 000042AE 50                      	push rax
  6005 000042AF 6A01                    	push 1
  6006 000042B1 488B4510                	mov rax, qword [rbp + 8 * 2]
  6007                                  
  6008 000042B5 488B00                                            	mov rax, qword[rax + 8 * 0]
  6009                                  
  6010 000042B8 488B00                                            	mov rax, qword[rax + 8 * 0]
  6011                                  	assert_closure(rax)
    42 000042BB 803805              <1>  cmp byte [%1], %2
    43 000042BE 0F85523C0000        <1>  jne L_error_incorrect_type
  6012 000042C4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6013 000042C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6014 000042CA 50                      	push rax
  6015 000042CB 6A01                    	push 1
  6016 000042CD 488B4510                	mov rax, qword [rbp + 8 * 2]
  6017                                  
  6018 000042D1 488B00                                            	mov rax, qword[rax + 8 * 0]
  6019                                  
  6020 000042D4 488B00                                            	mov rax, qword[rax + 8 * 0]
  6021                                  	assert_closure(rax)
    42 000042D7 803805              <1>  cmp byte [%1], %2
    43 000042DA 0F85363C0000        <1>  jne L_error_incorrect_type
  6022 000042E0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6023 000042E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6024 000042E6 50                      	push rax
  6025 000042E7 6A01                    	push 1
  6026 000042E9 488B4510                	mov rax, qword [rbp + 8 * 2]
  6027                                  
  6028 000042ED 488B00                                            	mov rax, qword[rax + 8 * 0]
  6029                                  
  6030 000042F0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6031                                  	assert_closure(rax)
    42 000042F3 803805              <1>  cmp byte [%1], %2
    43 000042F6 0F851A3C0000        <1>  jne L_error_incorrect_type
  6032 000042FC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6033 000042FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6034 00004302 50                      	push rax
  6035 00004303 6A01                    	push 1
  6036 00004305 488B4510                	mov rax, qword [rbp + 8 * 2]
  6037                                  
  6038 00004309 488B00                                            	mov rax, qword[rax + 8 * 0]
  6039                                  
  6040 0000430C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6041 0000430F 50                      	push rax
  6042 00004310 6A01                    	push 1
  6043 00004312 488B4510                	mov rax, qword [rbp + 8 * 2]
  6044                                  
  6045 00004316 488B00                                            	mov rax, qword[rax + 8 * 0]
  6046                                  
  6047 00004319 488B00                                            	mov rax, qword[rax + 8 * 0]
  6048                                  	assert_closure(rax)
    42 0000431C 803805              <1>  cmp byte [%1], %2
    43 0000431F 0F85F13B0000        <1>  jne L_error_incorrect_type
  6049 00004325 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6050 00004328 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6051 0000432B 50                      	push rax
  6052 0000432C 6A01                    	push 1
  6053 0000432E 488B4510                	mov rax, qword [rbp + 8 * 2]
  6054                                  
  6055 00004332 488B00                                            	mov rax, qword[rax + 8 * 0]
  6056                                  
  6057 00004335 488B00                                            	mov rax, qword[rax + 8 * 0]
  6058                                  	assert_closure(rax)
    42 00004338 803805              <1>  cmp byte [%1], %2
    43 0000433B 0F85D53B0000        <1>  jne L_error_incorrect_type
  6059 00004341 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6060 00004344 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6061 00004347 50                      	push rax
  6062 00004348 6A01                    	push 1
  6063 0000434A 488B4510                	mov rax, qword [rbp + 8 * 2]
  6064                                  
  6065 0000434E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6066                                  
  6067 00004351 488B00                                            	mov rax, qword[rax + 8 * 0]
  6068                                  	assert_closure(rax)
    42 00004354 803805              <1>  cmp byte [%1], %2
    43 00004357 0F85B93B0000        <1>  jne L_error_incorrect_type
  6069 0000435D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6070 00004360 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6071                                  	assert_closure(rax)
    42 00004363 803805              <1>  cmp byte [%1], %2
    43 00004366 0F85AA3B0000        <1>  jne L_error_incorrect_type
  6072 0000436C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6073 0000436F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6074 00004372 50                      	push rax
  6075 00004373 6A01                    	push 1
  6076 00004375 488B4510                	mov rax, qword [rbp + 8 * 2]
  6077                                  
  6078 00004379 488B00                                            	mov rax, qword[rax + 8 * 0]
  6079                                  
  6080 0000437C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6081 0000437F 50                      	push rax
  6082 00004380 6A01                    	push 1
  6083 00004382 488B4510                	mov rax, qword [rbp + 8 * 2]
  6084                                  
  6085 00004386 488B00                                            	mov rax, qword[rax + 8 * 0]
  6086                                  
  6087 00004389 488B00                                            	mov rax, qword[rax + 8 * 0]
  6088                                  	assert_closure(rax)
    42 0000438C 803805              <1>  cmp byte [%1], %2
    43 0000438F 0F85813B0000        <1>  jne L_error_incorrect_type
  6089 00004395 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6090 00004398 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6091 0000439B 50                      	push rax
  6092 0000439C 6A01                    	push 1
  6093 0000439E 488B4510                	mov rax, qword [rbp + 8 * 2]
  6094                                  
  6095 000043A2 488B00                                            	mov rax, qword[rax + 8 * 0]
  6096                                  
  6097 000043A5 488B00                                            	mov rax, qword[rax + 8 * 0]
  6098                                  	assert_closure(rax)
    42 000043A8 803805              <1>  cmp byte [%1], %2
    43 000043AB 0F85653B0000        <1>  jne L_error_incorrect_type
  6099 000043B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6100 000043B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6101 000043B7 50                      	push rax
  6102 000043B8 6A01                    	push 1
  6103 000043BA 488B4510                	mov rax, qword [rbp + 8 * 2]
  6104                                  
  6105 000043BE 488B00                                            	mov rax, qword[rax + 8 * 0]
  6106                                  
  6107 000043C1 488B00                                            	mov rax, qword[rax + 8 * 0]
  6108                                  	assert_closure(rax)
    42 000043C4 803805              <1>  cmp byte [%1], %2
    43 000043C7 0F85493B0000        <1>  jne L_error_incorrect_type
  6109 000043CD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6110 000043D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6111 000043D3 50                      	push rax
  6112 000043D4 6A01                    	push 1
  6113 000043D6 488B4510                	mov rax, qword [rbp + 8 * 2]
  6114                                  
  6115 000043DA 488B00                                            	mov rax, qword[rax + 8 * 0]
  6116                                  
  6117 000043DD 488B00                                            	mov rax, qword[rax + 8 * 0]
  6118                                  	assert_closure(rax)
    42 000043E0 803805              <1>  cmp byte [%1], %2
    43 000043E3 0F852D3B0000        <1>  jne L_error_incorrect_type
  6119 000043E9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6120 000043EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6121                                  	assert_closure(rax)
    42 000043EF 803805              <1>  cmp byte [%1], %2
    43 000043F2 0F851E3B0000        <1>  jne L_error_incorrect_type
  6122 000043F8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6123 000043FB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6124                                  	assert_closure(rax)
    42 000043FE 803805              <1>  cmp byte [%1], %2
    43 00004401 0F850F3B0000        <1>  jne L_error_incorrect_type
  6125 00004407 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6126 0000440A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6127 0000440D 50                      	push rax
  6128 0000440E 6A01                    	push 1
  6129 00004410 488B4510                	mov rax, qword [rbp + 8 * 2]
  6130                                  
  6131 00004414 488B00                                            	mov rax, qword[rax + 8 * 0]
  6132                                  
  6133 00004417 488B00                                            	mov rax, qword[rax + 8 * 0]
  6134 0000441A 50                      	push rax
  6135 0000441B 6A01                    	push 1
  6136 0000441D 488B4510                	mov rax, qword [rbp + 8 * 2]
  6137                                  
  6138 00004421 488B00                                            	mov rax, qword[rax + 8 * 0]
  6139                                  
  6140 00004424 488B00                                            	mov rax, qword[rax + 8 * 0]
  6141                                  	assert_closure(rax)
    42 00004427 803805              <1>  cmp byte [%1], %2
    43 0000442A 0F85E63A0000        <1>  jne L_error_incorrect_type
  6142 00004430 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6143 00004433 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6144 00004436 50                      	push rax
  6145 00004437 6A01                    	push 1
  6146 00004439 488B4510                	mov rax, qword [rbp + 8 * 2]
  6147                                  
  6148 0000443D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6149                                  
  6150 00004440 488B00                                            	mov rax, qword[rax + 8 * 0]
  6151                                  	assert_closure(rax)
    42 00004443 803805              <1>  cmp byte [%1], %2
    43 00004446 0F85CA3A0000        <1>  jne L_error_incorrect_type
  6152 0000444C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6153 0000444F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6154 00004452 50                      	push rax
  6155 00004453 6A01                    	push 1
  6156 00004455 488B4510                	mov rax, qword [rbp + 8 * 2]
  6157                                  
  6158 00004459 488B00                                            	mov rax, qword[rax + 8 * 0]
  6159                                  
  6160 0000445C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6161                                  	assert_closure(rax)
    42 0000445F 803805              <1>  cmp byte [%1], %2
    43 00004462 0F85AE3A0000        <1>  jne L_error_incorrect_type
  6162 00004468 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6163 0000446B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6164 0000446E 50                      	push rax
  6165 0000446F 6A01                    	push 1
  6166 00004471 488B4510                	mov rax, qword [rbp + 8 * 2]
  6167                                  
  6168 00004475 488B00                                            	mov rax, qword[rax + 8 * 0]
  6169                                  
  6170 00004478 488B00                                            	mov rax, qword[rax + 8 * 0]
  6171                                  	assert_closure(rax)
    42 0000447B 803805              <1>  cmp byte [%1], %2
    43 0000447E 0F85923A0000        <1>  jne L_error_incorrect_type
  6172 00004484 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6173 00004487 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6174                                  	assert_closure(rax)
    42 0000448A 803805              <1>  cmp byte [%1], %2
    43 0000448D 0F85833A0000        <1>  jne L_error_incorrect_type
  6175 00004493 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6176 00004496 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6177 00004499 50                      	push rax
  6178 0000449A 6A01                    	push 1
  6179 0000449C 488B4510                	mov rax, qword [rbp + 8 * 2]
  6180                                  
  6181 000044A0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6182                                  
  6183 000044A3 488B00                                            	mov rax, qword[rax + 8 * 0]
  6184 000044A6 50                      	push rax
  6185 000044A7 6A01                    	push 1
  6186 000044A9 488B4510                	mov rax, qword [rbp + 8 * 2]
  6187                                  
  6188 000044AD 488B00                                            	mov rax, qword[rax + 8 * 0]
  6189                                  
  6190 000044B0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6191                                  	assert_closure(rax)
    42 000044B3 803805              <1>  cmp byte [%1], %2
    43 000044B6 0F855A3A0000        <1>  jne L_error_incorrect_type
  6192 000044BC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6193 000044BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  6194 000044C2 50                      	push rax
  6195 000044C3 6A01                    	push 1
  6196 000044C5 488B4510                	mov rax, qword [rbp + 8 * 2]
  6197                                  
  6198 000044C9 488B00                                            	mov rax, qword[rax + 8 * 0]
  6199                                  
  6200 000044CC 488B00                                            	mov rax, qword[rax + 8 * 0]
  6201                                  	assert_closure(rax)
    42 000044CF 803805              <1>  cmp byte [%1], %2
    43 000044D2 0F853E3A0000        <1>  jne L_error_incorrect_type
  6202 000044D8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6203 000044DB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6204 000044DE 50                      	push rax
  6205 000044DF 6A01                    	push 1
  6206 000044E1 488B4510                	mov rax, qword [rbp + 8 * 2]
  6207                                  
  6208 000044E5 488B00                                            	mov rax, qword[rax + 8 * 0]
  6209                                  
  6210 000044E8 488B00                                            	mov rax, qword[rax + 8 * 0]
  6211                                  	assert_closure(rax)
    42 000044EB 803805              <1>  cmp byte [%1], %2
    43 000044EE 0F85223A0000        <1>  jne L_error_incorrect_type
  6212 000044F4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6213 000044F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6214 000044FA 50                      	push rax
  6215 000044FB 6A01                    	push 1
  6216 000044FD 488B4510                	mov rax, qword [rbp + 8 * 2]
  6217                                  
  6218 00004501 488B00                                            	mov rax, qword[rax + 8 * 0]
  6219                                  
  6220 00004504 488B00                                            	mov rax, qword[rax + 8 * 0]
  6221 00004507 50                      	push rax
  6222 00004508 6A01                    	push 1
  6223 0000450A 488B4510                	mov rax, qword [rbp + 8 * 2]
  6224                                  
  6225 0000450E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6226                                  
  6227 00004511 488B00                                            	mov rax, qword[rax + 8 * 0]
  6228                                  	assert_closure(rax)
    42 00004514 803805              <1>  cmp byte [%1], %2
    43 00004517 0F85F9390000        <1>  jne L_error_incorrect_type
  6229 0000451D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6230 00004520 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6231 00004523 50                      	push rax
  6232 00004524 6A01                    	push 1
  6233 00004526 488B4510                	mov rax, qword [rbp + 8 * 2]
  6234                                  
  6235 0000452A 488B00                                            	mov rax, qword[rax + 8 * 0]
  6236                                  
  6237 0000452D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6238                                  	assert_closure(rax)
    42 00004530 803805              <1>  cmp byte [%1], %2
    43 00004533 0F85DD390000        <1>  jne L_error_incorrect_type
  6239 00004539 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6240 0000453C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6241 0000453F 50                      	push rax
  6242 00004540 6A01                    	push 1
  6243 00004542 488B4510                	mov rax, qword [rbp + 8 * 2]
  6244                                  
  6245 00004546 488B00                                            	mov rax, qword[rax + 8 * 0]
  6246                                  
  6247 00004549 488B00                                            	mov rax, qword[rax + 8 * 0]
  6248                                  	assert_closure(rax)
    42 0000454C 803805              <1>  cmp byte [%1], %2
    43 0000454F 0F85C1390000        <1>  jne L_error_incorrect_type
  6249 00004555 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6250 00004558 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6251 0000455B 50                      	push rax
  6252 0000455C 6A01                    	push 1
  6253 0000455E 488B4510                	mov rax, qword [rbp + 8 * 2]
  6254                                  
  6255 00004562 488B00                                            	mov rax, qword[rax + 8 * 0]
  6256                                  
  6257 00004565 488B00                                            	mov rax, qword[rax + 8 * 0]
  6258                                  	assert_closure(rax)
    42 00004568 803805              <1>  cmp byte [%1], %2
    43 0000456B 0F85A5390000        <1>  jne L_error_incorrect_type
  6259 00004571 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6260 00004574 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6261 00004577 50                      	push rax
  6262 00004578 6A01                    	push 1
  6263 0000457A 488B4510                	mov rax, qword [rbp + 8 * 2]
  6264                                  
  6265 0000457E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6266                                  
  6267 00004581 488B00                                            	mov rax, qword[rax + 8 * 0]
  6268 00004584 50                      	push rax
  6269 00004585 6A01                    	push 1
  6270 00004587 488B4510                	mov rax, qword [rbp + 8 * 2]
  6271                                  
  6272 0000458B 488B00                                            	mov rax, qword[rax + 8 * 0]
  6273                                  
  6274 0000458E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6275                                  	assert_closure(rax)
    42 00004591 803805              <1>  cmp byte [%1], %2
    43 00004594 0F857C390000        <1>  jne L_error_incorrect_type
  6276 0000459A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6277 0000459D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6278 000045A0 50                      	push rax
  6279 000045A1 6A01                    	push 1
  6280 000045A3 488B4510                	mov rax, qword [rbp + 8 * 2]
  6281                                  
  6282 000045A7 488B00                                            	mov rax, qword[rax + 8 * 0]
  6283                                  
  6284 000045AA 488B00                                            	mov rax, qword[rax + 8 * 0]
  6285                                  	assert_closure(rax)
    42 000045AD 803805              <1>  cmp byte [%1], %2
    43 000045B0 0F8560390000        <1>  jne L_error_incorrect_type
  6286 000045B6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6287 000045B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6288 000045BC 50                      	push rax
  6289 000045BD 6A01                    	push 1
  6290 000045BF 488B4510                	mov rax, qword [rbp + 8 * 2]
  6291                                  
  6292 000045C3 488B00                                            	mov rax, qword[rax + 8 * 0]
  6293                                  
  6294 000045C6 488B00                                            	mov rax, qword[rax + 8 * 0]
  6295                                  	assert_closure(rax)
    42 000045C9 803805              <1>  cmp byte [%1], %2
    43 000045CC 0F8544390000        <1>  jne L_error_incorrect_type
  6296 000045D2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6297 000045D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6298                                  	assert_closure(rax)
    42 000045D8 803805              <1>  cmp byte [%1], %2
    43 000045DB 0F8535390000        <1>  jne L_error_incorrect_type
  6299 000045E1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6300 000045E4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6301 000045E7 50                      	push rax
  6302 000045E8 6A01                    	push 1
  6303 000045EA 488B4510                	mov rax, qword [rbp + 8 * 2]
  6304                                  
  6305 000045EE 488B00                                            	mov rax, qword[rax + 8 * 0]
  6306                                  
  6307 000045F1 488B00                                            	mov rax, qword[rax + 8 * 0]
  6308 000045F4 50                      	push rax
  6309 000045F5 6A01                    	push 1
  6310 000045F7 488B4510                	mov rax, qword [rbp + 8 * 2]
  6311                                  
  6312 000045FB 488B00                                            	mov rax, qword[rax + 8 * 0]
  6313                                  
  6314 000045FE 488B00                                            	mov rax, qword[rax + 8 * 0]
  6315                                  	assert_closure(rax)
    42 00004601 803805              <1>  cmp byte [%1], %2
    43 00004604 0F850C390000        <1>  jne L_error_incorrect_type
  6316 0000460A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6317 0000460D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6318 00004610 50                      	push rax
  6319 00004611 6A01                    	push 1
  6320 00004613 488B4510                	mov rax, qword [rbp + 8 * 2]
  6321                                  
  6322 00004617 488B00                                            	mov rax, qword[rax + 8 * 0]
  6323                                  
  6324 0000461A 488B00                                            	mov rax, qword[rax + 8 * 0]
  6325                                  	assert_closure(rax)
    42 0000461D 803805              <1>  cmp byte [%1], %2
    43 00004620 0F85F0380000        <1>  jne L_error_incorrect_type
  6326 00004626 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6327 00004629 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6328 0000462C 50                      	push rax
  6329 0000462D 6A01                    	push 1
  6330 0000462F 488B4510                	mov rax, qword [rbp + 8 * 2]
  6331                                  
  6332 00004633 488B00                                            	mov rax, qword[rax + 8 * 0]
  6333                                  
  6334 00004636 488B00                                            	mov rax, qword[rax + 8 * 0]
  6335                                  	assert_closure(rax)
    42 00004639 803805              <1>  cmp byte [%1], %2
    43 0000463C 0F85D4380000        <1>  jne L_error_incorrect_type
  6336 00004642 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6337 00004645 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6338 00004648 50                      	push rax
  6339 00004649 6A01                    	push 1
  6340 0000464B 488B4510                	mov rax, qword [rbp + 8 * 2]
  6341                                  
  6342 0000464F 488B00                                            	mov rax, qword[rax + 8 * 0]
  6343                                  
  6344 00004652 488B00                                            	mov rax, qword[rax + 8 * 0]
  6345                                  	assert_closure(rax)
    42 00004655 803805              <1>  cmp byte [%1], %2
    43 00004658 0F85B8380000        <1>  jne L_error_incorrect_type
  6346 0000465E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6347 00004661 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6348                                  	assert_closure(rax)
    42 00004664 803805              <1>  cmp byte [%1], %2
    43 00004667 0F85A9380000        <1>  jne L_error_incorrect_type
  6349 0000466D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6350 00004670 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6351                                  	assert_closure(rax)
    42 00004673 803805              <1>  cmp byte [%1], %2
    43 00004676 0F859A380000        <1>  jne L_error_incorrect_type
  6352 0000467C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6353 0000467F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6354                                  	assert_closure(rax)
    42 00004682 803805              <1>  cmp byte [%1], %2
    43 00004685 0F858B380000        <1>  jne L_error_incorrect_type
  6355 0000468B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6356 0000468E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6357                                  	assert_closure(rax)
    42 00004691 803805              <1>  cmp byte [%1], %2
    43 00004694 0F857C380000        <1>  jne L_error_incorrect_type
  6358 0000469A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6359 0000469D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6360 000046A0 50                      	push rax
  6361 000046A1 6A01                    	push 1
  6362 000046A3 488B4510                	mov rax, qword [rbp + 8 * 2]
  6363                                  
  6364 000046A7 488B00                                            	mov rax, qword[rax + 8 * 0]
  6365                                  
  6366 000046AA 488B00                                            	mov rax, qword[rax + 8 * 0]
  6367 000046AD 50                      	push rax
  6368 000046AE 6A01                    	push 1
  6369 000046B0 488B4510                	mov rax, qword [rbp + 8 * 2]
  6370                                  
  6371 000046B4 488B00                                            	mov rax, qword[rax + 8 * 0]
  6372                                  
  6373 000046B7 488B00                                            	mov rax, qword[rax + 8 * 0]
  6374                                  	assert_closure(rax)
    42 000046BA 803805              <1>  cmp byte [%1], %2
    43 000046BD 0F8553380000        <1>  jne L_error_incorrect_type
  6375 000046C3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6376 000046C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6377 000046C9 50                      	push rax
  6378 000046CA 6A01                    	push 1
  6379 000046CC 488B4510                	mov rax, qword [rbp + 8 * 2]
  6380                                  
  6381 000046D0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6382                                  
  6383 000046D3 488B00                                            	mov rax, qword[rax + 8 * 0]
  6384                                  	assert_closure(rax)
    42 000046D6 803805              <1>  cmp byte [%1], %2
    43 000046D9 0F8537380000        <1>  jne L_error_incorrect_type
  6385 000046DF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6386 000046E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6387 000046E5 50                      	push rax
  6388 000046E6 6A01                    	push 1
  6389 000046E8 488B4510                	mov rax, qword [rbp + 8 * 2]
  6390                                  
  6391 000046EC 488B00                                            	mov rax, qword[rax + 8 * 0]
  6392                                  
  6393 000046EF 488B00                                            	mov rax, qword[rax + 8 * 0]
  6394                                  	assert_closure(rax)
    42 000046F2 803805              <1>  cmp byte [%1], %2
    43 000046F5 0F851B380000        <1>  jne L_error_incorrect_type
  6395 000046FB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6396 000046FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6397 00004701 50                      	push rax
  6398 00004702 6A01                    	push 1
  6399 00004704 488B4510                	mov rax, qword [rbp + 8 * 2]
  6400                                  
  6401 00004708 488B00                                            	mov rax, qword[rax + 8 * 0]
  6402                                  
  6403 0000470B 488B00                                            	mov rax, qword[rax + 8 * 0]
  6404 0000470E 50                      	push rax
  6405 0000470F 6A01                    	push 1
  6406 00004711 488B4510                	mov rax, qword [rbp + 8 * 2]
  6407                                  
  6408 00004715 488B00                                            	mov rax, qword[rax + 8 * 0]
  6409                                  
  6410 00004718 488B00                                            	mov rax, qword[rax + 8 * 0]
  6411                                  	assert_closure(rax)
    42 0000471B 803805              <1>  cmp byte [%1], %2
    43 0000471E 0F85F2370000        <1>  jne L_error_incorrect_type
  6412 00004724 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6413 00004727 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6414 0000472A 50                      	push rax
  6415 0000472B 6A01                    	push 1
  6416 0000472D 488B4510                	mov rax, qword [rbp + 8 * 2]
  6417                                  
  6418 00004731 488B00                                            	mov rax, qword[rax + 8 * 0]
  6419                                  
  6420 00004734 488B00                                            	mov rax, qword[rax + 8 * 0]
  6421                                  	assert_closure(rax)
    42 00004737 803805              <1>  cmp byte [%1], %2
    43 0000473A 0F85D6370000        <1>  jne L_error_incorrect_type
  6422 00004740 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6423 00004743 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6424 00004746 50                      	push rax
  6425 00004747 6A01                    	push 1
  6426 00004749 488B4510                	mov rax, qword [rbp + 8 * 2]
  6427                                  
  6428 0000474D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6429                                  
  6430 00004750 488B00                                            	mov rax, qword[rax + 8 * 0]
  6431                                  	assert_closure(rax)
    42 00004753 803805              <1>  cmp byte [%1], %2
    43 00004756 0F85BA370000        <1>  jne L_error_incorrect_type
  6432 0000475C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6433 0000475F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6434 00004762 50                      	push rax
  6435 00004763 6A01                    	push 1
  6436 00004765 488B4510                	mov rax, qword [rbp + 8 * 2]
  6437                                  
  6438 00004769 488B00                                            	mov rax, qword[rax + 8 * 0]
  6439                                  
  6440 0000476C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6441 0000476F 50                      	push rax
  6442 00004770 6A01                    	push 1
  6443 00004772 488B4510                	mov rax, qword [rbp + 8 * 2]
  6444                                  
  6445 00004776 488B00                                            	mov rax, qword[rax + 8 * 0]
  6446                                  
  6447 00004779 488B00                                            	mov rax, qword[rax + 8 * 0]
  6448                                  	assert_closure(rax)
    42 0000477C 803805              <1>  cmp byte [%1], %2
    43 0000477F 0F8591370000        <1>  jne L_error_incorrect_type
  6449 00004785 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6450 00004788 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6451 0000478B 50                      	push rax
  6452 0000478C 6A01                    	push 1
  6453 0000478E 488B4510                	mov rax, qword [rbp + 8 * 2]
  6454                                  
  6455 00004792 488B00                                            	mov rax, qword[rax + 8 * 0]
  6456                                  
  6457 00004795 488B00                                            	mov rax, qword[rax + 8 * 0]
  6458                                  	assert_closure(rax)
    42 00004798 803805              <1>  cmp byte [%1], %2
    43 0000479B 0F8575370000        <1>  jne L_error_incorrect_type
  6459 000047A1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6460 000047A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6461 000047A7 50                      	push rax
  6462 000047A8 6A01                    	push 1
  6463 000047AA 488B4510                	mov rax, qword [rbp + 8 * 2]
  6464                                  
  6465 000047AE 488B00                                            	mov rax, qword[rax + 8 * 0]
  6466                                  
  6467 000047B1 488B00                                            	mov rax, qword[rax + 8 * 0]
  6468                                  	assert_closure(rax)
    42 000047B4 803805              <1>  cmp byte [%1], %2
    43 000047B7 0F8559370000        <1>  jne L_error_incorrect_type
  6469 000047BD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6470 000047C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6471 000047C3 50                      	push rax
  6472 000047C4 6A01                    	push 1
  6473 000047C6 488B4510                	mov rax, qword [rbp + 8 * 2]
  6474                                  
  6475 000047CA 488B00                                            	mov rax, qword[rax + 8 * 0]
  6476                                  
  6477 000047CD 488B00                                            	mov rax, qword[rax + 8 * 0]
  6478                                  	assert_closure(rax)
    42 000047D0 803805              <1>  cmp byte [%1], %2
    43 000047D3 0F853D370000        <1>  jne L_error_incorrect_type
  6479 000047D9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6480 000047DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6481                                  	assert_closure(rax)
    42 000047DF 803805              <1>  cmp byte [%1], %2
    43 000047E2 0F852E370000        <1>  jne L_error_incorrect_type
  6482 000047E8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6483 000047EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6484                                  	assert_closure(rax)
    42 000047EE 803805              <1>  cmp byte [%1], %2
    43 000047F1 0F851F370000        <1>  jne L_error_incorrect_type
  6485 000047F7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6486 000047FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  6487 000047FD 50                      	push rax
  6488 000047FE 6A01                    	push 1
  6489 00004800 488B4510                	mov rax, qword [rbp + 8 * 2]
  6490                                  
  6491 00004804 488B00                                            	mov rax, qword[rax + 8 * 0]
  6492                                  
  6493 00004807 488B00                                            	mov rax, qword[rax + 8 * 0]
  6494 0000480A 50                      	push rax
  6495 0000480B 6A01                    	push 1
  6496 0000480D 488B4510                	mov rax, qword [rbp + 8 * 2]
  6497                                  
  6498 00004811 488B00                                            	mov rax, qword[rax + 8 * 0]
  6499                                  
  6500 00004814 488B00                                            	mov rax, qword[rax + 8 * 0]
  6501                                  	assert_closure(rax)
    42 00004817 803805              <1>  cmp byte [%1], %2
    43 0000481A 0F85F6360000        <1>  jne L_error_incorrect_type
  6502 00004820 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6503 00004823 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6504 00004826 50                      	push rax
  6505 00004827 6A01                    	push 1
  6506 00004829 488B4510                	mov rax, qword [rbp + 8 * 2]
  6507                                  
  6508 0000482D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6509                                  
  6510 00004830 488B00                                            	mov rax, qword[rax + 8 * 0]
  6511                                  	assert_closure(rax)
    42 00004833 803805              <1>  cmp byte [%1], %2
    43 00004836 0F85DA360000        <1>  jne L_error_incorrect_type
  6512 0000483C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6513 0000483F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6514 00004842 50                      	push rax
  6515 00004843 6A01                    	push 1
  6516 00004845 488B4510                	mov rax, qword [rbp + 8 * 2]
  6517                                  
  6518 00004849 488B00                                            	mov rax, qword[rax + 8 * 0]
  6519                                  
  6520 0000484C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6521                                  	assert_closure(rax)
    42 0000484F 803805              <1>  cmp byte [%1], %2
    43 00004852 0F85BE360000        <1>  jne L_error_incorrect_type
  6522 00004858 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6523 0000485B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6524 0000485E 50                      	push rax
  6525 0000485F 6A01                    	push 1
  6526 00004861 488B4510                	mov rax, qword [rbp + 8 * 2]
  6527                                  
  6528 00004865 488B00                                            	mov rax, qword[rax + 8 * 0]
  6529                                  
  6530 00004868 488B00                                            	mov rax, qword[rax + 8 * 0]
  6531 0000486B 50                      	push rax
  6532 0000486C 6A01                    	push 1
  6533 0000486E 488B4510                	mov rax, qword [rbp + 8 * 2]
  6534                                  
  6535 00004872 488B00                                            	mov rax, qword[rax + 8 * 0]
  6536                                  
  6537 00004875 488B00                                            	mov rax, qword[rax + 8 * 0]
  6538                                  	assert_closure(rax)
    42 00004878 803805              <1>  cmp byte [%1], %2
    43 0000487B 0F8595360000        <1>  jne L_error_incorrect_type
  6539 00004881 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6540 00004884 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6541 00004887 50                      	push rax
  6542 00004888 6A01                    	push 1
  6543 0000488A 488B4510                	mov rax, qword [rbp + 8 * 2]
  6544                                  
  6545 0000488E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6546                                  
  6547 00004891 488B00                                            	mov rax, qword[rax + 8 * 0]
  6548                                  	assert_closure(rax)
    42 00004894 803805              <1>  cmp byte [%1], %2
    43 00004897 0F8579360000        <1>  jne L_error_incorrect_type
  6549 0000489D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6550 000048A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6551 000048A3 50                      	push rax
  6552 000048A4 6A01                    	push 1
  6553 000048A6 488B4510                	mov rax, qword [rbp + 8 * 2]
  6554                                  
  6555 000048AA 488B00                                            	mov rax, qword[rax + 8 * 0]
  6556                                  
  6557 000048AD 488B00                                            	mov rax, qword[rax + 8 * 0]
  6558                                  	assert_closure(rax)
    42 000048B0 803805              <1>  cmp byte [%1], %2
    43 000048B3 0F855D360000        <1>  jne L_error_incorrect_type
  6559 000048B9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6560 000048BC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6561                                  	assert_closure(rax)
    42 000048BF 803805              <1>  cmp byte [%1], %2
    43 000048C2 0F854E360000        <1>  jne L_error_incorrect_type
  6562 000048C8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6563 000048CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6564 000048CE 50                      	push rax
  6565 000048CF 6A01                    	push 1
  6566 000048D1 488B4510                	mov rax, qword [rbp + 8 * 2]
  6567                                  
  6568 000048D5 488B00                                            	mov rax, qword[rax + 8 * 0]
  6569                                  
  6570 000048D8 488B00                                            	mov rax, qword[rax + 8 * 0]
  6571 000048DB 50                      	push rax
  6572 000048DC 6A01                    	push 1
  6573 000048DE 488B4510                	mov rax, qword [rbp + 8 * 2]
  6574                                  
  6575 000048E2 488B00                                            	mov rax, qword[rax + 8 * 0]
  6576                                  
  6577 000048E5 488B00                                            	mov rax, qword[rax + 8 * 0]
  6578                                  	assert_closure(rax)
    42 000048E8 803805              <1>  cmp byte [%1], %2
    43 000048EB 0F8525360000        <1>  jne L_error_incorrect_type
  6579 000048F1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6580 000048F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6581 000048F7 50                      	push rax
  6582 000048F8 6A01                    	push 1
  6583 000048FA 488B4510                	mov rax, qword [rbp + 8 * 2]
  6584                                  
  6585 000048FE 488B00                                            	mov rax, qword[rax + 8 * 0]
  6586                                  
  6587 00004901 488B00                                            	mov rax, qword[rax + 8 * 0]
  6588                                  	assert_closure(rax)
    42 00004904 803805              <1>  cmp byte [%1], %2
    43 00004907 0F8509360000        <1>  jne L_error_incorrect_type
  6589 0000490D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6590 00004910 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6591 00004913 50                      	push rax
  6592 00004914 6A01                    	push 1
  6593 00004916 488B4510                	mov rax, qword [rbp + 8 * 2]
  6594                                  
  6595 0000491A 488B00                                            	mov rax, qword[rax + 8 * 0]
  6596                                  
  6597 0000491D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6598                                  	assert_closure(rax)
    42 00004920 803805              <1>  cmp byte [%1], %2
    43 00004923 0F85ED350000        <1>  jne L_error_incorrect_type
  6599 00004929 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6600 0000492C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6601 0000492F 50                      	push rax
  6602 00004930 6A01                    	push 1
  6603 00004932 488B4510                	mov rax, qword [rbp + 8 * 2]
  6604                                  
  6605 00004936 488B00                                            	mov rax, qword[rax + 8 * 0]
  6606                                  
  6607 00004939 488B00                                            	mov rax, qword[rax + 8 * 0]
  6608                                  	assert_closure(rax)
    42 0000493C 803805              <1>  cmp byte [%1], %2
    43 0000493F 0F85D1350000        <1>  jne L_error_incorrect_type
  6609 00004945 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6610 00004948 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6611 0000494B 50                      	push rax
  6612 0000494C 6A01                    	push 1
  6613 0000494E 488B4510                	mov rax, qword [rbp + 8 * 2]
  6614                                  
  6615 00004952 488B00                                            	mov rax, qword[rax + 8 * 0]
  6616                                  
  6617 00004955 488B00                                            	mov rax, qword[rax + 8 * 0]
  6618 00004958 50                      	push rax
  6619 00004959 6A01                    	push 1
  6620 0000495B 488B4510                	mov rax, qword [rbp + 8 * 2]
  6621                                  
  6622 0000495F 488B00                                            	mov rax, qword[rax + 8 * 0]
  6623                                  
  6624 00004962 488B00                                            	mov rax, qword[rax + 8 * 0]
  6625                                  	assert_closure(rax)
    42 00004965 803805              <1>  cmp byte [%1], %2
    43 00004968 0F85A8350000        <1>  jne L_error_incorrect_type
  6626 0000496E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6627 00004971 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6628 00004974 50                      	push rax
  6629 00004975 6A01                    	push 1
  6630 00004977 488B4510                	mov rax, qword [rbp + 8 * 2]
  6631                                  
  6632 0000497B 488B00                                            	mov rax, qword[rax + 8 * 0]
  6633                                  
  6634 0000497E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6635                                  	assert_closure(rax)
    42 00004981 803805              <1>  cmp byte [%1], %2
    43 00004984 0F858C350000        <1>  jne L_error_incorrect_type
  6636 0000498A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6637 0000498D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6638 00004990 50                      	push rax
  6639 00004991 6A01                    	push 1
  6640 00004993 488B4510                	mov rax, qword [rbp + 8 * 2]
  6641                                  
  6642 00004997 488B00                                            	mov rax, qword[rax + 8 * 0]
  6643                                  
  6644 0000499A 488B00                                            	mov rax, qword[rax + 8 * 0]
  6645                                  	assert_closure(rax)
    42 0000499D 803805              <1>  cmp byte [%1], %2
    43 000049A0 0F8570350000        <1>  jne L_error_incorrect_type
  6646 000049A6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6647 000049A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6648 000049AC 50                      	push rax
  6649 000049AD 6A01                    	push 1
  6650 000049AF 488B4510                	mov rax, qword [rbp + 8 * 2]
  6651                                  
  6652 000049B3 488B00                                            	mov rax, qword[rax + 8 * 0]
  6653                                  
  6654 000049B6 488B00                                            	mov rax, qword[rax + 8 * 0]
  6655 000049B9 50                      	push rax
  6656 000049BA 6A01                    	push 1
  6657 000049BC 488B4510                	mov rax, qword [rbp + 8 * 2]
  6658                                  
  6659 000049C0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6660                                  
  6661 000049C3 488B00                                            	mov rax, qword[rax + 8 * 0]
  6662                                  	assert_closure(rax)
    42 000049C6 803805              <1>  cmp byte [%1], %2
    43 000049C9 0F8547350000        <1>  jne L_error_incorrect_type
  6663 000049CF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6664 000049D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6665 000049D5 50                      	push rax
  6666 000049D6 6A01                    	push 1
  6667 000049D8 488B4510                	mov rax, qword [rbp + 8 * 2]
  6668                                  
  6669 000049DC 488B00                                            	mov rax, qword[rax + 8 * 0]
  6670                                  
  6671 000049DF 488B00                                            	mov rax, qword[rax + 8 * 0]
  6672                                  	assert_closure(rax)
    42 000049E2 803805              <1>  cmp byte [%1], %2
    43 000049E5 0F852B350000        <1>  jne L_error_incorrect_type
  6673 000049EB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6674 000049EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6675 000049F1 50                      	push rax
  6676 000049F2 6A01                    	push 1
  6677 000049F4 488B4510                	mov rax, qword [rbp + 8 * 2]
  6678                                  
  6679 000049F8 488B00                                            	mov rax, qword[rax + 8 * 0]
  6680                                  
  6681 000049FB 488B00                                            	mov rax, qword[rax + 8 * 0]
  6682                                  	assert_closure(rax)
    42 000049FE 803805              <1>  cmp byte [%1], %2
    43 00004A01 0F850F350000        <1>  jne L_error_incorrect_type
  6683 00004A07 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6684 00004A0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6685                                  	assert_closure(rax)
    42 00004A0D 803805              <1>  cmp byte [%1], %2
    43 00004A10 0F8500350000        <1>  jne L_error_incorrect_type
  6686 00004A16 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6687 00004A19 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6688 00004A1C 50                      	push rax
  6689 00004A1D 6A01                    	push 1
  6690 00004A1F 488B4510                	mov rax, qword [rbp + 8 * 2]
  6691                                  
  6692 00004A23 488B00                                            	mov rax, qword[rax + 8 * 0]
  6693                                  
  6694 00004A26 488B00                                            	mov rax, qword[rax + 8 * 0]
  6695 00004A29 50                      	push rax
  6696 00004A2A 6A01                    	push 1
  6697 00004A2C 488B4510                	mov rax, qword [rbp + 8 * 2]
  6698                                  
  6699 00004A30 488B00                                            	mov rax, qword[rax + 8 * 0]
  6700                                  
  6701 00004A33 488B00                                            	mov rax, qword[rax + 8 * 0]
  6702                                  	assert_closure(rax)
    42 00004A36 803805              <1>  cmp byte [%1], %2
    43 00004A39 0F85D7340000        <1>  jne L_error_incorrect_type
  6703 00004A3F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6704 00004A42 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6705 00004A45 50                      	push rax
  6706 00004A46 6A01                    	push 1
  6707 00004A48 488B4510                	mov rax, qword [rbp + 8 * 2]
  6708                                  
  6709 00004A4C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6710                                  
  6711 00004A4F 488B00                                            	mov rax, qword[rax + 8 * 0]
  6712                                  	assert_closure(rax)
    42 00004A52 803805              <1>  cmp byte [%1], %2
    43 00004A55 0F85BB340000        <1>  jne L_error_incorrect_type
  6713 00004A5B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6714 00004A5E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6715 00004A61 50                      	push rax
  6716 00004A62 6A01                    	push 1
  6717 00004A64 488B4510                	mov rax, qword [rbp + 8 * 2]
  6718                                  
  6719 00004A68 488B00                                            	mov rax, qword[rax + 8 * 0]
  6720                                  
  6721 00004A6B 488B00                                            	mov rax, qword[rax + 8 * 0]
  6722                                  	assert_closure(rax)
    42 00004A6E 803805              <1>  cmp byte [%1], %2
    43 00004A71 0F859F340000        <1>  jne L_error_incorrect_type
  6723 00004A77 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6724 00004A7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6725 00004A7D 50                      	push rax
  6726 00004A7E 6A01                    	push 1
  6727 00004A80 488B4510                	mov rax, qword [rbp + 8 * 2]
  6728                                  
  6729 00004A84 488B00                                            	mov rax, qword[rax + 8 * 0]
  6730                                  
  6731 00004A87 488B00                                            	mov rax, qword[rax + 8 * 0]
  6732                                  	assert_closure(rax)
    42 00004A8A 803805              <1>  cmp byte [%1], %2
    43 00004A8D 0F8583340000        <1>  jne L_error_incorrect_type
  6733 00004A93 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6734 00004A96 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6735                                  	assert_closure(rax)
    42 00004A99 803805              <1>  cmp byte [%1], %2
    43 00004A9C 0F8574340000        <1>  jne L_error_incorrect_type
  6736 00004AA2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6737 00004AA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6738                                  	assert_closure(rax)
    42 00004AA8 803805              <1>  cmp byte [%1], %2
    43 00004AAB 0F8565340000        <1>  jne L_error_incorrect_type
  6739 00004AB1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6740 00004AB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6741 00004AB7 50                      	push rax
  6742 00004AB8 6A01                    	push 1
  6743 00004ABA 488B4510                	mov rax, qword [rbp + 8 * 2]
  6744                                  
  6745 00004ABE 488B00                                            	mov rax, qword[rax + 8 * 0]
  6746                                  
  6747 00004AC1 488B00                                            	mov rax, qword[rax + 8 * 0]
  6748 00004AC4 50                      	push rax
  6749 00004AC5 6A01                    	push 1
  6750 00004AC7 488B4510                	mov rax, qword [rbp + 8 * 2]
  6751                                  
  6752 00004ACB 488B00                                            	mov rax, qword[rax + 8 * 0]
  6753                                  
  6754 00004ACE 488B00                                            	mov rax, qword[rax + 8 * 0]
  6755                                  	assert_closure(rax)
    42 00004AD1 803805              <1>  cmp byte [%1], %2
    43 00004AD4 0F853C340000        <1>  jne L_error_incorrect_type
  6756 00004ADA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6757 00004ADD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6758 00004AE0 50                      	push rax
  6759 00004AE1 6A01                    	push 1
  6760 00004AE3 488B4510                	mov rax, qword [rbp + 8 * 2]
  6761                                  
  6762 00004AE7 488B00                                            	mov rax, qword[rax + 8 * 0]
  6763                                  
  6764 00004AEA 488B00                                            	mov rax, qword[rax + 8 * 0]
  6765                                  	assert_closure(rax)
    42 00004AED 803805              <1>  cmp byte [%1], %2
    43 00004AF0 0F8520340000        <1>  jne L_error_incorrect_type
  6766 00004AF6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6767 00004AF9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6768 00004AFC 50                      	push rax
  6769 00004AFD 6A01                    	push 1
  6770 00004AFF 488B4510                	mov rax, qword [rbp + 8 * 2]
  6771                                  
  6772 00004B03 488B00                                            	mov rax, qword[rax + 8 * 0]
  6773                                  
  6774 00004B06 488B00                                            	mov rax, qword[rax + 8 * 0]
  6775                                  	assert_closure(rax)
    42 00004B09 803805              <1>  cmp byte [%1], %2
    43 00004B0C 0F8504340000        <1>  jne L_error_incorrect_type
  6776 00004B12 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6777 00004B15 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6778 00004B18 50                      	push rax
  6779 00004B19 6A01                    	push 1
  6780 00004B1B 488B4510                	mov rax, qword [rbp + 8 * 2]
  6781                                  
  6782 00004B1F 488B00                                            	mov rax, qword[rax + 8 * 0]
  6783                                  
  6784 00004B22 488B00                                            	mov rax, qword[rax + 8 * 0]
  6785                                  	assert_closure(rax)
    42 00004B25 803805              <1>  cmp byte [%1], %2
    43 00004B28 0F85E8330000        <1>  jne L_error_incorrect_type
  6786 00004B2E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6787 00004B31 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6788 00004B34 50                      	push rax
  6789 00004B35 6A01                    	push 1
  6790 00004B37 488B4510                	mov rax, qword [rbp + 8 * 2]
  6791                                  
  6792 00004B3B 488B00                                            	mov rax, qword[rax + 8 * 0]
  6793                                  
  6794 00004B3E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6795 00004B41 50                      	push rax
  6796 00004B42 6A01                    	push 1
  6797 00004B44 488B4510                	mov rax, qword [rbp + 8 * 2]
  6798                                  
  6799 00004B48 488B00                                            	mov rax, qword[rax + 8 * 0]
  6800                                  
  6801 00004B4B 488B00                                            	mov rax, qword[rax + 8 * 0]
  6802                                  	assert_closure(rax)
    42 00004B4E 803805              <1>  cmp byte [%1], %2
    43 00004B51 0F85BF330000        <1>  jne L_error_incorrect_type
  6803 00004B57 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6804 00004B5A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6805 00004B5D 50                      	push rax
  6806 00004B5E 6A01                    	push 1
  6807 00004B60 488B4510                	mov rax, qword [rbp + 8 * 2]
  6808                                  
  6809 00004B64 488B00                                            	mov rax, qword[rax + 8 * 0]
  6810                                  
  6811 00004B67 488B00                                            	mov rax, qword[rax + 8 * 0]
  6812                                  	assert_closure(rax)
    42 00004B6A 803805              <1>  cmp byte [%1], %2
    43 00004B6D 0F85A3330000        <1>  jne L_error_incorrect_type
  6813 00004B73 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6814 00004B76 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6815 00004B79 50                      	push rax
  6816 00004B7A 6A01                    	push 1
  6817 00004B7C 488B4510                	mov rax, qword [rbp + 8 * 2]
  6818                                  
  6819 00004B80 488B00                                            	mov rax, qword[rax + 8 * 0]
  6820                                  
  6821 00004B83 488B00                                            	mov rax, qword[rax + 8 * 0]
  6822                                  	assert_closure(rax)
    42 00004B86 803805              <1>  cmp byte [%1], %2
    43 00004B89 0F8587330000        <1>  jne L_error_incorrect_type
  6823 00004B8F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6824 00004B92 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6825                                  	assert_closure(rax)
    42 00004B95 803805              <1>  cmp byte [%1], %2
    43 00004B98 0F8578330000        <1>  jne L_error_incorrect_type
  6826 00004B9E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6827 00004BA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6828 00004BA4 50                      	push rax
  6829 00004BA5 6A01                    	push 1
  6830 00004BA7 488B4510                	mov rax, qword [rbp + 8 * 2]
  6831                                  
  6832 00004BAB 488B00                                            	mov rax, qword[rax + 8 * 0]
  6833                                  
  6834 00004BAE 488B00                                            	mov rax, qword[rax + 8 * 0]
  6835 00004BB1 50                      	push rax
  6836 00004BB2 6A01                    	push 1
  6837 00004BB4 488B4510                	mov rax, qword [rbp + 8 * 2]
  6838                                  
  6839 00004BB8 488B00                                            	mov rax, qword[rax + 8 * 0]
  6840                                  
  6841 00004BBB 488B00                                            	mov rax, qword[rax + 8 * 0]
  6842                                  	assert_closure(rax)
    42 00004BBE 803805              <1>  cmp byte [%1], %2
    43 00004BC1 0F854F330000        <1>  jne L_error_incorrect_type
  6843 00004BC7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6844 00004BCA FF5009                  	call SOB_CLOSURE_CODE(rax)
  6845 00004BCD 50                      	push rax
  6846 00004BCE 6A01                    	push 1
  6847 00004BD0 488B4510                	mov rax, qword [rbp + 8 * 2]
  6848                                  
  6849 00004BD4 488B00                                            	mov rax, qword[rax + 8 * 0]
  6850                                  
  6851 00004BD7 488B00                                            	mov rax, qword[rax + 8 * 0]
  6852                                  	assert_closure(rax)
    42 00004BDA 803805              <1>  cmp byte [%1], %2
    43 00004BDD 0F8533330000        <1>  jne L_error_incorrect_type
  6853 00004BE3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6854 00004BE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6855 00004BE9 50                      	push rax
  6856 00004BEA 6A01                    	push 1
  6857 00004BEC 488B4510                	mov rax, qword [rbp + 8 * 2]
  6858                                  
  6859 00004BF0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6860                                  
  6861 00004BF3 488B00                                            	mov rax, qword[rax + 8 * 0]
  6862                                  	assert_closure(rax)
    42 00004BF6 803805              <1>  cmp byte [%1], %2
    43 00004BF9 0F8517330000        <1>  jne L_error_incorrect_type
  6863 00004BFF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6864 00004C02 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6865 00004C05 50                      	push rax
  6866 00004C06 6A01                    	push 1
  6867 00004C08 488B4510                	mov rax, qword [rbp + 8 * 2]
  6868                                  
  6869 00004C0C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6870                                  
  6871 00004C0F 488B00                                            	mov rax, qword[rax + 8 * 0]
  6872                                  	assert_closure(rax)
    42 00004C12 803805              <1>  cmp byte [%1], %2
    43 00004C15 0F85FB320000        <1>  jne L_error_incorrect_type
  6873 00004C1B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6874 00004C1E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6875                                  	assert_closure(rax)
    42 00004C21 803805              <1>  cmp byte [%1], %2
    43 00004C24 0F85EC320000        <1>  jne L_error_incorrect_type
  6876 00004C2A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6877 00004C2D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6878                                  	assert_closure(rax)
    42 00004C30 803805              <1>  cmp byte [%1], %2
    43 00004C33 0F85DD320000        <1>  jne L_error_incorrect_type
  6879 00004C39 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6880 00004C3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6881 00004C3F 50                      	push rax
  6882 00004C40 6A01                    	push 1
  6883 00004C42 488B4510                	mov rax, qword [rbp + 8 * 2]
  6884                                  
  6885 00004C46 488B00                                            	mov rax, qword[rax + 8 * 0]
  6886                                  
  6887 00004C49 488B00                                            	mov rax, qword[rax + 8 * 0]
  6888 00004C4C 50                      	push rax
  6889 00004C4D 6A01                    	push 1
  6890 00004C4F 488B4510                	mov rax, qword [rbp + 8 * 2]
  6891                                  
  6892 00004C53 488B00                                            	mov rax, qword[rax + 8 * 0]
  6893                                  
  6894 00004C56 488B00                                            	mov rax, qword[rax + 8 * 0]
  6895                                  	assert_closure(rax)
    42 00004C59 803805              <1>  cmp byte [%1], %2
    43 00004C5C 0F85B4320000        <1>  jne L_error_incorrect_type
  6896 00004C62 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6897 00004C65 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6898 00004C68 50                      	push rax
  6899 00004C69 6A01                    	push 1
  6900 00004C6B 488B4510                	mov rax, qword [rbp + 8 * 2]
  6901                                  
  6902 00004C6F 488B00                                            	mov rax, qword[rax + 8 * 0]
  6903                                  
  6904 00004C72 488B00                                            	mov rax, qword[rax + 8 * 0]
  6905                                  	assert_closure(rax)
    42 00004C75 803805              <1>  cmp byte [%1], %2
    43 00004C78 0F8598320000        <1>  jne L_error_incorrect_type
  6906 00004C7E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6907 00004C81 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6908 00004C84 50                      	push rax
  6909 00004C85 6A01                    	push 1
  6910 00004C87 488B4510                	mov rax, qword [rbp + 8 * 2]
  6911                                  
  6912 00004C8B 488B00                                            	mov rax, qword[rax + 8 * 0]
  6913                                  
  6914 00004C8E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6915                                  	assert_closure(rax)
    42 00004C91 803805              <1>  cmp byte [%1], %2
    43 00004C94 0F857C320000        <1>  jne L_error_incorrect_type
  6916 00004C9A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6917 00004C9D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6918 00004CA0 50                      	push rax
  6919 00004CA1 6A01                    	push 1
  6920 00004CA3 488B4510                	mov rax, qword [rbp + 8 * 2]
  6921                                  
  6922 00004CA7 488B00                                            	mov rax, qword[rax + 8 * 0]
  6923                                  
  6924 00004CAA 488B00                                            	mov rax, qword[rax + 8 * 0]
  6925                                  	assert_closure(rax)
    42 00004CAD 803805              <1>  cmp byte [%1], %2
    43 00004CB0 0F8560320000        <1>  jne L_error_incorrect_type
  6926 00004CB6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6927 00004CB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6928                                  	assert_closure(rax)
    42 00004CBC 803805              <1>  cmp byte [%1], %2
    43 00004CBF 0F8551320000        <1>  jne L_error_incorrect_type
  6929 00004CC5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6930 00004CC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6931                                  	assert_closure(rax)
    42 00004CCB 803805              <1>  cmp byte [%1], %2
    43 00004CCE 0F8542320000        <1>  jne L_error_incorrect_type
  6932 00004CD4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6933 00004CD7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6934                                  	assert_closure(rax)
    42 00004CDA 803805              <1>  cmp byte [%1], %2
    43 00004CDD 0F8533320000        <1>  jne L_error_incorrect_type
  6935 00004CE3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6936 00004CE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6937 00004CE9 50                      	push rax
  6938 00004CEA 6A01                    	push 1
  6939 00004CEC 488B4510                	mov rax, qword [rbp + 8 * 2]
  6940                                  
  6941 00004CF0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6942                                  
  6943 00004CF3 488B00                                            	mov rax, qword[rax + 8 * 0]
  6944 00004CF6 50                      	push rax
  6945 00004CF7 6A01                    	push 1
  6946 00004CF9 488B4510                	mov rax, qword [rbp + 8 * 2]
  6947                                  
  6948 00004CFD 488B00                                            	mov rax, qword[rax + 8 * 0]
  6949                                  
  6950 00004D00 488B00                                            	mov rax, qword[rax + 8 * 0]
  6951                                  	assert_closure(rax)
    42 00004D03 803805              <1>  cmp byte [%1], %2
    43 00004D06 0F850A320000        <1>  jne L_error_incorrect_type
  6952 00004D0C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6953 00004D0F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6954 00004D12 50                      	push rax
  6955 00004D13 6A01                    	push 1
  6956 00004D15 488B4510                	mov rax, qword [rbp + 8 * 2]
  6957                                  
  6958 00004D19 488B00                                            	mov rax, qword[rax + 8 * 0]
  6959                                  
  6960 00004D1C 488B00                                            	mov rax, qword[rax + 8 * 0]
  6961                                  	assert_closure(rax)
    42 00004D1F 803805              <1>  cmp byte [%1], %2
    43 00004D22 0F85EE310000        <1>  jne L_error_incorrect_type
  6962 00004D28 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6963 00004D2B FF5009                  	call SOB_CLOSURE_CODE(rax)
  6964 00004D2E 50                      	push rax
  6965 00004D2F 6A01                    	push 1
  6966 00004D31 488B4510                	mov rax, qword [rbp + 8 * 2]
  6967                                  
  6968 00004D35 488B00                                            	mov rax, qword[rax + 8 * 0]
  6969                                  
  6970 00004D38 488B00                                            	mov rax, qword[rax + 8 * 0]
  6971                                  	assert_closure(rax)
    42 00004D3B 803805              <1>  cmp byte [%1], %2
    43 00004D3E 0F85D2310000        <1>  jne L_error_incorrect_type
  6972 00004D44 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6973 00004D47 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6974 00004D4A 50                      	push rax
  6975 00004D4B 6A01                    	push 1
  6976 00004D4D 488B4510                	mov rax, qword [rbp + 8 * 2]
  6977                                  
  6978 00004D51 488B00                                            	mov rax, qword[rax + 8 * 0]
  6979                                  
  6980 00004D54 488B00                                            	mov rax, qword[rax + 8 * 0]
  6981 00004D57 50                      	push rax
  6982 00004D58 6A01                    	push 1
  6983 00004D5A 488B4510                	mov rax, qword [rbp + 8 * 2]
  6984                                  
  6985 00004D5E 488B00                                            	mov rax, qword[rax + 8 * 0]
  6986                                  
  6987 00004D61 488B00                                            	mov rax, qword[rax + 8 * 0]
  6988                                  	assert_closure(rax)
    42 00004D64 803805              <1>  cmp byte [%1], %2
    43 00004D67 0F85A9310000        <1>  jne L_error_incorrect_type
  6989 00004D6D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6990 00004D70 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6991 00004D73 50                      	push rax
  6992 00004D74 6A01                    	push 1
  6993 00004D76 488B4510                	mov rax, qword [rbp + 8 * 2]
  6994                                  
  6995 00004D7A 488B00                                            	mov rax, qword[rax + 8 * 0]
  6996                                  
  6997 00004D7D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6998                                  	assert_closure(rax)
    42 00004D80 803805              <1>  cmp byte [%1], %2
    43 00004D83 0F858D310000        <1>  jne L_error_incorrect_type
  6999 00004D89 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7000 00004D8C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7001 00004D8F 50                      	push rax
  7002 00004D90 6A01                    	push 1
  7003 00004D92 488B4510                	mov rax, qword [rbp + 8 * 2]
  7004                                  
  7005 00004D96 488B00                                            	mov rax, qword[rax + 8 * 0]
  7006                                  
  7007 00004D99 488B00                                            	mov rax, qword[rax + 8 * 0]
  7008                                  	assert_closure(rax)
    42 00004D9C 803805              <1>  cmp byte [%1], %2
    43 00004D9F 0F8571310000        <1>  jne L_error_incorrect_type
  7009 00004DA5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7010 00004DA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7011                                  	assert_closure(rax)
    42 00004DAB 803805              <1>  cmp byte [%1], %2
    43 00004DAE 0F8562310000        <1>  jne L_error_incorrect_type
  7012 00004DB4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7013 00004DB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7014 00004DBA 50                      	push rax
  7015 00004DBB 6A01                    	push 1
  7016 00004DBD 488B4510                	mov rax, qword [rbp + 8 * 2]
  7017                                  
  7018 00004DC1 488B00                                            	mov rax, qword[rax + 8 * 0]
  7019                                  
  7020 00004DC4 488B00                                            	mov rax, qword[rax + 8 * 0]
  7021 00004DC7 50                      	push rax
  7022 00004DC8 6A01                    	push 1
  7023 00004DCA 488B4510                	mov rax, qword [rbp + 8 * 2]
  7024                                  
  7025 00004DCE 488B00                                            	mov rax, qword[rax + 8 * 0]
  7026                                  
  7027 00004DD1 488B00                                            	mov rax, qword[rax + 8 * 0]
  7028                                  	assert_closure(rax)
    42 00004DD4 803805              <1>  cmp byte [%1], %2
    43 00004DD7 0F8539310000        <1>  jne L_error_incorrect_type
  7029 00004DDD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7030 00004DE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7031 00004DE3 50                      	push rax
  7032 00004DE4 6A01                    	push 1
  7033 00004DE6 488B4510                	mov rax, qword [rbp + 8 * 2]
  7034                                  
  7035 00004DEA 488B00                                            	mov rax, qword[rax + 8 * 0]
  7036                                  
  7037 00004DED 488B00                                            	mov rax, qword[rax + 8 * 0]
  7038                                  	assert_closure(rax)
    42 00004DF0 803805              <1>  cmp byte [%1], %2
    43 00004DF3 0F851D310000        <1>  jne L_error_incorrect_type
  7039 00004DF9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7040 00004DFC FF5009                  	call SOB_CLOSURE_CODE(rax)
  7041 00004DFF 50                      	push rax
  7042 00004E00 6A01                    	push 1
  7043 00004E02 488B4510                	mov rax, qword [rbp + 8 * 2]
  7044                                  
  7045 00004E06 488B00                                            	mov rax, qword[rax + 8 * 0]
  7046                                  
  7047 00004E09 488B00                                            	mov rax, qword[rax + 8 * 0]
  7048                                  	assert_closure(rax)
    42 00004E0C 803805              <1>  cmp byte [%1], %2
    43 00004E0F 0F8501310000        <1>  jne L_error_incorrect_type
  7049 00004E15 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7050 00004E18 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7051 00004E1B 50                      	push rax
  7052 00004E1C 6A01                    	push 1
  7053 00004E1E 488B4510                	mov rax, qword [rbp + 8 * 2]
  7054                                  
  7055 00004E22 488B00                                            	mov rax, qword[rax + 8 * 0]
  7056                                  
  7057 00004E25 488B00                                            	mov rax, qword[rax + 8 * 0]
  7058                                  	assert_closure(rax)
    42 00004E28 803805              <1>  cmp byte [%1], %2
    43 00004E2B 0F85E5300000        <1>  jne L_error_incorrect_type
  7059 00004E31 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7060 00004E34 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7061 00004E37 50                      	push rax
  7062 00004E38 6A01                    	push 1
  7063 00004E3A 488B4510                	mov rax, qword [rbp + 8 * 2]
  7064                                  
  7065 00004E3E 488B00                                            	mov rax, qword[rax + 8 * 0]
  7066                                  
  7067 00004E41 488B00                                            	mov rax, qword[rax + 8 * 0]
  7068 00004E44 50                      	push rax
  7069 00004E45 6A01                    	push 1
  7070 00004E47 488B4510                	mov rax, qword [rbp + 8 * 2]
  7071                                  
  7072 00004E4B 488B00                                            	mov rax, qword[rax + 8 * 0]
  7073                                  
  7074 00004E4E 488B00                                            	mov rax, qword[rax + 8 * 0]
  7075                                  	assert_closure(rax)
    42 00004E51 803805              <1>  cmp byte [%1], %2
    43 00004E54 0F85BC300000        <1>  jne L_error_incorrect_type
  7076 00004E5A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7077 00004E5D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7078 00004E60 50                      	push rax
  7079 00004E61 6A01                    	push 1
  7080 00004E63 488B4510                	mov rax, qword [rbp + 8 * 2]
  7081                                  
  7082 00004E67 488B00                                            	mov rax, qword[rax + 8 * 0]
  7083                                  
  7084 00004E6A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7085                                  	assert_closure(rax)
    42 00004E6D 803805              <1>  cmp byte [%1], %2
    43 00004E70 0F85A0300000        <1>  jne L_error_incorrect_type
  7086 00004E76 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7087 00004E79 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7088 00004E7C 50                      	push rax
  7089 00004E7D 6A01                    	push 1
  7090 00004E7F 488B4510                	mov rax, qword [rbp + 8 * 2]
  7091                                  
  7092 00004E83 488B00                                            	mov rax, qword[rax + 8 * 0]
  7093                                  
  7094 00004E86 488B00                                            	mov rax, qword[rax + 8 * 0]
  7095                                  	assert_closure(rax)
    42 00004E89 803805              <1>  cmp byte [%1], %2
    43 00004E8C 0F8584300000        <1>  jne L_error_incorrect_type
  7096 00004E92 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7097 00004E95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7098 00004E98 50                      	push rax
  7099 00004E99 6A01                    	push 1
  7100 00004E9B 488B4510                	mov rax, qword [rbp + 8 * 2]
  7101                                  
  7102 00004E9F 488B00                                            	mov rax, qword[rax + 8 * 0]
  7103                                  
  7104 00004EA2 488B00                                            	mov rax, qword[rax + 8 * 0]
  7105 00004EA5 50                      	push rax
  7106 00004EA6 6A01                    	push 1
  7107 00004EA8 488B4510                	mov rax, qword [rbp + 8 * 2]
  7108                                  
  7109 00004EAC 488B00                                            	mov rax, qword[rax + 8 * 0]
  7110                                  
  7111 00004EAF 488B00                                            	mov rax, qword[rax + 8 * 0]
  7112                                  	assert_closure(rax)
    42 00004EB2 803805              <1>  cmp byte [%1], %2
    43 00004EB5 0F855B300000        <1>  jne L_error_incorrect_type
  7113 00004EBB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7114 00004EBE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7115 00004EC1 50                      	push rax
  7116 00004EC2 6A01                    	push 1
  7117 00004EC4 488B4510                	mov rax, qword [rbp + 8 * 2]
  7118                                  
  7119 00004EC8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7120                                  
  7121 00004ECB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7122                                  	assert_closure(rax)
    42 00004ECE 803805              <1>  cmp byte [%1], %2
    43 00004ED1 0F853F300000        <1>  jne L_error_incorrect_type
  7123 00004ED7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7124 00004EDA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7125 00004EDD 50                      	push rax
  7126 00004EDE 6A01                    	push 1
  7127 00004EE0 488B4510                	mov rax, qword [rbp + 8 * 2]
  7128                                  
  7129 00004EE4 488B00                                            	mov rax, qword[rax + 8 * 0]
  7130                                  
  7131 00004EE7 488B00                                            	mov rax, qword[rax + 8 * 0]
  7132                                  	assert_closure(rax)
    42 00004EEA 803805              <1>  cmp byte [%1], %2
    43 00004EED 0F8523300000        <1>  jne L_error_incorrect_type
  7133 00004EF3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7134 00004EF6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7135                                  	assert_closure(rax)
    42 00004EF9 803805              <1>  cmp byte [%1], %2
    43 00004EFC 0F8514300000        <1>  jne L_error_incorrect_type
  7136 00004F02 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7137 00004F05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7138 00004F08 50                      	push rax
  7139 00004F09 6A01                    	push 1
  7140 00004F0B 488B4510                	mov rax, qword [rbp + 8 * 2]
  7141                                  
  7142 00004F0F 488B00                                            	mov rax, qword[rax + 8 * 0]
  7143                                  
  7144 00004F12 488B00                                            	mov rax, qword[rax + 8 * 0]
  7145 00004F15 50                      	push rax
  7146 00004F16 6A01                    	push 1
  7147 00004F18 488B4510                	mov rax, qword [rbp + 8 * 2]
  7148                                  
  7149 00004F1C 488B00                                            	mov rax, qword[rax + 8 * 0]
  7150                                  
  7151 00004F1F 488B00                                            	mov rax, qword[rax + 8 * 0]
  7152                                  	assert_closure(rax)
    42 00004F22 803805              <1>  cmp byte [%1], %2
    43 00004F25 0F85EB2F0000        <1>  jne L_error_incorrect_type
  7153 00004F2B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7154 00004F2E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7155 00004F31 50                      	push rax
  7156 00004F32 6A01                    	push 1
  7157 00004F34 488B4510                	mov rax, qword [rbp + 8 * 2]
  7158                                  
  7159 00004F38 488B00                                            	mov rax, qword[rax + 8 * 0]
  7160                                  
  7161 00004F3B 488B00                                            	mov rax, qword[rax + 8 * 0]
  7162                                  	assert_closure(rax)
    42 00004F3E 803805              <1>  cmp byte [%1], %2
    43 00004F41 0F85CF2F0000        <1>  jne L_error_incorrect_type
  7163 00004F47 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7164 00004F4A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7165 00004F4D 50                      	push rax
  7166 00004F4E 6A01                    	push 1
  7167 00004F50 488B4510                	mov rax, qword [rbp + 8 * 2]
  7168                                  
  7169 00004F54 488B00                                            	mov rax, qword[rax + 8 * 0]
  7170                                  
  7171 00004F57 488B00                                            	mov rax, qword[rax + 8 * 0]
  7172                                  	assert_closure(rax)
    42 00004F5A 803805              <1>  cmp byte [%1], %2
    43 00004F5D 0F85B32F0000        <1>  jne L_error_incorrect_type
  7173 00004F63 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7174 00004F66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7175 00004F69 50                      	push rax
  7176 00004F6A 6A01                    	push 1
  7177 00004F6C 488B4510                	mov rax, qword [rbp + 8 * 2]
  7178                                  
  7179 00004F70 488B00                                            	mov rax, qword[rax + 8 * 0]
  7180                                  
  7181 00004F73 488B00                                            	mov rax, qword[rax + 8 * 0]
  7182                                  	assert_closure(rax)
    42 00004F76 803805              <1>  cmp byte [%1], %2
    43 00004F79 0F85972F0000        <1>  jne L_error_incorrect_type
  7183 00004F7F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7184 00004F82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7185                                  	assert_closure(rax)
    42 00004F85 803805              <1>  cmp byte [%1], %2
    43 00004F88 0F85882F0000        <1>  jne L_error_incorrect_type
  7186 00004F8E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7187 00004F91 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7188                                  	assert_closure(rax)
    42 00004F94 803805              <1>  cmp byte [%1], %2
    43 00004F97 0F85792F0000        <1>  jne L_error_incorrect_type
  7189 00004F9D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7190 00004FA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7191 00004FA3 50                      	push rax
  7192 00004FA4 6A01                    	push 1
  7193 00004FA6 488B4510                	mov rax, qword [rbp + 8 * 2]
  7194                                  
  7195 00004FAA 488B00                                            	mov rax, qword[rax + 8 * 0]
  7196                                  
  7197 00004FAD 488B00                                            	mov rax, qword[rax + 8 * 0]
  7198 00004FB0 50                      	push rax
  7199 00004FB1 6A01                    	push 1
  7200 00004FB3 488B4510                	mov rax, qword [rbp + 8 * 2]
  7201                                  
  7202 00004FB7 488B00                                            	mov rax, qword[rax + 8 * 0]
  7203                                  
  7204 00004FBA 488B00                                            	mov rax, qword[rax + 8 * 0]
  7205                                  	assert_closure(rax)
    42 00004FBD 803805              <1>  cmp byte [%1], %2
    43 00004FC0 0F85502F0000        <1>  jne L_error_incorrect_type
  7206 00004FC6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7207 00004FC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7208 00004FCC 50                      	push rax
  7209 00004FCD 6A01                    	push 1
  7210 00004FCF 488B4510                	mov rax, qword [rbp + 8 * 2]
  7211                                  
  7212 00004FD3 488B00                                            	mov rax, qword[rax + 8 * 0]
  7213                                  
  7214 00004FD6 488B00                                            	mov rax, qword[rax + 8 * 0]
  7215                                  	assert_closure(rax)
    42 00004FD9 803805              <1>  cmp byte [%1], %2
    43 00004FDC 0F85342F0000        <1>  jne L_error_incorrect_type
  7216 00004FE2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7217 00004FE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7218 00004FE8 50                      	push rax
  7219 00004FE9 6A01                    	push 1
  7220 00004FEB 488B4510                	mov rax, qword [rbp + 8 * 2]
  7221                                  
  7222 00004FEF 488B00                                            	mov rax, qword[rax + 8 * 0]
  7223                                  
  7224 00004FF2 488B00                                            	mov rax, qword[rax + 8 * 0]
  7225                                  	assert_closure(rax)
    42 00004FF5 803805              <1>  cmp byte [%1], %2
    43 00004FF8 0F85182F0000        <1>  jne L_error_incorrect_type
  7226 00004FFE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7227 00005001 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7228 00005004 50                      	push rax
  7229 00005005 6A01                    	push 1
  7230 00005007 488B4510                	mov rax, qword [rbp + 8 * 2]
  7231                                  
  7232 0000500B 488B00                                            	mov rax, qword[rax + 8 * 0]
  7233                                  
  7234 0000500E 488B00                                            	mov rax, qword[rax + 8 * 0]
  7235                                  	assert_closure(rax)
    42 00005011 803805              <1>  cmp byte [%1], %2
    43 00005014 0F85FC2E0000        <1>  jne L_error_incorrect_type
  7236 0000501A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7237 0000501D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7238 00005020 50                      	push rax
  7239 00005021 6A01                    	push 1
  7240 00005023 488B4510                	mov rax, qword [rbp + 8 * 2]
  7241                                  
  7242 00005027 488B00                                            	mov rax, qword[rax + 8 * 0]
  7243                                  
  7244 0000502A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7245 0000502D 50                      	push rax
  7246 0000502E 6A01                    	push 1
  7247 00005030 488B4510                	mov rax, qword [rbp + 8 * 2]
  7248                                  
  7249 00005034 488B00                                            	mov rax, qword[rax + 8 * 0]
  7250                                  
  7251 00005037 488B00                                            	mov rax, qword[rax + 8 * 0]
  7252                                  	assert_closure(rax)
    42 0000503A 803805              <1>  cmp byte [%1], %2
    43 0000503D 0F85D32E0000        <1>  jne L_error_incorrect_type
  7253 00005043 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7254 00005046 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7255 00005049 50                      	push rax
  7256 0000504A 6A01                    	push 1
  7257 0000504C 488B4510                	mov rax, qword [rbp + 8 * 2]
  7258                                  
  7259 00005050 488B00                                            	mov rax, qword[rax + 8 * 0]
  7260                                  
  7261 00005053 488B00                                            	mov rax, qword[rax + 8 * 0]
  7262                                  	assert_closure(rax)
    42 00005056 803805              <1>  cmp byte [%1], %2
    43 00005059 0F85B72E0000        <1>  jne L_error_incorrect_type
  7263 0000505F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7264 00005062 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7265 00005065 50                      	push rax
  7266 00005066 6A01                    	push 1
  7267 00005068 488B4510                	mov rax, qword [rbp + 8 * 2]
  7268                                  
  7269 0000506C 488B00                                            	mov rax, qword[rax + 8 * 0]
  7270                                  
  7271 0000506F 488B00                                            	mov rax, qword[rax + 8 * 0]
  7272                                  	assert_closure(rax)
    42 00005072 803805              <1>  cmp byte [%1], %2
    43 00005075 0F859B2E0000        <1>  jne L_error_incorrect_type
  7273 0000507B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7274 0000507E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7275                                  	assert_closure(rax)
    42 00005081 803805              <1>  cmp byte [%1], %2
    43 00005084 0F858C2E0000        <1>  jne L_error_incorrect_type
  7276 0000508A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7277 0000508D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7278 00005090 50                      	push rax
  7279 00005091 6A01                    	push 1
  7280 00005093 488B4510                	mov rax, qword [rbp + 8 * 2]
  7281                                  
  7282 00005097 488B00                                            	mov rax, qword[rax + 8 * 0]
  7283                                  
  7284 0000509A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7285 0000509D 50                      	push rax
  7286 0000509E 6A01                    	push 1
  7287 000050A0 488B4510                	mov rax, qword [rbp + 8 * 2]
  7288                                  
  7289 000050A4 488B00                                            	mov rax, qword[rax + 8 * 0]
  7290                                  
  7291 000050A7 488B00                                            	mov rax, qword[rax + 8 * 0]
  7292                                  	assert_closure(rax)
    42 000050AA 803805              <1>  cmp byte [%1], %2
    43 000050AD 0F85632E0000        <1>  jne L_error_incorrect_type
  7293 000050B3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7294 000050B6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7295 000050B9 50                      	push rax
  7296 000050BA 6A01                    	push 1
  7297 000050BC 488B4510                	mov rax, qword [rbp + 8 * 2]
  7298                                  
  7299 000050C0 488B00                                            	mov rax, qword[rax + 8 * 0]
  7300                                  
  7301 000050C3 488B00                                            	mov rax, qword[rax + 8 * 0]
  7302                                  	assert_closure(rax)
    42 000050C6 803805              <1>  cmp byte [%1], %2
    43 000050C9 0F85472E0000        <1>  jne L_error_incorrect_type
  7303 000050CF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7304 000050D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7305 000050D5 50                      	push rax
  7306 000050D6 6A01                    	push 1
  7307 000050D8 488B4510                	mov rax, qword [rbp + 8 * 2]
  7308                                  
  7309 000050DC 488B00                                            	mov rax, qword[rax + 8 * 0]
  7310                                  
  7311 000050DF 488B00                                            	mov rax, qword[rax + 8 * 0]
  7312                                  	assert_closure(rax)
    42 000050E2 803805              <1>  cmp byte [%1], %2
    43 000050E5 0F852B2E0000        <1>  jne L_error_incorrect_type
  7313 000050EB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7314 000050EE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7315 000050F1 50                      	push rax
  7316 000050F2 6A01                    	push 1
  7317 000050F4 488B4510                	mov rax, qword [rbp + 8 * 2]
  7318                                  
  7319 000050F8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7320                                  
  7321 000050FB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7322                                  	assert_closure(rax)
    42 000050FE 803805              <1>  cmp byte [%1], %2
    43 00005101 0F850F2E0000        <1>  jne L_error_incorrect_type
  7323 00005107 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7324 0000510A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7325                                  	assert_closure(rax)
    42 0000510D 803805              <1>  cmp byte [%1], %2
    43 00005110 0F85002E0000        <1>  jne L_error_incorrect_type
  7326 00005116 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7327 00005119 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7328                                  	assert_closure(rax)
    42 0000511C 803805              <1>  cmp byte [%1], %2
    43 0000511F 0F85F12D0000        <1>  jne L_error_incorrect_type
  7329 00005125 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7330 00005128 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7331 0000512B 50                      	push rax
  7332 0000512C 6A01                    	push 1
  7333 0000512E 488B4510                	mov rax, qword [rbp + 8 * 2]
  7334                                  
  7335 00005132 488B00                                            	mov rax, qword[rax + 8 * 0]
  7336                                  
  7337 00005135 488B00                                            	mov rax, qword[rax + 8 * 0]
  7338 00005138 50                      	push rax
  7339 00005139 6A01                    	push 1
  7340 0000513B 488B4510                	mov rax, qword [rbp + 8 * 2]
  7341                                  
  7342 0000513F 488B00                                            	mov rax, qword[rax + 8 * 0]
  7343                                  
  7344 00005142 488B00                                            	mov rax, qword[rax + 8 * 0]
  7345                                  	assert_closure(rax)
    42 00005145 803805              <1>  cmp byte [%1], %2
    43 00005148 0F85C82D0000        <1>  jne L_error_incorrect_type
  7346 0000514E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7347 00005151 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7348 00005154 50                      	push rax
  7349 00005155 6A01                    	push 1
  7350 00005157 488B4510                	mov rax, qword [rbp + 8 * 2]
  7351                                  
  7352 0000515B 488B00                                            	mov rax, qword[rax + 8 * 0]
  7353                                  
  7354 0000515E 488B00                                            	mov rax, qword[rax + 8 * 0]
  7355                                  	assert_closure(rax)
    42 00005161 803805              <1>  cmp byte [%1], %2
    43 00005164 0F85AC2D0000        <1>  jne L_error_incorrect_type
  7356 0000516A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7357 0000516D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7358 00005170 50                      	push rax
  7359 00005171 6A01                    	push 1
  7360 00005173 488B4510                	mov rax, qword [rbp + 8 * 2]
  7361                                  
  7362 00005177 488B00                                            	mov rax, qword[rax + 8 * 0]
  7363                                  
  7364 0000517A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7365                                  	assert_closure(rax)
    42 0000517D 803805              <1>  cmp byte [%1], %2
    43 00005180 0F85902D0000        <1>  jne L_error_incorrect_type
  7366 00005186 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7367 00005189 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7368 0000518C 50                      	push rax
  7369 0000518D 6A01                    	push 1
  7370 0000518F 488B4510                	mov rax, qword [rbp + 8 * 2]
  7371                                  
  7372 00005193 488B00                                            	mov rax, qword[rax + 8 * 0]
  7373                                  
  7374 00005196 488B00                                            	mov rax, qword[rax + 8 * 0]
  7375                                  	assert_closure(rax)
    42 00005199 803805              <1>  cmp byte [%1], %2
    43 0000519C 0F85742D0000        <1>  jne L_error_incorrect_type
  7376 000051A2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7377 000051A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7378                                  	assert_closure(rax)
    42 000051A8 803805              <1>  cmp byte [%1], %2
    43 000051AB 0F85652D0000        <1>  jne L_error_incorrect_type
  7379 000051B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7380 000051B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7381                                  	assert_closure(rax)
    42 000051B7 803805              <1>  cmp byte [%1], %2
    43 000051BA 0F85562D0000        <1>  jne L_error_incorrect_type
  7382 000051C0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7383 000051C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7384 000051C6 50                      	push rax
  7385 000051C7 6A01                    	push 1
  7386 000051C9 488B4510                	mov rax, qword [rbp + 8 * 2]
  7387                                  
  7388 000051CD 488B00                                            	mov rax, qword[rax + 8 * 0]
  7389                                  
  7390 000051D0 488B00                                            	mov rax, qword[rax + 8 * 0]
  7391 000051D3 50                      	push rax
  7392 000051D4 6A01                    	push 1
  7393 000051D6 488B4510                	mov rax, qword [rbp + 8 * 2]
  7394                                  
  7395 000051DA 488B00                                            	mov rax, qword[rax + 8 * 0]
  7396                                  
  7397 000051DD 488B00                                            	mov rax, qword[rax + 8 * 0]
  7398                                  	assert_closure(rax)
    42 000051E0 803805              <1>  cmp byte [%1], %2
    43 000051E3 0F852D2D0000        <1>  jne L_error_incorrect_type
  7399 000051E9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7400 000051EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  7401 000051EF 50                      	push rax
  7402 000051F0 6A01                    	push 1
  7403 000051F2 488B4510                	mov rax, qword [rbp + 8 * 2]
  7404                                  
  7405 000051F6 488B00                                            	mov rax, qword[rax + 8 * 0]
  7406                                  
  7407 000051F9 488B00                                            	mov rax, qword[rax + 8 * 0]
  7408                                  	assert_closure(rax)
    42 000051FC 803805              <1>  cmp byte [%1], %2
    43 000051FF 0F85112D0000        <1>  jne L_error_incorrect_type
  7409 00005205 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7410 00005208 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7411 0000520B 50                      	push rax
  7412 0000520C 6A01                    	push 1
  7413 0000520E 488B4510                	mov rax, qword [rbp + 8 * 2]
  7414                                  
  7415 00005212 488B00                                            	mov rax, qword[rax + 8 * 0]
  7416                                  
  7417 00005215 488B00                                            	mov rax, qword[rax + 8 * 0]
  7418                                  	assert_closure(rax)
    42 00005218 803805              <1>  cmp byte [%1], %2
    43 0000521B 0F85F52C0000        <1>  jne L_error_incorrect_type
  7419 00005221 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7420 00005224 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7421                                  	assert_closure(rax)
    42 00005227 803805              <1>  cmp byte [%1], %2
    43 0000522A 0F85E62C0000        <1>  jne L_error_incorrect_type
  7422 00005230 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7423 00005233 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7424 00005236 50                      	push rax
  7425 00005237 6A01                    	push 1
  7426 00005239 488B4510                	mov rax, qword [rbp + 8 * 2]
  7427                                  
  7428 0000523D 488B00                                            	mov rax, qword[rax + 8 * 0]
  7429                                  
  7430 00005240 488B00                                            	mov rax, qword[rax + 8 * 0]
  7431 00005243 50                      	push rax
  7432 00005244 6A01                    	push 1
  7433 00005246 488B4510                	mov rax, qword [rbp + 8 * 2]
  7434                                  
  7435 0000524A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7436                                  
  7437 0000524D 488B00                                            	mov rax, qword[rax + 8 * 0]
  7438                                  	assert_closure(rax)
    42 00005250 803805              <1>  cmp byte [%1], %2
    43 00005253 0F85BD2C0000        <1>  jne L_error_incorrect_type
  7439 00005259 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7440 0000525C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7441 0000525F 50                      	push rax
  7442 00005260 6A01                    	push 1
  7443 00005262 488B4510                	mov rax, qword [rbp + 8 * 2]
  7444                                  
  7445 00005266 488B00                                            	mov rax, qword[rax + 8 * 0]
  7446                                  
  7447 00005269 488B00                                            	mov rax, qword[rax + 8 * 0]
  7448                                  	assert_closure(rax)
    42 0000526C 803805              <1>  cmp byte [%1], %2
    43 0000526F 0F85A12C0000        <1>  jne L_error_incorrect_type
  7449 00005275 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7450 00005278 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7451 0000527B 50                      	push rax
  7452 0000527C 6A01                    	push 1
  7453 0000527E 488B4510                	mov rax, qword [rbp + 8 * 2]
  7454                                  
  7455 00005282 488B00                                            	mov rax, qword[rax + 8 * 0]
  7456                                  
  7457 00005285 488B00                                            	mov rax, qword[rax + 8 * 0]
  7458                                  	assert_closure(rax)
    42 00005288 803805              <1>  cmp byte [%1], %2
    43 0000528B 0F85852C0000        <1>  jne L_error_incorrect_type
  7459 00005291 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7460 00005294 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7461 00005297 50                      	push rax
  7462 00005298 6A01                    	push 1
  7463 0000529A 488B4510                	mov rax, qword [rbp + 8 * 2]
  7464                                  
  7465 0000529E 488B00                                            	mov rax, qword[rax + 8 * 0]
  7466                                  
  7467 000052A1 488B00                                            	mov rax, qword[rax + 8 * 0]
  7468                                  	assert_closure(rax)
    42 000052A4 803805              <1>  cmp byte [%1], %2
    43 000052A7 0F85692C0000        <1>  jne L_error_incorrect_type
  7469 000052AD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7470 000052B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7471                                  	assert_closure(rax)
    42 000052B3 803805              <1>  cmp byte [%1], %2
    43 000052B6 0F855A2C0000        <1>  jne L_error_incorrect_type
  7472 000052BC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7473 000052BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7474                                  	assert_closure(rax)
    42 000052C2 803805              <1>  cmp byte [%1], %2
    43 000052C5 0F854B2C0000        <1>  jne L_error_incorrect_type
  7475 000052CB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7476 000052CE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7477 000052D1 50                      	push rax
  7478 000052D2 6A01                    	push 1
  7479 000052D4 488B4510                	mov rax, qword [rbp + 8 * 2]
  7480                                  
  7481 000052D8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7482                                  
  7483 000052DB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7484 000052DE 50                      	push rax
  7485 000052DF 6A01                    	push 1
  7486 000052E1 488B4510                	mov rax, qword [rbp + 8 * 2]
  7487                                  
  7488 000052E5 488B00                                            	mov rax, qword[rax + 8 * 0]
  7489                                  
  7490 000052E8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7491                                  	assert_closure(rax)
    42 000052EB 803805              <1>  cmp byte [%1], %2
    43 000052EE 0F85222C0000        <1>  jne L_error_incorrect_type
  7492 000052F4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7493 000052F7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7494 000052FA 50                      	push rax
  7495 000052FB 6A01                    	push 1
  7496 000052FD 488B4510                	mov rax, qword [rbp + 8 * 2]
  7497                                  
  7498 00005301 488B00                                            	mov rax, qword[rax + 8 * 0]
  7499                                  
  7500 00005304 488B00                                            	mov rax, qword[rax + 8 * 0]
  7501                                  	assert_closure(rax)
    42 00005307 803805              <1>  cmp byte [%1], %2
    43 0000530A 0F85062C0000        <1>  jne L_error_incorrect_type
  7502 00005310 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7503 00005313 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7504 00005316 50                      	push rax
  7505 00005317 6A01                    	push 1
  7506 00005319 488B4510                	mov rax, qword [rbp + 8 * 2]
  7507                                  
  7508 0000531D 488B00                                            	mov rax, qword[rax + 8 * 0]
  7509                                  
  7510 00005320 488B00                                            	mov rax, qword[rax + 8 * 0]
  7511                                  	assert_closure(rax)
    42 00005323 803805              <1>  cmp byte [%1], %2
    43 00005326 0F85EA2B0000        <1>  jne L_error_incorrect_type
  7512 0000532C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7513 0000532F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7514 00005332 50                      	push rax
  7515 00005333 6A01                    	push 1
  7516 00005335 488B4510                	mov rax, qword [rbp + 8 * 2]
  7517                                  
  7518 00005339 488B00                                            	mov rax, qword[rax + 8 * 0]
  7519                                  
  7520 0000533C 488B00                                            	mov rax, qword[rax + 8 * 0]
  7521 0000533F 50                      	push rax
  7522 00005340 6A01                    	push 1
  7523 00005342 488B4510                	mov rax, qword [rbp + 8 * 2]
  7524                                  
  7525 00005346 488B00                                            	mov rax, qword[rax + 8 * 0]
  7526                                  
  7527 00005349 488B00                                            	mov rax, qword[rax + 8 * 0]
  7528                                  	assert_closure(rax)
    42 0000534C 803805              <1>  cmp byte [%1], %2
    43 0000534F 0F85C12B0000        <1>  jne L_error_incorrect_type
  7529 00005355 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7530 00005358 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7531 0000535B 50                      	push rax
  7532 0000535C 6A01                    	push 1
  7533 0000535E 488B4510                	mov rax, qword [rbp + 8 * 2]
  7534                                  
  7535 00005362 488B00                                            	mov rax, qword[rax + 8 * 0]
  7536                                  
  7537 00005365 488B00                                            	mov rax, qword[rax + 8 * 0]
  7538                                  	assert_closure(rax)
    42 00005368 803805              <1>  cmp byte [%1], %2
    43 0000536B 0F85A52B0000        <1>  jne L_error_incorrect_type
  7539 00005371 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7540 00005374 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7541 00005377 50                      	push rax
  7542 00005378 6A01                    	push 1
  7543 0000537A 488B4510                	mov rax, qword [rbp + 8 * 2]
  7544                                  
  7545 0000537E 488B00                                            	mov rax, qword[rax + 8 * 0]
  7546                                  
  7547 00005381 488B00                                            	mov rax, qword[rax + 8 * 0]
  7548                                  	assert_closure(rax)
    42 00005384 803805              <1>  cmp byte [%1], %2
    43 00005387 0F85892B0000        <1>  jne L_error_incorrect_type
  7549 0000538D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7550 00005390 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7551 00005393 50                      	push rax
  7552 00005394 6A01                    	push 1
  7553 00005396 488B4510                	mov rax, qword [rbp + 8 * 2]
  7554                                  
  7555 0000539A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7556                                  
  7557 0000539D 488B00                                            	mov rax, qword[rax + 8 * 0]
  7558                                  	assert_closure(rax)
    42 000053A0 803805              <1>  cmp byte [%1], %2
    43 000053A3 0F856D2B0000        <1>  jne L_error_incorrect_type
  7559 000053A9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7560 000053AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  7561 000053AF 50                      	push rax
  7562 000053B0 6A01                    	push 1
  7563 000053B2 488B4510                	mov rax, qword [rbp + 8 * 2]
  7564                                  
  7565 000053B6 488B00                                            	mov rax, qword[rax + 8 * 0]
  7566                                  
  7567 000053B9 488B00                                            	mov rax, qword[rax + 8 * 0]
  7568 000053BC 50                      	push rax
  7569 000053BD 6A01                    	push 1
  7570 000053BF 488B4510                	mov rax, qword [rbp + 8 * 2]
  7571                                  
  7572 000053C3 488B00                                            	mov rax, qword[rax + 8 * 0]
  7573                                  
  7574 000053C6 488B00                                            	mov rax, qword[rax + 8 * 0]
  7575                                  	assert_closure(rax)
    42 000053C9 803805              <1>  cmp byte [%1], %2
    43 000053CC 0F85442B0000        <1>  jne L_error_incorrect_type
  7576 000053D2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7577 000053D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7578 000053D8 50                      	push rax
  7579 000053D9 6A01                    	push 1
  7580 000053DB 488B4510                	mov rax, qword [rbp + 8 * 2]
  7581                                  
  7582 000053DF 488B00                                            	mov rax, qword[rax + 8 * 0]
  7583                                  
  7584 000053E2 488B00                                            	mov rax, qword[rax + 8 * 0]
  7585                                  	assert_closure(rax)
    42 000053E5 803805              <1>  cmp byte [%1], %2
    43 000053E8 0F85282B0000        <1>  jne L_error_incorrect_type
  7586 000053EE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7587 000053F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7588 000053F4 50                      	push rax
  7589 000053F5 6A01                    	push 1
  7590 000053F7 488B4510                	mov rax, qword [rbp + 8 * 2]
  7591                                  
  7592 000053FB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7593                                  
  7594 000053FE 488B00                                            	mov rax, qword[rax + 8 * 0]
  7595                                  	assert_closure(rax)
    42 00005401 803805              <1>  cmp byte [%1], %2
    43 00005404 0F850C2B0000        <1>  jne L_error_incorrect_type
  7596 0000540A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7597 0000540D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7598                                  	assert_closure(rax)
    42 00005410 803805              <1>  cmp byte [%1], %2
    43 00005413 0F85FD2A0000        <1>  jne L_error_incorrect_type
  7599 00005419 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7600 0000541C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7601 0000541F 50                      	push rax
  7602 00005420 6A01                    	push 1
  7603 00005422 488B4510                	mov rax, qword [rbp + 8 * 2]
  7604                                  
  7605 00005426 488B00                                            	mov rax, qword[rax + 8 * 0]
  7606                                  
  7607 00005429 488B00                                            	mov rax, qword[rax + 8 * 0]
  7608 0000542C 50                      	push rax
  7609 0000542D 6A01                    	push 1
  7610 0000542F 488B4510                	mov rax, qword [rbp + 8 * 2]
  7611                                  
  7612 00005433 488B00                                            	mov rax, qword[rax + 8 * 0]
  7613                                  
  7614 00005436 488B00                                            	mov rax, qword[rax + 8 * 0]
  7615                                  	assert_closure(rax)
    42 00005439 803805              <1>  cmp byte [%1], %2
    43 0000543C 0F85D42A0000        <1>  jne L_error_incorrect_type
  7616 00005442 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7617 00005445 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7618 00005448 50                      	push rax
  7619 00005449 6A01                    	push 1
  7620 0000544B 488B4510                	mov rax, qword [rbp + 8 * 2]
  7621                                  
  7622 0000544F 488B00                                            	mov rax, qword[rax + 8 * 0]
  7623                                  
  7624 00005452 488B00                                            	mov rax, qword[rax + 8 * 0]
  7625                                  	assert_closure(rax)
    42 00005455 803805              <1>  cmp byte [%1], %2
    43 00005458 0F85B82A0000        <1>  jne L_error_incorrect_type
  7626 0000545E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7627 00005461 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7628 00005464 50                      	push rax
  7629 00005465 6A01                    	push 1
  7630 00005467 488B4510                	mov rax, qword [rbp + 8 * 2]
  7631                                  
  7632 0000546B 488B00                                            	mov rax, qword[rax + 8 * 0]
  7633                                  
  7634 0000546E 488B00                                            	mov rax, qword[rax + 8 * 0]
  7635                                  	assert_closure(rax)
    42 00005471 803805              <1>  cmp byte [%1], %2
    43 00005474 0F859C2A0000        <1>  jne L_error_incorrect_type
  7636 0000547A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7637 0000547D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7638 00005480 50                      	push rax
  7639 00005481 6A01                    	push 1
  7640 00005483 488B4510                	mov rax, qword [rbp + 8 * 2]
  7641                                  
  7642 00005487 488B00                                            	mov rax, qword[rax + 8 * 0]
  7643                                  
  7644 0000548A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7645                                  	assert_closure(rax)
    42 0000548D 803805              <1>  cmp byte [%1], %2
    43 00005490 0F85802A0000        <1>  jne L_error_incorrect_type
  7646 00005496 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7647 00005499 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7648                                  	assert_closure(rax)
    42 0000549C 803805              <1>  cmp byte [%1], %2
    43 0000549F 0F85712A0000        <1>  jne L_error_incorrect_type
  7649 000054A5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7650 000054A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7651                                  	assert_closure(rax)
    42 000054AB 803805              <1>  cmp byte [%1], %2
    43 000054AE 0F85622A0000        <1>  jne L_error_incorrect_type
  7652 000054B4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7653 000054B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7654                                  	assert_closure(rax)
    42 000054BA 803805              <1>  cmp byte [%1], %2
    43 000054BD 0F85532A0000        <1>  jne L_error_incorrect_type
  7655 000054C3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7656 000054C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7657                                  	assert_closure(rax)
    42 000054C9 803805              <1>  cmp byte [%1], %2
    43 000054CC 0F85442A0000        <1>  jne L_error_incorrect_type
  7658 000054D2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7659 000054D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7660 000054D8 50                      	push rax
  7661 000054D9 6A01                    	push 1
  7662 000054DB 488B4510                	mov rax, qword [rbp + 8 * 2]
  7663                                  
  7664 000054DF 488B00                                            	mov rax, qword[rax + 8 * 0]
  7665                                  
  7666 000054E2 488B00                                            	mov rax, qword[rax + 8 * 0]
  7667 000054E5 50                      	push rax
  7668 000054E6 6A01                    	push 1
  7669 000054E8 488B4510                	mov rax, qword [rbp + 8 * 2]
  7670                                  
  7671 000054EC 488B00                                            	mov rax, qword[rax + 8 * 0]
  7672                                  
  7673 000054EF 488B00                                            	mov rax, qword[rax + 8 * 0]
  7674                                  	assert_closure(rax)
    42 000054F2 803805              <1>  cmp byte [%1], %2
    43 000054F5 0F851B2A0000        <1>  jne L_error_incorrect_type
  7675 000054FB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7676 000054FE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7677 00005501 50                      	push rax
  7678 00005502 6A01                    	push 1
  7679 00005504 488B4510                	mov rax, qword [rbp + 8 * 2]
  7680                                  
  7681 00005508 488B00                                            	mov rax, qword[rax + 8 * 0]
  7682                                  
  7683 0000550B 488B00                                            	mov rax, qword[rax + 8 * 0]
  7684                                  	assert_closure(rax)
    42 0000550E 803805              <1>  cmp byte [%1], %2
    43 00005511 0F85FF290000        <1>  jne L_error_incorrect_type
  7685 00005517 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7686 0000551A FF5009                  	call SOB_CLOSURE_CODE(rax)
  7687 0000551D 50                      	push rax
  7688 0000551E 6A01                    	push 1
  7689 00005520 488B4510                	mov rax, qword [rbp + 8 * 2]
  7690                                  
  7691 00005524 488B00                                            	mov rax, qword[rax + 8 * 0]
  7692                                  
  7693 00005527 488B00                                            	mov rax, qword[rax + 8 * 0]
  7694                                  	assert_closure(rax)
    42 0000552A 803805              <1>  cmp byte [%1], %2
    43 0000552D 0F85E3290000        <1>  jne L_error_incorrect_type
  7695 00005533 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7696 00005536 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7697 00005539 50                      	push rax
  7698 0000553A 6A01                    	push 1
  7699 0000553C 488B4510                	mov rax, qword [rbp + 8 * 2]
  7700                                  
  7701 00005540 488B00                                            	mov rax, qword[rax + 8 * 0]
  7702                                  
  7703 00005543 488B00                                            	mov rax, qword[rax + 8 * 0]
  7704                                  	assert_closure(rax)
    42 00005546 803805              <1>  cmp byte [%1], %2
    43 00005549 0F85C7290000        <1>  jne L_error_incorrect_type
  7705 0000554F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7706 00005552 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7707                                  	assert_closure(rax)
    42 00005555 803805              <1>  cmp byte [%1], %2
    43 00005558 0F85B8290000        <1>  jne L_error_incorrect_type
  7708 0000555E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7709 00005561 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7710                                  	assert_closure(rax)
    42 00005564 803805              <1>  cmp byte [%1], %2
    43 00005567 0F85A9290000        <1>  jne L_error_incorrect_type
  7711 0000556D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7712 00005570 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7713 00005573 50                      	push rax
  7714 00005574 6A01                    	push 1
  7715 00005576 488B4510                	mov rax, qword [rbp + 8 * 2]
  7716                                  
  7717 0000557A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7718                                  
  7719 0000557D 488B00                                            	mov rax, qword[rax + 8 * 0]
  7720 00005580 50                      	push rax
  7721 00005581 6A01                    	push 1
  7722 00005583 488B4510                	mov rax, qword [rbp + 8 * 2]
  7723                                  
  7724 00005587 488B00                                            	mov rax, qword[rax + 8 * 0]
  7725                                  
  7726 0000558A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7727                                  	assert_closure(rax)
    42 0000558D 803805              <1>  cmp byte [%1], %2
    43 00005590 0F8580290000        <1>  jne L_error_incorrect_type
  7728 00005596 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7729 00005599 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7730 0000559C 50                      	push rax
  7731 0000559D 6A01                    	push 1
  7732 0000559F 488B4510                	mov rax, qword [rbp + 8 * 2]
  7733                                  
  7734 000055A3 488B00                                            	mov rax, qword[rax + 8 * 0]
  7735                                  
  7736 000055A6 488B00                                            	mov rax, qword[rax + 8 * 0]
  7737                                  	assert_closure(rax)
    42 000055A9 803805              <1>  cmp byte [%1], %2
    43 000055AC 0F8564290000        <1>  jne L_error_incorrect_type
  7738 000055B2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7739 000055B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7740 000055B8 50                      	push rax
  7741 000055B9 6A01                    	push 1
  7742 000055BB 488B4510                	mov rax, qword [rbp + 8 * 2]
  7743                                  
  7744 000055BF 488B00                                            	mov rax, qword[rax + 8 * 0]
  7745                                  
  7746 000055C2 488B00                                            	mov rax, qword[rax + 8 * 0]
  7747                                  	assert_closure(rax)
    42 000055C5 803805              <1>  cmp byte [%1], %2
    43 000055C8 0F8548290000        <1>  jne L_error_incorrect_type
  7748 000055CE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7749 000055D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7750 000055D4 50                      	push rax
  7751 000055D5 6A01                    	push 1
  7752 000055D7 488B4510                	mov rax, qword [rbp + 8 * 2]
  7753                                  
  7754 000055DB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7755                                  
  7756 000055DE 488B00                                            	mov rax, qword[rax + 8 * 0]
  7757 000055E1 50                      	push rax
  7758 000055E2 6A01                    	push 1
  7759 000055E4 488B4510                	mov rax, qword [rbp + 8 * 2]
  7760                                  
  7761 000055E8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7762                                  
  7763 000055EB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7764                                  	assert_closure(rax)
    42 000055EE 803805              <1>  cmp byte [%1], %2
    43 000055F1 0F851F290000        <1>  jne L_error_incorrect_type
  7765 000055F7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7766 000055FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  7767 000055FD 50                      	push rax
  7768 000055FE 6A01                    	push 1
  7769 00005600 488B4510                	mov rax, qword [rbp + 8 * 2]
  7770                                  
  7771 00005604 488B00                                            	mov rax, qword[rax + 8 * 0]
  7772                                  
  7773 00005607 488B00                                            	mov rax, qword[rax + 8 * 0]
  7774                                  	assert_closure(rax)
    42 0000560A 803805              <1>  cmp byte [%1], %2
    43 0000560D 0F8503290000        <1>  jne L_error_incorrect_type
  7775 00005613 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7776 00005616 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7777 00005619 50                      	push rax
  7778 0000561A 6A01                    	push 1
  7779 0000561C 488B4510                	mov rax, qword [rbp + 8 * 2]
  7780                                  
  7781 00005620 488B00                                            	mov rax, qword[rax + 8 * 0]
  7782                                  
  7783 00005623 488B00                                            	mov rax, qword[rax + 8 * 0]
  7784                                  	assert_closure(rax)
    42 00005626 803805              <1>  cmp byte [%1], %2
    43 00005629 0F85E7280000        <1>  jne L_error_incorrect_type
  7785 0000562F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7786 00005632 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7787 00005635 50                      	push rax
  7788 00005636 6A01                    	push 1
  7789 00005638 488B4510                	mov rax, qword [rbp + 8 * 2]
  7790                                  
  7791 0000563C 488B00                                            	mov rax, qword[rax + 8 * 0]
  7792                                  
  7793 0000563F 488B00                                            	mov rax, qword[rax + 8 * 0]
  7794 00005642 50                      	push rax
  7795 00005643 6A01                    	push 1
  7796 00005645 488B4510                	mov rax, qword [rbp + 8 * 2]
  7797                                  
  7798 00005649 488B00                                            	mov rax, qword[rax + 8 * 0]
  7799                                  
  7800 0000564C 488B00                                            	mov rax, qword[rax + 8 * 0]
  7801                                  	assert_closure(rax)
    42 0000564F 803805              <1>  cmp byte [%1], %2
    43 00005652 0F85BE280000        <1>  jne L_error_incorrect_type
  7802 00005658 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7803 0000565B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7804 0000565E 50                      	push rax
  7805 0000565F 6A01                    	push 1
  7806 00005661 488B4510                	mov rax, qword [rbp + 8 * 2]
  7807                                  
  7808 00005665 488B00                                            	mov rax, qword[rax + 8 * 0]
  7809                                  
  7810 00005668 488B00                                            	mov rax, qword[rax + 8 * 0]
  7811                                  	assert_closure(rax)
    42 0000566B 803805              <1>  cmp byte [%1], %2
    43 0000566E 0F85A2280000        <1>  jne L_error_incorrect_type
  7812 00005674 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7813 00005677 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7814 0000567A 50                      	push rax
  7815 0000567B 6A01                    	push 1
  7816 0000567D 488B4510                	mov rax, qword [rbp + 8 * 2]
  7817                                  
  7818 00005681 488B00                                            	mov rax, qword[rax + 8 * 0]
  7819                                  
  7820 00005684 488B00                                            	mov rax, qword[rax + 8 * 0]
  7821                                  	assert_closure(rax)
    42 00005687 803805              <1>  cmp byte [%1], %2
    43 0000568A 0F8586280000        <1>  jne L_error_incorrect_type
  7822 00005690 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7823 00005693 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7824 00005696 50                      	push rax
  7825 00005697 6A01                    	push 1
  7826 00005699 488B4510                	mov rax, qword [rbp + 8 * 2]
  7827                                  
  7828 0000569D 488B00                                            	mov rax, qword[rax + 8 * 0]
  7829                                  
  7830 000056A0 488B00                                            	mov rax, qword[rax + 8 * 0]
  7831                                  	assert_closure(rax)
    42 000056A3 803805              <1>  cmp byte [%1], %2
    43 000056A6 0F856A280000        <1>  jne L_error_incorrect_type
  7832 000056AC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7833 000056AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7834                                  	assert_closure(rax)
    42 000056B2 803805              <1>  cmp byte [%1], %2
    43 000056B5 0F855B280000        <1>  jne L_error_incorrect_type
  7835 000056BB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7836 000056BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7837                                  	assert_closure(rax)
    42 000056C1 803805              <1>  cmp byte [%1], %2
    43 000056C4 0F854C280000        <1>  jne L_error_incorrect_type
  7838 000056CA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7839 000056CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7840 000056D0 50                      	push rax
  7841 000056D1 6A01                    	push 1
  7842 000056D3 488B4510                	mov rax, qword [rbp + 8 * 2]
  7843                                  
  7844 000056D7 488B00                                            	mov rax, qword[rax + 8 * 0]
  7845                                  
  7846 000056DA 488B00                                            	mov rax, qword[rax + 8 * 0]
  7847 000056DD 50                      	push rax
  7848 000056DE 6A01                    	push 1
  7849 000056E0 488B4510                	mov rax, qword [rbp + 8 * 2]
  7850                                  
  7851 000056E4 488B00                                            	mov rax, qword[rax + 8 * 0]
  7852                                  
  7853 000056E7 488B00                                            	mov rax, qword[rax + 8 * 0]
  7854                                  	assert_closure(rax)
    42 000056EA 803805              <1>  cmp byte [%1], %2
    43 000056ED 0F8523280000        <1>  jne L_error_incorrect_type
  7855 000056F3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7856 000056F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7857 000056F9 50                      	push rax
  7858 000056FA 6A01                    	push 1
  7859 000056FC 488B4510                	mov rax, qword [rbp + 8 * 2]
  7860                                  
  7861 00005700 488B00                                            	mov rax, qword[rax + 8 * 0]
  7862                                  
  7863 00005703 488B00                                            	mov rax, qword[rax + 8 * 0]
  7864                                  	assert_closure(rax)
    42 00005706 803805              <1>  cmp byte [%1], %2
    43 00005709 0F8507280000        <1>  jne L_error_incorrect_type
  7865 0000570F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7866 00005712 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7867 00005715 50                      	push rax
  7868 00005716 6A01                    	push 1
  7869 00005718 488B4510                	mov rax, qword [rbp + 8 * 2]
  7870                                  
  7871 0000571C 488B00                                            	mov rax, qword[rax + 8 * 0]
  7872                                  
  7873 0000571F 488B00                                            	mov rax, qword[rax + 8 * 0]
  7874                                  	assert_closure(rax)
    42 00005722 803805              <1>  cmp byte [%1], %2
    43 00005725 0F85EB270000        <1>  jne L_error_incorrect_type
  7875 0000572B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7876 0000572E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7877 00005731 50                      	push rax
  7878 00005732 6A01                    	push 1
  7879 00005734 488B4510                	mov rax, qword [rbp + 8 * 2]
  7880                                  
  7881 00005738 488B00                                            	mov rax, qword[rax + 8 * 0]
  7882                                  
  7883 0000573B 488B00                                            	mov rax, qword[rax + 8 * 0]
  7884 0000573E 50                      	push rax
  7885 0000573F 6A01                    	push 1
  7886 00005741 488B4510                	mov rax, qword [rbp + 8 * 2]
  7887                                  
  7888 00005745 488B00                                            	mov rax, qword[rax + 8 * 0]
  7889                                  
  7890 00005748 488B00                                            	mov rax, qword[rax + 8 * 0]
  7891                                  	assert_closure(rax)
    42 0000574B 803805              <1>  cmp byte [%1], %2
    43 0000574E 0F85C2270000        <1>  jne L_error_incorrect_type
  7892 00005754 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7893 00005757 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7894 0000575A 50                      	push rax
  7895 0000575B 6A01                    	push 1
  7896 0000575D 488B4510                	mov rax, qword [rbp + 8 * 2]
  7897                                  
  7898 00005761 488B00                                            	mov rax, qword[rax + 8 * 0]
  7899                                  
  7900 00005764 488B00                                            	mov rax, qword[rax + 8 * 0]
  7901                                  	assert_closure(rax)
    42 00005767 803805              <1>  cmp byte [%1], %2
    43 0000576A 0F85A6270000        <1>  jne L_error_incorrect_type
  7902 00005770 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7903 00005773 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7904 00005776 50                      	push rax
  7905 00005777 6A01                    	push 1
  7906 00005779 488B4510                	mov rax, qword [rbp + 8 * 2]
  7907                                  
  7908 0000577D 488B00                                            	mov rax, qword[rax + 8 * 0]
  7909                                  
  7910 00005780 488B00                                            	mov rax, qword[rax + 8 * 0]
  7911                                  	assert_closure(rax)
    42 00005783 803805              <1>  cmp byte [%1], %2
    43 00005786 0F858A270000        <1>  jne L_error_incorrect_type
  7912 0000578C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7913 0000578F FF5009                  	call SOB_CLOSURE_CODE(rax)
  7914                                  	assert_closure(rax)
    42 00005792 803805              <1>  cmp byte [%1], %2
    43 00005795 0F857B270000        <1>  jne L_error_incorrect_type
  7915 0000579B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7916 0000579E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7917 000057A1 50                      	push rax
  7918 000057A2 6A01                    	push 1
  7919 000057A4 488B4510                	mov rax, qword [rbp + 8 * 2]
  7920                                  
  7921 000057A8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7922                                  
  7923 000057AB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7924 000057AE 50                      	push rax
  7925 000057AF 6A01                    	push 1
  7926 000057B1 488B4510                	mov rax, qword [rbp + 8 * 2]
  7927                                  
  7928 000057B5 488B00                                            	mov rax, qword[rax + 8 * 0]
  7929                                  
  7930 000057B8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7931                                  	assert_closure(rax)
    42 000057BB 803805              <1>  cmp byte [%1], %2
    43 000057BE 0F8552270000        <1>  jne L_error_incorrect_type
  7932 000057C4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7933 000057C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7934 000057CA 50                      	push rax
  7935 000057CB 6A01                    	push 1
  7936 000057CD 488B4510                	mov rax, qword [rbp + 8 * 2]
  7937                                  
  7938 000057D1 488B00                                            	mov rax, qword[rax + 8 * 0]
  7939                                  
  7940 000057D4 488B00                                            	mov rax, qword[rax + 8 * 0]
  7941                                  	assert_closure(rax)
    42 000057D7 803805              <1>  cmp byte [%1], %2
    43 000057DA 0F8536270000        <1>  jne L_error_incorrect_type
  7942 000057E0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7943 000057E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7944 000057E6 50                      	push rax
  7945 000057E7 6A01                    	push 1
  7946 000057E9 488B4510                	mov rax, qword [rbp + 8 * 2]
  7947                                  
  7948 000057ED 488B00                                            	mov rax, qword[rax + 8 * 0]
  7949                                  
  7950 000057F0 488B00                                            	mov rax, qword[rax + 8 * 0]
  7951                                  	assert_closure(rax)
    42 000057F3 803805              <1>  cmp byte [%1], %2
    43 000057F6 0F851A270000        <1>  jne L_error_incorrect_type
  7952 000057FC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7953 000057FF FF5009                  	call SOB_CLOSURE_CODE(rax)
  7954 00005802 50                      	push rax
  7955 00005803 6A01                    	push 1
  7956 00005805 488B4510                	mov rax, qword [rbp + 8 * 2]
  7957                                  
  7958 00005809 488B00                                            	mov rax, qword[rax + 8 * 0]
  7959                                  
  7960 0000580C 488B00                                            	mov rax, qword[rax + 8 * 0]
  7961                                  	assert_closure(rax)
    42 0000580F 803805              <1>  cmp byte [%1], %2
    43 00005812 0F85FE260000        <1>  jne L_error_incorrect_type
  7962 00005818 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7963 0000581B FF5009                  	call SOB_CLOSURE_CODE(rax)
  7964 0000581E 50                      	push rax
  7965 0000581F 6A01                    	push 1
  7966 00005821 488B4510                	mov rax, qword [rbp + 8 * 2]
  7967                                  
  7968 00005825 488B00                                            	mov rax, qword[rax + 8 * 0]
  7969                                  
  7970 00005828 488B00                                            	mov rax, qword[rax + 8 * 0]
  7971 0000582B 50                      	push rax
  7972 0000582C 6A01                    	push 1
  7973 0000582E 488B4510                	mov rax, qword [rbp + 8 * 2]
  7974                                  
  7975 00005832 488B00                                            	mov rax, qword[rax + 8 * 0]
  7976                                  
  7977 00005835 488B00                                            	mov rax, qword[rax + 8 * 0]
  7978                                  	assert_closure(rax)
    42 00005838 803805              <1>  cmp byte [%1], %2
    43 0000583B 0F85D5260000        <1>  jne L_error_incorrect_type
  7979 00005841 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7980 00005844 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7981 00005847 50                      	push rax
  7982 00005848 6A01                    	push 1
  7983 0000584A 488B4510                	mov rax, qword [rbp + 8 * 2]
  7984                                  
  7985 0000584E 488B00                                            	mov rax, qword[rax + 8 * 0]
  7986                                  
  7987 00005851 488B00                                            	mov rax, qword[rax + 8 * 0]
  7988                                  	assert_closure(rax)
    42 00005854 803805              <1>  cmp byte [%1], %2
    43 00005857 0F85B9260000        <1>  jne L_error_incorrect_type
  7989 0000585D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7990 00005860 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7991 00005863 50                      	push rax
  7992 00005864 6A01                    	push 1
  7993 00005866 488B4510                	mov rax, qword [rbp + 8 * 2]
  7994                                  
  7995 0000586A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7996                                  
  7997 0000586D 488B00                                            	mov rax, qword[rax + 8 * 0]
  7998                                  	assert_closure(rax)
    42 00005870 803805              <1>  cmp byte [%1], %2
    43 00005873 0F859D260000        <1>  jne L_error_incorrect_type
  7999 00005879 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8000 0000587C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8001 0000587F 50                      	push rax
  8002 00005880 6A01                    	push 1
  8003 00005882 488B4510                	mov rax, qword [rbp + 8 * 2]
  8004                                  
  8005 00005886 488B00                                            	mov rax, qword[rax + 8 * 0]
  8006                                  
  8007 00005889 488B00                                            	mov rax, qword[rax + 8 * 0]
  8008 0000588C 50                      	push rax
  8009 0000588D 6A01                    	push 1
  8010 0000588F 488B4510                	mov rax, qword [rbp + 8 * 2]
  8011                                  
  8012 00005893 488B00                                            	mov rax, qword[rax + 8 * 0]
  8013                                  
  8014 00005896 488B00                                            	mov rax, qword[rax + 8 * 0]
  8015                                  	assert_closure(rax)
    42 00005899 803805              <1>  cmp byte [%1], %2
    43 0000589C 0F8574260000        <1>  jne L_error_incorrect_type
  8016 000058A2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8017 000058A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8018 000058A8 50                      	push rax
  8019 000058A9 6A01                    	push 1
  8020 000058AB 488B4510                	mov rax, qword [rbp + 8 * 2]
  8021                                  
  8022 000058AF 488B00                                            	mov rax, qword[rax + 8 * 0]
  8023                                  
  8024 000058B2 488B00                                            	mov rax, qword[rax + 8 * 0]
  8025                                  	assert_closure(rax)
    42 000058B5 803805              <1>  cmp byte [%1], %2
    43 000058B8 0F8558260000        <1>  jne L_error_incorrect_type
  8026 000058BE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8027 000058C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8028 000058C4 50                      	push rax
  8029 000058C5 6A01                    	push 1
  8030 000058C7 488B4510                	mov rax, qword [rbp + 8 * 2]
  8031                                  
  8032 000058CB 488B00                                            	mov rax, qword[rax + 8 * 0]
  8033                                  
  8034 000058CE 488B00                                            	mov rax, qword[rax + 8 * 0]
  8035                                  	assert_closure(rax)
    42 000058D1 803805              <1>  cmp byte [%1], %2
    43 000058D4 0F853C260000        <1>  jne L_error_incorrect_type
  8036 000058DA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8037 000058DD FF5009                  	call SOB_CLOSURE_CODE(rax)
  8038                                  	assert_closure(rax)
    42 000058E0 803805              <1>  cmp byte [%1], %2
    43 000058E3 0F852D260000        <1>  jne L_error_incorrect_type
  8039 000058E9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8040 000058EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8041 000058EF 50                      	push rax
  8042 000058F0 6A01                    	push 1
  8043 000058F2 488B4510                	mov rax, qword [rbp + 8 * 2]
  8044                                  
  8045 000058F6 488B00                                            	mov rax, qword[rax + 8 * 0]
  8046                                  
  8047 000058F9 488B00                                            	mov rax, qword[rax + 8 * 0]
  8048 000058FC 50                      	push rax
  8049 000058FD 6A01                    	push 1
  8050 000058FF 488B4510                	mov rax, qword [rbp + 8 * 2]
  8051                                  
  8052 00005903 488B00                                            	mov rax, qword[rax + 8 * 0]
  8053                                  
  8054 00005906 488B00                                            	mov rax, qword[rax + 8 * 0]
  8055                                  	assert_closure(rax)
    42 00005909 803805              <1>  cmp byte [%1], %2
    43 0000590C 0F8504260000        <1>  jne L_error_incorrect_type
  8056 00005912 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8057 00005915 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8058 00005918 50                      	push rax
  8059 00005919 6A01                    	push 1
  8060 0000591B 488B4510                	mov rax, qword [rbp + 8 * 2]
  8061                                  
  8062 0000591F 488B00                                            	mov rax, qword[rax + 8 * 0]
  8063                                  
  8064 00005922 488B00                                            	mov rax, qword[rax + 8 * 0]
  8065                                  	assert_closure(rax)
    42 00005925 803805              <1>  cmp byte [%1], %2
    43 00005928 0F85E8250000        <1>  jne L_error_incorrect_type
  8066 0000592E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8067 00005931 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8068 00005934 50                      	push rax
  8069 00005935 6A01                    	push 1
  8070 00005937 488B4510                	mov rax, qword [rbp + 8 * 2]
  8071                                  
  8072 0000593B 488B00                                            	mov rax, qword[rax + 8 * 0]
  8073                                  
  8074 0000593E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8075                                  	assert_closure(rax)
    42 00005941 803805              <1>  cmp byte [%1], %2
    43 00005944 0F85CC250000        <1>  jne L_error_incorrect_type
  8076 0000594A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8077 0000594D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8078 00005950 50                      	push rax
  8079 00005951 6A01                    	push 1
  8080 00005953 488B4510                	mov rax, qword [rbp + 8 * 2]
  8081                                  
  8082 00005957 488B00                                            	mov rax, qword[rax + 8 * 0]
  8083                                  
  8084 0000595A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8085                                  	assert_closure(rax)
    42 0000595D 803805              <1>  cmp byte [%1], %2
    43 00005960 0F85B0250000        <1>  jne L_error_incorrect_type
  8086 00005966 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8087 00005969 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8088                                  	assert_closure(rax)
    42 0000596C 803805              <1>  cmp byte [%1], %2
    43 0000596F 0F85A1250000        <1>  jne L_error_incorrect_type
  8089 00005975 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8090 00005978 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8091                                  	assert_closure(rax)
    42 0000597B 803805              <1>  cmp byte [%1], %2
    43 0000597E 0F8592250000        <1>  jne L_error_incorrect_type
  8092 00005984 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8093 00005987 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8094 0000598A 50                      	push rax
  8095 0000598B 6A01                    	push 1
  8096 0000598D 488B4510                	mov rax, qword [rbp + 8 * 2]
  8097                                  
  8098 00005991 488B00                                            	mov rax, qword[rax + 8 * 0]
  8099                                  
  8100 00005994 488B00                                            	mov rax, qword[rax + 8 * 0]
  8101 00005997 50                      	push rax
  8102 00005998 6A01                    	push 1
  8103 0000599A 488B4510                	mov rax, qword [rbp + 8 * 2]
  8104                                  
  8105 0000599E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8106                                  
  8107 000059A1 488B00                                            	mov rax, qword[rax + 8 * 0]
  8108                                  	assert_closure(rax)
    42 000059A4 803805              <1>  cmp byte [%1], %2
    43 000059A7 0F8569250000        <1>  jne L_error_incorrect_type
  8109 000059AD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8110 000059B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8111 000059B3 50                      	push rax
  8112 000059B4 6A01                    	push 1
  8113 000059B6 488B4510                	mov rax, qword [rbp + 8 * 2]
  8114                                  
  8115 000059BA 488B00                                            	mov rax, qword[rax + 8 * 0]
  8116                                  
  8117 000059BD 488B00                                            	mov rax, qword[rax + 8 * 0]
  8118                                  	assert_closure(rax)
    42 000059C0 803805              <1>  cmp byte [%1], %2
    43 000059C3 0F854D250000        <1>  jne L_error_incorrect_type
  8119 000059C9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8120 000059CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8121 000059CF 50                      	push rax
  8122 000059D0 6A01                    	push 1
  8123 000059D2 488B4510                	mov rax, qword [rbp + 8 * 2]
  8124                                  
  8125 000059D6 488B00                                            	mov rax, qword[rax + 8 * 0]
  8126                                  
  8127 000059D9 488B00                                            	mov rax, qword[rax + 8 * 0]
  8128                                  	assert_closure(rax)
    42 000059DC 803805              <1>  cmp byte [%1], %2
    43 000059DF 0F8531250000        <1>  jne L_error_incorrect_type
  8129 000059E5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8130 000059E8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8131 000059EB 50                      	push rax
  8132 000059EC 6A01                    	push 1
  8133 000059EE 488B4510                	mov rax, qword [rbp + 8 * 2]
  8134                                  
  8135 000059F2 488B00                                            	mov rax, qword[rax + 8 * 0]
  8136                                  
  8137 000059F5 488B00                                            	mov rax, qword[rax + 8 * 0]
  8138                                  	assert_closure(rax)
    42 000059F8 803805              <1>  cmp byte [%1], %2
    43 000059FB 0F8515250000        <1>  jne L_error_incorrect_type
  8139 00005A01 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8140 00005A04 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8141 00005A07 50                      	push rax
  8142 00005A08 6A01                    	push 1
  8143 00005A0A 488B4510                	mov rax, qword [rbp + 8 * 2]
  8144                                  
  8145 00005A0E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8146                                  
  8147 00005A11 488B00                                            	mov rax, qword[rax + 8 * 0]
  8148 00005A14 50                      	push rax
  8149 00005A15 6A01                    	push 1
  8150 00005A17 488B4510                	mov rax, qword [rbp + 8 * 2]
  8151                                  
  8152 00005A1B 488B00                                            	mov rax, qword[rax + 8 * 0]
  8153                                  
  8154 00005A1E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8155                                  	assert_closure(rax)
    42 00005A21 803805              <1>  cmp byte [%1], %2
    43 00005A24 0F85EC240000        <1>  jne L_error_incorrect_type
  8156 00005A2A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8157 00005A2D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8158 00005A30 50                      	push rax
  8159 00005A31 6A01                    	push 1
  8160 00005A33 488B4510                	mov rax, qword [rbp + 8 * 2]
  8161                                  
  8162 00005A37 488B00                                            	mov rax, qword[rax + 8 * 0]
  8163                                  
  8164 00005A3A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8165                                  	assert_closure(rax)
    42 00005A3D 803805              <1>  cmp byte [%1], %2
    43 00005A40 0F85D0240000        <1>  jne L_error_incorrect_type
  8166 00005A46 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8167 00005A49 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8168 00005A4C 50                      	push rax
  8169 00005A4D 6A01                    	push 1
  8170 00005A4F 488B4510                	mov rax, qword [rbp + 8 * 2]
  8171                                  
  8172 00005A53 488B00                                            	mov rax, qword[rax + 8 * 0]
  8173                                  
  8174 00005A56 488B00                                            	mov rax, qword[rax + 8 * 0]
  8175                                  	assert_closure(rax)
    42 00005A59 803805              <1>  cmp byte [%1], %2
    43 00005A5C 0F85B4240000        <1>  jne L_error_incorrect_type
  8176 00005A62 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8177 00005A65 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8178                                  	assert_closure(rax)
    42 00005A68 803805              <1>  cmp byte [%1], %2
    43 00005A6B 0F85A5240000        <1>  jne L_error_incorrect_type
  8179 00005A71 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8180 00005A74 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8181 00005A77 50                      	push rax
  8182 00005A78 6A01                    	push 1
  8183 00005A7A 488B4510                	mov rax, qword [rbp + 8 * 2]
  8184                                  
  8185 00005A7E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8186                                  
  8187 00005A81 488B00                                            	mov rax, qword[rax + 8 * 0]
  8188 00005A84 50                      	push rax
  8189 00005A85 6A01                    	push 1
  8190 00005A87 488B4510                	mov rax, qword [rbp + 8 * 2]
  8191                                  
  8192 00005A8B 488B00                                            	mov rax, qword[rax + 8 * 0]
  8193                                  
  8194 00005A8E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8195                                  	assert_closure(rax)
    42 00005A91 803805              <1>  cmp byte [%1], %2
    43 00005A94 0F857C240000        <1>  jne L_error_incorrect_type
  8196 00005A9A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8197 00005A9D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8198 00005AA0 50                      	push rax
  8199 00005AA1 6A01                    	push 1
  8200 00005AA3 488B4510                	mov rax, qword [rbp + 8 * 2]
  8201                                  
  8202 00005AA7 488B00                                            	mov rax, qword[rax + 8 * 0]
  8203                                  
  8204 00005AAA 488B00                                            	mov rax, qword[rax + 8 * 0]
  8205                                  	assert_closure(rax)
    42 00005AAD 803805              <1>  cmp byte [%1], %2
    43 00005AB0 0F8560240000        <1>  jne L_error_incorrect_type
  8206 00005AB6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8207 00005AB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8208 00005ABC 50                      	push rax
  8209 00005ABD 6A01                    	push 1
  8210 00005ABF 488B4510                	mov rax, qword [rbp + 8 * 2]
  8211                                  
  8212 00005AC3 488B00                                            	mov rax, qword[rax + 8 * 0]
  8213                                  
  8214 00005AC6 488B00                                            	mov rax, qword[rax + 8 * 0]
  8215                                  	assert_closure(rax)
    42 00005AC9 803805              <1>  cmp byte [%1], %2
    43 00005ACC 0F8544240000        <1>  jne L_error_incorrect_type
  8216 00005AD2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8217 00005AD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8218 00005AD8 50                      	push rax
  8219 00005AD9 6A01                    	push 1
  8220 00005ADB 488B4510                	mov rax, qword [rbp + 8 * 2]
  8221                                  
  8222 00005ADF 488B00                                            	mov rax, qword[rax + 8 * 0]
  8223                                  
  8224 00005AE2 488B00                                            	mov rax, qword[rax + 8 * 0]
  8225                                  	assert_closure(rax)
    42 00005AE5 803805              <1>  cmp byte [%1], %2
    43 00005AE8 0F8528240000        <1>  jne L_error_incorrect_type
  8226 00005AEE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8227 00005AF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8228                                  	assert_closure(rax)
    42 00005AF4 803805              <1>  cmp byte [%1], %2
    43 00005AF7 0F8519240000        <1>  jne L_error_incorrect_type
  8229 00005AFD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8230 00005B00 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8231                                  	assert_closure(rax)
    42 00005B03 803805              <1>  cmp byte [%1], %2
    43 00005B06 0F850A240000        <1>  jne L_error_incorrect_type
  8232 00005B0C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8233 00005B0F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8234 00005B12 50                      	push rax
  8235 00005B13 6A01                    	push 1
  8236 00005B15 488B4510                	mov rax, qword [rbp + 8 * 2]
  8237                                  
  8238 00005B19 488B00                                            	mov rax, qword[rax + 8 * 0]
  8239                                  
  8240 00005B1C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8241 00005B1F 50                      	push rax
  8242 00005B20 6A01                    	push 1
  8243 00005B22 488B4510                	mov rax, qword [rbp + 8 * 2]
  8244                                  
  8245 00005B26 488B00                                            	mov rax, qword[rax + 8 * 0]
  8246                                  
  8247 00005B29 488B00                                            	mov rax, qword[rax + 8 * 0]
  8248                                  	assert_closure(rax)
    42 00005B2C 803805              <1>  cmp byte [%1], %2
    43 00005B2F 0F85E1230000        <1>  jne L_error_incorrect_type
  8249 00005B35 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8250 00005B38 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8251 00005B3B 50                      	push rax
  8252 00005B3C 6A01                    	push 1
  8253 00005B3E 488B4510                	mov rax, qword [rbp + 8 * 2]
  8254                                  
  8255 00005B42 488B00                                            	mov rax, qword[rax + 8 * 0]
  8256                                  
  8257 00005B45 488B00                                            	mov rax, qword[rax + 8 * 0]
  8258                                  	assert_closure(rax)
    42 00005B48 803805              <1>  cmp byte [%1], %2
    43 00005B4B 0F85C5230000        <1>  jne L_error_incorrect_type
  8259 00005B51 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8260 00005B54 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8261 00005B57 50                      	push rax
  8262 00005B58 6A01                    	push 1
  8263 00005B5A 488B4510                	mov rax, qword [rbp + 8 * 2]
  8264                                  
  8265 00005B5E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8266                                  
  8267 00005B61 488B00                                            	mov rax, qword[rax + 8 * 0]
  8268                                  	assert_closure(rax)
    42 00005B64 803805              <1>  cmp byte [%1], %2
    43 00005B67 0F85A9230000        <1>  jne L_error_incorrect_type
  8269 00005B6D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8270 00005B70 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8271 00005B73 50                      	push rax
  8272 00005B74 6A01                    	push 1
  8273 00005B76 488B4510                	mov rax, qword [rbp + 8 * 2]
  8274                                  
  8275 00005B7A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8276                                  
  8277 00005B7D 488B00                                            	mov rax, qword[rax + 8 * 0]
  8278                                  	assert_closure(rax)
    42 00005B80 803805              <1>  cmp byte [%1], %2
    43 00005B83 0F858D230000        <1>  jne L_error_incorrect_type
  8279 00005B89 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8280 00005B8C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8281                                  	assert_closure(rax)
    42 00005B8F 803805              <1>  cmp byte [%1], %2
    43 00005B92 0F857E230000        <1>  jne L_error_incorrect_type
  8282 00005B98 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8283 00005B9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8284                                  	assert_closure(rax)
    42 00005B9E 803805              <1>  cmp byte [%1], %2
    43 00005BA1 0F856F230000        <1>  jne L_error_incorrect_type
  8285 00005BA7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8286 00005BAA FF5009                  	call SOB_CLOSURE_CODE(rax)
  8287                                  	assert_closure(rax)
    42 00005BAD 803805              <1>  cmp byte [%1], %2
    43 00005BB0 0F8560230000        <1>  jne L_error_incorrect_type
  8288 00005BB6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8289 00005BB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8290                                  	assert_closure(rax)
    42 00005BBC 803805              <1>  cmp byte [%1], %2
    43 00005BBF 0F8551230000        <1>  jne L_error_incorrect_type
  8291 00005BC5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8292 00005BC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8293 00005BCB 50                      	push rax
  8294 00005BCC 6A01                    	push 1
  8295 00005BCE 488B4510                	mov rax, qword [rbp + 8 * 2]
  8296                                  
  8297 00005BD2 488B00                                            	mov rax, qword[rax + 8 * 0]
  8298                                  
  8299 00005BD5 488B00                                            	mov rax, qword[rax + 8 * 0]
  8300 00005BD8 50                      	push rax
  8301 00005BD9 6A01                    	push 1
  8302 00005BDB 488B4510                	mov rax, qword [rbp + 8 * 2]
  8303                                  
  8304 00005BDF 488B00                                            	mov rax, qword[rax + 8 * 0]
  8305                                  
  8306 00005BE2 488B00                                            	mov rax, qword[rax + 8 * 0]
  8307                                  	assert_closure(rax)
    42 00005BE5 803805              <1>  cmp byte [%1], %2
    43 00005BE8 0F8528230000        <1>  jne L_error_incorrect_type
  8308 00005BEE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8309 00005BF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8310 00005BF4 50                      	push rax
  8311 00005BF5 6A01                    	push 1
  8312 00005BF7 488B4510                	mov rax, qword [rbp + 8 * 2]
  8313                                  
  8314 00005BFB 488B00                                            	mov rax, qword[rax + 8 * 0]
  8315                                  
  8316 00005BFE 488B00                                            	mov rax, qword[rax + 8 * 0]
  8317                                  	assert_closure(rax)
    42 00005C01 803805              <1>  cmp byte [%1], %2
    43 00005C04 0F850C230000        <1>  jne L_error_incorrect_type
  8318 00005C0A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8319 00005C0D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8320 00005C10 50                      	push rax
  8321 00005C11 6A01                    	push 1
  8322 00005C13 488B4510                	mov rax, qword [rbp + 8 * 2]
  8323                                  
  8324 00005C17 488B00                                            	mov rax, qword[rax + 8 * 0]
  8325                                  
  8326 00005C1A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8327                                  	assert_closure(rax)
    42 00005C1D 803805              <1>  cmp byte [%1], %2
    43 00005C20 0F85F0220000        <1>  jne L_error_incorrect_type
  8328 00005C26 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8329 00005C29 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8330 00005C2C 50                      	push rax
  8331 00005C2D 6A01                    	push 1
  8332 00005C2F 488B4510                	mov rax, qword [rbp + 8 * 2]
  8333                                  
  8334 00005C33 488B00                                            	mov rax, qword[rax + 8 * 0]
  8335                                  
  8336 00005C36 488B00                                            	mov rax, qword[rax + 8 * 0]
  8337 00005C39 50                      	push rax
  8338 00005C3A 6A01                    	push 1
  8339 00005C3C 488B4510                	mov rax, qword [rbp + 8 * 2]
  8340                                  
  8341 00005C40 488B00                                            	mov rax, qword[rax + 8 * 0]
  8342                                  
  8343 00005C43 488B00                                            	mov rax, qword[rax + 8 * 0]
  8344                                  	assert_closure(rax)
    42 00005C46 803805              <1>  cmp byte [%1], %2
    43 00005C49 0F85C7220000        <1>  jne L_error_incorrect_type
  8345 00005C4F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8346 00005C52 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8347 00005C55 50                      	push rax
  8348 00005C56 6A01                    	push 1
  8349 00005C58 488B4510                	mov rax, qword [rbp + 8 * 2]
  8350                                  
  8351 00005C5C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8352                                  
  8353 00005C5F 488B00                                            	mov rax, qword[rax + 8 * 0]
  8354                                  	assert_closure(rax)
    42 00005C62 803805              <1>  cmp byte [%1], %2
    43 00005C65 0F85AB220000        <1>  jne L_error_incorrect_type
  8355 00005C6B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8356 00005C6E FF5009                  	call SOB_CLOSURE_CODE(rax)
  8357 00005C71 50                      	push rax
  8358 00005C72 6A01                    	push 1
  8359 00005C74 488B4510                	mov rax, qword [rbp + 8 * 2]
  8360                                  
  8361 00005C78 488B00                                            	mov rax, qword[rax + 8 * 0]
  8362                                  
  8363 00005C7B 488B00                                            	mov rax, qword[rax + 8 * 0]
  8364                                  	assert_closure(rax)
    42 00005C7E 803805              <1>  cmp byte [%1], %2
    43 00005C81 0F858F220000        <1>  jne L_error_incorrect_type
  8365 00005C87 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8366 00005C8A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8367                                  	assert_closure(rax)
    42 00005C8D 803805              <1>  cmp byte [%1], %2
    43 00005C90 0F8580220000        <1>  jne L_error_incorrect_type
  8368 00005C96 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8369 00005C99 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8370 00005C9C 50                      	push rax
  8371 00005C9D 6A01                    	push 1
  8372 00005C9F 488B4510                	mov rax, qword [rbp + 8 * 2]
  8373                                  
  8374 00005CA3 488B00                                            	mov rax, qword[rax + 8 * 0]
  8375                                  
  8376 00005CA6 488B00                                            	mov rax, qword[rax + 8 * 0]
  8377 00005CA9 50                      	push rax
  8378 00005CAA 6A01                    	push 1
  8379 00005CAC 488B4510                	mov rax, qword [rbp + 8 * 2]
  8380                                  
  8381 00005CB0 488B00                                            	mov rax, qword[rax + 8 * 0]
  8382                                  
  8383 00005CB3 488B00                                            	mov rax, qword[rax + 8 * 0]
  8384                                  	assert_closure(rax)
    42 00005CB6 803805              <1>  cmp byte [%1], %2
    43 00005CB9 0F8557220000        <1>  jne L_error_incorrect_type
  8385 00005CBF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8386 00005CC2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8387 00005CC5 50                      	push rax
  8388 00005CC6 6A01                    	push 1
  8389 00005CC8 488B4510                	mov rax, qword [rbp + 8 * 2]
  8390                                  
  8391 00005CCC 488B00                                            	mov rax, qword[rax + 8 * 0]
  8392                                  
  8393 00005CCF 488B00                                            	mov rax, qword[rax + 8 * 0]
  8394                                  	assert_closure(rax)
    42 00005CD2 803805              <1>  cmp byte [%1], %2
    43 00005CD5 0F853B220000        <1>  jne L_error_incorrect_type
  8395 00005CDB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8396 00005CDE FF5009                  	call SOB_CLOSURE_CODE(rax)
  8397 00005CE1 50                      	push rax
  8398 00005CE2 6A01                    	push 1
  8399 00005CE4 488B4510                	mov rax, qword [rbp + 8 * 2]
  8400                                  
  8401 00005CE8 488B00                                            	mov rax, qword[rax + 8 * 0]
  8402                                  
  8403 00005CEB 488B00                                            	mov rax, qword[rax + 8 * 0]
  8404                                  	assert_closure(rax)
    42 00005CEE 803805              <1>  cmp byte [%1], %2
    43 00005CF1 0F851F220000        <1>  jne L_error_incorrect_type
  8405 00005CF7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8406 00005CFA FF5009                  	call SOB_CLOSURE_CODE(rax)
  8407 00005CFD 50                      	push rax
  8408 00005CFE 6A01                    	push 1
  8409 00005D00 488B4510                	mov rax, qword [rbp + 8 * 2]
  8410                                  
  8411 00005D04 488B00                                            	mov rax, qword[rax + 8 * 0]
  8412                                  
  8413 00005D07 488B00                                            	mov rax, qword[rax + 8 * 0]
  8414                                  	assert_closure(rax)
    42 00005D0A 803805              <1>  cmp byte [%1], %2
    43 00005D0D 0F8503220000        <1>  jne L_error_incorrect_type
  8415 00005D13 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8416 00005D16 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8417 00005D19 50                      	push rax
  8418 00005D1A 6A01                    	push 1
  8419 00005D1C 488B4510                	mov rax, qword [rbp + 8 * 2]
  8420                                  
  8421 00005D20 488B00                                            	mov rax, qword[rax + 8 * 0]
  8422                                  
  8423 00005D23 488B00                                            	mov rax, qword[rax + 8 * 0]
  8424 00005D26 50                      	push rax
  8425 00005D27 6A01                    	push 1
  8426 00005D29 488B4510                	mov rax, qword [rbp + 8 * 2]
  8427                                  
  8428 00005D2D 488B00                                            	mov rax, qword[rax + 8 * 0]
  8429                                  
  8430 00005D30 488B00                                            	mov rax, qword[rax + 8 * 0]
  8431                                  	assert_closure(rax)
    42 00005D33 803805              <1>  cmp byte [%1], %2
    43 00005D36 0F85DA210000        <1>  jne L_error_incorrect_type
  8432 00005D3C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8433 00005D3F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8434 00005D42 50                      	push rax
  8435 00005D43 6A01                    	push 1
  8436 00005D45 488B4510                	mov rax, qword [rbp + 8 * 2]
  8437                                  
  8438 00005D49 488B00                                            	mov rax, qword[rax + 8 * 0]
  8439                                  
  8440 00005D4C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8441                                  	assert_closure(rax)
    42 00005D4F 803805              <1>  cmp byte [%1], %2
    43 00005D52 0F85BE210000        <1>  jne L_error_incorrect_type
  8442 00005D58 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8443 00005D5B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8444 00005D5E 50                      	push rax
  8445 00005D5F 6A01                    	push 1
  8446 00005D61 488B4510                	mov rax, qword [rbp + 8 * 2]
  8447                                  
  8448 00005D65 488B00                                            	mov rax, qword[rax + 8 * 0]
  8449                                  
  8450 00005D68 488B00                                            	mov rax, qword[rax + 8 * 0]
  8451                                  	assert_closure(rax)
    42 00005D6B 803805              <1>  cmp byte [%1], %2
    43 00005D6E 0F85A2210000        <1>  jne L_error_incorrect_type
  8452 00005D74 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8453 00005D77 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8454 00005D7A 50                      	push rax
  8455 00005D7B 6A01                    	push 1
  8456 00005D7D 488B4510                	mov rax, qword [rbp + 8 * 2]
  8457                                  
  8458 00005D81 488B00                                            	mov rax, qword[rax + 8 * 0]
  8459                                  
  8460 00005D84 488B00                                            	mov rax, qword[rax + 8 * 0]
  8461 00005D87 50                      	push rax
  8462 00005D88 6A01                    	push 1
  8463 00005D8A 488B4510                	mov rax, qword [rbp + 8 * 2]
  8464                                  
  8465 00005D8E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8466                                  
  8467 00005D91 488B00                                            	mov rax, qword[rax + 8 * 0]
  8468                                  	assert_closure(rax)
    42 00005D94 803805              <1>  cmp byte [%1], %2
    43 00005D97 0F8579210000        <1>  jne L_error_incorrect_type
  8469 00005D9D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8470 00005DA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8471 00005DA3 50                      	push rax
  8472 00005DA4 6A01                    	push 1
  8473 00005DA6 488B4510                	mov rax, qword [rbp + 8 * 2]
  8474                                  
  8475 00005DAA 488B00                                            	mov rax, qword[rax + 8 * 0]
  8476                                  
  8477 00005DAD 488B00                                            	mov rax, qword[rax + 8 * 0]
  8478                                  	assert_closure(rax)
    42 00005DB0 803805              <1>  cmp byte [%1], %2
    43 00005DB3 0F855D210000        <1>  jne L_error_incorrect_type
  8479 00005DB9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8480 00005DBC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8481 00005DBF 50                      	push rax
  8482 00005DC0 6A01                    	push 1
  8483 00005DC2 488B4510                	mov rax, qword [rbp + 8 * 2]
  8484                                  
  8485 00005DC6 488B00                                            	mov rax, qword[rax + 8 * 0]
  8486                                  
  8487 00005DC9 488B00                                            	mov rax, qword[rax + 8 * 0]
  8488                                  	assert_closure(rax)
    42 00005DCC 803805              <1>  cmp byte [%1], %2
    43 00005DCF 0F8541210000        <1>  jne L_error_incorrect_type
  8489 00005DD5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8490 00005DD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8491                                  	assert_closure(rax)
    42 00005DDB 803805              <1>  cmp byte [%1], %2
    43 00005DDE 0F8532210000        <1>  jne L_error_incorrect_type
  8492 00005DE4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8493 00005DE7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8494 00005DEA 50                      	push rax
  8495 00005DEB 6A01                    	push 1
  8496 00005DED 488B4510                	mov rax, qword [rbp + 8 * 2]
  8497                                  
  8498 00005DF1 488B00                                            	mov rax, qword[rax + 8 * 0]
  8499                                  
  8500 00005DF4 488B00                                            	mov rax, qword[rax + 8 * 0]
  8501 00005DF7 50                      	push rax
  8502 00005DF8 6A01                    	push 1
  8503 00005DFA 488B4510                	mov rax, qword [rbp + 8 * 2]
  8504                                  
  8505 00005DFE 488B00                                            	mov rax, qword[rax + 8 * 0]
  8506                                  
  8507 00005E01 488B00                                            	mov rax, qword[rax + 8 * 0]
  8508                                  	assert_closure(rax)
    42 00005E04 803805              <1>  cmp byte [%1], %2
    43 00005E07 0F8509210000        <1>  jne L_error_incorrect_type
  8509 00005E0D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8510 00005E10 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8511 00005E13 50                      	push rax
  8512 00005E14 6A01                    	push 1
  8513 00005E16 488B4510                	mov rax, qword [rbp + 8 * 2]
  8514                                  
  8515 00005E1A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8516                                  
  8517 00005E1D 488B00                                            	mov rax, qword[rax + 8 * 0]
  8518                                  	assert_closure(rax)
    42 00005E20 803805              <1>  cmp byte [%1], %2
    43 00005E23 0F85ED200000        <1>  jne L_error_incorrect_type
  8519 00005E29 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8520 00005E2C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8521 00005E2F 50                      	push rax
  8522 00005E30 6A01                    	push 1
  8523 00005E32 488B4510                	mov rax, qword [rbp + 8 * 2]
  8524                                  
  8525 00005E36 488B00                                            	mov rax, qword[rax + 8 * 0]
  8526                                  
  8527 00005E39 488B00                                            	mov rax, qword[rax + 8 * 0]
  8528                                  	assert_closure(rax)
    42 00005E3C 803805              <1>  cmp byte [%1], %2
    43 00005E3F 0F85D1200000        <1>  jne L_error_incorrect_type
  8529 00005E45 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8530 00005E48 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8531 00005E4B 50                      	push rax
  8532 00005E4C 6A01                    	push 1
  8533 00005E4E 488B4510                	mov rax, qword [rbp + 8 * 2]
  8534                                  
  8535 00005E52 488B00                                            	mov rax, qword[rax + 8 * 0]
  8536                                  
  8537 00005E55 488B00                                            	mov rax, qword[rax + 8 * 0]
  8538                                  	assert_closure(rax)
    42 00005E58 803805              <1>  cmp byte [%1], %2
    43 00005E5B 0F85B5200000        <1>  jne L_error_incorrect_type
  8539 00005E61 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8540 00005E64 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8541                                  	assert_closure(rax)
    42 00005E67 803805              <1>  cmp byte [%1], %2
    43 00005E6A 0F85A6200000        <1>  jne L_error_incorrect_type
  8542 00005E70 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8543 00005E73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8544                                  	assert_closure(rax)
    42 00005E76 803805              <1>  cmp byte [%1], %2
    43 00005E79 0F8597200000        <1>  jne L_error_incorrect_type
  8545 00005E7F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8546 00005E82 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8547 00005E85 50                      	push rax
  8548 00005E86 6A01                    	push 1
  8549 00005E88 488B4510                	mov rax, qword [rbp + 8 * 2]
  8550                                  
  8551 00005E8C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8552                                  
  8553 00005E8F 488B00                                            	mov rax, qword[rax + 8 * 0]
  8554 00005E92 50                      	push rax
  8555 00005E93 6A01                    	push 1
  8556 00005E95 488B4510                	mov rax, qword [rbp + 8 * 2]
  8557                                  
  8558 00005E99 488B00                                            	mov rax, qword[rax + 8 * 0]
  8559                                  
  8560 00005E9C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8561                                  	assert_closure(rax)
    42 00005E9F 803805              <1>  cmp byte [%1], %2
    43 00005EA2 0F856E200000        <1>  jne L_error_incorrect_type
  8562 00005EA8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8563 00005EAB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8564 00005EAE 50                      	push rax
  8565 00005EAF 6A01                    	push 1
  8566 00005EB1 488B4510                	mov rax, qword [rbp + 8 * 2]
  8567                                  
  8568 00005EB5 488B00                                            	mov rax, qword[rax + 8 * 0]
  8569                                  
  8570 00005EB8 488B00                                            	mov rax, qword[rax + 8 * 0]
  8571                                  	assert_closure(rax)
    42 00005EBB 803805              <1>  cmp byte [%1], %2
    43 00005EBE 0F8552200000        <1>  jne L_error_incorrect_type
  8572 00005EC4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8573 00005EC7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8574 00005ECA 50                      	push rax
  8575 00005ECB 6A01                    	push 1
  8576 00005ECD 488B4510                	mov rax, qword [rbp + 8 * 2]
  8577                                  
  8578 00005ED1 488B00                                            	mov rax, qword[rax + 8 * 0]
  8579                                  
  8580 00005ED4 488B00                                            	mov rax, qword[rax + 8 * 0]
  8581                                  	assert_closure(rax)
    42 00005ED7 803805              <1>  cmp byte [%1], %2
    43 00005EDA 0F8536200000        <1>  jne L_error_incorrect_type
  8582 00005EE0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8583 00005EE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8584 00005EE6 50                      	push rax
  8585 00005EE7 6A01                    	push 1
  8586 00005EE9 488B4510                	mov rax, qword [rbp + 8 * 2]
  8587                                  
  8588 00005EED 488B00                                            	mov rax, qword[rax + 8 * 0]
  8589                                  
  8590 00005EF0 488B00                                            	mov rax, qword[rax + 8 * 0]
  8591                                  	assert_closure(rax)
    42 00005EF3 803805              <1>  cmp byte [%1], %2
    43 00005EF6 0F851A200000        <1>  jne L_error_incorrect_type
  8592 00005EFC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8593 00005EFF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8594 00005F02 50                      	push rax
  8595 00005F03 6A01                    	push 1
  8596 00005F05 488B4510                	mov rax, qword [rbp + 8 * 2]
  8597                                  
  8598 00005F09 488B00                                            	mov rax, qword[rax + 8 * 0]
  8599                                  
  8600 00005F0C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8601 00005F0F 50                      	push rax
  8602 00005F10 6A01                    	push 1
  8603 00005F12 488B4510                	mov rax, qword [rbp + 8 * 2]
  8604                                  
  8605 00005F16 488B00                                            	mov rax, qword[rax + 8 * 0]
  8606                                  
  8607 00005F19 488B00                                            	mov rax, qword[rax + 8 * 0]
  8608                                  	assert_closure(rax)
    42 00005F1C 803805              <1>  cmp byte [%1], %2
    43 00005F1F 0F85F11F0000        <1>  jne L_error_incorrect_type
  8609 00005F25 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8610 00005F28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8611 00005F2B 50                      	push rax
  8612 00005F2C 6A01                    	push 1
  8613 00005F2E 488B4510                	mov rax, qword [rbp + 8 * 2]
  8614                                  
  8615 00005F32 488B00                                            	mov rax, qword[rax + 8 * 0]
  8616                                  
  8617 00005F35 488B00                                            	mov rax, qword[rax + 8 * 0]
  8618                                  	assert_closure(rax)
    42 00005F38 803805              <1>  cmp byte [%1], %2
    43 00005F3B 0F85D51F0000        <1>  jne L_error_incorrect_type
  8619 00005F41 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8620 00005F44 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8621 00005F47 50                      	push rax
  8622 00005F48 6A01                    	push 1
  8623 00005F4A 488B4510                	mov rax, qword [rbp + 8 * 2]
  8624                                  
  8625 00005F4E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8626                                  
  8627 00005F51 488B00                                            	mov rax, qword[rax + 8 * 0]
  8628                                  	assert_closure(rax)
    42 00005F54 803805              <1>  cmp byte [%1], %2
    43 00005F57 0F85B91F0000        <1>  jne L_error_incorrect_type
  8629 00005F5D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8630 00005F60 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8631                                  	assert_closure(rax)
    42 00005F63 803805              <1>  cmp byte [%1], %2
    43 00005F66 0F85AA1F0000        <1>  jne L_error_incorrect_type
  8632 00005F6C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8633 00005F6F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8634 00005F72 50                      	push rax
  8635 00005F73 6A01                    	push 1
  8636 00005F75 488B4510                	mov rax, qword [rbp + 8 * 2]
  8637                                  
  8638 00005F79 488B00                                            	mov rax, qword[rax + 8 * 0]
  8639                                  
  8640 00005F7C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8641 00005F7F 50                      	push rax
  8642 00005F80 6A01                    	push 1
  8643 00005F82 488B4510                	mov rax, qword [rbp + 8 * 2]
  8644                                  
  8645 00005F86 488B00                                            	mov rax, qword[rax + 8 * 0]
  8646                                  
  8647 00005F89 488B00                                            	mov rax, qword[rax + 8 * 0]
  8648                                  	assert_closure(rax)
    42 00005F8C 803805              <1>  cmp byte [%1], %2
    43 00005F8F 0F85811F0000        <1>  jne L_error_incorrect_type
  8649 00005F95 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8650 00005F98 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8651 00005F9B 50                      	push rax
  8652 00005F9C 6A01                    	push 1
  8653 00005F9E 488B4510                	mov rax, qword [rbp + 8 * 2]
  8654                                  
  8655 00005FA2 488B00                                            	mov rax, qword[rax + 8 * 0]
  8656                                  
  8657 00005FA5 488B00                                            	mov rax, qword[rax + 8 * 0]
  8658                                  	assert_closure(rax)
    42 00005FA8 803805              <1>  cmp byte [%1], %2
    43 00005FAB 0F85651F0000        <1>  jne L_error_incorrect_type
  8659 00005FB1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8660 00005FB4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8661 00005FB7 50                      	push rax
  8662 00005FB8 6A01                    	push 1
  8663 00005FBA 488B4510                	mov rax, qword [rbp + 8 * 2]
  8664                                  
  8665 00005FBE 488B00                                            	mov rax, qword[rax + 8 * 0]
  8666                                  
  8667 00005FC1 488B00                                            	mov rax, qword[rax + 8 * 0]
  8668                                  	assert_closure(rax)
    42 00005FC4 803805              <1>  cmp byte [%1], %2
    43 00005FC7 0F85491F0000        <1>  jne L_error_incorrect_type
  8669 00005FCD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8670 00005FD0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8671 00005FD3 50                      	push rax
  8672 00005FD4 6A01                    	push 1
  8673 00005FD6 488B4510                	mov rax, qword [rbp + 8 * 2]
  8674                                  
  8675 00005FDA 488B00                                            	mov rax, qword[rax + 8 * 0]
  8676                                  
  8677 00005FDD 488B00                                            	mov rax, qword[rax + 8 * 0]
  8678                                  	assert_closure(rax)
    42 00005FE0 803805              <1>  cmp byte [%1], %2
    43 00005FE3 0F852D1F0000        <1>  jne L_error_incorrect_type
  8679 00005FE9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8680 00005FEC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8681                                  	assert_closure(rax)
    42 00005FEF 803805              <1>  cmp byte [%1], %2
    43 00005FF2 0F851E1F0000        <1>  jne L_error_incorrect_type
  8682 00005FF8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8683 00005FFB FF5009                  	call SOB_CLOSURE_CODE(rax)
  8684                                  	assert_closure(rax)
    42 00005FFE 803805              <1>  cmp byte [%1], %2
    43 00006001 0F850F1F0000        <1>  jne L_error_incorrect_type
  8685 00006007 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8686 0000600A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8687 0000600D 50                      	push rax
  8688 0000600E 6A01                    	push 1
  8689 00006010 488B4510                	mov rax, qword [rbp + 8 * 2]
  8690                                  
  8691 00006014 488B00                                            	mov rax, qword[rax + 8 * 0]
  8692                                  
  8693 00006017 488B00                                            	mov rax, qword[rax + 8 * 0]
  8694 0000601A 50                      	push rax
  8695 0000601B 6A01                    	push 1
  8696 0000601D 488B4510                	mov rax, qword [rbp + 8 * 2]
  8697                                  
  8698 00006021 488B00                                            	mov rax, qword[rax + 8 * 0]
  8699                                  
  8700 00006024 488B00                                            	mov rax, qword[rax + 8 * 0]
  8701                                  	assert_closure(rax)
    42 00006027 803805              <1>  cmp byte [%1], %2
    43 0000602A 0F85E61E0000        <1>  jne L_error_incorrect_type
  8702 00006030 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8703 00006033 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8704 00006036 50                      	push rax
  8705 00006037 6A01                    	push 1
  8706 00006039 488B4510                	mov rax, qword [rbp + 8 * 2]
  8707                                  
  8708 0000603D 488B00                                            	mov rax, qword[rax + 8 * 0]
  8709                                  
  8710 00006040 488B00                                            	mov rax, qword[rax + 8 * 0]
  8711                                  	assert_closure(rax)
    42 00006043 803805              <1>  cmp byte [%1], %2
    43 00006046 0F85CA1E0000        <1>  jne L_error_incorrect_type
  8712 0000604C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8713 0000604F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8714 00006052 50                      	push rax
  8715 00006053 6A01                    	push 1
  8716 00006055 488B4510                	mov rax, qword [rbp + 8 * 2]
  8717                                  
  8718 00006059 488B00                                            	mov rax, qword[rax + 8 * 0]
  8719                                  
  8720 0000605C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8721                                  	assert_closure(rax)
    42 0000605F 803805              <1>  cmp byte [%1], %2
    43 00006062 0F85AE1E0000        <1>  jne L_error_incorrect_type
  8722 00006068 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8723 0000606B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8724 0000606E 50                      	push rax
  8725 0000606F 6A01                    	push 1
  8726 00006071 488B4510                	mov rax, qword [rbp + 8 * 2]
  8727                                  
  8728 00006075 488B00                                            	mov rax, qword[rax + 8 * 0]
  8729                                  
  8730 00006078 488B00                                            	mov rax, qword[rax + 8 * 0]
  8731                                  	assert_closure(rax)
    42 0000607B 803805              <1>  cmp byte [%1], %2
    43 0000607E 0F85921E0000        <1>  jne L_error_incorrect_type
  8732 00006084 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8733 00006087 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8734                                  	assert_closure(rax)
    42 0000608A 803805              <1>  cmp byte [%1], %2
    43 0000608D 0F85831E0000        <1>  jne L_error_incorrect_type
  8735 00006093 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8736 00006096 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8737                                  	assert_closure(rax)
    42 00006099 803805              <1>  cmp byte [%1], %2
    43 0000609C 0F85741E0000        <1>  jne L_error_incorrect_type
  8738 000060A2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8739 000060A5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8740                                  	assert_closure(rax)
    42 000060A8 803805              <1>  cmp byte [%1], %2
    43 000060AB 0F85651E0000        <1>  jne L_error_incorrect_type
  8741 000060B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8742 000060B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8743                                  	assert_closure(rax)
    42 000060B7 803805              <1>  cmp byte [%1], %2
    43 000060BA 0F85561E0000        <1>  jne L_error_incorrect_type
  8744 000060C0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8745 000060C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8746 000060C6 50                      	push rax
  8747 000060C7 6A01                    	push 1
  8748 000060C9 488B4510                	mov rax, qword [rbp + 8 * 2]
  8749                                  
  8750 000060CD 488B00                                            	mov rax, qword[rax + 8 * 0]
  8751                                  
  8752 000060D0 488B00                                            	mov rax, qword[rax + 8 * 0]
  8753 000060D3 50                      	push rax
  8754 000060D4 6A01                    	push 1
  8755 000060D6 488B4510                	mov rax, qword [rbp + 8 * 2]
  8756                                  
  8757 000060DA 488B00                                            	mov rax, qword[rax + 8 * 0]
  8758                                  
  8759 000060DD 488B00                                            	mov rax, qword[rax + 8 * 0]
  8760                                  	assert_closure(rax)
    42 000060E0 803805              <1>  cmp byte [%1], %2
    43 000060E3 0F852D1E0000        <1>  jne L_error_incorrect_type
  8761 000060E9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8762 000060EC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8763 000060EF 50                      	push rax
  8764 000060F0 6A01                    	push 1
  8765 000060F2 488B4510                	mov rax, qword [rbp + 8 * 2]
  8766                                  
  8767 000060F6 488B00                                            	mov rax, qword[rax + 8 * 0]
  8768                                  
  8769 000060F9 488B00                                            	mov rax, qword[rax + 8 * 0]
  8770                                  	assert_closure(rax)
    42 000060FC 803805              <1>  cmp byte [%1], %2
    43 000060FF 0F85111E0000        <1>  jne L_error_incorrect_type
  8771 00006105 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8772 00006108 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8773 0000610B 50                      	push rax
  8774 0000610C 6A01                    	push 1
  8775 0000610E 488B4510                	mov rax, qword [rbp + 8 * 2]
  8776                                  
  8777 00006112 488B00                                            	mov rax, qword[rax + 8 * 0]
  8778                                  
  8779 00006115 488B00                                            	mov rax, qword[rax + 8 * 0]
  8780                                  	assert_closure(rax)
    42 00006118 803805              <1>  cmp byte [%1], %2
    43 0000611B 0F85F51D0000        <1>  jne L_error_incorrect_type
  8781 00006121 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8782 00006124 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8783 00006127 50                      	push rax
  8784 00006128 6A01                    	push 1
  8785 0000612A 488B4510                	mov rax, qword [rbp + 8 * 2]
  8786                                  
  8787 0000612E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8788                                  
  8789 00006131 488B00                                            	mov rax, qword[rax + 8 * 0]
  8790 00006134 50                      	push rax
  8791 00006135 6A01                    	push 1
  8792 00006137 488B4510                	mov rax, qword [rbp + 8 * 2]
  8793                                  
  8794 0000613B 488B00                                            	mov rax, qword[rax + 8 * 0]
  8795                                  
  8796 0000613E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8797                                  	assert_closure(rax)
    42 00006141 803805              <1>  cmp byte [%1], %2
    43 00006144 0F85CC1D0000        <1>  jne L_error_incorrect_type
  8798 0000614A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8799 0000614D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8800 00006150 50                      	push rax
  8801 00006151 6A01                    	push 1
  8802 00006153 488B4510                	mov rax, qword [rbp + 8 * 2]
  8803                                  
  8804 00006157 488B00                                            	mov rax, qword[rax + 8 * 0]
  8805                                  
  8806 0000615A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8807                                  	assert_closure(rax)
    42 0000615D 803805              <1>  cmp byte [%1], %2
    43 00006160 0F85B01D0000        <1>  jne L_error_incorrect_type
  8808 00006166 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8809 00006169 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8810 0000616C 50                      	push rax
  8811 0000616D 6A01                    	push 1
  8812 0000616F 488B4510                	mov rax, qword [rbp + 8 * 2]
  8813                                  
  8814 00006173 488B00                                            	mov rax, qword[rax + 8 * 0]
  8815                                  
  8816 00006176 488B00                                            	mov rax, qword[rax + 8 * 0]
  8817                                  	assert_closure(rax)
    42 00006179 803805              <1>  cmp byte [%1], %2
    43 0000617C 0F85941D0000        <1>  jne L_error_incorrect_type
  8818 00006182 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8819 00006185 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8820                                  	assert_closure(rax)
    42 00006188 803805              <1>  cmp byte [%1], %2
    43 0000618B 0F85851D0000        <1>  jne L_error_incorrect_type
  8821 00006191 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8822 00006194 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8823 00006197 50                      	push rax
  8824 00006198 6A01                    	push 1
  8825 0000619A 488B4510                	mov rax, qword [rbp + 8 * 2]
  8826                                  
  8827 0000619E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8828                                  
  8829 000061A1 488B00                                            	mov rax, qword[rax + 8 * 0]
  8830 000061A4 50                      	push rax
  8831 000061A5 6A01                    	push 1
  8832 000061A7 488B4510                	mov rax, qword [rbp + 8 * 2]
  8833                                  
  8834 000061AB 488B00                                            	mov rax, qword[rax + 8 * 0]
  8835                                  
  8836 000061AE 488B00                                            	mov rax, qword[rax + 8 * 0]
  8837                                  	assert_closure(rax)
    42 000061B1 803805              <1>  cmp byte [%1], %2
    43 000061B4 0F855C1D0000        <1>  jne L_error_incorrect_type
  8838 000061BA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8839 000061BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  8840 000061C0 50                      	push rax
  8841 000061C1 6A01                    	push 1
  8842 000061C3 488B4510                	mov rax, qword [rbp + 8 * 2]
  8843                                  
  8844 000061C7 488B00                                            	mov rax, qword[rax + 8 * 0]
  8845                                  
  8846 000061CA 488B00                                            	mov rax, qword[rax + 8 * 0]
  8847                                  	assert_closure(rax)
    42 000061CD 803805              <1>  cmp byte [%1], %2
    43 000061D0 0F85401D0000        <1>  jne L_error_incorrect_type
  8848 000061D6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8849 000061D9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8850 000061DC 50                      	push rax
  8851 000061DD 6A01                    	push 1
  8852 000061DF 488B4510                	mov rax, qword [rbp + 8 * 2]
  8853                                  
  8854 000061E3 488B00                                            	mov rax, qword[rax + 8 * 0]
  8855                                  
  8856 000061E6 488B00                                            	mov rax, qword[rax + 8 * 0]
  8857                                  	assert_closure(rax)
    42 000061E9 803805              <1>  cmp byte [%1], %2
    43 000061EC 0F85241D0000        <1>  jne L_error_incorrect_type
  8858 000061F2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8859 000061F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8860 000061F8 50                      	push rax
  8861 000061F9 6A01                    	push 1
  8862 000061FB 488B4510                	mov rax, qword [rbp + 8 * 2]
  8863                                  
  8864 000061FF 488B00                                            	mov rax, qword[rax + 8 * 0]
  8865                                  
  8866 00006202 488B00                                            	mov rax, qword[rax + 8 * 0]
  8867                                  	assert_closure(rax)
    42 00006205 803805              <1>  cmp byte [%1], %2
    43 00006208 0F85081D0000        <1>  jne L_error_incorrect_type
  8868 0000620E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8869 00006211 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8870 00006214 50                      	push rax
  8871 00006215 6A01                    	push 1
  8872 00006217 488B4510                	mov rax, qword [rbp + 8 * 2]
  8873                                  
  8874 0000621B 488B00                                            	mov rax, qword[rax + 8 * 0]
  8875                                  
  8876 0000621E 488B00                                            	mov rax, qword[rax + 8 * 0]
  8877 00006221 50                      	push rax
  8878 00006222 6A01                    	push 1
  8879 00006224 488B4510                	mov rax, qword [rbp + 8 * 2]
  8880                                  
  8881 00006228 488B00                                            	mov rax, qword[rax + 8 * 0]
  8882                                  
  8883 0000622B 488B00                                            	mov rax, qword[rax + 8 * 0]
  8884                                  	assert_closure(rax)
    42 0000622E 803805              <1>  cmp byte [%1], %2
    43 00006231 0F85DF1C0000        <1>  jne L_error_incorrect_type
  8885 00006237 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8886 0000623A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8887 0000623D 50                      	push rax
  8888 0000623E 6A01                    	push 1
  8889 00006240 488B4510                	mov rax, qword [rbp + 8 * 2]
  8890                                  
  8891 00006244 488B00                                            	mov rax, qword[rax + 8 * 0]
  8892                                  
  8893 00006247 488B00                                            	mov rax, qword[rax + 8 * 0]
  8894                                  	assert_closure(rax)
    42 0000624A 803805              <1>  cmp byte [%1], %2
    43 0000624D 0F85C31C0000        <1>  jne L_error_incorrect_type
  8895 00006253 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8896 00006256 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8897 00006259 50                      	push rax
  8898 0000625A 6A01                    	push 1
  8899 0000625C 488B4510                	mov rax, qword [rbp + 8 * 2]
  8900                                  
  8901 00006260 488B00                                            	mov rax, qword[rax + 8 * 0]
  8902                                  
  8903 00006263 488B00                                            	mov rax, qword[rax + 8 * 0]
  8904                                  	assert_closure(rax)
    42 00006266 803805              <1>  cmp byte [%1], %2
    43 00006269 0F85A71C0000        <1>  jne L_error_incorrect_type
  8905 0000626F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8906 00006272 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8907 00006275 50                      	push rax
  8908 00006276 6A01                    	push 1
  8909 00006278 488B4510                	mov rax, qword [rbp + 8 * 2]
  8910                                  
  8911 0000627C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8912                                  
  8913 0000627F 488B00                                            	mov rax, qword[rax + 8 * 0]
  8914 00006282 50                      	push rax
  8915 00006283 6A01                    	push 1
  8916 00006285 488B4510                	mov rax, qword [rbp + 8 * 2]
  8917                                  
  8918 00006289 488B00                                            	mov rax, qword[rax + 8 * 0]
  8919                                  
  8920 0000628C 488B00                                            	mov rax, qword[rax + 8 * 0]
  8921                                  	assert_closure(rax)
    42 0000628F 803805              <1>  cmp byte [%1], %2
    43 00006292 0F857E1C0000        <1>  jne L_error_incorrect_type
  8922 00006298 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8923 0000629B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8924 0000629E 50                      	push rax
  8925 0000629F 6A01                    	push 1
  8926 000062A1 488B4510                	mov rax, qword [rbp + 8 * 2]
  8927                                  
  8928 000062A5 488B00                                            	mov rax, qword[rax + 8 * 0]
  8929                                  
  8930 000062A8 488B00                                            	mov rax, qword[rax + 8 * 0]
  8931                                  	assert_closure(rax)
    42 000062AB 803805              <1>  cmp byte [%1], %2
    43 000062AE 0F85621C0000        <1>  jne L_error_incorrect_type
  8932 000062B4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8933 000062B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8934 000062BA 50                      	push rax
  8935 000062BB 6A01                    	push 1
  8936 000062BD 488B4510                	mov rax, qword [rbp + 8 * 2]
  8937                                  
  8938 000062C1 488B00                                            	mov rax, qword[rax + 8 * 0]
  8939                                  
  8940 000062C4 488B00                                            	mov rax, qword[rax + 8 * 0]
  8941                                  	assert_closure(rax)
    42 000062C7 803805              <1>  cmp byte [%1], %2
    43 000062CA 0F85461C0000        <1>  jne L_error_incorrect_type
  8942 000062D0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8943 000062D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8944                                  	assert_closure(rax)
    42 000062D6 803805              <1>  cmp byte [%1], %2
    43 000062D9 0F85371C0000        <1>  jne L_error_incorrect_type
  8945 000062DF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8946 000062E2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8947 000062E5 50                      	push rax
  8948 000062E6 6A01                    	push 1
  8949 000062E8 488B4510                	mov rax, qword [rbp + 8 * 2]
  8950                                  
  8951 000062EC 488B00                                            	mov rax, qword[rax + 8 * 0]
  8952                                  
  8953 000062EF 488B00                                            	mov rax, qword[rax + 8 * 0]
  8954 000062F2 50                      	push rax
  8955 000062F3 6A01                    	push 1
  8956 000062F5 488B4510                	mov rax, qword [rbp + 8 * 2]
  8957                                  
  8958 000062F9 488B00                                            	mov rax, qword[rax + 8 * 0]
  8959                                  
  8960 000062FC 488B00                                            	mov rax, qword[rax + 8 * 0]
  8961                                  	assert_closure(rax)
    42 000062FF 803805              <1>  cmp byte [%1], %2
    43 00006302 0F850E1C0000        <1>  jne L_error_incorrect_type
  8962 00006308 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8963 0000630B FF5009                  	call SOB_CLOSURE_CODE(rax)
  8964 0000630E 50                      	push rax
  8965 0000630F 6A01                    	push 1
  8966 00006311 488B4510                	mov rax, qword [rbp + 8 * 2]
  8967                                  
  8968 00006315 488B00                                            	mov rax, qword[rax + 8 * 0]
  8969                                  
  8970 00006318 488B00                                            	mov rax, qword[rax + 8 * 0]
  8971                                  	assert_closure(rax)
    42 0000631B 803805              <1>  cmp byte [%1], %2
    43 0000631E 0F85F21B0000        <1>  jne L_error_incorrect_type
  8972 00006324 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8973 00006327 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8974 0000632A 50                      	push rax
  8975 0000632B 6A01                    	push 1
  8976 0000632D 488B4510                	mov rax, qword [rbp + 8 * 2]
  8977                                  
  8978 00006331 488B00                                            	mov rax, qword[rax + 8 * 0]
  8979                                  
  8980 00006334 488B00                                            	mov rax, qword[rax + 8 * 0]
  8981                                  	assert_closure(rax)
    42 00006337 803805              <1>  cmp byte [%1], %2
    43 0000633A 0F85D61B0000        <1>  jne L_error_incorrect_type
  8982 00006340 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8983 00006343 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8984 00006346 50                      	push rax
  8985 00006347 6A01                    	push 1
  8986 00006349 488B4510                	mov rax, qword [rbp + 8 * 2]
  8987                                  
  8988 0000634D 488B00                                            	mov rax, qword[rax + 8 * 0]
  8989                                  
  8990 00006350 488B00                                            	mov rax, qword[rax + 8 * 0]
  8991                                  	assert_closure(rax)
    42 00006353 803805              <1>  cmp byte [%1], %2
    43 00006356 0F85BA1B0000        <1>  jne L_error_incorrect_type
  8992 0000635C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8993 0000635F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8994                                  	assert_closure(rax)
    42 00006362 803805              <1>  cmp byte [%1], %2
    43 00006365 0F85AB1B0000        <1>  jne L_error_incorrect_type
  8995 0000636B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8996 0000636E FF5009                  	call SOB_CLOSURE_CODE(rax)
  8997                                  	assert_closure(rax)
    42 00006371 803805              <1>  cmp byte [%1], %2
    43 00006374 0F859C1B0000        <1>  jne L_error_incorrect_type
  8998 0000637A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8999 0000637D FF5009                  	call SOB_CLOSURE_CODE(rax)
  9000 00006380 50                      	push rax
  9001 00006381 6A01                    	push 1
  9002 00006383 488B4510                	mov rax, qword [rbp + 8 * 2]
  9003                                  
  9004 00006387 488B00                                            	mov rax, qword[rax + 8 * 0]
  9005                                  
  9006 0000638A 488B00                                            	mov rax, qword[rax + 8 * 0]
  9007 0000638D 50                      	push rax
  9008 0000638E 6A01                    	push 1
  9009 00006390 488B4510                	mov rax, qword [rbp + 8 * 2]
  9010                                  
  9011 00006394 488B00                                            	mov rax, qword[rax + 8 * 0]
  9012                                  
  9013 00006397 488B00                                            	mov rax, qword[rax + 8 * 0]
  9014                                  	assert_closure(rax)
    42 0000639A 803805              <1>  cmp byte [%1], %2
    43 0000639D 0F85731B0000        <1>  jne L_error_incorrect_type
  9015 000063A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9016 000063A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9017 000063A9 50                      	push rax
  9018 000063AA 6A01                    	push 1
  9019 000063AC 488B4510                	mov rax, qword [rbp + 8 * 2]
  9020                                  
  9021 000063B0 488B00                                            	mov rax, qword[rax + 8 * 0]
  9022                                  
  9023 000063B3 488B00                                            	mov rax, qword[rax + 8 * 0]
  9024                                  	assert_closure(rax)
    42 000063B6 803805              <1>  cmp byte [%1], %2
    43 000063B9 0F85571B0000        <1>  jne L_error_incorrect_type
  9025 000063BF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9026 000063C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9027 000063C5 50                      	push rax
  9028 000063C6 6A01                    	push 1
  9029 000063C8 488B4510                	mov rax, qword [rbp + 8 * 2]
  9030                                  
  9031 000063CC 488B00                                            	mov rax, qword[rax + 8 * 0]
  9032                                  
  9033 000063CF 488B00                                            	mov rax, qword[rax + 8 * 0]
  9034                                  	assert_closure(rax)
    42 000063D2 803805              <1>  cmp byte [%1], %2
    43 000063D5 0F853B1B0000        <1>  jne L_error_incorrect_type
  9035 000063DB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9036 000063DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  9037 000063E1 50                      	push rax
  9038 000063E2 6A01                    	push 1
  9039 000063E4 488B4510                	mov rax, qword [rbp + 8 * 2]
  9040                                  
  9041 000063E8 488B00                                            	mov rax, qword[rax + 8 * 0]
  9042                                  
  9043 000063EB 488B00                                            	mov rax, qword[rax + 8 * 0]
  9044                                  	assert_closure(rax)
    42 000063EE 803805              <1>  cmp byte [%1], %2
    43 000063F1 0F851F1B0000        <1>  jne L_error_incorrect_type
  9045 000063F7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9046 000063FA FF5009                  	call SOB_CLOSURE_CODE(rax)
  9047 000063FD 50                      	push rax
  9048 000063FE 6A01                    	push 1
  9049 00006400 488B4510                	mov rax, qword [rbp + 8 * 2]
  9050                                  
  9051 00006404 488B00                                            	mov rax, qword[rax + 8 * 0]
  9052                                  
  9053 00006407 488B00                                            	mov rax, qword[rax + 8 * 0]
  9054 0000640A 50                      	push rax
  9055 0000640B 6A01                    	push 1
  9056 0000640D 488B4510                	mov rax, qword [rbp + 8 * 2]
  9057                                  
  9058 00006411 488B00                                            	mov rax, qword[rax + 8 * 0]
  9059                                  
  9060 00006414 488B00                                            	mov rax, qword[rax + 8 * 0]
  9061                                  	assert_closure(rax)
    42 00006417 803805              <1>  cmp byte [%1], %2
    43 0000641A 0F85F61A0000        <1>  jne L_error_incorrect_type
  9062 00006420 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9063 00006423 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9064 00006426 50                      	push rax
  9065 00006427 6A01                    	push 1
  9066 00006429 488B4510                	mov rax, qword [rbp + 8 * 2]
  9067                                  
  9068 0000642D 488B00                                            	mov rax, qword[rax + 8 * 0]
  9069                                  
  9070 00006430 488B00                                            	mov rax, qword[rax + 8 * 0]
  9071                                  	assert_closure(rax)
    42 00006433 803805              <1>  cmp byte [%1], %2
    43 00006436 0F85DA1A0000        <1>  jne L_error_incorrect_type
  9072 0000643C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9073 0000643F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9074 00006442 50                      	push rax
  9075 00006443 6A01                    	push 1
  9076 00006445 488B4510                	mov rax, qword [rbp + 8 * 2]
  9077                                  
  9078 00006449 488B00                                            	mov rax, qword[rax + 8 * 0]
  9079                                  
  9080 0000644C 488B00                                            	mov rax, qword[rax + 8 * 0]
  9081                                  	assert_closure(rax)
    42 0000644F 803805              <1>  cmp byte [%1], %2
    43 00006452 0F85BE1A0000        <1>  jne L_error_incorrect_type
  9082 00006458 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9083 0000645B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9084                                  	assert_closure(rax)
    42 0000645E 803805              <1>  cmp byte [%1], %2
    43 00006461 0F85AF1A0000        <1>  jne L_error_incorrect_type
  9085 00006467 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9086 0000646A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9087 0000646D 50                      	push rax
  9088 0000646E 6A01                    	push 1
  9089 00006470 488B4510                	mov rax, qword [rbp + 8 * 2]
  9090                                  
  9091 00006474 488B00                                            	mov rax, qword[rax + 8 * 0]
  9092                                  
  9093 00006477 488B00                                            	mov rax, qword[rax + 8 * 0]
  9094 0000647A 50                      	push rax
  9095 0000647B 6A01                    	push 1
  9096 0000647D 488B4510                	mov rax, qword [rbp + 8 * 2]
  9097                                  
  9098 00006481 488B00                                            	mov rax, qword[rax + 8 * 0]
  9099                                  
  9100 00006484 488B00                                            	mov rax, qword[rax + 8 * 0]
  9101                                  	assert_closure(rax)
    42 00006487 803805              <1>  cmp byte [%1], %2
    43 0000648A 0F85861A0000        <1>  jne L_error_incorrect_type
  9102 00006490 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9103 00006493 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9104 00006496 50                      	push rax
  9105 00006497 6A01                    	push 1
  9106 00006499 488B4510                	mov rax, qword [rbp + 8 * 2]
  9107                                  
  9108 0000649D 488B00                                            	mov rax, qword[rax + 8 * 0]
  9109                                  
  9110 000064A0 488B00                                            	mov rax, qword[rax + 8 * 0]
  9111                                  	assert_closure(rax)
    42 000064A3 803805              <1>  cmp byte [%1], %2
    43 000064A6 0F856A1A0000        <1>  jne L_error_incorrect_type
  9112 000064AC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9113 000064AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  9114 000064B2 50                      	push rax
  9115 000064B3 6A01                    	push 1
  9116 000064B5 488B4510                	mov rax, qword [rbp + 8 * 2]
  9117                                  
  9118 000064B9 488B00                                            	mov rax, qword[rax + 8 * 0]
  9119                                  
  9120 000064BC 488B00                                            	mov rax, qword[rax + 8 * 0]
  9121                                  	assert_closure(rax)
    42 000064BF 803805              <1>  cmp byte [%1], %2
    43 000064C2 0F854E1A0000        <1>  jne L_error_incorrect_type
  9122 000064C8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9123 000064CB FF5009                  	call SOB_CLOSURE_CODE(rax)
  9124 000064CE 50                      	push rax
  9125 000064CF 6A01                    	push 1
  9126 000064D1 488B4510                	mov rax, qword [rbp + 8 * 2]
  9127                                  
  9128 000064D5 488B00                                            	mov rax, qword[rax + 8 * 0]
  9129                                  
  9130 000064D8 488B00                                            	mov rax, qword[rax + 8 * 0]
  9131                                  	assert_closure(rax)
    42 000064DB 803805              <1>  cmp byte [%1], %2
    43 000064DE 0F85321A0000        <1>  jne L_error_incorrect_type
  9132 000064E4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9133 000064E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9134                                  	assert_closure(rax)
    42 000064EA 803805              <1>  cmp byte [%1], %2
    43 000064ED 0F85231A0000        <1>  jne L_error_incorrect_type
  9135 000064F3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9136 000064F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9137                                  	assert_closure(rax)
    42 000064F9 803805              <1>  cmp byte [%1], %2
    43 000064FC 0F85141A0000        <1>  jne L_error_incorrect_type
  9138 00006502 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9139 00006505 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9140 00006508 50                      	push rax
  9141 00006509 6A01                    	push 1
  9142 0000650B 488B4510                	mov rax, qword [rbp + 8 * 2]
  9143                                  
  9144 0000650F 488B00                                            	mov rax, qword[rax + 8 * 0]
  9145                                  
  9146 00006512 488B00                                            	mov rax, qword[rax + 8 * 0]
  9147 00006515 50                      	push rax
  9148 00006516 6A01                    	push 1
  9149 00006518 488B4510                	mov rax, qword [rbp + 8 * 2]
  9150                                  
  9151 0000651C 488B00                                            	mov rax, qword[rax + 8 * 0]
  9152                                  
  9153 0000651F 488B00                                            	mov rax, qword[rax + 8 * 0]
  9154                                  	assert_closure(rax)
    42 00006522 803805              <1>  cmp byte [%1], %2
    43 00006525 0F85EB190000        <1>  jne L_error_incorrect_type
  9155 0000652B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9156 0000652E FF5009                  	call SOB_CLOSURE_CODE(rax)
  9157 00006531 50                      	push rax
  9158 00006532 6A01                    	push 1
  9159 00006534 488B4510                	mov rax, qword [rbp + 8 * 2]
  9160                                  
  9161 00006538 488B00                                            	mov rax, qword[rax + 8 * 0]
  9162                                  
  9163 0000653B 488B00                                            	mov rax, qword[rax + 8 * 0]
  9164                                  	assert_closure(rax)
    42 0000653E 803805              <1>  cmp byte [%1], %2
    43 00006541 0F85CF190000        <1>  jne L_error_incorrect_type
  9165 00006547 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9166 0000654A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9167 0000654D 50                      	push rax
  9168 0000654E 6A01                    	push 1
  9169 00006550 488B4510                	mov rax, qword [rbp + 8 * 2]
  9170                                  
  9171 00006554 488B00                                            	mov rax, qword[rax + 8 * 0]
  9172                                  
  9173 00006557 488B00                                            	mov rax, qword[rax + 8 * 0]
  9174                                  	assert_closure(rax)
    42 0000655A 803805              <1>  cmp byte [%1], %2
    43 0000655D 0F85B3190000        <1>  jne L_error_incorrect_type
  9175 00006563 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9176 00006566 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9177 00006569 50                      	push rax
  9178 0000656A 6A01                    	push 1
  9179 0000656C 488B4510                	mov rax, qword [rbp + 8 * 2]
  9180                                  
  9181 00006570 488B00                                            	mov rax, qword[rax + 8 * 0]
  9182                                  
  9183 00006573 488B00                                            	mov rax, qword[rax + 8 * 0]
  9184                                  	assert_closure(rax)
    42 00006576 803805              <1>  cmp byte [%1], %2
    43 00006579 0F8597190000        <1>  jne L_error_incorrect_type
  9185 0000657F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9186 00006582 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9187                                  	assert_closure(rax)
    42 00006585 803805              <1>  cmp byte [%1], %2
    43 00006588 0F8588190000        <1>  jne L_error_incorrect_type
  9188 0000658E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9189 00006591 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9190                                  	assert_closure(rax)
    42 00006594 803805              <1>  cmp byte [%1], %2
    43 00006597 0F8579190000        <1>  jne L_error_incorrect_type
  9191 0000659D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9192 000065A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9193                                  	assert_closure(rax)
    42 000065A3 803805              <1>  cmp byte [%1], %2
    43 000065A6 0F856A190000        <1>  jne L_error_incorrect_type
  9194 000065AC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9195 000065AF FF5009                  	call SOB_CLOSURE_CODE(rax)
  9196                                  	assert_closure(rax)
    42 000065B2 803805              <1>  cmp byte [%1], %2
    43 000065B5 0F855B190000        <1>  jne L_error_incorrect_type
  9197 000065BB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9198 000065BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  9199                                  	assert_closure(rax)
    42 000065C1 803805              <1>  cmp byte [%1], %2
    43 000065C4 0F854C190000        <1>  jne L_error_incorrect_type
  9200 000065CA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9201 000065CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  9202                                  	assert_closure(rax)
    42 000065D0 803805              <1>  cmp byte [%1], %2
    43 000065D3 0F853D190000        <1>  jne L_error_incorrect_type
  9203 000065D9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9204 000065DC FF5009                  	call SOB_CLOSURE_CODE(rax)
  9205                                  	assert_closure(rax)
    42 000065DF 803805              <1>  cmp byte [%1], %2
    43 000065E2 0F852E190000        <1>  jne L_error_incorrect_type
  9206 000065E8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9207 000065EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  9208 000065EE C9                      	leave
  9209 000065EF C21800                  	ret 8 * (2 + 1)
  9210                                  .L_lambda_simple_end_015f:	; new closure is in rax
  9211 000065F2 C9                      	leave
  9212 000065F3 C22000                  	ret 8 * (2 + 2)
  9213                                  .L_lambda_simple_end_015e:	; new closure is in rax
  9214                                  	assert_closure(rax)
    42 000065F6 803805              <1>  cmp byte [%1], %2
    43 000065F9 0F8517190000        <1>  jne L_error_incorrect_type
  9215 000065FF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9216 00006602 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9217 00006605 48890425[C0010000]      	mov qword [free_var_56], rax
  9218 0000660D 48B8-                   	mov rax, sob_void
  9218 0000660F [0000000000000000] 
  9219                                  
  9220 00006617 4889C7                  	mov rdi, rax
  9221 0000661A E814010000              	call print_sexpr_if_not_void
  9222                                  
  9223 0000661F 48B8-                   	mov rax,L_constants + 40
  9223 00006621 [2800000000000000] 
  9224 00006629 50                      	push rax
  9225 0000662A 6A01                    	push 1
  9226 0000662C 488B0425[C0010000]      	mov rax, qword [free_var_56]
  9227                                  	assert_closure(rax)
    42 00006634 803805              <1>  cmp byte [%1], %2
    43 00006637 0F85D9180000        <1>  jne L_error_incorrect_type
  9228 0000663D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9229 00006640 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9230                                  
  9231 00006643 4889C7                  	mov rdi, rax
  9232 00006646 E8E8000000              	call print_sexpr_if_not_void
  9233                                  
  9234 0000664B 48BF-                           mov rdi, fmt_memory_usage
  9234 0000664D [9800000000000000] 
  9235 00006655 488B3425[1F010000]              mov rsi, qword [top_of_memory]
  9236 0000665D 4881EE[D8010000]                sub rsi, memory
  9237 00006664 B800000000                      mov rax, 0
  9238                                  	ENTER
    33 00006669 C8000000            <1>  enter 0, 0
    34 0000666D 4883E4F0            <1>  and rsp, ~15
  9239 00006671 E8(00000000)                    call printf
  9240                                  	LEAVE
    38 00006676 C9                  <1>  leave
  9241 00006677 C9                      	leave
  9242 00006678 C3                      	ret
  9243                                  
  9244                                  L_error_non_closure:
  9245 00006679 488B3C25[00000000]              mov rdi, qword [stderr]
  9246 00006681 48BE-                           mov rsi, fmt_non_closure
  9246 00006683 [CF00000000000000] 
  9247 0000668B B800000000                      mov rax, 0
  9248                                  	ENTER
    33 00006690 C8000000            <1>  enter 0, 0
    34 00006694 4883E4F0            <1>  and rsp, ~15
  9249 00006698 E8(00000000)                    call fprintf
  9250                                  	LEAVE
    38 0000669D C9                  <1>  leave
  9251 0000669E 48C7C0FEFFFFFF                  mov rax, -2
  9252 000066A5 E8(00000000)                    call exit
  9253                                  
  9254                                  L_error_improper_list:
  9255 000066AA 488B3C25[00000000]      	mov rdi, qword [stderr]
  9256 000066B2 48BE-                   	mov rsi, fmt_error_improper_list
  9256 000066B4 [F700000000000000] 
  9257 000066BC B800000000              	mov rax, 0
  9258                                  	ENTER
    33 000066C1 C8000000            <1>  enter 0, 0
    34 000066C5 4883E4F0            <1>  and rsp, ~15
  9259 000066C9 E8(00000000)            	call fprintf
  9260                                  	LEAVE
    38 000066CE C9                  <1>  leave
  9261 000066CF 48C7C0F9FFFFFF          	mov rax, -7
  9262 000066D6 E8(00000000)            	call exit
  9263                                  
  9264                                  L_error_incorrect_arity_simple:
  9265 000066DB 488B3C25[00000000]              mov rdi, qword [stderr]
  9266 000066E3 48BE-                           mov rsi, fmt_incorrect_arity_simple
  9266 000066E5 [3900000000000000] 
  9267 000066ED EB12                            jmp L_error_incorrect_arity_common
  9268                                  L_error_incorrect_arity_opt:
  9269 000066EF 488B3C25[00000000]              mov rdi, qword [stderr]
  9270 000066F7 48BE-                           mov rsi, fmt_incorrect_arity_opt
  9270 000066F9 [6400000000000000] 
  9271                                  L_error_incorrect_arity_common:
  9272 00006701 5A                              pop rdx
  9273 00006702 59                              pop rcx
  9274 00006703 B800000000                      mov rax, 0
  9275                                  	ENTER
    33 00006708 C8000000            <1>  enter 0, 0
    34 0000670C 4883E4F0            <1>  and rsp, ~15
  9276 00006710 E8(00000000)                    call fprintf
  9277                                  	LEAVE
    38 00006715 C9                  <1>  leave
  9278 00006716 48C7C0FAFFFFFF                  mov rax, -6
  9279 0000671D E8(00000000)                    call exit
  9280                                  
  9281                                  section .data
  9282                                  fmt_incorrect_arity_simple:
  9283 00000039 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  9283 00000042 74656420256C642061-
  9283 0000004B 7267756D656E74732C-
  9283 00000054 206275742067697665-
  9283 0000005D 6E20256C640A00     
  9284                                  fmt_incorrect_arity_opt:
  9285 00000064 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  9285 0000006D 746564206174206C65-
  9285 00000076 61737420256C642061-
  9285 0000007F 7267756D656E74732C-
  9285 00000088 206275742067697665-
  9285 00000091 6E20256C640A00     
  9286                                  fmt_memory_usage:
  9287 00000098 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  9287 000000A1 6420256C6420627974-
  9287 000000AA 6573206F662064796E-
  9287 000000B3 616D6963616C6C792D-
  9287 000000BC 616C6C6F6361746564-
  9287 000000C5 206D656D6F72790A0A-
  9287 000000CE 00                 
  9288                                  fmt_non_closure:
  9289 000000CF 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  9289 000000D8 7074696E6720746F20-
  9289 000000E1 6170706C792061206E-
  9289 000000EA 6F6E2D636C6F737572-
  9289 000000F3 65210A00           
  9290                                  fmt_error_improper_list:
  9291 000000F7 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  9291 00000100 7267756D656E742069-
  9291 00000109 73206E6F7420612070-
  9291 00000112 726F706572206C6973-
  9291 0000011B 74210A00           
  9292                                  
  9293                                  section .bss
  9294                                  memory:
  9295 000001D8 <res 40000000h>         	resb gbytes(1)
  9296                                  
  9297                                  section .data
  9298                                  top_of_memory:
  9299 0000011F [D801000000000000]              dq memory
  9300                                  
  9301                                  section .text
  9302                                  malloc:
  9303 00006722 488B0425[1F010000]              mov rax, qword [top_of_memory]
  9304 0000672A 48013C25[1F010000]              add qword [top_of_memory], rdi
  9305 00006732 C3                              ret
  9306                                          
  9307                                  print_sexpr_if_not_void:
  9308 00006733 4881FF[00000000]        	cmp rdi, sob_void
  9309 0000673A 7501                    	jne print_sexpr
  9310 0000673C C3                      	ret
  9311                                  
  9312                                  section .data
  9313                                  fmt_void:
  9314 00000127 233C766F69643E00        	db `#<void>\0`
  9315                                  fmt_nil:
  9316 0000012F 282900                  	db `()\0`
  9317                                  fmt_boolean_false:
  9318 00000132 236600                  	db `#f\0`
  9319                                  fmt_boolean_true:
  9320 00000135 237400                  	db `#t\0`
  9321                                  fmt_char_backslash:
  9322 00000138 235C5C00                	db `#\\\\\0`
  9323                                  fmt_char_dquote:
  9324 0000013C 235C2200                	db `#\\"\0`
  9325                                  fmt_char_simple:
  9326 00000140 235C256300              	db `#\\%c\0`
  9327                                  fmt_char_null:
  9328 00000145 235C6E756C00            	db `#\\nul\0`
  9329                                  fmt_char_bell:
  9330 0000014B 235C62656C6C00          	db `#\\bell\0`
  9331                                  fmt_char_backspace:
  9332 00000152 235C6261636B737061-     	db `#\\backspace\0`
  9332 0000015B 636500             
  9333                                  fmt_char_tab:
  9334 0000015E 235C74616200            	db `#\\tab\0`
  9335                                  fmt_char_newline:
  9336 00000164 235C6E65776C696E65-     	db `#\\newline\0`
  9336 0000016D 00                 
  9337                                  fmt_char_formfeed:
  9338 0000016E 235C7061676500          	db `#\\page\0`
  9339                                  fmt_char_return:
  9340 00000175 235C72657475726E00      	db `#\\return\0`
  9341                                  fmt_char_escape:
  9342 0000017E 235C65736300            	db `#\\esc\0`
  9343                                  fmt_char_space:
  9344 00000184 235C737061636500        	db `#\\space\0`
  9345                                  fmt_char_hex:
  9346 0000018C 235C782530325800        	db `#\\x%02X\0`
  9347                                  fmt_closure:
  9348 00000194 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  9348 0000019D 206174203078253038-
  9348 000001A6 5820656E763D307825-
  9348 000001AF 30385820636F64653D-
  9348 000001B8 3078253038583E00   
  9349                                  fmt_lparen:
  9350 000001C0 2800                    	db `(\0`
  9351                                  fmt_dotted_pair:
  9352 000001C2 202E2000                	db ` . \0`
  9353                                  fmt_rparen:
  9354 000001C6 2900                    	db `)\0`
  9355                                  fmt_space:
  9356 000001C8 2000                    	db ` \0`
  9357                                  fmt_empty_vector:
  9358 000001CA 23282900                	db `#()\0`
  9359                                  fmt_vector:
  9360 000001CE 232800                  	db `#(\0`
  9361                                  fmt_real:
  9362 000001D1 256600                  	db `%f\0`
  9363                                  fmt_fraction:
  9364 000001D4 256C642F256C6400        	db `%ld/%ld\0`
  9365                                  fmt_zero:
  9366 000001DC 3000                    	db `0\0`
  9367                                  fmt_int:
  9368 000001DE 256C6400                	db `%ld\0`
  9369                                  fmt_unknown_sexpr_error:
  9370 000001E2 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
  9370 000001EB 6F723A20556E6B6E6F-
  9370 000001F4 776E2074797065206F-
  9370 000001FD 662073657870722028-
  9370 00000206 3078253032582920   
  9371 0000020E 617420616464726573-     	db `at address 0x%08X\n\n\0`
  9371 00000217 73203078253038580A-
  9371 00000220 0A00               
  9372                                  fmt_dquote:
  9373 00000222 2200                    	db `\"\0`
  9374                                  fmt_string_char:
  9375 00000224 256300                          db `%c\0`
  9376                                  fmt_string_char_7:
  9377 00000227 5C6100                          db `\\a\0`
  9378                                  fmt_string_char_8:
  9379 0000022A 5C6200                          db `\\b\0`
  9380                                  fmt_string_char_9:
  9381 0000022D 5C7400                          db `\\t\0`
  9382                                  fmt_string_char_10:
  9383 00000230 5C6E00                          db `\\n\0`
  9384                                  fmt_string_char_11:
  9385 00000233 5C7600                          db `\\v\0`
  9386                                  fmt_string_char_12:
  9387 00000236 5C6600                          db `\\f\0`
  9388                                  fmt_string_char_13:
  9389 00000239 5C7200                          db `\\r\0`
  9390                                  fmt_string_char_34:
  9391 0000023C 5C2200                          db `\\"\0`
  9392                                  fmt_string_char_92:
  9393 0000023F 5C5C00                          db `\\\\\0`
  9394                                  fmt_string_char_hex:
  9395 00000242 5C7825583B00                    db `\\x%X;\0`
  9396                                  
  9397                                  section .text
  9398                                  
  9399                                  print_sexpr:
  9400                                  	ENTER
    33 0000673D C8000000            <1>  enter 0, 0
    34 00006741 4883E4F0            <1>  and rsp, ~15
  9401 00006745 8A07                    	mov al, byte [rdi]
  9402 00006747 3C00                    	cmp al, T_void
  9403 00006749 744D                    	je .Lvoid
  9404 0000674B 3C01                    	cmp al, T_nil
  9405 0000674D 7458                    	je .Lnil
  9406 0000674F 3C09                    	cmp al, T_boolean_false
  9407 00006751 7463                    	je .Lboolean_false
  9408 00006753 3C0A                    	cmp al, T_boolean_true
  9409 00006755 746E                    	je .Lboolean_true
  9410 00006757 3C02                    	cmp al, T_char
  9411 00006759 7479                    	je .Lchar
  9412 0000675B 3C04                    	cmp al, T_symbol
  9413 0000675D 0F84BB010000            	je .Lsymbol
  9414 00006763 3C21                    	cmp al, T_pair
  9415 00006765 0F84D6010000            	je .Lpair
  9416 0000676B 3C22                    	cmp al, T_vector
  9417 0000676D 0F849F020000            	je .Lvector
  9418 00006773 3C05                    	cmp al, T_closure
  9419 00006775 0F8489010000            	je .Lclosure
  9420 0000677B 3C12                    	cmp al, T_real
  9421 0000677D 0F8430030000            	je .Lreal
  9422 00006783 3C11                    	cmp al, T_rational
  9423 00006785 0F8456030000            	je .Lrational
  9424 0000678B 3C03                    	cmp al, T_string
  9425 0000678D 0F848F030000            	je .Lstring
  9426                                  
  9427 00006793 E9C7040000              	jmp .Lunknown_sexpr_type
  9428                                  
  9429                                  .Lvoid:
  9430 00006798 48BF-                   	mov rdi, fmt_void
  9430 0000679A [2701000000000000] 
  9431 000067A2 E9F5040000              	jmp .Lemit
  9432                                  
  9433                                  .Lnil:
  9434 000067A7 48BF-                   	mov rdi, fmt_nil
  9434 000067A9 [2F01000000000000] 
  9435 000067B1 E9E6040000              	jmp .Lemit
  9436                                  
  9437                                  .Lboolean_false:
  9438 000067B6 48BF-                   	mov rdi, fmt_boolean_false
  9438 000067B8 [3201000000000000] 
  9439 000067C0 E9D7040000              	jmp .Lemit
  9440                                  
  9441                                  .Lboolean_true:
  9442 000067C5 48BF-                   	mov rdi, fmt_boolean_true
  9442 000067C7 [3501000000000000] 
  9443 000067CF E9C8040000              	jmp .Lemit
  9444                                  
  9445                                  .Lchar:
  9446 000067D4 8A4701                  	mov al, byte [rdi + 1]
  9447 000067D7 3C20                    	cmp al, ' '
  9448 000067D9 7E28                    	jle .Lchar_whitespace
  9449 000067DB 3C5C                    	cmp al, 92 		; backslash
  9450 000067DD 0F847C000000            	je .Lchar_backslash
  9451 000067E3 3C22                    	cmp al, '"'
  9452 000067E5 0F8483000000            	je .Lchar_dquote
  9453 000067EB 4825FF000000            	and rax, 255
  9454 000067F1 48BF-                   	mov rdi, fmt_char_simple
  9454 000067F3 [4001000000000000] 
  9455 000067FB 4889C6                  	mov rsi, rax
  9456 000067FE E999040000              	jmp .Lemit
  9457                                  
  9458                                  .Lchar_whitespace:
  9459 00006803 3C00                    	cmp al, 0
  9460 00006805 7476                    	je .Lchar_null
  9461 00006807 3C07                    	cmp al, 7
  9462 00006809 0F847D000000            	je .Lchar_bell
  9463 0000680F 3C08                    	cmp al, 8
  9464 00006811 0F8484000000            	je .Lchar_backspace
  9465 00006817 3C09                    	cmp al, 9
  9466 00006819 0F848B000000            	je .Lchar_tab
  9467 0000681F 3C0A                    	cmp al, 10
  9468 00006821 0F8492000000            	je .Lchar_newline
  9469 00006827 3C0C                    	cmp al, 12
  9470 00006829 0F8499000000            	je .Lchar_formfeed
  9471 0000682F 3C0D                    	cmp al, 13
  9472 00006831 0F84A0000000            	je .Lchar_return
  9473 00006837 3C1B                    	cmp al, 27
  9474 00006839 0F84A7000000            	je .Lchar_escape
  9475 0000683F 4825FF000000            	and rax, 255
  9476 00006845 3C20                    	cmp al, ' '
  9477 00006847 0F84A8000000            	je .Lchar_space
  9478 0000684D 48BF-                   	mov rdi, fmt_char_hex
  9478 0000684F [8C01000000000000] 
  9479 00006857 4889C6                  	mov rsi, rax
  9480 0000685A E93D040000              	jmp .Lemit	
  9481                                  
  9482                                  .Lchar_backslash:
  9483 0000685F 48BF-                   	mov rdi, fmt_char_backslash
  9483 00006861 [3801000000000000] 
  9484 00006869 E92E040000              	jmp .Lemit
  9485                                  
  9486                                  .Lchar_dquote:
  9487 0000686E 48BF-                   	mov rdi, fmt_char_dquote
  9487 00006870 [3C01000000000000] 
  9488 00006878 E91F040000              	jmp .Lemit
  9489                                  
  9490                                  .Lchar_null:
  9491 0000687D 48BF-                   	mov rdi, fmt_char_null
  9491 0000687F [4501000000000000] 
  9492 00006887 E910040000              	jmp .Lemit
  9493                                  
  9494                                  .Lchar_bell:
  9495 0000688C 48BF-                   	mov rdi, fmt_char_bell
  9495 0000688E [4B01000000000000] 
  9496 00006896 E901040000              	jmp .Lemit
  9497                                  
  9498                                  .Lchar_backspace:
  9499 0000689B 48BF-                   	mov rdi, fmt_char_backspace
  9499 0000689D [5201000000000000] 
  9500 000068A5 E9F2030000              	jmp .Lemit
  9501                                  
  9502                                  .Lchar_tab:
  9503 000068AA 48BF-                   	mov rdi, fmt_char_tab
  9503 000068AC [5E01000000000000] 
  9504 000068B4 E9E3030000              	jmp .Lemit
  9505                                  
  9506                                  .Lchar_newline:
  9507 000068B9 48BF-                   	mov rdi, fmt_char_newline
  9507 000068BB [6401000000000000] 
  9508 000068C3 E9D4030000              	jmp .Lemit
  9509                                  
  9510                                  .Lchar_formfeed:
  9511 000068C8 48BF-                   	mov rdi, fmt_char_formfeed
  9511 000068CA [6E01000000000000] 
  9512 000068D2 E9C5030000              	jmp .Lemit
  9513                                  
  9514                                  .Lchar_return:
  9515 000068D7 48BF-                   	mov rdi, fmt_char_return
  9515 000068D9 [7501000000000000] 
  9516 000068E1 E9B6030000              	jmp .Lemit
  9517                                  
  9518                                  .Lchar_escape:
  9519 000068E6 48BF-                   	mov rdi, fmt_char_escape
  9519 000068E8 [7E01000000000000] 
  9520 000068F0 E9A7030000              	jmp .Lemit
  9521                                  
  9522                                  .Lchar_space:
  9523 000068F5 48BF-                   	mov rdi, fmt_char_space
  9523 000068F7 [8401000000000000] 
  9524 000068FF E998030000              	jmp .Lemit
  9525                                  
  9526                                  .Lclosure:
  9527 00006904 4889FE                  	mov rsi, qword rdi
  9528 00006907 48BF-                   	mov rdi, fmt_closure
  9528 00006909 [9401000000000000] 
  9529 00006911 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  9530 00006915 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  9531 00006919 E97E030000              	jmp .Lemit
  9532                                  
  9533                                  .Lsymbol:
  9534 0000691E 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  9535 00006922 BE01000000              	mov rsi, 1		 ; size = 1 byte
  9536 00006927 488B5701                	mov rdx, qword [rdi + 1] ; length
  9537 0000692B 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  9538 0000692F 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  9539 00006937 E8(00000000)            	call fwrite
  9540 0000693C E970030000              	jmp .Lend
  9541                                  	
  9542                                  .Lpair:
  9543 00006941 57                      	push rdi
  9544 00006942 48BF-                   	mov rdi, fmt_lparen
  9544 00006944 [C001000000000000] 
  9545 0000694C B800000000              	mov rax, 0
  9546                                          ENTER
    33 00006951 C8000000            <1>  enter 0, 0
    34 00006955 4883E4F0            <1>  and rsp, ~15
  9547 00006959 E8(00000000)            	call printf
  9548                                          LEAVE
    38 0000695E C9                  <1>  leave
  9549 0000695F 488B3C24                	mov rdi, qword [rsp] 	; pair
  9550 00006963 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  9551 00006967 E8D1FDFFFF              	call print_sexpr
  9552 0000696C 5F                      	pop rdi 		; pair
  9553 0000696D 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  9554                                  .Lcdr:
  9555 00006971 8A07                    	mov al, byte [rdi]
  9556 00006973 3C01                    	cmp al, T_nil
  9557 00006975 7447                    	je .Lcdr_nil
  9558 00006977 3C21                    	cmp al, T_pair
  9559 00006979 7462                    	je .Lcdr_pair
  9560 0000697B 57                      	push rdi
  9561 0000697C 48BF-                   	mov rdi, fmt_dotted_pair
  9561 0000697E [C201000000000000] 
  9562 00006986 B800000000              	mov rax, 0
  9563                                  	ENTER
    33 0000698B C8000000            <1>  enter 0, 0
    34 0000698F 4883E4F0            <1>  and rsp, ~15
  9564 00006993 E8(00000000)            	call printf
  9565                                  	LEAVE
    38 00006998 C9                  <1>  leave
  9566 00006999 5F                      	pop rdi
  9567 0000699A E89EFDFFFF              	call print_sexpr
  9568 0000699F 48BF-                   	mov rdi, fmt_rparen
  9568 000069A1 [C601000000000000] 
  9569 000069A9 B800000000              	mov rax, 0
  9570                                  	ENTER
    33 000069AE C8000000            <1>  enter 0, 0
    34 000069B2 4883E4F0            <1>  and rsp, ~15
  9571 000069B6 E8(00000000)            	call printf
  9572                                  	LEAVE
    38 000069BB C9                  <1>  leave
  9573                                  	LEAVE
    38 000069BC C9                  <1>  leave
  9574 000069BD C3                      	ret
  9575                                  
  9576                                  .Lcdr_nil:
  9577 000069BE 48BF-                   	mov rdi, fmt_rparen
  9577 000069C0 [C601000000000000] 
  9578 000069C8 B800000000              	mov rax, 0
  9579                                  	ENTER
    33 000069CD C8000000            <1>  enter 0, 0
    34 000069D1 4883E4F0            <1>  and rsp, ~15
  9580 000069D5 E8(00000000)            	call printf
  9581                                  	LEAVE
    38 000069DA C9                  <1>  leave
  9582                                  	LEAVE
    38 000069DB C9                  <1>  leave
  9583 000069DC C3                      	ret
  9584                                  
  9585                                  .Lcdr_pair:
  9586 000069DD 57                      	push rdi
  9587 000069DE 48BF-                   	mov rdi, fmt_space
  9587 000069E0 [C801000000000000] 
  9588 000069E8 B800000000              	mov rax, 0
  9589                                  	ENTER
    33 000069ED C8000000            <1>  enter 0, 0
    34 000069F1 4883E4F0            <1>  and rsp, ~15
  9590 000069F5 E8(00000000)            	call printf
  9591                                  	LEAVE
    38 000069FA C9                  <1>  leave
  9592 000069FB 488B3C24                	mov rdi, qword [rsp]
  9593 000069FF 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  9594 00006A03 E835FDFFFF              	call print_sexpr
  9595 00006A08 5F                      	pop rdi
  9596 00006A09 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  9597 00006A0D E95FFFFFFF              	jmp .Lcdr
  9598                                  
  9599                                  .Lvector:
  9600 00006A12 488B4701                	mov rax, qword [rdi + 1] ; length
  9601 00006A16 4883F800                	cmp rax, 0
  9602 00006A1A 0F8484000000            	je .Lvector_empty
  9603 00006A20 57                      	push rdi
  9604 00006A21 48BF-                   	mov rdi, fmt_vector
  9604 00006A23 [CE01000000000000] 
  9605 00006A2B B800000000              	mov rax, 0
  9606                                  	ENTER
    33 00006A30 C8000000            <1>  enter 0, 0
    34 00006A34 4883E4F0            <1>  and rsp, ~15
  9607 00006A38 E8(00000000)            	call printf
  9608                                  	LEAVE
    38 00006A3D C9                  <1>  leave
  9609 00006A3E 488B3C24                	mov rdi, qword [rsp]
  9610 00006A42 FF7701                  	push qword [rdi + 1]
  9611 00006A45 6A01                    	push 1
  9612 00006A47 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  9613 00006A4B E8EDFCFFFF              	call print_sexpr
  9614                                  .Lvector_loop:
  9615                                  	; [rsp] index
  9616                                  	; [rsp + 8*1] limit
  9617                                  	; [rsp + 8*2] vector
  9618 00006A50 488B0424                	mov rax, qword [rsp]
  9619 00006A54 483B442408              	cmp rax, qword [rsp + 8*1]
  9620 00006A59 7436                    	je .Lvector_end
  9621 00006A5B 48BF-                   	mov rdi, fmt_space
  9621 00006A5D [C801000000000000] 
  9622 00006A65 B800000000              	mov rax, 0
  9623                                  	ENTER
    33 00006A6A C8000000            <1>  enter 0, 0
    34 00006A6E 4883E4F0            <1>  and rsp, ~15
  9624 00006A72 E8(00000000)            	call printf
  9625                                  	LEAVE
    38 00006A77 C9                  <1>  leave
  9626 00006A78 488B0424                	mov rax, qword [rsp]
  9627 00006A7C 488B5C2410              	mov rbx, qword [rsp + 8*2]
  9628 00006A81 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  9629 00006A86 E8B2FCFFFF              	call print_sexpr
  9630 00006A8B 48FF0424                	inc qword [rsp]
  9631 00006A8F EBBF                    	jmp .Lvector_loop
  9632                                  
  9633                                  .Lvector_end:
  9634 00006A91 4883C418                	add rsp, 8*3
  9635 00006A95 48BF-                   	mov rdi, fmt_rparen
  9635 00006A97 [C601000000000000] 
  9636 00006A9F E9F8010000              	jmp .Lemit	
  9637                                  
  9638                                  .Lvector_empty:
  9639 00006AA4 48BF-                   	mov rdi, fmt_empty_vector
  9639 00006AA6 [CA01000000000000] 
  9640 00006AAE E9E9010000              	jmp .Lemit
  9641                                  
  9642                                  .Lreal:
  9643 00006AB3 FF7701                  	push qword [rdi + 1]
  9644 00006AB6 F20F100424              	movsd xmm0, qword [rsp]
  9645 00006ABB 4883C408                	add rsp, 8*1
  9646 00006ABF 48BF-                   	mov rdi, fmt_real
  9646 00006AC1 [D101000000000000] 
  9647 00006AC9 B801000000              	mov rax, 1
  9648                                  	ENTER
    33 00006ACE C8000000            <1>  enter 0, 0
    34 00006AD2 4883E4F0            <1>  and rsp, ~15
  9649 00006AD6 E8(00000000)            	call printf
  9650                                  	LEAVE
    38 00006ADB C9                  <1>  leave
  9651 00006ADC E9D0010000              	jmp .Lend
  9652                                  
  9653                                  .Lrational:
  9654 00006AE1 488B7701                	mov rsi, qword [rdi + 1]
  9655 00006AE5 488B5709                	mov rdx, qword [rdi + 1 + 8]
  9656 00006AE9 4883FE00                	cmp rsi, 0
  9657 00006AED 7415                    	je .Lrat_zero
  9658 00006AEF 4883FA01                	cmp rdx, 1
  9659 00006AF3 741E                    	je .Lrat_int
  9660 00006AF5 48BF-                   	mov rdi, fmt_fraction
  9660 00006AF7 [D401000000000000] 
  9661 00006AFF E998010000              	jmp .Lemit
  9662                                  
  9663                                  .Lrat_zero:
  9664 00006B04 48BF-                   	mov rdi, fmt_zero
  9664 00006B06 [DC01000000000000] 
  9665 00006B0E E989010000              	jmp .Lemit
  9666                                  
  9667                                  .Lrat_int:
  9668 00006B13 48BF-                   	mov rdi, fmt_int
  9668 00006B15 [DE01000000000000] 
  9669 00006B1D E97A010000              	jmp .Lemit
  9670                                  
  9671                                  .Lstring:
  9672 00006B22 488D4709                	lea rax, [rdi + 1 + 8]
  9673 00006B26 50                      	push rax
  9674 00006B27 FF7701                  	push qword [rdi + 1]
  9675 00006B2A 48BF-                   	mov rdi, fmt_dquote
  9675 00006B2C [2202000000000000] 
  9676 00006B34 B800000000              	mov rax, 0
  9677                                  	ENTER
    33 00006B39 C8000000            <1>  enter 0, 0
    34 00006B3D 4883E4F0            <1>  and rsp, ~15
  9678 00006B41 E8(00000000)            	call printf
  9679                                  	LEAVE
    38 00006B46 C9                  <1>  leave
  9680                                  .Lstring_loop:
  9681                                  	; qword [rsp]: limit
  9682                                  	; qword [rsp + 8*1]: char *
  9683 00006B47 48833C2400              	cmp qword [rsp], 0
  9684 00006B4C 0F84FD000000            	je .Lstring_end
  9685 00006B52 488B442408              	mov rax, qword [rsp + 8*1]
  9686 00006B57 8A00                    	mov al, byte [rax]
  9687 00006B59 4825FF000000            	and rax, 255
  9688 00006B5F 3C07                    	cmp al, 7
  9689 00006B61 7468                            je .Lstring_char_7
  9690 00006B63 3C08                            cmp al, 8
  9691 00006B65 7470                            je .Lstring_char_8
  9692 00006B67 3C09                            cmp al, 9
  9693 00006B69 7478                            je .Lstring_char_9
  9694 00006B6B 3C0A                            cmp al, 10
  9695 00006B6D 0F847C000000                    je .Lstring_char_10
  9696 00006B73 3C0B                            cmp al, 11
  9697 00006B75 0F8480000000                    je .Lstring_char_11
  9698 00006B7B 3C0C                            cmp al, 12
  9699 00006B7D 0F8484000000                    je .Lstring_char_12
  9700 00006B83 3C0D                            cmp al, 13
  9701 00006B85 0F8488000000                    je .Lstring_char_13
  9702 00006B8B 3C22                            cmp al, 34
  9703 00006B8D 0F848C000000                    je .Lstring_char_34
  9704 00006B93 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  9706 00006B95 3C20                            cmp al, ' '
  9707 00006B97 0F8CA0000000                    jl .Lstring_char_hex
  9708 00006B9D 48BF-                           mov rdi, fmt_string_char
  9708 00006B9F [2402000000000000] 
  9709 00006BA7 4889C6                          mov rsi, rax
  9710                                  .Lstring_char_emit:
  9711 00006BAA B800000000                      mov rax, 0
  9712                                          ENTER
    33 00006BAF C8000000            <1>  enter 0, 0
    34 00006BB3 4883E4F0            <1>  and rsp, ~15
  9713 00006BB7 E8(00000000)                    call printf
  9714                                          LEAVE
    38 00006BBC C9                  <1>  leave
  9715 00006BBD 48FF0C24                        dec qword [rsp]
  9716 00006BC1 48FF442408                      inc qword [rsp + 8*1]
  9717 00006BC6 E97CFFFFFF                      jmp .Lstring_loop
  9718                                  
  9719                                  .Lstring_char_7:
  9720 00006BCB 48BF-                           mov rdi, fmt_string_char_7
  9720 00006BCD [2702000000000000] 
  9721 00006BD5 EBD3                            jmp .Lstring_char_emit
  9722                                  
  9723                                  .Lstring_char_8:
  9724 00006BD7 48BF-                           mov rdi, fmt_string_char_8
  9724 00006BD9 [2A02000000000000] 
  9725 00006BE1 EBC7                            jmp .Lstring_char_emit
  9726                                          
  9727                                  .Lstring_char_9:
  9728 00006BE3 48BF-                           mov rdi, fmt_string_char_9
  9728 00006BE5 [2D02000000000000] 
  9729 00006BED EBBB                            jmp .Lstring_char_emit
  9730                                  
  9731                                  .Lstring_char_10:
  9732 00006BEF 48BF-                           mov rdi, fmt_string_char_10
  9732 00006BF1 [3002000000000000] 
  9733 00006BF9 EBAF                            jmp .Lstring_char_emit
  9734                                  
  9735                                  .Lstring_char_11:
  9736 00006BFB 48BF-                           mov rdi, fmt_string_char_11
  9736 00006BFD [3302000000000000] 
  9737 00006C05 EBA3                            jmp .Lstring_char_emit
  9738                                  
  9739                                  .Lstring_char_12:
  9740 00006C07 48BF-                           mov rdi, fmt_string_char_12
  9740 00006C09 [3602000000000000] 
  9741 00006C11 EB97                            jmp .Lstring_char_emit
  9742                                  
  9743                                  .Lstring_char_13:
  9744 00006C13 48BF-                           mov rdi, fmt_string_char_13
  9744 00006C15 [3902000000000000] 
  9745 00006C1D EB8B                            jmp .Lstring_char_emit
  9746                                  
  9747                                  .Lstring_char_34:
  9748 00006C1F 48BF-                           mov rdi, fmt_string_char_34
  9748 00006C21 [3C02000000000000] 
  9749 00006C29 E97CFFFFFF                      jmp .Lstring_char_emit
  9750                                  
  9751                                  .Lstring_char_92:
  9752 00006C2E 48BF-                           mov rdi, fmt_string_char_92
  9752 00006C30 [3F02000000000000] 
  9753 00006C38 E96DFFFFFF                      jmp .Lstring_char_emit
  9754                                  
  9755                                  .Lstring_char_hex:
  9756 00006C3D 48BF-                           mov rdi, fmt_string_char_hex
  9756 00006C3F [4202000000000000] 
  9757 00006C47 4889C6                          mov rsi, rax
  9758 00006C4A E95BFFFFFF                      jmp .Lstring_char_emit        
  9759                                  
  9760                                  .Lstring_end:
  9761 00006C4F 4883C410                	add rsp, 8 * 2
  9762 00006C53 48BF-                   	mov rdi, fmt_dquote
  9762 00006C55 [2202000000000000] 
  9763 00006C5D EB3D                    	jmp .Lemit
  9764                                  
  9765                                  .Lunknown_sexpr_type:
  9766 00006C5F 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  9766 00006C61 [E201000000000000] 
  9767 00006C69 4825FF000000            	and rax, 255
  9768 00006C6F 4889C2                  	mov rdx, rax
  9769 00006C72 4889F9                  	mov rcx, rdi
  9770 00006C75 488B3C25[00000000]      	mov rdi, qword [stderr]
  9771 00006C7D B800000000              	mov rax, 0
  9772                                  	ENTER
    33 00006C82 C8000000            <1>  enter 0, 0
    34 00006C86 4883E4F0            <1>  and rsp, ~15
  9773 00006C8A E8(00000000)            	call fprintf
  9774                                  	LEAVE
    38 00006C8F C9                  <1>  leave
  9775 00006C90 48C7C0FFFFFFFF          	mov rax, -1
  9776 00006C97 E8(00000000)            	call exit
  9777                                  
  9778                                  .Lemit:
  9779 00006C9C B800000000              	mov rax, 0
  9780                                  	ENTER
    33 00006CA1 C8000000            <1>  enter 0, 0
    34 00006CA5 4883E4F0            <1>  and rsp, ~15
  9781 00006CA9 E8(00000000)            	call printf
  9782                                  	LEAVE
    38 00006CAE C9                  <1>  leave
  9783 00006CAF EB00                    	jmp .Lend
  9784                                  
  9785                                  .Lend:
  9786                                  	LEAVE
    38 00006CB1 C9                  <1>  leave
  9787 00006CB2 C3                      	ret
  9788                                  
  9789                                  ;;; rdi: address of free variable
  9790                                  ;;; rsi: address of code-pointer
  9791                                  bind_primitive:
  9792                                          ENTER
    33 00006CB3 C8000000            <1>  enter 0, 0
    34 00006CB7 4883E4F0            <1>  and rsp, ~15
  9793 00006CBB 57                              push rdi
  9794 00006CBC BF11000000                      mov rdi, (1 + 8 + 8)
  9795 00006CC1 E85CFAFFFF                      call malloc
  9796 00006CC6 5F                              pop rdi
  9797 00006CC7 C60005                          mov byte [rax], T_closure
  9798 00006CCA 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  9799 00006CD2 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  9800 00006CD6 488907                          mov qword [rdi], rax
  9801                                          LEAVE
    38 00006CD9 C9                  <1>  leave
  9802 00006CDA C3                              ret
  9803                                  
  9804                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  9805                                  L_code_ptr_bin_apply:
  9806 00006CDB C8000000                        enter 0, 0
  9807                                          ;finding the list's length
  9808                                          
  9809 00006CDF 4831C9                          xor rcx, rcx ;0
  9810 00006CE2 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
  9811                                          assert_pair(rax)
    42 00006CE6 803821              <1>  cmp byte [%1], %2
    43 00006CE9 0F8527120000        <1>  jne L_error_incorrect_type
  9812 00006CEF 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
  9813                                          my_loop1:
  9814 00006CF3 483D[01000000]                          cmp rax, sob_nil ;if nill
  9815 00006CF9 7417                                    je my_loop_end1 ;jmp end
  9816 00006CFB 48FFC1                                  inc rcx 
  9817 00006CFE 53                                      push rbx ;insrting val to stack
  9818                                                  assert_pair(rax)
    42 00006CFF 803821              <1>  cmp byte [%1], %2
    43 00006D02 0F850E120000        <1>  jne L_error_incorrect_type
  9819 00006D08 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
  9820 00006D0C 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
  9821 00006D10 EBE1                                    jmp my_loop1
  9822                                          my_loop_end1:
  9823                                          
  9824                                          ;TODO: ecx = 0 ?
  9825                                  
  9826                                          ;make values in the opposite order:
  9827                                          ;1.pushing all argument one more time in the right order
  9828 00006D12 4889CB                          mov rbx, rcx ;count-up
  9829 00006D15 B900000000                      mov rcx, 0 
  9830 00006D1A 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
  9831                                          my_loop2:
  9832 00006D1D 4839D9                                  cmp rcx, rbx ; if rcx = n
  9833 00006D20 740A                                    je my_loop_end2 ;then: jump to the end
  9834 00006D22 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
  9835 00006D26 50                                      push rax
  9836 00006D27 48FFC1                                  inc rcx
  9837 00006D2A EBF1                                    jmp my_loop2
  9838                                          my_loop_end2:
  9839                                          
  9840                                          ;2.overwriting element above by element below but in correct order
  9841 00006D2C 488D14DD30000000                lea rdx, [8 * (rbx + 6)] ;nubmer of *bytes* we need to skip
  9842 00006D34 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
  9843 00006D38 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
  9844 00006D3C 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
  9845 00006D40 B900000000                      mov rcx, 0
  9846                                          my_loop3:
  9847 00006D45 4839D9                                  cmp rcx, rbx ;if rcx = n
  9848 00006D48 7417                                    je my_loop_end3 ;then: jump to the end
  9849 00006D4A 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
  9850 00006D4E 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
  9851 00006D52 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
  9852 00006D55 4883C408                                add rsp, 8 ;pop arg we used
  9853 00006D59 48FFC1                                  inc rcx 
  9854 00006D5C 4831C0                                  xor rax, rax
  9855 00006D5F EBE4                                    jmp my_loop3
  9856                                          my_loop_end3:
  9857                                          
  9858 00006D61 4883F906                        cmp rcx, 6
  9859 00006D65 7F11                            jg seven_or_more
  9860 00006D67 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
  9861 00006D6B 48F7DB                          neg rbx 
  9862 00006D6E 4883C306                        add rbx, 6      ;sub 6 from num_of_args
  9863 00006D72 488D24DC                        lea rsp, [rsp + 8 * rbx] ; pop rest of old frame 
  9864 00006D76 EB05                            jmp continu
  9865                                          seven_or_more:
  9866 00006D78 488D642430                      lea rsp, [rsp + 8 * 6] ; pop rest of 1st time pushed args
  9867                                          continu:
  9868 00006D7D 51                              push rcx ;push number of arguments
  9869 00006D7E 41FF7001                        push SOB_CLOSURE_ENV(r8) ; push lex-env
  9870 00006D82 57                              push rdi ; push old ret-add
  9871 00006D83 4889F5                          mov rbp, rsi ;rbp = old-rbp
  9872 00006D86 41FF6009                        jmp SOB_CLOSURE_CODE(r8) ; fun to apply
  9873                                  	
  9874                                  L_code_ptr_is_null:
  9875                                          ENTER
    33 00006D8A C8000000            <1>  enter 0, 0
    34 00006D8E 4883E4F0            <1>  and rsp, ~15
  9876 00006D92 48837D1801                      cmp COUNT, 1
  9877 00006D97 0F85A5100000                    jne L_error_arg_count_1
  9878 00006D9D 488B4520                        mov rax, PARAM(0)
  9879 00006DA1 803801                          cmp byte [rax], T_nil
  9880 00006DA4 750C                            jne .L_false
  9881 00006DA6 48B8-                           mov rax, sob_boolean_true
  9881 00006DA8 [0300000000000000] 
  9882 00006DB0 EB0A                            jmp .L_end
  9883                                  .L_false:
  9884 00006DB2 48B8-                           mov rax, sob_boolean_false
  9884 00006DB4 [0200000000000000] 
  9885                                  .L_end:
  9886                                          LEAVE
    38 00006DBC C9                  <1>  leave
  9887 00006DBD C21800                          ret AND_KILL_FRAME(1)
  9888                                  
  9889                                  L_code_ptr_is_pair:
  9890                                          ENTER
    33 00006DC0 C8000000            <1>  enter 0, 0
    34 00006DC4 4883E4F0            <1>  and rsp, ~15
  9891 00006DC8 48837D1801                      cmp COUNT, 1
  9892 00006DCD 0F856F100000                    jne L_error_arg_count_1
  9893 00006DD3 488B4520                        mov rax, PARAM(0)
  9894 00006DD7 803821                          cmp byte [rax], T_pair
  9895 00006DDA 750C                            jne .L_false
  9896 00006DDC 48B8-                           mov rax, sob_boolean_true
  9896 00006DDE [0300000000000000] 
  9897 00006DE6 EB0A                            jmp .L_end
  9898                                  .L_false:
  9899 00006DE8 48B8-                           mov rax, sob_boolean_false
  9899 00006DEA [0200000000000000] 
  9900                                  .L_end:
  9901                                          LEAVE
    38 00006DF2 C9                  <1>  leave
  9902 00006DF3 C21800                          ret AND_KILL_FRAME(1)
  9903                                          
  9904                                  L_code_ptr_is_void:
  9905                                          ENTER
    33 00006DF6 C8000000            <1>  enter 0, 0
    34 00006DFA 4883E4F0            <1>  and rsp, ~15
  9906 00006DFE 48837D1801                      cmp COUNT, 1
  9907 00006E03 0F8539100000                    jne L_error_arg_count_1
  9908 00006E09 488B4520                        mov rax, PARAM(0)
  9909 00006E0D 803800                          cmp byte [rax], T_void
  9910 00006E10 750C                            jne .L_false
  9911 00006E12 48B8-                           mov rax, sob_boolean_true
  9911 00006E14 [0300000000000000] 
  9912 00006E1C EB0A                            jmp .L_end
  9913                                  .L_false:
  9914 00006E1E 48B8-                           mov rax, sob_boolean_false
  9914 00006E20 [0200000000000000] 
  9915                                  .L_end:
  9916                                          LEAVE
    38 00006E28 C9                  <1>  leave
  9917 00006E29 C21800                          ret AND_KILL_FRAME(1)
  9918                                  
  9919                                  L_code_ptr_is_char:
  9920                                          ENTER
    33 00006E2C C8000000            <1>  enter 0, 0
    34 00006E30 4883E4F0            <1>  and rsp, ~15
  9921 00006E34 48837D1801                      cmp COUNT, 1
  9922 00006E39 0F8503100000                    jne L_error_arg_count_1
  9923 00006E3F 488B4520                        mov rax, PARAM(0)
  9924 00006E43 803802                          cmp byte [rax], T_char
  9925 00006E46 750C                            jne .L_false
  9926 00006E48 48B8-                           mov rax, sob_boolean_true
  9926 00006E4A [0300000000000000] 
  9927 00006E52 EB0A                            jmp .L_end
  9928                                  .L_false:
  9929 00006E54 48B8-                           mov rax, sob_boolean_false
  9929 00006E56 [0200000000000000] 
  9930                                  .L_end:
  9931                                          LEAVE
    38 00006E5E C9                  <1>  leave
  9932 00006E5F C21800                          ret AND_KILL_FRAME(1)
  9933                                  
  9934                                  L_code_ptr_is_string:
  9935                                          ENTER
    33 00006E62 C8000000            <1>  enter 0, 0
    34 00006E66 4883E4F0            <1>  and rsp, ~15
  9936 00006E6A 48837D1801                      cmp COUNT, 1
  9937 00006E6F 0F85CD0F0000                    jne L_error_arg_count_1
  9938 00006E75 488B4520                        mov rax, PARAM(0)
  9939 00006E79 803803                          cmp byte [rax], T_string
  9940 00006E7C 750C                            jne .L_false
  9941 00006E7E 48B8-                           mov rax, sob_boolean_true
  9941 00006E80 [0300000000000000] 
  9942 00006E88 EB0A                            jmp .L_end
  9943                                  .L_false:
  9944 00006E8A 48B8-                           mov rax, sob_boolean_false
  9944 00006E8C [0200000000000000] 
  9945                                  .L_end:
  9946                                          LEAVE
    38 00006E94 C9                  <1>  leave
  9947 00006E95 C21800                          ret AND_KILL_FRAME(1)
  9948                                  
  9949                                  L_code_ptr_is_symbol:
  9950                                          ENTER
    33 00006E98 C8000000            <1>  enter 0, 0
    34 00006E9C 4883E4F0            <1>  and rsp, ~15
  9951 00006EA0 48837D1801                      cmp COUNT, 1
  9952 00006EA5 0F85970F0000                    jne L_error_arg_count_1
  9953 00006EAB 488B4520                        mov rax, PARAM(0)
  9954 00006EAF 803804                          cmp byte [rax], T_symbol
  9955 00006EB2 750C                            jne .L_false
  9956 00006EB4 48B8-                           mov rax, sob_boolean_true
  9956 00006EB6 [0300000000000000] 
  9957 00006EBE EB0A                            jmp .L_end
  9958                                  .L_false:
  9959 00006EC0 48B8-                           mov rax, sob_boolean_false
  9959 00006EC2 [0200000000000000] 
  9960                                  .L_end:
  9961                                          LEAVE
    38 00006ECA C9                  <1>  leave
  9962 00006ECB C21800                          ret AND_KILL_FRAME(1)
  9963                                  
  9964                                  L_code_ptr_is_vector:
  9965                                          ENTER
    33 00006ECE C8000000            <1>  enter 0, 0
    34 00006ED2 4883E4F0            <1>  and rsp, ~15
  9966 00006ED6 48837D1801                      cmp COUNT, 1
  9967 00006EDB 0F85610F0000                    jne L_error_arg_count_1
  9968 00006EE1 488B4520                        mov rax, PARAM(0)
  9969 00006EE5 803822                          cmp byte [rax], T_vector
  9970 00006EE8 750C                            jne .L_false
  9971 00006EEA 48B8-                           mov rax, sob_boolean_true
  9971 00006EEC [0300000000000000] 
  9972 00006EF4 EB0A                            jmp .L_end
  9973                                  .L_false:
  9974 00006EF6 48B8-                           mov rax, sob_boolean_false
  9974 00006EF8 [0200000000000000] 
  9975                                  .L_end:
  9976                                          LEAVE
    38 00006F00 C9                  <1>  leave
  9977 00006F01 C21800                          ret AND_KILL_FRAME(1)
  9978                                  
  9979                                  L_code_ptr_is_closure:
  9980                                          ENTER
    33 00006F04 C8000000            <1>  enter 0, 0
    34 00006F08 4883E4F0            <1>  and rsp, ~15
  9981 00006F0C 48837D1801                      cmp COUNT, 1
  9982 00006F11 0F852B0F0000                    jne L_error_arg_count_1
  9983 00006F17 488B4520                        mov rax, PARAM(0)
  9984 00006F1B 803805                          cmp byte [rax], T_closure
  9985 00006F1E 750C                            jne .L_false
  9986 00006F20 48B8-                           mov rax, sob_boolean_true
  9986 00006F22 [0300000000000000] 
  9987 00006F2A EB0A                            jmp .L_end
  9988                                  .L_false:
  9989 00006F2C 48B8-                           mov rax, sob_boolean_false
  9989 00006F2E [0200000000000000] 
  9990                                  .L_end:
  9991                                          LEAVE
    38 00006F36 C9                  <1>  leave
  9992 00006F37 C21800                          ret AND_KILL_FRAME(1)
  9993                                  
  9994                                  L_code_ptr_is_real:
  9995                                          ENTER
    33 00006F3A C8000000            <1>  enter 0, 0
    34 00006F3E 4883E4F0            <1>  and rsp, ~15
  9996 00006F42 48837D1801                      cmp COUNT, 1
  9997 00006F47 0F85F50E0000                    jne L_error_arg_count_1
  9998 00006F4D 488B4520                        mov rax, PARAM(0)
  9999 00006F51 803812                          cmp byte [rax], T_real
 10000 00006F54 750C                            jne .L_false
 10001 00006F56 48B8-                           mov rax, sob_boolean_true
 10001 00006F58 [0300000000000000] 
 10002 00006F60 EB0A                            jmp .L_end
 10003                                  .L_false:
 10004 00006F62 48B8-                           mov rax, sob_boolean_false
 10004 00006F64 [0200000000000000] 
 10005                                  .L_end:
 10006                                          LEAVE
    38 00006F6C C9                  <1>  leave
 10007 00006F6D C21800                          ret AND_KILL_FRAME(1)
 10008                                  
 10009                                  L_code_ptr_is_rational:
 10010                                          ENTER
    33 00006F70 C8000000            <1>  enter 0, 0
    34 00006F74 4883E4F0            <1>  and rsp, ~15
 10011 00006F78 48837D1801                      cmp COUNT, 1
 10012 00006F7D 0F85BF0E0000                    jne L_error_arg_count_1
 10013 00006F83 488B4520                        mov rax, PARAM(0)
 10014 00006F87 803811                          cmp byte [rax], T_rational
 10015 00006F8A 750C                            jne .L_false
 10016 00006F8C 48B8-                           mov rax, sob_boolean_true
 10016 00006F8E [0300000000000000] 
 10017 00006F96 EB0A                            jmp .L_end
 10018                                  .L_false:
 10019 00006F98 48B8-                           mov rax, sob_boolean_false
 10019 00006F9A [0200000000000000] 
 10020                                  .L_end:
 10021                                          LEAVE
    38 00006FA2 C9                  <1>  leave
 10022 00006FA3 C21800                          ret AND_KILL_FRAME(1)
 10023                                  
 10024                                  L_code_ptr_is_boolean:
 10025                                          ENTER
    33 00006FA6 C8000000            <1>  enter 0, 0
    34 00006FAA 4883E4F0            <1>  and rsp, ~15
 10026 00006FAE 48837D1801                      cmp COUNT, 1
 10027 00006FB3 0F85890E0000                    jne L_error_arg_count_1
 10028 00006FB9 488B4520                        mov rax, PARAM(0)
 10029 00006FBD 8A18                            mov bl, byte [rax]
 10030 00006FBF 80E308                          and bl, T_boolean
 10031 00006FC2 740C                            je .L_false
 10032 00006FC4 48B8-                           mov rax, sob_boolean_true
 10032 00006FC6 [0300000000000000] 
 10033 00006FCE EB0A                            jmp .L_end
 10034                                  .L_false:
 10035 00006FD0 48B8-                           mov rax, sob_boolean_false
 10035 00006FD2 [0200000000000000] 
 10036                                  .L_end:
 10037                                          LEAVE
    38 00006FDA C9                  <1>  leave
 10038 00006FDB C21800                          ret AND_KILL_FRAME(1)
 10039                                          
 10040                                  L_code_ptr_is_number:
 10041                                          ENTER
    33 00006FDE C8000000            <1>  enter 0, 0
    34 00006FE2 4883E4F0            <1>  and rsp, ~15
 10042 00006FE6 48837D1801                      cmp COUNT, 1
 10043 00006FEB 0F85510E0000                    jne L_error_arg_count_1
 10044 00006FF1 488B4520                        mov rax, PARAM(0)
 10045 00006FF5 8A18                            mov bl, byte [rax]
 10046 00006FF7 80E310                          and bl, T_number
 10047 00006FFA 740C                            je .L_false
 10048 00006FFC 48B8-                           mov rax, sob_boolean_true
 10048 00006FFE [0300000000000000] 
 10049 00007006 EB0A                            jmp .L_end
 10050                                  .L_false:
 10051 00007008 48B8-                           mov rax, sob_boolean_false
 10051 0000700A [0200000000000000] 
 10052                                  .L_end:
 10053                                          LEAVE
    38 00007012 C9                  <1>  leave
 10054 00007013 C21800                          ret AND_KILL_FRAME(1)
 10055                                          
 10056                                  L_code_ptr_is_collection:
 10057                                          ENTER
    33 00007016 C8000000            <1>  enter 0, 0
    34 0000701A 4883E4F0            <1>  and rsp, ~15
 10058 0000701E 48837D1801                      cmp COUNT, 1
 10059 00007023 0F85190E0000                    jne L_error_arg_count_1
 10060 00007029 488B4520                        mov rax, PARAM(0)
 10061 0000702D 8A18                            mov bl, byte [rax]
 10062 0000702F 80E320                          and bl, T_collection
 10063 00007032 740C                            je .L_false
 10064 00007034 48B8-                           mov rax, sob_boolean_true
 10064 00007036 [0300000000000000] 
 10065 0000703E EB0A                            jmp .L_end
 10066                                  .L_false:
 10067 00007040 48B8-                           mov rax, sob_boolean_false
 10067 00007042 [0200000000000000] 
 10068                                  .L_end:
 10069                                          LEAVE
    38 0000704A C9                  <1>  leave
 10070 0000704B C21800                          ret AND_KILL_FRAME(1)
 10071                                  
 10072                                  L_code_ptr_cons:
 10073                                          ENTER
    33 0000704E C8000000            <1>  enter 0, 0
    34 00007052 4883E4F0            <1>  and rsp, ~15
 10074 00007056 48837D1802                      cmp COUNT, 2
 10075 0000705B 0F85160E0000                    jne L_error_arg_count_2
 10076 00007061 BF11000000                      mov rdi, (1 + 8 + 8)
 10077 00007066 E8B7F6FFFF                      call malloc
 10078 0000706B C60021                          mov byte [rax], T_pair
 10079 0000706E 488B5D20                        mov rbx, PARAM(0)
 10080 00007072 48895801                        mov SOB_PAIR_CAR(rax), rbx
 10081 00007076 488B5D28                        mov rbx, PARAM(1)
 10082 0000707A 48895809                        mov SOB_PAIR_CDR(rax), rbx
 10083                                          LEAVE
    38 0000707E C9                  <1>  leave
 10084 0000707F C22000                          ret AND_KILL_FRAME(2)
 10085                                  
 10086                                  L_code_ptr_display_sexpr:
 10087                                          ENTER
    33 00007082 C8000000            <1>  enter 0, 0
    34 00007086 4883E4F0            <1>  and rsp, ~15
 10088 0000708A 48837D1801                      cmp COUNT, 1
 10089 0000708F 0F85AD0D0000                    jne L_error_arg_count_1
 10090 00007095 488B7D20                        mov rdi, PARAM(0)
 10091 00007099 E89FF6FFFF                      call print_sexpr
 10092 0000709E 48B8-                           mov rax, sob_void
 10092 000070A0 [0000000000000000] 
 10093                                          LEAVE
    38 000070A8 C9                  <1>  leave
 10094 000070A9 C21800                          ret AND_KILL_FRAME(1)
 10095                                  
 10096                                  L_code_ptr_write_char:
 10097                                          ENTER
    33 000070AC C8000000            <1>  enter 0, 0
    34 000070B0 4883E4F0            <1>  and rsp, ~15
 10098 000070B4 48837D1801                      cmp COUNT, 1
 10099 000070B9 0F85830D0000                    jne L_error_arg_count_1
 10100 000070BF 488B4520                        mov rax, PARAM(0)
 10101                                          assert_char(rax)
    42 000070C3 803802              <1>  cmp byte [%1], %2
    43 000070C6 0F854A0E0000        <1>  jne L_error_incorrect_type
 10102 000070CC 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 10103 000070CF 4825FF000000                    and rax, 255
 10104 000070D5 48BF-                           mov rdi, fmt_char
 10104 000070D7 [4802000000000000] 
 10105 000070DF 4889C6                          mov rsi, rax
 10106 000070E2 B800000000                      mov rax, 0
 10107                                  	ENTER
    33 000070E7 C8000000            <1>  enter 0, 0
    34 000070EB 4883E4F0            <1>  and rsp, ~15
 10108 000070EF E8(00000000)                    call printf
 10109                                  	LEAVE
    38 000070F4 C9                  <1>  leave
 10110 000070F5 48B8-                           mov rax, sob_void
 10110 000070F7 [0000000000000000] 
 10111                                          LEAVE
    38 000070FF C9                  <1>  leave
 10112 00007100 C21800                          ret AND_KILL_FRAME(1)
 10113                                  
 10114                                  L_code_ptr_car:
 10115                                          ENTER
    33 00007103 C8000000            <1>  enter 0, 0
    34 00007107 4883E4F0            <1>  and rsp, ~15
 10116 0000710B 48837D1801                      cmp COUNT, 1
 10117 00007110 0F852C0D0000                    jne L_error_arg_count_1
 10118 00007116 488B4520                        mov rax, PARAM(0)
 10119                                          assert_pair(rax)
    42 0000711A 803821              <1>  cmp byte [%1], %2
    43 0000711D 0F85F30D0000        <1>  jne L_error_incorrect_type
 10120 00007123 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 10121                                          LEAVE
    38 00007127 C9                  <1>  leave
 10122 00007128 C21800                          ret AND_KILL_FRAME(1)
 10123                                          
 10124                                  L_code_ptr_cdr:
 10125                                          ENTER
    33 0000712B C8000000            <1>  enter 0, 0
    34 0000712F 4883E4F0            <1>  and rsp, ~15
 10126 00007133 48837D1801                      cmp COUNT, 1
 10127 00007138 0F85040D0000                    jne L_error_arg_count_1
 10128 0000713E 488B4520                        mov rax, PARAM(0)
 10129                                          assert_pair(rax)
    42 00007142 803821              <1>  cmp byte [%1], %2
    43 00007145 0F85CB0D0000        <1>  jne L_error_incorrect_type
 10130 0000714B 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 10131                                          LEAVE
    38 0000714F C9                  <1>  leave
 10132 00007150 C21800                          ret AND_KILL_FRAME(1)
 10133                                          
 10134                                  L_code_ptr_string_length:
 10135                                          ENTER
    33 00007153 C8000000            <1>  enter 0, 0
    34 00007157 4883E4F0            <1>  and rsp, ~15
 10136 0000715B 48837D1801                      cmp COUNT, 1
 10137 00007160 0F85DC0C0000                    jne L_error_arg_count_1
 10138 00007166 488B4520                        mov rax, PARAM(0)
 10139                                          assert_string(rax)
    42 0000716A 803803              <1>  cmp byte [%1], %2
    43 0000716D 0F85A30D0000        <1>  jne L_error_incorrect_type
 10140 00007173 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 10141 00007177 E83A0C0000                      call make_integer
 10142                                          LEAVE
    38 0000717C C9                  <1>  leave
 10143 0000717D C21800                          ret AND_KILL_FRAME(1)
 10144                                  
 10145                                  L_code_ptr_vector_length:
 10146                                          ENTER
    33 00007180 C8000000            <1>  enter 0, 0
    34 00007184 4883E4F0            <1>  and rsp, ~15
 10147 00007188 48837D1801                      cmp COUNT, 1
 10148 0000718D 0F85AF0C0000                    jne L_error_arg_count_1
 10149 00007193 488B4520                        mov rax, PARAM(0)
 10150                                          assert_vector(rax)
    42 00007197 803822              <1>  cmp byte [%1], %2
    43 0000719A 0F85760D0000        <1>  jne L_error_incorrect_type
 10151 000071A0 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 10152 000071A4 E80D0C0000                      call make_integer
 10153                                          LEAVE
    38 000071A9 C9                  <1>  leave
 10154 000071AA C21800                          ret AND_KILL_FRAME(1)
 10155                                  
 10156                                  L_code_ptr_real_to_integer:
 10157                                          ENTER
    33 000071AD C8000000            <1>  enter 0, 0
    34 000071B1 4883E4F0            <1>  and rsp, ~15
 10158 000071B5 48837D1801                      cmp COUNT, 1
 10159 000071BA 0F85820C0000                    jne L_error_arg_count_1
 10160 000071C0 488B5D20                        mov rbx, PARAM(0)
 10161                                          assert_real(rbx)
    42 000071C4 803B12              <1>  cmp byte [%1], %2
    43 000071C7 0F85490D0000        <1>  jne L_error_incorrect_type
 10162 000071CD F20F104301                      movsd xmm0, qword [rbx + 1]
 10163 000071D2 F2480F2CF8                      cvttsd2si rdi, xmm0
 10164 000071D7 E8DA0B0000                      call make_integer
 10165                                          LEAVE
    38 000071DC C9                  <1>  leave
 10166 000071DD C21800                          ret AND_KILL_FRAME(1)
 10167                                  
 10168                                  L_code_ptr_exit:
 10169                                          ENTER
    33 000071E0 C8000000            <1>  enter 0, 0
    34 000071E4 4883E4F0            <1>  and rsp, ~15
 10170 000071E8 48837D1800                      cmp COUNT, 0
 10171 000071ED 0F851A0C0000                    jne L_error_arg_count_0
 10172 000071F3 B800000000                      mov rax, 0
 10173 000071F8 E8(00000000)                    call exit
 10174                                  
 10175                                  L_code_ptr_integer_to_real:
 10176                                          ENTER
    33 000071FD C8000000            <1>  enter 0, 0
    34 00007201 4883E4F0            <1>  and rsp, ~15
 10177 00007205 48837D1801                      cmp COUNT, 1
 10178 0000720A 0F85320C0000                    jne L_error_arg_count_1
 10179 00007210 488B4520                        mov rax, PARAM(0)
 10180                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00007214 803811              <2>  cmp byte [%1], %2
    43 00007217 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 0000721D 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00007222 0F85EE0C0000        <1>  jne L_error_incorrect_type
 10181 00007228 FF7001                          push qword [rax + 1]
 10182 0000722B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 10183 00007231 E8640B0000                      call make_real
 10184                                          LEAVE
    38 00007236 C9                  <1>  leave
 10185 00007237 C21800                          ret AND_KILL_FRAME(1)
 10186                                  
 10187                                  L_code_ptr_rational_to_real:
 10188                                          ENTER
    33 0000723A C8000000            <1>  enter 0, 0
    34 0000723E 4883E4F0            <1>  and rsp, ~15
 10189 00007242 48837D1801                      cmp COUNT, 1
 10190 00007247 0F85F50B0000                    jne L_error_arg_count_1
 10191 0000724D 488B4520                        mov rax, PARAM(0)
 10192                                          assert_rational(rax)
    42 00007251 803811              <1>  cmp byte [%1], %2
    43 00007254 0F85BC0C0000        <1>  jne L_error_incorrect_type
 10193 0000725A FF7001                          push qword [rax + 1]
 10194 0000725D F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 10195 00007263 FF7009                          push qword [rax + 1 + 8]
 10196 00007266 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 10197 0000726C F20F5EC1                        divsd xmm0, xmm1
 10198 00007270 E8250B0000                      call make_real
 10199                                          LEAVE
    38 00007275 C9                  <1>  leave
 10200 00007276 C21800                          ret AND_KILL_FRAME(1)
 10201                                  
 10202                                  L_code_ptr_char_to_integer:
 10203                                          ENTER
    33 00007279 C8000000            <1>  enter 0, 0
    34 0000727D 4883E4F0            <1>  and rsp, ~15
 10204 00007281 48837D1801                      cmp COUNT, 1
 10205 00007286 0F85B60B0000                    jne L_error_arg_count_1
 10206 0000728C 488B4520                        mov rax, PARAM(0)
 10207                                          assert_char(rax)
    42 00007290 803802              <1>  cmp byte [%1], %2
    43 00007293 0F857D0C0000        <1>  jne L_error_incorrect_type
 10208 00007299 8A4001                          mov al, byte [rax + 1]
 10209 0000729C 4825FF000000                    and rax, 255
 10210 000072A2 4889C7                          mov rdi, rax
 10211 000072A5 E80C0B0000                      call make_integer
 10212                                          LEAVE
    38 000072AA C9                  <1>  leave
 10213 000072AB C21800                          ret AND_KILL_FRAME(1)
 10214                                  
 10215                                  L_code_ptr_integer_to_char:
 10216                                          ENTER
    33 000072AE C8000000            <1>  enter 0, 0
    34 000072B2 4883E4F0            <1>  and rsp, ~15
 10217 000072B6 48837D1801                      cmp COUNT, 1
 10218 000072BB 0F85810B0000                    jne L_error_arg_count_1
 10219 000072C1 488B4520                        mov rax, PARAM(0)
 10220                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000072C5 803811              <2>  cmp byte [%1], %2
    43 000072C8 0F85480C0000        <2>  jne L_error_incorrect_type
    48 000072CE 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000072D3 0F853D0C0000        <1>  jne L_error_incorrect_type
 10221 000072D9 488B5801                        mov rbx, qword [rax + 1]
 10222 000072DD 4883FB00                        cmp rbx, 0
 10223 000072E1 0F8EF50A0000                    jle L_error_integer_range
 10224 000072E7 4881FB00010000                  cmp rbx, 256
 10225 000072EE 0F8DE80A0000                    jge L_error_integer_range
 10226 000072F4 BF02000000                      mov rdi, (1 + 1)
 10227 000072F9 E824F4FFFF                      call malloc
 10228 000072FE C60002                          mov byte [rax], T_char
 10229 00007301 885801                          mov byte [rax + 1], bl
 10230                                          LEAVE
    38 00007304 C9                  <1>  leave
 10231 00007305 C21800                          ret AND_KILL_FRAME(1)
 10232                                  
 10233                                  L_code_ptr_trng:
 10234                                          ENTER
    33 00007308 C8000000            <1>  enter 0, 0
    34 0000730C 4883E4F0            <1>  and rsp, ~15
 10235 00007310 48837D1800                      cmp COUNT, 0
 10236 00007315 0F85F20A0000                    jne L_error_arg_count_0
 10237 0000731B 480FC7F7                        rdrand rdi
 10238 0000731F 48D1EF                          shr rdi, 1
 10239 00007322 E88F0A0000                      call make_integer
 10240                                          LEAVE
    38 00007327 C9                  <1>  leave
 10241 00007328 C21000                          ret AND_KILL_FRAME(0)
 10242                                  
 10243                                  L_code_ptr_is_zero:
 10244                                          ENTER
    33 0000732B C8000000            <1>  enter 0, 0
    34 0000732F 4883E4F0            <1>  and rsp, ~15
 10245 00007333 48837D1801                      cmp COUNT, 1
 10246 00007338 0F85040B0000                    jne L_error_arg_count_1
 10247 0000733E 488B4520                        mov rax, PARAM(0)
 10248 00007342 803811                          cmp byte [rax], T_rational
 10249 00007345 740A                            je .L_rational
 10250 00007347 803812                          cmp byte [rax], T_real
 10251 0000734A 740E                            je .L_real
 10252 0000734C E9C50B0000                      jmp L_error_incorrect_type
 10253                                  .L_rational:
 10254 00007351 4883780100                      cmp qword [rax + 1], 0
 10255 00007356 7420                            je .L_zero
 10256 00007358 EB12                            jmp .L_not_zero
 10257                                  .L_real:
 10258 0000735A 660FEFC0                        pxor xmm0, xmm0
 10259 0000735E FF7001                          push qword [rax + 1]
 10260 00007361 F20F100C24                      movsd xmm1, qword [rsp]
 10261 00007366 660F2EC1                        ucomisd xmm0, xmm1
 10262 0000736A 740C                            je .L_zero
 10263                                  .L_not_zero:
 10264 0000736C 48B8-                           mov rax, sob_boolean_false
 10264 0000736E [0200000000000000] 
 10265 00007376 EB0A                            jmp .L_end
 10266                                  .L_zero:
 10267 00007378 48B8-                           mov rax, sob_boolean_true
 10267 0000737A [0300000000000000] 
 10268                                  .L_end:
 10269                                          LEAVE
    38 00007382 C9                  <1>  leave
 10270 00007383 C21800                          ret AND_KILL_FRAME(1)
 10271                                  
 10272                                  L_code_ptr_is_integer:
 10273                                          ENTER
    33 00007386 C8000000            <1>  enter 0, 0
    34 0000738A 4883E4F0            <1>  and rsp, ~15
 10274 0000738E 48837D1801                      cmp COUNT, 1
 10275 00007393 0F85A90A0000                    jne L_error_arg_count_1
 10276 00007399 488B4520                        mov rax, PARAM(0)
 10277 0000739D 803811                          cmp byte [rax], T_rational
 10278 000073A0 7513                            jne .L_false
 10279 000073A2 4883780901                      cmp qword [rax + 1 + 8], 1
 10280 000073A7 750C                            jne .L_false
 10281 000073A9 48B8-                           mov rax, sob_boolean_true
 10281 000073AB [0300000000000000] 
 10282 000073B3 EB0A                            jmp .L_exit
 10283                                  .L_false:
 10284 000073B5 48B8-                           mov rax, sob_boolean_false
 10284 000073B7 [0200000000000000] 
 10285                                  .L_exit:
 10286                                          LEAVE
    38 000073BF C9                  <1>  leave
 10287 000073C0 C21800                          ret AND_KILL_FRAME(1)
 10288                                  
 10289                                  L_code_ptr_raw_bin_add_rr:
 10290                                          ENTER
    33 000073C3 C8000000            <1>  enter 0, 0
    34 000073C7 4883E4F0            <1>  and rsp, ~15
 10291 000073CB 48837D1802                      cmp COUNT, 2
 10292 000073D0 0F85A10A0000                    jne L_error_arg_count_2
 10293 000073D6 488B5D20                        mov rbx, PARAM(0)
 10294                                          assert_real(rbx)
    42 000073DA 803B12              <1>  cmp byte [%1], %2
    43 000073DD 0F85330B0000        <1>  jne L_error_incorrect_type
 10295 000073E3 488B4D28                        mov rcx, PARAM(1)
 10296                                          assert_real(rcx)
    42 000073E7 803912              <1>  cmp byte [%1], %2
    43 000073EA 0F85260B0000        <1>  jne L_error_incorrect_type
 10297 000073F0 F20F104301                      movsd xmm0, qword [rbx + 1]
 10298 000073F5 F20F104901                      movsd xmm1, qword [rcx + 1]
 10299 000073FA F20F58C1                        addsd xmm0, xmm1
 10300 000073FE E897090000                      call make_real
 10301                                          LEAVE
    38 00007403 C9                  <1>  leave
 10302 00007404 C22000                          ret AND_KILL_FRAME(2)
 10303                                  
 10304                                  L_code_ptr_raw_bin_sub_rr:
 10305                                          ENTER
    33 00007407 C8000000            <1>  enter 0, 0
    34 0000740B 4883E4F0            <1>  and rsp, ~15
 10306 0000740F 48837D1802                      cmp COUNT, 2
 10307 00007414 0F855D0A0000                    jne L_error_arg_count_2
 10308 0000741A 488B5D20                        mov rbx, PARAM(0)
 10309                                          assert_real(rbx)
    42 0000741E 803B12              <1>  cmp byte [%1], %2
    43 00007421 0F85EF0A0000        <1>  jne L_error_incorrect_type
 10310 00007427 488B4D28                        mov rcx, PARAM(1)
 10311                                          assert_real(rcx)
    42 0000742B 803912              <1>  cmp byte [%1], %2
    43 0000742E 0F85E20A0000        <1>  jne L_error_incorrect_type
 10312 00007434 F20F104301                      movsd xmm0, qword [rbx + 1]
 10313 00007439 F20F104901                      movsd xmm1, qword [rcx + 1]
 10314 0000743E F20F5CC1                        subsd xmm0, xmm1
 10315 00007442 E853090000                      call make_real
 10316                                          LEAVE
    38 00007447 C9                  <1>  leave
 10317 00007448 C22000                          ret AND_KILL_FRAME(2)
 10318                                  
 10319                                  L_code_ptr_raw_bin_mul_rr:
 10320                                          ENTER
    33 0000744B C8000000            <1>  enter 0, 0
    34 0000744F 4883E4F0            <1>  and rsp, ~15
 10321 00007453 48837D1802                      cmp COUNT, 2
 10322 00007458 0F85190A0000                    jne L_error_arg_count_2
 10323 0000745E 488B5D20                        mov rbx, PARAM(0)
 10324                                          assert_real(rbx)
    42 00007462 803B12              <1>  cmp byte [%1], %2
    43 00007465 0F85AB0A0000        <1>  jne L_error_incorrect_type
 10325 0000746B 488B4D28                        mov rcx, PARAM(1)
 10326                                          assert_real(rcx)
    42 0000746F 803912              <1>  cmp byte [%1], %2
    43 00007472 0F859E0A0000        <1>  jne L_error_incorrect_type
 10327 00007478 F20F104301                      movsd xmm0, qword [rbx + 1]
 10328 0000747D F20F104901                      movsd xmm1, qword [rcx + 1]
 10329 00007482 F20F59C1                        mulsd xmm0, xmm1
 10330 00007486 E80F090000                      call make_real
 10331                                          LEAVE
    38 0000748B C9                  <1>  leave
 10332 0000748C C22000                          ret AND_KILL_FRAME(2)
 10333                                  
 10334                                  L_code_ptr_raw_bin_div_rr:
 10335                                          ENTER
    33 0000748F C8000000            <1>  enter 0, 0
    34 00007493 4883E4F0            <1>  and rsp, ~15
 10336 00007497 48837D1802                      cmp COUNT, 2
 10337 0000749C 0F85D5090000                    jne L_error_arg_count_2
 10338 000074A2 488B5D20                        mov rbx, PARAM(0)
 10339                                          assert_real(rbx)
    42 000074A6 803B12              <1>  cmp byte [%1], %2
    43 000074A9 0F85670A0000        <1>  jne L_error_incorrect_type
 10340 000074AF 488B4D28                        mov rcx, PARAM(1)
 10341                                          assert_real(rcx)
    42 000074B3 803912              <1>  cmp byte [%1], %2
    43 000074B6 0F855A0A0000        <1>  jne L_error_incorrect_type
 10342 000074BC F20F104301                      movsd xmm0, qword [rbx + 1]
 10343 000074C1 F20F104901                      movsd xmm1, qword [rcx + 1]
 10344 000074C6 660FEFD2                        pxor xmm2, xmm2
 10345 000074CA 660F2ECA                        ucomisd xmm1, xmm2
 10346 000074CE 0F84730A0000                    je L_error_division_by_zero
 10347 000074D4 F20F5EC1                        divsd xmm0, xmm1
 10348 000074D8 E8BD080000                      call make_real
 10349                                          LEAVE
    38 000074DD C9                  <1>  leave
 10350 000074DE C22000                          ret AND_KILL_FRAME(2)
 10351                                  
 10352                                  L_code_ptr_raw_bin_add_qq:
 10353                                          ENTER
    33 000074E1 C8000000            <1>  enter 0, 0
    34 000074E5 4883E4F0            <1>  and rsp, ~15
 10354 000074E9 48837D1802                      cmp COUNT, 2
 10355 000074EE 0F8583090000                    jne L_error_arg_count_2
 10356 000074F4 4C8B4520                        mov r8, PARAM(0)
 10357                                          assert_rational(r8)
    42 000074F8 41803811            <1>  cmp byte [%1], %2
    43 000074FC 0F85140A0000        <1>  jne L_error_incorrect_type
 10358 00007502 4C8B4D28                        mov r9, PARAM(1)
 10359                                          assert_rational(r9)
    42 00007506 41803911            <1>  cmp byte [%1], %2
    43 0000750A 0F85060A0000        <1>  jne L_error_incorrect_type
 10360 00007510 498B4001                        mov rax, qword [r8 + 1] ; num1
 10361 00007514 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10362 00007518 4899                            cqo
 10363 0000751A 48F7EB                          imul rbx
 10364 0000751D 4889C6                          mov rsi, rax
 10365 00007520 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10366 00007524 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 10367 00007528 4899                            cqo
 10368 0000752A 48F7EB                          imul rbx
 10369 0000752D 4801C6                          add rsi, rax
 10370 00007530 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10371 00007534 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10372 00007538 4899                            cqo
 10373 0000753A 48F7EB                          imul rbx
 10374 0000753D 4889C7                          mov rdi, rax
 10375 00007540 E827010000                      call normalize_rational
 10376                                          LEAVE
    38 00007545 C9                  <1>  leave
 10377 00007546 C22000                          ret AND_KILL_FRAME(2)
 10378                                  
 10379                                  L_code_ptr_raw_bin_sub_qq:
 10380                                          ENTER
    33 00007549 C8000000            <1>  enter 0, 0
    34 0000754D 4883E4F0            <1>  and rsp, ~15
 10381 00007551 48837D1802                      cmp COUNT, 2
 10382 00007556 0F851B090000                    jne L_error_arg_count_2
 10383 0000755C 4C8B4520                        mov r8, PARAM(0)
 10384                                          assert_rational(r8)
    42 00007560 41803811            <1>  cmp byte [%1], %2
    43 00007564 0F85AC090000        <1>  jne L_error_incorrect_type
 10385 0000756A 4C8B4D28                        mov r9, PARAM(1)
 10386                                          assert_rational(r9)
    42 0000756E 41803911            <1>  cmp byte [%1], %2
    43 00007572 0F859E090000        <1>  jne L_error_incorrect_type
 10387 00007578 498B4001                        mov rax, qword [r8 + 1] ; num1
 10388 0000757C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10389 00007580 4899                            cqo
 10390 00007582 48F7EB                          imul rbx
 10391 00007585 4889C6                          mov rsi, rax
 10392 00007588 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10393 0000758C 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 10394 00007590 4899                            cqo
 10395 00007592 48F7EB                          imul rbx
 10396 00007595 4829C6                          sub rsi, rax
 10397 00007598 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10398 0000759C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10399 000075A0 4899                            cqo
 10400 000075A2 48F7EB                          imul rbx
 10401 000075A5 4889C7                          mov rdi, rax
 10402 000075A8 E8BF000000                      call normalize_rational
 10403                                          LEAVE
    38 000075AD C9                  <1>  leave
 10404 000075AE C22000                          ret AND_KILL_FRAME(2)
 10405                                  
 10406                                  L_code_ptr_raw_bin_mul_qq:
 10407                                          ENTER
    33 000075B1 C8000000            <1>  enter 0, 0
    34 000075B5 4883E4F0            <1>  and rsp, ~15
 10408 000075B9 48837D1802                      cmp COUNT, 2
 10409 000075BE 0F85B3080000                    jne L_error_arg_count_2
 10410 000075C4 4C8B4520                        mov r8, PARAM(0)
 10411                                          assert_rational(r8)
    42 000075C8 41803811            <1>  cmp byte [%1], %2
    43 000075CC 0F8544090000        <1>  jne L_error_incorrect_type
 10412 000075D2 4C8B4D28                        mov r9, PARAM(1)
 10413                                          assert_rational(r9)
    42 000075D6 41803911            <1>  cmp byte [%1], %2
    43 000075DA 0F8536090000        <1>  jne L_error_incorrect_type
 10414 000075E0 498B4001                        mov rax, qword [r8 + 1] ; num1
 10415 000075E4 498B5901                        mov rbx, qword [r9 + 1] ; num2
 10416 000075E8 4899                            cqo
 10417 000075EA 48F7EB                          imul rbx
 10418 000075ED 4889C6                          mov rsi, rax
 10419 000075F0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10420 000075F4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 10421 000075F8 4899                            cqo
 10422 000075FA 48F7EB                          imul rbx
 10423 000075FD 4889C7                          mov rdi, rax
 10424 00007600 E867000000                      call normalize_rational
 10425                                          LEAVE
    38 00007605 C9                  <1>  leave
 10426 00007606 C22000                          ret AND_KILL_FRAME(2)
 10427                                          
 10428                                  L_code_ptr_raw_bin_div_qq:
 10429                                          ENTER
    33 00007609 C8000000            <1>  enter 0, 0
    34 0000760D 4883E4F0            <1>  and rsp, ~15
 10430 00007611 48837D1802                      cmp COUNT, 2
 10431 00007616 0F855B080000                    jne L_error_arg_count_2
 10432 0000761C 4C8B4520                        mov r8, PARAM(0)
 10433                                          assert_rational(r8)
    42 00007620 41803811            <1>  cmp byte [%1], %2
    43 00007624 0F85EC080000        <1>  jne L_error_incorrect_type
 10434 0000762A 4C8B4D28                        mov r9, PARAM(1)
 10435                                          assert_rational(r9)
    42 0000762E 41803911            <1>  cmp byte [%1], %2
    43 00007632 0F85DE080000        <1>  jne L_error_incorrect_type
 10436 00007638 4983790100                      cmp qword [r9 + 1], 0
 10437 0000763D 0F8404090000                    je L_error_division_by_zero
 10438 00007643 498B4001                        mov rax, qword [r8 + 1] ; num1
 10439 00007647 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 10440 0000764B 4899                            cqo
 10441 0000764D 48F7EB                          imul rbx
 10442 00007650 4889C6                          mov rsi, rax
 10443 00007653 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 10444 00007657 498B5901                        mov rbx, qword [r9 + 1] ; num2
 10445 0000765B 4899                            cqo
 10446 0000765D 48F7EB                          imul rbx
 10447 00007660 4889C7                          mov rdi, rax
 10448 00007663 E804000000                      call normalize_rational
 10449                                          LEAVE
    38 00007668 C9                  <1>  leave
 10450 00007669 C22000                          ret AND_KILL_FRAME(2)
 10451                                          
 10452                                  normalize_rational:
 10453 0000766C 56                              push rsi
 10454 0000766D 57                              push rdi
 10455 0000766E E839000000                      call gcd
 10456 00007673 4889C3                          mov rbx, rax
 10457 00007676 58                              pop rax
 10458 00007677 4899                            cqo
 10459 00007679 48F7FB                          idiv rbx
 10460 0000767C 4989C0                          mov r8, rax
 10461 0000767F 58                              pop rax
 10462 00007680 4899                            cqo
 10463 00007682 48F7FB                          idiv rbx
 10464 00007685 4989C1                          mov r9, rax
 10465 00007688 BF11000000                      mov rdi, (1 + 8 + 8)
 10466 0000768D E890F0FFFF                      call malloc
 10467 00007692 C60011                          mov byte [rax], T_rational
 10468 00007695 4C894801                        mov qword [rax + 1], r9
 10469 00007699 4C894009                        mov qword [rax + 1 + 8], r8
 10470 0000769D C3                              ret
 10471                                  
 10472                                  iabs:
 10473 0000769E 4889F8                          mov rax, rdi
 10474 000076A1 4883F800                        cmp rax, 0
 10475 000076A5 7C01                            jl .Lneg
 10476 000076A7 C3                              ret
 10477                                  .Lneg:
 10478 000076A8 48F7D8                          neg rax
 10479 000076AB C3                              ret
 10480                                  
 10481                                  gcd:
 10482 000076AC E8EDFFFFFF                      call iabs
 10483 000076B1 4889C3                          mov rbx, rax
 10484 000076B4 4889F7                          mov rdi, rsi
 10485 000076B7 E8E2FFFFFF                      call iabs
 10486 000076BC 4883F800                        cmp rax, 0
 10487 000076C0 7502                            jne .L0
 10488 000076C2 4893                            xchg rax, rbx
 10489                                  .L0:
 10490 000076C4 4883FB00                        cmp rbx, 0
 10491 000076C8 740C                            je .L1
 10492 000076CA 4899                            cqo
 10493 000076CC 48F7F3                          div rbx
 10494 000076CF 4889D0                          mov rax, rdx
 10495 000076D2 4893                            xchg rax, rbx
 10496 000076D4 EBEE                            jmp .L0
 10497                                  .L1:
 10498 000076D6 C3                              ret
 10499                                  
 10500                                  L_code_ptr_error:
 10501                                          ENTER
    33 000076D7 C8000000            <1>  enter 0, 0
    34 000076DB 4883E4F0            <1>  and rsp, ~15
 10502 000076DF 48837D1802                      cmp COUNT, 2
 10503 000076E4 0F858D070000                    jne L_error_arg_count_2
 10504 000076EA 488B7520                        mov rsi, PARAM(0)
 10505                                          assert_symbol(rsi)
    42 000076EE 803E04              <1>  cmp byte [%1], %2
    43 000076F1 0F851F080000        <1>  jne L_error_incorrect_type
 10506 000076F7 488B7528                        mov rsi, PARAM(1)
 10507                                          assert_string(rsi)
    42 000076FB 803E03              <1>  cmp byte [%1], %2
    43 000076FE 0F8512080000        <1>  jne L_error_incorrect_type
 10508 00007704 48BF-                           mov rdi, fmt_scheme_error_part_1
 10508 00007706 [8003000000000000] 
 10509 0000770E B800000000                      mov rax, 0
 10510                                  	ENTER
    33 00007713 C8000000            <1>  enter 0, 0
    34 00007717 4883E4F0            <1>  and rsp, ~15
 10511 0000771B E8(00000000)                    call printf
 10512                                  	LEAVE
    38 00007720 C9                  <1>  leave
 10513 00007721 488B7D20                        mov rdi, PARAM(0)
 10514 00007725 E813F0FFFF                      call print_sexpr
 10515 0000772A 48BF-                           mov rdi, fmt_scheme_error_part_2
 10515 0000772C [9403000000000000] 
 10516 00007734 B800000000                      mov rax, 0
 10517                                  	ENTER
    33 00007739 C8000000            <1>  enter 0, 0
    34 0000773D 4883E4F0            <1>  and rsp, ~15
 10518 00007741 E8(00000000)                    call printf
 10519                                  	LEAVE
    38 00007746 C9                  <1>  leave
 10520 00007747 488B4528                        mov rax, PARAM(1)       ; sob_string
 10521 0000774B BE01000000                      mov rsi, 1              ; size = 1 byte
 10522 00007750 488B5001                        mov rdx, qword [rax + 1] ; length
 10523 00007754 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 10524 00007758 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 10525 00007760 E8(00000000)                    call fwrite
 10526 00007765 48BF-                           mov rdi, fmt_scheme_error_part_3
 10526 00007767 [D603000000000000] 
 10527 0000776F B800000000                      mov rax, 0
 10528                                  	ENTER
    33 00007774 C8000000            <1>  enter 0, 0
    34 00007778 4883E4F0            <1>  and rsp, ~15
 10529 0000777C E8(00000000)                    call printf
 10530                                  	LEAVE
    38 00007781 C9                  <1>  leave
 10531 00007782 48C7C0F7FFFFFF                  mov rax, -9
 10532 00007789 E8(00000000)                    call exit
 10533                                  
 10534                                  L_code_ptr_raw_less_than_rr:
 10535                                          ENTER
    33 0000778E C8000000            <1>  enter 0, 0
    34 00007792 4883E4F0            <1>  and rsp, ~15
 10536 00007796 48837D1802                      cmp COUNT, 2
 10537 0000779B 0F85D6060000                    jne L_error_arg_count_2
 10538 000077A1 488B7520                        mov rsi, PARAM(0)
 10539                                          assert_real(rsi)
    42 000077A5 803E12              <1>  cmp byte [%1], %2
    43 000077A8 0F8568070000        <1>  jne L_error_incorrect_type
 10540 000077AE 488B7D28                        mov rdi, PARAM(1)
 10541                                          assert_real(rdi)
    42 000077B2 803F12              <1>  cmp byte [%1], %2
    43 000077B5 0F855B070000        <1>  jne L_error_incorrect_type
 10542 000077BB F20F104601                      movsd xmm0, qword [rsi + 1]
 10543 000077C0 F20F104F01                      movsd xmm1, qword [rdi + 1]
 10544 000077C5 660F2FC1                        comisd xmm0, xmm1
 10545 000077C9 730C                            jae .L_false
 10546 000077CB 48B8-                           mov rax, sob_boolean_true
 10546 000077CD [0300000000000000] 
 10547 000077D5 EB0A                            jmp .L_exit
 10548                                  .L_false:
 10549 000077D7 48B8-                           mov rax, sob_boolean_false
 10549 000077D9 [0200000000000000] 
 10550                                  .L_exit:
 10551                                          LEAVE
    38 000077E1 C9                  <1>  leave
 10552 000077E2 C22000                          ret AND_KILL_FRAME(2)
 10553                                          
 10554                                  L_code_ptr_raw_less_than_qq:
 10555                                          ENTER
    33 000077E5 C8000000            <1>  enter 0, 0
    34 000077E9 4883E4F0            <1>  and rsp, ~15
 10556 000077ED 48837D1802                      cmp COUNT, 2
 10557 000077F2 0F857F060000                    jne L_error_arg_count_2
 10558 000077F8 488B7520                        mov rsi, PARAM(0)
 10559                                          assert_rational(rsi)
    42 000077FC 803E11              <1>  cmp byte [%1], %2
    43 000077FF 0F8511070000        <1>  jne L_error_incorrect_type
 10560 00007805 488B7D28                        mov rdi, PARAM(1)
 10561                                          assert_rational(rdi)
    42 00007809 803F11              <1>  cmp byte [%1], %2
    43 0000780C 0F8504070000        <1>  jne L_error_incorrect_type
 10562 00007812 488B4601                        mov rax, qword [rsi + 1] ; num1
 10563 00007816 4899                            cqo
 10564 00007818 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 10565 0000781C 4889C1                          mov rcx, rax
 10566 0000781F 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 10567 00007823 4899                            cqo
 10568 00007825 48F76F01                        imul qword [rdi + 1]          ; num2
 10569 00007829 4829C1                          sub rcx, rax
 10570 0000782C 7D0C                            jge .L_false
 10571 0000782E 48B8-                           mov rax, sob_boolean_true
 10571 00007830 [0300000000000000] 
 10572 00007838 EB0A                            jmp .L_exit
 10573                                  .L_false:
 10574 0000783A 48B8-                           mov rax, sob_boolean_false
 10574 0000783C [0200000000000000] 
 10575                                  .L_exit:
 10576                                          LEAVE
    38 00007844 C9                  <1>  leave
 10577 00007845 C22000                          ret AND_KILL_FRAME(2)
 10578                                  
 10579                                  L_code_ptr_raw_equal_rr:
 10580                                          ENTER
    33 00007848 C8000000            <1>  enter 0, 0
    34 0000784C 4883E4F0            <1>  and rsp, ~15
 10581 00007850 48837D1802                      cmp COUNT, 2
 10582 00007855 0F851C060000                    jne L_error_arg_count_2
 10583 0000785B 488B7520                        mov rsi, PARAM(0)
 10584                                          assert_real(rsi)
    42 0000785F 803E12              <1>  cmp byte [%1], %2
    43 00007862 0F85AE060000        <1>  jne L_error_incorrect_type
 10585 00007868 488B7D28                        mov rdi, PARAM(1)
 10586                                          assert_real(rdi)
    42 0000786C 803F12              <1>  cmp byte [%1], %2
    43 0000786F 0F85A1060000        <1>  jne L_error_incorrect_type
 10587 00007875 F20F104601                      movsd xmm0, qword [rsi + 1]
 10588 0000787A F20F104F01                      movsd xmm1, qword [rdi + 1]
 10589 0000787F 660F2FC1                        comisd xmm0, xmm1
 10590 00007883 750C                            jne .L_false
 10591 00007885 48B8-                           mov rax, sob_boolean_true
 10591 00007887 [0300000000000000] 
 10592 0000788F EB0A                            jmp .L_exit
 10593                                  .L_false:
 10594 00007891 48B8-                           mov rax, sob_boolean_false
 10594 00007893 [0200000000000000] 
 10595                                  .L_exit:
 10596                                          LEAVE
    38 0000789B C9                  <1>  leave
 10597 0000789C C22000                          ret AND_KILL_FRAME(2)
 10598                                          
 10599                                  L_code_ptr_raw_equal_qq:
 10600                                          ENTER
    33 0000789F C8000000            <1>  enter 0, 0
    34 000078A3 4883E4F0            <1>  and rsp, ~15
 10601 000078A7 48837D1802                      cmp COUNT, 2
 10602 000078AC 0F85C5050000                    jne L_error_arg_count_2
 10603 000078B2 488B7520                        mov rsi, PARAM(0)
 10604                                          assert_rational(rsi)
    42 000078B6 803E11              <1>  cmp byte [%1], %2
    43 000078B9 0F8557060000        <1>  jne L_error_incorrect_type
 10605 000078BF 488B7D28                        mov rdi, PARAM(1)
 10606                                          assert_rational(rdi)
    42 000078C3 803F11              <1>  cmp byte [%1], %2
    43 000078C6 0F854A060000        <1>  jne L_error_incorrect_type
 10607 000078CC 488B4601                        mov rax, qword [rsi + 1] ; num1
 10608 000078D0 4899                            cqo
 10609 000078D2 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 10610 000078D6 4889C1                          mov rcx, rax
 10611 000078D9 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 10612 000078DD 4899                            cqo
 10613 000078DF 48F76F01                        imul qword [rdi + 1]          ; num2
 10614 000078E3 4829C1                          sub rcx, rax
 10615 000078E6 750C                            jne .L_false
 10616 000078E8 48B8-                           mov rax, sob_boolean_true
 10616 000078EA [0300000000000000] 
 10617 000078F2 EB0A                            jmp .L_exit
 10618                                  .L_false:
 10619 000078F4 48B8-                           mov rax, sob_boolean_false
 10619 000078F6 [0200000000000000] 
 10620                                  .L_exit:
 10621                                          LEAVE
    38 000078FE C9                  <1>  leave
 10622 000078FF C22000                          ret AND_KILL_FRAME(2)
 10623                                  
 10624                                  L_code_ptr_quotient:
 10625                                          ENTER
    33 00007902 C8000000            <1>  enter 0, 0
    34 00007906 4883E4F0            <1>  and rsp, ~15
 10626 0000790A 48837D1802                      cmp COUNT, 2
 10627 0000790F 0F8562050000                    jne L_error_arg_count_2
 10628 00007915 488B7520                        mov rsi, PARAM(0)
 10629                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00007919 803E11              <2>  cmp byte [%1], %2
    43 0000791C 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00007922 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00007927 0F85E9050000        <1>  jne L_error_incorrect_type
 10630 0000792D 488B7D28                        mov rdi, PARAM(1)
 10631                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00007931 803F11              <2>  cmp byte [%1], %2
    43 00007934 0F85DC050000        <2>  jne L_error_incorrect_type
    48 0000793A 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000793F 0F85D1050000        <1>  jne L_error_incorrect_type
 10632 00007945 488B4601                        mov rax, qword [rsi + 1]
 10633 00007949 488B5F01                        mov rbx, qword [rdi + 1]
 10634 0000794D 4883FB00                        cmp rbx, 0
 10635 00007951 0F84F0050000                    je L_error_division_by_zero
 10636 00007957 4899                            cqo
 10637 00007959 48F7FB                          idiv rbx
 10638 0000795C 4889C7                          mov rdi, rax
 10639 0000795F E852040000                      call make_integer
 10640                                          LEAVE
    38 00007964 C9                  <1>  leave
 10641 00007965 C22000                          ret AND_KILL_FRAME(2)
 10642                                          
 10643                                  L_code_ptr_remainder:
 10644                                          ENTER
    33 00007968 C8000000            <1>  enter 0, 0
    34 0000796C 4883E4F0            <1>  and rsp, ~15
 10645 00007970 48837D1802                      cmp COUNT, 2
 10646 00007975 0F85FC040000                    jne L_error_arg_count_2
 10647 0000797B 488B7520                        mov rsi, PARAM(0)
 10648                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000797F 803E11              <2>  cmp byte [%1], %2
    43 00007982 0F858E050000        <2>  jne L_error_incorrect_type
    48 00007988 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000798D 0F8583050000        <1>  jne L_error_incorrect_type
 10649 00007993 488B7D28                        mov rdi, PARAM(1)
 10650                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00007997 803F11              <2>  cmp byte [%1], %2
    43 0000799A 0F8576050000        <2>  jne L_error_incorrect_type
    48 000079A0 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000079A5 0F856B050000        <1>  jne L_error_incorrect_type
 10651 000079AB 488B4601                        mov rax, qword [rsi + 1]
 10652 000079AF 488B5F01                        mov rbx, qword [rdi + 1]
 10653 000079B3 4883FB00                        cmp rbx, 0
 10654 000079B7 0F848A050000                    je L_error_division_by_zero
 10655 000079BD 4899                            cqo
 10656 000079BF 48F7FB                          idiv rbx
 10657 000079C2 4889D7                          mov rdi, rdx
 10658 000079C5 E8EC030000                      call make_integer
 10659                                          LEAVE
    38 000079CA C9                  <1>  leave
 10660 000079CB C22000                          ret AND_KILL_FRAME(2)
 10661                                  
 10662                                  L_code_ptr_set_car:
 10663                                          ENTER
    33 000079CE C8000000            <1>  enter 0, 0
    34 000079D2 4883E4F0            <1>  and rsp, ~15
 10664 000079D6 48837D1802                      cmp COUNT, 2
 10665 000079DB 0F8596040000                    jne L_error_arg_count_2
 10666 000079E1 488B4520                        mov rax, PARAM(0)
 10667                                          assert_pair(rax)
    42 000079E5 803821              <1>  cmp byte [%1], %2
    43 000079E8 0F8528050000        <1>  jne L_error_incorrect_type
 10668 000079EE 488B5D28                        mov rbx, PARAM(1)
 10669 000079F2 48895801                        mov SOB_PAIR_CAR(rax), rbx
 10670 000079F6 48B8-                           mov rax, sob_void
 10670 000079F8 [0000000000000000] 
 10671                                          LEAVE
    38 00007A00 C9                  <1>  leave
 10672 00007A01 C22000                          ret AND_KILL_FRAME(2)
 10673                                  
 10674                                  L_code_ptr_set_cdr:
 10675                                          ENTER
    33 00007A04 C8000000            <1>  enter 0, 0
    34 00007A08 4883E4F0            <1>  and rsp, ~15
 10676 00007A0C 48837D1802                      cmp COUNT, 2
 10677 00007A11 0F8560040000                    jne L_error_arg_count_2
 10678 00007A17 488B4520                        mov rax, PARAM(0)
 10679                                          assert_pair(rax)
    42 00007A1B 803821              <1>  cmp byte [%1], %2
    43 00007A1E 0F85F2040000        <1>  jne L_error_incorrect_type
 10680 00007A24 488B5D28                        mov rbx, PARAM(1)
 10681 00007A28 48895809                        mov SOB_PAIR_CDR(rax), rbx
 10682 00007A2C 48B8-                           mov rax, sob_void
 10682 00007A2E [0000000000000000] 
 10683                                          LEAVE
    38 00007A36 C9                  <1>  leave
 10684 00007A37 C22000                          ret AND_KILL_FRAME(2)
 10685                                  
 10686                                  L_code_ptr_string_ref:
 10687                                          ENTER
    33 00007A3A C8000000            <1>  enter 0, 0
    34 00007A3E 4883E4F0            <1>  and rsp, ~15
 10688 00007A42 48837D1802                      cmp COUNT, 2
 10689 00007A47 0F852A040000                    jne L_error_arg_count_2
 10690 00007A4D 488B7D20                        mov rdi, PARAM(0)
 10691                                          assert_string(rdi)
    42 00007A51 803F03              <1>  cmp byte [%1], %2
    43 00007A54 0F85BC040000        <1>  jne L_error_incorrect_type
 10692 00007A5A 488B7528                        mov rsi, PARAM(1)
 10693                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00007A5E 803E11              <2>  cmp byte [%1], %2
    43 00007A61 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00007A67 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00007A6C 0F85A4040000        <1>  jne L_error_incorrect_type
 10694 00007A72 488B5701                        mov rdx, qword [rdi + 1]
 10695 00007A76 488B4E01                        mov rcx, qword [rsi + 1]
 10696 00007A7A 4839D1                          cmp rcx, rdx
 10697 00007A7D 0F8D59030000                    jge L_error_integer_range
 10698 00007A83 4883F900                        cmp rcx, 0
 10699 00007A87 0F8C4F030000                    jl L_error_integer_range
 10700 00007A8D 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 10701 00007A91 BF02000000                      mov rdi, 2
 10702 00007A96 E887ECFFFF                      call malloc
 10703 00007A9B C60002                          mov byte [rax], T_char
 10704 00007A9E 885801                          mov byte [rax + 1], bl
 10705                                          LEAVE
    38 00007AA1 C9                  <1>  leave
 10706 00007AA2 C22000                          ret AND_KILL_FRAME(2)
 10707                                  
 10708                                  L_code_ptr_vector_ref:
 10709                                          ENTER
    33 00007AA5 C8000000            <1>  enter 0, 0
    34 00007AA9 4883E4F0            <1>  and rsp, ~15
 10710 00007AAD 48837D1802                      cmp COUNT, 2
 10711 00007AB2 0F85BF030000                    jne L_error_arg_count_2
 10712 00007AB8 488B7D20                        mov rdi, PARAM(0)
 10713                                          assert_vector(rdi)
    42 00007ABC 803F22              <1>  cmp byte [%1], %2
    43 00007ABF 0F8551040000        <1>  jne L_error_incorrect_type
 10714 00007AC5 488B7528                        mov rsi, PARAM(1)
 10715                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00007AC9 803E11              <2>  cmp byte [%1], %2
    43 00007ACC 0F8544040000        <2>  jne L_error_incorrect_type
    48 00007AD2 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00007AD7 0F8539040000        <1>  jne L_error_incorrect_type
 10716 00007ADD 488B5701                        mov rdx, qword [rdi + 1]
 10717 00007AE1 488B4E01                        mov rcx, qword [rsi + 1]
 10718 00007AE5 4839D1                          cmp rcx, rdx
 10719 00007AE8 0F8DEE020000                    jge L_error_integer_range
 10720 00007AEE 4883F900                        cmp rcx, 0
 10721 00007AF2 0F8CE4020000                    jl L_error_integer_range
 10722 00007AF8 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 10723                                          LEAVE
    38 00007AFD C9                  <1>  leave
 10724 00007AFE C22000                          ret AND_KILL_FRAME(2)
 10725                                  
 10726                                  L_code_ptr_vector_set:
 10727                                          ENTER
    33 00007B01 C8000000            <1>  enter 0, 0
    34 00007B05 4883E4F0            <1>  and rsp, ~15
 10728 00007B09 48837D1803                      cmp COUNT, 3
 10729 00007B0E 0F85CD030000                    jne L_error_arg_count_3
 10730 00007B14 488B7D20                        mov rdi, PARAM(0)
 10731                                          assert_vector(rdi)
    42 00007B18 803F22              <1>  cmp byte [%1], %2
    43 00007B1B 0F85F5030000        <1>  jne L_error_incorrect_type
 10732 00007B21 488B7528                        mov rsi, PARAM(1)
 10733                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00007B25 803E11              <2>  cmp byte [%1], %2
    43 00007B28 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00007B2E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00007B33 0F85DD030000        <1>  jne L_error_incorrect_type
 10734 00007B39 488B5701                        mov rdx, qword [rdi + 1]
 10735 00007B3D 488B4E01                        mov rcx, qword [rsi + 1]
 10736 00007B41 4839D1                          cmp rcx, rdx
 10737 00007B44 0F8D92020000                    jge L_error_integer_range
 10738 00007B4A 4883F900                        cmp rcx, 0
 10739 00007B4E 0F8C88020000                    jl L_error_integer_range
 10740 00007B54 488B4530                        mov rax, PARAM(2)
 10741 00007B58 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 10742 00007B5D 48B8-                           mov rax, sob_void
 10742 00007B5F [0000000000000000] 
 10743                                          LEAVE
    38 00007B67 C9                  <1>  leave
 10744 00007B68 C22800                          ret AND_KILL_FRAME(3)
 10745                                  
 10746                                  L_code_ptr_string_set:
 10747                                          ENTER
    33 00007B6B C8000000            <1>  enter 0, 0
    34 00007B6F 4883E4F0            <1>  and rsp, ~15
 10748 00007B73 48837D1803                      cmp COUNT, 3
 10749 00007B78 0F8563030000                    jne L_error_arg_count_3
 10750 00007B7E 488B7D20                        mov rdi, PARAM(0)
 10751                                          assert_string(rdi)
    42 00007B82 803F03              <1>  cmp byte [%1], %2
    43 00007B85 0F858B030000        <1>  jne L_error_incorrect_type
 10752 00007B8B 488B7528                        mov rsi, PARAM(1)
 10753                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00007B8F 803E11              <2>  cmp byte [%1], %2
    43 00007B92 0F857E030000        <2>  jne L_error_incorrect_type
    48 00007B98 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00007B9D 0F8573030000        <1>  jne L_error_incorrect_type
 10754 00007BA3 488B5701                        mov rdx, qword [rdi + 1]
 10755 00007BA7 488B4E01                        mov rcx, qword [rsi + 1]
 10756 00007BAB 4839D1                          cmp rcx, rdx
 10757 00007BAE 0F8D28020000                    jge L_error_integer_range
 10758 00007BB4 4883F900                        cmp rcx, 0
 10759 00007BB8 0F8C1E020000                    jl L_error_integer_range
 10760 00007BBE 488B4530                        mov rax, PARAM(2)
 10761                                          assert_char(rax)
    42 00007BC2 803802              <1>  cmp byte [%1], %2
    43 00007BC5 0F854B030000        <1>  jne L_error_incorrect_type
 10762 00007BCB 8A4001                          mov al, byte [rax + 1]
 10763 00007BCE 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 10764 00007BD2 48B8-                           mov rax, sob_void
 10764 00007BD4 [0000000000000000] 
 10765                                          LEAVE
    38 00007BDC C9                  <1>  leave
 10766 00007BDD C22800                          ret AND_KILL_FRAME(3)
 10767                                  
 10768                                  L_code_ptr_make_vector:
 10769                                          ENTER
    33 00007BE0 C8000000            <1>  enter 0, 0
    34 00007BE4 4883E4F0            <1>  and rsp, ~15
 10770 00007BE8 48837D1802                      cmp COUNT, 2
 10771 00007BED 0F8584020000                    jne L_error_arg_count_2
 10772 00007BF3 488B4D20                        mov rcx, PARAM(0)
 10773                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00007BF7 803911              <2>  cmp byte [%1], %2
    43 00007BFA 0F8516030000        <2>  jne L_error_incorrect_type
    48 00007C00 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00007C05 0F850B030000        <1>  jne L_error_incorrect_type
 10774 00007C0B 488B4901                        mov rcx, qword [rcx + 1]
 10775 00007C0F 4883F900                        cmp rcx, 0
 10776 00007C13 0F8CC3010000                    jl L_error_integer_range
 10777 00007C19 488B5528                        mov rdx, PARAM(1)
 10778 00007C1D 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 10779 00007C25 E8F8EAFFFF                      call malloc
 10780 00007C2A C60022                          mov byte [rax], T_vector
 10781 00007C2D 48894801                        mov qword [rax + 1], rcx
 10782 00007C31 41B800000000                    mov r8, 0
 10783                                  .L0:
 10784 00007C37 4939C8                          cmp r8, rcx
 10785 00007C3A 740A                            je .L1
 10786 00007C3C 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 10787 00007C41 49FFC0                          inc r8
 10788 00007C44 EBF1                            jmp .L0
 10789                                  .L1:
 10790                                          LEAVE
    38 00007C46 C9                  <1>  leave
 10791 00007C47 C22000                          ret AND_KILL_FRAME(2)
 10792                                          
 10793                                  L_code_ptr_make_string:
 10794                                          ENTER
    33 00007C4A C8000000            <1>  enter 0, 0
    34 00007C4E 4883E4F0            <1>  and rsp, ~15
 10795 00007C52 48837D1802                      cmp COUNT, 2
 10796 00007C57 0F851A020000                    jne L_error_arg_count_2
 10797 00007C5D 488B4D20                        mov rcx, PARAM(0)
 10798                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00007C61 803911              <2>  cmp byte [%1], %2
    43 00007C64 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00007C6A 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00007C6F 0F85A1020000        <1>  jne L_error_incorrect_type
 10799 00007C75 488B4901                        mov rcx, qword [rcx + 1]
 10800 00007C79 4883F900                        cmp rcx, 0
 10801 00007C7D 0F8C59010000                    jl L_error_integer_range
 10802 00007C83 488B5528                        mov rdx, PARAM(1)
 10803                                          assert_char(rdx)
    42 00007C87 803A02              <1>  cmp byte [%1], %2
    43 00007C8A 0F8586020000        <1>  jne L_error_incorrect_type
 10804 00007C90 8A5201                          mov dl, byte [rdx + 1]
 10805 00007C93 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 10806 00007C97 E886EAFFFF                      call malloc
 10807 00007C9C C60003                          mov byte [rax], T_string
 10808 00007C9F 48894801                        mov qword [rax + 1], rcx
 10809 00007CA3 41B800000000                    mov r8, 0
 10810                                  .L0:
 10811 00007CA9 4939C8                          cmp r8, rcx
 10812 00007CAC 740A                            je .L1
 10813 00007CAE 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 10814 00007CB3 49FFC0                          inc r8
 10815 00007CB6 EBF1                            jmp .L0
 10816                                  .L1:
 10817                                          LEAVE
    38 00007CB8 C9                  <1>  leave
 10818 00007CB9 C22000                          ret AND_KILL_FRAME(2)
 10819                                  
 10820                                  L_code_ptr_numerator:
 10821                                          ENTER
    33 00007CBC C8000000            <1>  enter 0, 0
    34 00007CC0 4883E4F0            <1>  and rsp, ~15
 10822 00007CC4 48837D1801                      cmp COUNT, 1
 10823 00007CC9 0F8573010000                    jne L_error_arg_count_1
 10824 00007CCF 488B4520                        mov rax, PARAM(0)
 10825                                          assert_rational(rax)
    42 00007CD3 803811              <1>  cmp byte [%1], %2
    43 00007CD6 0F853A020000        <1>  jne L_error_incorrect_type
 10826 00007CDC 488B7801                        mov rdi, qword [rax + 1]
 10827 00007CE0 E8D1000000                      call make_integer
 10828                                          LEAVE
    38 00007CE5 C9                  <1>  leave
 10829 00007CE6 C21800                          ret AND_KILL_FRAME(1)
 10830                                          
 10831                                  L_code_ptr_denominator:
 10832                                          ENTER
    33 00007CE9 C8000000            <1>  enter 0, 0
    34 00007CED 4883E4F0            <1>  and rsp, ~15
 10833 00007CF1 48837D1801                      cmp COUNT, 1
 10834 00007CF6 0F8546010000                    jne L_error_arg_count_1
 10835 00007CFC 488B4520                        mov rax, PARAM(0)
 10836                                          assert_rational(rax)
    42 00007D00 803811              <1>  cmp byte [%1], %2
    43 00007D03 0F850D020000        <1>  jne L_error_incorrect_type
 10837 00007D09 488B7809                        mov rdi, qword [rax + 1 + 8]
 10838 00007D0D E8A4000000                      call make_integer
 10839                                          LEAVE
    38 00007D12 C9                  <1>  leave
 10840 00007D13 C21800                          ret AND_KILL_FRAME(1)
 10841                                  
 10842                                  L_code_ptr_eq:
 10843                                  	ENTER
    33 00007D16 C8000000            <1>  enter 0, 0
    34 00007D1A 4883E4F0            <1>  and rsp, ~15
 10844 00007D1E 48837D1802              	cmp COUNT, 2
 10845 00007D23 0F854E010000            	jne L_error_arg_count_2
 10846 00007D29 488B7D20                	mov rdi, PARAM(0)
 10847 00007D2D 488B7528                	mov rsi, PARAM(1)
 10848 00007D31 4839F7                  	cmp rdi, rsi
 10849 00007D34 744A                    	je .L_eq_true
 10850 00007D36 8A17                    	mov dl, byte [rdi]
 10851 00007D38 3A16                    	cmp dl, byte [rsi]
 10852 00007D3A 7550                    	jne .L_eq_false
 10853 00007D3C 80FA02                  	cmp dl, T_char
 10854 00007D3F 7437                    	je .L_char
 10855 00007D41 80FA04                  	cmp dl, T_symbol
 10856 00007D44 742A                    	je .L_symbol
 10857 00007D46 80FA12                  	cmp dl, T_real
 10858 00007D49 741D                    	je .L_real
 10859 00007D4B 80FA11                  	cmp dl, T_rational
 10860 00007D4E 7402                    	je .L_rational
 10861 00007D50 EB3A                    	jmp .L_eq_false
 10862                                  .L_rational:
 10863 00007D52 488B4601                	mov rax, qword [rsi + 1]
 10864 00007D56 483B4701                	cmp rax, qword [rdi + 1]
 10865 00007D5A 7530                    	jne .L_eq_false
 10866 00007D5C 488B4609                	mov rax, qword [rsi + 1 + 8]
 10867 00007D60 483B4709                	cmp rax, qword [rdi + 1 + 8]
 10868 00007D64 7526                    	jne .L_eq_false
 10869 00007D66 EB18                    	jmp .L_eq_true
 10870                                  .L_real:
 10871 00007D68 488B4601                	mov rax, qword [rsi + 1]
 10872 00007D6C 483B4701                	cmp rax, qword [rdi + 1]
 10873                                  .L_symbol:
 10874                                  	; never reached, because symbols are static!
 10875                                  	; but I'm keeping it in case, I'll ever change
 10876                                  	; the implementation
 10877 00007D70 488B4601                	mov rax, qword [rsi + 1]
 10878 00007D74 483B4701                	cmp rax, qword [rdi + 1]
 10879                                  .L_char:
 10880 00007D78 8A5E01                  	mov bl, byte [rsi + 1]
 10881 00007D7B 3A5F01                  	cmp bl, byte [rdi + 1]
 10882 00007D7E 750C                    	jne .L_eq_false
 10883                                  .L_eq_true:
 10884 00007D80 48B8-                   	mov rax, sob_boolean_true
 10884 00007D82 [0300000000000000] 
 10885 00007D8A EB0A                    	jmp .L_eq_exit
 10886                                  .L_eq_false:
 10887 00007D8C 48B8-                   	mov rax, sob_boolean_false
 10887 00007D8E [0200000000000000] 
 10888                                  .L_eq_exit:
 10889                                  	LEAVE
    38 00007D96 C9                  <1>  leave
 10890 00007D97 C22000                  	ret AND_KILL_FRAME(2)
 10891                                  
 10892                                  make_real:
 10893                                          ENTER
    33 00007D9A C8000000            <1>  enter 0, 0
    34 00007D9E 4883E4F0            <1>  and rsp, ~15
 10894 00007DA2 BF09000000                      mov rdi, (1 + 8)
 10895 00007DA7 E876E9FFFF                      call malloc
 10896 00007DAC C60012                          mov byte [rax], T_real
 10897 00007DAF F20F114001                      movsd qword [rax + 1], xmm0
 10898                                          LEAVE
    38 00007DB4 C9                  <1>  leave
 10899 00007DB5 C3                              ret
 10900                                          
 10901                                  make_integer:
 10902                                          ENTER
    33 00007DB6 C8000000            <1>  enter 0, 0
    34 00007DBA 4883E4F0            <1>  and rsp, ~15
 10903 00007DBE 4889FE                          mov rsi, rdi
 10904 00007DC1 BF11000000                      mov rdi, (1 + 8 + 8)
 10905 00007DC6 E857E9FFFF                      call malloc
 10906 00007DCB C60011                          mov byte [rax], T_rational
 10907 00007DCE 48897001                        mov qword [rax + 1], rsi
 10908 00007DD2 48C7400901000000                mov qword [rax + 1 + 8], 1
 10909                                          LEAVE
    38 00007DDA C9                  <1>  leave
 10910 00007DDB C3                              ret
 10911                                          
 10912                                  L_error_integer_range:
 10913 00007DDC 488B3C25[00000000]              mov rdi, qword [stderr]
 10914 00007DE4 48BE-                           mov rsi, fmt_integer_range
 10914 00007DE6 [4D03000000000000] 
 10915 00007DEE B800000000                      mov rax, 0
 10916                                  	ENTER
    33 00007DF3 C8000000            <1>  enter 0, 0
    34 00007DF7 4883E4F0            <1>  and rsp, ~15
 10917 00007DFB E8(00000000)                    call fprintf
 10918                                  	LEAVE
    38 00007E00 C9                  <1>  leave
 10919 00007E01 48C7C0FBFFFFFF                  mov rax, -5
 10920 00007E08 E8(00000000)                    call exit
 10921                                  
 10922                                  L_error_arg_count_0:
 10923 00007E0D 488B3C25[00000000]              mov rdi, qword [stderr]
 10924 00007E15 48BE-                           mov rsi, fmt_arg_count_0
 10924 00007E17 [4B02000000000000] 
 10925 00007E1F 488B5518                        mov rdx, COUNT
 10926 00007E23 B800000000                      mov rax, 0
 10927                                  	ENTER
    33 00007E28 C8000000            <1>  enter 0, 0
    34 00007E2C 4883E4F0            <1>  and rsp, ~15
 10928 00007E30 E8(00000000)                    call fprintf
 10929                                  	LEAVE
    38 00007E35 C9                  <1>  leave
 10930 00007E36 48C7C0FDFFFFFF                  mov rax, -3
 10931 00007E3D E8(00000000)                    call exit
 10932                                  
 10933                                  L_error_arg_count_1:
 10934 00007E42 488B3C25[00000000]              mov rdi, qword [stderr]
 10935 00007E4A 48BE-                           mov rsi, fmt_arg_count_1
 10935 00007E4C [7302000000000000] 
 10936 00007E54 488B5518                        mov rdx, COUNT
 10937 00007E58 B800000000                      mov rax, 0
 10938                                  	ENTER
    33 00007E5D C8000000            <1>  enter 0, 0
    34 00007E61 4883E4F0            <1>  and rsp, ~15
 10939 00007E65 E8(00000000)                    call fprintf
 10940                                  	LEAVE
    38 00007E6A C9                  <1>  leave
 10941 00007E6B 48C7C0FDFFFFFF                  mov rax, -3
 10942 00007E72 E8(00000000)                    call exit
 10943                                  
 10944                                  L_error_arg_count_2:
 10945 00007E77 488B3C25[00000000]              mov rdi, qword [stderr]
 10946 00007E7F 48BE-                           mov rsi, fmt_arg_count_2
 10946 00007E81 [D902000000000000] 
 10947 00007E89 488B5518                        mov rdx, COUNT
 10948 00007E8D B800000000                      mov rax, 0
 10949                                  	ENTER
    33 00007E92 C8000000            <1>  enter 0, 0
    34 00007E96 4883E4F0            <1>  and rsp, ~15
 10950 00007E9A E8(00000000)                    call fprintf
 10951                                  	LEAVE
    38 00007E9F C9                  <1>  leave
 10952 00007EA0 48C7C0FDFFFFFF                  mov rax, -3
 10953 00007EA7 E8(00000000)                    call exit
 10954                                  
 10955                                  L_error_arg_count_12:
 10956 00007EAC 488B3C25[00000000]              mov rdi, qword [stderr]
 10957 00007EB4 48BE-                           mov rsi, fmt_arg_count_12
 10957 00007EB6 [9902000000000000] 
 10958 00007EBE 488B5518                        mov rdx, COUNT
 10959 00007EC2 B800000000                      mov rax, 0
 10960                                  	ENTER
    33 00007EC7 C8000000            <1>  enter 0, 0
    34 00007ECB 4883E4F0            <1>  and rsp, ~15
 10961 00007ECF E8(00000000)                    call fprintf
 10962                                  	LEAVE
    38 00007ED4 C9                  <1>  leave
 10963 00007ED5 48C7C0FDFFFFFF                  mov rax, -3
 10964 00007EDC E8(00000000)                    call exit
 10965                                  
 10966                                  L_error_arg_count_3:
 10967 00007EE1 488B3C25[00000000]              mov rdi, qword [stderr]
 10968 00007EE9 48BE-                           mov rsi, fmt_arg_count_3
 10968 00007EEB [0003000000000000] 
 10969 00007EF3 488B5518                        mov rdx, COUNT
 10970 00007EF7 B800000000                      mov rax, 0
 10971                                  	ENTER
    33 00007EFC C8000000            <1>  enter 0, 0
    34 00007F00 4883E4F0            <1>  and rsp, ~15
 10972 00007F04 E8(00000000)                    call fprintf
 10973                                  	LEAVE
    38 00007F09 C9                  <1>  leave
 10974 00007F0A 48C7C0FDFFFFFF                  mov rax, -3
 10975 00007F11 E8(00000000)                    call exit
 10976                                          
 10977                                  L_error_incorrect_type:
 10978 00007F16 488B3C25[00000000]              mov rdi, qword [stderr]
 10979 00007F1E 48BE-                           mov rsi, fmt_type
 10979 00007F20 [2903000000000000] 
 10980 00007F28 B800000000                      mov rax, 0
 10981                                  	ENTER
    33 00007F2D C8000000            <1>  enter 0, 0
    34 00007F31 4883E4F0            <1>  and rsp, ~15
 10982 00007F35 E8(00000000)                    call fprintf
 10983                                  	LEAVE
    38 00007F3A C9                  <1>  leave
 10984 00007F3B 48C7C0FCFFFFFF                  mov rax, -4
 10985 00007F42 E8(00000000)                    call exit
 10986                                  
 10987                                  L_error_division_by_zero:
 10988 00007F47 488B3C25[00000000]              mov rdi, qword [stderr]
 10989 00007F4F 48BE-                           mov rsi, fmt_division_by_zero
 10989 00007F51 [6A03000000000000] 
 10990 00007F59 B800000000                      mov rax, 0
 10991                                  	ENTER
    33 00007F5E C8000000            <1>  enter 0, 0
    34 00007F62 4883E4F0            <1>  and rsp, ~15
 10992 00007F66 E8(00000000)                    call fprintf
 10993                                  	LEAVE
    38 00007F6B C9                  <1>  leave
 10994 00007F6C 48C7C0F8FFFFFF                  mov rax, -8
 10995 00007F73 E8(00000000)                    call exit
 10996                                  
 10997                                  section .data
 10998                                  fmt_char:
 10999 00000248 256300                          db `%c\0`
 11000                                  fmt_arg_count_0:
 11001 0000024B 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 11001 00000254 74696E67207A65726F-
 11001 0000025D 20617267756D656E74-
 11001 00000266 732E20466F756E6420-
 11001 0000026F 25640A00           
 11002                                  fmt_arg_count_1:
 11003 00000273 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 11003 0000027C 74696E67206F6E6520-
 11003 00000285 617267756D656E742E-
 11003 0000028E 20466F756E64202564-
 11003 00000297 0A00               
 11004                                  fmt_arg_count_12:
 11005 00000299 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 11005 000002A2 74696E67206F6E6520-
 11005 000002AB 726571756972656420-
 11005 000002B4 616E64206F6E65206F-
 11005 000002BD 7074696F6E616C2061-
 11005 000002C6 7267756D656E742E20-
 11005 000002CF 466F756E642025640A-
 11005 000002D8 00                 
 11006                                  fmt_arg_count_2:
 11007 000002D9 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 11007 000002E2 74696E672074776F20-
 11007 000002EB 617267756D656E7473-
 11007 000002F4 2E20466F756E642025-
 11007 000002FD 640A00             
 11008                                  fmt_arg_count_3:
 11009 00000300 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 11009 00000309 74696E672074687265-
 11009 00000312 6520617267756D656E-
 11009 0000031B 74732E20466F756E64-
 11009 00000324 2025640A00         
 11010                                  fmt_type:
 11011 00000329 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 11011 00000332 696F6E207061737365-
 11011 0000033B 6420696E636F727265-
 11011 00000344 637420747970650A00 
 11012                                  fmt_integer_range:
 11013 0000034D 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 11013 00000356 7265637420696E7465-
 11013 0000035F 6765722072616E6765-
 11013 00000368 0A00               
 11014                                  fmt_division_by_zero:
 11015 0000036A 212121204469766973-             db `!!! Division by zero\n\0`
 11015 00000373 696F6E206279207A65-
 11015 0000037C 726F0A00           
 11016                                  fmt_scheme_error_part_1:
 11017 00000380 0A2121212054686520-             db `\n!!! The procedure \0`
 11017 00000389 70726F636564757265-
 11017 00000392 2000               
 11018                                  fmt_scheme_error_part_2:
 11019 00000394 2061736B656420746F-             db ` asked to terminate the program\n`
 11019 0000039D 207465726D696E6174-
 11019 000003A6 65207468652070726F-
 11019 000003AF 6772616D0A         
 11020 000003B4 202020207769746820-             db `    with the following message:\n\n\0`
 11020 000003BD 74686520666F6C6C6F-
 11020 000003C6 77696E67206D657373-
 11020 000003CF 6167653A0A0A00     
 11021                                  fmt_scheme_error_part_3:
 11022 000003D6 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 11022 000003DF 210A0A00           
