     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 21                      	db T_pair	; (#f)
    84 00000007 [0200000000000000]-     	dq L_constants + 2, L_constants + 1
    84 0000000F [0100000000000000] 
    85 00000017 21                      	db T_pair	; (#t #f)
    86 00000018 [0300000000000000]-     	dq L_constants + 3, L_constants + 6
    86 00000020 [0600000000000000] 
    87                                  
    88                                  section .bss
    89                                  free_var_0:	; location of null?
    90 00000000 ????????????????        	resq 1
    91                                  free_var_1:	; location of pair?
    92 00000008 ????????????????        	resq 1
    93                                  free_var_2:	; location of void?
    94 00000010 ????????????????        	resq 1
    95                                  free_var_3:	; location of char?
    96 00000018 ????????????????        	resq 1
    97                                  free_var_4:	; location of string?
    98 00000020 ????????????????        	resq 1
    99                                  free_var_5:	; location of symbol?
   100 00000028 ????????????????        	resq 1
   101                                  free_var_6:	; location of vector?
   102 00000030 ????????????????        	resq 1
   103                                  free_var_7:	; location of procedure?
   104 00000038 ????????????????        	resq 1
   105                                  free_var_8:	; location of real?
   106 00000040 ????????????????        	resq 1
   107                                  free_var_9:	; location of rational?
   108 00000048 ????????????????        	resq 1
   109                                  free_var_10:	; location of boolean?
   110 00000050 ????????????????        	resq 1
   111                                  free_var_11:	; location of number?
   112 00000058 ????????????????        	resq 1
   113                                  free_var_12:	; location of collection?
   114 00000060 ????????????????        	resq 1
   115                                  free_var_13:	; location of cons
   116 00000068 ????????????????        	resq 1
   117                                  free_var_14:	; location of display-sexpr
   118 00000070 ????????????????        	resq 1
   119                                  free_var_15:	; location of write-char
   120 00000078 ????????????????        	resq 1
   121                                  free_var_16:	; location of car
   122 00000080 ????????????????        	resq 1
   123                                  free_var_17:	; location of cdr
   124 00000088 ????????????????        	resq 1
   125                                  free_var_18:	; location of string-length
   126 00000090 ????????????????        	resq 1
   127                                  free_var_19:	; location of vector-length
   128 00000098 ????????????????        	resq 1
   129                                  free_var_20:	; location of real->integer
   130 000000A0 ????????????????        	resq 1
   131                                  free_var_21:	; location of exit
   132 000000A8 ????????????????        	resq 1
   133                                  free_var_22:	; location of integer->real
   134 000000B0 ????????????????        	resq 1
   135                                  free_var_23:	; location of rational->real
   136 000000B8 ????????????????        	resq 1
   137                                  free_var_24:	; location of char->integer
   138 000000C0 ????????????????        	resq 1
   139                                  free_var_25:	; location of integer->char
   140 000000C8 ????????????????        	resq 1
   141                                  free_var_26:	; location of trng
   142 000000D0 ????????????????        	resq 1
   143                                  free_var_27:	; location of zero?
   144 000000D8 ????????????????        	resq 1
   145                                  free_var_28:	; location of integer?
   146 000000E0 ????????????????        	resq 1
   147                                  free_var_29:	; location of __bin-apply
   148 000000E8 ????????????????        	resq 1
   149                                  free_var_30:	; location of __bin-add-rr
   150 000000F0 ????????????????        	resq 1
   151                                  free_var_31:	; location of __bin-sub-rr
   152 000000F8 ????????????????        	resq 1
   153                                  free_var_32:	; location of __bin-mul-rr
   154 00000100 ????????????????        	resq 1
   155                                  free_var_33:	; location of __bin-div-rr
   156 00000108 ????????????????        	resq 1
   157                                  free_var_34:	; location of __bin-add-qq
   158 00000110 ????????????????        	resq 1
   159                                  free_var_35:	; location of __bin-sub-qq
   160 00000118 ????????????????        	resq 1
   161                                  free_var_36:	; location of __bin-mul-qq
   162 00000120 ????????????????        	resq 1
   163                                  free_var_37:	; location of __bin-div-qq
   164 00000128 ????????????????        	resq 1
   165                                  free_var_38:	; location of error
   166 00000130 ????????????????        	resq 1
   167                                  free_var_39:	; location of __bin-less-than-rr
   168 00000138 ????????????????        	resq 1
   169                                  free_var_40:	; location of __bin-less-than-qq
   170 00000140 ????????????????        	resq 1
   171                                  free_var_41:	; location of __bin-equal-rr
   172 00000148 ????????????????        	resq 1
   173                                  free_var_42:	; location of __bin-equal-qq
   174 00000150 ????????????????        	resq 1
   175                                  free_var_43:	; location of quotient
   176 00000158 ????????????????        	resq 1
   177                                  free_var_44:	; location of remainder
   178 00000160 ????????????????        	resq 1
   179                                  free_var_45:	; location of set-car!
   180 00000168 ????????????????        	resq 1
   181                                  free_var_46:	; location of set-cdr!
   182 00000170 ????????????????        	resq 1
   183                                  free_var_47:	; location of string-ref
   184 00000178 ????????????????        	resq 1
   185                                  free_var_48:	; location of vector-ref
   186 00000180 ????????????????        	resq 1
   187                                  free_var_49:	; location of vector-set!
   188 00000188 ????????????????        	resq 1
   189                                  free_var_50:	; location of string-set!
   190 00000190 ????????????????        	resq 1
   191                                  free_var_51:	; location of make-vector
   192 00000198 ????????????????        	resq 1
   193                                  free_var_52:	; location of make-string
   194 000001A0 ????????????????        	resq 1
   195                                  free_var_53:	; location of numerator
   196 000001A8 ????????????????        	resq 1
   197                                  free_var_54:	; location of denominator
   198 000001B0 ????????????????        	resq 1
   199                                  free_var_55:	; location of eq?
   200 000001B8 ????????????????        	resq 1
   201                                  
   202                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   203                                  global main
   204                                  section .text
   205                                  main:
   206 00000000 C8000000                        enter 0, 0
   207                                          
   208                                  	; building closure for null?
   209 00000004 48BF-                   	mov rdi, free_var_0
   209 00000006 [0000000000000000] 
   210 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   210 00000010 [C50C000000000000] 
   211 00000018 E8FC0B0000              	call bind_primitive
   212                                  
   213                                  	; building closure for pair?
   214 0000001D 48BF-                   	mov rdi, free_var_1
   214 0000001F [0800000000000000] 
   215 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   215 00000029 [FB0C000000000000] 
   216 00000031 E8E30B0000              	call bind_primitive
   217                                  
   218                                  	; building closure for void?
   219 00000036 48BF-                   	mov rdi, free_var_2
   219 00000038 [1000000000000000] 
   220 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   220 00000042 [310D000000000000] 
   221 0000004A E8CA0B0000              	call bind_primitive
   222                                  
   223                                  	; building closure for char?
   224 0000004F 48BF-                   	mov rdi, free_var_3
   224 00000051 [1800000000000000] 
   225 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   225 0000005B [670D000000000000] 
   226 00000063 E8B10B0000              	call bind_primitive
   227                                  
   228                                  	; building closure for string?
   229 00000068 48BF-                   	mov rdi, free_var_4
   229 0000006A [2000000000000000] 
   230 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   230 00000074 [9D0D000000000000] 
   231 0000007C E8980B0000              	call bind_primitive
   232                                  
   233                                  	; building closure for symbol?
   234 00000081 48BF-                   	mov rdi, free_var_5
   234 00000083 [2800000000000000] 
   235 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   235 0000008D [D30D000000000000] 
   236 00000095 E87F0B0000              	call bind_primitive
   237                                  
   238                                  	; building closure for vector?
   239 0000009A 48BF-                   	mov rdi, free_var_6
   239 0000009C [3000000000000000] 
   240 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   240 000000A6 [090E000000000000] 
   241 000000AE E8660B0000              	call bind_primitive
   242                                  
   243                                  	; building closure for procedure?
   244 000000B3 48BF-                   	mov rdi, free_var_7
   244 000000B5 [3800000000000000] 
   245 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   245 000000BF [3F0E000000000000] 
   246 000000C7 E84D0B0000              	call bind_primitive
   247                                  
   248                                  	; building closure for real?
   249 000000CC 48BF-                   	mov rdi, free_var_8
   249 000000CE [4000000000000000] 
   250 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   250 000000D8 [750E000000000000] 
   251 000000E0 E8340B0000              	call bind_primitive
   252                                  
   253                                  	; building closure for rational?
   254 000000E5 48BF-                   	mov rdi, free_var_9
   254 000000E7 [4800000000000000] 
   255 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   255 000000F1 [AB0E000000000000] 
   256 000000F9 E81B0B0000              	call bind_primitive
   257                                  
   258                                  	; building closure for boolean?
   259 000000FE 48BF-                   	mov rdi, free_var_10
   259 00000100 [5000000000000000] 
   260 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   260 0000010A [E10E000000000000] 
   261 00000112 E8020B0000              	call bind_primitive
   262                                  
   263                                  	; building closure for number?
   264 00000117 48BF-                   	mov rdi, free_var_11
   264 00000119 [5800000000000000] 
   265 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   265 00000123 [190F000000000000] 
   266 0000012B E8E90A0000              	call bind_primitive
   267                                  
   268                                  	; building closure for collection?
   269 00000130 48BF-                   	mov rdi, free_var_12
   269 00000132 [6000000000000000] 
   270 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   270 0000013C [510F000000000000] 
   271 00000144 E8D00A0000              	call bind_primitive
   272                                  
   273                                  	; building closure for cons
   274 00000149 48BF-                   	mov rdi, free_var_13
   274 0000014B [6800000000000000] 
   275 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   275 00000155 [890F000000000000] 
   276 0000015D E8B70A0000              	call bind_primitive
   277                                  
   278                                  	; building closure for display-sexpr
   279 00000162 48BF-                   	mov rdi, free_var_14
   279 00000164 [7000000000000000] 
   280 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   280 0000016E [BD0F000000000000] 
   281 00000176 E89E0A0000              	call bind_primitive
   282                                  
   283                                  	; building closure for write-char
   284 0000017B 48BF-                   	mov rdi, free_var_15
   284 0000017D [7800000000000000] 
   285 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   285 00000187 [E70F000000000000] 
   286 0000018F E8850A0000              	call bind_primitive
   287                                  
   288                                  	; building closure for car
   289 00000194 48BF-                   	mov rdi, free_var_16
   289 00000196 [8000000000000000] 
   290 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   290 000001A0 [3E10000000000000] 
   291 000001A8 E86C0A0000              	call bind_primitive
   292                                  
   293                                  	; building closure for cdr
   294 000001AD 48BF-                   	mov rdi, free_var_17
   294 000001AF [8800000000000000] 
   295 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   295 000001B9 [6610000000000000] 
   296 000001C1 E8530A0000              	call bind_primitive
   297                                  
   298                                  	; building closure for string-length
   299 000001C6 48BF-                   	mov rdi, free_var_18
   299 000001C8 [9000000000000000] 
   300 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   300 000001D2 [8E10000000000000] 
   301 000001DA E83A0A0000              	call bind_primitive
   302                                  
   303                                  	; building closure for vector-length
   304 000001DF 48BF-                   	mov rdi, free_var_19
   304 000001E1 [9800000000000000] 
   305 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   305 000001EB [BB10000000000000] 
   306 000001F3 E8210A0000              	call bind_primitive
   307                                  
   308                                  	; building closure for real->integer
   309 000001F8 48BF-                   	mov rdi, free_var_20
   309 000001FA [A000000000000000] 
   310 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   310 00000204 [E810000000000000] 
   311 0000020C E8080A0000              	call bind_primitive
   312                                  
   313                                  	; building closure for exit
   314 00000211 48BF-                   	mov rdi, free_var_21
   314 00000213 [A800000000000000] 
   315 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   315 0000021D [1B11000000000000] 
   316 00000225 E8EF090000              	call bind_primitive
   317                                  
   318                                  	; building closure for integer->real
   319 0000022A 48BF-                   	mov rdi, free_var_22
   319 0000022C [B000000000000000] 
   320 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   320 00000236 [3811000000000000] 
   321 0000023E E8D6090000              	call bind_primitive
   322                                  
   323                                  	; building closure for rational->real
   324 00000243 48BF-                   	mov rdi, free_var_23
   324 00000245 [B800000000000000] 
   325 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   325 0000024F [7511000000000000] 
   326 00000257 E8BD090000              	call bind_primitive
   327                                  
   328                                  	; building closure for char->integer
   329 0000025C 48BF-                   	mov rdi, free_var_24
   329 0000025E [C000000000000000] 
   330 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   330 00000268 [B411000000000000] 
   331 00000270 E8A4090000              	call bind_primitive
   332                                  
   333                                  	; building closure for integer->char
   334 00000275 48BF-                   	mov rdi, free_var_25
   334 00000277 [C800000000000000] 
   335 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   335 00000281 [E911000000000000] 
   336 00000289 E88B090000              	call bind_primitive
   337                                  
   338                                  	; building closure for trng
   339 0000028E 48BF-                   	mov rdi, free_var_26
   339 00000290 [D000000000000000] 
   340 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   340 0000029A [4312000000000000] 
   341 000002A2 E872090000              	call bind_primitive
   342                                  
   343                                  	; building closure for zero?
   344 000002A7 48BF-                   	mov rdi, free_var_27
   344 000002A9 [D800000000000000] 
   345 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   345 000002B3 [6612000000000000] 
   346 000002BB E859090000              	call bind_primitive
   347                                  
   348                                  	; building closure for integer?
   349 000002C0 48BF-                   	mov rdi, free_var_28
   349 000002C2 [E000000000000000] 
   350 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   350 000002CC [C112000000000000] 
   351 000002D4 E840090000              	call bind_primitive
   352                                  
   353                                  	; building closure for __bin-apply
   354 000002D9 48BF-                   	mov rdi, free_var_29
   354 000002DB [E800000000000000] 
   355 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   355 000002E5 [410C000000000000] 
   356 000002ED E827090000              	call bind_primitive
   357                                  
   358                                  	; building closure for __bin-add-rr
   359 000002F2 48BF-                   	mov rdi, free_var_30
   359 000002F4 [F000000000000000] 
   360 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   360 000002FE [FE12000000000000] 
   361 00000306 E80E090000              	call bind_primitive
   362                                  
   363                                  	; building closure for __bin-sub-rr
   364 0000030B 48BF-                   	mov rdi, free_var_31
   364 0000030D [F800000000000000] 
   365 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   365 00000317 [4213000000000000] 
   366 0000031F E8F5080000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-mul-rr
   369 00000324 48BF-                   	mov rdi, free_var_32
   369 00000326 [0001000000000000] 
   370 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   370 00000330 [8613000000000000] 
   371 00000338 E8DC080000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-div-rr
   374 0000033D 48BF-                   	mov rdi, free_var_33
   374 0000033F [0801000000000000] 
   375 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   375 00000349 [CA13000000000000] 
   376 00000351 E8C3080000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-add-qq
   379 00000356 48BF-                   	mov rdi, free_var_34
   379 00000358 [1001000000000000] 
   380 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   380 00000362 [1C14000000000000] 
   381 0000036A E8AA080000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-sub-qq
   384 0000036F 48BF-                   	mov rdi, free_var_35
   384 00000371 [1801000000000000] 
   385 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   385 0000037B [8414000000000000] 
   386 00000383 E891080000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-mul-qq
   389 00000388 48BF-                   	mov rdi, free_var_36
   389 0000038A [2001000000000000] 
   390 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   390 00000394 [EC14000000000000] 
   391 0000039C E878080000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-div-qq
   394 000003A1 48BF-                   	mov rdi, free_var_37
   394 000003A3 [2801000000000000] 
   395 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   395 000003AD [4415000000000000] 
   396 000003B5 E85F080000              	call bind_primitive
   397                                  
   398                                  	; building closure for error
   399 000003BA 48BF-                   	mov rdi, free_var_38
   399 000003BC [3001000000000000] 
   400 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   400 000003C6 [1216000000000000] 
   401 000003CE E846080000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-less-than-rr
   404 000003D3 48BF-                   	mov rdi, free_var_39
   404 000003D5 [3801000000000000] 
   405 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   405 000003DF [C916000000000000] 
   406 000003E7 E82D080000              	call bind_primitive
   407                                  
   408                                  	; building closure for __bin-less-than-qq
   409 000003EC 48BF-                   	mov rdi, free_var_40
   409 000003EE [4001000000000000] 
   410 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   410 000003F8 [2017000000000000] 
   411 00000400 E814080000              	call bind_primitive
   412                                  
   413                                  	; building closure for __bin-equal-rr
   414 00000405 48BF-                   	mov rdi, free_var_41
   414 00000407 [4801000000000000] 
   415 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   415 00000411 [8317000000000000] 
   416 00000419 E8FB070000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-equal-qq
   419 0000041E 48BF-                   	mov rdi, free_var_42
   419 00000420 [5001000000000000] 
   420 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   420 0000042A [DA17000000000000] 
   421 00000432 E8E2070000              	call bind_primitive
   422                                  
   423                                  	; building closure for quotient
   424 00000437 48BF-                   	mov rdi, free_var_43
   424 00000439 [5801000000000000] 
   425 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   425 00000443 [3D18000000000000] 
   426 0000044B E8C9070000              	call bind_primitive
   427                                  
   428                                  	; building closure for remainder
   429 00000450 48BF-                   	mov rdi, free_var_44
   429 00000452 [6001000000000000] 
   430 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   430 0000045C [A318000000000000] 
   431 00000464 E8B0070000              	call bind_primitive
   432                                  
   433                                  	; building closure for set-car!
   434 00000469 48BF-                   	mov rdi, free_var_45
   434 0000046B [6801000000000000] 
   435 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   435 00000475 [0919000000000000] 
   436 0000047D E897070000              	call bind_primitive
   437                                  
   438                                  	; building closure for set-cdr!
   439 00000482 48BF-                   	mov rdi, free_var_46
   439 00000484 [7001000000000000] 
   440 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   440 0000048E [3F19000000000000] 
   441 00000496 E87E070000              	call bind_primitive
   442                                  
   443                                  	; building closure for string-ref
   444 0000049B 48BF-                   	mov rdi, free_var_47
   444 0000049D [7801000000000000] 
   445 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   445 000004A7 [7519000000000000] 
   446 000004AF E865070000              	call bind_primitive
   447                                  
   448                                  	; building closure for vector-ref
   449 000004B4 48BF-                   	mov rdi, free_var_48
   449 000004B6 [8001000000000000] 
   450 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   450 000004C0 [E019000000000000] 
   451 000004C8 E84C070000              	call bind_primitive
   452                                  
   453                                  	; building closure for vector-set!
   454 000004CD 48BF-                   	mov rdi, free_var_49
   454 000004CF [8801000000000000] 
   455 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   455 000004D9 [3C1A000000000000] 
   456 000004E1 E833070000              	call bind_primitive
   457                                  
   458                                  	; building closure for string-set!
   459 000004E6 48BF-                   	mov rdi, free_var_50
   459 000004E8 [9001000000000000] 
   460 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   460 000004F2 [A61A000000000000] 
   461 000004FA E81A070000              	call bind_primitive
   462                                  
   463                                  	; building closure for make-vector
   464 000004FF 48BF-                   	mov rdi, free_var_51
   464 00000501 [9801000000000000] 
   465 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   465 0000050B [1B1B000000000000] 
   466 00000513 E801070000              	call bind_primitive
   467                                  
   468                                  	; building closure for make-string
   469 00000518 48BF-                   	mov rdi, free_var_52
   469 0000051A [A001000000000000] 
   470 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   470 00000524 [851B000000000000] 
   471 0000052C E8E8060000              	call bind_primitive
   472                                  
   473                                  	; building closure for numerator
   474 00000531 48BF-                   	mov rdi, free_var_53
   474 00000533 [A801000000000000] 
   475 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   475 0000053D [F71B000000000000] 
   476 00000545 E8CF060000              	call bind_primitive
   477                                  
   478                                  	; building closure for denominator
   479 0000054A 48BF-                   	mov rdi, free_var_54
   479 0000054C [B001000000000000] 
   480 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   480 00000556 [241C000000000000] 
   481 0000055E E8B6060000              	call bind_primitive
   482                                  
   483                                  	; building closure for eq?
   484 00000563 48BF-                   	mov rdi, free_var_55
   484 00000565 [B801000000000000] 
   485 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   485 0000056F [511C000000000000] 
   486 00000577 E89D060000              	call bind_primitive
   487                                  
   488 0000057C 48B8-                   	mov rax,L_constants + 23
   488 0000057E [1700000000000000] 
   489 00000586 50                      	push rax
   490 00000587 488B0425[68000000]      	mov rax, qword [free_var_13]
   491 0000058F 50                      	push rax
   492 00000590 6A02                    	push 2
   493 00000592 488B0425[E8000000]      	mov rax, qword [free_var_29]
   494                                  	assert_closure(rax)
    42 0000059A 803805              <1>  cmp byte [%1], %2
    43 0000059D 0F85AE180000        <1>  jne L_error_incorrect_type
   495 000005A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   496 000005A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
   497                                  
   498 000005A9 4889C7                  	mov rdi, rax
   499 000005AC E8E8000000              	call print_sexpr_if_not_void
   500                                  
   501 000005B1 48BF-                           mov rdi, fmt_memory_usage
   501 000005B3 [8700000000000000] 
   502 000005BB 488B3425[0E010000]              mov rsi, qword [top_of_memory]
   503 000005C3 4881EE[C0010000]                sub rsi, memory
   504 000005CA B800000000                      mov rax, 0
   505                                  	ENTER
    33 000005CF C8000000            <1>  enter 0, 0
    34 000005D3 4883E4F0            <1>  and rsp, ~15
   506 000005D7 E8(00000000)                    call printf
   507                                  	LEAVE
    38 000005DC C9                  <1>  leave
   508 000005DD C9                      	leave
   509 000005DE C3                      	ret
   510                                  
   511                                  L_error_non_closure:
   512 000005DF 488B3C25[00000000]              mov rdi, qword [stderr]
   513 000005E7 48BE-                           mov rsi, fmt_non_closure
   513 000005E9 [BE00000000000000] 
   514 000005F1 B800000000                      mov rax, 0
   515                                  	ENTER
    33 000005F6 C8000000            <1>  enter 0, 0
    34 000005FA 4883E4F0            <1>  and rsp, ~15
   516 000005FE E8(00000000)                    call fprintf
   517                                  	LEAVE
    38 00000603 C9                  <1>  leave
   518 00000604 48C7C0FEFFFFFF                  mov rax, -2
   519 0000060B E8(00000000)                    call exit
   520                                  
   521                                  L_error_improper_list:
   522 00000610 488B3C25[00000000]      	mov rdi, qword [stderr]
   523 00000618 48BE-                   	mov rsi, fmt_error_improper_list
   523 0000061A [E600000000000000] 
   524 00000622 B800000000              	mov rax, 0
   525                                  	ENTER
    33 00000627 C8000000            <1>  enter 0, 0
    34 0000062B 4883E4F0            <1>  and rsp, ~15
   526 0000062F E8(00000000)            	call fprintf
   527                                  	LEAVE
    38 00000634 C9                  <1>  leave
   528 00000635 48C7C0F9FFFFFF          	mov rax, -7
   529 0000063C E8(00000000)            	call exit
   530                                  
   531                                  L_error_incorrect_arity_simple:
   532 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   533 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   533 0000064B [2800000000000000] 
   534 00000653 EB12                            jmp L_error_incorrect_arity_common
   535                                  L_error_incorrect_arity_opt:
   536 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   537 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   537 0000065F [5300000000000000] 
   538                                  L_error_incorrect_arity_common:
   539 00000667 5A                              pop rdx
   540 00000668 59                              pop rcx
   541 00000669 B800000000                      mov rax, 0
   542                                  	ENTER
    33 0000066E C8000000            <1>  enter 0, 0
    34 00000672 4883E4F0            <1>  and rsp, ~15
   543 00000676 E8(00000000)                    call fprintf
   544                                  	LEAVE
    38 0000067B C9                  <1>  leave
   545 0000067C 48C7C0FAFFFFFF                  mov rax, -6
   546 00000683 E8(00000000)                    call exit
   547                                  
   548                                  section .data
   549                                  fmt_incorrect_arity_simple:
   550 00000028 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   550 00000031 74656420256C642061-
   550 0000003A 7267756D656E74732C-
   550 00000043 206275742067697665-
   550 0000004C 6E20256C640A00     
   551                                  fmt_incorrect_arity_opt:
   552 00000053 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   552 0000005C 746564206174206C65-
   552 00000065 61737420256C642061-
   552 0000006E 7267756D656E74732C-
   552 00000077 206275742067697665-
   552 00000080 6E20256C640A00     
   553                                  fmt_memory_usage:
   554 00000087 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   554 00000090 6420256C6420627974-
   554 00000099 6573206F662064796E-
   554 000000A2 616D6963616C6C792D-
   554 000000AB 616C6C6F6361746564-
   554 000000B4 206D656D6F72790A0A-
   554 000000BD 00                 
   555                                  fmt_non_closure:
   556 000000BE 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   556 000000C7 7074696E6720746F20-
   556 000000D0 6170706C792061206E-
   556 000000D9 6F6E2D636C6F737572-
   556 000000E2 65210A00           
   557                                  fmt_error_improper_list:
   558 000000E6 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   558 000000EF 7267756D656E742069-
   558 000000F8 73206E6F7420612070-
   558 00000101 726F706572206C6973-
   558 0000010A 74210A00           
   559                                  
   560                                  section .bss
   561                                  memory:
   562 000001C0 <res 40000000h>         	resb gbytes(1)
   563                                  
   564                                  section .data
   565                                  top_of_memory:
   566 0000010E [C001000000000000]              dq memory
   567                                  
   568                                  section .text
   569                                  malloc:
   570 00000688 488B0425[0E010000]              mov rax, qword [top_of_memory]
   571 00000690 48013C25[0E010000]              add qword [top_of_memory], rdi
   572 00000698 C3                              ret
   573                                          
   574                                  print_sexpr_if_not_void:
   575 00000699 4881FF[00000000]        	cmp rdi, sob_void
   576 000006A0 7501                    	jne print_sexpr
   577 000006A2 C3                      	ret
   578                                  
   579                                  section .data
   580                                  fmt_void:
   581 00000116 233C766F69643E00        	db `#<void>\0`
   582                                  fmt_nil:
   583 0000011E 282900                  	db `()\0`
   584                                  fmt_boolean_false:
   585 00000121 236600                  	db `#f\0`
   586                                  fmt_boolean_true:
   587 00000124 237400                  	db `#t\0`
   588                                  fmt_char_backslash:
   589 00000127 235C5C00                	db `#\\\\\0`
   590                                  fmt_char_dquote:
   591 0000012B 235C2200                	db `#\\"\0`
   592                                  fmt_char_simple:
   593 0000012F 235C256300              	db `#\\%c\0`
   594                                  fmt_char_null:
   595 00000134 235C6E756C00            	db `#\\nul\0`
   596                                  fmt_char_bell:
   597 0000013A 235C62656C6C00          	db `#\\bell\0`
   598                                  fmt_char_backspace:
   599 00000141 235C6261636B737061-     	db `#\\backspace\0`
   599 0000014A 636500             
   600                                  fmt_char_tab:
   601 0000014D 235C74616200            	db `#\\tab\0`
   602                                  fmt_char_newline:
   603 00000153 235C6E65776C696E65-     	db `#\\newline\0`
   603 0000015C 00                 
   604                                  fmt_char_formfeed:
   605 0000015D 235C7061676500          	db `#\\page\0`
   606                                  fmt_char_return:
   607 00000164 235C72657475726E00      	db `#\\return\0`
   608                                  fmt_char_escape:
   609 0000016D 235C65736300            	db `#\\esc\0`
   610                                  fmt_char_space:
   611 00000173 235C737061636500        	db `#\\space\0`
   612                                  fmt_char_hex:
   613 0000017B 235C782530325800        	db `#\\x%02X\0`
   614                                  fmt_closure:
   615 00000183 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   615 0000018C 206174203078253038-
   615 00000195 5820656E763D307825-
   615 0000019E 30385820636F64653D-
   615 000001A7 3078253038583E00   
   616                                  fmt_lparen:
   617 000001AF 2800                    	db `(\0`
   618                                  fmt_dotted_pair:
   619 000001B1 202E2000                	db ` . \0`
   620                                  fmt_rparen:
   621 000001B5 2900                    	db `)\0`
   622                                  fmt_space:
   623 000001B7 2000                    	db ` \0`
   624                                  fmt_empty_vector:
   625 000001B9 23282900                	db `#()\0`
   626                                  fmt_vector:
   627 000001BD 232800                  	db `#(\0`
   628                                  fmt_real:
   629 000001C0 256600                  	db `%f\0`
   630                                  fmt_fraction:
   631 000001C3 256C642F256C6400        	db `%ld/%ld\0`
   632                                  fmt_zero:
   633 000001CB 3000                    	db `0\0`
   634                                  fmt_int:
   635 000001CD 256C6400                	db `%ld\0`
   636                                  fmt_unknown_sexpr_error:
   637 000001D1 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   637 000001DA 6F723A20556E6B6E6F-
   637 000001E3 776E2074797065206F-
   637 000001EC 662073657870722028-
   637 000001F5 3078253032582920   
   638 000001FD 617420616464726573-     	db `at address 0x%08X\n\n\0`
   638 00000206 73203078253038580A-
   638 0000020F 0A00               
   639                                  fmt_dquote:
   640 00000211 2200                    	db `\"\0`
   641                                  fmt_string_char:
   642 00000213 256300                          db `%c\0`
   643                                  fmt_string_char_7:
   644 00000216 5C6100                          db `\\a\0`
   645                                  fmt_string_char_8:
   646 00000219 5C6200                          db `\\b\0`
   647                                  fmt_string_char_9:
   648 0000021C 5C7400                          db `\\t\0`
   649                                  fmt_string_char_10:
   650 0000021F 5C6E00                          db `\\n\0`
   651                                  fmt_string_char_11:
   652 00000222 5C7600                          db `\\v\0`
   653                                  fmt_string_char_12:
   654 00000225 5C6600                          db `\\f\0`
   655                                  fmt_string_char_13:
   656 00000228 5C7200                          db `\\r\0`
   657                                  fmt_string_char_34:
   658 0000022B 5C2200                          db `\\"\0`
   659                                  fmt_string_char_92:
   660 0000022E 5C5C00                          db `\\\\\0`
   661                                  fmt_string_char_hex:
   662 00000231 5C7825583B00                    db `\\x%X;\0`
   663                                  
   664                                  section .text
   665                                  
   666                                  print_sexpr:
   667                                  	ENTER
    33 000006A3 C8000000            <1>  enter 0, 0
    34 000006A7 4883E4F0            <1>  and rsp, ~15
   668 000006AB 8A07                    	mov al, byte [rdi]
   669 000006AD 3C00                    	cmp al, T_void
   670 000006AF 744D                    	je .Lvoid
   671 000006B1 3C01                    	cmp al, T_nil
   672 000006B3 7458                    	je .Lnil
   673 000006B5 3C09                    	cmp al, T_boolean_false
   674 000006B7 7463                    	je .Lboolean_false
   675 000006B9 3C0A                    	cmp al, T_boolean_true
   676 000006BB 746E                    	je .Lboolean_true
   677 000006BD 3C02                    	cmp al, T_char
   678 000006BF 7479                    	je .Lchar
   679 000006C1 3C04                    	cmp al, T_symbol
   680 000006C3 0F84BB010000            	je .Lsymbol
   681 000006C9 3C21                    	cmp al, T_pair
   682 000006CB 0F84D6010000            	je .Lpair
   683 000006D1 3C22                    	cmp al, T_vector
   684 000006D3 0F849F020000            	je .Lvector
   685 000006D9 3C05                    	cmp al, T_closure
   686 000006DB 0F8489010000            	je .Lclosure
   687 000006E1 3C12                    	cmp al, T_real
   688 000006E3 0F8430030000            	je .Lreal
   689 000006E9 3C11                    	cmp al, T_rational
   690 000006EB 0F8456030000            	je .Lrational
   691 000006F1 3C03                    	cmp al, T_string
   692 000006F3 0F848F030000            	je .Lstring
   693                                  
   694 000006F9 E9C7040000              	jmp .Lunknown_sexpr_type
   695                                  
   696                                  .Lvoid:
   697 000006FE 48BF-                   	mov rdi, fmt_void
   697 00000700 [1601000000000000] 
   698 00000708 E9F5040000              	jmp .Lemit
   699                                  
   700                                  .Lnil:
   701 0000070D 48BF-                   	mov rdi, fmt_nil
   701 0000070F [1E01000000000000] 
   702 00000717 E9E6040000              	jmp .Lemit
   703                                  
   704                                  .Lboolean_false:
   705 0000071C 48BF-                   	mov rdi, fmt_boolean_false
   705 0000071E [2101000000000000] 
   706 00000726 E9D7040000              	jmp .Lemit
   707                                  
   708                                  .Lboolean_true:
   709 0000072B 48BF-                   	mov rdi, fmt_boolean_true
   709 0000072D [2401000000000000] 
   710 00000735 E9C8040000              	jmp .Lemit
   711                                  
   712                                  .Lchar:
   713 0000073A 8A4701                  	mov al, byte [rdi + 1]
   714 0000073D 3C20                    	cmp al, ' '
   715 0000073F 7E28                    	jle .Lchar_whitespace
   716 00000741 3C5C                    	cmp al, 92 		; backslash
   717 00000743 0F847C000000            	je .Lchar_backslash
   718 00000749 3C22                    	cmp al, '"'
   719 0000074B 0F8483000000            	je .Lchar_dquote
   720 00000751 4825FF000000            	and rax, 255
   721 00000757 48BF-                   	mov rdi, fmt_char_simple
   721 00000759 [2F01000000000000] 
   722 00000761 4889C6                  	mov rsi, rax
   723 00000764 E999040000              	jmp .Lemit
   724                                  
   725                                  .Lchar_whitespace:
   726 00000769 3C00                    	cmp al, 0
   727 0000076B 7476                    	je .Lchar_null
   728 0000076D 3C07                    	cmp al, 7
   729 0000076F 0F847D000000            	je .Lchar_bell
   730 00000775 3C08                    	cmp al, 8
   731 00000777 0F8484000000            	je .Lchar_backspace
   732 0000077D 3C09                    	cmp al, 9
   733 0000077F 0F848B000000            	je .Lchar_tab
   734 00000785 3C0A                    	cmp al, 10
   735 00000787 0F8492000000            	je .Lchar_newline
   736 0000078D 3C0C                    	cmp al, 12
   737 0000078F 0F8499000000            	je .Lchar_formfeed
   738 00000795 3C0D                    	cmp al, 13
   739 00000797 0F84A0000000            	je .Lchar_return
   740 0000079D 3C1B                    	cmp al, 27
   741 0000079F 0F84A7000000            	je .Lchar_escape
   742 000007A5 4825FF000000            	and rax, 255
   743 000007AB 3C20                    	cmp al, ' '
   744 000007AD 0F84A8000000            	je .Lchar_space
   745 000007B3 48BF-                   	mov rdi, fmt_char_hex
   745 000007B5 [7B01000000000000] 
   746 000007BD 4889C6                  	mov rsi, rax
   747 000007C0 E93D040000              	jmp .Lemit	
   748                                  
   749                                  .Lchar_backslash:
   750 000007C5 48BF-                   	mov rdi, fmt_char_backslash
   750 000007C7 [2701000000000000] 
   751 000007CF E92E040000              	jmp .Lemit
   752                                  
   753                                  .Lchar_dquote:
   754 000007D4 48BF-                   	mov rdi, fmt_char_dquote
   754 000007D6 [2B01000000000000] 
   755 000007DE E91F040000              	jmp .Lemit
   756                                  
   757                                  .Lchar_null:
   758 000007E3 48BF-                   	mov rdi, fmt_char_null
   758 000007E5 [3401000000000000] 
   759 000007ED E910040000              	jmp .Lemit
   760                                  
   761                                  .Lchar_bell:
   762 000007F2 48BF-                   	mov rdi, fmt_char_bell
   762 000007F4 [3A01000000000000] 
   763 000007FC E901040000              	jmp .Lemit
   764                                  
   765                                  .Lchar_backspace:
   766 00000801 48BF-                   	mov rdi, fmt_char_backspace
   766 00000803 [4101000000000000] 
   767 0000080B E9F2030000              	jmp .Lemit
   768                                  
   769                                  .Lchar_tab:
   770 00000810 48BF-                   	mov rdi, fmt_char_tab
   770 00000812 [4D01000000000000] 
   771 0000081A E9E3030000              	jmp .Lemit
   772                                  
   773                                  .Lchar_newline:
   774 0000081F 48BF-                   	mov rdi, fmt_char_newline
   774 00000821 [5301000000000000] 
   775 00000829 E9D4030000              	jmp .Lemit
   776                                  
   777                                  .Lchar_formfeed:
   778 0000082E 48BF-                   	mov rdi, fmt_char_formfeed
   778 00000830 [5D01000000000000] 
   779 00000838 E9C5030000              	jmp .Lemit
   780                                  
   781                                  .Lchar_return:
   782 0000083D 48BF-                   	mov rdi, fmt_char_return
   782 0000083F [6401000000000000] 
   783 00000847 E9B6030000              	jmp .Lemit
   784                                  
   785                                  .Lchar_escape:
   786 0000084C 48BF-                   	mov rdi, fmt_char_escape
   786 0000084E [6D01000000000000] 
   787 00000856 E9A7030000              	jmp .Lemit
   788                                  
   789                                  .Lchar_space:
   790 0000085B 48BF-                   	mov rdi, fmt_char_space
   790 0000085D [7301000000000000] 
   791 00000865 E998030000              	jmp .Lemit
   792                                  
   793                                  .Lclosure:
   794 0000086A 4889FE                  	mov rsi, qword rdi
   795 0000086D 48BF-                   	mov rdi, fmt_closure
   795 0000086F [8301000000000000] 
   796 00000877 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   797 0000087B 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   798 0000087F E97E030000              	jmp .Lemit
   799                                  
   800                                  .Lsymbol:
   801 00000884 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   802 00000888 BE01000000              	mov rsi, 1		 ; size = 1 byte
   803 0000088D 488B5701                	mov rdx, qword [rdi + 1] ; length
   804 00000891 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   805 00000895 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   806 0000089D E8(00000000)            	call fwrite
   807 000008A2 E970030000              	jmp .Lend
   808                                  	
   809                                  .Lpair:
   810 000008A7 57                      	push rdi
   811 000008A8 48BF-                   	mov rdi, fmt_lparen
   811 000008AA [AF01000000000000] 
   812 000008B2 B800000000              	mov rax, 0
   813                                          ENTER
    33 000008B7 C8000000            <1>  enter 0, 0
    34 000008BB 4883E4F0            <1>  and rsp, ~15
   814 000008BF E8(00000000)            	call printf
   815                                          LEAVE
    38 000008C4 C9                  <1>  leave
   816 000008C5 488B3C24                	mov rdi, qword [rsp] 	; pair
   817 000008C9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   818 000008CD E8D1FDFFFF              	call print_sexpr
   819 000008D2 5F                      	pop rdi 		; pair
   820 000008D3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   821                                  .Lcdr:
   822 000008D7 8A07                    	mov al, byte [rdi]
   823 000008D9 3C01                    	cmp al, T_nil
   824 000008DB 7447                    	je .Lcdr_nil
   825 000008DD 3C21                    	cmp al, T_pair
   826 000008DF 7462                    	je .Lcdr_pair
   827 000008E1 57                      	push rdi
   828 000008E2 48BF-                   	mov rdi, fmt_dotted_pair
   828 000008E4 [B101000000000000] 
   829 000008EC B800000000              	mov rax, 0
   830                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   831 000008F9 E8(00000000)            	call printf
   832                                  	LEAVE
    38 000008FE C9                  <1>  leave
   833 000008FF 5F                      	pop rdi
   834 00000900 E89EFDFFFF              	call print_sexpr
   835 00000905 48BF-                   	mov rdi, fmt_rparen
   835 00000907 [B501000000000000] 
   836 0000090F B800000000              	mov rax, 0
   837                                  	ENTER
    33 00000914 C8000000            <1>  enter 0, 0
    34 00000918 4883E4F0            <1>  and rsp, ~15
   838 0000091C E8(00000000)            	call printf
   839                                  	LEAVE
    38 00000921 C9                  <1>  leave
   840                                  	LEAVE
    38 00000922 C9                  <1>  leave
   841 00000923 C3                      	ret
   842                                  
   843                                  .Lcdr_nil:
   844 00000924 48BF-                   	mov rdi, fmt_rparen
   844 00000926 [B501000000000000] 
   845 0000092E B800000000              	mov rax, 0
   846                                  	ENTER
    33 00000933 C8000000            <1>  enter 0, 0
    34 00000937 4883E4F0            <1>  and rsp, ~15
   847 0000093B E8(00000000)            	call printf
   848                                  	LEAVE
    38 00000940 C9                  <1>  leave
   849                                  	LEAVE
    38 00000941 C9                  <1>  leave
   850 00000942 C3                      	ret
   851                                  
   852                                  .Lcdr_pair:
   853 00000943 57                      	push rdi
   854 00000944 48BF-                   	mov rdi, fmt_space
   854 00000946 [B701000000000000] 
   855 0000094E B800000000              	mov rax, 0
   856                                  	ENTER
    33 00000953 C8000000            <1>  enter 0, 0
    34 00000957 4883E4F0            <1>  and rsp, ~15
   857 0000095B E8(00000000)            	call printf
   858                                  	LEAVE
    38 00000960 C9                  <1>  leave
   859 00000961 488B3C24                	mov rdi, qword [rsp]
   860 00000965 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   861 00000969 E835FDFFFF              	call print_sexpr
   862 0000096E 5F                      	pop rdi
   863 0000096F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   864 00000973 E95FFFFFFF              	jmp .Lcdr
   865                                  
   866                                  .Lvector:
   867 00000978 488B4701                	mov rax, qword [rdi + 1] ; length
   868 0000097C 4883F800                	cmp rax, 0
   869 00000980 0F8484000000            	je .Lvector_empty
   870 00000986 57                      	push rdi
   871 00000987 48BF-                   	mov rdi, fmt_vector
   871 00000989 [BD01000000000000] 
   872 00000991 B800000000              	mov rax, 0
   873                                  	ENTER
    33 00000996 C8000000            <1>  enter 0, 0
    34 0000099A 4883E4F0            <1>  and rsp, ~15
   874 0000099E E8(00000000)            	call printf
   875                                  	LEAVE
    38 000009A3 C9                  <1>  leave
   876 000009A4 488B3C24                	mov rdi, qword [rsp]
   877 000009A8 FF7701                  	push qword [rdi + 1]
   878 000009AB 6A01                    	push 1
   879 000009AD 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   880 000009B1 E8EDFCFFFF              	call print_sexpr
   881                                  .Lvector_loop:
   882                                  	; [rsp] index
   883                                  	; [rsp + 8*1] limit
   884                                  	; [rsp + 8*2] vector
   885 000009B6 488B0424                	mov rax, qword [rsp]
   886 000009BA 483B442408              	cmp rax, qword [rsp + 8*1]
   887 000009BF 7436                    	je .Lvector_end
   888 000009C1 48BF-                   	mov rdi, fmt_space
   888 000009C3 [B701000000000000] 
   889 000009CB B800000000              	mov rax, 0
   890                                  	ENTER
    33 000009D0 C8000000            <1>  enter 0, 0
    34 000009D4 4883E4F0            <1>  and rsp, ~15
   891 000009D8 E8(00000000)            	call printf
   892                                  	LEAVE
    38 000009DD C9                  <1>  leave
   893 000009DE 488B0424                	mov rax, qword [rsp]
   894 000009E2 488B5C2410              	mov rbx, qword [rsp + 8*2]
   895 000009E7 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   896 000009EC E8B2FCFFFF              	call print_sexpr
   897 000009F1 48FF0424                	inc qword [rsp]
   898 000009F5 EBBF                    	jmp .Lvector_loop
   899                                  
   900                                  .Lvector_end:
   901 000009F7 4883C418                	add rsp, 8*3
   902 000009FB 48BF-                   	mov rdi, fmt_rparen
   902 000009FD [B501000000000000] 
   903 00000A05 E9F8010000              	jmp .Lemit	
   904                                  
   905                                  .Lvector_empty:
   906 00000A0A 48BF-                   	mov rdi, fmt_empty_vector
   906 00000A0C [B901000000000000] 
   907 00000A14 E9E9010000              	jmp .Lemit
   908                                  
   909                                  .Lreal:
   910 00000A19 FF7701                  	push qword [rdi + 1]
   911 00000A1C F20F100424              	movsd xmm0, qword [rsp]
   912 00000A21 4883C408                	add rsp, 8*1
   913 00000A25 48BF-                   	mov rdi, fmt_real
   913 00000A27 [C001000000000000] 
   914 00000A2F B801000000              	mov rax, 1
   915                                  	ENTER
    33 00000A34 C8000000            <1>  enter 0, 0
    34 00000A38 4883E4F0            <1>  and rsp, ~15
   916 00000A3C E8(00000000)            	call printf
   917                                  	LEAVE
    38 00000A41 C9                  <1>  leave
   918 00000A42 E9D0010000              	jmp .Lend
   919                                  
   920                                  .Lrational:
   921 00000A47 488B7701                	mov rsi, qword [rdi + 1]
   922 00000A4B 488B5709                	mov rdx, qword [rdi + 1 + 8]
   923 00000A4F 4883FE00                	cmp rsi, 0
   924 00000A53 7415                    	je .Lrat_zero
   925 00000A55 4883FA01                	cmp rdx, 1
   926 00000A59 741E                    	je .Lrat_int
   927 00000A5B 48BF-                   	mov rdi, fmt_fraction
   927 00000A5D [C301000000000000] 
   928 00000A65 E998010000              	jmp .Lemit
   929                                  
   930                                  .Lrat_zero:
   931 00000A6A 48BF-                   	mov rdi, fmt_zero
   931 00000A6C [CB01000000000000] 
   932 00000A74 E989010000              	jmp .Lemit
   933                                  
   934                                  .Lrat_int:
   935 00000A79 48BF-                   	mov rdi, fmt_int
   935 00000A7B [CD01000000000000] 
   936 00000A83 E97A010000              	jmp .Lemit
   937                                  
   938                                  .Lstring:
   939 00000A88 488D4709                	lea rax, [rdi + 1 + 8]
   940 00000A8C 50                      	push rax
   941 00000A8D FF7701                  	push qword [rdi + 1]
   942 00000A90 48BF-                   	mov rdi, fmt_dquote
   942 00000A92 [1102000000000000] 
   943 00000A9A B800000000              	mov rax, 0
   944                                  	ENTER
    33 00000A9F C8000000            <1>  enter 0, 0
    34 00000AA3 4883E4F0            <1>  and rsp, ~15
   945 00000AA7 E8(00000000)            	call printf
   946                                  	LEAVE
    38 00000AAC C9                  <1>  leave
   947                                  .Lstring_loop:
   948                                  	; qword [rsp]: limit
   949                                  	; qword [rsp + 8*1]: char *
   950 00000AAD 48833C2400              	cmp qword [rsp], 0
   951 00000AB2 0F84FD000000            	je .Lstring_end
   952 00000AB8 488B442408              	mov rax, qword [rsp + 8*1]
   953 00000ABD 8A00                    	mov al, byte [rax]
   954 00000ABF 4825FF000000            	and rax, 255
   955 00000AC5 3C07                    	cmp al, 7
   956 00000AC7 7468                            je .Lstring_char_7
   957 00000AC9 3C08                            cmp al, 8
   958 00000ACB 7470                            je .Lstring_char_8
   959 00000ACD 3C09                            cmp al, 9
   960 00000ACF 7478                            je .Lstring_char_9
   961 00000AD1 3C0A                            cmp al, 10
   962 00000AD3 0F847C000000                    je .Lstring_char_10
   963 00000AD9 3C0B                            cmp al, 11
   964 00000ADB 0F8480000000                    je .Lstring_char_11
   965 00000AE1 3C0C                            cmp al, 12
   966 00000AE3 0F8484000000                    je .Lstring_char_12
   967 00000AE9 3C0D                            cmp al, 13
   968 00000AEB 0F8488000000                    je .Lstring_char_13
   969 00000AF1 3C22                            cmp al, 34
   970 00000AF3 0F848C000000                    je .Lstring_char_34
   971 00000AF9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   973 00000AFB 3C20                            cmp al, ' '
   974 00000AFD 0F8CA0000000                    jl .Lstring_char_hex
   975 00000B03 48BF-                           mov rdi, fmt_string_char
   975 00000B05 [1302000000000000] 
   976 00000B0D 4889C6                          mov rsi, rax
   977                                  .Lstring_char_emit:
   978 00000B10 B800000000                      mov rax, 0
   979                                          ENTER
    33 00000B15 C8000000            <1>  enter 0, 0
    34 00000B19 4883E4F0            <1>  and rsp, ~15
   980 00000B1D E8(00000000)                    call printf
   981                                          LEAVE
    38 00000B22 C9                  <1>  leave
   982 00000B23 48FF0C24                        dec qword [rsp]
   983 00000B27 48FF442408                      inc qword [rsp + 8*1]
   984 00000B2C E97CFFFFFF                      jmp .Lstring_loop
   985                                  
   986                                  .Lstring_char_7:
   987 00000B31 48BF-                           mov rdi, fmt_string_char_7
   987 00000B33 [1602000000000000] 
   988 00000B3B EBD3                            jmp .Lstring_char_emit
   989                                  
   990                                  .Lstring_char_8:
   991 00000B3D 48BF-                           mov rdi, fmt_string_char_8
   991 00000B3F [1902000000000000] 
   992 00000B47 EBC7                            jmp .Lstring_char_emit
   993                                          
   994                                  .Lstring_char_9:
   995 00000B49 48BF-                           mov rdi, fmt_string_char_9
   995 00000B4B [1C02000000000000] 
   996 00000B53 EBBB                            jmp .Lstring_char_emit
   997                                  
   998                                  .Lstring_char_10:
   999 00000B55 48BF-                           mov rdi, fmt_string_char_10
   999 00000B57 [1F02000000000000] 
  1000 00000B5F EBAF                            jmp .Lstring_char_emit
  1001                                  
  1002                                  .Lstring_char_11:
  1003 00000B61 48BF-                           mov rdi, fmt_string_char_11
  1003 00000B63 [2202000000000000] 
  1004 00000B6B EBA3                            jmp .Lstring_char_emit
  1005                                  
  1006                                  .Lstring_char_12:
  1007 00000B6D 48BF-                           mov rdi, fmt_string_char_12
  1007 00000B6F [2502000000000000] 
  1008 00000B77 EB97                            jmp .Lstring_char_emit
  1009                                  
  1010                                  .Lstring_char_13:
  1011 00000B79 48BF-                           mov rdi, fmt_string_char_13
  1011 00000B7B [2802000000000000] 
  1012 00000B83 EB8B                            jmp .Lstring_char_emit
  1013                                  
  1014                                  .Lstring_char_34:
  1015 00000B85 48BF-                           mov rdi, fmt_string_char_34
  1015 00000B87 [2B02000000000000] 
  1016 00000B8F E97CFFFFFF                      jmp .Lstring_char_emit
  1017                                  
  1018                                  .Lstring_char_92:
  1019 00000B94 48BF-                           mov rdi, fmt_string_char_92
  1019 00000B96 [2E02000000000000] 
  1020 00000B9E E96DFFFFFF                      jmp .Lstring_char_emit
  1021                                  
  1022                                  .Lstring_char_hex:
  1023 00000BA3 48BF-                           mov rdi, fmt_string_char_hex
  1023 00000BA5 [3102000000000000] 
  1024 00000BAD 4889C6                          mov rsi, rax
  1025 00000BB0 E95BFFFFFF                      jmp .Lstring_char_emit        
  1026                                  
  1027                                  .Lstring_end:
  1028 00000BB5 4883C410                	add rsp, 8 * 2
  1029 00000BB9 48BF-                   	mov rdi, fmt_dquote
  1029 00000BBB [1102000000000000] 
  1030 00000BC3 EB3D                    	jmp .Lemit
  1031                                  
  1032                                  .Lunknown_sexpr_type:
  1033 00000BC5 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1033 00000BC7 [D101000000000000] 
  1034 00000BCF 4825FF000000            	and rax, 255
  1035 00000BD5 4889C2                  	mov rdx, rax
  1036 00000BD8 4889F9                  	mov rcx, rdi
  1037 00000BDB 488B3C25[00000000]      	mov rdi, qword [stderr]
  1038 00000BE3 B800000000              	mov rax, 0
  1039                                  	ENTER
    33 00000BE8 C8000000            <1>  enter 0, 0
    34 00000BEC 4883E4F0            <1>  and rsp, ~15
  1040 00000BF0 E8(00000000)            	call fprintf
  1041                                  	LEAVE
    38 00000BF5 C9                  <1>  leave
  1042 00000BF6 48C7C0FFFFFFFF          	mov rax, -1
  1043 00000BFD E8(00000000)            	call exit
  1044                                  
  1045                                  .Lemit:
  1046 00000C02 B800000000              	mov rax, 0
  1047                                  	ENTER
    33 00000C07 C8000000            <1>  enter 0, 0
    34 00000C0B 4883E4F0            <1>  and rsp, ~15
  1048 00000C0F E8(00000000)            	call printf
  1049                                  	LEAVE
    38 00000C14 C9                  <1>  leave
  1050 00000C15 EB00                    	jmp .Lend
  1051                                  
  1052                                  .Lend:
  1053                                  	LEAVE
    38 00000C17 C9                  <1>  leave
  1054 00000C18 C3                      	ret
  1055                                  
  1056                                  ;;; rdi: address of free variable
  1057                                  ;;; rsi: address of code-pointer
  1058                                  bind_primitive:
  1059                                          ENTER
    33 00000C19 C8000000            <1>  enter 0, 0
    34 00000C1D 4883E4F0            <1>  and rsp, ~15
  1060 00000C21 57                              push rdi
  1061 00000C22 BF11000000                      mov rdi, (1 + 8 + 8)
  1062 00000C27 E85CFAFFFF                      call malloc
  1063 00000C2C 5F                              pop rdi
  1064 00000C2D C60005                          mov byte [rax], T_closure
  1065 00000C30 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1066 00000C38 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1067 00000C3C 488907                          mov qword [rdi], rax
  1068                                          LEAVE
    38 00000C3F C9                  <1>  leave
  1069 00000C40 C3                              ret
  1070                                  
  1071                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1072                                  L_code_ptr_bin_apply:
  1073 00000C41 C8000000                        enter 0, 0
  1074                                          ;finding the list's length
  1075 00000C45 4831C9                          xor rcx, rcx ;0
  1076 00000C48 488B4518                        mov rax, qword [rbp + 8 * 3] ;rax = num_of_args
  1077 00000C4C 488B44C500                      mov rax, qword [rbp + 8 * rax] ;TODO: rax = address of pair list
  1078 00000C51 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
  1079                                          my_loop1:
  1080 00000C55 4881FB[01000000]                        cmp rbx, sob_nil ;if nill
  1081 00000C5C 740C                                    je my_loop_end1 ;jmp end
  1082 00000C5E 48FFC1                                  inc rcx 
  1083 00000C61 53                                      push rbx ;insrting val to stack
  1084 00000C62 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
  1085 00000C66 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
  1086                                          my_loop_end1:
  1087                                  
  1088                                          ;TODO: ecx = 0 ?
  1089                                  
  1090                                          ;make values in the opposite order:
  1091                                          ;1.pushing all argument one more time in the right order
  1092 00000C6A 4889CB                          mov rbx, rcx ;count-up
  1093 00000C6D B900000000                      mov rcx, 0 
  1094 00000C72 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
  1095                                          my_loop2:
  1096 00000C75 4839D9                                  cmp rcx, rbx ; if rcx = n
  1097 00000C78 7408                                    je my_loop_end2 ;then: jump to the end
  1098 00000C7A 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
  1099 00000C7E 50                                      push rax
  1100 00000C7F 48FFC1                                  inc rcx
  1101                                          my_loop_end2:
  1102                                          ;2.overwriting element above by element below but in correct order
  1103 00000C82 488D5306                        lea rdx, [rbx + 6] ;nubmer of *qwords* we need to skip
  1104 00000C86 48C1E203                        shl rdx, 3 ;nubmer of *bytes* we need to skip
  1105 00000C8A 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
  1106 00000C8E 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
  1107 00000C92 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
  1108 00000C96 B900000000                      mov rcx, 0
  1109                                          my_loop3:
  1110 00000C9B 4839D9                                  cmp rcx, rbx ;if rcx = n
  1111 00000C9E 7412                                    je my_loop_end3 ;then: jump to the end
  1112 00000CA0 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
  1113 00000CA4 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
  1114 00000CA8 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
  1115 00000CAB 4883C408                                add rsp, 8 ;pop arg we used
  1116 00000CAF 48FFC1                                  inc rcx 
  1117                                          my_loop_end3:
  1118 00000CB2 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
  1119 00000CB6 4883C418                        add rsp, 8 * 3 ; pop old-rbp, return-address, le-ap
  1120 00000CBA 51                              push rcx ;push number of arguments
  1121 00000CBB 57                              push rdi ; push old ret-add
  1122 00000CBC 4889F5                          mov rbp, rsi ;rbp = old-rbp
  1123 00000CBF 4889EC                          mov rsp, rbp; the part of LEAVE we need
  1124 00000CC2 41FFE0                          jmp r8 ; fun to apply
  1125                                  	
  1126                                  L_code_ptr_is_null:
  1127                                          ENTER
    33 00000CC5 C8000000            <1>  enter 0, 0
    34 00000CC9 4883E4F0            <1>  and rsp, ~15
  1128 00000CCD 48837D1801                      cmp COUNT, 1
  1129 00000CD2 0F85A5100000                    jne L_error_arg_count_1
  1130 00000CD8 488B4520                        mov rax, PARAM(0)
  1131 00000CDC 803801                          cmp byte [rax], T_nil
  1132 00000CDF 750C                            jne .L_false
  1133 00000CE1 48B8-                           mov rax, sob_boolean_true
  1133 00000CE3 [0300000000000000] 
  1134 00000CEB EB0A                            jmp .L_end
  1135                                  .L_false:
  1136 00000CED 48B8-                           mov rax, sob_boolean_false
  1136 00000CEF [0200000000000000] 
  1137                                  .L_end:
  1138                                          LEAVE
    38 00000CF7 C9                  <1>  leave
  1139 00000CF8 C21800                          ret AND_KILL_FRAME(1)
  1140                                  
  1141                                  L_code_ptr_is_pair:
  1142                                          ENTER
    33 00000CFB C8000000            <1>  enter 0, 0
    34 00000CFF 4883E4F0            <1>  and rsp, ~15
  1143 00000D03 48837D1801                      cmp COUNT, 1
  1144 00000D08 0F856F100000                    jne L_error_arg_count_1
  1145 00000D0E 488B4520                        mov rax, PARAM(0)
  1146 00000D12 803821                          cmp byte [rax], T_pair
  1147 00000D15 750C                            jne .L_false
  1148 00000D17 48B8-                           mov rax, sob_boolean_true
  1148 00000D19 [0300000000000000] 
  1149 00000D21 EB0A                            jmp .L_end
  1150                                  .L_false:
  1151 00000D23 48B8-                           mov rax, sob_boolean_false
  1151 00000D25 [0200000000000000] 
  1152                                  .L_end:
  1153                                          LEAVE
    38 00000D2D C9                  <1>  leave
  1154 00000D2E C21800                          ret AND_KILL_FRAME(1)
  1155                                          
  1156                                  L_code_ptr_is_void:
  1157                                          ENTER
    33 00000D31 C8000000            <1>  enter 0, 0
    34 00000D35 4883E4F0            <1>  and rsp, ~15
  1158 00000D39 48837D1801                      cmp COUNT, 1
  1159 00000D3E 0F8539100000                    jne L_error_arg_count_1
  1160 00000D44 488B4520                        mov rax, PARAM(0)
  1161 00000D48 803800                          cmp byte [rax], T_void
  1162 00000D4B 750C                            jne .L_false
  1163 00000D4D 48B8-                           mov rax, sob_boolean_true
  1163 00000D4F [0300000000000000] 
  1164 00000D57 EB0A                            jmp .L_end
  1165                                  .L_false:
  1166 00000D59 48B8-                           mov rax, sob_boolean_false
  1166 00000D5B [0200000000000000] 
  1167                                  .L_end:
  1168                                          LEAVE
    38 00000D63 C9                  <1>  leave
  1169 00000D64 C21800                          ret AND_KILL_FRAME(1)
  1170                                  
  1171                                  L_code_ptr_is_char:
  1172                                          ENTER
    33 00000D67 C8000000            <1>  enter 0, 0
    34 00000D6B 4883E4F0            <1>  and rsp, ~15
  1173 00000D6F 48837D1801                      cmp COUNT, 1
  1174 00000D74 0F8503100000                    jne L_error_arg_count_1
  1175 00000D7A 488B4520                        mov rax, PARAM(0)
  1176 00000D7E 803802                          cmp byte [rax], T_char
  1177 00000D81 750C                            jne .L_false
  1178 00000D83 48B8-                           mov rax, sob_boolean_true
  1178 00000D85 [0300000000000000] 
  1179 00000D8D EB0A                            jmp .L_end
  1180                                  .L_false:
  1181 00000D8F 48B8-                           mov rax, sob_boolean_false
  1181 00000D91 [0200000000000000] 
  1182                                  .L_end:
  1183                                          LEAVE
    38 00000D99 C9                  <1>  leave
  1184 00000D9A C21800                          ret AND_KILL_FRAME(1)
  1185                                  
  1186                                  L_code_ptr_is_string:
  1187                                          ENTER
    33 00000D9D C8000000            <1>  enter 0, 0
    34 00000DA1 4883E4F0            <1>  and rsp, ~15
  1188 00000DA5 48837D1801                      cmp COUNT, 1
  1189 00000DAA 0F85CD0F0000                    jne L_error_arg_count_1
  1190 00000DB0 488B4520                        mov rax, PARAM(0)
  1191 00000DB4 803803                          cmp byte [rax], T_string
  1192 00000DB7 750C                            jne .L_false
  1193 00000DB9 48B8-                           mov rax, sob_boolean_true
  1193 00000DBB [0300000000000000] 
  1194 00000DC3 EB0A                            jmp .L_end
  1195                                  .L_false:
  1196 00000DC5 48B8-                           mov rax, sob_boolean_false
  1196 00000DC7 [0200000000000000] 
  1197                                  .L_end:
  1198                                          LEAVE
    38 00000DCF C9                  <1>  leave
  1199 00000DD0 C21800                          ret AND_KILL_FRAME(1)
  1200                                  
  1201                                  L_code_ptr_is_symbol:
  1202                                          ENTER
    33 00000DD3 C8000000            <1>  enter 0, 0
    34 00000DD7 4883E4F0            <1>  and rsp, ~15
  1203 00000DDB 48837D1801                      cmp COUNT, 1
  1204 00000DE0 0F85970F0000                    jne L_error_arg_count_1
  1205 00000DE6 488B4520                        mov rax, PARAM(0)
  1206 00000DEA 803804                          cmp byte [rax], T_symbol
  1207 00000DED 750C                            jne .L_false
  1208 00000DEF 48B8-                           mov rax, sob_boolean_true
  1208 00000DF1 [0300000000000000] 
  1209 00000DF9 EB0A                            jmp .L_end
  1210                                  .L_false:
  1211 00000DFB 48B8-                           mov rax, sob_boolean_false
  1211 00000DFD [0200000000000000] 
  1212                                  .L_end:
  1213                                          LEAVE
    38 00000E05 C9                  <1>  leave
  1214 00000E06 C21800                          ret AND_KILL_FRAME(1)
  1215                                  
  1216                                  L_code_ptr_is_vector:
  1217                                          ENTER
    33 00000E09 C8000000            <1>  enter 0, 0
    34 00000E0D 4883E4F0            <1>  and rsp, ~15
  1218 00000E11 48837D1801                      cmp COUNT, 1
  1219 00000E16 0F85610F0000                    jne L_error_arg_count_1
  1220 00000E1C 488B4520                        mov rax, PARAM(0)
  1221 00000E20 803822                          cmp byte [rax], T_vector
  1222 00000E23 750C                            jne .L_false
  1223 00000E25 48B8-                           mov rax, sob_boolean_true
  1223 00000E27 [0300000000000000] 
  1224 00000E2F EB0A                            jmp .L_end
  1225                                  .L_false:
  1226 00000E31 48B8-                           mov rax, sob_boolean_false
  1226 00000E33 [0200000000000000] 
  1227                                  .L_end:
  1228                                          LEAVE
    38 00000E3B C9                  <1>  leave
  1229 00000E3C C21800                          ret AND_KILL_FRAME(1)
  1230                                  
  1231                                  L_code_ptr_is_closure:
  1232                                          ENTER
    33 00000E3F C8000000            <1>  enter 0, 0
    34 00000E43 4883E4F0            <1>  and rsp, ~15
  1233 00000E47 48837D1801                      cmp COUNT, 1
  1234 00000E4C 0F852B0F0000                    jne L_error_arg_count_1
  1235 00000E52 488B4520                        mov rax, PARAM(0)
  1236 00000E56 803805                          cmp byte [rax], T_closure
  1237 00000E59 750C                            jne .L_false
  1238 00000E5B 48B8-                           mov rax, sob_boolean_true
  1238 00000E5D [0300000000000000] 
  1239 00000E65 EB0A                            jmp .L_end
  1240                                  .L_false:
  1241 00000E67 48B8-                           mov rax, sob_boolean_false
  1241 00000E69 [0200000000000000] 
  1242                                  .L_end:
  1243                                          LEAVE
    38 00000E71 C9                  <1>  leave
  1244 00000E72 C21800                          ret AND_KILL_FRAME(1)
  1245                                  
  1246                                  L_code_ptr_is_real:
  1247                                          ENTER
    33 00000E75 C8000000            <1>  enter 0, 0
    34 00000E79 4883E4F0            <1>  and rsp, ~15
  1248 00000E7D 48837D1801                      cmp COUNT, 1
  1249 00000E82 0F85F50E0000                    jne L_error_arg_count_1
  1250 00000E88 488B4520                        mov rax, PARAM(0)
  1251 00000E8C 803812                          cmp byte [rax], T_real
  1252 00000E8F 750C                            jne .L_false
  1253 00000E91 48B8-                           mov rax, sob_boolean_true
  1253 00000E93 [0300000000000000] 
  1254 00000E9B EB0A                            jmp .L_end
  1255                                  .L_false:
  1256 00000E9D 48B8-                           mov rax, sob_boolean_false
  1256 00000E9F [0200000000000000] 
  1257                                  .L_end:
  1258                                          LEAVE
    38 00000EA7 C9                  <1>  leave
  1259 00000EA8 C21800                          ret AND_KILL_FRAME(1)
  1260                                  
  1261                                  L_code_ptr_is_rational:
  1262                                          ENTER
    33 00000EAB C8000000            <1>  enter 0, 0
    34 00000EAF 4883E4F0            <1>  and rsp, ~15
  1263 00000EB3 48837D1801                      cmp COUNT, 1
  1264 00000EB8 0F85BF0E0000                    jne L_error_arg_count_1
  1265 00000EBE 488B4520                        mov rax, PARAM(0)
  1266 00000EC2 803811                          cmp byte [rax], T_rational
  1267 00000EC5 750C                            jne .L_false
  1268 00000EC7 48B8-                           mov rax, sob_boolean_true
  1268 00000EC9 [0300000000000000] 
  1269 00000ED1 EB0A                            jmp .L_end
  1270                                  .L_false:
  1271 00000ED3 48B8-                           mov rax, sob_boolean_false
  1271 00000ED5 [0200000000000000] 
  1272                                  .L_end:
  1273                                          LEAVE
    38 00000EDD C9                  <1>  leave
  1274 00000EDE C21800                          ret AND_KILL_FRAME(1)
  1275                                  
  1276                                  L_code_ptr_is_boolean:
  1277                                          ENTER
    33 00000EE1 C8000000            <1>  enter 0, 0
    34 00000EE5 4883E4F0            <1>  and rsp, ~15
  1278 00000EE9 48837D1801                      cmp COUNT, 1
  1279 00000EEE 0F85890E0000                    jne L_error_arg_count_1
  1280 00000EF4 488B4520                        mov rax, PARAM(0)
  1281 00000EF8 8A18                            mov bl, byte [rax]
  1282 00000EFA 80E308                          and bl, T_boolean
  1283 00000EFD 740C                            je .L_false
  1284 00000EFF 48B8-                           mov rax, sob_boolean_true
  1284 00000F01 [0300000000000000] 
  1285 00000F09 EB0A                            jmp .L_end
  1286                                  .L_false:
  1287 00000F0B 48B8-                           mov rax, sob_boolean_false
  1287 00000F0D [0200000000000000] 
  1288                                  .L_end:
  1289                                          LEAVE
    38 00000F15 C9                  <1>  leave
  1290 00000F16 C21800                          ret AND_KILL_FRAME(1)
  1291                                          
  1292                                  L_code_ptr_is_number:
  1293                                          ENTER
    33 00000F19 C8000000            <1>  enter 0, 0
    34 00000F1D 4883E4F0            <1>  and rsp, ~15
  1294 00000F21 48837D1801                      cmp COUNT, 1
  1295 00000F26 0F85510E0000                    jne L_error_arg_count_1
  1296 00000F2C 488B4520                        mov rax, PARAM(0)
  1297 00000F30 8A18                            mov bl, byte [rax]
  1298 00000F32 80E310                          and bl, T_number
  1299 00000F35 740C                            je .L_false
  1300 00000F37 48B8-                           mov rax, sob_boolean_true
  1300 00000F39 [0300000000000000] 
  1301 00000F41 EB0A                            jmp .L_end
  1302                                  .L_false:
  1303 00000F43 48B8-                           mov rax, sob_boolean_false
  1303 00000F45 [0200000000000000] 
  1304                                  .L_end:
  1305                                          LEAVE
    38 00000F4D C9                  <1>  leave
  1306 00000F4E C21800                          ret AND_KILL_FRAME(1)
  1307                                          
  1308                                  L_code_ptr_is_collection:
  1309                                          ENTER
    33 00000F51 C8000000            <1>  enter 0, 0
    34 00000F55 4883E4F0            <1>  and rsp, ~15
  1310 00000F59 48837D1801                      cmp COUNT, 1
  1311 00000F5E 0F85190E0000                    jne L_error_arg_count_1
  1312 00000F64 488B4520                        mov rax, PARAM(0)
  1313 00000F68 8A18                            mov bl, byte [rax]
  1314 00000F6A 80E320                          and bl, T_collection
  1315 00000F6D 740C                            je .L_false
  1316 00000F6F 48B8-                           mov rax, sob_boolean_true
  1316 00000F71 [0300000000000000] 
  1317 00000F79 EB0A                            jmp .L_end
  1318                                  .L_false:
  1319 00000F7B 48B8-                           mov rax, sob_boolean_false
  1319 00000F7D [0200000000000000] 
  1320                                  .L_end:
  1321                                          LEAVE
    38 00000F85 C9                  <1>  leave
  1322 00000F86 C21800                          ret AND_KILL_FRAME(1)
  1323                                  
  1324                                  L_code_ptr_cons:
  1325                                          ENTER
    33 00000F89 C8000000            <1>  enter 0, 0
    34 00000F8D 4883E4F0            <1>  and rsp, ~15
  1326 00000F91 48837D1802                      cmp COUNT, 2
  1327 00000F96 0F85160E0000                    jne L_error_arg_count_2
  1328 00000F9C BF11000000                      mov rdi, (1 + 8 + 8)
  1329 00000FA1 E8E2F6FFFF                      call malloc
  1330 00000FA6 C60021                          mov byte [rax], T_pair
  1331 00000FA9 488B5D20                        mov rbx, PARAM(0)
  1332 00000FAD 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1333 00000FB1 488B5D28                        mov rbx, PARAM(1)
  1334 00000FB5 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1335                                          LEAVE
    38 00000FB9 C9                  <1>  leave
  1336 00000FBA C22000                          ret AND_KILL_FRAME(2)
  1337                                  
  1338                                  L_code_ptr_display_sexpr:
  1339                                          ENTER
    33 00000FBD C8000000            <1>  enter 0, 0
    34 00000FC1 4883E4F0            <1>  and rsp, ~15
  1340 00000FC5 48837D1801                      cmp COUNT, 1
  1341 00000FCA 0F85AD0D0000                    jne L_error_arg_count_1
  1342 00000FD0 488B7D20                        mov rdi, PARAM(0)
  1343 00000FD4 E8CAF6FFFF                      call print_sexpr
  1344 00000FD9 48B8-                           mov rax, sob_void
  1344 00000FDB [0000000000000000] 
  1345                                          LEAVE
    38 00000FE3 C9                  <1>  leave
  1346 00000FE4 C21800                          ret AND_KILL_FRAME(1)
  1347                                  
  1348                                  L_code_ptr_write_char:
  1349                                          ENTER
    33 00000FE7 C8000000            <1>  enter 0, 0
    34 00000FEB 4883E4F0            <1>  and rsp, ~15
  1350 00000FEF 48837D1801                      cmp COUNT, 1
  1351 00000FF4 0F85830D0000                    jne L_error_arg_count_1
  1352 00000FFA 488B4520                        mov rax, PARAM(0)
  1353                                          assert_char(rax)
    42 00000FFE 803802              <1>  cmp byte [%1], %2
    43 00001001 0F854A0E0000        <1>  jne L_error_incorrect_type
  1354 00001007 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1355 0000100A 4825FF000000                    and rax, 255
  1356 00001010 48BF-                           mov rdi, fmt_char
  1356 00001012 [3702000000000000] 
  1357 0000101A 4889C6                          mov rsi, rax
  1358 0000101D B800000000                      mov rax, 0
  1359                                  	ENTER
    33 00001022 C8000000            <1>  enter 0, 0
    34 00001026 4883E4F0            <1>  and rsp, ~15
  1360 0000102A E8(00000000)                    call printf
  1361                                  	LEAVE
    38 0000102F C9                  <1>  leave
  1362 00001030 48B8-                           mov rax, sob_void
  1362 00001032 [0000000000000000] 
  1363                                          LEAVE
    38 0000103A C9                  <1>  leave
  1364 0000103B C21800                          ret AND_KILL_FRAME(1)
  1365                                  
  1366                                  L_code_ptr_car:
  1367                                          ENTER
    33 0000103E C8000000            <1>  enter 0, 0
    34 00001042 4883E4F0            <1>  and rsp, ~15
  1368 00001046 48837D1801                      cmp COUNT, 1
  1369 0000104B 0F852C0D0000                    jne L_error_arg_count_1
  1370 00001051 488B4520                        mov rax, PARAM(0)
  1371                                          assert_pair(rax)
    42 00001055 803821              <1>  cmp byte [%1], %2
    43 00001058 0F85F30D0000        <1>  jne L_error_incorrect_type
  1372 0000105E 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1373                                          LEAVE
    38 00001062 C9                  <1>  leave
  1374 00001063 C21800                          ret AND_KILL_FRAME(1)
  1375                                          
  1376                                  L_code_ptr_cdr:
  1377                                          ENTER
    33 00001066 C8000000            <1>  enter 0, 0
    34 0000106A 4883E4F0            <1>  and rsp, ~15
  1378 0000106E 48837D1801                      cmp COUNT, 1
  1379 00001073 0F85040D0000                    jne L_error_arg_count_1
  1380 00001079 488B4520                        mov rax, PARAM(0)
  1381                                          assert_pair(rax)
    42 0000107D 803821              <1>  cmp byte [%1], %2
    43 00001080 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1382 00001086 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1383                                          LEAVE
    38 0000108A C9                  <1>  leave
  1384 0000108B C21800                          ret AND_KILL_FRAME(1)
  1385                                          
  1386                                  L_code_ptr_string_length:
  1387                                          ENTER
    33 0000108E C8000000            <1>  enter 0, 0
    34 00001092 4883E4F0            <1>  and rsp, ~15
  1388 00001096 48837D1801                      cmp COUNT, 1
  1389 0000109B 0F85DC0C0000                    jne L_error_arg_count_1
  1390 000010A1 488B4520                        mov rax, PARAM(0)
  1391                                          assert_string(rax)
    42 000010A5 803803              <1>  cmp byte [%1], %2
    43 000010A8 0F85A30D0000        <1>  jne L_error_incorrect_type
  1392 000010AE 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1393 000010B2 E83A0C0000                      call make_integer
  1394                                          LEAVE
    38 000010B7 C9                  <1>  leave
  1395 000010B8 C21800                          ret AND_KILL_FRAME(1)
  1396                                  
  1397                                  L_code_ptr_vector_length:
  1398                                          ENTER
    33 000010BB C8000000            <1>  enter 0, 0
    34 000010BF 4883E4F0            <1>  and rsp, ~15
  1399 000010C3 48837D1801                      cmp COUNT, 1
  1400 000010C8 0F85AF0C0000                    jne L_error_arg_count_1
  1401 000010CE 488B4520                        mov rax, PARAM(0)
  1402                                          assert_vector(rax)
    42 000010D2 803822              <1>  cmp byte [%1], %2
    43 000010D5 0F85760D0000        <1>  jne L_error_incorrect_type
  1403 000010DB 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1404 000010DF E80D0C0000                      call make_integer
  1405                                          LEAVE
    38 000010E4 C9                  <1>  leave
  1406 000010E5 C21800                          ret AND_KILL_FRAME(1)
  1407                                  
  1408                                  L_code_ptr_real_to_integer:
  1409                                          ENTER
    33 000010E8 C8000000            <1>  enter 0, 0
    34 000010EC 4883E4F0            <1>  and rsp, ~15
  1410 000010F0 48837D1801                      cmp COUNT, 1
  1411 000010F5 0F85820C0000                    jne L_error_arg_count_1
  1412 000010FB 488B5D20                        mov rbx, PARAM(0)
  1413                                          assert_real(rbx)
    42 000010FF 803B12              <1>  cmp byte [%1], %2
    43 00001102 0F85490D0000        <1>  jne L_error_incorrect_type
  1414 00001108 F20F104301                      movsd xmm0, qword [rbx + 1]
  1415 0000110D F2480F2CF8                      cvttsd2si rdi, xmm0
  1416 00001112 E8DA0B0000                      call make_integer
  1417                                          LEAVE
    38 00001117 C9                  <1>  leave
  1418 00001118 C21800                          ret AND_KILL_FRAME(1)
  1419                                  
  1420                                  L_code_ptr_exit:
  1421                                          ENTER
    33 0000111B C8000000            <1>  enter 0, 0
    34 0000111F 4883E4F0            <1>  and rsp, ~15
  1422 00001123 48837D1800                      cmp COUNT, 0
  1423 00001128 0F851A0C0000                    jne L_error_arg_count_0
  1424 0000112E B800000000                      mov rax, 0
  1425 00001133 E8(00000000)                    call exit
  1426                                  
  1427                                  L_code_ptr_integer_to_real:
  1428                                          ENTER
    33 00001138 C8000000            <1>  enter 0, 0
    34 0000113C 4883E4F0            <1>  and rsp, ~15
  1429 00001140 48837D1801                      cmp COUNT, 1
  1430 00001145 0F85320C0000                    jne L_error_arg_count_1
  1431 0000114B 488B4520                        mov rax, PARAM(0)
  1432                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000114F 803811              <2>  cmp byte [%1], %2
    43 00001152 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 00001158 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000115D 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1433 00001163 FF7001                          push qword [rax + 1]
  1434 00001166 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1435 0000116C E8640B0000                      call make_real
  1436                                          LEAVE
    38 00001171 C9                  <1>  leave
  1437 00001172 C21800                          ret AND_KILL_FRAME(1)
  1438                                  
  1439                                  L_code_ptr_rational_to_real:
  1440                                          ENTER
    33 00001175 C8000000            <1>  enter 0, 0
    34 00001179 4883E4F0            <1>  and rsp, ~15
  1441 0000117D 48837D1801                      cmp COUNT, 1
  1442 00001182 0F85F50B0000                    jne L_error_arg_count_1
  1443 00001188 488B4520                        mov rax, PARAM(0)
  1444                                          assert_rational(rax)
    42 0000118C 803811              <1>  cmp byte [%1], %2
    43 0000118F 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1445 00001195 FF7001                          push qword [rax + 1]
  1446 00001198 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1447 0000119E FF7009                          push qword [rax + 1 + 8]
  1448 000011A1 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1449 000011A7 F20F5EC1                        divsd xmm0, xmm1
  1450 000011AB E8250B0000                      call make_real
  1451                                          LEAVE
    38 000011B0 C9                  <1>  leave
  1452 000011B1 C21800                          ret AND_KILL_FRAME(1)
  1453                                  
  1454                                  L_code_ptr_char_to_integer:
  1455                                          ENTER
    33 000011B4 C8000000            <1>  enter 0, 0
    34 000011B8 4883E4F0            <1>  and rsp, ~15
  1456 000011BC 48837D1801                      cmp COUNT, 1
  1457 000011C1 0F85B60B0000                    jne L_error_arg_count_1
  1458 000011C7 488B4520                        mov rax, PARAM(0)
  1459                                          assert_char(rax)
    42 000011CB 803802              <1>  cmp byte [%1], %2
    43 000011CE 0F857D0C0000        <1>  jne L_error_incorrect_type
  1460 000011D4 8A4001                          mov al, byte [rax + 1]
  1461 000011D7 4825FF000000                    and rax, 255
  1462 000011DD 4889C7                          mov rdi, rax
  1463 000011E0 E80C0B0000                      call make_integer
  1464                                          LEAVE
    38 000011E5 C9                  <1>  leave
  1465 000011E6 C21800                          ret AND_KILL_FRAME(1)
  1466                                  
  1467                                  L_code_ptr_integer_to_char:
  1468                                          ENTER
    33 000011E9 C8000000            <1>  enter 0, 0
    34 000011ED 4883E4F0            <1>  and rsp, ~15
  1469 000011F1 48837D1801                      cmp COUNT, 1
  1470 000011F6 0F85810B0000                    jne L_error_arg_count_1
  1471 000011FC 488B4520                        mov rax, PARAM(0)
  1472                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001200 803811              <2>  cmp byte [%1], %2
    43 00001203 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001209 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000120E 0F853D0C0000        <1>  jne L_error_incorrect_type
  1473 00001214 488B5801                        mov rbx, qword [rax + 1]
  1474 00001218 4883FB00                        cmp rbx, 0
  1475 0000121C 0F8EF50A0000                    jle L_error_integer_range
  1476 00001222 4881FB00010000                  cmp rbx, 256
  1477 00001229 0F8DE80A0000                    jge L_error_integer_range
  1478 0000122F BF02000000                      mov rdi, (1 + 1)
  1479 00001234 E84FF4FFFF                      call malloc
  1480 00001239 C60002                          mov byte [rax], T_char
  1481 0000123C 885801                          mov byte [rax + 1], bl
  1482                                          LEAVE
    38 0000123F C9                  <1>  leave
  1483 00001240 C21800                          ret AND_KILL_FRAME(1)
  1484                                  
  1485                                  L_code_ptr_trng:
  1486                                          ENTER
    33 00001243 C8000000            <1>  enter 0, 0
    34 00001247 4883E4F0            <1>  and rsp, ~15
  1487 0000124B 48837D1800                      cmp COUNT, 0
  1488 00001250 0F85F20A0000                    jne L_error_arg_count_0
  1489 00001256 480FC7F7                        rdrand rdi
  1490 0000125A 48D1EF                          shr rdi, 1
  1491 0000125D E88F0A0000                      call make_integer
  1492                                          LEAVE
    38 00001262 C9                  <1>  leave
  1493 00001263 C21000                          ret AND_KILL_FRAME(0)
  1494                                  
  1495                                  L_code_ptr_is_zero:
  1496                                          ENTER
    33 00001266 C8000000            <1>  enter 0, 0
    34 0000126A 4883E4F0            <1>  and rsp, ~15
  1497 0000126E 48837D1801                      cmp COUNT, 1
  1498 00001273 0F85040B0000                    jne L_error_arg_count_1
  1499 00001279 488B4520                        mov rax, PARAM(0)
  1500 0000127D 803811                          cmp byte [rax], T_rational
  1501 00001280 740A                            je .L_rational
  1502 00001282 803812                          cmp byte [rax], T_real
  1503 00001285 740E                            je .L_real
  1504 00001287 E9C50B0000                      jmp L_error_incorrect_type
  1505                                  .L_rational:
  1506 0000128C 4883780100                      cmp qword [rax + 1], 0
  1507 00001291 7420                            je .L_zero
  1508 00001293 EB12                            jmp .L_not_zero
  1509                                  .L_real:
  1510 00001295 660FEFC0                        pxor xmm0, xmm0
  1511 00001299 FF7001                          push qword [rax + 1]
  1512 0000129C F20F100C24                      movsd xmm1, qword [rsp]
  1513 000012A1 660F2EC1                        ucomisd xmm0, xmm1
  1514 000012A5 740C                            je .L_zero
  1515                                  .L_not_zero:
  1516 000012A7 48B8-                           mov rax, sob_boolean_false
  1516 000012A9 [0200000000000000] 
  1517 000012B1 EB0A                            jmp .L_end
  1518                                  .L_zero:
  1519 000012B3 48B8-                           mov rax, sob_boolean_true
  1519 000012B5 [0300000000000000] 
  1520                                  .L_end:
  1521                                          LEAVE
    38 000012BD C9                  <1>  leave
  1522 000012BE C21800                          ret AND_KILL_FRAME(1)
  1523                                  
  1524                                  L_code_ptr_is_integer:
  1525                                          ENTER
    33 000012C1 C8000000            <1>  enter 0, 0
    34 000012C5 4883E4F0            <1>  and rsp, ~15
  1526 000012C9 48837D1801                      cmp COUNT, 1
  1527 000012CE 0F85A90A0000                    jne L_error_arg_count_1
  1528 000012D4 488B4520                        mov rax, PARAM(0)
  1529 000012D8 803811                          cmp byte [rax], T_rational
  1530 000012DB 7513                            jne .L_false
  1531 000012DD 4883780901                      cmp qword [rax + 1 + 8], 1
  1532 000012E2 750C                            jne .L_false
  1533 000012E4 48B8-                           mov rax, sob_boolean_true
  1533 000012E6 [0300000000000000] 
  1534 000012EE EB0A                            jmp .L_exit
  1535                                  .L_false:
  1536 000012F0 48B8-                           mov rax, sob_boolean_false
  1536 000012F2 [0200000000000000] 
  1537                                  .L_exit:
  1538                                          LEAVE
    38 000012FA C9                  <1>  leave
  1539 000012FB C21800                          ret AND_KILL_FRAME(1)
  1540                                  
  1541                                  L_code_ptr_raw_bin_add_rr:
  1542                                          ENTER
    33 000012FE C8000000            <1>  enter 0, 0
    34 00001302 4883E4F0            <1>  and rsp, ~15
  1543 00001306 48837D1802                      cmp COUNT, 2
  1544 0000130B 0F85A10A0000                    jne L_error_arg_count_2
  1545 00001311 488B5D20                        mov rbx, PARAM(0)
  1546                                          assert_real(rbx)
    42 00001315 803B12              <1>  cmp byte [%1], %2
    43 00001318 0F85330B0000        <1>  jne L_error_incorrect_type
  1547 0000131E 488B4D28                        mov rcx, PARAM(1)
  1548                                          assert_real(rcx)
    42 00001322 803912              <1>  cmp byte [%1], %2
    43 00001325 0F85260B0000        <1>  jne L_error_incorrect_type
  1549 0000132B F20F104301                      movsd xmm0, qword [rbx + 1]
  1550 00001330 F20F104901                      movsd xmm1, qword [rcx + 1]
  1551 00001335 F20F58C1                        addsd xmm0, xmm1
  1552 00001339 E897090000                      call make_real
  1553                                          LEAVE
    38 0000133E C9                  <1>  leave
  1554 0000133F C22000                          ret AND_KILL_FRAME(2)
  1555                                  
  1556                                  L_code_ptr_raw_bin_sub_rr:
  1557                                          ENTER
    33 00001342 C8000000            <1>  enter 0, 0
    34 00001346 4883E4F0            <1>  and rsp, ~15
  1558 0000134A 48837D1802                      cmp COUNT, 2
  1559 0000134F 0F855D0A0000                    jne L_error_arg_count_2
  1560 00001355 488B5D20                        mov rbx, PARAM(0)
  1561                                          assert_real(rbx)
    42 00001359 803B12              <1>  cmp byte [%1], %2
    43 0000135C 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1562 00001362 488B4D28                        mov rcx, PARAM(1)
  1563                                          assert_real(rcx)
    42 00001366 803912              <1>  cmp byte [%1], %2
    43 00001369 0F85E20A0000        <1>  jne L_error_incorrect_type
  1564 0000136F F20F104301                      movsd xmm0, qword [rbx + 1]
  1565 00001374 F20F104901                      movsd xmm1, qword [rcx + 1]
  1566 00001379 F20F5CC1                        subsd xmm0, xmm1
  1567 0000137D E853090000                      call make_real
  1568                                          LEAVE
    38 00001382 C9                  <1>  leave
  1569 00001383 C22000                          ret AND_KILL_FRAME(2)
  1570                                  
  1571                                  L_code_ptr_raw_bin_mul_rr:
  1572                                          ENTER
    33 00001386 C8000000            <1>  enter 0, 0
    34 0000138A 4883E4F0            <1>  and rsp, ~15
  1573 0000138E 48837D1802                      cmp COUNT, 2
  1574 00001393 0F85190A0000                    jne L_error_arg_count_2
  1575 00001399 488B5D20                        mov rbx, PARAM(0)
  1576                                          assert_real(rbx)
    42 0000139D 803B12              <1>  cmp byte [%1], %2
    43 000013A0 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1577 000013A6 488B4D28                        mov rcx, PARAM(1)
  1578                                          assert_real(rcx)
    42 000013AA 803912              <1>  cmp byte [%1], %2
    43 000013AD 0F859E0A0000        <1>  jne L_error_incorrect_type
  1579 000013B3 F20F104301                      movsd xmm0, qword [rbx + 1]
  1580 000013B8 F20F104901                      movsd xmm1, qword [rcx + 1]
  1581 000013BD F20F59C1                        mulsd xmm0, xmm1
  1582 000013C1 E80F090000                      call make_real
  1583                                          LEAVE
    38 000013C6 C9                  <1>  leave
  1584 000013C7 C22000                          ret AND_KILL_FRAME(2)
  1585                                  
  1586                                  L_code_ptr_raw_bin_div_rr:
  1587                                          ENTER
    33 000013CA C8000000            <1>  enter 0, 0
    34 000013CE 4883E4F0            <1>  and rsp, ~15
  1588 000013D2 48837D1802                      cmp COUNT, 2
  1589 000013D7 0F85D5090000                    jne L_error_arg_count_2
  1590 000013DD 488B5D20                        mov rbx, PARAM(0)
  1591                                          assert_real(rbx)
    42 000013E1 803B12              <1>  cmp byte [%1], %2
    43 000013E4 0F85670A0000        <1>  jne L_error_incorrect_type
  1592 000013EA 488B4D28                        mov rcx, PARAM(1)
  1593                                          assert_real(rcx)
    42 000013EE 803912              <1>  cmp byte [%1], %2
    43 000013F1 0F855A0A0000        <1>  jne L_error_incorrect_type
  1594 000013F7 F20F104301                      movsd xmm0, qword [rbx + 1]
  1595 000013FC F20F104901                      movsd xmm1, qword [rcx + 1]
  1596 00001401 660FEFD2                        pxor xmm2, xmm2
  1597 00001405 660F2ECA                        ucomisd xmm1, xmm2
  1598 00001409 0F84730A0000                    je L_error_division_by_zero
  1599 0000140F F20F5EC1                        divsd xmm0, xmm1
  1600 00001413 E8BD080000                      call make_real
  1601                                          LEAVE
    38 00001418 C9                  <1>  leave
  1602 00001419 C22000                          ret AND_KILL_FRAME(2)
  1603                                  
  1604                                  L_code_ptr_raw_bin_add_qq:
  1605                                          ENTER
    33 0000141C C8000000            <1>  enter 0, 0
    34 00001420 4883E4F0            <1>  and rsp, ~15
  1606 00001424 48837D1802                      cmp COUNT, 2
  1607 00001429 0F8583090000                    jne L_error_arg_count_2
  1608 0000142F 4C8B4520                        mov r8, PARAM(0)
  1609                                          assert_rational(r8)
    42 00001433 41803811            <1>  cmp byte [%1], %2
    43 00001437 0F85140A0000        <1>  jne L_error_incorrect_type
  1610 0000143D 4C8B4D28                        mov r9, PARAM(1)
  1611                                          assert_rational(r9)
    42 00001441 41803911            <1>  cmp byte [%1], %2
    43 00001445 0F85060A0000        <1>  jne L_error_incorrect_type
  1612 0000144B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1613 0000144F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1614 00001453 4899                            cqo
  1615 00001455 48F7EB                          imul rbx
  1616 00001458 4889C6                          mov rsi, rax
  1617 0000145B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1618 0000145F 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1619 00001463 4899                            cqo
  1620 00001465 48F7EB                          imul rbx
  1621 00001468 4801C6                          add rsi, rax
  1622 0000146B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1623 0000146F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1624 00001473 4899                            cqo
  1625 00001475 48F7EB                          imul rbx
  1626 00001478 4889C7                          mov rdi, rax
  1627 0000147B E827010000                      call normalize_rational
  1628                                          LEAVE
    38 00001480 C9                  <1>  leave
  1629 00001481 C22000                          ret AND_KILL_FRAME(2)
  1630                                  
  1631                                  L_code_ptr_raw_bin_sub_qq:
  1632                                          ENTER
    33 00001484 C8000000            <1>  enter 0, 0
    34 00001488 4883E4F0            <1>  and rsp, ~15
  1633 0000148C 48837D1802                      cmp COUNT, 2
  1634 00001491 0F851B090000                    jne L_error_arg_count_2
  1635 00001497 4C8B4520                        mov r8, PARAM(0)
  1636                                          assert_rational(r8)
    42 0000149B 41803811            <1>  cmp byte [%1], %2
    43 0000149F 0F85AC090000        <1>  jne L_error_incorrect_type
  1637 000014A5 4C8B4D28                        mov r9, PARAM(1)
  1638                                          assert_rational(r9)
    42 000014A9 41803911            <1>  cmp byte [%1], %2
    43 000014AD 0F859E090000        <1>  jne L_error_incorrect_type
  1639 000014B3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1640 000014B7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1641 000014BB 4899                            cqo
  1642 000014BD 48F7EB                          imul rbx
  1643 000014C0 4889C6                          mov rsi, rax
  1644 000014C3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1645 000014C7 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1646 000014CB 4899                            cqo
  1647 000014CD 48F7EB                          imul rbx
  1648 000014D0 4829C6                          sub rsi, rax
  1649 000014D3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1650 000014D7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1651 000014DB 4899                            cqo
  1652 000014DD 48F7EB                          imul rbx
  1653 000014E0 4889C7                          mov rdi, rax
  1654 000014E3 E8BF000000                      call normalize_rational
  1655                                          LEAVE
    38 000014E8 C9                  <1>  leave
  1656 000014E9 C22000                          ret AND_KILL_FRAME(2)
  1657                                  
  1658                                  L_code_ptr_raw_bin_mul_qq:
  1659                                          ENTER
    33 000014EC C8000000            <1>  enter 0, 0
    34 000014F0 4883E4F0            <1>  and rsp, ~15
  1660 000014F4 48837D1802                      cmp COUNT, 2
  1661 000014F9 0F85B3080000                    jne L_error_arg_count_2
  1662 000014FF 4C8B4520                        mov r8, PARAM(0)
  1663                                          assert_rational(r8)
    42 00001503 41803811            <1>  cmp byte [%1], %2
    43 00001507 0F8544090000        <1>  jne L_error_incorrect_type
  1664 0000150D 4C8B4D28                        mov r9, PARAM(1)
  1665                                          assert_rational(r9)
    42 00001511 41803911            <1>  cmp byte [%1], %2
    43 00001515 0F8536090000        <1>  jne L_error_incorrect_type
  1666 0000151B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1667 0000151F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1668 00001523 4899                            cqo
  1669 00001525 48F7EB                          imul rbx
  1670 00001528 4889C6                          mov rsi, rax
  1671 0000152B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1672 0000152F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1673 00001533 4899                            cqo
  1674 00001535 48F7EB                          imul rbx
  1675 00001538 4889C7                          mov rdi, rax
  1676 0000153B E867000000                      call normalize_rational
  1677                                          LEAVE
    38 00001540 C9                  <1>  leave
  1678 00001541 C22000                          ret AND_KILL_FRAME(2)
  1679                                          
  1680                                  L_code_ptr_raw_bin_div_qq:
  1681                                          ENTER
    33 00001544 C8000000            <1>  enter 0, 0
    34 00001548 4883E4F0            <1>  and rsp, ~15
  1682 0000154C 48837D1802                      cmp COUNT, 2
  1683 00001551 0F855B080000                    jne L_error_arg_count_2
  1684 00001557 4C8B4520                        mov r8, PARAM(0)
  1685                                          assert_rational(r8)
    42 0000155B 41803811            <1>  cmp byte [%1], %2
    43 0000155F 0F85EC080000        <1>  jne L_error_incorrect_type
  1686 00001565 4C8B4D28                        mov r9, PARAM(1)
  1687                                          assert_rational(r9)
    42 00001569 41803911            <1>  cmp byte [%1], %2
    43 0000156D 0F85DE080000        <1>  jne L_error_incorrect_type
  1688 00001573 4983790100                      cmp qword [r9 + 1], 0
  1689 00001578 0F8404090000                    je L_error_division_by_zero
  1690 0000157E 498B4001                        mov rax, qword [r8 + 1] ; num1
  1691 00001582 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1692 00001586 4899                            cqo
  1693 00001588 48F7EB                          imul rbx
  1694 0000158B 4889C6                          mov rsi, rax
  1695 0000158E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1696 00001592 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1697 00001596 4899                            cqo
  1698 00001598 48F7EB                          imul rbx
  1699 0000159B 4889C7                          mov rdi, rax
  1700 0000159E E804000000                      call normalize_rational
  1701                                          LEAVE
    38 000015A3 C9                  <1>  leave
  1702 000015A4 C22000                          ret AND_KILL_FRAME(2)
  1703                                          
  1704                                  normalize_rational:
  1705 000015A7 56                              push rsi
  1706 000015A8 57                              push rdi
  1707 000015A9 E839000000                      call gcd
  1708 000015AE 4889C3                          mov rbx, rax
  1709 000015B1 58                              pop rax
  1710 000015B2 4899                            cqo
  1711 000015B4 48F7FB                          idiv rbx
  1712 000015B7 4989C0                          mov r8, rax
  1713 000015BA 58                              pop rax
  1714 000015BB 4899                            cqo
  1715 000015BD 48F7FB                          idiv rbx
  1716 000015C0 4989C1                          mov r9, rax
  1717 000015C3 BF11000000                      mov rdi, (1 + 8 + 8)
  1718 000015C8 E8BBF0FFFF                      call malloc
  1719 000015CD C60011                          mov byte [rax], T_rational
  1720 000015D0 4C894801                        mov qword [rax + 1], r9
  1721 000015D4 4C894009                        mov qword [rax + 1 + 8], r8
  1722 000015D8 C3                              ret
  1723                                  
  1724                                  iabs:
  1725 000015D9 4889F8                          mov rax, rdi
  1726 000015DC 4883F800                        cmp rax, 0
  1727 000015E0 7C01                            jl .Lneg
  1728 000015E2 C3                              ret
  1729                                  .Lneg:
  1730 000015E3 48F7D8                          neg rax
  1731 000015E6 C3                              ret
  1732                                  
  1733                                  gcd:
  1734 000015E7 E8EDFFFFFF                      call iabs
  1735 000015EC 4889C3                          mov rbx, rax
  1736 000015EF 4889F7                          mov rdi, rsi
  1737 000015F2 E8E2FFFFFF                      call iabs
  1738 000015F7 4883F800                        cmp rax, 0
  1739 000015FB 7502                            jne .L0
  1740 000015FD 4893                            xchg rax, rbx
  1741                                  .L0:
  1742 000015FF 4883FB00                        cmp rbx, 0
  1743 00001603 740C                            je .L1
  1744 00001605 4899                            cqo
  1745 00001607 48F7F3                          div rbx
  1746 0000160A 4889D0                          mov rax, rdx
  1747 0000160D 4893                            xchg rax, rbx
  1748 0000160F EBEE                            jmp .L0
  1749                                  .L1:
  1750 00001611 C3                              ret
  1751                                  
  1752                                  L_code_ptr_error:
  1753                                          ENTER
    33 00001612 C8000000            <1>  enter 0, 0
    34 00001616 4883E4F0            <1>  and rsp, ~15
  1754 0000161A 48837D1802                      cmp COUNT, 2
  1755 0000161F 0F858D070000                    jne L_error_arg_count_2
  1756 00001625 488B7520                        mov rsi, PARAM(0)
  1757                                          assert_symbol(rsi)
    42 00001629 803E04              <1>  cmp byte [%1], %2
    43 0000162C 0F851F080000        <1>  jne L_error_incorrect_type
  1758 00001632 488B7528                        mov rsi, PARAM(1)
  1759                                          assert_string(rsi)
    42 00001636 803E03              <1>  cmp byte [%1], %2
    43 00001639 0F8512080000        <1>  jne L_error_incorrect_type
  1760 0000163F 48BF-                           mov rdi, fmt_scheme_error_part_1
  1760 00001641 [6F03000000000000] 
  1761 00001649 B800000000                      mov rax, 0
  1762                                  	ENTER
    33 0000164E C8000000            <1>  enter 0, 0
    34 00001652 4883E4F0            <1>  and rsp, ~15
  1763 00001656 E8(00000000)                    call printf
  1764                                  	LEAVE
    38 0000165B C9                  <1>  leave
  1765 0000165C 488B7D20                        mov rdi, PARAM(0)
  1766 00001660 E83EF0FFFF                      call print_sexpr
  1767 00001665 48BF-                           mov rdi, fmt_scheme_error_part_2
  1767 00001667 [8303000000000000] 
  1768 0000166F B800000000                      mov rax, 0
  1769                                  	ENTER
    33 00001674 C8000000            <1>  enter 0, 0
    34 00001678 4883E4F0            <1>  and rsp, ~15
  1770 0000167C E8(00000000)                    call printf
  1771                                  	LEAVE
    38 00001681 C9                  <1>  leave
  1772 00001682 488B4528                        mov rax, PARAM(1)       ; sob_string
  1773 00001686 BE01000000                      mov rsi, 1              ; size = 1 byte
  1774 0000168B 488B5001                        mov rdx, qword [rax + 1] ; length
  1775 0000168F 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1776 00001693 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1777 0000169B E8(00000000)                    call fwrite
  1778 000016A0 48BF-                           mov rdi, fmt_scheme_error_part_3
  1778 000016A2 [C503000000000000] 
  1779 000016AA B800000000                      mov rax, 0
  1780                                  	ENTER
    33 000016AF C8000000            <1>  enter 0, 0
    34 000016B3 4883E4F0            <1>  and rsp, ~15
  1781 000016B7 E8(00000000)                    call printf
  1782                                  	LEAVE
    38 000016BC C9                  <1>  leave
  1783 000016BD 48C7C0F7FFFFFF                  mov rax, -9
  1784 000016C4 E8(00000000)                    call exit
  1785                                  
  1786                                  L_code_ptr_raw_less_than_rr:
  1787                                          ENTER
    33 000016C9 C8000000            <1>  enter 0, 0
    34 000016CD 4883E4F0            <1>  and rsp, ~15
  1788 000016D1 48837D1802                      cmp COUNT, 2
  1789 000016D6 0F85D6060000                    jne L_error_arg_count_2
  1790 000016DC 488B7520                        mov rsi, PARAM(0)
  1791                                          assert_real(rsi)
    42 000016E0 803E12              <1>  cmp byte [%1], %2
    43 000016E3 0F8568070000        <1>  jne L_error_incorrect_type
  1792 000016E9 488B7D28                        mov rdi, PARAM(1)
  1793                                          assert_real(rdi)
    42 000016ED 803F12              <1>  cmp byte [%1], %2
    43 000016F0 0F855B070000        <1>  jne L_error_incorrect_type
  1794 000016F6 F20F104601                      movsd xmm0, qword [rsi + 1]
  1795 000016FB F20F104F01                      movsd xmm1, qword [rdi + 1]
  1796 00001700 660F2FC1                        comisd xmm0, xmm1
  1797 00001704 730C                            jae .L_false
  1798 00001706 48B8-                           mov rax, sob_boolean_true
  1798 00001708 [0300000000000000] 
  1799 00001710 EB0A                            jmp .L_exit
  1800                                  .L_false:
  1801 00001712 48B8-                           mov rax, sob_boolean_false
  1801 00001714 [0200000000000000] 
  1802                                  .L_exit:
  1803                                          LEAVE
    38 0000171C C9                  <1>  leave
  1804 0000171D C22000                          ret AND_KILL_FRAME(2)
  1805                                          
  1806                                  L_code_ptr_raw_less_than_qq:
  1807                                          ENTER
    33 00001720 C8000000            <1>  enter 0, 0
    34 00001724 4883E4F0            <1>  and rsp, ~15
  1808 00001728 48837D1802                      cmp COUNT, 2
  1809 0000172D 0F857F060000                    jne L_error_arg_count_2
  1810 00001733 488B7520                        mov rsi, PARAM(0)
  1811                                          assert_rational(rsi)
    42 00001737 803E11              <1>  cmp byte [%1], %2
    43 0000173A 0F8511070000        <1>  jne L_error_incorrect_type
  1812 00001740 488B7D28                        mov rdi, PARAM(1)
  1813                                          assert_rational(rdi)
    42 00001744 803F11              <1>  cmp byte [%1], %2
    43 00001747 0F8504070000        <1>  jne L_error_incorrect_type
  1814 0000174D 488B4601                        mov rax, qword [rsi + 1] ; num1
  1815 00001751 4899                            cqo
  1816 00001753 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1817 00001757 4889C1                          mov rcx, rax
  1818 0000175A 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1819 0000175E 4899                            cqo
  1820 00001760 48F76F01                        imul qword [rdi + 1]          ; num2
  1821 00001764 4829C1                          sub rcx, rax
  1822 00001767 7D0C                            jge .L_false
  1823 00001769 48B8-                           mov rax, sob_boolean_true
  1823 0000176B [0300000000000000] 
  1824 00001773 EB0A                            jmp .L_exit
  1825                                  .L_false:
  1826 00001775 48B8-                           mov rax, sob_boolean_false
  1826 00001777 [0200000000000000] 
  1827                                  .L_exit:
  1828                                          LEAVE
    38 0000177F C9                  <1>  leave
  1829 00001780 C22000                          ret AND_KILL_FRAME(2)
  1830                                  
  1831                                  L_code_ptr_raw_equal_rr:
  1832                                          ENTER
    33 00001783 C8000000            <1>  enter 0, 0
    34 00001787 4883E4F0            <1>  and rsp, ~15
  1833 0000178B 48837D1802                      cmp COUNT, 2
  1834 00001790 0F851C060000                    jne L_error_arg_count_2
  1835 00001796 488B7520                        mov rsi, PARAM(0)
  1836                                          assert_real(rsi)
    42 0000179A 803E12              <1>  cmp byte [%1], %2
    43 0000179D 0F85AE060000        <1>  jne L_error_incorrect_type
  1837 000017A3 488B7D28                        mov rdi, PARAM(1)
  1838                                          assert_real(rdi)
    42 000017A7 803F12              <1>  cmp byte [%1], %2
    43 000017AA 0F85A1060000        <1>  jne L_error_incorrect_type
  1839 000017B0 F20F104601                      movsd xmm0, qword [rsi + 1]
  1840 000017B5 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1841 000017BA 660F2FC1                        comisd xmm0, xmm1
  1842 000017BE 750C                            jne .L_false
  1843 000017C0 48B8-                           mov rax, sob_boolean_true
  1843 000017C2 [0300000000000000] 
  1844 000017CA EB0A                            jmp .L_exit
  1845                                  .L_false:
  1846 000017CC 48B8-                           mov rax, sob_boolean_false
  1846 000017CE [0200000000000000] 
  1847                                  .L_exit:
  1848                                          LEAVE
    38 000017D6 C9                  <1>  leave
  1849 000017D7 C22000                          ret AND_KILL_FRAME(2)
  1850                                          
  1851                                  L_code_ptr_raw_equal_qq:
  1852                                          ENTER
    33 000017DA C8000000            <1>  enter 0, 0
    34 000017DE 4883E4F0            <1>  and rsp, ~15
  1853 000017E2 48837D1802                      cmp COUNT, 2
  1854 000017E7 0F85C5050000                    jne L_error_arg_count_2
  1855 000017ED 488B7520                        mov rsi, PARAM(0)
  1856                                          assert_rational(rsi)
    42 000017F1 803E11              <1>  cmp byte [%1], %2
    43 000017F4 0F8557060000        <1>  jne L_error_incorrect_type
  1857 000017FA 488B7D28                        mov rdi, PARAM(1)
  1858                                          assert_rational(rdi)
    42 000017FE 803F11              <1>  cmp byte [%1], %2
    43 00001801 0F854A060000        <1>  jne L_error_incorrect_type
  1859 00001807 488B4601                        mov rax, qword [rsi + 1] ; num1
  1860 0000180B 4899                            cqo
  1861 0000180D 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1862 00001811 4889C1                          mov rcx, rax
  1863 00001814 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1864 00001818 4899                            cqo
  1865 0000181A 48F76F01                        imul qword [rdi + 1]          ; num2
  1866 0000181E 4829C1                          sub rcx, rax
  1867 00001821 750C                            jne .L_false
  1868 00001823 48B8-                           mov rax, sob_boolean_true
  1868 00001825 [0300000000000000] 
  1869 0000182D EB0A                            jmp .L_exit
  1870                                  .L_false:
  1871 0000182F 48B8-                           mov rax, sob_boolean_false
  1871 00001831 [0200000000000000] 
  1872                                  .L_exit:
  1873                                          LEAVE
    38 00001839 C9                  <1>  leave
  1874 0000183A C22000                          ret AND_KILL_FRAME(2)
  1875                                  
  1876                                  L_code_ptr_quotient:
  1877                                          ENTER
    33 0000183D C8000000            <1>  enter 0, 0
    34 00001841 4883E4F0            <1>  and rsp, ~15
  1878 00001845 48837D1802                      cmp COUNT, 2
  1879 0000184A 0F8562050000                    jne L_error_arg_count_2
  1880 00001850 488B7520                        mov rsi, PARAM(0)
  1881                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001854 803E11              <2>  cmp byte [%1], %2
    43 00001857 0F85F4050000        <2>  jne L_error_incorrect_type
    48 0000185D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001862 0F85E9050000        <1>  jne L_error_incorrect_type
  1882 00001868 488B7D28                        mov rdi, PARAM(1)
  1883                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000186C 803F11              <2>  cmp byte [%1], %2
    43 0000186F 0F85DC050000        <2>  jne L_error_incorrect_type
    48 00001875 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000187A 0F85D1050000        <1>  jne L_error_incorrect_type
  1884 00001880 488B4601                        mov rax, qword [rsi + 1]
  1885 00001884 488B5F01                        mov rbx, qword [rdi + 1]
  1886 00001888 4883FB00                        cmp rbx, 0
  1887 0000188C 0F84F0050000                    je L_error_division_by_zero
  1888 00001892 4899                            cqo
  1889 00001894 48F7FB                          idiv rbx
  1890 00001897 4889C7                          mov rdi, rax
  1891 0000189A E852040000                      call make_integer
  1892                                          LEAVE
    38 0000189F C9                  <1>  leave
  1893 000018A0 C22000                          ret AND_KILL_FRAME(2)
  1894                                          
  1895                                  L_code_ptr_remainder:
  1896                                          ENTER
    33 000018A3 C8000000            <1>  enter 0, 0
    34 000018A7 4883E4F0            <1>  and rsp, ~15
  1897 000018AB 48837D1802                      cmp COUNT, 2
  1898 000018B0 0F85FC040000                    jne L_error_arg_count_2
  1899 000018B6 488B7520                        mov rsi, PARAM(0)
  1900                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018BA 803E11              <2>  cmp byte [%1], %2
    43 000018BD 0F858E050000        <2>  jne L_error_incorrect_type
    48 000018C3 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018C8 0F8583050000        <1>  jne L_error_incorrect_type
  1901 000018CE 488B7D28                        mov rdi, PARAM(1)
  1902                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000018D2 803F11              <2>  cmp byte [%1], %2
    43 000018D5 0F8576050000        <2>  jne L_error_incorrect_type
    48 000018DB 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018E0 0F856B050000        <1>  jne L_error_incorrect_type
  1903 000018E6 488B4601                        mov rax, qword [rsi + 1]
  1904 000018EA 488B5F01                        mov rbx, qword [rdi + 1]
  1905 000018EE 4883FB00                        cmp rbx, 0
  1906 000018F2 0F848A050000                    je L_error_division_by_zero
  1907 000018F8 4899                            cqo
  1908 000018FA 48F7FB                          idiv rbx
  1909 000018FD 4889D7                          mov rdi, rdx
  1910 00001900 E8EC030000                      call make_integer
  1911                                          LEAVE
    38 00001905 C9                  <1>  leave
  1912 00001906 C22000                          ret AND_KILL_FRAME(2)
  1913                                  
  1914                                  L_code_ptr_set_car:
  1915                                          ENTER
    33 00001909 C8000000            <1>  enter 0, 0
    34 0000190D 4883E4F0            <1>  and rsp, ~15
  1916 00001911 48837D1802                      cmp COUNT, 2
  1917 00001916 0F8596040000                    jne L_error_arg_count_2
  1918 0000191C 488B4520                        mov rax, PARAM(0)
  1919                                          assert_pair(rax)
    42 00001920 803821              <1>  cmp byte [%1], %2
    43 00001923 0F8528050000        <1>  jne L_error_incorrect_type
  1920 00001929 488B5D28                        mov rbx, PARAM(1)
  1921 0000192D 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1922 00001931 48B8-                           mov rax, sob_void
  1922 00001933 [0000000000000000] 
  1923                                          LEAVE
    38 0000193B C9                  <1>  leave
  1924 0000193C C22000                          ret AND_KILL_FRAME(2)
  1925                                  
  1926                                  L_code_ptr_set_cdr:
  1927                                          ENTER
    33 0000193F C8000000            <1>  enter 0, 0
    34 00001943 4883E4F0            <1>  and rsp, ~15
  1928 00001947 48837D1802                      cmp COUNT, 2
  1929 0000194C 0F8560040000                    jne L_error_arg_count_2
  1930 00001952 488B4520                        mov rax, PARAM(0)
  1931                                          assert_pair(rax)
    42 00001956 803821              <1>  cmp byte [%1], %2
    43 00001959 0F85F2040000        <1>  jne L_error_incorrect_type
  1932 0000195F 488B5D28                        mov rbx, PARAM(1)
  1933 00001963 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1934 00001967 48B8-                           mov rax, sob_void
  1934 00001969 [0000000000000000] 
  1935                                          LEAVE
    38 00001971 C9                  <1>  leave
  1936 00001972 C22000                          ret AND_KILL_FRAME(2)
  1937                                  
  1938                                  L_code_ptr_string_ref:
  1939                                          ENTER
    33 00001975 C8000000            <1>  enter 0, 0
    34 00001979 4883E4F0            <1>  and rsp, ~15
  1940 0000197D 48837D1802                      cmp COUNT, 2
  1941 00001982 0F852A040000                    jne L_error_arg_count_2
  1942 00001988 488B7D20                        mov rdi, PARAM(0)
  1943                                          assert_string(rdi)
    42 0000198C 803F03              <1>  cmp byte [%1], %2
    43 0000198F 0F85BC040000        <1>  jne L_error_incorrect_type
  1944 00001995 488B7528                        mov rsi, PARAM(1)
  1945                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001999 803E11              <2>  cmp byte [%1], %2
    43 0000199C 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000019A2 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019A7 0F85A4040000        <1>  jne L_error_incorrect_type
  1946 000019AD 488B5701                        mov rdx, qword [rdi + 1]
  1947 000019B1 488B4E01                        mov rcx, qword [rsi + 1]
  1948 000019B5 4839D1                          cmp rcx, rdx
  1949 000019B8 0F8D59030000                    jge L_error_integer_range
  1950 000019BE 4883F900                        cmp rcx, 0
  1951 000019C2 0F8C4F030000                    jl L_error_integer_range
  1952 000019C8 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1953 000019CC BF02000000                      mov rdi, 2
  1954 000019D1 E8B2ECFFFF                      call malloc
  1955 000019D6 C60002                          mov byte [rax], T_char
  1956 000019D9 885801                          mov byte [rax + 1], bl
  1957                                          LEAVE
    38 000019DC C9                  <1>  leave
  1958 000019DD C22000                          ret AND_KILL_FRAME(2)
  1959                                  
  1960                                  L_code_ptr_vector_ref:
  1961                                          ENTER
    33 000019E0 C8000000            <1>  enter 0, 0
    34 000019E4 4883E4F0            <1>  and rsp, ~15
  1962 000019E8 48837D1802                      cmp COUNT, 2
  1963 000019ED 0F85BF030000                    jne L_error_arg_count_2
  1964 000019F3 488B7D20                        mov rdi, PARAM(0)
  1965                                          assert_vector(rdi)
    42 000019F7 803F22              <1>  cmp byte [%1], %2
    43 000019FA 0F8551040000        <1>  jne L_error_incorrect_type
  1966 00001A00 488B7528                        mov rsi, PARAM(1)
  1967                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A04 803E11              <2>  cmp byte [%1], %2
    43 00001A07 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001A0D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A12 0F8539040000        <1>  jne L_error_incorrect_type
  1968 00001A18 488B5701                        mov rdx, qword [rdi + 1]
  1969 00001A1C 488B4E01                        mov rcx, qword [rsi + 1]
  1970 00001A20 4839D1                          cmp rcx, rdx
  1971 00001A23 0F8DEE020000                    jge L_error_integer_range
  1972 00001A29 4883F900                        cmp rcx, 0
  1973 00001A2D 0F8CE4020000                    jl L_error_integer_range
  1974 00001A33 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1975                                          LEAVE
    38 00001A38 C9                  <1>  leave
  1976 00001A39 C22000                          ret AND_KILL_FRAME(2)
  1977                                  
  1978                                  L_code_ptr_vector_set:
  1979                                          ENTER
    33 00001A3C C8000000            <1>  enter 0, 0
    34 00001A40 4883E4F0            <1>  and rsp, ~15
  1980 00001A44 48837D1803                      cmp COUNT, 3
  1981 00001A49 0F85CD030000                    jne L_error_arg_count_3
  1982 00001A4F 488B7D20                        mov rdi, PARAM(0)
  1983                                          assert_vector(rdi)
    42 00001A53 803F22              <1>  cmp byte [%1], %2
    43 00001A56 0F85F5030000        <1>  jne L_error_incorrect_type
  1984 00001A5C 488B7528                        mov rsi, PARAM(1)
  1985                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A60 803E11              <2>  cmp byte [%1], %2
    43 00001A63 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001A69 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A6E 0F85DD030000        <1>  jne L_error_incorrect_type
  1986 00001A74 488B5701                        mov rdx, qword [rdi + 1]
  1987 00001A78 488B4E01                        mov rcx, qword [rsi + 1]
  1988 00001A7C 4839D1                          cmp rcx, rdx
  1989 00001A7F 0F8D92020000                    jge L_error_integer_range
  1990 00001A85 4883F900                        cmp rcx, 0
  1991 00001A89 0F8C88020000                    jl L_error_integer_range
  1992 00001A8F 488B4530                        mov rax, PARAM(2)
  1993 00001A93 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1994 00001A98 48B8-                           mov rax, sob_void
  1994 00001A9A [0000000000000000] 
  1995                                          LEAVE
    38 00001AA2 C9                  <1>  leave
  1996 00001AA3 C22800                          ret AND_KILL_FRAME(3)
  1997                                  
  1998                                  L_code_ptr_string_set:
  1999                                          ENTER
    33 00001AA6 C8000000            <1>  enter 0, 0
    34 00001AAA 4883E4F0            <1>  and rsp, ~15
  2000 00001AAE 48837D1803                      cmp COUNT, 3
  2001 00001AB3 0F8563030000                    jne L_error_arg_count_3
  2002 00001AB9 488B7D20                        mov rdi, PARAM(0)
  2003                                          assert_string(rdi)
    42 00001ABD 803F03              <1>  cmp byte [%1], %2
    43 00001AC0 0F858B030000        <1>  jne L_error_incorrect_type
  2004 00001AC6 488B7528                        mov rsi, PARAM(1)
  2005                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001ACA 803E11              <2>  cmp byte [%1], %2
    43 00001ACD 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001AD3 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001AD8 0F8573030000        <1>  jne L_error_incorrect_type
  2006 00001ADE 488B5701                        mov rdx, qword [rdi + 1]
  2007 00001AE2 488B4E01                        mov rcx, qword [rsi + 1]
  2008 00001AE6 4839D1                          cmp rcx, rdx
  2009 00001AE9 0F8D28020000                    jge L_error_integer_range
  2010 00001AEF 4883F900                        cmp rcx, 0
  2011 00001AF3 0F8C1E020000                    jl L_error_integer_range
  2012 00001AF9 488B4530                        mov rax, PARAM(2)
  2013                                          assert_char(rax)
    42 00001AFD 803802              <1>  cmp byte [%1], %2
    43 00001B00 0F854B030000        <1>  jne L_error_incorrect_type
  2014 00001B06 8A4001                          mov al, byte [rax + 1]
  2015 00001B09 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2016 00001B0D 48B8-                           mov rax, sob_void
  2016 00001B0F [0000000000000000] 
  2017                                          LEAVE
    38 00001B17 C9                  <1>  leave
  2018 00001B18 C22800                          ret AND_KILL_FRAME(3)
  2019                                  
  2020                                  L_code_ptr_make_vector:
  2021                                          ENTER
    33 00001B1B C8000000            <1>  enter 0, 0
    34 00001B1F 4883E4F0            <1>  and rsp, ~15
  2022 00001B23 48837D1802                      cmp COUNT, 2
  2023 00001B28 0F8584020000                    jne L_error_arg_count_2
  2024 00001B2E 488B4D20                        mov rcx, PARAM(0)
  2025                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B32 803911              <2>  cmp byte [%1], %2
    43 00001B35 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001B3B 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B40 0F850B030000        <1>  jne L_error_incorrect_type
  2026 00001B46 488B4901                        mov rcx, qword [rcx + 1]
  2027 00001B4A 4883F900                        cmp rcx, 0
  2028 00001B4E 0F8CC3010000                    jl L_error_integer_range
  2029 00001B54 488B5528                        mov rdx, PARAM(1)
  2030 00001B58 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2031 00001B60 E823EBFFFF                      call malloc
  2032 00001B65 C60022                          mov byte [rax], T_vector
  2033 00001B68 48894801                        mov qword [rax + 1], rcx
  2034 00001B6C 41B800000000                    mov r8, 0
  2035                                  .L0:
  2036 00001B72 4939C8                          cmp r8, rcx
  2037 00001B75 740A                            je .L1
  2038 00001B77 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2039 00001B7C 49FFC0                          inc r8
  2040 00001B7F EBF1                            jmp .L0
  2041                                  .L1:
  2042                                          LEAVE
    38 00001B81 C9                  <1>  leave
  2043 00001B82 C22000                          ret AND_KILL_FRAME(2)
  2044                                          
  2045                                  L_code_ptr_make_string:
  2046                                          ENTER
    33 00001B85 C8000000            <1>  enter 0, 0
    34 00001B89 4883E4F0            <1>  and rsp, ~15
  2047 00001B8D 48837D1802                      cmp COUNT, 2
  2048 00001B92 0F851A020000                    jne L_error_arg_count_2
  2049 00001B98 488B4D20                        mov rcx, PARAM(0)
  2050                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B9C 803911              <2>  cmp byte [%1], %2
    43 00001B9F 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001BA5 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BAA 0F85A1020000        <1>  jne L_error_incorrect_type
  2051 00001BB0 488B4901                        mov rcx, qword [rcx + 1]
  2052 00001BB4 4883F900                        cmp rcx, 0
  2053 00001BB8 0F8C59010000                    jl L_error_integer_range
  2054 00001BBE 488B5528                        mov rdx, PARAM(1)
  2055                                          assert_char(rdx)
    42 00001BC2 803A02              <1>  cmp byte [%1], %2
    43 00001BC5 0F8586020000        <1>  jne L_error_incorrect_type
  2056 00001BCB 8A5201                          mov dl, byte [rdx + 1]
  2057 00001BCE 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2058 00001BD2 E8B1EAFFFF                      call malloc
  2059 00001BD7 C60003                          mov byte [rax], T_string
  2060 00001BDA 48894801                        mov qword [rax + 1], rcx
  2061 00001BDE 41B800000000                    mov r8, 0
  2062                                  .L0:
  2063 00001BE4 4939C8                          cmp r8, rcx
  2064 00001BE7 740A                            je .L1
  2065 00001BE9 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2066 00001BEE 49FFC0                          inc r8
  2067 00001BF1 EBF1                            jmp .L0
  2068                                  .L1:
  2069                                          LEAVE
    38 00001BF3 C9                  <1>  leave
  2070 00001BF4 C22000                          ret AND_KILL_FRAME(2)
  2071                                  
  2072                                  L_code_ptr_numerator:
  2073                                          ENTER
    33 00001BF7 C8000000            <1>  enter 0, 0
    34 00001BFB 4883E4F0            <1>  and rsp, ~15
  2074 00001BFF 48837D1801                      cmp COUNT, 1
  2075 00001C04 0F8573010000                    jne L_error_arg_count_1
  2076 00001C0A 488B4520                        mov rax, PARAM(0)
  2077                                          assert_rational(rax)
    42 00001C0E 803811              <1>  cmp byte [%1], %2
    43 00001C11 0F853A020000        <1>  jne L_error_incorrect_type
  2078 00001C17 488B7801                        mov rdi, qword [rax + 1]
  2079 00001C1B E8D1000000                      call make_integer
  2080                                          LEAVE
    38 00001C20 C9                  <1>  leave
  2081 00001C21 C21800                          ret AND_KILL_FRAME(1)
  2082                                          
  2083                                  L_code_ptr_denominator:
  2084                                          ENTER
    33 00001C24 C8000000            <1>  enter 0, 0
    34 00001C28 4883E4F0            <1>  and rsp, ~15
  2085 00001C2C 48837D1801                      cmp COUNT, 1
  2086 00001C31 0F8546010000                    jne L_error_arg_count_1
  2087 00001C37 488B4520                        mov rax, PARAM(0)
  2088                                          assert_rational(rax)
    42 00001C3B 803811              <1>  cmp byte [%1], %2
    43 00001C3E 0F850D020000        <1>  jne L_error_incorrect_type
  2089 00001C44 488B7809                        mov rdi, qword [rax + 1 + 8]
  2090 00001C48 E8A4000000                      call make_integer
  2091                                          LEAVE
    38 00001C4D C9                  <1>  leave
  2092 00001C4E C21800                          ret AND_KILL_FRAME(1)
  2093                                  
  2094                                  L_code_ptr_eq:
  2095                                  	ENTER
    33 00001C51 C8000000            <1>  enter 0, 0
    34 00001C55 4883E4F0            <1>  and rsp, ~15
  2096 00001C59 48837D1802              	cmp COUNT, 2
  2097 00001C5E 0F854E010000            	jne L_error_arg_count_2
  2098 00001C64 488B7D20                	mov rdi, PARAM(0)
  2099 00001C68 488B7528                	mov rsi, PARAM(1)
  2100 00001C6C 4839F7                  	cmp rdi, rsi
  2101 00001C6F 744A                    	je .L_eq_true
  2102 00001C71 8A17                    	mov dl, byte [rdi]
  2103 00001C73 3A16                    	cmp dl, byte [rsi]
  2104 00001C75 7550                    	jne .L_eq_false
  2105 00001C77 80FA02                  	cmp dl, T_char
  2106 00001C7A 7437                    	je .L_char
  2107 00001C7C 80FA04                  	cmp dl, T_symbol
  2108 00001C7F 742A                    	je .L_symbol
  2109 00001C81 80FA12                  	cmp dl, T_real
  2110 00001C84 741D                    	je .L_real
  2111 00001C86 80FA11                  	cmp dl, T_rational
  2112 00001C89 7402                    	je .L_rational
  2113 00001C8B EB3A                    	jmp .L_eq_false
  2114                                  .L_rational:
  2115 00001C8D 488B4601                	mov rax, qword [rsi + 1]
  2116 00001C91 483B4701                	cmp rax, qword [rdi + 1]
  2117 00001C95 7530                    	jne .L_eq_false
  2118 00001C97 488B4609                	mov rax, qword [rsi + 1 + 8]
  2119 00001C9B 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2120 00001C9F 7526                    	jne .L_eq_false
  2121 00001CA1 EB18                    	jmp .L_eq_true
  2122                                  .L_real:
  2123 00001CA3 488B4601                	mov rax, qword [rsi + 1]
  2124 00001CA7 483B4701                	cmp rax, qword [rdi + 1]
  2125                                  .L_symbol:
  2126                                  	; never reached, because symbols are static!
  2127                                  	; but I'm keeping it in case, I'll ever change
  2128                                  	; the implementation
  2129 00001CAB 488B4601                	mov rax, qword [rsi + 1]
  2130 00001CAF 483B4701                	cmp rax, qword [rdi + 1]
  2131                                  .L_char:
  2132 00001CB3 8A5E01                  	mov bl, byte [rsi + 1]
  2133 00001CB6 3A5F01                  	cmp bl, byte [rdi + 1]
  2134 00001CB9 750C                    	jne .L_eq_false
  2135                                  .L_eq_true:
  2136 00001CBB 48B8-                   	mov rax, sob_boolean_true
  2136 00001CBD [0300000000000000] 
  2137 00001CC5 EB0A                    	jmp .L_eq_exit
  2138                                  .L_eq_false:
  2139 00001CC7 48B8-                   	mov rax, sob_boolean_false
  2139 00001CC9 [0200000000000000] 
  2140                                  .L_eq_exit:
  2141                                  	LEAVE
    38 00001CD1 C9                  <1>  leave
  2142 00001CD2 C22000                  	ret AND_KILL_FRAME(2)
  2143                                  
  2144                                  make_real:
  2145                                          ENTER
    33 00001CD5 C8000000            <1>  enter 0, 0
    34 00001CD9 4883E4F0            <1>  and rsp, ~15
  2146 00001CDD BF09000000                      mov rdi, (1 + 8)
  2147 00001CE2 E8A1E9FFFF                      call malloc
  2148 00001CE7 C60012                          mov byte [rax], T_real
  2149 00001CEA F20F114001                      movsd qword [rax + 1], xmm0
  2150                                          LEAVE
    38 00001CEF C9                  <1>  leave
  2151 00001CF0 C3                              ret
  2152                                          
  2153                                  make_integer:
  2154                                          ENTER
    33 00001CF1 C8000000            <1>  enter 0, 0
    34 00001CF5 4883E4F0            <1>  and rsp, ~15
  2155 00001CF9 4889FE                          mov rsi, rdi
  2156 00001CFC BF11000000                      mov rdi, (1 + 8 + 8)
  2157 00001D01 E882E9FFFF                      call malloc
  2158 00001D06 C60011                          mov byte [rax], T_rational
  2159 00001D09 48897001                        mov qword [rax + 1], rsi
  2160 00001D0D 48C7400901000000                mov qword [rax + 1 + 8], 1
  2161                                          LEAVE
    38 00001D15 C9                  <1>  leave
  2162 00001D16 C3                              ret
  2163                                          
  2164                                  L_error_integer_range:
  2165 00001D17 488B3C25[00000000]              mov rdi, qword [stderr]
  2166 00001D1F 48BE-                           mov rsi, fmt_integer_range
  2166 00001D21 [3C03000000000000] 
  2167 00001D29 B800000000                      mov rax, 0
  2168                                  	ENTER
    33 00001D2E C8000000            <1>  enter 0, 0
    34 00001D32 4883E4F0            <1>  and rsp, ~15
  2169 00001D36 E8(00000000)                    call fprintf
  2170                                  	LEAVE
    38 00001D3B C9                  <1>  leave
  2171 00001D3C 48C7C0FBFFFFFF                  mov rax, -5
  2172 00001D43 E8(00000000)                    call exit
  2173                                  
  2174                                  L_error_arg_count_0:
  2175 00001D48 488B3C25[00000000]              mov rdi, qword [stderr]
  2176 00001D50 48BE-                           mov rsi, fmt_arg_count_0
  2176 00001D52 [3A02000000000000] 
  2177 00001D5A 488B5518                        mov rdx, COUNT
  2178 00001D5E B800000000                      mov rax, 0
  2179                                  	ENTER
    33 00001D63 C8000000            <1>  enter 0, 0
    34 00001D67 4883E4F0            <1>  and rsp, ~15
  2180 00001D6B E8(00000000)                    call fprintf
  2181                                  	LEAVE
    38 00001D70 C9                  <1>  leave
  2182 00001D71 48C7C0FDFFFFFF                  mov rax, -3
  2183 00001D78 E8(00000000)                    call exit
  2184                                  
  2185                                  L_error_arg_count_1:
  2186 00001D7D 488B3C25[00000000]              mov rdi, qword [stderr]
  2187 00001D85 48BE-                           mov rsi, fmt_arg_count_1
  2187 00001D87 [6202000000000000] 
  2188 00001D8F 488B5518                        mov rdx, COUNT
  2189 00001D93 B800000000                      mov rax, 0
  2190                                  	ENTER
    33 00001D98 C8000000            <1>  enter 0, 0
    34 00001D9C 4883E4F0            <1>  and rsp, ~15
  2191 00001DA0 E8(00000000)                    call fprintf
  2192                                  	LEAVE
    38 00001DA5 C9                  <1>  leave
  2193 00001DA6 48C7C0FDFFFFFF                  mov rax, -3
  2194 00001DAD E8(00000000)                    call exit
  2195                                  
  2196                                  L_error_arg_count_2:
  2197 00001DB2 488B3C25[00000000]              mov rdi, qword [stderr]
  2198 00001DBA 48BE-                           mov rsi, fmt_arg_count_2
  2198 00001DBC [C802000000000000] 
  2199 00001DC4 488B5518                        mov rdx, COUNT
  2200 00001DC8 B800000000                      mov rax, 0
  2201                                  	ENTER
    33 00001DCD C8000000            <1>  enter 0, 0
    34 00001DD1 4883E4F0            <1>  and rsp, ~15
  2202 00001DD5 E8(00000000)                    call fprintf
  2203                                  	LEAVE
    38 00001DDA C9                  <1>  leave
  2204 00001DDB 48C7C0FDFFFFFF                  mov rax, -3
  2205 00001DE2 E8(00000000)                    call exit
  2206                                  
  2207                                  L_error_arg_count_12:
  2208 00001DE7 488B3C25[00000000]              mov rdi, qword [stderr]
  2209 00001DEF 48BE-                           mov rsi, fmt_arg_count_12
  2209 00001DF1 [8802000000000000] 
  2210 00001DF9 488B5518                        mov rdx, COUNT
  2211 00001DFD B800000000                      mov rax, 0
  2212                                  	ENTER
    33 00001E02 C8000000            <1>  enter 0, 0
    34 00001E06 4883E4F0            <1>  and rsp, ~15
  2213 00001E0A E8(00000000)                    call fprintf
  2214                                  	LEAVE
    38 00001E0F C9                  <1>  leave
  2215 00001E10 48C7C0FDFFFFFF                  mov rax, -3
  2216 00001E17 E8(00000000)                    call exit
  2217                                  
  2218                                  L_error_arg_count_3:
  2219 00001E1C 488B3C25[00000000]              mov rdi, qword [stderr]
  2220 00001E24 48BE-                           mov rsi, fmt_arg_count_3
  2220 00001E26 [EF02000000000000] 
  2221 00001E2E 488B5518                        mov rdx, COUNT
  2222 00001E32 B800000000                      mov rax, 0
  2223                                  	ENTER
    33 00001E37 C8000000            <1>  enter 0, 0
    34 00001E3B 4883E4F0            <1>  and rsp, ~15
  2224 00001E3F E8(00000000)                    call fprintf
  2225                                  	LEAVE
    38 00001E44 C9                  <1>  leave
  2226 00001E45 48C7C0FDFFFFFF                  mov rax, -3
  2227 00001E4C E8(00000000)                    call exit
  2228                                          
  2229                                  L_error_incorrect_type:
  2230 00001E51 488B3C25[00000000]              mov rdi, qword [stderr]
  2231 00001E59 48BE-                           mov rsi, fmt_type
  2231 00001E5B [1803000000000000] 
  2232 00001E63 B800000000                      mov rax, 0
  2233                                  	ENTER
    33 00001E68 C8000000            <1>  enter 0, 0
    34 00001E6C 4883E4F0            <1>  and rsp, ~15
  2234 00001E70 E8(00000000)                    call fprintf
  2235                                  	LEAVE
    38 00001E75 C9                  <1>  leave
  2236 00001E76 48C7C0FCFFFFFF                  mov rax, -4
  2237 00001E7D E8(00000000)                    call exit
  2238                                  
  2239                                  L_error_division_by_zero:
  2240 00001E82 488B3C25[00000000]              mov rdi, qword [stderr]
  2241 00001E8A 48BE-                           mov rsi, fmt_division_by_zero
  2241 00001E8C [5903000000000000] 
  2242 00001E94 B800000000                      mov rax, 0
  2243                                  	ENTER
    33 00001E99 C8000000            <1>  enter 0, 0
    34 00001E9D 4883E4F0            <1>  and rsp, ~15
  2244 00001EA1 E8(00000000)                    call fprintf
  2245                                  	LEAVE
    38 00001EA6 C9                  <1>  leave
  2246 00001EA7 48C7C0F8FFFFFF                  mov rax, -8
  2247 00001EAE E8(00000000)                    call exit
  2248                                  
  2249                                  section .data
  2250                                  fmt_char:
  2251 00000237 256300                          db `%c\0`
  2252                                  fmt_arg_count_0:
  2253 0000023A 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2253 00000243 74696E67207A65726F-
  2253 0000024C 20617267756D656E74-
  2253 00000255 732E20466F756E6420-
  2253 0000025E 25640A00           
  2254                                  fmt_arg_count_1:
  2255 00000262 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2255 0000026B 74696E67206F6E6520-
  2255 00000274 617267756D656E742E-
  2255 0000027D 20466F756E64202564-
  2255 00000286 0A00               
  2256                                  fmt_arg_count_12:
  2257 00000288 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2257 00000291 74696E67206F6E6520-
  2257 0000029A 726571756972656420-
  2257 000002A3 616E64206F6E65206F-
  2257 000002AC 7074696F6E616C2061-
  2257 000002B5 7267756D656E742E20-
  2257 000002BE 466F756E642025640A-
  2257 000002C7 00                 
  2258                                  fmt_arg_count_2:
  2259 000002C8 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2259 000002D1 74696E672074776F20-
  2259 000002DA 617267756D656E7473-
  2259 000002E3 2E20466F756E642025-
  2259 000002EC 640A00             
  2260                                  fmt_arg_count_3:
  2261 000002EF 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2261 000002F8 74696E672074687265-
  2261 00000301 6520617267756D656E-
  2261 0000030A 74732E20466F756E64-
  2261 00000313 2025640A00         
  2262                                  fmt_type:
  2263 00000318 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2263 00000321 696F6E207061737365-
  2263 0000032A 6420696E636F727265-
  2263 00000333 637420747970650A00 
  2264                                  fmt_integer_range:
  2265 0000033C 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2265 00000345 7265637420696E7465-
  2265 0000034E 6765722072616E6765-
  2265 00000357 0A00               
  2266                                  fmt_division_by_zero:
  2267 00000359 212121204469766973-             db `!!! Division by zero\n\0`
  2267 00000362 696F6E206279207A65-
  2267 0000036B 726F0A00           
  2268                                  fmt_scheme_error_part_1:
  2269 0000036F 0A2121212054686520-             db `\n!!! The procedure \0`
  2269 00000378 70726F636564757265-
  2269 00000381 2000               
  2270                                  fmt_scheme_error_part_2:
  2271 00000383 2061736B656420746F-             db ` asked to terminate the program\n`
  2271 0000038C 207465726D696E6174-
  2271 00000395 65207468652070726F-
  2271 0000039E 6772616D0A         
  2272 000003A3 202020207769746820-             db `    with the following message:\n\n\0`
  2272 000003AC 74686520666F6C6C6F-
  2272 000003B5 77696E67206D657373-
  2272 000003BE 6167653A0A0A00     
  2273                                  fmt_scheme_error_part_3:
  2274 000003C5 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2274 000003CE 210A0A00           
