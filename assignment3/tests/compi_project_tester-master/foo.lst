     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 1
    84 00000007 010000000000000001-     	dq 1, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 2
    86 00000018 020000000000000001-     	dq 2, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 3
    88 00000029 030000000000000001-     	dq 3, 1
    88 00000032 00000000000000     
    89 00000039 21                      	db T_pair	; (3)
    90 0000003A [2800000000000000]-     	dq L_constants + 40, L_constants + 1
    90 00000042 [0100000000000000] 
    91 0000004A 21                      	db T_pair	; (2 3)
    92 0000004B [1700000000000000]-     	dq L_constants + 23, L_constants + 57
    92 00000053 [3900000000000000] 
    93 0000005B 21                      	db T_pair	; (1 2 3)
    94 0000005C [0600000000000000]-     	dq L_constants + 6, L_constants + 74
    94 00000064 [4A00000000000000] 
    95                                  
    96                                  section .bss
    97                                  free_var_0:	; location of null?
    98 00000000 ????????????????        	resq 1
    99                                  free_var_1:	; location of pair?
   100 00000008 ????????????????        	resq 1
   101                                  free_var_2:	; location of void?
   102 00000010 ????????????????        	resq 1
   103                                  free_var_3:	; location of char?
   104 00000018 ????????????????        	resq 1
   105                                  free_var_4:	; location of string?
   106 00000020 ????????????????        	resq 1
   107                                  free_var_5:	; location of symbol?
   108 00000028 ????????????????        	resq 1
   109                                  free_var_6:	; location of vector?
   110 00000030 ????????????????        	resq 1
   111                                  free_var_7:	; location of procedure?
   112 00000038 ????????????????        	resq 1
   113                                  free_var_8:	; location of real?
   114 00000040 ????????????????        	resq 1
   115                                  free_var_9:	; location of rational?
   116 00000048 ????????????????        	resq 1
   117                                  free_var_10:	; location of boolean?
   118 00000050 ????????????????        	resq 1
   119                                  free_var_11:	; location of number?
   120 00000058 ????????????????        	resq 1
   121                                  free_var_12:	; location of collection?
   122 00000060 ????????????????        	resq 1
   123                                  free_var_13:	; location of cons
   124 00000068 ????????????????        	resq 1
   125                                  free_var_14:	; location of display-sexpr
   126 00000070 ????????????????        	resq 1
   127                                  free_var_15:	; location of write-char
   128 00000078 ????????????????        	resq 1
   129                                  free_var_16:	; location of car
   130 00000080 ????????????????        	resq 1
   131                                  free_var_17:	; location of cdr
   132 00000088 ????????????????        	resq 1
   133                                  free_var_18:	; location of string-length
   134 00000090 ????????????????        	resq 1
   135                                  free_var_19:	; location of vector-length
   136 00000098 ????????????????        	resq 1
   137                                  free_var_20:	; location of real->integer
   138 000000A0 ????????????????        	resq 1
   139                                  free_var_21:	; location of exit
   140 000000A8 ????????????????        	resq 1
   141                                  free_var_22:	; location of integer->real
   142 000000B0 ????????????????        	resq 1
   143                                  free_var_23:	; location of rational->real
   144 000000B8 ????????????????        	resq 1
   145                                  free_var_24:	; location of char->integer
   146 000000C0 ????????????????        	resq 1
   147                                  free_var_25:	; location of integer->char
   148 000000C8 ????????????????        	resq 1
   149                                  free_var_26:	; location of trng
   150 000000D0 ????????????????        	resq 1
   151                                  free_var_27:	; location of zero?
   152 000000D8 ????????????????        	resq 1
   153                                  free_var_28:	; location of integer?
   154 000000E0 ????????????????        	resq 1
   155                                  free_var_29:	; location of __bin-apply
   156 000000E8 ????????????????        	resq 1
   157                                  free_var_30:	; location of __bin-add-rr
   158 000000F0 ????????????????        	resq 1
   159                                  free_var_31:	; location of __bin-sub-rr
   160 000000F8 ????????????????        	resq 1
   161                                  free_var_32:	; location of __bin-mul-rr
   162 00000100 ????????????????        	resq 1
   163                                  free_var_33:	; location of __bin-div-rr
   164 00000108 ????????????????        	resq 1
   165                                  free_var_34:	; location of __bin-add-qq
   166 00000110 ????????????????        	resq 1
   167                                  free_var_35:	; location of __bin-sub-qq
   168 00000118 ????????????????        	resq 1
   169                                  free_var_36:	; location of __bin-mul-qq
   170 00000120 ????????????????        	resq 1
   171                                  free_var_37:	; location of __bin-div-qq
   172 00000128 ????????????????        	resq 1
   173                                  free_var_38:	; location of error
   174 00000130 ????????????????        	resq 1
   175                                  free_var_39:	; location of __bin-less-than-rr
   176 00000138 ????????????????        	resq 1
   177                                  free_var_40:	; location of __bin-less-than-qq
   178 00000140 ????????????????        	resq 1
   179                                  free_var_41:	; location of __bin-equal-rr
   180 00000148 ????????????????        	resq 1
   181                                  free_var_42:	; location of __bin-equal-qq
   182 00000150 ????????????????        	resq 1
   183                                  free_var_43:	; location of quotient
   184 00000158 ????????????????        	resq 1
   185                                  free_var_44:	; location of remainder
   186 00000160 ????????????????        	resq 1
   187                                  free_var_45:	; location of set-car!
   188 00000168 ????????????????        	resq 1
   189                                  free_var_46:	; location of set-cdr!
   190 00000170 ????????????????        	resq 1
   191                                  free_var_47:	; location of string-ref
   192 00000178 ????????????????        	resq 1
   193                                  free_var_48:	; location of vector-ref
   194 00000180 ????????????????        	resq 1
   195                                  free_var_49:	; location of vector-set!
   196 00000188 ????????????????        	resq 1
   197                                  free_var_50:	; location of string-set!
   198 00000190 ????????????????        	resq 1
   199                                  free_var_51:	; location of make-vector
   200 00000198 ????????????????        	resq 1
   201                                  free_var_52:	; location of make-string
   202 000001A0 ????????????????        	resq 1
   203                                  free_var_53:	; location of numerator
   204 000001A8 ????????????????        	resq 1
   205                                  free_var_54:	; location of denominator
   206 000001B0 ????????????????        	resq 1
   207                                  free_var_55:	; location of eq?
   208 000001B8 ????????????????        	resq 1
   209                                  free_var_56:	; location of apply
   210 000001C0 ????????????????        	resq 1
   211                                  free_var_57:	; location of +
   212 000001C8 ????????????????        	resq 1
   213                                  
   214                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   215                                  global main
   216                                  section .text
   217                                  main:
   218 00000000 C8000000                        enter 0, 0
   219                                          
   220                                  	; building closure for null?
   221 00000004 48BF-                   	mov rdi, free_var_0
   221 00000006 [0000000000000000] 
   222 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   222 00000010 [F00C000000000000] 
   223 00000018 E8FC0B0000              	call bind_primitive
   224                                  
   225                                  	; building closure for pair?
   226 0000001D 48BF-                   	mov rdi, free_var_1
   226 0000001F [0800000000000000] 
   227 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   227 00000029 [260D000000000000] 
   228 00000031 E8E30B0000              	call bind_primitive
   229                                  
   230                                  	; building closure for void?
   231 00000036 48BF-                   	mov rdi, free_var_2
   231 00000038 [1000000000000000] 
   232 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   232 00000042 [5C0D000000000000] 
   233 0000004A E8CA0B0000              	call bind_primitive
   234                                  
   235                                  	; building closure for char?
   236 0000004F 48BF-                   	mov rdi, free_var_3
   236 00000051 [1800000000000000] 
   237 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   237 0000005B [920D000000000000] 
   238 00000063 E8B10B0000              	call bind_primitive
   239                                  
   240                                  	; building closure for string?
   241 00000068 48BF-                   	mov rdi, free_var_4
   241 0000006A [2000000000000000] 
   242 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   242 00000074 [C80D000000000000] 
   243 0000007C E8980B0000              	call bind_primitive
   244                                  
   245                                  	; building closure for symbol?
   246 00000081 48BF-                   	mov rdi, free_var_5
   246 00000083 [2800000000000000] 
   247 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   247 0000008D [FE0D000000000000] 
   248 00000095 E87F0B0000              	call bind_primitive
   249                                  
   250                                  	; building closure for vector?
   251 0000009A 48BF-                   	mov rdi, free_var_6
   251 0000009C [3000000000000000] 
   252 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   252 000000A6 [340E000000000000] 
   253 000000AE E8660B0000              	call bind_primitive
   254                                  
   255                                  	; building closure for procedure?
   256 000000B3 48BF-                   	mov rdi, free_var_7
   256 000000B5 [3800000000000000] 
   257 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   257 000000BF [6A0E000000000000] 
   258 000000C7 E84D0B0000              	call bind_primitive
   259                                  
   260                                  	; building closure for real?
   261 000000CC 48BF-                   	mov rdi, free_var_8
   261 000000CE [4000000000000000] 
   262 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   262 000000D8 [A00E000000000000] 
   263 000000E0 E8340B0000              	call bind_primitive
   264                                  
   265                                  	; building closure for rational?
   266 000000E5 48BF-                   	mov rdi, free_var_9
   266 000000E7 [4800000000000000] 
   267 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   267 000000F1 [D60E000000000000] 
   268 000000F9 E81B0B0000              	call bind_primitive
   269                                  
   270                                  	; building closure for boolean?
   271 000000FE 48BF-                   	mov rdi, free_var_10
   271 00000100 [5000000000000000] 
   272 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   272 0000010A [0C0F000000000000] 
   273 00000112 E8020B0000              	call bind_primitive
   274                                  
   275                                  	; building closure for number?
   276 00000117 48BF-                   	mov rdi, free_var_11
   276 00000119 [5800000000000000] 
   277 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   277 00000123 [440F000000000000] 
   278 0000012B E8E90A0000              	call bind_primitive
   279                                  
   280                                  	; building closure for collection?
   281 00000130 48BF-                   	mov rdi, free_var_12
   281 00000132 [6000000000000000] 
   282 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   282 0000013C [7C0F000000000000] 
   283 00000144 E8D00A0000              	call bind_primitive
   284                                  
   285                                  	; building closure for cons
   286 00000149 48BF-                   	mov rdi, free_var_13
   286 0000014B [6800000000000000] 
   287 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   287 00000155 [B40F000000000000] 
   288 0000015D E8B70A0000              	call bind_primitive
   289                                  
   290                                  	; building closure for display-sexpr
   291 00000162 48BF-                   	mov rdi, free_var_14
   291 00000164 [7000000000000000] 
   292 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   292 0000016E [E80F000000000000] 
   293 00000176 E89E0A0000              	call bind_primitive
   294                                  
   295                                  	; building closure for write-char
   296 0000017B 48BF-                   	mov rdi, free_var_15
   296 0000017D [7800000000000000] 
   297 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   297 00000187 [1210000000000000] 
   298 0000018F E8850A0000              	call bind_primitive
   299                                  
   300                                  	; building closure for car
   301 00000194 48BF-                   	mov rdi, free_var_16
   301 00000196 [8000000000000000] 
   302 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   302 000001A0 [6910000000000000] 
   303 000001A8 E86C0A0000              	call bind_primitive
   304                                  
   305                                  	; building closure for cdr
   306 000001AD 48BF-                   	mov rdi, free_var_17
   306 000001AF [8800000000000000] 
   307 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   307 000001B9 [9110000000000000] 
   308 000001C1 E8530A0000              	call bind_primitive
   309                                  
   310                                  	; building closure for string-length
   311 000001C6 48BF-                   	mov rdi, free_var_18
   311 000001C8 [9000000000000000] 
   312 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   312 000001D2 [B910000000000000] 
   313 000001DA E83A0A0000              	call bind_primitive
   314                                  
   315                                  	; building closure for vector-length
   316 000001DF 48BF-                   	mov rdi, free_var_19
   316 000001E1 [9800000000000000] 
   317 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   317 000001EB [E610000000000000] 
   318 000001F3 E8210A0000              	call bind_primitive
   319                                  
   320                                  	; building closure for real->integer
   321 000001F8 48BF-                   	mov rdi, free_var_20
   321 000001FA [A000000000000000] 
   322 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   322 00000204 [1311000000000000] 
   323 0000020C E8080A0000              	call bind_primitive
   324                                  
   325                                  	; building closure for exit
   326 00000211 48BF-                   	mov rdi, free_var_21
   326 00000213 [A800000000000000] 
   327 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   327 0000021D [4611000000000000] 
   328 00000225 E8EF090000              	call bind_primitive
   329                                  
   330                                  	; building closure for integer->real
   331 0000022A 48BF-                   	mov rdi, free_var_22
   331 0000022C [B000000000000000] 
   332 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   332 00000236 [6311000000000000] 
   333 0000023E E8D6090000              	call bind_primitive
   334                                  
   335                                  	; building closure for rational->real
   336 00000243 48BF-                   	mov rdi, free_var_23
   336 00000245 [B800000000000000] 
   337 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   337 0000024F [A011000000000000] 
   338 00000257 E8BD090000              	call bind_primitive
   339                                  
   340                                  	; building closure for char->integer
   341 0000025C 48BF-                   	mov rdi, free_var_24
   341 0000025E [C000000000000000] 
   342 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   342 00000268 [DF11000000000000] 
   343 00000270 E8A4090000              	call bind_primitive
   344                                  
   345                                  	; building closure for integer->char
   346 00000275 48BF-                   	mov rdi, free_var_25
   346 00000277 [C800000000000000] 
   347 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   347 00000281 [1412000000000000] 
   348 00000289 E88B090000              	call bind_primitive
   349                                  
   350                                  	; building closure for trng
   351 0000028E 48BF-                   	mov rdi, free_var_26
   351 00000290 [D000000000000000] 
   352 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   352 0000029A [6E12000000000000] 
   353 000002A2 E872090000              	call bind_primitive
   354                                  
   355                                  	; building closure for zero?
   356 000002A7 48BF-                   	mov rdi, free_var_27
   356 000002A9 [D800000000000000] 
   357 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   357 000002B3 [9112000000000000] 
   358 000002BB E859090000              	call bind_primitive
   359                                  
   360                                  	; building closure for integer?
   361 000002C0 48BF-                   	mov rdi, free_var_28
   361 000002C2 [E000000000000000] 
   362 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   362 000002CC [EC12000000000000] 
   363 000002D4 E840090000              	call bind_primitive
   364                                  
   365                                  	; building closure for __bin-apply
   366 000002D9 48BF-                   	mov rdi, free_var_29
   366 000002DB [E800000000000000] 
   367 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   367 000002E5 [410C000000000000] 
   368 000002ED E827090000              	call bind_primitive
   369                                  
   370                                  	; building closure for __bin-add-rr
   371 000002F2 48BF-                   	mov rdi, free_var_30
   371 000002F4 [F000000000000000] 
   372 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   372 000002FE [2913000000000000] 
   373 00000306 E80E090000              	call bind_primitive
   374                                  
   375                                  	; building closure for __bin-sub-rr
   376 0000030B 48BF-                   	mov rdi, free_var_31
   376 0000030D [F800000000000000] 
   377 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   377 00000317 [6D13000000000000] 
   378 0000031F E8F5080000              	call bind_primitive
   379                                  
   380                                  	; building closure for __bin-mul-rr
   381 00000324 48BF-                   	mov rdi, free_var_32
   381 00000326 [0001000000000000] 
   382 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   382 00000330 [B113000000000000] 
   383 00000338 E8DC080000              	call bind_primitive
   384                                  
   385                                  	; building closure for __bin-div-rr
   386 0000033D 48BF-                   	mov rdi, free_var_33
   386 0000033F [0801000000000000] 
   387 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   387 00000349 [F513000000000000] 
   388 00000351 E8C3080000              	call bind_primitive
   389                                  
   390                                  	; building closure for __bin-add-qq
   391 00000356 48BF-                   	mov rdi, free_var_34
   391 00000358 [1001000000000000] 
   392 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   392 00000362 [4714000000000000] 
   393 0000036A E8AA080000              	call bind_primitive
   394                                  
   395                                  	; building closure for __bin-sub-qq
   396 0000036F 48BF-                   	mov rdi, free_var_35
   396 00000371 [1801000000000000] 
   397 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   397 0000037B [AF14000000000000] 
   398 00000383 E891080000              	call bind_primitive
   399                                  
   400                                  	; building closure for __bin-mul-qq
   401 00000388 48BF-                   	mov rdi, free_var_36
   401 0000038A [2001000000000000] 
   402 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   402 00000394 [1715000000000000] 
   403 0000039C E878080000              	call bind_primitive
   404                                  
   405                                  	; building closure for __bin-div-qq
   406 000003A1 48BF-                   	mov rdi, free_var_37
   406 000003A3 [2801000000000000] 
   407 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   407 000003AD [6F15000000000000] 
   408 000003B5 E85F080000              	call bind_primitive
   409                                  
   410                                  	; building closure for error
   411 000003BA 48BF-                   	mov rdi, free_var_38
   411 000003BC [3001000000000000] 
   412 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   412 000003C6 [3D16000000000000] 
   413 000003CE E846080000              	call bind_primitive
   414                                  
   415                                  	; building closure for __bin-less-than-rr
   416 000003D3 48BF-                   	mov rdi, free_var_39
   416 000003D5 [3801000000000000] 
   417 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   417 000003DF [F416000000000000] 
   418 000003E7 E82D080000              	call bind_primitive
   419                                  
   420                                  	; building closure for __bin-less-than-qq
   421 000003EC 48BF-                   	mov rdi, free_var_40
   421 000003EE [4001000000000000] 
   422 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   422 000003F8 [4B17000000000000] 
   423 00000400 E814080000              	call bind_primitive
   424                                  
   425                                  	; building closure for __bin-equal-rr
   426 00000405 48BF-                   	mov rdi, free_var_41
   426 00000407 [4801000000000000] 
   427 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   427 00000411 [AE17000000000000] 
   428 00000419 E8FB070000              	call bind_primitive
   429                                  
   430                                  	; building closure for __bin-equal-qq
   431 0000041E 48BF-                   	mov rdi, free_var_42
   431 00000420 [5001000000000000] 
   432 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   432 0000042A [0518000000000000] 
   433 00000432 E8E2070000              	call bind_primitive
   434                                  
   435                                  	; building closure for quotient
   436 00000437 48BF-                   	mov rdi, free_var_43
   436 00000439 [5801000000000000] 
   437 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   437 00000443 [6818000000000000] 
   438 0000044B E8C9070000              	call bind_primitive
   439                                  
   440                                  	; building closure for remainder
   441 00000450 48BF-                   	mov rdi, free_var_44
   441 00000452 [6001000000000000] 
   442 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   442 0000045C [CE18000000000000] 
   443 00000464 E8B0070000              	call bind_primitive
   444                                  
   445                                  	; building closure for set-car!
   446 00000469 48BF-                   	mov rdi, free_var_45
   446 0000046B [6801000000000000] 
   447 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   447 00000475 [3419000000000000] 
   448 0000047D E897070000              	call bind_primitive
   449                                  
   450                                  	; building closure for set-cdr!
   451 00000482 48BF-                   	mov rdi, free_var_46
   451 00000484 [7001000000000000] 
   452 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   452 0000048E [6A19000000000000] 
   453 00000496 E87E070000              	call bind_primitive
   454                                  
   455                                  	; building closure for string-ref
   456 0000049B 48BF-                   	mov rdi, free_var_47
   456 0000049D [7801000000000000] 
   457 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   457 000004A7 [A019000000000000] 
   458 000004AF E865070000              	call bind_primitive
   459                                  
   460                                  	; building closure for vector-ref
   461 000004B4 48BF-                   	mov rdi, free_var_48
   461 000004B6 [8001000000000000] 
   462 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   462 000004C0 [0B1A000000000000] 
   463 000004C8 E84C070000              	call bind_primitive
   464                                  
   465                                  	; building closure for vector-set!
   466 000004CD 48BF-                   	mov rdi, free_var_49
   466 000004CF [8801000000000000] 
   467 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   467 000004D9 [671A000000000000] 
   468 000004E1 E833070000              	call bind_primitive
   469                                  
   470                                  	; building closure for string-set!
   471 000004E6 48BF-                   	mov rdi, free_var_50
   471 000004E8 [9001000000000000] 
   472 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   472 000004F2 [D11A000000000000] 
   473 000004FA E81A070000              	call bind_primitive
   474                                  
   475                                  	; building closure for make-vector
   476 000004FF 48BF-                   	mov rdi, free_var_51
   476 00000501 [9801000000000000] 
   477 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   477 0000050B [461B000000000000] 
   478 00000513 E801070000              	call bind_primitive
   479                                  
   480                                  	; building closure for make-string
   481 00000518 48BF-                   	mov rdi, free_var_52
   481 0000051A [A001000000000000] 
   482 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   482 00000524 [B01B000000000000] 
   483 0000052C E8E8060000              	call bind_primitive
   484                                  
   485                                  	; building closure for numerator
   486 00000531 48BF-                   	mov rdi, free_var_53
   486 00000533 [A801000000000000] 
   487 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   487 0000053D [221C000000000000] 
   488 00000545 E8CF060000              	call bind_primitive
   489                                  
   490                                  	; building closure for denominator
   491 0000054A 48BF-                   	mov rdi, free_var_54
   491 0000054C [B001000000000000] 
   492 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   492 00000556 [4F1C000000000000] 
   493 0000055E E8B6060000              	call bind_primitive
   494                                  
   495                                  	; building closure for eq?
   496 00000563 48BF-                   	mov rdi, free_var_55
   496 00000565 [B801000000000000] 
   497 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   497 0000056F [7C1C000000000000] 
   498 00000577 E89D060000              	call bind_primitive
   499                                  
   500 0000057C 48B8-                   	mov rax,L_constants + 91
   500 0000057E [5B00000000000000] 
   501 00000586 50                      	push rax
   502 00000587 488B0425[C8010000]      	mov rax, qword [free_var_57]
   503 0000058F 50                      	push rax
   504 00000590 6A02                    	push 2
   505 00000592 488B0425[C0010000]      	mov rax, qword [free_var_56]
   506                                  	assert_closure(rax)
    42 0000059A 803805              <1>  cmp byte [%1], %2
    43 0000059D 0F85D9180000        <1>  jne L_error_incorrect_type
   507 000005A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   508 000005A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
   509                                  
   510 000005A9 4889C7                  	mov rdi, rax
   511 000005AC E8E8000000              	call print_sexpr_if_not_void
   512                                  
   513 000005B1 48BF-                           mov rdi, fmt_memory_usage
   513 000005B3 [CB00000000000000] 
   514 000005BB 488B3425[52010000]              mov rsi, qword [top_of_memory]
   515 000005C3 4881EE[D0010000]                sub rsi, memory
   516 000005CA B800000000                      mov rax, 0
   517                                  	ENTER
    33 000005CF C8000000            <1>  enter 0, 0
    34 000005D3 4883E4F0            <1>  and rsp, ~15
   518 000005D7 E8(00000000)                    call printf
   519                                  	LEAVE
    38 000005DC C9                  <1>  leave
   520 000005DD C9                      	leave
   521 000005DE C3                      	ret
   522                                  
   523                                  L_error_non_closure:
   524 000005DF 488B3C25[00000000]              mov rdi, qword [stderr]
   525 000005E7 48BE-                           mov rsi, fmt_non_closure
   525 000005E9 [0201000000000000] 
   526 000005F1 B800000000                      mov rax, 0
   527                                  	ENTER
    33 000005F6 C8000000            <1>  enter 0, 0
    34 000005FA 4883E4F0            <1>  and rsp, ~15
   528 000005FE E8(00000000)                    call fprintf
   529                                  	LEAVE
    38 00000603 C9                  <1>  leave
   530 00000604 48C7C0FEFFFFFF                  mov rax, -2
   531 0000060B E8(00000000)                    call exit
   532                                  
   533                                  L_error_improper_list:
   534 00000610 488B3C25[00000000]      	mov rdi, qword [stderr]
   535 00000618 48BE-                   	mov rsi, fmt_error_improper_list
   535 0000061A [2A01000000000000] 
   536 00000622 B800000000              	mov rax, 0
   537                                  	ENTER
    33 00000627 C8000000            <1>  enter 0, 0
    34 0000062B 4883E4F0            <1>  and rsp, ~15
   538 0000062F E8(00000000)            	call fprintf
   539                                  	LEAVE
    38 00000634 C9                  <1>  leave
   540 00000635 48C7C0F9FFFFFF          	mov rax, -7
   541 0000063C E8(00000000)            	call exit
   542                                  
   543                                  L_error_incorrect_arity_simple:
   544 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   545 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   545 0000064B [6C00000000000000] 
   546 00000653 EB12                            jmp L_error_incorrect_arity_common
   547                                  L_error_incorrect_arity_opt:
   548 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   549 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   549 0000065F [9700000000000000] 
   550                                  L_error_incorrect_arity_common:
   551 00000667 5A                              pop rdx
   552 00000668 59                              pop rcx
   553 00000669 B800000000                      mov rax, 0
   554                                  	ENTER
    33 0000066E C8000000            <1>  enter 0, 0
    34 00000672 4883E4F0            <1>  and rsp, ~15
   555 00000676 E8(00000000)                    call fprintf
   556                                  	LEAVE
    38 0000067B C9                  <1>  leave
   557 0000067C 48C7C0FAFFFFFF                  mov rax, -6
   558 00000683 E8(00000000)                    call exit
   559                                  
   560                                  section .data
   561                                  fmt_incorrect_arity_simple:
   562 0000006C 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   562 00000075 74656420256C642061-
   562 0000007E 7267756D656E74732C-
   562 00000087 206275742067697665-
   562 00000090 6E20256C640A00     
   563                                  fmt_incorrect_arity_opt:
   564 00000097 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   564 000000A0 746564206174206C65-
   564 000000A9 61737420256C642061-
   564 000000B2 7267756D656E74732C-
   564 000000BB 206275742067697665-
   564 000000C4 6E20256C640A00     
   565                                  fmt_memory_usage:
   566 000000CB 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   566 000000D4 6420256C6420627974-
   566 000000DD 6573206F662064796E-
   566 000000E6 616D6963616C6C792D-
   566 000000EF 616C6C6F6361746564-
   566 000000F8 206D656D6F72790A0A-
   566 00000101 00                 
   567                                  fmt_non_closure:
   568 00000102 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   568 0000010B 7074696E6720746F20-
   568 00000114 6170706C792061206E-
   568 0000011D 6F6E2D636C6F737572-
   568 00000126 65210A00           
   569                                  fmt_error_improper_list:
   570 0000012A 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   570 00000133 7267756D656E742069-
   570 0000013C 73206E6F7420612070-
   570 00000145 726F706572206C6973-
   570 0000014E 74210A00           
   571                                  
   572                                  section .bss
   573                                  memory:
   574 000001D0 <res 40000000h>         	resb gbytes(1)
   575                                  
   576                                  section .data
   577                                  top_of_memory:
   578 00000152 [D001000000000000]              dq memory
   579                                  
   580                                  section .text
   581                                  malloc:
   582 00000688 488B0425[52010000]              mov rax, qword [top_of_memory]
   583 00000690 48013C25[52010000]              add qword [top_of_memory], rdi
   584 00000698 C3                              ret
   585                                          
   586                                  print_sexpr_if_not_void:
   587 00000699 4881FF[00000000]        	cmp rdi, sob_void
   588 000006A0 7501                    	jne print_sexpr
   589 000006A2 C3                      	ret
   590                                  
   591                                  section .data
   592                                  fmt_void:
   593 0000015A 233C766F69643E00        	db `#<void>\0`
   594                                  fmt_nil:
   595 00000162 282900                  	db `()\0`
   596                                  fmt_boolean_false:
   597 00000165 236600                  	db `#f\0`
   598                                  fmt_boolean_true:
   599 00000168 237400                  	db `#t\0`
   600                                  fmt_char_backslash:
   601 0000016B 235C5C00                	db `#\\\\\0`
   602                                  fmt_char_dquote:
   603 0000016F 235C2200                	db `#\\"\0`
   604                                  fmt_char_simple:
   605 00000173 235C256300              	db `#\\%c\0`
   606                                  fmt_char_null:
   607 00000178 235C6E756C00            	db `#\\nul\0`
   608                                  fmt_char_bell:
   609 0000017E 235C62656C6C00          	db `#\\bell\0`
   610                                  fmt_char_backspace:
   611 00000185 235C6261636B737061-     	db `#\\backspace\0`
   611 0000018E 636500             
   612                                  fmt_char_tab:
   613 00000191 235C74616200            	db `#\\tab\0`
   614                                  fmt_char_newline:
   615 00000197 235C6E65776C696E65-     	db `#\\newline\0`
   615 000001A0 00                 
   616                                  fmt_char_formfeed:
   617 000001A1 235C7061676500          	db `#\\page\0`
   618                                  fmt_char_return:
   619 000001A8 235C72657475726E00      	db `#\\return\0`
   620                                  fmt_char_escape:
   621 000001B1 235C65736300            	db `#\\esc\0`
   622                                  fmt_char_space:
   623 000001B7 235C737061636500        	db `#\\space\0`
   624                                  fmt_char_hex:
   625 000001BF 235C782530325800        	db `#\\x%02X\0`
   626                                  fmt_closure:
   627 000001C7 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   627 000001D0 206174203078253038-
   627 000001D9 5820656E763D307825-
   627 000001E2 30385820636F64653D-
   627 000001EB 3078253038583E00   
   628                                  fmt_lparen:
   629 000001F3 2800                    	db `(\0`
   630                                  fmt_dotted_pair:
   631 000001F5 202E2000                	db ` . \0`
   632                                  fmt_rparen:
   633 000001F9 2900                    	db `)\0`
   634                                  fmt_space:
   635 000001FB 2000                    	db ` \0`
   636                                  fmt_empty_vector:
   637 000001FD 23282900                	db `#()\0`
   638                                  fmt_vector:
   639 00000201 232800                  	db `#(\0`
   640                                  fmt_real:
   641 00000204 256600                  	db `%f\0`
   642                                  fmt_fraction:
   643 00000207 256C642F256C6400        	db `%ld/%ld\0`
   644                                  fmt_zero:
   645 0000020F 3000                    	db `0\0`
   646                                  fmt_int:
   647 00000211 256C6400                	db `%ld\0`
   648                                  fmt_unknown_sexpr_error:
   649 00000215 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   649 0000021E 6F723A20556E6B6E6F-
   649 00000227 776E2074797065206F-
   649 00000230 662073657870722028-
   649 00000239 3078253032582920   
   650 00000241 617420616464726573-     	db `at address 0x%08X\n\n\0`
   650 0000024A 73203078253038580A-
   650 00000253 0A00               
   651                                  fmt_dquote:
   652 00000255 2200                    	db `\"\0`
   653                                  fmt_string_char:
   654 00000257 256300                          db `%c\0`
   655                                  fmt_string_char_7:
   656 0000025A 5C6100                          db `\\a\0`
   657                                  fmt_string_char_8:
   658 0000025D 5C6200                          db `\\b\0`
   659                                  fmt_string_char_9:
   660 00000260 5C7400                          db `\\t\0`
   661                                  fmt_string_char_10:
   662 00000263 5C6E00                          db `\\n\0`
   663                                  fmt_string_char_11:
   664 00000266 5C7600                          db `\\v\0`
   665                                  fmt_string_char_12:
   666 00000269 5C6600                          db `\\f\0`
   667                                  fmt_string_char_13:
   668 0000026C 5C7200                          db `\\r\0`
   669                                  fmt_string_char_34:
   670 0000026F 5C2200                          db `\\"\0`
   671                                  fmt_string_char_92:
   672 00000272 5C5C00                          db `\\\\\0`
   673                                  fmt_string_char_hex:
   674 00000275 5C7825583B00                    db `\\x%X;\0`
   675                                  
   676                                  section .text
   677                                  
   678                                  print_sexpr:
   679                                  	ENTER
    33 000006A3 C8000000            <1>  enter 0, 0
    34 000006A7 4883E4F0            <1>  and rsp, ~15
   680 000006AB 8A07                    	mov al, byte [rdi]
   681 000006AD 3C00                    	cmp al, T_void
   682 000006AF 744D                    	je .Lvoid
   683 000006B1 3C01                    	cmp al, T_nil
   684 000006B3 7458                    	je .Lnil
   685 000006B5 3C09                    	cmp al, T_boolean_false
   686 000006B7 7463                    	je .Lboolean_false
   687 000006B9 3C0A                    	cmp al, T_boolean_true
   688 000006BB 746E                    	je .Lboolean_true
   689 000006BD 3C02                    	cmp al, T_char
   690 000006BF 7479                    	je .Lchar
   691 000006C1 3C04                    	cmp al, T_symbol
   692 000006C3 0F84BB010000            	je .Lsymbol
   693 000006C9 3C21                    	cmp al, T_pair
   694 000006CB 0F84D6010000            	je .Lpair
   695 000006D1 3C22                    	cmp al, T_vector
   696 000006D3 0F849F020000            	je .Lvector
   697 000006D9 3C05                    	cmp al, T_closure
   698 000006DB 0F8489010000            	je .Lclosure
   699 000006E1 3C12                    	cmp al, T_real
   700 000006E3 0F8430030000            	je .Lreal
   701 000006E9 3C11                    	cmp al, T_rational
   702 000006EB 0F8456030000            	je .Lrational
   703 000006F1 3C03                    	cmp al, T_string
   704 000006F3 0F848F030000            	je .Lstring
   705                                  
   706 000006F9 E9C7040000              	jmp .Lunknown_sexpr_type
   707                                  
   708                                  .Lvoid:
   709 000006FE 48BF-                   	mov rdi, fmt_void
   709 00000700 [5A01000000000000] 
   710 00000708 E9F5040000              	jmp .Lemit
   711                                  
   712                                  .Lnil:
   713 0000070D 48BF-                   	mov rdi, fmt_nil
   713 0000070F [6201000000000000] 
   714 00000717 E9E6040000              	jmp .Lemit
   715                                  
   716                                  .Lboolean_false:
   717 0000071C 48BF-                   	mov rdi, fmt_boolean_false
   717 0000071E [6501000000000000] 
   718 00000726 E9D7040000              	jmp .Lemit
   719                                  
   720                                  .Lboolean_true:
   721 0000072B 48BF-                   	mov rdi, fmt_boolean_true
   721 0000072D [6801000000000000] 
   722 00000735 E9C8040000              	jmp .Lemit
   723                                  
   724                                  .Lchar:
   725 0000073A 8A4701                  	mov al, byte [rdi + 1]
   726 0000073D 3C20                    	cmp al, ' '
   727 0000073F 7E28                    	jle .Lchar_whitespace
   728 00000741 3C5C                    	cmp al, 92 		; backslash
   729 00000743 0F847C000000            	je .Lchar_backslash
   730 00000749 3C22                    	cmp al, '"'
   731 0000074B 0F8483000000            	je .Lchar_dquote
   732 00000751 4825FF000000            	and rax, 255
   733 00000757 48BF-                   	mov rdi, fmt_char_simple
   733 00000759 [7301000000000000] 
   734 00000761 4889C6                  	mov rsi, rax
   735 00000764 E999040000              	jmp .Lemit
   736                                  
   737                                  .Lchar_whitespace:
   738 00000769 3C00                    	cmp al, 0
   739 0000076B 7476                    	je .Lchar_null
   740 0000076D 3C07                    	cmp al, 7
   741 0000076F 0F847D000000            	je .Lchar_bell
   742 00000775 3C08                    	cmp al, 8
   743 00000777 0F8484000000            	je .Lchar_backspace
   744 0000077D 3C09                    	cmp al, 9
   745 0000077F 0F848B000000            	je .Lchar_tab
   746 00000785 3C0A                    	cmp al, 10
   747 00000787 0F8492000000            	je .Lchar_newline
   748 0000078D 3C0C                    	cmp al, 12
   749 0000078F 0F8499000000            	je .Lchar_formfeed
   750 00000795 3C0D                    	cmp al, 13
   751 00000797 0F84A0000000            	je .Lchar_return
   752 0000079D 3C1B                    	cmp al, 27
   753 0000079F 0F84A7000000            	je .Lchar_escape
   754 000007A5 4825FF000000            	and rax, 255
   755 000007AB 3C20                    	cmp al, ' '
   756 000007AD 0F84A8000000            	je .Lchar_space
   757 000007B3 48BF-                   	mov rdi, fmt_char_hex
   757 000007B5 [BF01000000000000] 
   758 000007BD 4889C6                  	mov rsi, rax
   759 000007C0 E93D040000              	jmp .Lemit	
   760                                  
   761                                  .Lchar_backslash:
   762 000007C5 48BF-                   	mov rdi, fmt_char_backslash
   762 000007C7 [6B01000000000000] 
   763 000007CF E92E040000              	jmp .Lemit
   764                                  
   765                                  .Lchar_dquote:
   766 000007D4 48BF-                   	mov rdi, fmt_char_dquote
   766 000007D6 [6F01000000000000] 
   767 000007DE E91F040000              	jmp .Lemit
   768                                  
   769                                  .Lchar_null:
   770 000007E3 48BF-                   	mov rdi, fmt_char_null
   770 000007E5 [7801000000000000] 
   771 000007ED E910040000              	jmp .Lemit
   772                                  
   773                                  .Lchar_bell:
   774 000007F2 48BF-                   	mov rdi, fmt_char_bell
   774 000007F4 [7E01000000000000] 
   775 000007FC E901040000              	jmp .Lemit
   776                                  
   777                                  .Lchar_backspace:
   778 00000801 48BF-                   	mov rdi, fmt_char_backspace
   778 00000803 [8501000000000000] 
   779 0000080B E9F2030000              	jmp .Lemit
   780                                  
   781                                  .Lchar_tab:
   782 00000810 48BF-                   	mov rdi, fmt_char_tab
   782 00000812 [9101000000000000] 
   783 0000081A E9E3030000              	jmp .Lemit
   784                                  
   785                                  .Lchar_newline:
   786 0000081F 48BF-                   	mov rdi, fmt_char_newline
   786 00000821 [9701000000000000] 
   787 00000829 E9D4030000              	jmp .Lemit
   788                                  
   789                                  .Lchar_formfeed:
   790 0000082E 48BF-                   	mov rdi, fmt_char_formfeed
   790 00000830 [A101000000000000] 
   791 00000838 E9C5030000              	jmp .Lemit
   792                                  
   793                                  .Lchar_return:
   794 0000083D 48BF-                   	mov rdi, fmt_char_return
   794 0000083F [A801000000000000] 
   795 00000847 E9B6030000              	jmp .Lemit
   796                                  
   797                                  .Lchar_escape:
   798 0000084C 48BF-                   	mov rdi, fmt_char_escape
   798 0000084E [B101000000000000] 
   799 00000856 E9A7030000              	jmp .Lemit
   800                                  
   801                                  .Lchar_space:
   802 0000085B 48BF-                   	mov rdi, fmt_char_space
   802 0000085D [B701000000000000] 
   803 00000865 E998030000              	jmp .Lemit
   804                                  
   805                                  .Lclosure:
   806 0000086A 4889FE                  	mov rsi, qword rdi
   807 0000086D 48BF-                   	mov rdi, fmt_closure
   807 0000086F [C701000000000000] 
   808 00000877 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   809 0000087B 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   810 0000087F E97E030000              	jmp .Lemit
   811                                  
   812                                  .Lsymbol:
   813 00000884 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   814 00000888 BE01000000              	mov rsi, 1		 ; size = 1 byte
   815 0000088D 488B5701                	mov rdx, qword [rdi + 1] ; length
   816 00000891 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   817 00000895 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   818 0000089D E8(00000000)            	call fwrite
   819 000008A2 E970030000              	jmp .Lend
   820                                  	
   821                                  .Lpair:
   822 000008A7 57                      	push rdi
   823 000008A8 48BF-                   	mov rdi, fmt_lparen
   823 000008AA [F301000000000000] 
   824 000008B2 B800000000              	mov rax, 0
   825                                          ENTER
    33 000008B7 C8000000            <1>  enter 0, 0
    34 000008BB 4883E4F0            <1>  and rsp, ~15
   826 000008BF E8(00000000)            	call printf
   827                                          LEAVE
    38 000008C4 C9                  <1>  leave
   828 000008C5 488B3C24                	mov rdi, qword [rsp] 	; pair
   829 000008C9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   830 000008CD E8D1FDFFFF              	call print_sexpr
   831 000008D2 5F                      	pop rdi 		; pair
   832 000008D3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   833                                  .Lcdr:
   834 000008D7 8A07                    	mov al, byte [rdi]
   835 000008D9 3C01                    	cmp al, T_nil
   836 000008DB 7447                    	je .Lcdr_nil
   837 000008DD 3C21                    	cmp al, T_pair
   838 000008DF 7462                    	je .Lcdr_pair
   839 000008E1 57                      	push rdi
   840 000008E2 48BF-                   	mov rdi, fmt_dotted_pair
   840 000008E4 [F501000000000000] 
   841 000008EC B800000000              	mov rax, 0
   842                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   843 000008F9 E8(00000000)            	call printf
   844                                  	LEAVE
    38 000008FE C9                  <1>  leave
   845 000008FF 5F                      	pop rdi
   846 00000900 E89EFDFFFF              	call print_sexpr
   847 00000905 48BF-                   	mov rdi, fmt_rparen
   847 00000907 [F901000000000000] 
   848 0000090F B800000000              	mov rax, 0
   849                                  	ENTER
    33 00000914 C8000000            <1>  enter 0, 0
    34 00000918 4883E4F0            <1>  and rsp, ~15
   850 0000091C E8(00000000)            	call printf
   851                                  	LEAVE
    38 00000921 C9                  <1>  leave
   852                                  	LEAVE
    38 00000922 C9                  <1>  leave
   853 00000923 C3                      	ret
   854                                  
   855                                  .Lcdr_nil:
   856 00000924 48BF-                   	mov rdi, fmt_rparen
   856 00000926 [F901000000000000] 
   857 0000092E B800000000              	mov rax, 0
   858                                  	ENTER
    33 00000933 C8000000            <1>  enter 0, 0
    34 00000937 4883E4F0            <1>  and rsp, ~15
   859 0000093B E8(00000000)            	call printf
   860                                  	LEAVE
    38 00000940 C9                  <1>  leave
   861                                  	LEAVE
    38 00000941 C9                  <1>  leave
   862 00000942 C3                      	ret
   863                                  
   864                                  .Lcdr_pair:
   865 00000943 57                      	push rdi
   866 00000944 48BF-                   	mov rdi, fmt_space
   866 00000946 [FB01000000000000] 
   867 0000094E B800000000              	mov rax, 0
   868                                  	ENTER
    33 00000953 C8000000            <1>  enter 0, 0
    34 00000957 4883E4F0            <1>  and rsp, ~15
   869 0000095B E8(00000000)            	call printf
   870                                  	LEAVE
    38 00000960 C9                  <1>  leave
   871 00000961 488B3C24                	mov rdi, qword [rsp]
   872 00000965 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   873 00000969 E835FDFFFF              	call print_sexpr
   874 0000096E 5F                      	pop rdi
   875 0000096F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   876 00000973 E95FFFFFFF              	jmp .Lcdr
   877                                  
   878                                  .Lvector:
   879 00000978 488B4701                	mov rax, qword [rdi + 1] ; length
   880 0000097C 4883F800                	cmp rax, 0
   881 00000980 0F8484000000            	je .Lvector_empty
   882 00000986 57                      	push rdi
   883 00000987 48BF-                   	mov rdi, fmt_vector
   883 00000989 [0102000000000000] 
   884 00000991 B800000000              	mov rax, 0
   885                                  	ENTER
    33 00000996 C8000000            <1>  enter 0, 0
    34 0000099A 4883E4F0            <1>  and rsp, ~15
   886 0000099E E8(00000000)            	call printf
   887                                  	LEAVE
    38 000009A3 C9                  <1>  leave
   888 000009A4 488B3C24                	mov rdi, qword [rsp]
   889 000009A8 FF7701                  	push qword [rdi + 1]
   890 000009AB 6A01                    	push 1
   891 000009AD 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   892 000009B1 E8EDFCFFFF              	call print_sexpr
   893                                  .Lvector_loop:
   894                                  	; [rsp] index
   895                                  	; [rsp + 8*1] limit
   896                                  	; [rsp + 8*2] vector
   897 000009B6 488B0424                	mov rax, qword [rsp]
   898 000009BA 483B442408              	cmp rax, qword [rsp + 8*1]
   899 000009BF 7436                    	je .Lvector_end
   900 000009C1 48BF-                   	mov rdi, fmt_space
   900 000009C3 [FB01000000000000] 
   901 000009CB B800000000              	mov rax, 0
   902                                  	ENTER
    33 000009D0 C8000000            <1>  enter 0, 0
    34 000009D4 4883E4F0            <1>  and rsp, ~15
   903 000009D8 E8(00000000)            	call printf
   904                                  	LEAVE
    38 000009DD C9                  <1>  leave
   905 000009DE 488B0424                	mov rax, qword [rsp]
   906 000009E2 488B5C2410              	mov rbx, qword [rsp + 8*2]
   907 000009E7 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   908 000009EC E8B2FCFFFF              	call print_sexpr
   909 000009F1 48FF0424                	inc qword [rsp]
   910 000009F5 EBBF                    	jmp .Lvector_loop
   911                                  
   912                                  .Lvector_end:
   913 000009F7 4883C418                	add rsp, 8*3
   914 000009FB 48BF-                   	mov rdi, fmt_rparen
   914 000009FD [F901000000000000] 
   915 00000A05 E9F8010000              	jmp .Lemit	
   916                                  
   917                                  .Lvector_empty:
   918 00000A0A 48BF-                   	mov rdi, fmt_empty_vector
   918 00000A0C [FD01000000000000] 
   919 00000A14 E9E9010000              	jmp .Lemit
   920                                  
   921                                  .Lreal:
   922 00000A19 FF7701                  	push qword [rdi + 1]
   923 00000A1C F20F100424              	movsd xmm0, qword [rsp]
   924 00000A21 4883C408                	add rsp, 8*1
   925 00000A25 48BF-                   	mov rdi, fmt_real
   925 00000A27 [0402000000000000] 
   926 00000A2F B801000000              	mov rax, 1
   927                                  	ENTER
    33 00000A34 C8000000            <1>  enter 0, 0
    34 00000A38 4883E4F0            <1>  and rsp, ~15
   928 00000A3C E8(00000000)            	call printf
   929                                  	LEAVE
    38 00000A41 C9                  <1>  leave
   930 00000A42 E9D0010000              	jmp .Lend
   931                                  
   932                                  .Lrational:
   933 00000A47 488B7701                	mov rsi, qword [rdi + 1]
   934 00000A4B 488B5709                	mov rdx, qword [rdi + 1 + 8]
   935 00000A4F 4883FE00                	cmp rsi, 0
   936 00000A53 7415                    	je .Lrat_zero
   937 00000A55 4883FA01                	cmp rdx, 1
   938 00000A59 741E                    	je .Lrat_int
   939 00000A5B 48BF-                   	mov rdi, fmt_fraction
   939 00000A5D [0702000000000000] 
   940 00000A65 E998010000              	jmp .Lemit
   941                                  
   942                                  .Lrat_zero:
   943 00000A6A 48BF-                   	mov rdi, fmt_zero
   943 00000A6C [0F02000000000000] 
   944 00000A74 E989010000              	jmp .Lemit
   945                                  
   946                                  .Lrat_int:
   947 00000A79 48BF-                   	mov rdi, fmt_int
   947 00000A7B [1102000000000000] 
   948 00000A83 E97A010000              	jmp .Lemit
   949                                  
   950                                  .Lstring:
   951 00000A88 488D4709                	lea rax, [rdi + 1 + 8]
   952 00000A8C 50                      	push rax
   953 00000A8D FF7701                  	push qword [rdi + 1]
   954 00000A90 48BF-                   	mov rdi, fmt_dquote
   954 00000A92 [5502000000000000] 
   955 00000A9A B800000000              	mov rax, 0
   956                                  	ENTER
    33 00000A9F C8000000            <1>  enter 0, 0
    34 00000AA3 4883E4F0            <1>  and rsp, ~15
   957 00000AA7 E8(00000000)            	call printf
   958                                  	LEAVE
    38 00000AAC C9                  <1>  leave
   959                                  .Lstring_loop:
   960                                  	; qword [rsp]: limit
   961                                  	; qword [rsp + 8*1]: char *
   962 00000AAD 48833C2400              	cmp qword [rsp], 0
   963 00000AB2 0F84FD000000            	je .Lstring_end
   964 00000AB8 488B442408              	mov rax, qword [rsp + 8*1]
   965 00000ABD 8A00                    	mov al, byte [rax]
   966 00000ABF 4825FF000000            	and rax, 255
   967 00000AC5 3C07                    	cmp al, 7
   968 00000AC7 7468                            je .Lstring_char_7
   969 00000AC9 3C08                            cmp al, 8
   970 00000ACB 7470                            je .Lstring_char_8
   971 00000ACD 3C09                            cmp al, 9
   972 00000ACF 7478                            je .Lstring_char_9
   973 00000AD1 3C0A                            cmp al, 10
   974 00000AD3 0F847C000000                    je .Lstring_char_10
   975 00000AD9 3C0B                            cmp al, 11
   976 00000ADB 0F8480000000                    je .Lstring_char_11
   977 00000AE1 3C0C                            cmp al, 12
   978 00000AE3 0F8484000000                    je .Lstring_char_12
   979 00000AE9 3C0D                            cmp al, 13
   980 00000AEB 0F8488000000                    je .Lstring_char_13
   981 00000AF1 3C22                            cmp al, 34
   982 00000AF3 0F848C000000                    je .Lstring_char_34
   983 00000AF9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   985 00000AFB 3C20                            cmp al, ' '
   986 00000AFD 0F8CA0000000                    jl .Lstring_char_hex
   987 00000B03 48BF-                           mov rdi, fmt_string_char
   987 00000B05 [5702000000000000] 
   988 00000B0D 4889C6                          mov rsi, rax
   989                                  .Lstring_char_emit:
   990 00000B10 B800000000                      mov rax, 0
   991                                          ENTER
    33 00000B15 C8000000            <1>  enter 0, 0
    34 00000B19 4883E4F0            <1>  and rsp, ~15
   992 00000B1D E8(00000000)                    call printf
   993                                          LEAVE
    38 00000B22 C9                  <1>  leave
   994 00000B23 48FF0C24                        dec qword [rsp]
   995 00000B27 48FF442408                      inc qword [rsp + 8*1]
   996 00000B2C E97CFFFFFF                      jmp .Lstring_loop
   997                                  
   998                                  .Lstring_char_7:
   999 00000B31 48BF-                           mov rdi, fmt_string_char_7
   999 00000B33 [5A02000000000000] 
  1000 00000B3B EBD3                            jmp .Lstring_char_emit
  1001                                  
  1002                                  .Lstring_char_8:
  1003 00000B3D 48BF-                           mov rdi, fmt_string_char_8
  1003 00000B3F [5D02000000000000] 
  1004 00000B47 EBC7                            jmp .Lstring_char_emit
  1005                                          
  1006                                  .Lstring_char_9:
  1007 00000B49 48BF-                           mov rdi, fmt_string_char_9
  1007 00000B4B [6002000000000000] 
  1008 00000B53 EBBB                            jmp .Lstring_char_emit
  1009                                  
  1010                                  .Lstring_char_10:
  1011 00000B55 48BF-                           mov rdi, fmt_string_char_10
  1011 00000B57 [6302000000000000] 
  1012 00000B5F EBAF                            jmp .Lstring_char_emit
  1013                                  
  1014                                  .Lstring_char_11:
  1015 00000B61 48BF-                           mov rdi, fmt_string_char_11
  1015 00000B63 [6602000000000000] 
  1016 00000B6B EBA3                            jmp .Lstring_char_emit
  1017                                  
  1018                                  .Lstring_char_12:
  1019 00000B6D 48BF-                           mov rdi, fmt_string_char_12
  1019 00000B6F [6902000000000000] 
  1020 00000B77 EB97                            jmp .Lstring_char_emit
  1021                                  
  1022                                  .Lstring_char_13:
  1023 00000B79 48BF-                           mov rdi, fmt_string_char_13
  1023 00000B7B [6C02000000000000] 
  1024 00000B83 EB8B                            jmp .Lstring_char_emit
  1025                                  
  1026                                  .Lstring_char_34:
  1027 00000B85 48BF-                           mov rdi, fmt_string_char_34
  1027 00000B87 [6F02000000000000] 
  1028 00000B8F E97CFFFFFF                      jmp .Lstring_char_emit
  1029                                  
  1030                                  .Lstring_char_92:
  1031 00000B94 48BF-                           mov rdi, fmt_string_char_92
  1031 00000B96 [7202000000000000] 
  1032 00000B9E E96DFFFFFF                      jmp .Lstring_char_emit
  1033                                  
  1034                                  .Lstring_char_hex:
  1035 00000BA3 48BF-                           mov rdi, fmt_string_char_hex
  1035 00000BA5 [7502000000000000] 
  1036 00000BAD 4889C6                          mov rsi, rax
  1037 00000BB0 E95BFFFFFF                      jmp .Lstring_char_emit        
  1038                                  
  1039                                  .Lstring_end:
  1040 00000BB5 4883C410                	add rsp, 8 * 2
  1041 00000BB9 48BF-                   	mov rdi, fmt_dquote
  1041 00000BBB [5502000000000000] 
  1042 00000BC3 EB3D                    	jmp .Lemit
  1043                                  
  1044                                  .Lunknown_sexpr_type:
  1045 00000BC5 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1045 00000BC7 [1502000000000000] 
  1046 00000BCF 4825FF000000            	and rax, 255
  1047 00000BD5 4889C2                  	mov rdx, rax
  1048 00000BD8 4889F9                  	mov rcx, rdi
  1049 00000BDB 488B3C25[00000000]      	mov rdi, qword [stderr]
  1050 00000BE3 B800000000              	mov rax, 0
  1051                                  	ENTER
    33 00000BE8 C8000000            <1>  enter 0, 0
    34 00000BEC 4883E4F0            <1>  and rsp, ~15
  1052 00000BF0 E8(00000000)            	call fprintf
  1053                                  	LEAVE
    38 00000BF5 C9                  <1>  leave
  1054 00000BF6 48C7C0FFFFFFFF          	mov rax, -1
  1055 00000BFD E8(00000000)            	call exit
  1056                                  
  1057                                  .Lemit:
  1058 00000C02 B800000000              	mov rax, 0
  1059                                  	ENTER
    33 00000C07 C8000000            <1>  enter 0, 0
    34 00000C0B 4883E4F0            <1>  and rsp, ~15
  1060 00000C0F E8(00000000)            	call printf
  1061                                  	LEAVE
    38 00000C14 C9                  <1>  leave
  1062 00000C15 EB00                    	jmp .Lend
  1063                                  
  1064                                  .Lend:
  1065                                  	LEAVE
    38 00000C17 C9                  <1>  leave
  1066 00000C18 C3                      	ret
  1067                                  
  1068                                  ;;; rdi: address of free variable
  1069                                  ;;; rsi: address of code-pointer
  1070                                  bind_primitive:
  1071                                          ENTER
    33 00000C19 C8000000            <1>  enter 0, 0
    34 00000C1D 4883E4F0            <1>  and rsp, ~15
  1072 00000C21 57                              push rdi
  1073 00000C22 BF11000000                      mov rdi, (1 + 8 + 8)
  1074 00000C27 E85CFAFFFF                      call malloc
  1075 00000C2C 5F                              pop rdi
  1076 00000C2D C60005                          mov byte [rax], T_closure
  1077 00000C30 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1078 00000C38 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1079 00000C3C 488907                          mov qword [rdi], rax
  1080                                          LEAVE
    38 00000C3F C9                  <1>  leave
  1081 00000C40 C3                              ret
  1082                                  
  1083                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1084                                  L_code_ptr_bin_apply:
  1085 00000C41 C8000000                        enter 0, 0
  1086                                          ;finding the list's length
  1087                                          
  1088 00000C45 4831C9                          xor rcx, rcx ;0
  1089 00000C48 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
  1090                                          assert_pair(rax)
    42 00000C4C 803821              <1>  cmp byte [%1], %2
    43 00000C4F 0F8527120000        <1>  jne L_error_incorrect_type
  1091 00000C55 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
  1092                                          my_loop1:
  1093 00000C59 483D[01000000]                          cmp rax, sob_nil ;if nill
  1094 00000C5F 7417                                    je my_loop_end1 ;jmp end
  1095 00000C61 48FFC1                                  inc rcx 
  1096 00000C64 53                                      push rbx ;insrting val to stack
  1097                                                  assert_pair(rax)
    42 00000C65 803821              <1>  cmp byte [%1], %2
    43 00000C68 0F850E120000        <1>  jne L_error_incorrect_type
  1098 00000C6E 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
  1099 00000C72 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
  1100 00000C76 EBE1                                    jmp my_loop1
  1101                                          my_loop_end1:
  1102                                          
  1103                                          ;TODO: ecx = 0 ?
  1104                                  
  1105                                          ;make values in the opposite order:
  1106                                          ;1.pushing all argument one more time in the right order
  1107 00000C78 4889CB                          mov rbx, rcx ;count-up
  1108 00000C7B B900000000                      mov rcx, 0 
  1109 00000C80 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
  1110                                          my_loop2:
  1111 00000C83 4839D9                                  cmp rcx, rbx ; if rcx = n
  1112 00000C86 740A                                    je my_loop_end2 ;then: jump to the end
  1113 00000C88 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
  1114 00000C8C 50                                      push rax
  1115 00000C8D 48FFC1                                  inc rcx
  1116 00000C90 EBF1                                    jmp my_loop2
  1117                                          my_loop_end2:
  1118                                          
  1119                                          ;2.overwriting element above by element below but in correct order
  1120 00000C92 488D14DD30000000                lea rdx, [8 * (rbx + 6)] ;nubmer of *bytes* we need to skip
  1121 00000C9A 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
  1122 00000C9E 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
  1123 00000CA2 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
  1124 00000CA6 B900000000                      mov rcx, 0
  1125                                          my_loop3:
  1126 00000CAB 4839D9                                  cmp rcx, rbx ;if rcx = n
  1127 00000CAE 7417                                    je my_loop_end3 ;then: jump to the end
  1128 00000CB0 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
  1129 00000CB4 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
  1130 00000CB8 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
  1131 00000CBB 4883C408                                add rsp, 8 ;pop arg we used
  1132 00000CBF 48FFC1                                  inc rcx 
  1133 00000CC2 4831C0                                  xor rax, rax
  1134 00000CC5 EBE4                                    jmp my_loop3
  1135                                          my_loop_end3:
  1136                                          
  1137 00000CC7 4883F906                        cmp rcx, 6
  1138 00000CCB 7F11                            jg seven_or_more
  1139 00000CCD 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
  1140 00000CD1 48F7DB                          neg rbx 
  1141 00000CD4 4883C306                        add rbx, 6      ;sub 6 from num_of_args
  1142 00000CD8 488D24DC                        lea rsp, [rsp + 8 * rbx] ; pop rest of old frame 
  1143 00000CDC EB05                            jmp continu
  1144                                          seven_or_more:
  1145 00000CDE 488D642430                      lea rsp, [rsp + 8 * 6] ; pop rest of 1st time pushed args
  1146                                          continu:
  1147 00000CE3 51                              push rcx ;push number of arguments
  1148 00000CE4 41FF7001                        push SOB_CLOSURE_ENV(r8) ; push lex-env
  1149 00000CE8 57                              push rdi ; push old ret-add
  1150 00000CE9 4889F5                          mov rbp, rsi ;rbp = old-rbp
  1151 00000CEC 41FF6009                        jmp SOB_CLOSURE_CODE(r8) ; fun to apply
  1152                                  	
  1153                                  L_code_ptr_is_null:
  1154                                          ENTER
    33 00000CF0 C8000000            <1>  enter 0, 0
    34 00000CF4 4883E4F0            <1>  and rsp, ~15
  1155 00000CF8 48837D1801                      cmp COUNT, 1
  1156 00000CFD 0F85A5100000                    jne L_error_arg_count_1
  1157 00000D03 488B4520                        mov rax, PARAM(0)
  1158 00000D07 803801                          cmp byte [rax], T_nil
  1159 00000D0A 750C                            jne .L_false
  1160 00000D0C 48B8-                           mov rax, sob_boolean_true
  1160 00000D0E [0300000000000000] 
  1161 00000D16 EB0A                            jmp .L_end
  1162                                  .L_false:
  1163 00000D18 48B8-                           mov rax, sob_boolean_false
  1163 00000D1A [0200000000000000] 
  1164                                  .L_end:
  1165                                          LEAVE
    38 00000D22 C9                  <1>  leave
  1166 00000D23 C21800                          ret AND_KILL_FRAME(1)
  1167                                  
  1168                                  L_code_ptr_is_pair:
  1169                                          ENTER
    33 00000D26 C8000000            <1>  enter 0, 0
    34 00000D2A 4883E4F0            <1>  and rsp, ~15
  1170 00000D2E 48837D1801                      cmp COUNT, 1
  1171 00000D33 0F856F100000                    jne L_error_arg_count_1
  1172 00000D39 488B4520                        mov rax, PARAM(0)
  1173 00000D3D 803821                          cmp byte [rax], T_pair
  1174 00000D40 750C                            jne .L_false
  1175 00000D42 48B8-                           mov rax, sob_boolean_true
  1175 00000D44 [0300000000000000] 
  1176 00000D4C EB0A                            jmp .L_end
  1177                                  .L_false:
  1178 00000D4E 48B8-                           mov rax, sob_boolean_false
  1178 00000D50 [0200000000000000] 
  1179                                  .L_end:
  1180                                          LEAVE
    38 00000D58 C9                  <1>  leave
  1181 00000D59 C21800                          ret AND_KILL_FRAME(1)
  1182                                          
  1183                                  L_code_ptr_is_void:
  1184                                          ENTER
    33 00000D5C C8000000            <1>  enter 0, 0
    34 00000D60 4883E4F0            <1>  and rsp, ~15
  1185 00000D64 48837D1801                      cmp COUNT, 1
  1186 00000D69 0F8539100000                    jne L_error_arg_count_1
  1187 00000D6F 488B4520                        mov rax, PARAM(0)
  1188 00000D73 803800                          cmp byte [rax], T_void
  1189 00000D76 750C                            jne .L_false
  1190 00000D78 48B8-                           mov rax, sob_boolean_true
  1190 00000D7A [0300000000000000] 
  1191 00000D82 EB0A                            jmp .L_end
  1192                                  .L_false:
  1193 00000D84 48B8-                           mov rax, sob_boolean_false
  1193 00000D86 [0200000000000000] 
  1194                                  .L_end:
  1195                                          LEAVE
    38 00000D8E C9                  <1>  leave
  1196 00000D8F C21800                          ret AND_KILL_FRAME(1)
  1197                                  
  1198                                  L_code_ptr_is_char:
  1199                                          ENTER
    33 00000D92 C8000000            <1>  enter 0, 0
    34 00000D96 4883E4F0            <1>  and rsp, ~15
  1200 00000D9A 48837D1801                      cmp COUNT, 1
  1201 00000D9F 0F8503100000                    jne L_error_arg_count_1
  1202 00000DA5 488B4520                        mov rax, PARAM(0)
  1203 00000DA9 803802                          cmp byte [rax], T_char
  1204 00000DAC 750C                            jne .L_false
  1205 00000DAE 48B8-                           mov rax, sob_boolean_true
  1205 00000DB0 [0300000000000000] 
  1206 00000DB8 EB0A                            jmp .L_end
  1207                                  .L_false:
  1208 00000DBA 48B8-                           mov rax, sob_boolean_false
  1208 00000DBC [0200000000000000] 
  1209                                  .L_end:
  1210                                          LEAVE
    38 00000DC4 C9                  <1>  leave
  1211 00000DC5 C21800                          ret AND_KILL_FRAME(1)
  1212                                  
  1213                                  L_code_ptr_is_string:
  1214                                          ENTER
    33 00000DC8 C8000000            <1>  enter 0, 0
    34 00000DCC 4883E4F0            <1>  and rsp, ~15
  1215 00000DD0 48837D1801                      cmp COUNT, 1
  1216 00000DD5 0F85CD0F0000                    jne L_error_arg_count_1
  1217 00000DDB 488B4520                        mov rax, PARAM(0)
  1218 00000DDF 803803                          cmp byte [rax], T_string
  1219 00000DE2 750C                            jne .L_false
  1220 00000DE4 48B8-                           mov rax, sob_boolean_true
  1220 00000DE6 [0300000000000000] 
  1221 00000DEE EB0A                            jmp .L_end
  1222                                  .L_false:
  1223 00000DF0 48B8-                           mov rax, sob_boolean_false
  1223 00000DF2 [0200000000000000] 
  1224                                  .L_end:
  1225                                          LEAVE
    38 00000DFA C9                  <1>  leave
  1226 00000DFB C21800                          ret AND_KILL_FRAME(1)
  1227                                  
  1228                                  L_code_ptr_is_symbol:
  1229                                          ENTER
    33 00000DFE C8000000            <1>  enter 0, 0
    34 00000E02 4883E4F0            <1>  and rsp, ~15
  1230 00000E06 48837D1801                      cmp COUNT, 1
  1231 00000E0B 0F85970F0000                    jne L_error_arg_count_1
  1232 00000E11 488B4520                        mov rax, PARAM(0)
  1233 00000E15 803804                          cmp byte [rax], T_symbol
  1234 00000E18 750C                            jne .L_false
  1235 00000E1A 48B8-                           mov rax, sob_boolean_true
  1235 00000E1C [0300000000000000] 
  1236 00000E24 EB0A                            jmp .L_end
  1237                                  .L_false:
  1238 00000E26 48B8-                           mov rax, sob_boolean_false
  1238 00000E28 [0200000000000000] 
  1239                                  .L_end:
  1240                                          LEAVE
    38 00000E30 C9                  <1>  leave
  1241 00000E31 C21800                          ret AND_KILL_FRAME(1)
  1242                                  
  1243                                  L_code_ptr_is_vector:
  1244                                          ENTER
    33 00000E34 C8000000            <1>  enter 0, 0
    34 00000E38 4883E4F0            <1>  and rsp, ~15
  1245 00000E3C 48837D1801                      cmp COUNT, 1
  1246 00000E41 0F85610F0000                    jne L_error_arg_count_1
  1247 00000E47 488B4520                        mov rax, PARAM(0)
  1248 00000E4B 803822                          cmp byte [rax], T_vector
  1249 00000E4E 750C                            jne .L_false
  1250 00000E50 48B8-                           mov rax, sob_boolean_true
  1250 00000E52 [0300000000000000] 
  1251 00000E5A EB0A                            jmp .L_end
  1252                                  .L_false:
  1253 00000E5C 48B8-                           mov rax, sob_boolean_false
  1253 00000E5E [0200000000000000] 
  1254                                  .L_end:
  1255                                          LEAVE
    38 00000E66 C9                  <1>  leave
  1256 00000E67 C21800                          ret AND_KILL_FRAME(1)
  1257                                  
  1258                                  L_code_ptr_is_closure:
  1259                                          ENTER
    33 00000E6A C8000000            <1>  enter 0, 0
    34 00000E6E 4883E4F0            <1>  and rsp, ~15
  1260 00000E72 48837D1801                      cmp COUNT, 1
  1261 00000E77 0F852B0F0000                    jne L_error_arg_count_1
  1262 00000E7D 488B4520                        mov rax, PARAM(0)
  1263 00000E81 803805                          cmp byte [rax], T_closure
  1264 00000E84 750C                            jne .L_false
  1265 00000E86 48B8-                           mov rax, sob_boolean_true
  1265 00000E88 [0300000000000000] 
  1266 00000E90 EB0A                            jmp .L_end
  1267                                  .L_false:
  1268 00000E92 48B8-                           mov rax, sob_boolean_false
  1268 00000E94 [0200000000000000] 
  1269                                  .L_end:
  1270                                          LEAVE
    38 00000E9C C9                  <1>  leave
  1271 00000E9D C21800                          ret AND_KILL_FRAME(1)
  1272                                  
  1273                                  L_code_ptr_is_real:
  1274                                          ENTER
    33 00000EA0 C8000000            <1>  enter 0, 0
    34 00000EA4 4883E4F0            <1>  and rsp, ~15
  1275 00000EA8 48837D1801                      cmp COUNT, 1
  1276 00000EAD 0F85F50E0000                    jne L_error_arg_count_1
  1277 00000EB3 488B4520                        mov rax, PARAM(0)
  1278 00000EB7 803812                          cmp byte [rax], T_real
  1279 00000EBA 750C                            jne .L_false
  1280 00000EBC 48B8-                           mov rax, sob_boolean_true
  1280 00000EBE [0300000000000000] 
  1281 00000EC6 EB0A                            jmp .L_end
  1282                                  .L_false:
  1283 00000EC8 48B8-                           mov rax, sob_boolean_false
  1283 00000ECA [0200000000000000] 
  1284                                  .L_end:
  1285                                          LEAVE
    38 00000ED2 C9                  <1>  leave
  1286 00000ED3 C21800                          ret AND_KILL_FRAME(1)
  1287                                  
  1288                                  L_code_ptr_is_rational:
  1289                                          ENTER
    33 00000ED6 C8000000            <1>  enter 0, 0
    34 00000EDA 4883E4F0            <1>  and rsp, ~15
  1290 00000EDE 48837D1801                      cmp COUNT, 1
  1291 00000EE3 0F85BF0E0000                    jne L_error_arg_count_1
  1292 00000EE9 488B4520                        mov rax, PARAM(0)
  1293 00000EED 803811                          cmp byte [rax], T_rational
  1294 00000EF0 750C                            jne .L_false
  1295 00000EF2 48B8-                           mov rax, sob_boolean_true
  1295 00000EF4 [0300000000000000] 
  1296 00000EFC EB0A                            jmp .L_end
  1297                                  .L_false:
  1298 00000EFE 48B8-                           mov rax, sob_boolean_false
  1298 00000F00 [0200000000000000] 
  1299                                  .L_end:
  1300                                          LEAVE
    38 00000F08 C9                  <1>  leave
  1301 00000F09 C21800                          ret AND_KILL_FRAME(1)
  1302                                  
  1303                                  L_code_ptr_is_boolean:
  1304                                          ENTER
    33 00000F0C C8000000            <1>  enter 0, 0
    34 00000F10 4883E4F0            <1>  and rsp, ~15
  1305 00000F14 48837D1801                      cmp COUNT, 1
  1306 00000F19 0F85890E0000                    jne L_error_arg_count_1
  1307 00000F1F 488B4520                        mov rax, PARAM(0)
  1308 00000F23 8A18                            mov bl, byte [rax]
  1309 00000F25 80E308                          and bl, T_boolean
  1310 00000F28 740C                            je .L_false
  1311 00000F2A 48B8-                           mov rax, sob_boolean_true
  1311 00000F2C [0300000000000000] 
  1312 00000F34 EB0A                            jmp .L_end
  1313                                  .L_false:
  1314 00000F36 48B8-                           mov rax, sob_boolean_false
  1314 00000F38 [0200000000000000] 
  1315                                  .L_end:
  1316                                          LEAVE
    38 00000F40 C9                  <1>  leave
  1317 00000F41 C21800                          ret AND_KILL_FRAME(1)
  1318                                          
  1319                                  L_code_ptr_is_number:
  1320                                          ENTER
    33 00000F44 C8000000            <1>  enter 0, 0
    34 00000F48 4883E4F0            <1>  and rsp, ~15
  1321 00000F4C 48837D1801                      cmp COUNT, 1
  1322 00000F51 0F85510E0000                    jne L_error_arg_count_1
  1323 00000F57 488B4520                        mov rax, PARAM(0)
  1324 00000F5B 8A18                            mov bl, byte [rax]
  1325 00000F5D 80E310                          and bl, T_number
  1326 00000F60 740C                            je .L_false
  1327 00000F62 48B8-                           mov rax, sob_boolean_true
  1327 00000F64 [0300000000000000] 
  1328 00000F6C EB0A                            jmp .L_end
  1329                                  .L_false:
  1330 00000F6E 48B8-                           mov rax, sob_boolean_false
  1330 00000F70 [0200000000000000] 
  1331                                  .L_end:
  1332                                          LEAVE
    38 00000F78 C9                  <1>  leave
  1333 00000F79 C21800                          ret AND_KILL_FRAME(1)
  1334                                          
  1335                                  L_code_ptr_is_collection:
  1336                                          ENTER
    33 00000F7C C8000000            <1>  enter 0, 0
    34 00000F80 4883E4F0            <1>  and rsp, ~15
  1337 00000F84 48837D1801                      cmp COUNT, 1
  1338 00000F89 0F85190E0000                    jne L_error_arg_count_1
  1339 00000F8F 488B4520                        mov rax, PARAM(0)
  1340 00000F93 8A18                            mov bl, byte [rax]
  1341 00000F95 80E320                          and bl, T_collection
  1342 00000F98 740C                            je .L_false
  1343 00000F9A 48B8-                           mov rax, sob_boolean_true
  1343 00000F9C [0300000000000000] 
  1344 00000FA4 EB0A                            jmp .L_end
  1345                                  .L_false:
  1346 00000FA6 48B8-                           mov rax, sob_boolean_false
  1346 00000FA8 [0200000000000000] 
  1347                                  .L_end:
  1348                                          LEAVE
    38 00000FB0 C9                  <1>  leave
  1349 00000FB1 C21800                          ret AND_KILL_FRAME(1)
  1350                                  
  1351                                  L_code_ptr_cons:
  1352                                          ENTER
    33 00000FB4 C8000000            <1>  enter 0, 0
    34 00000FB8 4883E4F0            <1>  and rsp, ~15
  1353 00000FBC 48837D1802                      cmp COUNT, 2
  1354 00000FC1 0F85160E0000                    jne L_error_arg_count_2
  1355 00000FC7 BF11000000                      mov rdi, (1 + 8 + 8)
  1356 00000FCC E8B7F6FFFF                      call malloc
  1357 00000FD1 C60021                          mov byte [rax], T_pair
  1358 00000FD4 488B5D20                        mov rbx, PARAM(0)
  1359 00000FD8 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1360 00000FDC 488B5D28                        mov rbx, PARAM(1)
  1361 00000FE0 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1362                                          LEAVE
    38 00000FE4 C9                  <1>  leave
  1363 00000FE5 C22000                          ret AND_KILL_FRAME(2)
  1364                                  
  1365                                  L_code_ptr_display_sexpr:
  1366                                          ENTER
    33 00000FE8 C8000000            <1>  enter 0, 0
    34 00000FEC 4883E4F0            <1>  and rsp, ~15
  1367 00000FF0 48837D1801                      cmp COUNT, 1
  1368 00000FF5 0F85AD0D0000                    jne L_error_arg_count_1
  1369 00000FFB 488B7D20                        mov rdi, PARAM(0)
  1370 00000FFF E89FF6FFFF                      call print_sexpr
  1371 00001004 48B8-                           mov rax, sob_void
  1371 00001006 [0000000000000000] 
  1372                                          LEAVE
    38 0000100E C9                  <1>  leave
  1373 0000100F C21800                          ret AND_KILL_FRAME(1)
  1374                                  
  1375                                  L_code_ptr_write_char:
  1376                                          ENTER
    33 00001012 C8000000            <1>  enter 0, 0
    34 00001016 4883E4F0            <1>  and rsp, ~15
  1377 0000101A 48837D1801                      cmp COUNT, 1
  1378 0000101F 0F85830D0000                    jne L_error_arg_count_1
  1379 00001025 488B4520                        mov rax, PARAM(0)
  1380                                          assert_char(rax)
    42 00001029 803802              <1>  cmp byte [%1], %2
    43 0000102C 0F854A0E0000        <1>  jne L_error_incorrect_type
  1381 00001032 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1382 00001035 4825FF000000                    and rax, 255
  1383 0000103B 48BF-                           mov rdi, fmt_char
  1383 0000103D [7B02000000000000] 
  1384 00001045 4889C6                          mov rsi, rax
  1385 00001048 B800000000                      mov rax, 0
  1386                                  	ENTER
    33 0000104D C8000000            <1>  enter 0, 0
    34 00001051 4883E4F0            <1>  and rsp, ~15
  1387 00001055 E8(00000000)                    call printf
  1388                                  	LEAVE
    38 0000105A C9                  <1>  leave
  1389 0000105B 48B8-                           mov rax, sob_void
  1389 0000105D [0000000000000000] 
  1390                                          LEAVE
    38 00001065 C9                  <1>  leave
  1391 00001066 C21800                          ret AND_KILL_FRAME(1)
  1392                                  
  1393                                  L_code_ptr_car:
  1394                                          ENTER
    33 00001069 C8000000            <1>  enter 0, 0
    34 0000106D 4883E4F0            <1>  and rsp, ~15
  1395 00001071 48837D1801                      cmp COUNT, 1
  1396 00001076 0F852C0D0000                    jne L_error_arg_count_1
  1397 0000107C 488B4520                        mov rax, PARAM(0)
  1398                                          assert_pair(rax)
    42 00001080 803821              <1>  cmp byte [%1], %2
    43 00001083 0F85F30D0000        <1>  jne L_error_incorrect_type
  1399 00001089 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1400                                          LEAVE
    38 0000108D C9                  <1>  leave
  1401 0000108E C21800                          ret AND_KILL_FRAME(1)
  1402                                          
  1403                                  L_code_ptr_cdr:
  1404                                          ENTER
    33 00001091 C8000000            <1>  enter 0, 0
    34 00001095 4883E4F0            <1>  and rsp, ~15
  1405 00001099 48837D1801                      cmp COUNT, 1
  1406 0000109E 0F85040D0000                    jne L_error_arg_count_1
  1407 000010A4 488B4520                        mov rax, PARAM(0)
  1408                                          assert_pair(rax)
    42 000010A8 803821              <1>  cmp byte [%1], %2
    43 000010AB 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1409 000010B1 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1410                                          LEAVE
    38 000010B5 C9                  <1>  leave
  1411 000010B6 C21800                          ret AND_KILL_FRAME(1)
  1412                                          
  1413                                  L_code_ptr_string_length:
  1414                                          ENTER
    33 000010B9 C8000000            <1>  enter 0, 0
    34 000010BD 4883E4F0            <1>  and rsp, ~15
  1415 000010C1 48837D1801                      cmp COUNT, 1
  1416 000010C6 0F85DC0C0000                    jne L_error_arg_count_1
  1417 000010CC 488B4520                        mov rax, PARAM(0)
  1418                                          assert_string(rax)
    42 000010D0 803803              <1>  cmp byte [%1], %2
    43 000010D3 0F85A30D0000        <1>  jne L_error_incorrect_type
  1419 000010D9 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1420 000010DD E83A0C0000                      call make_integer
  1421                                          LEAVE
    38 000010E2 C9                  <1>  leave
  1422 000010E3 C21800                          ret AND_KILL_FRAME(1)
  1423                                  
  1424                                  L_code_ptr_vector_length:
  1425                                          ENTER
    33 000010E6 C8000000            <1>  enter 0, 0
    34 000010EA 4883E4F0            <1>  and rsp, ~15
  1426 000010EE 48837D1801                      cmp COUNT, 1
  1427 000010F3 0F85AF0C0000                    jne L_error_arg_count_1
  1428 000010F9 488B4520                        mov rax, PARAM(0)
  1429                                          assert_vector(rax)
    42 000010FD 803822              <1>  cmp byte [%1], %2
    43 00001100 0F85760D0000        <1>  jne L_error_incorrect_type
  1430 00001106 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1431 0000110A E80D0C0000                      call make_integer
  1432                                          LEAVE
    38 0000110F C9                  <1>  leave
  1433 00001110 C21800                          ret AND_KILL_FRAME(1)
  1434                                  
  1435                                  L_code_ptr_real_to_integer:
  1436                                          ENTER
    33 00001113 C8000000            <1>  enter 0, 0
    34 00001117 4883E4F0            <1>  and rsp, ~15
  1437 0000111B 48837D1801                      cmp COUNT, 1
  1438 00001120 0F85820C0000                    jne L_error_arg_count_1
  1439 00001126 488B5D20                        mov rbx, PARAM(0)
  1440                                          assert_real(rbx)
    42 0000112A 803B12              <1>  cmp byte [%1], %2
    43 0000112D 0F85490D0000        <1>  jne L_error_incorrect_type
  1441 00001133 F20F104301                      movsd xmm0, qword [rbx + 1]
  1442 00001138 F2480F2CF8                      cvttsd2si rdi, xmm0
  1443 0000113D E8DA0B0000                      call make_integer
  1444                                          LEAVE
    38 00001142 C9                  <1>  leave
  1445 00001143 C21800                          ret AND_KILL_FRAME(1)
  1446                                  
  1447                                  L_code_ptr_exit:
  1448                                          ENTER
    33 00001146 C8000000            <1>  enter 0, 0
    34 0000114A 4883E4F0            <1>  and rsp, ~15
  1449 0000114E 48837D1800                      cmp COUNT, 0
  1450 00001153 0F851A0C0000                    jne L_error_arg_count_0
  1451 00001159 B800000000                      mov rax, 0
  1452 0000115E E8(00000000)                    call exit
  1453                                  
  1454                                  L_code_ptr_integer_to_real:
  1455                                          ENTER
    33 00001163 C8000000            <1>  enter 0, 0
    34 00001167 4883E4F0            <1>  and rsp, ~15
  1456 0000116B 48837D1801                      cmp COUNT, 1
  1457 00001170 0F85320C0000                    jne L_error_arg_count_1
  1458 00001176 488B4520                        mov rax, PARAM(0)
  1459                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000117A 803811              <2>  cmp byte [%1], %2
    43 0000117D 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 00001183 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001188 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1460 0000118E FF7001                          push qword [rax + 1]
  1461 00001191 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1462 00001197 E8640B0000                      call make_real
  1463                                          LEAVE
    38 0000119C C9                  <1>  leave
  1464 0000119D C21800                          ret AND_KILL_FRAME(1)
  1465                                  
  1466                                  L_code_ptr_rational_to_real:
  1467                                          ENTER
    33 000011A0 C8000000            <1>  enter 0, 0
    34 000011A4 4883E4F0            <1>  and rsp, ~15
  1468 000011A8 48837D1801                      cmp COUNT, 1
  1469 000011AD 0F85F50B0000                    jne L_error_arg_count_1
  1470 000011B3 488B4520                        mov rax, PARAM(0)
  1471                                          assert_rational(rax)
    42 000011B7 803811              <1>  cmp byte [%1], %2
    43 000011BA 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1472 000011C0 FF7001                          push qword [rax + 1]
  1473 000011C3 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1474 000011C9 FF7009                          push qword [rax + 1 + 8]
  1475 000011CC F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1476 000011D2 F20F5EC1                        divsd xmm0, xmm1
  1477 000011D6 E8250B0000                      call make_real
  1478                                          LEAVE
    38 000011DB C9                  <1>  leave
  1479 000011DC C21800                          ret AND_KILL_FRAME(1)
  1480                                  
  1481                                  L_code_ptr_char_to_integer:
  1482                                          ENTER
    33 000011DF C8000000            <1>  enter 0, 0
    34 000011E3 4883E4F0            <1>  and rsp, ~15
  1483 000011E7 48837D1801                      cmp COUNT, 1
  1484 000011EC 0F85B60B0000                    jne L_error_arg_count_1
  1485 000011F2 488B4520                        mov rax, PARAM(0)
  1486                                          assert_char(rax)
    42 000011F6 803802              <1>  cmp byte [%1], %2
    43 000011F9 0F857D0C0000        <1>  jne L_error_incorrect_type
  1487 000011FF 8A4001                          mov al, byte [rax + 1]
  1488 00001202 4825FF000000                    and rax, 255
  1489 00001208 4889C7                          mov rdi, rax
  1490 0000120B E80C0B0000                      call make_integer
  1491                                          LEAVE
    38 00001210 C9                  <1>  leave
  1492 00001211 C21800                          ret AND_KILL_FRAME(1)
  1493                                  
  1494                                  L_code_ptr_integer_to_char:
  1495                                          ENTER
    33 00001214 C8000000            <1>  enter 0, 0
    34 00001218 4883E4F0            <1>  and rsp, ~15
  1496 0000121C 48837D1801                      cmp COUNT, 1
  1497 00001221 0F85810B0000                    jne L_error_arg_count_1
  1498 00001227 488B4520                        mov rax, PARAM(0)
  1499                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000122B 803811              <2>  cmp byte [%1], %2
    43 0000122E 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001234 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001239 0F853D0C0000        <1>  jne L_error_incorrect_type
  1500 0000123F 488B5801                        mov rbx, qword [rax + 1]
  1501 00001243 4883FB00                        cmp rbx, 0
  1502 00001247 0F8EF50A0000                    jle L_error_integer_range
  1503 0000124D 4881FB00010000                  cmp rbx, 256
  1504 00001254 0F8DE80A0000                    jge L_error_integer_range
  1505 0000125A BF02000000                      mov rdi, (1 + 1)
  1506 0000125F E824F4FFFF                      call malloc
  1507 00001264 C60002                          mov byte [rax], T_char
  1508 00001267 885801                          mov byte [rax + 1], bl
  1509                                          LEAVE
    38 0000126A C9                  <1>  leave
  1510 0000126B C21800                          ret AND_KILL_FRAME(1)
  1511                                  
  1512                                  L_code_ptr_trng:
  1513                                          ENTER
    33 0000126E C8000000            <1>  enter 0, 0
    34 00001272 4883E4F0            <1>  and rsp, ~15
  1514 00001276 48837D1800                      cmp COUNT, 0
  1515 0000127B 0F85F20A0000                    jne L_error_arg_count_0
  1516 00001281 480FC7F7                        rdrand rdi
  1517 00001285 48D1EF                          shr rdi, 1
  1518 00001288 E88F0A0000                      call make_integer
  1519                                          LEAVE
    38 0000128D C9                  <1>  leave
  1520 0000128E C21000                          ret AND_KILL_FRAME(0)
  1521                                  
  1522                                  L_code_ptr_is_zero:
  1523                                          ENTER
    33 00001291 C8000000            <1>  enter 0, 0
    34 00001295 4883E4F0            <1>  and rsp, ~15
  1524 00001299 48837D1801                      cmp COUNT, 1
  1525 0000129E 0F85040B0000                    jne L_error_arg_count_1
  1526 000012A4 488B4520                        mov rax, PARAM(0)
  1527 000012A8 803811                          cmp byte [rax], T_rational
  1528 000012AB 740A                            je .L_rational
  1529 000012AD 803812                          cmp byte [rax], T_real
  1530 000012B0 740E                            je .L_real
  1531 000012B2 E9C50B0000                      jmp L_error_incorrect_type
  1532                                  .L_rational:
  1533 000012B7 4883780100                      cmp qword [rax + 1], 0
  1534 000012BC 7420                            je .L_zero
  1535 000012BE EB12                            jmp .L_not_zero
  1536                                  .L_real:
  1537 000012C0 660FEFC0                        pxor xmm0, xmm0
  1538 000012C4 FF7001                          push qword [rax + 1]
  1539 000012C7 F20F100C24                      movsd xmm1, qword [rsp]
  1540 000012CC 660F2EC1                        ucomisd xmm0, xmm1
  1541 000012D0 740C                            je .L_zero
  1542                                  .L_not_zero:
  1543 000012D2 48B8-                           mov rax, sob_boolean_false
  1543 000012D4 [0200000000000000] 
  1544 000012DC EB0A                            jmp .L_end
  1545                                  .L_zero:
  1546 000012DE 48B8-                           mov rax, sob_boolean_true
  1546 000012E0 [0300000000000000] 
  1547                                  .L_end:
  1548                                          LEAVE
    38 000012E8 C9                  <1>  leave
  1549 000012E9 C21800                          ret AND_KILL_FRAME(1)
  1550                                  
  1551                                  L_code_ptr_is_integer:
  1552                                          ENTER
    33 000012EC C8000000            <1>  enter 0, 0
    34 000012F0 4883E4F0            <1>  and rsp, ~15
  1553 000012F4 48837D1801                      cmp COUNT, 1
  1554 000012F9 0F85A90A0000                    jne L_error_arg_count_1
  1555 000012FF 488B4520                        mov rax, PARAM(0)
  1556 00001303 803811                          cmp byte [rax], T_rational
  1557 00001306 7513                            jne .L_false
  1558 00001308 4883780901                      cmp qword [rax + 1 + 8], 1
  1559 0000130D 750C                            jne .L_false
  1560 0000130F 48B8-                           mov rax, sob_boolean_true
  1560 00001311 [0300000000000000] 
  1561 00001319 EB0A                            jmp .L_exit
  1562                                  .L_false:
  1563 0000131B 48B8-                           mov rax, sob_boolean_false
  1563 0000131D [0200000000000000] 
  1564                                  .L_exit:
  1565                                          LEAVE
    38 00001325 C9                  <1>  leave
  1566 00001326 C21800                          ret AND_KILL_FRAME(1)
  1567                                  
  1568                                  L_code_ptr_raw_bin_add_rr:
  1569                                          ENTER
    33 00001329 C8000000            <1>  enter 0, 0
    34 0000132D 4883E4F0            <1>  and rsp, ~15
  1570 00001331 48837D1802                      cmp COUNT, 2
  1571 00001336 0F85A10A0000                    jne L_error_arg_count_2
  1572 0000133C 488B5D20                        mov rbx, PARAM(0)
  1573                                          assert_real(rbx)
    42 00001340 803B12              <1>  cmp byte [%1], %2
    43 00001343 0F85330B0000        <1>  jne L_error_incorrect_type
  1574 00001349 488B4D28                        mov rcx, PARAM(1)
  1575                                          assert_real(rcx)
    42 0000134D 803912              <1>  cmp byte [%1], %2
    43 00001350 0F85260B0000        <1>  jne L_error_incorrect_type
  1576 00001356 F20F104301                      movsd xmm0, qword [rbx + 1]
  1577 0000135B F20F104901                      movsd xmm1, qword [rcx + 1]
  1578 00001360 F20F58C1                        addsd xmm0, xmm1
  1579 00001364 E897090000                      call make_real
  1580                                          LEAVE
    38 00001369 C9                  <1>  leave
  1581 0000136A C22000                          ret AND_KILL_FRAME(2)
  1582                                  
  1583                                  L_code_ptr_raw_bin_sub_rr:
  1584                                          ENTER
    33 0000136D C8000000            <1>  enter 0, 0
    34 00001371 4883E4F0            <1>  and rsp, ~15
  1585 00001375 48837D1802                      cmp COUNT, 2
  1586 0000137A 0F855D0A0000                    jne L_error_arg_count_2
  1587 00001380 488B5D20                        mov rbx, PARAM(0)
  1588                                          assert_real(rbx)
    42 00001384 803B12              <1>  cmp byte [%1], %2
    43 00001387 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1589 0000138D 488B4D28                        mov rcx, PARAM(1)
  1590                                          assert_real(rcx)
    42 00001391 803912              <1>  cmp byte [%1], %2
    43 00001394 0F85E20A0000        <1>  jne L_error_incorrect_type
  1591 0000139A F20F104301                      movsd xmm0, qword [rbx + 1]
  1592 0000139F F20F104901                      movsd xmm1, qword [rcx + 1]
  1593 000013A4 F20F5CC1                        subsd xmm0, xmm1
  1594 000013A8 E853090000                      call make_real
  1595                                          LEAVE
    38 000013AD C9                  <1>  leave
  1596 000013AE C22000                          ret AND_KILL_FRAME(2)
  1597                                  
  1598                                  L_code_ptr_raw_bin_mul_rr:
  1599                                          ENTER
    33 000013B1 C8000000            <1>  enter 0, 0
    34 000013B5 4883E4F0            <1>  and rsp, ~15
  1600 000013B9 48837D1802                      cmp COUNT, 2
  1601 000013BE 0F85190A0000                    jne L_error_arg_count_2
  1602 000013C4 488B5D20                        mov rbx, PARAM(0)
  1603                                          assert_real(rbx)
    42 000013C8 803B12              <1>  cmp byte [%1], %2
    43 000013CB 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1604 000013D1 488B4D28                        mov rcx, PARAM(1)
  1605                                          assert_real(rcx)
    42 000013D5 803912              <1>  cmp byte [%1], %2
    43 000013D8 0F859E0A0000        <1>  jne L_error_incorrect_type
  1606 000013DE F20F104301                      movsd xmm0, qword [rbx + 1]
  1607 000013E3 F20F104901                      movsd xmm1, qword [rcx + 1]
  1608 000013E8 F20F59C1                        mulsd xmm0, xmm1
  1609 000013EC E80F090000                      call make_real
  1610                                          LEAVE
    38 000013F1 C9                  <1>  leave
  1611 000013F2 C22000                          ret AND_KILL_FRAME(2)
  1612                                  
  1613                                  L_code_ptr_raw_bin_div_rr:
  1614                                          ENTER
    33 000013F5 C8000000            <1>  enter 0, 0
    34 000013F9 4883E4F0            <1>  and rsp, ~15
  1615 000013FD 48837D1802                      cmp COUNT, 2
  1616 00001402 0F85D5090000                    jne L_error_arg_count_2
  1617 00001408 488B5D20                        mov rbx, PARAM(0)
  1618                                          assert_real(rbx)
    42 0000140C 803B12              <1>  cmp byte [%1], %2
    43 0000140F 0F85670A0000        <1>  jne L_error_incorrect_type
  1619 00001415 488B4D28                        mov rcx, PARAM(1)
  1620                                          assert_real(rcx)
    42 00001419 803912              <1>  cmp byte [%1], %2
    43 0000141C 0F855A0A0000        <1>  jne L_error_incorrect_type
  1621 00001422 F20F104301                      movsd xmm0, qword [rbx + 1]
  1622 00001427 F20F104901                      movsd xmm1, qword [rcx + 1]
  1623 0000142C 660FEFD2                        pxor xmm2, xmm2
  1624 00001430 660F2ECA                        ucomisd xmm1, xmm2
  1625 00001434 0F84730A0000                    je L_error_division_by_zero
  1626 0000143A F20F5EC1                        divsd xmm0, xmm1
  1627 0000143E E8BD080000                      call make_real
  1628                                          LEAVE
    38 00001443 C9                  <1>  leave
  1629 00001444 C22000                          ret AND_KILL_FRAME(2)
  1630                                  
  1631                                  L_code_ptr_raw_bin_add_qq:
  1632                                          ENTER
    33 00001447 C8000000            <1>  enter 0, 0
    34 0000144B 4883E4F0            <1>  and rsp, ~15
  1633 0000144F 48837D1802                      cmp COUNT, 2
  1634 00001454 0F8583090000                    jne L_error_arg_count_2
  1635 0000145A 4C8B4520                        mov r8, PARAM(0)
  1636                                          assert_rational(r8)
    42 0000145E 41803811            <1>  cmp byte [%1], %2
    43 00001462 0F85140A0000        <1>  jne L_error_incorrect_type
  1637 00001468 4C8B4D28                        mov r9, PARAM(1)
  1638                                          assert_rational(r9)
    42 0000146C 41803911            <1>  cmp byte [%1], %2
    43 00001470 0F85060A0000        <1>  jne L_error_incorrect_type
  1639 00001476 498B4001                        mov rax, qword [r8 + 1] ; num1
  1640 0000147A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1641 0000147E 4899                            cqo
  1642 00001480 48F7EB                          imul rbx
  1643 00001483 4889C6                          mov rsi, rax
  1644 00001486 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1645 0000148A 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1646 0000148E 4899                            cqo
  1647 00001490 48F7EB                          imul rbx
  1648 00001493 4801C6                          add rsi, rax
  1649 00001496 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1650 0000149A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1651 0000149E 4899                            cqo
  1652 000014A0 48F7EB                          imul rbx
  1653 000014A3 4889C7                          mov rdi, rax
  1654 000014A6 E827010000                      call normalize_rational
  1655                                          LEAVE
    38 000014AB C9                  <1>  leave
  1656 000014AC C22000                          ret AND_KILL_FRAME(2)
  1657                                  
  1658                                  L_code_ptr_raw_bin_sub_qq:
  1659                                          ENTER
    33 000014AF C8000000            <1>  enter 0, 0
    34 000014B3 4883E4F0            <1>  and rsp, ~15
  1660 000014B7 48837D1802                      cmp COUNT, 2
  1661 000014BC 0F851B090000                    jne L_error_arg_count_2
  1662 000014C2 4C8B4520                        mov r8, PARAM(0)
  1663                                          assert_rational(r8)
    42 000014C6 41803811            <1>  cmp byte [%1], %2
    43 000014CA 0F85AC090000        <1>  jne L_error_incorrect_type
  1664 000014D0 4C8B4D28                        mov r9, PARAM(1)
  1665                                          assert_rational(r9)
    42 000014D4 41803911            <1>  cmp byte [%1], %2
    43 000014D8 0F859E090000        <1>  jne L_error_incorrect_type
  1666 000014DE 498B4001                        mov rax, qword [r8 + 1] ; num1
  1667 000014E2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1668 000014E6 4899                            cqo
  1669 000014E8 48F7EB                          imul rbx
  1670 000014EB 4889C6                          mov rsi, rax
  1671 000014EE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1672 000014F2 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1673 000014F6 4899                            cqo
  1674 000014F8 48F7EB                          imul rbx
  1675 000014FB 4829C6                          sub rsi, rax
  1676 000014FE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1677 00001502 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1678 00001506 4899                            cqo
  1679 00001508 48F7EB                          imul rbx
  1680 0000150B 4889C7                          mov rdi, rax
  1681 0000150E E8BF000000                      call normalize_rational
  1682                                          LEAVE
    38 00001513 C9                  <1>  leave
  1683 00001514 C22000                          ret AND_KILL_FRAME(2)
  1684                                  
  1685                                  L_code_ptr_raw_bin_mul_qq:
  1686                                          ENTER
    33 00001517 C8000000            <1>  enter 0, 0
    34 0000151B 4883E4F0            <1>  and rsp, ~15
  1687 0000151F 48837D1802                      cmp COUNT, 2
  1688 00001524 0F85B3080000                    jne L_error_arg_count_2
  1689 0000152A 4C8B4520                        mov r8, PARAM(0)
  1690                                          assert_rational(r8)
    42 0000152E 41803811            <1>  cmp byte [%1], %2
    43 00001532 0F8544090000        <1>  jne L_error_incorrect_type
  1691 00001538 4C8B4D28                        mov r9, PARAM(1)
  1692                                          assert_rational(r9)
    42 0000153C 41803911            <1>  cmp byte [%1], %2
    43 00001540 0F8536090000        <1>  jne L_error_incorrect_type
  1693 00001546 498B4001                        mov rax, qword [r8 + 1] ; num1
  1694 0000154A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1695 0000154E 4899                            cqo
  1696 00001550 48F7EB                          imul rbx
  1697 00001553 4889C6                          mov rsi, rax
  1698 00001556 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1699 0000155A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1700 0000155E 4899                            cqo
  1701 00001560 48F7EB                          imul rbx
  1702 00001563 4889C7                          mov rdi, rax
  1703 00001566 E867000000                      call normalize_rational
  1704                                          LEAVE
    38 0000156B C9                  <1>  leave
  1705 0000156C C22000                          ret AND_KILL_FRAME(2)
  1706                                          
  1707                                  L_code_ptr_raw_bin_div_qq:
  1708                                          ENTER
    33 0000156F C8000000            <1>  enter 0, 0
    34 00001573 4883E4F0            <1>  and rsp, ~15
  1709 00001577 48837D1802                      cmp COUNT, 2
  1710 0000157C 0F855B080000                    jne L_error_arg_count_2
  1711 00001582 4C8B4520                        mov r8, PARAM(0)
  1712                                          assert_rational(r8)
    42 00001586 41803811            <1>  cmp byte [%1], %2
    43 0000158A 0F85EC080000        <1>  jne L_error_incorrect_type
  1713 00001590 4C8B4D28                        mov r9, PARAM(1)
  1714                                          assert_rational(r9)
    42 00001594 41803911            <1>  cmp byte [%1], %2
    43 00001598 0F85DE080000        <1>  jne L_error_incorrect_type
  1715 0000159E 4983790100                      cmp qword [r9 + 1], 0
  1716 000015A3 0F8404090000                    je L_error_division_by_zero
  1717 000015A9 498B4001                        mov rax, qword [r8 + 1] ; num1
  1718 000015AD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1719 000015B1 4899                            cqo
  1720 000015B3 48F7EB                          imul rbx
  1721 000015B6 4889C6                          mov rsi, rax
  1722 000015B9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1723 000015BD 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1724 000015C1 4899                            cqo
  1725 000015C3 48F7EB                          imul rbx
  1726 000015C6 4889C7                          mov rdi, rax
  1727 000015C9 E804000000                      call normalize_rational
  1728                                          LEAVE
    38 000015CE C9                  <1>  leave
  1729 000015CF C22000                          ret AND_KILL_FRAME(2)
  1730                                          
  1731                                  normalize_rational:
  1732 000015D2 56                              push rsi
  1733 000015D3 57                              push rdi
  1734 000015D4 E839000000                      call gcd
  1735 000015D9 4889C3                          mov rbx, rax
  1736 000015DC 58                              pop rax
  1737 000015DD 4899                            cqo
  1738 000015DF 48F7FB                          idiv rbx
  1739 000015E2 4989C0                          mov r8, rax
  1740 000015E5 58                              pop rax
  1741 000015E6 4899                            cqo
  1742 000015E8 48F7FB                          idiv rbx
  1743 000015EB 4989C1                          mov r9, rax
  1744 000015EE BF11000000                      mov rdi, (1 + 8 + 8)
  1745 000015F3 E890F0FFFF                      call malloc
  1746 000015F8 C60011                          mov byte [rax], T_rational
  1747 000015FB 4C894801                        mov qword [rax + 1], r9
  1748 000015FF 4C894009                        mov qword [rax + 1 + 8], r8
  1749 00001603 C3                              ret
  1750                                  
  1751                                  iabs:
  1752 00001604 4889F8                          mov rax, rdi
  1753 00001607 4883F800                        cmp rax, 0
  1754 0000160B 7C01                            jl .Lneg
  1755 0000160D C3                              ret
  1756                                  .Lneg:
  1757 0000160E 48F7D8                          neg rax
  1758 00001611 C3                              ret
  1759                                  
  1760                                  gcd:
  1761 00001612 E8EDFFFFFF                      call iabs
  1762 00001617 4889C3                          mov rbx, rax
  1763 0000161A 4889F7                          mov rdi, rsi
  1764 0000161D E8E2FFFFFF                      call iabs
  1765 00001622 4883F800                        cmp rax, 0
  1766 00001626 7502                            jne .L0
  1767 00001628 4893                            xchg rax, rbx
  1768                                  .L0:
  1769 0000162A 4883FB00                        cmp rbx, 0
  1770 0000162E 740C                            je .L1
  1771 00001630 4899                            cqo
  1772 00001632 48F7F3                          div rbx
  1773 00001635 4889D0                          mov rax, rdx
  1774 00001638 4893                            xchg rax, rbx
  1775 0000163A EBEE                            jmp .L0
  1776                                  .L1:
  1777 0000163C C3                              ret
  1778                                  
  1779                                  L_code_ptr_error:
  1780                                          ENTER
    33 0000163D C8000000            <1>  enter 0, 0
    34 00001641 4883E4F0            <1>  and rsp, ~15
  1781 00001645 48837D1802                      cmp COUNT, 2
  1782 0000164A 0F858D070000                    jne L_error_arg_count_2
  1783 00001650 488B7520                        mov rsi, PARAM(0)
  1784                                          assert_symbol(rsi)
    42 00001654 803E04              <1>  cmp byte [%1], %2
    43 00001657 0F851F080000        <1>  jne L_error_incorrect_type
  1785 0000165D 488B7528                        mov rsi, PARAM(1)
  1786                                          assert_string(rsi)
    42 00001661 803E03              <1>  cmp byte [%1], %2
    43 00001664 0F8512080000        <1>  jne L_error_incorrect_type
  1787 0000166A 48BF-                           mov rdi, fmt_scheme_error_part_1
  1787 0000166C [B303000000000000] 
  1788 00001674 B800000000                      mov rax, 0
  1789                                  	ENTER
    33 00001679 C8000000            <1>  enter 0, 0
    34 0000167D 4883E4F0            <1>  and rsp, ~15
  1790 00001681 E8(00000000)                    call printf
  1791                                  	LEAVE
    38 00001686 C9                  <1>  leave
  1792 00001687 488B7D20                        mov rdi, PARAM(0)
  1793 0000168B E813F0FFFF                      call print_sexpr
  1794 00001690 48BF-                           mov rdi, fmt_scheme_error_part_2
  1794 00001692 [C703000000000000] 
  1795 0000169A B800000000                      mov rax, 0
  1796                                  	ENTER
    33 0000169F C8000000            <1>  enter 0, 0
    34 000016A3 4883E4F0            <1>  and rsp, ~15
  1797 000016A7 E8(00000000)                    call printf
  1798                                  	LEAVE
    38 000016AC C9                  <1>  leave
  1799 000016AD 488B4528                        mov rax, PARAM(1)       ; sob_string
  1800 000016B1 BE01000000                      mov rsi, 1              ; size = 1 byte
  1801 000016B6 488B5001                        mov rdx, qword [rax + 1] ; length
  1802 000016BA 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1803 000016BE 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1804 000016C6 E8(00000000)                    call fwrite
  1805 000016CB 48BF-                           mov rdi, fmt_scheme_error_part_3
  1805 000016CD [0904000000000000] 
  1806 000016D5 B800000000                      mov rax, 0
  1807                                  	ENTER
    33 000016DA C8000000            <1>  enter 0, 0
    34 000016DE 4883E4F0            <1>  and rsp, ~15
  1808 000016E2 E8(00000000)                    call printf
  1809                                  	LEAVE
    38 000016E7 C9                  <1>  leave
  1810 000016E8 48C7C0F7FFFFFF                  mov rax, -9
  1811 000016EF E8(00000000)                    call exit
  1812                                  
  1813                                  L_code_ptr_raw_less_than_rr:
  1814                                          ENTER
    33 000016F4 C8000000            <1>  enter 0, 0
    34 000016F8 4883E4F0            <1>  and rsp, ~15
  1815 000016FC 48837D1802                      cmp COUNT, 2
  1816 00001701 0F85D6060000                    jne L_error_arg_count_2
  1817 00001707 488B7520                        mov rsi, PARAM(0)
  1818                                          assert_real(rsi)
    42 0000170B 803E12              <1>  cmp byte [%1], %2
    43 0000170E 0F8568070000        <1>  jne L_error_incorrect_type
  1819 00001714 488B7D28                        mov rdi, PARAM(1)
  1820                                          assert_real(rdi)
    42 00001718 803F12              <1>  cmp byte [%1], %2
    43 0000171B 0F855B070000        <1>  jne L_error_incorrect_type
  1821 00001721 F20F104601                      movsd xmm0, qword [rsi + 1]
  1822 00001726 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1823 0000172B 660F2FC1                        comisd xmm0, xmm1
  1824 0000172F 730C                            jae .L_false
  1825 00001731 48B8-                           mov rax, sob_boolean_true
  1825 00001733 [0300000000000000] 
  1826 0000173B EB0A                            jmp .L_exit
  1827                                  .L_false:
  1828 0000173D 48B8-                           mov rax, sob_boolean_false
  1828 0000173F [0200000000000000] 
  1829                                  .L_exit:
  1830                                          LEAVE
    38 00001747 C9                  <1>  leave
  1831 00001748 C22000                          ret AND_KILL_FRAME(2)
  1832                                          
  1833                                  L_code_ptr_raw_less_than_qq:
  1834                                          ENTER
    33 0000174B C8000000            <1>  enter 0, 0
    34 0000174F 4883E4F0            <1>  and rsp, ~15
  1835 00001753 48837D1802                      cmp COUNT, 2
  1836 00001758 0F857F060000                    jne L_error_arg_count_2
  1837 0000175E 488B7520                        mov rsi, PARAM(0)
  1838                                          assert_rational(rsi)
    42 00001762 803E11              <1>  cmp byte [%1], %2
    43 00001765 0F8511070000        <1>  jne L_error_incorrect_type
  1839 0000176B 488B7D28                        mov rdi, PARAM(1)
  1840                                          assert_rational(rdi)
    42 0000176F 803F11              <1>  cmp byte [%1], %2
    43 00001772 0F8504070000        <1>  jne L_error_incorrect_type
  1841 00001778 488B4601                        mov rax, qword [rsi + 1] ; num1
  1842 0000177C 4899                            cqo
  1843 0000177E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1844 00001782 4889C1                          mov rcx, rax
  1845 00001785 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1846 00001789 4899                            cqo
  1847 0000178B 48F76F01                        imul qword [rdi + 1]          ; num2
  1848 0000178F 4829C1                          sub rcx, rax
  1849 00001792 7D0C                            jge .L_false
  1850 00001794 48B8-                           mov rax, sob_boolean_true
  1850 00001796 [0300000000000000] 
  1851 0000179E EB0A                            jmp .L_exit
  1852                                  .L_false:
  1853 000017A0 48B8-                           mov rax, sob_boolean_false
  1853 000017A2 [0200000000000000] 
  1854                                  .L_exit:
  1855                                          LEAVE
    38 000017AA C9                  <1>  leave
  1856 000017AB C22000                          ret AND_KILL_FRAME(2)
  1857                                  
  1858                                  L_code_ptr_raw_equal_rr:
  1859                                          ENTER
    33 000017AE C8000000            <1>  enter 0, 0
    34 000017B2 4883E4F0            <1>  and rsp, ~15
  1860 000017B6 48837D1802                      cmp COUNT, 2
  1861 000017BB 0F851C060000                    jne L_error_arg_count_2
  1862 000017C1 488B7520                        mov rsi, PARAM(0)
  1863                                          assert_real(rsi)
    42 000017C5 803E12              <1>  cmp byte [%1], %2
    43 000017C8 0F85AE060000        <1>  jne L_error_incorrect_type
  1864 000017CE 488B7D28                        mov rdi, PARAM(1)
  1865                                          assert_real(rdi)
    42 000017D2 803F12              <1>  cmp byte [%1], %2
    43 000017D5 0F85A1060000        <1>  jne L_error_incorrect_type
  1866 000017DB F20F104601                      movsd xmm0, qword [rsi + 1]
  1867 000017E0 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1868 000017E5 660F2FC1                        comisd xmm0, xmm1
  1869 000017E9 750C                            jne .L_false
  1870 000017EB 48B8-                           mov rax, sob_boolean_true
  1870 000017ED [0300000000000000] 
  1871 000017F5 EB0A                            jmp .L_exit
  1872                                  .L_false:
  1873 000017F7 48B8-                           mov rax, sob_boolean_false
  1873 000017F9 [0200000000000000] 
  1874                                  .L_exit:
  1875                                          LEAVE
    38 00001801 C9                  <1>  leave
  1876 00001802 C22000                          ret AND_KILL_FRAME(2)
  1877                                          
  1878                                  L_code_ptr_raw_equal_qq:
  1879                                          ENTER
    33 00001805 C8000000            <1>  enter 0, 0
    34 00001809 4883E4F0            <1>  and rsp, ~15
  1880 0000180D 48837D1802                      cmp COUNT, 2
  1881 00001812 0F85C5050000                    jne L_error_arg_count_2
  1882 00001818 488B7520                        mov rsi, PARAM(0)
  1883                                          assert_rational(rsi)
    42 0000181C 803E11              <1>  cmp byte [%1], %2
    43 0000181F 0F8557060000        <1>  jne L_error_incorrect_type
  1884 00001825 488B7D28                        mov rdi, PARAM(1)
  1885                                          assert_rational(rdi)
    42 00001829 803F11              <1>  cmp byte [%1], %2
    43 0000182C 0F854A060000        <1>  jne L_error_incorrect_type
  1886 00001832 488B4601                        mov rax, qword [rsi + 1] ; num1
  1887 00001836 4899                            cqo
  1888 00001838 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1889 0000183C 4889C1                          mov rcx, rax
  1890 0000183F 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1891 00001843 4899                            cqo
  1892 00001845 48F76F01                        imul qword [rdi + 1]          ; num2
  1893 00001849 4829C1                          sub rcx, rax
  1894 0000184C 750C                            jne .L_false
  1895 0000184E 48B8-                           mov rax, sob_boolean_true
  1895 00001850 [0300000000000000] 
  1896 00001858 EB0A                            jmp .L_exit
  1897                                  .L_false:
  1898 0000185A 48B8-                           mov rax, sob_boolean_false
  1898 0000185C [0200000000000000] 
  1899                                  .L_exit:
  1900                                          LEAVE
    38 00001864 C9                  <1>  leave
  1901 00001865 C22000                          ret AND_KILL_FRAME(2)
  1902                                  
  1903                                  L_code_ptr_quotient:
  1904                                          ENTER
    33 00001868 C8000000            <1>  enter 0, 0
    34 0000186C 4883E4F0            <1>  and rsp, ~15
  1905 00001870 48837D1802                      cmp COUNT, 2
  1906 00001875 0F8562050000                    jne L_error_arg_count_2
  1907 0000187B 488B7520                        mov rsi, PARAM(0)
  1908                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000187F 803E11              <2>  cmp byte [%1], %2
    43 00001882 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00001888 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000188D 0F85E9050000        <1>  jne L_error_incorrect_type
  1909 00001893 488B7D28                        mov rdi, PARAM(1)
  1910                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001897 803F11              <2>  cmp byte [%1], %2
    43 0000189A 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000018A0 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018A5 0F85D1050000        <1>  jne L_error_incorrect_type
  1911 000018AB 488B4601                        mov rax, qword [rsi + 1]
  1912 000018AF 488B5F01                        mov rbx, qword [rdi + 1]
  1913 000018B3 4883FB00                        cmp rbx, 0
  1914 000018B7 0F84F0050000                    je L_error_division_by_zero
  1915 000018BD 4899                            cqo
  1916 000018BF 48F7FB                          idiv rbx
  1917 000018C2 4889C7                          mov rdi, rax
  1918 000018C5 E852040000                      call make_integer
  1919                                          LEAVE
    38 000018CA C9                  <1>  leave
  1920 000018CB C22000                          ret AND_KILL_FRAME(2)
  1921                                          
  1922                                  L_code_ptr_remainder:
  1923                                          ENTER
    33 000018CE C8000000            <1>  enter 0, 0
    34 000018D2 4883E4F0            <1>  and rsp, ~15
  1924 000018D6 48837D1802                      cmp COUNT, 2
  1925 000018DB 0F85FC040000                    jne L_error_arg_count_2
  1926 000018E1 488B7520                        mov rsi, PARAM(0)
  1927                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018E5 803E11              <2>  cmp byte [%1], %2
    43 000018E8 0F858E050000        <2>  jne L_error_incorrect_type
    48 000018EE 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018F3 0F8583050000        <1>  jne L_error_incorrect_type
  1928 000018F9 488B7D28                        mov rdi, PARAM(1)
  1929                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000018FD 803F11              <2>  cmp byte [%1], %2
    43 00001900 0F8576050000        <2>  jne L_error_incorrect_type
    48 00001906 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000190B 0F856B050000        <1>  jne L_error_incorrect_type
  1930 00001911 488B4601                        mov rax, qword [rsi + 1]
  1931 00001915 488B5F01                        mov rbx, qword [rdi + 1]
  1932 00001919 4883FB00                        cmp rbx, 0
  1933 0000191D 0F848A050000                    je L_error_division_by_zero
  1934 00001923 4899                            cqo
  1935 00001925 48F7FB                          idiv rbx
  1936 00001928 4889D7                          mov rdi, rdx
  1937 0000192B E8EC030000                      call make_integer
  1938                                          LEAVE
    38 00001930 C9                  <1>  leave
  1939 00001931 C22000                          ret AND_KILL_FRAME(2)
  1940                                  
  1941                                  L_code_ptr_set_car:
  1942                                          ENTER
    33 00001934 C8000000            <1>  enter 0, 0
    34 00001938 4883E4F0            <1>  and rsp, ~15
  1943 0000193C 48837D1802                      cmp COUNT, 2
  1944 00001941 0F8596040000                    jne L_error_arg_count_2
  1945 00001947 488B4520                        mov rax, PARAM(0)
  1946                                          assert_pair(rax)
    42 0000194B 803821              <1>  cmp byte [%1], %2
    43 0000194E 0F8528050000        <1>  jne L_error_incorrect_type
  1947 00001954 488B5D28                        mov rbx, PARAM(1)
  1948 00001958 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1949 0000195C 48B8-                           mov rax, sob_void
  1949 0000195E [0000000000000000] 
  1950                                          LEAVE
    38 00001966 C9                  <1>  leave
  1951 00001967 C22000                          ret AND_KILL_FRAME(2)
  1952                                  
  1953                                  L_code_ptr_set_cdr:
  1954                                          ENTER
    33 0000196A C8000000            <1>  enter 0, 0
    34 0000196E 4883E4F0            <1>  and rsp, ~15
  1955 00001972 48837D1802                      cmp COUNT, 2
  1956 00001977 0F8560040000                    jne L_error_arg_count_2
  1957 0000197D 488B4520                        mov rax, PARAM(0)
  1958                                          assert_pair(rax)
    42 00001981 803821              <1>  cmp byte [%1], %2
    43 00001984 0F85F2040000        <1>  jne L_error_incorrect_type
  1959 0000198A 488B5D28                        mov rbx, PARAM(1)
  1960 0000198E 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1961 00001992 48B8-                           mov rax, sob_void
  1961 00001994 [0000000000000000] 
  1962                                          LEAVE
    38 0000199C C9                  <1>  leave
  1963 0000199D C22000                          ret AND_KILL_FRAME(2)
  1964                                  
  1965                                  L_code_ptr_string_ref:
  1966                                          ENTER
    33 000019A0 C8000000            <1>  enter 0, 0
    34 000019A4 4883E4F0            <1>  and rsp, ~15
  1967 000019A8 48837D1802                      cmp COUNT, 2
  1968 000019AD 0F852A040000                    jne L_error_arg_count_2
  1969 000019B3 488B7D20                        mov rdi, PARAM(0)
  1970                                          assert_string(rdi)
    42 000019B7 803F03              <1>  cmp byte [%1], %2
    43 000019BA 0F85BC040000        <1>  jne L_error_incorrect_type
  1971 000019C0 488B7528                        mov rsi, PARAM(1)
  1972                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019C4 803E11              <2>  cmp byte [%1], %2
    43 000019C7 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000019CD 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019D2 0F85A4040000        <1>  jne L_error_incorrect_type
  1973 000019D8 488B5701                        mov rdx, qword [rdi + 1]
  1974 000019DC 488B4E01                        mov rcx, qword [rsi + 1]
  1975 000019E0 4839D1                          cmp rcx, rdx
  1976 000019E3 0F8D59030000                    jge L_error_integer_range
  1977 000019E9 4883F900                        cmp rcx, 0
  1978 000019ED 0F8C4F030000                    jl L_error_integer_range
  1979 000019F3 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1980 000019F7 BF02000000                      mov rdi, 2
  1981 000019FC E887ECFFFF                      call malloc
  1982 00001A01 C60002                          mov byte [rax], T_char
  1983 00001A04 885801                          mov byte [rax + 1], bl
  1984                                          LEAVE
    38 00001A07 C9                  <1>  leave
  1985 00001A08 C22000                          ret AND_KILL_FRAME(2)
  1986                                  
  1987                                  L_code_ptr_vector_ref:
  1988                                          ENTER
    33 00001A0B C8000000            <1>  enter 0, 0
    34 00001A0F 4883E4F0            <1>  and rsp, ~15
  1989 00001A13 48837D1802                      cmp COUNT, 2
  1990 00001A18 0F85BF030000                    jne L_error_arg_count_2
  1991 00001A1E 488B7D20                        mov rdi, PARAM(0)
  1992                                          assert_vector(rdi)
    42 00001A22 803F22              <1>  cmp byte [%1], %2
    43 00001A25 0F8551040000        <1>  jne L_error_incorrect_type
  1993 00001A2B 488B7528                        mov rsi, PARAM(1)
  1994                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A2F 803E11              <2>  cmp byte [%1], %2
    43 00001A32 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001A38 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A3D 0F8539040000        <1>  jne L_error_incorrect_type
  1995 00001A43 488B5701                        mov rdx, qword [rdi + 1]
  1996 00001A47 488B4E01                        mov rcx, qword [rsi + 1]
  1997 00001A4B 4839D1                          cmp rcx, rdx
  1998 00001A4E 0F8DEE020000                    jge L_error_integer_range
  1999 00001A54 4883F900                        cmp rcx, 0
  2000 00001A58 0F8CE4020000                    jl L_error_integer_range
  2001 00001A5E 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2002                                          LEAVE
    38 00001A63 C9                  <1>  leave
  2003 00001A64 C22000                          ret AND_KILL_FRAME(2)
  2004                                  
  2005                                  L_code_ptr_vector_set:
  2006                                          ENTER
    33 00001A67 C8000000            <1>  enter 0, 0
    34 00001A6B 4883E4F0            <1>  and rsp, ~15
  2007 00001A6F 48837D1803                      cmp COUNT, 3
  2008 00001A74 0F85CD030000                    jne L_error_arg_count_3
  2009 00001A7A 488B7D20                        mov rdi, PARAM(0)
  2010                                          assert_vector(rdi)
    42 00001A7E 803F22              <1>  cmp byte [%1], %2
    43 00001A81 0F85F5030000        <1>  jne L_error_incorrect_type
  2011 00001A87 488B7528                        mov rsi, PARAM(1)
  2012                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A8B 803E11              <2>  cmp byte [%1], %2
    43 00001A8E 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001A94 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A99 0F85DD030000        <1>  jne L_error_incorrect_type
  2013 00001A9F 488B5701                        mov rdx, qword [rdi + 1]
  2014 00001AA3 488B4E01                        mov rcx, qword [rsi + 1]
  2015 00001AA7 4839D1                          cmp rcx, rdx
  2016 00001AAA 0F8D92020000                    jge L_error_integer_range
  2017 00001AB0 4883F900                        cmp rcx, 0
  2018 00001AB4 0F8C88020000                    jl L_error_integer_range
  2019 00001ABA 488B4530                        mov rax, PARAM(2)
  2020 00001ABE 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2021 00001AC3 48B8-                           mov rax, sob_void
  2021 00001AC5 [0000000000000000] 
  2022                                          LEAVE
    38 00001ACD C9                  <1>  leave
  2023 00001ACE C22800                          ret AND_KILL_FRAME(3)
  2024                                  
  2025                                  L_code_ptr_string_set:
  2026                                          ENTER
    33 00001AD1 C8000000            <1>  enter 0, 0
    34 00001AD5 4883E4F0            <1>  and rsp, ~15
  2027 00001AD9 48837D1803                      cmp COUNT, 3
  2028 00001ADE 0F8563030000                    jne L_error_arg_count_3
  2029 00001AE4 488B7D20                        mov rdi, PARAM(0)
  2030                                          assert_string(rdi)
    42 00001AE8 803F03              <1>  cmp byte [%1], %2
    43 00001AEB 0F858B030000        <1>  jne L_error_incorrect_type
  2031 00001AF1 488B7528                        mov rsi, PARAM(1)
  2032                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001AF5 803E11              <2>  cmp byte [%1], %2
    43 00001AF8 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001AFE 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B03 0F8573030000        <1>  jne L_error_incorrect_type
  2033 00001B09 488B5701                        mov rdx, qword [rdi + 1]
  2034 00001B0D 488B4E01                        mov rcx, qword [rsi + 1]
  2035 00001B11 4839D1                          cmp rcx, rdx
  2036 00001B14 0F8D28020000                    jge L_error_integer_range
  2037 00001B1A 4883F900                        cmp rcx, 0
  2038 00001B1E 0F8C1E020000                    jl L_error_integer_range
  2039 00001B24 488B4530                        mov rax, PARAM(2)
  2040                                          assert_char(rax)
    42 00001B28 803802              <1>  cmp byte [%1], %2
    43 00001B2B 0F854B030000        <1>  jne L_error_incorrect_type
  2041 00001B31 8A4001                          mov al, byte [rax + 1]
  2042 00001B34 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2043 00001B38 48B8-                           mov rax, sob_void
  2043 00001B3A [0000000000000000] 
  2044                                          LEAVE
    38 00001B42 C9                  <1>  leave
  2045 00001B43 C22800                          ret AND_KILL_FRAME(3)
  2046                                  
  2047                                  L_code_ptr_make_vector:
  2048                                          ENTER
    33 00001B46 C8000000            <1>  enter 0, 0
    34 00001B4A 4883E4F0            <1>  and rsp, ~15
  2049 00001B4E 48837D1802                      cmp COUNT, 2
  2050 00001B53 0F8584020000                    jne L_error_arg_count_2
  2051 00001B59 488B4D20                        mov rcx, PARAM(0)
  2052                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B5D 803911              <2>  cmp byte [%1], %2
    43 00001B60 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001B66 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B6B 0F850B030000        <1>  jne L_error_incorrect_type
  2053 00001B71 488B4901                        mov rcx, qword [rcx + 1]
  2054 00001B75 4883F900                        cmp rcx, 0
  2055 00001B79 0F8CC3010000                    jl L_error_integer_range
  2056 00001B7F 488B5528                        mov rdx, PARAM(1)
  2057 00001B83 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2058 00001B8B E8F8EAFFFF                      call malloc
  2059 00001B90 C60022                          mov byte [rax], T_vector
  2060 00001B93 48894801                        mov qword [rax + 1], rcx
  2061 00001B97 41B800000000                    mov r8, 0
  2062                                  .L0:
  2063 00001B9D 4939C8                          cmp r8, rcx
  2064 00001BA0 740A                            je .L1
  2065 00001BA2 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2066 00001BA7 49FFC0                          inc r8
  2067 00001BAA EBF1                            jmp .L0
  2068                                  .L1:
  2069                                          LEAVE
    38 00001BAC C9                  <1>  leave
  2070 00001BAD C22000                          ret AND_KILL_FRAME(2)
  2071                                          
  2072                                  L_code_ptr_make_string:
  2073                                          ENTER
    33 00001BB0 C8000000            <1>  enter 0, 0
    34 00001BB4 4883E4F0            <1>  and rsp, ~15
  2074 00001BB8 48837D1802                      cmp COUNT, 2
  2075 00001BBD 0F851A020000                    jne L_error_arg_count_2
  2076 00001BC3 488B4D20                        mov rcx, PARAM(0)
  2077                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001BC7 803911              <2>  cmp byte [%1], %2
    43 00001BCA 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001BD0 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BD5 0F85A1020000        <1>  jne L_error_incorrect_type
  2078 00001BDB 488B4901                        mov rcx, qword [rcx + 1]
  2079 00001BDF 4883F900                        cmp rcx, 0
  2080 00001BE3 0F8C59010000                    jl L_error_integer_range
  2081 00001BE9 488B5528                        mov rdx, PARAM(1)
  2082                                          assert_char(rdx)
    42 00001BED 803A02              <1>  cmp byte [%1], %2
    43 00001BF0 0F8586020000        <1>  jne L_error_incorrect_type
  2083 00001BF6 8A5201                          mov dl, byte [rdx + 1]
  2084 00001BF9 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2085 00001BFD E886EAFFFF                      call malloc
  2086 00001C02 C60003                          mov byte [rax], T_string
  2087 00001C05 48894801                        mov qword [rax + 1], rcx
  2088 00001C09 41B800000000                    mov r8, 0
  2089                                  .L0:
  2090 00001C0F 4939C8                          cmp r8, rcx
  2091 00001C12 740A                            je .L1
  2092 00001C14 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2093 00001C19 49FFC0                          inc r8
  2094 00001C1C EBF1                            jmp .L0
  2095                                  .L1:
  2096                                          LEAVE
    38 00001C1E C9                  <1>  leave
  2097 00001C1F C22000                          ret AND_KILL_FRAME(2)
  2098                                  
  2099                                  L_code_ptr_numerator:
  2100                                          ENTER
    33 00001C22 C8000000            <1>  enter 0, 0
    34 00001C26 4883E4F0            <1>  and rsp, ~15
  2101 00001C2A 48837D1801                      cmp COUNT, 1
  2102 00001C2F 0F8573010000                    jne L_error_arg_count_1
  2103 00001C35 488B4520                        mov rax, PARAM(0)
  2104                                          assert_rational(rax)
    42 00001C39 803811              <1>  cmp byte [%1], %2
    43 00001C3C 0F853A020000        <1>  jne L_error_incorrect_type
  2105 00001C42 488B7801                        mov rdi, qword [rax + 1]
  2106 00001C46 E8D1000000                      call make_integer
  2107                                          LEAVE
    38 00001C4B C9                  <1>  leave
  2108 00001C4C C21800                          ret AND_KILL_FRAME(1)
  2109                                          
  2110                                  L_code_ptr_denominator:
  2111                                          ENTER
    33 00001C4F C8000000            <1>  enter 0, 0
    34 00001C53 4883E4F0            <1>  and rsp, ~15
  2112 00001C57 48837D1801                      cmp COUNT, 1
  2113 00001C5C 0F8546010000                    jne L_error_arg_count_1
  2114 00001C62 488B4520                        mov rax, PARAM(0)
  2115                                          assert_rational(rax)
    42 00001C66 803811              <1>  cmp byte [%1], %2
    43 00001C69 0F850D020000        <1>  jne L_error_incorrect_type
  2116 00001C6F 488B7809                        mov rdi, qword [rax + 1 + 8]
  2117 00001C73 E8A4000000                      call make_integer
  2118                                          LEAVE
    38 00001C78 C9                  <1>  leave
  2119 00001C79 C21800                          ret AND_KILL_FRAME(1)
  2120                                  
  2121                                  L_code_ptr_eq:
  2122                                  	ENTER
    33 00001C7C C8000000            <1>  enter 0, 0
    34 00001C80 4883E4F0            <1>  and rsp, ~15
  2123 00001C84 48837D1802              	cmp COUNT, 2
  2124 00001C89 0F854E010000            	jne L_error_arg_count_2
  2125 00001C8F 488B7D20                	mov rdi, PARAM(0)
  2126 00001C93 488B7528                	mov rsi, PARAM(1)
  2127 00001C97 4839F7                  	cmp rdi, rsi
  2128 00001C9A 744A                    	je .L_eq_true
  2129 00001C9C 8A17                    	mov dl, byte [rdi]
  2130 00001C9E 3A16                    	cmp dl, byte [rsi]
  2131 00001CA0 7550                    	jne .L_eq_false
  2132 00001CA2 80FA02                  	cmp dl, T_char
  2133 00001CA5 7437                    	je .L_char
  2134 00001CA7 80FA04                  	cmp dl, T_symbol
  2135 00001CAA 742A                    	je .L_symbol
  2136 00001CAC 80FA12                  	cmp dl, T_real
  2137 00001CAF 741D                    	je .L_real
  2138 00001CB1 80FA11                  	cmp dl, T_rational
  2139 00001CB4 7402                    	je .L_rational
  2140 00001CB6 EB3A                    	jmp .L_eq_false
  2141                                  .L_rational:
  2142 00001CB8 488B4601                	mov rax, qword [rsi + 1]
  2143 00001CBC 483B4701                	cmp rax, qword [rdi + 1]
  2144 00001CC0 7530                    	jne .L_eq_false
  2145 00001CC2 488B4609                	mov rax, qword [rsi + 1 + 8]
  2146 00001CC6 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2147 00001CCA 7526                    	jne .L_eq_false
  2148 00001CCC EB18                    	jmp .L_eq_true
  2149                                  .L_real:
  2150 00001CCE 488B4601                	mov rax, qword [rsi + 1]
  2151 00001CD2 483B4701                	cmp rax, qword [rdi + 1]
  2152                                  .L_symbol:
  2153                                  	; never reached, because symbols are static!
  2154                                  	; but I'm keeping it in case, I'll ever change
  2155                                  	; the implementation
  2156 00001CD6 488B4601                	mov rax, qword [rsi + 1]
  2157 00001CDA 483B4701                	cmp rax, qword [rdi + 1]
  2158                                  .L_char:
  2159 00001CDE 8A5E01                  	mov bl, byte [rsi + 1]
  2160 00001CE1 3A5F01                  	cmp bl, byte [rdi + 1]
  2161 00001CE4 750C                    	jne .L_eq_false
  2162                                  .L_eq_true:
  2163 00001CE6 48B8-                   	mov rax, sob_boolean_true
  2163 00001CE8 [0300000000000000] 
  2164 00001CF0 EB0A                    	jmp .L_eq_exit
  2165                                  .L_eq_false:
  2166 00001CF2 48B8-                   	mov rax, sob_boolean_false
  2166 00001CF4 [0200000000000000] 
  2167                                  .L_eq_exit:
  2168                                  	LEAVE
    38 00001CFC C9                  <1>  leave
  2169 00001CFD C22000                  	ret AND_KILL_FRAME(2)
  2170                                  
  2171                                  make_real:
  2172                                          ENTER
    33 00001D00 C8000000            <1>  enter 0, 0
    34 00001D04 4883E4F0            <1>  and rsp, ~15
  2173 00001D08 BF09000000                      mov rdi, (1 + 8)
  2174 00001D0D E876E9FFFF                      call malloc
  2175 00001D12 C60012                          mov byte [rax], T_real
  2176 00001D15 F20F114001                      movsd qword [rax + 1], xmm0
  2177                                          LEAVE
    38 00001D1A C9                  <1>  leave
  2178 00001D1B C3                              ret
  2179                                          
  2180                                  make_integer:
  2181                                          ENTER
    33 00001D1C C8000000            <1>  enter 0, 0
    34 00001D20 4883E4F0            <1>  and rsp, ~15
  2182 00001D24 4889FE                          mov rsi, rdi
  2183 00001D27 BF11000000                      mov rdi, (1 + 8 + 8)
  2184 00001D2C E857E9FFFF                      call malloc
  2185 00001D31 C60011                          mov byte [rax], T_rational
  2186 00001D34 48897001                        mov qword [rax + 1], rsi
  2187 00001D38 48C7400901000000                mov qword [rax + 1 + 8], 1
  2188                                          LEAVE
    38 00001D40 C9                  <1>  leave
  2189 00001D41 C3                              ret
  2190                                          
  2191                                  L_error_integer_range:
  2192 00001D42 488B3C25[00000000]              mov rdi, qword [stderr]
  2193 00001D4A 48BE-                           mov rsi, fmt_integer_range
  2193 00001D4C [8003000000000000] 
  2194 00001D54 B800000000                      mov rax, 0
  2195                                  	ENTER
    33 00001D59 C8000000            <1>  enter 0, 0
    34 00001D5D 4883E4F0            <1>  and rsp, ~15
  2196 00001D61 E8(00000000)                    call fprintf
  2197                                  	LEAVE
    38 00001D66 C9                  <1>  leave
  2198 00001D67 48C7C0FBFFFFFF                  mov rax, -5
  2199 00001D6E E8(00000000)                    call exit
  2200                                  
  2201                                  L_error_arg_count_0:
  2202 00001D73 488B3C25[00000000]              mov rdi, qword [stderr]
  2203 00001D7B 48BE-                           mov rsi, fmt_arg_count_0
  2203 00001D7D [7E02000000000000] 
  2204 00001D85 488B5518                        mov rdx, COUNT
  2205 00001D89 B800000000                      mov rax, 0
  2206                                  	ENTER
    33 00001D8E C8000000            <1>  enter 0, 0
    34 00001D92 4883E4F0            <1>  and rsp, ~15
  2207 00001D96 E8(00000000)                    call fprintf
  2208                                  	LEAVE
    38 00001D9B C9                  <1>  leave
  2209 00001D9C 48C7C0FDFFFFFF                  mov rax, -3
  2210 00001DA3 E8(00000000)                    call exit
  2211                                  
  2212                                  L_error_arg_count_1:
  2213 00001DA8 488B3C25[00000000]              mov rdi, qword [stderr]
  2214 00001DB0 48BE-                           mov rsi, fmt_arg_count_1
  2214 00001DB2 [A602000000000000] 
  2215 00001DBA 488B5518                        mov rdx, COUNT
  2216 00001DBE B800000000                      mov rax, 0
  2217                                  	ENTER
    33 00001DC3 C8000000            <1>  enter 0, 0
    34 00001DC7 4883E4F0            <1>  and rsp, ~15
  2218 00001DCB E8(00000000)                    call fprintf
  2219                                  	LEAVE
    38 00001DD0 C9                  <1>  leave
  2220 00001DD1 48C7C0FDFFFFFF                  mov rax, -3
  2221 00001DD8 E8(00000000)                    call exit
  2222                                  
  2223                                  L_error_arg_count_2:
  2224 00001DDD 488B3C25[00000000]              mov rdi, qword [stderr]
  2225 00001DE5 48BE-                           mov rsi, fmt_arg_count_2
  2225 00001DE7 [0C03000000000000] 
  2226 00001DEF 488B5518                        mov rdx, COUNT
  2227 00001DF3 B800000000                      mov rax, 0
  2228                                  	ENTER
    33 00001DF8 C8000000            <1>  enter 0, 0
    34 00001DFC 4883E4F0            <1>  and rsp, ~15
  2229 00001E00 E8(00000000)                    call fprintf
  2230                                  	LEAVE
    38 00001E05 C9                  <1>  leave
  2231 00001E06 48C7C0FDFFFFFF                  mov rax, -3
  2232 00001E0D E8(00000000)                    call exit
  2233                                  
  2234                                  L_error_arg_count_12:
  2235 00001E12 488B3C25[00000000]              mov rdi, qword [stderr]
  2236 00001E1A 48BE-                           mov rsi, fmt_arg_count_12
  2236 00001E1C [CC02000000000000] 
  2237 00001E24 488B5518                        mov rdx, COUNT
  2238 00001E28 B800000000                      mov rax, 0
  2239                                  	ENTER
    33 00001E2D C8000000            <1>  enter 0, 0
    34 00001E31 4883E4F0            <1>  and rsp, ~15
  2240 00001E35 E8(00000000)                    call fprintf
  2241                                  	LEAVE
    38 00001E3A C9                  <1>  leave
  2242 00001E3B 48C7C0FDFFFFFF                  mov rax, -3
  2243 00001E42 E8(00000000)                    call exit
  2244                                  
  2245                                  L_error_arg_count_3:
  2246 00001E47 488B3C25[00000000]              mov rdi, qword [stderr]
  2247 00001E4F 48BE-                           mov rsi, fmt_arg_count_3
  2247 00001E51 [3303000000000000] 
  2248 00001E59 488B5518                        mov rdx, COUNT
  2249 00001E5D B800000000                      mov rax, 0
  2250                                  	ENTER
    33 00001E62 C8000000            <1>  enter 0, 0
    34 00001E66 4883E4F0            <1>  and rsp, ~15
  2251 00001E6A E8(00000000)                    call fprintf
  2252                                  	LEAVE
    38 00001E6F C9                  <1>  leave
  2253 00001E70 48C7C0FDFFFFFF                  mov rax, -3
  2254 00001E77 E8(00000000)                    call exit
  2255                                          
  2256                                  L_error_incorrect_type:
  2257 00001E7C 488B3C25[00000000]              mov rdi, qword [stderr]
  2258 00001E84 48BE-                           mov rsi, fmt_type
  2258 00001E86 [5C03000000000000] 
  2259 00001E8E B800000000                      mov rax, 0
  2260                                  	ENTER
    33 00001E93 C8000000            <1>  enter 0, 0
    34 00001E97 4883E4F0            <1>  and rsp, ~15
  2261 00001E9B E8(00000000)                    call fprintf
  2262                                  	LEAVE
    38 00001EA0 C9                  <1>  leave
  2263 00001EA1 48C7C0FCFFFFFF                  mov rax, -4
  2264 00001EA8 E8(00000000)                    call exit
  2265                                  
  2266                                  L_error_division_by_zero:
  2267 00001EAD 488B3C25[00000000]              mov rdi, qword [stderr]
  2268 00001EB5 48BE-                           mov rsi, fmt_division_by_zero
  2268 00001EB7 [9D03000000000000] 
  2269 00001EBF B800000000                      mov rax, 0
  2270                                  	ENTER
    33 00001EC4 C8000000            <1>  enter 0, 0
    34 00001EC8 4883E4F0            <1>  and rsp, ~15
  2271 00001ECC E8(00000000)                    call fprintf
  2272                                  	LEAVE
    38 00001ED1 C9                  <1>  leave
  2273 00001ED2 48C7C0F8FFFFFF                  mov rax, -8
  2274 00001ED9 E8(00000000)                    call exit
  2275                                  
  2276                                  section .data
  2277                                  fmt_char:
  2278 0000027B 256300                          db `%c\0`
  2279                                  fmt_arg_count_0:
  2280 0000027E 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2280 00000287 74696E67207A65726F-
  2280 00000290 20617267756D656E74-
  2280 00000299 732E20466F756E6420-
  2280 000002A2 25640A00           
  2281                                  fmt_arg_count_1:
  2282 000002A6 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2282 000002AF 74696E67206F6E6520-
  2282 000002B8 617267756D656E742E-
  2282 000002C1 20466F756E64202564-
  2282 000002CA 0A00               
  2283                                  fmt_arg_count_12:
  2284 000002CC 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2284 000002D5 74696E67206F6E6520-
  2284 000002DE 726571756972656420-
  2284 000002E7 616E64206F6E65206F-
  2284 000002F0 7074696F6E616C2061-
  2284 000002F9 7267756D656E742E20-
  2284 00000302 466F756E642025640A-
  2284 0000030B 00                 
  2285                                  fmt_arg_count_2:
  2286 0000030C 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2286 00000315 74696E672074776F20-
  2286 0000031E 617267756D656E7473-
  2286 00000327 2E20466F756E642025-
  2286 00000330 640A00             
  2287                                  fmt_arg_count_3:
  2288 00000333 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2288 0000033C 74696E672074687265-
  2288 00000345 6520617267756D656E-
  2288 0000034E 74732E20466F756E64-
  2288 00000357 2025640A00         
  2289                                  fmt_type:
  2290 0000035C 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2290 00000365 696F6E207061737365-
  2290 0000036E 6420696E636F727265-
  2290 00000377 637420747970650A00 
  2291                                  fmt_integer_range:
  2292 00000380 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2292 00000389 7265637420696E7465-
  2292 00000392 6765722072616E6765-
  2292 0000039B 0A00               
  2293                                  fmt_division_by_zero:
  2294 0000039D 212121204469766973-             db `!!! Division by zero\n\0`
  2294 000003A6 696F6E206279207A65-
  2294 000003AF 726F0A00           
  2295                                  fmt_scheme_error_part_1:
  2296 000003B3 0A2121212054686520-             db `\n!!! The procedure \0`
  2296 000003BC 70726F636564757265-
  2296 000003C5 2000               
  2297                                  fmt_scheme_error_part_2:
  2298 000003C7 2061736B656420746F-             db ` asked to terminate the program\n`
  2298 000003D0 207465726D696E6174-
  2298 000003D9 65207468652070726F-
  2298 000003E2 6772616D0A         
  2299 000003E7 202020207769746820-             db `    with the following message:\n\n\0`
  2299 000003F0 74686520666F6C6C6F-
  2299 000003F9 77696E67206D657373-
  2299 00000402 6167653A0A0A00     
  2300                                  fmt_scheme_error_part_3:
  2301 00000409 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2301 00000412 210A0A00           
