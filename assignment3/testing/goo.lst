     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 20
    84 00000007 140000000000000001-     	dq 20, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 10
    86 00000018 0A0000000000000001-     	dq 10, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 5
    88 00000029 050000000000000001-     	dq 5, 1
    88 00000032 00000000000000     
    89 00000039 11                      	db T_rational	; 1
    90 0000003A 010000000000000001-     	dq 1, 1
    90 00000043 00000000000000     
    91 0000004A 21                      	db T_pair	; (1)
    92 0000004B [3900000000000000]-     	dq L_constants + 57, L_constants + 1
    92 00000053 [0100000000000000] 
    93 0000005B 21                      	db T_pair	; (5 1)
    94 0000005C [2800000000000000]-     	dq L_constants + 40, L_constants + 74
    94 00000064 [4A00000000000000] 
    95 0000006C 21                      	db T_pair	; (10 5 1)
    96 0000006D [1700000000000000]-     	dq L_constants + 23, L_constants + 91
    96 00000075 [5B00000000000000] 
    97 0000007D 21                      	db T_pair	; (20 10 5 1)
    98 0000007E [0600000000000000]-     	dq L_constants + 6, L_constants + 108
    98 00000086 [6C00000000000000] 
    99                                  
   100                                  section .bss
   101                                  free_var_0:	; location of null?
   102 00000000 ????????????????        	resq 1
   103                                  free_var_1:	; location of pair?
   104 00000008 ????????????????        	resq 1
   105                                  free_var_2:	; location of void?
   106 00000010 ????????????????        	resq 1
   107                                  free_var_3:	; location of char?
   108 00000018 ????????????????        	resq 1
   109                                  free_var_4:	; location of string?
   110 00000020 ????????????????        	resq 1
   111                                  free_var_5:	; location of symbol?
   112 00000028 ????????????????        	resq 1
   113                                  free_var_6:	; location of vector?
   114 00000030 ????????????????        	resq 1
   115                                  free_var_7:	; location of procedure?
   116 00000038 ????????????????        	resq 1
   117                                  free_var_8:	; location of real?
   118 00000040 ????????????????        	resq 1
   119                                  free_var_9:	; location of rational?
   120 00000048 ????????????????        	resq 1
   121                                  free_var_10:	; location of boolean?
   122 00000050 ????????????????        	resq 1
   123                                  free_var_11:	; location of number?
   124 00000058 ????????????????        	resq 1
   125                                  free_var_12:	; location of collection?
   126 00000060 ????????????????        	resq 1
   127                                  free_var_13:	; location of cons
   128 00000068 ????????????????        	resq 1
   129                                  free_var_14:	; location of display-sexpr
   130 00000070 ????????????????        	resq 1
   131                                  free_var_15:	; location of write-char
   132 00000078 ????????????????        	resq 1
   133                                  free_var_16:	; location of car
   134 00000080 ????????????????        	resq 1
   135                                  free_var_17:	; location of cdr
   136 00000088 ????????????????        	resq 1
   137                                  free_var_18:	; location of string-length
   138 00000090 ????????????????        	resq 1
   139                                  free_var_19:	; location of vector-length
   140 00000098 ????????????????        	resq 1
   141                                  free_var_20:	; location of real->integer
   142 000000A0 ????????????????        	resq 1
   143                                  free_var_21:	; location of exit
   144 000000A8 ????????????????        	resq 1
   145                                  free_var_22:	; location of integer->real
   146 000000B0 ????????????????        	resq 1
   147                                  free_var_23:	; location of rational->real
   148 000000B8 ????????????????        	resq 1
   149                                  free_var_24:	; location of char->integer
   150 000000C0 ????????????????        	resq 1
   151                                  free_var_25:	; location of integer->char
   152 000000C8 ????????????????        	resq 1
   153                                  free_var_26:	; location of trng
   154 000000D0 ????????????????        	resq 1
   155                                  free_var_27:	; location of zero?
   156 000000D8 ????????????????        	resq 1
   157                                  free_var_28:	; location of integer?
   158 000000E0 ????????????????        	resq 1
   159                                  free_var_29:	; location of __bin-apply
   160 000000E8 ????????????????        	resq 1
   161                                  free_var_30:	; location of __bin-add-rr
   162 000000F0 ????????????????        	resq 1
   163                                  free_var_31:	; location of __bin-sub-rr
   164 000000F8 ????????????????        	resq 1
   165                                  free_var_32:	; location of __bin-mul-rr
   166 00000100 ????????????????        	resq 1
   167                                  free_var_33:	; location of __bin-div-rr
   168 00000108 ????????????????        	resq 1
   169                                  free_var_34:	; location of __bin-add-qq
   170 00000110 ????????????????        	resq 1
   171                                  free_var_35:	; location of __bin-sub-qq
   172 00000118 ????????????????        	resq 1
   173                                  free_var_36:	; location of __bin-mul-qq
   174 00000120 ????????????????        	resq 1
   175                                  free_var_37:	; location of __bin-div-qq
   176 00000128 ????????????????        	resq 1
   177                                  free_var_38:	; location of error
   178 00000130 ????????????????        	resq 1
   179                                  free_var_39:	; location of __bin-less-than-rr
   180 00000138 ????????????????        	resq 1
   181                                  free_var_40:	; location of __bin-less-than-qq
   182 00000140 ????????????????        	resq 1
   183                                  free_var_41:	; location of __bin-equal-rr
   184 00000148 ????????????????        	resq 1
   185                                  free_var_42:	; location of __bin-equal-qq
   186 00000150 ????????????????        	resq 1
   187                                  free_var_43:	; location of quotient
   188 00000158 ????????????????        	resq 1
   189                                  free_var_44:	; location of remainder
   190 00000160 ????????????????        	resq 1
   191                                  free_var_45:	; location of set-car!
   192 00000168 ????????????????        	resq 1
   193                                  free_var_46:	; location of set-cdr!
   194 00000170 ????????????????        	resq 1
   195                                  free_var_47:	; location of string-ref
   196 00000178 ????????????????        	resq 1
   197                                  free_var_48:	; location of vector-ref
   198 00000180 ????????????????        	resq 1
   199                                  free_var_49:	; location of vector-set!
   200 00000188 ????????????????        	resq 1
   201                                  free_var_50:	; location of string-set!
   202 00000190 ????????????????        	resq 1
   203                                  free_var_51:	; location of make-vector
   204 00000198 ????????????????        	resq 1
   205                                  free_var_52:	; location of make-string
   206 000001A0 ????????????????        	resq 1
   207                                  free_var_53:	; location of numerator
   208 000001A8 ????????????????        	resq 1
   209                                  free_var_54:	; location of denominator
   210 000001B0 ????????????????        	resq 1
   211                                  free_var_55:	; location of eq?
   212 000001B8 ????????????????        	resq 1
   213                                  
   214                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   215                                  global main
   216                                  section .text
   217                                  main:
   218 00000000 C8000000                        enter 0, 0
   219                                          
   220                                  	; building closure for null?
   221 00000004 48BF-                   	mov rdi, free_var_0
   221 00000006 [0000000000000000] 
   222 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   222 00000010 [F50C000000000000] 
   223 00000018 E8FC0B0000              	call bind_primitive
   224                                  
   225                                  	; building closure for pair?
   226 0000001D 48BF-                   	mov rdi, free_var_1
   226 0000001F [0800000000000000] 
   227 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   227 00000029 [2B0D000000000000] 
   228 00000031 E8E30B0000              	call bind_primitive
   229                                  
   230                                  	; building closure for void?
   231 00000036 48BF-                   	mov rdi, free_var_2
   231 00000038 [1000000000000000] 
   232 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   232 00000042 [610D000000000000] 
   233 0000004A E8CA0B0000              	call bind_primitive
   234                                  
   235                                  	; building closure for char?
   236 0000004F 48BF-                   	mov rdi, free_var_3
   236 00000051 [1800000000000000] 
   237 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   237 0000005B [970D000000000000] 
   238 00000063 E8B10B0000              	call bind_primitive
   239                                  
   240                                  	; building closure for string?
   241 00000068 48BF-                   	mov rdi, free_var_4
   241 0000006A [2000000000000000] 
   242 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   242 00000074 [CD0D000000000000] 
   243 0000007C E8980B0000              	call bind_primitive
   244                                  
   245                                  	; building closure for symbol?
   246 00000081 48BF-                   	mov rdi, free_var_5
   246 00000083 [2800000000000000] 
   247 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   247 0000008D [030E000000000000] 
   248 00000095 E87F0B0000              	call bind_primitive
   249                                  
   250                                  	; building closure for vector?
   251 0000009A 48BF-                   	mov rdi, free_var_6
   251 0000009C [3000000000000000] 
   252 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   252 000000A6 [390E000000000000] 
   253 000000AE E8660B0000              	call bind_primitive
   254                                  
   255                                  	; building closure for procedure?
   256 000000B3 48BF-                   	mov rdi, free_var_7
   256 000000B5 [3800000000000000] 
   257 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   257 000000BF [6F0E000000000000] 
   258 000000C7 E84D0B0000              	call bind_primitive
   259                                  
   260                                  	; building closure for real?
   261 000000CC 48BF-                   	mov rdi, free_var_8
   261 000000CE [4000000000000000] 
   262 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   262 000000D8 [A50E000000000000] 
   263 000000E0 E8340B0000              	call bind_primitive
   264                                  
   265                                  	; building closure for rational?
   266 000000E5 48BF-                   	mov rdi, free_var_9
   266 000000E7 [4800000000000000] 
   267 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   267 000000F1 [DB0E000000000000] 
   268 000000F9 E81B0B0000              	call bind_primitive
   269                                  
   270                                  	; building closure for boolean?
   271 000000FE 48BF-                   	mov rdi, free_var_10
   271 00000100 [5000000000000000] 
   272 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   272 0000010A [110F000000000000] 
   273 00000112 E8020B0000              	call bind_primitive
   274                                  
   275                                  	; building closure for number?
   276 00000117 48BF-                   	mov rdi, free_var_11
   276 00000119 [5800000000000000] 
   277 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   277 00000123 [490F000000000000] 
   278 0000012B E8E90A0000              	call bind_primitive
   279                                  
   280                                  	; building closure for collection?
   281 00000130 48BF-                   	mov rdi, free_var_12
   281 00000132 [6000000000000000] 
   282 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   282 0000013C [810F000000000000] 
   283 00000144 E8D00A0000              	call bind_primitive
   284                                  
   285                                  	; building closure for cons
   286 00000149 48BF-                   	mov rdi, free_var_13
   286 0000014B [6800000000000000] 
   287 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   287 00000155 [B90F000000000000] 
   288 0000015D E8B70A0000              	call bind_primitive
   289                                  
   290                                  	; building closure for display-sexpr
   291 00000162 48BF-                   	mov rdi, free_var_14
   291 00000164 [7000000000000000] 
   292 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   292 0000016E [ED0F000000000000] 
   293 00000176 E89E0A0000              	call bind_primitive
   294                                  
   295                                  	; building closure for write-char
   296 0000017B 48BF-                   	mov rdi, free_var_15
   296 0000017D [7800000000000000] 
   297 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   297 00000187 [1710000000000000] 
   298 0000018F E8850A0000              	call bind_primitive
   299                                  
   300                                  	; building closure for car
   301 00000194 48BF-                   	mov rdi, free_var_16
   301 00000196 [8000000000000000] 
   302 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   302 000001A0 [6E10000000000000] 
   303 000001A8 E86C0A0000              	call bind_primitive
   304                                  
   305                                  	; building closure for cdr
   306 000001AD 48BF-                   	mov rdi, free_var_17
   306 000001AF [8800000000000000] 
   307 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   307 000001B9 [9610000000000000] 
   308 000001C1 E8530A0000              	call bind_primitive
   309                                  
   310                                  	; building closure for string-length
   311 000001C6 48BF-                   	mov rdi, free_var_18
   311 000001C8 [9000000000000000] 
   312 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   312 000001D2 [BE10000000000000] 
   313 000001DA E83A0A0000              	call bind_primitive
   314                                  
   315                                  	; building closure for vector-length
   316 000001DF 48BF-                   	mov rdi, free_var_19
   316 000001E1 [9800000000000000] 
   317 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   317 000001EB [EB10000000000000] 
   318 000001F3 E8210A0000              	call bind_primitive
   319                                  
   320                                  	; building closure for real->integer
   321 000001F8 48BF-                   	mov rdi, free_var_20
   321 000001FA [A000000000000000] 
   322 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   322 00000204 [1811000000000000] 
   323 0000020C E8080A0000              	call bind_primitive
   324                                  
   325                                  	; building closure for exit
   326 00000211 48BF-                   	mov rdi, free_var_21
   326 00000213 [A800000000000000] 
   327 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   327 0000021D [4B11000000000000] 
   328 00000225 E8EF090000              	call bind_primitive
   329                                  
   330                                  	; building closure for integer->real
   331 0000022A 48BF-                   	mov rdi, free_var_22
   331 0000022C [B000000000000000] 
   332 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   332 00000236 [6811000000000000] 
   333 0000023E E8D6090000              	call bind_primitive
   334                                  
   335                                  	; building closure for rational->real
   336 00000243 48BF-                   	mov rdi, free_var_23
   336 00000245 [B800000000000000] 
   337 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   337 0000024F [A511000000000000] 
   338 00000257 E8BD090000              	call bind_primitive
   339                                  
   340                                  	; building closure for char->integer
   341 0000025C 48BF-                   	mov rdi, free_var_24
   341 0000025E [C000000000000000] 
   342 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   342 00000268 [E411000000000000] 
   343 00000270 E8A4090000              	call bind_primitive
   344                                  
   345                                  	; building closure for integer->char
   346 00000275 48BF-                   	mov rdi, free_var_25
   346 00000277 [C800000000000000] 
   347 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   347 00000281 [1912000000000000] 
   348 00000289 E88B090000              	call bind_primitive
   349                                  
   350                                  	; building closure for trng
   351 0000028E 48BF-                   	mov rdi, free_var_26
   351 00000290 [D000000000000000] 
   352 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   352 0000029A [7312000000000000] 
   353 000002A2 E872090000              	call bind_primitive
   354                                  
   355                                  	; building closure for zero?
   356 000002A7 48BF-                   	mov rdi, free_var_27
   356 000002A9 [D800000000000000] 
   357 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   357 000002B3 [9612000000000000] 
   358 000002BB E859090000              	call bind_primitive
   359                                  
   360                                  	; building closure for integer?
   361 000002C0 48BF-                   	mov rdi, free_var_28
   361 000002C2 [E000000000000000] 
   362 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   362 000002CC [F112000000000000] 
   363 000002D4 E840090000              	call bind_primitive
   364                                  
   365                                  	; building closure for __bin-apply
   366 000002D9 48BF-                   	mov rdi, free_var_29
   366 000002DB [E800000000000000] 
   367 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   367 000002E5 [410C000000000000] 
   368 000002ED E827090000              	call bind_primitive
   369                                  
   370                                  	; building closure for __bin-add-rr
   371 000002F2 48BF-                   	mov rdi, free_var_30
   371 000002F4 [F000000000000000] 
   372 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   372 000002FE [2E13000000000000] 
   373 00000306 E80E090000              	call bind_primitive
   374                                  
   375                                  	; building closure for __bin-sub-rr
   376 0000030B 48BF-                   	mov rdi, free_var_31
   376 0000030D [F800000000000000] 
   377 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   377 00000317 [7213000000000000] 
   378 0000031F E8F5080000              	call bind_primitive
   379                                  
   380                                  	; building closure for __bin-mul-rr
   381 00000324 48BF-                   	mov rdi, free_var_32
   381 00000326 [0001000000000000] 
   382 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   382 00000330 [B613000000000000] 
   383 00000338 E8DC080000              	call bind_primitive
   384                                  
   385                                  	; building closure for __bin-div-rr
   386 0000033D 48BF-                   	mov rdi, free_var_33
   386 0000033F [0801000000000000] 
   387 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   387 00000349 [FA13000000000000] 
   388 00000351 E8C3080000              	call bind_primitive
   389                                  
   390                                  	; building closure for __bin-add-qq
   391 00000356 48BF-                   	mov rdi, free_var_34
   391 00000358 [1001000000000000] 
   392 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   392 00000362 [4C14000000000000] 
   393 0000036A E8AA080000              	call bind_primitive
   394                                  
   395                                  	; building closure for __bin-sub-qq
   396 0000036F 48BF-                   	mov rdi, free_var_35
   396 00000371 [1801000000000000] 
   397 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   397 0000037B [B414000000000000] 
   398 00000383 E891080000              	call bind_primitive
   399                                  
   400                                  	; building closure for __bin-mul-qq
   401 00000388 48BF-                   	mov rdi, free_var_36
   401 0000038A [2001000000000000] 
   402 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   402 00000394 [1C15000000000000] 
   403 0000039C E878080000              	call bind_primitive
   404                                  
   405                                  	; building closure for __bin-div-qq
   406 000003A1 48BF-                   	mov rdi, free_var_37
   406 000003A3 [2801000000000000] 
   407 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   407 000003AD [7415000000000000] 
   408 000003B5 E85F080000              	call bind_primitive
   409                                  
   410                                  	; building closure for error
   411 000003BA 48BF-                   	mov rdi, free_var_38
   411 000003BC [3001000000000000] 
   412 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   412 000003C6 [4216000000000000] 
   413 000003CE E846080000              	call bind_primitive
   414                                  
   415                                  	; building closure for __bin-less-than-rr
   416 000003D3 48BF-                   	mov rdi, free_var_39
   416 000003D5 [3801000000000000] 
   417 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   417 000003DF [F916000000000000] 
   418 000003E7 E82D080000              	call bind_primitive
   419                                  
   420                                  	; building closure for __bin-less-than-qq
   421 000003EC 48BF-                   	mov rdi, free_var_40
   421 000003EE [4001000000000000] 
   422 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   422 000003F8 [5017000000000000] 
   423 00000400 E814080000              	call bind_primitive
   424                                  
   425                                  	; building closure for __bin-equal-rr
   426 00000405 48BF-                   	mov rdi, free_var_41
   426 00000407 [4801000000000000] 
   427 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   427 00000411 [B317000000000000] 
   428 00000419 E8FB070000              	call bind_primitive
   429                                  
   430                                  	; building closure for __bin-equal-qq
   431 0000041E 48BF-                   	mov rdi, free_var_42
   431 00000420 [5001000000000000] 
   432 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   432 0000042A [0A18000000000000] 
   433 00000432 E8E2070000              	call bind_primitive
   434                                  
   435                                  	; building closure for quotient
   436 00000437 48BF-                   	mov rdi, free_var_43
   436 00000439 [5801000000000000] 
   437 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   437 00000443 [6D18000000000000] 
   438 0000044B E8C9070000              	call bind_primitive
   439                                  
   440                                  	; building closure for remainder
   441 00000450 48BF-                   	mov rdi, free_var_44
   441 00000452 [6001000000000000] 
   442 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   442 0000045C [D318000000000000] 
   443 00000464 E8B0070000              	call bind_primitive
   444                                  
   445                                  	; building closure for set-car!
   446 00000469 48BF-                   	mov rdi, free_var_45
   446 0000046B [6801000000000000] 
   447 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   447 00000475 [3919000000000000] 
   448 0000047D E897070000              	call bind_primitive
   449                                  
   450                                  	; building closure for set-cdr!
   451 00000482 48BF-                   	mov rdi, free_var_46
   451 00000484 [7001000000000000] 
   452 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   452 0000048E [6F19000000000000] 
   453 00000496 E87E070000              	call bind_primitive
   454                                  
   455                                  	; building closure for string-ref
   456 0000049B 48BF-                   	mov rdi, free_var_47
   456 0000049D [7801000000000000] 
   457 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   457 000004A7 [A519000000000000] 
   458 000004AF E865070000              	call bind_primitive
   459                                  
   460                                  	; building closure for vector-ref
   461 000004B4 48BF-                   	mov rdi, free_var_48
   461 000004B6 [8001000000000000] 
   462 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   462 000004C0 [101A000000000000] 
   463 000004C8 E84C070000              	call bind_primitive
   464                                  
   465                                  	; building closure for vector-set!
   466 000004CD 48BF-                   	mov rdi, free_var_49
   466 000004CF [8801000000000000] 
   467 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   467 000004D9 [6C1A000000000000] 
   468 000004E1 E833070000              	call bind_primitive
   469                                  
   470                                  	; building closure for string-set!
   471 000004E6 48BF-                   	mov rdi, free_var_50
   471 000004E8 [9001000000000000] 
   472 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   472 000004F2 [D61A000000000000] 
   473 000004FA E81A070000              	call bind_primitive
   474                                  
   475                                  	; building closure for make-vector
   476 000004FF 48BF-                   	mov rdi, free_var_51
   476 00000501 [9801000000000000] 
   477 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   477 0000050B [4B1B000000000000] 
   478 00000513 E801070000              	call bind_primitive
   479                                  
   480                                  	; building closure for make-string
   481 00000518 48BF-                   	mov rdi, free_var_52
   481 0000051A [A001000000000000] 
   482 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   482 00000524 [B51B000000000000] 
   483 0000052C E8E8060000              	call bind_primitive
   484                                  
   485                                  	; building closure for numerator
   486 00000531 48BF-                   	mov rdi, free_var_53
   486 00000533 [A801000000000000] 
   487 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   487 0000053D [271C000000000000] 
   488 00000545 E8CF060000              	call bind_primitive
   489                                  
   490                                  	; building closure for denominator
   491 0000054A 48BF-                   	mov rdi, free_var_54
   491 0000054C [B001000000000000] 
   492 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   492 00000556 [541C000000000000] 
   493 0000055E E8B6060000              	call bind_primitive
   494                                  
   495                                  	; building closure for eq?
   496 00000563 48BF-                   	mov rdi, free_var_55
   496 00000565 [B801000000000000] 
   497 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   497 0000056F [811C000000000000] 
   498 00000577 E89D060000              	call bind_primitive
   499                                  
   500 0000057C 48B8-                   	mov rax,L_constants + 125
   500 0000057E [7D00000000000000] 
   501 00000586 50                      	push rax
   502 00000587 488B0425[18010000]      	mov rax, qword [free_var_35]
   503 0000058F 50                      	push rax
   504 00000590 6A02                    	push 2
   505 00000592 488B0425[E8000000]      	mov rax, qword [free_var_29]
   506                                  	assert_closure(rax)
    42 0000059A 803805              <1>  cmp byte [%1], %2
    43 0000059D 0F85DE180000        <1>  jne L_error_incorrect_type
   507 000005A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   508 000005A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
   509                                  
   510 000005A9 4889C7                  	mov rdi, rax
   511 000005AC E8E8000000              	call print_sexpr_if_not_void
   512                                  
   513 000005B1 48BF-                           mov rdi, fmt_memory_usage
   513 000005B3 [ED00000000000000] 
   514 000005BB 488B3425[74010000]              mov rsi, qword [top_of_memory]
   515 000005C3 4881EE[C0010000]                sub rsi, memory
   516 000005CA B800000000                      mov rax, 0
   517                                  	ENTER
    33 000005CF C8000000            <1>  enter 0, 0
    34 000005D3 4883E4F0            <1>  and rsp, ~15
   518 000005D7 E8(00000000)                    call printf
   519                                  	LEAVE
    38 000005DC C9                  <1>  leave
   520 000005DD C9                      	leave
   521 000005DE C3                      	ret
   522                                  
   523                                  L_error_non_closure:
   524 000005DF 488B3C25[00000000]              mov rdi, qword [stderr]
   525 000005E7 48BE-                           mov rsi, fmt_non_closure
   525 000005E9 [2401000000000000] 
   526 000005F1 B800000000                      mov rax, 0
   527                                  	ENTER
    33 000005F6 C8000000            <1>  enter 0, 0
    34 000005FA 4883E4F0            <1>  and rsp, ~15
   528 000005FE E8(00000000)                    call fprintf
   529                                  	LEAVE
    38 00000603 C9                  <1>  leave
   530 00000604 48C7C0FEFFFFFF                  mov rax, -2
   531 0000060B E8(00000000)                    call exit
   532                                  
   533                                  L_error_improper_list:
   534 00000610 488B3C25[00000000]      	mov rdi, qword [stderr]
   535 00000618 48BE-                   	mov rsi, fmt_error_improper_list
   535 0000061A [4C01000000000000] 
   536 00000622 B800000000              	mov rax, 0
   537                                  	ENTER
    33 00000627 C8000000            <1>  enter 0, 0
    34 0000062B 4883E4F0            <1>  and rsp, ~15
   538 0000062F E8(00000000)            	call fprintf
   539                                  	LEAVE
    38 00000634 C9                  <1>  leave
   540 00000635 48C7C0F9FFFFFF          	mov rax, -7
   541 0000063C E8(00000000)            	call exit
   542                                  
   543                                  L_error_incorrect_arity_simple:
   544 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   545 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   545 0000064B [8E00000000000000] 
   546 00000653 EB12                            jmp L_error_incorrect_arity_common
   547                                  L_error_incorrect_arity_opt:
   548 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   549 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   549 0000065F [B900000000000000] 
   550                                  L_error_incorrect_arity_common:
   551 00000667 5A                              pop rdx
   552 00000668 59                              pop rcx
   553 00000669 B800000000                      mov rax, 0
   554                                  	ENTER
    33 0000066E C8000000            <1>  enter 0, 0
    34 00000672 4883E4F0            <1>  and rsp, ~15
   555 00000676 E8(00000000)                    call fprintf
   556                                  	LEAVE
    38 0000067B C9                  <1>  leave
   557 0000067C 48C7C0FAFFFFFF                  mov rax, -6
   558 00000683 E8(00000000)                    call exit
   559                                  
   560                                  section .data
   561                                  fmt_incorrect_arity_simple:
   562 0000008E 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   562 00000097 74656420256C642061-
   562 000000A0 7267756D656E74732C-
   562 000000A9 206275742067697665-
   562 000000B2 6E20256C640A00     
   563                                  fmt_incorrect_arity_opt:
   564 000000B9 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   564 000000C2 746564206174206C65-
   564 000000CB 61737420256C642061-
   564 000000D4 7267756D656E74732C-
   564 000000DD 206275742067697665-
   564 000000E6 6E20256C640A00     
   565                                  fmt_memory_usage:
   566 000000ED 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   566 000000F6 6420256C6420627974-
   566 000000FF 6573206F662064796E-
   566 00000108 616D6963616C6C792D-
   566 00000111 616C6C6F6361746564-
   566 0000011A 206D656D6F72790A0A-
   566 00000123 00                 
   567                                  fmt_non_closure:
   568 00000124 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   568 0000012D 7074696E6720746F20-
   568 00000136 6170706C792061206E-
   568 0000013F 6F6E2D636C6F737572-
   568 00000148 65210A00           
   569                                  fmt_error_improper_list:
   570 0000014C 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   570 00000155 7267756D656E742069-
   570 0000015E 73206E6F7420612070-
   570 00000167 726F706572206C6973-
   570 00000170 74210A00           
   571                                  
   572                                  section .bss
   573                                  memory:
   574 000001C0 <res 40000000h>         	resb gbytes(1)
   575                                  
   576                                  section .data
   577                                  top_of_memory:
   578 00000174 [C001000000000000]              dq memory
   579                                  
   580                                  section .text
   581                                  malloc:
   582 00000688 488B0425[74010000]              mov rax, qword [top_of_memory]
   583 00000690 48013C25[74010000]              add qword [top_of_memory], rdi
   584 00000698 C3                              ret
   585                                          
   586                                  print_sexpr_if_not_void:
   587 00000699 4881FF[00000000]        	cmp rdi, sob_void
   588 000006A0 7501                    	jne print_sexpr
   589 000006A2 C3                      	ret
   590                                  
   591                                  section .data
   592                                  fmt_void:
   593 0000017C 233C766F69643E00        	db `#<void>\0`
   594                                  fmt_nil:
   595 00000184 282900                  	db `()\0`
   596                                  fmt_boolean_false:
   597 00000187 236600                  	db `#f\0`
   598                                  fmt_boolean_true:
   599 0000018A 237400                  	db `#t\0`
   600                                  fmt_char_backslash:
   601 0000018D 235C5C00                	db `#\\\\\0`
   602                                  fmt_char_dquote:
   603 00000191 235C2200                	db `#\\"\0`
   604                                  fmt_char_simple:
   605 00000195 235C256300              	db `#\\%c\0`
   606                                  fmt_char_null:
   607 0000019A 235C6E756C00            	db `#\\nul\0`
   608                                  fmt_char_bell:
   609 000001A0 235C62656C6C00          	db `#\\bell\0`
   610                                  fmt_char_backspace:
   611 000001A7 235C6261636B737061-     	db `#\\backspace\0`
   611 000001B0 636500             
   612                                  fmt_char_tab:
   613 000001B3 235C74616200            	db `#\\tab\0`
   614                                  fmt_char_newline:
   615 000001B9 235C6E65776C696E65-     	db `#\\newline\0`
   615 000001C2 00                 
   616                                  fmt_char_formfeed:
   617 000001C3 235C7061676500          	db `#\\page\0`
   618                                  fmt_char_return:
   619 000001CA 235C72657475726E00      	db `#\\return\0`
   620                                  fmt_char_escape:
   621 000001D3 235C65736300            	db `#\\esc\0`
   622                                  fmt_char_space:
   623 000001D9 235C737061636500        	db `#\\space\0`
   624                                  fmt_char_hex:
   625 000001E1 235C782530325800        	db `#\\x%02X\0`
   626                                  fmt_closure:
   627 000001E9 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   627 000001F2 206174203078253038-
   627 000001FB 5820656E763D307825-
   627 00000204 30385820636F64653D-
   627 0000020D 3078253038583E00   
   628                                  fmt_lparen:
   629 00000215 2800                    	db `(\0`
   630                                  fmt_dotted_pair:
   631 00000217 202E2000                	db ` . \0`
   632                                  fmt_rparen:
   633 0000021B 2900                    	db `)\0`
   634                                  fmt_space:
   635 0000021D 2000                    	db ` \0`
   636                                  fmt_empty_vector:
   637 0000021F 23282900                	db `#()\0`
   638                                  fmt_vector:
   639 00000223 232800                  	db `#(\0`
   640                                  fmt_real:
   641 00000226 256600                  	db `%f\0`
   642                                  fmt_fraction:
   643 00000229 256C642F256C6400        	db `%ld/%ld\0`
   644                                  fmt_zero:
   645 00000231 3000                    	db `0\0`
   646                                  fmt_int:
   647 00000233 256C6400                	db `%ld\0`
   648                                  fmt_unknown_sexpr_error:
   649 00000237 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   649 00000240 6F723A20556E6B6E6F-
   649 00000249 776E2074797065206F-
   649 00000252 662073657870722028-
   649 0000025B 3078253032582920   
   650 00000263 617420616464726573-     	db `at address 0x%08X\n\n\0`
   650 0000026C 73203078253038580A-
   650 00000275 0A00               
   651                                  fmt_dquote:
   652 00000277 2200                    	db `\"\0`
   653                                  fmt_string_char:
   654 00000279 256300                          db `%c\0`
   655                                  fmt_string_char_7:
   656 0000027C 5C6100                          db `\\a\0`
   657                                  fmt_string_char_8:
   658 0000027F 5C6200                          db `\\b\0`
   659                                  fmt_string_char_9:
   660 00000282 5C7400                          db `\\t\0`
   661                                  fmt_string_char_10:
   662 00000285 5C6E00                          db `\\n\0`
   663                                  fmt_string_char_11:
   664 00000288 5C7600                          db `\\v\0`
   665                                  fmt_string_char_12:
   666 0000028B 5C6600                          db `\\f\0`
   667                                  fmt_string_char_13:
   668 0000028E 5C7200                          db `\\r\0`
   669                                  fmt_string_char_34:
   670 00000291 5C2200                          db `\\"\0`
   671                                  fmt_string_char_92:
   672 00000294 5C5C00                          db `\\\\\0`
   673                                  fmt_string_char_hex:
   674 00000297 5C7825583B00                    db `\\x%X;\0`
   675                                  
   676                                  section .text
   677                                  
   678                                  print_sexpr:
   679                                  	ENTER
    33 000006A3 C8000000            <1>  enter 0, 0
    34 000006A7 4883E4F0            <1>  and rsp, ~15
   680 000006AB 8A07                    	mov al, byte [rdi]
   681 000006AD 3C00                    	cmp al, T_void
   682 000006AF 744D                    	je .Lvoid
   683 000006B1 3C01                    	cmp al, T_nil
   684 000006B3 7458                    	je .Lnil
   685 000006B5 3C09                    	cmp al, T_boolean_false
   686 000006B7 7463                    	je .Lboolean_false
   687 000006B9 3C0A                    	cmp al, T_boolean_true
   688 000006BB 746E                    	je .Lboolean_true
   689 000006BD 3C02                    	cmp al, T_char
   690 000006BF 7479                    	je .Lchar
   691 000006C1 3C04                    	cmp al, T_symbol
   692 000006C3 0F84BB010000            	je .Lsymbol
   693 000006C9 3C21                    	cmp al, T_pair
   694 000006CB 0F84D6010000            	je .Lpair
   695 000006D1 3C22                    	cmp al, T_vector
   696 000006D3 0F849F020000            	je .Lvector
   697 000006D9 3C05                    	cmp al, T_closure
   698 000006DB 0F8489010000            	je .Lclosure
   699 000006E1 3C12                    	cmp al, T_real
   700 000006E3 0F8430030000            	je .Lreal
   701 000006E9 3C11                    	cmp al, T_rational
   702 000006EB 0F8456030000            	je .Lrational
   703 000006F1 3C03                    	cmp al, T_string
   704 000006F3 0F848F030000            	je .Lstring
   705                                  
   706 000006F9 E9C7040000              	jmp .Lunknown_sexpr_type
   707                                  
   708                                  .Lvoid:
   709 000006FE 48BF-                   	mov rdi, fmt_void
   709 00000700 [7C01000000000000] 
   710 00000708 E9F5040000              	jmp .Lemit
   711                                  
   712                                  .Lnil:
   713 0000070D 48BF-                   	mov rdi, fmt_nil
   713 0000070F [8401000000000000] 
   714 00000717 E9E6040000              	jmp .Lemit
   715                                  
   716                                  .Lboolean_false:
   717 0000071C 48BF-                   	mov rdi, fmt_boolean_false
   717 0000071E [8701000000000000] 
   718 00000726 E9D7040000              	jmp .Lemit
   719                                  
   720                                  .Lboolean_true:
   721 0000072B 48BF-                   	mov rdi, fmt_boolean_true
   721 0000072D [8A01000000000000] 
   722 00000735 E9C8040000              	jmp .Lemit
   723                                  
   724                                  .Lchar:
   725 0000073A 8A4701                  	mov al, byte [rdi + 1]
   726 0000073D 3C20                    	cmp al, ' '
   727 0000073F 7E28                    	jle .Lchar_whitespace
   728 00000741 3C5C                    	cmp al, 92 		; backslash
   729 00000743 0F847C000000            	je .Lchar_backslash
   730 00000749 3C22                    	cmp al, '"'
   731 0000074B 0F8483000000            	je .Lchar_dquote
   732 00000751 4825FF000000            	and rax, 255
   733 00000757 48BF-                   	mov rdi, fmt_char_simple
   733 00000759 [9501000000000000] 
   734 00000761 4889C6                  	mov rsi, rax
   735 00000764 E999040000              	jmp .Lemit
   736                                  
   737                                  .Lchar_whitespace:
   738 00000769 3C00                    	cmp al, 0
   739 0000076B 7476                    	je .Lchar_null
   740 0000076D 3C07                    	cmp al, 7
   741 0000076F 0F847D000000            	je .Lchar_bell
   742 00000775 3C08                    	cmp al, 8
   743 00000777 0F8484000000            	je .Lchar_backspace
   744 0000077D 3C09                    	cmp al, 9
   745 0000077F 0F848B000000            	je .Lchar_tab
   746 00000785 3C0A                    	cmp al, 10
   747 00000787 0F8492000000            	je .Lchar_newline
   748 0000078D 3C0C                    	cmp al, 12
   749 0000078F 0F8499000000            	je .Lchar_formfeed
   750 00000795 3C0D                    	cmp al, 13
   751 00000797 0F84A0000000            	je .Lchar_return
   752 0000079D 3C1B                    	cmp al, 27
   753 0000079F 0F84A7000000            	je .Lchar_escape
   754 000007A5 4825FF000000            	and rax, 255
   755 000007AB 3C20                    	cmp al, ' '
   756 000007AD 0F84A8000000            	je .Lchar_space
   757 000007B3 48BF-                   	mov rdi, fmt_char_hex
   757 000007B5 [E101000000000000] 
   758 000007BD 4889C6                  	mov rsi, rax
   759 000007C0 E93D040000              	jmp .Lemit	
   760                                  
   761                                  .Lchar_backslash:
   762 000007C5 48BF-                   	mov rdi, fmt_char_backslash
   762 000007C7 [8D01000000000000] 
   763 000007CF E92E040000              	jmp .Lemit
   764                                  
   765                                  .Lchar_dquote:
   766 000007D4 48BF-                   	mov rdi, fmt_char_dquote
   766 000007D6 [9101000000000000] 
   767 000007DE E91F040000              	jmp .Lemit
   768                                  
   769                                  .Lchar_null:
   770 000007E3 48BF-                   	mov rdi, fmt_char_null
   770 000007E5 [9A01000000000000] 
   771 000007ED E910040000              	jmp .Lemit
   772                                  
   773                                  .Lchar_bell:
   774 000007F2 48BF-                   	mov rdi, fmt_char_bell
   774 000007F4 [A001000000000000] 
   775 000007FC E901040000              	jmp .Lemit
   776                                  
   777                                  .Lchar_backspace:
   778 00000801 48BF-                   	mov rdi, fmt_char_backspace
   778 00000803 [A701000000000000] 
   779 0000080B E9F2030000              	jmp .Lemit
   780                                  
   781                                  .Lchar_tab:
   782 00000810 48BF-                   	mov rdi, fmt_char_tab
   782 00000812 [B301000000000000] 
   783 0000081A E9E3030000              	jmp .Lemit
   784                                  
   785                                  .Lchar_newline:
   786 0000081F 48BF-                   	mov rdi, fmt_char_newline
   786 00000821 [B901000000000000] 
   787 00000829 E9D4030000              	jmp .Lemit
   788                                  
   789                                  .Lchar_formfeed:
   790 0000082E 48BF-                   	mov rdi, fmt_char_formfeed
   790 00000830 [C301000000000000] 
   791 00000838 E9C5030000              	jmp .Lemit
   792                                  
   793                                  .Lchar_return:
   794 0000083D 48BF-                   	mov rdi, fmt_char_return
   794 0000083F [CA01000000000000] 
   795 00000847 E9B6030000              	jmp .Lemit
   796                                  
   797                                  .Lchar_escape:
   798 0000084C 48BF-                   	mov rdi, fmt_char_escape
   798 0000084E [D301000000000000] 
   799 00000856 E9A7030000              	jmp .Lemit
   800                                  
   801                                  .Lchar_space:
   802 0000085B 48BF-                   	mov rdi, fmt_char_space
   802 0000085D [D901000000000000] 
   803 00000865 E998030000              	jmp .Lemit
   804                                  
   805                                  .Lclosure:
   806 0000086A 4889FE                  	mov rsi, qword rdi
   807 0000086D 48BF-                   	mov rdi, fmt_closure
   807 0000086F [E901000000000000] 
   808 00000877 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   809 0000087B 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   810 0000087F E97E030000              	jmp .Lemit
   811                                  
   812                                  .Lsymbol:
   813 00000884 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   814 00000888 BE01000000              	mov rsi, 1		 ; size = 1 byte
   815 0000088D 488B5701                	mov rdx, qword [rdi + 1] ; length
   816 00000891 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   817 00000895 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   818 0000089D E8(00000000)            	call fwrite
   819 000008A2 E970030000              	jmp .Lend
   820                                  	
   821                                  .Lpair:
   822 000008A7 57                      	push rdi
   823 000008A8 48BF-                   	mov rdi, fmt_lparen
   823 000008AA [1502000000000000] 
   824 000008B2 B800000000              	mov rax, 0
   825                                          ENTER
    33 000008B7 C8000000            <1>  enter 0, 0
    34 000008BB 4883E4F0            <1>  and rsp, ~15
   826 000008BF E8(00000000)            	call printf
   827                                          LEAVE
    38 000008C4 C9                  <1>  leave
   828 000008C5 488B3C24                	mov rdi, qword [rsp] 	; pair
   829 000008C9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   830 000008CD E8D1FDFFFF              	call print_sexpr
   831 000008D2 5F                      	pop rdi 		; pair
   832 000008D3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   833                                  .Lcdr:
   834 000008D7 8A07                    	mov al, byte [rdi]
   835 000008D9 3C01                    	cmp al, T_nil
   836 000008DB 7447                    	je .Lcdr_nil
   837 000008DD 3C21                    	cmp al, T_pair
   838 000008DF 7462                    	je .Lcdr_pair
   839 000008E1 57                      	push rdi
   840 000008E2 48BF-                   	mov rdi, fmt_dotted_pair
   840 000008E4 [1702000000000000] 
   841 000008EC B800000000              	mov rax, 0
   842                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   843 000008F9 E8(00000000)            	call printf
   844                                  	LEAVE
    38 000008FE C9                  <1>  leave
   845 000008FF 5F                      	pop rdi
   846 00000900 E89EFDFFFF              	call print_sexpr
   847 00000905 48BF-                   	mov rdi, fmt_rparen
   847 00000907 [1B02000000000000] 
   848 0000090F B800000000              	mov rax, 0
   849                                  	ENTER
    33 00000914 C8000000            <1>  enter 0, 0
    34 00000918 4883E4F0            <1>  and rsp, ~15
   850 0000091C E8(00000000)            	call printf
   851                                  	LEAVE
    38 00000921 C9                  <1>  leave
   852                                  	LEAVE
    38 00000922 C9                  <1>  leave
   853 00000923 C3                      	ret
   854                                  
   855                                  .Lcdr_nil:
   856 00000924 48BF-                   	mov rdi, fmt_rparen
   856 00000926 [1B02000000000000] 
   857 0000092E B800000000              	mov rax, 0
   858                                  	ENTER
    33 00000933 C8000000            <1>  enter 0, 0
    34 00000937 4883E4F0            <1>  and rsp, ~15
   859 0000093B E8(00000000)            	call printf
   860                                  	LEAVE
    38 00000940 C9                  <1>  leave
   861                                  	LEAVE
    38 00000941 C9                  <1>  leave
   862 00000942 C3                      	ret
   863                                  
   864                                  .Lcdr_pair:
   865 00000943 57                      	push rdi
   866 00000944 48BF-                   	mov rdi, fmt_space
   866 00000946 [1D02000000000000] 
   867 0000094E B800000000              	mov rax, 0
   868                                  	ENTER
    33 00000953 C8000000            <1>  enter 0, 0
    34 00000957 4883E4F0            <1>  and rsp, ~15
   869 0000095B E8(00000000)            	call printf
   870                                  	LEAVE
    38 00000960 C9                  <1>  leave
   871 00000961 488B3C24                	mov rdi, qword [rsp]
   872 00000965 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   873 00000969 E835FDFFFF              	call print_sexpr
   874 0000096E 5F                      	pop rdi
   875 0000096F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   876 00000973 E95FFFFFFF              	jmp .Lcdr
   877                                  
   878                                  .Lvector:
   879 00000978 488B4701                	mov rax, qword [rdi + 1] ; length
   880 0000097C 4883F800                	cmp rax, 0
   881 00000980 0F8484000000            	je .Lvector_empty
   882 00000986 57                      	push rdi
   883 00000987 48BF-                   	mov rdi, fmt_vector
   883 00000989 [2302000000000000] 
   884 00000991 B800000000              	mov rax, 0
   885                                  	ENTER
    33 00000996 C8000000            <1>  enter 0, 0
    34 0000099A 4883E4F0            <1>  and rsp, ~15
   886 0000099E E8(00000000)            	call printf
   887                                  	LEAVE
    38 000009A3 C9                  <1>  leave
   888 000009A4 488B3C24                	mov rdi, qword [rsp]
   889 000009A8 FF7701                  	push qword [rdi + 1]
   890 000009AB 6A01                    	push 1
   891 000009AD 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   892 000009B1 E8EDFCFFFF              	call print_sexpr
   893                                  .Lvector_loop:
   894                                  	; [rsp] index
   895                                  	; [rsp + 8*1] limit
   896                                  	; [rsp + 8*2] vector
   897 000009B6 488B0424                	mov rax, qword [rsp]
   898 000009BA 483B442408              	cmp rax, qword [rsp + 8*1]
   899 000009BF 7436                    	je .Lvector_end
   900 000009C1 48BF-                   	mov rdi, fmt_space
   900 000009C3 [1D02000000000000] 
   901 000009CB B800000000              	mov rax, 0
   902                                  	ENTER
    33 000009D0 C8000000            <1>  enter 0, 0
    34 000009D4 4883E4F0            <1>  and rsp, ~15
   903 000009D8 E8(00000000)            	call printf
   904                                  	LEAVE
    38 000009DD C9                  <1>  leave
   905 000009DE 488B0424                	mov rax, qword [rsp]
   906 000009E2 488B5C2410              	mov rbx, qword [rsp + 8*2]
   907 000009E7 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   908 000009EC E8B2FCFFFF              	call print_sexpr
   909 000009F1 48FF0424                	inc qword [rsp]
   910 000009F5 EBBF                    	jmp .Lvector_loop
   911                                  
   912                                  .Lvector_end:
   913 000009F7 4883C418                	add rsp, 8*3
   914 000009FB 48BF-                   	mov rdi, fmt_rparen
   914 000009FD [1B02000000000000] 
   915 00000A05 E9F8010000              	jmp .Lemit	
   916                                  
   917                                  .Lvector_empty:
   918 00000A0A 48BF-                   	mov rdi, fmt_empty_vector
   918 00000A0C [1F02000000000000] 
   919 00000A14 E9E9010000              	jmp .Lemit
   920                                  
   921                                  .Lreal:
   922 00000A19 FF7701                  	push qword [rdi + 1]
   923 00000A1C F20F100424              	movsd xmm0, qword [rsp]
   924 00000A21 4883C408                	add rsp, 8*1
   925 00000A25 48BF-                   	mov rdi, fmt_real
   925 00000A27 [2602000000000000] 
   926 00000A2F B801000000              	mov rax, 1
   927                                  	ENTER
    33 00000A34 C8000000            <1>  enter 0, 0
    34 00000A38 4883E4F0            <1>  and rsp, ~15
   928 00000A3C E8(00000000)            	call printf
   929                                  	LEAVE
    38 00000A41 C9                  <1>  leave
   930 00000A42 E9D0010000              	jmp .Lend
   931                                  
   932                                  .Lrational:
   933 00000A47 488B7701                	mov rsi, qword [rdi + 1]
   934 00000A4B 488B5709                	mov rdx, qword [rdi + 1 + 8]
   935 00000A4F 4883FE00                	cmp rsi, 0
   936 00000A53 7415                    	je .Lrat_zero
   937 00000A55 4883FA01                	cmp rdx, 1
   938 00000A59 741E                    	je .Lrat_int
   939 00000A5B 48BF-                   	mov rdi, fmt_fraction
   939 00000A5D [2902000000000000] 
   940 00000A65 E998010000              	jmp .Lemit
   941                                  
   942                                  .Lrat_zero:
   943 00000A6A 48BF-                   	mov rdi, fmt_zero
   943 00000A6C [3102000000000000] 
   944 00000A74 E989010000              	jmp .Lemit
   945                                  
   946                                  .Lrat_int:
   947 00000A79 48BF-                   	mov rdi, fmt_int
   947 00000A7B [3302000000000000] 
   948 00000A83 E97A010000              	jmp .Lemit
   949                                  
   950                                  .Lstring:
   951 00000A88 488D4709                	lea rax, [rdi + 1 + 8]
   952 00000A8C 50                      	push rax
   953 00000A8D FF7701                  	push qword [rdi + 1]
   954 00000A90 48BF-                   	mov rdi, fmt_dquote
   954 00000A92 [7702000000000000] 
   955 00000A9A B800000000              	mov rax, 0
   956                                  	ENTER
    33 00000A9F C8000000            <1>  enter 0, 0
    34 00000AA3 4883E4F0            <1>  and rsp, ~15
   957 00000AA7 E8(00000000)            	call printf
   958                                  	LEAVE
    38 00000AAC C9                  <1>  leave
   959                                  .Lstring_loop:
   960                                  	; qword [rsp]: limit
   961                                  	; qword [rsp + 8*1]: char *
   962 00000AAD 48833C2400              	cmp qword [rsp], 0
   963 00000AB2 0F84FD000000            	je .Lstring_end
   964 00000AB8 488B442408              	mov rax, qword [rsp + 8*1]
   965 00000ABD 8A00                    	mov al, byte [rax]
   966 00000ABF 4825FF000000            	and rax, 255
   967 00000AC5 3C07                    	cmp al, 7
   968 00000AC7 7468                            je .Lstring_char_7
   969 00000AC9 3C08                            cmp al, 8
   970 00000ACB 7470                            je .Lstring_char_8
   971 00000ACD 3C09                            cmp al, 9
   972 00000ACF 7478                            je .Lstring_char_9
   973 00000AD1 3C0A                            cmp al, 10
   974 00000AD3 0F847C000000                    je .Lstring_char_10
   975 00000AD9 3C0B                            cmp al, 11
   976 00000ADB 0F8480000000                    je .Lstring_char_11
   977 00000AE1 3C0C                            cmp al, 12
   978 00000AE3 0F8484000000                    je .Lstring_char_12
   979 00000AE9 3C0D                            cmp al, 13
   980 00000AEB 0F8488000000                    je .Lstring_char_13
   981 00000AF1 3C22                            cmp al, 34
   982 00000AF3 0F848C000000                    je .Lstring_char_34
   983 00000AF9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   985 00000AFB 3C20                            cmp al, ' '
   986 00000AFD 0F8CA0000000                    jl .Lstring_char_hex
   987 00000B03 48BF-                           mov rdi, fmt_string_char
   987 00000B05 [7902000000000000] 
   988 00000B0D 4889C6                          mov rsi, rax
   989                                  .Lstring_char_emit:
   990 00000B10 B800000000                      mov rax, 0
   991                                          ENTER
    33 00000B15 C8000000            <1>  enter 0, 0
    34 00000B19 4883E4F0            <1>  and rsp, ~15
   992 00000B1D E8(00000000)                    call printf
   993                                          LEAVE
    38 00000B22 C9                  <1>  leave
   994 00000B23 48FF0C24                        dec qword [rsp]
   995 00000B27 48FF442408                      inc qword [rsp + 8*1]
   996 00000B2C E97CFFFFFF                      jmp .Lstring_loop
   997                                  
   998                                  .Lstring_char_7:
   999 00000B31 48BF-                           mov rdi, fmt_string_char_7
   999 00000B33 [7C02000000000000] 
  1000 00000B3B EBD3                            jmp .Lstring_char_emit
  1001                                  
  1002                                  .Lstring_char_8:
  1003 00000B3D 48BF-                           mov rdi, fmt_string_char_8
  1003 00000B3F [7F02000000000000] 
  1004 00000B47 EBC7                            jmp .Lstring_char_emit
  1005                                          
  1006                                  .Lstring_char_9:
  1007 00000B49 48BF-                           mov rdi, fmt_string_char_9
  1007 00000B4B [8202000000000000] 
  1008 00000B53 EBBB                            jmp .Lstring_char_emit
  1009                                  
  1010                                  .Lstring_char_10:
  1011 00000B55 48BF-                           mov rdi, fmt_string_char_10
  1011 00000B57 [8502000000000000] 
  1012 00000B5F EBAF                            jmp .Lstring_char_emit
  1013                                  
  1014                                  .Lstring_char_11:
  1015 00000B61 48BF-                           mov rdi, fmt_string_char_11
  1015 00000B63 [8802000000000000] 
  1016 00000B6B EBA3                            jmp .Lstring_char_emit
  1017                                  
  1018                                  .Lstring_char_12:
  1019 00000B6D 48BF-                           mov rdi, fmt_string_char_12
  1019 00000B6F [8B02000000000000] 
  1020 00000B77 EB97                            jmp .Lstring_char_emit
  1021                                  
  1022                                  .Lstring_char_13:
  1023 00000B79 48BF-                           mov rdi, fmt_string_char_13
  1023 00000B7B [8E02000000000000] 
  1024 00000B83 EB8B                            jmp .Lstring_char_emit
  1025                                  
  1026                                  .Lstring_char_34:
  1027 00000B85 48BF-                           mov rdi, fmt_string_char_34
  1027 00000B87 [9102000000000000] 
  1028 00000B8F E97CFFFFFF                      jmp .Lstring_char_emit
  1029                                  
  1030                                  .Lstring_char_92:
  1031 00000B94 48BF-                           mov rdi, fmt_string_char_92
  1031 00000B96 [9402000000000000] 
  1032 00000B9E E96DFFFFFF                      jmp .Lstring_char_emit
  1033                                  
  1034                                  .Lstring_char_hex:
  1035 00000BA3 48BF-                           mov rdi, fmt_string_char_hex
  1035 00000BA5 [9702000000000000] 
  1036 00000BAD 4889C6                          mov rsi, rax
  1037 00000BB0 E95BFFFFFF                      jmp .Lstring_char_emit        
  1038                                  
  1039                                  .Lstring_end:
  1040 00000BB5 4883C410                	add rsp, 8 * 2
  1041 00000BB9 48BF-                   	mov rdi, fmt_dquote
  1041 00000BBB [7702000000000000] 
  1042 00000BC3 EB3D                    	jmp .Lemit
  1043                                  
  1044                                  .Lunknown_sexpr_type:
  1045 00000BC5 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1045 00000BC7 [3702000000000000] 
  1046 00000BCF 4825FF000000            	and rax, 255
  1047 00000BD5 4889C2                  	mov rdx, rax
  1048 00000BD8 4889F9                  	mov rcx, rdi
  1049 00000BDB 488B3C25[00000000]      	mov rdi, qword [stderr]
  1050 00000BE3 B800000000              	mov rax, 0
  1051                                  	ENTER
    33 00000BE8 C8000000            <1>  enter 0, 0
    34 00000BEC 4883E4F0            <1>  and rsp, ~15
  1052 00000BF0 E8(00000000)            	call fprintf
  1053                                  	LEAVE
    38 00000BF5 C9                  <1>  leave
  1054 00000BF6 48C7C0FFFFFFFF          	mov rax, -1
  1055 00000BFD E8(00000000)            	call exit
  1056                                  
  1057                                  .Lemit:
  1058 00000C02 B800000000              	mov rax, 0
  1059                                  	ENTER
    33 00000C07 C8000000            <1>  enter 0, 0
    34 00000C0B 4883E4F0            <1>  and rsp, ~15
  1060 00000C0F E8(00000000)            	call printf
  1061                                  	LEAVE
    38 00000C14 C9                  <1>  leave
  1062 00000C15 EB00                    	jmp .Lend
  1063                                  
  1064                                  .Lend:
  1065                                  	LEAVE
    38 00000C17 C9                  <1>  leave
  1066 00000C18 C3                      	ret
  1067                                  
  1068                                  ;;; rdi: address of free variable
  1069                                  ;;; rsi: address of code-pointer
  1070                                  bind_primitive:
  1071                                          ENTER
    33 00000C19 C8000000            <1>  enter 0, 0
    34 00000C1D 4883E4F0            <1>  and rsp, ~15
  1072 00000C21 57                              push rdi
  1073 00000C22 BF11000000                      mov rdi, (1 + 8 + 8)
  1074 00000C27 E85CFAFFFF                      call malloc
  1075 00000C2C 5F                              pop rdi
  1076 00000C2D C60005                          mov byte [rax], T_closure
  1077 00000C30 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1078 00000C38 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1079 00000C3C 488907                          mov qword [rdi], rax
  1080                                          LEAVE
    38 00000C3F C9                  <1>  leave
  1081 00000C40 C3                              ret
  1082                                  
  1083                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1084                                  L_code_ptr_bin_apply:
  1085 00000C41 C8000000                        enter 0, 0
  1086                                          ;finding the list's length
  1087 00000C45 CC                              int3
  1088 00000C46 4831C9                          xor rcx, rcx ;0
  1089 00000C49 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
  1090                                          assert_pair(rax)
    42 00000C4D 803821              <1>  cmp byte [%1], %2
    43 00000C50 0F852B120000        <1>  jne L_error_incorrect_type
  1091 00000C56 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
  1092                                          my_loop1:
  1093 00000C5A 483D[01000000]                          cmp rax, sob_nil ;if nill
  1094 00000C60 7417                                    je my_loop_end1 ;jmp end
  1095 00000C62 48FFC1                                  inc rcx 
  1096 00000C65 53                                      push rbx ;insrting val to stack
  1097                                                  assert_pair(rax)
    42 00000C66 803821              <1>  cmp byte [%1], %2
    43 00000C69 0F8512120000        <1>  jne L_error_incorrect_type
  1098 00000C6F 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
  1099 00000C73 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
  1100 00000C77 EBE1                                    jmp my_loop1
  1101                                          my_loop_end1:
  1102 00000C79 CC                              int3
  1103                                          ;TODO: ecx = 0 ?
  1104                                  
  1105                                          ;make values in the opposite order:
  1106                                          ;1.pushing all argument one more time in the right order
  1107 00000C7A 4889CB                          mov rbx, rcx ;count-up
  1108 00000C7D B900000000                      mov rcx, 0 
  1109 00000C82 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
  1110                                          my_loop2:
  1111 00000C85 4839D9                                  cmp rcx, rbx ; if rcx = n
  1112 00000C88 740A                                    je my_loop_end2 ;then: jump to the end
  1113 00000C8A 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
  1114 00000C8E 50                                      push rax
  1115 00000C8F 48FFC1                                  inc rcx
  1116 00000C92 EBF1                                    jmp my_loop2
  1117                                          my_loop_end2:
  1118 00000C94 CC                              int3
  1119                                          ;2.overwriting element above by element below but in correct order
  1120 00000C95 488D14DD30000000                lea rdx, [8 * (rbx + 6)] ;nubmer of *bytes* we need to skip
  1121 00000C9D 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
  1122 00000CA1 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
  1123                                          ;mov r10, qword [rbp + 8 * 2] ; save lex-env
  1124 00000CA5 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
  1125 00000CA9 B900000000                      mov rcx, 0
  1126                                          my_loop3:
  1127 00000CAE 4839D9                                  cmp rcx, rbx ;if rcx = n
  1128 00000CB1 7417                                    je my_loop_end3 ;then: jump to the end
  1129 00000CB3 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
  1130 00000CB7 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
  1131 00000CBB 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
  1132 00000CBE 4883C408                                add rsp, 8 ;pop arg we used
  1133 00000CC2 48FFC1                                  inc rcx 
  1134 00000CC5 4831C0                                  xor rax, rax
  1135 00000CC8 EBE4                                    jmp my_loop3
  1136                                          my_loop_end3:
  1137 00000CCA CC                              int3
  1138 00000CCB 83F906                          cmp ecx, 6
  1139 00000CCE 7F14                            jg seven_or_more
  1140 00000CD0 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
  1141 00000CD4 4989CA                          mov r10, rcx
  1142 00000CD7 49F7DA                          neg r10
  1143 00000CDA 4983C206                        add r10, 6
  1144 00000CDE 4A8D24D4                        lea rsp, [rsp + 8 * r10] ; pop rest of old frame 
  1145 00000CE2 EB05                            jmp continu
  1146                                          seven_or_more:
  1147 00000CE4 488D642430                      lea rsp, [rsp + 8 * 6] ; pop rest of 1st time pushed args
  1148                                          continu:
  1149 00000CE9 51                              push rcx ;push number of arguments
  1150 00000CEA 41FF7001                        push SOB_CLOSURE_ENV(r8) ; push lex-env
  1151 00000CEE 57                              push rdi ; push old ret-add
  1152 00000CEF 4889F5                          mov rbp, rsi ;rbp = old-rbp
  1153                                          ;mov rsp, rbp; the part of LEAVE we need
  1154 00000CF2 41FFE0                          jmp r8 ; fun to apply
  1155                                  	
  1156                                  L_code_ptr_is_null:
  1157                                          ENTER
    33 00000CF5 C8000000            <1>  enter 0, 0
    34 00000CF9 4883E4F0            <1>  and rsp, ~15
  1158 00000CFD 48837D1801                      cmp COUNT, 1
  1159 00000D02 0F85A5100000                    jne L_error_arg_count_1
  1160 00000D08 488B4520                        mov rax, PARAM(0)
  1161 00000D0C 803801                          cmp byte [rax], T_nil
  1162 00000D0F 750C                            jne .L_false
  1163 00000D11 48B8-                           mov rax, sob_boolean_true
  1163 00000D13 [0300000000000000] 
  1164 00000D1B EB0A                            jmp .L_end
  1165                                  .L_false:
  1166 00000D1D 48B8-                           mov rax, sob_boolean_false
  1166 00000D1F [0200000000000000] 
  1167                                  .L_end:
  1168                                          LEAVE
    38 00000D27 C9                  <1>  leave
  1169 00000D28 C21800                          ret AND_KILL_FRAME(1)
  1170                                  
  1171                                  L_code_ptr_is_pair:
  1172                                          ENTER
    33 00000D2B C8000000            <1>  enter 0, 0
    34 00000D2F 4883E4F0            <1>  and rsp, ~15
  1173 00000D33 48837D1801                      cmp COUNT, 1
  1174 00000D38 0F856F100000                    jne L_error_arg_count_1
  1175 00000D3E 488B4520                        mov rax, PARAM(0)
  1176 00000D42 803821                          cmp byte [rax], T_pair
  1177 00000D45 750C                            jne .L_false
  1178 00000D47 48B8-                           mov rax, sob_boolean_true
  1178 00000D49 [0300000000000000] 
  1179 00000D51 EB0A                            jmp .L_end
  1180                                  .L_false:
  1181 00000D53 48B8-                           mov rax, sob_boolean_false
  1181 00000D55 [0200000000000000] 
  1182                                  .L_end:
  1183                                          LEAVE
    38 00000D5D C9                  <1>  leave
  1184 00000D5E C21800                          ret AND_KILL_FRAME(1)
  1185                                          
  1186                                  L_code_ptr_is_void:
  1187                                          ENTER
    33 00000D61 C8000000            <1>  enter 0, 0
    34 00000D65 4883E4F0            <1>  and rsp, ~15
  1188 00000D69 48837D1801                      cmp COUNT, 1
  1189 00000D6E 0F8539100000                    jne L_error_arg_count_1
  1190 00000D74 488B4520                        mov rax, PARAM(0)
  1191 00000D78 803800                          cmp byte [rax], T_void
  1192 00000D7B 750C                            jne .L_false
  1193 00000D7D 48B8-                           mov rax, sob_boolean_true
  1193 00000D7F [0300000000000000] 
  1194 00000D87 EB0A                            jmp .L_end
  1195                                  .L_false:
  1196 00000D89 48B8-                           mov rax, sob_boolean_false
  1196 00000D8B [0200000000000000] 
  1197                                  .L_end:
  1198                                          LEAVE
    38 00000D93 C9                  <1>  leave
  1199 00000D94 C21800                          ret AND_KILL_FRAME(1)
  1200                                  
  1201                                  L_code_ptr_is_char:
  1202                                          ENTER
    33 00000D97 C8000000            <1>  enter 0, 0
    34 00000D9B 4883E4F0            <1>  and rsp, ~15
  1203 00000D9F 48837D1801                      cmp COUNT, 1
  1204 00000DA4 0F8503100000                    jne L_error_arg_count_1
  1205 00000DAA 488B4520                        mov rax, PARAM(0)
  1206 00000DAE 803802                          cmp byte [rax], T_char
  1207 00000DB1 750C                            jne .L_false
  1208 00000DB3 48B8-                           mov rax, sob_boolean_true
  1208 00000DB5 [0300000000000000] 
  1209 00000DBD EB0A                            jmp .L_end
  1210                                  .L_false:
  1211 00000DBF 48B8-                           mov rax, sob_boolean_false
  1211 00000DC1 [0200000000000000] 
  1212                                  .L_end:
  1213                                          LEAVE
    38 00000DC9 C9                  <1>  leave
  1214 00000DCA C21800                          ret AND_KILL_FRAME(1)
  1215                                  
  1216                                  L_code_ptr_is_string:
  1217                                          ENTER
    33 00000DCD C8000000            <1>  enter 0, 0
    34 00000DD1 4883E4F0            <1>  and rsp, ~15
  1218 00000DD5 48837D1801                      cmp COUNT, 1
  1219 00000DDA 0F85CD0F0000                    jne L_error_arg_count_1
  1220 00000DE0 488B4520                        mov rax, PARAM(0)
  1221 00000DE4 803803                          cmp byte [rax], T_string
  1222 00000DE7 750C                            jne .L_false
  1223 00000DE9 48B8-                           mov rax, sob_boolean_true
  1223 00000DEB [0300000000000000] 
  1224 00000DF3 EB0A                            jmp .L_end
  1225                                  .L_false:
  1226 00000DF5 48B8-                           mov rax, sob_boolean_false
  1226 00000DF7 [0200000000000000] 
  1227                                  .L_end:
  1228                                          LEAVE
    38 00000DFF C9                  <1>  leave
  1229 00000E00 C21800                          ret AND_KILL_FRAME(1)
  1230                                  
  1231                                  L_code_ptr_is_symbol:
  1232                                          ENTER
    33 00000E03 C8000000            <1>  enter 0, 0
    34 00000E07 4883E4F0            <1>  and rsp, ~15
  1233 00000E0B 48837D1801                      cmp COUNT, 1
  1234 00000E10 0F85970F0000                    jne L_error_arg_count_1
  1235 00000E16 488B4520                        mov rax, PARAM(0)
  1236 00000E1A 803804                          cmp byte [rax], T_symbol
  1237 00000E1D 750C                            jne .L_false
  1238 00000E1F 48B8-                           mov rax, sob_boolean_true
  1238 00000E21 [0300000000000000] 
  1239 00000E29 EB0A                            jmp .L_end
  1240                                  .L_false:
  1241 00000E2B 48B8-                           mov rax, sob_boolean_false
  1241 00000E2D [0200000000000000] 
  1242                                  .L_end:
  1243                                          LEAVE
    38 00000E35 C9                  <1>  leave
  1244 00000E36 C21800                          ret AND_KILL_FRAME(1)
  1245                                  
  1246                                  L_code_ptr_is_vector:
  1247                                          ENTER
    33 00000E39 C8000000            <1>  enter 0, 0
    34 00000E3D 4883E4F0            <1>  and rsp, ~15
  1248 00000E41 48837D1801                      cmp COUNT, 1
  1249 00000E46 0F85610F0000                    jne L_error_arg_count_1
  1250 00000E4C 488B4520                        mov rax, PARAM(0)
  1251 00000E50 803822                          cmp byte [rax], T_vector
  1252 00000E53 750C                            jne .L_false
  1253 00000E55 48B8-                           mov rax, sob_boolean_true
  1253 00000E57 [0300000000000000] 
  1254 00000E5F EB0A                            jmp .L_end
  1255                                  .L_false:
  1256 00000E61 48B8-                           mov rax, sob_boolean_false
  1256 00000E63 [0200000000000000] 
  1257                                  .L_end:
  1258                                          LEAVE
    38 00000E6B C9                  <1>  leave
  1259 00000E6C C21800                          ret AND_KILL_FRAME(1)
  1260                                  
  1261                                  L_code_ptr_is_closure:
  1262                                          ENTER
    33 00000E6F C8000000            <1>  enter 0, 0
    34 00000E73 4883E4F0            <1>  and rsp, ~15
  1263 00000E77 48837D1801                      cmp COUNT, 1
  1264 00000E7C 0F852B0F0000                    jne L_error_arg_count_1
  1265 00000E82 488B4520                        mov rax, PARAM(0)
  1266 00000E86 803805                          cmp byte [rax], T_closure
  1267 00000E89 750C                            jne .L_false
  1268 00000E8B 48B8-                           mov rax, sob_boolean_true
  1268 00000E8D [0300000000000000] 
  1269 00000E95 EB0A                            jmp .L_end
  1270                                  .L_false:
  1271 00000E97 48B8-                           mov rax, sob_boolean_false
  1271 00000E99 [0200000000000000] 
  1272                                  .L_end:
  1273                                          LEAVE
    38 00000EA1 C9                  <1>  leave
  1274 00000EA2 C21800                          ret AND_KILL_FRAME(1)
  1275                                  
  1276                                  L_code_ptr_is_real:
  1277                                          ENTER
    33 00000EA5 C8000000            <1>  enter 0, 0
    34 00000EA9 4883E4F0            <1>  and rsp, ~15
  1278 00000EAD 48837D1801                      cmp COUNT, 1
  1279 00000EB2 0F85F50E0000                    jne L_error_arg_count_1
  1280 00000EB8 488B4520                        mov rax, PARAM(0)
  1281 00000EBC 803812                          cmp byte [rax], T_real
  1282 00000EBF 750C                            jne .L_false
  1283 00000EC1 48B8-                           mov rax, sob_boolean_true
  1283 00000EC3 [0300000000000000] 
  1284 00000ECB EB0A                            jmp .L_end
  1285                                  .L_false:
  1286 00000ECD 48B8-                           mov rax, sob_boolean_false
  1286 00000ECF [0200000000000000] 
  1287                                  .L_end:
  1288                                          LEAVE
    38 00000ED7 C9                  <1>  leave
  1289 00000ED8 C21800                          ret AND_KILL_FRAME(1)
  1290                                  
  1291                                  L_code_ptr_is_rational:
  1292                                          ENTER
    33 00000EDB C8000000            <1>  enter 0, 0
    34 00000EDF 4883E4F0            <1>  and rsp, ~15
  1293 00000EE3 48837D1801                      cmp COUNT, 1
  1294 00000EE8 0F85BF0E0000                    jne L_error_arg_count_1
  1295 00000EEE 488B4520                        mov rax, PARAM(0)
  1296 00000EF2 803811                          cmp byte [rax], T_rational
  1297 00000EF5 750C                            jne .L_false
  1298 00000EF7 48B8-                           mov rax, sob_boolean_true
  1298 00000EF9 [0300000000000000] 
  1299 00000F01 EB0A                            jmp .L_end
  1300                                  .L_false:
  1301 00000F03 48B8-                           mov rax, sob_boolean_false
  1301 00000F05 [0200000000000000] 
  1302                                  .L_end:
  1303                                          LEAVE
    38 00000F0D C9                  <1>  leave
  1304 00000F0E C21800                          ret AND_KILL_FRAME(1)
  1305                                  
  1306                                  L_code_ptr_is_boolean:
  1307                                          ENTER
    33 00000F11 C8000000            <1>  enter 0, 0
    34 00000F15 4883E4F0            <1>  and rsp, ~15
  1308 00000F19 48837D1801                      cmp COUNT, 1
  1309 00000F1E 0F85890E0000                    jne L_error_arg_count_1
  1310 00000F24 488B4520                        mov rax, PARAM(0)
  1311 00000F28 8A18                            mov bl, byte [rax]
  1312 00000F2A 80E308                          and bl, T_boolean
  1313 00000F2D 740C                            je .L_false
  1314 00000F2F 48B8-                           mov rax, sob_boolean_true
  1314 00000F31 [0300000000000000] 
  1315 00000F39 EB0A                            jmp .L_end
  1316                                  .L_false:
  1317 00000F3B 48B8-                           mov rax, sob_boolean_false
  1317 00000F3D [0200000000000000] 
  1318                                  .L_end:
  1319                                          LEAVE
    38 00000F45 C9                  <1>  leave
  1320 00000F46 C21800                          ret AND_KILL_FRAME(1)
  1321                                          
  1322                                  L_code_ptr_is_number:
  1323                                          ENTER
    33 00000F49 C8000000            <1>  enter 0, 0
    34 00000F4D 4883E4F0            <1>  and rsp, ~15
  1324 00000F51 48837D1801                      cmp COUNT, 1
  1325 00000F56 0F85510E0000                    jne L_error_arg_count_1
  1326 00000F5C 488B4520                        mov rax, PARAM(0)
  1327 00000F60 8A18                            mov bl, byte [rax]
  1328 00000F62 80E310                          and bl, T_number
  1329 00000F65 740C                            je .L_false
  1330 00000F67 48B8-                           mov rax, sob_boolean_true
  1330 00000F69 [0300000000000000] 
  1331 00000F71 EB0A                            jmp .L_end
  1332                                  .L_false:
  1333 00000F73 48B8-                           mov rax, sob_boolean_false
  1333 00000F75 [0200000000000000] 
  1334                                  .L_end:
  1335                                          LEAVE
    38 00000F7D C9                  <1>  leave
  1336 00000F7E C21800                          ret AND_KILL_FRAME(1)
  1337                                          
  1338                                  L_code_ptr_is_collection:
  1339                                          ENTER
    33 00000F81 C8000000            <1>  enter 0, 0
    34 00000F85 4883E4F0            <1>  and rsp, ~15
  1340 00000F89 48837D1801                      cmp COUNT, 1
  1341 00000F8E 0F85190E0000                    jne L_error_arg_count_1
  1342 00000F94 488B4520                        mov rax, PARAM(0)
  1343 00000F98 8A18                            mov bl, byte [rax]
  1344 00000F9A 80E320                          and bl, T_collection
  1345 00000F9D 740C                            je .L_false
  1346 00000F9F 48B8-                           mov rax, sob_boolean_true
  1346 00000FA1 [0300000000000000] 
  1347 00000FA9 EB0A                            jmp .L_end
  1348                                  .L_false:
  1349 00000FAB 48B8-                           mov rax, sob_boolean_false
  1349 00000FAD [0200000000000000] 
  1350                                  .L_end:
  1351                                          LEAVE
    38 00000FB5 C9                  <1>  leave
  1352 00000FB6 C21800                          ret AND_KILL_FRAME(1)
  1353                                  
  1354                                  L_code_ptr_cons:
  1355                                          ENTER
    33 00000FB9 C8000000            <1>  enter 0, 0
    34 00000FBD 4883E4F0            <1>  and rsp, ~15
  1356 00000FC1 48837D1802                      cmp COUNT, 2
  1357 00000FC6 0F85160E0000                    jne L_error_arg_count_2
  1358 00000FCC BF11000000                      mov rdi, (1 + 8 + 8)
  1359 00000FD1 E8B2F6FFFF                      call malloc
  1360 00000FD6 C60021                          mov byte [rax], T_pair
  1361 00000FD9 488B5D20                        mov rbx, PARAM(0)
  1362 00000FDD 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1363 00000FE1 488B5D28                        mov rbx, PARAM(1)
  1364 00000FE5 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1365                                          LEAVE
    38 00000FE9 C9                  <1>  leave
  1366 00000FEA C22000                          ret AND_KILL_FRAME(2)
  1367                                  
  1368                                  L_code_ptr_display_sexpr:
  1369                                          ENTER
    33 00000FED C8000000            <1>  enter 0, 0
    34 00000FF1 4883E4F0            <1>  and rsp, ~15
  1370 00000FF5 48837D1801                      cmp COUNT, 1
  1371 00000FFA 0F85AD0D0000                    jne L_error_arg_count_1
  1372 00001000 488B7D20                        mov rdi, PARAM(0)
  1373 00001004 E89AF6FFFF                      call print_sexpr
  1374 00001009 48B8-                           mov rax, sob_void
  1374 0000100B [0000000000000000] 
  1375                                          LEAVE
    38 00001013 C9                  <1>  leave
  1376 00001014 C21800                          ret AND_KILL_FRAME(1)
  1377                                  
  1378                                  L_code_ptr_write_char:
  1379                                          ENTER
    33 00001017 C8000000            <1>  enter 0, 0
    34 0000101B 4883E4F0            <1>  and rsp, ~15
  1380 0000101F 48837D1801                      cmp COUNT, 1
  1381 00001024 0F85830D0000                    jne L_error_arg_count_1
  1382 0000102A 488B4520                        mov rax, PARAM(0)
  1383                                          assert_char(rax)
    42 0000102E 803802              <1>  cmp byte [%1], %2
    43 00001031 0F854A0E0000        <1>  jne L_error_incorrect_type
  1384 00001037 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1385 0000103A 4825FF000000                    and rax, 255
  1386 00001040 48BF-                           mov rdi, fmt_char
  1386 00001042 [9D02000000000000] 
  1387 0000104A 4889C6                          mov rsi, rax
  1388 0000104D B800000000                      mov rax, 0
  1389                                  	ENTER
    33 00001052 C8000000            <1>  enter 0, 0
    34 00001056 4883E4F0            <1>  and rsp, ~15
  1390 0000105A E8(00000000)                    call printf
  1391                                  	LEAVE
    38 0000105F C9                  <1>  leave
  1392 00001060 48B8-                           mov rax, sob_void
  1392 00001062 [0000000000000000] 
  1393                                          LEAVE
    38 0000106A C9                  <1>  leave
  1394 0000106B C21800                          ret AND_KILL_FRAME(1)
  1395                                  
  1396                                  L_code_ptr_car:
  1397                                          ENTER
    33 0000106E C8000000            <1>  enter 0, 0
    34 00001072 4883E4F0            <1>  and rsp, ~15
  1398 00001076 48837D1801                      cmp COUNT, 1
  1399 0000107B 0F852C0D0000                    jne L_error_arg_count_1
  1400 00001081 488B4520                        mov rax, PARAM(0)
  1401                                          assert_pair(rax)
    42 00001085 803821              <1>  cmp byte [%1], %2
    43 00001088 0F85F30D0000        <1>  jne L_error_incorrect_type
  1402 0000108E 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1403                                          LEAVE
    38 00001092 C9                  <1>  leave
  1404 00001093 C21800                          ret AND_KILL_FRAME(1)
  1405                                          
  1406                                  L_code_ptr_cdr:
  1407                                          ENTER
    33 00001096 C8000000            <1>  enter 0, 0
    34 0000109A 4883E4F0            <1>  and rsp, ~15
  1408 0000109E 48837D1801                      cmp COUNT, 1
  1409 000010A3 0F85040D0000                    jne L_error_arg_count_1
  1410 000010A9 488B4520                        mov rax, PARAM(0)
  1411                                          assert_pair(rax)
    42 000010AD 803821              <1>  cmp byte [%1], %2
    43 000010B0 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1412 000010B6 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1413                                          LEAVE
    38 000010BA C9                  <1>  leave
  1414 000010BB C21800                          ret AND_KILL_FRAME(1)
  1415                                          
  1416                                  L_code_ptr_string_length:
  1417                                          ENTER
    33 000010BE C8000000            <1>  enter 0, 0
    34 000010C2 4883E4F0            <1>  and rsp, ~15
  1418 000010C6 48837D1801                      cmp COUNT, 1
  1419 000010CB 0F85DC0C0000                    jne L_error_arg_count_1
  1420 000010D1 488B4520                        mov rax, PARAM(0)
  1421                                          assert_string(rax)
    42 000010D5 803803              <1>  cmp byte [%1], %2
    43 000010D8 0F85A30D0000        <1>  jne L_error_incorrect_type
  1422 000010DE 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1423 000010E2 E83A0C0000                      call make_integer
  1424                                          LEAVE
    38 000010E7 C9                  <1>  leave
  1425 000010E8 C21800                          ret AND_KILL_FRAME(1)
  1426                                  
  1427                                  L_code_ptr_vector_length:
  1428                                          ENTER
    33 000010EB C8000000            <1>  enter 0, 0
    34 000010EF 4883E4F0            <1>  and rsp, ~15
  1429 000010F3 48837D1801                      cmp COUNT, 1
  1430 000010F8 0F85AF0C0000                    jne L_error_arg_count_1
  1431 000010FE 488B4520                        mov rax, PARAM(0)
  1432                                          assert_vector(rax)
    42 00001102 803822              <1>  cmp byte [%1], %2
    43 00001105 0F85760D0000        <1>  jne L_error_incorrect_type
  1433 0000110B 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1434 0000110F E80D0C0000                      call make_integer
  1435                                          LEAVE
    38 00001114 C9                  <1>  leave
  1436 00001115 C21800                          ret AND_KILL_FRAME(1)
  1437                                  
  1438                                  L_code_ptr_real_to_integer:
  1439                                          ENTER
    33 00001118 C8000000            <1>  enter 0, 0
    34 0000111C 4883E4F0            <1>  and rsp, ~15
  1440 00001120 48837D1801                      cmp COUNT, 1
  1441 00001125 0F85820C0000                    jne L_error_arg_count_1
  1442 0000112B 488B5D20                        mov rbx, PARAM(0)
  1443                                          assert_real(rbx)
    42 0000112F 803B12              <1>  cmp byte [%1], %2
    43 00001132 0F85490D0000        <1>  jne L_error_incorrect_type
  1444 00001138 F20F104301                      movsd xmm0, qword [rbx + 1]
  1445 0000113D F2480F2CF8                      cvttsd2si rdi, xmm0
  1446 00001142 E8DA0B0000                      call make_integer
  1447                                          LEAVE
    38 00001147 C9                  <1>  leave
  1448 00001148 C21800                          ret AND_KILL_FRAME(1)
  1449                                  
  1450                                  L_code_ptr_exit:
  1451                                          ENTER
    33 0000114B C8000000            <1>  enter 0, 0
    34 0000114F 4883E4F0            <1>  and rsp, ~15
  1452 00001153 48837D1800                      cmp COUNT, 0
  1453 00001158 0F851A0C0000                    jne L_error_arg_count_0
  1454 0000115E B800000000                      mov rax, 0
  1455 00001163 E8(00000000)                    call exit
  1456                                  
  1457                                  L_code_ptr_integer_to_real:
  1458                                          ENTER
    33 00001168 C8000000            <1>  enter 0, 0
    34 0000116C 4883E4F0            <1>  and rsp, ~15
  1459 00001170 48837D1801                      cmp COUNT, 1
  1460 00001175 0F85320C0000                    jne L_error_arg_count_1
  1461 0000117B 488B4520                        mov rax, PARAM(0)
  1462                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000117F 803811              <2>  cmp byte [%1], %2
    43 00001182 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 00001188 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000118D 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1463 00001193 FF7001                          push qword [rax + 1]
  1464 00001196 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1465 0000119C E8640B0000                      call make_real
  1466                                          LEAVE
    38 000011A1 C9                  <1>  leave
  1467 000011A2 C21800                          ret AND_KILL_FRAME(1)
  1468                                  
  1469                                  L_code_ptr_rational_to_real:
  1470                                          ENTER
    33 000011A5 C8000000            <1>  enter 0, 0
    34 000011A9 4883E4F0            <1>  and rsp, ~15
  1471 000011AD 48837D1801                      cmp COUNT, 1
  1472 000011B2 0F85F50B0000                    jne L_error_arg_count_1
  1473 000011B8 488B4520                        mov rax, PARAM(0)
  1474                                          assert_rational(rax)
    42 000011BC 803811              <1>  cmp byte [%1], %2
    43 000011BF 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1475 000011C5 FF7001                          push qword [rax + 1]
  1476 000011C8 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1477 000011CE FF7009                          push qword [rax + 1 + 8]
  1478 000011D1 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1479 000011D7 F20F5EC1                        divsd xmm0, xmm1
  1480 000011DB E8250B0000                      call make_real
  1481                                          LEAVE
    38 000011E0 C9                  <1>  leave
  1482 000011E1 C21800                          ret AND_KILL_FRAME(1)
  1483                                  
  1484                                  L_code_ptr_char_to_integer:
  1485                                          ENTER
    33 000011E4 C8000000            <1>  enter 0, 0
    34 000011E8 4883E4F0            <1>  and rsp, ~15
  1486 000011EC 48837D1801                      cmp COUNT, 1
  1487 000011F1 0F85B60B0000                    jne L_error_arg_count_1
  1488 000011F7 488B4520                        mov rax, PARAM(0)
  1489                                          assert_char(rax)
    42 000011FB 803802              <1>  cmp byte [%1], %2
    43 000011FE 0F857D0C0000        <1>  jne L_error_incorrect_type
  1490 00001204 8A4001                          mov al, byte [rax + 1]
  1491 00001207 4825FF000000                    and rax, 255
  1492 0000120D 4889C7                          mov rdi, rax
  1493 00001210 E80C0B0000                      call make_integer
  1494                                          LEAVE
    38 00001215 C9                  <1>  leave
  1495 00001216 C21800                          ret AND_KILL_FRAME(1)
  1496                                  
  1497                                  L_code_ptr_integer_to_char:
  1498                                          ENTER
    33 00001219 C8000000            <1>  enter 0, 0
    34 0000121D 4883E4F0            <1>  and rsp, ~15
  1499 00001221 48837D1801                      cmp COUNT, 1
  1500 00001226 0F85810B0000                    jne L_error_arg_count_1
  1501 0000122C 488B4520                        mov rax, PARAM(0)
  1502                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001230 803811              <2>  cmp byte [%1], %2
    43 00001233 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001239 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000123E 0F853D0C0000        <1>  jne L_error_incorrect_type
  1503 00001244 488B5801                        mov rbx, qword [rax + 1]
  1504 00001248 4883FB00                        cmp rbx, 0
  1505 0000124C 0F8EF50A0000                    jle L_error_integer_range
  1506 00001252 4881FB00010000                  cmp rbx, 256
  1507 00001259 0F8DE80A0000                    jge L_error_integer_range
  1508 0000125F BF02000000                      mov rdi, (1 + 1)
  1509 00001264 E81FF4FFFF                      call malloc
  1510 00001269 C60002                          mov byte [rax], T_char
  1511 0000126C 885801                          mov byte [rax + 1], bl
  1512                                          LEAVE
    38 0000126F C9                  <1>  leave
  1513 00001270 C21800                          ret AND_KILL_FRAME(1)
  1514                                  
  1515                                  L_code_ptr_trng:
  1516                                          ENTER
    33 00001273 C8000000            <1>  enter 0, 0
    34 00001277 4883E4F0            <1>  and rsp, ~15
  1517 0000127B 48837D1800                      cmp COUNT, 0
  1518 00001280 0F85F20A0000                    jne L_error_arg_count_0
  1519 00001286 480FC7F7                        rdrand rdi
  1520 0000128A 48D1EF                          shr rdi, 1
  1521 0000128D E88F0A0000                      call make_integer
  1522                                          LEAVE
    38 00001292 C9                  <1>  leave
  1523 00001293 C21000                          ret AND_KILL_FRAME(0)
  1524                                  
  1525                                  L_code_ptr_is_zero:
  1526                                          ENTER
    33 00001296 C8000000            <1>  enter 0, 0
    34 0000129A 4883E4F0            <1>  and rsp, ~15
  1527 0000129E 48837D1801                      cmp COUNT, 1
  1528 000012A3 0F85040B0000                    jne L_error_arg_count_1
  1529 000012A9 488B4520                        mov rax, PARAM(0)
  1530 000012AD 803811                          cmp byte [rax], T_rational
  1531 000012B0 740A                            je .L_rational
  1532 000012B2 803812                          cmp byte [rax], T_real
  1533 000012B5 740E                            je .L_real
  1534 000012B7 E9C50B0000                      jmp L_error_incorrect_type
  1535                                  .L_rational:
  1536 000012BC 4883780100                      cmp qword [rax + 1], 0
  1537 000012C1 7420                            je .L_zero
  1538 000012C3 EB12                            jmp .L_not_zero
  1539                                  .L_real:
  1540 000012C5 660FEFC0                        pxor xmm0, xmm0
  1541 000012C9 FF7001                          push qword [rax + 1]
  1542 000012CC F20F100C24                      movsd xmm1, qword [rsp]
  1543 000012D1 660F2EC1                        ucomisd xmm0, xmm1
  1544 000012D5 740C                            je .L_zero
  1545                                  .L_not_zero:
  1546 000012D7 48B8-                           mov rax, sob_boolean_false
  1546 000012D9 [0200000000000000] 
  1547 000012E1 EB0A                            jmp .L_end
  1548                                  .L_zero:
  1549 000012E3 48B8-                           mov rax, sob_boolean_true
  1549 000012E5 [0300000000000000] 
  1550                                  .L_end:
  1551                                          LEAVE
    38 000012ED C9                  <1>  leave
  1552 000012EE C21800                          ret AND_KILL_FRAME(1)
  1553                                  
  1554                                  L_code_ptr_is_integer:
  1555                                          ENTER
    33 000012F1 C8000000            <1>  enter 0, 0
    34 000012F5 4883E4F0            <1>  and rsp, ~15
  1556 000012F9 48837D1801                      cmp COUNT, 1
  1557 000012FE 0F85A90A0000                    jne L_error_arg_count_1
  1558 00001304 488B4520                        mov rax, PARAM(0)
  1559 00001308 803811                          cmp byte [rax], T_rational
  1560 0000130B 7513                            jne .L_false
  1561 0000130D 4883780901                      cmp qword [rax + 1 + 8], 1
  1562 00001312 750C                            jne .L_false
  1563 00001314 48B8-                           mov rax, sob_boolean_true
  1563 00001316 [0300000000000000] 
  1564 0000131E EB0A                            jmp .L_exit
  1565                                  .L_false:
  1566 00001320 48B8-                           mov rax, sob_boolean_false
  1566 00001322 [0200000000000000] 
  1567                                  .L_exit:
  1568                                          LEAVE
    38 0000132A C9                  <1>  leave
  1569 0000132B C21800                          ret AND_KILL_FRAME(1)
  1570                                  
  1571                                  L_code_ptr_raw_bin_add_rr:
  1572                                          ENTER
    33 0000132E C8000000            <1>  enter 0, 0
    34 00001332 4883E4F0            <1>  and rsp, ~15
  1573 00001336 48837D1802                      cmp COUNT, 2
  1574 0000133B 0F85A10A0000                    jne L_error_arg_count_2
  1575 00001341 488B5D20                        mov rbx, PARAM(0)
  1576                                          assert_real(rbx)
    42 00001345 803B12              <1>  cmp byte [%1], %2
    43 00001348 0F85330B0000        <1>  jne L_error_incorrect_type
  1577 0000134E 488B4D28                        mov rcx, PARAM(1)
  1578                                          assert_real(rcx)
    42 00001352 803912              <1>  cmp byte [%1], %2
    43 00001355 0F85260B0000        <1>  jne L_error_incorrect_type
  1579 0000135B F20F104301                      movsd xmm0, qword [rbx + 1]
  1580 00001360 F20F104901                      movsd xmm1, qword [rcx + 1]
  1581 00001365 F20F58C1                        addsd xmm0, xmm1
  1582 00001369 E897090000                      call make_real
  1583                                          LEAVE
    38 0000136E C9                  <1>  leave
  1584 0000136F C22000                          ret AND_KILL_FRAME(2)
  1585                                  
  1586                                  L_code_ptr_raw_bin_sub_rr:
  1587                                          ENTER
    33 00001372 C8000000            <1>  enter 0, 0
    34 00001376 4883E4F0            <1>  and rsp, ~15
  1588 0000137A 48837D1802                      cmp COUNT, 2
  1589 0000137F 0F855D0A0000                    jne L_error_arg_count_2
  1590 00001385 488B5D20                        mov rbx, PARAM(0)
  1591                                          assert_real(rbx)
    42 00001389 803B12              <1>  cmp byte [%1], %2
    43 0000138C 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1592 00001392 488B4D28                        mov rcx, PARAM(1)
  1593                                          assert_real(rcx)
    42 00001396 803912              <1>  cmp byte [%1], %2
    43 00001399 0F85E20A0000        <1>  jne L_error_incorrect_type
  1594 0000139F F20F104301                      movsd xmm0, qword [rbx + 1]
  1595 000013A4 F20F104901                      movsd xmm1, qword [rcx + 1]
  1596 000013A9 F20F5CC1                        subsd xmm0, xmm1
  1597 000013AD E853090000                      call make_real
  1598                                          LEAVE
    38 000013B2 C9                  <1>  leave
  1599 000013B3 C22000                          ret AND_KILL_FRAME(2)
  1600                                  
  1601                                  L_code_ptr_raw_bin_mul_rr:
  1602                                          ENTER
    33 000013B6 C8000000            <1>  enter 0, 0
    34 000013BA 4883E4F0            <1>  and rsp, ~15
  1603 000013BE 48837D1802                      cmp COUNT, 2
  1604 000013C3 0F85190A0000                    jne L_error_arg_count_2
  1605 000013C9 488B5D20                        mov rbx, PARAM(0)
  1606                                          assert_real(rbx)
    42 000013CD 803B12              <1>  cmp byte [%1], %2
    43 000013D0 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1607 000013D6 488B4D28                        mov rcx, PARAM(1)
  1608                                          assert_real(rcx)
    42 000013DA 803912              <1>  cmp byte [%1], %2
    43 000013DD 0F859E0A0000        <1>  jne L_error_incorrect_type
  1609 000013E3 F20F104301                      movsd xmm0, qword [rbx + 1]
  1610 000013E8 F20F104901                      movsd xmm1, qword [rcx + 1]
  1611 000013ED F20F59C1                        mulsd xmm0, xmm1
  1612 000013F1 E80F090000                      call make_real
  1613                                          LEAVE
    38 000013F6 C9                  <1>  leave
  1614 000013F7 C22000                          ret AND_KILL_FRAME(2)
  1615                                  
  1616                                  L_code_ptr_raw_bin_div_rr:
  1617                                          ENTER
    33 000013FA C8000000            <1>  enter 0, 0
    34 000013FE 4883E4F0            <1>  and rsp, ~15
  1618 00001402 48837D1802                      cmp COUNT, 2
  1619 00001407 0F85D5090000                    jne L_error_arg_count_2
  1620 0000140D 488B5D20                        mov rbx, PARAM(0)
  1621                                          assert_real(rbx)
    42 00001411 803B12              <1>  cmp byte [%1], %2
    43 00001414 0F85670A0000        <1>  jne L_error_incorrect_type
  1622 0000141A 488B4D28                        mov rcx, PARAM(1)
  1623                                          assert_real(rcx)
    42 0000141E 803912              <1>  cmp byte [%1], %2
    43 00001421 0F855A0A0000        <1>  jne L_error_incorrect_type
  1624 00001427 F20F104301                      movsd xmm0, qword [rbx + 1]
  1625 0000142C F20F104901                      movsd xmm1, qword [rcx + 1]
  1626 00001431 660FEFD2                        pxor xmm2, xmm2
  1627 00001435 660F2ECA                        ucomisd xmm1, xmm2
  1628 00001439 0F84730A0000                    je L_error_division_by_zero
  1629 0000143F F20F5EC1                        divsd xmm0, xmm1
  1630 00001443 E8BD080000                      call make_real
  1631                                          LEAVE
    38 00001448 C9                  <1>  leave
  1632 00001449 C22000                          ret AND_KILL_FRAME(2)
  1633                                  
  1634                                  L_code_ptr_raw_bin_add_qq:
  1635                                          ENTER
    33 0000144C C8000000            <1>  enter 0, 0
    34 00001450 4883E4F0            <1>  and rsp, ~15
  1636 00001454 48837D1802                      cmp COUNT, 2
  1637 00001459 0F8583090000                    jne L_error_arg_count_2
  1638 0000145F 4C8B4520                        mov r8, PARAM(0)
  1639                                          assert_rational(r8)
    42 00001463 41803811            <1>  cmp byte [%1], %2
    43 00001467 0F85140A0000        <1>  jne L_error_incorrect_type
  1640 0000146D 4C8B4D28                        mov r9, PARAM(1)
  1641                                          assert_rational(r9)
    42 00001471 41803911            <1>  cmp byte [%1], %2
    43 00001475 0F85060A0000        <1>  jne L_error_incorrect_type
  1642 0000147B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1643 0000147F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1644 00001483 4899                            cqo
  1645 00001485 48F7EB                          imul rbx
  1646 00001488 4889C6                          mov rsi, rax
  1647 0000148B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1648 0000148F 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1649 00001493 4899                            cqo
  1650 00001495 48F7EB                          imul rbx
  1651 00001498 4801C6                          add rsi, rax
  1652 0000149B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1653 0000149F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1654 000014A3 4899                            cqo
  1655 000014A5 48F7EB                          imul rbx
  1656 000014A8 4889C7                          mov rdi, rax
  1657 000014AB E827010000                      call normalize_rational
  1658                                          LEAVE
    38 000014B0 C9                  <1>  leave
  1659 000014B1 C22000                          ret AND_KILL_FRAME(2)
  1660                                  
  1661                                  L_code_ptr_raw_bin_sub_qq:
  1662                                          ENTER
    33 000014B4 C8000000            <1>  enter 0, 0
    34 000014B8 4883E4F0            <1>  and rsp, ~15
  1663 000014BC 48837D1802                      cmp COUNT, 2
  1664 000014C1 0F851B090000                    jne L_error_arg_count_2
  1665 000014C7 4C8B4520                        mov r8, PARAM(0)
  1666                                          assert_rational(r8)
    42 000014CB 41803811            <1>  cmp byte [%1], %2
    43 000014CF 0F85AC090000        <1>  jne L_error_incorrect_type
  1667 000014D5 4C8B4D28                        mov r9, PARAM(1)
  1668                                          assert_rational(r9)
    42 000014D9 41803911            <1>  cmp byte [%1], %2
    43 000014DD 0F859E090000        <1>  jne L_error_incorrect_type
  1669 000014E3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1670 000014E7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1671 000014EB 4899                            cqo
  1672 000014ED 48F7EB                          imul rbx
  1673 000014F0 4889C6                          mov rsi, rax
  1674 000014F3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1675 000014F7 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1676 000014FB 4899                            cqo
  1677 000014FD 48F7EB                          imul rbx
  1678 00001500 4829C6                          sub rsi, rax
  1679 00001503 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1680 00001507 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1681 0000150B 4899                            cqo
  1682 0000150D 48F7EB                          imul rbx
  1683 00001510 4889C7                          mov rdi, rax
  1684 00001513 E8BF000000                      call normalize_rational
  1685                                          LEAVE
    38 00001518 C9                  <1>  leave
  1686 00001519 C22000                          ret AND_KILL_FRAME(2)
  1687                                  
  1688                                  L_code_ptr_raw_bin_mul_qq:
  1689                                          ENTER
    33 0000151C C8000000            <1>  enter 0, 0
    34 00001520 4883E4F0            <1>  and rsp, ~15
  1690 00001524 48837D1802                      cmp COUNT, 2
  1691 00001529 0F85B3080000                    jne L_error_arg_count_2
  1692 0000152F 4C8B4520                        mov r8, PARAM(0)
  1693                                          assert_rational(r8)
    42 00001533 41803811            <1>  cmp byte [%1], %2
    43 00001537 0F8544090000        <1>  jne L_error_incorrect_type
  1694 0000153D 4C8B4D28                        mov r9, PARAM(1)
  1695                                          assert_rational(r9)
    42 00001541 41803911            <1>  cmp byte [%1], %2
    43 00001545 0F8536090000        <1>  jne L_error_incorrect_type
  1696 0000154B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1697 0000154F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1698 00001553 4899                            cqo
  1699 00001555 48F7EB                          imul rbx
  1700 00001558 4889C6                          mov rsi, rax
  1701 0000155B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1702 0000155F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1703 00001563 4899                            cqo
  1704 00001565 48F7EB                          imul rbx
  1705 00001568 4889C7                          mov rdi, rax
  1706 0000156B E867000000                      call normalize_rational
  1707                                          LEAVE
    38 00001570 C9                  <1>  leave
  1708 00001571 C22000                          ret AND_KILL_FRAME(2)
  1709                                          
  1710                                  L_code_ptr_raw_bin_div_qq:
  1711                                          ENTER
    33 00001574 C8000000            <1>  enter 0, 0
    34 00001578 4883E4F0            <1>  and rsp, ~15
  1712 0000157C 48837D1802                      cmp COUNT, 2
  1713 00001581 0F855B080000                    jne L_error_arg_count_2
  1714 00001587 4C8B4520                        mov r8, PARAM(0)
  1715                                          assert_rational(r8)
    42 0000158B 41803811            <1>  cmp byte [%1], %2
    43 0000158F 0F85EC080000        <1>  jne L_error_incorrect_type
  1716 00001595 4C8B4D28                        mov r9, PARAM(1)
  1717                                          assert_rational(r9)
    42 00001599 41803911            <1>  cmp byte [%1], %2
    43 0000159D 0F85DE080000        <1>  jne L_error_incorrect_type
  1718 000015A3 4983790100                      cmp qword [r9 + 1], 0
  1719 000015A8 0F8404090000                    je L_error_division_by_zero
  1720 000015AE 498B4001                        mov rax, qword [r8 + 1] ; num1
  1721 000015B2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1722 000015B6 4899                            cqo
  1723 000015B8 48F7EB                          imul rbx
  1724 000015BB 4889C6                          mov rsi, rax
  1725 000015BE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1726 000015C2 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1727 000015C6 4899                            cqo
  1728 000015C8 48F7EB                          imul rbx
  1729 000015CB 4889C7                          mov rdi, rax
  1730 000015CE E804000000                      call normalize_rational
  1731                                          LEAVE
    38 000015D3 C9                  <1>  leave
  1732 000015D4 C22000                          ret AND_KILL_FRAME(2)
  1733                                          
  1734                                  normalize_rational:
  1735 000015D7 56                              push rsi
  1736 000015D8 57                              push rdi
  1737 000015D9 E839000000                      call gcd
  1738 000015DE 4889C3                          mov rbx, rax
  1739 000015E1 58                              pop rax
  1740 000015E2 4899                            cqo
  1741 000015E4 48F7FB                          idiv rbx
  1742 000015E7 4989C0                          mov r8, rax
  1743 000015EA 58                              pop rax
  1744 000015EB 4899                            cqo
  1745 000015ED 48F7FB                          idiv rbx
  1746 000015F0 4989C1                          mov r9, rax
  1747 000015F3 BF11000000                      mov rdi, (1 + 8 + 8)
  1748 000015F8 E88BF0FFFF                      call malloc
  1749 000015FD C60011                          mov byte [rax], T_rational
  1750 00001600 4C894801                        mov qword [rax + 1], r9
  1751 00001604 4C894009                        mov qword [rax + 1 + 8], r8
  1752 00001608 C3                              ret
  1753                                  
  1754                                  iabs:
  1755 00001609 4889F8                          mov rax, rdi
  1756 0000160C 4883F800                        cmp rax, 0
  1757 00001610 7C01                            jl .Lneg
  1758 00001612 C3                              ret
  1759                                  .Lneg:
  1760 00001613 48F7D8                          neg rax
  1761 00001616 C3                              ret
  1762                                  
  1763                                  gcd:
  1764 00001617 E8EDFFFFFF                      call iabs
  1765 0000161C 4889C3                          mov rbx, rax
  1766 0000161F 4889F7                          mov rdi, rsi
  1767 00001622 E8E2FFFFFF                      call iabs
  1768 00001627 4883F800                        cmp rax, 0
  1769 0000162B 7502                            jne .L0
  1770 0000162D 4893                            xchg rax, rbx
  1771                                  .L0:
  1772 0000162F 4883FB00                        cmp rbx, 0
  1773 00001633 740C                            je .L1
  1774 00001635 4899                            cqo
  1775 00001637 48F7F3                          div rbx
  1776 0000163A 4889D0                          mov rax, rdx
  1777 0000163D 4893                            xchg rax, rbx
  1778 0000163F EBEE                            jmp .L0
  1779                                  .L1:
  1780 00001641 C3                              ret
  1781                                  
  1782                                  L_code_ptr_error:
  1783                                          ENTER
    33 00001642 C8000000            <1>  enter 0, 0
    34 00001646 4883E4F0            <1>  and rsp, ~15
  1784 0000164A 48837D1802                      cmp COUNT, 2
  1785 0000164F 0F858D070000                    jne L_error_arg_count_2
  1786 00001655 488B7520                        mov rsi, PARAM(0)
  1787                                          assert_symbol(rsi)
    42 00001659 803E04              <1>  cmp byte [%1], %2
    43 0000165C 0F851F080000        <1>  jne L_error_incorrect_type
  1788 00001662 488B7528                        mov rsi, PARAM(1)
  1789                                          assert_string(rsi)
    42 00001666 803E03              <1>  cmp byte [%1], %2
    43 00001669 0F8512080000        <1>  jne L_error_incorrect_type
  1790 0000166F 48BF-                           mov rdi, fmt_scheme_error_part_1
  1790 00001671 [D503000000000000] 
  1791 00001679 B800000000                      mov rax, 0
  1792                                  	ENTER
    33 0000167E C8000000            <1>  enter 0, 0
    34 00001682 4883E4F0            <1>  and rsp, ~15
  1793 00001686 E8(00000000)                    call printf
  1794                                  	LEAVE
    38 0000168B C9                  <1>  leave
  1795 0000168C 488B7D20                        mov rdi, PARAM(0)
  1796 00001690 E80EF0FFFF                      call print_sexpr
  1797 00001695 48BF-                           mov rdi, fmt_scheme_error_part_2
  1797 00001697 [E903000000000000] 
  1798 0000169F B800000000                      mov rax, 0
  1799                                  	ENTER
    33 000016A4 C8000000            <1>  enter 0, 0
    34 000016A8 4883E4F0            <1>  and rsp, ~15
  1800 000016AC E8(00000000)                    call printf
  1801                                  	LEAVE
    38 000016B1 C9                  <1>  leave
  1802 000016B2 488B4528                        mov rax, PARAM(1)       ; sob_string
  1803 000016B6 BE01000000                      mov rsi, 1              ; size = 1 byte
  1804 000016BB 488B5001                        mov rdx, qword [rax + 1] ; length
  1805 000016BF 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1806 000016C3 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1807 000016CB E8(00000000)                    call fwrite
  1808 000016D0 48BF-                           mov rdi, fmt_scheme_error_part_3
  1808 000016D2 [2B04000000000000] 
  1809 000016DA B800000000                      mov rax, 0
  1810                                  	ENTER
    33 000016DF C8000000            <1>  enter 0, 0
    34 000016E3 4883E4F0            <1>  and rsp, ~15
  1811 000016E7 E8(00000000)                    call printf
  1812                                  	LEAVE
    38 000016EC C9                  <1>  leave
  1813 000016ED 48C7C0F7FFFFFF                  mov rax, -9
  1814 000016F4 E8(00000000)                    call exit
  1815                                  
  1816                                  L_code_ptr_raw_less_than_rr:
  1817                                          ENTER
    33 000016F9 C8000000            <1>  enter 0, 0
    34 000016FD 4883E4F0            <1>  and rsp, ~15
  1818 00001701 48837D1802                      cmp COUNT, 2
  1819 00001706 0F85D6060000                    jne L_error_arg_count_2
  1820 0000170C 488B7520                        mov rsi, PARAM(0)
  1821                                          assert_real(rsi)
    42 00001710 803E12              <1>  cmp byte [%1], %2
    43 00001713 0F8568070000        <1>  jne L_error_incorrect_type
  1822 00001719 488B7D28                        mov rdi, PARAM(1)
  1823                                          assert_real(rdi)
    42 0000171D 803F12              <1>  cmp byte [%1], %2
    43 00001720 0F855B070000        <1>  jne L_error_incorrect_type
  1824 00001726 F20F104601                      movsd xmm0, qword [rsi + 1]
  1825 0000172B F20F104F01                      movsd xmm1, qword [rdi + 1]
  1826 00001730 660F2FC1                        comisd xmm0, xmm1
  1827 00001734 730C                            jae .L_false
  1828 00001736 48B8-                           mov rax, sob_boolean_true
  1828 00001738 [0300000000000000] 
  1829 00001740 EB0A                            jmp .L_exit
  1830                                  .L_false:
  1831 00001742 48B8-                           mov rax, sob_boolean_false
  1831 00001744 [0200000000000000] 
  1832                                  .L_exit:
  1833                                          LEAVE
    38 0000174C C9                  <1>  leave
  1834 0000174D C22000                          ret AND_KILL_FRAME(2)
  1835                                          
  1836                                  L_code_ptr_raw_less_than_qq:
  1837                                          ENTER
    33 00001750 C8000000            <1>  enter 0, 0
    34 00001754 4883E4F0            <1>  and rsp, ~15
  1838 00001758 48837D1802                      cmp COUNT, 2
  1839 0000175D 0F857F060000                    jne L_error_arg_count_2
  1840 00001763 488B7520                        mov rsi, PARAM(0)
  1841                                          assert_rational(rsi)
    42 00001767 803E11              <1>  cmp byte [%1], %2
    43 0000176A 0F8511070000        <1>  jne L_error_incorrect_type
  1842 00001770 488B7D28                        mov rdi, PARAM(1)
  1843                                          assert_rational(rdi)
    42 00001774 803F11              <1>  cmp byte [%1], %2
    43 00001777 0F8504070000        <1>  jne L_error_incorrect_type
  1844 0000177D 488B4601                        mov rax, qword [rsi + 1] ; num1
  1845 00001781 4899                            cqo
  1846 00001783 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1847 00001787 4889C1                          mov rcx, rax
  1848 0000178A 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1849 0000178E 4899                            cqo
  1850 00001790 48F76F01                        imul qword [rdi + 1]          ; num2
  1851 00001794 4829C1                          sub rcx, rax
  1852 00001797 7D0C                            jge .L_false
  1853 00001799 48B8-                           mov rax, sob_boolean_true
  1853 0000179B [0300000000000000] 
  1854 000017A3 EB0A                            jmp .L_exit
  1855                                  .L_false:
  1856 000017A5 48B8-                           mov rax, sob_boolean_false
  1856 000017A7 [0200000000000000] 
  1857                                  .L_exit:
  1858                                          LEAVE
    38 000017AF C9                  <1>  leave
  1859 000017B0 C22000                          ret AND_KILL_FRAME(2)
  1860                                  
  1861                                  L_code_ptr_raw_equal_rr:
  1862                                          ENTER
    33 000017B3 C8000000            <1>  enter 0, 0
    34 000017B7 4883E4F0            <1>  and rsp, ~15
  1863 000017BB 48837D1802                      cmp COUNT, 2
  1864 000017C0 0F851C060000                    jne L_error_arg_count_2
  1865 000017C6 488B7520                        mov rsi, PARAM(0)
  1866                                          assert_real(rsi)
    42 000017CA 803E12              <1>  cmp byte [%1], %2
    43 000017CD 0F85AE060000        <1>  jne L_error_incorrect_type
  1867 000017D3 488B7D28                        mov rdi, PARAM(1)
  1868                                          assert_real(rdi)
    42 000017D7 803F12              <1>  cmp byte [%1], %2
    43 000017DA 0F85A1060000        <1>  jne L_error_incorrect_type
  1869 000017E0 F20F104601                      movsd xmm0, qword [rsi + 1]
  1870 000017E5 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1871 000017EA 660F2FC1                        comisd xmm0, xmm1
  1872 000017EE 750C                            jne .L_false
  1873 000017F0 48B8-                           mov rax, sob_boolean_true
  1873 000017F2 [0300000000000000] 
  1874 000017FA EB0A                            jmp .L_exit
  1875                                  .L_false:
  1876 000017FC 48B8-                           mov rax, sob_boolean_false
  1876 000017FE [0200000000000000] 
  1877                                  .L_exit:
  1878                                          LEAVE
    38 00001806 C9                  <1>  leave
  1879 00001807 C22000                          ret AND_KILL_FRAME(2)
  1880                                          
  1881                                  L_code_ptr_raw_equal_qq:
  1882                                          ENTER
    33 0000180A C8000000            <1>  enter 0, 0
    34 0000180E 4883E4F0            <1>  and rsp, ~15
  1883 00001812 48837D1802                      cmp COUNT, 2
  1884 00001817 0F85C5050000                    jne L_error_arg_count_2
  1885 0000181D 488B7520                        mov rsi, PARAM(0)
  1886                                          assert_rational(rsi)
    42 00001821 803E11              <1>  cmp byte [%1], %2
    43 00001824 0F8557060000        <1>  jne L_error_incorrect_type
  1887 0000182A 488B7D28                        mov rdi, PARAM(1)
  1888                                          assert_rational(rdi)
    42 0000182E 803F11              <1>  cmp byte [%1], %2
    43 00001831 0F854A060000        <1>  jne L_error_incorrect_type
  1889 00001837 488B4601                        mov rax, qword [rsi + 1] ; num1
  1890 0000183B 4899                            cqo
  1891 0000183D 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1892 00001841 4889C1                          mov rcx, rax
  1893 00001844 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1894 00001848 4899                            cqo
  1895 0000184A 48F76F01                        imul qword [rdi + 1]          ; num2
  1896 0000184E 4829C1                          sub rcx, rax
  1897 00001851 750C                            jne .L_false
  1898 00001853 48B8-                           mov rax, sob_boolean_true
  1898 00001855 [0300000000000000] 
  1899 0000185D EB0A                            jmp .L_exit
  1900                                  .L_false:
  1901 0000185F 48B8-                           mov rax, sob_boolean_false
  1901 00001861 [0200000000000000] 
  1902                                  .L_exit:
  1903                                          LEAVE
    38 00001869 C9                  <1>  leave
  1904 0000186A C22000                          ret AND_KILL_FRAME(2)
  1905                                  
  1906                                  L_code_ptr_quotient:
  1907                                          ENTER
    33 0000186D C8000000            <1>  enter 0, 0
    34 00001871 4883E4F0            <1>  and rsp, ~15
  1908 00001875 48837D1802                      cmp COUNT, 2
  1909 0000187A 0F8562050000                    jne L_error_arg_count_2
  1910 00001880 488B7520                        mov rsi, PARAM(0)
  1911                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001884 803E11              <2>  cmp byte [%1], %2
    43 00001887 0F85F4050000        <2>  jne L_error_incorrect_type
    48 0000188D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001892 0F85E9050000        <1>  jne L_error_incorrect_type
  1912 00001898 488B7D28                        mov rdi, PARAM(1)
  1913                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000189C 803F11              <2>  cmp byte [%1], %2
    43 0000189F 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000018A5 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018AA 0F85D1050000        <1>  jne L_error_incorrect_type
  1914 000018B0 488B4601                        mov rax, qword [rsi + 1]
  1915 000018B4 488B5F01                        mov rbx, qword [rdi + 1]
  1916 000018B8 4883FB00                        cmp rbx, 0
  1917 000018BC 0F84F0050000                    je L_error_division_by_zero
  1918 000018C2 4899                            cqo
  1919 000018C4 48F7FB                          idiv rbx
  1920 000018C7 4889C7                          mov rdi, rax
  1921 000018CA E852040000                      call make_integer
  1922                                          LEAVE
    38 000018CF C9                  <1>  leave
  1923 000018D0 C22000                          ret AND_KILL_FRAME(2)
  1924                                          
  1925                                  L_code_ptr_remainder:
  1926                                          ENTER
    33 000018D3 C8000000            <1>  enter 0, 0
    34 000018D7 4883E4F0            <1>  and rsp, ~15
  1927 000018DB 48837D1802                      cmp COUNT, 2
  1928 000018E0 0F85FC040000                    jne L_error_arg_count_2
  1929 000018E6 488B7520                        mov rsi, PARAM(0)
  1930                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018EA 803E11              <2>  cmp byte [%1], %2
    43 000018ED 0F858E050000        <2>  jne L_error_incorrect_type
    48 000018F3 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018F8 0F8583050000        <1>  jne L_error_incorrect_type
  1931 000018FE 488B7D28                        mov rdi, PARAM(1)
  1932                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001902 803F11              <2>  cmp byte [%1], %2
    43 00001905 0F8576050000        <2>  jne L_error_incorrect_type
    48 0000190B 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001910 0F856B050000        <1>  jne L_error_incorrect_type
  1933 00001916 488B4601                        mov rax, qword [rsi + 1]
  1934 0000191A 488B5F01                        mov rbx, qword [rdi + 1]
  1935 0000191E 4883FB00                        cmp rbx, 0
  1936 00001922 0F848A050000                    je L_error_division_by_zero
  1937 00001928 4899                            cqo
  1938 0000192A 48F7FB                          idiv rbx
  1939 0000192D 4889D7                          mov rdi, rdx
  1940 00001930 E8EC030000                      call make_integer
  1941                                          LEAVE
    38 00001935 C9                  <1>  leave
  1942 00001936 C22000                          ret AND_KILL_FRAME(2)
  1943                                  
  1944                                  L_code_ptr_set_car:
  1945                                          ENTER
    33 00001939 C8000000            <1>  enter 0, 0
    34 0000193D 4883E4F0            <1>  and rsp, ~15
  1946 00001941 48837D1802                      cmp COUNT, 2
  1947 00001946 0F8596040000                    jne L_error_arg_count_2
  1948 0000194C 488B4520                        mov rax, PARAM(0)
  1949                                          assert_pair(rax)
    42 00001950 803821              <1>  cmp byte [%1], %2
    43 00001953 0F8528050000        <1>  jne L_error_incorrect_type
  1950 00001959 488B5D28                        mov rbx, PARAM(1)
  1951 0000195D 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1952 00001961 48B8-                           mov rax, sob_void
  1952 00001963 [0000000000000000] 
  1953                                          LEAVE
    38 0000196B C9                  <1>  leave
  1954 0000196C C22000                          ret AND_KILL_FRAME(2)
  1955                                  
  1956                                  L_code_ptr_set_cdr:
  1957                                          ENTER
    33 0000196F C8000000            <1>  enter 0, 0
    34 00001973 4883E4F0            <1>  and rsp, ~15
  1958 00001977 48837D1802                      cmp COUNT, 2
  1959 0000197C 0F8560040000                    jne L_error_arg_count_2
  1960 00001982 488B4520                        mov rax, PARAM(0)
  1961                                          assert_pair(rax)
    42 00001986 803821              <1>  cmp byte [%1], %2
    43 00001989 0F85F2040000        <1>  jne L_error_incorrect_type
  1962 0000198F 488B5D28                        mov rbx, PARAM(1)
  1963 00001993 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1964 00001997 48B8-                           mov rax, sob_void
  1964 00001999 [0000000000000000] 
  1965                                          LEAVE
    38 000019A1 C9                  <1>  leave
  1966 000019A2 C22000                          ret AND_KILL_FRAME(2)
  1967                                  
  1968                                  L_code_ptr_string_ref:
  1969                                          ENTER
    33 000019A5 C8000000            <1>  enter 0, 0
    34 000019A9 4883E4F0            <1>  and rsp, ~15
  1970 000019AD 48837D1802                      cmp COUNT, 2
  1971 000019B2 0F852A040000                    jne L_error_arg_count_2
  1972 000019B8 488B7D20                        mov rdi, PARAM(0)
  1973                                          assert_string(rdi)
    42 000019BC 803F03              <1>  cmp byte [%1], %2
    43 000019BF 0F85BC040000        <1>  jne L_error_incorrect_type
  1974 000019C5 488B7528                        mov rsi, PARAM(1)
  1975                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019C9 803E11              <2>  cmp byte [%1], %2
    43 000019CC 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000019D2 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019D7 0F85A4040000        <1>  jne L_error_incorrect_type
  1976 000019DD 488B5701                        mov rdx, qword [rdi + 1]
  1977 000019E1 488B4E01                        mov rcx, qword [rsi + 1]
  1978 000019E5 4839D1                          cmp rcx, rdx
  1979 000019E8 0F8D59030000                    jge L_error_integer_range
  1980 000019EE 4883F900                        cmp rcx, 0
  1981 000019F2 0F8C4F030000                    jl L_error_integer_range
  1982 000019F8 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1983 000019FC BF02000000                      mov rdi, 2
  1984 00001A01 E882ECFFFF                      call malloc
  1985 00001A06 C60002                          mov byte [rax], T_char
  1986 00001A09 885801                          mov byte [rax + 1], bl
  1987                                          LEAVE
    38 00001A0C C9                  <1>  leave
  1988 00001A0D C22000                          ret AND_KILL_FRAME(2)
  1989                                  
  1990                                  L_code_ptr_vector_ref:
  1991                                          ENTER
    33 00001A10 C8000000            <1>  enter 0, 0
    34 00001A14 4883E4F0            <1>  and rsp, ~15
  1992 00001A18 48837D1802                      cmp COUNT, 2
  1993 00001A1D 0F85BF030000                    jne L_error_arg_count_2
  1994 00001A23 488B7D20                        mov rdi, PARAM(0)
  1995                                          assert_vector(rdi)
    42 00001A27 803F22              <1>  cmp byte [%1], %2
    43 00001A2A 0F8551040000        <1>  jne L_error_incorrect_type
  1996 00001A30 488B7528                        mov rsi, PARAM(1)
  1997                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A34 803E11              <2>  cmp byte [%1], %2
    43 00001A37 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001A3D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A42 0F8539040000        <1>  jne L_error_incorrect_type
  1998 00001A48 488B5701                        mov rdx, qword [rdi + 1]
  1999 00001A4C 488B4E01                        mov rcx, qword [rsi + 1]
  2000 00001A50 4839D1                          cmp rcx, rdx
  2001 00001A53 0F8DEE020000                    jge L_error_integer_range
  2002 00001A59 4883F900                        cmp rcx, 0
  2003 00001A5D 0F8CE4020000                    jl L_error_integer_range
  2004 00001A63 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2005                                          LEAVE
    38 00001A68 C9                  <1>  leave
  2006 00001A69 C22000                          ret AND_KILL_FRAME(2)
  2007                                  
  2008                                  L_code_ptr_vector_set:
  2009                                          ENTER
    33 00001A6C C8000000            <1>  enter 0, 0
    34 00001A70 4883E4F0            <1>  and rsp, ~15
  2010 00001A74 48837D1803                      cmp COUNT, 3
  2011 00001A79 0F85CD030000                    jne L_error_arg_count_3
  2012 00001A7F 488B7D20                        mov rdi, PARAM(0)
  2013                                          assert_vector(rdi)
    42 00001A83 803F22              <1>  cmp byte [%1], %2
    43 00001A86 0F85F5030000        <1>  jne L_error_incorrect_type
  2014 00001A8C 488B7528                        mov rsi, PARAM(1)
  2015                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A90 803E11              <2>  cmp byte [%1], %2
    43 00001A93 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001A99 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A9E 0F85DD030000        <1>  jne L_error_incorrect_type
  2016 00001AA4 488B5701                        mov rdx, qword [rdi + 1]
  2017 00001AA8 488B4E01                        mov rcx, qword [rsi + 1]
  2018 00001AAC 4839D1                          cmp rcx, rdx
  2019 00001AAF 0F8D92020000                    jge L_error_integer_range
  2020 00001AB5 4883F900                        cmp rcx, 0
  2021 00001AB9 0F8C88020000                    jl L_error_integer_range
  2022 00001ABF 488B4530                        mov rax, PARAM(2)
  2023 00001AC3 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2024 00001AC8 48B8-                           mov rax, sob_void
  2024 00001ACA [0000000000000000] 
  2025                                          LEAVE
    38 00001AD2 C9                  <1>  leave
  2026 00001AD3 C22800                          ret AND_KILL_FRAME(3)
  2027                                  
  2028                                  L_code_ptr_string_set:
  2029                                          ENTER
    33 00001AD6 C8000000            <1>  enter 0, 0
    34 00001ADA 4883E4F0            <1>  and rsp, ~15
  2030 00001ADE 48837D1803                      cmp COUNT, 3
  2031 00001AE3 0F8563030000                    jne L_error_arg_count_3
  2032 00001AE9 488B7D20                        mov rdi, PARAM(0)
  2033                                          assert_string(rdi)
    42 00001AED 803F03              <1>  cmp byte [%1], %2
    43 00001AF0 0F858B030000        <1>  jne L_error_incorrect_type
  2034 00001AF6 488B7528                        mov rsi, PARAM(1)
  2035                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001AFA 803E11              <2>  cmp byte [%1], %2
    43 00001AFD 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001B03 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B08 0F8573030000        <1>  jne L_error_incorrect_type
  2036 00001B0E 488B5701                        mov rdx, qword [rdi + 1]
  2037 00001B12 488B4E01                        mov rcx, qword [rsi + 1]
  2038 00001B16 4839D1                          cmp rcx, rdx
  2039 00001B19 0F8D28020000                    jge L_error_integer_range
  2040 00001B1F 4883F900                        cmp rcx, 0
  2041 00001B23 0F8C1E020000                    jl L_error_integer_range
  2042 00001B29 488B4530                        mov rax, PARAM(2)
  2043                                          assert_char(rax)
    42 00001B2D 803802              <1>  cmp byte [%1], %2
    43 00001B30 0F854B030000        <1>  jne L_error_incorrect_type
  2044 00001B36 8A4001                          mov al, byte [rax + 1]
  2045 00001B39 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2046 00001B3D 48B8-                           mov rax, sob_void
  2046 00001B3F [0000000000000000] 
  2047                                          LEAVE
    38 00001B47 C9                  <1>  leave
  2048 00001B48 C22800                          ret AND_KILL_FRAME(3)
  2049                                  
  2050                                  L_code_ptr_make_vector:
  2051                                          ENTER
    33 00001B4B C8000000            <1>  enter 0, 0
    34 00001B4F 4883E4F0            <1>  and rsp, ~15
  2052 00001B53 48837D1802                      cmp COUNT, 2
  2053 00001B58 0F8584020000                    jne L_error_arg_count_2
  2054 00001B5E 488B4D20                        mov rcx, PARAM(0)
  2055                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B62 803911              <2>  cmp byte [%1], %2
    43 00001B65 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001B6B 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B70 0F850B030000        <1>  jne L_error_incorrect_type
  2056 00001B76 488B4901                        mov rcx, qword [rcx + 1]
  2057 00001B7A 4883F900                        cmp rcx, 0
  2058 00001B7E 0F8CC3010000                    jl L_error_integer_range
  2059 00001B84 488B5528                        mov rdx, PARAM(1)
  2060 00001B88 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2061 00001B90 E8F3EAFFFF                      call malloc
  2062 00001B95 C60022                          mov byte [rax], T_vector
  2063 00001B98 48894801                        mov qword [rax + 1], rcx
  2064 00001B9C 41B800000000                    mov r8, 0
  2065                                  .L0:
  2066 00001BA2 4939C8                          cmp r8, rcx
  2067 00001BA5 740A                            je .L1
  2068 00001BA7 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2069 00001BAC 49FFC0                          inc r8
  2070 00001BAF EBF1                            jmp .L0
  2071                                  .L1:
  2072                                          LEAVE
    38 00001BB1 C9                  <1>  leave
  2073 00001BB2 C22000                          ret AND_KILL_FRAME(2)
  2074                                          
  2075                                  L_code_ptr_make_string:
  2076                                          ENTER
    33 00001BB5 C8000000            <1>  enter 0, 0
    34 00001BB9 4883E4F0            <1>  and rsp, ~15
  2077 00001BBD 48837D1802                      cmp COUNT, 2
  2078 00001BC2 0F851A020000                    jne L_error_arg_count_2
  2079 00001BC8 488B4D20                        mov rcx, PARAM(0)
  2080                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001BCC 803911              <2>  cmp byte [%1], %2
    43 00001BCF 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001BD5 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BDA 0F85A1020000        <1>  jne L_error_incorrect_type
  2081 00001BE0 488B4901                        mov rcx, qword [rcx + 1]
  2082 00001BE4 4883F900                        cmp rcx, 0
  2083 00001BE8 0F8C59010000                    jl L_error_integer_range
  2084 00001BEE 488B5528                        mov rdx, PARAM(1)
  2085                                          assert_char(rdx)
    42 00001BF2 803A02              <1>  cmp byte [%1], %2
    43 00001BF5 0F8586020000        <1>  jne L_error_incorrect_type
  2086 00001BFB 8A5201                          mov dl, byte [rdx + 1]
  2087 00001BFE 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2088 00001C02 E881EAFFFF                      call malloc
  2089 00001C07 C60003                          mov byte [rax], T_string
  2090 00001C0A 48894801                        mov qword [rax + 1], rcx
  2091 00001C0E 41B800000000                    mov r8, 0
  2092                                  .L0:
  2093 00001C14 4939C8                          cmp r8, rcx
  2094 00001C17 740A                            je .L1
  2095 00001C19 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2096 00001C1E 49FFC0                          inc r8
  2097 00001C21 EBF1                            jmp .L0
  2098                                  .L1:
  2099                                          LEAVE
    38 00001C23 C9                  <1>  leave
  2100 00001C24 C22000                          ret AND_KILL_FRAME(2)
  2101                                  
  2102                                  L_code_ptr_numerator:
  2103                                          ENTER
    33 00001C27 C8000000            <1>  enter 0, 0
    34 00001C2B 4883E4F0            <1>  and rsp, ~15
  2104 00001C2F 48837D1801                      cmp COUNT, 1
  2105 00001C34 0F8573010000                    jne L_error_arg_count_1
  2106 00001C3A 488B4520                        mov rax, PARAM(0)
  2107                                          assert_rational(rax)
    42 00001C3E 803811              <1>  cmp byte [%1], %2
    43 00001C41 0F853A020000        <1>  jne L_error_incorrect_type
  2108 00001C47 488B7801                        mov rdi, qword [rax + 1]
  2109 00001C4B E8D1000000                      call make_integer
  2110                                          LEAVE
    38 00001C50 C9                  <1>  leave
  2111 00001C51 C21800                          ret AND_KILL_FRAME(1)
  2112                                          
  2113                                  L_code_ptr_denominator:
  2114                                          ENTER
    33 00001C54 C8000000            <1>  enter 0, 0
    34 00001C58 4883E4F0            <1>  and rsp, ~15
  2115 00001C5C 48837D1801                      cmp COUNT, 1
  2116 00001C61 0F8546010000                    jne L_error_arg_count_1
  2117 00001C67 488B4520                        mov rax, PARAM(0)
  2118                                          assert_rational(rax)
    42 00001C6B 803811              <1>  cmp byte [%1], %2
    43 00001C6E 0F850D020000        <1>  jne L_error_incorrect_type
  2119 00001C74 488B7809                        mov rdi, qword [rax + 1 + 8]
  2120 00001C78 E8A4000000                      call make_integer
  2121                                          LEAVE
    38 00001C7D C9                  <1>  leave
  2122 00001C7E C21800                          ret AND_KILL_FRAME(1)
  2123                                  
  2124                                  L_code_ptr_eq:
  2125                                  	ENTER
    33 00001C81 C8000000            <1>  enter 0, 0
    34 00001C85 4883E4F0            <1>  and rsp, ~15
  2126 00001C89 48837D1802              	cmp COUNT, 2
  2127 00001C8E 0F854E010000            	jne L_error_arg_count_2
  2128 00001C94 488B7D20                	mov rdi, PARAM(0)
  2129 00001C98 488B7528                	mov rsi, PARAM(1)
  2130 00001C9C 4839F7                  	cmp rdi, rsi
  2131 00001C9F 744A                    	je .L_eq_true
  2132 00001CA1 8A17                    	mov dl, byte [rdi]
  2133 00001CA3 3A16                    	cmp dl, byte [rsi]
  2134 00001CA5 7550                    	jne .L_eq_false
  2135 00001CA7 80FA02                  	cmp dl, T_char
  2136 00001CAA 7437                    	je .L_char
  2137 00001CAC 80FA04                  	cmp dl, T_symbol
  2138 00001CAF 742A                    	je .L_symbol
  2139 00001CB1 80FA12                  	cmp dl, T_real
  2140 00001CB4 741D                    	je .L_real
  2141 00001CB6 80FA11                  	cmp dl, T_rational
  2142 00001CB9 7402                    	je .L_rational
  2143 00001CBB EB3A                    	jmp .L_eq_false
  2144                                  .L_rational:
  2145 00001CBD 488B4601                	mov rax, qword [rsi + 1]
  2146 00001CC1 483B4701                	cmp rax, qword [rdi + 1]
  2147 00001CC5 7530                    	jne .L_eq_false
  2148 00001CC7 488B4609                	mov rax, qword [rsi + 1 + 8]
  2149 00001CCB 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2150 00001CCF 7526                    	jne .L_eq_false
  2151 00001CD1 EB18                    	jmp .L_eq_true
  2152                                  .L_real:
  2153 00001CD3 488B4601                	mov rax, qword [rsi + 1]
  2154 00001CD7 483B4701                	cmp rax, qword [rdi + 1]
  2155                                  .L_symbol:
  2156                                  	; never reached, because symbols are static!
  2157                                  	; but I'm keeping it in case, I'll ever change
  2158                                  	; the implementation
  2159 00001CDB 488B4601                	mov rax, qword [rsi + 1]
  2160 00001CDF 483B4701                	cmp rax, qword [rdi + 1]
  2161                                  .L_char:
  2162 00001CE3 8A5E01                  	mov bl, byte [rsi + 1]
  2163 00001CE6 3A5F01                  	cmp bl, byte [rdi + 1]
  2164 00001CE9 750C                    	jne .L_eq_false
  2165                                  .L_eq_true:
  2166 00001CEB 48B8-                   	mov rax, sob_boolean_true
  2166 00001CED [0300000000000000] 
  2167 00001CF5 EB0A                    	jmp .L_eq_exit
  2168                                  .L_eq_false:
  2169 00001CF7 48B8-                   	mov rax, sob_boolean_false
  2169 00001CF9 [0200000000000000] 
  2170                                  .L_eq_exit:
  2171                                  	LEAVE
    38 00001D01 C9                  <1>  leave
  2172 00001D02 C22000                  	ret AND_KILL_FRAME(2)
  2173                                  
  2174                                  make_real:
  2175                                          ENTER
    33 00001D05 C8000000            <1>  enter 0, 0
    34 00001D09 4883E4F0            <1>  and rsp, ~15
  2176 00001D0D BF09000000                      mov rdi, (1 + 8)
  2177 00001D12 E871E9FFFF                      call malloc
  2178 00001D17 C60012                          mov byte [rax], T_real
  2179 00001D1A F20F114001                      movsd qword [rax + 1], xmm0
  2180                                          LEAVE
    38 00001D1F C9                  <1>  leave
  2181 00001D20 C3                              ret
  2182                                          
  2183                                  make_integer:
  2184                                          ENTER
    33 00001D21 C8000000            <1>  enter 0, 0
    34 00001D25 4883E4F0            <1>  and rsp, ~15
  2185 00001D29 4889FE                          mov rsi, rdi
  2186 00001D2C BF11000000                      mov rdi, (1 + 8 + 8)
  2187 00001D31 E852E9FFFF                      call malloc
  2188 00001D36 C60011                          mov byte [rax], T_rational
  2189 00001D39 48897001                        mov qword [rax + 1], rsi
  2190 00001D3D 48C7400901000000                mov qword [rax + 1 + 8], 1
  2191                                          LEAVE
    38 00001D45 C9                  <1>  leave
  2192 00001D46 C3                              ret
  2193                                          
  2194                                  L_error_integer_range:
  2195 00001D47 488B3C25[00000000]              mov rdi, qword [stderr]
  2196 00001D4F 48BE-                           mov rsi, fmt_integer_range
  2196 00001D51 [A203000000000000] 
  2197 00001D59 B800000000                      mov rax, 0
  2198                                  	ENTER
    33 00001D5E C8000000            <1>  enter 0, 0
    34 00001D62 4883E4F0            <1>  and rsp, ~15
  2199 00001D66 E8(00000000)                    call fprintf
  2200                                  	LEAVE
    38 00001D6B C9                  <1>  leave
  2201 00001D6C 48C7C0FBFFFFFF                  mov rax, -5
  2202 00001D73 E8(00000000)                    call exit
  2203                                  
  2204                                  L_error_arg_count_0:
  2205 00001D78 488B3C25[00000000]              mov rdi, qword [stderr]
  2206 00001D80 48BE-                           mov rsi, fmt_arg_count_0
  2206 00001D82 [A002000000000000] 
  2207 00001D8A 488B5518                        mov rdx, COUNT
  2208 00001D8E B800000000                      mov rax, 0
  2209                                  	ENTER
    33 00001D93 C8000000            <1>  enter 0, 0
    34 00001D97 4883E4F0            <1>  and rsp, ~15
  2210 00001D9B E8(00000000)                    call fprintf
  2211                                  	LEAVE
    38 00001DA0 C9                  <1>  leave
  2212 00001DA1 48C7C0FDFFFFFF                  mov rax, -3
  2213 00001DA8 E8(00000000)                    call exit
  2214                                  
  2215                                  L_error_arg_count_1:
  2216 00001DAD 488B3C25[00000000]              mov rdi, qword [stderr]
  2217 00001DB5 48BE-                           mov rsi, fmt_arg_count_1
  2217 00001DB7 [C802000000000000] 
  2218 00001DBF 488B5518                        mov rdx, COUNT
  2219 00001DC3 B800000000                      mov rax, 0
  2220                                  	ENTER
    33 00001DC8 C8000000            <1>  enter 0, 0
    34 00001DCC 4883E4F0            <1>  and rsp, ~15
  2221 00001DD0 E8(00000000)                    call fprintf
  2222                                  	LEAVE
    38 00001DD5 C9                  <1>  leave
  2223 00001DD6 48C7C0FDFFFFFF                  mov rax, -3
  2224 00001DDD E8(00000000)                    call exit
  2225                                  
  2226                                  L_error_arg_count_2:
  2227 00001DE2 488B3C25[00000000]              mov rdi, qword [stderr]
  2228 00001DEA 48BE-                           mov rsi, fmt_arg_count_2
  2228 00001DEC [2E03000000000000] 
  2229 00001DF4 488B5518                        mov rdx, COUNT
  2230 00001DF8 B800000000                      mov rax, 0
  2231                                  	ENTER
    33 00001DFD C8000000            <1>  enter 0, 0
    34 00001E01 4883E4F0            <1>  and rsp, ~15
  2232 00001E05 E8(00000000)                    call fprintf
  2233                                  	LEAVE
    38 00001E0A C9                  <1>  leave
  2234 00001E0B 48C7C0FDFFFFFF                  mov rax, -3
  2235 00001E12 E8(00000000)                    call exit
  2236                                  
  2237                                  L_error_arg_count_12:
  2238 00001E17 488B3C25[00000000]              mov rdi, qword [stderr]
  2239 00001E1F 48BE-                           mov rsi, fmt_arg_count_12
  2239 00001E21 [EE02000000000000] 
  2240 00001E29 488B5518                        mov rdx, COUNT
  2241 00001E2D B800000000                      mov rax, 0
  2242                                  	ENTER
    33 00001E32 C8000000            <1>  enter 0, 0
    34 00001E36 4883E4F0            <1>  and rsp, ~15
  2243 00001E3A E8(00000000)                    call fprintf
  2244                                  	LEAVE
    38 00001E3F C9                  <1>  leave
  2245 00001E40 48C7C0FDFFFFFF                  mov rax, -3
  2246 00001E47 E8(00000000)                    call exit
  2247                                  
  2248                                  L_error_arg_count_3:
  2249 00001E4C 488B3C25[00000000]              mov rdi, qword [stderr]
  2250 00001E54 48BE-                           mov rsi, fmt_arg_count_3
  2250 00001E56 [5503000000000000] 
  2251 00001E5E 488B5518                        mov rdx, COUNT
  2252 00001E62 B800000000                      mov rax, 0
  2253                                  	ENTER
    33 00001E67 C8000000            <1>  enter 0, 0
    34 00001E6B 4883E4F0            <1>  and rsp, ~15
  2254 00001E6F E8(00000000)                    call fprintf
  2255                                  	LEAVE
    38 00001E74 C9                  <1>  leave
  2256 00001E75 48C7C0FDFFFFFF                  mov rax, -3
  2257 00001E7C E8(00000000)                    call exit
  2258                                          
  2259                                  L_error_incorrect_type:
  2260 00001E81 488B3C25[00000000]              mov rdi, qword [stderr]
  2261 00001E89 48BE-                           mov rsi, fmt_type
  2261 00001E8B [7E03000000000000] 
  2262 00001E93 B800000000                      mov rax, 0
  2263                                  	ENTER
    33 00001E98 C8000000            <1>  enter 0, 0
    34 00001E9C 4883E4F0            <1>  and rsp, ~15
  2264 00001EA0 E8(00000000)                    call fprintf
  2265                                  	LEAVE
    38 00001EA5 C9                  <1>  leave
  2266 00001EA6 48C7C0FCFFFFFF                  mov rax, -4
  2267 00001EAD E8(00000000)                    call exit
  2268                                  
  2269                                  L_error_division_by_zero:
  2270 00001EB2 488B3C25[00000000]              mov rdi, qword [stderr]
  2271 00001EBA 48BE-                           mov rsi, fmt_division_by_zero
  2271 00001EBC [BF03000000000000] 
  2272 00001EC4 B800000000                      mov rax, 0
  2273                                  	ENTER
    33 00001EC9 C8000000            <1>  enter 0, 0
    34 00001ECD 4883E4F0            <1>  and rsp, ~15
  2274 00001ED1 E8(00000000)                    call fprintf
  2275                                  	LEAVE
    38 00001ED6 C9                  <1>  leave
  2276 00001ED7 48C7C0F8FFFFFF                  mov rax, -8
  2277 00001EDE E8(00000000)                    call exit
  2278                                  
  2279                                  section .data
  2280                                  fmt_char:
  2281 0000029D 256300                          db `%c\0`
  2282                                  fmt_arg_count_0:
  2283 000002A0 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2283 000002A9 74696E67207A65726F-
  2283 000002B2 20617267756D656E74-
  2283 000002BB 732E20466F756E6420-
  2283 000002C4 25640A00           
  2284                                  fmt_arg_count_1:
  2285 000002C8 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2285 000002D1 74696E67206F6E6520-
  2285 000002DA 617267756D656E742E-
  2285 000002E3 20466F756E64202564-
  2285 000002EC 0A00               
  2286                                  fmt_arg_count_12:
  2287 000002EE 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2287 000002F7 74696E67206F6E6520-
  2287 00000300 726571756972656420-
  2287 00000309 616E64206F6E65206F-
  2287 00000312 7074696F6E616C2061-
  2287 0000031B 7267756D656E742E20-
  2287 00000324 466F756E642025640A-
  2287 0000032D 00                 
  2288                                  fmt_arg_count_2:
  2289 0000032E 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2289 00000337 74696E672074776F20-
  2289 00000340 617267756D656E7473-
  2289 00000349 2E20466F756E642025-
  2289 00000352 640A00             
  2290                                  fmt_arg_count_3:
  2291 00000355 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2291 0000035E 74696E672074687265-
  2291 00000367 6520617267756D656E-
  2291 00000370 74732E20466F756E64-
  2291 00000379 2025640A00         
  2292                                  fmt_type:
  2293 0000037E 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2293 00000387 696F6E207061737365-
  2293 00000390 6420696E636F727265-
  2293 00000399 637420747970650A00 
  2294                                  fmt_integer_range:
  2295 000003A2 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2295 000003AB 7265637420696E7465-
  2295 000003B4 6765722072616E6765-
  2295 000003BD 0A00               
  2296                                  fmt_division_by_zero:
  2297 000003BF 212121204469766973-             db `!!! Division by zero\n\0`
  2297 000003C8 696F6E206279207A65-
  2297 000003D1 726F0A00           
  2298                                  fmt_scheme_error_part_1:
  2299 000003D5 0A2121212054686520-             db `\n!!! The procedure \0`
  2299 000003DE 70726F636564757265-
  2299 000003E7 2000               
  2300                                  fmt_scheme_error_part_2:
  2301 000003E9 2061736B656420746F-             db ` asked to terminate the program\n`
  2301 000003F2 207465726D696E6174-
  2301 000003FB 65207468652070726F-
  2301 00000404 6772616D0A         
  2302 00000409 202020207769746820-             db `    with the following message:\n\n\0`
  2302 00000412 74686520666F6C6C6F-
  2302 0000041B 77696E67206D657373-
  2302 00000424 6167653A0A0A00     
  2303                                  fmt_scheme_error_part_3:
  2304 0000042B 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2304 00000434 210A0A00           
