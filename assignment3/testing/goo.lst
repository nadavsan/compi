     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 20
    84 00000007 140000000000000001-     	dq 20, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 10
    86 00000018 0A0000000000000001-     	dq 10, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 5
    88 00000029 050000000000000001-     	dq 5, 1
    88 00000032 00000000000000     
    89 00000039 11                      	db T_rational	; 1
    90 0000003A 010000000000000001-     	dq 1, 1
    90 00000043 00000000000000     
    91 0000004A 21                      	db T_pair	; (1)
    92 0000004B [3900000000000000]-     	dq L_constants + 57, L_constants + 1
    92 00000053 [0100000000000000] 
    93 0000005B 21                      	db T_pair	; (5 1)
    94 0000005C [2800000000000000]-     	dq L_constants + 40, L_constants + 74
    94 00000064 [4A00000000000000] 
    95 0000006C 21                      	db T_pair	; (10 5 1)
    96 0000006D [1700000000000000]-     	dq L_constants + 23, L_constants + 91
    96 00000075 [5B00000000000000] 
    97 0000007D 21                      	db T_pair	; (20 10 5 1)
    98 0000007E [0600000000000000]-     	dq L_constants + 6, L_constants + 108
    98 00000086 [6C00000000000000] 
    99                                  
   100                                  section .bss
   101                                  free_var_0:	; location of null?
   102 00000000 ????????????????        	resq 1
   103                                  free_var_1:	; location of pair?
   104 00000008 ????????????????        	resq 1
   105                                  free_var_2:	; location of void?
   106 00000010 ????????????????        	resq 1
   107                                  free_var_3:	; location of char?
   108 00000018 ????????????????        	resq 1
   109                                  free_var_4:	; location of string?
   110 00000020 ????????????????        	resq 1
   111                                  free_var_5:	; location of symbol?
   112 00000028 ????????????????        	resq 1
   113                                  free_var_6:	; location of vector?
   114 00000030 ????????????????        	resq 1
   115                                  free_var_7:	; location of procedure?
   116 00000038 ????????????????        	resq 1
   117                                  free_var_8:	; location of real?
   118 00000040 ????????????????        	resq 1
   119                                  free_var_9:	; location of rational?
   120 00000048 ????????????????        	resq 1
   121                                  free_var_10:	; location of boolean?
   122 00000050 ????????????????        	resq 1
   123                                  free_var_11:	; location of number?
   124 00000058 ????????????????        	resq 1
   125                                  free_var_12:	; location of collection?
   126 00000060 ????????????????        	resq 1
   127                                  free_var_13:	; location of cons
   128 00000068 ????????????????        	resq 1
   129                                  free_var_14:	; location of display-sexpr
   130 00000070 ????????????????        	resq 1
   131                                  free_var_15:	; location of write-char
   132 00000078 ????????????????        	resq 1
   133                                  free_var_16:	; location of car
   134 00000080 ????????????????        	resq 1
   135                                  free_var_17:	; location of cdr
   136 00000088 ????????????????        	resq 1
   137                                  free_var_18:	; location of string-length
   138 00000090 ????????????????        	resq 1
   139                                  free_var_19:	; location of vector-length
   140 00000098 ????????????????        	resq 1
   141                                  free_var_20:	; location of real->integer
   142 000000A0 ????????????????        	resq 1
   143                                  free_var_21:	; location of exit
   144 000000A8 ????????????????        	resq 1
   145                                  free_var_22:	; location of integer->real
   146 000000B0 ????????????????        	resq 1
   147                                  free_var_23:	; location of rational->real
   148 000000B8 ????????????????        	resq 1
   149                                  free_var_24:	; location of char->integer
   150 000000C0 ????????????????        	resq 1
   151                                  free_var_25:	; location of integer->char
   152 000000C8 ????????????????        	resq 1
   153                                  free_var_26:	; location of trng
   154 000000D0 ????????????????        	resq 1
   155                                  free_var_27:	; location of zero?
   156 000000D8 ????????????????        	resq 1
   157                                  free_var_28:	; location of integer?
   158 000000E0 ????????????????        	resq 1
   159                                  free_var_29:	; location of __bin-apply
   160 000000E8 ????????????????        	resq 1
   161                                  free_var_30:	; location of __bin-add-rr
   162 000000F0 ????????????????        	resq 1
   163                                  free_var_31:	; location of __bin-sub-rr
   164 000000F8 ????????????????        	resq 1
   165                                  free_var_32:	; location of __bin-mul-rr
   166 00000100 ????????????????        	resq 1
   167                                  free_var_33:	; location of __bin-div-rr
   168 00000108 ????????????????        	resq 1
   169                                  free_var_34:	; location of __bin-add-qq
   170 00000110 ????????????????        	resq 1
   171                                  free_var_35:	; location of __bin-sub-qq
   172 00000118 ????????????????        	resq 1
   173                                  free_var_36:	; location of __bin-mul-qq
   174 00000120 ????????????????        	resq 1
   175                                  free_var_37:	; location of __bin-div-qq
   176 00000128 ????????????????        	resq 1
   177                                  free_var_38:	; location of error
   178 00000130 ????????????????        	resq 1
   179                                  free_var_39:	; location of __bin-less-than-rr
   180 00000138 ????????????????        	resq 1
   181                                  free_var_40:	; location of __bin-less-than-qq
   182 00000140 ????????????????        	resq 1
   183                                  free_var_41:	; location of __bin-equal-rr
   184 00000148 ????????????????        	resq 1
   185                                  free_var_42:	; location of __bin-equal-qq
   186 00000150 ????????????????        	resq 1
   187                                  free_var_43:	; location of quotient
   188 00000158 ????????????????        	resq 1
   189                                  free_var_44:	; location of remainder
   190 00000160 ????????????????        	resq 1
   191                                  free_var_45:	; location of set-car!
   192 00000168 ????????????????        	resq 1
   193                                  free_var_46:	; location of set-cdr!
   194 00000170 ????????????????        	resq 1
   195                                  free_var_47:	; location of string-ref
   196 00000178 ????????????????        	resq 1
   197                                  free_var_48:	; location of vector-ref
   198 00000180 ????????????????        	resq 1
   199                                  free_var_49:	; location of vector-set!
   200 00000188 ????????????????        	resq 1
   201                                  free_var_50:	; location of string-set!
   202 00000190 ????????????????        	resq 1
   203                                  free_var_51:	; location of make-vector
   204 00000198 ????????????????        	resq 1
   205                                  free_var_52:	; location of make-string
   206 000001A0 ????????????????        	resq 1
   207                                  free_var_53:	; location of numerator
   208 000001A8 ????????????????        	resq 1
   209                                  free_var_54:	; location of denominator
   210 000001B0 ????????????????        	resq 1
   211                                  free_var_55:	; location of eq?
   212 000001B8 ????????????????        	resq 1
   213                                  
   214                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   215                                  global main
   216                                  section .text
   217                                  main:
   218 00000000 C8000000                        enter 0, 0
   219                                          
   220                                  	; building closure for null?
   221 00000004 48BF-                   	mov rdi, free_var_0
   221 00000006 [0000000000000000] 
   222 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   222 00000010 [DE0C000000000000] 
   223 00000018 E8FC0B0000              	call bind_primitive
   224                                  
   225                                  	; building closure for pair?
   226 0000001D 48BF-                   	mov rdi, free_var_1
   226 0000001F [0800000000000000] 
   227 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   227 00000029 [140D000000000000] 
   228 00000031 E8E30B0000              	call bind_primitive
   229                                  
   230                                  	; building closure for void?
   231 00000036 48BF-                   	mov rdi, free_var_2
   231 00000038 [1000000000000000] 
   232 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   232 00000042 [4A0D000000000000] 
   233 0000004A E8CA0B0000              	call bind_primitive
   234                                  
   235                                  	; building closure for char?
   236 0000004F 48BF-                   	mov rdi, free_var_3
   236 00000051 [1800000000000000] 
   237 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   237 0000005B [800D000000000000] 
   238 00000063 E8B10B0000              	call bind_primitive
   239                                  
   240                                  	; building closure for string?
   241 00000068 48BF-                   	mov rdi, free_var_4
   241 0000006A [2000000000000000] 
   242 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   242 00000074 [B60D000000000000] 
   243 0000007C E8980B0000              	call bind_primitive
   244                                  
   245                                  	; building closure for symbol?
   246 00000081 48BF-                   	mov rdi, free_var_5
   246 00000083 [2800000000000000] 
   247 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   247 0000008D [EC0D000000000000] 
   248 00000095 E87F0B0000              	call bind_primitive
   249                                  
   250                                  	; building closure for vector?
   251 0000009A 48BF-                   	mov rdi, free_var_6
   251 0000009C [3000000000000000] 
   252 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   252 000000A6 [220E000000000000] 
   253 000000AE E8660B0000              	call bind_primitive
   254                                  
   255                                  	; building closure for procedure?
   256 000000B3 48BF-                   	mov rdi, free_var_7
   256 000000B5 [3800000000000000] 
   257 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   257 000000BF [580E000000000000] 
   258 000000C7 E84D0B0000              	call bind_primitive
   259                                  
   260                                  	; building closure for real?
   261 000000CC 48BF-                   	mov rdi, free_var_8
   261 000000CE [4000000000000000] 
   262 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   262 000000D8 [8E0E000000000000] 
   263 000000E0 E8340B0000              	call bind_primitive
   264                                  
   265                                  	; building closure for rational?
   266 000000E5 48BF-                   	mov rdi, free_var_9
   266 000000E7 [4800000000000000] 
   267 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   267 000000F1 [C40E000000000000] 
   268 000000F9 E81B0B0000              	call bind_primitive
   269                                  
   270                                  	; building closure for boolean?
   271 000000FE 48BF-                   	mov rdi, free_var_10
   271 00000100 [5000000000000000] 
   272 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   272 0000010A [FA0E000000000000] 
   273 00000112 E8020B0000              	call bind_primitive
   274                                  
   275                                  	; building closure for number?
   276 00000117 48BF-                   	mov rdi, free_var_11
   276 00000119 [5800000000000000] 
   277 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   277 00000123 [320F000000000000] 
   278 0000012B E8E90A0000              	call bind_primitive
   279                                  
   280                                  	; building closure for collection?
   281 00000130 48BF-                   	mov rdi, free_var_12
   281 00000132 [6000000000000000] 
   282 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   282 0000013C [6A0F000000000000] 
   283 00000144 E8D00A0000              	call bind_primitive
   284                                  
   285                                  	; building closure for cons
   286 00000149 48BF-                   	mov rdi, free_var_13
   286 0000014B [6800000000000000] 
   287 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   287 00000155 [A20F000000000000] 
   288 0000015D E8B70A0000              	call bind_primitive
   289                                  
   290                                  	; building closure for display-sexpr
   291 00000162 48BF-                   	mov rdi, free_var_14
   291 00000164 [7000000000000000] 
   292 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   292 0000016E [D60F000000000000] 
   293 00000176 E89E0A0000              	call bind_primitive
   294                                  
   295                                  	; building closure for write-char
   296 0000017B 48BF-                   	mov rdi, free_var_15
   296 0000017D [7800000000000000] 
   297 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   297 00000187 [0010000000000000] 
   298 0000018F E8850A0000              	call bind_primitive
   299                                  
   300                                  	; building closure for car
   301 00000194 48BF-                   	mov rdi, free_var_16
   301 00000196 [8000000000000000] 
   302 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   302 000001A0 [5710000000000000] 
   303 000001A8 E86C0A0000              	call bind_primitive
   304                                  
   305                                  	; building closure for cdr
   306 000001AD 48BF-                   	mov rdi, free_var_17
   306 000001AF [8800000000000000] 
   307 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   307 000001B9 [7F10000000000000] 
   308 000001C1 E8530A0000              	call bind_primitive
   309                                  
   310                                  	; building closure for string-length
   311 000001C6 48BF-                   	mov rdi, free_var_18
   311 000001C8 [9000000000000000] 
   312 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   312 000001D2 [A710000000000000] 
   313 000001DA E83A0A0000              	call bind_primitive
   314                                  
   315                                  	; building closure for vector-length
   316 000001DF 48BF-                   	mov rdi, free_var_19
   316 000001E1 [9800000000000000] 
   317 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   317 000001EB [D410000000000000] 
   318 000001F3 E8210A0000              	call bind_primitive
   319                                  
   320                                  	; building closure for real->integer
   321 000001F8 48BF-                   	mov rdi, free_var_20
   321 000001FA [A000000000000000] 
   322 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   322 00000204 [0111000000000000] 
   323 0000020C E8080A0000              	call bind_primitive
   324                                  
   325                                  	; building closure for exit
   326 00000211 48BF-                   	mov rdi, free_var_21
   326 00000213 [A800000000000000] 
   327 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   327 0000021D [3411000000000000] 
   328 00000225 E8EF090000              	call bind_primitive
   329                                  
   330                                  	; building closure for integer->real
   331 0000022A 48BF-                   	mov rdi, free_var_22
   331 0000022C [B000000000000000] 
   332 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   332 00000236 [5111000000000000] 
   333 0000023E E8D6090000              	call bind_primitive
   334                                  
   335                                  	; building closure for rational->real
   336 00000243 48BF-                   	mov rdi, free_var_23
   336 00000245 [B800000000000000] 
   337 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   337 0000024F [8E11000000000000] 
   338 00000257 E8BD090000              	call bind_primitive
   339                                  
   340                                  	; building closure for char->integer
   341 0000025C 48BF-                   	mov rdi, free_var_24
   341 0000025E [C000000000000000] 
   342 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   342 00000268 [CD11000000000000] 
   343 00000270 E8A4090000              	call bind_primitive
   344                                  
   345                                  	; building closure for integer->char
   346 00000275 48BF-                   	mov rdi, free_var_25
   346 00000277 [C800000000000000] 
   347 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   347 00000281 [0212000000000000] 
   348 00000289 E88B090000              	call bind_primitive
   349                                  
   350                                  	; building closure for trng
   351 0000028E 48BF-                   	mov rdi, free_var_26
   351 00000290 [D000000000000000] 
   352 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   352 0000029A [5C12000000000000] 
   353 000002A2 E872090000              	call bind_primitive
   354                                  
   355                                  	; building closure for zero?
   356 000002A7 48BF-                   	mov rdi, free_var_27
   356 000002A9 [D800000000000000] 
   357 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   357 000002B3 [7F12000000000000] 
   358 000002BB E859090000              	call bind_primitive
   359                                  
   360                                  	; building closure for integer?
   361 000002C0 48BF-                   	mov rdi, free_var_28
   361 000002C2 [E000000000000000] 
   362 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   362 000002CC [DA12000000000000] 
   363 000002D4 E840090000              	call bind_primitive
   364                                  
   365                                  	; building closure for __bin-apply
   366 000002D9 48BF-                   	mov rdi, free_var_29
   366 000002DB [E800000000000000] 
   367 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   367 000002E5 [410C000000000000] 
   368 000002ED E827090000              	call bind_primitive
   369                                  
   370                                  	; building closure for __bin-add-rr
   371 000002F2 48BF-                   	mov rdi, free_var_30
   371 000002F4 [F000000000000000] 
   372 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   372 000002FE [1713000000000000] 
   373 00000306 E80E090000              	call bind_primitive
   374                                  
   375                                  	; building closure for __bin-sub-rr
   376 0000030B 48BF-                   	mov rdi, free_var_31
   376 0000030D [F800000000000000] 
   377 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   377 00000317 [5B13000000000000] 
   378 0000031F E8F5080000              	call bind_primitive
   379                                  
   380                                  	; building closure for __bin-mul-rr
   381 00000324 48BF-                   	mov rdi, free_var_32
   381 00000326 [0001000000000000] 
   382 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   382 00000330 [9F13000000000000] 
   383 00000338 E8DC080000              	call bind_primitive
   384                                  
   385                                  	; building closure for __bin-div-rr
   386 0000033D 48BF-                   	mov rdi, free_var_33
   386 0000033F [0801000000000000] 
   387 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   387 00000349 [E313000000000000] 
   388 00000351 E8C3080000              	call bind_primitive
   389                                  
   390                                  	; building closure for __bin-add-qq
   391 00000356 48BF-                   	mov rdi, free_var_34
   391 00000358 [1001000000000000] 
   392 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   392 00000362 [3514000000000000] 
   393 0000036A E8AA080000              	call bind_primitive
   394                                  
   395                                  	; building closure for __bin-sub-qq
   396 0000036F 48BF-                   	mov rdi, free_var_35
   396 00000371 [1801000000000000] 
   397 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   397 0000037B [9D14000000000000] 
   398 00000383 E891080000              	call bind_primitive
   399                                  
   400                                  	; building closure for __bin-mul-qq
   401 00000388 48BF-                   	mov rdi, free_var_36
   401 0000038A [2001000000000000] 
   402 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   402 00000394 [0515000000000000] 
   403 0000039C E878080000              	call bind_primitive
   404                                  
   405                                  	; building closure for __bin-div-qq
   406 000003A1 48BF-                   	mov rdi, free_var_37
   406 000003A3 [2801000000000000] 
   407 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   407 000003AD [5D15000000000000] 
   408 000003B5 E85F080000              	call bind_primitive
   409                                  
   410                                  	; building closure for error
   411 000003BA 48BF-                   	mov rdi, free_var_38
   411 000003BC [3001000000000000] 
   412 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   412 000003C6 [2B16000000000000] 
   413 000003CE E846080000              	call bind_primitive
   414                                  
   415                                  	; building closure for __bin-less-than-rr
   416 000003D3 48BF-                   	mov rdi, free_var_39
   416 000003D5 [3801000000000000] 
   417 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   417 000003DF [E216000000000000] 
   418 000003E7 E82D080000              	call bind_primitive
   419                                  
   420                                  	; building closure for __bin-less-than-qq
   421 000003EC 48BF-                   	mov rdi, free_var_40
   421 000003EE [4001000000000000] 
   422 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   422 000003F8 [3917000000000000] 
   423 00000400 E814080000              	call bind_primitive
   424                                  
   425                                  	; building closure for __bin-equal-rr
   426 00000405 48BF-                   	mov rdi, free_var_41
   426 00000407 [4801000000000000] 
   427 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   427 00000411 [9C17000000000000] 
   428 00000419 E8FB070000              	call bind_primitive
   429                                  
   430                                  	; building closure for __bin-equal-qq
   431 0000041E 48BF-                   	mov rdi, free_var_42
   431 00000420 [5001000000000000] 
   432 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   432 0000042A [F317000000000000] 
   433 00000432 E8E2070000              	call bind_primitive
   434                                  
   435                                  	; building closure for quotient
   436 00000437 48BF-                   	mov rdi, free_var_43
   436 00000439 [5801000000000000] 
   437 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   437 00000443 [5618000000000000] 
   438 0000044B E8C9070000              	call bind_primitive
   439                                  
   440                                  	; building closure for remainder
   441 00000450 48BF-                   	mov rdi, free_var_44
   441 00000452 [6001000000000000] 
   442 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   442 0000045C [BC18000000000000] 
   443 00000464 E8B0070000              	call bind_primitive
   444                                  
   445                                  	; building closure for set-car!
   446 00000469 48BF-                   	mov rdi, free_var_45
   446 0000046B [6801000000000000] 
   447 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   447 00000475 [2219000000000000] 
   448 0000047D E897070000              	call bind_primitive
   449                                  
   450                                  	; building closure for set-cdr!
   451 00000482 48BF-                   	mov rdi, free_var_46
   451 00000484 [7001000000000000] 
   452 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   452 0000048E [5819000000000000] 
   453 00000496 E87E070000              	call bind_primitive
   454                                  
   455                                  	; building closure for string-ref
   456 0000049B 48BF-                   	mov rdi, free_var_47
   456 0000049D [7801000000000000] 
   457 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   457 000004A7 [8E19000000000000] 
   458 000004AF E865070000              	call bind_primitive
   459                                  
   460                                  	; building closure for vector-ref
   461 000004B4 48BF-                   	mov rdi, free_var_48
   461 000004B6 [8001000000000000] 
   462 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   462 000004C0 [F919000000000000] 
   463 000004C8 E84C070000              	call bind_primitive
   464                                  
   465                                  	; building closure for vector-set!
   466 000004CD 48BF-                   	mov rdi, free_var_49
   466 000004CF [8801000000000000] 
   467 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   467 000004D9 [551A000000000000] 
   468 000004E1 E833070000              	call bind_primitive
   469                                  
   470                                  	; building closure for string-set!
   471 000004E6 48BF-                   	mov rdi, free_var_50
   471 000004E8 [9001000000000000] 
   472 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   472 000004F2 [BF1A000000000000] 
   473 000004FA E81A070000              	call bind_primitive
   474                                  
   475                                  	; building closure for make-vector
   476 000004FF 48BF-                   	mov rdi, free_var_51
   476 00000501 [9801000000000000] 
   477 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   477 0000050B [341B000000000000] 
   478 00000513 E801070000              	call bind_primitive
   479                                  
   480                                  	; building closure for make-string
   481 00000518 48BF-                   	mov rdi, free_var_52
   481 0000051A [A001000000000000] 
   482 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   482 00000524 [9E1B000000000000] 
   483 0000052C E8E8060000              	call bind_primitive
   484                                  
   485                                  	; building closure for numerator
   486 00000531 48BF-                   	mov rdi, free_var_53
   486 00000533 [A801000000000000] 
   487 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   487 0000053D [101C000000000000] 
   488 00000545 E8CF060000              	call bind_primitive
   489                                  
   490                                  	; building closure for denominator
   491 0000054A 48BF-                   	mov rdi, free_var_54
   491 0000054C [B001000000000000] 
   492 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   492 00000556 [3D1C000000000000] 
   493 0000055E E8B6060000              	call bind_primitive
   494                                  
   495                                  	; building closure for eq?
   496 00000563 48BF-                   	mov rdi, free_var_55
   496 00000565 [B801000000000000] 
   497 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   497 0000056F [6A1C000000000000] 
   498 00000577 E89D060000              	call bind_primitive
   499                                  
   500 0000057C 48B8-                   	mov rax,L_constants + 125
   500 0000057E [7D00000000000000] 
   501 00000586 50                      	push rax
   502 00000587 488B0425[18010000]      	mov rax, qword [free_var_35]
   503 0000058F 50                      	push rax
   504 00000590 6A02                    	push 2
   505 00000592 488B0425[E8000000]      	mov rax, qword [free_var_29]
   506                                          .goo:
   507                                  	assert_closure(rax)
    42 0000059A 803805              <1>  cmp byte [%1], %2
    43 0000059D 0F85C7180000        <1>  jne L_error_incorrect_type
   508 000005A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   509 000005A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
   510                                  
   511 000005A9 4889C7                  	mov rdi, rax
   512 000005AC E8E8000000              	call print_sexpr_if_not_void
   513                                  
   514 000005B1 48BF-                           mov rdi, fmt_memory_usage
   514 000005B3 [ED00000000000000] 
   515 000005BB 488B3425[74010000]              mov rsi, qword [top_of_memory]
   516 000005C3 4881EE[C0010000]                sub rsi, memory
   517 000005CA B800000000                      mov rax, 0
   518                                  	ENTER
    33 000005CF C8000000            <1>  enter 0, 0
    34 000005D3 4883E4F0            <1>  and rsp, ~15
   519 000005D7 E8(00000000)                    call printf
   520                                  	LEAVE
    38 000005DC C9                  <1>  leave
   521 000005DD C9                      	leave
   522 000005DE C3                      	ret
   523                                  
   524                                  L_error_non_closure:
   525 000005DF 488B3C25[00000000]              mov rdi, qword [stderr]
   526 000005E7 48BE-                           mov rsi, fmt_non_closure
   526 000005E9 [2401000000000000] 
   527 000005F1 B800000000                      mov rax, 0
   528                                  	ENTER
    33 000005F6 C8000000            <1>  enter 0, 0
    34 000005FA 4883E4F0            <1>  and rsp, ~15
   529 000005FE E8(00000000)                    call fprintf
   530                                  	LEAVE
    38 00000603 C9                  <1>  leave
   531 00000604 48C7C0FEFFFFFF                  mov rax, -2
   532 0000060B E8(00000000)                    call exit
   533                                  
   534                                  L_error_improper_list:
   535 00000610 488B3C25[00000000]      	mov rdi, qword [stderr]
   536 00000618 48BE-                   	mov rsi, fmt_error_improper_list
   536 0000061A [4C01000000000000] 
   537 00000622 B800000000              	mov rax, 0
   538                                  	ENTER
    33 00000627 C8000000            <1>  enter 0, 0
    34 0000062B 4883E4F0            <1>  and rsp, ~15
   539 0000062F E8(00000000)            	call fprintf
   540                                  	LEAVE
    38 00000634 C9                  <1>  leave
   541 00000635 48C7C0F9FFFFFF          	mov rax, -7
   542 0000063C E8(00000000)            	call exit
   543                                  
   544                                  L_error_incorrect_arity_simple:
   545 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   546 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   546 0000064B [8E00000000000000] 
   547 00000653 EB12                            jmp L_error_incorrect_arity_common
   548                                  L_error_incorrect_arity_opt:
   549 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   550 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   550 0000065F [B900000000000000] 
   551                                  L_error_incorrect_arity_common:
   552 00000667 5A                              pop rdx
   553 00000668 59                              pop rcx
   554 00000669 B800000000                      mov rax, 0
   555                                  	ENTER
    33 0000066E C8000000            <1>  enter 0, 0
    34 00000672 4883E4F0            <1>  and rsp, ~15
   556 00000676 E8(00000000)                    call fprintf
   557                                  	LEAVE
    38 0000067B C9                  <1>  leave
   558 0000067C 48C7C0FAFFFFFF                  mov rax, -6
   559 00000683 E8(00000000)                    call exit
   560                                  
   561                                  section .data
   562                                  fmt_incorrect_arity_simple:
   563 0000008E 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   563 00000097 74656420256C642061-
   563 000000A0 7267756D656E74732C-
   563 000000A9 206275742067697665-
   563 000000B2 6E20256C640A00     
   564                                  fmt_incorrect_arity_opt:
   565 000000B9 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   565 000000C2 746564206174206C65-
   565 000000CB 61737420256C642061-
   565 000000D4 7267756D656E74732C-
   565 000000DD 206275742067697665-
   565 000000E6 6E20256C640A00     
   566                                  fmt_memory_usage:
   567 000000ED 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   567 000000F6 6420256C6420627974-
   567 000000FF 6573206F662064796E-
   567 00000108 616D6963616C6C792D-
   567 00000111 616C6C6F6361746564-
   567 0000011A 206D656D6F72790A0A-
   567 00000123 00                 
   568                                  fmt_non_closure:
   569 00000124 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   569 0000012D 7074696E6720746F20-
   569 00000136 6170706C792061206E-
   569 0000013F 6F6E2D636C6F737572-
   569 00000148 65210A00           
   570                                  fmt_error_improper_list:
   571 0000014C 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   571 00000155 7267756D656E742069-
   571 0000015E 73206E6F7420612070-
   571 00000167 726F706572206C6973-
   571 00000170 74210A00           
   572                                  
   573                                  section .bss
   574                                  memory:
   575 000001C0 <res 40000000h>         	resb gbytes(1)
   576                                  
   577                                  section .data
   578                                  top_of_memory:
   579 00000174 [C001000000000000]              dq memory
   580                                  
   581                                  section .text
   582                                  malloc:
   583 00000688 488B0425[74010000]              mov rax, qword [top_of_memory]
   584 00000690 48013C25[74010000]              add qword [top_of_memory], rdi
   585 00000698 C3                              ret
   586                                          
   587                                  print_sexpr_if_not_void:
   588 00000699 4881FF[00000000]        	cmp rdi, sob_void
   589 000006A0 7501                    	jne print_sexpr
   590 000006A2 C3                      	ret
   591                                  
   592                                  section .data
   593                                  fmt_void:
   594 0000017C 233C766F69643E00        	db `#<void>\0`
   595                                  fmt_nil:
   596 00000184 282900                  	db `()\0`
   597                                  fmt_boolean_false:
   598 00000187 236600                  	db `#f\0`
   599                                  fmt_boolean_true:
   600 0000018A 237400                  	db `#t\0`
   601                                  fmt_char_backslash:
   602 0000018D 235C5C00                	db `#\\\\\0`
   603                                  fmt_char_dquote:
   604 00000191 235C2200                	db `#\\"\0`
   605                                  fmt_char_simple:
   606 00000195 235C256300              	db `#\\%c\0`
   607                                  fmt_char_null:
   608 0000019A 235C6E756C00            	db `#\\nul\0`
   609                                  fmt_char_bell:
   610 000001A0 235C62656C6C00          	db `#\\bell\0`
   611                                  fmt_char_backspace:
   612 000001A7 235C6261636B737061-     	db `#\\backspace\0`
   612 000001B0 636500             
   613                                  fmt_char_tab:
   614 000001B3 235C74616200            	db `#\\tab\0`
   615                                  fmt_char_newline:
   616 000001B9 235C6E65776C696E65-     	db `#\\newline\0`
   616 000001C2 00                 
   617                                  fmt_char_formfeed:
   618 000001C3 235C7061676500          	db `#\\page\0`
   619                                  fmt_char_return:
   620 000001CA 235C72657475726E00      	db `#\\return\0`
   621                                  fmt_char_escape:
   622 000001D3 235C65736300            	db `#\\esc\0`
   623                                  fmt_char_space:
   624 000001D9 235C737061636500        	db `#\\space\0`
   625                                  fmt_char_hex:
   626 000001E1 235C782530325800        	db `#\\x%02X\0`
   627                                  fmt_closure:
   628 000001E9 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   628 000001F2 206174203078253038-
   628 000001FB 5820656E763D307825-
   628 00000204 30385820636F64653D-
   628 0000020D 3078253038583E00   
   629                                  fmt_lparen:
   630 00000215 2800                    	db `(\0`
   631                                  fmt_dotted_pair:
   632 00000217 202E2000                	db ` . \0`
   633                                  fmt_rparen:
   634 0000021B 2900                    	db `)\0`
   635                                  fmt_space:
   636 0000021D 2000                    	db ` \0`
   637                                  fmt_empty_vector:
   638 0000021F 23282900                	db `#()\0`
   639                                  fmt_vector:
   640 00000223 232800                  	db `#(\0`
   641                                  fmt_real:
   642 00000226 256600                  	db `%f\0`
   643                                  fmt_fraction:
   644 00000229 256C642F256C6400        	db `%ld/%ld\0`
   645                                  fmt_zero:
   646 00000231 3000                    	db `0\0`
   647                                  fmt_int:
   648 00000233 256C6400                	db `%ld\0`
   649                                  fmt_unknown_sexpr_error:
   650 00000237 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   650 00000240 6F723A20556E6B6E6F-
   650 00000249 776E2074797065206F-
   650 00000252 662073657870722028-
   650 0000025B 3078253032582920   
   651 00000263 617420616464726573-     	db `at address 0x%08X\n\n\0`
   651 0000026C 73203078253038580A-
   651 00000275 0A00               
   652                                  fmt_dquote:
   653 00000277 2200                    	db `\"\0`
   654                                  fmt_string_char:
   655 00000279 256300                          db `%c\0`
   656                                  fmt_string_char_7:
   657 0000027C 5C6100                          db `\\a\0`
   658                                  fmt_string_char_8:
   659 0000027F 5C6200                          db `\\b\0`
   660                                  fmt_string_char_9:
   661 00000282 5C7400                          db `\\t\0`
   662                                  fmt_string_char_10:
   663 00000285 5C6E00                          db `\\n\0`
   664                                  fmt_string_char_11:
   665 00000288 5C7600                          db `\\v\0`
   666                                  fmt_string_char_12:
   667 0000028B 5C6600                          db `\\f\0`
   668                                  fmt_string_char_13:
   669 0000028E 5C7200                          db `\\r\0`
   670                                  fmt_string_char_34:
   671 00000291 5C2200                          db `\\"\0`
   672                                  fmt_string_char_92:
   673 00000294 5C5C00                          db `\\\\\0`
   674                                  fmt_string_char_hex:
   675 00000297 5C7825583B00                    db `\\x%X;\0`
   676                                  
   677                                  section .text
   678                                  
   679                                  print_sexpr:
   680                                  	ENTER
    33 000006A3 C8000000            <1>  enter 0, 0
    34 000006A7 4883E4F0            <1>  and rsp, ~15
   681 000006AB 8A07                    	mov al, byte [rdi]
   682 000006AD 3C00                    	cmp al, T_void
   683 000006AF 744D                    	je .Lvoid
   684 000006B1 3C01                    	cmp al, T_nil
   685 000006B3 7458                    	je .Lnil
   686 000006B5 3C09                    	cmp al, T_boolean_false
   687 000006B7 7463                    	je .Lboolean_false
   688 000006B9 3C0A                    	cmp al, T_boolean_true
   689 000006BB 746E                    	je .Lboolean_true
   690 000006BD 3C02                    	cmp al, T_char
   691 000006BF 7479                    	je .Lchar
   692 000006C1 3C04                    	cmp al, T_symbol
   693 000006C3 0F84BB010000            	je .Lsymbol
   694 000006C9 3C21                    	cmp al, T_pair
   695 000006CB 0F84D6010000            	je .Lpair
   696 000006D1 3C22                    	cmp al, T_vector
   697 000006D3 0F849F020000            	je .Lvector
   698 000006D9 3C05                    	cmp al, T_closure
   699 000006DB 0F8489010000            	je .Lclosure
   700 000006E1 3C12                    	cmp al, T_real
   701 000006E3 0F8430030000            	je .Lreal
   702 000006E9 3C11                    	cmp al, T_rational
   703 000006EB 0F8456030000            	je .Lrational
   704 000006F1 3C03                    	cmp al, T_string
   705 000006F3 0F848F030000            	je .Lstring
   706                                  
   707 000006F9 E9C7040000              	jmp .Lunknown_sexpr_type
   708                                  
   709                                  .Lvoid:
   710 000006FE 48BF-                   	mov rdi, fmt_void
   710 00000700 [7C01000000000000] 
   711 00000708 E9F5040000              	jmp .Lemit
   712                                  
   713                                  .Lnil:
   714 0000070D 48BF-                   	mov rdi, fmt_nil
   714 0000070F [8401000000000000] 
   715 00000717 E9E6040000              	jmp .Lemit
   716                                  
   717                                  .Lboolean_false:
   718 0000071C 48BF-                   	mov rdi, fmt_boolean_false
   718 0000071E [8701000000000000] 
   719 00000726 E9D7040000              	jmp .Lemit
   720                                  
   721                                  .Lboolean_true:
   722 0000072B 48BF-                   	mov rdi, fmt_boolean_true
   722 0000072D [8A01000000000000] 
   723 00000735 E9C8040000              	jmp .Lemit
   724                                  
   725                                  .Lchar:
   726 0000073A 8A4701                  	mov al, byte [rdi + 1]
   727 0000073D 3C20                    	cmp al, ' '
   728 0000073F 7E28                    	jle .Lchar_whitespace
   729 00000741 3C5C                    	cmp al, 92 		; backslash
   730 00000743 0F847C000000            	je .Lchar_backslash
   731 00000749 3C22                    	cmp al, '"'
   732 0000074B 0F8483000000            	je .Lchar_dquote
   733 00000751 4825FF000000            	and rax, 255
   734 00000757 48BF-                   	mov rdi, fmt_char_simple
   734 00000759 [9501000000000000] 
   735 00000761 4889C6                  	mov rsi, rax
   736 00000764 E999040000              	jmp .Lemit
   737                                  
   738                                  .Lchar_whitespace:
   739 00000769 3C00                    	cmp al, 0
   740 0000076B 7476                    	je .Lchar_null
   741 0000076D 3C07                    	cmp al, 7
   742 0000076F 0F847D000000            	je .Lchar_bell
   743 00000775 3C08                    	cmp al, 8
   744 00000777 0F8484000000            	je .Lchar_backspace
   745 0000077D 3C09                    	cmp al, 9
   746 0000077F 0F848B000000            	je .Lchar_tab
   747 00000785 3C0A                    	cmp al, 10
   748 00000787 0F8492000000            	je .Lchar_newline
   749 0000078D 3C0C                    	cmp al, 12
   750 0000078F 0F8499000000            	je .Lchar_formfeed
   751 00000795 3C0D                    	cmp al, 13
   752 00000797 0F84A0000000            	je .Lchar_return
   753 0000079D 3C1B                    	cmp al, 27
   754 0000079F 0F84A7000000            	je .Lchar_escape
   755 000007A5 4825FF000000            	and rax, 255
   756 000007AB 3C20                    	cmp al, ' '
   757 000007AD 0F84A8000000            	je .Lchar_space
   758 000007B3 48BF-                   	mov rdi, fmt_char_hex
   758 000007B5 [E101000000000000] 
   759 000007BD 4889C6                  	mov rsi, rax
   760 000007C0 E93D040000              	jmp .Lemit	
   761                                  
   762                                  .Lchar_backslash:
   763 000007C5 48BF-                   	mov rdi, fmt_char_backslash
   763 000007C7 [8D01000000000000] 
   764 000007CF E92E040000              	jmp .Lemit
   765                                  
   766                                  .Lchar_dquote:
   767 000007D4 48BF-                   	mov rdi, fmt_char_dquote
   767 000007D6 [9101000000000000] 
   768 000007DE E91F040000              	jmp .Lemit
   769                                  
   770                                  .Lchar_null:
   771 000007E3 48BF-                   	mov rdi, fmt_char_null
   771 000007E5 [9A01000000000000] 
   772 000007ED E910040000              	jmp .Lemit
   773                                  
   774                                  .Lchar_bell:
   775 000007F2 48BF-                   	mov rdi, fmt_char_bell
   775 000007F4 [A001000000000000] 
   776 000007FC E901040000              	jmp .Lemit
   777                                  
   778                                  .Lchar_backspace:
   779 00000801 48BF-                   	mov rdi, fmt_char_backspace
   779 00000803 [A701000000000000] 
   780 0000080B E9F2030000              	jmp .Lemit
   781                                  
   782                                  .Lchar_tab:
   783 00000810 48BF-                   	mov rdi, fmt_char_tab
   783 00000812 [B301000000000000] 
   784 0000081A E9E3030000              	jmp .Lemit
   785                                  
   786                                  .Lchar_newline:
   787 0000081F 48BF-                   	mov rdi, fmt_char_newline
   787 00000821 [B901000000000000] 
   788 00000829 E9D4030000              	jmp .Lemit
   789                                  
   790                                  .Lchar_formfeed:
   791 0000082E 48BF-                   	mov rdi, fmt_char_formfeed
   791 00000830 [C301000000000000] 
   792 00000838 E9C5030000              	jmp .Lemit
   793                                  
   794                                  .Lchar_return:
   795 0000083D 48BF-                   	mov rdi, fmt_char_return
   795 0000083F [CA01000000000000] 
   796 00000847 E9B6030000              	jmp .Lemit
   797                                  
   798                                  .Lchar_escape:
   799 0000084C 48BF-                   	mov rdi, fmt_char_escape
   799 0000084E [D301000000000000] 
   800 00000856 E9A7030000              	jmp .Lemit
   801                                  
   802                                  .Lchar_space:
   803 0000085B 48BF-                   	mov rdi, fmt_char_space
   803 0000085D [D901000000000000] 
   804 00000865 E998030000              	jmp .Lemit
   805                                  
   806                                  .Lclosure:
   807 0000086A 4889FE                  	mov rsi, qword rdi
   808 0000086D 48BF-                   	mov rdi, fmt_closure
   808 0000086F [E901000000000000] 
   809 00000877 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   810 0000087B 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   811 0000087F E97E030000              	jmp .Lemit
   812                                  
   813                                  .Lsymbol:
   814 00000884 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   815 00000888 BE01000000              	mov rsi, 1		 ; size = 1 byte
   816 0000088D 488B5701                	mov rdx, qword [rdi + 1] ; length
   817 00000891 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   818 00000895 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   819 0000089D E8(00000000)            	call fwrite
   820 000008A2 E970030000              	jmp .Lend
   821                                  	
   822                                  .Lpair:
   823 000008A7 57                      	push rdi
   824 000008A8 48BF-                   	mov rdi, fmt_lparen
   824 000008AA [1502000000000000] 
   825 000008B2 B800000000              	mov rax, 0
   826                                          ENTER
    33 000008B7 C8000000            <1>  enter 0, 0
    34 000008BB 4883E4F0            <1>  and rsp, ~15
   827 000008BF E8(00000000)            	call printf
   828                                          LEAVE
    38 000008C4 C9                  <1>  leave
   829 000008C5 488B3C24                	mov rdi, qword [rsp] 	; pair
   830 000008C9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   831 000008CD E8D1FDFFFF              	call print_sexpr
   832 000008D2 5F                      	pop rdi 		; pair
   833 000008D3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   834                                  .Lcdr:
   835 000008D7 8A07                    	mov al, byte [rdi]
   836 000008D9 3C01                    	cmp al, T_nil
   837 000008DB 7447                    	je .Lcdr_nil
   838 000008DD 3C21                    	cmp al, T_pair
   839 000008DF 7462                    	je .Lcdr_pair
   840 000008E1 57                      	push rdi
   841 000008E2 48BF-                   	mov rdi, fmt_dotted_pair
   841 000008E4 [1702000000000000] 
   842 000008EC B800000000              	mov rax, 0
   843                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   844 000008F9 E8(00000000)            	call printf
   845                                  	LEAVE
    38 000008FE C9                  <1>  leave
   846 000008FF 5F                      	pop rdi
   847 00000900 E89EFDFFFF              	call print_sexpr
   848 00000905 48BF-                   	mov rdi, fmt_rparen
   848 00000907 [1B02000000000000] 
   849 0000090F B800000000              	mov rax, 0
   850                                  	ENTER
    33 00000914 C8000000            <1>  enter 0, 0
    34 00000918 4883E4F0            <1>  and rsp, ~15
   851 0000091C E8(00000000)            	call printf
   852                                  	LEAVE
    38 00000921 C9                  <1>  leave
   853                                  	LEAVE
    38 00000922 C9                  <1>  leave
   854 00000923 C3                      	ret
   855                                  
   856                                  .Lcdr_nil:
   857 00000924 48BF-                   	mov rdi, fmt_rparen
   857 00000926 [1B02000000000000] 
   858 0000092E B800000000              	mov rax, 0
   859                                  	ENTER
    33 00000933 C8000000            <1>  enter 0, 0
    34 00000937 4883E4F0            <1>  and rsp, ~15
   860 0000093B E8(00000000)            	call printf
   861                                  	LEAVE
    38 00000940 C9                  <1>  leave
   862                                  	LEAVE
    38 00000941 C9                  <1>  leave
   863 00000942 C3                      	ret
   864                                  
   865                                  .Lcdr_pair:
   866 00000943 57                      	push rdi
   867 00000944 48BF-                   	mov rdi, fmt_space
   867 00000946 [1D02000000000000] 
   868 0000094E B800000000              	mov rax, 0
   869                                  	ENTER
    33 00000953 C8000000            <1>  enter 0, 0
    34 00000957 4883E4F0            <1>  and rsp, ~15
   870 0000095B E8(00000000)            	call printf
   871                                  	LEAVE
    38 00000960 C9                  <1>  leave
   872 00000961 488B3C24                	mov rdi, qword [rsp]
   873 00000965 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   874 00000969 E835FDFFFF              	call print_sexpr
   875 0000096E 5F                      	pop rdi
   876 0000096F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   877 00000973 E95FFFFFFF              	jmp .Lcdr
   878                                  
   879                                  .Lvector:
   880 00000978 488B4701                	mov rax, qword [rdi + 1] ; length
   881 0000097C 4883F800                	cmp rax, 0
   882 00000980 0F8484000000            	je .Lvector_empty
   883 00000986 57                      	push rdi
   884 00000987 48BF-                   	mov rdi, fmt_vector
   884 00000989 [2302000000000000] 
   885 00000991 B800000000              	mov rax, 0
   886                                  	ENTER
    33 00000996 C8000000            <1>  enter 0, 0
    34 0000099A 4883E4F0            <1>  and rsp, ~15
   887 0000099E E8(00000000)            	call printf
   888                                  	LEAVE
    38 000009A3 C9                  <1>  leave
   889 000009A4 488B3C24                	mov rdi, qword [rsp]
   890 000009A8 FF7701                  	push qword [rdi + 1]
   891 000009AB 6A01                    	push 1
   892 000009AD 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   893 000009B1 E8EDFCFFFF              	call print_sexpr
   894                                  .Lvector_loop:
   895                                  	; [rsp] index
   896                                  	; [rsp + 8*1] limit
   897                                  	; [rsp + 8*2] vector
   898 000009B6 488B0424                	mov rax, qword [rsp]
   899 000009BA 483B442408              	cmp rax, qword [rsp + 8*1]
   900 000009BF 7436                    	je .Lvector_end
   901 000009C1 48BF-                   	mov rdi, fmt_space
   901 000009C3 [1D02000000000000] 
   902 000009CB B800000000              	mov rax, 0
   903                                  	ENTER
    33 000009D0 C8000000            <1>  enter 0, 0
    34 000009D4 4883E4F0            <1>  and rsp, ~15
   904 000009D8 E8(00000000)            	call printf
   905                                  	LEAVE
    38 000009DD C9                  <1>  leave
   906 000009DE 488B0424                	mov rax, qword [rsp]
   907 000009E2 488B5C2410              	mov rbx, qword [rsp + 8*2]
   908 000009E7 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   909 000009EC E8B2FCFFFF              	call print_sexpr
   910 000009F1 48FF0424                	inc qword [rsp]
   911 000009F5 EBBF                    	jmp .Lvector_loop
   912                                  
   913                                  .Lvector_end:
   914 000009F7 4883C418                	add rsp, 8*3
   915 000009FB 48BF-                   	mov rdi, fmt_rparen
   915 000009FD [1B02000000000000] 
   916 00000A05 E9F8010000              	jmp .Lemit	
   917                                  
   918                                  .Lvector_empty:
   919 00000A0A 48BF-                   	mov rdi, fmt_empty_vector
   919 00000A0C [1F02000000000000] 
   920 00000A14 E9E9010000              	jmp .Lemit
   921                                  
   922                                  .Lreal:
   923 00000A19 FF7701                  	push qword [rdi + 1]
   924 00000A1C F20F100424              	movsd xmm0, qword [rsp]
   925 00000A21 4883C408                	add rsp, 8*1
   926 00000A25 48BF-                   	mov rdi, fmt_real
   926 00000A27 [2602000000000000] 
   927 00000A2F B801000000              	mov rax, 1
   928                                  	ENTER
    33 00000A34 C8000000            <1>  enter 0, 0
    34 00000A38 4883E4F0            <1>  and rsp, ~15
   929 00000A3C E8(00000000)            	call printf
   930                                  	LEAVE
    38 00000A41 C9                  <1>  leave
   931 00000A42 E9D0010000              	jmp .Lend
   932                                  
   933                                  .Lrational:
   934 00000A47 488B7701                	mov rsi, qword [rdi + 1]
   935 00000A4B 488B5709                	mov rdx, qword [rdi + 1 + 8]
   936 00000A4F 4883FE00                	cmp rsi, 0
   937 00000A53 7415                    	je .Lrat_zero
   938 00000A55 4883FA01                	cmp rdx, 1
   939 00000A59 741E                    	je .Lrat_int
   940 00000A5B 48BF-                   	mov rdi, fmt_fraction
   940 00000A5D [2902000000000000] 
   941 00000A65 E998010000              	jmp .Lemit
   942                                  
   943                                  .Lrat_zero:
   944 00000A6A 48BF-                   	mov rdi, fmt_zero
   944 00000A6C [3102000000000000] 
   945 00000A74 E989010000              	jmp .Lemit
   946                                  
   947                                  .Lrat_int:
   948 00000A79 48BF-                   	mov rdi, fmt_int
   948 00000A7B [3302000000000000] 
   949 00000A83 E97A010000              	jmp .Lemit
   950                                  
   951                                  .Lstring:
   952 00000A88 488D4709                	lea rax, [rdi + 1 + 8]
   953 00000A8C 50                      	push rax
   954 00000A8D FF7701                  	push qword [rdi + 1]
   955 00000A90 48BF-                   	mov rdi, fmt_dquote
   955 00000A92 [7702000000000000] 
   956 00000A9A B800000000              	mov rax, 0
   957                                  	ENTER
    33 00000A9F C8000000            <1>  enter 0, 0
    34 00000AA3 4883E4F0            <1>  and rsp, ~15
   958 00000AA7 E8(00000000)            	call printf
   959                                  	LEAVE
    38 00000AAC C9                  <1>  leave
   960                                  .Lstring_loop:
   961                                  	; qword [rsp]: limit
   962                                  	; qword [rsp + 8*1]: char *
   963 00000AAD 48833C2400              	cmp qword [rsp], 0
   964 00000AB2 0F84FD000000            	je .Lstring_end
   965 00000AB8 488B442408              	mov rax, qword [rsp + 8*1]
   966 00000ABD 8A00                    	mov al, byte [rax]
   967 00000ABF 4825FF000000            	and rax, 255
   968 00000AC5 3C07                    	cmp al, 7
   969 00000AC7 7468                            je .Lstring_char_7
   970 00000AC9 3C08                            cmp al, 8
   971 00000ACB 7470                            je .Lstring_char_8
   972 00000ACD 3C09                            cmp al, 9
   973 00000ACF 7478                            je .Lstring_char_9
   974 00000AD1 3C0A                            cmp al, 10
   975 00000AD3 0F847C000000                    je .Lstring_char_10
   976 00000AD9 3C0B                            cmp al, 11
   977 00000ADB 0F8480000000                    je .Lstring_char_11
   978 00000AE1 3C0C                            cmp al, 12
   979 00000AE3 0F8484000000                    je .Lstring_char_12
   980 00000AE9 3C0D                            cmp al, 13
   981 00000AEB 0F8488000000                    je .Lstring_char_13
   982 00000AF1 3C22                            cmp al, 34
   983 00000AF3 0F848C000000                    je .Lstring_char_34
   984 00000AF9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   986 00000AFB 3C20                            cmp al, ' '
   987 00000AFD 0F8CA0000000                    jl .Lstring_char_hex
   988 00000B03 48BF-                           mov rdi, fmt_string_char
   988 00000B05 [7902000000000000] 
   989 00000B0D 4889C6                          mov rsi, rax
   990                                  .Lstring_char_emit:
   991 00000B10 B800000000                      mov rax, 0
   992                                          ENTER
    33 00000B15 C8000000            <1>  enter 0, 0
    34 00000B19 4883E4F0            <1>  and rsp, ~15
   993 00000B1D E8(00000000)                    call printf
   994                                          LEAVE
    38 00000B22 C9                  <1>  leave
   995 00000B23 48FF0C24                        dec qword [rsp]
   996 00000B27 48FF442408                      inc qword [rsp + 8*1]
   997 00000B2C E97CFFFFFF                      jmp .Lstring_loop
   998                                  
   999                                  .Lstring_char_7:
  1000 00000B31 48BF-                           mov rdi, fmt_string_char_7
  1000 00000B33 [7C02000000000000] 
  1001 00000B3B EBD3                            jmp .Lstring_char_emit
  1002                                  
  1003                                  .Lstring_char_8:
  1004 00000B3D 48BF-                           mov rdi, fmt_string_char_8
  1004 00000B3F [7F02000000000000] 
  1005 00000B47 EBC7                            jmp .Lstring_char_emit
  1006                                          
  1007                                  .Lstring_char_9:
  1008 00000B49 48BF-                           mov rdi, fmt_string_char_9
  1008 00000B4B [8202000000000000] 
  1009 00000B53 EBBB                            jmp .Lstring_char_emit
  1010                                  
  1011                                  .Lstring_char_10:
  1012 00000B55 48BF-                           mov rdi, fmt_string_char_10
  1012 00000B57 [8502000000000000] 
  1013 00000B5F EBAF                            jmp .Lstring_char_emit
  1014                                  
  1015                                  .Lstring_char_11:
  1016 00000B61 48BF-                           mov rdi, fmt_string_char_11
  1016 00000B63 [8802000000000000] 
  1017 00000B6B EBA3                            jmp .Lstring_char_emit
  1018                                  
  1019                                  .Lstring_char_12:
  1020 00000B6D 48BF-                           mov rdi, fmt_string_char_12
  1020 00000B6F [8B02000000000000] 
  1021 00000B77 EB97                            jmp .Lstring_char_emit
  1022                                  
  1023                                  .Lstring_char_13:
  1024 00000B79 48BF-                           mov rdi, fmt_string_char_13
  1024 00000B7B [8E02000000000000] 
  1025 00000B83 EB8B                            jmp .Lstring_char_emit
  1026                                  
  1027                                  .Lstring_char_34:
  1028 00000B85 48BF-                           mov rdi, fmt_string_char_34
  1028 00000B87 [9102000000000000] 
  1029 00000B8F E97CFFFFFF                      jmp .Lstring_char_emit
  1030                                  
  1031                                  .Lstring_char_92:
  1032 00000B94 48BF-                           mov rdi, fmt_string_char_92
  1032 00000B96 [9402000000000000] 
  1033 00000B9E E96DFFFFFF                      jmp .Lstring_char_emit
  1034                                  
  1035                                  .Lstring_char_hex:
  1036 00000BA3 48BF-                           mov rdi, fmt_string_char_hex
  1036 00000BA5 [9702000000000000] 
  1037 00000BAD 4889C6                          mov rsi, rax
  1038 00000BB0 E95BFFFFFF                      jmp .Lstring_char_emit        
  1039                                  
  1040                                  .Lstring_end:
  1041 00000BB5 4883C410                	add rsp, 8 * 2
  1042 00000BB9 48BF-                   	mov rdi, fmt_dquote
  1042 00000BBB [7702000000000000] 
  1043 00000BC3 EB3D                    	jmp .Lemit
  1044                                  
  1045                                  .Lunknown_sexpr_type:
  1046 00000BC5 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1046 00000BC7 [3702000000000000] 
  1047 00000BCF 4825FF000000            	and rax, 255
  1048 00000BD5 4889C2                  	mov rdx, rax
  1049 00000BD8 4889F9                  	mov rcx, rdi
  1050 00000BDB 488B3C25[00000000]      	mov rdi, qword [stderr]
  1051 00000BE3 B800000000              	mov rax, 0
  1052                                  	ENTER
    33 00000BE8 C8000000            <1>  enter 0, 0
    34 00000BEC 4883E4F0            <1>  and rsp, ~15
  1053 00000BF0 E8(00000000)            	call fprintf
  1054                                  	LEAVE
    38 00000BF5 C9                  <1>  leave
  1055 00000BF6 48C7C0FFFFFFFF          	mov rax, -1
  1056 00000BFD E8(00000000)            	call exit
  1057                                  
  1058                                  .Lemit:
  1059 00000C02 B800000000              	mov rax, 0
  1060                                  	ENTER
    33 00000C07 C8000000            <1>  enter 0, 0
    34 00000C0B 4883E4F0            <1>  and rsp, ~15
  1061 00000C0F E8(00000000)            	call printf
  1062                                  	LEAVE
    38 00000C14 C9                  <1>  leave
  1063 00000C15 EB00                    	jmp .Lend
  1064                                  
  1065                                  .Lend:
  1066                                  	LEAVE
    38 00000C17 C9                  <1>  leave
  1067 00000C18 C3                      	ret
  1068                                  
  1069                                  ;;; rdi: address of free variable
  1070                                  ;;; rsi: address of code-pointer
  1071                                  bind_primitive:
  1072                                          ENTER
    33 00000C19 C8000000            <1>  enter 0, 0
    34 00000C1D 4883E4F0            <1>  and rsp, ~15
  1073 00000C21 57                              push rdi
  1074 00000C22 BF11000000                      mov rdi, (1 + 8 + 8)
  1075 00000C27 E85CFAFFFF                      call malloc
  1076 00000C2C 5F                              pop rdi
  1077 00000C2D C60005                          mov byte [rax], T_closure
  1078 00000C30 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1079 00000C38 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1080 00000C3C 488907                          mov qword [rdi], rax
  1081                                          LEAVE
    38 00000C3F C9                  <1>  leave
  1082 00000C40 C3                              ret
  1083                                  
  1084                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1085                                  L_code_ptr_bin_apply:
  1086 00000C41 C8000000                        enter 0, 0
  1087                                          ;finding the list's length
  1088 00000C45 4831C9                          xor rcx, rcx ;0
  1089 00000C48 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
  1090                                          assert_pair(rax)
    42 00000C4C 803821              <1>  cmp byte [%1], %2
    43 00000C4F 0F8515120000        <1>  jne L_error_incorrect_type
  1091 00000C55 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
  1092                                          my_loop1:
  1093 00000C59 4881FB[01000000]                        cmp rbx, sob_nil ;if nill
  1094 00000C60 7417                                    je my_loop_end1 ;jmp end
  1095 00000C62 48FFC1                                  inc rcx 
  1096 00000C65 53                                      push rbx ;insrting val to stack
  1097                                                  assert_pair(rax)
    42 00000C66 803821              <1>  cmp byte [%1], %2
    43 00000C69 0F85FB110000        <1>  jne L_error_incorrect_type
  1098 00000C6F 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
  1099 00000C73 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
  1100 00000C77 EBE0                                    jmp my_loop1
  1101                                          my_loop_end1:
  1102                                  
  1103                                          ;TODO: ecx = 0 ?
  1104                                  
  1105                                          ;make values in the opposite order:
  1106                                          ;1.pushing all argument one more time in the right order
  1107 00000C79 4889CB                          mov rbx, rcx ;count-up
  1108 00000C7C B900000000                      mov rcx, 0 
  1109 00000C81 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
  1110                                          my_loop2:
  1111 00000C84 4839D9                                  cmp rcx, rbx ; if rcx = n
  1112 00000C87 740A                                    je my_loop_end2 ;then: jump to the end
  1113 00000C89 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
  1114 00000C8D 50                                      push rax
  1115 00000C8E 48FFC1                                  inc rcx
  1116 00000C91 EBF1                                    jmp my_loop2
  1117                                          my_loop_end2:
  1118                                          ;2.overwriting element above by element below but in correct order
  1119 00000C93 488D5306                        lea rdx, [rbx + 6] ;nubmer of *qwords* we need to skip
  1120 00000C97 48C1E203                        shl rdx, 3 ;nubmer of *bytes* we need to skip
  1121 00000C9B 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
  1122 00000C9F 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
  1123 00000CA3 4C8B5510                        mov r10, qword [rbp + 8 * 2] ; save lex-env
  1124 00000CA7 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
  1125 00000CAB B900000000                      mov rcx, 0
  1126                                          my_loop3:
  1127 00000CB0 4839D9                                  cmp rcx, rbx ;if rcx = n
  1128 00000CB3 7414                                    je my_loop_end3 ;then: jump to the end
  1129 00000CB5 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
  1130 00000CB9 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
  1131 00000CBD 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
  1132 00000CC0 4883C408                                add rsp, 8 ;pop arg we used
  1133 00000CC4 48FFC1                                  inc rcx 
  1134 00000CC7 EBE7                                    jmp my_loop3
  1135                                          my_loop_end3:
  1136 00000CC9 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
  1137 00000CCD 4883C418                        add rsp, 8 * 3 ; pop old-rbp, return-address, le-ap
  1138 00000CD1 51                              push rcx ;push number of arguments
  1139 00000CD2 4152                            push r10 ; push lex-env
  1140 00000CD4 57                              push rdi ; push old ret-add
  1141 00000CD5 4889F5                          mov rbp, rsi ;rbp = old-rbp
  1142 00000CD8 4889EC                          mov rsp, rbp; the part of LEAVE we need
  1143 00000CDB 41FFE0                          jmp r8 ; fun to apply
  1144                                  	
  1145                                  L_code_ptr_is_null:
  1146                                          ENTER
    33 00000CDE C8000000            <1>  enter 0, 0
    34 00000CE2 4883E4F0            <1>  and rsp, ~15
  1147 00000CE6 48837D1801                      cmp COUNT, 1
  1148 00000CEB 0F85A5100000                    jne L_error_arg_count_1
  1149 00000CF1 488B4520                        mov rax, PARAM(0)
  1150 00000CF5 803801                          cmp byte [rax], T_nil
  1151 00000CF8 750C                            jne .L_false
  1152 00000CFA 48B8-                           mov rax, sob_boolean_true
  1152 00000CFC [0300000000000000] 
  1153 00000D04 EB0A                            jmp .L_end
  1154                                  .L_false:
  1155 00000D06 48B8-                           mov rax, sob_boolean_false
  1155 00000D08 [0200000000000000] 
  1156                                  .L_end:
  1157                                          LEAVE
    38 00000D10 C9                  <1>  leave
  1158 00000D11 C21800                          ret AND_KILL_FRAME(1)
  1159                                  
  1160                                  L_code_ptr_is_pair:
  1161                                          ENTER
    33 00000D14 C8000000            <1>  enter 0, 0
    34 00000D18 4883E4F0            <1>  and rsp, ~15
  1162 00000D1C 48837D1801                      cmp COUNT, 1
  1163 00000D21 0F856F100000                    jne L_error_arg_count_1
  1164 00000D27 488B4520                        mov rax, PARAM(0)
  1165 00000D2B 803821                          cmp byte [rax], T_pair
  1166 00000D2E 750C                            jne .L_false
  1167 00000D30 48B8-                           mov rax, sob_boolean_true
  1167 00000D32 [0300000000000000] 
  1168 00000D3A EB0A                            jmp .L_end
  1169                                  .L_false:
  1170 00000D3C 48B8-                           mov rax, sob_boolean_false
  1170 00000D3E [0200000000000000] 
  1171                                  .L_end:
  1172                                          LEAVE
    38 00000D46 C9                  <1>  leave
  1173 00000D47 C21800                          ret AND_KILL_FRAME(1)
  1174                                          
  1175                                  L_code_ptr_is_void:
  1176                                          ENTER
    33 00000D4A C8000000            <1>  enter 0, 0
    34 00000D4E 4883E4F0            <1>  and rsp, ~15
  1177 00000D52 48837D1801                      cmp COUNT, 1
  1178 00000D57 0F8539100000                    jne L_error_arg_count_1
  1179 00000D5D 488B4520                        mov rax, PARAM(0)
  1180 00000D61 803800                          cmp byte [rax], T_void
  1181 00000D64 750C                            jne .L_false
  1182 00000D66 48B8-                           mov rax, sob_boolean_true
  1182 00000D68 [0300000000000000] 
  1183 00000D70 EB0A                            jmp .L_end
  1184                                  .L_false:
  1185 00000D72 48B8-                           mov rax, sob_boolean_false
  1185 00000D74 [0200000000000000] 
  1186                                  .L_end:
  1187                                          LEAVE
    38 00000D7C C9                  <1>  leave
  1188 00000D7D C21800                          ret AND_KILL_FRAME(1)
  1189                                  
  1190                                  L_code_ptr_is_char:
  1191                                          ENTER
    33 00000D80 C8000000            <1>  enter 0, 0
    34 00000D84 4883E4F0            <1>  and rsp, ~15
  1192 00000D88 48837D1801                      cmp COUNT, 1
  1193 00000D8D 0F8503100000                    jne L_error_arg_count_1
  1194 00000D93 488B4520                        mov rax, PARAM(0)
  1195 00000D97 803802                          cmp byte [rax], T_char
  1196 00000D9A 750C                            jne .L_false
  1197 00000D9C 48B8-                           mov rax, sob_boolean_true
  1197 00000D9E [0300000000000000] 
  1198 00000DA6 EB0A                            jmp .L_end
  1199                                  .L_false:
  1200 00000DA8 48B8-                           mov rax, sob_boolean_false
  1200 00000DAA [0200000000000000] 
  1201                                  .L_end:
  1202                                          LEAVE
    38 00000DB2 C9                  <1>  leave
  1203 00000DB3 C21800                          ret AND_KILL_FRAME(1)
  1204                                  
  1205                                  L_code_ptr_is_string:
  1206                                          ENTER
    33 00000DB6 C8000000            <1>  enter 0, 0
    34 00000DBA 4883E4F0            <1>  and rsp, ~15
  1207 00000DBE 48837D1801                      cmp COUNT, 1
  1208 00000DC3 0F85CD0F0000                    jne L_error_arg_count_1
  1209 00000DC9 488B4520                        mov rax, PARAM(0)
  1210 00000DCD 803803                          cmp byte [rax], T_string
  1211 00000DD0 750C                            jne .L_false
  1212 00000DD2 48B8-                           mov rax, sob_boolean_true
  1212 00000DD4 [0300000000000000] 
  1213 00000DDC EB0A                            jmp .L_end
  1214                                  .L_false:
  1215 00000DDE 48B8-                           mov rax, sob_boolean_false
  1215 00000DE0 [0200000000000000] 
  1216                                  .L_end:
  1217                                          LEAVE
    38 00000DE8 C9                  <1>  leave
  1218 00000DE9 C21800                          ret AND_KILL_FRAME(1)
  1219                                  
  1220                                  L_code_ptr_is_symbol:
  1221                                          ENTER
    33 00000DEC C8000000            <1>  enter 0, 0
    34 00000DF0 4883E4F0            <1>  and rsp, ~15
  1222 00000DF4 48837D1801                      cmp COUNT, 1
  1223 00000DF9 0F85970F0000                    jne L_error_arg_count_1
  1224 00000DFF 488B4520                        mov rax, PARAM(0)
  1225 00000E03 803804                          cmp byte [rax], T_symbol
  1226 00000E06 750C                            jne .L_false
  1227 00000E08 48B8-                           mov rax, sob_boolean_true
  1227 00000E0A [0300000000000000] 
  1228 00000E12 EB0A                            jmp .L_end
  1229                                  .L_false:
  1230 00000E14 48B8-                           mov rax, sob_boolean_false
  1230 00000E16 [0200000000000000] 
  1231                                  .L_end:
  1232                                          LEAVE
    38 00000E1E C9                  <1>  leave
  1233 00000E1F C21800                          ret AND_KILL_FRAME(1)
  1234                                  
  1235                                  L_code_ptr_is_vector:
  1236                                          ENTER
    33 00000E22 C8000000            <1>  enter 0, 0
    34 00000E26 4883E4F0            <1>  and rsp, ~15
  1237 00000E2A 48837D1801                      cmp COUNT, 1
  1238 00000E2F 0F85610F0000                    jne L_error_arg_count_1
  1239 00000E35 488B4520                        mov rax, PARAM(0)
  1240 00000E39 803822                          cmp byte [rax], T_vector
  1241 00000E3C 750C                            jne .L_false
  1242 00000E3E 48B8-                           mov rax, sob_boolean_true
  1242 00000E40 [0300000000000000] 
  1243 00000E48 EB0A                            jmp .L_end
  1244                                  .L_false:
  1245 00000E4A 48B8-                           mov rax, sob_boolean_false
  1245 00000E4C [0200000000000000] 
  1246                                  .L_end:
  1247                                          LEAVE
    38 00000E54 C9                  <1>  leave
  1248 00000E55 C21800                          ret AND_KILL_FRAME(1)
  1249                                  
  1250                                  L_code_ptr_is_closure:
  1251                                          ENTER
    33 00000E58 C8000000            <1>  enter 0, 0
    34 00000E5C 4883E4F0            <1>  and rsp, ~15
  1252 00000E60 48837D1801                      cmp COUNT, 1
  1253 00000E65 0F852B0F0000                    jne L_error_arg_count_1
  1254 00000E6B 488B4520                        mov rax, PARAM(0)
  1255 00000E6F 803805                          cmp byte [rax], T_closure
  1256 00000E72 750C                            jne .L_false
  1257 00000E74 48B8-                           mov rax, sob_boolean_true
  1257 00000E76 [0300000000000000] 
  1258 00000E7E EB0A                            jmp .L_end
  1259                                  .L_false:
  1260 00000E80 48B8-                           mov rax, sob_boolean_false
  1260 00000E82 [0200000000000000] 
  1261                                  .L_end:
  1262                                          LEAVE
    38 00000E8A C9                  <1>  leave
  1263 00000E8B C21800                          ret AND_KILL_FRAME(1)
  1264                                  
  1265                                  L_code_ptr_is_real:
  1266                                          ENTER
    33 00000E8E C8000000            <1>  enter 0, 0
    34 00000E92 4883E4F0            <1>  and rsp, ~15
  1267 00000E96 48837D1801                      cmp COUNT, 1
  1268 00000E9B 0F85F50E0000                    jne L_error_arg_count_1
  1269 00000EA1 488B4520                        mov rax, PARAM(0)
  1270 00000EA5 803812                          cmp byte [rax], T_real
  1271 00000EA8 750C                            jne .L_false
  1272 00000EAA 48B8-                           mov rax, sob_boolean_true
  1272 00000EAC [0300000000000000] 
  1273 00000EB4 EB0A                            jmp .L_end
  1274                                  .L_false:
  1275 00000EB6 48B8-                           mov rax, sob_boolean_false
  1275 00000EB8 [0200000000000000] 
  1276                                  .L_end:
  1277                                          LEAVE
    38 00000EC0 C9                  <1>  leave
  1278 00000EC1 C21800                          ret AND_KILL_FRAME(1)
  1279                                  
  1280                                  L_code_ptr_is_rational:
  1281                                          ENTER
    33 00000EC4 C8000000            <1>  enter 0, 0
    34 00000EC8 4883E4F0            <1>  and rsp, ~15
  1282 00000ECC 48837D1801                      cmp COUNT, 1
  1283 00000ED1 0F85BF0E0000                    jne L_error_arg_count_1
  1284 00000ED7 488B4520                        mov rax, PARAM(0)
  1285 00000EDB 803811                          cmp byte [rax], T_rational
  1286 00000EDE 750C                            jne .L_false
  1287 00000EE0 48B8-                           mov rax, sob_boolean_true
  1287 00000EE2 [0300000000000000] 
  1288 00000EEA EB0A                            jmp .L_end
  1289                                  .L_false:
  1290 00000EEC 48B8-                           mov rax, sob_boolean_false
  1290 00000EEE [0200000000000000] 
  1291                                  .L_end:
  1292                                          LEAVE
    38 00000EF6 C9                  <1>  leave
  1293 00000EF7 C21800                          ret AND_KILL_FRAME(1)
  1294                                  
  1295                                  L_code_ptr_is_boolean:
  1296                                          ENTER
    33 00000EFA C8000000            <1>  enter 0, 0
    34 00000EFE 4883E4F0            <1>  and rsp, ~15
  1297 00000F02 48837D1801                      cmp COUNT, 1
  1298 00000F07 0F85890E0000                    jne L_error_arg_count_1
  1299 00000F0D 488B4520                        mov rax, PARAM(0)
  1300 00000F11 8A18                            mov bl, byte [rax]
  1301 00000F13 80E308                          and bl, T_boolean
  1302 00000F16 740C                            je .L_false
  1303 00000F18 48B8-                           mov rax, sob_boolean_true
  1303 00000F1A [0300000000000000] 
  1304 00000F22 EB0A                            jmp .L_end
  1305                                  .L_false:
  1306 00000F24 48B8-                           mov rax, sob_boolean_false
  1306 00000F26 [0200000000000000] 
  1307                                  .L_end:
  1308                                          LEAVE
    38 00000F2E C9                  <1>  leave
  1309 00000F2F C21800                          ret AND_KILL_FRAME(1)
  1310                                          
  1311                                  L_code_ptr_is_number:
  1312                                          ENTER
    33 00000F32 C8000000            <1>  enter 0, 0
    34 00000F36 4883E4F0            <1>  and rsp, ~15
  1313 00000F3A 48837D1801                      cmp COUNT, 1
  1314 00000F3F 0F85510E0000                    jne L_error_arg_count_1
  1315 00000F45 488B4520                        mov rax, PARAM(0)
  1316 00000F49 8A18                            mov bl, byte [rax]
  1317 00000F4B 80E310                          and bl, T_number
  1318 00000F4E 740C                            je .L_false
  1319 00000F50 48B8-                           mov rax, sob_boolean_true
  1319 00000F52 [0300000000000000] 
  1320 00000F5A EB0A                            jmp .L_end
  1321                                  .L_false:
  1322 00000F5C 48B8-                           mov rax, sob_boolean_false
  1322 00000F5E [0200000000000000] 
  1323                                  .L_end:
  1324                                          LEAVE
    38 00000F66 C9                  <1>  leave
  1325 00000F67 C21800                          ret AND_KILL_FRAME(1)
  1326                                          
  1327                                  L_code_ptr_is_collection:
  1328                                          ENTER
    33 00000F6A C8000000            <1>  enter 0, 0
    34 00000F6E 4883E4F0            <1>  and rsp, ~15
  1329 00000F72 48837D1801                      cmp COUNT, 1
  1330 00000F77 0F85190E0000                    jne L_error_arg_count_1
  1331 00000F7D 488B4520                        mov rax, PARAM(0)
  1332 00000F81 8A18                            mov bl, byte [rax]
  1333 00000F83 80E320                          and bl, T_collection
  1334 00000F86 740C                            je .L_false
  1335 00000F88 48B8-                           mov rax, sob_boolean_true
  1335 00000F8A [0300000000000000] 
  1336 00000F92 EB0A                            jmp .L_end
  1337                                  .L_false:
  1338 00000F94 48B8-                           mov rax, sob_boolean_false
  1338 00000F96 [0200000000000000] 
  1339                                  .L_end:
  1340                                          LEAVE
    38 00000F9E C9                  <1>  leave
  1341 00000F9F C21800                          ret AND_KILL_FRAME(1)
  1342                                  
  1343                                  L_code_ptr_cons:
  1344                                          ENTER
    33 00000FA2 C8000000            <1>  enter 0, 0
    34 00000FA6 4883E4F0            <1>  and rsp, ~15
  1345 00000FAA 48837D1802                      cmp COUNT, 2
  1346 00000FAF 0F85160E0000                    jne L_error_arg_count_2
  1347 00000FB5 BF11000000                      mov rdi, (1 + 8 + 8)
  1348 00000FBA E8C9F6FFFF                      call malloc
  1349 00000FBF C60021                          mov byte [rax], T_pair
  1350 00000FC2 488B5D20                        mov rbx, PARAM(0)
  1351 00000FC6 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1352 00000FCA 488B5D28                        mov rbx, PARAM(1)
  1353 00000FCE 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1354                                          LEAVE
    38 00000FD2 C9                  <1>  leave
  1355 00000FD3 C22000                          ret AND_KILL_FRAME(2)
  1356                                  
  1357                                  L_code_ptr_display_sexpr:
  1358                                          ENTER
    33 00000FD6 C8000000            <1>  enter 0, 0
    34 00000FDA 4883E4F0            <1>  and rsp, ~15
  1359 00000FDE 48837D1801                      cmp COUNT, 1
  1360 00000FE3 0F85AD0D0000                    jne L_error_arg_count_1
  1361 00000FE9 488B7D20                        mov rdi, PARAM(0)
  1362 00000FED E8B1F6FFFF                      call print_sexpr
  1363 00000FF2 48B8-                           mov rax, sob_void
  1363 00000FF4 [0000000000000000] 
  1364                                          LEAVE
    38 00000FFC C9                  <1>  leave
  1365 00000FFD C21800                          ret AND_KILL_FRAME(1)
  1366                                  
  1367                                  L_code_ptr_write_char:
  1368                                          ENTER
    33 00001000 C8000000            <1>  enter 0, 0
    34 00001004 4883E4F0            <1>  and rsp, ~15
  1369 00001008 48837D1801                      cmp COUNT, 1
  1370 0000100D 0F85830D0000                    jne L_error_arg_count_1
  1371 00001013 488B4520                        mov rax, PARAM(0)
  1372                                          assert_char(rax)
    42 00001017 803802              <1>  cmp byte [%1], %2
    43 0000101A 0F854A0E0000        <1>  jne L_error_incorrect_type
  1373 00001020 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1374 00001023 4825FF000000                    and rax, 255
  1375 00001029 48BF-                           mov rdi, fmt_char
  1375 0000102B [9D02000000000000] 
  1376 00001033 4889C6                          mov rsi, rax
  1377 00001036 B800000000                      mov rax, 0
  1378                                  	ENTER
    33 0000103B C8000000            <1>  enter 0, 0
    34 0000103F 4883E4F0            <1>  and rsp, ~15
  1379 00001043 E8(00000000)                    call printf
  1380                                  	LEAVE
    38 00001048 C9                  <1>  leave
  1381 00001049 48B8-                           mov rax, sob_void
  1381 0000104B [0000000000000000] 
  1382                                          LEAVE
    38 00001053 C9                  <1>  leave
  1383 00001054 C21800                          ret AND_KILL_FRAME(1)
  1384                                  
  1385                                  L_code_ptr_car:
  1386                                          ENTER
    33 00001057 C8000000            <1>  enter 0, 0
    34 0000105B 4883E4F0            <1>  and rsp, ~15
  1387 0000105F 48837D1801                      cmp COUNT, 1
  1388 00001064 0F852C0D0000                    jne L_error_arg_count_1
  1389 0000106A 488B4520                        mov rax, PARAM(0)
  1390                                          assert_pair(rax)
    42 0000106E 803821              <1>  cmp byte [%1], %2
    43 00001071 0F85F30D0000        <1>  jne L_error_incorrect_type
  1391 00001077 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1392                                          LEAVE
    38 0000107B C9                  <1>  leave
  1393 0000107C C21800                          ret AND_KILL_FRAME(1)
  1394                                          
  1395                                  L_code_ptr_cdr:
  1396                                          ENTER
    33 0000107F C8000000            <1>  enter 0, 0
    34 00001083 4883E4F0            <1>  and rsp, ~15
  1397 00001087 48837D1801                      cmp COUNT, 1
  1398 0000108C 0F85040D0000                    jne L_error_arg_count_1
  1399 00001092 488B4520                        mov rax, PARAM(0)
  1400                                          assert_pair(rax)
    42 00001096 803821              <1>  cmp byte [%1], %2
    43 00001099 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1401 0000109F 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1402                                          LEAVE
    38 000010A3 C9                  <1>  leave
  1403 000010A4 C21800                          ret AND_KILL_FRAME(1)
  1404                                          
  1405                                  L_code_ptr_string_length:
  1406                                          ENTER
    33 000010A7 C8000000            <1>  enter 0, 0
    34 000010AB 4883E4F0            <1>  and rsp, ~15
  1407 000010AF 48837D1801                      cmp COUNT, 1
  1408 000010B4 0F85DC0C0000                    jne L_error_arg_count_1
  1409 000010BA 488B4520                        mov rax, PARAM(0)
  1410                                          assert_string(rax)
    42 000010BE 803803              <1>  cmp byte [%1], %2
    43 000010C1 0F85A30D0000        <1>  jne L_error_incorrect_type
  1411 000010C7 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1412 000010CB E83A0C0000                      call make_integer
  1413                                          LEAVE
    38 000010D0 C9                  <1>  leave
  1414 000010D1 C21800                          ret AND_KILL_FRAME(1)
  1415                                  
  1416                                  L_code_ptr_vector_length:
  1417                                          ENTER
    33 000010D4 C8000000            <1>  enter 0, 0
    34 000010D8 4883E4F0            <1>  and rsp, ~15
  1418 000010DC 48837D1801                      cmp COUNT, 1
  1419 000010E1 0F85AF0C0000                    jne L_error_arg_count_1
  1420 000010E7 488B4520                        mov rax, PARAM(0)
  1421                                          assert_vector(rax)
    42 000010EB 803822              <1>  cmp byte [%1], %2
    43 000010EE 0F85760D0000        <1>  jne L_error_incorrect_type
  1422 000010F4 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1423 000010F8 E80D0C0000                      call make_integer
  1424                                          LEAVE
    38 000010FD C9                  <1>  leave
  1425 000010FE C21800                          ret AND_KILL_FRAME(1)
  1426                                  
  1427                                  L_code_ptr_real_to_integer:
  1428                                          ENTER
    33 00001101 C8000000            <1>  enter 0, 0
    34 00001105 4883E4F0            <1>  and rsp, ~15
  1429 00001109 48837D1801                      cmp COUNT, 1
  1430 0000110E 0F85820C0000                    jne L_error_arg_count_1
  1431 00001114 488B5D20                        mov rbx, PARAM(0)
  1432                                          assert_real(rbx)
    42 00001118 803B12              <1>  cmp byte [%1], %2
    43 0000111B 0F85490D0000        <1>  jne L_error_incorrect_type
  1433 00001121 F20F104301                      movsd xmm0, qword [rbx + 1]
  1434 00001126 F2480F2CF8                      cvttsd2si rdi, xmm0
  1435 0000112B E8DA0B0000                      call make_integer
  1436                                          LEAVE
    38 00001130 C9                  <1>  leave
  1437 00001131 C21800                          ret AND_KILL_FRAME(1)
  1438                                  
  1439                                  L_code_ptr_exit:
  1440                                          ENTER
    33 00001134 C8000000            <1>  enter 0, 0
    34 00001138 4883E4F0            <1>  and rsp, ~15
  1441 0000113C 48837D1800                      cmp COUNT, 0
  1442 00001141 0F851A0C0000                    jne L_error_arg_count_0
  1443 00001147 B800000000                      mov rax, 0
  1444 0000114C E8(00000000)                    call exit
  1445                                  
  1446                                  L_code_ptr_integer_to_real:
  1447                                          ENTER
    33 00001151 C8000000            <1>  enter 0, 0
    34 00001155 4883E4F0            <1>  and rsp, ~15
  1448 00001159 48837D1801                      cmp COUNT, 1
  1449 0000115E 0F85320C0000                    jne L_error_arg_count_1
  1450 00001164 488B4520                        mov rax, PARAM(0)
  1451                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001168 803811              <2>  cmp byte [%1], %2
    43 0000116B 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 00001171 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001176 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1452 0000117C FF7001                          push qword [rax + 1]
  1453 0000117F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1454 00001185 E8640B0000                      call make_real
  1455                                          LEAVE
    38 0000118A C9                  <1>  leave
  1456 0000118B C21800                          ret AND_KILL_FRAME(1)
  1457                                  
  1458                                  L_code_ptr_rational_to_real:
  1459                                          ENTER
    33 0000118E C8000000            <1>  enter 0, 0
    34 00001192 4883E4F0            <1>  and rsp, ~15
  1460 00001196 48837D1801                      cmp COUNT, 1
  1461 0000119B 0F85F50B0000                    jne L_error_arg_count_1
  1462 000011A1 488B4520                        mov rax, PARAM(0)
  1463                                          assert_rational(rax)
    42 000011A5 803811              <1>  cmp byte [%1], %2
    43 000011A8 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1464 000011AE FF7001                          push qword [rax + 1]
  1465 000011B1 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1466 000011B7 FF7009                          push qword [rax + 1 + 8]
  1467 000011BA F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1468 000011C0 F20F5EC1                        divsd xmm0, xmm1
  1469 000011C4 E8250B0000                      call make_real
  1470                                          LEAVE
    38 000011C9 C9                  <1>  leave
  1471 000011CA C21800                          ret AND_KILL_FRAME(1)
  1472                                  
  1473                                  L_code_ptr_char_to_integer:
  1474                                          ENTER
    33 000011CD C8000000            <1>  enter 0, 0
    34 000011D1 4883E4F0            <1>  and rsp, ~15
  1475 000011D5 48837D1801                      cmp COUNT, 1
  1476 000011DA 0F85B60B0000                    jne L_error_arg_count_1
  1477 000011E0 488B4520                        mov rax, PARAM(0)
  1478                                          assert_char(rax)
    42 000011E4 803802              <1>  cmp byte [%1], %2
    43 000011E7 0F857D0C0000        <1>  jne L_error_incorrect_type
  1479 000011ED 8A4001                          mov al, byte [rax + 1]
  1480 000011F0 4825FF000000                    and rax, 255
  1481 000011F6 4889C7                          mov rdi, rax
  1482 000011F9 E80C0B0000                      call make_integer
  1483                                          LEAVE
    38 000011FE C9                  <1>  leave
  1484 000011FF C21800                          ret AND_KILL_FRAME(1)
  1485                                  
  1486                                  L_code_ptr_integer_to_char:
  1487                                          ENTER
    33 00001202 C8000000            <1>  enter 0, 0
    34 00001206 4883E4F0            <1>  and rsp, ~15
  1488 0000120A 48837D1801                      cmp COUNT, 1
  1489 0000120F 0F85810B0000                    jne L_error_arg_count_1
  1490 00001215 488B4520                        mov rax, PARAM(0)
  1491                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001219 803811              <2>  cmp byte [%1], %2
    43 0000121C 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001222 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001227 0F853D0C0000        <1>  jne L_error_incorrect_type
  1492 0000122D 488B5801                        mov rbx, qword [rax + 1]
  1493 00001231 4883FB00                        cmp rbx, 0
  1494 00001235 0F8EF50A0000                    jle L_error_integer_range
  1495 0000123B 4881FB00010000                  cmp rbx, 256
  1496 00001242 0F8DE80A0000                    jge L_error_integer_range
  1497 00001248 BF02000000                      mov rdi, (1 + 1)
  1498 0000124D E836F4FFFF                      call malloc
  1499 00001252 C60002                          mov byte [rax], T_char
  1500 00001255 885801                          mov byte [rax + 1], bl
  1501                                          LEAVE
    38 00001258 C9                  <1>  leave
  1502 00001259 C21800                          ret AND_KILL_FRAME(1)
  1503                                  
  1504                                  L_code_ptr_trng:
  1505                                          ENTER
    33 0000125C C8000000            <1>  enter 0, 0
    34 00001260 4883E4F0            <1>  and rsp, ~15
  1506 00001264 48837D1800                      cmp COUNT, 0
  1507 00001269 0F85F20A0000                    jne L_error_arg_count_0
  1508 0000126F 480FC7F7                        rdrand rdi
  1509 00001273 48D1EF                          shr rdi, 1
  1510 00001276 E88F0A0000                      call make_integer
  1511                                          LEAVE
    38 0000127B C9                  <1>  leave
  1512 0000127C C21000                          ret AND_KILL_FRAME(0)
  1513                                  
  1514                                  L_code_ptr_is_zero:
  1515                                          ENTER
    33 0000127F C8000000            <1>  enter 0, 0
    34 00001283 4883E4F0            <1>  and rsp, ~15
  1516 00001287 48837D1801                      cmp COUNT, 1
  1517 0000128C 0F85040B0000                    jne L_error_arg_count_1
  1518 00001292 488B4520                        mov rax, PARAM(0)
  1519 00001296 803811                          cmp byte [rax], T_rational
  1520 00001299 740A                            je .L_rational
  1521 0000129B 803812                          cmp byte [rax], T_real
  1522 0000129E 740E                            je .L_real
  1523 000012A0 E9C50B0000                      jmp L_error_incorrect_type
  1524                                  .L_rational:
  1525 000012A5 4883780100                      cmp qword [rax + 1], 0
  1526 000012AA 7420                            je .L_zero
  1527 000012AC EB12                            jmp .L_not_zero
  1528                                  .L_real:
  1529 000012AE 660FEFC0                        pxor xmm0, xmm0
  1530 000012B2 FF7001                          push qword [rax + 1]
  1531 000012B5 F20F100C24                      movsd xmm1, qword [rsp]
  1532 000012BA 660F2EC1                        ucomisd xmm0, xmm1
  1533 000012BE 740C                            je .L_zero
  1534                                  .L_not_zero:
  1535 000012C0 48B8-                           mov rax, sob_boolean_false
  1535 000012C2 [0200000000000000] 
  1536 000012CA EB0A                            jmp .L_end
  1537                                  .L_zero:
  1538 000012CC 48B8-                           mov rax, sob_boolean_true
  1538 000012CE [0300000000000000] 
  1539                                  .L_end:
  1540                                          LEAVE
    38 000012D6 C9                  <1>  leave
  1541 000012D7 C21800                          ret AND_KILL_FRAME(1)
  1542                                  
  1543                                  L_code_ptr_is_integer:
  1544                                          ENTER
    33 000012DA C8000000            <1>  enter 0, 0
    34 000012DE 4883E4F0            <1>  and rsp, ~15
  1545 000012E2 48837D1801                      cmp COUNT, 1
  1546 000012E7 0F85A90A0000                    jne L_error_arg_count_1
  1547 000012ED 488B4520                        mov rax, PARAM(0)
  1548 000012F1 803811                          cmp byte [rax], T_rational
  1549 000012F4 7513                            jne .L_false
  1550 000012F6 4883780901                      cmp qword [rax + 1 + 8], 1
  1551 000012FB 750C                            jne .L_false
  1552 000012FD 48B8-                           mov rax, sob_boolean_true
  1552 000012FF [0300000000000000] 
  1553 00001307 EB0A                            jmp .L_exit
  1554                                  .L_false:
  1555 00001309 48B8-                           mov rax, sob_boolean_false
  1555 0000130B [0200000000000000] 
  1556                                  .L_exit:
  1557                                          LEAVE
    38 00001313 C9                  <1>  leave
  1558 00001314 C21800                          ret AND_KILL_FRAME(1)
  1559                                  
  1560                                  L_code_ptr_raw_bin_add_rr:
  1561                                          ENTER
    33 00001317 C8000000            <1>  enter 0, 0
    34 0000131B 4883E4F0            <1>  and rsp, ~15
  1562 0000131F 48837D1802                      cmp COUNT, 2
  1563 00001324 0F85A10A0000                    jne L_error_arg_count_2
  1564 0000132A 488B5D20                        mov rbx, PARAM(0)
  1565                                          assert_real(rbx)
    42 0000132E 803B12              <1>  cmp byte [%1], %2
    43 00001331 0F85330B0000        <1>  jne L_error_incorrect_type
  1566 00001337 488B4D28                        mov rcx, PARAM(1)
  1567                                          assert_real(rcx)
    42 0000133B 803912              <1>  cmp byte [%1], %2
    43 0000133E 0F85260B0000        <1>  jne L_error_incorrect_type
  1568 00001344 F20F104301                      movsd xmm0, qword [rbx + 1]
  1569 00001349 F20F104901                      movsd xmm1, qword [rcx + 1]
  1570 0000134E F20F58C1                        addsd xmm0, xmm1
  1571 00001352 E897090000                      call make_real
  1572                                          LEAVE
    38 00001357 C9                  <1>  leave
  1573 00001358 C22000                          ret AND_KILL_FRAME(2)
  1574                                  
  1575                                  L_code_ptr_raw_bin_sub_rr:
  1576                                          ENTER
    33 0000135B C8000000            <1>  enter 0, 0
    34 0000135F 4883E4F0            <1>  and rsp, ~15
  1577 00001363 48837D1802                      cmp COUNT, 2
  1578 00001368 0F855D0A0000                    jne L_error_arg_count_2
  1579 0000136E 488B5D20                        mov rbx, PARAM(0)
  1580                                          assert_real(rbx)
    42 00001372 803B12              <1>  cmp byte [%1], %2
    43 00001375 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1581 0000137B 488B4D28                        mov rcx, PARAM(1)
  1582                                          assert_real(rcx)
    42 0000137F 803912              <1>  cmp byte [%1], %2
    43 00001382 0F85E20A0000        <1>  jne L_error_incorrect_type
  1583 00001388 F20F104301                      movsd xmm0, qword [rbx + 1]
  1584 0000138D F20F104901                      movsd xmm1, qword [rcx + 1]
  1585 00001392 F20F5CC1                        subsd xmm0, xmm1
  1586 00001396 E853090000                      call make_real
  1587                                          LEAVE
    38 0000139B C9                  <1>  leave
  1588 0000139C C22000                          ret AND_KILL_FRAME(2)
  1589                                  
  1590                                  L_code_ptr_raw_bin_mul_rr:
  1591                                          ENTER
    33 0000139F C8000000            <1>  enter 0, 0
    34 000013A3 4883E4F0            <1>  and rsp, ~15
  1592 000013A7 48837D1802                      cmp COUNT, 2
  1593 000013AC 0F85190A0000                    jne L_error_arg_count_2
  1594 000013B2 488B5D20                        mov rbx, PARAM(0)
  1595                                          assert_real(rbx)
    42 000013B6 803B12              <1>  cmp byte [%1], %2
    43 000013B9 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1596 000013BF 488B4D28                        mov rcx, PARAM(1)
  1597                                          assert_real(rcx)
    42 000013C3 803912              <1>  cmp byte [%1], %2
    43 000013C6 0F859E0A0000        <1>  jne L_error_incorrect_type
  1598 000013CC F20F104301                      movsd xmm0, qword [rbx + 1]
  1599 000013D1 F20F104901                      movsd xmm1, qword [rcx + 1]
  1600 000013D6 F20F59C1                        mulsd xmm0, xmm1
  1601 000013DA E80F090000                      call make_real
  1602                                          LEAVE
    38 000013DF C9                  <1>  leave
  1603 000013E0 C22000                          ret AND_KILL_FRAME(2)
  1604                                  
  1605                                  L_code_ptr_raw_bin_div_rr:
  1606                                          ENTER
    33 000013E3 C8000000            <1>  enter 0, 0
    34 000013E7 4883E4F0            <1>  and rsp, ~15
  1607 000013EB 48837D1802                      cmp COUNT, 2
  1608 000013F0 0F85D5090000                    jne L_error_arg_count_2
  1609 000013F6 488B5D20                        mov rbx, PARAM(0)
  1610                                          assert_real(rbx)
    42 000013FA 803B12              <1>  cmp byte [%1], %2
    43 000013FD 0F85670A0000        <1>  jne L_error_incorrect_type
  1611 00001403 488B4D28                        mov rcx, PARAM(1)
  1612                                          assert_real(rcx)
    42 00001407 803912              <1>  cmp byte [%1], %2
    43 0000140A 0F855A0A0000        <1>  jne L_error_incorrect_type
  1613 00001410 F20F104301                      movsd xmm0, qword [rbx + 1]
  1614 00001415 F20F104901                      movsd xmm1, qword [rcx + 1]
  1615 0000141A 660FEFD2                        pxor xmm2, xmm2
  1616 0000141E 660F2ECA                        ucomisd xmm1, xmm2
  1617 00001422 0F84730A0000                    je L_error_division_by_zero
  1618 00001428 F20F5EC1                        divsd xmm0, xmm1
  1619 0000142C E8BD080000                      call make_real
  1620                                          LEAVE
    38 00001431 C9                  <1>  leave
  1621 00001432 C22000                          ret AND_KILL_FRAME(2)
  1622                                  
  1623                                  L_code_ptr_raw_bin_add_qq:
  1624                                          ENTER
    33 00001435 C8000000            <1>  enter 0, 0
    34 00001439 4883E4F0            <1>  and rsp, ~15
  1625 0000143D 48837D1802                      cmp COUNT, 2
  1626 00001442 0F8583090000                    jne L_error_arg_count_2
  1627 00001448 4C8B4520                        mov r8, PARAM(0)
  1628                                          assert_rational(r8)
    42 0000144C 41803811            <1>  cmp byte [%1], %2
    43 00001450 0F85140A0000        <1>  jne L_error_incorrect_type
  1629 00001456 4C8B4D28                        mov r9, PARAM(1)
  1630                                          assert_rational(r9)
    42 0000145A 41803911            <1>  cmp byte [%1], %2
    43 0000145E 0F85060A0000        <1>  jne L_error_incorrect_type
  1631 00001464 498B4001                        mov rax, qword [r8 + 1] ; num1
  1632 00001468 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1633 0000146C 4899                            cqo
  1634 0000146E 48F7EB                          imul rbx
  1635 00001471 4889C6                          mov rsi, rax
  1636 00001474 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1637 00001478 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1638 0000147C 4899                            cqo
  1639 0000147E 48F7EB                          imul rbx
  1640 00001481 4801C6                          add rsi, rax
  1641 00001484 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1642 00001488 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1643 0000148C 4899                            cqo
  1644 0000148E 48F7EB                          imul rbx
  1645 00001491 4889C7                          mov rdi, rax
  1646 00001494 E827010000                      call normalize_rational
  1647                                          LEAVE
    38 00001499 C9                  <1>  leave
  1648 0000149A C22000                          ret AND_KILL_FRAME(2)
  1649                                  
  1650                                  L_code_ptr_raw_bin_sub_qq:
  1651                                          ENTER
    33 0000149D C8000000            <1>  enter 0, 0
    34 000014A1 4883E4F0            <1>  and rsp, ~15
  1652 000014A5 48837D1802                      cmp COUNT, 2
  1653 000014AA 0F851B090000                    jne L_error_arg_count_2
  1654 000014B0 4C8B4520                        mov r8, PARAM(0)
  1655                                          assert_rational(r8)
    42 000014B4 41803811            <1>  cmp byte [%1], %2
    43 000014B8 0F85AC090000        <1>  jne L_error_incorrect_type
  1656 000014BE 4C8B4D28                        mov r9, PARAM(1)
  1657                                          assert_rational(r9)
    42 000014C2 41803911            <1>  cmp byte [%1], %2
    43 000014C6 0F859E090000        <1>  jne L_error_incorrect_type
  1658 000014CC 498B4001                        mov rax, qword [r8 + 1] ; num1
  1659 000014D0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1660 000014D4 4899                            cqo
  1661 000014D6 48F7EB                          imul rbx
  1662 000014D9 4889C6                          mov rsi, rax
  1663 000014DC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1664 000014E0 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1665 000014E4 4899                            cqo
  1666 000014E6 48F7EB                          imul rbx
  1667 000014E9 4829C6                          sub rsi, rax
  1668 000014EC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1669 000014F0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1670 000014F4 4899                            cqo
  1671 000014F6 48F7EB                          imul rbx
  1672 000014F9 4889C7                          mov rdi, rax
  1673 000014FC E8BF000000                      call normalize_rational
  1674                                          LEAVE
    38 00001501 C9                  <1>  leave
  1675 00001502 C22000                          ret AND_KILL_FRAME(2)
  1676                                  
  1677                                  L_code_ptr_raw_bin_mul_qq:
  1678                                          ENTER
    33 00001505 C8000000            <1>  enter 0, 0
    34 00001509 4883E4F0            <1>  and rsp, ~15
  1679 0000150D 48837D1802                      cmp COUNT, 2
  1680 00001512 0F85B3080000                    jne L_error_arg_count_2
  1681 00001518 4C8B4520                        mov r8, PARAM(0)
  1682                                          assert_rational(r8)
    42 0000151C 41803811            <1>  cmp byte [%1], %2
    43 00001520 0F8544090000        <1>  jne L_error_incorrect_type
  1683 00001526 4C8B4D28                        mov r9, PARAM(1)
  1684                                          assert_rational(r9)
    42 0000152A 41803911            <1>  cmp byte [%1], %2
    43 0000152E 0F8536090000        <1>  jne L_error_incorrect_type
  1685 00001534 498B4001                        mov rax, qword [r8 + 1] ; num1
  1686 00001538 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1687 0000153C 4899                            cqo
  1688 0000153E 48F7EB                          imul rbx
  1689 00001541 4889C6                          mov rsi, rax
  1690 00001544 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1691 00001548 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1692 0000154C 4899                            cqo
  1693 0000154E 48F7EB                          imul rbx
  1694 00001551 4889C7                          mov rdi, rax
  1695 00001554 E867000000                      call normalize_rational
  1696                                          LEAVE
    38 00001559 C9                  <1>  leave
  1697 0000155A C22000                          ret AND_KILL_FRAME(2)
  1698                                          
  1699                                  L_code_ptr_raw_bin_div_qq:
  1700                                          ENTER
    33 0000155D C8000000            <1>  enter 0, 0
    34 00001561 4883E4F0            <1>  and rsp, ~15
  1701 00001565 48837D1802                      cmp COUNT, 2
  1702 0000156A 0F855B080000                    jne L_error_arg_count_2
  1703 00001570 4C8B4520                        mov r8, PARAM(0)
  1704                                          assert_rational(r8)
    42 00001574 41803811            <1>  cmp byte [%1], %2
    43 00001578 0F85EC080000        <1>  jne L_error_incorrect_type
  1705 0000157E 4C8B4D28                        mov r9, PARAM(1)
  1706                                          assert_rational(r9)
    42 00001582 41803911            <1>  cmp byte [%1], %2
    43 00001586 0F85DE080000        <1>  jne L_error_incorrect_type
  1707 0000158C 4983790100                      cmp qword [r9 + 1], 0
  1708 00001591 0F8404090000                    je L_error_division_by_zero
  1709 00001597 498B4001                        mov rax, qword [r8 + 1] ; num1
  1710 0000159B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1711 0000159F 4899                            cqo
  1712 000015A1 48F7EB                          imul rbx
  1713 000015A4 4889C6                          mov rsi, rax
  1714 000015A7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1715 000015AB 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1716 000015AF 4899                            cqo
  1717 000015B1 48F7EB                          imul rbx
  1718 000015B4 4889C7                          mov rdi, rax
  1719 000015B7 E804000000                      call normalize_rational
  1720                                          LEAVE
    38 000015BC C9                  <1>  leave
  1721 000015BD C22000                          ret AND_KILL_FRAME(2)
  1722                                          
  1723                                  normalize_rational:
  1724 000015C0 56                              push rsi
  1725 000015C1 57                              push rdi
  1726 000015C2 E839000000                      call gcd
  1727 000015C7 4889C3                          mov rbx, rax
  1728 000015CA 58                              pop rax
  1729 000015CB 4899                            cqo
  1730 000015CD 48F7FB                          idiv rbx
  1731 000015D0 4989C0                          mov r8, rax
  1732 000015D3 58                              pop rax
  1733 000015D4 4899                            cqo
  1734 000015D6 48F7FB                          idiv rbx
  1735 000015D9 4989C1                          mov r9, rax
  1736 000015DC BF11000000                      mov rdi, (1 + 8 + 8)
  1737 000015E1 E8A2F0FFFF                      call malloc
  1738 000015E6 C60011                          mov byte [rax], T_rational
  1739 000015E9 4C894801                        mov qword [rax + 1], r9
  1740 000015ED 4C894009                        mov qword [rax + 1 + 8], r8
  1741 000015F1 C3                              ret
  1742                                  
  1743                                  iabs:
  1744 000015F2 4889F8                          mov rax, rdi
  1745 000015F5 4883F800                        cmp rax, 0
  1746 000015F9 7C01                            jl .Lneg
  1747 000015FB C3                              ret
  1748                                  .Lneg:
  1749 000015FC 48F7D8                          neg rax
  1750 000015FF C3                              ret
  1751                                  
  1752                                  gcd:
  1753 00001600 E8EDFFFFFF                      call iabs
  1754 00001605 4889C3                          mov rbx, rax
  1755 00001608 4889F7                          mov rdi, rsi
  1756 0000160B E8E2FFFFFF                      call iabs
  1757 00001610 4883F800                        cmp rax, 0
  1758 00001614 7502                            jne .L0
  1759 00001616 4893                            xchg rax, rbx
  1760                                  .L0:
  1761 00001618 4883FB00                        cmp rbx, 0
  1762 0000161C 740C                            je .L1
  1763 0000161E 4899                            cqo
  1764 00001620 48F7F3                          div rbx
  1765 00001623 4889D0                          mov rax, rdx
  1766 00001626 4893                            xchg rax, rbx
  1767 00001628 EBEE                            jmp .L0
  1768                                  .L1:
  1769 0000162A C3                              ret
  1770                                  
  1771                                  L_code_ptr_error:
  1772                                          ENTER
    33 0000162B C8000000            <1>  enter 0, 0
    34 0000162F 4883E4F0            <1>  and rsp, ~15
  1773 00001633 48837D1802                      cmp COUNT, 2
  1774 00001638 0F858D070000                    jne L_error_arg_count_2
  1775 0000163E 488B7520                        mov rsi, PARAM(0)
  1776                                          assert_symbol(rsi)
    42 00001642 803E04              <1>  cmp byte [%1], %2
    43 00001645 0F851F080000        <1>  jne L_error_incorrect_type
  1777 0000164B 488B7528                        mov rsi, PARAM(1)
  1778                                          assert_string(rsi)
    42 0000164F 803E03              <1>  cmp byte [%1], %2
    43 00001652 0F8512080000        <1>  jne L_error_incorrect_type
  1779 00001658 48BF-                           mov rdi, fmt_scheme_error_part_1
  1779 0000165A [D503000000000000] 
  1780 00001662 B800000000                      mov rax, 0
  1781                                  	ENTER
    33 00001667 C8000000            <1>  enter 0, 0
    34 0000166B 4883E4F0            <1>  and rsp, ~15
  1782 0000166F E8(00000000)                    call printf
  1783                                  	LEAVE
    38 00001674 C9                  <1>  leave
  1784 00001675 488B7D20                        mov rdi, PARAM(0)
  1785 00001679 E825F0FFFF                      call print_sexpr
  1786 0000167E 48BF-                           mov rdi, fmt_scheme_error_part_2
  1786 00001680 [E903000000000000] 
  1787 00001688 B800000000                      mov rax, 0
  1788                                  	ENTER
    33 0000168D C8000000            <1>  enter 0, 0
    34 00001691 4883E4F0            <1>  and rsp, ~15
  1789 00001695 E8(00000000)                    call printf
  1790                                  	LEAVE
    38 0000169A C9                  <1>  leave
  1791 0000169B 488B4528                        mov rax, PARAM(1)       ; sob_string
  1792 0000169F BE01000000                      mov rsi, 1              ; size = 1 byte
  1793 000016A4 488B5001                        mov rdx, qword [rax + 1] ; length
  1794 000016A8 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1795 000016AC 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1796 000016B4 E8(00000000)                    call fwrite
  1797 000016B9 48BF-                           mov rdi, fmt_scheme_error_part_3
  1797 000016BB [2B04000000000000] 
  1798 000016C3 B800000000                      mov rax, 0
  1799                                  	ENTER
    33 000016C8 C8000000            <1>  enter 0, 0
    34 000016CC 4883E4F0            <1>  and rsp, ~15
  1800 000016D0 E8(00000000)                    call printf
  1801                                  	LEAVE
    38 000016D5 C9                  <1>  leave
  1802 000016D6 48C7C0F7FFFFFF                  mov rax, -9
  1803 000016DD E8(00000000)                    call exit
  1804                                  
  1805                                  L_code_ptr_raw_less_than_rr:
  1806                                          ENTER
    33 000016E2 C8000000            <1>  enter 0, 0
    34 000016E6 4883E4F0            <1>  and rsp, ~15
  1807 000016EA 48837D1802                      cmp COUNT, 2
  1808 000016EF 0F85D6060000                    jne L_error_arg_count_2
  1809 000016F5 488B7520                        mov rsi, PARAM(0)
  1810                                          assert_real(rsi)
    42 000016F9 803E12              <1>  cmp byte [%1], %2
    43 000016FC 0F8568070000        <1>  jne L_error_incorrect_type
  1811 00001702 488B7D28                        mov rdi, PARAM(1)
  1812                                          assert_real(rdi)
    42 00001706 803F12              <1>  cmp byte [%1], %2
    43 00001709 0F855B070000        <1>  jne L_error_incorrect_type
  1813 0000170F F20F104601                      movsd xmm0, qword [rsi + 1]
  1814 00001714 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1815 00001719 660F2FC1                        comisd xmm0, xmm1
  1816 0000171D 730C                            jae .L_false
  1817 0000171F 48B8-                           mov rax, sob_boolean_true
  1817 00001721 [0300000000000000] 
  1818 00001729 EB0A                            jmp .L_exit
  1819                                  .L_false:
  1820 0000172B 48B8-                           mov rax, sob_boolean_false
  1820 0000172D [0200000000000000] 
  1821                                  .L_exit:
  1822                                          LEAVE
    38 00001735 C9                  <1>  leave
  1823 00001736 C22000                          ret AND_KILL_FRAME(2)
  1824                                          
  1825                                  L_code_ptr_raw_less_than_qq:
  1826                                          ENTER
    33 00001739 C8000000            <1>  enter 0, 0
    34 0000173D 4883E4F0            <1>  and rsp, ~15
  1827 00001741 48837D1802                      cmp COUNT, 2
  1828 00001746 0F857F060000                    jne L_error_arg_count_2
  1829 0000174C 488B7520                        mov rsi, PARAM(0)
  1830                                          assert_rational(rsi)
    42 00001750 803E11              <1>  cmp byte [%1], %2
    43 00001753 0F8511070000        <1>  jne L_error_incorrect_type
  1831 00001759 488B7D28                        mov rdi, PARAM(1)
  1832                                          assert_rational(rdi)
    42 0000175D 803F11              <1>  cmp byte [%1], %2
    43 00001760 0F8504070000        <1>  jne L_error_incorrect_type
  1833 00001766 488B4601                        mov rax, qword [rsi + 1] ; num1
  1834 0000176A 4899                            cqo
  1835 0000176C 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1836 00001770 4889C1                          mov rcx, rax
  1837 00001773 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1838 00001777 4899                            cqo
  1839 00001779 48F76F01                        imul qword [rdi + 1]          ; num2
  1840 0000177D 4829C1                          sub rcx, rax
  1841 00001780 7D0C                            jge .L_false
  1842 00001782 48B8-                           mov rax, sob_boolean_true
  1842 00001784 [0300000000000000] 
  1843 0000178C EB0A                            jmp .L_exit
  1844                                  .L_false:
  1845 0000178E 48B8-                           mov rax, sob_boolean_false
  1845 00001790 [0200000000000000] 
  1846                                  .L_exit:
  1847                                          LEAVE
    38 00001798 C9                  <1>  leave
  1848 00001799 C22000                          ret AND_KILL_FRAME(2)
  1849                                  
  1850                                  L_code_ptr_raw_equal_rr:
  1851                                          ENTER
    33 0000179C C8000000            <1>  enter 0, 0
    34 000017A0 4883E4F0            <1>  and rsp, ~15
  1852 000017A4 48837D1802                      cmp COUNT, 2
  1853 000017A9 0F851C060000                    jne L_error_arg_count_2
  1854 000017AF 488B7520                        mov rsi, PARAM(0)
  1855                                          assert_real(rsi)
    42 000017B3 803E12              <1>  cmp byte [%1], %2
    43 000017B6 0F85AE060000        <1>  jne L_error_incorrect_type
  1856 000017BC 488B7D28                        mov rdi, PARAM(1)
  1857                                          assert_real(rdi)
    42 000017C0 803F12              <1>  cmp byte [%1], %2
    43 000017C3 0F85A1060000        <1>  jne L_error_incorrect_type
  1858 000017C9 F20F104601                      movsd xmm0, qword [rsi + 1]
  1859 000017CE F20F104F01                      movsd xmm1, qword [rdi + 1]
  1860 000017D3 660F2FC1                        comisd xmm0, xmm1
  1861 000017D7 750C                            jne .L_false
  1862 000017D9 48B8-                           mov rax, sob_boolean_true
  1862 000017DB [0300000000000000] 
  1863 000017E3 EB0A                            jmp .L_exit
  1864                                  .L_false:
  1865 000017E5 48B8-                           mov rax, sob_boolean_false
  1865 000017E7 [0200000000000000] 
  1866                                  .L_exit:
  1867                                          LEAVE
    38 000017EF C9                  <1>  leave
  1868 000017F0 C22000                          ret AND_KILL_FRAME(2)
  1869                                          
  1870                                  L_code_ptr_raw_equal_qq:
  1871                                          ENTER
    33 000017F3 C8000000            <1>  enter 0, 0
    34 000017F7 4883E4F0            <1>  and rsp, ~15
  1872 000017FB 48837D1802                      cmp COUNT, 2
  1873 00001800 0F85C5050000                    jne L_error_arg_count_2
  1874 00001806 488B7520                        mov rsi, PARAM(0)
  1875                                          assert_rational(rsi)
    42 0000180A 803E11              <1>  cmp byte [%1], %2
    43 0000180D 0F8557060000        <1>  jne L_error_incorrect_type
  1876 00001813 488B7D28                        mov rdi, PARAM(1)
  1877                                          assert_rational(rdi)
    42 00001817 803F11              <1>  cmp byte [%1], %2
    43 0000181A 0F854A060000        <1>  jne L_error_incorrect_type
  1878 00001820 488B4601                        mov rax, qword [rsi + 1] ; num1
  1879 00001824 4899                            cqo
  1880 00001826 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1881 0000182A 4889C1                          mov rcx, rax
  1882 0000182D 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1883 00001831 4899                            cqo
  1884 00001833 48F76F01                        imul qword [rdi + 1]          ; num2
  1885 00001837 4829C1                          sub rcx, rax
  1886 0000183A 750C                            jne .L_false
  1887 0000183C 48B8-                           mov rax, sob_boolean_true
  1887 0000183E [0300000000000000] 
  1888 00001846 EB0A                            jmp .L_exit
  1889                                  .L_false:
  1890 00001848 48B8-                           mov rax, sob_boolean_false
  1890 0000184A [0200000000000000] 
  1891                                  .L_exit:
  1892                                          LEAVE
    38 00001852 C9                  <1>  leave
  1893 00001853 C22000                          ret AND_KILL_FRAME(2)
  1894                                  
  1895                                  L_code_ptr_quotient:
  1896                                          ENTER
    33 00001856 C8000000            <1>  enter 0, 0
    34 0000185A 4883E4F0            <1>  and rsp, ~15
  1897 0000185E 48837D1802                      cmp COUNT, 2
  1898 00001863 0F8562050000                    jne L_error_arg_count_2
  1899 00001869 488B7520                        mov rsi, PARAM(0)
  1900                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000186D 803E11              <2>  cmp byte [%1], %2
    43 00001870 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00001876 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000187B 0F85E9050000        <1>  jne L_error_incorrect_type
  1901 00001881 488B7D28                        mov rdi, PARAM(1)
  1902                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001885 803F11              <2>  cmp byte [%1], %2
    43 00001888 0F85DC050000        <2>  jne L_error_incorrect_type
    48 0000188E 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001893 0F85D1050000        <1>  jne L_error_incorrect_type
  1903 00001899 488B4601                        mov rax, qword [rsi + 1]
  1904 0000189D 488B5F01                        mov rbx, qword [rdi + 1]
  1905 000018A1 4883FB00                        cmp rbx, 0
  1906 000018A5 0F84F0050000                    je L_error_division_by_zero
  1907 000018AB 4899                            cqo
  1908 000018AD 48F7FB                          idiv rbx
  1909 000018B0 4889C7                          mov rdi, rax
  1910 000018B3 E852040000                      call make_integer
  1911                                          LEAVE
    38 000018B8 C9                  <1>  leave
  1912 000018B9 C22000                          ret AND_KILL_FRAME(2)
  1913                                          
  1914                                  L_code_ptr_remainder:
  1915                                          ENTER
    33 000018BC C8000000            <1>  enter 0, 0
    34 000018C0 4883E4F0            <1>  and rsp, ~15
  1916 000018C4 48837D1802                      cmp COUNT, 2
  1917 000018C9 0F85FC040000                    jne L_error_arg_count_2
  1918 000018CF 488B7520                        mov rsi, PARAM(0)
  1919                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018D3 803E11              <2>  cmp byte [%1], %2
    43 000018D6 0F858E050000        <2>  jne L_error_incorrect_type
    48 000018DC 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018E1 0F8583050000        <1>  jne L_error_incorrect_type
  1920 000018E7 488B7D28                        mov rdi, PARAM(1)
  1921                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000018EB 803F11              <2>  cmp byte [%1], %2
    43 000018EE 0F8576050000        <2>  jne L_error_incorrect_type
    48 000018F4 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018F9 0F856B050000        <1>  jne L_error_incorrect_type
  1922 000018FF 488B4601                        mov rax, qword [rsi + 1]
  1923 00001903 488B5F01                        mov rbx, qword [rdi + 1]
  1924 00001907 4883FB00                        cmp rbx, 0
  1925 0000190B 0F848A050000                    je L_error_division_by_zero
  1926 00001911 4899                            cqo
  1927 00001913 48F7FB                          idiv rbx
  1928 00001916 4889D7                          mov rdi, rdx
  1929 00001919 E8EC030000                      call make_integer
  1930                                          LEAVE
    38 0000191E C9                  <1>  leave
  1931 0000191F C22000                          ret AND_KILL_FRAME(2)
  1932                                  
  1933                                  L_code_ptr_set_car:
  1934                                          ENTER
    33 00001922 C8000000            <1>  enter 0, 0
    34 00001926 4883E4F0            <1>  and rsp, ~15
  1935 0000192A 48837D1802                      cmp COUNT, 2
  1936 0000192F 0F8596040000                    jne L_error_arg_count_2
  1937 00001935 488B4520                        mov rax, PARAM(0)
  1938                                          assert_pair(rax)
    42 00001939 803821              <1>  cmp byte [%1], %2
    43 0000193C 0F8528050000        <1>  jne L_error_incorrect_type
  1939 00001942 488B5D28                        mov rbx, PARAM(1)
  1940 00001946 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1941 0000194A 48B8-                           mov rax, sob_void
  1941 0000194C [0000000000000000] 
  1942                                          LEAVE
    38 00001954 C9                  <1>  leave
  1943 00001955 C22000                          ret AND_KILL_FRAME(2)
  1944                                  
  1945                                  L_code_ptr_set_cdr:
  1946                                          ENTER
    33 00001958 C8000000            <1>  enter 0, 0
    34 0000195C 4883E4F0            <1>  and rsp, ~15
  1947 00001960 48837D1802                      cmp COUNT, 2
  1948 00001965 0F8560040000                    jne L_error_arg_count_2
  1949 0000196B 488B4520                        mov rax, PARAM(0)
  1950                                          assert_pair(rax)
    42 0000196F 803821              <1>  cmp byte [%1], %2
    43 00001972 0F85F2040000        <1>  jne L_error_incorrect_type
  1951 00001978 488B5D28                        mov rbx, PARAM(1)
  1952 0000197C 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1953 00001980 48B8-                           mov rax, sob_void
  1953 00001982 [0000000000000000] 
  1954                                          LEAVE
    38 0000198A C9                  <1>  leave
  1955 0000198B C22000                          ret AND_KILL_FRAME(2)
  1956                                  
  1957                                  L_code_ptr_string_ref:
  1958                                          ENTER
    33 0000198E C8000000            <1>  enter 0, 0
    34 00001992 4883E4F0            <1>  and rsp, ~15
  1959 00001996 48837D1802                      cmp COUNT, 2
  1960 0000199B 0F852A040000                    jne L_error_arg_count_2
  1961 000019A1 488B7D20                        mov rdi, PARAM(0)
  1962                                          assert_string(rdi)
    42 000019A5 803F03              <1>  cmp byte [%1], %2
    43 000019A8 0F85BC040000        <1>  jne L_error_incorrect_type
  1963 000019AE 488B7528                        mov rsi, PARAM(1)
  1964                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019B2 803E11              <2>  cmp byte [%1], %2
    43 000019B5 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000019BB 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019C0 0F85A4040000        <1>  jne L_error_incorrect_type
  1965 000019C6 488B5701                        mov rdx, qword [rdi + 1]
  1966 000019CA 488B4E01                        mov rcx, qword [rsi + 1]
  1967 000019CE 4839D1                          cmp rcx, rdx
  1968 000019D1 0F8D59030000                    jge L_error_integer_range
  1969 000019D7 4883F900                        cmp rcx, 0
  1970 000019DB 0F8C4F030000                    jl L_error_integer_range
  1971 000019E1 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1972 000019E5 BF02000000                      mov rdi, 2
  1973 000019EA E899ECFFFF                      call malloc
  1974 000019EF C60002                          mov byte [rax], T_char
  1975 000019F2 885801                          mov byte [rax + 1], bl
  1976                                          LEAVE
    38 000019F5 C9                  <1>  leave
  1977 000019F6 C22000                          ret AND_KILL_FRAME(2)
  1978                                  
  1979                                  L_code_ptr_vector_ref:
  1980                                          ENTER
    33 000019F9 C8000000            <1>  enter 0, 0
    34 000019FD 4883E4F0            <1>  and rsp, ~15
  1981 00001A01 48837D1802                      cmp COUNT, 2
  1982 00001A06 0F85BF030000                    jne L_error_arg_count_2
  1983 00001A0C 488B7D20                        mov rdi, PARAM(0)
  1984                                          assert_vector(rdi)
    42 00001A10 803F22              <1>  cmp byte [%1], %2
    43 00001A13 0F8551040000        <1>  jne L_error_incorrect_type
  1985 00001A19 488B7528                        mov rsi, PARAM(1)
  1986                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A1D 803E11              <2>  cmp byte [%1], %2
    43 00001A20 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001A26 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A2B 0F8539040000        <1>  jne L_error_incorrect_type
  1987 00001A31 488B5701                        mov rdx, qword [rdi + 1]
  1988 00001A35 488B4E01                        mov rcx, qword [rsi + 1]
  1989 00001A39 4839D1                          cmp rcx, rdx
  1990 00001A3C 0F8DEE020000                    jge L_error_integer_range
  1991 00001A42 4883F900                        cmp rcx, 0
  1992 00001A46 0F8CE4020000                    jl L_error_integer_range
  1993 00001A4C 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1994                                          LEAVE
    38 00001A51 C9                  <1>  leave
  1995 00001A52 C22000                          ret AND_KILL_FRAME(2)
  1996                                  
  1997                                  L_code_ptr_vector_set:
  1998                                          ENTER
    33 00001A55 C8000000            <1>  enter 0, 0
    34 00001A59 4883E4F0            <1>  and rsp, ~15
  1999 00001A5D 48837D1803                      cmp COUNT, 3
  2000 00001A62 0F85CD030000                    jne L_error_arg_count_3
  2001 00001A68 488B7D20                        mov rdi, PARAM(0)
  2002                                          assert_vector(rdi)
    42 00001A6C 803F22              <1>  cmp byte [%1], %2
    43 00001A6F 0F85F5030000        <1>  jne L_error_incorrect_type
  2003 00001A75 488B7528                        mov rsi, PARAM(1)
  2004                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A79 803E11              <2>  cmp byte [%1], %2
    43 00001A7C 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001A82 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A87 0F85DD030000        <1>  jne L_error_incorrect_type
  2005 00001A8D 488B5701                        mov rdx, qword [rdi + 1]
  2006 00001A91 488B4E01                        mov rcx, qword [rsi + 1]
  2007 00001A95 4839D1                          cmp rcx, rdx
  2008 00001A98 0F8D92020000                    jge L_error_integer_range
  2009 00001A9E 4883F900                        cmp rcx, 0
  2010 00001AA2 0F8C88020000                    jl L_error_integer_range
  2011 00001AA8 488B4530                        mov rax, PARAM(2)
  2012 00001AAC 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2013 00001AB1 48B8-                           mov rax, sob_void
  2013 00001AB3 [0000000000000000] 
  2014                                          LEAVE
    38 00001ABB C9                  <1>  leave
  2015 00001ABC C22800                          ret AND_KILL_FRAME(3)
  2016                                  
  2017                                  L_code_ptr_string_set:
  2018                                          ENTER
    33 00001ABF C8000000            <1>  enter 0, 0
    34 00001AC3 4883E4F0            <1>  and rsp, ~15
  2019 00001AC7 48837D1803                      cmp COUNT, 3
  2020 00001ACC 0F8563030000                    jne L_error_arg_count_3
  2021 00001AD2 488B7D20                        mov rdi, PARAM(0)
  2022                                          assert_string(rdi)
    42 00001AD6 803F03              <1>  cmp byte [%1], %2
    43 00001AD9 0F858B030000        <1>  jne L_error_incorrect_type
  2023 00001ADF 488B7528                        mov rsi, PARAM(1)
  2024                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001AE3 803E11              <2>  cmp byte [%1], %2
    43 00001AE6 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001AEC 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001AF1 0F8573030000        <1>  jne L_error_incorrect_type
  2025 00001AF7 488B5701                        mov rdx, qword [rdi + 1]
  2026 00001AFB 488B4E01                        mov rcx, qword [rsi + 1]
  2027 00001AFF 4839D1                          cmp rcx, rdx
  2028 00001B02 0F8D28020000                    jge L_error_integer_range
  2029 00001B08 4883F900                        cmp rcx, 0
  2030 00001B0C 0F8C1E020000                    jl L_error_integer_range
  2031 00001B12 488B4530                        mov rax, PARAM(2)
  2032                                          assert_char(rax)
    42 00001B16 803802              <1>  cmp byte [%1], %2
    43 00001B19 0F854B030000        <1>  jne L_error_incorrect_type
  2033 00001B1F 8A4001                          mov al, byte [rax + 1]
  2034 00001B22 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2035 00001B26 48B8-                           mov rax, sob_void
  2035 00001B28 [0000000000000000] 
  2036                                          LEAVE
    38 00001B30 C9                  <1>  leave
  2037 00001B31 C22800                          ret AND_KILL_FRAME(3)
  2038                                  
  2039                                  L_code_ptr_make_vector:
  2040                                          ENTER
    33 00001B34 C8000000            <1>  enter 0, 0
    34 00001B38 4883E4F0            <1>  and rsp, ~15
  2041 00001B3C 48837D1802                      cmp COUNT, 2
  2042 00001B41 0F8584020000                    jne L_error_arg_count_2
  2043 00001B47 488B4D20                        mov rcx, PARAM(0)
  2044                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B4B 803911              <2>  cmp byte [%1], %2
    43 00001B4E 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001B54 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B59 0F850B030000        <1>  jne L_error_incorrect_type
  2045 00001B5F 488B4901                        mov rcx, qword [rcx + 1]
  2046 00001B63 4883F900                        cmp rcx, 0
  2047 00001B67 0F8CC3010000                    jl L_error_integer_range
  2048 00001B6D 488B5528                        mov rdx, PARAM(1)
  2049 00001B71 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2050 00001B79 E80AEBFFFF                      call malloc
  2051 00001B7E C60022                          mov byte [rax], T_vector
  2052 00001B81 48894801                        mov qword [rax + 1], rcx
  2053 00001B85 41B800000000                    mov r8, 0
  2054                                  .L0:
  2055 00001B8B 4939C8                          cmp r8, rcx
  2056 00001B8E 740A                            je .L1
  2057 00001B90 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2058 00001B95 49FFC0                          inc r8
  2059 00001B98 EBF1                            jmp .L0
  2060                                  .L1:
  2061                                          LEAVE
    38 00001B9A C9                  <1>  leave
  2062 00001B9B C22000                          ret AND_KILL_FRAME(2)
  2063                                          
  2064                                  L_code_ptr_make_string:
  2065                                          ENTER
    33 00001B9E C8000000            <1>  enter 0, 0
    34 00001BA2 4883E4F0            <1>  and rsp, ~15
  2066 00001BA6 48837D1802                      cmp COUNT, 2
  2067 00001BAB 0F851A020000                    jne L_error_arg_count_2
  2068 00001BB1 488B4D20                        mov rcx, PARAM(0)
  2069                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001BB5 803911              <2>  cmp byte [%1], %2
    43 00001BB8 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001BBE 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BC3 0F85A1020000        <1>  jne L_error_incorrect_type
  2070 00001BC9 488B4901                        mov rcx, qword [rcx + 1]
  2071 00001BCD 4883F900                        cmp rcx, 0
  2072 00001BD1 0F8C59010000                    jl L_error_integer_range
  2073 00001BD7 488B5528                        mov rdx, PARAM(1)
  2074                                          assert_char(rdx)
    42 00001BDB 803A02              <1>  cmp byte [%1], %2
    43 00001BDE 0F8586020000        <1>  jne L_error_incorrect_type
  2075 00001BE4 8A5201                          mov dl, byte [rdx + 1]
  2076 00001BE7 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2077 00001BEB E898EAFFFF                      call malloc
  2078 00001BF0 C60003                          mov byte [rax], T_string
  2079 00001BF3 48894801                        mov qword [rax + 1], rcx
  2080 00001BF7 41B800000000                    mov r8, 0
  2081                                  .L0:
  2082 00001BFD 4939C8                          cmp r8, rcx
  2083 00001C00 740A                            je .L1
  2084 00001C02 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2085 00001C07 49FFC0                          inc r8
  2086 00001C0A EBF1                            jmp .L0
  2087                                  .L1:
  2088                                          LEAVE
    38 00001C0C C9                  <1>  leave
  2089 00001C0D C22000                          ret AND_KILL_FRAME(2)
  2090                                  
  2091                                  L_code_ptr_numerator:
  2092                                          ENTER
    33 00001C10 C8000000            <1>  enter 0, 0
    34 00001C14 4883E4F0            <1>  and rsp, ~15
  2093 00001C18 48837D1801                      cmp COUNT, 1
  2094 00001C1D 0F8573010000                    jne L_error_arg_count_1
  2095 00001C23 488B4520                        mov rax, PARAM(0)
  2096                                          assert_rational(rax)
    42 00001C27 803811              <1>  cmp byte [%1], %2
    43 00001C2A 0F853A020000        <1>  jne L_error_incorrect_type
  2097 00001C30 488B7801                        mov rdi, qword [rax + 1]
  2098 00001C34 E8D1000000                      call make_integer
  2099                                          LEAVE
    38 00001C39 C9                  <1>  leave
  2100 00001C3A C21800                          ret AND_KILL_FRAME(1)
  2101                                          
  2102                                  L_code_ptr_denominator:
  2103                                          ENTER
    33 00001C3D C8000000            <1>  enter 0, 0
    34 00001C41 4883E4F0            <1>  and rsp, ~15
  2104 00001C45 48837D1801                      cmp COUNT, 1
  2105 00001C4A 0F8546010000                    jne L_error_arg_count_1
  2106 00001C50 488B4520                        mov rax, PARAM(0)
  2107                                          assert_rational(rax)
    42 00001C54 803811              <1>  cmp byte [%1], %2
    43 00001C57 0F850D020000        <1>  jne L_error_incorrect_type
  2108 00001C5D 488B7809                        mov rdi, qword [rax + 1 + 8]
  2109 00001C61 E8A4000000                      call make_integer
  2110                                          LEAVE
    38 00001C66 C9                  <1>  leave
  2111 00001C67 C21800                          ret AND_KILL_FRAME(1)
  2112                                  
  2113                                  L_code_ptr_eq:
  2114                                  	ENTER
    33 00001C6A C8000000            <1>  enter 0, 0
    34 00001C6E 4883E4F0            <1>  and rsp, ~15
  2115 00001C72 48837D1802              	cmp COUNT, 2
  2116 00001C77 0F854E010000            	jne L_error_arg_count_2
  2117 00001C7D 488B7D20                	mov rdi, PARAM(0)
  2118 00001C81 488B7528                	mov rsi, PARAM(1)
  2119 00001C85 4839F7                  	cmp rdi, rsi
  2120 00001C88 744A                    	je .L_eq_true
  2121 00001C8A 8A17                    	mov dl, byte [rdi]
  2122 00001C8C 3A16                    	cmp dl, byte [rsi]
  2123 00001C8E 7550                    	jne .L_eq_false
  2124 00001C90 80FA02                  	cmp dl, T_char
  2125 00001C93 7437                    	je .L_char
  2126 00001C95 80FA04                  	cmp dl, T_symbol
  2127 00001C98 742A                    	je .L_symbol
  2128 00001C9A 80FA12                  	cmp dl, T_real
  2129 00001C9D 741D                    	je .L_real
  2130 00001C9F 80FA11                  	cmp dl, T_rational
  2131 00001CA2 7402                    	je .L_rational
  2132 00001CA4 EB3A                    	jmp .L_eq_false
  2133                                  .L_rational:
  2134 00001CA6 488B4601                	mov rax, qword [rsi + 1]
  2135 00001CAA 483B4701                	cmp rax, qword [rdi + 1]
  2136 00001CAE 7530                    	jne .L_eq_false
  2137 00001CB0 488B4609                	mov rax, qword [rsi + 1 + 8]
  2138 00001CB4 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2139 00001CB8 7526                    	jne .L_eq_false
  2140 00001CBA EB18                    	jmp .L_eq_true
  2141                                  .L_real:
  2142 00001CBC 488B4601                	mov rax, qword [rsi + 1]
  2143 00001CC0 483B4701                	cmp rax, qword [rdi + 1]
  2144                                  .L_symbol:
  2145                                  	; never reached, because symbols are static!
  2146                                  	; but I'm keeping it in case, I'll ever change
  2147                                  	; the implementation
  2148 00001CC4 488B4601                	mov rax, qword [rsi + 1]
  2149 00001CC8 483B4701                	cmp rax, qword [rdi + 1]
  2150                                  .L_char:
  2151 00001CCC 8A5E01                  	mov bl, byte [rsi + 1]
  2152 00001CCF 3A5F01                  	cmp bl, byte [rdi + 1]
  2153 00001CD2 750C                    	jne .L_eq_false
  2154                                  .L_eq_true:
  2155 00001CD4 48B8-                   	mov rax, sob_boolean_true
  2155 00001CD6 [0300000000000000] 
  2156 00001CDE EB0A                    	jmp .L_eq_exit
  2157                                  .L_eq_false:
  2158 00001CE0 48B8-                   	mov rax, sob_boolean_false
  2158 00001CE2 [0200000000000000] 
  2159                                  .L_eq_exit:
  2160                                  	LEAVE
    38 00001CEA C9                  <1>  leave
  2161 00001CEB C22000                  	ret AND_KILL_FRAME(2)
  2162                                  
  2163                                  make_real:
  2164                                          ENTER
    33 00001CEE C8000000            <1>  enter 0, 0
    34 00001CF2 4883E4F0            <1>  and rsp, ~15
  2165 00001CF6 BF09000000                      mov rdi, (1 + 8)
  2166 00001CFB E888E9FFFF                      call malloc
  2167 00001D00 C60012                          mov byte [rax], T_real
  2168 00001D03 F20F114001                      movsd qword [rax + 1], xmm0
  2169                                          LEAVE
    38 00001D08 C9                  <1>  leave
  2170 00001D09 C3                              ret
  2171                                          
  2172                                  make_integer:
  2173                                          ENTER
    33 00001D0A C8000000            <1>  enter 0, 0
    34 00001D0E 4883E4F0            <1>  and rsp, ~15
  2174 00001D12 4889FE                          mov rsi, rdi
  2175 00001D15 BF11000000                      mov rdi, (1 + 8 + 8)
  2176 00001D1A E869E9FFFF                      call malloc
  2177 00001D1F C60011                          mov byte [rax], T_rational
  2178 00001D22 48897001                        mov qword [rax + 1], rsi
  2179 00001D26 48C7400901000000                mov qword [rax + 1 + 8], 1
  2180                                          LEAVE
    38 00001D2E C9                  <1>  leave
  2181 00001D2F C3                              ret
  2182                                          
  2183                                  L_error_integer_range:
  2184 00001D30 488B3C25[00000000]              mov rdi, qword [stderr]
  2185 00001D38 48BE-                           mov rsi, fmt_integer_range
  2185 00001D3A [A203000000000000] 
  2186 00001D42 B800000000                      mov rax, 0
  2187                                  	ENTER
    33 00001D47 C8000000            <1>  enter 0, 0
    34 00001D4B 4883E4F0            <1>  and rsp, ~15
  2188 00001D4F E8(00000000)                    call fprintf
  2189                                  	LEAVE
    38 00001D54 C9                  <1>  leave
  2190 00001D55 48C7C0FBFFFFFF                  mov rax, -5
  2191 00001D5C E8(00000000)                    call exit
  2192                                  
  2193                                  L_error_arg_count_0:
  2194 00001D61 488B3C25[00000000]              mov rdi, qword [stderr]
  2195 00001D69 48BE-                           mov rsi, fmt_arg_count_0
  2195 00001D6B [A002000000000000] 
  2196 00001D73 488B5518                        mov rdx, COUNT
  2197 00001D77 B800000000                      mov rax, 0
  2198                                  	ENTER
    33 00001D7C C8000000            <1>  enter 0, 0
    34 00001D80 4883E4F0            <1>  and rsp, ~15
  2199 00001D84 E8(00000000)                    call fprintf
  2200                                  	LEAVE
    38 00001D89 C9                  <1>  leave
  2201 00001D8A 48C7C0FDFFFFFF                  mov rax, -3
  2202 00001D91 E8(00000000)                    call exit
  2203                                  
  2204                                  L_error_arg_count_1:
  2205 00001D96 488B3C25[00000000]              mov rdi, qword [stderr]
  2206 00001D9E 48BE-                           mov rsi, fmt_arg_count_1
  2206 00001DA0 [C802000000000000] 
  2207 00001DA8 488B5518                        mov rdx, COUNT
  2208 00001DAC B800000000                      mov rax, 0
  2209                                  	ENTER
    33 00001DB1 C8000000            <1>  enter 0, 0
    34 00001DB5 4883E4F0            <1>  and rsp, ~15
  2210 00001DB9 E8(00000000)                    call fprintf
  2211                                  	LEAVE
    38 00001DBE C9                  <1>  leave
  2212 00001DBF 48C7C0FDFFFFFF                  mov rax, -3
  2213 00001DC6 E8(00000000)                    call exit
  2214                                  
  2215                                  L_error_arg_count_2:
  2216 00001DCB 488B3C25[00000000]              mov rdi, qword [stderr]
  2217 00001DD3 48BE-                           mov rsi, fmt_arg_count_2
  2217 00001DD5 [2E03000000000000] 
  2218 00001DDD 488B5518                        mov rdx, COUNT
  2219 00001DE1 B800000000                      mov rax, 0
  2220                                  	ENTER
    33 00001DE6 C8000000            <1>  enter 0, 0
    34 00001DEA 4883E4F0            <1>  and rsp, ~15
  2221 00001DEE E8(00000000)                    call fprintf
  2222                                  	LEAVE
    38 00001DF3 C9                  <1>  leave
  2223 00001DF4 48C7C0FDFFFFFF                  mov rax, -3
  2224 00001DFB E8(00000000)                    call exit
  2225                                  
  2226                                  L_error_arg_count_12:
  2227 00001E00 488B3C25[00000000]              mov rdi, qword [stderr]
  2228 00001E08 48BE-                           mov rsi, fmt_arg_count_12
  2228 00001E0A [EE02000000000000] 
  2229 00001E12 488B5518                        mov rdx, COUNT
  2230 00001E16 B800000000                      mov rax, 0
  2231                                  	ENTER
    33 00001E1B C8000000            <1>  enter 0, 0
    34 00001E1F 4883E4F0            <1>  and rsp, ~15
  2232 00001E23 E8(00000000)                    call fprintf
  2233                                  	LEAVE
    38 00001E28 C9                  <1>  leave
  2234 00001E29 48C7C0FDFFFFFF                  mov rax, -3
  2235 00001E30 E8(00000000)                    call exit
  2236                                  
  2237                                  L_error_arg_count_3:
  2238 00001E35 488B3C25[00000000]              mov rdi, qword [stderr]
  2239 00001E3D 48BE-                           mov rsi, fmt_arg_count_3
  2239 00001E3F [5503000000000000] 
  2240 00001E47 488B5518                        mov rdx, COUNT
  2241 00001E4B B800000000                      mov rax, 0
  2242                                  	ENTER
    33 00001E50 C8000000            <1>  enter 0, 0
    34 00001E54 4883E4F0            <1>  and rsp, ~15
  2243 00001E58 E8(00000000)                    call fprintf
  2244                                  	LEAVE
    38 00001E5D C9                  <1>  leave
  2245 00001E5E 48C7C0FDFFFFFF                  mov rax, -3
  2246 00001E65 E8(00000000)                    call exit
  2247                                          
  2248                                  L_error_incorrect_type:
  2249 00001E6A 488B3C25[00000000]              mov rdi, qword [stderr]
  2250 00001E72 48BE-                           mov rsi, fmt_type
  2250 00001E74 [7E03000000000000] 
  2251 00001E7C B800000000                      mov rax, 0
  2252                                  	ENTER
    33 00001E81 C8000000            <1>  enter 0, 0
    34 00001E85 4883E4F0            <1>  and rsp, ~15
  2253 00001E89 E8(00000000)                    call fprintf
  2254                                  	LEAVE
    38 00001E8E C9                  <1>  leave
  2255 00001E8F 48C7C0FCFFFFFF                  mov rax, -4
  2256 00001E96 E8(00000000)                    call exit
  2257                                  
  2258                                  L_error_division_by_zero:
  2259 00001E9B 488B3C25[00000000]              mov rdi, qword [stderr]
  2260 00001EA3 48BE-                           mov rsi, fmt_division_by_zero
  2260 00001EA5 [BF03000000000000] 
  2261 00001EAD B800000000                      mov rax, 0
  2262                                  	ENTER
    33 00001EB2 C8000000            <1>  enter 0, 0
    34 00001EB6 4883E4F0            <1>  and rsp, ~15
  2263 00001EBA E8(00000000)                    call fprintf
  2264                                  	LEAVE
    38 00001EBF C9                  <1>  leave
  2265 00001EC0 48C7C0F8FFFFFF                  mov rax, -8
  2266 00001EC7 E8(00000000)                    call exit
  2267                                  
  2268                                  section .data
  2269                                  fmt_char:
  2270 0000029D 256300                          db `%c\0`
  2271                                  fmt_arg_count_0:
  2272 000002A0 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2272 000002A9 74696E67207A65726F-
  2272 000002B2 20617267756D656E74-
  2272 000002BB 732E20466F756E6420-
  2272 000002C4 25640A00           
  2273                                  fmt_arg_count_1:
  2274 000002C8 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2274 000002D1 74696E67206F6E6520-
  2274 000002DA 617267756D656E742E-
  2274 000002E3 20466F756E64202564-
  2274 000002EC 0A00               
  2275                                  fmt_arg_count_12:
  2276 000002EE 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2276 000002F7 74696E67206F6E6520-
  2276 00000300 726571756972656420-
  2276 00000309 616E64206F6E65206F-
  2276 00000312 7074696F6E616C2061-
  2276 0000031B 7267756D656E742E20-
  2276 00000324 466F756E642025640A-
  2276 0000032D 00                 
  2277                                  fmt_arg_count_2:
  2278 0000032E 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2278 00000337 74696E672074776F20-
  2278 00000340 617267756D656E7473-
  2278 00000349 2E20466F756E642025-
  2278 00000352 640A00             
  2279                                  fmt_arg_count_3:
  2280 00000355 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2280 0000035E 74696E672074687265-
  2280 00000367 6520617267756D656E-
  2280 00000370 74732E20466F756E64-
  2280 00000379 2025640A00         
  2281                                  fmt_type:
  2282 0000037E 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2282 00000387 696F6E207061737365-
  2282 00000390 6420696E636F727265-
  2282 00000399 637420747970650A00 
  2283                                  fmt_integer_range:
  2284 000003A2 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2284 000003AB 7265637420696E7465-
  2284 000003B4 6765722072616E6765-
  2284 000003BD 0A00               
  2285                                  fmt_division_by_zero:
  2286 000003BF 212121204469766973-             db `!!! Division by zero\n\0`
  2286 000003C8 696F6E206279207A65-
  2286 000003D1 726F0A00           
  2287                                  fmt_scheme_error_part_1:
  2288 000003D5 0A2121212054686520-             db `\n!!! The procedure \0`
  2288 000003DE 70726F636564757265-
  2288 000003E7 2000               
  2289                                  fmt_scheme_error_part_2:
  2290 000003E9 2061736B656420746F-             db ` asked to terminate the program\n`
  2290 000003F2 207465726D696E6174-
  2290 000003FB 65207468652070726F-
  2290 00000404 6772616D0A         
  2291 00000409 202020207769746820-             db `    with the following message:\n\n\0`
  2291 00000412 74686520666F6C6C6F-
  2291 0000041B 77696E67206D657373-
  2291 00000424 6167653A0A0A00     
  2292                                  fmt_scheme_error_part_3:
  2293 0000042B 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2293 00000434 210A0A00           
