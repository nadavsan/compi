     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "quote"
    84 00000007 0500000000000000        	dq 5
    85 0000000F 71756F7465              	db 0x71, 0x75, 0x6F, 0x74, 0x65
    86 00000014 04                      	db T_symbol	; quote
    87 00000015 [0600000000000000]      	dq L_constants + 6
    88 0000001D 03                      	db T_string	; "a"
    89 0000001E 0100000000000000        	dq 1
    90 00000026 61                      	db 0x61
    91 00000027 04                      	db T_symbol	; a
    92 00000028 [1D00000000000000]      	dq L_constants + 29
    93 00000030 03                      	db T_string	; "b"
    94 00000031 0100000000000000        	dq 1
    95 00000039 62                      	db 0x62
    96 0000003A 04                      	db T_symbol	; b
    97 0000003B [3000000000000000]      	dq L_constants + 48
    98 00000043 21                      	db T_pair	; (b)
    99 00000044 [3A00000000000000]-     	dq L_constants + 58, L_constants + 1
    99 0000004C [0100000000000000] 
   100 00000054 03                      	db T_string	; "c"
   101 00000055 0100000000000000        	dq 1
   102 0000005D 63                      	db 0x63
   103 0000005E 04                      	db T_symbol	; c
   104 0000005F [5400000000000000]      	dq L_constants + 84
   105 00000067 21                      	db T_pair	; (c)
   106 00000068 [5E00000000000000]-     	dq L_constants + 94, L_constants + 1
   106 00000070 [0100000000000000] 
   107 00000078 21                      	db T_pair	; ((b) c)
   108 00000079 [4300000000000000]-     	dq L_constants + 67, L_constants + 103
   108 00000081 [6700000000000000] 
   109 00000089 21                      	db T_pair	; (a (b) c)
   110 0000008A [2700000000000000]-     	dq L_constants + 39, L_constants + 120
   110 00000092 [7800000000000000] 
   111 0000009A 21                      	db T_pair	; ((a (b) c))
   112 0000009B [8900000000000000]-     	dq L_constants + 137, L_constants + 1
   112 000000A3 [0100000000000000] 
   113 000000AB 21                      	db T_pair	; '(a (b) c)
   114 000000AC [1400000000000000]-     	dq L_constants + 20, L_constants + 154
   114 000000B4 [9A00000000000000] 
   115                                  
   116                                  section .bss
   117                                  free_var_0:	; location of null?
   118 00000000 ????????????????        	resq 1
   119                                  free_var_1:	; location of pair?
   120 00000008 ????????????????        	resq 1
   121                                  free_var_2:	; location of void?
   122 00000010 ????????????????        	resq 1
   123                                  free_var_3:	; location of char?
   124 00000018 ????????????????        	resq 1
   125                                  free_var_4:	; location of string?
   126 00000020 ????????????????        	resq 1
   127                                  free_var_5:	; location of symbol?
   128 00000028 ????????????????        	resq 1
   129                                  free_var_6:	; location of vector?
   130 00000030 ????????????????        	resq 1
   131                                  free_var_7:	; location of procedure?
   132 00000038 ????????????????        	resq 1
   133                                  free_var_8:	; location of real?
   134 00000040 ????????????????        	resq 1
   135                                  free_var_9:	; location of rational?
   136 00000048 ????????????????        	resq 1
   137                                  free_var_10:	; location of boolean?
   138 00000050 ????????????????        	resq 1
   139                                  free_var_11:	; location of number?
   140 00000058 ????????????????        	resq 1
   141                                  free_var_12:	; location of collection?
   142 00000060 ????????????????        	resq 1
   143                                  free_var_13:	; location of cons
   144 00000068 ????????????????        	resq 1
   145                                  free_var_14:	; location of display-sexpr
   146 00000070 ????????????????        	resq 1
   147                                  free_var_15:	; location of write-char
   148 00000078 ????????????????        	resq 1
   149                                  free_var_16:	; location of car
   150 00000080 ????????????????        	resq 1
   151                                  free_var_17:	; location of cdr
   152 00000088 ????????????????        	resq 1
   153                                  free_var_18:	; location of string-length
   154 00000090 ????????????????        	resq 1
   155                                  free_var_19:	; location of vector-length
   156 00000098 ????????????????        	resq 1
   157                                  free_var_20:	; location of real->integer
   158 000000A0 ????????????????        	resq 1
   159                                  free_var_21:	; location of exit
   160 000000A8 ????????????????        	resq 1
   161                                  free_var_22:	; location of integer->real
   162 000000B0 ????????????????        	resq 1
   163                                  free_var_23:	; location of rational->real
   164 000000B8 ????????????????        	resq 1
   165                                  free_var_24:	; location of char->integer
   166 000000C0 ????????????????        	resq 1
   167                                  free_var_25:	; location of integer->char
   168 000000C8 ????????????????        	resq 1
   169                                  free_var_26:	; location of trng
   170 000000D0 ????????????????        	resq 1
   171                                  free_var_27:	; location of zero?
   172 000000D8 ????????????????        	resq 1
   173                                  free_var_28:	; location of integer?
   174 000000E0 ????????????????        	resq 1
   175                                  free_var_29:	; location of __bin-apply
   176 000000E8 ????????????????        	resq 1
   177                                  free_var_30:	; location of __bin-add-rr
   178 000000F0 ????????????????        	resq 1
   179                                  free_var_31:	; location of __bin-sub-rr
   180 000000F8 ????????????????        	resq 1
   181                                  free_var_32:	; location of __bin-mul-rr
   182 00000100 ????????????????        	resq 1
   183                                  free_var_33:	; location of __bin-div-rr
   184 00000108 ????????????????        	resq 1
   185                                  free_var_34:	; location of __bin-add-qq
   186 00000110 ????????????????        	resq 1
   187                                  free_var_35:	; location of __bin-sub-qq
   188 00000118 ????????????????        	resq 1
   189                                  free_var_36:	; location of __bin-mul-qq
   190 00000120 ????????????????        	resq 1
   191                                  free_var_37:	; location of __bin-div-qq
   192 00000128 ????????????????        	resq 1
   193                                  free_var_38:	; location of error
   194 00000130 ????????????????        	resq 1
   195                                  free_var_39:	; location of __bin-less-than-rr
   196 00000138 ????????????????        	resq 1
   197                                  free_var_40:	; location of __bin-less-than-qq
   198 00000140 ????????????????        	resq 1
   199                                  free_var_41:	; location of __bin-equal-rr
   200 00000148 ????????????????        	resq 1
   201                                  free_var_42:	; location of __bin-equal-qq
   202 00000150 ????????????????        	resq 1
   203                                  free_var_43:	; location of quotient
   204 00000158 ????????????????        	resq 1
   205                                  free_var_44:	; location of remainder
   206 00000160 ????????????????        	resq 1
   207                                  free_var_45:	; location of set-car!
   208 00000168 ????????????????        	resq 1
   209                                  free_var_46:	; location of set-cdr!
   210 00000170 ????????????????        	resq 1
   211                                  free_var_47:	; location of string-ref
   212 00000178 ????????????????        	resq 1
   213                                  free_var_48:	; location of vector-ref
   214 00000180 ????????????????        	resq 1
   215                                  free_var_49:	; location of vector-set!
   216 00000188 ????????????????        	resq 1
   217                                  free_var_50:	; location of string-set!
   218 00000190 ????????????????        	resq 1
   219                                  free_var_51:	; location of make-vector
   220 00000198 ????????????????        	resq 1
   221                                  free_var_52:	; location of make-string
   222 000001A0 ????????????????        	resq 1
   223                                  free_var_53:	; location of numerator
   224 000001A8 ????????????????        	resq 1
   225                                  free_var_54:	; location of denominator
   226 000001B0 ????????????????        	resq 1
   227                                  free_var_55:	; location of eq?
   228 000001B8 ????????????????        	resq 1
   229                                  
   230                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   231                                  global main
   232                                  section .text
   233                                  main:
   234 00000000 C8000000                        enter 0, 0
   235                                          
   236                                  	; building closure for null?
   237 00000004 48BF-                   	mov rdi, free_var_0
   237 00000006 [0000000000000000] 
   238 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   238 00000010 [AB0B000000000000] 
   239 00000018 E8660B0000              	call bind_primitive
   240                                  
   241                                  	; building closure for pair?
   242 0000001D 48BF-                   	mov rdi, free_var_1
   242 0000001F [0800000000000000] 
   243 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   243 00000029 [E10B000000000000] 
   244 00000031 E84D0B0000              	call bind_primitive
   245                                  
   246                                  	; building closure for void?
   247 00000036 48BF-                   	mov rdi, free_var_2
   247 00000038 [1000000000000000] 
   248 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   248 00000042 [170C000000000000] 
   249 0000004A E8340B0000              	call bind_primitive
   250                                  
   251                                  	; building closure for char?
   252 0000004F 48BF-                   	mov rdi, free_var_3
   252 00000051 [1800000000000000] 
   253 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   253 0000005B [4D0C000000000000] 
   254 00000063 E81B0B0000              	call bind_primitive
   255                                  
   256                                  	; building closure for string?
   257 00000068 48BF-                   	mov rdi, free_var_4
   257 0000006A [2000000000000000] 
   258 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   258 00000074 [830C000000000000] 
   259 0000007C E8020B0000              	call bind_primitive
   260                                  
   261                                  	; building closure for symbol?
   262 00000081 48BF-                   	mov rdi, free_var_5
   262 00000083 [2800000000000000] 
   263 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   263 0000008D [B90C000000000000] 
   264 00000095 E8E90A0000              	call bind_primitive
   265                                  
   266                                  	; building closure for vector?
   267 0000009A 48BF-                   	mov rdi, free_var_6
   267 0000009C [3000000000000000] 
   268 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   268 000000A6 [EF0C000000000000] 
   269 000000AE E8D00A0000              	call bind_primitive
   270                                  
   271                                  	; building closure for procedure?
   272 000000B3 48BF-                   	mov rdi, free_var_7
   272 000000B5 [3800000000000000] 
   273 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   273 000000BF [250D000000000000] 
   274 000000C7 E8B70A0000              	call bind_primitive
   275                                  
   276                                  	; building closure for real?
   277 000000CC 48BF-                   	mov rdi, free_var_8
   277 000000CE [4000000000000000] 
   278 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   278 000000D8 [5B0D000000000000] 
   279 000000E0 E89E0A0000              	call bind_primitive
   280                                  
   281                                  	; building closure for rational?
   282 000000E5 48BF-                   	mov rdi, free_var_9
   282 000000E7 [4800000000000000] 
   283 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   283 000000F1 [910D000000000000] 
   284 000000F9 E8850A0000              	call bind_primitive
   285                                  
   286                                  	; building closure for boolean?
   287 000000FE 48BF-                   	mov rdi, free_var_10
   287 00000100 [5000000000000000] 
   288 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   288 0000010A [C70D000000000000] 
   289 00000112 E86C0A0000              	call bind_primitive
   290                                  
   291                                  	; building closure for number?
   292 00000117 48BF-                   	mov rdi, free_var_11
   292 00000119 [5800000000000000] 
   293 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   293 00000123 [FF0D000000000000] 
   294 0000012B E8530A0000              	call bind_primitive
   295                                  
   296                                  	; building closure for collection?
   297 00000130 48BF-                   	mov rdi, free_var_12
   297 00000132 [6000000000000000] 
   298 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   298 0000013C [370E000000000000] 
   299 00000144 E83A0A0000              	call bind_primitive
   300                                  
   301                                  	; building closure for cons
   302 00000149 48BF-                   	mov rdi, free_var_13
   302 0000014B [6800000000000000] 
   303 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   303 00000155 [6F0E000000000000] 
   304 0000015D E8210A0000              	call bind_primitive
   305                                  
   306                                  	; building closure for display-sexpr
   307 00000162 48BF-                   	mov rdi, free_var_14
   307 00000164 [7000000000000000] 
   308 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   308 0000016E [A30E000000000000] 
   309 00000176 E8080A0000              	call bind_primitive
   310                                  
   311                                  	; building closure for write-char
   312 0000017B 48BF-                   	mov rdi, free_var_15
   312 0000017D [7800000000000000] 
   313 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   313 00000187 [CD0E000000000000] 
   314 0000018F E8EF090000              	call bind_primitive
   315                                  
   316                                  	; building closure for car
   317 00000194 48BF-                   	mov rdi, free_var_16
   317 00000196 [8000000000000000] 
   318 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   318 000001A0 [1B0F000000000000] 
   319 000001A8 E8D6090000              	call bind_primitive
   320                                  
   321                                  	; building closure for cdr
   322 000001AD 48BF-                   	mov rdi, free_var_17
   322 000001AF [8800000000000000] 
   323 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   323 000001B9 [430F000000000000] 
   324 000001C1 E8BD090000              	call bind_primitive
   325                                  
   326                                  	; building closure for string-length
   327 000001C6 48BF-                   	mov rdi, free_var_18
   327 000001C8 [9000000000000000] 
   328 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   328 000001D2 [6B0F000000000000] 
   329 000001DA E8A4090000              	call bind_primitive
   330                                  
   331                                  	; building closure for vector-length
   332 000001DF 48BF-                   	mov rdi, free_var_19
   332 000001E1 [9800000000000000] 
   333 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   333 000001EB [980F000000000000] 
   334 000001F3 E88B090000              	call bind_primitive
   335                                  
   336                                  	; building closure for real->integer
   337 000001F8 48BF-                   	mov rdi, free_var_20
   337 000001FA [A000000000000000] 
   338 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   338 00000204 [C50F000000000000] 
   339 0000020C E872090000              	call bind_primitive
   340                                  
   341                                  	; building closure for exit
   342 00000211 48BF-                   	mov rdi, free_var_21
   342 00000213 [A800000000000000] 
   343 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   343 0000021D [F80F000000000000] 
   344 00000225 E859090000              	call bind_primitive
   345                                  
   346                                  	; building closure for integer->real
   347 0000022A 48BF-                   	mov rdi, free_var_22
   347 0000022C [B000000000000000] 
   348 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   348 00000236 [1510000000000000] 
   349 0000023E E840090000              	call bind_primitive
   350                                  
   351                                  	; building closure for rational->real
   352 00000243 48BF-                   	mov rdi, free_var_23
   352 00000245 [B800000000000000] 
   353 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   353 0000024F [5210000000000000] 
   354 00000257 E827090000              	call bind_primitive
   355                                  
   356                                  	; building closure for char->integer
   357 0000025C 48BF-                   	mov rdi, free_var_24
   357 0000025E [C000000000000000] 
   358 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   358 00000268 [9110000000000000] 
   359 00000270 E80E090000              	call bind_primitive
   360                                  
   361                                  	; building closure for integer->char
   362 00000275 48BF-                   	mov rdi, free_var_25
   362 00000277 [C800000000000000] 
   363 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   363 00000281 [C610000000000000] 
   364 00000289 E8F5080000              	call bind_primitive
   365                                  
   366                                  	; building closure for trng
   367 0000028E 48BF-                   	mov rdi, free_var_26
   367 00000290 [D000000000000000] 
   368 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   368 0000029A [2011000000000000] 
   369 000002A2 E8DC080000              	call bind_primitive
   370                                  
   371                                  	; building closure for zero?
   372 000002A7 48BF-                   	mov rdi, free_var_27
   372 000002A9 [D800000000000000] 
   373 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   373 000002B3 [4311000000000000] 
   374 000002BB E8C3080000              	call bind_primitive
   375                                  
   376                                  	; building closure for integer?
   377 000002C0 48BF-                   	mov rdi, free_var_28
   377 000002C2 [E000000000000000] 
   378 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   378 000002CC [9E11000000000000] 
   379 000002D4 E8AA080000              	call bind_primitive
   380                                  
   381                                  	; building closure for __bin-apply
   382 000002D9 48BF-                   	mov rdi, free_var_29
   382 000002DB [E800000000000000] 
   383 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   383 000002E5 [AB0B000000000000] 
   384 000002ED E891080000              	call bind_primitive
   385                                  
   386                                  	; building closure for __bin-add-rr
   387 000002F2 48BF-                   	mov rdi, free_var_30
   387 000002F4 [F000000000000000] 
   388 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   388 000002FE [DB11000000000000] 
   389 00000306 E878080000              	call bind_primitive
   390                                  
   391                                  	; building closure for __bin-sub-rr
   392 0000030B 48BF-                   	mov rdi, free_var_31
   392 0000030D [F800000000000000] 
   393 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   393 00000317 [1F12000000000000] 
   394 0000031F E85F080000              	call bind_primitive
   395                                  
   396                                  	; building closure for __bin-mul-rr
   397 00000324 48BF-                   	mov rdi, free_var_32
   397 00000326 [0001000000000000] 
   398 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   398 00000330 [6312000000000000] 
   399 00000338 E846080000              	call bind_primitive
   400                                  
   401                                  	; building closure for __bin-div-rr
   402 0000033D 48BF-                   	mov rdi, free_var_33
   402 0000033F [0801000000000000] 
   403 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   403 00000349 [A712000000000000] 
   404 00000351 E82D080000              	call bind_primitive
   405                                  
   406                                  	; building closure for __bin-add-qq
   407 00000356 48BF-                   	mov rdi, free_var_34
   407 00000358 [1001000000000000] 
   408 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   408 00000362 [F912000000000000] 
   409 0000036A E814080000              	call bind_primitive
   410                                  
   411                                  	; building closure for __bin-sub-qq
   412 0000036F 48BF-                   	mov rdi, free_var_35
   412 00000371 [1801000000000000] 
   413 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   413 0000037B [6113000000000000] 
   414 00000383 E8FB070000              	call bind_primitive
   415                                  
   416                                  	; building closure for __bin-mul-qq
   417 00000388 48BF-                   	mov rdi, free_var_36
   417 0000038A [2001000000000000] 
   418 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   418 00000394 [C913000000000000] 
   419 0000039C E8E2070000              	call bind_primitive
   420                                  
   421                                  	; building closure for __bin-div-qq
   422 000003A1 48BF-                   	mov rdi, free_var_37
   422 000003A3 [2801000000000000] 
   423 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   423 000003AD [2114000000000000] 
   424 000003B5 E8C9070000              	call bind_primitive
   425                                  
   426                                  	; building closure for error
   427 000003BA 48BF-                   	mov rdi, free_var_38
   427 000003BC [3001000000000000] 
   428 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   428 000003C6 [EF14000000000000] 
   429 000003CE E8B0070000              	call bind_primitive
   430                                  
   431                                  	; building closure for __bin-less-than-rr
   432 000003D3 48BF-                   	mov rdi, free_var_39
   432 000003D5 [3801000000000000] 
   433 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   433 000003DF [8B15000000000000] 
   434 000003E7 E897070000              	call bind_primitive
   435                                  
   436                                  	; building closure for __bin-less-than-qq
   437 000003EC 48BF-                   	mov rdi, free_var_40
   437 000003EE [4001000000000000] 
   438 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   438 000003F8 [E215000000000000] 
   439 00000400 E87E070000              	call bind_primitive
   440                                  
   441                                  	; building closure for __bin-equal-rr
   442 00000405 48BF-                   	mov rdi, free_var_41
   442 00000407 [4801000000000000] 
   443 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   443 00000411 [4516000000000000] 
   444 00000419 E865070000              	call bind_primitive
   445                                  
   446                                  	; building closure for __bin-equal-qq
   447 0000041E 48BF-                   	mov rdi, free_var_42
   447 00000420 [5001000000000000] 
   448 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   448 0000042A [9C16000000000000] 
   449 00000432 E84C070000              	call bind_primitive
   450                                  
   451                                  	; building closure for quotient
   452 00000437 48BF-                   	mov rdi, free_var_43
   452 00000439 [5801000000000000] 
   453 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   453 00000443 [FF16000000000000] 
   454 0000044B E833070000              	call bind_primitive
   455                                  
   456                                  	; building closure for remainder
   457 00000450 48BF-                   	mov rdi, free_var_44
   457 00000452 [6001000000000000] 
   458 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   458 0000045C [6517000000000000] 
   459 00000464 E81A070000              	call bind_primitive
   460                                  
   461                                  	; building closure for set-car!
   462 00000469 48BF-                   	mov rdi, free_var_45
   462 0000046B [6801000000000000] 
   463 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   463 00000475 [CB17000000000000] 
   464 0000047D E801070000              	call bind_primitive
   465                                  
   466                                  	; building closure for set-cdr!
   467 00000482 48BF-                   	mov rdi, free_var_46
   467 00000484 [7001000000000000] 
   468 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   468 0000048E [0118000000000000] 
   469 00000496 E8E8060000              	call bind_primitive
   470                                  
   471                                  	; building closure for string-ref
   472 0000049B 48BF-                   	mov rdi, free_var_47
   472 0000049D [7801000000000000] 
   473 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   473 000004A7 [3718000000000000] 
   474 000004AF E8CF060000              	call bind_primitive
   475                                  
   476                                  	; building closure for vector-ref
   477 000004B4 48BF-                   	mov rdi, free_var_48
   477 000004B6 [8001000000000000] 
   478 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   478 000004C0 [A218000000000000] 
   479 000004C8 E8B6060000              	call bind_primitive
   480                                  
   481                                  	; building closure for vector-set!
   482 000004CD 48BF-                   	mov rdi, free_var_49
   482 000004CF [8801000000000000] 
   483 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   483 000004D9 [FE18000000000000] 
   484 000004E1 E89D060000              	call bind_primitive
   485                                  
   486                                  	; building closure for string-set!
   487 000004E6 48BF-                   	mov rdi, free_var_50
   487 000004E8 [9001000000000000] 
   488 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   488 000004F2 [6819000000000000] 
   489 000004FA E884060000              	call bind_primitive
   490                                  
   491                                  	; building closure for make-vector
   492 000004FF 48BF-                   	mov rdi, free_var_51
   492 00000501 [9801000000000000] 
   493 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   493 0000050B [DD19000000000000] 
   494 00000513 E86B060000              	call bind_primitive
   495                                  
   496                                  	; building closure for make-string
   497 00000518 48BF-                   	mov rdi, free_var_52
   497 0000051A [A001000000000000] 
   498 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   498 00000524 [471A000000000000] 
   499 0000052C E852060000              	call bind_primitive
   500                                  
   501                                  	; building closure for numerator
   502 00000531 48BF-                   	mov rdi, free_var_53
   502 00000533 [A801000000000000] 
   503 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   503 0000053D [B91A000000000000] 
   504 00000545 E839060000              	call bind_primitive
   505                                  
   506                                  	; building closure for denominator
   507 0000054A 48BF-                   	mov rdi, free_var_54
   507 0000054C [B001000000000000] 
   508 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   508 00000556 [E61A000000000000] 
   509 0000055E E820060000              	call bind_primitive
   510                                  
   511                                  	; building closure for eq?
   512 00000563 48BF-                   	mov rdi, free_var_55
   512 00000565 [B801000000000000] 
   513 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   513 0000056F [131B000000000000] 
   514 00000577 E807060000              	call bind_primitive
   515                                  
   516 0000057C 48B8-                   	mov rax,171+L_constants
   516 0000057E [AB00000000000000] 
   517                                  
   518 00000586 4889C7                  	mov rdi, rax
   519 00000589 E8C4000000              	call print_sexpr_if_not_void
   520                                  
   521 0000058E 48BF-                           mov rdi, fmt_memory_usage
   521 00000590 [1B01000000000000] 
   522 00000598 488B3425[A2010000]              mov rsi, qword [top_of_memory]
   523 000005A0 4881EE[C0010000]                sub rsi, memory
   524 000005A7 B800000000                      mov rax, 0
   525 000005AC E8(00000000)                    call printf
   526 000005B1 C9                      	leave
   527 000005B2 C3                      	ret
   528                                  
   529                                  L_error_non_closure:
   530 000005B3 488B3C25[00000000]              mov rdi, qword [stderr]
   531 000005BB 48BE-                           mov rsi, fmt_non_closure
   531 000005BD [5201000000000000] 
   532 000005C5 B800000000                      mov rax, 0
   533 000005CA E8(00000000)                    call fprintf
   534 000005CF 48C7C0FEFFFFFF                  mov rax, -2
   535 000005D6 E8(00000000)                    call exit
   536                                  
   537                                  L_error_improper_list:
   538 000005DB 488B3C25[00000000]      	mov rdi, qword [stderr]
   539 000005E3 48BE-                   	mov rsi, fmt_error_improper_list
   539 000005E5 [7A01000000000000] 
   540 000005ED B800000000              	mov rax, 0
   541 000005F2 E8(00000000)            	call fprintf
   542 000005F7 48C7C0F9FFFFFF          	mov rax, -7
   543 000005FE E8(00000000)            	call exit
   544                                  
   545                                  L_error_incorrect_arity_simple:
   546 00000603 488B3C25[00000000]              mov rdi, qword [stderr]
   547 0000060B 48BE-                           mov rsi, fmt_incorrect_arity_simple
   547 0000060D [BC00000000000000] 
   548 00000615 EB12                            jmp L_error_incorrect_arity_common
   549                                  L_error_incorrect_arity_opt:
   550 00000617 488B3C25[00000000]              mov rdi, qword [stderr]
   551 0000061F 48BE-                           mov rsi, fmt_incorrect_arity_opt
   551 00000621 [E700000000000000] 
   552                                  L_error_incorrect_arity_common:
   553 00000629 5A                              pop rdx
   554 0000062A 59                              pop rcx
   555 0000062B B800000000                      mov rax, 0
   556 00000630 E8(00000000)                    call fprintf
   557 00000635 48C7C0FAFFFFFF                  mov rax, -6
   558 0000063C E8(00000000)                    call exit
   559                                  
   560                                  section .data
   561                                  fmt_incorrect_arity_simple:
   562 000000BC 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   562 000000C5 74656420256C642061-
   562 000000CE 7267756D656E74732C-
   562 000000D7 206275742067697665-
   562 000000E0 6E20256C640A00     
   563                                  fmt_incorrect_arity_opt:
   564 000000E7 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   564 000000F0 746564206174206C65-
   564 000000F9 61737420256C642061-
   564 00000102 7267756D656E74732C-
   564 0000010B 206275742067697665-
   564 00000114 6E20256C640A00     
   565                                  fmt_memory_usage:
   566 0000011B 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   566 00000124 6420256C6420627974-
   566 0000012D 6573206F662064796E-
   566 00000136 616D6963616C6C792D-
   566 0000013F 616C6C6F6361746564-
   566 00000148 206D656D6F72790A0A-
   566 00000151 00                 
   567                                  fmt_non_closure:
   568 00000152 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   568 0000015B 7074696E6720746F20-
   568 00000164 6170706C792061206E-
   568 0000016D 6F6E2D636C6F737572-
   568 00000176 65210A00           
   569                                  fmt_error_improper_list:
   570 0000017A 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   570 00000183 7267756D656E742069-
   570 0000018C 73206E6F7420612070-
   570 00000195 726F706572206C6973-
   570 0000019E 74210A00           
   571                                  
   572                                  section .bss
   573                                  memory:
   574 000001C0 <res 40000000h>         	resb gbytes(1)
   575                                  
   576                                  section .data
   577                                  top_of_memory:
   578 000001A2 [C001000000000000]              dq memory
   579                                  
   580                                  section .text
   581                                  malloc:
   582 00000641 488B0425[A2010000]              mov rax, qword [top_of_memory]
   583 00000649 48013C25[A2010000]              add qword [top_of_memory], rdi
   584 00000651 C3                              ret
   585                                          
   586                                  print_sexpr_if_not_void:
   587 00000652 4881FF[00000000]        	cmp rdi, sob_void
   588 00000659 7501                    	jne print_sexpr
   589 0000065B C3                      	ret
   590                                  
   591                                  section .data
   592                                  fmt_void:
   593 000001AA 233C766F69643E00        	db `#<void>\0`
   594                                  fmt_nil:
   595 000001B2 282900                  	db `()\0`
   596                                  fmt_boolean_false:
   597 000001B5 236600                  	db `#f\0`
   598                                  fmt_boolean_true:
   599 000001B8 237400                  	db `#t\0`
   600                                  fmt_char_backslash:
   601 000001BB 235C5C00                	db `#\\\\\0`
   602                                  fmt_char_dquote:
   603 000001BF 235C2200                	db `#\\"\0`
   604                                  fmt_char_simple:
   605 000001C3 235C256300              	db `#\\%c\0`
   606                                  fmt_char_null:
   607 000001C8 235C6E756C00            	db `#\\nul\0`
   608                                  fmt_char_bell:
   609 000001CE 235C62656C6C00          	db `#\\bell\0`
   610                                  fmt_char_backspace:
   611 000001D5 235C6261636B737061-     	db `#\\backspace\0`
   611 000001DE 636500             
   612                                  fmt_char_tab:
   613 000001E1 235C74616200            	db `#\\tab\0`
   614                                  fmt_char_newline:
   615 000001E7 235C6E65776C696E65-     	db `#\\newline\0`
   615 000001F0 00                 
   616                                  fmt_char_formfeed:
   617 000001F1 235C7061676500          	db `#\\page\0`
   618                                  fmt_char_return:
   619 000001F8 235C72657475726E00      	db `#\\return\0`
   620                                  fmt_char_escape:
   621 00000201 235C65736300            	db `#\\esc\0`
   622                                  fmt_char_space:
   623 00000207 235C737061636500        	db `#\\space\0`
   624                                  fmt_char_hex:
   625 0000020F 235C782530325800        	db `#\\x%02X\0`
   626                                  fmt_closure:
   627 00000217 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   627 00000220 206174203078253038-
   627 00000229 5820656E763D307825-
   627 00000232 30385820636F64653D-
   627 0000023B 3078253038583E00   
   628                                  fmt_lparen:
   629 00000243 2800                    	db `(\0`
   630                                  fmt_dotted_pair:
   631 00000245 202E2000                	db ` . \0`
   632                                  fmt_rparen:
   633 00000249 2900                    	db `)\0`
   634                                  fmt_space:
   635 0000024B 2000                    	db ` \0`
   636                                  fmt_empty_vector:
   637 0000024D 23282900                	db `#()\0`
   638                                  fmt_vector:
   639 00000251 232800                  	db `#(\0`
   640                                  fmt_real:
   641 00000254 256600                  	db `%f\0`
   642                                  fmt_fraction:
   643 00000257 256C642F256C6400        	db `%ld/%ld\0`
   644                                  fmt_zero:
   645 0000025F 3000                    	db `0\0`
   646                                  fmt_int:
   647 00000261 256C6400                	db `%ld\0`
   648                                  fmt_unknown_sexpr_error:
   649 00000265 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   649 0000026E 6F723A20556E6B6E6F-
   649 00000277 776E2074797065206F-
   649 00000280 662073657870722028-
   649 00000289 3078253032582920   
   650 00000291 617420616464726573-     	db `at address 0x%08X\n\n\0`
   650 0000029A 73203078253038580A-
   650 000002A3 0A00               
   651                                  fmt_dquote:
   652 000002A5 2200                    	db `\"\0`
   653                                  fmt_string_char:
   654 000002A7 256300                          db `%c\0`
   655                                  fmt_string_char_7:
   656 000002AA 5C6100                          db `\\a\0`
   657                                  fmt_string_char_8:
   658 000002AD 5C6200                          db `\\b\0`
   659                                  fmt_string_char_9:
   660 000002B0 5C7400                          db `\\t\0`
   661                                  fmt_string_char_10:
   662 000002B3 5C6E00                          db `\\n\0`
   663                                  fmt_string_char_11:
   664 000002B6 5C7600                          db `\\v\0`
   665                                  fmt_string_char_12:
   666 000002B9 5C6600                          db `\\f\0`
   667                                  fmt_string_char_13:
   668 000002BC 5C7200                          db `\\r\0`
   669                                  fmt_string_char_34:
   670 000002BF 5C2200                          db `\\"\0`
   671                                  fmt_string_char_92:
   672 000002C2 5C5C00                          db `\\\\\0`
   673                                  fmt_string_char_hex:
   674 000002C5 5C7825583B00                    db `\\x%X;\0`
   675                                  
   676                                  section .text
   677                                  
   678                                  print_sexpr:
   679                                  	ENTER
    33 0000065C C8000000            <1>  enter 0, 0
    34 00000660 4883E4F0            <1>  and rsp, ~15
   680 00000664 8A07                    	mov al, byte [rdi]
   681 00000666 3C00                    	cmp al, T_void
   682 00000668 744D                    	je .Lvoid
   683 0000066A 3C01                    	cmp al, T_nil
   684 0000066C 7458                    	je .Lnil
   685 0000066E 3C09                    	cmp al, T_boolean_false
   686 00000670 7463                    	je .Lboolean_false
   687 00000672 3C0A                    	cmp al, T_boolean_true
   688 00000674 746E                    	je .Lboolean_true
   689 00000676 3C02                    	cmp al, T_char
   690 00000678 7479                    	je .Lchar
   691 0000067A 3C04                    	cmp al, T_symbol
   692 0000067C 0F84BB010000            	je .Lsymbol
   693 00000682 3C21                    	cmp al, T_pair
   694 00000684 0F84D6010000            	je .Lpair
   695 0000068A 3C22                    	cmp al, T_vector
   696 0000068C 0F8478020000            	je .Lvector
   697 00000692 3C05                    	cmp al, T_closure
   698 00000694 0F8489010000            	je .Lclosure
   699 0000069A 3C12                    	cmp al, T_real
   700 0000069C 0F84F3020000            	je .Lreal
   701 000006A2 3C11                    	cmp al, T_rational
   702 000006A4 0F8419030000            	je .Lrational
   703 000006AA 3C03                    	cmp al, T_string
   704 000006AC 0F8452030000            	je .Lstring
   705                                  
   706 000006B2 E98A040000              	jmp .Lunknown_sexpr_type
   707                                  
   708                                  .Lvoid:
   709 000006B7 48BF-                   	mov rdi, fmt_void
   709 000006B9 [AA01000000000000] 
   710 000006C1 E9AF040000              	jmp .Lemit
   711                                  
   712                                  .Lnil:
   713 000006C6 48BF-                   	mov rdi, fmt_nil
   713 000006C8 [B201000000000000] 
   714 000006D0 E9A0040000              	jmp .Lemit
   715                                  
   716                                  .Lboolean_false:
   717 000006D5 48BF-                   	mov rdi, fmt_boolean_false
   717 000006D7 [B501000000000000] 
   718 000006DF E991040000              	jmp .Lemit
   719                                  
   720                                  .Lboolean_true:
   721 000006E4 48BF-                   	mov rdi, fmt_boolean_true
   721 000006E6 [B801000000000000] 
   722 000006EE E982040000              	jmp .Lemit
   723                                  
   724                                  .Lchar:
   725 000006F3 8A4701                  	mov al, byte [rdi + 1]
   726 000006F6 3C20                    	cmp al, ' '
   727 000006F8 7E28                    	jle .Lchar_whitespace
   728 000006FA 3C5C                    	cmp al, 92 		; backslash
   729 000006FC 0F847C000000            	je .Lchar_backslash
   730 00000702 3C22                    	cmp al, '"'
   731 00000704 0F8483000000            	je .Lchar_dquote
   732 0000070A 4825FF000000            	and rax, 255
   733 00000710 48BF-                   	mov rdi, fmt_char_simple
   733 00000712 [C301000000000000] 
   734 0000071A 4889C6                  	mov rsi, rax
   735 0000071D E953040000              	jmp .Lemit
   736                                  
   737                                  .Lchar_whitespace:
   738 00000722 3C00                    	cmp al, 0
   739 00000724 7476                    	je .Lchar_null
   740 00000726 3C07                    	cmp al, 7
   741 00000728 0F847D000000            	je .Lchar_bell
   742 0000072E 3C08                    	cmp al, 8
   743 00000730 0F8484000000            	je .Lchar_backspace
   744 00000736 3C09                    	cmp al, 9
   745 00000738 0F848B000000            	je .Lchar_tab
   746 0000073E 3C0A                    	cmp al, 10
   747 00000740 0F8492000000            	je .Lchar_newline
   748 00000746 3C0C                    	cmp al, 12
   749 00000748 0F8499000000            	je .Lchar_formfeed
   750 0000074E 3C0D                    	cmp al, 13
   751 00000750 0F84A0000000            	je .Lchar_return
   752 00000756 3C1B                    	cmp al, 27
   753 00000758 0F84A7000000            	je .Lchar_escape
   754 0000075E 4825FF000000            	and rax, 255
   755 00000764 3C20                    	cmp al, ' '
   756 00000766 0F84A8000000            	je .Lchar_space
   757 0000076C 48BF-                   	mov rdi, fmt_char_hex
   757 0000076E [0F02000000000000] 
   758 00000776 4889C6                  	mov rsi, rax
   759 00000779 E9F7030000              	jmp .Lemit	
   760                                  
   761                                  .Lchar_backslash:
   762 0000077E 48BF-                   	mov rdi, fmt_char_backslash
   762 00000780 [BB01000000000000] 
   763 00000788 E9E8030000              	jmp .Lemit
   764                                  
   765                                  .Lchar_dquote:
   766 0000078D 48BF-                   	mov rdi, fmt_char_dquote
   766 0000078F [BF01000000000000] 
   767 00000797 E9D9030000              	jmp .Lemit
   768                                  
   769                                  .Lchar_null:
   770 0000079C 48BF-                   	mov rdi, fmt_char_null
   770 0000079E [C801000000000000] 
   771 000007A6 E9CA030000              	jmp .Lemit
   772                                  
   773                                  .Lchar_bell:
   774 000007AB 48BF-                   	mov rdi, fmt_char_bell
   774 000007AD [CE01000000000000] 
   775 000007B5 E9BB030000              	jmp .Lemit
   776                                  
   777                                  .Lchar_backspace:
   778 000007BA 48BF-                   	mov rdi, fmt_char_backspace
   778 000007BC [D501000000000000] 
   779 000007C4 E9AC030000              	jmp .Lemit
   780                                  
   781                                  .Lchar_tab:
   782 000007C9 48BF-                   	mov rdi, fmt_char_tab
   782 000007CB [E101000000000000] 
   783 000007D3 E99D030000              	jmp .Lemit
   784                                  
   785                                  .Lchar_newline:
   786 000007D8 48BF-                   	mov rdi, fmt_char_newline
   786 000007DA [E701000000000000] 
   787 000007E2 E98E030000              	jmp .Lemit
   788                                  
   789                                  .Lchar_formfeed:
   790 000007E7 48BF-                   	mov rdi, fmt_char_formfeed
   790 000007E9 [F101000000000000] 
   791 000007F1 E97F030000              	jmp .Lemit
   792                                  
   793                                  .Lchar_return:
   794 000007F6 48BF-                   	mov rdi, fmt_char_return
   794 000007F8 [F801000000000000] 
   795 00000800 E970030000              	jmp .Lemit
   796                                  
   797                                  .Lchar_escape:
   798 00000805 48BF-                   	mov rdi, fmt_char_escape
   798 00000807 [0102000000000000] 
   799 0000080F E961030000              	jmp .Lemit
   800                                  
   801                                  .Lchar_space:
   802 00000814 48BF-                   	mov rdi, fmt_char_space
   802 00000816 [0702000000000000] 
   803 0000081E E952030000              	jmp .Lemit
   804                                  
   805                                  .Lclosure:
   806 00000823 4889FE                  	mov rsi, qword rdi
   807 00000826 48BF-                   	mov rdi, fmt_closure
   807 00000828 [1702000000000000] 
   808 00000830 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   809 00000834 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   810 00000838 E938030000              	jmp .Lemit
   811                                  
   812                                  .Lsymbol:
   813 0000083D 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   814 00000841 BE01000000              	mov rsi, 1		 ; size = 1 byte
   815 00000846 488B5701                	mov rdx, qword [rdi + 1] ; length
   816 0000084A 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   817 0000084E 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   818 00000856 E8(00000000)            	call fwrite
   819 0000085B E921030000              	jmp .Lend
   820                                  	
   821                                  .Lpair:
   822 00000860 57                      	push rdi
   823 00000861 48BF-                   	mov rdi, fmt_lparen
   823 00000863 [4302000000000000] 
   824 0000086B B800000000              	mov rax, 0
   825                                          ENTER
    33 00000870 C8000000            <1>  enter 0, 0
    34 00000874 4883E4F0            <1>  and rsp, ~15
   826 00000878 E8(00000000)            	call printf
   827                                          LEAVE
    38 0000087D C9                  <1>  leave
   828 0000087E 488B3C24                	mov rdi, qword [rsp] 	; pair
   829 00000882 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   830 00000886 E8D1FDFFFF              	call print_sexpr
   831 0000088B 5F                      	pop rdi 		; pair
   832 0000088C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   833                                  .Lcdr:
   834 00000890 8A07                    	mov al, byte [rdi]
   835 00000892 3C01                    	cmp al, T_nil
   836 00000894 7435                    	je .Lcdr_nil
   837 00000896 3C21                    	cmp al, T_pair
   838 00000898 7447                    	je .Lcdr_pair
   839 0000089A 57                      	push rdi
   840 0000089B 48BF-                   	mov rdi, fmt_dotted_pair
   840 0000089D [4502000000000000] 
   841 000008A5 B800000000              	mov rax, 0
   842 000008AA E8(00000000)            	call printf
   843 000008AF 5F                      	pop rdi
   844 000008B0 E8A7FDFFFF              	call print_sexpr
   845 000008B5 48BF-                   	mov rdi, fmt_rparen
   845 000008B7 [4902000000000000] 
   846 000008BF B800000000              	mov rax, 0
   847 000008C4 E8(00000000)            	call printf
   848                                  	LEAVE
    38 000008C9 C9                  <1>  leave
   849 000008CA C3                      	ret
   850                                  
   851                                  .Lcdr_nil:
   852 000008CB 48BF-                   	mov rdi, fmt_rparen
   852 000008CD [4902000000000000] 
   853 000008D5 B800000000              	mov rax, 0
   854 000008DA E8(00000000)            	call printf
   855                                  	LEAVE
    38 000008DF C9                  <1>  leave
   856 000008E0 C3                      	ret
   857                                  
   858                                  .Lcdr_pair:
   859 000008E1 57                      	push rdi
   860 000008E2 48BF-                   	mov rdi, fmt_space
   860 000008E4 [4B02000000000000] 
   861 000008EC B800000000              	mov rax, 0
   862 000008F1 E8(00000000)            	call printf
   863 000008F6 488B3C24                	mov rdi, qword [rsp]
   864 000008FA 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   865 000008FE E859FDFFFF              	call print_sexpr
   866 00000903 5F                      	pop rdi
   867 00000904 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   868 00000908 EB86                    	jmp .Lcdr
   869                                  
   870                                  .Lvector:
   871 0000090A 488B4701                	mov rax, qword [rdi + 1] ; length
   872 0000090E 4883F800                	cmp rax, 0
   873 00000912 7472                    	je .Lvector_empty
   874 00000914 57                      	push rdi
   875 00000915 48BF-                   	mov rdi, fmt_vector
   875 00000917 [5102000000000000] 
   876 0000091F B800000000              	mov rax, 0
   877 00000924 E8(00000000)            	call printf
   878 00000929 488B3C24                	mov rdi, qword [rsp]
   879 0000092D FF7701                  	push qword [rdi + 1]
   880 00000930 6A01                    	push 1
   881 00000932 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   882 00000936 E821FDFFFF              	call print_sexpr
   883                                  .Lvector_loop:
   884                                  	; [rsp] index
   885                                  	; [rsp + 8*1] limit
   886                                  	; [rsp + 8*2] vector
   887 0000093B 488B0424                	mov rax, qword [rsp]
   888 0000093F 483B442408              	cmp rax, qword [rsp + 8*1]
   889 00000944 742D                    	je .Lvector_end
   890 00000946 48BF-                   	mov rdi, fmt_space
   890 00000948 [4B02000000000000] 
   891 00000950 B800000000              	mov rax, 0
   892 00000955 E8(00000000)            	call printf
   893 0000095A 488B0424                	mov rax, qword [rsp]
   894 0000095E 488B5C2410              	mov rbx, qword [rsp + 8*2]
   895 00000963 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   896 00000968 E8EFFCFFFF              	call print_sexpr
   897 0000096D 48FF0424                	inc qword [rsp]
   898 00000971 EBC8                    	jmp .Lvector_loop
   899                                  
   900                                  .Lvector_end:
   901 00000973 4883C418                	add rsp, 8*3
   902 00000977 48BF-                   	mov rdi, fmt_rparen
   902 00000979 [4902000000000000] 
   903 00000981 E9EF010000              	jmp .Lemit	
   904                                  
   905                                  .Lvector_empty:
   906 00000986 48BF-                   	mov rdi, fmt_empty_vector
   906 00000988 [4D02000000000000] 
   907 00000990 E9E0010000              	jmp .Lemit
   908                                  
   909                                  .Lreal:
   910 00000995 FF7701                  	push qword [rdi + 1]
   911 00000998 F20F100424              	movsd xmm0, qword [rsp]
   912 0000099D 4883C408                	add rsp, 8*1
   913 000009A1 48BF-                   	mov rdi, fmt_real
   913 000009A3 [5402000000000000] 
   914 000009AB B801000000              	mov rax, 1
   915                                  	ENTER
    33 000009B0 C8000000            <1>  enter 0, 0
    34 000009B4 4883E4F0            <1>  and rsp, ~15
   916 000009B8 E8(00000000)            	call printf
   917                                  	LEAVE
    38 000009BD C9                  <1>  leave
   918 000009BE E9BE010000              	jmp .Lend
   919                                  
   920                                  .Lrational:
   921 000009C3 488B7701                	mov rsi, qword [rdi + 1]
   922 000009C7 488B5709                	mov rdx, qword [rdi + 1 + 8]
   923 000009CB 4883FE00                	cmp rsi, 0
   924 000009CF 7415                    	je .Lrat_zero
   925 000009D1 4883FA01                	cmp rdx, 1
   926 000009D5 741E                    	je .Lrat_int
   927 000009D7 48BF-                   	mov rdi, fmt_fraction
   927 000009D9 [5702000000000000] 
   928 000009E1 E98F010000              	jmp .Lemit
   929                                  
   930                                  .Lrat_zero:
   931 000009E6 48BF-                   	mov rdi, fmt_zero
   931 000009E8 [5F02000000000000] 
   932 000009F0 E980010000              	jmp .Lemit
   933                                  
   934                                  .Lrat_int:
   935 000009F5 48BF-                   	mov rdi, fmt_int
   935 000009F7 [6102000000000000] 
   936 000009FF E971010000              	jmp .Lemit
   937                                  
   938                                  .Lstring:
   939 00000A04 488D4709                	lea rax, [rdi + 1 + 8]
   940 00000A08 50                      	push rax
   941 00000A09 FF7701                  	push qword [rdi + 1]
   942 00000A0C 48BF-                   	mov rdi, fmt_dquote
   942 00000A0E [A502000000000000] 
   943 00000A16 B800000000              	mov rax, 0
   944                                  	ENTER
    33 00000A1B C8000000            <1>  enter 0, 0
    34 00000A1F 4883E4F0            <1>  and rsp, ~15
   945 00000A23 E8(00000000)            	call printf
   946                                  	LEAVE
    38 00000A28 C9                  <1>  leave
   947                                  .Lstring_loop:
   948                                  	; qword [rsp]: limit
   949                                  	; qword [rsp + 8*1]: char *
   950 00000A29 48833C2400              	cmp qword [rsp], 0
   951 00000A2E 0F84FD000000            	je .Lstring_end
   952 00000A34 488B442408              	mov rax, qword [rsp + 8*1]
   953 00000A39 8A00                    	mov al, byte [rax]
   954 00000A3B 4825FF000000            	and rax, 255
   955 00000A41 3C07                    	cmp al, 7
   956 00000A43 7468                            je .Lstring_char_7
   957 00000A45 3C08                            cmp al, 8
   958 00000A47 7470                            je .Lstring_char_8
   959 00000A49 3C09                            cmp al, 9
   960 00000A4B 7478                            je .Lstring_char_9
   961 00000A4D 3C0A                            cmp al, 10
   962 00000A4F 0F847C000000                    je .Lstring_char_10
   963 00000A55 3C0B                            cmp al, 11
   964 00000A57 0F8480000000                    je .Lstring_char_11
   965 00000A5D 3C0C                            cmp al, 12
   966 00000A5F 0F8484000000                    je .Lstring_char_12
   967 00000A65 3C0D                            cmp al, 13
   968 00000A67 0F8488000000                    je .Lstring_char_13
   969 00000A6D 3C22                            cmp al, 34
   970 00000A6F 0F848C000000                    je .Lstring_char_34
   971 00000A75 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   973 00000A77 3C20                            cmp al, ' '
   974 00000A79 0F8CA0000000                    jl .Lstring_char_hex
   975 00000A7F 48BF-                           mov rdi, fmt_string_char
   975 00000A81 [A702000000000000] 
   976 00000A89 4889C6                          mov rsi, rax
   977                                  .Lstring_char_emit:
   978 00000A8C B800000000                      mov rax, 0
   979                                          ENTER
    33 00000A91 C8000000            <1>  enter 0, 0
    34 00000A95 4883E4F0            <1>  and rsp, ~15
   980 00000A99 E8(00000000)                    call printf
   981                                          LEAVE
    38 00000A9E C9                  <1>  leave
   982 00000A9F 48FF0C24                        dec qword [rsp]
   983 00000AA3 48FF442408                      inc qword [rsp + 8*1]
   984 00000AA8 E97CFFFFFF                      jmp .Lstring_loop
   985                                  
   986                                  .Lstring_char_7:
   987 00000AAD 48BF-                           mov rdi, fmt_string_char_7
   987 00000AAF [AA02000000000000] 
   988 00000AB7 EBD3                            jmp .Lstring_char_emit
   989                                  
   990                                  .Lstring_char_8:
   991 00000AB9 48BF-                           mov rdi, fmt_string_char_8
   991 00000ABB [AD02000000000000] 
   992 00000AC3 EBC7                            jmp .Lstring_char_emit
   993                                          
   994                                  .Lstring_char_9:
   995 00000AC5 48BF-                           mov rdi, fmt_string_char_9
   995 00000AC7 [B002000000000000] 
   996 00000ACF EBBB                            jmp .Lstring_char_emit
   997                                  
   998                                  .Lstring_char_10:
   999 00000AD1 48BF-                           mov rdi, fmt_string_char_10
   999 00000AD3 [B302000000000000] 
  1000 00000ADB EBAF                            jmp .Lstring_char_emit
  1001                                  
  1002                                  .Lstring_char_11:
  1003 00000ADD 48BF-                           mov rdi, fmt_string_char_11
  1003 00000ADF [B602000000000000] 
  1004 00000AE7 EBA3                            jmp .Lstring_char_emit
  1005                                  
  1006                                  .Lstring_char_12:
  1007 00000AE9 48BF-                           mov rdi, fmt_string_char_12
  1007 00000AEB [B902000000000000] 
  1008 00000AF3 EB97                            jmp .Lstring_char_emit
  1009                                  
  1010                                  .Lstring_char_13:
  1011 00000AF5 48BF-                           mov rdi, fmt_string_char_13
  1011 00000AF7 [BC02000000000000] 
  1012 00000AFF EB8B                            jmp .Lstring_char_emit
  1013                                  
  1014                                  .Lstring_char_34:
  1015 00000B01 48BF-                           mov rdi, fmt_string_char_34
  1015 00000B03 [BF02000000000000] 
  1016 00000B0B E97CFFFFFF                      jmp .Lstring_char_emit
  1017                                  
  1018                                  .Lstring_char_92:
  1019 00000B10 48BF-                           mov rdi, fmt_string_char_92
  1019 00000B12 [C202000000000000] 
  1020 00000B1A E96DFFFFFF                      jmp .Lstring_char_emit
  1021                                  
  1022                                  .Lstring_char_hex:
  1023 00000B1F 48BF-                           mov rdi, fmt_string_char_hex
  1023 00000B21 [C502000000000000] 
  1024 00000B29 4889C6                          mov rsi, rax
  1025 00000B2C E95BFFFFFF                      jmp .Lstring_char_emit        
  1026                                  
  1027                                  .Lstring_end:
  1028 00000B31 4883C410                	add rsp, 8 * 2
  1029 00000B35 48BF-                   	mov rdi, fmt_dquote
  1029 00000B37 [A502000000000000] 
  1030 00000B3F EB34                    	jmp .Lemit
  1031                                  
  1032                                  .Lunknown_sexpr_type:
  1033 00000B41 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1033 00000B43 [6502000000000000] 
  1034 00000B4B 4825FF000000            	and rax, 255
  1035 00000B51 4889C2                  	mov rdx, rax
  1036 00000B54 4889F9                  	mov rcx, rdi
  1037 00000B57 488B3C25[00000000]      	mov rdi, qword [stderr]
  1038 00000B5F B800000000              	mov rax, 0
  1039 00000B64 E8(00000000)            	call fprintf
  1040 00000B69 48C7C0FFFFFFFF          	mov rax, -1
  1041 00000B70 E8(00000000)            	call exit
  1042                                  
  1043                                  .Lemit:
  1044 00000B75 B800000000              	mov rax, 0
  1045 00000B7A E8(00000000)            	call printf
  1046 00000B7F EB00                    	jmp .Lend
  1047                                  
  1048                                  .Lend:
  1049                                  	LEAVE
    38 00000B81 C9                  <1>  leave
  1050 00000B82 C3                      	ret
  1051                                  
  1052                                  ;;; rdi: address of free variable
  1053                                  ;;; rsi: address of code-pointer
  1054                                  bind_primitive:
  1055                                          ENTER
    33 00000B83 C8000000            <1>  enter 0, 0
    34 00000B87 4883E4F0            <1>  and rsp, ~15
  1056 00000B8B 57                              push rdi
  1057 00000B8C BF11000000                      mov rdi, (1 + 8 + 8)
  1058 00000B91 E8ABFAFFFF                      call malloc
  1059 00000B96 5F                              pop rdi
  1060 00000B97 C60005                          mov byte [rax], T_closure
  1061 00000B9A 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1062 00000BA2 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1063 00000BA6 488907                          mov qword [rdi], rax
  1064                                          LEAVE
    38 00000BA9 C9                  <1>  leave
  1065 00000BAA C3                              ret
  1066                                  
  1067                                  
  1068                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1069                                  L_code_ptr_bin_apply:
  1070                                          
  1071                                  L_code_ptr_is_null:
  1072                                          ENTER
    33 00000BAB C8000000            <1>  enter 0, 0
    34 00000BAF 4883E4F0            <1>  and rsp, ~15
  1073 00000BB3 48837D1801                      cmp COUNT, 1
  1074 00000BB8 0F856F100000                    jne L_error_arg_count_1
  1075 00000BBE 488B4520                        mov rax, PARAM(0)
  1076 00000BC2 803801                          cmp byte [rax], T_nil
  1077 00000BC5 750C                            jne .L_false
  1078 00000BC7 48B8-                           mov rax, sob_boolean_true
  1078 00000BC9 [0300000000000000] 
  1079 00000BD1 EB0A                            jmp .L_end
  1080                                  .L_false:
  1081 00000BD3 48B8-                           mov rax, sob_boolean_false
  1081 00000BD5 [0200000000000000] 
  1082                                  .L_end:
  1083                                          LEAVE
    38 00000BDD C9                  <1>  leave
  1084 00000BDE C21800                          ret AND_KILL_FRAME(1)
  1085                                  
  1086                                  L_code_ptr_is_pair:
  1087                                          ENTER
    33 00000BE1 C8000000            <1>  enter 0, 0
    34 00000BE5 4883E4F0            <1>  and rsp, ~15
  1088 00000BE9 48837D1801                      cmp COUNT, 1
  1089 00000BEE 0F8539100000                    jne L_error_arg_count_1
  1090 00000BF4 488B4520                        mov rax, PARAM(0)
  1091 00000BF8 803821                          cmp byte [rax], T_pair
  1092 00000BFB 750C                            jne .L_false
  1093 00000BFD 48B8-                           mov rax, sob_boolean_true
  1093 00000BFF [0300000000000000] 
  1094 00000C07 EB0A                            jmp .L_end
  1095                                  .L_false:
  1096 00000C09 48B8-                           mov rax, sob_boolean_false
  1096 00000C0B [0200000000000000] 
  1097                                  .L_end:
  1098                                          LEAVE
    38 00000C13 C9                  <1>  leave
  1099 00000C14 C21800                          ret AND_KILL_FRAME(1)
  1100                                          
  1101                                  L_code_ptr_is_void:
  1102                                          ENTER
    33 00000C17 C8000000            <1>  enter 0, 0
    34 00000C1B 4883E4F0            <1>  and rsp, ~15
  1103 00000C1F 48837D1801                      cmp COUNT, 1
  1104 00000C24 0F8503100000                    jne L_error_arg_count_1
  1105 00000C2A 488B4520                        mov rax, PARAM(0)
  1106 00000C2E 803800                          cmp byte [rax], T_void
  1107 00000C31 750C                            jne .L_false
  1108 00000C33 48B8-                           mov rax, sob_boolean_true
  1108 00000C35 [0300000000000000] 
  1109 00000C3D EB0A                            jmp .L_end
  1110                                  .L_false:
  1111 00000C3F 48B8-                           mov rax, sob_boolean_false
  1111 00000C41 [0200000000000000] 
  1112                                  .L_end:
  1113                                          LEAVE
    38 00000C49 C9                  <1>  leave
  1114 00000C4A C21800                          ret AND_KILL_FRAME(1)
  1115                                  
  1116                                  L_code_ptr_is_char:
  1117                                          ENTER
    33 00000C4D C8000000            <1>  enter 0, 0
    34 00000C51 4883E4F0            <1>  and rsp, ~15
  1118 00000C55 48837D1801                      cmp COUNT, 1
  1119 00000C5A 0F85CD0F0000                    jne L_error_arg_count_1
  1120 00000C60 488B4520                        mov rax, PARAM(0)
  1121 00000C64 803802                          cmp byte [rax], T_char
  1122 00000C67 750C                            jne .L_false
  1123 00000C69 48B8-                           mov rax, sob_boolean_true
  1123 00000C6B [0300000000000000] 
  1124 00000C73 EB0A                            jmp .L_end
  1125                                  .L_false:
  1126 00000C75 48B8-                           mov rax, sob_boolean_false
  1126 00000C77 [0200000000000000] 
  1127                                  .L_end:
  1128                                          LEAVE
    38 00000C7F C9                  <1>  leave
  1129 00000C80 C21800                          ret AND_KILL_FRAME(1)
  1130                                  
  1131                                  L_code_ptr_is_string:
  1132                                          ENTER
    33 00000C83 C8000000            <1>  enter 0, 0
    34 00000C87 4883E4F0            <1>  and rsp, ~15
  1133 00000C8B 48837D1801                      cmp COUNT, 1
  1134 00000C90 0F85970F0000                    jne L_error_arg_count_1
  1135 00000C96 488B4520                        mov rax, PARAM(0)
  1136 00000C9A 803803                          cmp byte [rax], T_string
  1137 00000C9D 750C                            jne .L_false
  1138 00000C9F 48B8-                           mov rax, sob_boolean_true
  1138 00000CA1 [0300000000000000] 
  1139 00000CA9 EB0A                            jmp .L_end
  1140                                  .L_false:
  1141 00000CAB 48B8-                           mov rax, sob_boolean_false
  1141 00000CAD [0200000000000000] 
  1142                                  .L_end:
  1143                                          LEAVE
    38 00000CB5 C9                  <1>  leave
  1144 00000CB6 C21800                          ret AND_KILL_FRAME(1)
  1145                                  
  1146                                  L_code_ptr_is_symbol:
  1147                                          ENTER
    33 00000CB9 C8000000            <1>  enter 0, 0
    34 00000CBD 4883E4F0            <1>  and rsp, ~15
  1148 00000CC1 48837D1801                      cmp COUNT, 1
  1149 00000CC6 0F85610F0000                    jne L_error_arg_count_1
  1150 00000CCC 488B4520                        mov rax, PARAM(0)
  1151 00000CD0 803804                          cmp byte [rax], T_symbol
  1152 00000CD3 750C                            jne .L_false
  1153 00000CD5 48B8-                           mov rax, sob_boolean_true
  1153 00000CD7 [0300000000000000] 
  1154 00000CDF EB0A                            jmp .L_end
  1155                                  .L_false:
  1156 00000CE1 48B8-                           mov rax, sob_boolean_false
  1156 00000CE3 [0200000000000000] 
  1157                                  .L_end:
  1158                                          LEAVE
    38 00000CEB C9                  <1>  leave
  1159 00000CEC C21800                          ret AND_KILL_FRAME(1)
  1160                                  
  1161                                  L_code_ptr_is_vector:
  1162                                          ENTER
    33 00000CEF C8000000            <1>  enter 0, 0
    34 00000CF3 4883E4F0            <1>  and rsp, ~15
  1163 00000CF7 48837D1801                      cmp COUNT, 1
  1164 00000CFC 0F852B0F0000                    jne L_error_arg_count_1
  1165 00000D02 488B4520                        mov rax, PARAM(0)
  1166 00000D06 803822                          cmp byte [rax], T_vector
  1167 00000D09 750C                            jne .L_false
  1168 00000D0B 48B8-                           mov rax, sob_boolean_true
  1168 00000D0D [0300000000000000] 
  1169 00000D15 EB0A                            jmp .L_end
  1170                                  .L_false:
  1171 00000D17 48B8-                           mov rax, sob_boolean_false
  1171 00000D19 [0200000000000000] 
  1172                                  .L_end:
  1173                                          LEAVE
    38 00000D21 C9                  <1>  leave
  1174 00000D22 C21800                          ret AND_KILL_FRAME(1)
  1175                                  
  1176                                  L_code_ptr_is_closure:
  1177                                          ENTER
    33 00000D25 C8000000            <1>  enter 0, 0
    34 00000D29 4883E4F0            <1>  and rsp, ~15
  1178 00000D2D 48837D1801                      cmp COUNT, 1
  1179 00000D32 0F85F50E0000                    jne L_error_arg_count_1
  1180 00000D38 488B4520                        mov rax, PARAM(0)
  1181 00000D3C 803805                          cmp byte [rax], T_closure
  1182 00000D3F 750C                            jne .L_false
  1183 00000D41 48B8-                           mov rax, sob_boolean_true
  1183 00000D43 [0300000000000000] 
  1184 00000D4B EB0A                            jmp .L_end
  1185                                  .L_false:
  1186 00000D4D 48B8-                           mov rax, sob_boolean_false
  1186 00000D4F [0200000000000000] 
  1187                                  .L_end:
  1188                                          LEAVE
    38 00000D57 C9                  <1>  leave
  1189 00000D58 C21800                          ret AND_KILL_FRAME(1)
  1190                                  
  1191                                  L_code_ptr_is_real:
  1192                                          ENTER
    33 00000D5B C8000000            <1>  enter 0, 0
    34 00000D5F 4883E4F0            <1>  and rsp, ~15
  1193 00000D63 48837D1801                      cmp COUNT, 1
  1194 00000D68 0F85BF0E0000                    jne L_error_arg_count_1
  1195 00000D6E 488B4520                        mov rax, PARAM(0)
  1196 00000D72 803812                          cmp byte [rax], T_real
  1197 00000D75 750C                            jne .L_false
  1198 00000D77 48B8-                           mov rax, sob_boolean_true
  1198 00000D79 [0300000000000000] 
  1199 00000D81 EB0A                            jmp .L_end
  1200                                  .L_false:
  1201 00000D83 48B8-                           mov rax, sob_boolean_false
  1201 00000D85 [0200000000000000] 
  1202                                  .L_end:
  1203                                          LEAVE
    38 00000D8D C9                  <1>  leave
  1204 00000D8E C21800                          ret AND_KILL_FRAME(1)
  1205                                  
  1206                                  L_code_ptr_is_rational:
  1207                                          ENTER
    33 00000D91 C8000000            <1>  enter 0, 0
    34 00000D95 4883E4F0            <1>  and rsp, ~15
  1208 00000D99 48837D1801                      cmp COUNT, 1
  1209 00000D9E 0F85890E0000                    jne L_error_arg_count_1
  1210 00000DA4 488B4520                        mov rax, PARAM(0)
  1211 00000DA8 803811                          cmp byte [rax], T_rational
  1212 00000DAB 750C                            jne .L_false
  1213 00000DAD 48B8-                           mov rax, sob_boolean_true
  1213 00000DAF [0300000000000000] 
  1214 00000DB7 EB0A                            jmp .L_end
  1215                                  .L_false:
  1216 00000DB9 48B8-                           mov rax, sob_boolean_false
  1216 00000DBB [0200000000000000] 
  1217                                  .L_end:
  1218                                          LEAVE
    38 00000DC3 C9                  <1>  leave
  1219 00000DC4 C21800                          ret AND_KILL_FRAME(1)
  1220                                  
  1221                                  L_code_ptr_is_boolean:
  1222                                          ENTER
    33 00000DC7 C8000000            <1>  enter 0, 0
    34 00000DCB 4883E4F0            <1>  and rsp, ~15
  1223 00000DCF 48837D1801                      cmp COUNT, 1
  1224 00000DD4 0F85530E0000                    jne L_error_arg_count_1
  1225 00000DDA 488B4520                        mov rax, PARAM(0)
  1226 00000DDE 8A18                            mov bl, byte [rax]
  1227 00000DE0 80E308                          and bl, T_boolean
  1228 00000DE3 740C                            je .L_false
  1229 00000DE5 48B8-                           mov rax, sob_boolean_true
  1229 00000DE7 [0300000000000000] 
  1230 00000DEF EB0A                            jmp .L_end
  1231                                  .L_false:
  1232 00000DF1 48B8-                           mov rax, sob_boolean_false
  1232 00000DF3 [0200000000000000] 
  1233                                  .L_end:
  1234                                          LEAVE
    38 00000DFB C9                  <1>  leave
  1235 00000DFC C21800                          ret AND_KILL_FRAME(1)
  1236                                          
  1237                                  L_code_ptr_is_number:
  1238                                          ENTER
    33 00000DFF C8000000            <1>  enter 0, 0
    34 00000E03 4883E4F0            <1>  and rsp, ~15
  1239 00000E07 48837D1801                      cmp COUNT, 1
  1240 00000E0C 0F851B0E0000                    jne L_error_arg_count_1
  1241 00000E12 488B4520                        mov rax, PARAM(0)
  1242 00000E16 8A18                            mov bl, byte [rax]
  1243 00000E18 80E310                          and bl, T_number
  1244 00000E1B 740C                            je .L_false
  1245 00000E1D 48B8-                           mov rax, sob_boolean_true
  1245 00000E1F [0300000000000000] 
  1246 00000E27 EB0A                            jmp .L_end
  1247                                  .L_false:
  1248 00000E29 48B8-                           mov rax, sob_boolean_false
  1248 00000E2B [0200000000000000] 
  1249                                  .L_end:
  1250                                          LEAVE
    38 00000E33 C9                  <1>  leave
  1251 00000E34 C21800                          ret AND_KILL_FRAME(1)
  1252                                          
  1253                                  L_code_ptr_is_collection:
  1254                                          ENTER
    33 00000E37 C8000000            <1>  enter 0, 0
    34 00000E3B 4883E4F0            <1>  and rsp, ~15
  1255 00000E3F 48837D1801                      cmp COUNT, 1
  1256 00000E44 0F85E30D0000                    jne L_error_arg_count_1
  1257 00000E4A 488B4520                        mov rax, PARAM(0)
  1258 00000E4E 8A18                            mov bl, byte [rax]
  1259 00000E50 80E320                          and bl, T_collection
  1260 00000E53 740C                            je .L_false
  1261 00000E55 48B8-                           mov rax, sob_boolean_true
  1261 00000E57 [0300000000000000] 
  1262 00000E5F EB0A                            jmp .L_end
  1263                                  .L_false:
  1264 00000E61 48B8-                           mov rax, sob_boolean_false
  1264 00000E63 [0200000000000000] 
  1265                                  .L_end:
  1266                                          LEAVE
    38 00000E6B C9                  <1>  leave
  1267 00000E6C C21800                          ret AND_KILL_FRAME(1)
  1268                                  
  1269                                  L_code_ptr_cons:
  1270                                          ENTER
    33 00000E6F C8000000            <1>  enter 0, 0
    34 00000E73 4883E4F0            <1>  and rsp, ~15
  1271 00000E77 48837D1802                      cmp COUNT, 2
  1272 00000E7C 0F85D70D0000                    jne L_error_arg_count_2
  1273 00000E82 BF11000000                      mov rdi, (1 + 8 + 8)
  1274 00000E87 E8B5F7FFFF                      call malloc
  1275 00000E8C C60021                          mov byte [rax], T_pair
  1276 00000E8F 488B5D20                        mov rbx, PARAM(0)
  1277 00000E93 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1278 00000E97 488B5D28                        mov rbx, PARAM(1)
  1279 00000E9B 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1280                                          LEAVE
    38 00000E9F C9                  <1>  leave
  1281 00000EA0 C22000                          ret AND_KILL_FRAME(2)
  1282                                  
  1283                                  L_code_ptr_display_sexpr:
  1284                                          ENTER
    33 00000EA3 C8000000            <1>  enter 0, 0
    34 00000EA7 4883E4F0            <1>  and rsp, ~15
  1285 00000EAB 48837D1801                      cmp COUNT, 1
  1286 00000EB0 0F85770D0000                    jne L_error_arg_count_1
  1287 00000EB6 488B7D20                        mov rdi, PARAM(0)
  1288 00000EBA E89DF7FFFF                      call print_sexpr
  1289 00000EBF 48B8-                           mov rax, sob_void
  1289 00000EC1 [0000000000000000] 
  1290                                          LEAVE
    38 00000EC9 C9                  <1>  leave
  1291 00000ECA C21800                          ret AND_KILL_FRAME(1)
  1292                                  
  1293                                  L_code_ptr_write_char:
  1294                                          ENTER
    33 00000ECD C8000000            <1>  enter 0, 0
    34 00000ED1 4883E4F0            <1>  and rsp, ~15
  1295 00000ED5 48837D1801                      cmp COUNT, 1
  1296 00000EDA 0F854D0D0000                    jne L_error_arg_count_1
  1297 00000EE0 488B4520                        mov rax, PARAM(0)
  1298                                          assert_char(rax)
    42 00000EE4 803802              <1>  cmp byte [%1], %2
    43 00000EE7 0F85F00D0000        <1>  jne L_error_incorrect_type
  1299 00000EED 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1300 00000EF0 4825FF000000                    and rax, 255
  1301 00000EF6 48BF-                           mov rdi, fmt_char
  1301 00000EF8 [CB02000000000000] 
  1302 00000F00 4889C6                          mov rsi, rax
  1303 00000F03 B800000000                      mov rax, 0
  1304 00000F08 E8(00000000)                    call printf
  1305 00000F0D 48B8-                           mov rax, sob_void
  1305 00000F0F [0000000000000000] 
  1306                                          LEAVE
    38 00000F17 C9                  <1>  leave
  1307 00000F18 C21800                          ret AND_KILL_FRAME(1)
  1308                                  
  1309                                  L_code_ptr_car:
  1310                                          ENTER
    33 00000F1B C8000000            <1>  enter 0, 0
    34 00000F1F 4883E4F0            <1>  and rsp, ~15
  1311 00000F23 48837D1801                      cmp COUNT, 1
  1312 00000F28 0F85FF0C0000                    jne L_error_arg_count_1
  1313 00000F2E 488B4520                        mov rax, PARAM(0)
  1314                                          assert_pair(rax)
    42 00000F32 803821              <1>  cmp byte [%1], %2
    43 00000F35 0F85A20D0000        <1>  jne L_error_incorrect_type
  1315 00000F3B 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1316                                          LEAVE
    38 00000F3F C9                  <1>  leave
  1317 00000F40 C21800                          ret AND_KILL_FRAME(1)
  1318                                          
  1319                                  L_code_ptr_cdr:
  1320                                          ENTER
    33 00000F43 C8000000            <1>  enter 0, 0
    34 00000F47 4883E4F0            <1>  and rsp, ~15
  1321 00000F4B 48837D1801                      cmp COUNT, 1
  1322 00000F50 0F85D70C0000                    jne L_error_arg_count_1
  1323 00000F56 488B4520                        mov rax, PARAM(0)
  1324                                          assert_pair(rax)
    42 00000F5A 803821              <1>  cmp byte [%1], %2
    43 00000F5D 0F857A0D0000        <1>  jne L_error_incorrect_type
  1325 00000F63 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1326                                          LEAVE
    38 00000F67 C9                  <1>  leave
  1327 00000F68 C21800                          ret AND_KILL_FRAME(1)
  1328                                          
  1329                                  L_code_ptr_string_length:
  1330                                          ENTER
    33 00000F6B C8000000            <1>  enter 0, 0
    34 00000F6F 4883E4F0            <1>  and rsp, ~15
  1331 00000F73 48837D1801                      cmp COUNT, 1
  1332 00000F78 0F85AF0C0000                    jne L_error_arg_count_1
  1333 00000F7E 488B4520                        mov rax, PARAM(0)
  1334                                          assert_string(rax)
    42 00000F82 803803              <1>  cmp byte [%1], %2
    43 00000F85 0F85520D0000        <1>  jne L_error_incorrect_type
  1335 00000F8B 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1336 00000F8F E81F0C0000                      call make_integer
  1337                                          LEAVE
    38 00000F94 C9                  <1>  leave
  1338 00000F95 C21800                          ret AND_KILL_FRAME(1)
  1339                                  
  1340                                  L_code_ptr_vector_length:
  1341                                          ENTER
    33 00000F98 C8000000            <1>  enter 0, 0
    34 00000F9C 4883E4F0            <1>  and rsp, ~15
  1342 00000FA0 48837D1801                      cmp COUNT, 1
  1343 00000FA5 0F85820C0000                    jne L_error_arg_count_1
  1344 00000FAB 488B4520                        mov rax, PARAM(0)
  1345                                          assert_vector(rax)
    42 00000FAF 803822              <1>  cmp byte [%1], %2
    43 00000FB2 0F85250D0000        <1>  jne L_error_incorrect_type
  1346 00000FB8 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1347 00000FBC E8F20B0000                      call make_integer
  1348                                          LEAVE
    38 00000FC1 C9                  <1>  leave
  1349 00000FC2 C21800                          ret AND_KILL_FRAME(1)
  1350                                  
  1351                                  L_code_ptr_real_to_integer:
  1352                                          ENTER
    33 00000FC5 C8000000            <1>  enter 0, 0
    34 00000FC9 4883E4F0            <1>  and rsp, ~15
  1353 00000FCD 48837D1801                      cmp COUNT, 1
  1354 00000FD2 0F85550C0000                    jne L_error_arg_count_1
  1355 00000FD8 488B5D20                        mov rbx, PARAM(0)
  1356                                          assert_real(rbx)
    42 00000FDC 803B12              <1>  cmp byte [%1], %2
    43 00000FDF 0F85F80C0000        <1>  jne L_error_incorrect_type
  1357 00000FE5 F20F104301                      movsd xmm0, qword [rbx + 1]
  1358 00000FEA F2480F2CF8                      cvttsd2si rdi, xmm0
  1359 00000FEF E8BF0B0000                      call make_integer
  1360                                          LEAVE
    38 00000FF4 C9                  <1>  leave
  1361 00000FF5 C21800                          ret AND_KILL_FRAME(1)
  1362                                  
  1363                                  L_code_ptr_exit:
  1364                                          ENTER
    33 00000FF8 C8000000            <1>  enter 0, 0
    34 00000FFC 4883E4F0            <1>  and rsp, ~15
  1365 00001000 48837D1800                      cmp COUNT, 0
  1366 00001005 0F85F60B0000                    jne L_error_arg_count_0
  1367 0000100B B800000000                      mov rax, 0
  1368 00001010 E8(00000000)                    call exit
  1369                                  
  1370                                  L_code_ptr_integer_to_real:
  1371                                          ENTER
    33 00001015 C8000000            <1>  enter 0, 0
    34 00001019 4883E4F0            <1>  and rsp, ~15
  1372 0000101D 48837D1801                      cmp COUNT, 1
  1373 00001022 0F85050C0000                    jne L_error_arg_count_1
  1374 00001028 488B4520                        mov rax, PARAM(0)
  1375                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000102C 803811              <2>  cmp byte [%1], %2
    43 0000102F 0F85A80C0000        <2>  jne L_error_incorrect_type
    48 00001035 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000103A 0F859D0C0000        <1>  jne L_error_incorrect_type
  1376 00001040 FF7001                          push qword [rax + 1]
  1377 00001043 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1378 00001049 E8490B0000                      call make_real
  1379                                          LEAVE
    38 0000104E C9                  <1>  leave
  1380 0000104F C21800                          ret AND_KILL_FRAME(1)
  1381                                  
  1382                                  L_code_ptr_rational_to_real:
  1383                                          ENTER
    33 00001052 C8000000            <1>  enter 0, 0
    34 00001056 4883E4F0            <1>  and rsp, ~15
  1384 0000105A 48837D1801                      cmp COUNT, 1
  1385 0000105F 0F85C80B0000                    jne L_error_arg_count_1
  1386 00001065 488B4520                        mov rax, PARAM(0)
  1387                                          assert_rational(rax)
    42 00001069 803811              <1>  cmp byte [%1], %2
    43 0000106C 0F856B0C0000        <1>  jne L_error_incorrect_type
  1388 00001072 FF7001                          push qword [rax + 1]
  1389 00001075 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1390 0000107B FF7009                          push qword [rax + 1 + 8]
  1391 0000107E F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1392 00001084 F20F5EC1                        divsd xmm0, xmm1
  1393 00001088 E80A0B0000                      call make_real
  1394                                          LEAVE
    38 0000108D C9                  <1>  leave
  1395 0000108E C21800                          ret AND_KILL_FRAME(1)
  1396                                  
  1397                                  L_code_ptr_char_to_integer:
  1398                                          ENTER
    33 00001091 C8000000            <1>  enter 0, 0
    34 00001095 4883E4F0            <1>  and rsp, ~15
  1399 00001099 48837D1801                      cmp COUNT, 1
  1400 0000109E 0F85890B0000                    jne L_error_arg_count_1
  1401 000010A4 488B4520                        mov rax, PARAM(0)
  1402                                          assert_char(rax)
    42 000010A8 803802              <1>  cmp byte [%1], %2
    43 000010AB 0F852C0C0000        <1>  jne L_error_incorrect_type
  1403 000010B1 8A4001                          mov al, byte [rax + 1]
  1404 000010B4 4825FF000000                    and rax, 255
  1405 000010BA 4889C7                          mov rdi, rax
  1406 000010BD E8F10A0000                      call make_integer
  1407                                          LEAVE
    38 000010C2 C9                  <1>  leave
  1408 000010C3 C21800                          ret AND_KILL_FRAME(1)
  1409                                  
  1410                                  L_code_ptr_integer_to_char:
  1411                                          ENTER
    33 000010C6 C8000000            <1>  enter 0, 0
    34 000010CA 4883E4F0            <1>  and rsp, ~15
  1412 000010CE 48837D1801                      cmp COUNT, 1
  1413 000010D3 0F85540B0000                    jne L_error_arg_count_1
  1414 000010D9 488B4520                        mov rax, PARAM(0)
  1415                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010DD 803811              <2>  cmp byte [%1], %2
    43 000010E0 0F85F70B0000        <2>  jne L_error_incorrect_type
    48 000010E6 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010EB 0F85EC0B0000        <1>  jne L_error_incorrect_type
  1416 000010F1 488B5801                        mov rbx, qword [rax + 1]
  1417 000010F5 4883FB00                        cmp rbx, 0
  1418 000010F9 0F8EDA0A0000                    jle L_error_integer_range
  1419 000010FF 4881FB00010000                  cmp rbx, 256
  1420 00001106 0F8DCD0A0000                    jge L_error_integer_range
  1421 0000110C BF02000000                      mov rdi, (1 + 1)
  1422 00001111 E82BF5FFFF                      call malloc
  1423 00001116 C60002                          mov byte [rax], T_char
  1424 00001119 885801                          mov byte [rax + 1], bl
  1425                                          LEAVE
    38 0000111C C9                  <1>  leave
  1426 0000111D C21800                          ret AND_KILL_FRAME(1)
  1427                                  
  1428                                  L_code_ptr_trng:
  1429                                          ENTER
    33 00001120 C8000000            <1>  enter 0, 0
    34 00001124 4883E4F0            <1>  and rsp, ~15
  1430 00001128 48837D1800                      cmp COUNT, 0
  1431 0000112D 0F85CE0A0000                    jne L_error_arg_count_0
  1432 00001133 480FC7F7                        rdrand rdi
  1433 00001137 48D1EF                          shr rdi, 1
  1434 0000113A E8740A0000                      call make_integer
  1435                                          LEAVE
    38 0000113F C9                  <1>  leave
  1436 00001140 C21000                          ret AND_KILL_FRAME(0)
  1437                                  
  1438                                  L_code_ptr_is_zero:
  1439                                          ENTER
    33 00001143 C8000000            <1>  enter 0, 0
    34 00001147 4883E4F0            <1>  and rsp, ~15
  1440 0000114B 48837D1801                      cmp COUNT, 1
  1441 00001150 0F85D70A0000                    jne L_error_arg_count_1
  1442 00001156 488B4520                        mov rax, PARAM(0)
  1443 0000115A 803811                          cmp byte [rax], T_rational
  1444 0000115D 740A                            je .L_rational
  1445 0000115F 803812                          cmp byte [rax], T_real
  1446 00001162 740E                            je .L_real
  1447 00001164 E9740B0000                      jmp L_error_incorrect_type
  1448                                  .L_rational:
  1449 00001169 4883780100                      cmp qword [rax + 1], 0
  1450 0000116E 7420                            je .L_zero
  1451 00001170 EB12                            jmp .L_not_zero
  1452                                  .L_real:
  1453 00001172 660FEFC0                        pxor xmm0, xmm0
  1454 00001176 FF7001                          push qword [rax + 1]
  1455 00001179 F20F100C24                      movsd xmm1, qword [rsp]
  1456 0000117E 660F2EC1                        ucomisd xmm0, xmm1
  1457 00001182 740C                            je .L_zero
  1458                                  .L_not_zero:
  1459 00001184 48B8-                           mov rax, sob_boolean_false
  1459 00001186 [0200000000000000] 
  1460 0000118E EB0A                            jmp .L_end
  1461                                  .L_zero:
  1462 00001190 48B8-                           mov rax, sob_boolean_true
  1462 00001192 [0300000000000000] 
  1463                                  .L_end:
  1464                                          LEAVE
    38 0000119A C9                  <1>  leave
  1465 0000119B C21800                          ret AND_KILL_FRAME(1)
  1466                                  
  1467                                  L_code_ptr_is_integer:
  1468                                          ENTER
    33 0000119E C8000000            <1>  enter 0, 0
    34 000011A2 4883E4F0            <1>  and rsp, ~15
  1469 000011A6 48837D1801                      cmp COUNT, 1
  1470 000011AB 0F857C0A0000                    jne L_error_arg_count_1
  1471 000011B1 488B4520                        mov rax, PARAM(0)
  1472 000011B5 803811                          cmp byte [rax], T_rational
  1473 000011B8 7513                            jne .L_false
  1474 000011BA 4883780901                      cmp qword [rax + 1 + 8], 1
  1475 000011BF 750C                            jne .L_false
  1476 000011C1 48B8-                           mov rax, sob_boolean_true
  1476 000011C3 [0300000000000000] 
  1477 000011CB EB0A                            jmp .L_exit
  1478                                  .L_false:
  1479 000011CD 48B8-                           mov rax, sob_boolean_false
  1479 000011CF [0200000000000000] 
  1480                                  .L_exit:
  1481                                          LEAVE
    38 000011D7 C9                  <1>  leave
  1482 000011D8 C21800                          ret AND_KILL_FRAME(1)
  1483                                  
  1484                                  L_code_ptr_raw_bin_add_rr:
  1485                                          ENTER
    33 000011DB C8000000            <1>  enter 0, 0
    34 000011DF 4883E4F0            <1>  and rsp, ~15
  1486 000011E3 48837D1802                      cmp COUNT, 2
  1487 000011E8 0F856B0A0000                    jne L_error_arg_count_2
  1488 000011EE 488B5D20                        mov rbx, PARAM(0)
  1489                                          assert_real(rbx)
    42 000011F2 803B12              <1>  cmp byte [%1], %2
    43 000011F5 0F85E20A0000        <1>  jne L_error_incorrect_type
  1490 000011FB 488B4D28                        mov rcx, PARAM(1)
  1491                                          assert_real(rcx)
    42 000011FF 803912              <1>  cmp byte [%1], %2
    43 00001202 0F85D50A0000        <1>  jne L_error_incorrect_type
  1492 00001208 F20F104301                      movsd xmm0, qword [rbx + 1]
  1493 0000120D F20F104901                      movsd xmm1, qword [rcx + 1]
  1494 00001212 F20F58C1                        addsd xmm0, xmm1
  1495 00001216 E87C090000                      call make_real
  1496                                          LEAVE
    38 0000121B C9                  <1>  leave
  1497 0000121C C22000                          ret AND_KILL_FRAME(2)
  1498                                  
  1499                                  L_code_ptr_raw_bin_sub_rr:
  1500                                          ENTER
    33 0000121F C8000000            <1>  enter 0, 0
    34 00001223 4883E4F0            <1>  and rsp, ~15
  1501 00001227 48837D1802                      cmp COUNT, 2
  1502 0000122C 0F85270A0000                    jne L_error_arg_count_2
  1503 00001232 488B5D20                        mov rbx, PARAM(0)
  1504                                          assert_real(rbx)
    42 00001236 803B12              <1>  cmp byte [%1], %2
    43 00001239 0F859E0A0000        <1>  jne L_error_incorrect_type
  1505 0000123F 488B4D28                        mov rcx, PARAM(1)
  1506                                          assert_real(rcx)
    42 00001243 803912              <1>  cmp byte [%1], %2
    43 00001246 0F85910A0000        <1>  jne L_error_incorrect_type
  1507 0000124C F20F104301                      movsd xmm0, qword [rbx + 1]
  1508 00001251 F20F104901                      movsd xmm1, qword [rcx + 1]
  1509 00001256 F20F5CC1                        subsd xmm0, xmm1
  1510 0000125A E838090000                      call make_real
  1511                                          LEAVE
    38 0000125F C9                  <1>  leave
  1512 00001260 C22000                          ret AND_KILL_FRAME(2)
  1513                                  
  1514                                  L_code_ptr_raw_bin_mul_rr:
  1515                                          ENTER
    33 00001263 C8000000            <1>  enter 0, 0
    34 00001267 4883E4F0            <1>  and rsp, ~15
  1516 0000126B 48837D1802                      cmp COUNT, 2
  1517 00001270 0F85E3090000                    jne L_error_arg_count_2
  1518 00001276 488B5D20                        mov rbx, PARAM(0)
  1519                                          assert_real(rbx)
    42 0000127A 803B12              <1>  cmp byte [%1], %2
    43 0000127D 0F855A0A0000        <1>  jne L_error_incorrect_type
  1520 00001283 488B4D28                        mov rcx, PARAM(1)
  1521                                          assert_real(rcx)
    42 00001287 803912              <1>  cmp byte [%1], %2
    43 0000128A 0F854D0A0000        <1>  jne L_error_incorrect_type
  1522 00001290 F20F104301                      movsd xmm0, qword [rbx + 1]
  1523 00001295 F20F104901                      movsd xmm1, qword [rcx + 1]
  1524 0000129A F20F59C1                        mulsd xmm0, xmm1
  1525 0000129E E8F4080000                      call make_real
  1526                                          LEAVE
    38 000012A3 C9                  <1>  leave
  1527 000012A4 C22000                          ret AND_KILL_FRAME(2)
  1528                                  
  1529                                  L_code_ptr_raw_bin_div_rr:
  1530                                          ENTER
    33 000012A7 C8000000            <1>  enter 0, 0
    34 000012AB 4883E4F0            <1>  and rsp, ~15
  1531 000012AF 48837D1802                      cmp COUNT, 2
  1532 000012B4 0F859F090000                    jne L_error_arg_count_2
  1533 000012BA 488B5D20                        mov rbx, PARAM(0)
  1534                                          assert_real(rbx)
    42 000012BE 803B12              <1>  cmp byte [%1], %2
    43 000012C1 0F85160A0000        <1>  jne L_error_incorrect_type
  1535 000012C7 488B4D28                        mov rcx, PARAM(1)
  1536                                          assert_real(rcx)
    42 000012CB 803912              <1>  cmp byte [%1], %2
    43 000012CE 0F85090A0000        <1>  jne L_error_incorrect_type
  1537 000012D4 F20F104301                      movsd xmm0, qword [rbx + 1]
  1538 000012D9 F20F104901                      movsd xmm1, qword [rcx + 1]
  1539 000012DE 660FEFD2                        pxor xmm2, xmm2
  1540 000012E2 660F2ECA                        ucomisd xmm1, xmm2
  1541 000012E6 0F84190A0000                    je L_error_division_by_zero
  1542 000012EC F20F5EC1                        divsd xmm0, xmm1
  1543 000012F0 E8A2080000                      call make_real
  1544                                          LEAVE
    38 000012F5 C9                  <1>  leave
  1545 000012F6 C22000                          ret AND_KILL_FRAME(2)
  1546                                  
  1547                                  L_code_ptr_raw_bin_add_qq:
  1548                                          ENTER
    33 000012F9 C8000000            <1>  enter 0, 0
    34 000012FD 4883E4F0            <1>  and rsp, ~15
  1549 00001301 48837D1802                      cmp COUNT, 2
  1550 00001306 0F854D090000                    jne L_error_arg_count_2
  1551 0000130C 4C8B4520                        mov r8, PARAM(0)
  1552                                          assert_rational(r8)
    42 00001310 41803811            <1>  cmp byte [%1], %2
    43 00001314 0F85C3090000        <1>  jne L_error_incorrect_type
  1553 0000131A 4C8B4D28                        mov r9, PARAM(1)
  1554                                          assert_rational(r9)
    42 0000131E 41803911            <1>  cmp byte [%1], %2
    43 00001322 0F85B5090000        <1>  jne L_error_incorrect_type
  1555 00001328 498B4001                        mov rax, qword [r8 + 1] ; num1
  1556 0000132C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1557 00001330 4899                            cqo
  1558 00001332 48F7EB                          imul rbx
  1559 00001335 4889C6                          mov rsi, rax
  1560 00001338 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1561 0000133C 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1562 00001340 4899                            cqo
  1563 00001342 48F7EB                          imul rbx
  1564 00001345 4801C6                          add rsi, rax
  1565 00001348 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1566 0000134C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1567 00001350 4899                            cqo
  1568 00001352 48F7EB                          imul rbx
  1569 00001355 4889C7                          mov rdi, rax
  1570 00001358 E827010000                      call normalize_rational
  1571                                          LEAVE
    38 0000135D C9                  <1>  leave
  1572 0000135E C22000                          ret AND_KILL_FRAME(2)
  1573                                  
  1574                                  L_code_ptr_raw_bin_sub_qq:
  1575                                          ENTER
    33 00001361 C8000000            <1>  enter 0, 0
    34 00001365 4883E4F0            <1>  and rsp, ~15
  1576 00001369 48837D1802                      cmp COUNT, 2
  1577 0000136E 0F85E5080000                    jne L_error_arg_count_2
  1578 00001374 4C8B4520                        mov r8, PARAM(0)
  1579                                          assert_rational(r8)
    42 00001378 41803811            <1>  cmp byte [%1], %2
    43 0000137C 0F855B090000        <1>  jne L_error_incorrect_type
  1580 00001382 4C8B4D28                        mov r9, PARAM(1)
  1581                                          assert_rational(r9)
    42 00001386 41803911            <1>  cmp byte [%1], %2
    43 0000138A 0F854D090000        <1>  jne L_error_incorrect_type
  1582 00001390 498B4001                        mov rax, qword [r8 + 1] ; num1
  1583 00001394 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1584 00001398 4899                            cqo
  1585 0000139A 48F7EB                          imul rbx
  1586 0000139D 4889C6                          mov rsi, rax
  1587 000013A0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1588 000013A4 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1589 000013A8 4899                            cqo
  1590 000013AA 48F7EB                          imul rbx
  1591 000013AD 4829C6                          sub rsi, rax
  1592 000013B0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1593 000013B4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1594 000013B8 4899                            cqo
  1595 000013BA 48F7EB                          imul rbx
  1596 000013BD 4889C7                          mov rdi, rax
  1597 000013C0 E8BF000000                      call normalize_rational
  1598                                          LEAVE
    38 000013C5 C9                  <1>  leave
  1599 000013C6 C22000                          ret AND_KILL_FRAME(2)
  1600                                  
  1601                                  L_code_ptr_raw_bin_mul_qq:
  1602                                          ENTER
    33 000013C9 C8000000            <1>  enter 0, 0
    34 000013CD 4883E4F0            <1>  and rsp, ~15
  1603 000013D1 48837D1802                      cmp COUNT, 2
  1604 000013D6 0F857D080000                    jne L_error_arg_count_2
  1605 000013DC 4C8B4520                        mov r8, PARAM(0)
  1606                                          assert_rational(r8)
    42 000013E0 41803811            <1>  cmp byte [%1], %2
    43 000013E4 0F85F3080000        <1>  jne L_error_incorrect_type
  1607 000013EA 4C8B4D28                        mov r9, PARAM(1)
  1608                                          assert_rational(r9)
    42 000013EE 41803911            <1>  cmp byte [%1], %2
    43 000013F2 0F85E5080000        <1>  jne L_error_incorrect_type
  1609 000013F8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1610 000013FC 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1611 00001400 4899                            cqo
  1612 00001402 48F7EB                          imul rbx
  1613 00001405 4889C6                          mov rsi, rax
  1614 00001408 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1615 0000140C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1616 00001410 4899                            cqo
  1617 00001412 48F7EB                          imul rbx
  1618 00001415 4889C7                          mov rdi, rax
  1619 00001418 E867000000                      call normalize_rational
  1620                                          LEAVE
    38 0000141D C9                  <1>  leave
  1621 0000141E C22000                          ret AND_KILL_FRAME(2)
  1622                                          
  1623                                  L_code_ptr_raw_bin_div_qq:
  1624                                          ENTER
    33 00001421 C8000000            <1>  enter 0, 0
    34 00001425 4883E4F0            <1>  and rsp, ~15
  1625 00001429 48837D1802                      cmp COUNT, 2
  1626 0000142E 0F8525080000                    jne L_error_arg_count_2
  1627 00001434 4C8B4520                        mov r8, PARAM(0)
  1628                                          assert_rational(r8)
    42 00001438 41803811            <1>  cmp byte [%1], %2
    43 0000143C 0F859B080000        <1>  jne L_error_incorrect_type
  1629 00001442 4C8B4D28                        mov r9, PARAM(1)
  1630                                          assert_rational(r9)
    42 00001446 41803911            <1>  cmp byte [%1], %2
    43 0000144A 0F858D080000        <1>  jne L_error_incorrect_type
  1631 00001450 4983790100                      cmp qword [r9 + 1], 0
  1632 00001455 0F84AA080000                    je L_error_division_by_zero
  1633 0000145B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1634 0000145F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1635 00001463 4899                            cqo
  1636 00001465 48F7EB                          imul rbx
  1637 00001468 4889C6                          mov rsi, rax
  1638 0000146B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1639 0000146F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1640 00001473 4899                            cqo
  1641 00001475 48F7EB                          imul rbx
  1642 00001478 4889C7                          mov rdi, rax
  1643 0000147B E804000000                      call normalize_rational
  1644                                          LEAVE
    38 00001480 C9                  <1>  leave
  1645 00001481 C22000                          ret AND_KILL_FRAME(2)
  1646                                          
  1647                                  normalize_rational:
  1648 00001484 56                              push rsi
  1649 00001485 57                              push rdi
  1650 00001486 E839000000                      call gcd
  1651 0000148B 4889C3                          mov rbx, rax
  1652 0000148E 58                              pop rax
  1653 0000148F 4899                            cqo
  1654 00001491 48F7FB                          idiv rbx
  1655 00001494 4989C0                          mov r8, rax
  1656 00001497 58                              pop rax
  1657 00001498 4899                            cqo
  1658 0000149A 48F7FB                          idiv rbx
  1659 0000149D 4989C1                          mov r9, rax
  1660 000014A0 BF11000000                      mov rdi, (1 + 8 + 8)
  1661 000014A5 E897F1FFFF                      call malloc
  1662 000014AA C60011                          mov byte [rax], T_rational
  1663 000014AD 4C894801                        mov qword [rax + 1], r9
  1664 000014B1 4C894009                        mov qword [rax + 1 + 8], r8
  1665 000014B5 C3                              ret
  1666                                  
  1667                                  iabs:
  1668 000014B6 4889F8                          mov rax, rdi
  1669 000014B9 4883F800                        cmp rax, 0
  1670 000014BD 7C01                            jl .Lneg
  1671 000014BF C3                              ret
  1672                                  .Lneg:
  1673 000014C0 48F7D8                          neg rax
  1674 000014C3 C3                              ret
  1675                                  
  1676                                  gcd:
  1677 000014C4 E8EDFFFFFF                      call iabs
  1678 000014C9 4889C3                          mov rbx, rax
  1679 000014CC 4889F7                          mov rdi, rsi
  1680 000014CF E8E2FFFFFF                      call iabs
  1681 000014D4 4883F800                        cmp rax, 0
  1682 000014D8 7502                            jne .L0
  1683 000014DA 4893                            xchg rax, rbx
  1684                                  .L0:
  1685 000014DC 4883FB00                        cmp rbx, 0
  1686 000014E0 740C                            je .L1
  1687 000014E2 4899                            cqo
  1688 000014E4 48F7F3                          div rbx
  1689 000014E7 4889D0                          mov rax, rdx
  1690 000014EA 4893                            xchg rax, rbx
  1691 000014EC EBEE                            jmp .L0
  1692                                  .L1:
  1693 000014EE C3                              ret
  1694                                  
  1695                                  L_code_ptr_error:
  1696                                          ENTER
    33 000014EF C8000000            <1>  enter 0, 0
    34 000014F3 4883E4F0            <1>  and rsp, ~15
  1697 000014F7 48837D1802                      cmp COUNT, 2
  1698 000014FC 0F8557070000                    jne L_error_arg_count_2
  1699 00001502 488B7520                        mov rsi, PARAM(0)
  1700                                          assert_symbol(rsi)
    42 00001506 803E04              <1>  cmp byte [%1], %2
    43 00001509 0F85CE070000        <1>  jne L_error_incorrect_type
  1701 0000150F 488B7528                        mov rsi, PARAM(1)
  1702                                          assert_string(rsi)
    42 00001513 803E03              <1>  cmp byte [%1], %2
    43 00001516 0F85C1070000        <1>  jne L_error_incorrect_type
  1703 0000151C 48BF-                           mov rdi, fmt_scheme_error_part_1
  1703 0000151E [0304000000000000] 
  1704 00001526 B800000000                      mov rax, 0
  1705 0000152B E8(00000000)                    call printf
  1706 00001530 488B7D20                        mov rdi, PARAM(0)
  1707 00001534 E823F1FFFF                      call print_sexpr
  1708 00001539 48BF-                           mov rdi, fmt_scheme_error_part_2
  1708 0000153B [1704000000000000] 
  1709 00001543 B800000000                      mov rax, 0
  1710 00001548 E8(00000000)                    call printf
  1711 0000154D 488B4528                        mov rax, PARAM(1)       ; sob_string
  1712 00001551 BE01000000                      mov rsi, 1              ; size = 1 byte
  1713 00001556 488B5001                        mov rdx, qword [rax + 1] ; length
  1714 0000155A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1715 0000155E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1716 00001566 E8(00000000)                    call fwrite
  1717 0000156B 48BF-                           mov rdi, fmt_scheme_error_part_3
  1717 0000156D [5904000000000000] 
  1718 00001575 B800000000                      mov rax, 0
  1719 0000157A E8(00000000)                    call printf
  1720 0000157F 48C7C0F7FFFFFF                  mov rax, -9
  1721 00001586 E8(00000000)                    call exit
  1722                                  
  1723                                  L_code_ptr_raw_less_than_rr:
  1724                                          ENTER
    33 0000158B C8000000            <1>  enter 0, 0
    34 0000158F 4883E4F0            <1>  and rsp, ~15
  1725 00001593 48837D1802                      cmp COUNT, 2
  1726 00001598 0F85BB060000                    jne L_error_arg_count_2
  1727 0000159E 488B7520                        mov rsi, PARAM(0)
  1728                                          assert_real(rsi)
    42 000015A2 803E12              <1>  cmp byte [%1], %2
    43 000015A5 0F8532070000        <1>  jne L_error_incorrect_type
  1729 000015AB 488B7D28                        mov rdi, PARAM(1)
  1730                                          assert_real(rdi)
    42 000015AF 803F12              <1>  cmp byte [%1], %2
    43 000015B2 0F8525070000        <1>  jne L_error_incorrect_type
  1731 000015B8 F20F104601                      movsd xmm0, qword [rsi + 1]
  1732 000015BD F20F104F01                      movsd xmm1, qword [rdi + 1]
  1733 000015C2 660F2FC1                        comisd xmm0, xmm1
  1734 000015C6 730C                            jae .L_false
  1735 000015C8 48B8-                           mov rax, sob_boolean_true
  1735 000015CA [0300000000000000] 
  1736 000015D2 EB0A                            jmp .L_exit
  1737                                  .L_false:
  1738 000015D4 48B8-                           mov rax, sob_boolean_false
  1738 000015D6 [0200000000000000] 
  1739                                  .L_exit:
  1740                                          LEAVE
    38 000015DE C9                  <1>  leave
  1741 000015DF C22000                          ret AND_KILL_FRAME(2)
  1742                                          
  1743                                  L_code_ptr_raw_less_than_qq:
  1744                                          ENTER
    33 000015E2 C8000000            <1>  enter 0, 0
    34 000015E6 4883E4F0            <1>  and rsp, ~15
  1745 000015EA 48837D1802                      cmp COUNT, 2
  1746 000015EF 0F8564060000                    jne L_error_arg_count_2
  1747 000015F5 488B7520                        mov rsi, PARAM(0)
  1748                                          assert_rational(rsi)
    42 000015F9 803E11              <1>  cmp byte [%1], %2
    43 000015FC 0F85DB060000        <1>  jne L_error_incorrect_type
  1749 00001602 488B7D28                        mov rdi, PARAM(1)
  1750                                          assert_rational(rdi)
    42 00001606 803F11              <1>  cmp byte [%1], %2
    43 00001609 0F85CE060000        <1>  jne L_error_incorrect_type
  1751 0000160F 488B4601                        mov rax, qword [rsi + 1] ; num1
  1752 00001613 4899                            cqo
  1753 00001615 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1754 00001619 4889C1                          mov rcx, rax
  1755 0000161C 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1756 00001620 4899                            cqo
  1757 00001622 48F76F01                        imul qword [rdi + 1]          ; num2
  1758 00001626 4829C1                          sub rcx, rax
  1759 00001629 7D0C                            jge .L_false
  1760 0000162B 48B8-                           mov rax, sob_boolean_true
  1760 0000162D [0300000000000000] 
  1761 00001635 EB0A                            jmp .L_exit
  1762                                  .L_false:
  1763 00001637 48B8-                           mov rax, sob_boolean_false
  1763 00001639 [0200000000000000] 
  1764                                  .L_exit:
  1765                                          LEAVE
    38 00001641 C9                  <1>  leave
  1766 00001642 C22000                          ret AND_KILL_FRAME(2)
  1767                                  
  1768                                  L_code_ptr_raw_equal_rr:
  1769                                          ENTER
    33 00001645 C8000000            <1>  enter 0, 0
    34 00001649 4883E4F0            <1>  and rsp, ~15
  1770 0000164D 48837D1802                      cmp COUNT, 2
  1771 00001652 0F8501060000                    jne L_error_arg_count_2
  1772 00001658 488B7520                        mov rsi, PARAM(0)
  1773                                          assert_real(rsi)
    42 0000165C 803E12              <1>  cmp byte [%1], %2
    43 0000165F 0F8578060000        <1>  jne L_error_incorrect_type
  1774 00001665 488B7D28                        mov rdi, PARAM(1)
  1775                                          assert_real(rdi)
    42 00001669 803F12              <1>  cmp byte [%1], %2
    43 0000166C 0F856B060000        <1>  jne L_error_incorrect_type
  1776 00001672 F20F104601                      movsd xmm0, qword [rsi + 1]
  1777 00001677 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1778 0000167C 660F2FC1                        comisd xmm0, xmm1
  1779 00001680 750C                            jne .L_false
  1780 00001682 48B8-                           mov rax, sob_boolean_true
  1780 00001684 [0300000000000000] 
  1781 0000168C EB0A                            jmp .L_exit
  1782                                  .L_false:
  1783 0000168E 48B8-                           mov rax, sob_boolean_false
  1783 00001690 [0200000000000000] 
  1784                                  .L_exit:
  1785                                          LEAVE
    38 00001698 C9                  <1>  leave
  1786 00001699 C22000                          ret AND_KILL_FRAME(2)
  1787                                          
  1788                                  L_code_ptr_raw_equal_qq:
  1789                                          ENTER
    33 0000169C C8000000            <1>  enter 0, 0
    34 000016A0 4883E4F0            <1>  and rsp, ~15
  1790 000016A4 48837D1802                      cmp COUNT, 2
  1791 000016A9 0F85AA050000                    jne L_error_arg_count_2
  1792 000016AF 488B7520                        mov rsi, PARAM(0)
  1793                                          assert_rational(rsi)
    42 000016B3 803E11              <1>  cmp byte [%1], %2
    43 000016B6 0F8521060000        <1>  jne L_error_incorrect_type
  1794 000016BC 488B7D28                        mov rdi, PARAM(1)
  1795                                          assert_rational(rdi)
    42 000016C0 803F11              <1>  cmp byte [%1], %2
    43 000016C3 0F8514060000        <1>  jne L_error_incorrect_type
  1796 000016C9 488B4601                        mov rax, qword [rsi + 1] ; num1
  1797 000016CD 4899                            cqo
  1798 000016CF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1799 000016D3 4889C1                          mov rcx, rax
  1800 000016D6 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1801 000016DA 4899                            cqo
  1802 000016DC 48F76F01                        imul qword [rdi + 1]          ; num2
  1803 000016E0 4829C1                          sub rcx, rax
  1804 000016E3 750C                            jne .L_false
  1805 000016E5 48B8-                           mov rax, sob_boolean_true
  1805 000016E7 [0300000000000000] 
  1806 000016EF EB0A                            jmp .L_exit
  1807                                  .L_false:
  1808 000016F1 48B8-                           mov rax, sob_boolean_false
  1808 000016F3 [0200000000000000] 
  1809                                  .L_exit:
  1810                                          LEAVE
    38 000016FB C9                  <1>  leave
  1811 000016FC C22000                          ret AND_KILL_FRAME(2)
  1812                                  
  1813                                  L_code_ptr_quotient:
  1814                                          ENTER
    33 000016FF C8000000            <1>  enter 0, 0
    34 00001703 4883E4F0            <1>  and rsp, ~15
  1815 00001707 48837D1802                      cmp COUNT, 2
  1816 0000170C 0F8547050000                    jne L_error_arg_count_2
  1817 00001712 488B7520                        mov rsi, PARAM(0)
  1818                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001716 803E11              <2>  cmp byte [%1], %2
    43 00001719 0F85BE050000        <2>  jne L_error_incorrect_type
    48 0000171F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001724 0F85B3050000        <1>  jne L_error_incorrect_type
  1819 0000172A 488B7D28                        mov rdi, PARAM(1)
  1820                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000172E 803F11              <2>  cmp byte [%1], %2
    43 00001731 0F85A6050000        <2>  jne L_error_incorrect_type
    48 00001737 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000173C 0F859B050000        <1>  jne L_error_incorrect_type
  1821 00001742 488B4601                        mov rax, qword [rsi + 1]
  1822 00001746 488B5F01                        mov rbx, qword [rdi + 1]
  1823 0000174A 4883FB00                        cmp rbx, 0
  1824 0000174E 0F84B1050000                    je L_error_division_by_zero
  1825 00001754 4899                            cqo
  1826 00001756 48F7FB                          idiv rbx
  1827 00001759 4889C7                          mov rdi, rax
  1828 0000175C E852040000                      call make_integer
  1829                                          LEAVE
    38 00001761 C9                  <1>  leave
  1830 00001762 C22000                          ret AND_KILL_FRAME(2)
  1831                                          
  1832                                  L_code_ptr_remainder:
  1833                                          ENTER
    33 00001765 C8000000            <1>  enter 0, 0
    34 00001769 4883E4F0            <1>  and rsp, ~15
  1834 0000176D 48837D1802                      cmp COUNT, 2
  1835 00001772 0F85E1040000                    jne L_error_arg_count_2
  1836 00001778 488B7520                        mov rsi, PARAM(0)
  1837                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000177C 803E11              <2>  cmp byte [%1], %2
    43 0000177F 0F8558050000        <2>  jne L_error_incorrect_type
    48 00001785 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000178A 0F854D050000        <1>  jne L_error_incorrect_type
  1838 00001790 488B7D28                        mov rdi, PARAM(1)
  1839                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001794 803F11              <2>  cmp byte [%1], %2
    43 00001797 0F8540050000        <2>  jne L_error_incorrect_type
    48 0000179D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017A2 0F8535050000        <1>  jne L_error_incorrect_type
  1840 000017A8 488B4601                        mov rax, qword [rsi + 1]
  1841 000017AC 488B5F01                        mov rbx, qword [rdi + 1]
  1842 000017B0 4883FB00                        cmp rbx, 0
  1843 000017B4 0F844B050000                    je L_error_division_by_zero
  1844 000017BA 4899                            cqo
  1845 000017BC 48F7FB                          idiv rbx
  1846 000017BF 4889D7                          mov rdi, rdx
  1847 000017C2 E8EC030000                      call make_integer
  1848                                          LEAVE
    38 000017C7 C9                  <1>  leave
  1849 000017C8 C22000                          ret AND_KILL_FRAME(2)
  1850                                  
  1851                                  L_code_ptr_set_car:
  1852                                          ENTER
    33 000017CB C8000000            <1>  enter 0, 0
    34 000017CF 4883E4F0            <1>  and rsp, ~15
  1853 000017D3 48837D1802                      cmp COUNT, 2
  1854 000017D8 0F857B040000                    jne L_error_arg_count_2
  1855 000017DE 488B4520                        mov rax, PARAM(0)
  1856                                          assert_pair(rax)
    42 000017E2 803821              <1>  cmp byte [%1], %2
    43 000017E5 0F85F2040000        <1>  jne L_error_incorrect_type
  1857 000017EB 488B5D28                        mov rbx, PARAM(1)
  1858 000017EF 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1859 000017F3 48B8-                           mov rax, sob_void
  1859 000017F5 [0000000000000000] 
  1860                                          LEAVE
    38 000017FD C9                  <1>  leave
  1861 000017FE C22000                          ret AND_KILL_FRAME(2)
  1862                                  
  1863                                  L_code_ptr_set_cdr:
  1864                                          ENTER
    33 00001801 C8000000            <1>  enter 0, 0
    34 00001805 4883E4F0            <1>  and rsp, ~15
  1865 00001809 48837D1802                      cmp COUNT, 2
  1866 0000180E 0F8545040000                    jne L_error_arg_count_2
  1867 00001814 488B4520                        mov rax, PARAM(0)
  1868                                          assert_pair(rax)
    42 00001818 803821              <1>  cmp byte [%1], %2
    43 0000181B 0F85BC040000        <1>  jne L_error_incorrect_type
  1869 00001821 488B5D28                        mov rbx, PARAM(1)
  1870 00001825 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1871 00001829 48B8-                           mov rax, sob_void
  1871 0000182B [0000000000000000] 
  1872                                          LEAVE
    38 00001833 C9                  <1>  leave
  1873 00001834 C22000                          ret AND_KILL_FRAME(2)
  1874                                  
  1875                                  L_code_ptr_string_ref:
  1876                                          ENTER
    33 00001837 C8000000            <1>  enter 0, 0
    34 0000183B 4883E4F0            <1>  and rsp, ~15
  1877 0000183F 48837D1802                      cmp COUNT, 2
  1878 00001844 0F850F040000                    jne L_error_arg_count_2
  1879 0000184A 488B7D20                        mov rdi, PARAM(0)
  1880                                          assert_string(rdi)
    42 0000184E 803F03              <1>  cmp byte [%1], %2
    43 00001851 0F8586040000        <1>  jne L_error_incorrect_type
  1881 00001857 488B7528                        mov rsi, PARAM(1)
  1882                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000185B 803E11              <2>  cmp byte [%1], %2
    43 0000185E 0F8579040000        <2>  jne L_error_incorrect_type
    48 00001864 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001869 0F856E040000        <1>  jne L_error_incorrect_type
  1883 0000186F 488B5701                        mov rdx, qword [rdi + 1]
  1884 00001873 488B4E01                        mov rcx, qword [rsi + 1]
  1885 00001877 4839D1                          cmp rcx, rdx
  1886 0000187A 0F8D59030000                    jge L_error_integer_range
  1887 00001880 4883F900                        cmp rcx, 0
  1888 00001884 0F8C4F030000                    jl L_error_integer_range
  1889 0000188A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1890 0000188E BF02000000                      mov rdi, 2
  1891 00001893 E8A9EDFFFF                      call malloc
  1892 00001898 C60002                          mov byte [rax], T_char
  1893 0000189B 885801                          mov byte [rax + 1], bl
  1894                                          LEAVE
    38 0000189E C9                  <1>  leave
  1895 0000189F C22000                          ret AND_KILL_FRAME(2)
  1896                                  
  1897                                  L_code_ptr_vector_ref:
  1898                                          ENTER
    33 000018A2 C8000000            <1>  enter 0, 0
    34 000018A6 4883E4F0            <1>  and rsp, ~15
  1899 000018AA 48837D1802                      cmp COUNT, 2
  1900 000018AF 0F85A4030000                    jne L_error_arg_count_2
  1901 000018B5 488B7D20                        mov rdi, PARAM(0)
  1902                                          assert_vector(rdi)
    42 000018B9 803F22              <1>  cmp byte [%1], %2
    43 000018BC 0F851B040000        <1>  jne L_error_incorrect_type
  1903 000018C2 488B7528                        mov rsi, PARAM(1)
  1904                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018C6 803E11              <2>  cmp byte [%1], %2
    43 000018C9 0F850E040000        <2>  jne L_error_incorrect_type
    48 000018CF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018D4 0F8503040000        <1>  jne L_error_incorrect_type
  1905 000018DA 488B5701                        mov rdx, qword [rdi + 1]
  1906 000018DE 488B4E01                        mov rcx, qword [rsi + 1]
  1907 000018E2 4839D1                          cmp rcx, rdx
  1908 000018E5 0F8DEE020000                    jge L_error_integer_range
  1909 000018EB 4883F900                        cmp rcx, 0
  1910 000018EF 0F8CE4020000                    jl L_error_integer_range
  1911 000018F5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1912                                          LEAVE
    38 000018FA C9                  <1>  leave
  1913 000018FB C22000                          ret AND_KILL_FRAME(2)
  1914                                  
  1915                                  L_code_ptr_vector_set:
  1916                                          ENTER
    33 000018FE C8000000            <1>  enter 0, 0
    34 00001902 4883E4F0            <1>  and rsp, ~15
  1917 00001906 48837D1803                      cmp COUNT, 3
  1918 0000190B 0F85A0030000                    jne L_error_arg_count_3
  1919 00001911 488B7D20                        mov rdi, PARAM(0)
  1920                                          assert_vector(rdi)
    42 00001915 803F22              <1>  cmp byte [%1], %2
    43 00001918 0F85BF030000        <1>  jne L_error_incorrect_type
  1921 0000191E 488B7528                        mov rsi, PARAM(1)
  1922                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001922 803E11              <2>  cmp byte [%1], %2
    43 00001925 0F85B2030000        <2>  jne L_error_incorrect_type
    48 0000192B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001930 0F85A7030000        <1>  jne L_error_incorrect_type
  1923 00001936 488B5701                        mov rdx, qword [rdi + 1]
  1924 0000193A 488B4E01                        mov rcx, qword [rsi + 1]
  1925 0000193E 4839D1                          cmp rcx, rdx
  1926 00001941 0F8D92020000                    jge L_error_integer_range
  1927 00001947 4883F900                        cmp rcx, 0
  1928 0000194B 0F8C88020000                    jl L_error_integer_range
  1929 00001951 488B4530                        mov rax, PARAM(2)
  1930 00001955 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1931 0000195A 48B8-                           mov rax, sob_void
  1931 0000195C [0000000000000000] 
  1932                                          LEAVE
    38 00001964 C9                  <1>  leave
  1933 00001965 C22800                          ret AND_KILL_FRAME(3)
  1934                                  
  1935                                  L_code_ptr_string_set:
  1936                                          ENTER
    33 00001968 C8000000            <1>  enter 0, 0
    34 0000196C 4883E4F0            <1>  and rsp, ~15
  1937 00001970 48837D1803                      cmp COUNT, 3
  1938 00001975 0F8536030000                    jne L_error_arg_count_3
  1939 0000197B 488B7D20                        mov rdi, PARAM(0)
  1940                                          assert_string(rdi)
    42 0000197F 803F03              <1>  cmp byte [%1], %2
    43 00001982 0F8555030000        <1>  jne L_error_incorrect_type
  1941 00001988 488B7528                        mov rsi, PARAM(1)
  1942                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000198C 803E11              <2>  cmp byte [%1], %2
    43 0000198F 0F8548030000        <2>  jne L_error_incorrect_type
    48 00001995 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000199A 0F853D030000        <1>  jne L_error_incorrect_type
  1943 000019A0 488B5701                        mov rdx, qword [rdi + 1]
  1944 000019A4 488B4E01                        mov rcx, qword [rsi + 1]
  1945 000019A8 4839D1                          cmp rcx, rdx
  1946 000019AB 0F8D28020000                    jge L_error_integer_range
  1947 000019B1 4883F900                        cmp rcx, 0
  1948 000019B5 0F8C1E020000                    jl L_error_integer_range
  1949 000019BB 488B4530                        mov rax, PARAM(2)
  1950                                          assert_char(rax)
    42 000019BF 803802              <1>  cmp byte [%1], %2
    43 000019C2 0F8515030000        <1>  jne L_error_incorrect_type
  1951 000019C8 8A4001                          mov al, byte [rax + 1]
  1952 000019CB 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1953 000019CF 48B8-                           mov rax, sob_void
  1953 000019D1 [0000000000000000] 
  1954                                          LEAVE
    38 000019D9 C9                  <1>  leave
  1955 000019DA C22800                          ret AND_KILL_FRAME(3)
  1956                                  
  1957                                  L_code_ptr_make_vector:
  1958                                          ENTER
    33 000019DD C8000000            <1>  enter 0, 0
    34 000019E1 4883E4F0            <1>  and rsp, ~15
  1959 000019E5 48837D1802                      cmp COUNT, 2
  1960 000019EA 0F8569020000                    jne L_error_arg_count_2
  1961 000019F0 488B4D20                        mov rcx, PARAM(0)
  1962                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000019F4 803911              <2>  cmp byte [%1], %2
    43 000019F7 0F85E0020000        <2>  jne L_error_incorrect_type
    48 000019FD 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A02 0F85D5020000        <1>  jne L_error_incorrect_type
  1963 00001A08 488B4901                        mov rcx, qword [rcx + 1]
  1964 00001A0C 4883F900                        cmp rcx, 0
  1965 00001A10 0F8CC3010000                    jl L_error_integer_range
  1966 00001A16 488B5528                        mov rdx, PARAM(1)
  1967 00001A1A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1968 00001A22 E81AECFFFF                      call malloc
  1969 00001A27 C60022                          mov byte [rax], T_vector
  1970 00001A2A 48894801                        mov qword [rax + 1], rcx
  1971 00001A2E 41B800000000                    mov r8, 0
  1972                                  .L0:
  1973 00001A34 4939C8                          cmp r8, rcx
  1974 00001A37 740A                            je .L1
  1975 00001A39 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1976 00001A3E 49FFC0                          inc r8
  1977 00001A41 EBF1                            jmp .L0
  1978                                  .L1:
  1979                                          LEAVE
    38 00001A43 C9                  <1>  leave
  1980 00001A44 C22000                          ret AND_KILL_FRAME(2)
  1981                                          
  1982                                  L_code_ptr_make_string:
  1983                                          ENTER
    33 00001A47 C8000000            <1>  enter 0, 0
    34 00001A4B 4883E4F0            <1>  and rsp, ~15
  1984 00001A4F 48837D1802                      cmp COUNT, 2
  1985 00001A54 0F85FF010000                    jne L_error_arg_count_2
  1986 00001A5A 488B4D20                        mov rcx, PARAM(0)
  1987                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A5E 803911              <2>  cmp byte [%1], %2
    43 00001A61 0F8576020000        <2>  jne L_error_incorrect_type
    48 00001A67 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A6C 0F856B020000        <1>  jne L_error_incorrect_type
  1988 00001A72 488B4901                        mov rcx, qword [rcx + 1]
  1989 00001A76 4883F900                        cmp rcx, 0
  1990 00001A7A 0F8C59010000                    jl L_error_integer_range
  1991 00001A80 488B5528                        mov rdx, PARAM(1)
  1992                                          assert_char(rdx)
    42 00001A84 803A02              <1>  cmp byte [%1], %2
    43 00001A87 0F8550020000        <1>  jne L_error_incorrect_type
  1993 00001A8D 8A5201                          mov dl, byte [rdx + 1]
  1994 00001A90 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  1995 00001A94 E8A8EBFFFF                      call malloc
  1996 00001A99 C60003                          mov byte [rax], T_string
  1997 00001A9C 48894801                        mov qword [rax + 1], rcx
  1998 00001AA0 41B800000000                    mov r8, 0
  1999                                  .L0:
  2000 00001AA6 4939C8                          cmp r8, rcx
  2001 00001AA9 740A                            je .L1
  2002 00001AAB 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2003 00001AB0 49FFC0                          inc r8
  2004 00001AB3 EBF1                            jmp .L0
  2005                                  .L1:
  2006                                          LEAVE
    38 00001AB5 C9                  <1>  leave
  2007 00001AB6 C22000                          ret AND_KILL_FRAME(2)
  2008                                  
  2009                                  L_code_ptr_numerator:
  2010                                          ENTER
    33 00001AB9 C8000000            <1>  enter 0, 0
    34 00001ABD 4883E4F0            <1>  and rsp, ~15
  2011 00001AC1 48837D1801                      cmp COUNT, 1
  2012 00001AC6 0F8561010000                    jne L_error_arg_count_1
  2013 00001ACC 488B4520                        mov rax, PARAM(0)
  2014                                          assert_rational(rax)
    42 00001AD0 803811              <1>  cmp byte [%1], %2
    43 00001AD3 0F8504020000        <1>  jne L_error_incorrect_type
  2015 00001AD9 488B7801                        mov rdi, qword [rax + 1]
  2016 00001ADD E8D1000000                      call make_integer
  2017                                          LEAVE
    38 00001AE2 C9                  <1>  leave
  2018 00001AE3 C21800                          ret AND_KILL_FRAME(1)
  2019                                          
  2020                                  L_code_ptr_denominator:
  2021                                          ENTER
    33 00001AE6 C8000000            <1>  enter 0, 0
    34 00001AEA 4883E4F0            <1>  and rsp, ~15
  2022 00001AEE 48837D1801                      cmp COUNT, 1
  2023 00001AF3 0F8534010000                    jne L_error_arg_count_1
  2024 00001AF9 488B4520                        mov rax, PARAM(0)
  2025                                          assert_rational(rax)
    42 00001AFD 803811              <1>  cmp byte [%1], %2
    43 00001B00 0F85D7010000        <1>  jne L_error_incorrect_type
  2026 00001B06 488B7809                        mov rdi, qword [rax + 1 + 8]
  2027 00001B0A E8A4000000                      call make_integer
  2028                                          LEAVE
    38 00001B0F C9                  <1>  leave
  2029 00001B10 C21800                          ret AND_KILL_FRAME(1)
  2030                                  
  2031                                  L_code_ptr_eq:
  2032                                  	ENTER
    33 00001B13 C8000000            <1>  enter 0, 0
    34 00001B17 4883E4F0            <1>  and rsp, ~15
  2033 00001B1B 48837D1802              	cmp COUNT, 2
  2034 00001B20 0F8533010000            	jne L_error_arg_count_2
  2035 00001B26 488B7D20                	mov rdi, PARAM(0)
  2036 00001B2A 488B7528                	mov rsi, PARAM(1)
  2037 00001B2E 4839F7                  	cmp rdi, rsi
  2038 00001B31 744A                    	je .L_eq_true
  2039 00001B33 8A17                    	mov dl, byte [rdi]
  2040 00001B35 3A16                    	cmp dl, byte [rsi]
  2041 00001B37 7550                    	jne .L_eq_false
  2042 00001B39 80FA02                  	cmp dl, T_char
  2043 00001B3C 7437                    	je .L_char
  2044 00001B3E 80FA04                  	cmp dl, T_symbol
  2045 00001B41 742A                    	je .L_symbol
  2046 00001B43 80FA12                  	cmp dl, T_real
  2047 00001B46 741D                    	je .L_real
  2048 00001B48 80FA11                  	cmp dl, T_rational
  2049 00001B4B 7402                    	je .L_rational
  2050 00001B4D EB3A                    	jmp .L_eq_false
  2051                                  .L_rational:
  2052 00001B4F 488B4601                	mov rax, qword [rsi + 1]
  2053 00001B53 483B4701                	cmp rax, qword [rdi + 1]
  2054 00001B57 7530                    	jne .L_eq_false
  2055 00001B59 488B4609                	mov rax, qword [rsi + 1 + 8]
  2056 00001B5D 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2057 00001B61 7526                    	jne .L_eq_false
  2058 00001B63 EB18                    	jmp .L_eq_true
  2059                                  .L_real:
  2060 00001B65 488B4601                	mov rax, qword [rsi + 1]
  2061 00001B69 483B4701                	cmp rax, qword [rdi + 1]
  2062                                  .L_symbol:
  2063                                  	; never reached, because symbols are static!
  2064                                  	; but I'm keeping it in case, I'll ever change
  2065                                  	; the implementation
  2066 00001B6D 488B4601                	mov rax, qword [rsi + 1]
  2067 00001B71 483B4701                	cmp rax, qword [rdi + 1]
  2068                                  .L_char:
  2069 00001B75 8A5E01                  	mov bl, byte [rsi + 1]
  2070 00001B78 3A5F01                  	cmp bl, byte [rdi + 1]
  2071 00001B7B 750C                    	jne .L_eq_false
  2072                                  .L_eq_true:
  2073 00001B7D 48B8-                   	mov rax, sob_boolean_true
  2073 00001B7F [0300000000000000] 
  2074 00001B87 EB0A                    	jmp .L_eq_exit
  2075                                  .L_eq_false:
  2076 00001B89 48B8-                   	mov rax, sob_boolean_false
  2076 00001B8B [0200000000000000] 
  2077                                  .L_eq_exit:
  2078                                  	LEAVE
    38 00001B93 C9                  <1>  leave
  2079 00001B94 C22000                  	ret AND_KILL_FRAME(2)
  2080                                  
  2081                                  make_real:
  2082                                          ENTER
    33 00001B97 C8000000            <1>  enter 0, 0
    34 00001B9B 4883E4F0            <1>  and rsp, ~15
  2083 00001B9F BF09000000                      mov rdi, (1 + 8)
  2084 00001BA4 E898EAFFFF                      call malloc
  2085 00001BA9 C60012                          mov byte [rax], T_real
  2086 00001BAC F20F114001                      movsd qword [rax + 1], xmm0
  2087                                          LEAVE
    38 00001BB1 C9                  <1>  leave
  2088 00001BB2 C3                              ret
  2089                                          
  2090                                  make_integer:
  2091                                          ENTER
    33 00001BB3 C8000000            <1>  enter 0, 0
    34 00001BB7 4883E4F0            <1>  and rsp, ~15
  2092 00001BBB 4889FE                          mov rsi, rdi
  2093 00001BBE BF11000000                      mov rdi, (1 + 8 + 8)
  2094 00001BC3 E879EAFFFF                      call malloc
  2095 00001BC8 C60011                          mov byte [rax], T_rational
  2096 00001BCB 48897001                        mov qword [rax + 1], rsi
  2097 00001BCF 48C7400901000000                mov qword [rax + 1 + 8], 1
  2098                                          LEAVE
    38 00001BD7 C9                  <1>  leave
  2099 00001BD8 C3                              ret
  2100                                          
  2101                                  L_error_integer_range:
  2102 00001BD9 488B3C25[00000000]              mov rdi, qword [stderr]
  2103 00001BE1 48BE-                           mov rsi, fmt_integer_range
  2103 00001BE3 [D003000000000000] 
  2104 00001BEB B800000000                      mov rax, 0
  2105 00001BF0 E8(00000000)                    call fprintf
  2106 00001BF5 48C7C0FBFFFFFF                  mov rax, -5
  2107 00001BFC E8(00000000)                    call exit
  2108                                  
  2109                                  L_error_arg_count_0:
  2110 00001C01 488B3C25[00000000]              mov rdi, qword [stderr]
  2111 00001C09 48BE-                           mov rsi, fmt_arg_count_0
  2111 00001C0B [CE02000000000000] 
  2112 00001C13 488B5518                        mov rdx, COUNT
  2113 00001C17 B800000000                      mov rax, 0
  2114 00001C1C E8(00000000)                    call fprintf
  2115 00001C21 48C7C0FDFFFFFF                  mov rax, -3
  2116 00001C28 E8(00000000)                    call exit
  2117                                  
  2118                                  L_error_arg_count_1:
  2119 00001C2D 488B3C25[00000000]              mov rdi, qword [stderr]
  2120 00001C35 48BE-                           mov rsi, fmt_arg_count_1
  2120 00001C37 [F602000000000000] 
  2121 00001C3F 488B5518                        mov rdx, COUNT
  2122 00001C43 B800000000                      mov rax, 0
  2123 00001C48 E8(00000000)                    call fprintf
  2124 00001C4D 48C7C0FDFFFFFF                  mov rax, -3
  2125 00001C54 E8(00000000)                    call exit
  2126                                  
  2127                                  L_error_arg_count_2:
  2128 00001C59 488B3C25[00000000]              mov rdi, qword [stderr]
  2129 00001C61 48BE-                           mov rsi, fmt_arg_count_2
  2129 00001C63 [5C03000000000000] 
  2130 00001C6B 488B5518                        mov rdx, COUNT
  2131 00001C6F B800000000                      mov rax, 0
  2132 00001C74 E8(00000000)                    call fprintf
  2133 00001C79 48C7C0FDFFFFFF                  mov rax, -3
  2134 00001C80 E8(00000000)                    call exit
  2135                                  
  2136                                  L_error_arg_count_12:
  2137 00001C85 488B3C25[00000000]              mov rdi, qword [stderr]
  2138 00001C8D 48BE-                           mov rsi, fmt_arg_count_12
  2138 00001C8F [1C03000000000000] 
  2139 00001C97 488B5518                        mov rdx, COUNT
  2140 00001C9B B800000000                      mov rax, 0
  2141 00001CA0 E8(00000000)                    call fprintf
  2142 00001CA5 48C7C0FDFFFFFF                  mov rax, -3
  2143 00001CAC E8(00000000)                    call exit
  2144                                  
  2145                                  L_error_arg_count_3:
  2146 00001CB1 488B3C25[00000000]              mov rdi, qword [stderr]
  2147 00001CB9 48BE-                           mov rsi, fmt_arg_count_3
  2147 00001CBB [8303000000000000] 
  2148 00001CC3 488B5518                        mov rdx, COUNT
  2149 00001CC7 B800000000                      mov rax, 0
  2150 00001CCC E8(00000000)                    call fprintf
  2151 00001CD1 48C7C0FDFFFFFF                  mov rax, -3
  2152 00001CD8 E8(00000000)                    call exit
  2153                                          
  2154                                  L_error_incorrect_type:
  2155 00001CDD 488B3C25[00000000]              mov rdi, qword [stderr]
  2156 00001CE5 48BE-                           mov rsi, fmt_type
  2156 00001CE7 [AC03000000000000] 
  2157 00001CEF B800000000                      mov rax, 0
  2158 00001CF4 E8(00000000)                    call fprintf
  2159 00001CF9 48C7C0FCFFFFFF                  mov rax, -4
  2160 00001D00 E8(00000000)                    call exit
  2161                                  
  2162                                  L_error_division_by_zero:
  2163 00001D05 488B3C25[00000000]              mov rdi, qword [stderr]
  2164 00001D0D 48BE-                           mov rsi, fmt_division_by_zero
  2164 00001D0F [ED03000000000000] 
  2165 00001D17 B800000000                      mov rax, 0
  2166 00001D1C E8(00000000)                    call fprintf
  2167 00001D21 48C7C0F8FFFFFF                  mov rax, -8
  2168 00001D28 E8(00000000)                    call exit
  2169                                  
  2170                                  section .data
  2171                                  fmt_char:
  2172 000002CB 256300                          db `%c\0`
  2173                                  fmt_arg_count_0:
  2174 000002CE 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2174 000002D7 74696E67207A65726F-
  2174 000002E0 20617267756D656E74-
  2174 000002E9 732E20466F756E6420-
  2174 000002F2 25640A00           
  2175                                  fmt_arg_count_1:
  2176 000002F6 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2176 000002FF 74696E67206F6E6520-
  2176 00000308 617267756D656E742E-
  2176 00000311 20466F756E64202564-
  2176 0000031A 0A00               
  2177                                  fmt_arg_count_12:
  2178 0000031C 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2178 00000325 74696E67206F6E6520-
  2178 0000032E 726571756972656420-
  2178 00000337 616E64206F6E65206F-
  2178 00000340 7074696F6E616C2061-
  2178 00000349 7267756D656E742E20-
  2178 00000352 466F756E642025640A-
  2178 0000035B 00                 
  2179                                  fmt_arg_count_2:
  2180 0000035C 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2180 00000365 74696E672074776F20-
  2180 0000036E 617267756D656E7473-
  2180 00000377 2E20466F756E642025-
  2180 00000380 640A00             
  2181                                  fmt_arg_count_3:
  2182 00000383 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2182 0000038C 74696E672074687265-
  2182 00000395 6520617267756D656E-
  2182 0000039E 74732E20466F756E64-
  2182 000003A7 2025640A00         
  2183                                  fmt_type:
  2184 000003AC 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2184 000003B5 696F6E207061737365-
  2184 000003BE 6420696E636F727265-
  2184 000003C7 637420747970650A00 
  2185                                  fmt_integer_range:
  2186 000003D0 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2186 000003D9 7265637420696E7465-
  2186 000003E2 6765722072616E6765-
  2186 000003EB 0A00               
  2187                                  fmt_division_by_zero:
  2188 000003ED 212121204469766973-             db `!!! Division by zero\n\0`
  2188 000003F6 696F6E206279207A65-
  2188 000003FF 726F0A00           
  2189                                  fmt_scheme_error_part_1:
  2190 00000403 0A2121212054686520-             db `\n!!! The procedure \0`
  2190 0000040C 70726F636564757265-
  2190 00000415 2000               
  2191                                  fmt_scheme_error_part_2:
  2192 00000417 2061736B656420746F-             db ` asked to terminate the program\n`
  2192 00000420 207465726D696E6174-
  2192 00000429 65207468652070726F-
  2192 00000432 6772616D0A         
  2193 00000437 202020207769746820-             db `    with the following message:\n\n\0`
  2193 00000440 74686520666F6C6C6F-
  2193 00000449 77696E67206D657373-
  2193 00000452 6167653A0A0A00     
  2194                                  fmt_scheme_error_part_3:
  2195 00000459 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2195 00000462 210A0A00           
