     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "whatever"
    84 00000007 0800000000000000        	dq 8
    85 0000000F 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
    86 00000017 04                      	db T_symbol	; whatever
    87 00000018 [0600000000000000]      	dq L_constants + 6
    88 00000020 11                      	db T_rational	; 0
    89 00000021 000000000000000001-     	dq 0, 1
    89 0000002A 00000000000000     
    90 00000031 03                      	db T_string	; "+"
    91 00000032 0100000000000000        	dq 1
    92 0000003A 2B                      	db 0x2B
    93 0000003B 04                      	db T_symbol	; +
    94 0000003C [3100000000000000]      	dq L_constants + 49
    95 00000044 03                      	db T_string	; "all arguments need ...
    96 00000045 2000000000000000        	dq 32
    97 0000004D 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
    98 00000055 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
    99 0000005D 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   100 00000065 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   101 0000006D 03                      	db T_string	; "-"
   102 0000006E 0100000000000000        	dq 1
   103 00000076 2D                      	db 0x2D
   104 00000077 04                      	db T_symbol	; -
   105 00000078 [6D00000000000000]      	dq L_constants + 109
   106 00000080 11                      	db T_rational	; 1
   107 00000081 010000000000000001-     	dq 1, 1
   107 0000008A 00000000000000     
   108 00000091 03                      	db T_string	; "*"
   109 00000092 0100000000000000        	dq 1
   110 0000009A 2A                      	db 0x2A
   111 0000009B 04                      	db T_symbol	; *
   112 0000009C [9100000000000000]      	dq L_constants + 145
   113 000000A4 03                      	db T_string	; "/"
   114 000000A5 0100000000000000        	dq 1
   115 000000AD 2F                      	db 0x2F
   116 000000AE 04                      	db T_symbol	; /
   117 000000AF [A400000000000000]      	dq L_constants + 164
   118 000000B7 03                      	db T_string	; "generic-comparator"
   119 000000B8 1200000000000000        	dq 18
   120 000000C0 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   121 000000C8 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   122 000000D0 6F72                    	db 0x6F, 0x72
   123 000000D2 04                      	db T_symbol	; generic-comparator
   124 000000D3 [B700000000000000]      	dq L_constants + 183
   125 000000DB 03                      	db T_string	; "all the arguments m...
   126 000000DC 2100000000000000        	dq 33
   127 000000E4 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   128 000000EC 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   129 000000F4 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   130 000000FC 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   131 00000104 73                      	db 0x73
   132 00000105 03                      	db T_string	; "make-list"
   133 00000106 0900000000000000        	dq 9
   134 0000010E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   135 00000116 74                      	db 0x74
   136 00000117 04                      	db T_symbol	; make-list
   137 00000118 [0501000000000000]      	dq L_constants + 261
   138 00000120 03                      	db T_string	; "Usage: (make-list l...
   139 00000121 2D00000000000000        	dq 45
   140 00000129 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   141 00000131 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   142 00000139 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   143 00000141 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   144 00000149 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   145 00000151 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   146 00000156 0241                    	db T_char, 0x41	; #\A
   147 00000158 025A                    	db T_char, 0x5A	; #\Z
   148 0000015A 0261                    	db T_char, 0x61	; #\a
   149 0000015C 027A                    	db T_char, 0x7A	; #\z
   150 0000015E 03                      	db T_string	; "make-vector"
   151 0000015F 0B00000000000000        	dq 11
   152 00000167 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   153 0000016F 746F72                  	db 0x74, 0x6F, 0x72
   154 00000172 04                      	db T_symbol	; make-vector
   155 00000173 [5E01000000000000]      	dq L_constants + 350
   156 0000017B 03                      	db T_string	; "Usage: (make-vector...
   157 0000017C 2B00000000000000        	dq 43
   158 00000184 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   159 0000018C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   160 00000194 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   161 0000019C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   162 000001A4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   163 000001AC 6C7429                  	db 0x6C, 0x74, 0x29
   164 000001AF 03                      	db T_string	; "make-string"
   165 000001B0 0B00000000000000        	dq 11
   166 000001B8 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   167 000001C0 696E67                  	db 0x69, 0x6E, 0x67
   168 000001C3 04                      	db T_symbol	; make-string
   169 000001C4 [AF01000000000000]      	dq L_constants + 431
   170 000001CC 03                      	db T_string	; "Usage: (make-string...
   171 000001CD 2B00000000000000        	dq 43
   172 000001D5 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   173 000001DD 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   174 000001E5 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   175 000001ED 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   176 000001F5 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   177 000001FD 6C7429                  	db 0x6C, 0x74, 0x29
   178 00000200 11                      	db T_rational	; 2
   179 00000201 020000000000000001-     	dq 2, 1
   179 0000020A 00000000000000     
   180                                  
   181                                  section .bss
   182                                  free_var_0:	; location of null?
   183 00000000 ????????????????        	resq 1
   184                                  free_var_1:	; location of pair?
   185 00000008 ????????????????        	resq 1
   186                                  free_var_2:	; location of void?
   187 00000010 ????????????????        	resq 1
   188                                  free_var_3:	; location of char?
   189 00000018 ????????????????        	resq 1
   190                                  free_var_4:	; location of string?
   191 00000020 ????????????????        	resq 1
   192                                  free_var_5:	; location of symbol?
   193 00000028 ????????????????        	resq 1
   194                                  free_var_6:	; location of vector?
   195 00000030 ????????????????        	resq 1
   196                                  free_var_7:	; location of procedure?
   197 00000038 ????????????????        	resq 1
   198                                  free_var_8:	; location of real?
   199 00000040 ????????????????        	resq 1
   200                                  free_var_9:	; location of rational?
   201 00000048 ????????????????        	resq 1
   202                                  free_var_10:	; location of boolean?
   203 00000050 ????????????????        	resq 1
   204                                  free_var_11:	; location of number?
   205 00000058 ????????????????        	resq 1
   206                                  free_var_12:	; location of collection?
   207 00000060 ????????????????        	resq 1
   208                                  free_var_13:	; location of cons
   209 00000068 ????????????????        	resq 1
   210                                  free_var_14:	; location of display-sexpr
   211 00000070 ????????????????        	resq 1
   212                                  free_var_15:	; location of write-char
   213 00000078 ????????????????        	resq 1
   214                                  free_var_16:	; location of car
   215 00000080 ????????????????        	resq 1
   216                                  free_var_17:	; location of cdr
   217 00000088 ????????????????        	resq 1
   218                                  free_var_18:	; location of string-length
   219 00000090 ????????????????        	resq 1
   220                                  free_var_19:	; location of vector-length
   221 00000098 ????????????????        	resq 1
   222                                  free_var_20:	; location of real->integer
   223 000000A0 ????????????????        	resq 1
   224                                  free_var_21:	; location of exit
   225 000000A8 ????????????????        	resq 1
   226                                  free_var_22:	; location of integer->real
   227 000000B0 ????????????????        	resq 1
   228                                  free_var_23:	; location of rational->real
   229 000000B8 ????????????????        	resq 1
   230                                  free_var_24:	; location of char->integer
   231 000000C0 ????????????????        	resq 1
   232                                  free_var_25:	; location of integer->char
   233 000000C8 ????????????????        	resq 1
   234                                  free_var_26:	; location of trng
   235 000000D0 ????????????????        	resq 1
   236                                  free_var_27:	; location of zero?
   237 000000D8 ????????????????        	resq 1
   238                                  free_var_28:	; location of integer?
   239 000000E0 ????????????????        	resq 1
   240                                  free_var_29:	; location of __bin-apply
   241 000000E8 ????????????????        	resq 1
   242                                  free_var_30:	; location of __bin-add-rr
   243 000000F0 ????????????????        	resq 1
   244                                  free_var_31:	; location of __bin-sub-rr
   245 000000F8 ????????????????        	resq 1
   246                                  free_var_32:	; location of __bin-mul-rr
   247 00000100 ????????????????        	resq 1
   248                                  free_var_33:	; location of __bin-div-rr
   249 00000108 ????????????????        	resq 1
   250                                  free_var_34:	; location of __bin-add-qq
   251 00000110 ????????????????        	resq 1
   252                                  free_var_35:	; location of __bin-sub-qq
   253 00000118 ????????????????        	resq 1
   254                                  free_var_36:	; location of __bin-mul-qq
   255 00000120 ????????????????        	resq 1
   256                                  free_var_37:	; location of __bin-div-qq
   257 00000128 ????????????????        	resq 1
   258                                  free_var_38:	; location of error
   259 00000130 ????????????????        	resq 1
   260                                  free_var_39:	; location of __bin-less-than-rr
   261 00000138 ????????????????        	resq 1
   262                                  free_var_40:	; location of __bin-less-than-qq
   263 00000140 ????????????????        	resq 1
   264                                  free_var_41:	; location of __bin-equal-rr
   265 00000148 ????????????????        	resq 1
   266                                  free_var_42:	; location of __bin-equal-qq
   267 00000150 ????????????????        	resq 1
   268                                  free_var_43:	; location of quotient
   269 00000158 ????????????????        	resq 1
   270                                  free_var_44:	; location of remainder
   271 00000160 ????????????????        	resq 1
   272                                  free_var_45:	; location of set-car!
   273 00000168 ????????????????        	resq 1
   274                                  free_var_46:	; location of set-cdr!
   275 00000170 ????????????????        	resq 1
   276                                  free_var_47:	; location of string-ref
   277 00000178 ????????????????        	resq 1
   278                                  free_var_48:	; location of vector-ref
   279 00000180 ????????????????        	resq 1
   280                                  free_var_49:	; location of vector-set!
   281 00000188 ????????????????        	resq 1
   282                                  free_var_50:	; location of string-set!
   283 00000190 ????????????????        	resq 1
   284                                  free_var_51:	; location of make-vector
   285 00000198 ????????????????        	resq 1
   286                                  free_var_52:	; location of make-string
   287 000001A0 ????????????????        	resq 1
   288                                  free_var_53:	; location of numerator
   289 000001A8 ????????????????        	resq 1
   290                                  free_var_54:	; location of denominator
   291 000001B0 ????????????????        	resq 1
   292                                  free_var_55:	; location of eq?
   293 000001B8 ????????????????        	resq 1
   294                                  free_var_56:	; location of caar
   295 000001C0 ????????????????        	resq 1
   296                                  free_var_57:	; location of cadr
   297 000001C8 ????????????????        	resq 1
   298                                  free_var_58:	; location of cdar
   299 000001D0 ????????????????        	resq 1
   300                                  free_var_59:	; location of cddr
   301 000001D8 ????????????????        	resq 1
   302                                  free_var_60:	; location of caaar
   303 000001E0 ????????????????        	resq 1
   304                                  free_var_61:	; location of caadr
   305 000001E8 ????????????????        	resq 1
   306                                  free_var_62:	; location of cadar
   307 000001F0 ????????????????        	resq 1
   308                                  free_var_63:	; location of caddr
   309 000001F8 ????????????????        	resq 1
   310                                  free_var_64:	; location of cdaar
   311 00000200 ????????????????        	resq 1
   312                                  free_var_65:	; location of cdadr
   313 00000208 ????????????????        	resq 1
   314                                  free_var_66:	; location of cddar
   315 00000210 ????????????????        	resq 1
   316                                  free_var_67:	; location of cdddr
   317 00000218 ????????????????        	resq 1
   318                                  free_var_68:	; location of caaaar
   319 00000220 ????????????????        	resq 1
   320                                  free_var_69:	; location of caaadr
   321 00000228 ????????????????        	resq 1
   322                                  free_var_70:	; location of caadar
   323 00000230 ????????????????        	resq 1
   324                                  free_var_71:	; location of caaddr
   325 00000238 ????????????????        	resq 1
   326                                  free_var_72:	; location of cadaar
   327 00000240 ????????????????        	resq 1
   328                                  free_var_73:	; location of cadadr
   329 00000248 ????????????????        	resq 1
   330                                  free_var_74:	; location of caddar
   331 00000250 ????????????????        	resq 1
   332                                  free_var_75:	; location of cadddr
   333 00000258 ????????????????        	resq 1
   334                                  free_var_76:	; location of cdaaar
   335 00000260 ????????????????        	resq 1
   336                                  free_var_77:	; location of cdaadr
   337 00000268 ????????????????        	resq 1
   338                                  free_var_78:	; location of cdadar
   339 00000270 ????????????????        	resq 1
   340                                  free_var_79:	; location of cdaddr
   341 00000278 ????????????????        	resq 1
   342                                  free_var_80:	; location of cddaar
   343 00000280 ????????????????        	resq 1
   344                                  free_var_81:	; location of cddadr
   345 00000288 ????????????????        	resq 1
   346                                  free_var_82:	; location of cdddar
   347 00000290 ????????????????        	resq 1
   348                                  free_var_83:	; location of cddddr
   349 00000298 ????????????????        	resq 1
   350                                  free_var_84:	; location of list?
   351 000002A0 ????????????????        	resq 1
   352                                  free_var_85:	; location of list
   353 000002A8 ????????????????        	resq 1
   354                                  free_var_86:	; location of not
   355 000002B0 ????????????????        	resq 1
   356                                  free_var_87:	; location of fraction?
   357 000002B8 ????????????????        	resq 1
   358                                  free_var_88:	; location of list*
   359 000002C0 ????????????????        	resq 1
   360                                  free_var_89:	; location of apply
   361 000002C8 ????????????????        	resq 1
   362                                  free_var_90:	; location of ormap
   363 000002D0 ????????????????        	resq 1
   364                                  free_var_91:	; location of map
   365 000002D8 ????????????????        	resq 1
   366                                  free_var_92:	; location of andmap
   367 000002E0 ????????????????        	resq 1
   368                                  free_var_93:	; location of reverse
   369 000002E8 ????????????????        	resq 1
   370                                  free_var_94:	; location of append
   371 000002F0 ????????????????        	resq 1
   372                                  free_var_95:	; location of fold-left
   373 000002F8 ????????????????        	resq 1
   374                                  free_var_96:	; location of fold-right
   375 00000300 ????????????????        	resq 1
   376                                  free_var_97:	; location of +
   377 00000308 ????????????????        	resq 1
   378                                  free_var_98:	; location of -
   379 00000310 ????????????????        	resq 1
   380                                  free_var_99:	; location of *
   381 00000318 ????????????????        	resq 1
   382                                  free_var_100:	; location of /
   383 00000320 ????????????????        	resq 1
   384                                  free_var_101:	; location of fact
   385 00000328 ????????????????        	resq 1
   386                                  free_var_102:	; location of <
   387 00000330 ????????????????        	resq 1
   388                                  free_var_103:	; location of <=
   389 00000338 ????????????????        	resq 1
   390                                  free_var_104:	; location of >
   391 00000340 ????????????????        	resq 1
   392                                  free_var_105:	; location of >=
   393 00000348 ????????????????        	resq 1
   394                                  free_var_106:	; location of =
   395 00000350 ????????????????        	resq 1
   396                                  free_var_107:	; location of make-list
   397 00000358 ????????????????        	resq 1
   398                                  free_var_108:	; location of char<?
   399 00000360 ????????????????        	resq 1
   400                                  free_var_109:	; location of char<=?
   401 00000368 ????????????????        	resq 1
   402                                  free_var_110:	; location of char=?
   403 00000370 ????????????????        	resq 1
   404                                  free_var_111:	; location of char>?
   405 00000378 ????????????????        	resq 1
   406                                  free_var_112:	; location of char>=?
   407 00000380 ????????????????        	resq 1
   408                                  free_var_113:	; location of char-downcase
   409 00000388 ????????????????        	resq 1
   410                                  free_var_114:	; location of char-upcase
   411 00000390 ????????????????        	resq 1
   412                                  free_var_115:	; location of char-ci<?
   413 00000398 ????????????????        	resq 1
   414                                  free_var_116:	; location of char-ci<=?
   415 000003A0 ????????????????        	resq 1
   416                                  free_var_117:	; location of char-ci=?
   417 000003A8 ????????????????        	resq 1
   418                                  free_var_118:	; location of char-ci>?
   419 000003B0 ????????????????        	resq 1
   420                                  free_var_119:	; location of char-ci>=?
   421 000003B8 ????????????????        	resq 1
   422                                  free_var_120:	; location of string-downcase
   423 000003C0 ????????????????        	resq 1
   424                                  free_var_121:	; location of string-upcase
   425 000003C8 ????????????????        	resq 1
   426                                  free_var_122:	; location of list->string
   427 000003D0 ????????????????        	resq 1
   428                                  free_var_123:	; location of string->list
   429 000003D8 ????????????????        	resq 1
   430                                  free_var_124:	; location of string<?
   431 000003E0 ????????????????        	resq 1
   432                                  free_var_125:	; location of string<=?
   433 000003E8 ????????????????        	resq 1
   434                                  free_var_126:	; location of string=?
   435 000003F0 ????????????????        	resq 1
   436                                  free_var_127:	; location of string>=?
   437 000003F8 ????????????????        	resq 1
   438                                  free_var_128:	; location of string>?
   439 00000400 ????????????????        	resq 1
   440                                  free_var_129:	; location of string-ci<?
   441 00000408 ????????????????        	resq 1
   442                                  free_var_130:	; location of string-ci<=?
   443 00000410 ????????????????        	resq 1
   444                                  free_var_131:	; location of string-ci=?
   445 00000418 ????????????????        	resq 1
   446                                  free_var_132:	; location of string-ci>=?
   447 00000420 ????????????????        	resq 1
   448                                  free_var_133:	; location of string-ci>?
   449 00000428 ????????????????        	resq 1
   450                                  free_var_134:	; location of length
   451 00000430 ????????????????        	resq 1
   452                                  free_var_135:	; location of list->vector
   453 00000438 ????????????????        	resq 1
   454                                  free_var_136:	; location of vector
   455 00000440 ????????????????        	resq 1
   456                                  free_var_137:	; location of vector->list
   457 00000448 ????????????????        	resq 1
   458                                  free_var_138:	; location of random
   459 00000450 ????????????????        	resq 1
   460                                  free_var_139:	; location of positive?
   461 00000458 ????????????????        	resq 1
   462                                  free_var_140:	; location of negative?
   463 00000460 ????????????????        	resq 1
   464                                  free_var_141:	; location of even?
   465 00000468 ????????????????        	resq 1
   466                                  free_var_142:	; location of odd?
   467 00000470 ????????????????        	resq 1
   468                                  free_var_143:	; location of abs
   469 00000478 ????????????????        	resq 1
   470                                  free_var_144:	; location of equal?
   471 00000480 ????????????????        	resq 1
   472                                  free_var_145:	; location of assoc
   473 00000488 ????????????????        	resq 1
   474                                  
   475                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   476                                  global main
   477                                  section .text
   478                                  main:
   479 00000000 C8000000                        enter 0, 0
   480                                          
   481                                  	; building closure for null?
   482 00000004 48BF-                   	mov rdi, free_var_0
   482 00000006 [0000000000000000] 
   483 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   483 00000010 [8215010000000000] 
   484 00000018 E88E140100              	call bind_primitive
   485                                  
   486                                  	; building closure for pair?
   487 0000001D 48BF-                   	mov rdi, free_var_1
   487 0000001F [0800000000000000] 
   488 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   488 00000029 [B815010000000000] 
   489 00000031 E875140100              	call bind_primitive
   490                                  
   491                                  	; building closure for void?
   492 00000036 48BF-                   	mov rdi, free_var_2
   492 00000038 [1000000000000000] 
   493 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   493 00000042 [EE15010000000000] 
   494 0000004A E85C140100              	call bind_primitive
   495                                  
   496                                  	; building closure for char?
   497 0000004F 48BF-                   	mov rdi, free_var_3
   497 00000051 [1800000000000000] 
   498 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   498 0000005B [2416010000000000] 
   499 00000063 E843140100              	call bind_primitive
   500                                  
   501                                  	; building closure for string?
   502 00000068 48BF-                   	mov rdi, free_var_4
   502 0000006A [2000000000000000] 
   503 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   503 00000074 [5A16010000000000] 
   504 0000007C E82A140100              	call bind_primitive
   505                                  
   506                                  	; building closure for symbol?
   507 00000081 48BF-                   	mov rdi, free_var_5
   507 00000083 [2800000000000000] 
   508 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   508 0000008D [9016010000000000] 
   509 00000095 E811140100              	call bind_primitive
   510                                  
   511                                  	; building closure for vector?
   512 0000009A 48BF-                   	mov rdi, free_var_6
   512 0000009C [3000000000000000] 
   513 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   513 000000A6 [C616010000000000] 
   514 000000AE E8F8130100              	call bind_primitive
   515                                  
   516                                  	; building closure for procedure?
   517 000000B3 48BF-                   	mov rdi, free_var_7
   517 000000B5 [3800000000000000] 
   518 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   518 000000BF [FC16010000000000] 
   519 000000C7 E8DF130100              	call bind_primitive
   520                                  
   521                                  	; building closure for real?
   522 000000CC 48BF-                   	mov rdi, free_var_8
   522 000000CE [4000000000000000] 
   523 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   523 000000D8 [3217010000000000] 
   524 000000E0 E8C6130100              	call bind_primitive
   525                                  
   526                                  	; building closure for rational?
   527 000000E5 48BF-                   	mov rdi, free_var_9
   527 000000E7 [4800000000000000] 
   528 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   528 000000F1 [6817010000000000] 
   529 000000F9 E8AD130100              	call bind_primitive
   530                                  
   531                                  	; building closure for boolean?
   532 000000FE 48BF-                   	mov rdi, free_var_10
   532 00000100 [5000000000000000] 
   533 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   533 0000010A [9E17010000000000] 
   534 00000112 E894130100              	call bind_primitive
   535                                  
   536                                  	; building closure for number?
   537 00000117 48BF-                   	mov rdi, free_var_11
   537 00000119 [5800000000000000] 
   538 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   538 00000123 [D617010000000000] 
   539 0000012B E87B130100              	call bind_primitive
   540                                  
   541                                  	; building closure for collection?
   542 00000130 48BF-                   	mov rdi, free_var_12
   542 00000132 [6000000000000000] 
   543 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   543 0000013C [0E18010000000000] 
   544 00000144 E862130100              	call bind_primitive
   545                                  
   546                                  	; building closure for cons
   547 00000149 48BF-                   	mov rdi, free_var_13
   547 0000014B [6800000000000000] 
   548 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   548 00000155 [4618010000000000] 
   549 0000015D E849130100              	call bind_primitive
   550                                  
   551                                  	; building closure for display-sexpr
   552 00000162 48BF-                   	mov rdi, free_var_14
   552 00000164 [7000000000000000] 
   553 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   553 0000016E [7A18010000000000] 
   554 00000176 E830130100              	call bind_primitive
   555                                  
   556                                  	; building closure for write-char
   557 0000017B 48BF-                   	mov rdi, free_var_15
   557 0000017D [7800000000000000] 
   558 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   558 00000187 [A418010000000000] 
   559 0000018F E817130100              	call bind_primitive
   560                                  
   561                                  	; building closure for car
   562 00000194 48BF-                   	mov rdi, free_var_16
   562 00000196 [8000000000000000] 
   563 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   563 000001A0 [FB18010000000000] 
   564 000001A8 E8FE120100              	call bind_primitive
   565                                  
   566                                  	; building closure for cdr
   567 000001AD 48BF-                   	mov rdi, free_var_17
   567 000001AF [8800000000000000] 
   568 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   568 000001B9 [2319010000000000] 
   569 000001C1 E8E5120100              	call bind_primitive
   570                                  
   571                                  	; building closure for string-length
   572 000001C6 48BF-                   	mov rdi, free_var_18
   572 000001C8 [9000000000000000] 
   573 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   573 000001D2 [4B19010000000000] 
   574 000001DA E8CC120100              	call bind_primitive
   575                                  
   576                                  	; building closure for vector-length
   577 000001DF 48BF-                   	mov rdi, free_var_19
   577 000001E1 [9800000000000000] 
   578 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   578 000001EB [7819010000000000] 
   579 000001F3 E8B3120100              	call bind_primitive
   580                                  
   581                                  	; building closure for real->integer
   582 000001F8 48BF-                   	mov rdi, free_var_20
   582 000001FA [A000000000000000] 
   583 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   583 00000204 [A519010000000000] 
   584 0000020C E89A120100              	call bind_primitive
   585                                  
   586                                  	; building closure for exit
   587 00000211 48BF-                   	mov rdi, free_var_21
   587 00000213 [A800000000000000] 
   588 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   588 0000021D [D819010000000000] 
   589 00000225 E881120100              	call bind_primitive
   590                                  
   591                                  	; building closure for integer->real
   592 0000022A 48BF-                   	mov rdi, free_var_22
   592 0000022C [B000000000000000] 
   593 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   593 00000236 [F519010000000000] 
   594 0000023E E868120100              	call bind_primitive
   595                                  
   596                                  	; building closure for rational->real
   597 00000243 48BF-                   	mov rdi, free_var_23
   597 00000245 [B800000000000000] 
   598 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   598 0000024F [321A010000000000] 
   599 00000257 E84F120100              	call bind_primitive
   600                                  
   601                                  	; building closure for char->integer
   602 0000025C 48BF-                   	mov rdi, free_var_24
   602 0000025E [C000000000000000] 
   603 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   603 00000268 [711A010000000000] 
   604 00000270 E836120100              	call bind_primitive
   605                                  
   606                                  	; building closure for integer->char
   607 00000275 48BF-                   	mov rdi, free_var_25
   607 00000277 [C800000000000000] 
   608 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   608 00000281 [A61A010000000000] 
   609 00000289 E81D120100              	call bind_primitive
   610                                  
   611                                  	; building closure for trng
   612 0000028E 48BF-                   	mov rdi, free_var_26
   612 00000290 [D000000000000000] 
   613 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   613 0000029A [001B010000000000] 
   614 000002A2 E804120100              	call bind_primitive
   615                                  
   616                                  	; building closure for zero?
   617 000002A7 48BF-                   	mov rdi, free_var_27
   617 000002A9 [D800000000000000] 
   618 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   618 000002B3 [231B010000000000] 
   619 000002BB E8EB110100              	call bind_primitive
   620                                  
   621                                  	; building closure for integer?
   622 000002C0 48BF-                   	mov rdi, free_var_28
   622 000002C2 [E000000000000000] 
   623 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   623 000002CC [7E1B010000000000] 
   624 000002D4 E8D2110100              	call bind_primitive
   625                                  
   626                                  	; building closure for __bin-apply
   627 000002D9 48BF-                   	mov rdi, free_var_29
   627 000002DB [E800000000000000] 
   628 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   628 000002E5 [D314010000000000] 
   629 000002ED E8B9110100              	call bind_primitive
   630                                  
   631                                  	; building closure for __bin-add-rr
   632 000002F2 48BF-                   	mov rdi, free_var_30
   632 000002F4 [F000000000000000] 
   633 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   633 000002FE [BB1B010000000000] 
   634 00000306 E8A0110100              	call bind_primitive
   635                                  
   636                                  	; building closure for __bin-sub-rr
   637 0000030B 48BF-                   	mov rdi, free_var_31
   637 0000030D [F800000000000000] 
   638 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   638 00000317 [FF1B010000000000] 
   639 0000031F E887110100              	call bind_primitive
   640                                  
   641                                  	; building closure for __bin-mul-rr
   642 00000324 48BF-                   	mov rdi, free_var_32
   642 00000326 [0001000000000000] 
   643 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   643 00000330 [431C010000000000] 
   644 00000338 E86E110100              	call bind_primitive
   645                                  
   646                                  	; building closure for __bin-div-rr
   647 0000033D 48BF-                   	mov rdi, free_var_33
   647 0000033F [0801000000000000] 
   648 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   648 00000349 [871C010000000000] 
   649 00000351 E855110100              	call bind_primitive
   650                                  
   651                                  	; building closure for __bin-add-qq
   652 00000356 48BF-                   	mov rdi, free_var_34
   652 00000358 [1001000000000000] 
   653 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   653 00000362 [D91C010000000000] 
   654 0000036A E83C110100              	call bind_primitive
   655                                  
   656                                  	; building closure for __bin-sub-qq
   657 0000036F 48BF-                   	mov rdi, free_var_35
   657 00000371 [1801000000000000] 
   658 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   658 0000037B [411D010000000000] 
   659 00000383 E823110100              	call bind_primitive
   660                                  
   661                                  	; building closure for __bin-mul-qq
   662 00000388 48BF-                   	mov rdi, free_var_36
   662 0000038A [2001000000000000] 
   663 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   663 00000394 [A91D010000000000] 
   664 0000039C E80A110100              	call bind_primitive
   665                                  
   666                                  	; building closure for __bin-div-qq
   667 000003A1 48BF-                   	mov rdi, free_var_37
   667 000003A3 [2801000000000000] 
   668 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   668 000003AD [011E010000000000] 
   669 000003B5 E8F1100100              	call bind_primitive
   670                                  
   671                                  	; building closure for error
   672 000003BA 48BF-                   	mov rdi, free_var_38
   672 000003BC [3001000000000000] 
   673 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   673 000003C6 [CF1E010000000000] 
   674 000003CE E8D8100100              	call bind_primitive
   675                                  
   676                                  	; building closure for __bin-less-than-rr
   677 000003D3 48BF-                   	mov rdi, free_var_39
   677 000003D5 [3801000000000000] 
   678 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   678 000003DF [861F010000000000] 
   679 000003E7 E8BF100100              	call bind_primitive
   680                                  
   681                                  	; building closure for __bin-less-than-qq
   682 000003EC 48BF-                   	mov rdi, free_var_40
   682 000003EE [4001000000000000] 
   683 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   683 000003F8 [DD1F010000000000] 
   684 00000400 E8A6100100              	call bind_primitive
   685                                  
   686                                  	; building closure for __bin-equal-rr
   687 00000405 48BF-                   	mov rdi, free_var_41
   687 00000407 [4801000000000000] 
   688 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   688 00000411 [4020010000000000] 
   689 00000419 E88D100100              	call bind_primitive
   690                                  
   691                                  	; building closure for __bin-equal-qq
   692 0000041E 48BF-                   	mov rdi, free_var_42
   692 00000420 [5001000000000000] 
   693 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   693 0000042A [9720010000000000] 
   694 00000432 E874100100              	call bind_primitive
   695                                  
   696                                  	; building closure for quotient
   697 00000437 48BF-                   	mov rdi, free_var_43
   697 00000439 [5801000000000000] 
   698 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   698 00000443 [FA20010000000000] 
   699 0000044B E85B100100              	call bind_primitive
   700                                  
   701                                  	; building closure for remainder
   702 00000450 48BF-                   	mov rdi, free_var_44
   702 00000452 [6001000000000000] 
   703 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   703 0000045C [6021010000000000] 
   704 00000464 E842100100              	call bind_primitive
   705                                  
   706                                  	; building closure for set-car!
   707 00000469 48BF-                   	mov rdi, free_var_45
   707 0000046B [6801000000000000] 
   708 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   708 00000475 [C621010000000000] 
   709 0000047D E829100100              	call bind_primitive
   710                                  
   711                                  	; building closure for set-cdr!
   712 00000482 48BF-                   	mov rdi, free_var_46
   712 00000484 [7001000000000000] 
   713 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   713 0000048E [FC21010000000000] 
   714 00000496 E810100100              	call bind_primitive
   715                                  
   716                                  	; building closure for string-ref
   717 0000049B 48BF-                   	mov rdi, free_var_47
   717 0000049D [7801000000000000] 
   718 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   718 000004A7 [3222010000000000] 
   719 000004AF E8F70F0100              	call bind_primitive
   720                                  
   721                                  	; building closure for vector-ref
   722 000004B4 48BF-                   	mov rdi, free_var_48
   722 000004B6 [8001000000000000] 
   723 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   723 000004C0 [9D22010000000000] 
   724 000004C8 E8DE0F0100              	call bind_primitive
   725                                  
   726                                  	; building closure for vector-set!
   727 000004CD 48BF-                   	mov rdi, free_var_49
   727 000004CF [8801000000000000] 
   728 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   728 000004D9 [F922010000000000] 
   729 000004E1 E8C50F0100              	call bind_primitive
   730                                  
   731                                  	; building closure for string-set!
   732 000004E6 48BF-                   	mov rdi, free_var_50
   732 000004E8 [9001000000000000] 
   733 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   733 000004F2 [6323010000000000] 
   734 000004FA E8AC0F0100              	call bind_primitive
   735                                  
   736                                  	; building closure for make-vector
   737 000004FF 48BF-                   	mov rdi, free_var_51
   737 00000501 [9801000000000000] 
   738 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   738 0000050B [D823010000000000] 
   739 00000513 E8930F0100              	call bind_primitive
   740                                  
   741                                  	; building closure for make-string
   742 00000518 48BF-                   	mov rdi, free_var_52
   742 0000051A [A001000000000000] 
   743 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   743 00000524 [4224010000000000] 
   744 0000052C E87A0F0100              	call bind_primitive
   745                                  
   746                                  	; building closure for numerator
   747 00000531 48BF-                   	mov rdi, free_var_53
   747 00000533 [A801000000000000] 
   748 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   748 0000053D [B424010000000000] 
   749 00000545 E8610F0100              	call bind_primitive
   750                                  
   751                                  	; building closure for denominator
   752 0000054A 48BF-                   	mov rdi, free_var_54
   752 0000054C [B001000000000000] 
   753 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   753 00000556 [E124010000000000] 
   754 0000055E E8480F0100              	call bind_primitive
   755                                  
   756                                  	; building closure for eq?
   757 00000563 48BF-                   	mov rdi, free_var_55
   757 00000565 [B801000000000000] 
   758 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   758 0000056F [0E25010000000000] 
   759 00000577 E82F0F0100              	call bind_primitive
   760                                  
   761 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   762 00000581 E894090100              	call malloc
   763 00000586 50                      	push rax
   764 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   765 0000058C E889090100              	call malloc
   766 00000591 50                      	push rax
   767 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   768 00000597 E87E090100              	call malloc
   769 0000059C 488B7D10                	mov rdi, ENV
   770 000005A0 BE00000000              	mov rsi, 0
   771 000005A5 BA01000000              	mov rdx, 1
   772                                  .L_lambda_simple_env_loop_009d:	; ext_env[i + 1] <-- env[i]
   773 000005AA 4883FE00                	cmp rsi, 0
   774 000005AE 7410                    	je .L_lambda_simple_env_end_009d
   775 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   776 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   777 000005B8 48FFC6                  	inc rsi
   778 000005BB 48FFC2                  	inc rdx
   779 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_009d
   780                                  .L_lambda_simple_env_end_009d:
   781 000005C0 5B                      	pop rbx
   782 000005C1 BE00000000              	mov rsi, 0
   783                                  .L_lambda_simple_params_loop_009d:	; copy params
   784 000005C6 4883FE00                	cmp rsi, 0
   785 000005CA 740E                    	je .L_lambda_simple_params_end_009d
   786 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   787 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   788 000005D5 48FFC6                  	inc rsi
   789 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_009d
   790                                  .L_lambda_simple_params_end_009d:
   791 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   792 000005DD 4889C3                  	mov rbx, rax
   793 000005E0 58                      	pop rax
   794 000005E1 C60005                  	mov byte [rax], T_closure
   795 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   796 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009d
   797 000005F0 E999000000              	jmp .L_lambda_simple_end_009d
   798                                  .L_lambda_simple_code_009d:	; lambda-simple body
   799 000005F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
   800 000005FB 740B                    	je .L_lambda_simple_arity_check_ok_009d
   801 000005FD FF742410                	push qword [rsp + 8 * 2]
   802 00000601 6A01                    	push 1
   803 00000603 E9CB080100              	jmp L_error_incorrect_arity_simple
   804                                  .L_lambda_simple_arity_check_ok_009d:
   805 00000608 C8000000                	enter 0, 0
   806 0000060C 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
   807 00000610 50                      	push rax
   808 00000611 6A01                    	push 1
   809 00000613 488B0425[80000000]      	mov rax, qword [free_var_16]
   810 0000061B 803805                  	cmp byte [rax], T_closure 
   811 0000061E 0F85AB180100                    jne L_code_ptr_error
   812                                  
   813 00000624 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   814                                  
   815 00000628 53                              push rbx
   816                                  
   817 00000629 FF5009                          call SOB_CLOSURE_CODE(rax)
   818                                  
   819 0000062C 50                              	push rax
   820                                  
   821 0000062D 6A01                    	push 1
   822 0000062F 488B0425[80000000]      	mov rax, qword [free_var_16]
   823                                  	assert_closure(rax)
    42 00000637 803805              <1>  cmp byte [%1], %2
    43 0000063A 0F85CE200100        <1>  jne L_error_incorrect_type
   824 00000640 50                      	push rax 
   825 00000641 FF7508                  	push qword [rbp + 8]
   826 00000644 FF7500                  	push qword [rbp]
   827 00000647 4883C308                	add rbx ,8*1
   828                                  	 .L_fix_stack_label_00b7:
   829 0000064B 488B5518                	mov rdx, qword[rbp+8*3]
   830 0000064F 4883C203                	add rdx, 3
   831 00000653 48C1E203                	shl rdx, 3
   832 00000657 4889EF                  	mov rdi, rbp
   833 0000065A 4801D7                  	add rdi, rdx
   834 0000065D 4C8B4500                	mov r8, qword[rbp]
   835 00000661 4889E9                  	mov rcx, rbp
   836 00000664 4883E908                	sub rcx, 8
   837                                  	 .L_loop_fix_stuck_00b7:
   838 00000668 4839CC                  	cmp rsp, rcx
   839 0000066B 7710                    ja .L_loop_fix_stuck_end_00b7
   840 0000066D 488B19                   	mov rbx, qword[rcx]
   841 00000670 48891F                  	 mov qword[rdi], rbx
   842 00000673 4883EF08                	sub rdi, 8
   843 00000677 4883E908                	sub rcx, 8
   844 0000067B EBEB                    jmp .L_loop_fix_stuck_00b7
   845                                  	 .L_loop_fix_stuck_end_00b7:
   846 0000067D 4883C708                	add rdi, 8
   847 00000681 4889FC                  	 mov rsp, rdi
   848 00000684 4C89C5                  	mov rbp, r8
   849 00000687 5D                      	pop rbp
   850 00000688 FFE0                    	jmp rax 
   851 0000068A C9                      	leave
   852 0000068B C21800                  	ret 8 * (2 + 1)
   853                                  .L_lambda_simple_end_009d:	; new closure is in rax
   854 0000068E 48890425[C0010000]      	mov qword [free_var_56], rax
   855 00000696 48B8-                   	mov rax, sob_void
   855 00000698 [0000000000000000] 
   856                                  
   857 000006A0 4889C7                  	mov rdi, rax
   858 000006A3 E883080100              	call print_sexpr_if_not_void
   859                                  
   860 000006A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   861 000006AD E868080100              	call malloc
   862 000006B2 50                      	push rax
   863 000006B3 BF00000000              	mov rdi, 8 * 0	; new rib
   864 000006B8 E85D080100              	call malloc
   865 000006BD 50                      	push rax
   866 000006BE BF08000000              	mov rdi, 8 * 1	; extended env
   867 000006C3 E852080100              	call malloc
   868 000006C8 488B7D10                	mov rdi, ENV
   869 000006CC BE00000000              	mov rsi, 0
   870 000006D1 BA01000000              	mov rdx, 1
   871                                  .L_lambda_simple_env_loop_009e:	; ext_env[i + 1] <-- env[i]
   872 000006D6 4883FE00                	cmp rsi, 0
   873 000006DA 7410                    	je .L_lambda_simple_env_end_009e
   874 000006DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   875 000006E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
   876 000006E4 48FFC6                  	inc rsi
   877 000006E7 48FFC2                  	inc rdx
   878 000006EA EBEA                    	jmp .L_lambda_simple_env_loop_009e
   879                                  .L_lambda_simple_env_end_009e:
   880 000006EC 5B                      	pop rbx
   881 000006ED BE00000000              	mov rsi, 0
   882                                  .L_lambda_simple_params_loop_009e:	; copy params
   883 000006F2 4883FE00                	cmp rsi, 0
   884 000006F6 740E                    	je .L_lambda_simple_params_end_009e
   885 000006F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   886 000006FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
   887 00000701 48FFC6                  	inc rsi
   888 00000704 EBEC                    	jmp .L_lambda_simple_params_loop_009e
   889                                  .L_lambda_simple_params_end_009e:
   890 00000706 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   891 00000709 4889C3                  	mov rbx, rax
   892 0000070C 58                      	pop rax
   893 0000070D C60005                  	mov byte [rax], T_closure
   894 00000710 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   895 00000714 48C74009[21070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009e
   896 0000071C E999000000              	jmp .L_lambda_simple_end_009e
   897                                  .L_lambda_simple_code_009e:	; lambda-simple body
   898 00000721 48837C241001            	cmp qword [rsp + 8 * 2], 1
   899 00000727 740B                    	je .L_lambda_simple_arity_check_ok_009e
   900 00000729 FF742410                	push qword [rsp + 8 * 2]
   901 0000072D 6A01                    	push 1
   902 0000072F E99F070100              	jmp L_error_incorrect_arity_simple
   903                                  .L_lambda_simple_arity_check_ok_009e:
   904 00000734 C8000000                	enter 0, 0
   905 00000738 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
   906 0000073C 50                      	push rax
   907 0000073D 6A01                    	push 1
   908 0000073F 488B0425[88000000]      	mov rax, qword [free_var_17]
   909 00000747 803805                  	cmp byte [rax], T_closure 
   910 0000074A 0F857F170100                    jne L_code_ptr_error
   911                                  
   912 00000750 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
   913                                  
   914 00000754 53                              push rbx
   915                                  
   916 00000755 FF5009                          call SOB_CLOSURE_CODE(rax)
   917                                  
   918 00000758 50                              	push rax
   919                                  
   920 00000759 6A01                    	push 1
   921 0000075B 488B0425[80000000]      	mov rax, qword [free_var_16]
   922                                  	assert_closure(rax)
    42 00000763 803805              <1>  cmp byte [%1], %2
    43 00000766 0F85A21F0100        <1>  jne L_error_incorrect_type
   923 0000076C 50                      	push rax 
   924 0000076D FF7508                  	push qword [rbp + 8]
   925 00000770 FF7500                  	push qword [rbp]
   926 00000773 4883C308                	add rbx ,8*1
   927                                  	 .L_fix_stack_label_00b8:
   928 00000777 488B5518                	mov rdx, qword[rbp+8*3]
   929 0000077B 4883C203                	add rdx, 3
   930 0000077F 48C1E203                	shl rdx, 3
   931 00000783 4889EF                  	mov rdi, rbp
   932 00000786 4801D7                  	add rdi, rdx
   933 00000789 4C8B4500                	mov r8, qword[rbp]
   934 0000078D 4889E9                  	mov rcx, rbp
   935 00000790 4883E908                	sub rcx, 8
   936                                  	 .L_loop_fix_stuck_00b8:
   937 00000794 4839CC                  	cmp rsp, rcx
   938 00000797 7710                    ja .L_loop_fix_stuck_end_00b8
   939 00000799 488B19                   	mov rbx, qword[rcx]
   940 0000079C 48891F                  	 mov qword[rdi], rbx
   941 0000079F 4883EF08                	sub rdi, 8
   942 000007A3 4883E908                	sub rcx, 8
   943 000007A7 EBEB                    jmp .L_loop_fix_stuck_00b8
   944                                  	 .L_loop_fix_stuck_end_00b8:
   945 000007A9 4883C708                	add rdi, 8
   946 000007AD 4889FC                  	 mov rsp, rdi
   947 000007B0 4C89C5                  	mov rbp, r8
   948 000007B3 5D                      	pop rbp
   949 000007B4 FFE0                    	jmp rax 
   950 000007B6 C9                      	leave
   951 000007B7 C21800                  	ret 8 * (2 + 1)
   952                                  .L_lambda_simple_end_009e:	; new closure is in rax
   953 000007BA 48890425[C8010000]      	mov qword [free_var_57], rax
   954 000007C2 48B8-                   	mov rax, sob_void
   954 000007C4 [0000000000000000] 
   955                                  
   956 000007CC 4889C7                  	mov rdi, rax
   957 000007CF E857070100              	call print_sexpr_if_not_void
   958                                  
   959 000007D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   960 000007D9 E83C070100              	call malloc
   961 000007DE 50                      	push rax
   962 000007DF BF00000000              	mov rdi, 8 * 0	; new rib
   963 000007E4 E831070100              	call malloc
   964 000007E9 50                      	push rax
   965 000007EA BF08000000              	mov rdi, 8 * 1	; extended env
   966 000007EF E826070100              	call malloc
   967 000007F4 488B7D10                	mov rdi, ENV
   968 000007F8 BE00000000              	mov rsi, 0
   969 000007FD BA01000000              	mov rdx, 1
   970                                  .L_lambda_simple_env_loop_009f:	; ext_env[i + 1] <-- env[i]
   971 00000802 4883FE00                	cmp rsi, 0
   972 00000806 7410                    	je .L_lambda_simple_env_end_009f
   973 00000808 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   974 0000080C 48890CD0                	mov qword [rax + 8 * rdx], rcx
   975 00000810 48FFC6                  	inc rsi
   976 00000813 48FFC2                  	inc rdx
   977 00000816 EBEA                    	jmp .L_lambda_simple_env_loop_009f
   978                                  .L_lambda_simple_env_end_009f:
   979 00000818 5B                      	pop rbx
   980 00000819 BE00000000              	mov rsi, 0
   981                                  .L_lambda_simple_params_loop_009f:	; copy params
   982 0000081E 4883FE00                	cmp rsi, 0
   983 00000822 740E                    	je .L_lambda_simple_params_end_009f
   984 00000824 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   985 00000829 488914F3                	mov qword [rbx + 8 * rsi], rdx
   986 0000082D 48FFC6                  	inc rsi
   987 00000830 EBEC                    	jmp .L_lambda_simple_params_loop_009f
   988                                  .L_lambda_simple_params_end_009f:
   989 00000832 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   990 00000835 4889C3                  	mov rbx, rax
   991 00000838 58                      	pop rax
   992 00000839 C60005                  	mov byte [rax], T_closure
   993 0000083C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   994 00000840 48C74009[4D080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009f
   995 00000848 E999000000              	jmp .L_lambda_simple_end_009f
   996                                  .L_lambda_simple_code_009f:	; lambda-simple body
   997 0000084D 48837C241001            	cmp qword [rsp + 8 * 2], 1
   998 00000853 740B                    	je .L_lambda_simple_arity_check_ok_009f
   999 00000855 FF742410                	push qword [rsp + 8 * 2]
  1000 00000859 6A01                    	push 1
  1001 0000085B E973060100              	jmp L_error_incorrect_arity_simple
  1002                                  .L_lambda_simple_arity_check_ok_009f:
  1003 00000860 C8000000                	enter 0, 0
  1004 00000864 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1005 00000868 50                      	push rax
  1006 00000869 6A01                    	push 1
  1007 0000086B 488B0425[80000000]      	mov rax, qword [free_var_16]
  1008 00000873 803805                  	cmp byte [rax], T_closure 
  1009 00000876 0F8553160100                    jne L_code_ptr_error
  1010                                  
  1011 0000087C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1012                                  
  1013 00000880 53                              push rbx
  1014                                  
  1015 00000881 FF5009                          call SOB_CLOSURE_CODE(rax)
  1016                                  
  1017 00000884 50                              	push rax
  1018                                  
  1019 00000885 6A01                    	push 1
  1020 00000887 488B0425[88000000]      	mov rax, qword [free_var_17]
  1021                                  	assert_closure(rax)
    42 0000088F 803805              <1>  cmp byte [%1], %2
    43 00000892 0F85761E0100        <1>  jne L_error_incorrect_type
  1022 00000898 50                      	push rax 
  1023 00000899 FF7508                  	push qword [rbp + 8]
  1024 0000089C FF7500                  	push qword [rbp]
  1025 0000089F 4883C308                	add rbx ,8*1
  1026                                  	 .L_fix_stack_label_00b9:
  1027 000008A3 488B5518                	mov rdx, qword[rbp+8*3]
  1028 000008A7 4883C203                	add rdx, 3
  1029 000008AB 48C1E203                	shl rdx, 3
  1030 000008AF 4889EF                  	mov rdi, rbp
  1031 000008B2 4801D7                  	add rdi, rdx
  1032 000008B5 4C8B4500                	mov r8, qword[rbp]
  1033 000008B9 4889E9                  	mov rcx, rbp
  1034 000008BC 4883E908                	sub rcx, 8
  1035                                  	 .L_loop_fix_stuck_00b9:
  1036 000008C0 4839CC                  	cmp rsp, rcx
  1037 000008C3 7710                    ja .L_loop_fix_stuck_end_00b9
  1038 000008C5 488B19                   	mov rbx, qword[rcx]
  1039 000008C8 48891F                  	 mov qword[rdi], rbx
  1040 000008CB 4883EF08                	sub rdi, 8
  1041 000008CF 4883E908                	sub rcx, 8
  1042 000008D3 EBEB                    jmp .L_loop_fix_stuck_00b9
  1043                                  	 .L_loop_fix_stuck_end_00b9:
  1044 000008D5 4883C708                	add rdi, 8
  1045 000008D9 4889FC                  	 mov rsp, rdi
  1046 000008DC 4C89C5                  	mov rbp, r8
  1047 000008DF 5D                      	pop rbp
  1048 000008E0 FFE0                    	jmp rax 
  1049 000008E2 C9                      	leave
  1050 000008E3 C21800                  	ret 8 * (2 + 1)
  1051                                  .L_lambda_simple_end_009f:	; new closure is in rax
  1052 000008E6 48890425[D0010000]      	mov qword [free_var_58], rax
  1053 000008EE 48B8-                   	mov rax, sob_void
  1053 000008F0 [0000000000000000] 
  1054                                  
  1055 000008F8 4889C7                  	mov rdi, rax
  1056 000008FB E82B060100              	call print_sexpr_if_not_void
  1057                                  
  1058 00000900 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1059 00000905 E810060100              	call malloc
  1060 0000090A 50                      	push rax
  1061 0000090B BF00000000              	mov rdi, 8 * 0	; new rib
  1062 00000910 E805060100              	call malloc
  1063 00000915 50                      	push rax
  1064 00000916 BF08000000              	mov rdi, 8 * 1	; extended env
  1065 0000091B E8FA050100              	call malloc
  1066 00000920 488B7D10                	mov rdi, ENV
  1067 00000924 BE00000000              	mov rsi, 0
  1068 00000929 BA01000000              	mov rdx, 1
  1069                                  .L_lambda_simple_env_loop_00a0:	; ext_env[i + 1] <-- env[i]
  1070 0000092E 4883FE00                	cmp rsi, 0
  1071 00000932 7410                    	je .L_lambda_simple_env_end_00a0
  1072 00000934 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1073 00000938 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1074 0000093C 48FFC6                  	inc rsi
  1075 0000093F 48FFC2                  	inc rdx
  1076 00000942 EBEA                    	jmp .L_lambda_simple_env_loop_00a0
  1077                                  .L_lambda_simple_env_end_00a0:
  1078 00000944 5B                      	pop rbx
  1079 00000945 BE00000000              	mov rsi, 0
  1080                                  .L_lambda_simple_params_loop_00a0:	; copy params
  1081 0000094A 4883FE00                	cmp rsi, 0
  1082 0000094E 740E                    	je .L_lambda_simple_params_end_00a0
  1083 00000950 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1084 00000955 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1085 00000959 48FFC6                  	inc rsi
  1086 0000095C EBEC                    	jmp .L_lambda_simple_params_loop_00a0
  1087                                  .L_lambda_simple_params_end_00a0:
  1088 0000095E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1089 00000961 4889C3                  	mov rbx, rax
  1090 00000964 58                      	pop rax
  1091 00000965 C60005                  	mov byte [rax], T_closure
  1092 00000968 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1093 0000096C 48C74009[79090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a0
  1094 00000974 E999000000              	jmp .L_lambda_simple_end_00a0
  1095                                  .L_lambda_simple_code_00a0:	; lambda-simple body
  1096 00000979 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1097 0000097F 740B                    	je .L_lambda_simple_arity_check_ok_00a0
  1098 00000981 FF742410                	push qword [rsp + 8 * 2]
  1099 00000985 6A01                    	push 1
  1100 00000987 E947050100              	jmp L_error_incorrect_arity_simple
  1101                                  .L_lambda_simple_arity_check_ok_00a0:
  1102 0000098C C8000000                	enter 0, 0
  1103 00000990 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1104 00000994 50                      	push rax
  1105 00000995 6A01                    	push 1
  1106 00000997 488B0425[88000000]      	mov rax, qword [free_var_17]
  1107 0000099F 803805                  	cmp byte [rax], T_closure 
  1108 000009A2 0F8527150100                    jne L_code_ptr_error
  1109                                  
  1110 000009A8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1111                                  
  1112 000009AC 53                              push rbx
  1113                                  
  1114 000009AD FF5009                          call SOB_CLOSURE_CODE(rax)
  1115                                  
  1116 000009B0 50                              	push rax
  1117                                  
  1118 000009B1 6A01                    	push 1
  1119 000009B3 488B0425[88000000]      	mov rax, qword [free_var_17]
  1120                                  	assert_closure(rax)
    42 000009BB 803805              <1>  cmp byte [%1], %2
    43 000009BE 0F854A1D0100        <1>  jne L_error_incorrect_type
  1121 000009C4 50                      	push rax 
  1122 000009C5 FF7508                  	push qword [rbp + 8]
  1123 000009C8 FF7500                  	push qword [rbp]
  1124 000009CB 4883C308                	add rbx ,8*1
  1125                                  	 .L_fix_stack_label_00ba:
  1126 000009CF 488B5518                	mov rdx, qword[rbp+8*3]
  1127 000009D3 4883C203                	add rdx, 3
  1128 000009D7 48C1E203                	shl rdx, 3
  1129 000009DB 4889EF                  	mov rdi, rbp
  1130 000009DE 4801D7                  	add rdi, rdx
  1131 000009E1 4C8B4500                	mov r8, qword[rbp]
  1132 000009E5 4889E9                  	mov rcx, rbp
  1133 000009E8 4883E908                	sub rcx, 8
  1134                                  	 .L_loop_fix_stuck_00ba:
  1135 000009EC 4839CC                  	cmp rsp, rcx
  1136 000009EF 7710                    ja .L_loop_fix_stuck_end_00ba
  1137 000009F1 488B19                   	mov rbx, qword[rcx]
  1138 000009F4 48891F                  	 mov qword[rdi], rbx
  1139 000009F7 4883EF08                	sub rdi, 8
  1140 000009FB 4883E908                	sub rcx, 8
  1141 000009FF EBEB                    jmp .L_loop_fix_stuck_00ba
  1142                                  	 .L_loop_fix_stuck_end_00ba:
  1143 00000A01 4883C708                	add rdi, 8
  1144 00000A05 4889FC                  	 mov rsp, rdi
  1145 00000A08 4C89C5                  	mov rbp, r8
  1146 00000A0B 5D                      	pop rbp
  1147 00000A0C FFE0                    	jmp rax 
  1148 00000A0E C9                      	leave
  1149 00000A0F C21800                  	ret 8 * (2 + 1)
  1150                                  .L_lambda_simple_end_00a0:	; new closure is in rax
  1151 00000A12 48890425[D8010000]      	mov qword [free_var_59], rax
  1152 00000A1A 48B8-                   	mov rax, sob_void
  1152 00000A1C [0000000000000000] 
  1153                                  
  1154 00000A24 4889C7                  	mov rdi, rax
  1155 00000A27 E8FF040100              	call print_sexpr_if_not_void
  1156                                  
  1157 00000A2C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1158 00000A31 E8E4040100              	call malloc
  1159 00000A36 50                      	push rax
  1160 00000A37 BF00000000              	mov rdi, 8 * 0	; new rib
  1161 00000A3C E8D9040100              	call malloc
  1162 00000A41 50                      	push rax
  1163 00000A42 BF08000000              	mov rdi, 8 * 1	; extended env
  1164 00000A47 E8CE040100              	call malloc
  1165 00000A4C 488B7D10                	mov rdi, ENV
  1166 00000A50 BE00000000              	mov rsi, 0
  1167 00000A55 BA01000000              	mov rdx, 1
  1168                                  .L_lambda_simple_env_loop_00a1:	; ext_env[i + 1] <-- env[i]
  1169 00000A5A 4883FE00                	cmp rsi, 0
  1170 00000A5E 7410                    	je .L_lambda_simple_env_end_00a1
  1171 00000A60 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1172 00000A64 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1173 00000A68 48FFC6                  	inc rsi
  1174 00000A6B 48FFC2                  	inc rdx
  1175 00000A6E EBEA                    	jmp .L_lambda_simple_env_loop_00a1
  1176                                  .L_lambda_simple_env_end_00a1:
  1177 00000A70 5B                      	pop rbx
  1178 00000A71 BE00000000              	mov rsi, 0
  1179                                  .L_lambda_simple_params_loop_00a1:	; copy params
  1180 00000A76 4883FE00                	cmp rsi, 0
  1181 00000A7A 740E                    	je .L_lambda_simple_params_end_00a1
  1182 00000A7C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1183 00000A81 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1184 00000A85 48FFC6                  	inc rsi
  1185 00000A88 EBEC                    	jmp .L_lambda_simple_params_loop_00a1
  1186                                  .L_lambda_simple_params_end_00a1:
  1187 00000A8A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1188 00000A8D 4889C3                  	mov rbx, rax
  1189 00000A90 58                      	pop rax
  1190 00000A91 C60005                  	mov byte [rax], T_closure
  1191 00000A94 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1192 00000A98 48C74009[A50A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a1
  1193 00000AA0 E999000000              	jmp .L_lambda_simple_end_00a1
  1194                                  .L_lambda_simple_code_00a1:	; lambda-simple body
  1195 00000AA5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1196 00000AAB 740B                    	je .L_lambda_simple_arity_check_ok_00a1
  1197 00000AAD FF742410                	push qword [rsp + 8 * 2]
  1198 00000AB1 6A01                    	push 1
  1199 00000AB3 E91B040100              	jmp L_error_incorrect_arity_simple
  1200                                  .L_lambda_simple_arity_check_ok_00a1:
  1201 00000AB8 C8000000                	enter 0, 0
  1202 00000ABC 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1203 00000AC0 50                      	push rax
  1204 00000AC1 6A01                    	push 1
  1205 00000AC3 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1206 00000ACB 803805                  	cmp byte [rax], T_closure 
  1207 00000ACE 0F85FB130100                    jne L_code_ptr_error
  1208                                  
  1209 00000AD4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1210                                  
  1211 00000AD8 53                              push rbx
  1212                                  
  1213 00000AD9 FF5009                          call SOB_CLOSURE_CODE(rax)
  1214                                  
  1215 00000ADC 50                              	push rax
  1216                                  
  1217 00000ADD 6A01                    	push 1
  1218 00000ADF 488B0425[80000000]      	mov rax, qword [free_var_16]
  1219                                  	assert_closure(rax)
    42 00000AE7 803805              <1>  cmp byte [%1], %2
    43 00000AEA 0F851E1C0100        <1>  jne L_error_incorrect_type
  1220 00000AF0 50                      	push rax 
  1221 00000AF1 FF7508                  	push qword [rbp + 8]
  1222 00000AF4 FF7500                  	push qword [rbp]
  1223 00000AF7 4883C308                	add rbx ,8*1
  1224                                  	 .L_fix_stack_label_00bb:
  1225 00000AFB 488B5518                	mov rdx, qword[rbp+8*3]
  1226 00000AFF 4883C203                	add rdx, 3
  1227 00000B03 48C1E203                	shl rdx, 3
  1228 00000B07 4889EF                  	mov rdi, rbp
  1229 00000B0A 4801D7                  	add rdi, rdx
  1230 00000B0D 4C8B4500                	mov r8, qword[rbp]
  1231 00000B11 4889E9                  	mov rcx, rbp
  1232 00000B14 4883E908                	sub rcx, 8
  1233                                  	 .L_loop_fix_stuck_00bb:
  1234 00000B18 4839CC                  	cmp rsp, rcx
  1235 00000B1B 7710                    ja .L_loop_fix_stuck_end_00bb
  1236 00000B1D 488B19                   	mov rbx, qword[rcx]
  1237 00000B20 48891F                  	 mov qword[rdi], rbx
  1238 00000B23 4883EF08                	sub rdi, 8
  1239 00000B27 4883E908                	sub rcx, 8
  1240 00000B2B EBEB                    jmp .L_loop_fix_stuck_00bb
  1241                                  	 .L_loop_fix_stuck_end_00bb:
  1242 00000B2D 4883C708                	add rdi, 8
  1243 00000B31 4889FC                  	 mov rsp, rdi
  1244 00000B34 4C89C5                  	mov rbp, r8
  1245 00000B37 5D                      	pop rbp
  1246 00000B38 FFE0                    	jmp rax 
  1247 00000B3A C9                      	leave
  1248 00000B3B C21800                  	ret 8 * (2 + 1)
  1249                                  .L_lambda_simple_end_00a1:	; new closure is in rax
  1250 00000B3E 48890425[E0010000]      	mov qword [free_var_60], rax
  1251 00000B46 48B8-                   	mov rax, sob_void
  1251 00000B48 [0000000000000000] 
  1252                                  
  1253 00000B50 4889C7                  	mov rdi, rax
  1254 00000B53 E8D3030100              	call print_sexpr_if_not_void
  1255                                  
  1256 00000B58 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1257 00000B5D E8B8030100              	call malloc
  1258 00000B62 50                      	push rax
  1259 00000B63 BF00000000              	mov rdi, 8 * 0	; new rib
  1260 00000B68 E8AD030100              	call malloc
  1261 00000B6D 50                      	push rax
  1262 00000B6E BF08000000              	mov rdi, 8 * 1	; extended env
  1263 00000B73 E8A2030100              	call malloc
  1264 00000B78 488B7D10                	mov rdi, ENV
  1265 00000B7C BE00000000              	mov rsi, 0
  1266 00000B81 BA01000000              	mov rdx, 1
  1267                                  .L_lambda_simple_env_loop_00a2:	; ext_env[i + 1] <-- env[i]
  1268 00000B86 4883FE00                	cmp rsi, 0
  1269 00000B8A 7410                    	je .L_lambda_simple_env_end_00a2
  1270 00000B8C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1271 00000B90 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1272 00000B94 48FFC6                  	inc rsi
  1273 00000B97 48FFC2                  	inc rdx
  1274 00000B9A EBEA                    	jmp .L_lambda_simple_env_loop_00a2
  1275                                  .L_lambda_simple_env_end_00a2:
  1276 00000B9C 5B                      	pop rbx
  1277 00000B9D BE00000000              	mov rsi, 0
  1278                                  .L_lambda_simple_params_loop_00a2:	; copy params
  1279 00000BA2 4883FE00                	cmp rsi, 0
  1280 00000BA6 740E                    	je .L_lambda_simple_params_end_00a2
  1281 00000BA8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1282 00000BAD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1283 00000BB1 48FFC6                  	inc rsi
  1284 00000BB4 EBEC                    	jmp .L_lambda_simple_params_loop_00a2
  1285                                  .L_lambda_simple_params_end_00a2:
  1286 00000BB6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1287 00000BB9 4889C3                  	mov rbx, rax
  1288 00000BBC 58                      	pop rax
  1289 00000BBD C60005                  	mov byte [rax], T_closure
  1290 00000BC0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1291 00000BC4 48C74009[D10B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a2
  1292 00000BCC E999000000              	jmp .L_lambda_simple_end_00a2
  1293                                  .L_lambda_simple_code_00a2:	; lambda-simple body
  1294 00000BD1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1295 00000BD7 740B                    	je .L_lambda_simple_arity_check_ok_00a2
  1296 00000BD9 FF742410                	push qword [rsp + 8 * 2]
  1297 00000BDD 6A01                    	push 1
  1298 00000BDF E9EF020100              	jmp L_error_incorrect_arity_simple
  1299                                  .L_lambda_simple_arity_check_ok_00a2:
  1300 00000BE4 C8000000                	enter 0, 0
  1301 00000BE8 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1302 00000BEC 50                      	push rax
  1303 00000BED 6A01                    	push 1
  1304 00000BEF 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1305 00000BF7 803805                  	cmp byte [rax], T_closure 
  1306 00000BFA 0F85CF120100                    jne L_code_ptr_error
  1307                                  
  1308 00000C00 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1309                                  
  1310 00000C04 53                              push rbx
  1311                                  
  1312 00000C05 FF5009                          call SOB_CLOSURE_CODE(rax)
  1313                                  
  1314 00000C08 50                              	push rax
  1315                                  
  1316 00000C09 6A01                    	push 1
  1317 00000C0B 488B0425[80000000]      	mov rax, qword [free_var_16]
  1318                                  	assert_closure(rax)
    42 00000C13 803805              <1>  cmp byte [%1], %2
    43 00000C16 0F85F21A0100        <1>  jne L_error_incorrect_type
  1319 00000C1C 50                      	push rax 
  1320 00000C1D FF7508                  	push qword [rbp + 8]
  1321 00000C20 FF7500                  	push qword [rbp]
  1322 00000C23 4883C308                	add rbx ,8*1
  1323                                  	 .L_fix_stack_label_00bc:
  1324 00000C27 488B5518                	mov rdx, qword[rbp+8*3]
  1325 00000C2B 4883C203                	add rdx, 3
  1326 00000C2F 48C1E203                	shl rdx, 3
  1327 00000C33 4889EF                  	mov rdi, rbp
  1328 00000C36 4801D7                  	add rdi, rdx
  1329 00000C39 4C8B4500                	mov r8, qword[rbp]
  1330 00000C3D 4889E9                  	mov rcx, rbp
  1331 00000C40 4883E908                	sub rcx, 8
  1332                                  	 .L_loop_fix_stuck_00bc:
  1333 00000C44 4839CC                  	cmp rsp, rcx
  1334 00000C47 7710                    ja .L_loop_fix_stuck_end_00bc
  1335 00000C49 488B19                   	mov rbx, qword[rcx]
  1336 00000C4C 48891F                  	 mov qword[rdi], rbx
  1337 00000C4F 4883EF08                	sub rdi, 8
  1338 00000C53 4883E908                	sub rcx, 8
  1339 00000C57 EBEB                    jmp .L_loop_fix_stuck_00bc
  1340                                  	 .L_loop_fix_stuck_end_00bc:
  1341 00000C59 4883C708                	add rdi, 8
  1342 00000C5D 4889FC                  	 mov rsp, rdi
  1343 00000C60 4C89C5                  	mov rbp, r8
  1344 00000C63 5D                      	pop rbp
  1345 00000C64 FFE0                    	jmp rax 
  1346 00000C66 C9                      	leave
  1347 00000C67 C21800                  	ret 8 * (2 + 1)
  1348                                  .L_lambda_simple_end_00a2:	; new closure is in rax
  1349 00000C6A 48890425[E8010000]      	mov qword [free_var_61], rax
  1350 00000C72 48B8-                   	mov rax, sob_void
  1350 00000C74 [0000000000000000] 
  1351                                  
  1352 00000C7C 4889C7                  	mov rdi, rax
  1353 00000C7F E8A7020100              	call print_sexpr_if_not_void
  1354                                  
  1355 00000C84 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1356 00000C89 E88C020100              	call malloc
  1357 00000C8E 50                      	push rax
  1358 00000C8F BF00000000              	mov rdi, 8 * 0	; new rib
  1359 00000C94 E881020100              	call malloc
  1360 00000C99 50                      	push rax
  1361 00000C9A BF08000000              	mov rdi, 8 * 1	; extended env
  1362 00000C9F E876020100              	call malloc
  1363 00000CA4 488B7D10                	mov rdi, ENV
  1364 00000CA8 BE00000000              	mov rsi, 0
  1365 00000CAD BA01000000              	mov rdx, 1
  1366                                  .L_lambda_simple_env_loop_00a3:	; ext_env[i + 1] <-- env[i]
  1367 00000CB2 4883FE00                	cmp rsi, 0
  1368 00000CB6 7410                    	je .L_lambda_simple_env_end_00a3
  1369 00000CB8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1370 00000CBC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1371 00000CC0 48FFC6                  	inc rsi
  1372 00000CC3 48FFC2                  	inc rdx
  1373 00000CC6 EBEA                    	jmp .L_lambda_simple_env_loop_00a3
  1374                                  .L_lambda_simple_env_end_00a3:
  1375 00000CC8 5B                      	pop rbx
  1376 00000CC9 BE00000000              	mov rsi, 0
  1377                                  .L_lambda_simple_params_loop_00a3:	; copy params
  1378 00000CCE 4883FE00                	cmp rsi, 0
  1379 00000CD2 740E                    	je .L_lambda_simple_params_end_00a3
  1380 00000CD4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1381 00000CD9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1382 00000CDD 48FFC6                  	inc rsi
  1383 00000CE0 EBEC                    	jmp .L_lambda_simple_params_loop_00a3
  1384                                  .L_lambda_simple_params_end_00a3:
  1385 00000CE2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1386 00000CE5 4889C3                  	mov rbx, rax
  1387 00000CE8 58                      	pop rax
  1388 00000CE9 C60005                  	mov byte [rax], T_closure
  1389 00000CEC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1390 00000CF0 48C74009[FD0C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a3
  1391 00000CF8 E999000000              	jmp .L_lambda_simple_end_00a3
  1392                                  .L_lambda_simple_code_00a3:	; lambda-simple body
  1393 00000CFD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1394 00000D03 740B                    	je .L_lambda_simple_arity_check_ok_00a3
  1395 00000D05 FF742410                	push qword [rsp + 8 * 2]
  1396 00000D09 6A01                    	push 1
  1397 00000D0B E9C3010100              	jmp L_error_incorrect_arity_simple
  1398                                  .L_lambda_simple_arity_check_ok_00a3:
  1399 00000D10 C8000000                	enter 0, 0
  1400 00000D14 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1401 00000D18 50                      	push rax
  1402 00000D19 6A01                    	push 1
  1403 00000D1B 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1404 00000D23 803805                  	cmp byte [rax], T_closure 
  1405 00000D26 0F85A3110100                    jne L_code_ptr_error
  1406                                  
  1407 00000D2C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1408                                  
  1409 00000D30 53                              push rbx
  1410                                  
  1411 00000D31 FF5009                          call SOB_CLOSURE_CODE(rax)
  1412                                  
  1413 00000D34 50                              	push rax
  1414                                  
  1415 00000D35 6A01                    	push 1
  1416 00000D37 488B0425[80000000]      	mov rax, qword [free_var_16]
  1417                                  	assert_closure(rax)
    42 00000D3F 803805              <1>  cmp byte [%1], %2
    43 00000D42 0F85C6190100        <1>  jne L_error_incorrect_type
  1418 00000D48 50                      	push rax 
  1419 00000D49 FF7508                  	push qword [rbp + 8]
  1420 00000D4C FF7500                  	push qword [rbp]
  1421 00000D4F 4883C308                	add rbx ,8*1
  1422                                  	 .L_fix_stack_label_00bd:
  1423 00000D53 488B5518                	mov rdx, qword[rbp+8*3]
  1424 00000D57 4883C203                	add rdx, 3
  1425 00000D5B 48C1E203                	shl rdx, 3
  1426 00000D5F 4889EF                  	mov rdi, rbp
  1427 00000D62 4801D7                  	add rdi, rdx
  1428 00000D65 4C8B4500                	mov r8, qword[rbp]
  1429 00000D69 4889E9                  	mov rcx, rbp
  1430 00000D6C 4883E908                	sub rcx, 8
  1431                                  	 .L_loop_fix_stuck_00bd:
  1432 00000D70 4839CC                  	cmp rsp, rcx
  1433 00000D73 7710                    ja .L_loop_fix_stuck_end_00bd
  1434 00000D75 488B19                   	mov rbx, qword[rcx]
  1435 00000D78 48891F                  	 mov qword[rdi], rbx
  1436 00000D7B 4883EF08                	sub rdi, 8
  1437 00000D7F 4883E908                	sub rcx, 8
  1438 00000D83 EBEB                    jmp .L_loop_fix_stuck_00bd
  1439                                  	 .L_loop_fix_stuck_end_00bd:
  1440 00000D85 4883C708                	add rdi, 8
  1441 00000D89 4889FC                  	 mov rsp, rdi
  1442 00000D8C 4C89C5                  	mov rbp, r8
  1443 00000D8F 5D                      	pop rbp
  1444 00000D90 FFE0                    	jmp rax 
  1445 00000D92 C9                      	leave
  1446 00000D93 C21800                  	ret 8 * (2 + 1)
  1447                                  .L_lambda_simple_end_00a3:	; new closure is in rax
  1448 00000D96 48890425[F0010000]      	mov qword [free_var_62], rax
  1449 00000D9E 48B8-                   	mov rax, sob_void
  1449 00000DA0 [0000000000000000] 
  1450                                  
  1451 00000DA8 4889C7                  	mov rdi, rax
  1452 00000DAB E87B010100              	call print_sexpr_if_not_void
  1453                                  
  1454 00000DB0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1455 00000DB5 E860010100              	call malloc
  1456 00000DBA 50                      	push rax
  1457 00000DBB BF00000000              	mov rdi, 8 * 0	; new rib
  1458 00000DC0 E855010100              	call malloc
  1459 00000DC5 50                      	push rax
  1460 00000DC6 BF08000000              	mov rdi, 8 * 1	; extended env
  1461 00000DCB E84A010100              	call malloc
  1462 00000DD0 488B7D10                	mov rdi, ENV
  1463 00000DD4 BE00000000              	mov rsi, 0
  1464 00000DD9 BA01000000              	mov rdx, 1
  1465                                  .L_lambda_simple_env_loop_00a4:	; ext_env[i + 1] <-- env[i]
  1466 00000DDE 4883FE00                	cmp rsi, 0
  1467 00000DE2 7410                    	je .L_lambda_simple_env_end_00a4
  1468 00000DE4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1469 00000DE8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1470 00000DEC 48FFC6                  	inc rsi
  1471 00000DEF 48FFC2                  	inc rdx
  1472 00000DF2 EBEA                    	jmp .L_lambda_simple_env_loop_00a4
  1473                                  .L_lambda_simple_env_end_00a4:
  1474 00000DF4 5B                      	pop rbx
  1475 00000DF5 BE00000000              	mov rsi, 0
  1476                                  .L_lambda_simple_params_loop_00a4:	; copy params
  1477 00000DFA 4883FE00                	cmp rsi, 0
  1478 00000DFE 740E                    	je .L_lambda_simple_params_end_00a4
  1479 00000E00 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1480 00000E05 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1481 00000E09 48FFC6                  	inc rsi
  1482 00000E0C EBEC                    	jmp .L_lambda_simple_params_loop_00a4
  1483                                  .L_lambda_simple_params_end_00a4:
  1484 00000E0E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1485 00000E11 4889C3                  	mov rbx, rax
  1486 00000E14 58                      	pop rax
  1487 00000E15 C60005                  	mov byte [rax], T_closure
  1488 00000E18 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1489 00000E1C 48C74009[290E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a4
  1490 00000E24 E999000000              	jmp .L_lambda_simple_end_00a4
  1491                                  .L_lambda_simple_code_00a4:	; lambda-simple body
  1492 00000E29 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1493 00000E2F 740B                    	je .L_lambda_simple_arity_check_ok_00a4
  1494 00000E31 FF742410                	push qword [rsp + 8 * 2]
  1495 00000E35 6A01                    	push 1
  1496 00000E37 E997000100              	jmp L_error_incorrect_arity_simple
  1497                                  .L_lambda_simple_arity_check_ok_00a4:
  1498 00000E3C C8000000                	enter 0, 0
  1499 00000E40 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1500 00000E44 50                      	push rax
  1501 00000E45 6A01                    	push 1
  1502 00000E47 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1503 00000E4F 803805                  	cmp byte [rax], T_closure 
  1504 00000E52 0F8577100100                    jne L_code_ptr_error
  1505                                  
  1506 00000E58 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1507                                  
  1508 00000E5C 53                              push rbx
  1509                                  
  1510 00000E5D FF5009                          call SOB_CLOSURE_CODE(rax)
  1511                                  
  1512 00000E60 50                              	push rax
  1513                                  
  1514 00000E61 6A01                    	push 1
  1515 00000E63 488B0425[80000000]      	mov rax, qword [free_var_16]
  1516                                  	assert_closure(rax)
    42 00000E6B 803805              <1>  cmp byte [%1], %2
    43 00000E6E 0F859A180100        <1>  jne L_error_incorrect_type
  1517 00000E74 50                      	push rax 
  1518 00000E75 FF7508                  	push qword [rbp + 8]
  1519 00000E78 FF7500                  	push qword [rbp]
  1520 00000E7B 4883C308                	add rbx ,8*1
  1521                                  	 .L_fix_stack_label_00be:
  1522 00000E7F 488B5518                	mov rdx, qword[rbp+8*3]
  1523 00000E83 4883C203                	add rdx, 3
  1524 00000E87 48C1E203                	shl rdx, 3
  1525 00000E8B 4889EF                  	mov rdi, rbp
  1526 00000E8E 4801D7                  	add rdi, rdx
  1527 00000E91 4C8B4500                	mov r8, qword[rbp]
  1528 00000E95 4889E9                  	mov rcx, rbp
  1529 00000E98 4883E908                	sub rcx, 8
  1530                                  	 .L_loop_fix_stuck_00be:
  1531 00000E9C 4839CC                  	cmp rsp, rcx
  1532 00000E9F 7710                    ja .L_loop_fix_stuck_end_00be
  1533 00000EA1 488B19                   	mov rbx, qword[rcx]
  1534 00000EA4 48891F                  	 mov qword[rdi], rbx
  1535 00000EA7 4883EF08                	sub rdi, 8
  1536 00000EAB 4883E908                	sub rcx, 8
  1537 00000EAF EBEB                    jmp .L_loop_fix_stuck_00be
  1538                                  	 .L_loop_fix_stuck_end_00be:
  1539 00000EB1 4883C708                	add rdi, 8
  1540 00000EB5 4889FC                  	 mov rsp, rdi
  1541 00000EB8 4C89C5                  	mov rbp, r8
  1542 00000EBB 5D                      	pop rbp
  1543 00000EBC FFE0                    	jmp rax 
  1544 00000EBE C9                      	leave
  1545 00000EBF C21800                  	ret 8 * (2 + 1)
  1546                                  .L_lambda_simple_end_00a4:	; new closure is in rax
  1547 00000EC2 48890425[F8010000]      	mov qword [free_var_63], rax
  1548 00000ECA 48B8-                   	mov rax, sob_void
  1548 00000ECC [0000000000000000] 
  1549                                  
  1550 00000ED4 4889C7                  	mov rdi, rax
  1551 00000ED7 E84F000100              	call print_sexpr_if_not_void
  1552                                  
  1553 00000EDC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1554 00000EE1 E834000100              	call malloc
  1555 00000EE6 50                      	push rax
  1556 00000EE7 BF00000000              	mov rdi, 8 * 0	; new rib
  1557 00000EEC E829000100              	call malloc
  1558 00000EF1 50                      	push rax
  1559 00000EF2 BF08000000              	mov rdi, 8 * 1	; extended env
  1560 00000EF7 E81E000100              	call malloc
  1561 00000EFC 488B7D10                	mov rdi, ENV
  1562 00000F00 BE00000000              	mov rsi, 0
  1563 00000F05 BA01000000              	mov rdx, 1
  1564                                  .L_lambda_simple_env_loop_00a5:	; ext_env[i + 1] <-- env[i]
  1565 00000F0A 4883FE00                	cmp rsi, 0
  1566 00000F0E 7410                    	je .L_lambda_simple_env_end_00a5
  1567 00000F10 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1568 00000F14 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1569 00000F18 48FFC6                  	inc rsi
  1570 00000F1B 48FFC2                  	inc rdx
  1571 00000F1E EBEA                    	jmp .L_lambda_simple_env_loop_00a5
  1572                                  .L_lambda_simple_env_end_00a5:
  1573 00000F20 5B                      	pop rbx
  1574 00000F21 BE00000000              	mov rsi, 0
  1575                                  .L_lambda_simple_params_loop_00a5:	; copy params
  1576 00000F26 4883FE00                	cmp rsi, 0
  1577 00000F2A 740E                    	je .L_lambda_simple_params_end_00a5
  1578 00000F2C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1579 00000F31 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1580 00000F35 48FFC6                  	inc rsi
  1581 00000F38 EBEC                    	jmp .L_lambda_simple_params_loop_00a5
  1582                                  .L_lambda_simple_params_end_00a5:
  1583 00000F3A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1584 00000F3D 4889C3                  	mov rbx, rax
  1585 00000F40 58                      	pop rax
  1586 00000F41 C60005                  	mov byte [rax], T_closure
  1587 00000F44 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1588 00000F48 48C74009[550F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a5
  1589 00000F50 E999000000              	jmp .L_lambda_simple_end_00a5
  1590                                  .L_lambda_simple_code_00a5:	; lambda-simple body
  1591 00000F55 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1592 00000F5B 740B                    	je .L_lambda_simple_arity_check_ok_00a5
  1593 00000F5D FF742410                	push qword [rsp + 8 * 2]
  1594 00000F61 6A01                    	push 1
  1595 00000F63 E96BFF0000              	jmp L_error_incorrect_arity_simple
  1596                                  .L_lambda_simple_arity_check_ok_00a5:
  1597 00000F68 C8000000                	enter 0, 0
  1598 00000F6C 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1599 00000F70 50                      	push rax
  1600 00000F71 6A01                    	push 1
  1601 00000F73 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1602 00000F7B 803805                  	cmp byte [rax], T_closure 
  1603 00000F7E 0F854B0F0100                    jne L_code_ptr_error
  1604                                  
  1605 00000F84 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1606                                  
  1607 00000F88 53                              push rbx
  1608                                  
  1609 00000F89 FF5009                          call SOB_CLOSURE_CODE(rax)
  1610                                  
  1611 00000F8C 50                              	push rax
  1612                                  
  1613 00000F8D 6A01                    	push 1
  1614 00000F8F 488B0425[88000000]      	mov rax, qword [free_var_17]
  1615                                  	assert_closure(rax)
    42 00000F97 803805              <1>  cmp byte [%1], %2
    43 00000F9A 0F856E170100        <1>  jne L_error_incorrect_type
  1616 00000FA0 50                      	push rax 
  1617 00000FA1 FF7508                  	push qword [rbp + 8]
  1618 00000FA4 FF7500                  	push qword [rbp]
  1619 00000FA7 4883C308                	add rbx ,8*1
  1620                                  	 .L_fix_stack_label_00bf:
  1621 00000FAB 488B5518                	mov rdx, qword[rbp+8*3]
  1622 00000FAF 4883C203                	add rdx, 3
  1623 00000FB3 48C1E203                	shl rdx, 3
  1624 00000FB7 4889EF                  	mov rdi, rbp
  1625 00000FBA 4801D7                  	add rdi, rdx
  1626 00000FBD 4C8B4500                	mov r8, qword[rbp]
  1627 00000FC1 4889E9                  	mov rcx, rbp
  1628 00000FC4 4883E908                	sub rcx, 8
  1629                                  	 .L_loop_fix_stuck_00bf:
  1630 00000FC8 4839CC                  	cmp rsp, rcx
  1631 00000FCB 7710                    ja .L_loop_fix_stuck_end_00bf
  1632 00000FCD 488B19                   	mov rbx, qword[rcx]
  1633 00000FD0 48891F                  	 mov qword[rdi], rbx
  1634 00000FD3 4883EF08                	sub rdi, 8
  1635 00000FD7 4883E908                	sub rcx, 8
  1636 00000FDB EBEB                    jmp .L_loop_fix_stuck_00bf
  1637                                  	 .L_loop_fix_stuck_end_00bf:
  1638 00000FDD 4883C708                	add rdi, 8
  1639 00000FE1 4889FC                  	 mov rsp, rdi
  1640 00000FE4 4C89C5                  	mov rbp, r8
  1641 00000FE7 5D                      	pop rbp
  1642 00000FE8 FFE0                    	jmp rax 
  1643 00000FEA C9                      	leave
  1644 00000FEB C21800                  	ret 8 * (2 + 1)
  1645                                  .L_lambda_simple_end_00a5:	; new closure is in rax
  1646 00000FEE 48890425[00020000]      	mov qword [free_var_64], rax
  1647 00000FF6 48B8-                   	mov rax, sob_void
  1647 00000FF8 [0000000000000000] 
  1648                                  
  1649 00001000 4889C7                  	mov rdi, rax
  1650 00001003 E823FF0000              	call print_sexpr_if_not_void
  1651                                  
  1652 00001008 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1653 0000100D E808FF0000              	call malloc
  1654 00001012 50                      	push rax
  1655 00001013 BF00000000              	mov rdi, 8 * 0	; new rib
  1656 00001018 E8FDFE0000              	call malloc
  1657 0000101D 50                      	push rax
  1658 0000101E BF08000000              	mov rdi, 8 * 1	; extended env
  1659 00001023 E8F2FE0000              	call malloc
  1660 00001028 488B7D10                	mov rdi, ENV
  1661 0000102C BE00000000              	mov rsi, 0
  1662 00001031 BA01000000              	mov rdx, 1
  1663                                  .L_lambda_simple_env_loop_00a6:	; ext_env[i + 1] <-- env[i]
  1664 00001036 4883FE00                	cmp rsi, 0
  1665 0000103A 7410                    	je .L_lambda_simple_env_end_00a6
  1666 0000103C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1667 00001040 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1668 00001044 48FFC6                  	inc rsi
  1669 00001047 48FFC2                  	inc rdx
  1670 0000104A EBEA                    	jmp .L_lambda_simple_env_loop_00a6
  1671                                  .L_lambda_simple_env_end_00a6:
  1672 0000104C 5B                      	pop rbx
  1673 0000104D BE00000000              	mov rsi, 0
  1674                                  .L_lambda_simple_params_loop_00a6:	; copy params
  1675 00001052 4883FE00                	cmp rsi, 0
  1676 00001056 740E                    	je .L_lambda_simple_params_end_00a6
  1677 00001058 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1678 0000105D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1679 00001061 48FFC6                  	inc rsi
  1680 00001064 EBEC                    	jmp .L_lambda_simple_params_loop_00a6
  1681                                  .L_lambda_simple_params_end_00a6:
  1682 00001066 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1683 00001069 4889C3                  	mov rbx, rax
  1684 0000106C 58                      	pop rax
  1685 0000106D C60005                  	mov byte [rax], T_closure
  1686 00001070 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1687 00001074 48C74009[81100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a6
  1688 0000107C E999000000              	jmp .L_lambda_simple_end_00a6
  1689                                  .L_lambda_simple_code_00a6:	; lambda-simple body
  1690 00001081 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1691 00001087 740B                    	je .L_lambda_simple_arity_check_ok_00a6
  1692 00001089 FF742410                	push qword [rsp + 8 * 2]
  1693 0000108D 6A01                    	push 1
  1694 0000108F E93FFE0000              	jmp L_error_incorrect_arity_simple
  1695                                  .L_lambda_simple_arity_check_ok_00a6:
  1696 00001094 C8000000                	enter 0, 0
  1697 00001098 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1698 0000109C 50                      	push rax
  1699 0000109D 6A01                    	push 1
  1700 0000109F 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1701 000010A7 803805                  	cmp byte [rax], T_closure 
  1702 000010AA 0F851F0E0100                    jne L_code_ptr_error
  1703                                  
  1704 000010B0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1705                                  
  1706 000010B4 53                              push rbx
  1707                                  
  1708 000010B5 FF5009                          call SOB_CLOSURE_CODE(rax)
  1709                                  
  1710 000010B8 50                              	push rax
  1711                                  
  1712 000010B9 6A01                    	push 1
  1713 000010BB 488B0425[88000000]      	mov rax, qword [free_var_17]
  1714                                  	assert_closure(rax)
    42 000010C3 803805              <1>  cmp byte [%1], %2
    43 000010C6 0F8542160100        <1>  jne L_error_incorrect_type
  1715 000010CC 50                      	push rax 
  1716 000010CD FF7508                  	push qword [rbp + 8]
  1717 000010D0 FF7500                  	push qword [rbp]
  1718 000010D3 4883C308                	add rbx ,8*1
  1719                                  	 .L_fix_stack_label_00c0:
  1720 000010D7 488B5518                	mov rdx, qword[rbp+8*3]
  1721 000010DB 4883C203                	add rdx, 3
  1722 000010DF 48C1E203                	shl rdx, 3
  1723 000010E3 4889EF                  	mov rdi, rbp
  1724 000010E6 4801D7                  	add rdi, rdx
  1725 000010E9 4C8B4500                	mov r8, qword[rbp]
  1726 000010ED 4889E9                  	mov rcx, rbp
  1727 000010F0 4883E908                	sub rcx, 8
  1728                                  	 .L_loop_fix_stuck_00c0:
  1729 000010F4 4839CC                  	cmp rsp, rcx
  1730 000010F7 7710                    ja .L_loop_fix_stuck_end_00c0
  1731 000010F9 488B19                   	mov rbx, qword[rcx]
  1732 000010FC 48891F                  	 mov qword[rdi], rbx
  1733 000010FF 4883EF08                	sub rdi, 8
  1734 00001103 4883E908                	sub rcx, 8
  1735 00001107 EBEB                    jmp .L_loop_fix_stuck_00c0
  1736                                  	 .L_loop_fix_stuck_end_00c0:
  1737 00001109 4883C708                	add rdi, 8
  1738 0000110D 4889FC                  	 mov rsp, rdi
  1739 00001110 4C89C5                  	mov rbp, r8
  1740 00001113 5D                      	pop rbp
  1741 00001114 FFE0                    	jmp rax 
  1742 00001116 C9                      	leave
  1743 00001117 C21800                  	ret 8 * (2 + 1)
  1744                                  .L_lambda_simple_end_00a6:	; new closure is in rax
  1745 0000111A 48890425[08020000]      	mov qword [free_var_65], rax
  1746 00001122 48B8-                   	mov rax, sob_void
  1746 00001124 [0000000000000000] 
  1747                                  
  1748 0000112C 4889C7                  	mov rdi, rax
  1749 0000112F E8F7FD0000              	call print_sexpr_if_not_void
  1750                                  
  1751 00001134 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1752 00001139 E8DCFD0000              	call malloc
  1753 0000113E 50                      	push rax
  1754 0000113F BF00000000              	mov rdi, 8 * 0	; new rib
  1755 00001144 E8D1FD0000              	call malloc
  1756 00001149 50                      	push rax
  1757 0000114A BF08000000              	mov rdi, 8 * 1	; extended env
  1758 0000114F E8C6FD0000              	call malloc
  1759 00001154 488B7D10                	mov rdi, ENV
  1760 00001158 BE00000000              	mov rsi, 0
  1761 0000115D BA01000000              	mov rdx, 1
  1762                                  .L_lambda_simple_env_loop_00a7:	; ext_env[i + 1] <-- env[i]
  1763 00001162 4883FE00                	cmp rsi, 0
  1764 00001166 7410                    	je .L_lambda_simple_env_end_00a7
  1765 00001168 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1766 0000116C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1767 00001170 48FFC6                  	inc rsi
  1768 00001173 48FFC2                  	inc rdx
  1769 00001176 EBEA                    	jmp .L_lambda_simple_env_loop_00a7
  1770                                  .L_lambda_simple_env_end_00a7:
  1771 00001178 5B                      	pop rbx
  1772 00001179 BE00000000              	mov rsi, 0
  1773                                  .L_lambda_simple_params_loop_00a7:	; copy params
  1774 0000117E 4883FE00                	cmp rsi, 0
  1775 00001182 740E                    	je .L_lambda_simple_params_end_00a7
  1776 00001184 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1777 00001189 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1778 0000118D 48FFC6                  	inc rsi
  1779 00001190 EBEC                    	jmp .L_lambda_simple_params_loop_00a7
  1780                                  .L_lambda_simple_params_end_00a7:
  1781 00001192 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1782 00001195 4889C3                  	mov rbx, rax
  1783 00001198 58                      	pop rax
  1784 00001199 C60005                  	mov byte [rax], T_closure
  1785 0000119C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1786 000011A0 48C74009[AD110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a7
  1787 000011A8 E999000000              	jmp .L_lambda_simple_end_00a7
  1788                                  .L_lambda_simple_code_00a7:	; lambda-simple body
  1789 000011AD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1790 000011B3 740B                    	je .L_lambda_simple_arity_check_ok_00a7
  1791 000011B5 FF742410                	push qword [rsp + 8 * 2]
  1792 000011B9 6A01                    	push 1
  1793 000011BB E913FD0000              	jmp L_error_incorrect_arity_simple
  1794                                  .L_lambda_simple_arity_check_ok_00a7:
  1795 000011C0 C8000000                	enter 0, 0
  1796 000011C4 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1797 000011C8 50                      	push rax
  1798 000011C9 6A01                    	push 1
  1799 000011CB 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1800 000011D3 803805                  	cmp byte [rax], T_closure 
  1801 000011D6 0F85F30C0100                    jne L_code_ptr_error
  1802                                  
  1803 000011DC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1804                                  
  1805 000011E0 53                              push rbx
  1806                                  
  1807 000011E1 FF5009                          call SOB_CLOSURE_CODE(rax)
  1808                                  
  1809 000011E4 50                              	push rax
  1810                                  
  1811 000011E5 6A01                    	push 1
  1812 000011E7 488B0425[88000000]      	mov rax, qword [free_var_17]
  1813                                  	assert_closure(rax)
    42 000011EF 803805              <1>  cmp byte [%1], %2
    43 000011F2 0F8516150100        <1>  jne L_error_incorrect_type
  1814 000011F8 50                      	push rax 
  1815 000011F9 FF7508                  	push qword [rbp + 8]
  1816 000011FC FF7500                  	push qword [rbp]
  1817 000011FF 4883C308                	add rbx ,8*1
  1818                                  	 .L_fix_stack_label_00c1:
  1819 00001203 488B5518                	mov rdx, qword[rbp+8*3]
  1820 00001207 4883C203                	add rdx, 3
  1821 0000120B 48C1E203                	shl rdx, 3
  1822 0000120F 4889EF                  	mov rdi, rbp
  1823 00001212 4801D7                  	add rdi, rdx
  1824 00001215 4C8B4500                	mov r8, qword[rbp]
  1825 00001219 4889E9                  	mov rcx, rbp
  1826 0000121C 4883E908                	sub rcx, 8
  1827                                  	 .L_loop_fix_stuck_00c1:
  1828 00001220 4839CC                  	cmp rsp, rcx
  1829 00001223 7710                    ja .L_loop_fix_stuck_end_00c1
  1830 00001225 488B19                   	mov rbx, qword[rcx]
  1831 00001228 48891F                  	 mov qword[rdi], rbx
  1832 0000122B 4883EF08                	sub rdi, 8
  1833 0000122F 4883E908                	sub rcx, 8
  1834 00001233 EBEB                    jmp .L_loop_fix_stuck_00c1
  1835                                  	 .L_loop_fix_stuck_end_00c1:
  1836 00001235 4883C708                	add rdi, 8
  1837 00001239 4889FC                  	 mov rsp, rdi
  1838 0000123C 4C89C5                  	mov rbp, r8
  1839 0000123F 5D                      	pop rbp
  1840 00001240 FFE0                    	jmp rax 
  1841 00001242 C9                      	leave
  1842 00001243 C21800                  	ret 8 * (2 + 1)
  1843                                  .L_lambda_simple_end_00a7:	; new closure is in rax
  1844 00001246 48890425[10020000]      	mov qword [free_var_66], rax
  1845 0000124E 48B8-                   	mov rax, sob_void
  1845 00001250 [0000000000000000] 
  1846                                  
  1847 00001258 4889C7                  	mov rdi, rax
  1848 0000125B E8CBFC0000              	call print_sexpr_if_not_void
  1849                                  
  1850 00001260 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1851 00001265 E8B0FC0000              	call malloc
  1852 0000126A 50                      	push rax
  1853 0000126B BF00000000              	mov rdi, 8 * 0	; new rib
  1854 00001270 E8A5FC0000              	call malloc
  1855 00001275 50                      	push rax
  1856 00001276 BF08000000              	mov rdi, 8 * 1	; extended env
  1857 0000127B E89AFC0000              	call malloc
  1858 00001280 488B7D10                	mov rdi, ENV
  1859 00001284 BE00000000              	mov rsi, 0
  1860 00001289 BA01000000              	mov rdx, 1
  1861                                  .L_lambda_simple_env_loop_00a8:	; ext_env[i + 1] <-- env[i]
  1862 0000128E 4883FE00                	cmp rsi, 0
  1863 00001292 7410                    	je .L_lambda_simple_env_end_00a8
  1864 00001294 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1865 00001298 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1866 0000129C 48FFC6                  	inc rsi
  1867 0000129F 48FFC2                  	inc rdx
  1868 000012A2 EBEA                    	jmp .L_lambda_simple_env_loop_00a8
  1869                                  .L_lambda_simple_env_end_00a8:
  1870 000012A4 5B                      	pop rbx
  1871 000012A5 BE00000000              	mov rsi, 0
  1872                                  .L_lambda_simple_params_loop_00a8:	; copy params
  1873 000012AA 4883FE00                	cmp rsi, 0
  1874 000012AE 740E                    	je .L_lambda_simple_params_end_00a8
  1875 000012B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1876 000012B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1877 000012B9 48FFC6                  	inc rsi
  1878 000012BC EBEC                    	jmp .L_lambda_simple_params_loop_00a8
  1879                                  .L_lambda_simple_params_end_00a8:
  1880 000012BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1881 000012C1 4889C3                  	mov rbx, rax
  1882 000012C4 58                      	pop rax
  1883 000012C5 C60005                  	mov byte [rax], T_closure
  1884 000012C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1885 000012CC 48C74009[D9120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a8
  1886 000012D4 E999000000              	jmp .L_lambda_simple_end_00a8
  1887                                  .L_lambda_simple_code_00a8:	; lambda-simple body
  1888 000012D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1889 000012DF 740B                    	je .L_lambda_simple_arity_check_ok_00a8
  1890 000012E1 FF742410                	push qword [rsp + 8 * 2]
  1891 000012E5 6A01                    	push 1
  1892 000012E7 E9E7FB0000              	jmp L_error_incorrect_arity_simple
  1893                                  .L_lambda_simple_arity_check_ok_00a8:
  1894 000012EC C8000000                	enter 0, 0
  1895 000012F0 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1896 000012F4 50                      	push rax
  1897 000012F5 6A01                    	push 1
  1898 000012F7 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1899 000012FF 803805                  	cmp byte [rax], T_closure 
  1900 00001302 0F85C70B0100                    jne L_code_ptr_error
  1901                                  
  1902 00001308 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  1903                                  
  1904 0000130C 53                              push rbx
  1905                                  
  1906 0000130D FF5009                          call SOB_CLOSURE_CODE(rax)
  1907                                  
  1908 00001310 50                              	push rax
  1909                                  
  1910 00001311 6A01                    	push 1
  1911 00001313 488B0425[88000000]      	mov rax, qword [free_var_17]
  1912                                  	assert_closure(rax)
    42 0000131B 803805              <1>  cmp byte [%1], %2
    43 0000131E 0F85EA130100        <1>  jne L_error_incorrect_type
  1913 00001324 50                      	push rax 
  1914 00001325 FF7508                  	push qword [rbp + 8]
  1915 00001328 FF7500                  	push qword [rbp]
  1916 0000132B 4883C308                	add rbx ,8*1
  1917                                  	 .L_fix_stack_label_00c2:
  1918 0000132F 488B5518                	mov rdx, qword[rbp+8*3]
  1919 00001333 4883C203                	add rdx, 3
  1920 00001337 48C1E203                	shl rdx, 3
  1921 0000133B 4889EF                  	mov rdi, rbp
  1922 0000133E 4801D7                  	add rdi, rdx
  1923 00001341 4C8B4500                	mov r8, qword[rbp]
  1924 00001345 4889E9                  	mov rcx, rbp
  1925 00001348 4883E908                	sub rcx, 8
  1926                                  	 .L_loop_fix_stuck_00c2:
  1927 0000134C 4839CC                  	cmp rsp, rcx
  1928 0000134F 7710                    ja .L_loop_fix_stuck_end_00c2
  1929 00001351 488B19                   	mov rbx, qword[rcx]
  1930 00001354 48891F                  	 mov qword[rdi], rbx
  1931 00001357 4883EF08                	sub rdi, 8
  1932 0000135B 4883E908                	sub rcx, 8
  1933 0000135F EBEB                    jmp .L_loop_fix_stuck_00c2
  1934                                  	 .L_loop_fix_stuck_end_00c2:
  1935 00001361 4883C708                	add rdi, 8
  1936 00001365 4889FC                  	 mov rsp, rdi
  1937 00001368 4C89C5                  	mov rbp, r8
  1938 0000136B 5D                      	pop rbp
  1939 0000136C FFE0                    	jmp rax 
  1940 0000136E C9                      	leave
  1941 0000136F C21800                  	ret 8 * (2 + 1)
  1942                                  .L_lambda_simple_end_00a8:	; new closure is in rax
  1943 00001372 48890425[18020000]      	mov qword [free_var_67], rax
  1944 0000137A 48B8-                   	mov rax, sob_void
  1944 0000137C [0000000000000000] 
  1945                                  
  1946 00001384 4889C7                  	mov rdi, rax
  1947 00001387 E89FFB0000              	call print_sexpr_if_not_void
  1948                                  
  1949 0000138C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1950 00001391 E884FB0000              	call malloc
  1951 00001396 50                      	push rax
  1952 00001397 BF00000000              	mov rdi, 8 * 0	; new rib
  1953 0000139C E879FB0000              	call malloc
  1954 000013A1 50                      	push rax
  1955 000013A2 BF08000000              	mov rdi, 8 * 1	; extended env
  1956 000013A7 E86EFB0000              	call malloc
  1957 000013AC 488B7D10                	mov rdi, ENV
  1958 000013B0 BE00000000              	mov rsi, 0
  1959 000013B5 BA01000000              	mov rdx, 1
  1960                                  .L_lambda_simple_env_loop_00a9:	; ext_env[i + 1] <-- env[i]
  1961 000013BA 4883FE00                	cmp rsi, 0
  1962 000013BE 7410                    	je .L_lambda_simple_env_end_00a9
  1963 000013C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1964 000013C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1965 000013C8 48FFC6                  	inc rsi
  1966 000013CB 48FFC2                  	inc rdx
  1967 000013CE EBEA                    	jmp .L_lambda_simple_env_loop_00a9
  1968                                  .L_lambda_simple_env_end_00a9:
  1969 000013D0 5B                      	pop rbx
  1970 000013D1 BE00000000              	mov rsi, 0
  1971                                  .L_lambda_simple_params_loop_00a9:	; copy params
  1972 000013D6 4883FE00                	cmp rsi, 0
  1973 000013DA 740E                    	je .L_lambda_simple_params_end_00a9
  1974 000013DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1975 000013E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1976 000013E5 48FFC6                  	inc rsi
  1977 000013E8 EBEC                    	jmp .L_lambda_simple_params_loop_00a9
  1978                                  .L_lambda_simple_params_end_00a9:
  1979 000013EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1980 000013ED 4889C3                  	mov rbx, rax
  1981 000013F0 58                      	pop rax
  1982 000013F1 C60005                  	mov byte [rax], T_closure
  1983 000013F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1984 000013F8 48C74009[05140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a9
  1985 00001400 E999000000              	jmp .L_lambda_simple_end_00a9
  1986                                  .L_lambda_simple_code_00a9:	; lambda-simple body
  1987 00001405 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1988 0000140B 740B                    	je .L_lambda_simple_arity_check_ok_00a9
  1989 0000140D FF742410                	push qword [rsp + 8 * 2]
  1990 00001411 6A01                    	push 1
  1991 00001413 E9BBFA0000              	jmp L_error_incorrect_arity_simple
  1992                                  .L_lambda_simple_arity_check_ok_00a9:
  1993 00001418 C8000000                	enter 0, 0
  1994 0000141C 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  1995 00001420 50                      	push rax
  1996 00001421 6A01                    	push 1
  1997 00001423 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1998 0000142B 803805                  	cmp byte [rax], T_closure 
  1999 0000142E 0F859B0A0100                    jne L_code_ptr_error
  2000                                  
  2001 00001434 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2002                                  
  2003 00001438 53                              push rbx
  2004                                  
  2005 00001439 FF5009                          call SOB_CLOSURE_CODE(rax)
  2006                                  
  2007 0000143C 50                              	push rax
  2008                                  
  2009 0000143D 6A01                    	push 1
  2010 0000143F 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2011                                  	assert_closure(rax)
    42 00001447 803805              <1>  cmp byte [%1], %2
    43 0000144A 0F85BE120100        <1>  jne L_error_incorrect_type
  2012 00001450 50                      	push rax 
  2013 00001451 FF7508                  	push qword [rbp + 8]
  2014 00001454 FF7500                  	push qword [rbp]
  2015 00001457 4883C308                	add rbx ,8*1
  2016                                  	 .L_fix_stack_label_00c3:
  2017 0000145B 488B5518                	mov rdx, qword[rbp+8*3]
  2018 0000145F 4883C203                	add rdx, 3
  2019 00001463 48C1E203                	shl rdx, 3
  2020 00001467 4889EF                  	mov rdi, rbp
  2021 0000146A 4801D7                  	add rdi, rdx
  2022 0000146D 4C8B4500                	mov r8, qword[rbp]
  2023 00001471 4889E9                  	mov rcx, rbp
  2024 00001474 4883E908                	sub rcx, 8
  2025                                  	 .L_loop_fix_stuck_00c3:
  2026 00001478 4839CC                  	cmp rsp, rcx
  2027 0000147B 7710                    ja .L_loop_fix_stuck_end_00c3
  2028 0000147D 488B19                   	mov rbx, qword[rcx]
  2029 00001480 48891F                  	 mov qword[rdi], rbx
  2030 00001483 4883EF08                	sub rdi, 8
  2031 00001487 4883E908                	sub rcx, 8
  2032 0000148B EBEB                    jmp .L_loop_fix_stuck_00c3
  2033                                  	 .L_loop_fix_stuck_end_00c3:
  2034 0000148D 4883C708                	add rdi, 8
  2035 00001491 4889FC                  	 mov rsp, rdi
  2036 00001494 4C89C5                  	mov rbp, r8
  2037 00001497 5D                      	pop rbp
  2038 00001498 FFE0                    	jmp rax 
  2039 0000149A C9                      	leave
  2040 0000149B C21800                  	ret 8 * (2 + 1)
  2041                                  .L_lambda_simple_end_00a9:	; new closure is in rax
  2042 0000149E 48890425[20020000]      	mov qword [free_var_68], rax
  2043 000014A6 48B8-                   	mov rax, sob_void
  2043 000014A8 [0000000000000000] 
  2044                                  
  2045 000014B0 4889C7                  	mov rdi, rax
  2046 000014B3 E873FA0000              	call print_sexpr_if_not_void
  2047                                  
  2048 000014B8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2049 000014BD E858FA0000              	call malloc
  2050 000014C2 50                      	push rax
  2051 000014C3 BF00000000              	mov rdi, 8 * 0	; new rib
  2052 000014C8 E84DFA0000              	call malloc
  2053 000014CD 50                      	push rax
  2054 000014CE BF08000000              	mov rdi, 8 * 1	; extended env
  2055 000014D3 E842FA0000              	call malloc
  2056 000014D8 488B7D10                	mov rdi, ENV
  2057 000014DC BE00000000              	mov rsi, 0
  2058 000014E1 BA01000000              	mov rdx, 1
  2059                                  .L_lambda_simple_env_loop_00aa:	; ext_env[i + 1] <-- env[i]
  2060 000014E6 4883FE00                	cmp rsi, 0
  2061 000014EA 7410                    	je .L_lambda_simple_env_end_00aa
  2062 000014EC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2063 000014F0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2064 000014F4 48FFC6                  	inc rsi
  2065 000014F7 48FFC2                  	inc rdx
  2066 000014FA EBEA                    	jmp .L_lambda_simple_env_loop_00aa
  2067                                  .L_lambda_simple_env_end_00aa:
  2068 000014FC 5B                      	pop rbx
  2069 000014FD BE00000000              	mov rsi, 0
  2070                                  .L_lambda_simple_params_loop_00aa:	; copy params
  2071 00001502 4883FE00                	cmp rsi, 0
  2072 00001506 740E                    	je .L_lambda_simple_params_end_00aa
  2073 00001508 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2074 0000150D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2075 00001511 48FFC6                  	inc rsi
  2076 00001514 EBEC                    	jmp .L_lambda_simple_params_loop_00aa
  2077                                  .L_lambda_simple_params_end_00aa:
  2078 00001516 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2079 00001519 4889C3                  	mov rbx, rax
  2080 0000151C 58                      	pop rax
  2081 0000151D C60005                  	mov byte [rax], T_closure
  2082 00001520 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2083 00001524 48C74009[31150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00aa
  2084 0000152C E999000000              	jmp .L_lambda_simple_end_00aa
  2085                                  .L_lambda_simple_code_00aa:	; lambda-simple body
  2086 00001531 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2087 00001537 740B                    	je .L_lambda_simple_arity_check_ok_00aa
  2088 00001539 FF742410                	push qword [rsp + 8 * 2]
  2089 0000153D 6A01                    	push 1
  2090 0000153F E98FF90000              	jmp L_error_incorrect_arity_simple
  2091                                  .L_lambda_simple_arity_check_ok_00aa:
  2092 00001544 C8000000                	enter 0, 0
  2093 00001548 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2094 0000154C 50                      	push rax
  2095 0000154D 6A01                    	push 1
  2096 0000154F 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2097 00001557 803805                  	cmp byte [rax], T_closure 
  2098 0000155A 0F856F090100                    jne L_code_ptr_error
  2099                                  
  2100 00001560 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2101                                  
  2102 00001564 53                              push rbx
  2103                                  
  2104 00001565 FF5009                          call SOB_CLOSURE_CODE(rax)
  2105                                  
  2106 00001568 50                              	push rax
  2107                                  
  2108 00001569 6A01                    	push 1
  2109 0000156B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2110                                  	assert_closure(rax)
    42 00001573 803805              <1>  cmp byte [%1], %2
    43 00001576 0F8592110100        <1>  jne L_error_incorrect_type
  2111 0000157C 50                      	push rax 
  2112 0000157D FF7508                  	push qword [rbp + 8]
  2113 00001580 FF7500                  	push qword [rbp]
  2114 00001583 4883C308                	add rbx ,8*1
  2115                                  	 .L_fix_stack_label_00c4:
  2116 00001587 488B5518                	mov rdx, qword[rbp+8*3]
  2117 0000158B 4883C203                	add rdx, 3
  2118 0000158F 48C1E203                	shl rdx, 3
  2119 00001593 4889EF                  	mov rdi, rbp
  2120 00001596 4801D7                  	add rdi, rdx
  2121 00001599 4C8B4500                	mov r8, qword[rbp]
  2122 0000159D 4889E9                  	mov rcx, rbp
  2123 000015A0 4883E908                	sub rcx, 8
  2124                                  	 .L_loop_fix_stuck_00c4:
  2125 000015A4 4839CC                  	cmp rsp, rcx
  2126 000015A7 7710                    ja .L_loop_fix_stuck_end_00c4
  2127 000015A9 488B19                   	mov rbx, qword[rcx]
  2128 000015AC 48891F                  	 mov qword[rdi], rbx
  2129 000015AF 4883EF08                	sub rdi, 8
  2130 000015B3 4883E908                	sub rcx, 8
  2131 000015B7 EBEB                    jmp .L_loop_fix_stuck_00c4
  2132                                  	 .L_loop_fix_stuck_end_00c4:
  2133 000015B9 4883C708                	add rdi, 8
  2134 000015BD 4889FC                  	 mov rsp, rdi
  2135 000015C0 4C89C5                  	mov rbp, r8
  2136 000015C3 5D                      	pop rbp
  2137 000015C4 FFE0                    	jmp rax 
  2138 000015C6 C9                      	leave
  2139 000015C7 C21800                  	ret 8 * (2 + 1)
  2140                                  .L_lambda_simple_end_00aa:	; new closure is in rax
  2141 000015CA 48890425[28020000]      	mov qword [free_var_69], rax
  2142 000015D2 48B8-                   	mov rax, sob_void
  2142 000015D4 [0000000000000000] 
  2143                                  
  2144 000015DC 4889C7                  	mov rdi, rax
  2145 000015DF E847F90000              	call print_sexpr_if_not_void
  2146                                  
  2147 000015E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2148 000015E9 E82CF90000              	call malloc
  2149 000015EE 50                      	push rax
  2150 000015EF BF00000000              	mov rdi, 8 * 0	; new rib
  2151 000015F4 E821F90000              	call malloc
  2152 000015F9 50                      	push rax
  2153 000015FA BF08000000              	mov rdi, 8 * 1	; extended env
  2154 000015FF E816F90000              	call malloc
  2155 00001604 488B7D10                	mov rdi, ENV
  2156 00001608 BE00000000              	mov rsi, 0
  2157 0000160D BA01000000              	mov rdx, 1
  2158                                  .L_lambda_simple_env_loop_00ab:	; ext_env[i + 1] <-- env[i]
  2159 00001612 4883FE00                	cmp rsi, 0
  2160 00001616 7410                    	je .L_lambda_simple_env_end_00ab
  2161 00001618 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2162 0000161C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2163 00001620 48FFC6                  	inc rsi
  2164 00001623 48FFC2                  	inc rdx
  2165 00001626 EBEA                    	jmp .L_lambda_simple_env_loop_00ab
  2166                                  .L_lambda_simple_env_end_00ab:
  2167 00001628 5B                      	pop rbx
  2168 00001629 BE00000000              	mov rsi, 0
  2169                                  .L_lambda_simple_params_loop_00ab:	; copy params
  2170 0000162E 4883FE00                	cmp rsi, 0
  2171 00001632 740E                    	je .L_lambda_simple_params_end_00ab
  2172 00001634 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2173 00001639 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2174 0000163D 48FFC6                  	inc rsi
  2175 00001640 EBEC                    	jmp .L_lambda_simple_params_loop_00ab
  2176                                  .L_lambda_simple_params_end_00ab:
  2177 00001642 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2178 00001645 4889C3                  	mov rbx, rax
  2179 00001648 58                      	pop rax
  2180 00001649 C60005                  	mov byte [rax], T_closure
  2181 0000164C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2182 00001650 48C74009[5D160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ab
  2183 00001658 E999000000              	jmp .L_lambda_simple_end_00ab
  2184                                  .L_lambda_simple_code_00ab:	; lambda-simple body
  2185 0000165D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2186 00001663 740B                    	je .L_lambda_simple_arity_check_ok_00ab
  2187 00001665 FF742410                	push qword [rsp + 8 * 2]
  2188 00001669 6A01                    	push 1
  2189 0000166B E963F80000              	jmp L_error_incorrect_arity_simple
  2190                                  .L_lambda_simple_arity_check_ok_00ab:
  2191 00001670 C8000000                	enter 0, 0
  2192 00001674 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2193 00001678 50                      	push rax
  2194 00001679 6A01                    	push 1
  2195 0000167B 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2196 00001683 803805                  	cmp byte [rax], T_closure 
  2197 00001686 0F8543080100                    jne L_code_ptr_error
  2198                                  
  2199 0000168C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2200                                  
  2201 00001690 53                              push rbx
  2202                                  
  2203 00001691 FF5009                          call SOB_CLOSURE_CODE(rax)
  2204                                  
  2205 00001694 50                              	push rax
  2206                                  
  2207 00001695 6A01                    	push 1
  2208 00001697 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2209                                  	assert_closure(rax)
    42 0000169F 803805              <1>  cmp byte [%1], %2
    43 000016A2 0F8566100100        <1>  jne L_error_incorrect_type
  2210 000016A8 50                      	push rax 
  2211 000016A9 FF7508                  	push qword [rbp + 8]
  2212 000016AC FF7500                  	push qword [rbp]
  2213 000016AF 4883C308                	add rbx ,8*1
  2214                                  	 .L_fix_stack_label_00c5:
  2215 000016B3 488B5518                	mov rdx, qword[rbp+8*3]
  2216 000016B7 4883C203                	add rdx, 3
  2217 000016BB 48C1E203                	shl rdx, 3
  2218 000016BF 4889EF                  	mov rdi, rbp
  2219 000016C2 4801D7                  	add rdi, rdx
  2220 000016C5 4C8B4500                	mov r8, qword[rbp]
  2221 000016C9 4889E9                  	mov rcx, rbp
  2222 000016CC 4883E908                	sub rcx, 8
  2223                                  	 .L_loop_fix_stuck_00c5:
  2224 000016D0 4839CC                  	cmp rsp, rcx
  2225 000016D3 7710                    ja .L_loop_fix_stuck_end_00c5
  2226 000016D5 488B19                   	mov rbx, qword[rcx]
  2227 000016D8 48891F                  	 mov qword[rdi], rbx
  2228 000016DB 4883EF08                	sub rdi, 8
  2229 000016DF 4883E908                	sub rcx, 8
  2230 000016E3 EBEB                    jmp .L_loop_fix_stuck_00c5
  2231                                  	 .L_loop_fix_stuck_end_00c5:
  2232 000016E5 4883C708                	add rdi, 8
  2233 000016E9 4889FC                  	 mov rsp, rdi
  2234 000016EC 4C89C5                  	mov rbp, r8
  2235 000016EF 5D                      	pop rbp
  2236 000016F0 FFE0                    	jmp rax 
  2237 000016F2 C9                      	leave
  2238 000016F3 C21800                  	ret 8 * (2 + 1)
  2239                                  .L_lambda_simple_end_00ab:	; new closure is in rax
  2240 000016F6 48890425[30020000]      	mov qword [free_var_70], rax
  2241 000016FE 48B8-                   	mov rax, sob_void
  2241 00001700 [0000000000000000] 
  2242                                  
  2243 00001708 4889C7                  	mov rdi, rax
  2244 0000170B E81BF80000              	call print_sexpr_if_not_void
  2245                                  
  2246 00001710 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2247 00001715 E800F80000              	call malloc
  2248 0000171A 50                      	push rax
  2249 0000171B BF00000000              	mov rdi, 8 * 0	; new rib
  2250 00001720 E8F5F70000              	call malloc
  2251 00001725 50                      	push rax
  2252 00001726 BF08000000              	mov rdi, 8 * 1	; extended env
  2253 0000172B E8EAF70000              	call malloc
  2254 00001730 488B7D10                	mov rdi, ENV
  2255 00001734 BE00000000              	mov rsi, 0
  2256 00001739 BA01000000              	mov rdx, 1
  2257                                  .L_lambda_simple_env_loop_00ac:	; ext_env[i + 1] <-- env[i]
  2258 0000173E 4883FE00                	cmp rsi, 0
  2259 00001742 7410                    	je .L_lambda_simple_env_end_00ac
  2260 00001744 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2261 00001748 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2262 0000174C 48FFC6                  	inc rsi
  2263 0000174F 48FFC2                  	inc rdx
  2264 00001752 EBEA                    	jmp .L_lambda_simple_env_loop_00ac
  2265                                  .L_lambda_simple_env_end_00ac:
  2266 00001754 5B                      	pop rbx
  2267 00001755 BE00000000              	mov rsi, 0
  2268                                  .L_lambda_simple_params_loop_00ac:	; copy params
  2269 0000175A 4883FE00                	cmp rsi, 0
  2270 0000175E 740E                    	je .L_lambda_simple_params_end_00ac
  2271 00001760 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2272 00001765 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2273 00001769 48FFC6                  	inc rsi
  2274 0000176C EBEC                    	jmp .L_lambda_simple_params_loop_00ac
  2275                                  .L_lambda_simple_params_end_00ac:
  2276 0000176E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2277 00001771 4889C3                  	mov rbx, rax
  2278 00001774 58                      	pop rax
  2279 00001775 C60005                  	mov byte [rax], T_closure
  2280 00001778 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2281 0000177C 48C74009[89170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ac
  2282 00001784 E999000000              	jmp .L_lambda_simple_end_00ac
  2283                                  .L_lambda_simple_code_00ac:	; lambda-simple body
  2284 00001789 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2285 0000178F 740B                    	je .L_lambda_simple_arity_check_ok_00ac
  2286 00001791 FF742410                	push qword [rsp + 8 * 2]
  2287 00001795 6A01                    	push 1
  2288 00001797 E937F70000              	jmp L_error_incorrect_arity_simple
  2289                                  .L_lambda_simple_arity_check_ok_00ac:
  2290 0000179C C8000000                	enter 0, 0
  2291 000017A0 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2292 000017A4 50                      	push rax
  2293 000017A5 6A01                    	push 1
  2294 000017A7 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2295 000017AF 803805                  	cmp byte [rax], T_closure 
  2296 000017B2 0F8517070100                    jne L_code_ptr_error
  2297                                  
  2298 000017B8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2299                                  
  2300 000017BC 53                              push rbx
  2301                                  
  2302 000017BD FF5009                          call SOB_CLOSURE_CODE(rax)
  2303                                  
  2304 000017C0 50                              	push rax
  2305                                  
  2306 000017C1 6A01                    	push 1
  2307 000017C3 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2308                                  	assert_closure(rax)
    42 000017CB 803805              <1>  cmp byte [%1], %2
    43 000017CE 0F853A0F0100        <1>  jne L_error_incorrect_type
  2309 000017D4 50                      	push rax 
  2310 000017D5 FF7508                  	push qword [rbp + 8]
  2311 000017D8 FF7500                  	push qword [rbp]
  2312 000017DB 4883C308                	add rbx ,8*1
  2313                                  	 .L_fix_stack_label_00c6:
  2314 000017DF 488B5518                	mov rdx, qword[rbp+8*3]
  2315 000017E3 4883C203                	add rdx, 3
  2316 000017E7 48C1E203                	shl rdx, 3
  2317 000017EB 4889EF                  	mov rdi, rbp
  2318 000017EE 4801D7                  	add rdi, rdx
  2319 000017F1 4C8B4500                	mov r8, qword[rbp]
  2320 000017F5 4889E9                  	mov rcx, rbp
  2321 000017F8 4883E908                	sub rcx, 8
  2322                                  	 .L_loop_fix_stuck_00c6:
  2323 000017FC 4839CC                  	cmp rsp, rcx
  2324 000017FF 7710                    ja .L_loop_fix_stuck_end_00c6
  2325 00001801 488B19                   	mov rbx, qword[rcx]
  2326 00001804 48891F                  	 mov qword[rdi], rbx
  2327 00001807 4883EF08                	sub rdi, 8
  2328 0000180B 4883E908                	sub rcx, 8
  2329 0000180F EBEB                    jmp .L_loop_fix_stuck_00c6
  2330                                  	 .L_loop_fix_stuck_end_00c6:
  2331 00001811 4883C708                	add rdi, 8
  2332 00001815 4889FC                  	 mov rsp, rdi
  2333 00001818 4C89C5                  	mov rbp, r8
  2334 0000181B 5D                      	pop rbp
  2335 0000181C FFE0                    	jmp rax 
  2336 0000181E C9                      	leave
  2337 0000181F C21800                  	ret 8 * (2 + 1)
  2338                                  .L_lambda_simple_end_00ac:	; new closure is in rax
  2339 00001822 48890425[38020000]      	mov qword [free_var_71], rax
  2340 0000182A 48B8-                   	mov rax, sob_void
  2340 0000182C [0000000000000000] 
  2341                                  
  2342 00001834 4889C7                  	mov rdi, rax
  2343 00001837 E8EFF60000              	call print_sexpr_if_not_void
  2344                                  
  2345 0000183C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2346 00001841 E8D4F60000              	call malloc
  2347 00001846 50                      	push rax
  2348 00001847 BF00000000              	mov rdi, 8 * 0	; new rib
  2349 0000184C E8C9F60000              	call malloc
  2350 00001851 50                      	push rax
  2351 00001852 BF08000000              	mov rdi, 8 * 1	; extended env
  2352 00001857 E8BEF60000              	call malloc
  2353 0000185C 488B7D10                	mov rdi, ENV
  2354 00001860 BE00000000              	mov rsi, 0
  2355 00001865 BA01000000              	mov rdx, 1
  2356                                  .L_lambda_simple_env_loop_00ad:	; ext_env[i + 1] <-- env[i]
  2357 0000186A 4883FE00                	cmp rsi, 0
  2358 0000186E 7410                    	je .L_lambda_simple_env_end_00ad
  2359 00001870 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2360 00001874 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2361 00001878 48FFC6                  	inc rsi
  2362 0000187B 48FFC2                  	inc rdx
  2363 0000187E EBEA                    	jmp .L_lambda_simple_env_loop_00ad
  2364                                  .L_lambda_simple_env_end_00ad:
  2365 00001880 5B                      	pop rbx
  2366 00001881 BE00000000              	mov rsi, 0
  2367                                  .L_lambda_simple_params_loop_00ad:	; copy params
  2368 00001886 4883FE00                	cmp rsi, 0
  2369 0000188A 740E                    	je .L_lambda_simple_params_end_00ad
  2370 0000188C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2371 00001891 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2372 00001895 48FFC6                  	inc rsi
  2373 00001898 EBEC                    	jmp .L_lambda_simple_params_loop_00ad
  2374                                  .L_lambda_simple_params_end_00ad:
  2375 0000189A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2376 0000189D 4889C3                  	mov rbx, rax
  2377 000018A0 58                      	pop rax
  2378 000018A1 C60005                  	mov byte [rax], T_closure
  2379 000018A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2380 000018A8 48C74009[B5180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ad
  2381 000018B0 E999000000              	jmp .L_lambda_simple_end_00ad
  2382                                  .L_lambda_simple_code_00ad:	; lambda-simple body
  2383 000018B5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2384 000018BB 740B                    	je .L_lambda_simple_arity_check_ok_00ad
  2385 000018BD FF742410                	push qword [rsp + 8 * 2]
  2386 000018C1 6A01                    	push 1
  2387 000018C3 E90BF60000              	jmp L_error_incorrect_arity_simple
  2388                                  .L_lambda_simple_arity_check_ok_00ad:
  2389 000018C8 C8000000                	enter 0, 0
  2390 000018CC 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2391 000018D0 50                      	push rax
  2392 000018D1 6A01                    	push 1
  2393 000018D3 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2394 000018DB 803805                  	cmp byte [rax], T_closure 
  2395 000018DE 0F85EB050100                    jne L_code_ptr_error
  2396                                  
  2397 000018E4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2398                                  
  2399 000018E8 53                              push rbx
  2400                                  
  2401 000018E9 FF5009                          call SOB_CLOSURE_CODE(rax)
  2402                                  
  2403 000018EC 50                              	push rax
  2404                                  
  2405 000018ED 6A01                    	push 1
  2406 000018EF 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2407                                  	assert_closure(rax)
    42 000018F7 803805              <1>  cmp byte [%1], %2
    43 000018FA 0F850E0E0100        <1>  jne L_error_incorrect_type
  2408 00001900 50                      	push rax 
  2409 00001901 FF7508                  	push qword [rbp + 8]
  2410 00001904 FF7500                  	push qword [rbp]
  2411 00001907 4883C308                	add rbx ,8*1
  2412                                  	 .L_fix_stack_label_00c7:
  2413 0000190B 488B5518                	mov rdx, qword[rbp+8*3]
  2414 0000190F 4883C203                	add rdx, 3
  2415 00001913 48C1E203                	shl rdx, 3
  2416 00001917 4889EF                  	mov rdi, rbp
  2417 0000191A 4801D7                  	add rdi, rdx
  2418 0000191D 4C8B4500                	mov r8, qword[rbp]
  2419 00001921 4889E9                  	mov rcx, rbp
  2420 00001924 4883E908                	sub rcx, 8
  2421                                  	 .L_loop_fix_stuck_00c7:
  2422 00001928 4839CC                  	cmp rsp, rcx
  2423 0000192B 7710                    ja .L_loop_fix_stuck_end_00c7
  2424 0000192D 488B19                   	mov rbx, qword[rcx]
  2425 00001930 48891F                  	 mov qword[rdi], rbx
  2426 00001933 4883EF08                	sub rdi, 8
  2427 00001937 4883E908                	sub rcx, 8
  2428 0000193B EBEB                    jmp .L_loop_fix_stuck_00c7
  2429                                  	 .L_loop_fix_stuck_end_00c7:
  2430 0000193D 4883C708                	add rdi, 8
  2431 00001941 4889FC                  	 mov rsp, rdi
  2432 00001944 4C89C5                  	mov rbp, r8
  2433 00001947 5D                      	pop rbp
  2434 00001948 FFE0                    	jmp rax 
  2435 0000194A C9                      	leave
  2436 0000194B C21800                  	ret 8 * (2 + 1)
  2437                                  .L_lambda_simple_end_00ad:	; new closure is in rax
  2438 0000194E 48890425[40020000]      	mov qword [free_var_72], rax
  2439 00001956 48B8-                   	mov rax, sob_void
  2439 00001958 [0000000000000000] 
  2440                                  
  2441 00001960 4889C7                  	mov rdi, rax
  2442 00001963 E8C3F50000              	call print_sexpr_if_not_void
  2443                                  
  2444 00001968 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2445 0000196D E8A8F50000              	call malloc
  2446 00001972 50                      	push rax
  2447 00001973 BF00000000              	mov rdi, 8 * 0	; new rib
  2448 00001978 E89DF50000              	call malloc
  2449 0000197D 50                      	push rax
  2450 0000197E BF08000000              	mov rdi, 8 * 1	; extended env
  2451 00001983 E892F50000              	call malloc
  2452 00001988 488B7D10                	mov rdi, ENV
  2453 0000198C BE00000000              	mov rsi, 0
  2454 00001991 BA01000000              	mov rdx, 1
  2455                                  .L_lambda_simple_env_loop_00ae:	; ext_env[i + 1] <-- env[i]
  2456 00001996 4883FE00                	cmp rsi, 0
  2457 0000199A 7410                    	je .L_lambda_simple_env_end_00ae
  2458 0000199C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2459 000019A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2460 000019A4 48FFC6                  	inc rsi
  2461 000019A7 48FFC2                  	inc rdx
  2462 000019AA EBEA                    	jmp .L_lambda_simple_env_loop_00ae
  2463                                  .L_lambda_simple_env_end_00ae:
  2464 000019AC 5B                      	pop rbx
  2465 000019AD BE00000000              	mov rsi, 0
  2466                                  .L_lambda_simple_params_loop_00ae:	; copy params
  2467 000019B2 4883FE00                	cmp rsi, 0
  2468 000019B6 740E                    	je .L_lambda_simple_params_end_00ae
  2469 000019B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2470 000019BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2471 000019C1 48FFC6                  	inc rsi
  2472 000019C4 EBEC                    	jmp .L_lambda_simple_params_loop_00ae
  2473                                  .L_lambda_simple_params_end_00ae:
  2474 000019C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2475 000019C9 4889C3                  	mov rbx, rax
  2476 000019CC 58                      	pop rax
  2477 000019CD C60005                  	mov byte [rax], T_closure
  2478 000019D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2479 000019D4 48C74009[E1190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ae
  2480 000019DC E999000000              	jmp .L_lambda_simple_end_00ae
  2481                                  .L_lambda_simple_code_00ae:	; lambda-simple body
  2482 000019E1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2483 000019E7 740B                    	je .L_lambda_simple_arity_check_ok_00ae
  2484 000019E9 FF742410                	push qword [rsp + 8 * 2]
  2485 000019ED 6A01                    	push 1
  2486 000019EF E9DFF40000              	jmp L_error_incorrect_arity_simple
  2487                                  .L_lambda_simple_arity_check_ok_00ae:
  2488 000019F4 C8000000                	enter 0, 0
  2489 000019F8 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2490 000019FC 50                      	push rax
  2491 000019FD 6A01                    	push 1
  2492 000019FF 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2493 00001A07 803805                  	cmp byte [rax], T_closure 
  2494 00001A0A 0F85BF040100                    jne L_code_ptr_error
  2495                                  
  2496 00001A10 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2497                                  
  2498 00001A14 53                              push rbx
  2499                                  
  2500 00001A15 FF5009                          call SOB_CLOSURE_CODE(rax)
  2501                                  
  2502 00001A18 50                              	push rax
  2503                                  
  2504 00001A19 6A01                    	push 1
  2505 00001A1B 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2506                                  	assert_closure(rax)
    42 00001A23 803805              <1>  cmp byte [%1], %2
    43 00001A26 0F85E20C0100        <1>  jne L_error_incorrect_type
  2507 00001A2C 50                      	push rax 
  2508 00001A2D FF7508                  	push qword [rbp + 8]
  2509 00001A30 FF7500                  	push qword [rbp]
  2510 00001A33 4883C308                	add rbx ,8*1
  2511                                  	 .L_fix_stack_label_00c8:
  2512 00001A37 488B5518                	mov rdx, qword[rbp+8*3]
  2513 00001A3B 4883C203                	add rdx, 3
  2514 00001A3F 48C1E203                	shl rdx, 3
  2515 00001A43 4889EF                  	mov rdi, rbp
  2516 00001A46 4801D7                  	add rdi, rdx
  2517 00001A49 4C8B4500                	mov r8, qword[rbp]
  2518 00001A4D 4889E9                  	mov rcx, rbp
  2519 00001A50 4883E908                	sub rcx, 8
  2520                                  	 .L_loop_fix_stuck_00c8:
  2521 00001A54 4839CC                  	cmp rsp, rcx
  2522 00001A57 7710                    ja .L_loop_fix_stuck_end_00c8
  2523 00001A59 488B19                   	mov rbx, qword[rcx]
  2524 00001A5C 48891F                  	 mov qword[rdi], rbx
  2525 00001A5F 4883EF08                	sub rdi, 8
  2526 00001A63 4883E908                	sub rcx, 8
  2527 00001A67 EBEB                    jmp .L_loop_fix_stuck_00c8
  2528                                  	 .L_loop_fix_stuck_end_00c8:
  2529 00001A69 4883C708                	add rdi, 8
  2530 00001A6D 4889FC                  	 mov rsp, rdi
  2531 00001A70 4C89C5                  	mov rbp, r8
  2532 00001A73 5D                      	pop rbp
  2533 00001A74 FFE0                    	jmp rax 
  2534 00001A76 C9                      	leave
  2535 00001A77 C21800                  	ret 8 * (2 + 1)
  2536                                  .L_lambda_simple_end_00ae:	; new closure is in rax
  2537 00001A7A 48890425[48020000]      	mov qword [free_var_73], rax
  2538 00001A82 48B8-                   	mov rax, sob_void
  2538 00001A84 [0000000000000000] 
  2539                                  
  2540 00001A8C 4889C7                  	mov rdi, rax
  2541 00001A8F E897F40000              	call print_sexpr_if_not_void
  2542                                  
  2543 00001A94 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2544 00001A99 E87CF40000              	call malloc
  2545 00001A9E 50                      	push rax
  2546 00001A9F BF00000000              	mov rdi, 8 * 0	; new rib
  2547 00001AA4 E871F40000              	call malloc
  2548 00001AA9 50                      	push rax
  2549 00001AAA BF08000000              	mov rdi, 8 * 1	; extended env
  2550 00001AAF E866F40000              	call malloc
  2551 00001AB4 488B7D10                	mov rdi, ENV
  2552 00001AB8 BE00000000              	mov rsi, 0
  2553 00001ABD BA01000000              	mov rdx, 1
  2554                                  .L_lambda_simple_env_loop_00af:	; ext_env[i + 1] <-- env[i]
  2555 00001AC2 4883FE00                	cmp rsi, 0
  2556 00001AC6 7410                    	je .L_lambda_simple_env_end_00af
  2557 00001AC8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2558 00001ACC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2559 00001AD0 48FFC6                  	inc rsi
  2560 00001AD3 48FFC2                  	inc rdx
  2561 00001AD6 EBEA                    	jmp .L_lambda_simple_env_loop_00af
  2562                                  .L_lambda_simple_env_end_00af:
  2563 00001AD8 5B                      	pop rbx
  2564 00001AD9 BE00000000              	mov rsi, 0
  2565                                  .L_lambda_simple_params_loop_00af:	; copy params
  2566 00001ADE 4883FE00                	cmp rsi, 0
  2567 00001AE2 740E                    	je .L_lambda_simple_params_end_00af
  2568 00001AE4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2569 00001AE9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2570 00001AED 48FFC6                  	inc rsi
  2571 00001AF0 EBEC                    	jmp .L_lambda_simple_params_loop_00af
  2572                                  .L_lambda_simple_params_end_00af:
  2573 00001AF2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2574 00001AF5 4889C3                  	mov rbx, rax
  2575 00001AF8 58                      	pop rax
  2576 00001AF9 C60005                  	mov byte [rax], T_closure
  2577 00001AFC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2578 00001B00 48C74009[0D1B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00af
  2579 00001B08 E999000000              	jmp .L_lambda_simple_end_00af
  2580                                  .L_lambda_simple_code_00af:	; lambda-simple body
  2581 00001B0D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2582 00001B13 740B                    	je .L_lambda_simple_arity_check_ok_00af
  2583 00001B15 FF742410                	push qword [rsp + 8 * 2]
  2584 00001B19 6A01                    	push 1
  2585 00001B1B E9B3F30000              	jmp L_error_incorrect_arity_simple
  2586                                  .L_lambda_simple_arity_check_ok_00af:
  2587 00001B20 C8000000                	enter 0, 0
  2588 00001B24 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2589 00001B28 50                      	push rax
  2590 00001B29 6A01                    	push 1
  2591 00001B2B 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2592 00001B33 803805                  	cmp byte [rax], T_closure 
  2593 00001B36 0F8593030100                    jne L_code_ptr_error
  2594                                  
  2595 00001B3C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2596                                  
  2597 00001B40 53                              push rbx
  2598                                  
  2599 00001B41 FF5009                          call SOB_CLOSURE_CODE(rax)
  2600                                  
  2601 00001B44 50                              	push rax
  2602                                  
  2603 00001B45 6A01                    	push 1
  2604 00001B47 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2605                                  	assert_closure(rax)
    42 00001B4F 803805              <1>  cmp byte [%1], %2
    43 00001B52 0F85B60B0100        <1>  jne L_error_incorrect_type
  2606 00001B58 50                      	push rax 
  2607 00001B59 FF7508                  	push qword [rbp + 8]
  2608 00001B5C FF7500                  	push qword [rbp]
  2609 00001B5F 4883C308                	add rbx ,8*1
  2610                                  	 .L_fix_stack_label_00c9:
  2611 00001B63 488B5518                	mov rdx, qword[rbp+8*3]
  2612 00001B67 4883C203                	add rdx, 3
  2613 00001B6B 48C1E203                	shl rdx, 3
  2614 00001B6F 4889EF                  	mov rdi, rbp
  2615 00001B72 4801D7                  	add rdi, rdx
  2616 00001B75 4C8B4500                	mov r8, qword[rbp]
  2617 00001B79 4889E9                  	mov rcx, rbp
  2618 00001B7C 4883E908                	sub rcx, 8
  2619                                  	 .L_loop_fix_stuck_00c9:
  2620 00001B80 4839CC                  	cmp rsp, rcx
  2621 00001B83 7710                    ja .L_loop_fix_stuck_end_00c9
  2622 00001B85 488B19                   	mov rbx, qword[rcx]
  2623 00001B88 48891F                  	 mov qword[rdi], rbx
  2624 00001B8B 4883EF08                	sub rdi, 8
  2625 00001B8F 4883E908                	sub rcx, 8
  2626 00001B93 EBEB                    jmp .L_loop_fix_stuck_00c9
  2627                                  	 .L_loop_fix_stuck_end_00c9:
  2628 00001B95 4883C708                	add rdi, 8
  2629 00001B99 4889FC                  	 mov rsp, rdi
  2630 00001B9C 4C89C5                  	mov rbp, r8
  2631 00001B9F 5D                      	pop rbp
  2632 00001BA0 FFE0                    	jmp rax 
  2633 00001BA2 C9                      	leave
  2634 00001BA3 C21800                  	ret 8 * (2 + 1)
  2635                                  .L_lambda_simple_end_00af:	; new closure is in rax
  2636 00001BA6 48890425[50020000]      	mov qword [free_var_74], rax
  2637 00001BAE 48B8-                   	mov rax, sob_void
  2637 00001BB0 [0000000000000000] 
  2638                                  
  2639 00001BB8 4889C7                  	mov rdi, rax
  2640 00001BBB E86BF30000              	call print_sexpr_if_not_void
  2641                                  
  2642 00001BC0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2643 00001BC5 E850F30000              	call malloc
  2644 00001BCA 50                      	push rax
  2645 00001BCB BF00000000              	mov rdi, 8 * 0	; new rib
  2646 00001BD0 E845F30000              	call malloc
  2647 00001BD5 50                      	push rax
  2648 00001BD6 BF08000000              	mov rdi, 8 * 1	; extended env
  2649 00001BDB E83AF30000              	call malloc
  2650 00001BE0 488B7D10                	mov rdi, ENV
  2651 00001BE4 BE00000000              	mov rsi, 0
  2652 00001BE9 BA01000000              	mov rdx, 1
  2653                                  .L_lambda_simple_env_loop_00b0:	; ext_env[i + 1] <-- env[i]
  2654 00001BEE 4883FE00                	cmp rsi, 0
  2655 00001BF2 7410                    	je .L_lambda_simple_env_end_00b0
  2656 00001BF4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2657 00001BF8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2658 00001BFC 48FFC6                  	inc rsi
  2659 00001BFF 48FFC2                  	inc rdx
  2660 00001C02 EBEA                    	jmp .L_lambda_simple_env_loop_00b0
  2661                                  .L_lambda_simple_env_end_00b0:
  2662 00001C04 5B                      	pop rbx
  2663 00001C05 BE00000000              	mov rsi, 0
  2664                                  .L_lambda_simple_params_loop_00b0:	; copy params
  2665 00001C0A 4883FE00                	cmp rsi, 0
  2666 00001C0E 740E                    	je .L_lambda_simple_params_end_00b0
  2667 00001C10 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2668 00001C15 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2669 00001C19 48FFC6                  	inc rsi
  2670 00001C1C EBEC                    	jmp .L_lambda_simple_params_loop_00b0
  2671                                  .L_lambda_simple_params_end_00b0:
  2672 00001C1E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2673 00001C21 4889C3                  	mov rbx, rax
  2674 00001C24 58                      	pop rax
  2675 00001C25 C60005                  	mov byte [rax], T_closure
  2676 00001C28 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2677 00001C2C 48C74009[391C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b0
  2678 00001C34 E999000000              	jmp .L_lambda_simple_end_00b0
  2679                                  .L_lambda_simple_code_00b0:	; lambda-simple body
  2680 00001C39 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2681 00001C3F 740B                    	je .L_lambda_simple_arity_check_ok_00b0
  2682 00001C41 FF742410                	push qword [rsp + 8 * 2]
  2683 00001C45 6A01                    	push 1
  2684 00001C47 E987F20000              	jmp L_error_incorrect_arity_simple
  2685                                  .L_lambda_simple_arity_check_ok_00b0:
  2686 00001C4C C8000000                	enter 0, 0
  2687 00001C50 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2688 00001C54 50                      	push rax
  2689 00001C55 6A01                    	push 1
  2690 00001C57 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2691 00001C5F 803805                  	cmp byte [rax], T_closure 
  2692 00001C62 0F8567020100                    jne L_code_ptr_error
  2693                                  
  2694 00001C68 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2695                                  
  2696 00001C6C 53                              push rbx
  2697                                  
  2698 00001C6D FF5009                          call SOB_CLOSURE_CODE(rax)
  2699                                  
  2700 00001C70 50                              	push rax
  2701                                  
  2702 00001C71 6A01                    	push 1
  2703 00001C73 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2704                                  	assert_closure(rax)
    42 00001C7B 803805              <1>  cmp byte [%1], %2
    43 00001C7E 0F858A0A0100        <1>  jne L_error_incorrect_type
  2705 00001C84 50                      	push rax 
  2706 00001C85 FF7508                  	push qword [rbp + 8]
  2707 00001C88 FF7500                  	push qword [rbp]
  2708 00001C8B 4883C308                	add rbx ,8*1
  2709                                  	 .L_fix_stack_label_00ca:
  2710 00001C8F 488B5518                	mov rdx, qword[rbp+8*3]
  2711 00001C93 4883C203                	add rdx, 3
  2712 00001C97 48C1E203                	shl rdx, 3
  2713 00001C9B 4889EF                  	mov rdi, rbp
  2714 00001C9E 4801D7                  	add rdi, rdx
  2715 00001CA1 4C8B4500                	mov r8, qword[rbp]
  2716 00001CA5 4889E9                  	mov rcx, rbp
  2717 00001CA8 4883E908                	sub rcx, 8
  2718                                  	 .L_loop_fix_stuck_00ca:
  2719 00001CAC 4839CC                  	cmp rsp, rcx
  2720 00001CAF 7710                    ja .L_loop_fix_stuck_end_00ca
  2721 00001CB1 488B19                   	mov rbx, qword[rcx]
  2722 00001CB4 48891F                  	 mov qword[rdi], rbx
  2723 00001CB7 4883EF08                	sub rdi, 8
  2724 00001CBB 4883E908                	sub rcx, 8
  2725 00001CBF EBEB                    jmp .L_loop_fix_stuck_00ca
  2726                                  	 .L_loop_fix_stuck_end_00ca:
  2727 00001CC1 4883C708                	add rdi, 8
  2728 00001CC5 4889FC                  	 mov rsp, rdi
  2729 00001CC8 4C89C5                  	mov rbp, r8
  2730 00001CCB 5D                      	pop rbp
  2731 00001CCC FFE0                    	jmp rax 
  2732 00001CCE C9                      	leave
  2733 00001CCF C21800                  	ret 8 * (2 + 1)
  2734                                  .L_lambda_simple_end_00b0:	; new closure is in rax
  2735 00001CD2 48890425[58020000]      	mov qword [free_var_75], rax
  2736 00001CDA 48B8-                   	mov rax, sob_void
  2736 00001CDC [0000000000000000] 
  2737                                  
  2738 00001CE4 4889C7                  	mov rdi, rax
  2739 00001CE7 E83FF20000              	call print_sexpr_if_not_void
  2740                                  
  2741 00001CEC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2742 00001CF1 E824F20000              	call malloc
  2743 00001CF6 50                      	push rax
  2744 00001CF7 BF00000000              	mov rdi, 8 * 0	; new rib
  2745 00001CFC E819F20000              	call malloc
  2746 00001D01 50                      	push rax
  2747 00001D02 BF08000000              	mov rdi, 8 * 1	; extended env
  2748 00001D07 E80EF20000              	call malloc
  2749 00001D0C 488B7D10                	mov rdi, ENV
  2750 00001D10 BE00000000              	mov rsi, 0
  2751 00001D15 BA01000000              	mov rdx, 1
  2752                                  .L_lambda_simple_env_loop_00b1:	; ext_env[i + 1] <-- env[i]
  2753 00001D1A 4883FE00                	cmp rsi, 0
  2754 00001D1E 7410                    	je .L_lambda_simple_env_end_00b1
  2755 00001D20 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2756 00001D24 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2757 00001D28 48FFC6                  	inc rsi
  2758 00001D2B 48FFC2                  	inc rdx
  2759 00001D2E EBEA                    	jmp .L_lambda_simple_env_loop_00b1
  2760                                  .L_lambda_simple_env_end_00b1:
  2761 00001D30 5B                      	pop rbx
  2762 00001D31 BE00000000              	mov rsi, 0
  2763                                  .L_lambda_simple_params_loop_00b1:	; copy params
  2764 00001D36 4883FE00                	cmp rsi, 0
  2765 00001D3A 740E                    	je .L_lambda_simple_params_end_00b1
  2766 00001D3C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2767 00001D41 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2768 00001D45 48FFC6                  	inc rsi
  2769 00001D48 EBEC                    	jmp .L_lambda_simple_params_loop_00b1
  2770                                  .L_lambda_simple_params_end_00b1:
  2771 00001D4A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2772 00001D4D 4889C3                  	mov rbx, rax
  2773 00001D50 58                      	pop rax
  2774 00001D51 C60005                  	mov byte [rax], T_closure
  2775 00001D54 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2776 00001D58 48C74009[651D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b1
  2777 00001D60 E999000000              	jmp .L_lambda_simple_end_00b1
  2778                                  .L_lambda_simple_code_00b1:	; lambda-simple body
  2779 00001D65 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2780 00001D6B 740B                    	je .L_lambda_simple_arity_check_ok_00b1
  2781 00001D6D FF742410                	push qword [rsp + 8 * 2]
  2782 00001D71 6A01                    	push 1
  2783 00001D73 E95BF10000              	jmp L_error_incorrect_arity_simple
  2784                                  .L_lambda_simple_arity_check_ok_00b1:
  2785 00001D78 C8000000                	enter 0, 0
  2786 00001D7C 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2787 00001D80 50                      	push rax
  2788 00001D81 6A01                    	push 1
  2789 00001D83 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2790 00001D8B 803805                  	cmp byte [rax], T_closure 
  2791 00001D8E 0F853B010100                    jne L_code_ptr_error
  2792                                  
  2793 00001D94 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2794                                  
  2795 00001D98 53                              push rbx
  2796                                  
  2797 00001D99 FF5009                          call SOB_CLOSURE_CODE(rax)
  2798                                  
  2799 00001D9C 50                              	push rax
  2800                                  
  2801 00001D9D 6A01                    	push 1
  2802 00001D9F 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2803                                  	assert_closure(rax)
    42 00001DA7 803805              <1>  cmp byte [%1], %2
    43 00001DAA 0F855E090100        <1>  jne L_error_incorrect_type
  2804 00001DB0 50                      	push rax 
  2805 00001DB1 FF7508                  	push qword [rbp + 8]
  2806 00001DB4 FF7500                  	push qword [rbp]
  2807 00001DB7 4883C308                	add rbx ,8*1
  2808                                  	 .L_fix_stack_label_00cb:
  2809 00001DBB 488B5518                	mov rdx, qword[rbp+8*3]
  2810 00001DBF 4883C203                	add rdx, 3
  2811 00001DC3 48C1E203                	shl rdx, 3
  2812 00001DC7 4889EF                  	mov rdi, rbp
  2813 00001DCA 4801D7                  	add rdi, rdx
  2814 00001DCD 4C8B4500                	mov r8, qword[rbp]
  2815 00001DD1 4889E9                  	mov rcx, rbp
  2816 00001DD4 4883E908                	sub rcx, 8
  2817                                  	 .L_loop_fix_stuck_00cb:
  2818 00001DD8 4839CC                  	cmp rsp, rcx
  2819 00001DDB 7710                    ja .L_loop_fix_stuck_end_00cb
  2820 00001DDD 488B19                   	mov rbx, qword[rcx]
  2821 00001DE0 48891F                  	 mov qword[rdi], rbx
  2822 00001DE3 4883EF08                	sub rdi, 8
  2823 00001DE7 4883E908                	sub rcx, 8
  2824 00001DEB EBEB                    jmp .L_loop_fix_stuck_00cb
  2825                                  	 .L_loop_fix_stuck_end_00cb:
  2826 00001DED 4883C708                	add rdi, 8
  2827 00001DF1 4889FC                  	 mov rsp, rdi
  2828 00001DF4 4C89C5                  	mov rbp, r8
  2829 00001DF7 5D                      	pop rbp
  2830 00001DF8 FFE0                    	jmp rax 
  2831 00001DFA C9                      	leave
  2832 00001DFB C21800                  	ret 8 * (2 + 1)
  2833                                  .L_lambda_simple_end_00b1:	; new closure is in rax
  2834 00001DFE 48890425[60020000]      	mov qword [free_var_76], rax
  2835 00001E06 48B8-                   	mov rax, sob_void
  2835 00001E08 [0000000000000000] 
  2836                                  
  2837 00001E10 4889C7                  	mov rdi, rax
  2838 00001E13 E813F10000              	call print_sexpr_if_not_void
  2839                                  
  2840 00001E18 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2841 00001E1D E8F8F00000              	call malloc
  2842 00001E22 50                      	push rax
  2843 00001E23 BF00000000              	mov rdi, 8 * 0	; new rib
  2844 00001E28 E8EDF00000              	call malloc
  2845 00001E2D 50                      	push rax
  2846 00001E2E BF08000000              	mov rdi, 8 * 1	; extended env
  2847 00001E33 E8E2F00000              	call malloc
  2848 00001E38 488B7D10                	mov rdi, ENV
  2849 00001E3C BE00000000              	mov rsi, 0
  2850 00001E41 BA01000000              	mov rdx, 1
  2851                                  .L_lambda_simple_env_loop_00b2:	; ext_env[i + 1] <-- env[i]
  2852 00001E46 4883FE00                	cmp rsi, 0
  2853 00001E4A 7410                    	je .L_lambda_simple_env_end_00b2
  2854 00001E4C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2855 00001E50 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2856 00001E54 48FFC6                  	inc rsi
  2857 00001E57 48FFC2                  	inc rdx
  2858 00001E5A EBEA                    	jmp .L_lambda_simple_env_loop_00b2
  2859                                  .L_lambda_simple_env_end_00b2:
  2860 00001E5C 5B                      	pop rbx
  2861 00001E5D BE00000000              	mov rsi, 0
  2862                                  .L_lambda_simple_params_loop_00b2:	; copy params
  2863 00001E62 4883FE00                	cmp rsi, 0
  2864 00001E66 740E                    	je .L_lambda_simple_params_end_00b2
  2865 00001E68 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2866 00001E6D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2867 00001E71 48FFC6                  	inc rsi
  2868 00001E74 EBEC                    	jmp .L_lambda_simple_params_loop_00b2
  2869                                  .L_lambda_simple_params_end_00b2:
  2870 00001E76 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2871 00001E79 4889C3                  	mov rbx, rax
  2872 00001E7C 58                      	pop rax
  2873 00001E7D C60005                  	mov byte [rax], T_closure
  2874 00001E80 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2875 00001E84 48C74009[911E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b2
  2876 00001E8C E999000000              	jmp .L_lambda_simple_end_00b2
  2877                                  .L_lambda_simple_code_00b2:	; lambda-simple body
  2878 00001E91 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2879 00001E97 740B                    	je .L_lambda_simple_arity_check_ok_00b2
  2880 00001E99 FF742410                	push qword [rsp + 8 * 2]
  2881 00001E9D 6A01                    	push 1
  2882 00001E9F E92FF00000              	jmp L_error_incorrect_arity_simple
  2883                                  .L_lambda_simple_arity_check_ok_00b2:
  2884 00001EA4 C8000000                	enter 0, 0
  2885 00001EA8 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2886 00001EAC 50                      	push rax
  2887 00001EAD 6A01                    	push 1
  2888 00001EAF 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2889 00001EB7 803805                  	cmp byte [rax], T_closure 
  2890 00001EBA 0F850F000100                    jne L_code_ptr_error
  2891                                  
  2892 00001EC0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2893                                  
  2894 00001EC4 53                              push rbx
  2895                                  
  2896 00001EC5 FF5009                          call SOB_CLOSURE_CODE(rax)
  2897                                  
  2898 00001EC8 50                              	push rax
  2899                                  
  2900 00001EC9 6A01                    	push 1
  2901 00001ECB 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2902                                  	assert_closure(rax)
    42 00001ED3 803805              <1>  cmp byte [%1], %2
    43 00001ED6 0F8532080100        <1>  jne L_error_incorrect_type
  2903 00001EDC 50                      	push rax 
  2904 00001EDD FF7508                  	push qword [rbp + 8]
  2905 00001EE0 FF7500                  	push qword [rbp]
  2906 00001EE3 4883C308                	add rbx ,8*1
  2907                                  	 .L_fix_stack_label_00cc:
  2908 00001EE7 488B5518                	mov rdx, qword[rbp+8*3]
  2909 00001EEB 4883C203                	add rdx, 3
  2910 00001EEF 48C1E203                	shl rdx, 3
  2911 00001EF3 4889EF                  	mov rdi, rbp
  2912 00001EF6 4801D7                  	add rdi, rdx
  2913 00001EF9 4C8B4500                	mov r8, qword[rbp]
  2914 00001EFD 4889E9                  	mov rcx, rbp
  2915 00001F00 4883E908                	sub rcx, 8
  2916                                  	 .L_loop_fix_stuck_00cc:
  2917 00001F04 4839CC                  	cmp rsp, rcx
  2918 00001F07 7710                    ja .L_loop_fix_stuck_end_00cc
  2919 00001F09 488B19                   	mov rbx, qword[rcx]
  2920 00001F0C 48891F                  	 mov qword[rdi], rbx
  2921 00001F0F 4883EF08                	sub rdi, 8
  2922 00001F13 4883E908                	sub rcx, 8
  2923 00001F17 EBEB                    jmp .L_loop_fix_stuck_00cc
  2924                                  	 .L_loop_fix_stuck_end_00cc:
  2925 00001F19 4883C708                	add rdi, 8
  2926 00001F1D 4889FC                  	 mov rsp, rdi
  2927 00001F20 4C89C5                  	mov rbp, r8
  2928 00001F23 5D                      	pop rbp
  2929 00001F24 FFE0                    	jmp rax 
  2930 00001F26 C9                      	leave
  2931 00001F27 C21800                  	ret 8 * (2 + 1)
  2932                                  .L_lambda_simple_end_00b2:	; new closure is in rax
  2933 00001F2A 48890425[68020000]      	mov qword [free_var_77], rax
  2934 00001F32 48B8-                   	mov rax, sob_void
  2934 00001F34 [0000000000000000] 
  2935                                  
  2936 00001F3C 4889C7                  	mov rdi, rax
  2937 00001F3F E8E7EF0000              	call print_sexpr_if_not_void
  2938                                  
  2939 00001F44 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2940 00001F49 E8CCEF0000              	call malloc
  2941 00001F4E 50                      	push rax
  2942 00001F4F BF00000000              	mov rdi, 8 * 0	; new rib
  2943 00001F54 E8C1EF0000              	call malloc
  2944 00001F59 50                      	push rax
  2945 00001F5A BF08000000              	mov rdi, 8 * 1	; extended env
  2946 00001F5F E8B6EF0000              	call malloc
  2947 00001F64 488B7D10                	mov rdi, ENV
  2948 00001F68 BE00000000              	mov rsi, 0
  2949 00001F6D BA01000000              	mov rdx, 1
  2950                                  .L_lambda_simple_env_loop_00b3:	; ext_env[i + 1] <-- env[i]
  2951 00001F72 4883FE00                	cmp rsi, 0
  2952 00001F76 7410                    	je .L_lambda_simple_env_end_00b3
  2953 00001F78 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2954 00001F7C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2955 00001F80 48FFC6                  	inc rsi
  2956 00001F83 48FFC2                  	inc rdx
  2957 00001F86 EBEA                    	jmp .L_lambda_simple_env_loop_00b3
  2958                                  .L_lambda_simple_env_end_00b3:
  2959 00001F88 5B                      	pop rbx
  2960 00001F89 BE00000000              	mov rsi, 0
  2961                                  .L_lambda_simple_params_loop_00b3:	; copy params
  2962 00001F8E 4883FE00                	cmp rsi, 0
  2963 00001F92 740E                    	je .L_lambda_simple_params_end_00b3
  2964 00001F94 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2965 00001F99 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2966 00001F9D 48FFC6                  	inc rsi
  2967 00001FA0 EBEC                    	jmp .L_lambda_simple_params_loop_00b3
  2968                                  .L_lambda_simple_params_end_00b3:
  2969 00001FA2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2970 00001FA5 4889C3                  	mov rbx, rax
  2971 00001FA8 58                      	pop rax
  2972 00001FA9 C60005                  	mov byte [rax], T_closure
  2973 00001FAC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2974 00001FB0 48C74009[BD1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b3
  2975 00001FB8 E999000000              	jmp .L_lambda_simple_end_00b3
  2976                                  .L_lambda_simple_code_00b3:	; lambda-simple body
  2977 00001FBD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2978 00001FC3 740B                    	je .L_lambda_simple_arity_check_ok_00b3
  2979 00001FC5 FF742410                	push qword [rsp + 8 * 2]
  2980 00001FC9 6A01                    	push 1
  2981 00001FCB E903EF0000              	jmp L_error_incorrect_arity_simple
  2982                                  .L_lambda_simple_arity_check_ok_00b3:
  2983 00001FD0 C8000000                	enter 0, 0
  2984 00001FD4 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  2985 00001FD8 50                      	push rax
  2986 00001FD9 6A01                    	push 1
  2987 00001FDB 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2988 00001FE3 803805                  	cmp byte [rax], T_closure 
  2989 00001FE6 0F85E3FE0000                    jne L_code_ptr_error
  2990                                  
  2991 00001FEC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  2992                                  
  2993 00001FF0 53                              push rbx
  2994                                  
  2995 00001FF1 FF5009                          call SOB_CLOSURE_CODE(rax)
  2996                                  
  2997 00001FF4 50                              	push rax
  2998                                  
  2999 00001FF5 6A01                    	push 1
  3000 00001FF7 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3001                                  	assert_closure(rax)
    42 00001FFF 803805              <1>  cmp byte [%1], %2
    43 00002002 0F8506070100        <1>  jne L_error_incorrect_type
  3002 00002008 50                      	push rax 
  3003 00002009 FF7508                  	push qword [rbp + 8]
  3004 0000200C FF7500                  	push qword [rbp]
  3005 0000200F 4883C308                	add rbx ,8*1
  3006                                  	 .L_fix_stack_label_00cd:
  3007 00002013 488B5518                	mov rdx, qword[rbp+8*3]
  3008 00002017 4883C203                	add rdx, 3
  3009 0000201B 48C1E203                	shl rdx, 3
  3010 0000201F 4889EF                  	mov rdi, rbp
  3011 00002022 4801D7                  	add rdi, rdx
  3012 00002025 4C8B4500                	mov r8, qword[rbp]
  3013 00002029 4889E9                  	mov rcx, rbp
  3014 0000202C 4883E908                	sub rcx, 8
  3015                                  	 .L_loop_fix_stuck_00cd:
  3016 00002030 4839CC                  	cmp rsp, rcx
  3017 00002033 7710                    ja .L_loop_fix_stuck_end_00cd
  3018 00002035 488B19                   	mov rbx, qword[rcx]
  3019 00002038 48891F                  	 mov qword[rdi], rbx
  3020 0000203B 4883EF08                	sub rdi, 8
  3021 0000203F 4883E908                	sub rcx, 8
  3022 00002043 EBEB                    jmp .L_loop_fix_stuck_00cd
  3023                                  	 .L_loop_fix_stuck_end_00cd:
  3024 00002045 4883C708                	add rdi, 8
  3025 00002049 4889FC                  	 mov rsp, rdi
  3026 0000204C 4C89C5                  	mov rbp, r8
  3027 0000204F 5D                      	pop rbp
  3028 00002050 FFE0                    	jmp rax 
  3029 00002052 C9                      	leave
  3030 00002053 C21800                  	ret 8 * (2 + 1)
  3031                                  .L_lambda_simple_end_00b3:	; new closure is in rax
  3032 00002056 48890425[70020000]      	mov qword [free_var_78], rax
  3033 0000205E 48B8-                   	mov rax, sob_void
  3033 00002060 [0000000000000000] 
  3034                                  
  3035 00002068 4889C7                  	mov rdi, rax
  3036 0000206B E8BBEE0000              	call print_sexpr_if_not_void
  3037                                  
  3038 00002070 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3039 00002075 E8A0EE0000              	call malloc
  3040 0000207A 50                      	push rax
  3041 0000207B BF00000000              	mov rdi, 8 * 0	; new rib
  3042 00002080 E895EE0000              	call malloc
  3043 00002085 50                      	push rax
  3044 00002086 BF08000000              	mov rdi, 8 * 1	; extended env
  3045 0000208B E88AEE0000              	call malloc
  3046 00002090 488B7D10                	mov rdi, ENV
  3047 00002094 BE00000000              	mov rsi, 0
  3048 00002099 BA01000000              	mov rdx, 1
  3049                                  .L_lambda_simple_env_loop_00b4:	; ext_env[i + 1] <-- env[i]
  3050 0000209E 4883FE00                	cmp rsi, 0
  3051 000020A2 7410                    	je .L_lambda_simple_env_end_00b4
  3052 000020A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3053 000020A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3054 000020AC 48FFC6                  	inc rsi
  3055 000020AF 48FFC2                  	inc rdx
  3056 000020B2 EBEA                    	jmp .L_lambda_simple_env_loop_00b4
  3057                                  .L_lambda_simple_env_end_00b4:
  3058 000020B4 5B                      	pop rbx
  3059 000020B5 BE00000000              	mov rsi, 0
  3060                                  .L_lambda_simple_params_loop_00b4:	; copy params
  3061 000020BA 4883FE00                	cmp rsi, 0
  3062 000020BE 740E                    	je .L_lambda_simple_params_end_00b4
  3063 000020C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3064 000020C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3065 000020C9 48FFC6                  	inc rsi
  3066 000020CC EBEC                    	jmp .L_lambda_simple_params_loop_00b4
  3067                                  .L_lambda_simple_params_end_00b4:
  3068 000020CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3069 000020D1 4889C3                  	mov rbx, rax
  3070 000020D4 58                      	pop rax
  3071 000020D5 C60005                  	mov byte [rax], T_closure
  3072 000020D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3073 000020DC 48C74009[E9200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b4
  3074 000020E4 E999000000              	jmp .L_lambda_simple_end_00b4
  3075                                  .L_lambda_simple_code_00b4:	; lambda-simple body
  3076 000020E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3077 000020EF 740B                    	je .L_lambda_simple_arity_check_ok_00b4
  3078 000020F1 FF742410                	push qword [rsp + 8 * 2]
  3079 000020F5 6A01                    	push 1
  3080 000020F7 E9D7ED0000              	jmp L_error_incorrect_arity_simple
  3081                                  .L_lambda_simple_arity_check_ok_00b4:
  3082 000020FC C8000000                	enter 0, 0
  3083 00002100 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  3084 00002104 50                      	push rax
  3085 00002105 6A01                    	push 1
  3086 00002107 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3087 0000210F 803805                  	cmp byte [rax], T_closure 
  3088 00002112 0F85B7FD0000                    jne L_code_ptr_error
  3089                                  
  3090 00002118 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3091                                  
  3092 0000211C 53                              push rbx
  3093                                  
  3094 0000211D FF5009                          call SOB_CLOSURE_CODE(rax)
  3095                                  
  3096 00002120 50                              	push rax
  3097                                  
  3098 00002121 6A01                    	push 1
  3099 00002123 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3100                                  	assert_closure(rax)
    42 0000212B 803805              <1>  cmp byte [%1], %2
    43 0000212E 0F85DA050100        <1>  jne L_error_incorrect_type
  3101 00002134 50                      	push rax 
  3102 00002135 FF7508                  	push qword [rbp + 8]
  3103 00002138 FF7500                  	push qword [rbp]
  3104 0000213B 4883C308                	add rbx ,8*1
  3105                                  	 .L_fix_stack_label_00ce:
  3106 0000213F 488B5518                	mov rdx, qword[rbp+8*3]
  3107 00002143 4883C203                	add rdx, 3
  3108 00002147 48C1E203                	shl rdx, 3
  3109 0000214B 4889EF                  	mov rdi, rbp
  3110 0000214E 4801D7                  	add rdi, rdx
  3111 00002151 4C8B4500                	mov r8, qword[rbp]
  3112 00002155 4889E9                  	mov rcx, rbp
  3113 00002158 4883E908                	sub rcx, 8
  3114                                  	 .L_loop_fix_stuck_00ce:
  3115 0000215C 4839CC                  	cmp rsp, rcx
  3116 0000215F 7710                    ja .L_loop_fix_stuck_end_00ce
  3117 00002161 488B19                   	mov rbx, qword[rcx]
  3118 00002164 48891F                  	 mov qword[rdi], rbx
  3119 00002167 4883EF08                	sub rdi, 8
  3120 0000216B 4883E908                	sub rcx, 8
  3121 0000216F EBEB                    jmp .L_loop_fix_stuck_00ce
  3122                                  	 .L_loop_fix_stuck_end_00ce:
  3123 00002171 4883C708                	add rdi, 8
  3124 00002175 4889FC                  	 mov rsp, rdi
  3125 00002178 4C89C5                  	mov rbp, r8
  3126 0000217B 5D                      	pop rbp
  3127 0000217C FFE0                    	jmp rax 
  3128 0000217E C9                      	leave
  3129 0000217F C21800                  	ret 8 * (2 + 1)
  3130                                  .L_lambda_simple_end_00b4:	; new closure is in rax
  3131 00002182 48890425[78020000]      	mov qword [free_var_79], rax
  3132 0000218A 48B8-                   	mov rax, sob_void
  3132 0000218C [0000000000000000] 
  3133                                  
  3134 00002194 4889C7                  	mov rdi, rax
  3135 00002197 E88FED0000              	call print_sexpr_if_not_void
  3136                                  
  3137 0000219C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3138 000021A1 E874ED0000              	call malloc
  3139 000021A6 50                      	push rax
  3140 000021A7 BF00000000              	mov rdi, 8 * 0	; new rib
  3141 000021AC E869ED0000              	call malloc
  3142 000021B1 50                      	push rax
  3143 000021B2 BF08000000              	mov rdi, 8 * 1	; extended env
  3144 000021B7 E85EED0000              	call malloc
  3145 000021BC 488B7D10                	mov rdi, ENV
  3146 000021C0 BE00000000              	mov rsi, 0
  3147 000021C5 BA01000000              	mov rdx, 1
  3148                                  .L_lambda_simple_env_loop_00b5:	; ext_env[i + 1] <-- env[i]
  3149 000021CA 4883FE00                	cmp rsi, 0
  3150 000021CE 7410                    	je .L_lambda_simple_env_end_00b5
  3151 000021D0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3152 000021D4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3153 000021D8 48FFC6                  	inc rsi
  3154 000021DB 48FFC2                  	inc rdx
  3155 000021DE EBEA                    	jmp .L_lambda_simple_env_loop_00b5
  3156                                  .L_lambda_simple_env_end_00b5:
  3157 000021E0 5B                      	pop rbx
  3158 000021E1 BE00000000              	mov rsi, 0
  3159                                  .L_lambda_simple_params_loop_00b5:	; copy params
  3160 000021E6 4883FE00                	cmp rsi, 0
  3161 000021EA 740E                    	je .L_lambda_simple_params_end_00b5
  3162 000021EC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3163 000021F1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3164 000021F5 48FFC6                  	inc rsi
  3165 000021F8 EBEC                    	jmp .L_lambda_simple_params_loop_00b5
  3166                                  .L_lambda_simple_params_end_00b5:
  3167 000021FA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3168 000021FD 4889C3                  	mov rbx, rax
  3169 00002200 58                      	pop rax
  3170 00002201 C60005                  	mov byte [rax], T_closure
  3171 00002204 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3172 00002208 48C74009[15220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b5
  3173 00002210 E999000000              	jmp .L_lambda_simple_end_00b5
  3174                                  .L_lambda_simple_code_00b5:	; lambda-simple body
  3175 00002215 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3176 0000221B 740B                    	je .L_lambda_simple_arity_check_ok_00b5
  3177 0000221D FF742410                	push qword [rsp + 8 * 2]
  3178 00002221 6A01                    	push 1
  3179 00002223 E9ABEC0000              	jmp L_error_incorrect_arity_simple
  3180                                  .L_lambda_simple_arity_check_ok_00b5:
  3181 00002228 C8000000                	enter 0, 0
  3182 0000222C 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  3183 00002230 50                      	push rax
  3184 00002231 6A01                    	push 1
  3185 00002233 488B0425[C0010000]      	mov rax, qword [free_var_56]
  3186 0000223B 803805                  	cmp byte [rax], T_closure 
  3187 0000223E 0F858BFC0000                    jne L_code_ptr_error
  3188                                  
  3189 00002244 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3190                                  
  3191 00002248 53                              push rbx
  3192                                  
  3193 00002249 FF5009                          call SOB_CLOSURE_CODE(rax)
  3194                                  
  3195 0000224C 50                              	push rax
  3196                                  
  3197 0000224D 6A01                    	push 1
  3198 0000224F 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3199                                  	assert_closure(rax)
    42 00002257 803805              <1>  cmp byte [%1], %2
    43 0000225A 0F85AE040100        <1>  jne L_error_incorrect_type
  3200 00002260 50                      	push rax 
  3201 00002261 FF7508                  	push qword [rbp + 8]
  3202 00002264 FF7500                  	push qword [rbp]
  3203 00002267 4883C308                	add rbx ,8*1
  3204                                  	 .L_fix_stack_label_00cf:
  3205 0000226B 488B5518                	mov rdx, qword[rbp+8*3]
  3206 0000226F 4883C203                	add rdx, 3
  3207 00002273 48C1E203                	shl rdx, 3
  3208 00002277 4889EF                  	mov rdi, rbp
  3209 0000227A 4801D7                  	add rdi, rdx
  3210 0000227D 4C8B4500                	mov r8, qword[rbp]
  3211 00002281 4889E9                  	mov rcx, rbp
  3212 00002284 4883E908                	sub rcx, 8
  3213                                  	 .L_loop_fix_stuck_00cf:
  3214 00002288 4839CC                  	cmp rsp, rcx
  3215 0000228B 7710                    ja .L_loop_fix_stuck_end_00cf
  3216 0000228D 488B19                   	mov rbx, qword[rcx]
  3217 00002290 48891F                  	 mov qword[rdi], rbx
  3218 00002293 4883EF08                	sub rdi, 8
  3219 00002297 4883E908                	sub rcx, 8
  3220 0000229B EBEB                    jmp .L_loop_fix_stuck_00cf
  3221                                  	 .L_loop_fix_stuck_end_00cf:
  3222 0000229D 4883C708                	add rdi, 8
  3223 000022A1 4889FC                  	 mov rsp, rdi
  3224 000022A4 4C89C5                  	mov rbp, r8
  3225 000022A7 5D                      	pop rbp
  3226 000022A8 FFE0                    	jmp rax 
  3227 000022AA C9                      	leave
  3228 000022AB C21800                  	ret 8 * (2 + 1)
  3229                                  .L_lambda_simple_end_00b5:	; new closure is in rax
  3230 000022AE 48890425[80020000]      	mov qword [free_var_80], rax
  3231 000022B6 48B8-                   	mov rax, sob_void
  3231 000022B8 [0000000000000000] 
  3232                                  
  3233 000022C0 4889C7                  	mov rdi, rax
  3234 000022C3 E863EC0000              	call print_sexpr_if_not_void
  3235                                  
  3236 000022C8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3237 000022CD E848EC0000              	call malloc
  3238 000022D2 50                      	push rax
  3239 000022D3 BF00000000              	mov rdi, 8 * 0	; new rib
  3240 000022D8 E83DEC0000              	call malloc
  3241 000022DD 50                      	push rax
  3242 000022DE BF08000000              	mov rdi, 8 * 1	; extended env
  3243 000022E3 E832EC0000              	call malloc
  3244 000022E8 488B7D10                	mov rdi, ENV
  3245 000022EC BE00000000              	mov rsi, 0
  3246 000022F1 BA01000000              	mov rdx, 1
  3247                                  .L_lambda_simple_env_loop_00b6:	; ext_env[i + 1] <-- env[i]
  3248 000022F6 4883FE00                	cmp rsi, 0
  3249 000022FA 7410                    	je .L_lambda_simple_env_end_00b6
  3250 000022FC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3251 00002300 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3252 00002304 48FFC6                  	inc rsi
  3253 00002307 48FFC2                  	inc rdx
  3254 0000230A EBEA                    	jmp .L_lambda_simple_env_loop_00b6
  3255                                  .L_lambda_simple_env_end_00b6:
  3256 0000230C 5B                      	pop rbx
  3257 0000230D BE00000000              	mov rsi, 0
  3258                                  .L_lambda_simple_params_loop_00b6:	; copy params
  3259 00002312 4883FE00                	cmp rsi, 0
  3260 00002316 740E                    	je .L_lambda_simple_params_end_00b6
  3261 00002318 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3262 0000231D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3263 00002321 48FFC6                  	inc rsi
  3264 00002324 EBEC                    	jmp .L_lambda_simple_params_loop_00b6
  3265                                  .L_lambda_simple_params_end_00b6:
  3266 00002326 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3267 00002329 4889C3                  	mov rbx, rax
  3268 0000232C 58                      	pop rax
  3269 0000232D C60005                  	mov byte [rax], T_closure
  3270 00002330 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3271 00002334 48C74009[41230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b6
  3272 0000233C E999000000              	jmp .L_lambda_simple_end_00b6
  3273                                  .L_lambda_simple_code_00b6:	; lambda-simple body
  3274 00002341 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3275 00002347 740B                    	je .L_lambda_simple_arity_check_ok_00b6
  3276 00002349 FF742410                	push qword [rsp + 8 * 2]
  3277 0000234D 6A01                    	push 1
  3278 0000234F E97FEB0000              	jmp L_error_incorrect_arity_simple
  3279                                  .L_lambda_simple_arity_check_ok_00b6:
  3280 00002354 C8000000                	enter 0, 0
  3281 00002358 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  3282 0000235C 50                      	push rax
  3283 0000235D 6A01                    	push 1
  3284 0000235F 488B0425[C8010000]      	mov rax, qword [free_var_57]
  3285 00002367 803805                  	cmp byte [rax], T_closure 
  3286 0000236A 0F855FFB0000                    jne L_code_ptr_error
  3287                                  
  3288 00002370 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3289                                  
  3290 00002374 53                              push rbx
  3291                                  
  3292 00002375 FF5009                          call SOB_CLOSURE_CODE(rax)
  3293                                  
  3294 00002378 50                              	push rax
  3295                                  
  3296 00002379 6A01                    	push 1
  3297 0000237B 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3298                                  	assert_closure(rax)
    42 00002383 803805              <1>  cmp byte [%1], %2
    43 00002386 0F8582030100        <1>  jne L_error_incorrect_type
  3299 0000238C 50                      	push rax 
  3300 0000238D FF7508                  	push qword [rbp + 8]
  3301 00002390 FF7500                  	push qword [rbp]
  3302 00002393 4883C308                	add rbx ,8*1
  3303                                  	 .L_fix_stack_label_00d0:
  3304 00002397 488B5518                	mov rdx, qword[rbp+8*3]
  3305 0000239B 4883C203                	add rdx, 3
  3306 0000239F 48C1E203                	shl rdx, 3
  3307 000023A3 4889EF                  	mov rdi, rbp
  3308 000023A6 4801D7                  	add rdi, rdx
  3309 000023A9 4C8B4500                	mov r8, qword[rbp]
  3310 000023AD 4889E9                  	mov rcx, rbp
  3311 000023B0 4883E908                	sub rcx, 8
  3312                                  	 .L_loop_fix_stuck_00d0:
  3313 000023B4 4839CC                  	cmp rsp, rcx
  3314 000023B7 7710                    ja .L_loop_fix_stuck_end_00d0
  3315 000023B9 488B19                   	mov rbx, qword[rcx]
  3316 000023BC 48891F                  	 mov qword[rdi], rbx
  3317 000023BF 4883EF08                	sub rdi, 8
  3318 000023C3 4883E908                	sub rcx, 8
  3319 000023C7 EBEB                    jmp .L_loop_fix_stuck_00d0
  3320                                  	 .L_loop_fix_stuck_end_00d0:
  3321 000023C9 4883C708                	add rdi, 8
  3322 000023CD 4889FC                  	 mov rsp, rdi
  3323 000023D0 4C89C5                  	mov rbp, r8
  3324 000023D3 5D                      	pop rbp
  3325 000023D4 FFE0                    	jmp rax 
  3326 000023D6 C9                      	leave
  3327 000023D7 C21800                  	ret 8 * (2 + 1)
  3328                                  .L_lambda_simple_end_00b6:	; new closure is in rax
  3329 000023DA 48890425[88020000]      	mov qword [free_var_81], rax
  3330 000023E2 48B8-                   	mov rax, sob_void
  3330 000023E4 [0000000000000000] 
  3331                                  
  3332 000023EC 4889C7                  	mov rdi, rax
  3333 000023EF E837EB0000              	call print_sexpr_if_not_void
  3334                                  
  3335 000023F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3336 000023F9 E81CEB0000              	call malloc
  3337 000023FE 50                      	push rax
  3338 000023FF BF00000000              	mov rdi, 8 * 0	; new rib
  3339 00002404 E811EB0000              	call malloc
  3340 00002409 50                      	push rax
  3341 0000240A BF08000000              	mov rdi, 8 * 1	; extended env
  3342 0000240F E806EB0000              	call malloc
  3343 00002414 488B7D10                	mov rdi, ENV
  3344 00002418 BE00000000              	mov rsi, 0
  3345 0000241D BA01000000              	mov rdx, 1
  3346                                  .L_lambda_simple_env_loop_00b7:	; ext_env[i + 1] <-- env[i]
  3347 00002422 4883FE00                	cmp rsi, 0
  3348 00002426 7410                    	je .L_lambda_simple_env_end_00b7
  3349 00002428 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3350 0000242C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3351 00002430 48FFC6                  	inc rsi
  3352 00002433 48FFC2                  	inc rdx
  3353 00002436 EBEA                    	jmp .L_lambda_simple_env_loop_00b7
  3354                                  .L_lambda_simple_env_end_00b7:
  3355 00002438 5B                      	pop rbx
  3356 00002439 BE00000000              	mov rsi, 0
  3357                                  .L_lambda_simple_params_loop_00b7:	; copy params
  3358 0000243E 4883FE00                	cmp rsi, 0
  3359 00002442 740E                    	je .L_lambda_simple_params_end_00b7
  3360 00002444 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3361 00002449 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3362 0000244D 48FFC6                  	inc rsi
  3363 00002450 EBEC                    	jmp .L_lambda_simple_params_loop_00b7
  3364                                  .L_lambda_simple_params_end_00b7:
  3365 00002452 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3366 00002455 4889C3                  	mov rbx, rax
  3367 00002458 58                      	pop rax
  3368 00002459 C60005                  	mov byte [rax], T_closure
  3369 0000245C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3370 00002460 48C74009[6D240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b7
  3371 00002468 E999000000              	jmp .L_lambda_simple_end_00b7
  3372                                  .L_lambda_simple_code_00b7:	; lambda-simple body
  3373 0000246D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3374 00002473 740B                    	je .L_lambda_simple_arity_check_ok_00b7
  3375 00002475 FF742410                	push qword [rsp + 8 * 2]
  3376 00002479 6A01                    	push 1
  3377 0000247B E953EA0000              	jmp L_error_incorrect_arity_simple
  3378                                  .L_lambda_simple_arity_check_ok_00b7:
  3379 00002480 C8000000                	enter 0, 0
  3380 00002484 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  3381 00002488 50                      	push rax
  3382 00002489 6A01                    	push 1
  3383 0000248B 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3384 00002493 803805                  	cmp byte [rax], T_closure 
  3385 00002496 0F8533FA0000                    jne L_code_ptr_error
  3386                                  
  3387 0000249C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3388                                  
  3389 000024A0 53                              push rbx
  3390                                  
  3391 000024A1 FF5009                          call SOB_CLOSURE_CODE(rax)
  3392                                  
  3393 000024A4 50                              	push rax
  3394                                  
  3395 000024A5 6A01                    	push 1
  3396 000024A7 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3397                                  	assert_closure(rax)
    42 000024AF 803805              <1>  cmp byte [%1], %2
    43 000024B2 0F8556020100        <1>  jne L_error_incorrect_type
  3398 000024B8 50                      	push rax 
  3399 000024B9 FF7508                  	push qword [rbp + 8]
  3400 000024BC FF7500                  	push qword [rbp]
  3401 000024BF 4883C308                	add rbx ,8*1
  3402                                  	 .L_fix_stack_label_00d1:
  3403 000024C3 488B5518                	mov rdx, qword[rbp+8*3]
  3404 000024C7 4883C203                	add rdx, 3
  3405 000024CB 48C1E203                	shl rdx, 3
  3406 000024CF 4889EF                  	mov rdi, rbp
  3407 000024D2 4801D7                  	add rdi, rdx
  3408 000024D5 4C8B4500                	mov r8, qword[rbp]
  3409 000024D9 4889E9                  	mov rcx, rbp
  3410 000024DC 4883E908                	sub rcx, 8
  3411                                  	 .L_loop_fix_stuck_00d1:
  3412 000024E0 4839CC                  	cmp rsp, rcx
  3413 000024E3 7710                    ja .L_loop_fix_stuck_end_00d1
  3414 000024E5 488B19                   	mov rbx, qword[rcx]
  3415 000024E8 48891F                  	 mov qword[rdi], rbx
  3416 000024EB 4883EF08                	sub rdi, 8
  3417 000024EF 4883E908                	sub rcx, 8
  3418 000024F3 EBEB                    jmp .L_loop_fix_stuck_00d1
  3419                                  	 .L_loop_fix_stuck_end_00d1:
  3420 000024F5 4883C708                	add rdi, 8
  3421 000024F9 4889FC                  	 mov rsp, rdi
  3422 000024FC 4C89C5                  	mov rbp, r8
  3423 000024FF 5D                      	pop rbp
  3424 00002500 FFE0                    	jmp rax 
  3425 00002502 C9                      	leave
  3426 00002503 C21800                  	ret 8 * (2 + 1)
  3427                                  .L_lambda_simple_end_00b7:	; new closure is in rax
  3428 00002506 48890425[90020000]      	mov qword [free_var_82], rax
  3429 0000250E 48B8-                   	mov rax, sob_void
  3429 00002510 [0000000000000000] 
  3430                                  
  3431 00002518 4889C7                  	mov rdi, rax
  3432 0000251B E80BEA0000              	call print_sexpr_if_not_void
  3433                                  
  3434 00002520 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3435 00002525 E8F0E90000              	call malloc
  3436 0000252A 50                      	push rax
  3437 0000252B BF00000000              	mov rdi, 8 * 0	; new rib
  3438 00002530 E8E5E90000              	call malloc
  3439 00002535 50                      	push rax
  3440 00002536 BF08000000              	mov rdi, 8 * 1	; extended env
  3441 0000253B E8DAE90000              	call malloc
  3442 00002540 488B7D10                	mov rdi, ENV
  3443 00002544 BE00000000              	mov rsi, 0
  3444 00002549 BA01000000              	mov rdx, 1
  3445                                  .L_lambda_simple_env_loop_00b8:	; ext_env[i + 1] <-- env[i]
  3446 0000254E 4883FE00                	cmp rsi, 0
  3447 00002552 7410                    	je .L_lambda_simple_env_end_00b8
  3448 00002554 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3449 00002558 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3450 0000255C 48FFC6                  	inc rsi
  3451 0000255F 48FFC2                  	inc rdx
  3452 00002562 EBEA                    	jmp .L_lambda_simple_env_loop_00b8
  3453                                  .L_lambda_simple_env_end_00b8:
  3454 00002564 5B                      	pop rbx
  3455 00002565 BE00000000              	mov rsi, 0
  3456                                  .L_lambda_simple_params_loop_00b8:	; copy params
  3457 0000256A 4883FE00                	cmp rsi, 0
  3458 0000256E 740E                    	je .L_lambda_simple_params_end_00b8
  3459 00002570 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3460 00002575 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3461 00002579 48FFC6                  	inc rsi
  3462 0000257C EBEC                    	jmp .L_lambda_simple_params_loop_00b8
  3463                                  .L_lambda_simple_params_end_00b8:
  3464 0000257E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3465 00002581 4889C3                  	mov rbx, rax
  3466 00002584 58                      	pop rax
  3467 00002585 C60005                  	mov byte [rax], T_closure
  3468 00002588 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3469 0000258C 48C74009[99250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b8
  3470 00002594 E999000000              	jmp .L_lambda_simple_end_00b8
  3471                                  .L_lambda_simple_code_00b8:	; lambda-simple body
  3472 00002599 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3473 0000259F 740B                    	je .L_lambda_simple_arity_check_ok_00b8
  3474 000025A1 FF742410                	push qword [rsp + 8 * 2]
  3475 000025A5 6A01                    	push 1
  3476 000025A7 E927E90000              	jmp L_error_incorrect_arity_simple
  3477                                  .L_lambda_simple_arity_check_ok_00b8:
  3478 000025AC C8000000                	enter 0, 0
  3479 000025B0 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  3480 000025B4 50                      	push rax
  3481 000025B5 6A01                    	push 1
  3482 000025B7 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3483 000025BF 803805                  	cmp byte [rax], T_closure 
  3484 000025C2 0F8507F90000                    jne L_code_ptr_error
  3485                                  
  3486 000025C8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3487                                  
  3488 000025CC 53                              push rbx
  3489                                  
  3490 000025CD FF5009                          call SOB_CLOSURE_CODE(rax)
  3491                                  
  3492 000025D0 50                              	push rax
  3493                                  
  3494 000025D1 6A01                    	push 1
  3495 000025D3 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3496                                  	assert_closure(rax)
    42 000025DB 803805              <1>  cmp byte [%1], %2
    43 000025DE 0F852A010100        <1>  jne L_error_incorrect_type
  3497 000025E4 50                      	push rax 
  3498 000025E5 FF7508                  	push qword [rbp + 8]
  3499 000025E8 FF7500                  	push qword [rbp]
  3500 000025EB 4883C308                	add rbx ,8*1
  3501                                  	 .L_fix_stack_label_00d2:
  3502 000025EF 488B5518                	mov rdx, qword[rbp+8*3]
  3503 000025F3 4883C203                	add rdx, 3
  3504 000025F7 48C1E203                	shl rdx, 3
  3505 000025FB 4889EF                  	mov rdi, rbp
  3506 000025FE 4801D7                  	add rdi, rdx
  3507 00002601 4C8B4500                	mov r8, qword[rbp]
  3508 00002605 4889E9                  	mov rcx, rbp
  3509 00002608 4883E908                	sub rcx, 8
  3510                                  	 .L_loop_fix_stuck_00d2:
  3511 0000260C 4839CC                  	cmp rsp, rcx
  3512 0000260F 7710                    ja .L_loop_fix_stuck_end_00d2
  3513 00002611 488B19                   	mov rbx, qword[rcx]
  3514 00002614 48891F                  	 mov qword[rdi], rbx
  3515 00002617 4883EF08                	sub rdi, 8
  3516 0000261B 4883E908                	sub rcx, 8
  3517 0000261F EBEB                    jmp .L_loop_fix_stuck_00d2
  3518                                  	 .L_loop_fix_stuck_end_00d2:
  3519 00002621 4883C708                	add rdi, 8
  3520 00002625 4889FC                  	 mov rsp, rdi
  3521 00002628 4C89C5                  	mov rbp, r8
  3522 0000262B 5D                      	pop rbp
  3523 0000262C FFE0                    	jmp rax 
  3524 0000262E C9                      	leave
  3525 0000262F C21800                  	ret 8 * (2 + 1)
  3526                                  .L_lambda_simple_end_00b8:	; new closure is in rax
  3527 00002632 48890425[98020000]      	mov qword [free_var_83], rax
  3528 0000263A 48B8-                   	mov rax, sob_void
  3528 0000263C [0000000000000000] 
  3529                                  
  3530 00002644 4889C7                  	mov rdi, rax
  3531 00002647 E8DFE80000              	call print_sexpr_if_not_void
  3532                                  
  3533 0000264C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3534 00002651 E8C4E80000              	call malloc
  3535 00002656 50                      	push rax
  3536 00002657 BF00000000              	mov rdi, 8 * 0	; new rib
  3537 0000265C E8B9E80000              	call malloc
  3538 00002661 50                      	push rax
  3539 00002662 BF08000000              	mov rdi, 8 * 1	; extended env
  3540 00002667 E8AEE80000              	call malloc
  3541 0000266C 488B7D10                	mov rdi, ENV
  3542 00002670 BE00000000              	mov rsi, 0
  3543 00002675 BA01000000              	mov rdx, 1
  3544                                  .L_lambda_simple_env_loop_00b9:	; ext_env[i + 1] <-- env[i]
  3545 0000267A 4883FE00                	cmp rsi, 0
  3546 0000267E 7410                    	je .L_lambda_simple_env_end_00b9
  3547 00002680 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3548 00002684 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3549 00002688 48FFC6                  	inc rsi
  3550 0000268B 48FFC2                  	inc rdx
  3551 0000268E EBEA                    	jmp .L_lambda_simple_env_loop_00b9
  3552                                  .L_lambda_simple_env_end_00b9:
  3553 00002690 5B                      	pop rbx
  3554 00002691 BE00000000              	mov rsi, 0
  3555                                  .L_lambda_simple_params_loop_00b9:	; copy params
  3556 00002696 4883FE00                	cmp rsi, 0
  3557 0000269A 740E                    	je .L_lambda_simple_params_end_00b9
  3558 0000269C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3559 000026A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3560 000026A5 48FFC6                  	inc rsi
  3561 000026A8 EBEC                    	jmp .L_lambda_simple_params_loop_00b9
  3562                                  .L_lambda_simple_params_end_00b9:
  3563 000026AA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3564 000026AD 4889C3                  	mov rbx, rax
  3565 000026B0 58                      	pop rax
  3566 000026B1 C60005                  	mov byte [rax], T_closure
  3567 000026B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3568 000026B8 48C74009[C5260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b9
  3569 000026C0 E9FD000000              	jmp .L_lambda_simple_end_00b9
  3570                                  .L_lambda_simple_code_00b9:	; lambda-simple body
  3571 000026C5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3572 000026CB 740B                    	je .L_lambda_simple_arity_check_ok_00b9
  3573 000026CD FF742410                	push qword [rsp + 8 * 2]
  3574 000026D1 6A01                    	push 1
  3575 000026D3 E9FBE70000              	jmp L_error_incorrect_arity_simple
  3576                                  .L_lambda_simple_arity_check_ok_00b9:
  3577 000026D8 C8000000                	enter 0, 0
  3578 000026DC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3579 000026E0 50                      	push rax
  3580 000026E1 6A01                    	push 1
  3581 000026E3 488B0425[00000000]      	mov rax, qword [free_var_0]
  3582 000026EB 803805                  	cmp byte [rax], T_closure 
  3583 000026EE 0F85DBF70000                    jne L_code_ptr_error
  3584                                  
  3585 000026F4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3586                                  
  3587 000026F8 53                              push rbx
  3588                                  
  3589 000026F9 FF5009                          call SOB_CLOSURE_CODE(rax)
  3590                                  
  3591 000026FC 483D[02000000]                  	cmp rax, sob_boolean_false
  3592 00002702 0F85B6000000            	jne .L_or_end_000d
  3593 00002708 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3594 0000270C 50                      	push rax
  3595 0000270D 6A01                    	push 1
  3596 0000270F 488B0425[08000000]      	mov rax, qword [free_var_1]
  3597 00002717 803805                  	cmp byte [rax], T_closure 
  3598 0000271A 0F85AFF70000                    jne L_code_ptr_error
  3599                                  
  3600 00002720 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3601                                  
  3602 00002724 53                              push rbx
  3603                                  
  3604 00002725 FF5009                          call SOB_CLOSURE_CODE(rax)
  3605                                  
  3606                                          
  3607 00002728 483D[02000000]                  	cmp rax, sob_boolean_false
  3608                                  
  3609 0000272E 0F8480000000                    	je .L_if_else_005f
  3610 00002734 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  3611 00002738 50                      	push rax
  3612 00002739 6A01                    	push 1
  3613 0000273B 488B0425[88000000]      	mov rax, qword [free_var_17]
  3614 00002743 803805                  	cmp byte [rax], T_closure 
  3615 00002746 0F8583F70000                    jne L_code_ptr_error
  3616                                  
  3617 0000274C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3618                                  
  3619 00002750 53                              push rbx
  3620                                  
  3621 00002751 FF5009                          call SOB_CLOSURE_CODE(rax)
  3622                                  
  3623 00002754 50                              	push rax
  3624                                  
  3625 00002755 6A01                    	push 1
  3626 00002757 488B0425[A0020000]      	mov rax, qword [free_var_84]
  3627                                  	assert_closure(rax)
    42 0000275F 803805              <1>  cmp byte [%1], %2
    43 00002762 0F85A6FF0000        <1>  jne L_error_incorrect_type
  3628 00002768 50                      	push rax 
  3629 00002769 FF7508                  	push qword [rbp + 8]
  3630 0000276C FF7500                  	push qword [rbp]
  3631 0000276F 4883C308                	add rbx ,8*1
  3632                                  	 .L_fix_stack_label_00d3:
  3633 00002773 488B5518                	mov rdx, qword[rbp+8*3]
  3634 00002777 4883C203                	add rdx, 3
  3635 0000277B 48C1E203                	shl rdx, 3
  3636 0000277F 4889EF                  	mov rdi, rbp
  3637 00002782 4801D7                  	add rdi, rdx
  3638 00002785 4C8B4500                	mov r8, qword[rbp]
  3639 00002789 4889E9                  	mov rcx, rbp
  3640 0000278C 4883E908                	sub rcx, 8
  3641                                  	 .L_loop_fix_stuck_00d3:
  3642 00002790 4839CC                  	cmp rsp, rcx
  3643 00002793 7710                    ja .L_loop_fix_stuck_end_00d3
  3644 00002795 488B19                   	mov rbx, qword[rcx]
  3645 00002798 48891F                  	 mov qword[rdi], rbx
  3646 0000279B 4883EF08                	sub rdi, 8
  3647 0000279F 4883E908                	sub rcx, 8
  3648 000027A3 EBEB                    jmp .L_loop_fix_stuck_00d3
  3649                                  	 .L_loop_fix_stuck_end_00d3:
  3650 000027A5 4883C708                	add rdi, 8
  3651 000027A9 4889FC                  	 mov rsp, rdi
  3652 000027AC 4C89C5                  	mov rbp, r8
  3653 000027AF 5D                      	pop rbp
  3654 000027B0 FFE0                    	jmp rax 
  3655                                  
  3656 000027B2 EB0A                            	jmp .L_if_end_005f
  3657                                  
  3658                                          	.L_if_else_005f:
  3659 000027B4 48B8-                   	mov rax,L_constants + 2
  3659 000027B6 [0200000000000000] 
  3660                                  
  3661                                          	.L_if_end_005f:
  3662                                  .L_or_end_000d:
  3663 000027BE C9                      	leave
  3664 000027BF C21800                  	ret 8 * (2 + 1)
  3665                                  .L_lambda_simple_end_00b9:	; new closure is in rax
  3666 000027C2 48890425[A0020000]      	mov qword [free_var_84], rax
  3667 000027CA 48B8-                   	mov rax, sob_void
  3667 000027CC [0000000000000000] 
  3668                                  
  3669 000027D4 4889C7                  	mov rdi, rax
  3670 000027D7 E84FE70000              	call print_sexpr_if_not_void
  3671                                  
  3672 000027DC BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  3673 000027E1 E834E70000              	call malloc
  3674 000027E6 50                      	push rax
  3675 000027E7 BF00000000              	mov rdi, 8 * 0  ; new rib
  3676 000027EC E829E70000              	call malloc
  3677 000027F1 50                      	push rax
  3678 000027F2 BF08000000              	mov rdi, 8 * 1	; extended env
  3679 000027F7 E81EE70000              	call malloc
  3680 000027FC 488B7D10                	mov rdi, ENV
  3681 00002800 BE00000000              	mov rsi, 0
  3682 00002805 BA01000000              	mov rdx, 1
  3683                                  .L_lambda_opt_env_loop_0018:	; ext_env = env
  3684 0000280A 4883FE00                	cmp rsi, 0
  3685 0000280E 7410                    	je .L_lambda_opt_env_end_0018
  3686 00002810 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3687 00002814 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3688 00002818 48FFC6                  	inc rsi
  3689 0000281B 48FFC2                  	inc rdx
  3690 0000281E EBEA                    	jmp .L_lambda_opt_env_loop_0018
  3691                                  .L_lambda_opt_env_end_0018:
  3692 00002820 5B                      	pop rbx
  3693 00002821 BE00000000              	mov rsi, 0
  3694                                  .L_lambda_opt_params_loop_0018:	; copy params
  3695 00002826 4883FE00                	cmp rsi, 0
  3696 0000282A 740E                    	je .L_lambda_opt_params_end_0018
  3697 0000282C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3698 00002831 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3699 00002835 48FFC6                  	inc rsi
  3700 00002838 EBEC                    	jmp .L_lambda_opt_params_loop_0018
  3701                                  .L_lambda_opt_params_end_0018:
  3702 0000283A 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  3703 0000283D 4889C3                  	mov rbx, rax
  3704 00002840 58                      	pop rax
  3705 00002841 C60005                  	mov byte [rax], T_closure
  3706 00002844 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3707 00002848 48C74009[55280000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0018
  3708 00002850 E905010000              	jmp .L_lambda_opt_end_0018
  3709                                  .L_lambda_opt_code_0018:	; lambda-opt body
  3710 00002855 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3711 0000285B 740D                    	je .L_lambda_opt_arity_check_exact_0018  ;same num_of_args
  3712 0000285D 7F5B                    	jg .L_lambda_opt_arity_check_more_0018  ;greater num_of_args
  3713 0000285F FF742410                	push qword [rsp + 8 * 2]
  3714 00002863 6A00                    	push 0
  3715 00002865 E97DE60000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  3716                                  .L_lambda_opt_arity_check_exact_0018:
  3717 0000286A 4883EC08                	sub rsp, 8 * 1
  3718 0000286E 4889E7                  	mov rdi, rsp 
  3719                                  	;mov ret
  3720 00002871 488B4708                	mov rax, qword [rdi + (8 * 1)]
  3721 00002875 488907                  	mov qword [rdi], rax
  3722 00002878 4883C708                	add rdi, 8
  3723                                  	;mov env
  3724 0000287C 488B4708                	mov rax, qword [rdi + (8 * 1)]
  3725 00002880 488907                  	mov qword [rdi], rax
  3726 00002883 4883C708                	add rdi, 8
  3727                                  	;mov & update COUNT
  3728 00002887 488B4708                	mov rax, qword [rdi +(8 * 1)]
  3729 0000288B 4889C1                  	mov rcx, rax
  3730 0000288E 48FFC0                  	inc rax
  3731 00002891 488907                  	mov qword [rdi], rax
  3732 00002894 4883C708                	add rdi, 8
  3733                                  	;LOOP:move params
  3734                                  .L_lambda_opt_stack_shrink_loop_0046:	
  3735 00002898 4883F900                	cmp rcx, 0
  3736 0000289C 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0046
  3737 0000289E 488B4708                	mov rax, qword [rdi + 8]
  3738 000028A2 488907                  	mov qword [rdi], rax
  3739 000028A5 4883C708                	add rdi, 8
  3740 000028A9 48FFC9                  	dec rcx
  3741 000028AC EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0046
  3742                                  .L_lambda_opt_stack_shrink_loop_exit_0046:	
  3743 000028AE 48C707[01000000]        	mov qword [rdi], sob_nil
  3744 000028B5 E994000000              	jmp .L_lambda_opt_stack_adjusted_0018
  3745                                  .L_lambda_opt_arity_check_more_0018:	
  3746 000028BA 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  3747 000028BF 488D0E                  	lea rcx, [rsi - 0]
  3748 000028C2 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  3749 000028C7 4989F2                  	mov r10, rsi
  3750 000028CA 49B9-                   	mov r9, sob_nil
  3750 000028CC [0100000000000000] 
  3751                                  .L_lambda_opt_stack_shrink_loop_0047:	
  3752 000028D4 4883F900                	cmp rcx, 0
  3753 000028D8 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0047
  3754 000028DA BF11000000              	mov rdi, 1 + 8 + 8
  3755 000028DF E836E60000              	call malloc
  3756 000028E4 C60021                  	mov byte [rax], T_pair
  3757 000028E7 488B1E                  	mov rbx, qword [rsi]
  3758 000028EA 48895801                	mov SOB_PAIR_CAR(rax), rbx
  3759 000028EE 4C894809                	mov SOB_PAIR_CDR(rax), r9
  3760 000028F2 4989C1                  	mov r9, rax
  3761 000028F5 4883EE08                	sub rsi, 8 * 1
  3762 000028F9 48FFC9                  	dec rcx
  3763 000028FC EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0047
  3764                                  .L_lambda_opt_stack_shrink_loop_exit_0047:	
  3765 000028FE 4D890A                  	mov qword [r10], r9
  3766 00002901 4983EA08                	sub r10, 8 * 1; the new dest!
  3767 00002905 488D742410              	lea rsi, [rsp + (8 * (0 + 2))];the new src
  3768 0000290A B900000000              	mov rcx, 0 
  3769                                  .L_lambda_opt_stack_shrink_loop_0048:	
  3770 0000290F 4883F900                	cmp rcx, 0
  3771 00002913 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0048
  3772 00002915 488B06                  	mov rax, qword [rsi]
  3773 00002918 498902                  	mov qword [r10], rax
  3774 0000291B 4983EA08                	sub r10, 8 * 1
  3775 0000291F 4883EE08                	sub rsi, 8 * 1
  3776 00002923 48FFC9                  	dec rcx
  3777 00002926 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0048
  3778                                  .L_lambda_opt_stack_shrink_loop_exit_0048:	
  3779 00002928 49C70201000000          	mov qword [r10], 1 + 0; 1=opt
  3780 0000292F 4983EA08                	sub r10, 8 * 1
  3781 00002933 4883EE08                	sub rsi, 8 * 1
  3782 00002937 488B06                  	mov rax, qword [rsi] ;env
  3783 0000293A 498902                  	mov qword [r10], rax
  3784 0000293D 4983EA08                	sub r10, 8 * 1
  3785 00002941 4883EE08                	sub rsi, 8 * 1
  3786 00002945 488B06                  	mov rax, qword [rsi] ;ret
  3787 00002948 498902                  	mov qword [r10], rax
  3788 0000294B 4C89D4                  	mov rsp, r10
  3789                                  .L_lambda_opt_stack_adjusted_0018:	
  3790 0000294E C8000000                	enter 0, 0
  3791 00002952 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3792 00002956 C9                      	leave
  3793 00002957 C21800                  	ret 8 * (2 + 1)
  3794                                  .L_lambda_opt_end_0018:	; new closure is in rax
  3795 0000295A 48890425[A8020000]      	mov qword [free_var_85], rax
  3796 00002962 48B8-                   	mov rax, sob_void
  3796 00002964 [0000000000000000] 
  3797                                  
  3798 0000296C 4889C7                  	mov rdi, rax
  3799 0000296F E8B7E50000              	call print_sexpr_if_not_void
  3800                                  
  3801 00002974 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3802 00002979 E89CE50000              	call malloc
  3803 0000297E 50                      	push rax
  3804 0000297F BF00000000              	mov rdi, 8 * 0	; new rib
  3805 00002984 E891E50000              	call malloc
  3806 00002989 50                      	push rax
  3807 0000298A BF08000000              	mov rdi, 8 * 1	; extended env
  3808 0000298F E886E50000              	call malloc
  3809 00002994 488B7D10                	mov rdi, ENV
  3810 00002998 BE00000000              	mov rsi, 0
  3811 0000299D BA01000000              	mov rdx, 1
  3812                                  .L_lambda_simple_env_loop_00ba:	; ext_env[i + 1] <-- env[i]
  3813 000029A2 4883FE00                	cmp rsi, 0
  3814 000029A6 7410                    	je .L_lambda_simple_env_end_00ba
  3815 000029A8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3816 000029AC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3817 000029B0 48FFC6                  	inc rsi
  3818 000029B3 48FFC2                  	inc rdx
  3819 000029B6 EBEA                    	jmp .L_lambda_simple_env_loop_00ba
  3820                                  .L_lambda_simple_env_end_00ba:
  3821 000029B8 5B                      	pop rbx
  3822 000029B9 BE00000000              	mov rsi, 0
  3823                                  .L_lambda_simple_params_loop_00ba:	; copy params
  3824 000029BE 4883FE00                	cmp rsi, 0
  3825 000029C2 740E                    	je .L_lambda_simple_params_end_00ba
  3826 000029C4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3827 000029C9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3828 000029CD 48FFC6                  	inc rsi
  3829 000029D0 EBEC                    	jmp .L_lambda_simple_params_loop_00ba
  3830                                  .L_lambda_simple_params_end_00ba:
  3831 000029D2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3832 000029D5 4889C3                  	mov rbx, rax
  3833 000029D8 58                      	pop rax
  3834 000029D9 C60005                  	mov byte [rax], T_closure
  3835 000029DC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3836 000029E0 48C74009[EA290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ba
  3837 000029E8 EB3D                    	jmp .L_lambda_simple_end_00ba
  3838                                  .L_lambda_simple_code_00ba:	; lambda-simple body
  3839 000029EA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3840 000029F0 740B                    	je .L_lambda_simple_arity_check_ok_00ba
  3841 000029F2 FF742410                	push qword [rsp + 8 * 2]
  3842 000029F6 6A01                    	push 1
  3843 000029F8 E9D6E40000              	jmp L_error_incorrect_arity_simple
  3844                                  .L_lambda_simple_arity_check_ok_00ba:
  3845 000029FD C8000000                	enter 0, 0
  3846 00002A01 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3847                                  
  3848 00002A05 483D[02000000]                  	cmp rax, sob_boolean_false
  3849                                  
  3850 00002A0B 740C                            	je .L_if_else_0060
  3851 00002A0D 48B8-                   	mov rax,L_constants + 2
  3851 00002A0F [0200000000000000] 
  3852                                  
  3853 00002A17 EB0A                            	jmp .L_if_end_0060
  3854                                  
  3855                                          	.L_if_else_0060:
  3856 00002A19 48B8-                   	mov rax,L_constants + 3
  3856 00002A1B [0300000000000000] 
  3857                                  
  3858                                          	.L_if_end_0060:
  3859 00002A23 C9                      	leave
  3860 00002A24 C21800                  	ret 8 * (2 + 1)
  3861                                  .L_lambda_simple_end_00ba:	; new closure is in rax
  3862 00002A27 48890425[B0020000]      	mov qword [free_var_86], rax
  3863 00002A2F 48B8-                   	mov rax, sob_void
  3863 00002A31 [0000000000000000] 
  3864                                  
  3865 00002A39 4889C7                  	mov rdi, rax
  3866 00002A3C E8EAE40000              	call print_sexpr_if_not_void
  3867                                  
  3868 00002A41 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3869 00002A46 E8CFE40000              	call malloc
  3870 00002A4B 50                      	push rax
  3871 00002A4C BF00000000              	mov rdi, 8 * 0	; new rib
  3872 00002A51 E8C4E40000              	call malloc
  3873 00002A56 50                      	push rax
  3874 00002A57 BF08000000              	mov rdi, 8 * 1	; extended env
  3875 00002A5C E8B9E40000              	call malloc
  3876 00002A61 488B7D10                	mov rdi, ENV
  3877 00002A65 BE00000000              	mov rsi, 0
  3878 00002A6A BA01000000              	mov rdx, 1
  3879                                  .L_lambda_simple_env_loop_00bb:	; ext_env[i + 1] <-- env[i]
  3880 00002A6F 4883FE00                	cmp rsi, 0
  3881 00002A73 7410                    	je .L_lambda_simple_env_end_00bb
  3882 00002A75 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3883 00002A79 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3884 00002A7D 48FFC6                  	inc rsi
  3885 00002A80 48FFC2                  	inc rdx
  3886 00002A83 EBEA                    	jmp .L_lambda_simple_env_loop_00bb
  3887                                  .L_lambda_simple_env_end_00bb:
  3888 00002A85 5B                      	pop rbx
  3889 00002A86 BE00000000              	mov rsi, 0
  3890                                  .L_lambda_simple_params_loop_00bb:	; copy params
  3891 00002A8B 4883FE00                	cmp rsi, 0
  3892 00002A8F 740E                    	je .L_lambda_simple_params_end_00bb
  3893 00002A91 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3894 00002A96 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3895 00002A9A 48FFC6                  	inc rsi
  3896 00002A9D EBEC                    	jmp .L_lambda_simple_params_loop_00bb
  3897                                  .L_lambda_simple_params_end_00bb:
  3898 00002A9F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3899 00002AA2 4889C3                  	mov rbx, rax
  3900 00002AA5 58                      	pop rax
  3901 00002AA6 C60005                  	mov byte [rax], T_closure
  3902 00002AA9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3903 00002AAD 48C74009[BA2A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bb
  3904 00002AB5 E9D1000000              	jmp .L_lambda_simple_end_00bb
  3905                                  .L_lambda_simple_code_00bb:	; lambda-simple body
  3906 00002ABA 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3907 00002AC0 740B                    	je .L_lambda_simple_arity_check_ok_00bb
  3908 00002AC2 FF742410                	push qword [rsp + 8 * 2]
  3909 00002AC6 6A01                    	push 1
  3910 00002AC8 E906E40000              	jmp L_error_incorrect_arity_simple
  3911                                  .L_lambda_simple_arity_check_ok_00bb:
  3912 00002ACD C8000000                	enter 0, 0
  3913 00002AD1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3914 00002AD5 50                      	push rax
  3915 00002AD6 6A01                    	push 1
  3916 00002AD8 488B0425[48000000]      	mov rax, qword [free_var_9]
  3917 00002AE0 803805                  	cmp byte [rax], T_closure 
  3918 00002AE3 0F85E6F30000                    jne L_code_ptr_error
  3919                                  
  3920 00002AE9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3921                                  
  3922 00002AED 53                              push rbx
  3923                                  
  3924 00002AEE FF5009                          call SOB_CLOSURE_CODE(rax)
  3925                                  
  3926                                          
  3927 00002AF1 483D[02000000]                  	cmp rax, sob_boolean_false
  3928                                  
  3929 00002AF7 0F8480000000                    	je .L_if_else_0061
  3930 00002AFD 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  3931 00002B01 50                      	push rax
  3932 00002B02 6A01                    	push 1
  3933 00002B04 488B0425[E0000000]      	mov rax, qword [free_var_28]
  3934 00002B0C 803805                  	cmp byte [rax], T_closure 
  3935 00002B0F 0F85BAF30000                    jne L_code_ptr_error
  3936                                  
  3937 00002B15 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  3938                                  
  3939 00002B19 53                              push rbx
  3940                                  
  3941 00002B1A FF5009                          call SOB_CLOSURE_CODE(rax)
  3942                                  
  3943 00002B1D 50                              	push rax
  3944                                  
  3945 00002B1E 6A01                    	push 1
  3946 00002B20 488B0425[B0020000]      	mov rax, qword [free_var_86]
  3947                                  	assert_closure(rax)
    42 00002B28 803805              <1>  cmp byte [%1], %2
    43 00002B2B 0F85DDFB0000        <1>  jne L_error_incorrect_type
  3948 00002B31 50                      	push rax 
  3949 00002B32 FF7508                  	push qword [rbp + 8]
  3950 00002B35 FF7500                  	push qword [rbp]
  3951 00002B38 4883C308                	add rbx ,8*1
  3952                                  	 .L_fix_stack_label_00d4:
  3953 00002B3C 488B5518                	mov rdx, qword[rbp+8*3]
  3954 00002B40 4883C203                	add rdx, 3
  3955 00002B44 48C1E203                	shl rdx, 3
  3956 00002B48 4889EF                  	mov rdi, rbp
  3957 00002B4B 4801D7                  	add rdi, rdx
  3958 00002B4E 4C8B4500                	mov r8, qword[rbp]
  3959 00002B52 4889E9                  	mov rcx, rbp
  3960 00002B55 4883E908                	sub rcx, 8
  3961                                  	 .L_loop_fix_stuck_00d4:
  3962 00002B59 4839CC                  	cmp rsp, rcx
  3963 00002B5C 7710                    ja .L_loop_fix_stuck_end_00d4
  3964 00002B5E 488B19                   	mov rbx, qword[rcx]
  3965 00002B61 48891F                  	 mov qword[rdi], rbx
  3966 00002B64 4883EF08                	sub rdi, 8
  3967 00002B68 4883E908                	sub rcx, 8
  3968 00002B6C EBEB                    jmp .L_loop_fix_stuck_00d4
  3969                                  	 .L_loop_fix_stuck_end_00d4:
  3970 00002B6E 4883C708                	add rdi, 8
  3971 00002B72 4889FC                  	 mov rsp, rdi
  3972 00002B75 4C89C5                  	mov rbp, r8
  3973 00002B78 5D                      	pop rbp
  3974 00002B79 FFE0                    	jmp rax 
  3975                                  
  3976 00002B7B EB0A                            	jmp .L_if_end_0061
  3977                                  
  3978                                          	.L_if_else_0061:
  3979 00002B7D 48B8-                   	mov rax,L_constants + 2
  3979 00002B7F [0200000000000000] 
  3980                                  
  3981                                          	.L_if_end_0061:
  3982 00002B87 C9                      	leave
  3983 00002B88 C21800                  	ret 8 * (2 + 1)
  3984                                  .L_lambda_simple_end_00bb:	; new closure is in rax
  3985 00002B8B 48890425[B8020000]      	mov qword [free_var_87], rax
  3986 00002B93 48B8-                   	mov rax, sob_void
  3986 00002B95 [0000000000000000] 
  3987                                  
  3988 00002B9D 4889C7                  	mov rdi, rax
  3989 00002BA0 E886E30000              	call print_sexpr_if_not_void
  3990                                  
  3991 00002BA5 48B8-                   	mov rax,L_constants + 23
  3991 00002BA7 [1700000000000000] 
  3992 00002BAF 50                      	push rax
  3993 00002BB0 6A01                    	push 1
  3994 00002BB2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3995 00002BB7 E85EE30000              	call malloc
  3996 00002BBC 50                      	push rax
  3997 00002BBD BF00000000              	mov rdi, 8 * 0	; new rib
  3998 00002BC2 E853E30000              	call malloc
  3999 00002BC7 50                      	push rax
  4000 00002BC8 BF08000000              	mov rdi, 8 * 1	; extended env
  4001 00002BCD E848E30000              	call malloc
  4002 00002BD2 488B7D10                	mov rdi, ENV
  4003 00002BD6 BE00000000              	mov rsi, 0
  4004 00002BDB BA01000000              	mov rdx, 1
  4005                                  .L_lambda_simple_env_loop_00bc:	; ext_env[i + 1] <-- env[i]
  4006 00002BE0 4883FE00                	cmp rsi, 0
  4007 00002BE4 7410                    	je .L_lambda_simple_env_end_00bc
  4008 00002BE6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4009 00002BEA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4010 00002BEE 48FFC6                  	inc rsi
  4011 00002BF1 48FFC2                  	inc rdx
  4012 00002BF4 EBEA                    	jmp .L_lambda_simple_env_loop_00bc
  4013                                  .L_lambda_simple_env_end_00bc:
  4014 00002BF6 5B                      	pop rbx
  4015 00002BF7 BE00000000              	mov rsi, 0
  4016                                  .L_lambda_simple_params_loop_00bc:	; copy params
  4017 00002BFC 4883FE00                	cmp rsi, 0
  4018 00002C00 740E                    	je .L_lambda_simple_params_end_00bc
  4019 00002C02 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4020 00002C07 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4021 00002C0B 48FFC6                  	inc rsi
  4022 00002C0E EBEC                    	jmp .L_lambda_simple_params_loop_00bc
  4023                                  .L_lambda_simple_params_end_00bc:
  4024 00002C10 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4025 00002C13 4889C3                  	mov rbx, rax
  4026 00002C16 58                      	pop rax
  4027 00002C17 C60005                  	mov byte [rax], T_closure
  4028 00002C1A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4029 00002C1E 48C74009[2B2C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bc
  4030 00002C26 E9BC030000              	jmp .L_lambda_simple_end_00bc
  4031                                  .L_lambda_simple_code_00bc:	; lambda-simple body
  4032 00002C2B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4033 00002C31 740B                    	je .L_lambda_simple_arity_check_ok_00bc
  4034 00002C33 FF742410                	push qword [rsp + 8 * 2]
  4035 00002C37 6A01                    	push 1
  4036 00002C39 E995E20000              	jmp L_error_incorrect_arity_simple
  4037                                  .L_lambda_simple_arity_check_ok_00bc:
  4038 00002C3E C8000000                	enter 0, 0
  4039 00002C42 BF08000000              	mov rdi, 8
  4040 00002C47 E8CEE20000              	call malloc
  4041 00002C4C 488B5D20                	mov rbx, PARAM(0)
  4042 00002C50 488918                  	mov qword [rax], rbx
  4043 00002C53 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4044                                  
  4045 00002C57 48B8-                            	mov rax, sob_void
  4045 00002C59 [0000000000000000] 
  4046                                  
  4047 00002C61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4048 00002C66 E8AFE20000              	call malloc
  4049 00002C6B 50                      	push rax
  4050 00002C6C BF08000000              	mov rdi, 8 * 1	; new rib
  4051 00002C71 E8A4E20000              	call malloc
  4052 00002C76 50                      	push rax
  4053 00002C77 BF10000000              	mov rdi, 8 * 2	; extended env
  4054 00002C7C E899E20000              	call malloc
  4055 00002C81 488B7D10                	mov rdi, ENV
  4056 00002C85 BE00000000              	mov rsi, 0
  4057 00002C8A BA01000000              	mov rdx, 1
  4058                                  .L_lambda_simple_env_loop_00bd:	; ext_env[i + 1] <-- env[i]
  4059 00002C8F 4883FE01                	cmp rsi, 1
  4060 00002C93 7410                    	je .L_lambda_simple_env_end_00bd
  4061 00002C95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4062 00002C99 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4063 00002C9D 48FFC6                  	inc rsi
  4064 00002CA0 48FFC2                  	inc rdx
  4065 00002CA3 EBEA                    	jmp .L_lambda_simple_env_loop_00bd
  4066                                  .L_lambda_simple_env_end_00bd:
  4067 00002CA5 5B                      	pop rbx
  4068 00002CA6 BE00000000              	mov rsi, 0
  4069                                  .L_lambda_simple_params_loop_00bd:	; copy params
  4070 00002CAB 4883FE01                	cmp rsi, 1
  4071 00002CAF 740E                    	je .L_lambda_simple_params_end_00bd
  4072 00002CB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4073 00002CB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4074 00002CBA 48FFC6                  	inc rsi
  4075 00002CBD EBEC                    	jmp .L_lambda_simple_params_loop_00bd
  4076                                  .L_lambda_simple_params_end_00bd:
  4077 00002CBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4078 00002CC2 4889C3                  	mov rbx, rax
  4079 00002CC5 58                      	pop rax
  4080 00002CC6 C60005                  	mov byte [rax], T_closure
  4081 00002CC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4082 00002CCD 48C74009[DA2C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bd
  4083 00002CD5 E911010000              	jmp .L_lambda_simple_end_00bd
  4084                                  .L_lambda_simple_code_00bd:	; lambda-simple body
  4085 00002CDA 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4086 00002CE0 740B                    	je .L_lambda_simple_arity_check_ok_00bd
  4087 00002CE2 FF742410                	push qword [rsp + 8 * 2]
  4088 00002CE6 6A02                    	push 2
  4089 00002CE8 E9E6E10000              	jmp L_error_incorrect_arity_simple
  4090                                  .L_lambda_simple_arity_check_ok_00bd:
  4091 00002CED C8000000                	enter 0, 0
  4092 00002CF1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4093 00002CF5 50                      	push rax
  4094 00002CF6 6A01                    	push 1
  4095 00002CF8 488B0425[00000000]      	mov rax, qword [free_var_0]
  4096 00002D00 803805                  	cmp byte [rax], T_closure 
  4097 00002D03 0F85C6F10000                    jne L_code_ptr_error
  4098                                  
  4099 00002D09 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4100                                  
  4101 00002D0D 53                              push rbx
  4102                                  
  4103 00002D0E FF5009                          call SOB_CLOSURE_CODE(rax)
  4104                                  
  4105                                          
  4106 00002D11 483D[02000000]                  	cmp rax, sob_boolean_false
  4107                                  
  4108 00002D17 7409                            	je .L_if_else_0062
  4109 00002D19 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4110                                  
  4111 00002D1D E9C5000000                      	jmp .L_if_end_0062
  4112                                  
  4113                                          	.L_if_else_0062:
  4114 00002D22 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  4115 00002D26 50                      	push rax
  4116 00002D27 6A01                    	push 1
  4117 00002D29 488B0425[88000000]      	mov rax, qword [free_var_17]
  4118 00002D31 803805                  	cmp byte [rax], T_closure 
  4119 00002D34 0F8595F10000                    jne L_code_ptr_error
  4120                                  
  4121 00002D3A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4122                                  
  4123 00002D3E 53                              push rbx
  4124                                  
  4125 00002D3F FF5009                          call SOB_CLOSURE_CODE(rax)
  4126                                  
  4127 00002D42 50                              	push rax
  4128 00002D43 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4129 00002D47 50                      	push rax
  4130 00002D48 6A01                    	push 1
  4131 00002D4A 488B0425[80000000]      	mov rax, qword [free_var_16]
  4132 00002D52 803805                  	cmp byte [rax], T_closure 
  4133 00002D55 0F8574F10000                    jne L_code_ptr_error
  4134                                  
  4135 00002D5B 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4136                                  
  4137 00002D5F 53                              push rbx
  4138                                  
  4139 00002D60 FF5009                          call SOB_CLOSURE_CODE(rax)
  4140                                  
  4141 00002D63 50                              	push rax
  4142 00002D64 6A02                    	push 2
  4143 00002D66 488B4510                	mov rax, qword [rbp + 8 * 2]
  4144                                  
  4145 00002D6A 488B00                                            	mov rax, qword[rax + 8 * 0]
  4146                                  
  4147 00002D6D 488B00                                            	mov rax, qword[rax + 8 * 0]
  4148 00002D70 488B00                  	mov rax, qword [rax]
  4149 00002D73 803805                  	cmp byte [rax], T_closure 
  4150 00002D76 0F8553F10000                    jne L_code_ptr_error
  4151                                  
  4152 00002D7C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4153                                  
  4154 00002D80 53                              push rbx
  4155                                  
  4156 00002D81 FF5009                          call SOB_CLOSURE_CODE(rax)
  4157                                  
  4158 00002D84 50                              	push rax
  4159 00002D85 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4160 00002D89 50                      	push rax
  4161                                  
  4162 00002D8A 6A02                    	push 2
  4163 00002D8C 488B0425[68000000]      	mov rax, qword [free_var_13]
  4164                                  	assert_closure(rax)
    42 00002D94 803805              <1>  cmp byte [%1], %2
    43 00002D97 0F8571F90000        <1>  jne L_error_incorrect_type
  4165 00002D9D 50                      	push rax 
  4166 00002D9E FF7508                  	push qword [rbp + 8]
  4167 00002DA1 FF7500                  	push qword [rbp]
  4168 00002DA4 4883C308                	add rbx ,8*1
  4169                                  	 .L_fix_stack_label_00d5:
  4170 00002DA8 488B5518                	mov rdx, qword[rbp+8*3]
  4171 00002DAC 4883C203                	add rdx, 3
  4172 00002DB0 48C1E203                	shl rdx, 3
  4173 00002DB4 4889EF                  	mov rdi, rbp
  4174 00002DB7 4801D7                  	add rdi, rdx
  4175 00002DBA 4C8B4500                	mov r8, qword[rbp]
  4176 00002DBE 4889E9                  	mov rcx, rbp
  4177 00002DC1 4883E908                	sub rcx, 8
  4178                                  	 .L_loop_fix_stuck_00d5:
  4179 00002DC5 4839CC                  	cmp rsp, rcx
  4180 00002DC8 7710                    ja .L_loop_fix_stuck_end_00d5
  4181 00002DCA 488B19                   	mov rbx, qword[rcx]
  4182 00002DCD 48891F                  	 mov qword[rdi], rbx
  4183 00002DD0 4883EF08                	sub rdi, 8
  4184 00002DD4 4883E908                	sub rcx, 8
  4185 00002DD8 EBEB                    jmp .L_loop_fix_stuck_00d5
  4186                                  	 .L_loop_fix_stuck_end_00d5:
  4187 00002DDA 4883C708                	add rdi, 8
  4188 00002DDE 4889FC                  	 mov rsp, rdi
  4189 00002DE1 4C89C5                  	mov rbp, r8
  4190 00002DE4 5D                      	pop rbp
  4191 00002DE5 FFE0                    	jmp rax 
  4192                                  
  4193                                          	.L_if_end_0062:
  4194 00002DE7 C9                      	leave
  4195 00002DE8 C22000                  	ret 8 * (2 + 2)
  4196                                  .L_lambda_simple_end_00bd:	; new closure is in rax
  4197 00002DEB 50                      	push rax
  4198 00002DEC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4199 00002DF0 8F00                    	pop qword [rax]
  4200 00002DF2 48B8-                   	mov rax, sob_void
  4200 00002DF4 [0000000000000000] 
  4201                                  
  4202 00002DFC BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  4203 00002E01 E814E10000              	call malloc
  4204 00002E06 50                      	push rax
  4205 00002E07 BF08000000              	mov rdi, 8 * 1  ; new rib
  4206 00002E0C E809E10000              	call malloc
  4207 00002E11 50                      	push rax
  4208 00002E12 BF10000000              	mov rdi, 8 * 2	; extended env
  4209 00002E17 E8FEE00000              	call malloc
  4210 00002E1C 488B7D10                	mov rdi, ENV
  4211 00002E20 BE00000000              	mov rsi, 0
  4212 00002E25 BA01000000              	mov rdx, 1
  4213                                  .L_lambda_opt_env_loop_0019:	; ext_env = env
  4214 00002E2A 4883FE01                	cmp rsi, 1
  4215 00002E2E 7410                    	je .L_lambda_opt_env_end_0019
  4216 00002E30 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4217 00002E34 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4218 00002E38 48FFC6                  	inc rsi
  4219 00002E3B 48FFC2                  	inc rdx
  4220 00002E3E EBEA                    	jmp .L_lambda_opt_env_loop_0019
  4221                                  .L_lambda_opt_env_end_0019:
  4222 00002E40 5B                      	pop rbx
  4223 00002E41 BE00000000              	mov rsi, 0
  4224                                  .L_lambda_opt_params_loop_0019:	; copy params
  4225 00002E46 4883FE01                	cmp rsi, 1
  4226 00002E4A 740E                    	je .L_lambda_opt_params_end_0019
  4227 00002E4C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4228 00002E51 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4229 00002E55 48FFC6                  	inc rsi
  4230 00002E58 EBEC                    	jmp .L_lambda_opt_params_loop_0019
  4231                                  .L_lambda_opt_params_end_0019:
  4232 00002E5A 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4233 00002E5D 4889C3                  	mov rbx, rax
  4234 00002E60 58                      	pop rax
  4235 00002E61 C60005                  	mov byte [rax], T_closure
  4236 00002E64 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4237 00002E68 48C74009[752E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0019
  4238 00002E70 E96E010000              	jmp .L_lambda_opt_end_0019
  4239                                  .L_lambda_opt_code_0019:	; lambda-opt body
  4240 00002E75 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4241 00002E7B 740D                    	je .L_lambda_opt_arity_check_exact_0019  ;same num_of_args
  4242 00002E7D 7F5B                    	jg .L_lambda_opt_arity_check_more_0019  ;greater num_of_args
  4243 00002E7F FF742410                	push qword [rsp + 8 * 2]
  4244 00002E83 6A01                    	push 1
  4245 00002E85 E95DE00000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4246                                  .L_lambda_opt_arity_check_exact_0019:
  4247 00002E8A 4883EC08                	sub rsp, 8 * 1
  4248 00002E8E 4889E7                  	mov rdi, rsp 
  4249                                  	;mov ret
  4250 00002E91 488B4708                	mov rax, qword [rdi + (8 * 1)]
  4251 00002E95 488907                  	mov qword [rdi], rax
  4252 00002E98 4883C708                	add rdi, 8
  4253                                  	;mov env
  4254 00002E9C 488B4708                	mov rax, qword [rdi + (8 * 1)]
  4255 00002EA0 488907                  	mov qword [rdi], rax
  4256 00002EA3 4883C708                	add rdi, 8
  4257                                  	;mov & update COUNT
  4258 00002EA7 488B4708                	mov rax, qword [rdi +(8 * 1)]
  4259 00002EAB 4889C1                  	mov rcx, rax
  4260 00002EAE 48FFC0                  	inc rax
  4261 00002EB1 488907                  	mov qword [rdi], rax
  4262 00002EB4 4883C708                	add rdi, 8
  4263                                  	;LOOP:move params
  4264                                  .L_lambda_opt_stack_shrink_loop_0049:	
  4265 00002EB8 4883F900                	cmp rcx, 0
  4266 00002EBC 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0049
  4267 00002EBE 488B4708                	mov rax, qword [rdi + 8]
  4268 00002EC2 488907                  	mov qword [rdi], rax
  4269 00002EC5 4883C708                	add rdi, 8
  4270 00002EC9 48FFC9                  	dec rcx
  4271 00002ECC EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0049
  4272                                  .L_lambda_opt_stack_shrink_loop_exit_0049:	
  4273 00002ECE 48C707[01000000]        	mov qword [rdi], sob_nil
  4274 00002ED5 E995000000              	jmp .L_lambda_opt_stack_adjusted_0019
  4275                                  .L_lambda_opt_arity_check_more_0019:	
  4276 00002EDA 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4277 00002EDF 488D4EFF                	lea rcx, [rsi - 1]
  4278 00002EE3 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4279 00002EE8 4989F2                  	mov r10, rsi
  4280 00002EEB 49B9-                   	mov r9, sob_nil
  4280 00002EED [0100000000000000] 
  4281                                  .L_lambda_opt_stack_shrink_loop_004a:	
  4282 00002EF5 4883F900                	cmp rcx, 0
  4283 00002EF9 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_004a
  4284 00002EFB BF11000000              	mov rdi, 1 + 8 + 8
  4285 00002F00 E815E00000              	call malloc
  4286 00002F05 C60021                  	mov byte [rax], T_pair
  4287 00002F08 488B1E                  	mov rbx, qword [rsi]
  4288 00002F0B 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4289 00002F0F 4C894809                	mov SOB_PAIR_CDR(rax), r9
  4290 00002F13 4989C1                  	mov r9, rax
  4291 00002F16 4883EE08                	sub rsi, 8 * 1
  4292 00002F1A 48FFC9                  	dec rcx
  4293 00002F1D EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_004a
  4294                                  .L_lambda_opt_stack_shrink_loop_exit_004a:	
  4295 00002F1F 4D890A                  	mov qword [r10], r9
  4296 00002F22 4983EA08                	sub r10, 8 * 1; the new dest!
  4297 00002F26 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
  4298 00002F2B B901000000              	mov rcx, 1 
  4299                                  .L_lambda_opt_stack_shrink_loop_004b:	
  4300 00002F30 4883F900                	cmp rcx, 0
  4301 00002F34 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_004b
  4302 00002F36 488B06                  	mov rax, qword [rsi]
  4303 00002F39 498902                  	mov qword [r10], rax
  4304 00002F3C 4983EA08                	sub r10, 8 * 1
  4305 00002F40 4883EE08                	sub rsi, 8 * 1
  4306 00002F44 48FFC9                  	dec rcx
  4307 00002F47 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_004b
  4308                                  .L_lambda_opt_stack_shrink_loop_exit_004b:	
  4309 00002F49 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
  4310 00002F50 4983EA08                	sub r10, 8 * 1
  4311 00002F54 4883EE08                	sub rsi, 8 * 1
  4312 00002F58 488B06                  	mov rax, qword [rsi] ;env
  4313 00002F5B 498902                  	mov qword [r10], rax
  4314 00002F5E 4983EA08                	sub r10, 8 * 1
  4315 00002F62 4883EE08                	sub rsi, 8 * 1
  4316 00002F66 488B06                  	mov rax, qword [rsi] ;ret
  4317 00002F69 498902                  	mov qword [r10], rax
  4318 00002F6C 4C89D4                  	mov rsp, r10
  4319                                  .L_lambda_opt_stack_adjusted_0019:	
  4320 00002F6F C8000000                	enter 0, 0
  4321 00002F73 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  4322 00002F77 50                      	push rax
  4323 00002F78 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4324 00002F7C 50                      	push rax
  4325                                  
  4326 00002F7D 6A02                    	push 2
  4327 00002F7F 488B4510                	mov rax, qword [rbp + 8 * 2]
  4328                                  
  4329 00002F83 488B00                                            	mov rax, qword[rax + 8 * 0]
  4330                                  
  4331 00002F86 488B00                                            	mov rax, qword[rax + 8 * 0]
  4332 00002F89 488B00                  	mov rax, qword [rax]
  4333                                  	assert_closure(rax)
    42 00002F8C 803805              <1>  cmp byte [%1], %2
    43 00002F8F 0F8579F70000        <1>  jne L_error_incorrect_type
  4334 00002F95 50                      	push rax 
  4335 00002F96 FF7508                  	push qword [rbp + 8]
  4336 00002F99 FF7500                  	push qword [rbp]
  4337 00002F9C 4883C308                	add rbx ,8*1
  4338                                  	 .L_fix_stack_label_00d6:
  4339 00002FA0 488B5518                	mov rdx, qword[rbp+8*3]
  4340 00002FA4 4883C203                	add rdx, 3
  4341 00002FA8 48C1E203                	shl rdx, 3
  4342 00002FAC 4889EF                  	mov rdi, rbp
  4343 00002FAF 4801D7                  	add rdi, rdx
  4344 00002FB2 4C8B4500                	mov r8, qword[rbp]
  4345 00002FB6 4889E9                  	mov rcx, rbp
  4346 00002FB9 4883E908                	sub rcx, 8
  4347                                  	 .L_loop_fix_stuck_00d6:
  4348 00002FBD 4839CC                  	cmp rsp, rcx
  4349 00002FC0 7710                    ja .L_loop_fix_stuck_end_00d6
  4350 00002FC2 488B19                   	mov rbx, qword[rcx]
  4351 00002FC5 48891F                  	 mov qword[rdi], rbx
  4352 00002FC8 4883EF08                	sub rdi, 8
  4353 00002FCC 4883E908                	sub rcx, 8
  4354 00002FD0 EBEB                    jmp .L_loop_fix_stuck_00d6
  4355                                  	 .L_loop_fix_stuck_end_00d6:
  4356 00002FD2 4883C708                	add rdi, 8
  4357 00002FD6 4889FC                  	 mov rsp, rdi
  4358 00002FD9 4C89C5                  	mov rbp, r8
  4359 00002FDC 5D                      	pop rbp
  4360 00002FDD FFE0                    	jmp rax 
  4361 00002FDF C9                      	leave
  4362 00002FE0 C22000                  	ret 8 * (2 + 2)
  4363                                  .L_lambda_opt_end_0019:	; new closure is in rax
  4364 00002FE3 C9                      	leave
  4365 00002FE4 C21800                  	ret 8 * (2 + 1)
  4366                                  .L_lambda_simple_end_00bc:	; new closure is in rax
  4367 00002FE7 803805                  	cmp byte [rax], T_closure 
  4368 00002FEA 0F85DFEE0000                    jne L_code_ptr_error
  4369                                  
  4370 00002FF0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4371                                  
  4372 00002FF4 53                              push rbx
  4373                                  
  4374 00002FF5 FF5009                          call SOB_CLOSURE_CODE(rax)
  4375                                  
  4376 00002FF8 48890425[C0020000]              	mov qword [free_var_88], rax
  4377 00003000 48B8-                   	mov rax, sob_void
  4377 00003002 [0000000000000000] 
  4378                                  
  4379 0000300A 4889C7                  	mov rdi, rax
  4380 0000300D E819DF0000              	call print_sexpr_if_not_void
  4381                                  
  4382 00003012 48B8-                   	mov rax,L_constants + 23
  4382 00003014 [1700000000000000] 
  4383 0000301C 50                      	push rax
  4384 0000301D 6A01                    	push 1
  4385 0000301F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4386 00003024 E8F1DE0000              	call malloc
  4387 00003029 50                      	push rax
  4388 0000302A BF00000000              	mov rdi, 8 * 0	; new rib
  4389 0000302F E8E6DE0000              	call malloc
  4390 00003034 50                      	push rax
  4391 00003035 BF08000000              	mov rdi, 8 * 1	; extended env
  4392 0000303A E8DBDE0000              	call malloc
  4393 0000303F 488B7D10                	mov rdi, ENV
  4394 00003043 BE00000000              	mov rsi, 0
  4395 00003048 BA01000000              	mov rdx, 1
  4396                                  .L_lambda_simple_env_loop_00be:	; ext_env[i + 1] <-- env[i]
  4397 0000304D 4883FE00                	cmp rsi, 0
  4398 00003051 7410                    	je .L_lambda_simple_env_end_00be
  4399 00003053 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4400 00003057 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4401 0000305B 48FFC6                  	inc rsi
  4402 0000305E 48FFC2                  	inc rdx
  4403 00003061 EBEA                    	jmp .L_lambda_simple_env_loop_00be
  4404                                  .L_lambda_simple_env_end_00be:
  4405 00003063 5B                      	pop rbx
  4406 00003064 BE00000000              	mov rsi, 0
  4407                                  .L_lambda_simple_params_loop_00be:	; copy params
  4408 00003069 4883FE00                	cmp rsi, 0
  4409 0000306D 740E                    	je .L_lambda_simple_params_end_00be
  4410 0000306F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4411 00003074 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4412 00003078 48FFC6                  	inc rsi
  4413 0000307B EBEC                    	jmp .L_lambda_simple_params_loop_00be
  4414                                  .L_lambda_simple_params_end_00be:
  4415 0000307D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4416 00003080 4889C3                  	mov rbx, rax
  4417 00003083 58                      	pop rax
  4418 00003084 C60005                  	mov byte [rax], T_closure
  4419 00003087 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4420 0000308B 48C74009[98300000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00be
  4421 00003093 E916040000              	jmp .L_lambda_simple_end_00be
  4422                                  .L_lambda_simple_code_00be:	; lambda-simple body
  4423 00003098 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4424 0000309E 740B                    	je .L_lambda_simple_arity_check_ok_00be
  4425 000030A0 FF742410                	push qword [rsp + 8 * 2]
  4426 000030A4 6A01                    	push 1
  4427 000030A6 E928DE0000              	jmp L_error_incorrect_arity_simple
  4428                                  .L_lambda_simple_arity_check_ok_00be:
  4429 000030AB C8000000                	enter 0, 0
  4430 000030AF BF08000000              	mov rdi, 8
  4431 000030B4 E861DE0000              	call malloc
  4432 000030B9 488B5D20                	mov rbx, PARAM(0)
  4433 000030BD 488918                  	mov qword [rax], rbx
  4434 000030C0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4435                                  
  4436 000030C4 48B8-                            	mov rax, sob_void
  4436 000030C6 [0000000000000000] 
  4437                                  
  4438 000030CE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4439 000030D3 E842DE0000              	call malloc
  4440 000030D8 50                      	push rax
  4441 000030D9 BF08000000              	mov rdi, 8 * 1	; new rib
  4442 000030DE E837DE0000              	call malloc
  4443 000030E3 50                      	push rax
  4444 000030E4 BF10000000              	mov rdi, 8 * 2	; extended env
  4445 000030E9 E82CDE0000              	call malloc
  4446 000030EE 488B7D10                	mov rdi, ENV
  4447 000030F2 BE00000000              	mov rsi, 0
  4448 000030F7 BA01000000              	mov rdx, 1
  4449                                  .L_lambda_simple_env_loop_00bf:	; ext_env[i + 1] <-- env[i]
  4450 000030FC 4883FE01                	cmp rsi, 1
  4451 00003100 7410                    	je .L_lambda_simple_env_end_00bf
  4452 00003102 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4453 00003106 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4454 0000310A 48FFC6                  	inc rsi
  4455 0000310D 48FFC2                  	inc rdx
  4456 00003110 EBEA                    	jmp .L_lambda_simple_env_loop_00bf
  4457                                  .L_lambda_simple_env_end_00bf:
  4458 00003112 5B                      	pop rbx
  4459 00003113 BE00000000              	mov rsi, 0
  4460                                  .L_lambda_simple_params_loop_00bf:	; copy params
  4461 00003118 4883FE01                	cmp rsi, 1
  4462 0000311C 740E                    	je .L_lambda_simple_params_end_00bf
  4463 0000311E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4464 00003123 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4465 00003127 48FFC6                  	inc rsi
  4466 0000312A EBEC                    	jmp .L_lambda_simple_params_loop_00bf
  4467                                  .L_lambda_simple_params_end_00bf:
  4468 0000312C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4469 0000312F 4889C3                  	mov rbx, rax
  4470 00003132 58                      	pop rax
  4471 00003133 C60005                  	mov byte [rax], T_closure
  4472 00003136 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4473 0000313A 48C74009[47310000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bf
  4474 00003142 E912010000              	jmp .L_lambda_simple_end_00bf
  4475                                  .L_lambda_simple_code_00bf:	; lambda-simple body
  4476 00003147 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4477 0000314D 740B                    	je .L_lambda_simple_arity_check_ok_00bf
  4478 0000314F FF742410                	push qword [rsp + 8 * 2]
  4479 00003153 6A02                    	push 2
  4480 00003155 E979DD0000              	jmp L_error_incorrect_arity_simple
  4481                                  .L_lambda_simple_arity_check_ok_00bf:
  4482 0000315A C8000000                	enter 0, 0
  4483 0000315E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4484 00003162 50                      	push rax
  4485 00003163 6A01                    	push 1
  4486 00003165 488B0425[08000000]      	mov rax, qword [free_var_1]
  4487 0000316D 803805                  	cmp byte [rax], T_closure 
  4488 00003170 0F8559ED0000                    jne L_code_ptr_error
  4489                                  
  4490 00003176 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4491                                  
  4492 0000317A 53                              push rbx
  4493                                  
  4494 0000317B FF5009                          call SOB_CLOSURE_CODE(rax)
  4495                                  
  4496                                          
  4497 0000317E 483D[02000000]                  	cmp rax, sob_boolean_false
  4498                                  
  4499 00003184 0F84C7000000                    	je .L_if_else_0063
  4500 0000318A 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  4501 0000318E 50                      	push rax
  4502 0000318F 6A01                    	push 1
  4503 00003191 488B0425[88000000]      	mov rax, qword [free_var_17]
  4504 00003199 803805                  	cmp byte [rax], T_closure 
  4505 0000319C 0F852DED0000                    jne L_code_ptr_error
  4506                                  
  4507 000031A2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4508                                  
  4509 000031A6 53                              push rbx
  4510                                  
  4511 000031A7 FF5009                          call SOB_CLOSURE_CODE(rax)
  4512                                  
  4513 000031AA 50                              	push rax
  4514 000031AB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4515 000031AF 50                      	push rax
  4516 000031B0 6A01                    	push 1
  4517 000031B2 488B0425[80000000]      	mov rax, qword [free_var_16]
  4518 000031BA 803805                  	cmp byte [rax], T_closure 
  4519 000031BD 0F850CED0000                    jne L_code_ptr_error
  4520                                  
  4521 000031C3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4522                                  
  4523 000031C7 53                              push rbx
  4524                                  
  4525 000031C8 FF5009                          call SOB_CLOSURE_CODE(rax)
  4526                                  
  4527 000031CB 50                              	push rax
  4528 000031CC 6A02                    	push 2
  4529 000031CE 488B4510                	mov rax, qword [rbp + 8 * 2]
  4530                                  
  4531 000031D2 488B00                                            	mov rax, qword[rax + 8 * 0]
  4532                                  
  4533 000031D5 488B00                                            	mov rax, qword[rax + 8 * 0]
  4534 000031D8 488B00                  	mov rax, qword [rax]
  4535 000031DB 803805                  	cmp byte [rax], T_closure 
  4536 000031DE 0F85EBEC0000                    jne L_code_ptr_error
  4537                                  
  4538 000031E4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4539                                  
  4540 000031E8 53                              push rbx
  4541                                  
  4542 000031E9 FF5009                          call SOB_CLOSURE_CODE(rax)
  4543                                  
  4544 000031EC 50                              	push rax
  4545 000031ED 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4546 000031F1 50                      	push rax
  4547                                  
  4548 000031F2 6A02                    	push 2
  4549 000031F4 488B0425[68000000]      	mov rax, qword [free_var_13]
  4550                                  	assert_closure(rax)
    42 000031FC 803805              <1>  cmp byte [%1], %2
    43 000031FF 0F8509F50000        <1>  jne L_error_incorrect_type
  4551 00003205 50                      	push rax 
  4552 00003206 FF7508                  	push qword [rbp + 8]
  4553 00003209 FF7500                  	push qword [rbp]
  4554 0000320C 4883C308                	add rbx ,8*1
  4555                                  	 .L_fix_stack_label_00d7:
  4556 00003210 488B5518                	mov rdx, qword[rbp+8*3]
  4557 00003214 4883C203                	add rdx, 3
  4558 00003218 48C1E203                	shl rdx, 3
  4559 0000321C 4889EF                  	mov rdi, rbp
  4560 0000321F 4801D7                  	add rdi, rdx
  4561 00003222 4C8B4500                	mov r8, qword[rbp]
  4562 00003226 4889E9                  	mov rcx, rbp
  4563 00003229 4883E908                	sub rcx, 8
  4564                                  	 .L_loop_fix_stuck_00d7:
  4565 0000322D 4839CC                  	cmp rsp, rcx
  4566 00003230 7710                    ja .L_loop_fix_stuck_end_00d7
  4567 00003232 488B19                   	mov rbx, qword[rcx]
  4568 00003235 48891F                  	 mov qword[rdi], rbx
  4569 00003238 4883EF08                	sub rdi, 8
  4570 0000323C 4883E908                	sub rcx, 8
  4571 00003240 EBEB                    jmp .L_loop_fix_stuck_00d7
  4572                                  	 .L_loop_fix_stuck_end_00d7:
  4573 00003242 4883C708                	add rdi, 8
  4574 00003246 4889FC                  	 mov rsp, rdi
  4575 00003249 4C89C5                  	mov rbp, r8
  4576 0000324C 5D                      	pop rbp
  4577 0000324D FFE0                    	jmp rax 
  4578                                  
  4579 0000324F EB04                            	jmp .L_if_end_0063
  4580                                  
  4581                                          	.L_if_else_0063:
  4582 00003251 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4583                                  
  4584                                          	.L_if_end_0063:
  4585 00003255 C9                      	leave
  4586 00003256 C22000                  	ret 8 * (2 + 2)
  4587                                  .L_lambda_simple_end_00bf:	; new closure is in rax
  4588 00003259 50                      	push rax
  4589 0000325A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4590 0000325E 8F00                    	pop qword [rax]
  4591 00003260 48B8-                   	mov rax, sob_void
  4591 00003262 [0000000000000000] 
  4592                                  
  4593 0000326A BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  4594 0000326F E8A6DC0000              	call malloc
  4595 00003274 50                      	push rax
  4596 00003275 BF08000000              	mov rdi, 8 * 1  ; new rib
  4597 0000327A E89BDC0000              	call malloc
  4598 0000327F 50                      	push rax
  4599 00003280 BF10000000              	mov rdi, 8 * 2	; extended env
  4600 00003285 E890DC0000              	call malloc
  4601 0000328A 488B7D10                	mov rdi, ENV
  4602 0000328E BE00000000              	mov rsi, 0
  4603 00003293 BA01000000              	mov rdx, 1
  4604                                  .L_lambda_opt_env_loop_001a:	; ext_env = env
  4605 00003298 4883FE01                	cmp rsi, 1
  4606 0000329C 7410                    	je .L_lambda_opt_env_end_001a
  4607 0000329E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4608 000032A2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4609 000032A6 48FFC6                  	inc rsi
  4610 000032A9 48FFC2                  	inc rdx
  4611 000032AC EBEA                    	jmp .L_lambda_opt_env_loop_001a
  4612                                  .L_lambda_opt_env_end_001a:
  4613 000032AE 5B                      	pop rbx
  4614 000032AF BE00000000              	mov rsi, 0
  4615                                  .L_lambda_opt_params_loop_001a:	; copy params
  4616 000032B4 4883FE01                	cmp rsi, 1
  4617 000032B8 740E                    	je .L_lambda_opt_params_end_001a
  4618 000032BA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4619 000032BF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4620 000032C3 48FFC6                  	inc rsi
  4621 000032C6 EBEC                    	jmp .L_lambda_opt_params_loop_001a
  4622                                  .L_lambda_opt_params_end_001a:
  4623 000032C8 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4624 000032CB 4889C3                  	mov rbx, rax
  4625 000032CE 58                      	pop rax
  4626 000032CF C60005                  	mov byte [rax], T_closure
  4627 000032D2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4628 000032D6 48C74009[E3320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001a
  4629 000032DE E9C7010000              	jmp .L_lambda_opt_end_001a
  4630                                  .L_lambda_opt_code_001a:	; lambda-opt body
  4631 000032E3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4632 000032E9 740D                    	je .L_lambda_opt_arity_check_exact_001a  ;same num_of_args
  4633 000032EB 7F5B                    	jg .L_lambda_opt_arity_check_more_001a  ;greater num_of_args
  4634 000032ED FF742410                	push qword [rsp + 8 * 2]
  4635 000032F1 6A01                    	push 1
  4636 000032F3 E9EFDB0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4637                                  .L_lambda_opt_arity_check_exact_001a:
  4638 000032F8 4883EC08                	sub rsp, 8 * 1
  4639 000032FC 4889E7                  	mov rdi, rsp 
  4640                                  	;mov ret
  4641 000032FF 488B4708                	mov rax, qword [rdi + (8 * 1)]
  4642 00003303 488907                  	mov qword [rdi], rax
  4643 00003306 4883C708                	add rdi, 8
  4644                                  	;mov env
  4645 0000330A 488B4708                	mov rax, qword [rdi + (8 * 1)]
  4646 0000330E 488907                  	mov qword [rdi], rax
  4647 00003311 4883C708                	add rdi, 8
  4648                                  	;mov & update COUNT
  4649 00003315 488B4708                	mov rax, qword [rdi +(8 * 1)]
  4650 00003319 4889C1                  	mov rcx, rax
  4651 0000331C 48FFC0                  	inc rax
  4652 0000331F 488907                  	mov qword [rdi], rax
  4653 00003322 4883C708                	add rdi, 8
  4654                                  	;LOOP:move params
  4655                                  .L_lambda_opt_stack_shrink_loop_004c:	
  4656 00003326 4883F900                	cmp rcx, 0
  4657 0000332A 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_004c
  4658 0000332C 488B4708                	mov rax, qword [rdi + 8]
  4659 00003330 488907                  	mov qword [rdi], rax
  4660 00003333 4883C708                	add rdi, 8
  4661 00003337 48FFC9                  	dec rcx
  4662 0000333A EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_004c
  4663                                  .L_lambda_opt_stack_shrink_loop_exit_004c:	
  4664 0000333C 48C707[01000000]        	mov qword [rdi], sob_nil
  4665 00003343 E995000000              	jmp .L_lambda_opt_stack_adjusted_001a
  4666                                  .L_lambda_opt_arity_check_more_001a:	
  4667 00003348 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4668 0000334D 488D4EFF                	lea rcx, [rsi - 1]
  4669 00003351 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4670 00003356 4989F2                  	mov r10, rsi
  4671 00003359 49B9-                   	mov r9, sob_nil
  4671 0000335B [0100000000000000] 
  4672                                  .L_lambda_opt_stack_shrink_loop_004d:	
  4673 00003363 4883F900                	cmp rcx, 0
  4674 00003367 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_004d
  4675 00003369 BF11000000              	mov rdi, 1 + 8 + 8
  4676 0000336E E8A7DB0000              	call malloc
  4677 00003373 C60021                  	mov byte [rax], T_pair
  4678 00003376 488B1E                  	mov rbx, qword [rsi]
  4679 00003379 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4680 0000337D 4C894809                	mov SOB_PAIR_CDR(rax), r9
  4681 00003381 4989C1                  	mov r9, rax
  4682 00003384 4883EE08                	sub rsi, 8 * 1
  4683 00003388 48FFC9                  	dec rcx
  4684 0000338B EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_004d
  4685                                  .L_lambda_opt_stack_shrink_loop_exit_004d:	
  4686 0000338D 4D890A                  	mov qword [r10], r9
  4687 00003390 4983EA08                	sub r10, 8 * 1; the new dest!
  4688 00003394 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
  4689 00003399 B901000000              	mov rcx, 1 
  4690                                  .L_lambda_opt_stack_shrink_loop_004e:	
  4691 0000339E 4883F900                	cmp rcx, 0
  4692 000033A2 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_004e
  4693 000033A4 488B06                  	mov rax, qword [rsi]
  4694 000033A7 498902                  	mov qword [r10], rax
  4695 000033AA 4983EA08                	sub r10, 8 * 1
  4696 000033AE 4883EE08                	sub rsi, 8 * 1
  4697 000033B2 48FFC9                  	dec rcx
  4698 000033B5 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_004e
  4699                                  .L_lambda_opt_stack_shrink_loop_exit_004e:	
  4700 000033B7 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
  4701 000033BE 4983EA08                	sub r10, 8 * 1
  4702 000033C2 4883EE08                	sub rsi, 8 * 1
  4703 000033C6 488B06                  	mov rax, qword [rsi] ;env
  4704 000033C9 498902                  	mov qword [r10], rax
  4705 000033CC 4983EA08                	sub r10, 8 * 1
  4706 000033D0 4883EE08                	sub rsi, 8 * 1
  4707 000033D4 488B06                  	mov rax, qword [rsi] ;ret
  4708 000033D7 498902                  	mov qword [r10], rax
  4709 000033DA 4C89D4                  	mov rsp, r10
  4710                                  .L_lambda_opt_stack_adjusted_001a:	
  4711 000033DD C8000000                	enter 0, 0
  4712 000033E1 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  4713 000033E5 50                      	push rax
  4714 000033E6 6A01                    	push 1
  4715 000033E8 488B0425[88000000]      	mov rax, qword [free_var_17]
  4716 000033F0 803805                  	cmp byte [rax], T_closure 
  4717 000033F3 0F85D6EA0000                    jne L_code_ptr_error
  4718                                  
  4719 000033F9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4720                                  
  4721 000033FD 53                              push rbx
  4722                                  
  4723 000033FE FF5009                          call SOB_CLOSURE_CODE(rax)
  4724                                  
  4725 00003401 50                              	push rax
  4726 00003402 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4727 00003406 50                      	push rax
  4728 00003407 6A01                    	push 1
  4729 00003409 488B0425[80000000]      	mov rax, qword [free_var_16]
  4730 00003411 803805                  	cmp byte [rax], T_closure 
  4731 00003414 0F85B5EA0000                    jne L_code_ptr_error
  4732                                  
  4733 0000341A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4734                                  
  4735 0000341E 53                              push rbx
  4736                                  
  4737 0000341F FF5009                          call SOB_CLOSURE_CODE(rax)
  4738                                  
  4739 00003422 50                              	push rax
  4740 00003423 6A02                    	push 2
  4741 00003425 488B4510                	mov rax, qword [rbp + 8 * 2]
  4742                                  
  4743 00003429 488B00                                            	mov rax, qword[rax + 8 * 0]
  4744                                  
  4745 0000342C 488B00                                            	mov rax, qword[rax + 8 * 0]
  4746 0000342F 488B00                  	mov rax, qword [rax]
  4747 00003432 803805                  	cmp byte [rax], T_closure 
  4748 00003435 0F8594EA0000                    jne L_code_ptr_error
  4749                                  
  4750 0000343B 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4751                                  
  4752 0000343F 53                              push rbx
  4753                                  
  4754 00003440 FF5009                          call SOB_CLOSURE_CODE(rax)
  4755                                  
  4756 00003443 50                              	push rax
  4757 00003444 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4758 00003448 50                      	push rax
  4759                                  
  4760 00003449 6A02                    	push 2
  4761 0000344B 488B0425[E8000000]      	mov rax, qword [free_var_29]
  4762                                  	assert_closure(rax)
    42 00003453 803805              <1>  cmp byte [%1], %2
    43 00003456 0F85B2F20000        <1>  jne L_error_incorrect_type
  4763 0000345C 50                      	push rax 
  4764 0000345D FF7508                  	push qword [rbp + 8]
  4765 00003460 FF7500                  	push qword [rbp]
  4766 00003463 4883C308                	add rbx ,8*1
  4767                                  	 .L_fix_stack_label_00d8:
  4768 00003467 488B5518                	mov rdx, qword[rbp+8*3]
  4769 0000346B 4883C203                	add rdx, 3
  4770 0000346F 48C1E203                	shl rdx, 3
  4771 00003473 4889EF                  	mov rdi, rbp
  4772 00003476 4801D7                  	add rdi, rdx
  4773 00003479 4C8B4500                	mov r8, qword[rbp]
  4774 0000347D 4889E9                  	mov rcx, rbp
  4775 00003480 4883E908                	sub rcx, 8
  4776                                  	 .L_loop_fix_stuck_00d8:
  4777 00003484 4839CC                  	cmp rsp, rcx
  4778 00003487 7710                    ja .L_loop_fix_stuck_end_00d8
  4779 00003489 488B19                   	mov rbx, qword[rcx]
  4780 0000348C 48891F                  	 mov qword[rdi], rbx
  4781 0000348F 4883EF08                	sub rdi, 8
  4782 00003493 4883E908                	sub rcx, 8
  4783 00003497 EBEB                    jmp .L_loop_fix_stuck_00d8
  4784                                  	 .L_loop_fix_stuck_end_00d8:
  4785 00003499 4883C708                	add rdi, 8
  4786 0000349D 4889FC                  	 mov rsp, rdi
  4787 000034A0 4C89C5                  	mov rbp, r8
  4788 000034A3 5D                      	pop rbp
  4789 000034A4 FFE0                    	jmp rax 
  4790 000034A6 C9                      	leave
  4791 000034A7 C22000                  	ret 8 * (2 + 2)
  4792                                  .L_lambda_opt_end_001a:	; new closure is in rax
  4793 000034AA C9                      	leave
  4794 000034AB C21800                  	ret 8 * (2 + 1)
  4795                                  .L_lambda_simple_end_00be:	; new closure is in rax
  4796 000034AE 803805                  	cmp byte [rax], T_closure 
  4797 000034B1 0F8518EA0000                    jne L_code_ptr_error
  4798                                  
  4799 000034B7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  4800                                  
  4801 000034BB 53                              push rbx
  4802                                  
  4803 000034BC FF5009                          call SOB_CLOSURE_CODE(rax)
  4804                                  
  4805 000034BF 48890425[C8020000]              	mov qword [free_var_89], rax
  4806 000034C7 48B8-                   	mov rax, sob_void
  4806 000034C9 [0000000000000000] 
  4807                                  
  4808 000034D1 4889C7                  	mov rdi, rax
  4809 000034D4 E852DA0000              	call print_sexpr_if_not_void
  4810                                  
  4811 000034D9 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  4812 000034DE E837DA0000              	call malloc
  4813 000034E3 50                      	push rax
  4814 000034E4 BF00000000              	mov rdi, 8 * 0  ; new rib
  4815 000034E9 E82CDA0000              	call malloc
  4816 000034EE 50                      	push rax
  4817 000034EF BF08000000              	mov rdi, 8 * 1	; extended env
  4818 000034F4 E821DA0000              	call malloc
  4819 000034F9 488B7D10                	mov rdi, ENV
  4820 000034FD BE00000000              	mov rsi, 0
  4821 00003502 BA01000000              	mov rdx, 1
  4822                                  .L_lambda_opt_env_loop_001b:	; ext_env = env
  4823 00003507 4883FE00                	cmp rsi, 0
  4824 0000350B 7410                    	je .L_lambda_opt_env_end_001b
  4825 0000350D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4826 00003511 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4827 00003515 48FFC6                  	inc rsi
  4828 00003518 48FFC2                  	inc rdx
  4829 0000351B EBEA                    	jmp .L_lambda_opt_env_loop_001b
  4830                                  .L_lambda_opt_env_end_001b:
  4831 0000351D 5B                      	pop rbx
  4832 0000351E BE00000000              	mov rsi, 0
  4833                                  .L_lambda_opt_params_loop_001b:	; copy params
  4834 00003523 4883FE00                	cmp rsi, 0
  4835 00003527 740E                    	je .L_lambda_opt_params_end_001b
  4836 00003529 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4837 0000352E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4838 00003532 48FFC6                  	inc rsi
  4839 00003535 EBEC                    	jmp .L_lambda_opt_params_loop_001b
  4840                                  .L_lambda_opt_params_end_001b:
  4841 00003537 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4842 0000353A 4889C3                  	mov rbx, rax
  4843 0000353D 58                      	pop rax
  4844 0000353E C60005                  	mov byte [rax], T_closure
  4845 00003541 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4846 00003545 48C74009[52350000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001b
  4847 0000354D E95F040000              	jmp .L_lambda_opt_end_001b
  4848                                  .L_lambda_opt_code_001b:	; lambda-opt body
  4849 00003552 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4850 00003558 740D                    	je .L_lambda_opt_arity_check_exact_001b  ;same num_of_args
  4851 0000355A 7F5B                    	jg .L_lambda_opt_arity_check_more_001b  ;greater num_of_args
  4852 0000355C FF742410                	push qword [rsp + 8 * 2]
  4853 00003560 6A01                    	push 1
  4854 00003562 E980D90000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4855                                  .L_lambda_opt_arity_check_exact_001b:
  4856 00003567 4883EC08                	sub rsp, 8 * 1
  4857 0000356B 4889E7                  	mov rdi, rsp 
  4858                                  	;mov ret
  4859 0000356E 488B4708                	mov rax, qword [rdi + (8 * 1)]
  4860 00003572 488907                  	mov qword [rdi], rax
  4861 00003575 4883C708                	add rdi, 8
  4862                                  	;mov env
  4863 00003579 488B4708                	mov rax, qword [rdi + (8 * 1)]
  4864 0000357D 488907                  	mov qword [rdi], rax
  4865 00003580 4883C708                	add rdi, 8
  4866                                  	;mov & update COUNT
  4867 00003584 488B4708                	mov rax, qword [rdi +(8 * 1)]
  4868 00003588 4889C1                  	mov rcx, rax
  4869 0000358B 48FFC0                  	inc rax
  4870 0000358E 488907                  	mov qword [rdi], rax
  4871 00003591 4883C708                	add rdi, 8
  4872                                  	;LOOP:move params
  4873                                  .L_lambda_opt_stack_shrink_loop_004f:	
  4874 00003595 4883F900                	cmp rcx, 0
  4875 00003599 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_004f
  4876 0000359B 488B4708                	mov rax, qword [rdi + 8]
  4877 0000359F 488907                  	mov qword [rdi], rax
  4878 000035A2 4883C708                	add rdi, 8
  4879 000035A6 48FFC9                  	dec rcx
  4880 000035A9 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_004f
  4881                                  .L_lambda_opt_stack_shrink_loop_exit_004f:	
  4882 000035AB 48C707[01000000]        	mov qword [rdi], sob_nil
  4883 000035B2 E995000000              	jmp .L_lambda_opt_stack_adjusted_001b
  4884                                  .L_lambda_opt_arity_check_more_001b:	
  4885 000035B7 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4886 000035BC 488D4EFF                	lea rcx, [rsi - 1]
  4887 000035C0 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4888 000035C5 4989F2                  	mov r10, rsi
  4889 000035C8 49B9-                   	mov r9, sob_nil
  4889 000035CA [0100000000000000] 
  4890                                  .L_lambda_opt_stack_shrink_loop_0050:	
  4891 000035D2 4883F900                	cmp rcx, 0
  4892 000035D6 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0050
  4893 000035D8 BF11000000              	mov rdi, 1 + 8 + 8
  4894 000035DD E838D90000              	call malloc
  4895 000035E2 C60021                  	mov byte [rax], T_pair
  4896 000035E5 488B1E                  	mov rbx, qword [rsi]
  4897 000035E8 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4898 000035EC 4C894809                	mov SOB_PAIR_CDR(rax), r9
  4899 000035F0 4989C1                  	mov r9, rax
  4900 000035F3 4883EE08                	sub rsi, 8 * 1
  4901 000035F7 48FFC9                  	dec rcx
  4902 000035FA EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0050
  4903                                  .L_lambda_opt_stack_shrink_loop_exit_0050:	
  4904 000035FC 4D890A                  	mov qword [r10], r9
  4905 000035FF 4983EA08                	sub r10, 8 * 1; the new dest!
  4906 00003603 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
  4907 00003608 B901000000              	mov rcx, 1 
  4908                                  .L_lambda_opt_stack_shrink_loop_0051:	
  4909 0000360D 4883F900                	cmp rcx, 0
  4910 00003611 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0051
  4911 00003613 488B06                  	mov rax, qword [rsi]
  4912 00003616 498902                  	mov qword [r10], rax
  4913 00003619 4983EA08                	sub r10, 8 * 1
  4914 0000361D 4883EE08                	sub rsi, 8 * 1
  4915 00003621 48FFC9                  	dec rcx
  4916 00003624 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0051
  4917                                  .L_lambda_opt_stack_shrink_loop_exit_0051:	
  4918 00003626 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
  4919 0000362D 4983EA08                	sub r10, 8 * 1
  4920 00003631 4883EE08                	sub rsi, 8 * 1
  4921 00003635 488B06                  	mov rax, qword [rsi] ;env
  4922 00003638 498902                  	mov qword [r10], rax
  4923 0000363B 4983EA08                	sub r10, 8 * 1
  4924 0000363F 4883EE08                	sub rsi, 8 * 1
  4925 00003643 488B06                  	mov rax, qword [rsi] ;ret
  4926 00003646 498902                  	mov qword [r10], rax
  4927 00003649 4C89D4                  	mov rsp, r10
  4928                                  .L_lambda_opt_stack_adjusted_001b:	
  4929 0000364C C8000000                	enter 0, 0
  4930 00003650 48B8-                   	 	mov rax,L_constants + 23
  4930 00003652 [1700000000000000] 
  4931 0000365A 50                      	push rax
  4932                                  
  4933 0000365B 6A01                    	push 1
  4934 0000365D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4935 00003662 E8B3D80000              	call malloc
  4936 00003667 50                      	push rax
  4937 00003668 BF10000000              	mov rdi, 8 * 2	; new rib
  4938 0000366D E8A8D80000              	call malloc
  4939 00003672 50                      	push rax
  4940 00003673 BF10000000              	mov rdi, 8 * 2	; extended env
  4941 00003678 E89DD80000              	call malloc
  4942 0000367D 488B7D10                	mov rdi, ENV
  4943 00003681 BE00000000              	mov rsi, 0
  4944 00003686 BA01000000              	mov rdx, 1
  4945                                  .L_lambda_simple_env_loop_00c0:	; ext_env[i + 1] <-- env[i]
  4946 0000368B 4883FE01                	cmp rsi, 1
  4947 0000368F 7410                    	je .L_lambda_simple_env_end_00c0
  4948 00003691 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4949 00003695 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4950 00003699 48FFC6                  	inc rsi
  4951 0000369C 48FFC2                  	inc rdx
  4952 0000369F EBEA                    	jmp .L_lambda_simple_env_loop_00c0
  4953                                  .L_lambda_simple_env_end_00c0:
  4954 000036A1 5B                      	pop rbx
  4955 000036A2 BE00000000              	mov rsi, 0
  4956                                  .L_lambda_simple_params_loop_00c0:	; copy params
  4957 000036A7 4883FE02                	cmp rsi, 2
  4958 000036AB 740E                    	je .L_lambda_simple_params_end_00c0
  4959 000036AD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4960 000036B2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4961 000036B6 48FFC6                  	inc rsi
  4962 000036B9 EBEC                    	jmp .L_lambda_simple_params_loop_00c0
  4963                                  .L_lambda_simple_params_end_00c0:
  4964 000036BB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4965 000036BE 4889C3                  	mov rbx, rax
  4966 000036C1 58                      	pop rax
  4967 000036C2 C60005                  	mov byte [rax], T_closure
  4968 000036C5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4969 000036C9 48C74009[D6360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c0
  4970 000036D1 E984020000              	jmp .L_lambda_simple_end_00c0
  4971                                  .L_lambda_simple_code_00c0:	; lambda-simple body
  4972 000036D6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4973 000036DC 740B                    	je .L_lambda_simple_arity_check_ok_00c0
  4974 000036DE FF742410                	push qword [rsp + 8 * 2]
  4975 000036E2 6A01                    	push 1
  4976 000036E4 E9EAD70000              	jmp L_error_incorrect_arity_simple
  4977                                  .L_lambda_simple_arity_check_ok_00c0:
  4978 000036E9 C8000000                	enter 0, 0
  4979 000036ED BF08000000              	mov rdi, 8
  4980 000036F2 E823D80000              	call malloc
  4981 000036F7 488B5D20                	mov rbx, PARAM(0)
  4982 000036FB 488918                  	mov qword [rax], rbx
  4983 000036FE 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4984                                  
  4985 00003702 48B8-                            	mov rax, sob_void
  4985 00003704 [0000000000000000] 
  4986                                  
  4987 0000370C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4988 00003711 E804D80000              	call malloc
  4989 00003716 50                      	push rax
  4990 00003717 BF08000000              	mov rdi, 8 * 1	; new rib
  4991 0000371C E8F9D70000              	call malloc
  4992 00003721 50                      	push rax
  4993 00003722 BF18000000              	mov rdi, 8 * 3	; extended env
  4994 00003727 E8EED70000              	call malloc
  4995 0000372C 488B7D10                	mov rdi, ENV
  4996 00003730 BE00000000              	mov rsi, 0
  4997 00003735 BA01000000              	mov rdx, 1
  4998                                  .L_lambda_simple_env_loop_00c1:	; ext_env[i + 1] <-- env[i]
  4999 0000373A 4883FE02                	cmp rsi, 2
  5000 0000373E 7410                    	je .L_lambda_simple_env_end_00c1
  5001 00003740 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5002 00003744 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5003 00003748 48FFC6                  	inc rsi
  5004 0000374B 48FFC2                  	inc rdx
  5005 0000374E EBEA                    	jmp .L_lambda_simple_env_loop_00c1
  5006                                  .L_lambda_simple_env_end_00c1:
  5007 00003750 5B                      	pop rbx
  5008 00003751 BE00000000              	mov rsi, 0
  5009                                  .L_lambda_simple_params_loop_00c1:	; copy params
  5010 00003756 4883FE01                	cmp rsi, 1
  5011 0000375A 740E                    	je .L_lambda_simple_params_end_00c1
  5012 0000375C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5013 00003761 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5014 00003765 48FFC6                  	inc rsi
  5015 00003768 EBEC                    	jmp .L_lambda_simple_params_loop_00c1
  5016                                  .L_lambda_simple_params_end_00c1:
  5017 0000376A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5018 0000376D 4889C3                  	mov rbx, rax
  5019 00003770 58                      	pop rax
  5020 00003771 C60005                  	mov byte [rax], T_closure
  5021 00003774 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5022 00003778 48C74009[85370000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c1
  5023 00003780 E958010000              	jmp .L_lambda_simple_end_00c1
  5024                                  .L_lambda_simple_code_00c1:	; lambda-simple body
  5025 00003785 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5026 0000378B 740B                    	je .L_lambda_simple_arity_check_ok_00c1
  5027 0000378D FF742410                	push qword [rsp + 8 * 2]
  5028 00003791 6A01                    	push 1
  5029 00003793 E93BD70000              	jmp L_error_incorrect_arity_simple
  5030                                  .L_lambda_simple_arity_check_ok_00c1:
  5031 00003798 C8000000                	enter 0, 0
  5032 0000379C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5033 000037A0 50                      	push rax
  5034 000037A1 6A01                    	push 1
  5035 000037A3 488B0425[80000000]      	mov rax, qword [free_var_16]
  5036 000037AB 803805                  	cmp byte [rax], T_closure 
  5037 000037AE 0F851BE70000                    jne L_code_ptr_error
  5038                                  
  5039 000037B4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5040                                  
  5041 000037B8 53                              push rbx
  5042                                  
  5043 000037B9 FF5009                          call SOB_CLOSURE_CODE(rax)
  5044                                  
  5045 000037BC 50                              	push rax
  5046 000037BD 6A01                    	push 1
  5047 000037BF 488B0425[08000000]      	mov rax, qword [free_var_1]
  5048 000037C7 803805                  	cmp byte [rax], T_closure 
  5049 000037CA 0F85FFE60000                    jne L_code_ptr_error
  5050                                  
  5051 000037D0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5052                                  
  5053 000037D4 53                              push rbx
  5054                                  
  5055 000037D5 FF5009                          call SOB_CLOSURE_CODE(rax)
  5056                                  
  5057                                          
  5058 000037D8 483D[02000000]                  	cmp rax, sob_boolean_false
  5059                                  
  5060 000037DE 0F84EB000000                    	je .L_if_else_0064
  5061 000037E4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5062 000037E8 50                      	push rax
  5063 000037E9 488B0425[80000000]      	mov rax, qword [free_var_16]
  5064 000037F1 50                      	push rax
  5065 000037F2 6A02                    	push 2
  5066 000037F4 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5067 000037FC 803805                  	cmp byte [rax], T_closure 
  5068 000037FF 0F85CAE60000                    jne L_code_ptr_error
  5069                                  
  5070 00003805 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5071                                  
  5072 00003809 53                              push rbx
  5073                                  
  5074 0000380A FF5009                          call SOB_CLOSURE_CODE(rax)
  5075                                  
  5076 0000380D 50                              	push rax
  5077 0000380E 488B4510                	mov rax, qword [rbp + 8 * 2]
  5078                                  
  5079 00003812 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5080                                  
  5081 00003816 488B00                                            	mov rax, qword[rax + 8 * 0]
  5082 00003819 50                      	push rax
  5083 0000381A 6A02                    	push 2
  5084 0000381C 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5085 00003824 803805                  	cmp byte [rax], T_closure 
  5086 00003827 0F85A2E60000                    jne L_code_ptr_error
  5087                                  
  5088 0000382D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5089                                  
  5090 00003831 53                              push rbx
  5091                                  
  5092 00003832 FF5009                          call SOB_CLOSURE_CODE(rax)
  5093                                  
  5094 00003835 483D[02000000]                  	cmp rax, sob_boolean_false
  5095 0000383B 0F858C000000            	jne .L_or_end_000e
  5096 00003841 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  5097 00003845 50                      	push rax
  5098 00003846 488B0425[88000000]      	mov rax, qword [free_var_17]
  5099 0000384E 50                      	push rax
  5100 0000384F 6A02                    	push 2
  5101 00003851 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5102 00003859 803805                  	cmp byte [rax], T_closure 
  5103 0000385C 0F856DE60000                    jne L_code_ptr_error
  5104                                  
  5105 00003862 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5106                                  
  5107 00003866 53                              push rbx
  5108                                  
  5109 00003867 FF5009                          call SOB_CLOSURE_CODE(rax)
  5110                                  
  5111 0000386A 50                              	push rax
  5112                                  
  5113 0000386B 6A01                    	push 1
  5114 0000386D 488B4510                	mov rax, qword [rbp + 8 * 2]
  5115                                  
  5116 00003871 488B00                                            	mov rax, qword[rax + 8 * 0]
  5117                                  
  5118 00003874 488B00                                            	mov rax, qword[rax + 8 * 0]
  5119 00003877 488B00                  	mov rax, qword [rax]
  5120                                  	assert_closure(rax)
    42 0000387A 803805              <1>  cmp byte [%1], %2
    43 0000387D 0F858BEE0000        <1>  jne L_error_incorrect_type
  5121 00003883 50                      	push rax 
  5122 00003884 FF7508                  	push qword [rbp + 8]
  5123 00003887 FF7500                  	push qword [rbp]
  5124 0000388A 4883C308                	add rbx ,8*1
  5125                                  	 .L_fix_stack_label_00da:
  5126 0000388E 488B5518                	mov rdx, qword[rbp+8*3]
  5127 00003892 4883C203                	add rdx, 3
  5128 00003896 48C1E203                	shl rdx, 3
  5129 0000389A 4889EF                  	mov rdi, rbp
  5130 0000389D 4801D7                  	add rdi, rdx
  5131 000038A0 4C8B4500                	mov r8, qword[rbp]
  5132 000038A4 4889E9                  	mov rcx, rbp
  5133 000038A7 4883E908                	sub rcx, 8
  5134                                  	 .L_loop_fix_stuck_00da:
  5135 000038AB 4839CC                  	cmp rsp, rcx
  5136 000038AE 7710                    ja .L_loop_fix_stuck_end_00da
  5137 000038B0 488B19                   	mov rbx, qword[rcx]
  5138 000038B3 48891F                  	 mov qword[rdi], rbx
  5139 000038B6 4883EF08                	sub rdi, 8
  5140 000038BA 4883E908                	sub rcx, 8
  5141 000038BE EBEB                    jmp .L_loop_fix_stuck_00da
  5142                                  	 .L_loop_fix_stuck_end_00da:
  5143 000038C0 4883C708                	add rdi, 8
  5144 000038C4 4889FC                  	 mov rsp, rdi
  5145 000038C7 4C89C5                  	mov rbp, r8
  5146 000038CA 5D                      	pop rbp
  5147 000038CB FFE0                    	jmp rax 
  5148                                  .L_or_end_000e:
  5149                                  
  5150 000038CD EB0A                            	jmp .L_if_end_0064
  5151                                  
  5152                                          	.L_if_else_0064:
  5153 000038CF 48B8-                   	mov rax,L_constants + 2
  5153 000038D1 [0200000000000000] 
  5154                                  
  5155                                          	.L_if_end_0064:
  5156 000038D9 C9                      	leave
  5157 000038DA C21800                  	ret 8 * (2 + 1)
  5158                                  .L_lambda_simple_end_00c1:	; new closure is in rax
  5159 000038DD 50                      	push rax
  5160 000038DE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5161 000038E2 8F00                    	pop qword [rax]
  5162 000038E4 48B8-                   	mov rax, sob_void
  5162 000038E6 [0000000000000000] 
  5163                                  
  5164 000038EE 488B4510                	 	mov rax, qword [rbp + 8 * 2]
  5165                                  
  5166 000038F2 488B00                                            	mov rax, qword[rax + 8 * 0]
  5167                                  
  5168 000038F5 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5169 000038F9 50                      	push rax
  5170                                  
  5171 000038FA 6A01                    	push 1
  5172 000038FC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5173 00003900 488B00                  	mov rax, qword [rax]
  5174                                  	assert_closure(rax)
    42 00003903 803805              <1>  cmp byte [%1], %2
    43 00003906 0F8502EE0000        <1>  jne L_error_incorrect_type
  5175 0000390C 50                      	push rax 
  5176 0000390D FF7508                  	push qword [rbp + 8]
  5177 00003910 FF7500                  	push qword [rbp]
  5178 00003913 4883C308                	add rbx ,8*1
  5179                                  	 .L_fix_stack_label_00db:
  5180 00003917 488B5518                	mov rdx, qword[rbp+8*3]
  5181 0000391B 4883C203                	add rdx, 3
  5182 0000391F 48C1E203                	shl rdx, 3
  5183 00003923 4889EF                  	mov rdi, rbp
  5184 00003926 4801D7                  	add rdi, rdx
  5185 00003929 4C8B4500                	mov r8, qword[rbp]
  5186 0000392D 4889E9                  	mov rcx, rbp
  5187 00003930 4883E908                	sub rcx, 8
  5188                                  	 .L_loop_fix_stuck_00db:
  5189 00003934 4839CC                  	cmp rsp, rcx
  5190 00003937 7710                    ja .L_loop_fix_stuck_end_00db
  5191 00003939 488B19                   	mov rbx, qword[rcx]
  5192 0000393C 48891F                  	 mov qword[rdi], rbx
  5193 0000393F 4883EF08                	sub rdi, 8
  5194 00003943 4883E908                	sub rcx, 8
  5195 00003947 EBEB                    jmp .L_loop_fix_stuck_00db
  5196                                  	 .L_loop_fix_stuck_end_00db:
  5197 00003949 4883C708                	add rdi, 8
  5198 0000394D 4889FC                  	 mov rsp, rdi
  5199 00003950 4C89C5                  	mov rbp, r8
  5200 00003953 5D                      	pop rbp
  5201 00003954 FFE0                    	jmp rax 
  5202 00003956 C9                      	leave
  5203 00003957 C21800                  	ret 8 * (2 + 1)
  5204                                  .L_lambda_simple_end_00c0:	; new closure is in rax
  5205                                  	assert_closure(rax)
    42 0000395A 803805              <1>  cmp byte [%1], %2
    43 0000395D 0F85ABED0000        <1>  jne L_error_incorrect_type
  5206 00003963 50                      	push rax 
  5207 00003964 FF7508                  	push qword [rbp + 8]
  5208 00003967 FF7500                  	push qword [rbp]
  5209 0000396A 4883C308                	add rbx ,8*1
  5210                                  	 .L_fix_stack_label_00d9:
  5211 0000396E 488B5518                	mov rdx, qword[rbp+8*3]
  5212 00003972 4883C203                	add rdx, 3
  5213 00003976 48C1E203                	shl rdx, 3
  5214 0000397A 4889EF                  	mov rdi, rbp
  5215 0000397D 4801D7                  	add rdi, rdx
  5216 00003980 4C8B4500                	mov r8, qword[rbp]
  5217 00003984 4889E9                  	mov rcx, rbp
  5218 00003987 4883E908                	sub rcx, 8
  5219                                  	 .L_loop_fix_stuck_00d9:
  5220 0000398B 4839CC                  	cmp rsp, rcx
  5221 0000398E 7710                    ja .L_loop_fix_stuck_end_00d9
  5222 00003990 488B19                   	mov rbx, qword[rcx]
  5223 00003993 48891F                  	 mov qword[rdi], rbx
  5224 00003996 4883EF08                	sub rdi, 8
  5225 0000399A 4883E908                	sub rcx, 8
  5226 0000399E EBEB                    jmp .L_loop_fix_stuck_00d9
  5227                                  	 .L_loop_fix_stuck_end_00d9:
  5228 000039A0 4883C708                	add rdi, 8
  5229 000039A4 4889FC                  	 mov rsp, rdi
  5230 000039A7 4C89C5                  	mov rbp, r8
  5231 000039AA 5D                      	pop rbp
  5232 000039AB FFE0                    	jmp rax 
  5233 000039AD C9                      	leave
  5234 000039AE C22000                  	ret 8 * (2 + 2)
  5235                                  .L_lambda_opt_end_001b:	; new closure is in rax
  5236 000039B1 48890425[D0020000]      	mov qword [free_var_90], rax
  5237 000039B9 48B8-                   	mov rax, sob_void
  5237 000039BB [0000000000000000] 
  5238                                  
  5239 000039C3 4889C7                  	mov rdi, rax
  5240 000039C6 E860D50000              	call print_sexpr_if_not_void
  5241                                  
  5242 000039CB BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  5243 000039D0 E845D50000              	call malloc
  5244 000039D5 50                      	push rax
  5245 000039D6 BF00000000              	mov rdi, 8 * 0  ; new rib
  5246 000039DB E83AD50000              	call malloc
  5247 000039E0 50                      	push rax
  5248 000039E1 BF08000000              	mov rdi, 8 * 1	; extended env
  5249 000039E6 E82FD50000              	call malloc
  5250 000039EB 488B7D10                	mov rdi, ENV
  5251 000039EF BE00000000              	mov rsi, 0
  5252 000039F4 BA01000000              	mov rdx, 1
  5253                                  .L_lambda_opt_env_loop_001c:	; ext_env = env
  5254 000039F9 4883FE00                	cmp rsi, 0
  5255 000039FD 7410                    	je .L_lambda_opt_env_end_001c
  5256 000039FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5257 00003A03 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5258 00003A07 48FFC6                  	inc rsi
  5259 00003A0A 48FFC2                  	inc rdx
  5260 00003A0D EBEA                    	jmp .L_lambda_opt_env_loop_001c
  5261                                  .L_lambda_opt_env_end_001c:
  5262 00003A0F 5B                      	pop rbx
  5263 00003A10 BE00000000              	mov rsi, 0
  5264                                  .L_lambda_opt_params_loop_001c:	; copy params
  5265 00003A15 4883FE00                	cmp rsi, 0
  5266 00003A19 740E                    	je .L_lambda_opt_params_end_001c
  5267 00003A1B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5268 00003A20 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5269 00003A24 48FFC6                  	inc rsi
  5270 00003A27 EBEC                    	jmp .L_lambda_opt_params_loop_001c
  5271                                  .L_lambda_opt_params_end_001c:
  5272 00003A29 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  5273 00003A2C 4889C3                  	mov rbx, rax
  5274 00003A2F 58                      	pop rax
  5275 00003A30 C60005                  	mov byte [rax], T_closure
  5276 00003A33 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5277 00003A37 48C74009[443A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001c
  5278 00003A3F E95F040000              	jmp .L_lambda_opt_end_001c
  5279                                  .L_lambda_opt_code_001c:	; lambda-opt body
  5280 00003A44 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5281 00003A4A 740D                    	je .L_lambda_opt_arity_check_exact_001c  ;same num_of_args
  5282 00003A4C 7F5B                    	jg .L_lambda_opt_arity_check_more_001c  ;greater num_of_args
  5283 00003A4E FF742410                	push qword [rsp + 8 * 2]
  5284 00003A52 6A01                    	push 1
  5285 00003A54 E98ED40000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  5286                                  .L_lambda_opt_arity_check_exact_001c:
  5287 00003A59 4883EC08                	sub rsp, 8 * 1
  5288 00003A5D 4889E7                  	mov rdi, rsp 
  5289                                  	;mov ret
  5290 00003A60 488B4708                	mov rax, qword [rdi + (8 * 1)]
  5291 00003A64 488907                  	mov qword [rdi], rax
  5292 00003A67 4883C708                	add rdi, 8
  5293                                  	;mov env
  5294 00003A6B 488B4708                	mov rax, qword [rdi + (8 * 1)]
  5295 00003A6F 488907                  	mov qword [rdi], rax
  5296 00003A72 4883C708                	add rdi, 8
  5297                                  	;mov & update COUNT
  5298 00003A76 488B4708                	mov rax, qword [rdi +(8 * 1)]
  5299 00003A7A 4889C1                  	mov rcx, rax
  5300 00003A7D 48FFC0                  	inc rax
  5301 00003A80 488907                  	mov qword [rdi], rax
  5302 00003A83 4883C708                	add rdi, 8
  5303                                  	;LOOP:move params
  5304                                  .L_lambda_opt_stack_shrink_loop_0052:	
  5305 00003A87 4883F900                	cmp rcx, 0
  5306 00003A8B 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0052
  5307 00003A8D 488B4708                	mov rax, qword [rdi + 8]
  5308 00003A91 488907                  	mov qword [rdi], rax
  5309 00003A94 4883C708                	add rdi, 8
  5310 00003A98 48FFC9                  	dec rcx
  5311 00003A9B EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0052
  5312                                  .L_lambda_opt_stack_shrink_loop_exit_0052:	
  5313 00003A9D 48C707[01000000]        	mov qword [rdi], sob_nil
  5314 00003AA4 E995000000              	jmp .L_lambda_opt_stack_adjusted_001c
  5315                                  .L_lambda_opt_arity_check_more_001c:	
  5316 00003AA9 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  5317 00003AAE 488D4EFF                	lea rcx, [rsi - 1]
  5318 00003AB2 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  5319 00003AB7 4989F2                  	mov r10, rsi
  5320 00003ABA 49B9-                   	mov r9, sob_nil
  5320 00003ABC [0100000000000000] 
  5321                                  .L_lambda_opt_stack_shrink_loop_0053:	
  5322 00003AC4 4883F900                	cmp rcx, 0
  5323 00003AC8 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0053
  5324 00003ACA BF11000000              	mov rdi, 1 + 8 + 8
  5325 00003ACF E846D40000              	call malloc
  5326 00003AD4 C60021                  	mov byte [rax], T_pair
  5327 00003AD7 488B1E                  	mov rbx, qword [rsi]
  5328 00003ADA 48895801                	mov SOB_PAIR_CAR(rax), rbx
  5329 00003ADE 4C894809                	mov SOB_PAIR_CDR(rax), r9
  5330 00003AE2 4989C1                  	mov r9, rax
  5331 00003AE5 4883EE08                	sub rsi, 8 * 1
  5332 00003AE9 48FFC9                  	dec rcx
  5333 00003AEC EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0053
  5334                                  .L_lambda_opt_stack_shrink_loop_exit_0053:	
  5335 00003AEE 4D890A                  	mov qword [r10], r9
  5336 00003AF1 4983EA08                	sub r10, 8 * 1; the new dest!
  5337 00003AF5 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
  5338 00003AFA B901000000              	mov rcx, 1 
  5339                                  .L_lambda_opt_stack_shrink_loop_0054:	
  5340 00003AFF 4883F900                	cmp rcx, 0
  5341 00003B03 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0054
  5342 00003B05 488B06                  	mov rax, qword [rsi]
  5343 00003B08 498902                  	mov qword [r10], rax
  5344 00003B0B 4983EA08                	sub r10, 8 * 1
  5345 00003B0F 4883EE08                	sub rsi, 8 * 1
  5346 00003B13 48FFC9                  	dec rcx
  5347 00003B16 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0054
  5348                                  .L_lambda_opt_stack_shrink_loop_exit_0054:	
  5349 00003B18 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
  5350 00003B1F 4983EA08                	sub r10, 8 * 1
  5351 00003B23 4883EE08                	sub rsi, 8 * 1
  5352 00003B27 488B06                  	mov rax, qword [rsi] ;env
  5353 00003B2A 498902                  	mov qword [r10], rax
  5354 00003B2D 4983EA08                	sub r10, 8 * 1
  5355 00003B31 4883EE08                	sub rsi, 8 * 1
  5356 00003B35 488B06                  	mov rax, qword [rsi] ;ret
  5357 00003B38 498902                  	mov qword [r10], rax
  5358 00003B3B 4C89D4                  	mov rsp, r10
  5359                                  .L_lambda_opt_stack_adjusted_001c:	
  5360 00003B3E C8000000                	enter 0, 0
  5361 00003B42 48B8-                   	 	mov rax,L_constants + 23
  5361 00003B44 [1700000000000000] 
  5362 00003B4C 50                      	push rax
  5363                                  
  5364 00003B4D 6A01                    	push 1
  5365 00003B4F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5366 00003B54 E8C1D30000              	call malloc
  5367 00003B59 50                      	push rax
  5368 00003B5A BF10000000              	mov rdi, 8 * 2	; new rib
  5369 00003B5F E8B6D30000              	call malloc
  5370 00003B64 50                      	push rax
  5371 00003B65 BF10000000              	mov rdi, 8 * 2	; extended env
  5372 00003B6A E8ABD30000              	call malloc
  5373 00003B6F 488B7D10                	mov rdi, ENV
  5374 00003B73 BE00000000              	mov rsi, 0
  5375 00003B78 BA01000000              	mov rdx, 1
  5376                                  .L_lambda_simple_env_loop_00c2:	; ext_env[i + 1] <-- env[i]
  5377 00003B7D 4883FE01                	cmp rsi, 1
  5378 00003B81 7410                    	je .L_lambda_simple_env_end_00c2
  5379 00003B83 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5380 00003B87 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5381 00003B8B 48FFC6                  	inc rsi
  5382 00003B8E 48FFC2                  	inc rdx
  5383 00003B91 EBEA                    	jmp .L_lambda_simple_env_loop_00c2
  5384                                  .L_lambda_simple_env_end_00c2:
  5385 00003B93 5B                      	pop rbx
  5386 00003B94 BE00000000              	mov rsi, 0
  5387                                  .L_lambda_simple_params_loop_00c2:	; copy params
  5388 00003B99 4883FE02                	cmp rsi, 2
  5389 00003B9D 740E                    	je .L_lambda_simple_params_end_00c2
  5390 00003B9F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5391 00003BA4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5392 00003BA8 48FFC6                  	inc rsi
  5393 00003BAB EBEC                    	jmp .L_lambda_simple_params_loop_00c2
  5394                                  .L_lambda_simple_params_end_00c2:
  5395 00003BAD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5396 00003BB0 4889C3                  	mov rbx, rax
  5397 00003BB3 58                      	pop rax
  5398 00003BB4 C60005                  	mov byte [rax], T_closure
  5399 00003BB7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5400 00003BBB 48C74009[C83B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c2
  5401 00003BC3 E984020000              	jmp .L_lambda_simple_end_00c2
  5402                                  .L_lambda_simple_code_00c2:	; lambda-simple body
  5403 00003BC8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5404 00003BCE 740B                    	je .L_lambda_simple_arity_check_ok_00c2
  5405 00003BD0 FF742410                	push qword [rsp + 8 * 2]
  5406 00003BD4 6A01                    	push 1
  5407 00003BD6 E9F8D20000              	jmp L_error_incorrect_arity_simple
  5408                                  .L_lambda_simple_arity_check_ok_00c2:
  5409 00003BDB C8000000                	enter 0, 0
  5410 00003BDF BF08000000              	mov rdi, 8
  5411 00003BE4 E831D30000              	call malloc
  5412 00003BE9 488B5D20                	mov rbx, PARAM(0)
  5413 00003BED 488918                  	mov qword [rax], rbx
  5414 00003BF0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5415                                  
  5416 00003BF4 48B8-                            	mov rax, sob_void
  5416 00003BF6 [0000000000000000] 
  5417                                  
  5418 00003BFE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5419 00003C03 E812D30000              	call malloc
  5420 00003C08 50                      	push rax
  5421 00003C09 BF08000000              	mov rdi, 8 * 1	; new rib
  5422 00003C0E E807D30000              	call malloc
  5423 00003C13 50                      	push rax
  5424 00003C14 BF18000000              	mov rdi, 8 * 3	; extended env
  5425 00003C19 E8FCD20000              	call malloc
  5426 00003C1E 488B7D10                	mov rdi, ENV
  5427 00003C22 BE00000000              	mov rsi, 0
  5428 00003C27 BA01000000              	mov rdx, 1
  5429                                  .L_lambda_simple_env_loop_00c3:	; ext_env[i + 1] <-- env[i]
  5430 00003C2C 4883FE02                	cmp rsi, 2
  5431 00003C30 7410                    	je .L_lambda_simple_env_end_00c3
  5432 00003C32 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5433 00003C36 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5434 00003C3A 48FFC6                  	inc rsi
  5435 00003C3D 48FFC2                  	inc rdx
  5436 00003C40 EBEA                    	jmp .L_lambda_simple_env_loop_00c3
  5437                                  .L_lambda_simple_env_end_00c3:
  5438 00003C42 5B                      	pop rbx
  5439 00003C43 BE00000000              	mov rsi, 0
  5440                                  .L_lambda_simple_params_loop_00c3:	; copy params
  5441 00003C48 4883FE01                	cmp rsi, 1
  5442 00003C4C 740E                    	je .L_lambda_simple_params_end_00c3
  5443 00003C4E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5444 00003C53 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5445 00003C57 48FFC6                  	inc rsi
  5446 00003C5A EBEC                    	jmp .L_lambda_simple_params_loop_00c3
  5447                                  .L_lambda_simple_params_end_00c3:
  5448 00003C5C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5449 00003C5F 4889C3                  	mov rbx, rax
  5450 00003C62 58                      	pop rax
  5451 00003C63 C60005                  	mov byte [rax], T_closure
  5452 00003C66 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5453 00003C6A 48C74009[773C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c3
  5454 00003C72 E958010000              	jmp .L_lambda_simple_end_00c3
  5455                                  .L_lambda_simple_code_00c3:	; lambda-simple body
  5456 00003C77 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5457 00003C7D 740B                    	je .L_lambda_simple_arity_check_ok_00c3
  5458 00003C7F FF742410                	push qword [rsp + 8 * 2]
  5459 00003C83 6A01                    	push 1
  5460 00003C85 E949D20000              	jmp L_error_incorrect_arity_simple
  5461                                  .L_lambda_simple_arity_check_ok_00c3:
  5462 00003C8A C8000000                	enter 0, 0
  5463 00003C8E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5464 00003C92 50                      	push rax
  5465 00003C93 6A01                    	push 1
  5466 00003C95 488B0425[80000000]      	mov rax, qword [free_var_16]
  5467 00003C9D 803805                  	cmp byte [rax], T_closure 
  5468 00003CA0 0F8529E20000                    jne L_code_ptr_error
  5469                                  
  5470 00003CA6 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5471                                  
  5472 00003CAA 53                              push rbx
  5473                                  
  5474 00003CAB FF5009                          call SOB_CLOSURE_CODE(rax)
  5475                                  
  5476 00003CAE 50                              	push rax
  5477 00003CAF 6A01                    	push 1
  5478 00003CB1 488B0425[00000000]      	mov rax, qword [free_var_0]
  5479 00003CB9 803805                  	cmp byte [rax], T_closure 
  5480 00003CBC 0F850DE20000                    jne L_code_ptr_error
  5481                                  
  5482 00003CC2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5483                                  
  5484 00003CC6 53                              push rbx
  5485                                  
  5486 00003CC7 FF5009                          call SOB_CLOSURE_CODE(rax)
  5487                                  
  5488 00003CCA 483D[02000000]                  	cmp rax, sob_boolean_false
  5489 00003CD0 0F85F5000000            	jne .L_or_end_000f
  5490 00003CD6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5491 00003CDA 50                      	push rax
  5492 00003CDB 488B0425[80000000]      	mov rax, qword [free_var_16]
  5493 00003CE3 50                      	push rax
  5494 00003CE4 6A02                    	push 2
  5495 00003CE6 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5496 00003CEE 803805                  	cmp byte [rax], T_closure 
  5497 00003CF1 0F85D8E10000                    jne L_code_ptr_error
  5498                                  
  5499 00003CF7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5500                                  
  5501 00003CFB 53                              push rbx
  5502                                  
  5503 00003CFC FF5009                          call SOB_CLOSURE_CODE(rax)
  5504                                  
  5505 00003CFF 50                              	push rax
  5506 00003D00 488B4510                	mov rax, qword [rbp + 8 * 2]
  5507                                  
  5508 00003D04 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5509                                  
  5510 00003D08 488B00                                            	mov rax, qword[rax + 8 * 0]
  5511 00003D0B 50                      	push rax
  5512 00003D0C 6A02                    	push 2
  5513 00003D0E 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5514 00003D16 803805                  	cmp byte [rax], T_closure 
  5515 00003D19 0F85B0E10000                    jne L_code_ptr_error
  5516                                  
  5517 00003D1F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5518                                  
  5519 00003D23 53                              push rbx
  5520                                  
  5521 00003D24 FF5009                          call SOB_CLOSURE_CODE(rax)
  5522                                  
  5523                                          
  5524 00003D27 483D[02000000]                  	cmp rax, sob_boolean_false
  5525                                  
  5526 00003D2D 0F848E000000                    	je .L_if_else_0065
  5527 00003D33 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  5528 00003D37 50                      	push rax
  5529 00003D38 488B0425[88000000]      	mov rax, qword [free_var_17]
  5530 00003D40 50                      	push rax
  5531 00003D41 6A02                    	push 2
  5532 00003D43 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5533 00003D4B 803805                  	cmp byte [rax], T_closure 
  5534 00003D4E 0F857BE10000                    jne L_code_ptr_error
  5535                                  
  5536 00003D54 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5537                                  
  5538 00003D58 53                              push rbx
  5539                                  
  5540 00003D59 FF5009                          call SOB_CLOSURE_CODE(rax)
  5541                                  
  5542 00003D5C 50                              	push rax
  5543                                  
  5544 00003D5D 6A01                    	push 1
  5545 00003D5F 488B4510                	mov rax, qword [rbp + 8 * 2]
  5546                                  
  5547 00003D63 488B00                                            	mov rax, qword[rax + 8 * 0]
  5548                                  
  5549 00003D66 488B00                                            	mov rax, qword[rax + 8 * 0]
  5550 00003D69 488B00                  	mov rax, qword [rax]
  5551                                  	assert_closure(rax)
    42 00003D6C 803805              <1>  cmp byte [%1], %2
    43 00003D6F 0F8599E90000        <1>  jne L_error_incorrect_type
  5552 00003D75 50                      	push rax 
  5553 00003D76 FF7508                  	push qword [rbp + 8]
  5554 00003D79 FF7500                  	push qword [rbp]
  5555 00003D7C 4883C308                	add rbx ,8*1
  5556                                  	 .L_fix_stack_label_00dd:
  5557 00003D80 488B5518                	mov rdx, qword[rbp+8*3]
  5558 00003D84 4883C203                	add rdx, 3
  5559 00003D88 48C1E203                	shl rdx, 3
  5560 00003D8C 4889EF                  	mov rdi, rbp
  5561 00003D8F 4801D7                  	add rdi, rdx
  5562 00003D92 4C8B4500                	mov r8, qword[rbp]
  5563 00003D96 4889E9                  	mov rcx, rbp
  5564 00003D99 4883E908                	sub rcx, 8
  5565                                  	 .L_loop_fix_stuck_00dd:
  5566 00003D9D 4839CC                  	cmp rsp, rcx
  5567 00003DA0 7710                    ja .L_loop_fix_stuck_end_00dd
  5568 00003DA2 488B19                   	mov rbx, qword[rcx]
  5569 00003DA5 48891F                  	 mov qword[rdi], rbx
  5570 00003DA8 4883EF08                	sub rdi, 8
  5571 00003DAC 4883E908                	sub rcx, 8
  5572 00003DB0 EBEB                    jmp .L_loop_fix_stuck_00dd
  5573                                  	 .L_loop_fix_stuck_end_00dd:
  5574 00003DB2 4883C708                	add rdi, 8
  5575 00003DB6 4889FC                  	 mov rsp, rdi
  5576 00003DB9 4C89C5                  	mov rbp, r8
  5577 00003DBC 5D                      	pop rbp
  5578 00003DBD FFE0                    	jmp rax 
  5579                                  
  5580 00003DBF EB0A                            	jmp .L_if_end_0065
  5581                                  
  5582                                          	.L_if_else_0065:
  5583 00003DC1 48B8-                   	mov rax,L_constants + 2
  5583 00003DC3 [0200000000000000] 
  5584                                  
  5585                                          	.L_if_end_0065:
  5586                                  .L_or_end_000f:
  5587 00003DCB C9                      	leave
  5588 00003DCC C21800                  	ret 8 * (2 + 1)
  5589                                  .L_lambda_simple_end_00c3:	; new closure is in rax
  5590 00003DCF 50                      	push rax
  5591 00003DD0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5592 00003DD4 8F00                    	pop qword [rax]
  5593 00003DD6 48B8-                   	mov rax, sob_void
  5593 00003DD8 [0000000000000000] 
  5594                                  
  5595 00003DE0 488B4510                	 	mov rax, qword [rbp + 8 * 2]
  5596                                  
  5597 00003DE4 488B00                                            	mov rax, qword[rax + 8 * 0]
  5598                                  
  5599 00003DE7 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5600 00003DEB 50                      	push rax
  5601                                  
  5602 00003DEC 6A01                    	push 1
  5603 00003DEE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5604 00003DF2 488B00                  	mov rax, qword [rax]
  5605                                  	assert_closure(rax)
    42 00003DF5 803805              <1>  cmp byte [%1], %2
    43 00003DF8 0F8510E90000        <1>  jne L_error_incorrect_type
  5606 00003DFE 50                      	push rax 
  5607 00003DFF FF7508                  	push qword [rbp + 8]
  5608 00003E02 FF7500                  	push qword [rbp]
  5609 00003E05 4883C308                	add rbx ,8*1
  5610                                  	 .L_fix_stack_label_00de:
  5611 00003E09 488B5518                	mov rdx, qword[rbp+8*3]
  5612 00003E0D 4883C203                	add rdx, 3
  5613 00003E11 48C1E203                	shl rdx, 3
  5614 00003E15 4889EF                  	mov rdi, rbp
  5615 00003E18 4801D7                  	add rdi, rdx
  5616 00003E1B 4C8B4500                	mov r8, qword[rbp]
  5617 00003E1F 4889E9                  	mov rcx, rbp
  5618 00003E22 4883E908                	sub rcx, 8
  5619                                  	 .L_loop_fix_stuck_00de:
  5620 00003E26 4839CC                  	cmp rsp, rcx
  5621 00003E29 7710                    ja .L_loop_fix_stuck_end_00de
  5622 00003E2B 488B19                   	mov rbx, qword[rcx]
  5623 00003E2E 48891F                  	 mov qword[rdi], rbx
  5624 00003E31 4883EF08                	sub rdi, 8
  5625 00003E35 4883E908                	sub rcx, 8
  5626 00003E39 EBEB                    jmp .L_loop_fix_stuck_00de
  5627                                  	 .L_loop_fix_stuck_end_00de:
  5628 00003E3B 4883C708                	add rdi, 8
  5629 00003E3F 4889FC                  	 mov rsp, rdi
  5630 00003E42 4C89C5                  	mov rbp, r8
  5631 00003E45 5D                      	pop rbp
  5632 00003E46 FFE0                    	jmp rax 
  5633 00003E48 C9                      	leave
  5634 00003E49 C21800                  	ret 8 * (2 + 1)
  5635                                  .L_lambda_simple_end_00c2:	; new closure is in rax
  5636                                  	assert_closure(rax)
    42 00003E4C 803805              <1>  cmp byte [%1], %2
    43 00003E4F 0F85B9E80000        <1>  jne L_error_incorrect_type
  5637 00003E55 50                      	push rax 
  5638 00003E56 FF7508                  	push qword [rbp + 8]
  5639 00003E59 FF7500                  	push qword [rbp]
  5640 00003E5C 4883C308                	add rbx ,8*1
  5641                                  	 .L_fix_stack_label_00dc:
  5642 00003E60 488B5518                	mov rdx, qword[rbp+8*3]
  5643 00003E64 4883C203                	add rdx, 3
  5644 00003E68 48C1E203                	shl rdx, 3
  5645 00003E6C 4889EF                  	mov rdi, rbp
  5646 00003E6F 4801D7                  	add rdi, rdx
  5647 00003E72 4C8B4500                	mov r8, qword[rbp]
  5648 00003E76 4889E9                  	mov rcx, rbp
  5649 00003E79 4883E908                	sub rcx, 8
  5650                                  	 .L_loop_fix_stuck_00dc:
  5651 00003E7D 4839CC                  	cmp rsp, rcx
  5652 00003E80 7710                    ja .L_loop_fix_stuck_end_00dc
  5653 00003E82 488B19                   	mov rbx, qword[rcx]
  5654 00003E85 48891F                  	 mov qword[rdi], rbx
  5655 00003E88 4883EF08                	sub rdi, 8
  5656 00003E8C 4883E908                	sub rcx, 8
  5657 00003E90 EBEB                    jmp .L_loop_fix_stuck_00dc
  5658                                  	 .L_loop_fix_stuck_end_00dc:
  5659 00003E92 4883C708                	add rdi, 8
  5660 00003E96 4889FC                  	 mov rsp, rdi
  5661 00003E99 4C89C5                  	mov rbp, r8
  5662 00003E9C 5D                      	pop rbp
  5663 00003E9D FFE0                    	jmp rax 
  5664 00003E9F C9                      	leave
  5665 00003EA0 C22000                  	ret 8 * (2 + 2)
  5666                                  .L_lambda_opt_end_001c:	; new closure is in rax
  5667 00003EA3 48890425[E0020000]      	mov qword [free_var_92], rax
  5668 00003EAB 48B8-                   	mov rax, sob_void
  5668 00003EAD [0000000000000000] 
  5669                                  
  5670 00003EB5 4889C7                  	mov rdi, rax
  5671 00003EB8 E86ED00000              	call print_sexpr_if_not_void
  5672                                  
  5673 00003EBD 48B8-                   	mov rax,L_constants + 23
  5673 00003EBF [1700000000000000] 
  5674 00003EC7 50                      	push rax
  5675 00003EC8 48B8-                   	mov rax,L_constants + 23
  5675 00003ECA [1700000000000000] 
  5676 00003ED2 50                      	push rax
  5677 00003ED3 6A02                    	push 2
  5678 00003ED5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5679 00003EDA E83BD00000              	call malloc
  5680 00003EDF 50                      	push rax
  5681 00003EE0 BF00000000              	mov rdi, 8 * 0	; new rib
  5682 00003EE5 E830D00000              	call malloc
  5683 00003EEA 50                      	push rax
  5684 00003EEB BF08000000              	mov rdi, 8 * 1	; extended env
  5685 00003EF0 E825D00000              	call malloc
  5686 00003EF5 488B7D10                	mov rdi, ENV
  5687 00003EF9 BE00000000              	mov rsi, 0
  5688 00003EFE BA01000000              	mov rdx, 1
  5689                                  .L_lambda_simple_env_loop_00c4:	; ext_env[i + 1] <-- env[i]
  5690 00003F03 4883FE00                	cmp rsi, 0
  5691 00003F07 7410                    	je .L_lambda_simple_env_end_00c4
  5692 00003F09 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5693 00003F0D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5694 00003F11 48FFC6                  	inc rsi
  5695 00003F14 48FFC2                  	inc rdx
  5696 00003F17 EBEA                    	jmp .L_lambda_simple_env_loop_00c4
  5697                                  .L_lambda_simple_env_end_00c4:
  5698 00003F19 5B                      	pop rbx
  5699 00003F1A BE00000000              	mov rsi, 0
  5700                                  .L_lambda_simple_params_loop_00c4:	; copy params
  5701 00003F1F 4883FE00                	cmp rsi, 0
  5702 00003F23 740E                    	je .L_lambda_simple_params_end_00c4
  5703 00003F25 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5704 00003F2A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5705 00003F2E 48FFC6                  	inc rsi
  5706 00003F31 EBEC                    	jmp .L_lambda_simple_params_loop_00c4
  5707                                  .L_lambda_simple_params_end_00c4:
  5708 00003F33 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5709 00003F36 4889C3                  	mov rbx, rax
  5710 00003F39 58                      	pop rax
  5711 00003F3A C60005                  	mov byte [rax], T_closure
  5712 00003F3D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5713 00003F41 48C74009[4E3F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c4
  5714 00003F49 E929060000              	jmp .L_lambda_simple_end_00c4
  5715                                  .L_lambda_simple_code_00c4:	; lambda-simple body
  5716 00003F4E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5717 00003F54 740B                    	je .L_lambda_simple_arity_check_ok_00c4
  5718 00003F56 FF742410                	push qword [rsp + 8 * 2]
  5719 00003F5A 6A02                    	push 2
  5720 00003F5C E972CF0000              	jmp L_error_incorrect_arity_simple
  5721                                  .L_lambda_simple_arity_check_ok_00c4:
  5722 00003F61 C8000000                	enter 0, 0
  5723 00003F65 BF08000000              	mov rdi, 8
  5724 00003F6A E8ABCF0000              	call malloc
  5725 00003F6F 488B5D20                	mov rbx, PARAM(0)
  5726 00003F73 488918                  	mov qword [rax], rbx
  5727 00003F76 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5728                                  
  5729 00003F7A 48B8-                            	mov rax, sob_void
  5729 00003F7C [0000000000000000] 
  5730                                  
  5731 00003F84 BF08000000              	mov rdi, 8
  5732 00003F89 E88CCF0000              	call malloc
  5733 00003F8E 488B5D28                	mov rbx, PARAM(1)
  5734 00003F92 488918                  	mov qword [rax], rbx
  5735 00003F95 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  5736                                  
  5737 00003F99 48B8-                            	mov rax, sob_void
  5737 00003F9B [0000000000000000] 
  5738                                  
  5739 00003FA3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5740 00003FA8 E86DCF0000              	call malloc
  5741 00003FAD 50                      	push rax
  5742 00003FAE BF10000000              	mov rdi, 8 * 2	; new rib
  5743 00003FB3 E862CF0000              	call malloc
  5744 00003FB8 50                      	push rax
  5745 00003FB9 BF10000000              	mov rdi, 8 * 2	; extended env
  5746 00003FBE E857CF0000              	call malloc
  5747 00003FC3 488B7D10                	mov rdi, ENV
  5748 00003FC7 BE00000000              	mov rsi, 0
  5749 00003FCC BA01000000              	mov rdx, 1
  5750                                  .L_lambda_simple_env_loop_00c5:	; ext_env[i + 1] <-- env[i]
  5751 00003FD1 4883FE01                	cmp rsi, 1
  5752 00003FD5 7410                    	je .L_lambda_simple_env_end_00c5
  5753 00003FD7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5754 00003FDB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5755 00003FDF 48FFC6                  	inc rsi
  5756 00003FE2 48FFC2                  	inc rdx
  5757 00003FE5 EBEA                    	jmp .L_lambda_simple_env_loop_00c5
  5758                                  .L_lambda_simple_env_end_00c5:
  5759 00003FE7 5B                      	pop rbx
  5760 00003FE8 BE00000000              	mov rsi, 0
  5761                                  .L_lambda_simple_params_loop_00c5:	; copy params
  5762 00003FED 4883FE02                	cmp rsi, 2
  5763 00003FF1 740E                    	je .L_lambda_simple_params_end_00c5
  5764 00003FF3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5765 00003FF8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5766 00003FFC 48FFC6                  	inc rsi
  5767 00003FFF EBEC                    	jmp .L_lambda_simple_params_loop_00c5
  5768                                  .L_lambda_simple_params_end_00c5:
  5769 00004001 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5770 00004004 4889C3                  	mov rbx, rax
  5771 00004007 58                      	pop rax
  5772 00004008 C60005                  	mov byte [rax], T_closure
  5773 0000400B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5774 0000400F 48C74009[1C400000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c5
  5775 00004017 E92F010000              	jmp .L_lambda_simple_end_00c5
  5776                                  .L_lambda_simple_code_00c5:	; lambda-simple body
  5777 0000401C 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5778 00004022 740B                    	je .L_lambda_simple_arity_check_ok_00c5
  5779 00004024 FF742410                	push qword [rsp + 8 * 2]
  5780 00004028 6A02                    	push 2
  5781 0000402A E9A4CE0000              	jmp L_error_incorrect_arity_simple
  5782                                  .L_lambda_simple_arity_check_ok_00c5:
  5783 0000402F C8000000                	enter 0, 0
  5784 00004033 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5785 00004037 50                      	push rax
  5786 00004038 6A01                    	push 1
  5787 0000403A 488B0425[00000000]      	mov rax, qword [free_var_0]
  5788 00004042 803805                  	cmp byte [rax], T_closure 
  5789 00004045 0F8584DE0000                    jne L_code_ptr_error
  5790                                  
  5791 0000404B 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5792                                  
  5793 0000404F 53                              push rbx
  5794                                  
  5795 00004050 FF5009                          call SOB_CLOSURE_CODE(rax)
  5796                                  
  5797                                          
  5798 00004053 483D[02000000]                  	cmp rax, sob_boolean_false
  5799                                  
  5800 00004059 740F                            	je .L_if_else_0066
  5801 0000405B 48B8-                   	mov rax,L_constants + 1
  5801 0000405D [0100000000000000] 
  5802                                  
  5803 00004065 E9DD000000                      	jmp .L_if_end_0066
  5804                                  
  5805                                          	.L_if_else_0066:
  5806 0000406A 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  5807 0000406E 50                      	push rax
  5808 0000406F 6A01                    	push 1
  5809 00004071 488B0425[88000000]      	mov rax, qword [free_var_17]
  5810 00004079 803805                  	cmp byte [rax], T_closure 
  5811 0000407C 0F854DDE0000                    jne L_code_ptr_error
  5812                                  
  5813 00004082 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5814                                  
  5815 00004086 53                              push rbx
  5816                                  
  5817 00004087 FF5009                          call SOB_CLOSURE_CODE(rax)
  5818                                  
  5819 0000408A 50                              	push rax
  5820 0000408B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5821 0000408F 50                      	push rax
  5822 00004090 6A02                    	push 2
  5823 00004092 488B4510                	mov rax, qword [rbp + 8 * 2]
  5824                                  
  5825 00004096 488B00                                            	mov rax, qword[rax + 8 * 0]
  5826                                  
  5827 00004099 488B00                                            	mov rax, qword[rax + 8 * 0]
  5828 0000409C 488B00                  	mov rax, qword [rax]
  5829 0000409F 803805                  	cmp byte [rax], T_closure 
  5830 000040A2 0F8527DE0000                    jne L_code_ptr_error
  5831                                  
  5832 000040A8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5833                                  
  5834 000040AC 53                              push rbx
  5835                                  
  5836 000040AD FF5009                          call SOB_CLOSURE_CODE(rax)
  5837                                  
  5838 000040B0 50                              	push rax
  5839 000040B1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5840 000040B5 50                      	push rax
  5841 000040B6 6A01                    	push 1
  5842 000040B8 488B0425[80000000]      	mov rax, qword [free_var_16]
  5843 000040C0 803805                  	cmp byte [rax], T_closure 
  5844 000040C3 0F8506DE0000                    jne L_code_ptr_error
  5845                                  
  5846 000040C9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5847                                  
  5848 000040CD 53                              push rbx
  5849                                  
  5850 000040CE FF5009                          call SOB_CLOSURE_CODE(rax)
  5851                                  
  5852 000040D1 50                              	push rax
  5853 000040D2 6A01                    	push 1
  5854 000040D4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5855 000040D8 803805                  	cmp byte [rax], T_closure 
  5856 000040DB 0F85EEDD0000                    jne L_code_ptr_error
  5857                                  
  5858 000040E1 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5859                                  
  5860 000040E5 53                              push rbx
  5861                                  
  5862 000040E6 FF5009                          call SOB_CLOSURE_CODE(rax)
  5863                                  
  5864 000040E9 50                              	push rax
  5865                                  
  5866 000040EA 6A02                    	push 2
  5867 000040EC 488B0425[68000000]      	mov rax, qword [free_var_13]
  5868                                  	assert_closure(rax)
    42 000040F4 803805              <1>  cmp byte [%1], %2
    43 000040F7 0F8511E60000        <1>  jne L_error_incorrect_type
  5869 000040FD 50                      	push rax 
  5870 000040FE FF7508                  	push qword [rbp + 8]
  5871 00004101 FF7500                  	push qword [rbp]
  5872 00004104 4883C308                	add rbx ,8*1
  5873                                  	 .L_fix_stack_label_00df:
  5874 00004108 488B5518                	mov rdx, qword[rbp+8*3]
  5875 0000410C 4883C203                	add rdx, 3
  5876 00004110 48C1E203                	shl rdx, 3
  5877 00004114 4889EF                  	mov rdi, rbp
  5878 00004117 4801D7                  	add rdi, rdx
  5879 0000411A 4C8B4500                	mov r8, qword[rbp]
  5880 0000411E 4889E9                  	mov rcx, rbp
  5881 00004121 4883E908                	sub rcx, 8
  5882                                  	 .L_loop_fix_stuck_00df:
  5883 00004125 4839CC                  	cmp rsp, rcx
  5884 00004128 7710                    ja .L_loop_fix_stuck_end_00df
  5885 0000412A 488B19                   	mov rbx, qword[rcx]
  5886 0000412D 48891F                  	 mov qword[rdi], rbx
  5887 00004130 4883EF08                	sub rdi, 8
  5888 00004134 4883E908                	sub rcx, 8
  5889 00004138 EBEB                    jmp .L_loop_fix_stuck_00df
  5890                                  	 .L_loop_fix_stuck_end_00df:
  5891 0000413A 4883C708                	add rdi, 8
  5892 0000413E 4889FC                  	 mov rsp, rdi
  5893 00004141 4C89C5                  	mov rbp, r8
  5894 00004144 5D                      	pop rbp
  5895 00004145 FFE0                    	jmp rax 
  5896                                  
  5897                                          	.L_if_end_0066:
  5898 00004147 C9                      	leave
  5899 00004148 C22000                  	ret 8 * (2 + 2)
  5900                                  .L_lambda_simple_end_00c5:	; new closure is in rax
  5901 0000414B 50                      	push rax
  5902 0000414C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5903 00004150 8F00                    	pop qword [rax]
  5904 00004152 48B8-                   	mov rax, sob_void
  5904 00004154 [0000000000000000] 
  5905                                  
  5906 0000415C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5907 00004161 E8B4CD0000              	call malloc
  5908 00004166 50                      	push rax
  5909 00004167 BF10000000              	mov rdi, 8 * 2	; new rib
  5910 0000416C E8A9CD0000              	call malloc
  5911 00004171 50                      	push rax
  5912 00004172 BF10000000              	mov rdi, 8 * 2	; extended env
  5913 00004177 E89ECD0000              	call malloc
  5914 0000417C 488B7D10                	mov rdi, ENV
  5915 00004180 BE00000000              	mov rsi, 0
  5916 00004185 BA01000000              	mov rdx, 1
  5917                                  .L_lambda_simple_env_loop_00c6:	; ext_env[i + 1] <-- env[i]
  5918 0000418A 4883FE01                	cmp rsi, 1
  5919 0000418E 7410                    	je .L_lambda_simple_env_end_00c6
  5920 00004190 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5921 00004194 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5922 00004198 48FFC6                  	inc rsi
  5923 0000419B 48FFC2                  	inc rdx
  5924 0000419E EBEA                    	jmp .L_lambda_simple_env_loop_00c6
  5925                                  .L_lambda_simple_env_end_00c6:
  5926 000041A0 5B                      	pop rbx
  5927 000041A1 BE00000000              	mov rsi, 0
  5928                                  .L_lambda_simple_params_loop_00c6:	; copy params
  5929 000041A6 4883FE02                	cmp rsi, 2
  5930 000041AA 740E                    	je .L_lambda_simple_params_end_00c6
  5931 000041AC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5932 000041B1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5933 000041B5 48FFC6                  	inc rsi
  5934 000041B8 EBEC                    	jmp .L_lambda_simple_params_loop_00c6
  5935                                  .L_lambda_simple_params_end_00c6:
  5936 000041BA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5937 000041BD 4889C3                  	mov rbx, rax
  5938 000041C0 58                      	pop rax
  5939 000041C1 C60005                  	mov byte [rax], T_closure
  5940 000041C4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5941 000041C8 48C74009[D5410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c6
  5942 000041D0 E971010000              	jmp .L_lambda_simple_end_00c6
  5943                                  .L_lambda_simple_code_00c6:	; lambda-simple body
  5944 000041D5 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5945 000041DB 740B                    	je .L_lambda_simple_arity_check_ok_00c6
  5946 000041DD FF742410                	push qword [rsp + 8 * 2]
  5947 000041E1 6A02                    	push 2
  5948 000041E3 E9EBCC0000              	jmp L_error_incorrect_arity_simple
  5949                                  .L_lambda_simple_arity_check_ok_00c6:
  5950 000041E8 C8000000                	enter 0, 0
  5951 000041EC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5952 000041F0 50                      	push rax
  5953 000041F1 6A01                    	push 1
  5954 000041F3 488B0425[80000000]      	mov rax, qword [free_var_16]
  5955 000041FB 803805                  	cmp byte [rax], T_closure 
  5956 000041FE 0F85CBDC0000                    jne L_code_ptr_error
  5957                                  
  5958 00004204 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5959                                  
  5960 00004208 53                              push rbx
  5961                                  
  5962 00004209 FF5009                          call SOB_CLOSURE_CODE(rax)
  5963                                  
  5964 0000420C 50                              	push rax
  5965 0000420D 6A01                    	push 1
  5966 0000420F 488B0425[00000000]      	mov rax, qword [free_var_0]
  5967 00004217 803805                  	cmp byte [rax], T_closure 
  5968 0000421A 0F85AFDC0000                    jne L_code_ptr_error
  5969                                  
  5970 00004220 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  5971                                  
  5972 00004224 53                              push rbx
  5973                                  
  5974 00004225 FF5009                          call SOB_CLOSURE_CODE(rax)
  5975                                  
  5976                                          
  5977 00004228 483D[02000000]                  	cmp rax, sob_boolean_false
  5978                                  
  5979 0000422E 740F                            	je .L_if_else_0067
  5980 00004230 48B8-                   	mov rax,L_constants + 1
  5980 00004232 [0100000000000000] 
  5981                                  
  5982 0000423A E903010000                      	jmp .L_if_end_0067
  5983                                  
  5984                                          	.L_if_else_0067:
  5985 0000423F 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  5986 00004243 50                      	push rax
  5987 00004244 488B0425[88000000]      	mov rax, qword [free_var_17]
  5988 0000424C 50                      	push rax
  5989 0000424D 6A02                    	push 2
  5990 0000424F 488B4510                	mov rax, qword [rbp + 8 * 2]
  5991                                  
  5992 00004253 488B00                                            	mov rax, qword[rax + 8 * 0]
  5993                                  
  5994 00004256 488B00                                            	mov rax, qword[rax + 8 * 0]
  5995 00004259 488B00                  	mov rax, qword [rax]
  5996 0000425C 803805                  	cmp byte [rax], T_closure 
  5997 0000425F 0F856ADC0000                    jne L_code_ptr_error
  5998                                  
  5999 00004265 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6000                                  
  6001 00004269 53                              push rbx
  6002                                  
  6003 0000426A FF5009                          call SOB_CLOSURE_CODE(rax)
  6004                                  
  6005 0000426D 50                              	push rax
  6006 0000426E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6007 00004272 50                      	push rax
  6008 00004273 6A02                    	push 2
  6009 00004275 488B4510                	mov rax, qword [rbp + 8 * 2]
  6010                                  
  6011 00004279 488B00                                            	mov rax, qword[rax + 8 * 0]
  6012                                  
  6013 0000427C 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6014 00004280 488B00                  	mov rax, qword [rax]
  6015 00004283 803805                  	cmp byte [rax], T_closure 
  6016 00004286 0F8543DC0000                    jne L_code_ptr_error
  6017                                  
  6018 0000428C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6019                                  
  6020 00004290 53                              push rbx
  6021                                  
  6022 00004291 FF5009                          call SOB_CLOSURE_CODE(rax)
  6023                                  
  6024 00004294 50                              	push rax
  6025 00004295 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6026 00004299 50                      	push rax
  6027 0000429A 488B0425[80000000]      	mov rax, qword [free_var_16]
  6028 000042A2 50                      	push rax
  6029 000042A3 6A02                    	push 2
  6030 000042A5 488B4510                	mov rax, qword [rbp + 8 * 2]
  6031                                  
  6032 000042A9 488B00                                            	mov rax, qword[rax + 8 * 0]
  6033                                  
  6034 000042AC 488B00                                            	mov rax, qword[rax + 8 * 0]
  6035 000042AF 488B00                  	mov rax, qword [rax]
  6036 000042B2 803805                  	cmp byte [rax], T_closure 
  6037 000042B5 0F8514DC0000                    jne L_code_ptr_error
  6038                                  
  6039 000042BB 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6040                                  
  6041 000042BF 53                              push rbx
  6042                                  
  6043 000042C0 FF5009                          call SOB_CLOSURE_CODE(rax)
  6044                                  
  6045 000042C3 50                              	push rax
  6046 000042C4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6047 000042C8 50                      	push rax
  6048 000042C9 6A02                    	push 2
  6049 000042CB 488B0425[C8020000]      	mov rax, qword [free_var_89]
  6050 000042D3 803805                  	cmp byte [rax], T_closure 
  6051 000042D6 0F85F3DB0000                    jne L_code_ptr_error
  6052                                  
  6053 000042DC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6054                                  
  6055 000042E0 53                              push rbx
  6056                                  
  6057 000042E1 FF5009                          call SOB_CLOSURE_CODE(rax)
  6058                                  
  6059 000042E4 50                              	push rax
  6060                                  
  6061 000042E5 6A02                    	push 2
  6062 000042E7 488B0425[68000000]      	mov rax, qword [free_var_13]
  6063                                  	assert_closure(rax)
    42 000042EF 803805              <1>  cmp byte [%1], %2
    43 000042F2 0F8516E40000        <1>  jne L_error_incorrect_type
  6064 000042F8 50                      	push rax 
  6065 000042F9 FF7508                  	push qword [rbp + 8]
  6066 000042FC FF7500                  	push qword [rbp]
  6067 000042FF 4883C308                	add rbx ,8*1
  6068                                  	 .L_fix_stack_label_00e0:
  6069 00004303 488B5518                	mov rdx, qword[rbp+8*3]
  6070 00004307 4883C203                	add rdx, 3
  6071 0000430B 48C1E203                	shl rdx, 3
  6072 0000430F 4889EF                  	mov rdi, rbp
  6073 00004312 4801D7                  	add rdi, rdx
  6074 00004315 4C8B4500                	mov r8, qword[rbp]
  6075 00004319 4889E9                  	mov rcx, rbp
  6076 0000431C 4883E908                	sub rcx, 8
  6077                                  	 .L_loop_fix_stuck_00e0:
  6078 00004320 4839CC                  	cmp rsp, rcx
  6079 00004323 7710                    ja .L_loop_fix_stuck_end_00e0
  6080 00004325 488B19                   	mov rbx, qword[rcx]
  6081 00004328 48891F                  	 mov qword[rdi], rbx
  6082 0000432B 4883EF08                	sub rdi, 8
  6083 0000432F 4883E908                	sub rcx, 8
  6084 00004333 EBEB                    jmp .L_loop_fix_stuck_00e0
  6085                                  	 .L_loop_fix_stuck_end_00e0:
  6086 00004335 4883C708                	add rdi, 8
  6087 00004339 4889FC                  	 mov rsp, rdi
  6088 0000433C 4C89C5                  	mov rbp, r8
  6089 0000433F 5D                      	pop rbp
  6090 00004340 FFE0                    	jmp rax 
  6091                                  
  6092                                          	.L_if_end_0067:
  6093 00004342 C9                      	leave
  6094 00004343 C22000                  	ret 8 * (2 + 2)
  6095                                  .L_lambda_simple_end_00c6:	; new closure is in rax
  6096 00004346 50                      	push rax
  6097 00004347 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6098 0000434B 8F00                    	pop qword [rax]
  6099 0000434D 48B8-                   	mov rax, sob_void
  6099 0000434F [0000000000000000] 
  6100                                  
  6101 00004357 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  6102 0000435C E8B9CB0000              	call malloc
  6103 00004361 50                      	push rax
  6104 00004362 BF10000000              	mov rdi, 8 * 2  ; new rib
  6105 00004367 E8AECB0000              	call malloc
  6106 0000436C 50                      	push rax
  6107 0000436D BF10000000              	mov rdi, 8 * 2	; extended env
  6108 00004372 E8A3CB0000              	call malloc
  6109 00004377 488B7D10                	mov rdi, ENV
  6110 0000437B BE00000000              	mov rsi, 0
  6111 00004380 BA01000000              	mov rdx, 1
  6112                                  .L_lambda_opt_env_loop_001d:	; ext_env = env
  6113 00004385 4883FE01                	cmp rsi, 1
  6114 00004389 7410                    	je .L_lambda_opt_env_end_001d
  6115 0000438B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6116 0000438F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6117 00004393 48FFC6                  	inc rsi
  6118 00004396 48FFC2                  	inc rdx
  6119 00004399 EBEA                    	jmp .L_lambda_opt_env_loop_001d
  6120                                  .L_lambda_opt_env_end_001d:
  6121 0000439B 5B                      	pop rbx
  6122 0000439C BE00000000              	mov rsi, 0
  6123                                  .L_lambda_opt_params_loop_001d:	; copy params
  6124 000043A1 4883FE02                	cmp rsi, 2
  6125 000043A5 740E                    	je .L_lambda_opt_params_end_001d
  6126 000043A7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6127 000043AC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6128 000043B0 48FFC6                  	inc rsi
  6129 000043B3 EBEC                    	jmp .L_lambda_opt_params_loop_001d
  6130                                  .L_lambda_opt_params_end_001d:
  6131 000043B5 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  6132 000043B8 4889C3                  	mov rbx, rax
  6133 000043BB 58                      	pop rax
  6134 000043BC C60005                  	mov byte [rax], T_closure
  6135 000043BF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6136 000043C3 48C74009[D0430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001d
  6137 000043CB E9A3010000              	jmp .L_lambda_opt_end_001d
  6138                                  .L_lambda_opt_code_001d:	; lambda-opt body
  6139 000043D0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6140 000043D6 740D                    	je .L_lambda_opt_arity_check_exact_001d  ;same num_of_args
  6141 000043D8 7F5B                    	jg .L_lambda_opt_arity_check_more_001d  ;greater num_of_args
  6142 000043DA FF742410                	push qword [rsp + 8 * 2]
  6143 000043DE 6A01                    	push 1
  6144 000043E0 E902CB0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  6145                                  .L_lambda_opt_arity_check_exact_001d:
  6146 000043E5 4883EC08                	sub rsp, 8 * 1
  6147 000043E9 4889E7                  	mov rdi, rsp 
  6148                                  	;mov ret
  6149 000043EC 488B4708                	mov rax, qword [rdi + (8 * 1)]
  6150 000043F0 488907                  	mov qword [rdi], rax
  6151 000043F3 4883C708                	add rdi, 8
  6152                                  	;mov env
  6153 000043F7 488B4708                	mov rax, qword [rdi + (8 * 1)]
  6154 000043FB 488907                  	mov qword [rdi], rax
  6155 000043FE 4883C708                	add rdi, 8
  6156                                  	;mov & update COUNT
  6157 00004402 488B4708                	mov rax, qword [rdi +(8 * 1)]
  6158 00004406 4889C1                  	mov rcx, rax
  6159 00004409 48FFC0                  	inc rax
  6160 0000440C 488907                  	mov qword [rdi], rax
  6161 0000440F 4883C708                	add rdi, 8
  6162                                  	;LOOP:move params
  6163                                  .L_lambda_opt_stack_shrink_loop_0055:	
  6164 00004413 4883F900                	cmp rcx, 0
  6165 00004417 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0055
  6166 00004419 488B4708                	mov rax, qword [rdi + 8]
  6167 0000441D 488907                  	mov qword [rdi], rax
  6168 00004420 4883C708                	add rdi, 8
  6169 00004424 48FFC9                  	dec rcx
  6170 00004427 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0055
  6171                                  .L_lambda_opt_stack_shrink_loop_exit_0055:	
  6172 00004429 48C707[01000000]        	mov qword [rdi], sob_nil
  6173 00004430 E995000000              	jmp .L_lambda_opt_stack_adjusted_001d
  6174                                  .L_lambda_opt_arity_check_more_001d:	
  6175 00004435 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  6176 0000443A 488D4EFF                	lea rcx, [rsi - 1]
  6177 0000443E 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  6178 00004443 4989F2                  	mov r10, rsi
  6179 00004446 49B9-                   	mov r9, sob_nil
  6179 00004448 [0100000000000000] 
  6180                                  .L_lambda_opt_stack_shrink_loop_0056:	
  6181 00004450 4883F900                	cmp rcx, 0
  6182 00004454 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0056
  6183 00004456 BF11000000              	mov rdi, 1 + 8 + 8
  6184 0000445B E8BACA0000              	call malloc
  6185 00004460 C60021                  	mov byte [rax], T_pair
  6186 00004463 488B1E                  	mov rbx, qword [rsi]
  6187 00004466 48895801                	mov SOB_PAIR_CAR(rax), rbx
  6188 0000446A 4C894809                	mov SOB_PAIR_CDR(rax), r9
  6189 0000446E 4989C1                  	mov r9, rax
  6190 00004471 4883EE08                	sub rsi, 8 * 1
  6191 00004475 48FFC9                  	dec rcx
  6192 00004478 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0056
  6193                                  .L_lambda_opt_stack_shrink_loop_exit_0056:	
  6194 0000447A 4D890A                  	mov qword [r10], r9
  6195 0000447D 4983EA08                	sub r10, 8 * 1; the new dest!
  6196 00004481 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
  6197 00004486 B901000000              	mov rcx, 1 
  6198                                  .L_lambda_opt_stack_shrink_loop_0057:	
  6199 0000448B 4883F900                	cmp rcx, 0
  6200 0000448F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0057
  6201 00004491 488B06                  	mov rax, qword [rsi]
  6202 00004494 498902                  	mov qword [r10], rax
  6203 00004497 4983EA08                	sub r10, 8 * 1
  6204 0000449B 4883EE08                	sub rsi, 8 * 1
  6205 0000449F 48FFC9                  	dec rcx
  6206 000044A2 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0057
  6207                                  .L_lambda_opt_stack_shrink_loop_exit_0057:	
  6208 000044A4 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
  6209 000044AB 4983EA08                	sub r10, 8 * 1
  6210 000044AF 4883EE08                	sub rsi, 8 * 1
  6211 000044B3 488B06                  	mov rax, qword [rsi] ;env
  6212 000044B6 498902                  	mov qword [r10], rax
  6213 000044B9 4983EA08                	sub r10, 8 * 1
  6214 000044BD 4883EE08                	sub rsi, 8 * 1
  6215 000044C1 488B06                  	mov rax, qword [rsi] ;ret
  6216 000044C4 498902                  	mov qword [r10], rax
  6217 000044C7 4C89D4                  	mov rsp, r10
  6218                                  .L_lambda_opt_stack_adjusted_001d:	
  6219 000044CA C8000000                	enter 0, 0
  6220 000044CE 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6221 000044D2 50                      	push rax
  6222 000044D3 6A01                    	push 1
  6223 000044D5 488B0425[00000000]      	mov rax, qword [free_var_0]
  6224 000044DD 803805                  	cmp byte [rax], T_closure 
  6225 000044E0 0F85E9D90000                    jne L_code_ptr_error
  6226                                  
  6227 000044E6 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6228                                  
  6229 000044EA 53                              push rbx
  6230                                  
  6231 000044EB FF5009                          call SOB_CLOSURE_CODE(rax)
  6232                                  
  6233                                          
  6234 000044EE 483D[02000000]                  	cmp rax, sob_boolean_false
  6235                                  
  6236 000044F4 740C                            	je .L_if_else_0068
  6237 000044F6 48B8-                   	mov rax,L_constants + 1
  6237 000044F8 [0100000000000000] 
  6238                                  
  6239 00004500 EB6D                            	jmp .L_if_end_0068
  6240                                  
  6241                                          	.L_if_else_0068:
  6242 00004502 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  6243 00004506 50                      	push rax
  6244 00004507 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6245 0000450B 50                      	push rax
  6246                                  
  6247 0000450C 6A02                    	push 2
  6248 0000450E 488B4510                	mov rax, qword [rbp + 8 * 2]
  6249                                  
  6250 00004512 488B00                                            	mov rax, qword[rax + 8 * 0]
  6251                                  
  6252 00004515 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6253 00004519 488B00                  	mov rax, qword [rax]
  6254                                  	assert_closure(rax)
    42 0000451C 803805              <1>  cmp byte [%1], %2
    43 0000451F 0F85E9E10000        <1>  jne L_error_incorrect_type
  6255 00004525 50                      	push rax 
  6256 00004526 FF7508                  	push qword [rbp + 8]
  6257 00004529 FF7500                  	push qword [rbp]
  6258 0000452C 4883C308                	add rbx ,8*1
  6259                                  	 .L_fix_stack_label_00e1:
  6260 00004530 488B5518                	mov rdx, qword[rbp+8*3]
  6261 00004534 4883C203                	add rdx, 3
  6262 00004538 48C1E203                	shl rdx, 3
  6263 0000453C 4889EF                  	mov rdi, rbp
  6264 0000453F 4801D7                  	add rdi, rdx
  6265 00004542 4C8B4500                	mov r8, qword[rbp]
  6266 00004546 4889E9                  	mov rcx, rbp
  6267 00004549 4883E908                	sub rcx, 8
  6268                                  	 .L_loop_fix_stuck_00e1:
  6269 0000454D 4839CC                  	cmp rsp, rcx
  6270 00004550 7710                    ja .L_loop_fix_stuck_end_00e1
  6271 00004552 488B19                   	mov rbx, qword[rcx]
  6272 00004555 48891F                  	 mov qword[rdi], rbx
  6273 00004558 4883EF08                	sub rdi, 8
  6274 0000455C 4883E908                	sub rcx, 8
  6275 00004560 EBEB                    jmp .L_loop_fix_stuck_00e1
  6276                                  	 .L_loop_fix_stuck_end_00e1:
  6277 00004562 4883C708                	add rdi, 8
  6278 00004566 4889FC                  	 mov rsp, rdi
  6279 00004569 4C89C5                  	mov rbp, r8
  6280 0000456C 5D                      	pop rbp
  6281 0000456D FFE0                    	jmp rax 
  6282                                  
  6283                                          	.L_if_end_0068:
  6284 0000456F C9                      	leave
  6285 00004570 C22000                  	ret 8 * (2 + 2)
  6286                                  .L_lambda_opt_end_001d:	; new closure is in rax
  6287 00004573 C9                      	leave
  6288 00004574 C22000                  	ret 8 * (2 + 2)
  6289                                  .L_lambda_simple_end_00c4:	; new closure is in rax
  6290 00004577 803805                  	cmp byte [rax], T_closure 
  6291 0000457A 0F854FD90000                    jne L_code_ptr_error
  6292                                  
  6293 00004580 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6294                                  
  6295 00004584 53                              push rbx
  6296                                  
  6297 00004585 FF5009                          call SOB_CLOSURE_CODE(rax)
  6298                                  
  6299 00004588 48890425[D8020000]              	mov qword [free_var_91], rax
  6300 00004590 48B8-                   	mov rax, sob_void
  6300 00004592 [0000000000000000] 
  6301                                  
  6302 0000459A 4889C7                  	mov rdi, rax
  6303 0000459D E889C90000              	call print_sexpr_if_not_void
  6304                                  
  6305 000045A2 48B8-                   	mov rax,L_constants + 23
  6305 000045A4 [1700000000000000] 
  6306 000045AC 50                      	push rax
  6307 000045AD 6A01                    	push 1
  6308 000045AF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6309 000045B4 E861C90000              	call malloc
  6310 000045B9 50                      	push rax
  6311 000045BA BF00000000              	mov rdi, 8 * 0	; new rib
  6312 000045BF E856C90000              	call malloc
  6313 000045C4 50                      	push rax
  6314 000045C5 BF08000000              	mov rdi, 8 * 1	; extended env
  6315 000045CA E84BC90000              	call malloc
  6316 000045CF 488B7D10                	mov rdi, ENV
  6317 000045D3 BE00000000              	mov rsi, 0
  6318 000045D8 BA01000000              	mov rdx, 1
  6319                                  .L_lambda_simple_env_loop_00c7:	; ext_env[i + 1] <-- env[i]
  6320 000045DD 4883FE00                	cmp rsi, 0
  6321 000045E1 7410                    	je .L_lambda_simple_env_end_00c7
  6322 000045E3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6323 000045E7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6324 000045EB 48FFC6                  	inc rsi
  6325 000045EE 48FFC2                  	inc rdx
  6326 000045F1 EBEA                    	jmp .L_lambda_simple_env_loop_00c7
  6327                                  .L_lambda_simple_env_end_00c7:
  6328 000045F3 5B                      	pop rbx
  6329 000045F4 BE00000000              	mov rsi, 0
  6330                                  .L_lambda_simple_params_loop_00c7:	; copy params
  6331 000045F9 4883FE00                	cmp rsi, 0
  6332 000045FD 740E                    	je .L_lambda_simple_params_end_00c7
  6333 000045FF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6334 00004604 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6335 00004608 48FFC6                  	inc rsi
  6336 0000460B EBEC                    	jmp .L_lambda_simple_params_loop_00c7
  6337                                  .L_lambda_simple_params_end_00c7:
  6338 0000460D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6339 00004610 4889C3                  	mov rbx, rax
  6340 00004613 58                      	pop rax
  6341 00004614 C60005                  	mov byte [rax], T_closure
  6342 00004617 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6343 0000461B 48C74009[28460000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c7
  6344 00004623 E9DB020000              	jmp .L_lambda_simple_end_00c7
  6345                                  .L_lambda_simple_code_00c7:	; lambda-simple body
  6346 00004628 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6347 0000462E 740B                    	je .L_lambda_simple_arity_check_ok_00c7
  6348 00004630 FF742410                	push qword [rsp + 8 * 2]
  6349 00004634 6A01                    	push 1
  6350 00004636 E998C80000              	jmp L_error_incorrect_arity_simple
  6351                                  .L_lambda_simple_arity_check_ok_00c7:
  6352 0000463B C8000000                	enter 0, 0
  6353 0000463F BF08000000              	mov rdi, 8
  6354 00004644 E8D1C80000              	call malloc
  6355 00004649 488B5D20                	mov rbx, PARAM(0)
  6356 0000464D 488918                  	mov qword [rax], rbx
  6357 00004650 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6358                                  
  6359 00004654 48B8-                            	mov rax, sob_void
  6359 00004656 [0000000000000000] 
  6360                                  
  6361 0000465E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6362 00004663 E8B2C80000              	call malloc
  6363 00004668 50                      	push rax
  6364 00004669 BF08000000              	mov rdi, 8 * 1	; new rib
  6365 0000466E E8A7C80000              	call malloc
  6366 00004673 50                      	push rax
  6367 00004674 BF10000000              	mov rdi, 8 * 2	; extended env
  6368 00004679 E89CC80000              	call malloc
  6369 0000467E 488B7D10                	mov rdi, ENV
  6370 00004682 BE00000000              	mov rsi, 0
  6371 00004687 BA01000000              	mov rdx, 1
  6372                                  .L_lambda_simple_env_loop_00c8:	; ext_env[i + 1] <-- env[i]
  6373 0000468C 4883FE01                	cmp rsi, 1
  6374 00004690 7410                    	je .L_lambda_simple_env_end_00c8
  6375 00004692 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6376 00004696 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6377 0000469A 48FFC6                  	inc rsi
  6378 0000469D 48FFC2                  	inc rdx
  6379 000046A0 EBEA                    	jmp .L_lambda_simple_env_loop_00c8
  6380                                  .L_lambda_simple_env_end_00c8:
  6381 000046A2 5B                      	pop rbx
  6382 000046A3 BE00000000              	mov rsi, 0
  6383                                  .L_lambda_simple_params_loop_00c8:	; copy params
  6384 000046A8 4883FE01                	cmp rsi, 1
  6385 000046AC 740E                    	je .L_lambda_simple_params_end_00c8
  6386 000046AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6387 000046B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6388 000046B7 48FFC6                  	inc rsi
  6389 000046BA EBEC                    	jmp .L_lambda_simple_params_loop_00c8
  6390                                  .L_lambda_simple_params_end_00c8:
  6391 000046BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6392 000046BF 4889C3                  	mov rbx, rax
  6393 000046C2 58                      	pop rax
  6394 000046C3 C60005                  	mov byte [rax], T_closure
  6395 000046C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6396 000046CA 48C74009[D7460000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c8
  6397 000046D2 E911010000              	jmp .L_lambda_simple_end_00c8
  6398                                  .L_lambda_simple_code_00c8:	; lambda-simple body
  6399 000046D7 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6400 000046DD 740B                    	je .L_lambda_simple_arity_check_ok_00c8
  6401 000046DF FF742410                	push qword [rsp + 8 * 2]
  6402 000046E3 6A02                    	push 2
  6403 000046E5 E9E9C70000              	jmp L_error_incorrect_arity_simple
  6404                                  .L_lambda_simple_arity_check_ok_00c8:
  6405 000046EA C8000000                	enter 0, 0
  6406 000046EE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6407 000046F2 50                      	push rax
  6408 000046F3 6A01                    	push 1
  6409 000046F5 488B0425[00000000]      	mov rax, qword [free_var_0]
  6410 000046FD 803805                  	cmp byte [rax], T_closure 
  6411 00004700 0F85C9D70000                    jne L_code_ptr_error
  6412                                  
  6413 00004706 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6414                                  
  6415 0000470A 53                              push rbx
  6416                                  
  6417 0000470B FF5009                          call SOB_CLOSURE_CODE(rax)
  6418                                  
  6419                                          
  6420 0000470E 483D[02000000]                  	cmp rax, sob_boolean_false
  6421                                  
  6422 00004714 7409                            	je .L_if_else_0069
  6423 00004716 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6424                                  
  6425 0000471A E9C5000000                      	jmp .L_if_end_0069
  6426                                  
  6427                                          	.L_if_else_0069:
  6428 0000471F 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  6429 00004723 50                      	push rax
  6430 00004724 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6431 00004728 50                      	push rax
  6432 00004729 6A01                    	push 1
  6433 0000472B 488B0425[80000000]      	mov rax, qword [free_var_16]
  6434 00004733 803805                  	cmp byte [rax], T_closure 
  6435 00004736 0F8593D70000                    jne L_code_ptr_error
  6436                                  
  6437 0000473C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6438                                  
  6439 00004740 53                              push rbx
  6440                                  
  6441 00004741 FF5009                          call SOB_CLOSURE_CODE(rax)
  6442                                  
  6443 00004744 50                              	push rax
  6444 00004745 6A02                    	push 2
  6445 00004747 488B0425[68000000]      	mov rax, qword [free_var_13]
  6446 0000474F 803805                  	cmp byte [rax], T_closure 
  6447 00004752 0F8577D70000                    jne L_code_ptr_error
  6448                                  
  6449 00004758 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6450                                  
  6451 0000475C 53                              push rbx
  6452                                  
  6453 0000475D FF5009                          call SOB_CLOSURE_CODE(rax)
  6454                                  
  6455 00004760 50                              	push rax
  6456 00004761 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6457 00004765 50                      	push rax
  6458 00004766 6A01                    	push 1
  6459 00004768 488B0425[88000000]      	mov rax, qword [free_var_17]
  6460 00004770 803805                  	cmp byte [rax], T_closure 
  6461 00004773 0F8556D70000                    jne L_code_ptr_error
  6462                                  
  6463 00004779 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6464                                  
  6465 0000477D 53                              push rbx
  6466                                  
  6467 0000477E FF5009                          call SOB_CLOSURE_CODE(rax)
  6468                                  
  6469 00004781 50                              	push rax
  6470                                  
  6471 00004782 6A02                    	push 2
  6472 00004784 488B4510                	mov rax, qword [rbp + 8 * 2]
  6473                                  
  6474 00004788 488B00                                            	mov rax, qword[rax + 8 * 0]
  6475                                  
  6476 0000478B 488B00                                            	mov rax, qword[rax + 8 * 0]
  6477 0000478E 488B00                  	mov rax, qword [rax]
  6478                                  	assert_closure(rax)
    42 00004791 803805              <1>  cmp byte [%1], %2
    43 00004794 0F8574DF0000        <1>  jne L_error_incorrect_type
  6479 0000479A 50                      	push rax 
  6480 0000479B FF7508                  	push qword [rbp + 8]
  6481 0000479E FF7500                  	push qword [rbp]
  6482 000047A1 4883C308                	add rbx ,8*1
  6483                                  	 .L_fix_stack_label_00e2:
  6484 000047A5 488B5518                	mov rdx, qword[rbp+8*3]
  6485 000047A9 4883C203                	add rdx, 3
  6486 000047AD 48C1E203                	shl rdx, 3
  6487 000047B1 4889EF                  	mov rdi, rbp
  6488 000047B4 4801D7                  	add rdi, rdx
  6489 000047B7 4C8B4500                	mov r8, qword[rbp]
  6490 000047BB 4889E9                  	mov rcx, rbp
  6491 000047BE 4883E908                	sub rcx, 8
  6492                                  	 .L_loop_fix_stuck_00e2:
  6493 000047C2 4839CC                  	cmp rsp, rcx
  6494 000047C5 7710                    ja .L_loop_fix_stuck_end_00e2
  6495 000047C7 488B19                   	mov rbx, qword[rcx]
  6496 000047CA 48891F                  	 mov qword[rdi], rbx
  6497 000047CD 4883EF08                	sub rdi, 8
  6498 000047D1 4883E908                	sub rcx, 8
  6499 000047D5 EBEB                    jmp .L_loop_fix_stuck_00e2
  6500                                  	 .L_loop_fix_stuck_end_00e2:
  6501 000047D7 4883C708                	add rdi, 8
  6502 000047DB 4889FC                  	 mov rsp, rdi
  6503 000047DE 4C89C5                  	mov rbp, r8
  6504 000047E1 5D                      	pop rbp
  6505 000047E2 FFE0                    	jmp rax 
  6506                                  
  6507                                          	.L_if_end_0069:
  6508 000047E4 C9                      	leave
  6509 000047E5 C22000                  	ret 8 * (2 + 2)
  6510                                  .L_lambda_simple_end_00c8:	; new closure is in rax
  6511 000047E8 50                      	push rax
  6512 000047E9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6513 000047ED 8F00                    	pop qword [rax]
  6514 000047EF 48B8-                   	mov rax, sob_void
  6514 000047F1 [0000000000000000] 
  6515                                  
  6516 000047F9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6517 000047FE E817C70000              	call malloc
  6518 00004803 50                      	push rax
  6519 00004804 BF08000000              	mov rdi, 8 * 1	; new rib
  6520 00004809 E80CC70000              	call malloc
  6521 0000480E 50                      	push rax
  6522 0000480F BF10000000              	mov rdi, 8 * 2	; extended env
  6523 00004814 E801C70000              	call malloc
  6524 00004819 488B7D10                	mov rdi, ENV
  6525 0000481D BE00000000              	mov rsi, 0
  6526 00004822 BA01000000              	mov rdx, 1
  6527                                  .L_lambda_simple_env_loop_00c9:	; ext_env[i + 1] <-- env[i]
  6528 00004827 4883FE01                	cmp rsi, 1
  6529 0000482B 7410                    	je .L_lambda_simple_env_end_00c9
  6530 0000482D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6531 00004831 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6532 00004835 48FFC6                  	inc rsi
  6533 00004838 48FFC2                  	inc rdx
  6534 0000483B EBEA                    	jmp .L_lambda_simple_env_loop_00c9
  6535                                  .L_lambda_simple_env_end_00c9:
  6536 0000483D 5B                      	pop rbx
  6537 0000483E BE00000000              	mov rsi, 0
  6538                                  .L_lambda_simple_params_loop_00c9:	; copy params
  6539 00004843 4883FE01                	cmp rsi, 1
  6540 00004847 740E                    	je .L_lambda_simple_params_end_00c9
  6541 00004849 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6542 0000484E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6543 00004852 48FFC6                  	inc rsi
  6544 00004855 EBEC                    	jmp .L_lambda_simple_params_loop_00c9
  6545                                  .L_lambda_simple_params_end_00c9:
  6546 00004857 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6547 0000485A 4889C3                  	mov rbx, rax
  6548 0000485D 58                      	pop rax
  6549 0000485E C60005                  	mov byte [rax], T_closure
  6550 00004861 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6551 00004865 48C74009[72480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c9
  6552 0000486D E98D000000              	jmp .L_lambda_simple_end_00c9
  6553                                  .L_lambda_simple_code_00c9:	; lambda-simple body
  6554 00004872 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6555 00004878 740B                    	je .L_lambda_simple_arity_check_ok_00c9
  6556 0000487A FF742410                	push qword [rsp + 8 * 2]
  6557 0000487E 6A01                    	push 1
  6558 00004880 E94EC60000              	jmp L_error_incorrect_arity_simple
  6559                                  .L_lambda_simple_arity_check_ok_00c9:
  6560 00004885 C8000000                	enter 0, 0
  6561 00004889 48B8-                   	 	mov rax,L_constants + 1
  6561 0000488B [0100000000000000] 
  6562 00004893 50                      	push rax
  6563 00004894 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6564 00004898 50                      	push rax
  6565                                  
  6566 00004899 6A02                    	push 2
  6567 0000489B 488B4510                	mov rax, qword [rbp + 8 * 2]
  6568                                  
  6569 0000489F 488B00                                            	mov rax, qword[rax + 8 * 0]
  6570                                  
  6571 000048A2 488B00                                            	mov rax, qword[rax + 8 * 0]
  6572 000048A5 488B00                  	mov rax, qword [rax]
  6573                                  	assert_closure(rax)
    42 000048A8 803805              <1>  cmp byte [%1], %2
    43 000048AB 0F855DDE0000        <1>  jne L_error_incorrect_type
  6574 000048B1 50                      	push rax 
  6575 000048B2 FF7508                  	push qword [rbp + 8]
  6576 000048B5 FF7500                  	push qword [rbp]
  6577 000048B8 4883C308                	add rbx ,8*1
  6578                                  	 .L_fix_stack_label_00e3:
  6579 000048BC 488B5518                	mov rdx, qword[rbp+8*3]
  6580 000048C0 4883C203                	add rdx, 3
  6581 000048C4 48C1E203                	shl rdx, 3
  6582 000048C8 4889EF                  	mov rdi, rbp
  6583 000048CB 4801D7                  	add rdi, rdx
  6584 000048CE 4C8B4500                	mov r8, qword[rbp]
  6585 000048D2 4889E9                  	mov rcx, rbp
  6586 000048D5 4883E908                	sub rcx, 8
  6587                                  	 .L_loop_fix_stuck_00e3:
  6588 000048D9 4839CC                  	cmp rsp, rcx
  6589 000048DC 7710                    ja .L_loop_fix_stuck_end_00e3
  6590 000048DE 488B19                   	mov rbx, qword[rcx]
  6591 000048E1 48891F                  	 mov qword[rdi], rbx
  6592 000048E4 4883EF08                	sub rdi, 8
  6593 000048E8 4883E908                	sub rcx, 8
  6594 000048EC EBEB                    jmp .L_loop_fix_stuck_00e3
  6595                                  	 .L_loop_fix_stuck_end_00e3:
  6596 000048EE 4883C708                	add rdi, 8
  6597 000048F2 4889FC                  	 mov rsp, rdi
  6598 000048F5 4C89C5                  	mov rbp, r8
  6599 000048F8 5D                      	pop rbp
  6600 000048F9 FFE0                    	jmp rax 
  6601 000048FB C9                      	leave
  6602 000048FC C21800                  	ret 8 * (2 + 1)
  6603                                  .L_lambda_simple_end_00c9:	; new closure is in rax
  6604 000048FF C9                      	leave
  6605 00004900 C21800                  	ret 8 * (2 + 1)
  6606                                  .L_lambda_simple_end_00c7:	; new closure is in rax
  6607 00004903 803805                  	cmp byte [rax], T_closure 
  6608 00004906 0F85C3D50000                    jne L_code_ptr_error
  6609                                  
  6610 0000490C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6611                                  
  6612 00004910 53                              push rbx
  6613                                  
  6614 00004911 FF5009                          call SOB_CLOSURE_CODE(rax)
  6615                                  
  6616 00004914 48890425[E8020000]              	mov qword [free_var_93], rax
  6617 0000491C 48B8-                   	mov rax, sob_void
  6617 0000491E [0000000000000000] 
  6618                                  
  6619 00004926 4889C7                  	mov rdi, rax
  6620 00004929 E8FDC50000              	call print_sexpr_if_not_void
  6621                                  
  6622 0000492E 48B8-                   	mov rax,L_constants + 23
  6622 00004930 [1700000000000000] 
  6623 00004938 50                      	push rax
  6624 00004939 48B8-                   	mov rax,L_constants + 23
  6624 0000493B [1700000000000000] 
  6625 00004943 50                      	push rax
  6626 00004944 6A02                    	push 2
  6627 00004946 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6628 0000494B E8CAC50000              	call malloc
  6629 00004950 50                      	push rax
  6630 00004951 BF00000000              	mov rdi, 8 * 0	; new rib
  6631 00004956 E8BFC50000              	call malloc
  6632 0000495B 50                      	push rax
  6633 0000495C BF08000000              	mov rdi, 8 * 1	; extended env
  6634 00004961 E8B4C50000              	call malloc
  6635 00004966 488B7D10                	mov rdi, ENV
  6636 0000496A BE00000000              	mov rsi, 0
  6637 0000496F BA01000000              	mov rdx, 1
  6638                                  .L_lambda_simple_env_loop_00ca:	; ext_env[i + 1] <-- env[i]
  6639 00004974 4883FE00                	cmp rsi, 0
  6640 00004978 7410                    	je .L_lambda_simple_env_end_00ca
  6641 0000497A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6642 0000497E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6643 00004982 48FFC6                  	inc rsi
  6644 00004985 48FFC2                  	inc rdx
  6645 00004988 EBEA                    	jmp .L_lambda_simple_env_loop_00ca
  6646                                  .L_lambda_simple_env_end_00ca:
  6647 0000498A 5B                      	pop rbx
  6648 0000498B BE00000000              	mov rsi, 0
  6649                                  .L_lambda_simple_params_loop_00ca:	; copy params
  6650 00004990 4883FE00                	cmp rsi, 0
  6651 00004994 740E                    	je .L_lambda_simple_params_end_00ca
  6652 00004996 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6653 0000499B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6654 0000499F 48FFC6                  	inc rsi
  6655 000049A2 EBEC                    	jmp .L_lambda_simple_params_loop_00ca
  6656                                  .L_lambda_simple_params_end_00ca:
  6657 000049A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6658 000049A7 4889C3                  	mov rbx, rax
  6659 000049AA 58                      	pop rax
  6660 000049AB C60005                  	mov byte [rax], T_closure
  6661 000049AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6662 000049B2 48C74009[BF490000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ca
  6663 000049BA E9EB050000              	jmp .L_lambda_simple_end_00ca
  6664                                  .L_lambda_simple_code_00ca:	; lambda-simple body
  6665 000049BF 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6666 000049C5 740B                    	je .L_lambda_simple_arity_check_ok_00ca
  6667 000049C7 FF742410                	push qword [rsp + 8 * 2]
  6668 000049CB 6A02                    	push 2
  6669 000049CD E901C50000              	jmp L_error_incorrect_arity_simple
  6670                                  .L_lambda_simple_arity_check_ok_00ca:
  6671 000049D2 C8000000                	enter 0, 0
  6672 000049D6 BF08000000              	mov rdi, 8
  6673 000049DB E83AC50000              	call malloc
  6674 000049E0 488B5D20                	mov rbx, PARAM(0)
  6675 000049E4 488918                  	mov qword [rax], rbx
  6676 000049E7 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6677                                  
  6678 000049EB 48B8-                            	mov rax, sob_void
  6678 000049ED [0000000000000000] 
  6679                                  
  6680 000049F5 BF08000000              	mov rdi, 8
  6681 000049FA E81BC50000              	call malloc
  6682 000049FF 488B5D28                	mov rbx, PARAM(1)
  6683 00004A03 488918                  	mov qword [rax], rbx
  6684 00004A06 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  6685                                  
  6686 00004A0A 48B8-                            	mov rax, sob_void
  6686 00004A0C [0000000000000000] 
  6687                                  
  6688 00004A14 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6689 00004A19 E8FCC40000              	call malloc
  6690 00004A1E 50                      	push rax
  6691 00004A1F BF10000000              	mov rdi, 8 * 2	; new rib
  6692 00004A24 E8F1C40000              	call malloc
  6693 00004A29 50                      	push rax
  6694 00004A2A BF10000000              	mov rdi, 8 * 2	; extended env
  6695 00004A2F E8E6C40000              	call malloc
  6696 00004A34 488B7D10                	mov rdi, ENV
  6697 00004A38 BE00000000              	mov rsi, 0
  6698 00004A3D BA01000000              	mov rdx, 1
  6699                                  .L_lambda_simple_env_loop_00cb:	; ext_env[i + 1] <-- env[i]
  6700 00004A42 4883FE01                	cmp rsi, 1
  6701 00004A46 7410                    	je .L_lambda_simple_env_end_00cb
  6702 00004A48 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6703 00004A4C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6704 00004A50 48FFC6                  	inc rsi
  6705 00004A53 48FFC2                  	inc rdx
  6706 00004A56 EBEA                    	jmp .L_lambda_simple_env_loop_00cb
  6707                                  .L_lambda_simple_env_end_00cb:
  6708 00004A58 5B                      	pop rbx
  6709 00004A59 BE00000000              	mov rsi, 0
  6710                                  .L_lambda_simple_params_loop_00cb:	; copy params
  6711 00004A5E 4883FE02                	cmp rsi, 2
  6712 00004A62 740E                    	je .L_lambda_simple_params_end_00cb
  6713 00004A64 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6714 00004A69 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6715 00004A6D 48FFC6                  	inc rsi
  6716 00004A70 EBEC                    	jmp .L_lambda_simple_params_loop_00cb
  6717                                  .L_lambda_simple_params_end_00cb:
  6718 00004A72 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6719 00004A75 4889C3                  	mov rbx, rax
  6720 00004A78 58                      	pop rax
  6721 00004A79 C60005                  	mov byte [rax], T_closure
  6722 00004A7C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6723 00004A80 48C74009[8D4A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cb
  6724 00004A88 E917010000              	jmp .L_lambda_simple_end_00cb
  6725                                  .L_lambda_simple_code_00cb:	; lambda-simple body
  6726 00004A8D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6727 00004A93 740B                    	je .L_lambda_simple_arity_check_ok_00cb
  6728 00004A95 FF742410                	push qword [rsp + 8 * 2]
  6729 00004A99 6A02                    	push 2
  6730 00004A9B E933C40000              	jmp L_error_incorrect_arity_simple
  6731                                  .L_lambda_simple_arity_check_ok_00cb:
  6732 00004AA0 C8000000                	enter 0, 0
  6733 00004AA4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6734 00004AA8 50                      	push rax
  6735 00004AA9 6A01                    	push 1
  6736 00004AAB 488B0425[00000000]      	mov rax, qword [free_var_0]
  6737 00004AB3 803805                  	cmp byte [rax], T_closure 
  6738 00004AB6 0F8513D40000                    jne L_code_ptr_error
  6739                                  
  6740 00004ABC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6741                                  
  6742 00004AC0 53                              push rbx
  6743                                  
  6744 00004AC1 FF5009                          call SOB_CLOSURE_CODE(rax)
  6745                                  
  6746                                          
  6747 00004AC4 483D[02000000]                  	cmp rax, sob_boolean_false
  6748                                  
  6749 00004ACA 7409                            	je .L_if_else_006a
  6750 00004ACC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6751                                  
  6752 00004AD0 E9CB000000                      	jmp .L_if_end_006a
  6753                                  
  6754                                          	.L_if_else_006a:
  6755 00004AD5 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  6756 00004AD9 50                      	push rax
  6757 00004ADA 6A01                    	push 1
  6758 00004ADC 488B0425[88000000]      	mov rax, qword [free_var_17]
  6759 00004AE4 803805                  	cmp byte [rax], T_closure 
  6760 00004AE7 0F85E2D30000                    jne L_code_ptr_error
  6761                                  
  6762 00004AED 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6763                                  
  6764 00004AF1 53                              push rbx
  6765                                  
  6766 00004AF2 FF5009                          call SOB_CLOSURE_CODE(rax)
  6767                                  
  6768 00004AF5 50                              	push rax
  6769 00004AF6 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6770 00004AFA 50                      	push rax
  6771 00004AFB 6A01                    	push 1
  6772 00004AFD 488B0425[80000000]      	mov rax, qword [free_var_16]
  6773 00004B05 803805                  	cmp byte [rax], T_closure 
  6774 00004B08 0F85C1D30000                    jne L_code_ptr_error
  6775                                  
  6776 00004B0E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6777                                  
  6778 00004B12 53                              push rbx
  6779                                  
  6780 00004B13 FF5009                          call SOB_CLOSURE_CODE(rax)
  6781                                  
  6782 00004B16 50                              	push rax
  6783 00004B17 6A02                    	push 2
  6784 00004B19 488B4510                	mov rax, qword [rbp + 8 * 2]
  6785                                  
  6786 00004B1D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6787                                  
  6788 00004B20 488B00                                            	mov rax, qword[rax + 8 * 0]
  6789 00004B23 488B00                  	mov rax, qword [rax]
  6790 00004B26 803805                  	cmp byte [rax], T_closure 
  6791 00004B29 0F85A0D30000                    jne L_code_ptr_error
  6792                                  
  6793 00004B2F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6794                                  
  6795 00004B33 53                              push rbx
  6796                                  
  6797 00004B34 FF5009                          call SOB_CLOSURE_CODE(rax)
  6798                                  
  6799 00004B37 50                              	push rax
  6800 00004B38 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6801 00004B3C 50                      	push rax
  6802                                  
  6803 00004B3D 6A02                    	push 2
  6804 00004B3F 488B4510                	mov rax, qword [rbp + 8 * 2]
  6805                                  
  6806 00004B43 488B00                                            	mov rax, qword[rax + 8 * 0]
  6807                                  
  6808 00004B46 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6809 00004B4A 488B00                  	mov rax, qword [rax]
  6810                                  	assert_closure(rax)
    42 00004B4D 803805              <1>  cmp byte [%1], %2
    43 00004B50 0F85B8DB0000        <1>  jne L_error_incorrect_type
  6811 00004B56 50                      	push rax 
  6812 00004B57 FF7508                  	push qword [rbp + 8]
  6813 00004B5A FF7500                  	push qword [rbp]
  6814 00004B5D 4883C308                	add rbx ,8*1
  6815                                  	 .L_fix_stack_label_00e4:
  6816 00004B61 488B5518                	mov rdx, qword[rbp+8*3]
  6817 00004B65 4883C203                	add rdx, 3
  6818 00004B69 48C1E203                	shl rdx, 3
  6819 00004B6D 4889EF                  	mov rdi, rbp
  6820 00004B70 4801D7                  	add rdi, rdx
  6821 00004B73 4C8B4500                	mov r8, qword[rbp]
  6822 00004B77 4889E9                  	mov rcx, rbp
  6823 00004B7A 4883E908                	sub rcx, 8
  6824                                  	 .L_loop_fix_stuck_00e4:
  6825 00004B7E 4839CC                  	cmp rsp, rcx
  6826 00004B81 7710                    ja .L_loop_fix_stuck_end_00e4
  6827 00004B83 488B19                   	mov rbx, qword[rcx]
  6828 00004B86 48891F                  	 mov qword[rdi], rbx
  6829 00004B89 4883EF08                	sub rdi, 8
  6830 00004B8D 4883E908                	sub rcx, 8
  6831 00004B91 EBEB                    jmp .L_loop_fix_stuck_00e4
  6832                                  	 .L_loop_fix_stuck_end_00e4:
  6833 00004B93 4883C708                	add rdi, 8
  6834 00004B97 4889FC                  	 mov rsp, rdi
  6835 00004B9A 4C89C5                  	mov rbp, r8
  6836 00004B9D 5D                      	pop rbp
  6837 00004B9E FFE0                    	jmp rax 
  6838                                  
  6839                                          	.L_if_end_006a:
  6840 00004BA0 C9                      	leave
  6841 00004BA1 C22000                  	ret 8 * (2 + 2)
  6842                                  .L_lambda_simple_end_00cb:	; new closure is in rax
  6843 00004BA4 50                      	push rax
  6844 00004BA5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6845 00004BA9 8F00                    	pop qword [rax]
  6846 00004BAB 48B8-                   	mov rax, sob_void
  6846 00004BAD [0000000000000000] 
  6847                                  
  6848 00004BB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6849 00004BBA E85BC30000              	call malloc
  6850 00004BBF 50                      	push rax
  6851 00004BC0 BF10000000              	mov rdi, 8 * 2	; new rib
  6852 00004BC5 E850C30000              	call malloc
  6853 00004BCA 50                      	push rax
  6854 00004BCB BF10000000              	mov rdi, 8 * 2	; extended env
  6855 00004BD0 E845C30000              	call malloc
  6856 00004BD5 488B7D10                	mov rdi, ENV
  6857 00004BD9 BE00000000              	mov rsi, 0
  6858 00004BDE BA01000000              	mov rdx, 1
  6859                                  .L_lambda_simple_env_loop_00cc:	; ext_env[i + 1] <-- env[i]
  6860 00004BE3 4883FE01                	cmp rsi, 1
  6861 00004BE7 7410                    	je .L_lambda_simple_env_end_00cc
  6862 00004BE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6863 00004BED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6864 00004BF1 48FFC6                  	inc rsi
  6865 00004BF4 48FFC2                  	inc rdx
  6866 00004BF7 EBEA                    	jmp .L_lambda_simple_env_loop_00cc
  6867                                  .L_lambda_simple_env_end_00cc:
  6868 00004BF9 5B                      	pop rbx
  6869 00004BFA BE00000000              	mov rsi, 0
  6870                                  .L_lambda_simple_params_loop_00cc:	; copy params
  6871 00004BFF 4883FE02                	cmp rsi, 2
  6872 00004C03 740E                    	je .L_lambda_simple_params_end_00cc
  6873 00004C05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6874 00004C0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6875 00004C0E 48FFC6                  	inc rsi
  6876 00004C11 EBEC                    	jmp .L_lambda_simple_params_loop_00cc
  6877                                  .L_lambda_simple_params_end_00cc:
  6878 00004C13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6879 00004C16 4889C3                  	mov rbx, rax
  6880 00004C19 58                      	pop rax
  6881 00004C1A C60005                  	mov byte [rax], T_closure
  6882 00004C1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6883 00004C21 48C74009[2E4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cc
  6884 00004C29 E912010000              	jmp .L_lambda_simple_end_00cc
  6885                                  .L_lambda_simple_code_00cc:	; lambda-simple body
  6886 00004C2E 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6887 00004C34 740B                    	je .L_lambda_simple_arity_check_ok_00cc
  6888 00004C36 FF742410                	push qword [rsp + 8 * 2]
  6889 00004C3A 6A02                    	push 2
  6890 00004C3C E992C20000              	jmp L_error_incorrect_arity_simple
  6891                                  .L_lambda_simple_arity_check_ok_00cc:
  6892 00004C41 C8000000                	enter 0, 0
  6893 00004C45 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6894 00004C49 50                      	push rax
  6895 00004C4A 6A01                    	push 1
  6896 00004C4C 488B0425[00000000]      	mov rax, qword [free_var_0]
  6897 00004C54 803805                  	cmp byte [rax], T_closure 
  6898 00004C57 0F8572D20000                    jne L_code_ptr_error
  6899                                  
  6900 00004C5D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6901                                  
  6902 00004C61 53                              push rbx
  6903                                  
  6904 00004C62 FF5009                          call SOB_CLOSURE_CODE(rax)
  6905                                  
  6906                                          
  6907 00004C65 483D[02000000]                  	cmp rax, sob_boolean_false
  6908                                  
  6909 00004C6B 7409                            	je .L_if_else_006b
  6910 00004C6D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6911                                  
  6912 00004C71 E9C6000000                      	jmp .L_if_end_006b
  6913                                  
  6914                                          	.L_if_else_006b:
  6915 00004C76 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  6916 00004C7A 50                      	push rax
  6917 00004C7B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6918 00004C7F 50                      	push rax
  6919 00004C80 6A01                    	push 1
  6920 00004C82 488B0425[88000000]      	mov rax, qword [free_var_17]
  6921 00004C8A 803805                  	cmp byte [rax], T_closure 
  6922 00004C8D 0F853CD20000                    jne L_code_ptr_error
  6923                                  
  6924 00004C93 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6925                                  
  6926 00004C97 53                              push rbx
  6927                                  
  6928 00004C98 FF5009                          call SOB_CLOSURE_CODE(rax)
  6929                                  
  6930 00004C9B 50                              	push rax
  6931 00004C9C 6A02                    	push 2
  6932 00004C9E 488B4510                	mov rax, qword [rbp + 8 * 2]
  6933                                  
  6934 00004CA2 488B00                                            	mov rax, qword[rax + 8 * 0]
  6935                                  
  6936 00004CA5 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6937 00004CA9 488B00                  	mov rax, qword [rax]
  6938 00004CAC 803805                  	cmp byte [rax], T_closure 
  6939 00004CAF 0F851AD20000                    jne L_code_ptr_error
  6940                                  
  6941 00004CB5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6942                                  
  6943 00004CB9 53                              push rbx
  6944                                  
  6945 00004CBA FF5009                          call SOB_CLOSURE_CODE(rax)
  6946                                  
  6947 00004CBD 50                              	push rax
  6948 00004CBE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6949 00004CC2 50                      	push rax
  6950 00004CC3 6A01                    	push 1
  6951 00004CC5 488B0425[80000000]      	mov rax, qword [free_var_16]
  6952 00004CCD 803805                  	cmp byte [rax], T_closure 
  6953 00004CD0 0F85F9D10000                    jne L_code_ptr_error
  6954                                  
  6955 00004CD6 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  6956                                  
  6957 00004CDA 53                              push rbx
  6958                                  
  6959 00004CDB FF5009                          call SOB_CLOSURE_CODE(rax)
  6960                                  
  6961 00004CDE 50                              	push rax
  6962                                  
  6963 00004CDF 6A02                    	push 2
  6964 00004CE1 488B0425[68000000]      	mov rax, qword [free_var_13]
  6965                                  	assert_closure(rax)
    42 00004CE9 803805              <1>  cmp byte [%1], %2
    43 00004CEC 0F851CDA0000        <1>  jne L_error_incorrect_type
  6966 00004CF2 50                      	push rax 
  6967 00004CF3 FF7508                  	push qword [rbp + 8]
  6968 00004CF6 FF7500                  	push qword [rbp]
  6969 00004CF9 4883C308                	add rbx ,8*1
  6970                                  	 .L_fix_stack_label_00e5:
  6971 00004CFD 488B5518                	mov rdx, qword[rbp+8*3]
  6972 00004D01 4883C203                	add rdx, 3
  6973 00004D05 48C1E203                	shl rdx, 3
  6974 00004D09 4889EF                  	mov rdi, rbp
  6975 00004D0C 4801D7                  	add rdi, rdx
  6976 00004D0F 4C8B4500                	mov r8, qword[rbp]
  6977 00004D13 4889E9                  	mov rcx, rbp
  6978 00004D16 4883E908                	sub rcx, 8
  6979                                  	 .L_loop_fix_stuck_00e5:
  6980 00004D1A 4839CC                  	cmp rsp, rcx
  6981 00004D1D 7710                    ja .L_loop_fix_stuck_end_00e5
  6982 00004D1F 488B19                   	mov rbx, qword[rcx]
  6983 00004D22 48891F                  	 mov qword[rdi], rbx
  6984 00004D25 4883EF08                	sub rdi, 8
  6985 00004D29 4883E908                	sub rcx, 8
  6986 00004D2D EBEB                    jmp .L_loop_fix_stuck_00e5
  6987                                  	 .L_loop_fix_stuck_end_00e5:
  6988 00004D2F 4883C708                	add rdi, 8
  6989 00004D33 4889FC                  	 mov rsp, rdi
  6990 00004D36 4C89C5                  	mov rbp, r8
  6991 00004D39 5D                      	pop rbp
  6992 00004D3A FFE0                    	jmp rax 
  6993                                  
  6994                                          	.L_if_end_006b:
  6995 00004D3C C9                      	leave
  6996 00004D3D C22000                  	ret 8 * (2 + 2)
  6997                                  .L_lambda_simple_end_00cc:	; new closure is in rax
  6998 00004D40 50                      	push rax
  6999 00004D41 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7000 00004D45 8F00                    	pop qword [rax]
  7001 00004D47 48B8-                   	mov rax, sob_void
  7001 00004D49 [0000000000000000] 
  7002                                  
  7003 00004D51 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  7004 00004D56 E8BFC10000              	call malloc
  7005 00004D5B 50                      	push rax
  7006 00004D5C BF10000000              	mov rdi, 8 * 2  ; new rib
  7007 00004D61 E8B4C10000              	call malloc
  7008 00004D66 50                      	push rax
  7009 00004D67 BF10000000              	mov rdi, 8 * 2	; extended env
  7010 00004D6C E8A9C10000              	call malloc
  7011 00004D71 488B7D10                	mov rdi, ENV
  7012 00004D75 BE00000000              	mov rsi, 0
  7013 00004D7A BA01000000              	mov rdx, 1
  7014                                  .L_lambda_opt_env_loop_001e:	; ext_env = env
  7015 00004D7F 4883FE01                	cmp rsi, 1
  7016 00004D83 7410                    	je .L_lambda_opt_env_end_001e
  7017 00004D85 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7018 00004D89 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7019 00004D8D 48FFC6                  	inc rsi
  7020 00004D90 48FFC2                  	inc rdx
  7021 00004D93 EBEA                    	jmp .L_lambda_opt_env_loop_001e
  7022                                  .L_lambda_opt_env_end_001e:
  7023 00004D95 5B                      	pop rbx
  7024 00004D96 BE00000000              	mov rsi, 0
  7025                                  .L_lambda_opt_params_loop_001e:	; copy params
  7026 00004D9B 4883FE02                	cmp rsi, 2
  7027 00004D9F 740E                    	je .L_lambda_opt_params_end_001e
  7028 00004DA1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7029 00004DA6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7030 00004DAA 48FFC6                  	inc rsi
  7031 00004DAD EBEC                    	jmp .L_lambda_opt_params_loop_001e
  7032                                  .L_lambda_opt_params_end_001e:
  7033 00004DAF 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  7034 00004DB2 4889C3                  	mov rbx, rax
  7035 00004DB5 58                      	pop rax
  7036 00004DB6 C60005                  	mov byte [rax], T_closure
  7037 00004DB9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7038 00004DBD 48C74009[CA4D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001e
  7039 00004DC5 E9DC010000              	jmp .L_lambda_opt_end_001e
  7040                                  .L_lambda_opt_code_001e:	; lambda-opt body
  7041 00004DCA 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7042 00004DD0 740D                    	je .L_lambda_opt_arity_check_exact_001e  ;same num_of_args
  7043 00004DD2 7F5B                    	jg .L_lambda_opt_arity_check_more_001e  ;greater num_of_args
  7044 00004DD4 FF742410                	push qword [rsp + 8 * 2]
  7045 00004DD8 6A00                    	push 0
  7046 00004DDA E908C10000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  7047                                  .L_lambda_opt_arity_check_exact_001e:
  7048 00004DDF 4883EC08                	sub rsp, 8 * 1
  7049 00004DE3 4889E7                  	mov rdi, rsp 
  7050                                  	;mov ret
  7051 00004DE6 488B4708                	mov rax, qword [rdi + (8 * 1)]
  7052 00004DEA 488907                  	mov qword [rdi], rax
  7053 00004DED 4883C708                	add rdi, 8
  7054                                  	;mov env
  7055 00004DF1 488B4708                	mov rax, qword [rdi + (8 * 1)]
  7056 00004DF5 488907                  	mov qword [rdi], rax
  7057 00004DF8 4883C708                	add rdi, 8
  7058                                  	;mov & update COUNT
  7059 00004DFC 488B4708                	mov rax, qword [rdi +(8 * 1)]
  7060 00004E00 4889C1                  	mov rcx, rax
  7061 00004E03 48FFC0                  	inc rax
  7062 00004E06 488907                  	mov qword [rdi], rax
  7063 00004E09 4883C708                	add rdi, 8
  7064                                  	;LOOP:move params
  7065                                  .L_lambda_opt_stack_shrink_loop_0058:	
  7066 00004E0D 4883F900                	cmp rcx, 0
  7067 00004E11 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0058
  7068 00004E13 488B4708                	mov rax, qword [rdi + 8]
  7069 00004E17 488907                  	mov qword [rdi], rax
  7070 00004E1A 4883C708                	add rdi, 8
  7071 00004E1E 48FFC9                  	dec rcx
  7072 00004E21 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0058
  7073                                  .L_lambda_opt_stack_shrink_loop_exit_0058:	
  7074 00004E23 48C707[01000000]        	mov qword [rdi], sob_nil
  7075 00004E2A E994000000              	jmp .L_lambda_opt_stack_adjusted_001e
  7076                                  .L_lambda_opt_arity_check_more_001e:	
  7077 00004E2F 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  7078 00004E34 488D0E                  	lea rcx, [rsi - 0]
  7079 00004E37 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  7080 00004E3C 4989F2                  	mov r10, rsi
  7081 00004E3F 49B9-                   	mov r9, sob_nil
  7081 00004E41 [0100000000000000] 
  7082                                  .L_lambda_opt_stack_shrink_loop_0059:	
  7083 00004E49 4883F900                	cmp rcx, 0
  7084 00004E4D 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0059
  7085 00004E4F BF11000000              	mov rdi, 1 + 8 + 8
  7086 00004E54 E8C1C00000              	call malloc
  7087 00004E59 C60021                  	mov byte [rax], T_pair
  7088 00004E5C 488B1E                  	mov rbx, qword [rsi]
  7089 00004E5F 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7090 00004E63 4C894809                	mov SOB_PAIR_CDR(rax), r9
  7091 00004E67 4989C1                  	mov r9, rax
  7092 00004E6A 4883EE08                	sub rsi, 8 * 1
  7093 00004E6E 48FFC9                  	dec rcx
  7094 00004E71 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0059
  7095                                  .L_lambda_opt_stack_shrink_loop_exit_0059:	
  7096 00004E73 4D890A                  	mov qword [r10], r9
  7097 00004E76 4983EA08                	sub r10, 8 * 1; the new dest!
  7098 00004E7A 488D742410              	lea rsi, [rsp + (8 * (0 + 2))];the new src
  7099 00004E7F B900000000              	mov rcx, 0 
  7100                                  .L_lambda_opt_stack_shrink_loop_005a:	
  7101 00004E84 4883F900                	cmp rcx, 0
  7102 00004E88 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_005a
  7103 00004E8A 488B06                  	mov rax, qword [rsi]
  7104 00004E8D 498902                  	mov qword [r10], rax
  7105 00004E90 4983EA08                	sub r10, 8 * 1
  7106 00004E94 4883EE08                	sub rsi, 8 * 1
  7107 00004E98 48FFC9                  	dec rcx
  7108 00004E9B EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_005a
  7109                                  .L_lambda_opt_stack_shrink_loop_exit_005a:	
  7110 00004E9D 49C70201000000          	mov qword [r10], 1 + 0; 1=opt
  7111 00004EA4 4983EA08                	sub r10, 8 * 1
  7112 00004EA8 4883EE08                	sub rsi, 8 * 1
  7113 00004EAC 488B06                  	mov rax, qword [rsi] ;env
  7114 00004EAF 498902                  	mov qword [r10], rax
  7115 00004EB2 4983EA08                	sub r10, 8 * 1
  7116 00004EB6 4883EE08                	sub rsi, 8 * 1
  7117 00004EBA 488B06                  	mov rax, qword [rsi] ;ret
  7118 00004EBD 498902                  	mov qword [r10], rax
  7119 00004EC0 4C89D4                  	mov rsp, r10
  7120                                  .L_lambda_opt_stack_adjusted_001e:	
  7121 00004EC3 C8000000                	enter 0, 0
  7122 00004EC7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7123 00004ECB 50                      	push rax
  7124 00004ECC 6A01                    	push 1
  7125 00004ECE 488B0425[00000000]      	mov rax, qword [free_var_0]
  7126 00004ED6 803805                  	cmp byte [rax], T_closure 
  7127 00004ED9 0F85F0CF0000                    jne L_code_ptr_error
  7128                                  
  7129 00004EDF 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7130                                  
  7131 00004EE3 53                              push rbx
  7132                                  
  7133 00004EE4 FF5009                          call SOB_CLOSURE_CODE(rax)
  7134                                  
  7135                                          
  7136 00004EE7 483D[02000000]                  	cmp rax, sob_boolean_false
  7137                                  
  7138 00004EED 740F                            	je .L_if_else_006c
  7139 00004EEF 48B8-                   	mov rax,L_constants + 1
  7139 00004EF1 [0100000000000000] 
  7140                                  
  7141 00004EF9 E9A4000000                      	jmp .L_if_end_006c
  7142                                  
  7143                                          	.L_if_else_006c:
  7144 00004EFE 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  7145 00004F02 50                      	push rax
  7146 00004F03 6A01                    	push 1
  7147 00004F05 488B0425[88000000]      	mov rax, qword [free_var_17]
  7148 00004F0D 803805                  	cmp byte [rax], T_closure 
  7149 00004F10 0F85B9CF0000                    jne L_code_ptr_error
  7150                                  
  7151 00004F16 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7152                                  
  7153 00004F1A 53                              push rbx
  7154                                  
  7155 00004F1B FF5009                          call SOB_CLOSURE_CODE(rax)
  7156                                  
  7157 00004F1E 50                              	push rax
  7158 00004F1F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7159 00004F23 50                      	push rax
  7160 00004F24 6A01                    	push 1
  7161 00004F26 488B0425[80000000]      	mov rax, qword [free_var_16]
  7162 00004F2E 803805                  	cmp byte [rax], T_closure 
  7163 00004F31 0F8598CF0000                    jne L_code_ptr_error
  7164                                  
  7165 00004F37 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7166                                  
  7167 00004F3B 53                              push rbx
  7168                                  
  7169 00004F3C FF5009                          call SOB_CLOSURE_CODE(rax)
  7170                                  
  7171 00004F3F 50                              	push rax
  7172                                  
  7173 00004F40 6A02                    	push 2
  7174 00004F42 488B4510                	mov rax, qword [rbp + 8 * 2]
  7175                                  
  7176 00004F46 488B00                                            	mov rax, qword[rax + 8 * 0]
  7177                                  
  7178 00004F49 488B00                                            	mov rax, qword[rax + 8 * 0]
  7179 00004F4C 488B00                  	mov rax, qword [rax]
  7180                                  	assert_closure(rax)
    42 00004F4F 803805              <1>  cmp byte [%1], %2
    43 00004F52 0F85B6D70000        <1>  jne L_error_incorrect_type
  7181 00004F58 50                      	push rax 
  7182 00004F59 FF7508                  	push qword [rbp + 8]
  7183 00004F5C FF7500                  	push qword [rbp]
  7184 00004F5F 4883C308                	add rbx ,8*1
  7185                                  	 .L_fix_stack_label_00e6:
  7186 00004F63 488B5518                	mov rdx, qword[rbp+8*3]
  7187 00004F67 4883C203                	add rdx, 3
  7188 00004F6B 48C1E203                	shl rdx, 3
  7189 00004F6F 4889EF                  	mov rdi, rbp
  7190 00004F72 4801D7                  	add rdi, rdx
  7191 00004F75 4C8B4500                	mov r8, qword[rbp]
  7192 00004F79 4889E9                  	mov rcx, rbp
  7193 00004F7C 4883E908                	sub rcx, 8
  7194                                  	 .L_loop_fix_stuck_00e6:
  7195 00004F80 4839CC                  	cmp rsp, rcx
  7196 00004F83 7710                    ja .L_loop_fix_stuck_end_00e6
  7197 00004F85 488B19                   	mov rbx, qword[rcx]
  7198 00004F88 48891F                  	 mov qword[rdi], rbx
  7199 00004F8B 4883EF08                	sub rdi, 8
  7200 00004F8F 4883E908                	sub rcx, 8
  7201 00004F93 EBEB                    jmp .L_loop_fix_stuck_00e6
  7202                                  	 .L_loop_fix_stuck_end_00e6:
  7203 00004F95 4883C708                	add rdi, 8
  7204 00004F99 4889FC                  	 mov rsp, rdi
  7205 00004F9C 4C89C5                  	mov rbp, r8
  7206 00004F9F 5D                      	pop rbp
  7207 00004FA0 FFE0                    	jmp rax 
  7208                                  
  7209                                          	.L_if_end_006c:
  7210 00004FA2 C9                      	leave
  7211 00004FA3 C21800                  	ret 8 * (2 + 1)
  7212                                  .L_lambda_opt_end_001e:	; new closure is in rax
  7213 00004FA6 C9                      	leave
  7214 00004FA7 C22000                  	ret 8 * (2 + 2)
  7215                                  .L_lambda_simple_end_00ca:	; new closure is in rax
  7216 00004FAA 803805                  	cmp byte [rax], T_closure 
  7217 00004FAD 0F851CCF0000                    jne L_code_ptr_error
  7218                                  
  7219 00004FB3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7220                                  
  7221 00004FB7 53                              push rbx
  7222                                  
  7223 00004FB8 FF5009                          call SOB_CLOSURE_CODE(rax)
  7224                                  
  7225 00004FBB 48890425[F0020000]              	mov qword [free_var_94], rax
  7226 00004FC3 48B8-                   	mov rax, sob_void
  7226 00004FC5 [0000000000000000] 
  7227                                  
  7228 00004FCD 4889C7                  	mov rdi, rax
  7229 00004FD0 E856BF0000              	call print_sexpr_if_not_void
  7230                                  
  7231 00004FD5 48B8-                   	mov rax,L_constants + 23
  7231 00004FD7 [1700000000000000] 
  7232 00004FDF 50                      	push rax
  7233 00004FE0 6A01                    	push 1
  7234 00004FE2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7235 00004FE7 E82EBF0000              	call malloc
  7236 00004FEC 50                      	push rax
  7237 00004FED BF00000000              	mov rdi, 8 * 0	; new rib
  7238 00004FF2 E823BF0000              	call malloc
  7239 00004FF7 50                      	push rax
  7240 00004FF8 BF08000000              	mov rdi, 8 * 1	; extended env
  7241 00004FFD E818BF0000              	call malloc
  7242 00005002 488B7D10                	mov rdi, ENV
  7243 00005006 BE00000000              	mov rsi, 0
  7244 0000500B BA01000000              	mov rdx, 1
  7245                                  .L_lambda_simple_env_loop_00cd:	; ext_env[i + 1] <-- env[i]
  7246 00005010 4883FE00                	cmp rsi, 0
  7247 00005014 7410                    	je .L_lambda_simple_env_end_00cd
  7248 00005016 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7249 0000501A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7250 0000501E 48FFC6                  	inc rsi
  7251 00005021 48FFC2                  	inc rdx
  7252 00005024 EBEA                    	jmp .L_lambda_simple_env_loop_00cd
  7253                                  .L_lambda_simple_env_end_00cd:
  7254 00005026 5B                      	pop rbx
  7255 00005027 BE00000000              	mov rsi, 0
  7256                                  .L_lambda_simple_params_loop_00cd:	; copy params
  7257 0000502C 4883FE00                	cmp rsi, 0
  7258 00005030 740E                    	je .L_lambda_simple_params_end_00cd
  7259 00005032 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7260 00005037 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7261 0000503B 48FFC6                  	inc rsi
  7262 0000503E EBEC                    	jmp .L_lambda_simple_params_loop_00cd
  7263                                  .L_lambda_simple_params_end_00cd:
  7264 00005040 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7265 00005043 4889C3                  	mov rbx, rax
  7266 00005046 58                      	pop rax
  7267 00005047 C60005                  	mov byte [rax], T_closure
  7268 0000504A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7269 0000504E 48C74009[5B500000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cd
  7270 00005056 E9E6030000              	jmp .L_lambda_simple_end_00cd
  7271                                  .L_lambda_simple_code_00cd:	; lambda-simple body
  7272 0000505B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7273 00005061 740B                    	je .L_lambda_simple_arity_check_ok_00cd
  7274 00005063 FF742410                	push qword [rsp + 8 * 2]
  7275 00005067 6A01                    	push 1
  7276 00005069 E965BE0000              	jmp L_error_incorrect_arity_simple
  7277                                  .L_lambda_simple_arity_check_ok_00cd:
  7278 0000506E C8000000                	enter 0, 0
  7279 00005072 BF08000000              	mov rdi, 8
  7280 00005077 E89EBE0000              	call malloc
  7281 0000507C 488B5D20                	mov rbx, PARAM(0)
  7282 00005080 488918                  	mov qword [rax], rbx
  7283 00005083 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  7284                                  
  7285 00005087 48B8-                            	mov rax, sob_void
  7285 00005089 [0000000000000000] 
  7286                                  
  7287 00005091 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7288 00005096 E87FBE0000              	call malloc
  7289 0000509B 50                      	push rax
  7290 0000509C BF08000000              	mov rdi, 8 * 1	; new rib
  7291 000050A1 E874BE0000              	call malloc
  7292 000050A6 50                      	push rax
  7293 000050A7 BF10000000              	mov rdi, 8 * 2	; extended env
  7294 000050AC E869BE0000              	call malloc
  7295 000050B1 488B7D10                	mov rdi, ENV
  7296 000050B5 BE00000000              	mov rsi, 0
  7297 000050BA BA01000000              	mov rdx, 1
  7298                                  .L_lambda_simple_env_loop_00ce:	; ext_env[i + 1] <-- env[i]
  7299 000050BF 4883FE01                	cmp rsi, 1
  7300 000050C3 7410                    	je .L_lambda_simple_env_end_00ce
  7301 000050C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7302 000050C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7303 000050CD 48FFC6                  	inc rsi
  7304 000050D0 48FFC2                  	inc rdx
  7305 000050D3 EBEA                    	jmp .L_lambda_simple_env_loop_00ce
  7306                                  .L_lambda_simple_env_end_00ce:
  7307 000050D5 5B                      	pop rbx
  7308 000050D6 BE00000000              	mov rsi, 0
  7309                                  .L_lambda_simple_params_loop_00ce:	; copy params
  7310 000050DB 4883FE01                	cmp rsi, 1
  7311 000050DF 740E                    	je .L_lambda_simple_params_end_00ce
  7312 000050E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7313 000050E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7314 000050EA 48FFC6                  	inc rsi
  7315 000050ED EBEC                    	jmp .L_lambda_simple_params_loop_00ce
  7316                                  .L_lambda_simple_params_end_00ce:
  7317 000050EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7318 000050F2 4889C3                  	mov rbx, rax
  7319 000050F5 58                      	pop rax
  7320 000050F6 C60005                  	mov byte [rax], T_closure
  7321 000050F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7322 000050FD 48C74009[0A510000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ce
  7323 00005105 E936010000              	jmp .L_lambda_simple_end_00ce
  7324                                  .L_lambda_simple_code_00ce:	; lambda-simple body
  7325 0000510A 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7326 00005110 740B                    	je .L_lambda_simple_arity_check_ok_00ce
  7327 00005112 FF742410                	push qword [rsp + 8 * 2]
  7328 00005116 6A03                    	push 3
  7329 00005118 E9B6BD0000              	jmp L_error_incorrect_arity_simple
  7330                                  .L_lambda_simple_arity_check_ok_00ce:
  7331 0000511D C8000000                	enter 0, 0
  7332 00005121 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7333 00005125 50                      	push rax
  7334 00005126 488B0425[00000000]      	mov rax, qword [free_var_0]
  7335 0000512E 50                      	push rax
  7336 0000512F 6A02                    	push 2
  7337 00005131 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7338 00005139 803805                  	cmp byte [rax], T_closure 
  7339 0000513C 0F858DCD0000                    jne L_code_ptr_error
  7340                                  
  7341 00005142 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7342                                  
  7343 00005146 53                              push rbx
  7344                                  
  7345 00005147 FF5009                          call SOB_CLOSURE_CODE(rax)
  7346                                  
  7347                                          
  7348 0000514A 483D[02000000]                  	cmp rax, sob_boolean_false
  7349                                  
  7350 00005150 7409                            	je .L_if_else_006d
  7351 00005152 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7352                                  
  7353 00005156 E9E1000000                      	jmp .L_if_end_006d
  7354                                  
  7355                                          	.L_if_else_006d:
  7356 0000515B 488B4530                	 	mov rax ,qword[rbp + 8 * (4 + 2)]
  7357 0000515F 50                      	push rax
  7358 00005160 488B0425[88000000]      	mov rax, qword [free_var_17]
  7359 00005168 50                      	push rax
  7360 00005169 6A02                    	push 2
  7361 0000516B 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7362 00005173 803805                  	cmp byte [rax], T_closure 
  7363 00005176 0F8553CD0000                    jne L_code_ptr_error
  7364                                  
  7365 0000517C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7366                                  
  7367 00005180 53                              push rbx
  7368                                  
  7369 00005181 FF5009                          call SOB_CLOSURE_CODE(rax)
  7370                                  
  7371 00005184 50                              	push rax
  7372 00005185 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7373 00005189 50                      	push rax
  7374 0000518A 488B0425[80000000]      	mov rax, qword [free_var_16]
  7375 00005192 50                      	push rax
  7376 00005193 6A02                    	push 2
  7377 00005195 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7378 0000519D 803805                  	cmp byte [rax], T_closure 
  7379 000051A0 0F8529CD0000                    jne L_code_ptr_error
  7380                                  
  7381 000051A6 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7382                                  
  7383 000051AA 53                              push rbx
  7384                                  
  7385 000051AB FF5009                          call SOB_CLOSURE_CODE(rax)
  7386                                  
  7387 000051AE 50                              	push rax
  7388 000051AF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7389 000051B3 50                      	push rax
  7390 000051B4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7391 000051B8 50                      	push rax
  7392 000051B9 6A03                    	push 3
  7393 000051BB 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7394 000051C3 803805                  	cmp byte [rax], T_closure 
  7395 000051C6 0F8503CD0000                    jne L_code_ptr_error
  7396                                  
  7397 000051CC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7398                                  
  7399 000051D0 53                              push rbx
  7400                                  
  7401 000051D1 FF5009                          call SOB_CLOSURE_CODE(rax)
  7402                                  
  7403 000051D4 50                              	push rax
  7404 000051D5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7405 000051D9 50                      	push rax
  7406                                  
  7407 000051DA 6A03                    	push 3
  7408 000051DC 488B4510                	mov rax, qword [rbp + 8 * 2]
  7409                                  
  7410 000051E0 488B00                                            	mov rax, qword[rax + 8 * 0]
  7411                                  
  7412 000051E3 488B00                                            	mov rax, qword[rax + 8 * 0]
  7413 000051E6 488B00                  	mov rax, qword [rax]
  7414                                  	assert_closure(rax)
    42 000051E9 803805              <1>  cmp byte [%1], %2
    43 000051EC 0F851CD50000        <1>  jne L_error_incorrect_type
  7415 000051F2 50                      	push rax 
  7416 000051F3 FF7508                  	push qword [rbp + 8]
  7417 000051F6 FF7500                  	push qword [rbp]
  7418 000051F9 4883C308                	add rbx ,8*1
  7419                                  	 .L_fix_stack_label_00e7:
  7420 000051FD 488B5518                	mov rdx, qword[rbp+8*3]
  7421 00005201 4883C203                	add rdx, 3
  7422 00005205 48C1E203                	shl rdx, 3
  7423 00005209 4889EF                  	mov rdi, rbp
  7424 0000520C 4801D7                  	add rdi, rdx
  7425 0000520F 4C8B4500                	mov r8, qword[rbp]
  7426 00005213 4889E9                  	mov rcx, rbp
  7427 00005216 4883E908                	sub rcx, 8
  7428                                  	 .L_loop_fix_stuck_00e7:
  7429 0000521A 4839CC                  	cmp rsp, rcx
  7430 0000521D 7710                    ja .L_loop_fix_stuck_end_00e7
  7431 0000521F 488B19                   	mov rbx, qword[rcx]
  7432 00005222 48891F                  	 mov qword[rdi], rbx
  7433 00005225 4883EF08                	sub rdi, 8
  7434 00005229 4883E908                	sub rcx, 8
  7435 0000522D EBEB                    jmp .L_loop_fix_stuck_00e7
  7436                                  	 .L_loop_fix_stuck_end_00e7:
  7437 0000522F 4883C708                	add rdi, 8
  7438 00005233 4889FC                  	 mov rsp, rdi
  7439 00005236 4C89C5                  	mov rbp, r8
  7440 00005239 5D                      	pop rbp
  7441 0000523A FFE0                    	jmp rax 
  7442                                  
  7443                                          	.L_if_end_006d:
  7444 0000523C C9                      	leave
  7445 0000523D C22800                  	ret 8 * (2 + 3)
  7446                                  .L_lambda_simple_end_00ce:	; new closure is in rax
  7447 00005240 50                      	push rax
  7448 00005241 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7449 00005245 8F00                    	pop qword [rax]
  7450 00005247 48B8-                   	mov rax, sob_void
  7450 00005249 [0000000000000000] 
  7451                                  
  7452 00005251 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  7453 00005256 E8BFBC0000              	call malloc
  7454 0000525B 50                      	push rax
  7455 0000525C BF08000000              	mov rdi, 8 * 1  ; new rib
  7456 00005261 E8B4BC0000              	call malloc
  7457 00005266 50                      	push rax
  7458 00005267 BF10000000              	mov rdi, 8 * 2	; extended env
  7459 0000526C E8A9BC0000              	call malloc
  7460 00005271 488B7D10                	mov rdi, ENV
  7461 00005275 BE00000000              	mov rsi, 0
  7462 0000527A BA01000000              	mov rdx, 1
  7463                                  .L_lambda_opt_env_loop_001f:	; ext_env = env
  7464 0000527F 4883FE01                	cmp rsi, 1
  7465 00005283 7410                    	je .L_lambda_opt_env_end_001f
  7466 00005285 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7467 00005289 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7468 0000528D 48FFC6                  	inc rsi
  7469 00005290 48FFC2                  	inc rdx
  7470 00005293 EBEA                    	jmp .L_lambda_opt_env_loop_001f
  7471                                  .L_lambda_opt_env_end_001f:
  7472 00005295 5B                      	pop rbx
  7473 00005296 BE00000000              	mov rsi, 0
  7474                                  .L_lambda_opt_params_loop_001f:	; copy params
  7475 0000529B 4883FE01                	cmp rsi, 1
  7476 0000529F 740E                    	je .L_lambda_opt_params_end_001f
  7477 000052A1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7478 000052A6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7479 000052AA 48FFC6                  	inc rsi
  7480 000052AD EBEC                    	jmp .L_lambda_opt_params_loop_001f
  7481                                  .L_lambda_opt_params_end_001f:
  7482 000052AF 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  7483 000052B2 4889C3                  	mov rbx, rax
  7484 000052B5 58                      	pop rax
  7485 000052B6 C60005                  	mov byte [rax], T_closure
  7486 000052B9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7487 000052BD 48C74009[CA520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001f
  7488 000052C5 E973010000              	jmp .L_lambda_opt_end_001f
  7489                                  .L_lambda_opt_code_001f:	; lambda-opt body
  7490 000052CA 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7491 000052D0 740D                    	je .L_lambda_opt_arity_check_exact_001f  ;same num_of_args
  7492 000052D2 7F5B                    	jg .L_lambda_opt_arity_check_more_001f  ;greater num_of_args
  7493 000052D4 FF742410                	push qword [rsp + 8 * 2]
  7494 000052D8 6A02                    	push 2
  7495 000052DA E908BC0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  7496                                  .L_lambda_opt_arity_check_exact_001f:
  7497 000052DF 4883EC08                	sub rsp, 8 * 1
  7498 000052E3 4889E7                  	mov rdi, rsp 
  7499                                  	;mov ret
  7500 000052E6 488B4708                	mov rax, qword [rdi + (8 * 1)]
  7501 000052EA 488907                  	mov qword [rdi], rax
  7502 000052ED 4883C708                	add rdi, 8
  7503                                  	;mov env
  7504 000052F1 488B4708                	mov rax, qword [rdi + (8 * 1)]
  7505 000052F5 488907                  	mov qword [rdi], rax
  7506 000052F8 4883C708                	add rdi, 8
  7507                                  	;mov & update COUNT
  7508 000052FC 488B4708                	mov rax, qword [rdi +(8 * 1)]
  7509 00005300 4889C1                  	mov rcx, rax
  7510 00005303 48FFC0                  	inc rax
  7511 00005306 488907                  	mov qword [rdi], rax
  7512 00005309 4883C708                	add rdi, 8
  7513                                  	;LOOP:move params
  7514                                  .L_lambda_opt_stack_shrink_loop_005b:	
  7515 0000530D 4883F900                	cmp rcx, 0
  7516 00005311 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_005b
  7517 00005313 488B4708                	mov rax, qword [rdi + 8]
  7518 00005317 488907                  	mov qword [rdi], rax
  7519 0000531A 4883C708                	add rdi, 8
  7520 0000531E 48FFC9                  	dec rcx
  7521 00005321 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_005b
  7522                                  .L_lambda_opt_stack_shrink_loop_exit_005b:	
  7523 00005323 48C707[01000000]        	mov qword [rdi], sob_nil
  7524 0000532A E995000000              	jmp .L_lambda_opt_stack_adjusted_001f
  7525                                  .L_lambda_opt_arity_check_more_001f:	
  7526 0000532F 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  7527 00005334 488D4EFE                	lea rcx, [rsi - 2]
  7528 00005338 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  7529 0000533D 4989F2                  	mov r10, rsi
  7530 00005340 49B9-                   	mov r9, sob_nil
  7530 00005342 [0100000000000000] 
  7531                                  .L_lambda_opt_stack_shrink_loop_005c:	
  7532 0000534A 4883F900                	cmp rcx, 0
  7533 0000534E 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_005c
  7534 00005350 BF11000000              	mov rdi, 1 + 8 + 8
  7535 00005355 E8C0BB0000              	call malloc
  7536 0000535A C60021                  	mov byte [rax], T_pair
  7537 0000535D 488B1E                  	mov rbx, qword [rsi]
  7538 00005360 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7539 00005364 4C894809                	mov SOB_PAIR_CDR(rax), r9
  7540 00005368 4989C1                  	mov r9, rax
  7541 0000536B 4883EE08                	sub rsi, 8 * 1
  7542 0000536F 48FFC9                  	dec rcx
  7543 00005372 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_005c
  7544                                  .L_lambda_opt_stack_shrink_loop_exit_005c:	
  7545 00005374 4D890A                  	mov qword [r10], r9
  7546 00005377 4983EA08                	sub r10, 8 * 1; the new dest!
  7547 0000537B 488D742420              	lea rsi, [rsp + (8 * (2 + 2))];the new src
  7548 00005380 B902000000              	mov rcx, 2 
  7549                                  .L_lambda_opt_stack_shrink_loop_005d:	
  7550 00005385 4883F900                	cmp rcx, 0
  7551 00005389 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_005d
  7552 0000538B 488B06                  	mov rax, qword [rsi]
  7553 0000538E 498902                  	mov qword [r10], rax
  7554 00005391 4983EA08                	sub r10, 8 * 1
  7555 00005395 4883EE08                	sub rsi, 8 * 1
  7556 00005399 48FFC9                  	dec rcx
  7557 0000539C EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_005d
  7558                                  .L_lambda_opt_stack_shrink_loop_exit_005d:	
  7559 0000539E 49C70203000000          	mov qword [r10], 1 + 2; 1=opt
  7560 000053A5 4983EA08                	sub r10, 8 * 1
  7561 000053A9 4883EE08                	sub rsi, 8 * 1
  7562 000053AD 488B06                  	mov rax, qword [rsi] ;env
  7563 000053B0 498902                  	mov qword [r10], rax
  7564 000053B3 4983EA08                	sub r10, 8 * 1
  7565 000053B7 4883EE08                	sub rsi, 8 * 1
  7566 000053BB 488B06                  	mov rax, qword [rsi] ;ret
  7567 000053BE 498902                  	mov qword [r10], rax
  7568 000053C1 4C89D4                  	mov rsp, r10
  7569                                  .L_lambda_opt_stack_adjusted_001f:	
  7570 000053C4 C8000000                	enter 0, 0
  7571 000053C8 488B4530                	 	mov rax ,qword[rbp + 8 * (4 + 2)]
  7572 000053CC 50                      	push rax
  7573 000053CD 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7574 000053D1 50                      	push rax
  7575 000053D2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7576 000053D6 50                      	push rax
  7577                                  
  7578 000053D7 6A03                    	push 3
  7579 000053D9 488B4510                	mov rax, qword [rbp + 8 * 2]
  7580                                  
  7581 000053DD 488B00                                            	mov rax, qword[rax + 8 * 0]
  7582                                  
  7583 000053E0 488B00                                            	mov rax, qword[rax + 8 * 0]
  7584 000053E3 488B00                  	mov rax, qword [rax]
  7585                                  	assert_closure(rax)
    42 000053E6 803805              <1>  cmp byte [%1], %2
    43 000053E9 0F851FD30000        <1>  jne L_error_incorrect_type
  7586 000053EF 50                      	push rax 
  7587 000053F0 FF7508                  	push qword [rbp + 8]
  7588 000053F3 FF7500                  	push qword [rbp]
  7589 000053F6 4883C308                	add rbx ,8*1
  7590                                  	 .L_fix_stack_label_00e8:
  7591 000053FA 488B5518                	mov rdx, qword[rbp+8*3]
  7592 000053FE 4883C203                	add rdx, 3
  7593 00005402 48C1E203                	shl rdx, 3
  7594 00005406 4889EF                  	mov rdi, rbp
  7595 00005409 4801D7                  	add rdi, rdx
  7596 0000540C 4C8B4500                	mov r8, qword[rbp]
  7597 00005410 4889E9                  	mov rcx, rbp
  7598 00005413 4883E908                	sub rcx, 8
  7599                                  	 .L_loop_fix_stuck_00e8:
  7600 00005417 4839CC                  	cmp rsp, rcx
  7601 0000541A 7710                    ja .L_loop_fix_stuck_end_00e8
  7602 0000541C 488B19                   	mov rbx, qword[rcx]
  7603 0000541F 48891F                  	 mov qword[rdi], rbx
  7604 00005422 4883EF08                	sub rdi, 8
  7605 00005426 4883E908                	sub rcx, 8
  7606 0000542A EBEB                    jmp .L_loop_fix_stuck_00e8
  7607                                  	 .L_loop_fix_stuck_end_00e8:
  7608 0000542C 4883C708                	add rdi, 8
  7609 00005430 4889FC                  	 mov rsp, rdi
  7610 00005433 4C89C5                  	mov rbp, r8
  7611 00005436 5D                      	pop rbp
  7612 00005437 FFE0                    	jmp rax 
  7613 00005439 C9                      	leave
  7614 0000543A C22800                  	ret 8 * (2 + 3)
  7615                                  .L_lambda_opt_end_001f:	; new closure is in rax
  7616 0000543D C9                      	leave
  7617 0000543E C21800                  	ret 8 * (2 + 1)
  7618                                  .L_lambda_simple_end_00cd:	; new closure is in rax
  7619 00005441 803805                  	cmp byte [rax], T_closure 
  7620 00005444 0F8585CA0000                    jne L_code_ptr_error
  7621                                  
  7622 0000544A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7623                                  
  7624 0000544E 53                              push rbx
  7625                                  
  7626 0000544F FF5009                          call SOB_CLOSURE_CODE(rax)
  7627                                  
  7628 00005452 48890425[F8020000]              	mov qword [free_var_95], rax
  7629 0000545A 48B8-                   	mov rax, sob_void
  7629 0000545C [0000000000000000] 
  7630                                  
  7631 00005464 4889C7                  	mov rdi, rax
  7632 00005467 E8BFBA0000              	call print_sexpr_if_not_void
  7633                                  
  7634 0000546C 48B8-                   	mov rax,L_constants + 23
  7634 0000546E [1700000000000000] 
  7635 00005476 50                      	push rax
  7636 00005477 6A01                    	push 1
  7637 00005479 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7638 0000547E E897BA0000              	call malloc
  7639 00005483 50                      	push rax
  7640 00005484 BF00000000              	mov rdi, 8 * 0	; new rib
  7641 00005489 E88CBA0000              	call malloc
  7642 0000548E 50                      	push rax
  7643 0000548F BF08000000              	mov rdi, 8 * 1	; extended env
  7644 00005494 E881BA0000              	call malloc
  7645 00005499 488B7D10                	mov rdi, ENV
  7646 0000549D BE00000000              	mov rsi, 0
  7647 000054A2 BA01000000              	mov rdx, 1
  7648                                  .L_lambda_simple_env_loop_00cf:	; ext_env[i + 1] <-- env[i]
  7649 000054A7 4883FE00                	cmp rsi, 0
  7650 000054AB 7410                    	je .L_lambda_simple_env_end_00cf
  7651 000054AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7652 000054B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7653 000054B5 48FFC6                  	inc rsi
  7654 000054B8 48FFC2                  	inc rdx
  7655 000054BB EBEA                    	jmp .L_lambda_simple_env_loop_00cf
  7656                                  .L_lambda_simple_env_end_00cf:
  7657 000054BD 5B                      	pop rbx
  7658 000054BE BE00000000              	mov rsi, 0
  7659                                  .L_lambda_simple_params_loop_00cf:	; copy params
  7660 000054C3 4883FE00                	cmp rsi, 0
  7661 000054C7 740E                    	je .L_lambda_simple_params_end_00cf
  7662 000054C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7663 000054CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7664 000054D2 48FFC6                  	inc rsi
  7665 000054D5 EBEC                    	jmp .L_lambda_simple_params_loop_00cf
  7666                                  .L_lambda_simple_params_end_00cf:
  7667 000054D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7668 000054DA 4889C3                  	mov rbx, rax
  7669 000054DD 58                      	pop rax
  7670 000054DE C60005                  	mov byte [rax], T_closure
  7671 000054E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7672 000054E5 48C74009[F2540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cf
  7673 000054ED E929040000              	jmp .L_lambda_simple_end_00cf
  7674                                  .L_lambda_simple_code_00cf:	; lambda-simple body
  7675 000054F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7676 000054F8 740B                    	je .L_lambda_simple_arity_check_ok_00cf
  7677 000054FA FF742410                	push qword [rsp + 8 * 2]
  7678 000054FE 6A01                    	push 1
  7679 00005500 E9CEB90000              	jmp L_error_incorrect_arity_simple
  7680                                  .L_lambda_simple_arity_check_ok_00cf:
  7681 00005505 C8000000                	enter 0, 0
  7682 00005509 BF08000000              	mov rdi, 8
  7683 0000550E E807BA0000              	call malloc
  7684 00005513 488B5D20                	mov rbx, PARAM(0)
  7685 00005517 488918                  	mov qword [rax], rbx
  7686 0000551A 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  7687                                  
  7688 0000551E 48B8-                            	mov rax, sob_void
  7688 00005520 [0000000000000000] 
  7689                                  
  7690 00005528 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7691 0000552D E8E8B90000              	call malloc
  7692 00005532 50                      	push rax
  7693 00005533 BF08000000              	mov rdi, 8 * 1	; new rib
  7694 00005538 E8DDB90000              	call malloc
  7695 0000553D 50                      	push rax
  7696 0000553E BF10000000              	mov rdi, 8 * 2	; extended env
  7697 00005543 E8D2B90000              	call malloc
  7698 00005548 488B7D10                	mov rdi, ENV
  7699 0000554C BE00000000              	mov rsi, 0
  7700 00005551 BA01000000              	mov rdx, 1
  7701                                  .L_lambda_simple_env_loop_00d0:	; ext_env[i + 1] <-- env[i]
  7702 00005556 4883FE01                	cmp rsi, 1
  7703 0000555A 7410                    	je .L_lambda_simple_env_end_00d0
  7704 0000555C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7705 00005560 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7706 00005564 48FFC6                  	inc rsi
  7707 00005567 48FFC2                  	inc rdx
  7708 0000556A EBEA                    	jmp .L_lambda_simple_env_loop_00d0
  7709                                  .L_lambda_simple_env_end_00d0:
  7710 0000556C 5B                      	pop rbx
  7711 0000556D BE00000000              	mov rsi, 0
  7712                                  .L_lambda_simple_params_loop_00d0:	; copy params
  7713 00005572 4883FE01                	cmp rsi, 1
  7714 00005576 740E                    	je .L_lambda_simple_params_end_00d0
  7715 00005578 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7716 0000557D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7717 00005581 48FFC6                  	inc rsi
  7718 00005584 EBEC                    	jmp .L_lambda_simple_params_loop_00d0
  7719                                  .L_lambda_simple_params_end_00d0:
  7720 00005586 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7721 00005589 4889C3                  	mov rbx, rax
  7722 0000558C 58                      	pop rax
  7723 0000558D C60005                  	mov byte [rax], T_closure
  7724 00005590 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7725 00005594 48C74009[A1550000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d0
  7726 0000559C E979010000              	jmp .L_lambda_simple_end_00d0
  7727                                  .L_lambda_simple_code_00d0:	; lambda-simple body
  7728 000055A1 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7729 000055A7 740B                    	je .L_lambda_simple_arity_check_ok_00d0
  7730 000055A9 FF742410                	push qword [rsp + 8 * 2]
  7731 000055AD 6A03                    	push 3
  7732 000055AF E91FB90000              	jmp L_error_incorrect_arity_simple
  7733                                  .L_lambda_simple_arity_check_ok_00d0:
  7734 000055B4 C8000000                	enter 0, 0
  7735 000055B8 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7736 000055BC 50                      	push rax
  7737 000055BD 488B0425[00000000]      	mov rax, qword [free_var_0]
  7738 000055C5 50                      	push rax
  7739 000055C6 6A02                    	push 2
  7740 000055C8 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7741 000055D0 803805                  	cmp byte [rax], T_closure 
  7742 000055D3 0F85F6C80000                    jne L_code_ptr_error
  7743                                  
  7744 000055D9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7745                                  
  7746 000055DD 53                              push rbx
  7747                                  
  7748 000055DE FF5009                          call SOB_CLOSURE_CODE(rax)
  7749                                  
  7750                                          
  7751 000055E1 483D[02000000]                  	cmp rax, sob_boolean_false
  7752                                  
  7753 000055E7 7409                            	je .L_if_else_006e
  7754 000055E9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7755                                  
  7756 000055ED E924010000                      	jmp .L_if_end_006e
  7757                                  
  7758                                          	.L_if_else_006e:
  7759 000055F2 48B8-                   	 	mov rax,L_constants + 1
  7759 000055F4 [0100000000000000] 
  7760 000055FC 50                      	push rax
  7761 000055FD 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7762 00005601 50                      	push rax
  7763 00005602 488B0425[88000000]      	mov rax, qword [free_var_17]
  7764 0000560A 50                      	push rax
  7765 0000560B 6A02                    	push 2
  7766 0000560D 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7767 00005615 803805                  	cmp byte [rax], T_closure 
  7768 00005618 0F85B1C80000                    jne L_code_ptr_error
  7769                                  
  7770 0000561E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7771                                  
  7772 00005622 53                              push rbx
  7773                                  
  7774 00005623 FF5009                          call SOB_CLOSURE_CODE(rax)
  7775                                  
  7776 00005626 50                              	push rax
  7777 00005627 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7778 0000562B 50                      	push rax
  7779 0000562C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7780 00005630 50                      	push rax
  7781 00005631 6A03                    	push 3
  7782 00005633 488B4510                	mov rax, qword [rbp + 8 * 2]
  7783                                  
  7784 00005637 488B00                                            	mov rax, qword[rax + 8 * 0]
  7785                                  
  7786 0000563A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7787 0000563D 488B00                  	mov rax, qword [rax]
  7788 00005640 803805                  	cmp byte [rax], T_closure 
  7789 00005643 0F8586C80000                    jne L_code_ptr_error
  7790                                  
  7791 00005649 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7792                                  
  7793 0000564D 53                              push rbx
  7794                                  
  7795 0000564E FF5009                          call SOB_CLOSURE_CODE(rax)
  7796                                  
  7797 00005651 50                              	push rax
  7798 00005652 6A02                    	push 2
  7799 00005654 488B0425[68000000]      	mov rax, qword [free_var_13]
  7800 0000565C 803805                  	cmp byte [rax], T_closure 
  7801 0000565F 0F856AC80000                    jne L_code_ptr_error
  7802                                  
  7803 00005665 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7804                                  
  7805 00005669 53                              push rbx
  7806                                  
  7807 0000566A FF5009                          call SOB_CLOSURE_CODE(rax)
  7808                                  
  7809 0000566D 50                              	push rax
  7810 0000566E 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7811 00005672 50                      	push rax
  7812 00005673 488B0425[80000000]      	mov rax, qword [free_var_16]
  7813 0000567B 50                      	push rax
  7814 0000567C 6A02                    	push 2
  7815 0000567E 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7816 00005686 803805                  	cmp byte [rax], T_closure 
  7817 00005689 0F8540C80000                    jne L_code_ptr_error
  7818                                  
  7819 0000568F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7820                                  
  7821 00005693 53                              push rbx
  7822                                  
  7823 00005694 FF5009                          call SOB_CLOSURE_CODE(rax)
  7824                                  
  7825 00005697 50                              	push rax
  7826 00005698 6A02                    	push 2
  7827 0000569A 488B0425[F0020000]      	mov rax, qword [free_var_94]
  7828 000056A2 803805                  	cmp byte [rax], T_closure 
  7829 000056A5 0F8524C80000                    jne L_code_ptr_error
  7830                                  
  7831 000056AB 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  7832                                  
  7833 000056AF 53                              push rbx
  7834                                  
  7835 000056B0 FF5009                          call SOB_CLOSURE_CODE(rax)
  7836                                  
  7837 000056B3 50                              	push rax
  7838 000056B4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7839 000056B8 50                      	push rax
  7840                                  
  7841 000056B9 6A02                    	push 2
  7842 000056BB 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7843                                  	assert_closure(rax)
    42 000056C3 803805              <1>  cmp byte [%1], %2
    43 000056C6 0F8542D00000        <1>  jne L_error_incorrect_type
  7844 000056CC 50                      	push rax 
  7845 000056CD FF7508                  	push qword [rbp + 8]
  7846 000056D0 FF7500                  	push qword [rbp]
  7847 000056D3 4883C308                	add rbx ,8*1
  7848                                  	 .L_fix_stack_label_00e9:
  7849 000056D7 488B5518                	mov rdx, qword[rbp+8*3]
  7850 000056DB 4883C203                	add rdx, 3
  7851 000056DF 48C1E203                	shl rdx, 3
  7852 000056E3 4889EF                  	mov rdi, rbp
  7853 000056E6 4801D7                  	add rdi, rdx
  7854 000056E9 4C8B4500                	mov r8, qword[rbp]
  7855 000056ED 4889E9                  	mov rcx, rbp
  7856 000056F0 4883E908                	sub rcx, 8
  7857                                  	 .L_loop_fix_stuck_00e9:
  7858 000056F4 4839CC                  	cmp rsp, rcx
  7859 000056F7 7710                    ja .L_loop_fix_stuck_end_00e9
  7860 000056F9 488B19                   	mov rbx, qword[rcx]
  7861 000056FC 48891F                  	 mov qword[rdi], rbx
  7862 000056FF 4883EF08                	sub rdi, 8
  7863 00005703 4883E908                	sub rcx, 8
  7864 00005707 EBEB                    jmp .L_loop_fix_stuck_00e9
  7865                                  	 .L_loop_fix_stuck_end_00e9:
  7866 00005709 4883C708                	add rdi, 8
  7867 0000570D 4889FC                  	 mov rsp, rdi
  7868 00005710 4C89C5                  	mov rbp, r8
  7869 00005713 5D                      	pop rbp
  7870 00005714 FFE0                    	jmp rax 
  7871                                  
  7872                                          	.L_if_end_006e:
  7873 00005716 C9                      	leave
  7874 00005717 C22800                  	ret 8 * (2 + 3)
  7875                                  .L_lambda_simple_end_00d0:	; new closure is in rax
  7876 0000571A 50                      	push rax
  7877 0000571B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7878 0000571F 8F00                    	pop qword [rax]
  7879 00005721 48B8-                   	mov rax, sob_void
  7879 00005723 [0000000000000000] 
  7880                                  
  7881 0000572B BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  7882 00005730 E8E5B70000              	call malloc
  7883 00005735 50                      	push rax
  7884 00005736 BF08000000              	mov rdi, 8 * 1  ; new rib
  7885 0000573B E8DAB70000              	call malloc
  7886 00005740 50                      	push rax
  7887 00005741 BF10000000              	mov rdi, 8 * 2	; extended env
  7888 00005746 E8CFB70000              	call malloc
  7889 0000574B 488B7D10                	mov rdi, ENV
  7890 0000574F BE00000000              	mov rsi, 0
  7891 00005754 BA01000000              	mov rdx, 1
  7892                                  .L_lambda_opt_env_loop_0020:	; ext_env = env
  7893 00005759 4883FE01                	cmp rsi, 1
  7894 0000575D 7410                    	je .L_lambda_opt_env_end_0020
  7895 0000575F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7896 00005763 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7897 00005767 48FFC6                  	inc rsi
  7898 0000576A 48FFC2                  	inc rdx
  7899 0000576D EBEA                    	jmp .L_lambda_opt_env_loop_0020
  7900                                  .L_lambda_opt_env_end_0020:
  7901 0000576F 5B                      	pop rbx
  7902 00005770 BE00000000              	mov rsi, 0
  7903                                  .L_lambda_opt_params_loop_0020:	; copy params
  7904 00005775 4883FE01                	cmp rsi, 1
  7905 00005779 740E                    	je .L_lambda_opt_params_end_0020
  7906 0000577B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7907 00005780 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7908 00005784 48FFC6                  	inc rsi
  7909 00005787 EBEC                    	jmp .L_lambda_opt_params_loop_0020
  7910                                  .L_lambda_opt_params_end_0020:
  7911 00005789 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  7912 0000578C 4889C3                  	mov rbx, rax
  7913 0000578F 58                      	pop rax
  7914 00005790 C60005                  	mov byte [rax], T_closure
  7915 00005793 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7916 00005797 48C74009[A4570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0020
  7917 0000579F E973010000              	jmp .L_lambda_opt_end_0020
  7918                                  .L_lambda_opt_code_0020:	; lambda-opt body
  7919 000057A4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7920 000057AA 740D                    	je .L_lambda_opt_arity_check_exact_0020  ;same num_of_args
  7921 000057AC 7F5B                    	jg .L_lambda_opt_arity_check_more_0020  ;greater num_of_args
  7922 000057AE FF742410                	push qword [rsp + 8 * 2]
  7923 000057B2 6A02                    	push 2
  7924 000057B4 E92EB70000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  7925                                  .L_lambda_opt_arity_check_exact_0020:
  7926 000057B9 4883EC08                	sub rsp, 8 * 1
  7927 000057BD 4889E7                  	mov rdi, rsp 
  7928                                  	;mov ret
  7929 000057C0 488B4708                	mov rax, qword [rdi + (8 * 1)]
  7930 000057C4 488907                  	mov qword [rdi], rax
  7931 000057C7 4883C708                	add rdi, 8
  7932                                  	;mov env
  7933 000057CB 488B4708                	mov rax, qword [rdi + (8 * 1)]
  7934 000057CF 488907                  	mov qword [rdi], rax
  7935 000057D2 4883C708                	add rdi, 8
  7936                                  	;mov & update COUNT
  7937 000057D6 488B4708                	mov rax, qword [rdi +(8 * 1)]
  7938 000057DA 4889C1                  	mov rcx, rax
  7939 000057DD 48FFC0                  	inc rax
  7940 000057E0 488907                  	mov qword [rdi], rax
  7941 000057E3 4883C708                	add rdi, 8
  7942                                  	;LOOP:move params
  7943                                  .L_lambda_opt_stack_shrink_loop_005e:	
  7944 000057E7 4883F900                	cmp rcx, 0
  7945 000057EB 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_005e
  7946 000057ED 488B4708                	mov rax, qword [rdi + 8]
  7947 000057F1 488907                  	mov qword [rdi], rax
  7948 000057F4 4883C708                	add rdi, 8
  7949 000057F8 48FFC9                  	dec rcx
  7950 000057FB EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_005e
  7951                                  .L_lambda_opt_stack_shrink_loop_exit_005e:	
  7952 000057FD 48C707[01000000]        	mov qword [rdi], sob_nil
  7953 00005804 E995000000              	jmp .L_lambda_opt_stack_adjusted_0020
  7954                                  .L_lambda_opt_arity_check_more_0020:	
  7955 00005809 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  7956 0000580E 488D4EFE                	lea rcx, [rsi - 2]
  7957 00005812 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  7958 00005817 4989F2                  	mov r10, rsi
  7959 0000581A 49B9-                   	mov r9, sob_nil
  7959 0000581C [0100000000000000] 
  7960                                  .L_lambda_opt_stack_shrink_loop_005f:	
  7961 00005824 4883F900                	cmp rcx, 0
  7962 00005828 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_005f
  7963 0000582A BF11000000              	mov rdi, 1 + 8 + 8
  7964 0000582F E8E6B60000              	call malloc
  7965 00005834 C60021                  	mov byte [rax], T_pair
  7966 00005837 488B1E                  	mov rbx, qword [rsi]
  7967 0000583A 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7968 0000583E 4C894809                	mov SOB_PAIR_CDR(rax), r9
  7969 00005842 4989C1                  	mov r9, rax
  7970 00005845 4883EE08                	sub rsi, 8 * 1
  7971 00005849 48FFC9                  	dec rcx
  7972 0000584C EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_005f
  7973                                  .L_lambda_opt_stack_shrink_loop_exit_005f:	
  7974 0000584E 4D890A                  	mov qword [r10], r9
  7975 00005851 4983EA08                	sub r10, 8 * 1; the new dest!
  7976 00005855 488D742420              	lea rsi, [rsp + (8 * (2 + 2))];the new src
  7977 0000585A B902000000              	mov rcx, 2 
  7978                                  .L_lambda_opt_stack_shrink_loop_0060:	
  7979 0000585F 4883F900                	cmp rcx, 0
  7980 00005863 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0060
  7981 00005865 488B06                  	mov rax, qword [rsi]
  7982 00005868 498902                  	mov qword [r10], rax
  7983 0000586B 4983EA08                	sub r10, 8 * 1
  7984 0000586F 4883EE08                	sub rsi, 8 * 1
  7985 00005873 48FFC9                  	dec rcx
  7986 00005876 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0060
  7987                                  .L_lambda_opt_stack_shrink_loop_exit_0060:	
  7988 00005878 49C70203000000          	mov qword [r10], 1 + 2; 1=opt
  7989 0000587F 4983EA08                	sub r10, 8 * 1
  7990 00005883 4883EE08                	sub rsi, 8 * 1
  7991 00005887 488B06                  	mov rax, qword [rsi] ;env
  7992 0000588A 498902                  	mov qword [r10], rax
  7993 0000588D 4983EA08                	sub r10, 8 * 1
  7994 00005891 4883EE08                	sub rsi, 8 * 1
  7995 00005895 488B06                  	mov rax, qword [rsi] ;ret
  7996 00005898 498902                  	mov qword [r10], rax
  7997 0000589B 4C89D4                  	mov rsp, r10
  7998                                  .L_lambda_opt_stack_adjusted_0020:	
  7999 0000589E C8000000                	enter 0, 0
  8000 000058A2 488B4530                	 	mov rax ,qword[rbp + 8 * (4 + 2)]
  8001 000058A6 50                      	push rax
  8002 000058A7 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8003 000058AB 50                      	push rax
  8004 000058AC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8005 000058B0 50                      	push rax
  8006                                  
  8007 000058B1 6A03                    	push 3
  8008 000058B3 488B4510                	mov rax, qword [rbp + 8 * 2]
  8009                                  
  8010 000058B7 488B00                                            	mov rax, qword[rax + 8 * 0]
  8011                                  
  8012 000058BA 488B00                                            	mov rax, qword[rax + 8 * 0]
  8013 000058BD 488B00                  	mov rax, qword [rax]
  8014                                  	assert_closure(rax)
    42 000058C0 803805              <1>  cmp byte [%1], %2
    43 000058C3 0F8545CE0000        <1>  jne L_error_incorrect_type
  8015 000058C9 50                      	push rax 
  8016 000058CA FF7508                  	push qword [rbp + 8]
  8017 000058CD FF7500                  	push qword [rbp]
  8018 000058D0 4883C308                	add rbx ,8*1
  8019                                  	 .L_fix_stack_label_00ea:
  8020 000058D4 488B5518                	mov rdx, qword[rbp+8*3]
  8021 000058D8 4883C203                	add rdx, 3
  8022 000058DC 48C1E203                	shl rdx, 3
  8023 000058E0 4889EF                  	mov rdi, rbp
  8024 000058E3 4801D7                  	add rdi, rdx
  8025 000058E6 4C8B4500                	mov r8, qword[rbp]
  8026 000058EA 4889E9                  	mov rcx, rbp
  8027 000058ED 4883E908                	sub rcx, 8
  8028                                  	 .L_loop_fix_stuck_00ea:
  8029 000058F1 4839CC                  	cmp rsp, rcx
  8030 000058F4 7710                    ja .L_loop_fix_stuck_end_00ea
  8031 000058F6 488B19                   	mov rbx, qword[rcx]
  8032 000058F9 48891F                  	 mov qword[rdi], rbx
  8033 000058FC 4883EF08                	sub rdi, 8
  8034 00005900 4883E908                	sub rcx, 8
  8035 00005904 EBEB                    jmp .L_loop_fix_stuck_00ea
  8036                                  	 .L_loop_fix_stuck_end_00ea:
  8037 00005906 4883C708                	add rdi, 8
  8038 0000590A 4889FC                  	 mov rsp, rdi
  8039 0000590D 4C89C5                  	mov rbp, r8
  8040 00005910 5D                      	pop rbp
  8041 00005911 FFE0                    	jmp rax 
  8042 00005913 C9                      	leave
  8043 00005914 C22800                  	ret 8 * (2 + 3)
  8044                                  .L_lambda_opt_end_0020:	; new closure is in rax
  8045 00005917 C9                      	leave
  8046 00005918 C21800                  	ret 8 * (2 + 1)
  8047                                  .L_lambda_simple_end_00cf:	; new closure is in rax
  8048 0000591B 803805                  	cmp byte [rax], T_closure 
  8049 0000591E 0F85ABC50000                    jne L_code_ptr_error
  8050                                  
  8051 00005924 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8052                                  
  8053 00005928 53                              push rbx
  8054                                  
  8055 00005929 FF5009                          call SOB_CLOSURE_CODE(rax)
  8056                                  
  8057 0000592C 48890425[00030000]              	mov qword [free_var_96], rax
  8058 00005934 48B8-                   	mov rax, sob_void
  8058 00005936 [0000000000000000] 
  8059                                  
  8060 0000593E 4889C7                  	mov rdi, rax
  8061 00005941 E8E5B50000              	call print_sexpr_if_not_void
  8062                                  
  8063 00005946 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8064 0000594B E8CAB50000              	call malloc
  8065 00005950 50                      	push rax
  8066 00005951 BF00000000              	mov rdi, 8 * 0	; new rib
  8067 00005956 E8BFB50000              	call malloc
  8068 0000595B 50                      	push rax
  8069 0000595C BF08000000              	mov rdi, 8 * 1	; extended env
  8070 00005961 E8B4B50000              	call malloc
  8071 00005966 488B7D10                	mov rdi, ENV
  8072 0000596A BE00000000              	mov rsi, 0
  8073 0000596F BA01000000              	mov rdx, 1
  8074                                  .L_lambda_simple_env_loop_00d1:	; ext_env[i + 1] <-- env[i]
  8075 00005974 4883FE00                	cmp rsi, 0
  8076 00005978 7410                    	je .L_lambda_simple_env_end_00d1
  8077 0000597A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8078 0000597E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8079 00005982 48FFC6                  	inc rsi
  8080 00005985 48FFC2                  	inc rdx
  8081 00005988 EBEA                    	jmp .L_lambda_simple_env_loop_00d1
  8082                                  .L_lambda_simple_env_end_00d1:
  8083 0000598A 5B                      	pop rbx
  8084 0000598B BE00000000              	mov rsi, 0
  8085                                  .L_lambda_simple_params_loop_00d1:	; copy params
  8086 00005990 4883FE00                	cmp rsi, 0
  8087 00005994 740E                    	je .L_lambda_simple_params_end_00d1
  8088 00005996 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8089 0000599B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8090 0000599F 48FFC6                  	inc rsi
  8091 000059A2 EBEC                    	jmp .L_lambda_simple_params_loop_00d1
  8092                                  .L_lambda_simple_params_end_00d1:
  8093 000059A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8094 000059A7 4889C3                  	mov rbx, rax
  8095 000059AA 58                      	pop rax
  8096 000059AB C60005                  	mov byte [rax], T_closure
  8097 000059AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8098 000059B2 48C74009[BF590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d1
  8099 000059BA E98E000000              	jmp .L_lambda_simple_end_00d1
  8100                                  .L_lambda_simple_code_00d1:	; lambda-simple body
  8101 000059BF 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8102 000059C5 740B                    	je .L_lambda_simple_arity_check_ok_00d1
  8103 000059C7 FF742410                	push qword [rsp + 8 * 2]
  8104 000059CB 6A00                    	push 0
  8105 000059CD E901B50000              	jmp L_error_incorrect_arity_simple
  8106                                  .L_lambda_simple_arity_check_ok_00d1:
  8107 000059D2 C8000000                	enter 0, 0
  8108 000059D6 48B8-                   	 	mov rax,L_constants + 68
  8108 000059D8 [4400000000000000] 
  8109 000059E0 50                      	push rax
  8110 000059E1 48B8-                   	mov rax,L_constants + 59
  8110 000059E3 [3B00000000000000] 
  8111 000059EB 50                      	push rax
  8112                                  
  8113 000059EC 6A02                    	push 2
  8114 000059EE 488B0425[30010000]      	mov rax, qword [free_var_38]
  8115                                  	assert_closure(rax)
    42 000059F6 803805              <1>  cmp byte [%1], %2
    43 000059F9 0F850FCD0000        <1>  jne L_error_incorrect_type
  8116 000059FF 50                      	push rax 
  8117 00005A00 FF7508                  	push qword [rbp + 8]
  8118 00005A03 FF7500                  	push qword [rbp]
  8119 00005A06 4883C308                	add rbx ,8*1
  8120                                  	 .L_fix_stack_label_00eb:
  8121 00005A0A 488B5518                	mov rdx, qword[rbp+8*3]
  8122 00005A0E 4883C203                	add rdx, 3
  8123 00005A12 48C1E203                	shl rdx, 3
  8124 00005A16 4889EF                  	mov rdi, rbp
  8125 00005A19 4801D7                  	add rdi, rdx
  8126 00005A1C 4C8B4500                	mov r8, qword[rbp]
  8127 00005A20 4889E9                  	mov rcx, rbp
  8128 00005A23 4883E908                	sub rcx, 8
  8129                                  	 .L_loop_fix_stuck_00eb:
  8130 00005A27 4839CC                  	cmp rsp, rcx
  8131 00005A2A 7710                    ja .L_loop_fix_stuck_end_00eb
  8132 00005A2C 488B19                   	mov rbx, qword[rcx]
  8133 00005A2F 48891F                  	 mov qword[rdi], rbx
  8134 00005A32 4883EF08                	sub rdi, 8
  8135 00005A36 4883E908                	sub rcx, 8
  8136 00005A3A EBEB                    jmp .L_loop_fix_stuck_00eb
  8137                                  	 .L_loop_fix_stuck_end_00eb:
  8138 00005A3C 4883C708                	add rdi, 8
  8139 00005A40 4889FC                  	 mov rsp, rdi
  8140 00005A43 4C89C5                  	mov rbp, r8
  8141 00005A46 5D                      	pop rbp
  8142 00005A47 FFE0                    	jmp rax 
  8143 00005A49 C9                      	leave
  8144 00005A4A C21000                  	ret 8 * (2 + 0)
  8145                                  .L_lambda_simple_end_00d1:	; new closure is in rax
  8146 00005A4D 50                      	push rax
  8147 00005A4E 6A01                    	push 1
  8148 00005A50 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8149 00005A55 E8C0B40000              	call malloc
  8150 00005A5A 50                      	push rax
  8151 00005A5B BF00000000              	mov rdi, 8 * 0	; new rib
  8152 00005A60 E8B5B40000              	call malloc
  8153 00005A65 50                      	push rax
  8154 00005A66 BF08000000              	mov rdi, 8 * 1	; extended env
  8155 00005A6B E8AAB40000              	call malloc
  8156 00005A70 488B7D10                	mov rdi, ENV
  8157 00005A74 BE00000000              	mov rsi, 0
  8158 00005A79 BA01000000              	mov rdx, 1
  8159                                  .L_lambda_simple_env_loop_00d2:	; ext_env[i + 1] <-- env[i]
  8160 00005A7E 4883FE00                	cmp rsi, 0
  8161 00005A82 7410                    	je .L_lambda_simple_env_end_00d2
  8162 00005A84 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8163 00005A88 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8164 00005A8C 48FFC6                  	inc rsi
  8165 00005A8F 48FFC2                  	inc rdx
  8166 00005A92 EBEA                    	jmp .L_lambda_simple_env_loop_00d2
  8167                                  .L_lambda_simple_env_end_00d2:
  8168 00005A94 5B                      	pop rbx
  8169 00005A95 BE00000000              	mov rsi, 0
  8170                                  .L_lambda_simple_params_loop_00d2:	; copy params
  8171 00005A9A 4883FE00                	cmp rsi, 0
  8172 00005A9E 740E                    	je .L_lambda_simple_params_end_00d2
  8173 00005AA0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8174 00005AA5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8175 00005AA9 48FFC6                  	inc rsi
  8176 00005AAC EBEC                    	jmp .L_lambda_simple_params_loop_00d2
  8177                                  .L_lambda_simple_params_end_00d2:
  8178 00005AAE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8179 00005AB1 4889C3                  	mov rbx, rax
  8180 00005AB4 58                      	pop rax
  8181 00005AB5 C60005                  	mov byte [rax], T_closure
  8182 00005AB8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8183 00005ABC 48C74009[C95A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d2
  8184 00005AC4 E991070000              	jmp .L_lambda_simple_end_00d2
  8185                                  .L_lambda_simple_code_00d2:	; lambda-simple body
  8186 00005AC9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8187 00005ACF 740B                    	je .L_lambda_simple_arity_check_ok_00d2
  8188 00005AD1 FF742410                	push qword [rsp + 8 * 2]
  8189 00005AD5 6A01                    	push 1
  8190 00005AD7 E9F7B30000              	jmp L_error_incorrect_arity_simple
  8191                                  .L_lambda_simple_arity_check_ok_00d2:
  8192 00005ADC C8000000                	enter 0, 0
  8193 00005AE0 BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
  8194 00005AE5 E830B40000              	call malloc
  8195 00005AEA 50                      	push rax
  8196 00005AEB BF08000000              	mov rdi, 8 * 1	; new rib
  8197 00005AF0 E825B40000              	call malloc
  8198 00005AF5 50                      	push rax
  8199 00005AF6 BF10000000              	mov rdi, 8 * 2	; extended env
  8200 00005AFB E81AB40000              	call malloc
  8201 00005B00 488B7D10                	mov rdi, ENV
  8202 00005B04 BE00000000              	mov rsi, 0
  8203 00005B09 BA01000000              	mov rdx, 1
  8204                                  .L_lambda_simple_env_loop_00d3:	; ext_env[i + 1] <-- env[i]
  8205 00005B0E 4883FE01                	cmp rsi, 1
  8206 00005B12 7410                    	je .L_lambda_simple_env_end_00d3
  8207 00005B14 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8208 00005B18 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8209 00005B1C 48FFC6                  	inc rsi
  8210 00005B1F 48FFC2                  	inc rdx
  8211 00005B22 EBEA                    	jmp .L_lambda_simple_env_loop_00d3
  8212                                  .L_lambda_simple_env_end_00d3:
  8213 00005B24 5B                      	pop rbx
  8214 00005B25 BE00000000              	mov rsi, 0
  8215                                  .L_lambda_simple_params_loop_00d3:	; copy params
  8216 00005B2A 4883FE01                	cmp rsi, 1
  8217 00005B2E 740E                    	je .L_lambda_simple_params_end_00d3
  8218 00005B30 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8219 00005B35 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8220 00005B39 48FFC6                  	inc rsi
  8221 00005B3C EBEC                    	jmp .L_lambda_simple_params_loop_00d3
  8222                                  .L_lambda_simple_params_end_00d3:
  8223 00005B3E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8224 00005B41 4889C3                  	mov rbx, rax
  8225 00005B44 58                      	pop rax
  8226 00005B45 C60005                  	mov byte [rax], T_closure
  8227 00005B48 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8228 00005B4C 48C74009[595B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d3
  8229 00005B54 E921040000              	jmp .L_lambda_simple_end_00d3
  8230                                  .L_lambda_simple_code_00d3:	; lambda-simple body
  8231 00005B59 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8232 00005B5F 740B                    	je .L_lambda_simple_arity_check_ok_00d3
  8233 00005B61 FF742410                	push qword [rsp + 8 * 2]
  8234 00005B65 6A02                    	push 2
  8235 00005B67 E967B30000              	jmp L_error_incorrect_arity_simple
  8236                                  .L_lambda_simple_arity_check_ok_00d3:
  8237 00005B6C C8000000                	enter 0, 0
  8238 00005B70 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8239 00005B74 50                      	push rax
  8240 00005B75 6A01                    	push 1
  8241 00005B77 488B0425[48000000]      	mov rax, qword [free_var_9]
  8242 00005B7F 803805                  	cmp byte [rax], T_closure 
  8243 00005B82 0F8547C30000                    jne L_code_ptr_error
  8244                                  
  8245 00005B88 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8246                                  
  8247 00005B8C 53                              push rbx
  8248                                  
  8249 00005B8D FF5009                          call SOB_CLOSURE_CODE(rax)
  8250                                  
  8251                                          
  8252 00005B90 483D[02000000]                  	cmp rax, sob_boolean_false
  8253                                  
  8254 00005B96 0F84A9010000                    	je .L_if_else_006f
  8255 00005B9C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8256 00005BA0 50                      	push rax
  8257 00005BA1 6A01                    	push 1
  8258 00005BA3 488B0425[48000000]      	mov rax, qword [free_var_9]
  8259 00005BAB 803805                  	cmp byte [rax], T_closure 
  8260 00005BAE 0F851BC30000                    jne L_code_ptr_error
  8261                                  
  8262 00005BB4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8263                                  
  8264 00005BB8 53                              push rbx
  8265                                  
  8266 00005BB9 FF5009                          call SOB_CLOSURE_CODE(rax)
  8267                                  
  8268                                          
  8269 00005BBC 483D[02000000]                  	cmp rax, sob_boolean_false
  8270                                  
  8271 00005BC2 746C                            	je .L_if_else_0073
  8272 00005BC4 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  8273 00005BC8 50                      	push rax
  8274 00005BC9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8275 00005BCD 50                      	push rax
  8276                                  
  8277 00005BCE 6A02                    	push 2
  8278 00005BD0 488B0425[10010000]      	mov rax, qword [free_var_34]
  8279                                  	assert_closure(rax)
    42 00005BD8 803805              <1>  cmp byte [%1], %2
    43 00005BDB 0F852DCB0000        <1>  jne L_error_incorrect_type
  8280 00005BE1 50                      	push rax 
  8281 00005BE2 FF7508                  	push qword [rbp + 8]
  8282 00005BE5 FF7500                  	push qword [rbp]
  8283 00005BE8 4883C308                	add rbx ,8*1
  8284                                  	 .L_fix_stack_label_00f2:
  8285 00005BEC 488B5518                	mov rdx, qword[rbp+8*3]
  8286 00005BF0 4883C203                	add rdx, 3
  8287 00005BF4 48C1E203                	shl rdx, 3
  8288 00005BF8 4889EF                  	mov rdi, rbp
  8289 00005BFB 4801D7                  	add rdi, rdx
  8290 00005BFE 4C8B4500                	mov r8, qword[rbp]
  8291 00005C02 4889E9                  	mov rcx, rbp
  8292 00005C05 4883E908                	sub rcx, 8
  8293                                  	 .L_loop_fix_stuck_00f2:
  8294 00005C09 4839CC                  	cmp rsp, rcx
  8295 00005C0C 7710                    ja .L_loop_fix_stuck_end_00f2
  8296 00005C0E 488B19                   	mov rbx, qword[rcx]
  8297 00005C11 48891F                  	 mov qword[rdi], rbx
  8298 00005C14 4883EF08                	sub rdi, 8
  8299 00005C18 4883E908                	sub rcx, 8
  8300 00005C1C EBEB                    jmp .L_loop_fix_stuck_00f2
  8301                                  	 .L_loop_fix_stuck_end_00f2:
  8302 00005C1E 4883C708                	add rdi, 8
  8303 00005C22 4889FC                  	 mov rsp, rdi
  8304 00005C25 4C89C5                  	mov rbp, r8
  8305 00005C28 5D                      	pop rbp
  8306 00005C29 FFE0                    	jmp rax 
  8307                                  
  8308 00005C2B E910010000                      	jmp .L_if_end_0073
  8309                                  
  8310                                          	.L_if_else_0073:
  8311 00005C30 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8312 00005C34 50                      	push rax
  8313 00005C35 6A01                    	push 1
  8314 00005C37 488B0425[40000000]      	mov rax, qword [free_var_8]
  8315 00005C3F 803805                  	cmp byte [rax], T_closure 
  8316 00005C42 0F8587C20000                    jne L_code_ptr_error
  8317                                  
  8318 00005C48 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8319                                  
  8320 00005C4C 53                              push rbx
  8321                                  
  8322 00005C4D FF5009                          call SOB_CLOSURE_CODE(rax)
  8323                                  
  8324                                          
  8325 00005C50 483D[02000000]                  	cmp rax, sob_boolean_false
  8326                                  
  8327 00005C56 0F8485000000                    	je .L_if_else_0074
  8328 00005C5C 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  8329 00005C60 50                      	push rax
  8330 00005C61 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8331 00005C65 50                      	push rax
  8332 00005C66 6A01                    	push 1
  8333 00005C68 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8334 00005C70 803805                  	cmp byte [rax], T_closure 
  8335 00005C73 0F8556C20000                    jne L_code_ptr_error
  8336                                  
  8337 00005C79 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8338                                  
  8339 00005C7D 53                              push rbx
  8340                                  
  8341 00005C7E FF5009                          call SOB_CLOSURE_CODE(rax)
  8342                                  
  8343 00005C81 50                              	push rax
  8344                                  
  8345 00005C82 6A02                    	push 2
  8346 00005C84 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8347                                  	assert_closure(rax)
    42 00005C8C 803805              <1>  cmp byte [%1], %2
    43 00005C8F 0F8579CA0000        <1>  jne L_error_incorrect_type
  8348 00005C95 50                      	push rax 
  8349 00005C96 FF7508                  	push qword [rbp + 8]
  8350 00005C99 FF7500                  	push qword [rbp]
  8351 00005C9C 4883C308                	add rbx ,8*1
  8352                                  	 .L_fix_stack_label_00f1:
  8353 00005CA0 488B5518                	mov rdx, qword[rbp+8*3]
  8354 00005CA4 4883C203                	add rdx, 3
  8355 00005CA8 48C1E203                	shl rdx, 3
  8356 00005CAC 4889EF                  	mov rdi, rbp
  8357 00005CAF 4801D7                  	add rdi, rdx
  8358 00005CB2 4C8B4500                	mov r8, qword[rbp]
  8359 00005CB6 4889E9                  	mov rcx, rbp
  8360 00005CB9 4883E908                	sub rcx, 8
  8361                                  	 .L_loop_fix_stuck_00f1:
  8362 00005CBD 4839CC                  	cmp rsp, rcx
  8363 00005CC0 7710                    ja .L_loop_fix_stuck_end_00f1
  8364 00005CC2 488B19                   	mov rbx, qword[rcx]
  8365 00005CC5 48891F                  	 mov qword[rdi], rbx
  8366 00005CC8 4883EF08                	sub rdi, 8
  8367 00005CCC 4883E908                	sub rcx, 8
  8368 00005CD0 EBEB                    jmp .L_loop_fix_stuck_00f1
  8369                                  	 .L_loop_fix_stuck_end_00f1:
  8370 00005CD2 4883C708                	add rdi, 8
  8371 00005CD6 4889FC                  	 mov rsp, rdi
  8372 00005CD9 4C89C5                  	mov rbp, r8
  8373 00005CDC 5D                      	pop rbp
  8374 00005CDD FFE0                    	jmp rax 
  8375                                  
  8376 00005CDF EB5F                            	jmp .L_if_end_0074
  8377                                  
  8378                                          	.L_if_else_0074:
  8379                                  	 
  8380 00005CE1 6A00                    	push 0
  8381 00005CE3 488B4510                	mov rax, qword [rbp + 8 * 2]
  8382                                  
  8383 00005CE7 488B00                                            	mov rax, qword[rax + 8 * 0]
  8384                                  
  8385 00005CEA 488B00                                            	mov rax, qword[rax + 8 * 0]
  8386                                  	assert_closure(rax)
    42 00005CED 803805              <1>  cmp byte [%1], %2
    43 00005CF0 0F8518CA0000        <1>  jne L_error_incorrect_type
  8387 00005CF6 50                      	push rax 
  8388 00005CF7 FF7508                  	push qword [rbp + 8]
  8389 00005CFA FF7500                  	push qword [rbp]
  8390 00005CFD 4883C308                	add rbx ,8*1
  8391                                  	 .L_fix_stack_label_00f0:
  8392 00005D01 488B5518                	mov rdx, qword[rbp+8*3]
  8393 00005D05 4883C203                	add rdx, 3
  8394 00005D09 48C1E203                	shl rdx, 3
  8395 00005D0D 4889EF                  	mov rdi, rbp
  8396 00005D10 4801D7                  	add rdi, rdx
  8397 00005D13 4C8B4500                	mov r8, qword[rbp]
  8398 00005D17 4889E9                  	mov rcx, rbp
  8399 00005D1A 4883E908                	sub rcx, 8
  8400                                  	 .L_loop_fix_stuck_00f0:
  8401 00005D1E 4839CC                  	cmp rsp, rcx
  8402 00005D21 7710                    ja .L_loop_fix_stuck_end_00f0
  8403 00005D23 488B19                   	mov rbx, qword[rcx]
  8404 00005D26 48891F                  	 mov qword[rdi], rbx
  8405 00005D29 4883EF08                	sub rdi, 8
  8406 00005D2D 4883E908                	sub rcx, 8
  8407 00005D31 EBEB                    jmp .L_loop_fix_stuck_00f0
  8408                                  	 .L_loop_fix_stuck_end_00f0:
  8409 00005D33 4883C708                	add rdi, 8
  8410 00005D37 4889FC                  	 mov rsp, rdi
  8411 00005D3A 4C89C5                  	mov rbp, r8
  8412 00005D3D 5D                      	pop rbp
  8413 00005D3E FFE0                    	jmp rax 
  8414                                  
  8415                                          	.L_if_end_0074:
  8416                                  
  8417                                          	.L_if_end_0073:
  8418                                  
  8419 00005D40 E931020000                      	jmp .L_if_end_006f
  8420                                  
  8421                                          	.L_if_else_006f:
  8422 00005D45 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8423 00005D49 50                      	push rax
  8424 00005D4A 6A01                    	push 1
  8425 00005D4C 488B0425[40000000]      	mov rax, qword [free_var_8]
  8426 00005D54 803805                  	cmp byte [rax], T_closure 
  8427 00005D57 0F8572C10000                    jne L_code_ptr_error
  8428                                  
  8429 00005D5D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8430                                  
  8431 00005D61 53                              push rbx
  8432                                  
  8433 00005D62 FF5009                          call SOB_CLOSURE_CODE(rax)
  8434                                  
  8435                                          
  8436 00005D65 483D[02000000]                  	cmp rax, sob_boolean_false
  8437                                  
  8438 00005D6B 0F84A6010000                    	je .L_if_else_0070
  8439 00005D71 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8440 00005D75 50                      	push rax
  8441 00005D76 6A01                    	push 1
  8442 00005D78 488B0425[48000000]      	mov rax, qword [free_var_9]
  8443 00005D80 803805                  	cmp byte [rax], T_closure 
  8444 00005D83 0F8546C10000                    jne L_code_ptr_error
  8445                                  
  8446 00005D89 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8447                                  
  8448 00005D8D 53                              push rbx
  8449                                  
  8450 00005D8E FF5009                          call SOB_CLOSURE_CODE(rax)
  8451                                  
  8452                                          
  8453 00005D91 483D[02000000]                  	cmp rax, sob_boolean_false
  8454                                  
  8455 00005D97 0F8488000000                    	je .L_if_else_0071
  8456 00005D9D 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  8457 00005DA1 50                      	push rax
  8458 00005DA2 6A01                    	push 1
  8459 00005DA4 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8460 00005DAC 803805                  	cmp byte [rax], T_closure 
  8461 00005DAF 0F851AC10000                    jne L_code_ptr_error
  8462                                  
  8463 00005DB5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8464                                  
  8465 00005DB9 53                              push rbx
  8466                                  
  8467 00005DBA FF5009                          call SOB_CLOSURE_CODE(rax)
  8468                                  
  8469 00005DBD 50                              	push rax
  8470 00005DBE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8471 00005DC2 50                      	push rax
  8472                                  
  8473 00005DC3 6A02                    	push 2
  8474 00005DC5 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8475                                  	assert_closure(rax)
    42 00005DCD 803805              <1>  cmp byte [%1], %2
    43 00005DD0 0F8538C90000        <1>  jne L_error_incorrect_type
  8476 00005DD6 50                      	push rax 
  8477 00005DD7 FF7508                  	push qword [rbp + 8]
  8478 00005DDA FF7500                  	push qword [rbp]
  8479 00005DDD 4883C308                	add rbx ,8*1
  8480                                  	 .L_fix_stack_label_00ef:
  8481 00005DE1 488B5518                	mov rdx, qword[rbp+8*3]
  8482 00005DE5 4883C203                	add rdx, 3
  8483 00005DE9 48C1E203                	shl rdx, 3
  8484 00005DED 4889EF                  	mov rdi, rbp
  8485 00005DF0 4801D7                  	add rdi, rdx
  8486 00005DF3 4C8B4500                	mov r8, qword[rbp]
  8487 00005DF7 4889E9                  	mov rcx, rbp
  8488 00005DFA 4883E908                	sub rcx, 8
  8489                                  	 .L_loop_fix_stuck_00ef:
  8490 00005DFE 4839CC                  	cmp rsp, rcx
  8491 00005E01 7710                    ja .L_loop_fix_stuck_end_00ef
  8492 00005E03 488B19                   	mov rbx, qword[rcx]
  8493 00005E06 48891F                  	 mov qword[rdi], rbx
  8494 00005E09 4883EF08                	sub rdi, 8
  8495 00005E0D 4883E908                	sub rcx, 8
  8496 00005E11 EBEB                    jmp .L_loop_fix_stuck_00ef
  8497                                  	 .L_loop_fix_stuck_end_00ef:
  8498 00005E13 4883C708                	add rdi, 8
  8499 00005E17 4889FC                  	 mov rsp, rdi
  8500 00005E1A 4C89C5                  	mov rbp, r8
  8501 00005E1D 5D                      	pop rbp
  8502 00005E1E FFE0                    	jmp rax 
  8503                                  
  8504 00005E20 E9F0000000                      	jmp .L_if_end_0071
  8505                                  
  8506                                          	.L_if_else_0071:
  8507 00005E25 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8508 00005E29 50                      	push rax
  8509 00005E2A 6A01                    	push 1
  8510 00005E2C 488B0425[40000000]      	mov rax, qword [free_var_8]
  8511 00005E34 803805                  	cmp byte [rax], T_closure 
  8512 00005E37 0F8592C00000                    jne L_code_ptr_error
  8513                                  
  8514 00005E3D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8515                                  
  8516 00005E41 53                              push rbx
  8517                                  
  8518 00005E42 FF5009                          call SOB_CLOSURE_CODE(rax)
  8519                                  
  8520                                          
  8521 00005E45 483D[02000000]                  	cmp rax, sob_boolean_false
  8522                                  
  8523 00005E4B 7469                            	je .L_if_else_0072
  8524 00005E4D 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  8525 00005E51 50                      	push rax
  8526 00005E52 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8527 00005E56 50                      	push rax
  8528                                  
  8529 00005E57 6A02                    	push 2
  8530 00005E59 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8531                                  	assert_closure(rax)
    42 00005E61 803805              <1>  cmp byte [%1], %2
    43 00005E64 0F85A4C80000        <1>  jne L_error_incorrect_type
  8532 00005E6A 50                      	push rax 
  8533 00005E6B FF7508                  	push qword [rbp + 8]
  8534 00005E6E FF7500                  	push qword [rbp]
  8535 00005E71 4883C308                	add rbx ,8*1
  8536                                  	 .L_fix_stack_label_00ee:
  8537 00005E75 488B5518                	mov rdx, qword[rbp+8*3]
  8538 00005E79 4883C203                	add rdx, 3
  8539 00005E7D 48C1E203                	shl rdx, 3
  8540 00005E81 4889EF                  	mov rdi, rbp
  8541 00005E84 4801D7                  	add rdi, rdx
  8542 00005E87 4C8B4500                	mov r8, qword[rbp]
  8543 00005E8B 4889E9                  	mov rcx, rbp
  8544 00005E8E 4883E908                	sub rcx, 8
  8545                                  	 .L_loop_fix_stuck_00ee:
  8546 00005E92 4839CC                  	cmp rsp, rcx
  8547 00005E95 7710                    ja .L_loop_fix_stuck_end_00ee
  8548 00005E97 488B19                   	mov rbx, qword[rcx]
  8549 00005E9A 48891F                  	 mov qword[rdi], rbx
  8550 00005E9D 4883EF08                	sub rdi, 8
  8551 00005EA1 4883E908                	sub rcx, 8
  8552 00005EA5 EBEB                    jmp .L_loop_fix_stuck_00ee
  8553                                  	 .L_loop_fix_stuck_end_00ee:
  8554 00005EA7 4883C708                	add rdi, 8
  8555 00005EAB 4889FC                  	 mov rsp, rdi
  8556 00005EAE 4C89C5                  	mov rbp, r8
  8557 00005EB1 5D                      	pop rbp
  8558 00005EB2 FFE0                    	jmp rax 
  8559                                  
  8560 00005EB4 EB5F                            	jmp .L_if_end_0072
  8561                                  
  8562                                          	.L_if_else_0072:
  8563                                  	 
  8564 00005EB6 6A00                    	push 0
  8565 00005EB8 488B4510                	mov rax, qword [rbp + 8 * 2]
  8566                                  
  8567 00005EBC 488B00                                            	mov rax, qword[rax + 8 * 0]
  8568                                  
  8569 00005EBF 488B00                                            	mov rax, qword[rax + 8 * 0]
  8570                                  	assert_closure(rax)
    42 00005EC2 803805              <1>  cmp byte [%1], %2
    43 00005EC5 0F8543C80000        <1>  jne L_error_incorrect_type
  8571 00005ECB 50                      	push rax 
  8572 00005ECC FF7508                  	push qword [rbp + 8]
  8573 00005ECF FF7500                  	push qword [rbp]
  8574 00005ED2 4883C308                	add rbx ,8*1
  8575                                  	 .L_fix_stack_label_00ed:
  8576 00005ED6 488B5518                	mov rdx, qword[rbp+8*3]
  8577 00005EDA 4883C203                	add rdx, 3
  8578 00005EDE 48C1E203                	shl rdx, 3
  8579 00005EE2 4889EF                  	mov rdi, rbp
  8580 00005EE5 4801D7                  	add rdi, rdx
  8581 00005EE8 4C8B4500                	mov r8, qword[rbp]
  8582 00005EEC 4889E9                  	mov rcx, rbp
  8583 00005EEF 4883E908                	sub rcx, 8
  8584                                  	 .L_loop_fix_stuck_00ed:
  8585 00005EF3 4839CC                  	cmp rsp, rcx
  8586 00005EF6 7710                    ja .L_loop_fix_stuck_end_00ed
  8587 00005EF8 488B19                   	mov rbx, qword[rcx]
  8588 00005EFB 48891F                  	 mov qword[rdi], rbx
  8589 00005EFE 4883EF08                	sub rdi, 8
  8590 00005F02 4883E908                	sub rcx, 8
  8591 00005F06 EBEB                    jmp .L_loop_fix_stuck_00ed
  8592                                  	 .L_loop_fix_stuck_end_00ed:
  8593 00005F08 4883C708                	add rdi, 8
  8594 00005F0C 4889FC                  	 mov rsp, rdi
  8595 00005F0F 4C89C5                  	mov rbp, r8
  8596 00005F12 5D                      	pop rbp
  8597 00005F13 FFE0                    	jmp rax 
  8598                                  
  8599                                          	.L_if_end_0072:
  8600                                  
  8601                                          	.L_if_end_0071:
  8602                                  
  8603 00005F15 EB5F                            	jmp .L_if_end_0070
  8604                                  
  8605                                          	.L_if_else_0070:
  8606                                  	 
  8607 00005F17 6A00                    	push 0
  8608 00005F19 488B4510                	mov rax, qword [rbp + 8 * 2]
  8609                                  
  8610 00005F1D 488B00                                            	mov rax, qword[rax + 8 * 0]
  8611                                  
  8612 00005F20 488B00                                            	mov rax, qword[rax + 8 * 0]
  8613                                  	assert_closure(rax)
    42 00005F23 803805              <1>  cmp byte [%1], %2
    43 00005F26 0F85E2C70000        <1>  jne L_error_incorrect_type
  8614 00005F2C 50                      	push rax 
  8615 00005F2D FF7508                  	push qword [rbp + 8]
  8616 00005F30 FF7500                  	push qword [rbp]
  8617 00005F33 4883C308                	add rbx ,8*1
  8618                                  	 .L_fix_stack_label_00ec:
  8619 00005F37 488B5518                	mov rdx, qword[rbp+8*3]
  8620 00005F3B 4883C203                	add rdx, 3
  8621 00005F3F 48C1E203                	shl rdx, 3
  8622 00005F43 4889EF                  	mov rdi, rbp
  8623 00005F46 4801D7                  	add rdi, rdx
  8624 00005F49 4C8B4500                	mov r8, qword[rbp]
  8625 00005F4D 4889E9                  	mov rcx, rbp
  8626 00005F50 4883E908                	sub rcx, 8
  8627                                  	 .L_loop_fix_stuck_00ec:
  8628 00005F54 4839CC                  	cmp rsp, rcx
  8629 00005F57 7710                    ja .L_loop_fix_stuck_end_00ec
  8630 00005F59 488B19                   	mov rbx, qword[rcx]
  8631 00005F5C 48891F                  	 mov qword[rdi], rbx
  8632 00005F5F 4883EF08                	sub rdi, 8
  8633 00005F63 4883E908                	sub rcx, 8
  8634 00005F67 EBEB                    jmp .L_loop_fix_stuck_00ec
  8635                                  	 .L_loop_fix_stuck_end_00ec:
  8636 00005F69 4883C708                	add rdi, 8
  8637 00005F6D 4889FC                  	 mov rsp, rdi
  8638 00005F70 4C89C5                  	mov rbp, r8
  8639 00005F73 5D                      	pop rbp
  8640 00005F74 FFE0                    	jmp rax 
  8641                                  
  8642                                          	.L_if_end_0070:
  8643                                  
  8644                                          	.L_if_end_006f:
  8645 00005F76 C9                      	leave
  8646 00005F77 C22000                  	ret 8 * (2 + 2)
  8647                                  .L_lambda_simple_end_00d3:	; new closure is in rax
  8648 00005F7A 50                      	push rax
  8649                                  
  8650 00005F7B 6A01                    	push 1
  8651 00005F7D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8652 00005F82 E893AF0000              	call malloc
  8653 00005F87 50                      	push rax
  8654 00005F88 BF08000000              	mov rdi, 8 * 1	; new rib
  8655 00005F8D E888AF0000              	call malloc
  8656 00005F92 50                      	push rax
  8657 00005F93 BF10000000              	mov rdi, 8 * 2	; extended env
  8658 00005F98 E87DAF0000              	call malloc
  8659 00005F9D 488B7D10                	mov rdi, ENV
  8660 00005FA1 BE00000000              	mov rsi, 0
  8661 00005FA6 BA01000000              	mov rdx, 1
  8662                                  .L_lambda_simple_env_loop_00d4:	; ext_env[i + 1] <-- env[i]
  8663 00005FAB 4883FE01                	cmp rsi, 1
  8664 00005FAF 7410                    	je .L_lambda_simple_env_end_00d4
  8665 00005FB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8666 00005FB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8667 00005FB9 48FFC6                  	inc rsi
  8668 00005FBC 48FFC2                  	inc rdx
  8669 00005FBF EBEA                    	jmp .L_lambda_simple_env_loop_00d4
  8670                                  .L_lambda_simple_env_end_00d4:
  8671 00005FC1 5B                      	pop rbx
  8672 00005FC2 BE00000000              	mov rsi, 0
  8673                                  .L_lambda_simple_params_loop_00d4:	; copy params
  8674 00005FC7 4883FE01                	cmp rsi, 1
  8675 00005FCB 740E                    	je .L_lambda_simple_params_end_00d4
  8676 00005FCD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8677 00005FD2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8678 00005FD6 48FFC6                  	inc rsi
  8679 00005FD9 EBEC                    	jmp .L_lambda_simple_params_loop_00d4
  8680                                  .L_lambda_simple_params_end_00d4:
  8681 00005FDB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8682 00005FDE 4889C3                  	mov rbx, rax
  8683 00005FE1 58                      	pop rax
  8684 00005FE2 C60005                  	mov byte [rax], T_closure
  8685 00005FE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8686 00005FE9 48C74009[F65F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d4
  8687 00005FF1 E90D020000              	jmp .L_lambda_simple_end_00d4
  8688                                  .L_lambda_simple_code_00d4:	; lambda-simple body
  8689 00005FF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8690 00005FFC 740B                    	je .L_lambda_simple_arity_check_ok_00d4
  8691 00005FFE FF742410                	push qword [rsp + 8 * 2]
  8692 00006002 6A01                    	push 1
  8693 00006004 E9CAAE0000              	jmp L_error_incorrect_arity_simple
  8694                                  .L_lambda_simple_arity_check_ok_00d4:
  8695 00006009 C8000000                	enter 0, 0
  8696 0000600D BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  8697 00006012 E803AF0000              	call malloc
  8698 00006017 50                      	push rax
  8699 00006018 BF08000000              	mov rdi, 8 * 1  ; new rib
  8700 0000601D E8F8AE0000              	call malloc
  8701 00006022 50                      	push rax
  8702 00006023 BF18000000              	mov rdi, 8 * 3	; extended env
  8703 00006028 E8EDAE0000              	call malloc
  8704 0000602D 488B7D10                	mov rdi, ENV
  8705 00006031 BE00000000              	mov rsi, 0
  8706 00006036 BA01000000              	mov rdx, 1
  8707                                  .L_lambda_opt_env_loop_0021:	; ext_env = env
  8708 0000603B 4883FE02                	cmp rsi, 2
  8709 0000603F 7410                    	je .L_lambda_opt_env_end_0021
  8710 00006041 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8711 00006045 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8712 00006049 48FFC6                  	inc rsi
  8713 0000604C 48FFC2                  	inc rdx
  8714 0000604F EBEA                    	jmp .L_lambda_opt_env_loop_0021
  8715                                  .L_lambda_opt_env_end_0021:
  8716 00006051 5B                      	pop rbx
  8717 00006052 BE00000000              	mov rsi, 0
  8718                                  .L_lambda_opt_params_loop_0021:	; copy params
  8719 00006057 4883FE01                	cmp rsi, 1
  8720 0000605B 740E                    	je .L_lambda_opt_params_end_0021
  8721 0000605D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8722 00006062 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8723 00006066 48FFC6                  	inc rsi
  8724 00006069 EBEC                    	jmp .L_lambda_opt_params_loop_0021
  8725                                  .L_lambda_opt_params_end_0021:
  8726 0000606B 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  8727 0000606E 4889C3                  	mov rbx, rax
  8728 00006071 58                      	pop rax
  8729 00006072 C60005                  	mov byte [rax], T_closure
  8730 00006075 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8731 00006079 48C74009[86600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0021
  8732 00006081 E979010000              	jmp .L_lambda_opt_end_0021
  8733                                  .L_lambda_opt_code_0021:	; lambda-opt body
  8734 00006086 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8735 0000608C 740D                    	je .L_lambda_opt_arity_check_exact_0021  ;same num_of_args
  8736 0000608E 7F5B                    	jg .L_lambda_opt_arity_check_more_0021  ;greater num_of_args
  8737 00006090 FF742410                	push qword [rsp + 8 * 2]
  8738 00006094 6A00                    	push 0
  8739 00006096 E94CAE0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  8740                                  .L_lambda_opt_arity_check_exact_0021:
  8741 0000609B 4883EC08                	sub rsp, 8 * 1
  8742 0000609F 4889E7                  	mov rdi, rsp 
  8743                                  	;mov ret
  8744 000060A2 488B4708                	mov rax, qword [rdi + (8 * 1)]
  8745 000060A6 488907                  	mov qword [rdi], rax
  8746 000060A9 4883C708                	add rdi, 8
  8747                                  	;mov env
  8748 000060AD 488B4708                	mov rax, qword [rdi + (8 * 1)]
  8749 000060B1 488907                  	mov qword [rdi], rax
  8750 000060B4 4883C708                	add rdi, 8
  8751                                  	;mov & update COUNT
  8752 000060B8 488B4708                	mov rax, qword [rdi +(8 * 1)]
  8753 000060BC 4889C1                  	mov rcx, rax
  8754 000060BF 48FFC0                  	inc rax
  8755 000060C2 488907                  	mov qword [rdi], rax
  8756 000060C5 4883C708                	add rdi, 8
  8757                                  	;LOOP:move params
  8758                                  .L_lambda_opt_stack_shrink_loop_0061:	
  8759 000060C9 4883F900                	cmp rcx, 0
  8760 000060CD 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0061
  8761 000060CF 488B4708                	mov rax, qword [rdi + 8]
  8762 000060D3 488907                  	mov qword [rdi], rax
  8763 000060D6 4883C708                	add rdi, 8
  8764 000060DA 48FFC9                  	dec rcx
  8765 000060DD EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0061
  8766                                  .L_lambda_opt_stack_shrink_loop_exit_0061:	
  8767 000060DF 48C707[01000000]        	mov qword [rdi], sob_nil
  8768 000060E6 E994000000              	jmp .L_lambda_opt_stack_adjusted_0021
  8769                                  .L_lambda_opt_arity_check_more_0021:	
  8770 000060EB 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  8771 000060F0 488D0E                  	lea rcx, [rsi - 0]
  8772 000060F3 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  8773 000060F8 4989F2                  	mov r10, rsi
  8774 000060FB 49B9-                   	mov r9, sob_nil
  8774 000060FD [0100000000000000] 
  8775                                  .L_lambda_opt_stack_shrink_loop_0062:	
  8776 00006105 4883F900                	cmp rcx, 0
  8777 00006109 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0062
  8778 0000610B BF11000000              	mov rdi, 1 + 8 + 8
  8779 00006110 E805AE0000              	call malloc
  8780 00006115 C60021                  	mov byte [rax], T_pair
  8781 00006118 488B1E                  	mov rbx, qword [rsi]
  8782 0000611B 48895801                	mov SOB_PAIR_CAR(rax), rbx
  8783 0000611F 4C894809                	mov SOB_PAIR_CDR(rax), r9
  8784 00006123 4989C1                  	mov r9, rax
  8785 00006126 4883EE08                	sub rsi, 8 * 1
  8786 0000612A 48FFC9                  	dec rcx
  8787 0000612D EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0062
  8788                                  .L_lambda_opt_stack_shrink_loop_exit_0062:	
  8789 0000612F 4D890A                  	mov qword [r10], r9
  8790 00006132 4983EA08                	sub r10, 8 * 1; the new dest!
  8791 00006136 488D742410              	lea rsi, [rsp + (8 * (0 + 2))];the new src
  8792 0000613B B900000000              	mov rcx, 0 
  8793                                  .L_lambda_opt_stack_shrink_loop_0063:	
  8794 00006140 4883F900                	cmp rcx, 0
  8795 00006144 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0063
  8796 00006146 488B06                  	mov rax, qword [rsi]
  8797 00006149 498902                  	mov qword [r10], rax
  8798 0000614C 4983EA08                	sub r10, 8 * 1
  8799 00006150 4883EE08                	sub rsi, 8 * 1
  8800 00006154 48FFC9                  	dec rcx
  8801 00006157 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0063
  8802                                  .L_lambda_opt_stack_shrink_loop_exit_0063:	
  8803 00006159 49C70201000000          	mov qword [r10], 1 + 0; 1=opt
  8804 00006160 4983EA08                	sub r10, 8 * 1
  8805 00006164 4883EE08                	sub rsi, 8 * 1
  8806 00006168 488B06                  	mov rax, qword [rsi] ;env
  8807 0000616B 498902                  	mov qword [r10], rax
  8808 0000616E 4983EA08                	sub r10, 8 * 1
  8809 00006172 4883EE08                	sub rsi, 8 * 1
  8810 00006176 488B06                  	mov rax, qword [rsi] ;ret
  8811 00006179 498902                  	mov qword [r10], rax
  8812 0000617C 4C89D4                  	mov rsp, r10
  8813                                  .L_lambda_opt_stack_adjusted_0021:	
  8814 0000617F C8000000                	enter 0, 0
  8815 00006183 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  8816 00006187 50                      	push rax
  8817 00006188 48B8-                   	mov rax,L_constants + 32
  8817 0000618A [2000000000000000] 
  8818 00006192 50                      	push rax
  8819 00006193 488B4510                	mov rax, qword [rbp + 8 * 2]
  8820                                  
  8821 00006197 488B00                                            	mov rax, qword[rax + 8 * 0]
  8822                                  
  8823 0000619A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8824 0000619D 50                      	push rax
  8825                                  
  8826 0000619E 6A03                    	push 3
  8827 000061A0 488B0425[F8020000]      	mov rax, qword [free_var_95]
  8828                                  	assert_closure(rax)
    42 000061A8 803805              <1>  cmp byte [%1], %2
    43 000061AB 0F855DC50000        <1>  jne L_error_incorrect_type
  8829 000061B1 50                      	push rax 
  8830 000061B2 FF7508                  	push qword [rbp + 8]
  8831 000061B5 FF7500                  	push qword [rbp]
  8832 000061B8 4883C308                	add rbx ,8*1
  8833                                  	 .L_fix_stack_label_00f4:
  8834 000061BC 488B5518                	mov rdx, qword[rbp+8*3]
  8835 000061C0 4883C203                	add rdx, 3
  8836 000061C4 48C1E203                	shl rdx, 3
  8837 000061C8 4889EF                  	mov rdi, rbp
  8838 000061CB 4801D7                  	add rdi, rdx
  8839 000061CE 4C8B4500                	mov r8, qword[rbp]
  8840 000061D2 4889E9                  	mov rcx, rbp
  8841 000061D5 4883E908                	sub rcx, 8
  8842                                  	 .L_loop_fix_stuck_00f4:
  8843 000061D9 4839CC                  	cmp rsp, rcx
  8844 000061DC 7710                    ja .L_loop_fix_stuck_end_00f4
  8845 000061DE 488B19                   	mov rbx, qword[rcx]
  8846 000061E1 48891F                  	 mov qword[rdi], rbx
  8847 000061E4 4883EF08                	sub rdi, 8
  8848 000061E8 4883E908                	sub rcx, 8
  8849 000061EC EBEB                    jmp .L_loop_fix_stuck_00f4
  8850                                  	 .L_loop_fix_stuck_end_00f4:
  8851 000061EE 4883C708                	add rdi, 8
  8852 000061F2 4889FC                  	 mov rsp, rdi
  8853 000061F5 4C89C5                  	mov rbp, r8
  8854 000061F8 5D                      	pop rbp
  8855 000061F9 FFE0                    	jmp rax 
  8856 000061FB C9                      	leave
  8857 000061FC C21800                  	ret 8 * (2 + 1)
  8858                                  .L_lambda_opt_end_0021:	; new closure is in rax
  8859 000061FF C9                      	leave
  8860 00006200 C21800                  	ret 8 * (2 + 1)
  8861                                  .L_lambda_simple_end_00d4:	; new closure is in rax
  8862                                  	assert_closure(rax)
    42 00006203 803805              <1>  cmp byte [%1], %2
    43 00006206 0F8502C50000        <1>  jne L_error_incorrect_type
  8863 0000620C 50                      	push rax 
  8864 0000620D FF7508                  	push qword [rbp + 8]
  8865 00006210 FF7500                  	push qword [rbp]
  8866 00006213 4883C308                	add rbx ,8*1
  8867                                  	 .L_fix_stack_label_00f3:
  8868 00006217 488B5518                	mov rdx, qword[rbp+8*3]
  8869 0000621B 4883C203                	add rdx, 3
  8870 0000621F 48C1E203                	shl rdx, 3
  8871 00006223 4889EF                  	mov rdi, rbp
  8872 00006226 4801D7                  	add rdi, rdx
  8873 00006229 4C8B4500                	mov r8, qword[rbp]
  8874 0000622D 4889E9                  	mov rcx, rbp
  8875 00006230 4883E908                	sub rcx, 8
  8876                                  	 .L_loop_fix_stuck_00f3:
  8877 00006234 4839CC                  	cmp rsp, rcx
  8878 00006237 7710                    ja .L_loop_fix_stuck_end_00f3
  8879 00006239 488B19                   	mov rbx, qword[rcx]
  8880 0000623C 48891F                  	 mov qword[rdi], rbx
  8881 0000623F 4883EF08                	sub rdi, 8
  8882 00006243 4883E908                	sub rcx, 8
  8883 00006247 EBEB                    jmp .L_loop_fix_stuck_00f3
  8884                                  	 .L_loop_fix_stuck_end_00f3:
  8885 00006249 4883C708                	add rdi, 8
  8886 0000624D 4889FC                  	 mov rsp, rdi
  8887 00006250 4C89C5                  	mov rbp, r8
  8888 00006253 5D                      	pop rbp
  8889 00006254 FFE0                    	jmp rax 
  8890 00006256 C9                      	leave
  8891 00006257 C21800                  	ret 8 * (2 + 1)
  8892                                  .L_lambda_simple_end_00d2:	; new closure is in rax
  8893 0000625A 803805                  	cmp byte [rax], T_closure 
  8894 0000625D 0F856CBC0000                    jne L_code_ptr_error
  8895                                  
  8896 00006263 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  8897                                  
  8898 00006267 53                              push rbx
  8899                                  
  8900 00006268 FF5009                          call SOB_CLOSURE_CODE(rax)
  8901                                  
  8902 0000626B 48890425[08030000]              	mov qword [free_var_97], rax
  8903 00006273 48B8-                   	mov rax, sob_void
  8903 00006275 [0000000000000000] 
  8904                                  
  8905 0000627D 4889C7                  	mov rdi, rax
  8906 00006280 E8A6AC0000              	call print_sexpr_if_not_void
  8907                                  
  8908 00006285 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8909 0000628A E88BAC0000              	call malloc
  8910 0000628F 50                      	push rax
  8911 00006290 BF00000000              	mov rdi, 8 * 0	; new rib
  8912 00006295 E880AC0000              	call malloc
  8913 0000629A 50                      	push rax
  8914 0000629B BF08000000              	mov rdi, 8 * 1	; extended env
  8915 000062A0 E875AC0000              	call malloc
  8916 000062A5 488B7D10                	mov rdi, ENV
  8917 000062A9 BE00000000              	mov rsi, 0
  8918 000062AE BA01000000              	mov rdx, 1
  8919                                  .L_lambda_simple_env_loop_00d5:	; ext_env[i + 1] <-- env[i]
  8920 000062B3 4883FE00                	cmp rsi, 0
  8921 000062B7 7410                    	je .L_lambda_simple_env_end_00d5
  8922 000062B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8923 000062BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8924 000062C1 48FFC6                  	inc rsi
  8925 000062C4 48FFC2                  	inc rdx
  8926 000062C7 EBEA                    	jmp .L_lambda_simple_env_loop_00d5
  8927                                  .L_lambda_simple_env_end_00d5:
  8928 000062C9 5B                      	pop rbx
  8929 000062CA BE00000000              	mov rsi, 0
  8930                                  .L_lambda_simple_params_loop_00d5:	; copy params
  8931 000062CF 4883FE00                	cmp rsi, 0
  8932 000062D3 740E                    	je .L_lambda_simple_params_end_00d5
  8933 000062D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8934 000062DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8935 000062DE 48FFC6                  	inc rsi
  8936 000062E1 EBEC                    	jmp .L_lambda_simple_params_loop_00d5
  8937                                  .L_lambda_simple_params_end_00d5:
  8938 000062E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8939 000062E6 4889C3                  	mov rbx, rax
  8940 000062E9 58                      	pop rax
  8941 000062EA C60005                  	mov byte [rax], T_closure
  8942 000062ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8943 000062F1 48C74009[FE620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d5
  8944 000062F9 E98E000000              	jmp .L_lambda_simple_end_00d5
  8945                                  .L_lambda_simple_code_00d5:	; lambda-simple body
  8946 000062FE 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8947 00006304 740B                    	je .L_lambda_simple_arity_check_ok_00d5
  8948 00006306 FF742410                	push qword [rsp + 8 * 2]
  8949 0000630A 6A00                    	push 0
  8950 0000630C E9C2AB0000              	jmp L_error_incorrect_arity_simple
  8951                                  .L_lambda_simple_arity_check_ok_00d5:
  8952 00006311 C8000000                	enter 0, 0
  8953 00006315 48B8-                   	 	mov rax,L_constants + 68
  8953 00006317 [4400000000000000] 
  8954 0000631F 50                      	push rax
  8955 00006320 48B8-                   	mov rax,L_constants + 119
  8955 00006322 [7700000000000000] 
  8956 0000632A 50                      	push rax
  8957                                  
  8958 0000632B 6A02                    	push 2
  8959 0000632D 488B0425[30010000]      	mov rax, qword [free_var_38]
  8960                                  	assert_closure(rax)
    42 00006335 803805              <1>  cmp byte [%1], %2
    43 00006338 0F85D0C30000        <1>  jne L_error_incorrect_type
  8961 0000633E 50                      	push rax 
  8962 0000633F FF7508                  	push qword [rbp + 8]
  8963 00006342 FF7500                  	push qword [rbp]
  8964 00006345 4883C308                	add rbx ,8*1
  8965                                  	 .L_fix_stack_label_00f5:
  8966 00006349 488B5518                	mov rdx, qword[rbp+8*3]
  8967 0000634D 4883C203                	add rdx, 3
  8968 00006351 48C1E203                	shl rdx, 3
  8969 00006355 4889EF                  	mov rdi, rbp
  8970 00006358 4801D7                  	add rdi, rdx
  8971 0000635B 4C8B4500                	mov r8, qword[rbp]
  8972 0000635F 4889E9                  	mov rcx, rbp
  8973 00006362 4883E908                	sub rcx, 8
  8974                                  	 .L_loop_fix_stuck_00f5:
  8975 00006366 4839CC                  	cmp rsp, rcx
  8976 00006369 7710                    ja .L_loop_fix_stuck_end_00f5
  8977 0000636B 488B19                   	mov rbx, qword[rcx]
  8978 0000636E 48891F                  	 mov qword[rdi], rbx
  8979 00006371 4883EF08                	sub rdi, 8
  8980 00006375 4883E908                	sub rcx, 8
  8981 00006379 EBEB                    jmp .L_loop_fix_stuck_00f5
  8982                                  	 .L_loop_fix_stuck_end_00f5:
  8983 0000637B 4883C708                	add rdi, 8
  8984 0000637F 4889FC                  	 mov rsp, rdi
  8985 00006382 4C89C5                  	mov rbp, r8
  8986 00006385 5D                      	pop rbp
  8987 00006386 FFE0                    	jmp rax 
  8988 00006388 C9                      	leave
  8989 00006389 C21000                  	ret 8 * (2 + 0)
  8990                                  .L_lambda_simple_end_00d5:	; new closure is in rax
  8991 0000638C 50                      	push rax
  8992 0000638D 6A01                    	push 1
  8993 0000638F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8994 00006394 E881AB0000              	call malloc
  8995 00006399 50                      	push rax
  8996 0000639A BF00000000              	mov rdi, 8 * 0	; new rib
  8997 0000639F E876AB0000              	call malloc
  8998 000063A4 50                      	push rax
  8999 000063A5 BF08000000              	mov rdi, 8 * 1	; extended env
  9000 000063AA E86BAB0000              	call malloc
  9001 000063AF 488B7D10                	mov rdi, ENV
  9002 000063B3 BE00000000              	mov rsi, 0
  9003 000063B8 BA01000000              	mov rdx, 1
  9004                                  .L_lambda_simple_env_loop_00d6:	; ext_env[i + 1] <-- env[i]
  9005 000063BD 4883FE00                	cmp rsi, 0
  9006 000063C1 7410                    	je .L_lambda_simple_env_end_00d6
  9007 000063C3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9008 000063C7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9009 000063CB 48FFC6                  	inc rsi
  9010 000063CE 48FFC2                  	inc rdx
  9011 000063D1 EBEA                    	jmp .L_lambda_simple_env_loop_00d6
  9012                                  .L_lambda_simple_env_end_00d6:
  9013 000063D3 5B                      	pop rbx
  9014 000063D4 BE00000000              	mov rsi, 0
  9015                                  .L_lambda_simple_params_loop_00d6:	; copy params
  9016 000063D9 4883FE00                	cmp rsi, 0
  9017 000063DD 740E                    	je .L_lambda_simple_params_end_00d6
  9018 000063DF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9019 000063E4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9020 000063E8 48FFC6                  	inc rsi
  9021 000063EB EBEC                    	jmp .L_lambda_simple_params_loop_00d6
  9022                                  .L_lambda_simple_params_end_00d6:
  9023 000063ED 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9024 000063F0 4889C3                  	mov rbx, rax
  9025 000063F3 58                      	pop rax
  9026 000063F4 C60005                  	mov byte [rax], T_closure
  9027 000063F7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9028 000063FB 48C74009[08640000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d6
  9029 00006403 E944090000              	jmp .L_lambda_simple_end_00d6
  9030                                  .L_lambda_simple_code_00d6:	; lambda-simple body
  9031 00006408 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9032 0000640E 740B                    	je .L_lambda_simple_arity_check_ok_00d6
  9033 00006410 FF742410                	push qword [rsp + 8 * 2]
  9034 00006414 6A01                    	push 1
  9035 00006416 E9B8AA0000              	jmp L_error_incorrect_arity_simple
  9036                                  .L_lambda_simple_arity_check_ok_00d6:
  9037 0000641B C8000000                	enter 0, 0
  9038 0000641F BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
  9039 00006424 E8F1AA0000              	call malloc
  9040 00006429 50                      	push rax
  9041 0000642A BF08000000              	mov rdi, 8 * 1	; new rib
  9042 0000642F E8E6AA0000              	call malloc
  9043 00006434 50                      	push rax
  9044 00006435 BF10000000              	mov rdi, 8 * 2	; extended env
  9045 0000643A E8DBAA0000              	call malloc
  9046 0000643F 488B7D10                	mov rdi, ENV
  9047 00006443 BE00000000              	mov rsi, 0
  9048 00006448 BA01000000              	mov rdx, 1
  9049                                  .L_lambda_simple_env_loop_00d7:	; ext_env[i + 1] <-- env[i]
  9050 0000644D 4883FE01                	cmp rsi, 1
  9051 00006451 7410                    	je .L_lambda_simple_env_end_00d7
  9052 00006453 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9053 00006457 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9054 0000645B 48FFC6                  	inc rsi
  9055 0000645E 48FFC2                  	inc rdx
  9056 00006461 EBEA                    	jmp .L_lambda_simple_env_loop_00d7
  9057                                  .L_lambda_simple_env_end_00d7:
  9058 00006463 5B                      	pop rbx
  9059 00006464 BE00000000              	mov rsi, 0
  9060                                  .L_lambda_simple_params_loop_00d7:	; copy params
  9061 00006469 4883FE01                	cmp rsi, 1
  9062 0000646D 740E                    	je .L_lambda_simple_params_end_00d7
  9063 0000646F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9064 00006474 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9065 00006478 48FFC6                  	inc rsi
  9066 0000647B EBEC                    	jmp .L_lambda_simple_params_loop_00d7
  9067                                  .L_lambda_simple_params_end_00d7:
  9068 0000647D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9069 00006480 4889C3                  	mov rbx, rax
  9070 00006483 58                      	pop rax
  9071 00006484 C60005                  	mov byte [rax], T_closure
  9072 00006487 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9073 0000648B 48C74009[98640000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d7
  9074 00006493 E921040000              	jmp .L_lambda_simple_end_00d7
  9075                                  .L_lambda_simple_code_00d7:	; lambda-simple body
  9076 00006498 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9077 0000649E 740B                    	je .L_lambda_simple_arity_check_ok_00d7
  9078 000064A0 FF742410                	push qword [rsp + 8 * 2]
  9079 000064A4 6A02                    	push 2
  9080 000064A6 E928AA0000              	jmp L_error_incorrect_arity_simple
  9081                                  .L_lambda_simple_arity_check_ok_00d7:
  9082 000064AB C8000000                	enter 0, 0
  9083 000064AF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9084 000064B3 50                      	push rax
  9085 000064B4 6A01                    	push 1
  9086 000064B6 488B0425[48000000]      	mov rax, qword [free_var_9]
  9087 000064BE 803805                  	cmp byte [rax], T_closure 
  9088 000064C1 0F8508BA0000                    jne L_code_ptr_error
  9089                                  
  9090 000064C7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9091                                  
  9092 000064CB 53                              push rbx
  9093                                  
  9094 000064CC FF5009                          call SOB_CLOSURE_CODE(rax)
  9095                                  
  9096                                          
  9097 000064CF 483D[02000000]                  	cmp rax, sob_boolean_false
  9098                                  
  9099 000064D5 0F84A9010000                    	je .L_if_else_0075
  9100 000064DB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9101 000064DF 50                      	push rax
  9102 000064E0 6A01                    	push 1
  9103 000064E2 488B0425[48000000]      	mov rax, qword [free_var_9]
  9104 000064EA 803805                  	cmp byte [rax], T_closure 
  9105 000064ED 0F85DCB90000                    jne L_code_ptr_error
  9106                                  
  9107 000064F3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9108                                  
  9109 000064F7 53                              push rbx
  9110                                  
  9111 000064F8 FF5009                          call SOB_CLOSURE_CODE(rax)
  9112                                  
  9113                                          
  9114 000064FB 483D[02000000]                  	cmp rax, sob_boolean_false
  9115                                  
  9116 00006501 746C                            	je .L_if_else_0079
  9117 00006503 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  9118 00006507 50                      	push rax
  9119 00006508 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9120 0000650C 50                      	push rax
  9121                                  
  9122 0000650D 6A02                    	push 2
  9123 0000650F 488B0425[18010000]      	mov rax, qword [free_var_35]
  9124                                  	assert_closure(rax)
    42 00006517 803805              <1>  cmp byte [%1], %2
    43 0000651A 0F85EEC10000        <1>  jne L_error_incorrect_type
  9125 00006520 50                      	push rax 
  9126 00006521 FF7508                  	push qword [rbp + 8]
  9127 00006524 FF7500                  	push qword [rbp]
  9128 00006527 4883C308                	add rbx ,8*1
  9129                                  	 .L_fix_stack_label_00fc:
  9130 0000652B 488B5518                	mov rdx, qword[rbp+8*3]
  9131 0000652F 4883C203                	add rdx, 3
  9132 00006533 48C1E203                	shl rdx, 3
  9133 00006537 4889EF                  	mov rdi, rbp
  9134 0000653A 4801D7                  	add rdi, rdx
  9135 0000653D 4C8B4500                	mov r8, qword[rbp]
  9136 00006541 4889E9                  	mov rcx, rbp
  9137 00006544 4883E908                	sub rcx, 8
  9138                                  	 .L_loop_fix_stuck_00fc:
  9139 00006548 4839CC                  	cmp rsp, rcx
  9140 0000654B 7710                    ja .L_loop_fix_stuck_end_00fc
  9141 0000654D 488B19                   	mov rbx, qword[rcx]
  9142 00006550 48891F                  	 mov qword[rdi], rbx
  9143 00006553 4883EF08                	sub rdi, 8
  9144 00006557 4883E908                	sub rcx, 8
  9145 0000655B EBEB                    jmp .L_loop_fix_stuck_00fc
  9146                                  	 .L_loop_fix_stuck_end_00fc:
  9147 0000655D 4883C708                	add rdi, 8
  9148 00006561 4889FC                  	 mov rsp, rdi
  9149 00006564 4C89C5                  	mov rbp, r8
  9150 00006567 5D                      	pop rbp
  9151 00006568 FFE0                    	jmp rax 
  9152                                  
  9153 0000656A E910010000                      	jmp .L_if_end_0079
  9154                                  
  9155                                          	.L_if_else_0079:
  9156 0000656F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9157 00006573 50                      	push rax
  9158 00006574 6A01                    	push 1
  9159 00006576 488B0425[40000000]      	mov rax, qword [free_var_8]
  9160 0000657E 803805                  	cmp byte [rax], T_closure 
  9161 00006581 0F8548B90000                    jne L_code_ptr_error
  9162                                  
  9163 00006587 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9164                                  
  9165 0000658B 53                              push rbx
  9166                                  
  9167 0000658C FF5009                          call SOB_CLOSURE_CODE(rax)
  9168                                  
  9169                                          
  9170 0000658F 483D[02000000]                  	cmp rax, sob_boolean_false
  9171                                  
  9172 00006595 0F8485000000                    	je .L_if_else_007a
  9173 0000659B 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  9174 0000659F 50                      	push rax
  9175 000065A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9176 000065A4 50                      	push rax
  9177 000065A5 6A01                    	push 1
  9178 000065A7 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9179 000065AF 803805                  	cmp byte [rax], T_closure 
  9180 000065B2 0F8517B90000                    jne L_code_ptr_error
  9181                                  
  9182 000065B8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9183                                  
  9184 000065BC 53                              push rbx
  9185                                  
  9186 000065BD FF5009                          call SOB_CLOSURE_CODE(rax)
  9187                                  
  9188 000065C0 50                              	push rax
  9189                                  
  9190 000065C1 6A02                    	push 2
  9191 000065C3 488B0425[F8000000]      	mov rax, qword [free_var_31]
  9192                                  	assert_closure(rax)
    42 000065CB 803805              <1>  cmp byte [%1], %2
    43 000065CE 0F853AC10000        <1>  jne L_error_incorrect_type
  9193 000065D4 50                      	push rax 
  9194 000065D5 FF7508                  	push qword [rbp + 8]
  9195 000065D8 FF7500                  	push qword [rbp]
  9196 000065DB 4883C308                	add rbx ,8*1
  9197                                  	 .L_fix_stack_label_00fb:
  9198 000065DF 488B5518                	mov rdx, qword[rbp+8*3]
  9199 000065E3 4883C203                	add rdx, 3
  9200 000065E7 48C1E203                	shl rdx, 3
  9201 000065EB 4889EF                  	mov rdi, rbp
  9202 000065EE 4801D7                  	add rdi, rdx
  9203 000065F1 4C8B4500                	mov r8, qword[rbp]
  9204 000065F5 4889E9                  	mov rcx, rbp
  9205 000065F8 4883E908                	sub rcx, 8
  9206                                  	 .L_loop_fix_stuck_00fb:
  9207 000065FC 4839CC                  	cmp rsp, rcx
  9208 000065FF 7710                    ja .L_loop_fix_stuck_end_00fb
  9209 00006601 488B19                   	mov rbx, qword[rcx]
  9210 00006604 48891F                  	 mov qword[rdi], rbx
  9211 00006607 4883EF08                	sub rdi, 8
  9212 0000660B 4883E908                	sub rcx, 8
  9213 0000660F EBEB                    jmp .L_loop_fix_stuck_00fb
  9214                                  	 .L_loop_fix_stuck_end_00fb:
  9215 00006611 4883C708                	add rdi, 8
  9216 00006615 4889FC                  	 mov rsp, rdi
  9217 00006618 4C89C5                  	mov rbp, r8
  9218 0000661B 5D                      	pop rbp
  9219 0000661C FFE0                    	jmp rax 
  9220                                  
  9221 0000661E EB5F                            	jmp .L_if_end_007a
  9222                                  
  9223                                          	.L_if_else_007a:
  9224                                  	 
  9225 00006620 6A00                    	push 0
  9226 00006622 488B4510                	mov rax, qword [rbp + 8 * 2]
  9227                                  
  9228 00006626 488B00                                            	mov rax, qword[rax + 8 * 0]
  9229                                  
  9230 00006629 488B00                                            	mov rax, qword[rax + 8 * 0]
  9231                                  	assert_closure(rax)
    42 0000662C 803805              <1>  cmp byte [%1], %2
    43 0000662F 0F85D9C00000        <1>  jne L_error_incorrect_type
  9232 00006635 50                      	push rax 
  9233 00006636 FF7508                  	push qword [rbp + 8]
  9234 00006639 FF7500                  	push qword [rbp]
  9235 0000663C 4883C308                	add rbx ,8*1
  9236                                  	 .L_fix_stack_label_00fa:
  9237 00006640 488B5518                	mov rdx, qword[rbp+8*3]
  9238 00006644 4883C203                	add rdx, 3
  9239 00006648 48C1E203                	shl rdx, 3
  9240 0000664C 4889EF                  	mov rdi, rbp
  9241 0000664F 4801D7                  	add rdi, rdx
  9242 00006652 4C8B4500                	mov r8, qword[rbp]
  9243 00006656 4889E9                  	mov rcx, rbp
  9244 00006659 4883E908                	sub rcx, 8
  9245                                  	 .L_loop_fix_stuck_00fa:
  9246 0000665D 4839CC                  	cmp rsp, rcx
  9247 00006660 7710                    ja .L_loop_fix_stuck_end_00fa
  9248 00006662 488B19                   	mov rbx, qword[rcx]
  9249 00006665 48891F                  	 mov qword[rdi], rbx
  9250 00006668 4883EF08                	sub rdi, 8
  9251 0000666C 4883E908                	sub rcx, 8
  9252 00006670 EBEB                    jmp .L_loop_fix_stuck_00fa
  9253                                  	 .L_loop_fix_stuck_end_00fa:
  9254 00006672 4883C708                	add rdi, 8
  9255 00006676 4889FC                  	 mov rsp, rdi
  9256 00006679 4C89C5                  	mov rbp, r8
  9257 0000667C 5D                      	pop rbp
  9258 0000667D FFE0                    	jmp rax 
  9259                                  
  9260                                          	.L_if_end_007a:
  9261                                  
  9262                                          	.L_if_end_0079:
  9263                                  
  9264 0000667F E931020000                      	jmp .L_if_end_0075
  9265                                  
  9266                                          	.L_if_else_0075:
  9267 00006684 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9268 00006688 50                      	push rax
  9269 00006689 6A01                    	push 1
  9270 0000668B 488B0425[40000000]      	mov rax, qword [free_var_8]
  9271 00006693 803805                  	cmp byte [rax], T_closure 
  9272 00006696 0F8533B80000                    jne L_code_ptr_error
  9273                                  
  9274 0000669C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9275                                  
  9276 000066A0 53                              push rbx
  9277                                  
  9278 000066A1 FF5009                          call SOB_CLOSURE_CODE(rax)
  9279                                  
  9280                                          
  9281 000066A4 483D[02000000]                  	cmp rax, sob_boolean_false
  9282                                  
  9283 000066AA 0F84A6010000                    	je .L_if_else_0076
  9284 000066B0 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9285 000066B4 50                      	push rax
  9286 000066B5 6A01                    	push 1
  9287 000066B7 488B0425[48000000]      	mov rax, qword [free_var_9]
  9288 000066BF 803805                  	cmp byte [rax], T_closure 
  9289 000066C2 0F8507B80000                    jne L_code_ptr_error
  9290                                  
  9291 000066C8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9292                                  
  9293 000066CC 53                              push rbx
  9294                                  
  9295 000066CD FF5009                          call SOB_CLOSURE_CODE(rax)
  9296                                  
  9297                                          
  9298 000066D0 483D[02000000]                  	cmp rax, sob_boolean_false
  9299                                  
  9300 000066D6 0F8488000000                    	je .L_if_else_0077
  9301 000066DC 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  9302 000066E0 50                      	push rax
  9303 000066E1 6A01                    	push 1
  9304 000066E3 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9305 000066EB 803805                  	cmp byte [rax], T_closure 
  9306 000066EE 0F85DBB70000                    jne L_code_ptr_error
  9307                                  
  9308 000066F4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9309                                  
  9310 000066F8 53                              push rbx
  9311                                  
  9312 000066F9 FF5009                          call SOB_CLOSURE_CODE(rax)
  9313                                  
  9314 000066FC 50                              	push rax
  9315 000066FD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9316 00006701 50                      	push rax
  9317                                  
  9318 00006702 6A02                    	push 2
  9319 00006704 488B0425[F8000000]      	mov rax, qword [free_var_31]
  9320                                  	assert_closure(rax)
    42 0000670C 803805              <1>  cmp byte [%1], %2
    43 0000670F 0F85F9BF0000        <1>  jne L_error_incorrect_type
  9321 00006715 50                      	push rax 
  9322 00006716 FF7508                  	push qword [rbp + 8]
  9323 00006719 FF7500                  	push qword [rbp]
  9324 0000671C 4883C308                	add rbx ,8*1
  9325                                  	 .L_fix_stack_label_00f9:
  9326 00006720 488B5518                	mov rdx, qword[rbp+8*3]
  9327 00006724 4883C203                	add rdx, 3
  9328 00006728 48C1E203                	shl rdx, 3
  9329 0000672C 4889EF                  	mov rdi, rbp
  9330 0000672F 4801D7                  	add rdi, rdx
  9331 00006732 4C8B4500                	mov r8, qword[rbp]
  9332 00006736 4889E9                  	mov rcx, rbp
  9333 00006739 4883E908                	sub rcx, 8
  9334                                  	 .L_loop_fix_stuck_00f9:
  9335 0000673D 4839CC                  	cmp rsp, rcx
  9336 00006740 7710                    ja .L_loop_fix_stuck_end_00f9
  9337 00006742 488B19                   	mov rbx, qword[rcx]
  9338 00006745 48891F                  	 mov qword[rdi], rbx
  9339 00006748 4883EF08                	sub rdi, 8
  9340 0000674C 4883E908                	sub rcx, 8
  9341 00006750 EBEB                    jmp .L_loop_fix_stuck_00f9
  9342                                  	 .L_loop_fix_stuck_end_00f9:
  9343 00006752 4883C708                	add rdi, 8
  9344 00006756 4889FC                  	 mov rsp, rdi
  9345 00006759 4C89C5                  	mov rbp, r8
  9346 0000675C 5D                      	pop rbp
  9347 0000675D FFE0                    	jmp rax 
  9348                                  
  9349 0000675F E9F0000000                      	jmp .L_if_end_0077
  9350                                  
  9351                                          	.L_if_else_0077:
  9352 00006764 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9353 00006768 50                      	push rax
  9354 00006769 6A01                    	push 1
  9355 0000676B 488B0425[40000000]      	mov rax, qword [free_var_8]
  9356 00006773 803805                  	cmp byte [rax], T_closure 
  9357 00006776 0F8553B70000                    jne L_code_ptr_error
  9358                                  
  9359 0000677C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9360                                  
  9361 00006780 53                              push rbx
  9362                                  
  9363 00006781 FF5009                          call SOB_CLOSURE_CODE(rax)
  9364                                  
  9365                                          
  9366 00006784 483D[02000000]                  	cmp rax, sob_boolean_false
  9367                                  
  9368 0000678A 7469                            	je .L_if_else_0078
  9369 0000678C 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  9370 00006790 50                      	push rax
  9371 00006791 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9372 00006795 50                      	push rax
  9373                                  
  9374 00006796 6A02                    	push 2
  9375 00006798 488B0425[F8000000]      	mov rax, qword [free_var_31]
  9376                                  	assert_closure(rax)
    42 000067A0 803805              <1>  cmp byte [%1], %2
    43 000067A3 0F8565BF0000        <1>  jne L_error_incorrect_type
  9377 000067A9 50                      	push rax 
  9378 000067AA FF7508                  	push qword [rbp + 8]
  9379 000067AD FF7500                  	push qword [rbp]
  9380 000067B0 4883C308                	add rbx ,8*1
  9381                                  	 .L_fix_stack_label_00f8:
  9382 000067B4 488B5518                	mov rdx, qword[rbp+8*3]
  9383 000067B8 4883C203                	add rdx, 3
  9384 000067BC 48C1E203                	shl rdx, 3
  9385 000067C0 4889EF                  	mov rdi, rbp
  9386 000067C3 4801D7                  	add rdi, rdx
  9387 000067C6 4C8B4500                	mov r8, qword[rbp]
  9388 000067CA 4889E9                  	mov rcx, rbp
  9389 000067CD 4883E908                	sub rcx, 8
  9390                                  	 .L_loop_fix_stuck_00f8:
  9391 000067D1 4839CC                  	cmp rsp, rcx
  9392 000067D4 7710                    ja .L_loop_fix_stuck_end_00f8
  9393 000067D6 488B19                   	mov rbx, qword[rcx]
  9394 000067D9 48891F                  	 mov qword[rdi], rbx
  9395 000067DC 4883EF08                	sub rdi, 8
  9396 000067E0 4883E908                	sub rcx, 8
  9397 000067E4 EBEB                    jmp .L_loop_fix_stuck_00f8
  9398                                  	 .L_loop_fix_stuck_end_00f8:
  9399 000067E6 4883C708                	add rdi, 8
  9400 000067EA 4889FC                  	 mov rsp, rdi
  9401 000067ED 4C89C5                  	mov rbp, r8
  9402 000067F0 5D                      	pop rbp
  9403 000067F1 FFE0                    	jmp rax 
  9404                                  
  9405 000067F3 EB5F                            	jmp .L_if_end_0078
  9406                                  
  9407                                          	.L_if_else_0078:
  9408                                  	 
  9409 000067F5 6A00                    	push 0
  9410 000067F7 488B4510                	mov rax, qword [rbp + 8 * 2]
  9411                                  
  9412 000067FB 488B00                                            	mov rax, qword[rax + 8 * 0]
  9413                                  
  9414 000067FE 488B00                                            	mov rax, qword[rax + 8 * 0]
  9415                                  	assert_closure(rax)
    42 00006801 803805              <1>  cmp byte [%1], %2
    43 00006804 0F8504BF0000        <1>  jne L_error_incorrect_type
  9416 0000680A 50                      	push rax 
  9417 0000680B FF7508                  	push qword [rbp + 8]
  9418 0000680E FF7500                  	push qword [rbp]
  9419 00006811 4883C308                	add rbx ,8*1
  9420                                  	 .L_fix_stack_label_00f7:
  9421 00006815 488B5518                	mov rdx, qword[rbp+8*3]
  9422 00006819 4883C203                	add rdx, 3
  9423 0000681D 48C1E203                	shl rdx, 3
  9424 00006821 4889EF                  	mov rdi, rbp
  9425 00006824 4801D7                  	add rdi, rdx
  9426 00006827 4C8B4500                	mov r8, qword[rbp]
  9427 0000682B 4889E9                  	mov rcx, rbp
  9428 0000682E 4883E908                	sub rcx, 8
  9429                                  	 .L_loop_fix_stuck_00f7:
  9430 00006832 4839CC                  	cmp rsp, rcx
  9431 00006835 7710                    ja .L_loop_fix_stuck_end_00f7
  9432 00006837 488B19                   	mov rbx, qword[rcx]
  9433 0000683A 48891F                  	 mov qword[rdi], rbx
  9434 0000683D 4883EF08                	sub rdi, 8
  9435 00006841 4883E908                	sub rcx, 8
  9436 00006845 EBEB                    jmp .L_loop_fix_stuck_00f7
  9437                                  	 .L_loop_fix_stuck_end_00f7:
  9438 00006847 4883C708                	add rdi, 8
  9439 0000684B 4889FC                  	 mov rsp, rdi
  9440 0000684E 4C89C5                  	mov rbp, r8
  9441 00006851 5D                      	pop rbp
  9442 00006852 FFE0                    	jmp rax 
  9443                                  
  9444                                          	.L_if_end_0078:
  9445                                  
  9446                                          	.L_if_end_0077:
  9447                                  
  9448 00006854 EB5F                            	jmp .L_if_end_0076
  9449                                  
  9450                                          	.L_if_else_0076:
  9451                                  	 
  9452 00006856 6A00                    	push 0
  9453 00006858 488B4510                	mov rax, qword [rbp + 8 * 2]
  9454                                  
  9455 0000685C 488B00                                            	mov rax, qword[rax + 8 * 0]
  9456                                  
  9457 0000685F 488B00                                            	mov rax, qword[rax + 8 * 0]
  9458                                  	assert_closure(rax)
    42 00006862 803805              <1>  cmp byte [%1], %2
    43 00006865 0F85A3BE0000        <1>  jne L_error_incorrect_type
  9459 0000686B 50                      	push rax 
  9460 0000686C FF7508                  	push qword [rbp + 8]
  9461 0000686F FF7500                  	push qword [rbp]
  9462 00006872 4883C308                	add rbx ,8*1
  9463                                  	 .L_fix_stack_label_00f6:
  9464 00006876 488B5518                	mov rdx, qword[rbp+8*3]
  9465 0000687A 4883C203                	add rdx, 3
  9466 0000687E 48C1E203                	shl rdx, 3
  9467 00006882 4889EF                  	mov rdi, rbp
  9468 00006885 4801D7                  	add rdi, rdx
  9469 00006888 4C8B4500                	mov r8, qword[rbp]
  9470 0000688C 4889E9                  	mov rcx, rbp
  9471 0000688F 4883E908                	sub rcx, 8
  9472                                  	 .L_loop_fix_stuck_00f6:
  9473 00006893 4839CC                  	cmp rsp, rcx
  9474 00006896 7710                    ja .L_loop_fix_stuck_end_00f6
  9475 00006898 488B19                   	mov rbx, qword[rcx]
  9476 0000689B 48891F                  	 mov qword[rdi], rbx
  9477 0000689E 4883EF08                	sub rdi, 8
  9478 000068A2 4883E908                	sub rcx, 8
  9479 000068A6 EBEB                    jmp .L_loop_fix_stuck_00f6
  9480                                  	 .L_loop_fix_stuck_end_00f6:
  9481 000068A8 4883C708                	add rdi, 8
  9482 000068AC 4889FC                  	 mov rsp, rdi
  9483 000068AF 4C89C5                  	mov rbp, r8
  9484 000068B2 5D                      	pop rbp
  9485 000068B3 FFE0                    	jmp rax 
  9486                                  
  9487                                          	.L_if_end_0076:
  9488                                  
  9489                                          	.L_if_end_0075:
  9490 000068B5 C9                      	leave
  9491 000068B6 C22000                  	ret 8 * (2 + 2)
  9492                                  .L_lambda_simple_end_00d7:	; new closure is in rax
  9493 000068B9 50                      	push rax
  9494                                  
  9495 000068BA 6A01                    	push 1
  9496 000068BC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9497 000068C1 E854A60000              	call malloc
  9498 000068C6 50                      	push rax
  9499 000068C7 BF08000000              	mov rdi, 8 * 1	; new rib
  9500 000068CC E849A60000              	call malloc
  9501 000068D1 50                      	push rax
  9502 000068D2 BF10000000              	mov rdi, 8 * 2	; extended env
  9503 000068D7 E83EA60000              	call malloc
  9504 000068DC 488B7D10                	mov rdi, ENV
  9505 000068E0 BE00000000              	mov rsi, 0
  9506 000068E5 BA01000000              	mov rdx, 1
  9507                                  .L_lambda_simple_env_loop_00d8:	; ext_env[i + 1] <-- env[i]
  9508 000068EA 4883FE01                	cmp rsi, 1
  9509 000068EE 7410                    	je .L_lambda_simple_env_end_00d8
  9510 000068F0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9511 000068F4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9512 000068F8 48FFC6                  	inc rsi
  9513 000068FB 48FFC2                  	inc rdx
  9514 000068FE EBEA                    	jmp .L_lambda_simple_env_loop_00d8
  9515                                  .L_lambda_simple_env_end_00d8:
  9516 00006900 5B                      	pop rbx
  9517 00006901 BE00000000              	mov rsi, 0
  9518                                  .L_lambda_simple_params_loop_00d8:	; copy params
  9519 00006906 4883FE01                	cmp rsi, 1
  9520 0000690A 740E                    	je .L_lambda_simple_params_end_00d8
  9521 0000690C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9522 00006911 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9523 00006915 48FFC6                  	inc rsi
  9524 00006918 EBEC                    	jmp .L_lambda_simple_params_loop_00d8
  9525                                  .L_lambda_simple_params_end_00d8:
  9526 0000691A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9527 0000691D 4889C3                  	mov rbx, rax
  9528 00006920 58                      	pop rax
  9529 00006921 C60005                  	mov byte [rax], T_closure
  9530 00006924 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9531 00006928 48C74009[35690000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d8
  9532 00006930 E9C0030000              	jmp .L_lambda_simple_end_00d8
  9533                                  .L_lambda_simple_code_00d8:	; lambda-simple body
  9534 00006935 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9535 0000693B 740B                    	je .L_lambda_simple_arity_check_ok_00d8
  9536 0000693D FF742410                	push qword [rsp + 8 * 2]
  9537 00006941 6A01                    	push 1
  9538 00006943 E98BA50000              	jmp L_error_incorrect_arity_simple
  9539                                  .L_lambda_simple_arity_check_ok_00d8:
  9540 00006948 C8000000                	enter 0, 0
  9541 0000694C BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
  9542 00006951 E8C4A50000              	call malloc
  9543 00006956 50                      	push rax
  9544 00006957 BF08000000              	mov rdi, 8 * 1  ; new rib
  9545 0000695C E8B9A50000              	call malloc
  9546 00006961 50                      	push rax
  9547 00006962 BF18000000              	mov rdi, 8 * 3	; extended env
  9548 00006967 E8AEA50000              	call malloc
  9549 0000696C 488B7D10                	mov rdi, ENV
  9550 00006970 BE00000000              	mov rsi, 0
  9551 00006975 BA01000000              	mov rdx, 1
  9552                                  .L_lambda_opt_env_loop_0022:	; ext_env = env
  9553 0000697A 4883FE02                	cmp rsi, 2
  9554 0000697E 7410                    	je .L_lambda_opt_env_end_0022
  9555 00006980 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9556 00006984 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9557 00006988 48FFC6                  	inc rsi
  9558 0000698B 48FFC2                  	inc rdx
  9559 0000698E EBEA                    	jmp .L_lambda_opt_env_loop_0022
  9560                                  .L_lambda_opt_env_end_0022:
  9561 00006990 5B                      	pop rbx
  9562 00006991 BE00000000              	mov rsi, 0
  9563                                  .L_lambda_opt_params_loop_0022:	; copy params
  9564 00006996 4883FE01                	cmp rsi, 1
  9565 0000699A 740E                    	je .L_lambda_opt_params_end_0022
  9566 0000699C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9567 000069A1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9568 000069A5 48FFC6                  	inc rsi
  9569 000069A8 EBEC                    	jmp .L_lambda_opt_params_loop_0022
  9570                                  .L_lambda_opt_params_end_0022:
  9571 000069AA 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  9572 000069AD 4889C3                  	mov rbx, rax
  9573 000069B0 58                      	pop rax
  9574 000069B1 C60005                  	mov byte [rax], T_closure
  9575 000069B4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9576 000069B8 48C74009[C5690000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0022
  9577 000069C0 E92C030000              	jmp .L_lambda_opt_end_0022
  9578                                  .L_lambda_opt_code_0022:	; lambda-opt body
  9579 000069C5 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9580 000069CB 740D                    	je .L_lambda_opt_arity_check_exact_0022  ;same num_of_args
  9581 000069CD 7F5B                    	jg .L_lambda_opt_arity_check_more_0022  ;greater num_of_args
  9582 000069CF FF742410                	push qword [rsp + 8 * 2]
  9583 000069D3 6A01                    	push 1
  9584 000069D5 E90DA50000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  9585                                  .L_lambda_opt_arity_check_exact_0022:
  9586 000069DA 4883EC08                	sub rsp, 8 * 1
  9587 000069DE 4889E7                  	mov rdi, rsp 
  9588                                  	;mov ret
  9589 000069E1 488B4708                	mov rax, qword [rdi + (8 * 1)]
  9590 000069E5 488907                  	mov qword [rdi], rax
  9591 000069E8 4883C708                	add rdi, 8
  9592                                  	;mov env
  9593 000069EC 488B4708                	mov rax, qword [rdi + (8 * 1)]
  9594 000069F0 488907                  	mov qword [rdi], rax
  9595 000069F3 4883C708                	add rdi, 8
  9596                                  	;mov & update COUNT
  9597 000069F7 488B4708                	mov rax, qword [rdi +(8 * 1)]
  9598 000069FB 4889C1                  	mov rcx, rax
  9599 000069FE 48FFC0                  	inc rax
  9600 00006A01 488907                  	mov qword [rdi], rax
  9601 00006A04 4883C708                	add rdi, 8
  9602                                  	;LOOP:move params
  9603                                  .L_lambda_opt_stack_shrink_loop_0064:	
  9604 00006A08 4883F900                	cmp rcx, 0
  9605 00006A0C 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0064
  9606 00006A0E 488B4708                	mov rax, qword [rdi + 8]
  9607 00006A12 488907                  	mov qword [rdi], rax
  9608 00006A15 4883C708                	add rdi, 8
  9609 00006A19 48FFC9                  	dec rcx
  9610 00006A1C EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0064
  9611                                  .L_lambda_opt_stack_shrink_loop_exit_0064:	
  9612 00006A1E 48C707[01000000]        	mov qword [rdi], sob_nil
  9613 00006A25 E995000000              	jmp .L_lambda_opt_stack_adjusted_0022
  9614                                  .L_lambda_opt_arity_check_more_0022:	
  9615 00006A2A 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  9616 00006A2F 488D4EFF                	lea rcx, [rsi - 1]
  9617 00006A33 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  9618 00006A38 4989F2                  	mov r10, rsi
  9619 00006A3B 49B9-                   	mov r9, sob_nil
  9619 00006A3D [0100000000000000] 
  9620                                  .L_lambda_opt_stack_shrink_loop_0065:	
  9621 00006A45 4883F900                	cmp rcx, 0
  9622 00006A49 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0065
  9623 00006A4B BF11000000              	mov rdi, 1 + 8 + 8
  9624 00006A50 E8C5A40000              	call malloc
  9625 00006A55 C60021                  	mov byte [rax], T_pair
  9626 00006A58 488B1E                  	mov rbx, qword [rsi]
  9627 00006A5B 48895801                	mov SOB_PAIR_CAR(rax), rbx
  9628 00006A5F 4C894809                	mov SOB_PAIR_CDR(rax), r9
  9629 00006A63 4989C1                  	mov r9, rax
  9630 00006A66 4883EE08                	sub rsi, 8 * 1
  9631 00006A6A 48FFC9                  	dec rcx
  9632 00006A6D EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0065
  9633                                  .L_lambda_opt_stack_shrink_loop_exit_0065:	
  9634 00006A6F 4D890A                  	mov qword [r10], r9
  9635 00006A72 4983EA08                	sub r10, 8 * 1; the new dest!
  9636 00006A76 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
  9637 00006A7B B901000000              	mov rcx, 1 
  9638                                  .L_lambda_opt_stack_shrink_loop_0066:	
  9639 00006A80 4883F900                	cmp rcx, 0
  9640 00006A84 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0066
  9641 00006A86 488B06                  	mov rax, qword [rsi]
  9642 00006A89 498902                  	mov qword [r10], rax
  9643 00006A8C 4983EA08                	sub r10, 8 * 1
  9644 00006A90 4883EE08                	sub rsi, 8 * 1
  9645 00006A94 48FFC9                  	dec rcx
  9646 00006A97 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0066
  9647                                  .L_lambda_opt_stack_shrink_loop_exit_0066:	
  9648 00006A99 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
  9649 00006AA0 4983EA08                	sub r10, 8 * 1
  9650 00006AA4 4883EE08                	sub rsi, 8 * 1
  9651 00006AA8 488B06                  	mov rax, qword [rsi] ;env
  9652 00006AAB 498902                  	mov qword [r10], rax
  9653 00006AAE 4983EA08                	sub r10, 8 * 1
  9654 00006AB2 4883EE08                	sub rsi, 8 * 1
  9655 00006AB6 488B06                  	mov rax, qword [rsi] ;ret
  9656 00006AB9 498902                  	mov qword [r10], rax
  9657 00006ABC 4C89D4                  	mov rsp, r10
  9658                                  .L_lambda_opt_stack_adjusted_0022:	
  9659 00006ABF C8000000                	enter 0, 0
  9660 00006AC3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9661 00006AC7 50                      	push rax
  9662 00006AC8 6A01                    	push 1
  9663 00006ACA 488B0425[00000000]      	mov rax, qword [free_var_0]
  9664 00006AD2 803805                  	cmp byte [rax], T_closure 
  9665 00006AD5 0F85F4B30000                    jne L_code_ptr_error
  9666                                  
  9667 00006ADB 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9668                                  
  9669 00006ADF 53                              push rbx
  9670                                  
  9671 00006AE0 FF5009                          call SOB_CLOSURE_CODE(rax)
  9672                                  
  9673                                          
  9674 00006AE3 483D[02000000]                  	cmp rax, sob_boolean_false
  9675                                  
  9676 00006AE9 7474                            	je .L_if_else_007b
  9677 00006AEB 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  9678 00006AEF 50                      	push rax
  9679 00006AF0 48B8-                   	mov rax,L_constants + 32
  9679 00006AF2 [2000000000000000] 
  9680 00006AFA 50                      	push rax
  9681                                  
  9682 00006AFB 6A02                    	push 2
  9683 00006AFD 488B4510                	mov rax, qword [rbp + 8 * 2]
  9684                                  
  9685 00006B01 488B00                                            	mov rax, qword[rax + 8 * 0]
  9686                                  
  9687 00006B04 488B00                                            	mov rax, qword[rax + 8 * 0]
  9688                                  	assert_closure(rax)
    42 00006B07 803805              <1>  cmp byte [%1], %2
    43 00006B0A 0F85FEBB0000        <1>  jne L_error_incorrect_type
  9689 00006B10 50                      	push rax 
  9690 00006B11 FF7508                  	push qword [rbp + 8]
  9691 00006B14 FF7500                  	push qword [rbp]
  9692 00006B17 4883C308                	add rbx ,8*1
  9693                                  	 .L_fix_stack_label_0100:
  9694 00006B1B 488B5518                	mov rdx, qword[rbp+8*3]
  9695 00006B1F 4883C203                	add rdx, 3
  9696 00006B23 48C1E203                	shl rdx, 3
  9697 00006B27 4889EF                  	mov rdi, rbp
  9698 00006B2A 4801D7                  	add rdi, rdx
  9699 00006B2D 4C8B4500                	mov r8, qword[rbp]
  9700 00006B31 4889E9                  	mov rcx, rbp
  9701 00006B34 4883E908                	sub rcx, 8
  9702                                  	 .L_loop_fix_stuck_0100:
  9703 00006B38 4839CC                  	cmp rsp, rcx
  9704 00006B3B 7710                    ja .L_loop_fix_stuck_end_0100
  9705 00006B3D 488B19                   	mov rbx, qword[rcx]
  9706 00006B40 48891F                  	 mov qword[rdi], rbx
  9707 00006B43 4883EF08                	sub rdi, 8
  9708 00006B47 4883E908                	sub rcx, 8
  9709 00006B4B EBEB                    jmp .L_loop_fix_stuck_0100
  9710                                  	 .L_loop_fix_stuck_end_0100:
  9711 00006B4D 4883C708                	add rdi, 8
  9712 00006B51 4889FC                  	 mov rsp, rdi
  9713 00006B54 4C89C5                  	mov rbp, r8
  9714 00006B57 5D                      	pop rbp
  9715 00006B58 FFE0                    	jmp rax 
  9716                                  
  9717 00006B5A E98E010000                      	jmp .L_if_end_007b
  9718                                  
  9719                                          	.L_if_else_007b:
  9720 00006B5F 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
  9721 00006B63 50                      	push rax
  9722 00006B64 48B8-                   	mov rax,L_constants + 32
  9722 00006B66 [2000000000000000] 
  9723 00006B6E 50                      	push rax
  9724 00006B6F 488B0425[08030000]      	mov rax, qword [free_var_97]
  9725 00006B77 50                      	push rax
  9726 00006B78 6A03                    	push 3
  9727 00006B7A 488B0425[F8020000]      	mov rax, qword [free_var_95]
  9728 00006B82 803805                  	cmp byte [rax], T_closure 
  9729 00006B85 0F8544B30000                    jne L_code_ptr_error
  9730                                  
  9731 00006B8B 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9732                                  
  9733 00006B8F 53                              push rbx
  9734                                  
  9735 00006B90 FF5009                          call SOB_CLOSURE_CODE(rax)
  9736                                  
  9737 00006B93 50                              	push rax
  9738                                  
  9739 00006B94 6A01                    	push 1
  9740 00006B96 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9741 00006B9B E87AA30000              	call malloc
  9742 00006BA0 50                      	push rax
  9743 00006BA1 BF10000000              	mov rdi, 8 * 2	; new rib
  9744 00006BA6 E86FA30000              	call malloc
  9745 00006BAB 50                      	push rax
  9746 00006BAC BF20000000              	mov rdi, 8 * 4	; extended env
  9747 00006BB1 E864A30000              	call malloc
  9748 00006BB6 488B7D10                	mov rdi, ENV
  9749 00006BBA BE00000000              	mov rsi, 0
  9750 00006BBF BA01000000              	mov rdx, 1
  9751                                  .L_lambda_simple_env_loop_00d9:	; ext_env[i + 1] <-- env[i]
  9752 00006BC4 4883FE03                	cmp rsi, 3
  9753 00006BC8 7410                    	je .L_lambda_simple_env_end_00d9
  9754 00006BCA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9755 00006BCE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9756 00006BD2 48FFC6                  	inc rsi
  9757 00006BD5 48FFC2                  	inc rdx
  9758 00006BD8 EBEA                    	jmp .L_lambda_simple_env_loop_00d9
  9759                                  .L_lambda_simple_env_end_00d9:
  9760 00006BDA 5B                      	pop rbx
  9761 00006BDB BE00000000              	mov rsi, 0
  9762                                  .L_lambda_simple_params_loop_00d9:	; copy params
  9763 00006BE0 4883FE02                	cmp rsi, 2
  9764 00006BE4 740E                    	je .L_lambda_simple_params_end_00d9
  9765 00006BE6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9766 00006BEB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9767 00006BEF 48FFC6                  	inc rsi
  9768 00006BF2 EBEC                    	jmp .L_lambda_simple_params_loop_00d9
  9769                                  .L_lambda_simple_params_end_00d9:
  9770 00006BF4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9771 00006BF7 4889C3                  	mov rbx, rax
  9772 00006BFA 58                      	pop rax
  9773 00006BFB C60005                  	mov byte [rax], T_closure
  9774 00006BFE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9775 00006C02 48C74009[0F6C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d9
  9776 00006C0A E98B000000              	jmp .L_lambda_simple_end_00d9
  9777                                  .L_lambda_simple_code_00d9:	; lambda-simple body
  9778 00006C0F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9779 00006C15 740B                    	je .L_lambda_simple_arity_check_ok_00d9
  9780 00006C17 FF742410                	push qword [rsp + 8 * 2]
  9781 00006C1B 6A01                    	push 1
  9782 00006C1D E9B1A20000              	jmp L_error_incorrect_arity_simple
  9783                                  .L_lambda_simple_arity_check_ok_00d9:
  9784 00006C22 C8000000                	enter 0, 0
  9785 00006C26 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
  9786 00006C2A 50                      	push rax
  9787 00006C2B 488B4510                	mov rax, qword [rbp + 8 * 2]
  9788                                  
  9789 00006C2F 488B00                                            	mov rax, qword[rax + 8 * 0]
  9790                                  
  9791 00006C32 488B00                                            	mov rax, qword[rax + 8 * 0]
  9792 00006C35 50                      	push rax
  9793                                  
  9794 00006C36 6A02                    	push 2
  9795 00006C38 488B4510                	mov rax, qword [rbp + 8 * 2]
  9796                                  
  9797 00006C3C 488B4008                                          	mov rax, qword[rax + 8 * 1]
  9798                                  
  9799 00006C40 488B00                                            	mov rax, qword[rax + 8 * 0]
  9800                                  	assert_closure(rax)
    42 00006C43 803805              <1>  cmp byte [%1], %2
    43 00006C46 0F85C2BA0000        <1>  jne L_error_incorrect_type
  9801 00006C4C 50                      	push rax 
  9802 00006C4D FF7508                  	push qword [rbp + 8]
  9803 00006C50 FF7500                  	push qword [rbp]
  9804 00006C53 4883C308                	add rbx ,8*1
  9805                                  	 .L_fix_stack_label_00ff:
  9806 00006C57 488B5518                	mov rdx, qword[rbp+8*3]
  9807 00006C5B 4883C203                	add rdx, 3
  9808 00006C5F 48C1E203                	shl rdx, 3
  9809 00006C63 4889EF                  	mov rdi, rbp
  9810 00006C66 4801D7                  	add rdi, rdx
  9811 00006C69 4C8B4500                	mov r8, qword[rbp]
  9812 00006C6D 4889E9                  	mov rcx, rbp
  9813 00006C70 4883E908                	sub rcx, 8
  9814                                  	 .L_loop_fix_stuck_00ff:
  9815 00006C74 4839CC                  	cmp rsp, rcx
  9816 00006C77 7710                    ja .L_loop_fix_stuck_end_00ff
  9817 00006C79 488B19                   	mov rbx, qword[rcx]
  9818 00006C7C 48891F                  	 mov qword[rdi], rbx
  9819 00006C7F 4883EF08                	sub rdi, 8
  9820 00006C83 4883E908                	sub rcx, 8
  9821 00006C87 EBEB                    jmp .L_loop_fix_stuck_00ff
  9822                                  	 .L_loop_fix_stuck_end_00ff:
  9823 00006C89 4883C708                	add rdi, 8
  9824 00006C8D 4889FC                  	 mov rsp, rdi
  9825 00006C90 4C89C5                  	mov rbp, r8
  9826 00006C93 5D                      	pop rbp
  9827 00006C94 FFE0                    	jmp rax 
  9828 00006C96 C9                      	leave
  9829 00006C97 C21800                  	ret 8 * (2 + 1)
  9830                                  .L_lambda_simple_end_00d9:	; new closure is in rax
  9831                                  	assert_closure(rax)
    42 00006C9A 803805              <1>  cmp byte [%1], %2
    43 00006C9D 0F856BBA0000        <1>  jne L_error_incorrect_type
  9832 00006CA3 50                      	push rax 
  9833 00006CA4 FF7508                  	push qword [rbp + 8]
  9834 00006CA7 FF7500                  	push qword [rbp]
  9835 00006CAA 4883C308                	add rbx ,8*1
  9836                                  	 .L_fix_stack_label_00fe:
  9837 00006CAE 488B5518                	mov rdx, qword[rbp+8*3]
  9838 00006CB2 4883C203                	add rdx, 3
  9839 00006CB6 48C1E203                	shl rdx, 3
  9840 00006CBA 4889EF                  	mov rdi, rbp
  9841 00006CBD 4801D7                  	add rdi, rdx
  9842 00006CC0 4C8B4500                	mov r8, qword[rbp]
  9843 00006CC4 4889E9                  	mov rcx, rbp
  9844 00006CC7 4883E908                	sub rcx, 8
  9845                                  	 .L_loop_fix_stuck_00fe:
  9846 00006CCB 4839CC                  	cmp rsp, rcx
  9847 00006CCE 7710                    ja .L_loop_fix_stuck_end_00fe
  9848 00006CD0 488B19                   	mov rbx, qword[rcx]
  9849 00006CD3 48891F                  	 mov qword[rdi], rbx
  9850 00006CD6 4883EF08                	sub rdi, 8
  9851 00006CDA 4883E908                	sub rcx, 8
  9852 00006CDE EBEB                    jmp .L_loop_fix_stuck_00fe
  9853                                  	 .L_loop_fix_stuck_end_00fe:
  9854 00006CE0 4883C708                	add rdi, 8
  9855 00006CE4 4889FC                  	 mov rsp, rdi
  9856 00006CE7 4C89C5                  	mov rbp, r8
  9857 00006CEA 5D                      	pop rbp
  9858 00006CEB FFE0                    	jmp rax 
  9859                                  
  9860                                          	.L_if_end_007b:
  9861 00006CED C9                      	leave
  9862 00006CEE C22000                  	ret 8 * (2 + 2)
  9863                                  .L_lambda_opt_end_0022:	; new closure is in rax
  9864 00006CF1 C9                      	leave
  9865 00006CF2 C21800                  	ret 8 * (2 + 1)
  9866                                  .L_lambda_simple_end_00d8:	; new closure is in rax
  9867                                  	assert_closure(rax)
    42 00006CF5 803805              <1>  cmp byte [%1], %2
    43 00006CF8 0F8510BA0000        <1>  jne L_error_incorrect_type
  9868 00006CFE 50                      	push rax 
  9869 00006CFF FF7508                  	push qword [rbp + 8]
  9870 00006D02 FF7500                  	push qword [rbp]
  9871 00006D05 4883C308                	add rbx ,8*1
  9872                                  	 .L_fix_stack_label_00fd:
  9873 00006D09 488B5518                	mov rdx, qword[rbp+8*3]
  9874 00006D0D 4883C203                	add rdx, 3
  9875 00006D11 48C1E203                	shl rdx, 3
  9876 00006D15 4889EF                  	mov rdi, rbp
  9877 00006D18 4801D7                  	add rdi, rdx
  9878 00006D1B 4C8B4500                	mov r8, qword[rbp]
  9879 00006D1F 4889E9                  	mov rcx, rbp
  9880 00006D22 4883E908                	sub rcx, 8
  9881                                  	 .L_loop_fix_stuck_00fd:
  9882 00006D26 4839CC                  	cmp rsp, rcx
  9883 00006D29 7710                    ja .L_loop_fix_stuck_end_00fd
  9884 00006D2B 488B19                   	mov rbx, qword[rcx]
  9885 00006D2E 48891F                  	 mov qword[rdi], rbx
  9886 00006D31 4883EF08                	sub rdi, 8
  9887 00006D35 4883E908                	sub rcx, 8
  9888 00006D39 EBEB                    jmp .L_loop_fix_stuck_00fd
  9889                                  	 .L_loop_fix_stuck_end_00fd:
  9890 00006D3B 4883C708                	add rdi, 8
  9891 00006D3F 4889FC                  	 mov rsp, rdi
  9892 00006D42 4C89C5                  	mov rbp, r8
  9893 00006D45 5D                      	pop rbp
  9894 00006D46 FFE0                    	jmp rax 
  9895 00006D48 C9                      	leave
  9896 00006D49 C21800                  	ret 8 * (2 + 1)
  9897                                  .L_lambda_simple_end_00d6:	; new closure is in rax
  9898 00006D4C 803805                  	cmp byte [rax], T_closure 
  9899 00006D4F 0F857AB10000                    jne L_code_ptr_error
  9900                                  
  9901 00006D55 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
  9902                                  
  9903 00006D59 53                              push rbx
  9904                                  
  9905 00006D5A FF5009                          call SOB_CLOSURE_CODE(rax)
  9906                                  
  9907 00006D5D 48890425[10030000]              	mov qword [free_var_98], rax
  9908 00006D65 48B8-                   	mov rax, sob_void
  9908 00006D67 [0000000000000000] 
  9909                                  
  9910 00006D6F 4889C7                  	mov rdi, rax
  9911 00006D72 E8B4A10000              	call print_sexpr_if_not_void
  9912                                  
  9913 00006D77 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9914 00006D7C E899A10000              	call malloc
  9915 00006D81 50                      	push rax
  9916 00006D82 BF00000000              	mov rdi, 8 * 0	; new rib
  9917 00006D87 E88EA10000              	call malloc
  9918 00006D8C 50                      	push rax
  9919 00006D8D BF08000000              	mov rdi, 8 * 1	; extended env
  9920 00006D92 E883A10000              	call malloc
  9921 00006D97 488B7D10                	mov rdi, ENV
  9922 00006D9B BE00000000              	mov rsi, 0
  9923 00006DA0 BA01000000              	mov rdx, 1
  9924                                  .L_lambda_simple_env_loop_00da:	; ext_env[i + 1] <-- env[i]
  9925 00006DA5 4883FE00                	cmp rsi, 0
  9926 00006DA9 7410                    	je .L_lambda_simple_env_end_00da
  9927 00006DAB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9928 00006DAF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9929 00006DB3 48FFC6                  	inc rsi
  9930 00006DB6 48FFC2                  	inc rdx
  9931 00006DB9 EBEA                    	jmp .L_lambda_simple_env_loop_00da
  9932                                  .L_lambda_simple_env_end_00da:
  9933 00006DBB 5B                      	pop rbx
  9934 00006DBC BE00000000              	mov rsi, 0
  9935                                  .L_lambda_simple_params_loop_00da:	; copy params
  9936 00006DC1 4883FE00                	cmp rsi, 0
  9937 00006DC5 740E                    	je .L_lambda_simple_params_end_00da
  9938 00006DC7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9939 00006DCC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9940 00006DD0 48FFC6                  	inc rsi
  9941 00006DD3 EBEC                    	jmp .L_lambda_simple_params_loop_00da
  9942                                  .L_lambda_simple_params_end_00da:
  9943 00006DD5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9944 00006DD8 4889C3                  	mov rbx, rax
  9945 00006DDB 58                      	pop rax
  9946 00006DDC C60005                  	mov byte [rax], T_closure
  9947 00006DDF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9948 00006DE3 48C74009[F06D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00da
  9949 00006DEB E98E000000              	jmp .L_lambda_simple_end_00da
  9950                                  .L_lambda_simple_code_00da:	; lambda-simple body
  9951 00006DF0 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9952 00006DF6 740B                    	je .L_lambda_simple_arity_check_ok_00da
  9953 00006DF8 FF742410                	push qword [rsp + 8 * 2]
  9954 00006DFC 6A00                    	push 0
  9955 00006DFE E9D0A00000              	jmp L_error_incorrect_arity_simple
  9956                                  .L_lambda_simple_arity_check_ok_00da:
  9957 00006E03 C8000000                	enter 0, 0
  9958 00006E07 48B8-                   	 	mov rax,L_constants + 68
  9958 00006E09 [4400000000000000] 
  9959 00006E11 50                      	push rax
  9960 00006E12 48B8-                   	mov rax,L_constants + 155
  9960 00006E14 [9B00000000000000] 
  9961 00006E1C 50                      	push rax
  9962                                  
  9963 00006E1D 6A02                    	push 2
  9964 00006E1F 488B0425[30010000]      	mov rax, qword [free_var_38]
  9965                                  	assert_closure(rax)
    42 00006E27 803805              <1>  cmp byte [%1], %2
    43 00006E2A 0F85DEB80000        <1>  jne L_error_incorrect_type
  9966 00006E30 50                      	push rax 
  9967 00006E31 FF7508                  	push qword [rbp + 8]
  9968 00006E34 FF7500                  	push qword [rbp]
  9969 00006E37 4883C308                	add rbx ,8*1
  9970                                  	 .L_fix_stack_label_0101:
  9971 00006E3B 488B5518                	mov rdx, qword[rbp+8*3]
  9972 00006E3F 4883C203                	add rdx, 3
  9973 00006E43 48C1E203                	shl rdx, 3
  9974 00006E47 4889EF                  	mov rdi, rbp
  9975 00006E4A 4801D7                  	add rdi, rdx
  9976 00006E4D 4C8B4500                	mov r8, qword[rbp]
  9977 00006E51 4889E9                  	mov rcx, rbp
  9978 00006E54 4883E908                	sub rcx, 8
  9979                                  	 .L_loop_fix_stuck_0101:
  9980 00006E58 4839CC                  	cmp rsp, rcx
  9981 00006E5B 7710                    ja .L_loop_fix_stuck_end_0101
  9982 00006E5D 488B19                   	mov rbx, qword[rcx]
  9983 00006E60 48891F                  	 mov qword[rdi], rbx
  9984 00006E63 4883EF08                	sub rdi, 8
  9985 00006E67 4883E908                	sub rcx, 8
  9986 00006E6B EBEB                    jmp .L_loop_fix_stuck_0101
  9987                                  	 .L_loop_fix_stuck_end_0101:
  9988 00006E6D 4883C708                	add rdi, 8
  9989 00006E71 4889FC                  	 mov rsp, rdi
  9990 00006E74 4C89C5                  	mov rbp, r8
  9991 00006E77 5D                      	pop rbp
  9992 00006E78 FFE0                    	jmp rax 
  9993 00006E7A C9                      	leave
  9994 00006E7B C21000                  	ret 8 * (2 + 0)
  9995                                  .L_lambda_simple_end_00da:	; new closure is in rax
  9996 00006E7E 50                      	push rax
  9997 00006E7F 6A01                    	push 1
  9998 00006E81 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9999 00006E86 E88FA00000              	call malloc
 10000 00006E8B 50                      	push rax
 10001 00006E8C BF00000000              	mov rdi, 8 * 0	; new rib
 10002 00006E91 E884A00000              	call malloc
 10003 00006E96 50                      	push rax
 10004 00006E97 BF08000000              	mov rdi, 8 * 1	; extended env
 10005 00006E9C E879A00000              	call malloc
 10006 00006EA1 488B7D10                	mov rdi, ENV
 10007 00006EA5 BE00000000              	mov rsi, 0
 10008 00006EAA BA01000000              	mov rdx, 1
 10009                                  .L_lambda_simple_env_loop_00db:	; ext_env[i + 1] <-- env[i]
 10010 00006EAF 4883FE00                	cmp rsi, 0
 10011 00006EB3 7410                    	je .L_lambda_simple_env_end_00db
 10012 00006EB5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10013 00006EB9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10014 00006EBD 48FFC6                  	inc rsi
 10015 00006EC0 48FFC2                  	inc rdx
 10016 00006EC3 EBEA                    	jmp .L_lambda_simple_env_loop_00db
 10017                                  .L_lambda_simple_env_end_00db:
 10018 00006EC5 5B                      	pop rbx
 10019 00006EC6 BE00000000              	mov rsi, 0
 10020                                  .L_lambda_simple_params_loop_00db:	; copy params
 10021 00006ECB 4883FE00                	cmp rsi, 0
 10022 00006ECF 740E                    	je .L_lambda_simple_params_end_00db
 10023 00006ED1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10024 00006ED6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10025 00006EDA 48FFC6                  	inc rsi
 10026 00006EDD EBEC                    	jmp .L_lambda_simple_params_loop_00db
 10027                                  .L_lambda_simple_params_end_00db:
 10028 00006EDF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10029 00006EE2 4889C3                  	mov rbx, rax
 10030 00006EE5 58                      	pop rax
 10031 00006EE6 C60005                  	mov byte [rax], T_closure
 10032 00006EE9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10033 00006EED 48C74009[FA6E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00db
 10034 00006EF5 E991070000              	jmp .L_lambda_simple_end_00db
 10035                                  .L_lambda_simple_code_00db:	; lambda-simple body
 10036 00006EFA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10037 00006F00 740B                    	je .L_lambda_simple_arity_check_ok_00db
 10038 00006F02 FF742410                	push qword [rsp + 8 * 2]
 10039 00006F06 6A01                    	push 1
 10040 00006F08 E9C69F0000              	jmp L_error_incorrect_arity_simple
 10041                                  .L_lambda_simple_arity_check_ok_00db:
 10042 00006F0D C8000000                	enter 0, 0
 10043 00006F11 BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 10044 00006F16 E8FF9F0000              	call malloc
 10045 00006F1B 50                      	push rax
 10046 00006F1C BF08000000              	mov rdi, 8 * 1	; new rib
 10047 00006F21 E8F49F0000              	call malloc
 10048 00006F26 50                      	push rax
 10049 00006F27 BF10000000              	mov rdi, 8 * 2	; extended env
 10050 00006F2C E8E99F0000              	call malloc
 10051 00006F31 488B7D10                	mov rdi, ENV
 10052 00006F35 BE00000000              	mov rsi, 0
 10053 00006F3A BA01000000              	mov rdx, 1
 10054                                  .L_lambda_simple_env_loop_00dc:	; ext_env[i + 1] <-- env[i]
 10055 00006F3F 4883FE01                	cmp rsi, 1
 10056 00006F43 7410                    	je .L_lambda_simple_env_end_00dc
 10057 00006F45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10058 00006F49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10059 00006F4D 48FFC6                  	inc rsi
 10060 00006F50 48FFC2                  	inc rdx
 10061 00006F53 EBEA                    	jmp .L_lambda_simple_env_loop_00dc
 10062                                  .L_lambda_simple_env_end_00dc:
 10063 00006F55 5B                      	pop rbx
 10064 00006F56 BE00000000              	mov rsi, 0
 10065                                  .L_lambda_simple_params_loop_00dc:	; copy params
 10066 00006F5B 4883FE01                	cmp rsi, 1
 10067 00006F5F 740E                    	je .L_lambda_simple_params_end_00dc
 10068 00006F61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10069 00006F66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10070 00006F6A 48FFC6                  	inc rsi
 10071 00006F6D EBEC                    	jmp .L_lambda_simple_params_loop_00dc
 10072                                  .L_lambda_simple_params_end_00dc:
 10073 00006F6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10074 00006F72 4889C3                  	mov rbx, rax
 10075 00006F75 58                      	pop rax
 10076 00006F76 C60005                  	mov byte [rax], T_closure
 10077 00006F79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10078 00006F7D 48C74009[8A6F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dc
 10079 00006F85 E921040000              	jmp .L_lambda_simple_end_00dc
 10080                                  .L_lambda_simple_code_00dc:	; lambda-simple body
 10081 00006F8A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10082 00006F90 740B                    	je .L_lambda_simple_arity_check_ok_00dc
 10083 00006F92 FF742410                	push qword [rsp + 8 * 2]
 10084 00006F96 6A02                    	push 2
 10085 00006F98 E9369F0000              	jmp L_error_incorrect_arity_simple
 10086                                  .L_lambda_simple_arity_check_ok_00dc:
 10087 00006F9D C8000000                	enter 0, 0
 10088 00006FA1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10089 00006FA5 50                      	push rax
 10090 00006FA6 6A01                    	push 1
 10091 00006FA8 488B0425[48000000]      	mov rax, qword [free_var_9]
 10092 00006FB0 803805                  	cmp byte [rax], T_closure 
 10093 00006FB3 0F8516AF0000                    jne L_code_ptr_error
 10094                                  
 10095 00006FB9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10096                                  
 10097 00006FBD 53                              push rbx
 10098                                  
 10099 00006FBE FF5009                          call SOB_CLOSURE_CODE(rax)
 10100                                  
 10101                                          
 10102 00006FC1 483D[02000000]                  	cmp rax, sob_boolean_false
 10103                                  
 10104 00006FC7 0F84A9010000                    	je .L_if_else_007c
 10105 00006FCD 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10106 00006FD1 50                      	push rax
 10107 00006FD2 6A01                    	push 1
 10108 00006FD4 488B0425[48000000]      	mov rax, qword [free_var_9]
 10109 00006FDC 803805                  	cmp byte [rax], T_closure 
 10110 00006FDF 0F85EAAE0000                    jne L_code_ptr_error
 10111                                  
 10112 00006FE5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10113                                  
 10114 00006FE9 53                              push rbx
 10115                                  
 10116 00006FEA FF5009                          call SOB_CLOSURE_CODE(rax)
 10117                                  
 10118                                          
 10119 00006FED 483D[02000000]                  	cmp rax, sob_boolean_false
 10120                                  
 10121 00006FF3 746C                            	je .L_if_else_0080
 10122 00006FF5 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 10123 00006FF9 50                      	push rax
 10124 00006FFA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10125 00006FFE 50                      	push rax
 10126                                  
 10127 00006FFF 6A02                    	push 2
 10128 00007001 488B0425[20010000]      	mov rax, qword [free_var_36]
 10129                                  	assert_closure(rax)
    42 00007009 803805              <1>  cmp byte [%1], %2
    43 0000700C 0F85FCB60000        <1>  jne L_error_incorrect_type
 10130 00007012 50                      	push rax 
 10131 00007013 FF7508                  	push qword [rbp + 8]
 10132 00007016 FF7500                  	push qword [rbp]
 10133 00007019 4883C308                	add rbx ,8*1
 10134                                  	 .L_fix_stack_label_0108:
 10135 0000701D 488B5518                	mov rdx, qword[rbp+8*3]
 10136 00007021 4883C203                	add rdx, 3
 10137 00007025 48C1E203                	shl rdx, 3
 10138 00007029 4889EF                  	mov rdi, rbp
 10139 0000702C 4801D7                  	add rdi, rdx
 10140 0000702F 4C8B4500                	mov r8, qword[rbp]
 10141 00007033 4889E9                  	mov rcx, rbp
 10142 00007036 4883E908                	sub rcx, 8
 10143                                  	 .L_loop_fix_stuck_0108:
 10144 0000703A 4839CC                  	cmp rsp, rcx
 10145 0000703D 7710                    ja .L_loop_fix_stuck_end_0108
 10146 0000703F 488B19                   	mov rbx, qword[rcx]
 10147 00007042 48891F                  	 mov qword[rdi], rbx
 10148 00007045 4883EF08                	sub rdi, 8
 10149 00007049 4883E908                	sub rcx, 8
 10150 0000704D EBEB                    jmp .L_loop_fix_stuck_0108
 10151                                  	 .L_loop_fix_stuck_end_0108:
 10152 0000704F 4883C708                	add rdi, 8
 10153 00007053 4889FC                  	 mov rsp, rdi
 10154 00007056 4C89C5                  	mov rbp, r8
 10155 00007059 5D                      	pop rbp
 10156 0000705A FFE0                    	jmp rax 
 10157                                  
 10158 0000705C E910010000                      	jmp .L_if_end_0080
 10159                                  
 10160                                          	.L_if_else_0080:
 10161 00007061 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10162 00007065 50                      	push rax
 10163 00007066 6A01                    	push 1
 10164 00007068 488B0425[40000000]      	mov rax, qword [free_var_8]
 10165 00007070 803805                  	cmp byte [rax], T_closure 
 10166 00007073 0F8556AE0000                    jne L_code_ptr_error
 10167                                  
 10168 00007079 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10169                                  
 10170 0000707D 53                              push rbx
 10171                                  
 10172 0000707E FF5009                          call SOB_CLOSURE_CODE(rax)
 10173                                  
 10174                                          
 10175 00007081 483D[02000000]                  	cmp rax, sob_boolean_false
 10176                                  
 10177 00007087 0F8485000000                    	je .L_if_else_0081
 10178 0000708D 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 10179 00007091 50                      	push rax
 10180 00007092 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10181 00007096 50                      	push rax
 10182 00007097 6A01                    	push 1
 10183 00007099 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10184 000070A1 803805                  	cmp byte [rax], T_closure 
 10185 000070A4 0F8525AE0000                    jne L_code_ptr_error
 10186                                  
 10187 000070AA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10188                                  
 10189 000070AE 53                              push rbx
 10190                                  
 10191 000070AF FF5009                          call SOB_CLOSURE_CODE(rax)
 10192                                  
 10193 000070B2 50                              	push rax
 10194                                  
 10195 000070B3 6A02                    	push 2
 10196 000070B5 488B0425[00010000]      	mov rax, qword [free_var_32]
 10197                                  	assert_closure(rax)
    42 000070BD 803805              <1>  cmp byte [%1], %2
    43 000070C0 0F8548B60000        <1>  jne L_error_incorrect_type
 10198 000070C6 50                      	push rax 
 10199 000070C7 FF7508                  	push qword [rbp + 8]
 10200 000070CA FF7500                  	push qword [rbp]
 10201 000070CD 4883C308                	add rbx ,8*1
 10202                                  	 .L_fix_stack_label_0107:
 10203 000070D1 488B5518                	mov rdx, qword[rbp+8*3]
 10204 000070D5 4883C203                	add rdx, 3
 10205 000070D9 48C1E203                	shl rdx, 3
 10206 000070DD 4889EF                  	mov rdi, rbp
 10207 000070E0 4801D7                  	add rdi, rdx
 10208 000070E3 4C8B4500                	mov r8, qword[rbp]
 10209 000070E7 4889E9                  	mov rcx, rbp
 10210 000070EA 4883E908                	sub rcx, 8
 10211                                  	 .L_loop_fix_stuck_0107:
 10212 000070EE 4839CC                  	cmp rsp, rcx
 10213 000070F1 7710                    ja .L_loop_fix_stuck_end_0107
 10214 000070F3 488B19                   	mov rbx, qword[rcx]
 10215 000070F6 48891F                  	 mov qword[rdi], rbx
 10216 000070F9 4883EF08                	sub rdi, 8
 10217 000070FD 4883E908                	sub rcx, 8
 10218 00007101 EBEB                    jmp .L_loop_fix_stuck_0107
 10219                                  	 .L_loop_fix_stuck_end_0107:
 10220 00007103 4883C708                	add rdi, 8
 10221 00007107 4889FC                  	 mov rsp, rdi
 10222 0000710A 4C89C5                  	mov rbp, r8
 10223 0000710D 5D                      	pop rbp
 10224 0000710E FFE0                    	jmp rax 
 10225                                  
 10226 00007110 EB5F                            	jmp .L_if_end_0081
 10227                                  
 10228                                          	.L_if_else_0081:
 10229                                  	 
 10230 00007112 6A00                    	push 0
 10231 00007114 488B4510                	mov rax, qword [rbp + 8 * 2]
 10232                                  
 10233 00007118 488B00                                            	mov rax, qword[rax + 8 * 0]
 10234                                  
 10235 0000711B 488B00                                            	mov rax, qword[rax + 8 * 0]
 10236                                  	assert_closure(rax)
    42 0000711E 803805              <1>  cmp byte [%1], %2
    43 00007121 0F85E7B50000        <1>  jne L_error_incorrect_type
 10237 00007127 50                      	push rax 
 10238 00007128 FF7508                  	push qword [rbp + 8]
 10239 0000712B FF7500                  	push qword [rbp]
 10240 0000712E 4883C308                	add rbx ,8*1
 10241                                  	 .L_fix_stack_label_0106:
 10242 00007132 488B5518                	mov rdx, qword[rbp+8*3]
 10243 00007136 4883C203                	add rdx, 3
 10244 0000713A 48C1E203                	shl rdx, 3
 10245 0000713E 4889EF                  	mov rdi, rbp
 10246 00007141 4801D7                  	add rdi, rdx
 10247 00007144 4C8B4500                	mov r8, qword[rbp]
 10248 00007148 4889E9                  	mov rcx, rbp
 10249 0000714B 4883E908                	sub rcx, 8
 10250                                  	 .L_loop_fix_stuck_0106:
 10251 0000714F 4839CC                  	cmp rsp, rcx
 10252 00007152 7710                    ja .L_loop_fix_stuck_end_0106
 10253 00007154 488B19                   	mov rbx, qword[rcx]
 10254 00007157 48891F                  	 mov qword[rdi], rbx
 10255 0000715A 4883EF08                	sub rdi, 8
 10256 0000715E 4883E908                	sub rcx, 8
 10257 00007162 EBEB                    jmp .L_loop_fix_stuck_0106
 10258                                  	 .L_loop_fix_stuck_end_0106:
 10259 00007164 4883C708                	add rdi, 8
 10260 00007168 4889FC                  	 mov rsp, rdi
 10261 0000716B 4C89C5                  	mov rbp, r8
 10262 0000716E 5D                      	pop rbp
 10263 0000716F FFE0                    	jmp rax 
 10264                                  
 10265                                          	.L_if_end_0081:
 10266                                  
 10267                                          	.L_if_end_0080:
 10268                                  
 10269 00007171 E931020000                      	jmp .L_if_end_007c
 10270                                  
 10271                                          	.L_if_else_007c:
 10272 00007176 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10273 0000717A 50                      	push rax
 10274 0000717B 6A01                    	push 1
 10275 0000717D 488B0425[40000000]      	mov rax, qword [free_var_8]
 10276 00007185 803805                  	cmp byte [rax], T_closure 
 10277 00007188 0F8541AD0000                    jne L_code_ptr_error
 10278                                  
 10279 0000718E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10280                                  
 10281 00007192 53                              push rbx
 10282                                  
 10283 00007193 FF5009                          call SOB_CLOSURE_CODE(rax)
 10284                                  
 10285                                          
 10286 00007196 483D[02000000]                  	cmp rax, sob_boolean_false
 10287                                  
 10288 0000719C 0F84A6010000                    	je .L_if_else_007d
 10289 000071A2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10290 000071A6 50                      	push rax
 10291 000071A7 6A01                    	push 1
 10292 000071A9 488B0425[48000000]      	mov rax, qword [free_var_9]
 10293 000071B1 803805                  	cmp byte [rax], T_closure 
 10294 000071B4 0F8515AD0000                    jne L_code_ptr_error
 10295                                  
 10296 000071BA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10297                                  
 10298 000071BE 53                              push rbx
 10299                                  
 10300 000071BF FF5009                          call SOB_CLOSURE_CODE(rax)
 10301                                  
 10302                                          
 10303 000071C2 483D[02000000]                  	cmp rax, sob_boolean_false
 10304                                  
 10305 000071C8 0F8488000000                    	je .L_if_else_007e
 10306 000071CE 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 10307 000071D2 50                      	push rax
 10308 000071D3 6A01                    	push 1
 10309 000071D5 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10310 000071DD 803805                  	cmp byte [rax], T_closure 
 10311 000071E0 0F85E9AC0000                    jne L_code_ptr_error
 10312                                  
 10313 000071E6 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10314                                  
 10315 000071EA 53                              push rbx
 10316                                  
 10317 000071EB FF5009                          call SOB_CLOSURE_CODE(rax)
 10318                                  
 10319 000071EE 50                              	push rax
 10320 000071EF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10321 000071F3 50                      	push rax
 10322                                  
 10323 000071F4 6A02                    	push 2
 10324 000071F6 488B0425[00010000]      	mov rax, qword [free_var_32]
 10325                                  	assert_closure(rax)
    42 000071FE 803805              <1>  cmp byte [%1], %2
    43 00007201 0F8507B50000        <1>  jne L_error_incorrect_type
 10326 00007207 50                      	push rax 
 10327 00007208 FF7508                  	push qword [rbp + 8]
 10328 0000720B FF7500                  	push qword [rbp]
 10329 0000720E 4883C308                	add rbx ,8*1
 10330                                  	 .L_fix_stack_label_0105:
 10331 00007212 488B5518                	mov rdx, qword[rbp+8*3]
 10332 00007216 4883C203                	add rdx, 3
 10333 0000721A 48C1E203                	shl rdx, 3
 10334 0000721E 4889EF                  	mov rdi, rbp
 10335 00007221 4801D7                  	add rdi, rdx
 10336 00007224 4C8B4500                	mov r8, qword[rbp]
 10337 00007228 4889E9                  	mov rcx, rbp
 10338 0000722B 4883E908                	sub rcx, 8
 10339                                  	 .L_loop_fix_stuck_0105:
 10340 0000722F 4839CC                  	cmp rsp, rcx
 10341 00007232 7710                    ja .L_loop_fix_stuck_end_0105
 10342 00007234 488B19                   	mov rbx, qword[rcx]
 10343 00007237 48891F                  	 mov qword[rdi], rbx
 10344 0000723A 4883EF08                	sub rdi, 8
 10345 0000723E 4883E908                	sub rcx, 8
 10346 00007242 EBEB                    jmp .L_loop_fix_stuck_0105
 10347                                  	 .L_loop_fix_stuck_end_0105:
 10348 00007244 4883C708                	add rdi, 8
 10349 00007248 4889FC                  	 mov rsp, rdi
 10350 0000724B 4C89C5                  	mov rbp, r8
 10351 0000724E 5D                      	pop rbp
 10352 0000724F FFE0                    	jmp rax 
 10353                                  
 10354 00007251 E9F0000000                      	jmp .L_if_end_007e
 10355                                  
 10356                                          	.L_if_else_007e:
 10357 00007256 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10358 0000725A 50                      	push rax
 10359 0000725B 6A01                    	push 1
 10360 0000725D 488B0425[40000000]      	mov rax, qword [free_var_8]
 10361 00007265 803805                  	cmp byte [rax], T_closure 
 10362 00007268 0F8561AC0000                    jne L_code_ptr_error
 10363                                  
 10364 0000726E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10365                                  
 10366 00007272 53                              push rbx
 10367                                  
 10368 00007273 FF5009                          call SOB_CLOSURE_CODE(rax)
 10369                                  
 10370                                          
 10371 00007276 483D[02000000]                  	cmp rax, sob_boolean_false
 10372                                  
 10373 0000727C 7469                            	je .L_if_else_007f
 10374 0000727E 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 10375 00007282 50                      	push rax
 10376 00007283 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10377 00007287 50                      	push rax
 10378                                  
 10379 00007288 6A02                    	push 2
 10380 0000728A 488B0425[00010000]      	mov rax, qword [free_var_32]
 10381                                  	assert_closure(rax)
    42 00007292 803805              <1>  cmp byte [%1], %2
    43 00007295 0F8573B40000        <1>  jne L_error_incorrect_type
 10382 0000729B 50                      	push rax 
 10383 0000729C FF7508                  	push qword [rbp + 8]
 10384 0000729F FF7500                  	push qword [rbp]
 10385 000072A2 4883C308                	add rbx ,8*1
 10386                                  	 .L_fix_stack_label_0104:
 10387 000072A6 488B5518                	mov rdx, qword[rbp+8*3]
 10388 000072AA 4883C203                	add rdx, 3
 10389 000072AE 48C1E203                	shl rdx, 3
 10390 000072B2 4889EF                  	mov rdi, rbp
 10391 000072B5 4801D7                  	add rdi, rdx
 10392 000072B8 4C8B4500                	mov r8, qword[rbp]
 10393 000072BC 4889E9                  	mov rcx, rbp
 10394 000072BF 4883E908                	sub rcx, 8
 10395                                  	 .L_loop_fix_stuck_0104:
 10396 000072C3 4839CC                  	cmp rsp, rcx
 10397 000072C6 7710                    ja .L_loop_fix_stuck_end_0104
 10398 000072C8 488B19                   	mov rbx, qword[rcx]
 10399 000072CB 48891F                  	 mov qword[rdi], rbx
 10400 000072CE 4883EF08                	sub rdi, 8
 10401 000072D2 4883E908                	sub rcx, 8
 10402 000072D6 EBEB                    jmp .L_loop_fix_stuck_0104
 10403                                  	 .L_loop_fix_stuck_end_0104:
 10404 000072D8 4883C708                	add rdi, 8
 10405 000072DC 4889FC                  	 mov rsp, rdi
 10406 000072DF 4C89C5                  	mov rbp, r8
 10407 000072E2 5D                      	pop rbp
 10408 000072E3 FFE0                    	jmp rax 
 10409                                  
 10410 000072E5 EB5F                            	jmp .L_if_end_007f
 10411                                  
 10412                                          	.L_if_else_007f:
 10413                                  	 
 10414 000072E7 6A00                    	push 0
 10415 000072E9 488B4510                	mov rax, qword [rbp + 8 * 2]
 10416                                  
 10417 000072ED 488B00                                            	mov rax, qword[rax + 8 * 0]
 10418                                  
 10419 000072F0 488B00                                            	mov rax, qword[rax + 8 * 0]
 10420                                  	assert_closure(rax)
    42 000072F3 803805              <1>  cmp byte [%1], %2
    43 000072F6 0F8512B40000        <1>  jne L_error_incorrect_type
 10421 000072FC 50                      	push rax 
 10422 000072FD FF7508                  	push qword [rbp + 8]
 10423 00007300 FF7500                  	push qword [rbp]
 10424 00007303 4883C308                	add rbx ,8*1
 10425                                  	 .L_fix_stack_label_0103:
 10426 00007307 488B5518                	mov rdx, qword[rbp+8*3]
 10427 0000730B 4883C203                	add rdx, 3
 10428 0000730F 48C1E203                	shl rdx, 3
 10429 00007313 4889EF                  	mov rdi, rbp
 10430 00007316 4801D7                  	add rdi, rdx
 10431 00007319 4C8B4500                	mov r8, qword[rbp]
 10432 0000731D 4889E9                  	mov rcx, rbp
 10433 00007320 4883E908                	sub rcx, 8
 10434                                  	 .L_loop_fix_stuck_0103:
 10435 00007324 4839CC                  	cmp rsp, rcx
 10436 00007327 7710                    ja .L_loop_fix_stuck_end_0103
 10437 00007329 488B19                   	mov rbx, qword[rcx]
 10438 0000732C 48891F                  	 mov qword[rdi], rbx
 10439 0000732F 4883EF08                	sub rdi, 8
 10440 00007333 4883E908                	sub rcx, 8
 10441 00007337 EBEB                    jmp .L_loop_fix_stuck_0103
 10442                                  	 .L_loop_fix_stuck_end_0103:
 10443 00007339 4883C708                	add rdi, 8
 10444 0000733D 4889FC                  	 mov rsp, rdi
 10445 00007340 4C89C5                  	mov rbp, r8
 10446 00007343 5D                      	pop rbp
 10447 00007344 FFE0                    	jmp rax 
 10448                                  
 10449                                          	.L_if_end_007f:
 10450                                  
 10451                                          	.L_if_end_007e:
 10452                                  
 10453 00007346 EB5F                            	jmp .L_if_end_007d
 10454                                  
 10455                                          	.L_if_else_007d:
 10456                                  	 
 10457 00007348 6A00                    	push 0
 10458 0000734A 488B4510                	mov rax, qword [rbp + 8 * 2]
 10459                                  
 10460 0000734E 488B00                                            	mov rax, qword[rax + 8 * 0]
 10461                                  
 10462 00007351 488B00                                            	mov rax, qword[rax + 8 * 0]
 10463                                  	assert_closure(rax)
    42 00007354 803805              <1>  cmp byte [%1], %2
    43 00007357 0F85B1B30000        <1>  jne L_error_incorrect_type
 10464 0000735D 50                      	push rax 
 10465 0000735E FF7508                  	push qword [rbp + 8]
 10466 00007361 FF7500                  	push qword [rbp]
 10467 00007364 4883C308                	add rbx ,8*1
 10468                                  	 .L_fix_stack_label_0102:
 10469 00007368 488B5518                	mov rdx, qword[rbp+8*3]
 10470 0000736C 4883C203                	add rdx, 3
 10471 00007370 48C1E203                	shl rdx, 3
 10472 00007374 4889EF                  	mov rdi, rbp
 10473 00007377 4801D7                  	add rdi, rdx
 10474 0000737A 4C8B4500                	mov r8, qword[rbp]
 10475 0000737E 4889E9                  	mov rcx, rbp
 10476 00007381 4883E908                	sub rcx, 8
 10477                                  	 .L_loop_fix_stuck_0102:
 10478 00007385 4839CC                  	cmp rsp, rcx
 10479 00007388 7710                    ja .L_loop_fix_stuck_end_0102
 10480 0000738A 488B19                   	mov rbx, qword[rcx]
 10481 0000738D 48891F                  	 mov qword[rdi], rbx
 10482 00007390 4883EF08                	sub rdi, 8
 10483 00007394 4883E908                	sub rcx, 8
 10484 00007398 EBEB                    jmp .L_loop_fix_stuck_0102
 10485                                  	 .L_loop_fix_stuck_end_0102:
 10486 0000739A 4883C708                	add rdi, 8
 10487 0000739E 4889FC                  	 mov rsp, rdi
 10488 000073A1 4C89C5                  	mov rbp, r8
 10489 000073A4 5D                      	pop rbp
 10490 000073A5 FFE0                    	jmp rax 
 10491                                  
 10492                                          	.L_if_end_007d:
 10493                                  
 10494                                          	.L_if_end_007c:
 10495 000073A7 C9                      	leave
 10496 000073A8 C22000                  	ret 8 * (2 + 2)
 10497                                  .L_lambda_simple_end_00dc:	; new closure is in rax
 10498 000073AB 50                      	push rax
 10499                                  
 10500 000073AC 6A01                    	push 1
 10501 000073AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10502 000073B3 E8629B0000              	call malloc
 10503 000073B8 50                      	push rax
 10504 000073B9 BF08000000              	mov rdi, 8 * 1	; new rib
 10505 000073BE E8579B0000              	call malloc
 10506 000073C3 50                      	push rax
 10507 000073C4 BF10000000              	mov rdi, 8 * 2	; extended env
 10508 000073C9 E84C9B0000              	call malloc
 10509 000073CE 488B7D10                	mov rdi, ENV
 10510 000073D2 BE00000000              	mov rsi, 0
 10511 000073D7 BA01000000              	mov rdx, 1
 10512                                  .L_lambda_simple_env_loop_00dd:	; ext_env[i + 1] <-- env[i]
 10513 000073DC 4883FE01                	cmp rsi, 1
 10514 000073E0 7410                    	je .L_lambda_simple_env_end_00dd
 10515 000073E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10516 000073E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10517 000073EA 48FFC6                  	inc rsi
 10518 000073ED 48FFC2                  	inc rdx
 10519 000073F0 EBEA                    	jmp .L_lambda_simple_env_loop_00dd
 10520                                  .L_lambda_simple_env_end_00dd:
 10521 000073F2 5B                      	pop rbx
 10522 000073F3 BE00000000              	mov rsi, 0
 10523                                  .L_lambda_simple_params_loop_00dd:	; copy params
 10524 000073F8 4883FE01                	cmp rsi, 1
 10525 000073FC 740E                    	je .L_lambda_simple_params_end_00dd
 10526 000073FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10527 00007403 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10528 00007407 48FFC6                  	inc rsi
 10529 0000740A EBEC                    	jmp .L_lambda_simple_params_loop_00dd
 10530                                  .L_lambda_simple_params_end_00dd:
 10531 0000740C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10532 0000740F 4889C3                  	mov rbx, rax
 10533 00007412 58                      	pop rax
 10534 00007413 C60005                  	mov byte [rax], T_closure
 10535 00007416 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10536 0000741A 48C74009[27740000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dd
 10537 00007422 E90D020000              	jmp .L_lambda_simple_end_00dd
 10538                                  .L_lambda_simple_code_00dd:	; lambda-simple body
 10539 00007427 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10540 0000742D 740B                    	je .L_lambda_simple_arity_check_ok_00dd
 10541 0000742F FF742410                	push qword [rsp + 8 * 2]
 10542 00007433 6A01                    	push 1
 10543 00007435 E9999A0000              	jmp L_error_incorrect_arity_simple
 10544                                  .L_lambda_simple_arity_check_ok_00dd:
 10545 0000743A C8000000                	enter 0, 0
 10546 0000743E BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 10547 00007443 E8D29A0000              	call malloc
 10548 00007448 50                      	push rax
 10549 00007449 BF08000000              	mov rdi, 8 * 1  ; new rib
 10550 0000744E E8C79A0000              	call malloc
 10551 00007453 50                      	push rax
 10552 00007454 BF18000000              	mov rdi, 8 * 3	; extended env
 10553 00007459 E8BC9A0000              	call malloc
 10554 0000745E 488B7D10                	mov rdi, ENV
 10555 00007462 BE00000000              	mov rsi, 0
 10556 00007467 BA01000000              	mov rdx, 1
 10557                                  .L_lambda_opt_env_loop_0023:	; ext_env = env
 10558 0000746C 4883FE02                	cmp rsi, 2
 10559 00007470 7410                    	je .L_lambda_opt_env_end_0023
 10560 00007472 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10561 00007476 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10562 0000747A 48FFC6                  	inc rsi
 10563 0000747D 48FFC2                  	inc rdx
 10564 00007480 EBEA                    	jmp .L_lambda_opt_env_loop_0023
 10565                                  .L_lambda_opt_env_end_0023:
 10566 00007482 5B                      	pop rbx
 10567 00007483 BE00000000              	mov rsi, 0
 10568                                  .L_lambda_opt_params_loop_0023:	; copy params
 10569 00007488 4883FE01                	cmp rsi, 1
 10570 0000748C 740E                    	je .L_lambda_opt_params_end_0023
 10571 0000748E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10572 00007493 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10573 00007497 48FFC6                  	inc rsi
 10574 0000749A EBEC                    	jmp .L_lambda_opt_params_loop_0023
 10575                                  .L_lambda_opt_params_end_0023:
 10576 0000749C 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 10577 0000749F 4889C3                  	mov rbx, rax
 10578 000074A2 58                      	pop rax
 10579 000074A3 C60005                  	mov byte [rax], T_closure
 10580 000074A6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10581 000074AA 48C74009[B7740000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0023
 10582 000074B2 E979010000              	jmp .L_lambda_opt_end_0023
 10583                                  .L_lambda_opt_code_0023:	; lambda-opt body
 10584 000074B7 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10585 000074BD 740D                    	je .L_lambda_opt_arity_check_exact_0023  ;same num_of_args
 10586 000074BF 7F5B                    	jg .L_lambda_opt_arity_check_more_0023  ;greater num_of_args
 10587 000074C1 FF742410                	push qword [rsp + 8 * 2]
 10588 000074C5 6A00                    	push 0
 10589 000074C7 E91B9A0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 10590                                  .L_lambda_opt_arity_check_exact_0023:
 10591 000074CC 4883EC08                	sub rsp, 8 * 1
 10592 000074D0 4889E7                  	mov rdi, rsp 
 10593                                  	;mov ret
 10594 000074D3 488B4708                	mov rax, qword [rdi + (8 * 1)]
 10595 000074D7 488907                  	mov qword [rdi], rax
 10596 000074DA 4883C708                	add rdi, 8
 10597                                  	;mov env
 10598 000074DE 488B4708                	mov rax, qword [rdi + (8 * 1)]
 10599 000074E2 488907                  	mov qword [rdi], rax
 10600 000074E5 4883C708                	add rdi, 8
 10601                                  	;mov & update COUNT
 10602 000074E9 488B4708                	mov rax, qword [rdi +(8 * 1)]
 10603 000074ED 4889C1                  	mov rcx, rax
 10604 000074F0 48FFC0                  	inc rax
 10605 000074F3 488907                  	mov qword [rdi], rax
 10606 000074F6 4883C708                	add rdi, 8
 10607                                  	;LOOP:move params
 10608                                  .L_lambda_opt_stack_shrink_loop_0067:	
 10609 000074FA 4883F900                	cmp rcx, 0
 10610 000074FE 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0067
 10611 00007500 488B4708                	mov rax, qword [rdi + 8]
 10612 00007504 488907                  	mov qword [rdi], rax
 10613 00007507 4883C708                	add rdi, 8
 10614 0000750B 48FFC9                  	dec rcx
 10615 0000750E EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0067
 10616                                  .L_lambda_opt_stack_shrink_loop_exit_0067:	
 10617 00007510 48C707[01000000]        	mov qword [rdi], sob_nil
 10618 00007517 E994000000              	jmp .L_lambda_opt_stack_adjusted_0023
 10619                                  .L_lambda_opt_arity_check_more_0023:	
 10620 0000751C 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 10621 00007521 488D0E                  	lea rcx, [rsi - 0]
 10622 00007524 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 10623 00007529 4989F2                  	mov r10, rsi
 10624 0000752C 49B9-                   	mov r9, sob_nil
 10624 0000752E [0100000000000000] 
 10625                                  .L_lambda_opt_stack_shrink_loop_0068:	
 10626 00007536 4883F900                	cmp rcx, 0
 10627 0000753A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0068
 10628 0000753C BF11000000              	mov rdi, 1 + 8 + 8
 10629 00007541 E8D4990000              	call malloc
 10630 00007546 C60021                  	mov byte [rax], T_pair
 10631 00007549 488B1E                  	mov rbx, qword [rsi]
 10632 0000754C 48895801                	mov SOB_PAIR_CAR(rax), rbx
 10633 00007550 4C894809                	mov SOB_PAIR_CDR(rax), r9
 10634 00007554 4989C1                  	mov r9, rax
 10635 00007557 4883EE08                	sub rsi, 8 * 1
 10636 0000755B 48FFC9                  	dec rcx
 10637 0000755E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0068
 10638                                  .L_lambda_opt_stack_shrink_loop_exit_0068:	
 10639 00007560 4D890A                  	mov qword [r10], r9
 10640 00007563 4983EA08                	sub r10, 8 * 1; the new dest!
 10641 00007567 488D742410              	lea rsi, [rsp + (8 * (0 + 2))];the new src
 10642 0000756C B900000000              	mov rcx, 0 
 10643                                  .L_lambda_opt_stack_shrink_loop_0069:	
 10644 00007571 4883F900                	cmp rcx, 0
 10645 00007575 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0069
 10646 00007577 488B06                  	mov rax, qword [rsi]
 10647 0000757A 498902                  	mov qword [r10], rax
 10648 0000757D 4983EA08                	sub r10, 8 * 1
 10649 00007581 4883EE08                	sub rsi, 8 * 1
 10650 00007585 48FFC9                  	dec rcx
 10651 00007588 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0069
 10652                                  .L_lambda_opt_stack_shrink_loop_exit_0069:	
 10653 0000758A 49C70201000000          	mov qword [r10], 1 + 0; 1=opt
 10654 00007591 4983EA08                	sub r10, 8 * 1
 10655 00007595 4883EE08                	sub rsi, 8 * 1
 10656 00007599 488B06                  	mov rax, qword [rsi] ;env
 10657 0000759C 498902                  	mov qword [r10], rax
 10658 0000759F 4983EA08                	sub r10, 8 * 1
 10659 000075A3 4883EE08                	sub rsi, 8 * 1
 10660 000075A7 488B06                  	mov rax, qword [rsi] ;ret
 10661 000075AA 498902                  	mov qword [r10], rax
 10662 000075AD 4C89D4                  	mov rsp, r10
 10663                                  .L_lambda_opt_stack_adjusted_0023:	
 10664 000075B0 C8000000                	enter 0, 0
 10665 000075B4 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 10666 000075B8 50                      	push rax
 10667 000075B9 48B8-                   	mov rax,L_constants + 128
 10667 000075BB [8000000000000000] 
 10668 000075C3 50                      	push rax
 10669 000075C4 488B4510                	mov rax, qword [rbp + 8 * 2]
 10670                                  
 10671 000075C8 488B00                                            	mov rax, qword[rax + 8 * 0]
 10672                                  
 10673 000075CB 488B00                                            	mov rax, qword[rax + 8 * 0]
 10674 000075CE 50                      	push rax
 10675                                  
 10676 000075CF 6A03                    	push 3
 10677 000075D1 488B0425[F8020000]      	mov rax, qword [free_var_95]
 10678                                  	assert_closure(rax)
    42 000075D9 803805              <1>  cmp byte [%1], %2
    43 000075DC 0F852CB10000        <1>  jne L_error_incorrect_type
 10679 000075E2 50                      	push rax 
 10680 000075E3 FF7508                  	push qword [rbp + 8]
 10681 000075E6 FF7500                  	push qword [rbp]
 10682 000075E9 4883C308                	add rbx ,8*1
 10683                                  	 .L_fix_stack_label_010a:
 10684 000075ED 488B5518                	mov rdx, qword[rbp+8*3]
 10685 000075F1 4883C203                	add rdx, 3
 10686 000075F5 48C1E203                	shl rdx, 3
 10687 000075F9 4889EF                  	mov rdi, rbp
 10688 000075FC 4801D7                  	add rdi, rdx
 10689 000075FF 4C8B4500                	mov r8, qword[rbp]
 10690 00007603 4889E9                  	mov rcx, rbp
 10691 00007606 4883E908                	sub rcx, 8
 10692                                  	 .L_loop_fix_stuck_010a:
 10693 0000760A 4839CC                  	cmp rsp, rcx
 10694 0000760D 7710                    ja .L_loop_fix_stuck_end_010a
 10695 0000760F 488B19                   	mov rbx, qword[rcx]
 10696 00007612 48891F                  	 mov qword[rdi], rbx
 10697 00007615 4883EF08                	sub rdi, 8
 10698 00007619 4883E908                	sub rcx, 8
 10699 0000761D EBEB                    jmp .L_loop_fix_stuck_010a
 10700                                  	 .L_loop_fix_stuck_end_010a:
 10701 0000761F 4883C708                	add rdi, 8
 10702 00007623 4889FC                  	 mov rsp, rdi
 10703 00007626 4C89C5                  	mov rbp, r8
 10704 00007629 5D                      	pop rbp
 10705 0000762A FFE0                    	jmp rax 
 10706 0000762C C9                      	leave
 10707 0000762D C21800                  	ret 8 * (2 + 1)
 10708                                  .L_lambda_opt_end_0023:	; new closure is in rax
 10709 00007630 C9                      	leave
 10710 00007631 C21800                  	ret 8 * (2 + 1)
 10711                                  .L_lambda_simple_end_00dd:	; new closure is in rax
 10712                                  	assert_closure(rax)
    42 00007634 803805              <1>  cmp byte [%1], %2
    43 00007637 0F85D1B00000        <1>  jne L_error_incorrect_type
 10713 0000763D 50                      	push rax 
 10714 0000763E FF7508                  	push qword [rbp + 8]
 10715 00007641 FF7500                  	push qword [rbp]
 10716 00007644 4883C308                	add rbx ,8*1
 10717                                  	 .L_fix_stack_label_0109:
 10718 00007648 488B5518                	mov rdx, qword[rbp+8*3]
 10719 0000764C 4883C203                	add rdx, 3
 10720 00007650 48C1E203                	shl rdx, 3
 10721 00007654 4889EF                  	mov rdi, rbp
 10722 00007657 4801D7                  	add rdi, rdx
 10723 0000765A 4C8B4500                	mov r8, qword[rbp]
 10724 0000765E 4889E9                  	mov rcx, rbp
 10725 00007661 4883E908                	sub rcx, 8
 10726                                  	 .L_loop_fix_stuck_0109:
 10727 00007665 4839CC                  	cmp rsp, rcx
 10728 00007668 7710                    ja .L_loop_fix_stuck_end_0109
 10729 0000766A 488B19                   	mov rbx, qword[rcx]
 10730 0000766D 48891F                  	 mov qword[rdi], rbx
 10731 00007670 4883EF08                	sub rdi, 8
 10732 00007674 4883E908                	sub rcx, 8
 10733 00007678 EBEB                    jmp .L_loop_fix_stuck_0109
 10734                                  	 .L_loop_fix_stuck_end_0109:
 10735 0000767A 4883C708                	add rdi, 8
 10736 0000767E 4889FC                  	 mov rsp, rdi
 10737 00007681 4C89C5                  	mov rbp, r8
 10738 00007684 5D                      	pop rbp
 10739 00007685 FFE0                    	jmp rax 
 10740 00007687 C9                      	leave
 10741 00007688 C21800                  	ret 8 * (2 + 1)
 10742                                  .L_lambda_simple_end_00db:	; new closure is in rax
 10743 0000768B 803805                  	cmp byte [rax], T_closure 
 10744 0000768E 0F853BA80000                    jne L_code_ptr_error
 10745                                  
 10746 00007694 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10747                                  
 10748 00007698 53                              push rbx
 10749                                  
 10750 00007699 FF5009                          call SOB_CLOSURE_CODE(rax)
 10751                                  
 10752 0000769C 48890425[18030000]              	mov qword [free_var_99], rax
 10753 000076A4 48B8-                   	mov rax, sob_void
 10753 000076A6 [0000000000000000] 
 10754                                  
 10755 000076AE 4889C7                  	mov rdi, rax
 10756 000076B1 E875980000              	call print_sexpr_if_not_void
 10757                                  
 10758 000076B6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10759 000076BB E85A980000              	call malloc
 10760 000076C0 50                      	push rax
 10761 000076C1 BF00000000              	mov rdi, 8 * 0	; new rib
 10762 000076C6 E84F980000              	call malloc
 10763 000076CB 50                      	push rax
 10764 000076CC BF08000000              	mov rdi, 8 * 1	; extended env
 10765 000076D1 E844980000              	call malloc
 10766 000076D6 488B7D10                	mov rdi, ENV
 10767 000076DA BE00000000              	mov rsi, 0
 10768 000076DF BA01000000              	mov rdx, 1
 10769                                  .L_lambda_simple_env_loop_00de:	; ext_env[i + 1] <-- env[i]
 10770 000076E4 4883FE00                	cmp rsi, 0
 10771 000076E8 7410                    	je .L_lambda_simple_env_end_00de
 10772 000076EA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10773 000076EE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10774 000076F2 48FFC6                  	inc rsi
 10775 000076F5 48FFC2                  	inc rdx
 10776 000076F8 EBEA                    	jmp .L_lambda_simple_env_loop_00de
 10777                                  .L_lambda_simple_env_end_00de:
 10778 000076FA 5B                      	pop rbx
 10779 000076FB BE00000000              	mov rsi, 0
 10780                                  .L_lambda_simple_params_loop_00de:	; copy params
 10781 00007700 4883FE00                	cmp rsi, 0
 10782 00007704 740E                    	je .L_lambda_simple_params_end_00de
 10783 00007706 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10784 0000770B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10785 0000770F 48FFC6                  	inc rsi
 10786 00007712 EBEC                    	jmp .L_lambda_simple_params_loop_00de
 10787                                  .L_lambda_simple_params_end_00de:
 10788 00007714 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10789 00007717 4889C3                  	mov rbx, rax
 10790 0000771A 58                      	pop rax
 10791 0000771B C60005                  	mov byte [rax], T_closure
 10792 0000771E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10793 00007722 48C74009[2F770000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00de
 10794 0000772A E98E000000              	jmp .L_lambda_simple_end_00de
 10795                                  .L_lambda_simple_code_00de:	; lambda-simple body
 10796 0000772F 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10797 00007735 740B                    	je .L_lambda_simple_arity_check_ok_00de
 10798 00007737 FF742410                	push qword [rsp + 8 * 2]
 10799 0000773B 6A00                    	push 0
 10800 0000773D E991970000              	jmp L_error_incorrect_arity_simple
 10801                                  .L_lambda_simple_arity_check_ok_00de:
 10802 00007742 C8000000                	enter 0, 0
 10803 00007746 48B8-                   	 	mov rax,L_constants + 68
 10803 00007748 [4400000000000000] 
 10804 00007750 50                      	push rax
 10805 00007751 48B8-                   	mov rax,L_constants + 174
 10805 00007753 [AE00000000000000] 
 10806 0000775B 50                      	push rax
 10807                                  
 10808 0000775C 6A02                    	push 2
 10809 0000775E 488B0425[30010000]      	mov rax, qword [free_var_38]
 10810                                  	assert_closure(rax)
    42 00007766 803805              <1>  cmp byte [%1], %2
    43 00007769 0F859FAF0000        <1>  jne L_error_incorrect_type
 10811 0000776F 50                      	push rax 
 10812 00007770 FF7508                  	push qword [rbp + 8]
 10813 00007773 FF7500                  	push qword [rbp]
 10814 00007776 4883C308                	add rbx ,8*1
 10815                                  	 .L_fix_stack_label_010b:
 10816 0000777A 488B5518                	mov rdx, qword[rbp+8*3]
 10817 0000777E 4883C203                	add rdx, 3
 10818 00007782 48C1E203                	shl rdx, 3
 10819 00007786 4889EF                  	mov rdi, rbp
 10820 00007789 4801D7                  	add rdi, rdx
 10821 0000778C 4C8B4500                	mov r8, qword[rbp]
 10822 00007790 4889E9                  	mov rcx, rbp
 10823 00007793 4883E908                	sub rcx, 8
 10824                                  	 .L_loop_fix_stuck_010b:
 10825 00007797 4839CC                  	cmp rsp, rcx
 10826 0000779A 7710                    ja .L_loop_fix_stuck_end_010b
 10827 0000779C 488B19                   	mov rbx, qword[rcx]
 10828 0000779F 48891F                  	 mov qword[rdi], rbx
 10829 000077A2 4883EF08                	sub rdi, 8
 10830 000077A6 4883E908                	sub rcx, 8
 10831 000077AA EBEB                    jmp .L_loop_fix_stuck_010b
 10832                                  	 .L_loop_fix_stuck_end_010b:
 10833 000077AC 4883C708                	add rdi, 8
 10834 000077B0 4889FC                  	 mov rsp, rdi
 10835 000077B3 4C89C5                  	mov rbp, r8
 10836 000077B6 5D                      	pop rbp
 10837 000077B7 FFE0                    	jmp rax 
 10838 000077B9 C9                      	leave
 10839 000077BA C21000                  	ret 8 * (2 + 0)
 10840                                  .L_lambda_simple_end_00de:	; new closure is in rax
 10841 000077BD 50                      	push rax
 10842 000077BE 6A01                    	push 1
 10843 000077C0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10844 000077C5 E850970000              	call malloc
 10845 000077CA 50                      	push rax
 10846 000077CB BF00000000              	mov rdi, 8 * 0	; new rib
 10847 000077D0 E845970000              	call malloc
 10848 000077D5 50                      	push rax
 10849 000077D6 BF08000000              	mov rdi, 8 * 1	; extended env
 10850 000077DB E83A970000              	call malloc
 10851 000077E0 488B7D10                	mov rdi, ENV
 10852 000077E4 BE00000000              	mov rsi, 0
 10853 000077E9 BA01000000              	mov rdx, 1
 10854                                  .L_lambda_simple_env_loop_00df:	; ext_env[i + 1] <-- env[i]
 10855 000077EE 4883FE00                	cmp rsi, 0
 10856 000077F2 7410                    	je .L_lambda_simple_env_end_00df
 10857 000077F4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10858 000077F8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10859 000077FC 48FFC6                  	inc rsi
 10860 000077FF 48FFC2                  	inc rdx
 10861 00007802 EBEA                    	jmp .L_lambda_simple_env_loop_00df
 10862                                  .L_lambda_simple_env_end_00df:
 10863 00007804 5B                      	pop rbx
 10864 00007805 BE00000000              	mov rsi, 0
 10865                                  .L_lambda_simple_params_loop_00df:	; copy params
 10866 0000780A 4883FE00                	cmp rsi, 0
 10867 0000780E 740E                    	je .L_lambda_simple_params_end_00df
 10868 00007810 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10869 00007815 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10870 00007819 48FFC6                  	inc rsi
 10871 0000781C EBEC                    	jmp .L_lambda_simple_params_loop_00df
 10872                                  .L_lambda_simple_params_end_00df:
 10873 0000781E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10874 00007821 4889C3                  	mov rbx, rax
 10875 00007824 58                      	pop rax
 10876 00007825 C60005                  	mov byte [rax], T_closure
 10877 00007828 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10878 0000782C 48C74009[39780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00df
 10879 00007834 E944090000              	jmp .L_lambda_simple_end_00df
 10880                                  .L_lambda_simple_code_00df:	; lambda-simple body
 10881 00007839 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10882 0000783F 740B                    	je .L_lambda_simple_arity_check_ok_00df
 10883 00007841 FF742410                	push qword [rsp + 8 * 2]
 10884 00007845 6A01                    	push 1
 10885 00007847 E987960000              	jmp L_error_incorrect_arity_simple
 10886                                  .L_lambda_simple_arity_check_ok_00df:
 10887 0000784C C8000000                	enter 0, 0
 10888 00007850 BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 10889 00007855 E8C0960000              	call malloc
 10890 0000785A 50                      	push rax
 10891 0000785B BF08000000              	mov rdi, 8 * 1	; new rib
 10892 00007860 E8B5960000              	call malloc
 10893 00007865 50                      	push rax
 10894 00007866 BF10000000              	mov rdi, 8 * 2	; extended env
 10895 0000786B E8AA960000              	call malloc
 10896 00007870 488B7D10                	mov rdi, ENV
 10897 00007874 BE00000000              	mov rsi, 0
 10898 00007879 BA01000000              	mov rdx, 1
 10899                                  .L_lambda_simple_env_loop_00e0:	; ext_env[i + 1] <-- env[i]
 10900 0000787E 4883FE01                	cmp rsi, 1
 10901 00007882 7410                    	je .L_lambda_simple_env_end_00e0
 10902 00007884 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10903 00007888 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10904 0000788C 48FFC6                  	inc rsi
 10905 0000788F 48FFC2                  	inc rdx
 10906 00007892 EBEA                    	jmp .L_lambda_simple_env_loop_00e0
 10907                                  .L_lambda_simple_env_end_00e0:
 10908 00007894 5B                      	pop rbx
 10909 00007895 BE00000000              	mov rsi, 0
 10910                                  .L_lambda_simple_params_loop_00e0:	; copy params
 10911 0000789A 4883FE01                	cmp rsi, 1
 10912 0000789E 740E                    	je .L_lambda_simple_params_end_00e0
 10913 000078A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10914 000078A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10915 000078A9 48FFC6                  	inc rsi
 10916 000078AC EBEC                    	jmp .L_lambda_simple_params_loop_00e0
 10917                                  .L_lambda_simple_params_end_00e0:
 10918 000078AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10919 000078B1 4889C3                  	mov rbx, rax
 10920 000078B4 58                      	pop rax
 10921 000078B5 C60005                  	mov byte [rax], T_closure
 10922 000078B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10923 000078BC 48C74009[C9780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e0
 10924 000078C4 E921040000              	jmp .L_lambda_simple_end_00e0
 10925                                  .L_lambda_simple_code_00e0:	; lambda-simple body
 10926 000078C9 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10927 000078CF 740B                    	je .L_lambda_simple_arity_check_ok_00e0
 10928 000078D1 FF742410                	push qword [rsp + 8 * 2]
 10929 000078D5 6A02                    	push 2
 10930 000078D7 E9F7950000              	jmp L_error_incorrect_arity_simple
 10931                                  .L_lambda_simple_arity_check_ok_00e0:
 10932 000078DC C8000000                	enter 0, 0
 10933 000078E0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10934 000078E4 50                      	push rax
 10935 000078E5 6A01                    	push 1
 10936 000078E7 488B0425[48000000]      	mov rax, qword [free_var_9]
 10937 000078EF 803805                  	cmp byte [rax], T_closure 
 10938 000078F2 0F85D7A50000                    jne L_code_ptr_error
 10939                                  
 10940 000078F8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10941                                  
 10942 000078FC 53                              push rbx
 10943                                  
 10944 000078FD FF5009                          call SOB_CLOSURE_CODE(rax)
 10945                                  
 10946                                          
 10947 00007900 483D[02000000]                  	cmp rax, sob_boolean_false
 10948                                  
 10949 00007906 0F84A9010000                    	je .L_if_else_0082
 10950 0000790C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10951 00007910 50                      	push rax
 10952 00007911 6A01                    	push 1
 10953 00007913 488B0425[48000000]      	mov rax, qword [free_var_9]
 10954 0000791B 803805                  	cmp byte [rax], T_closure 
 10955 0000791E 0F85ABA50000                    jne L_code_ptr_error
 10956                                  
 10957 00007924 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 10958                                  
 10959 00007928 53                              push rbx
 10960                                  
 10961 00007929 FF5009                          call SOB_CLOSURE_CODE(rax)
 10962                                  
 10963                                          
 10964 0000792C 483D[02000000]                  	cmp rax, sob_boolean_false
 10965                                  
 10966 00007932 746C                            	je .L_if_else_0086
 10967 00007934 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 10968 00007938 50                      	push rax
 10969 00007939 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10970 0000793D 50                      	push rax
 10971                                  
 10972 0000793E 6A02                    	push 2
 10973 00007940 488B0425[28010000]      	mov rax, qword [free_var_37]
 10974                                  	assert_closure(rax)
    42 00007948 803805              <1>  cmp byte [%1], %2
    43 0000794B 0F85BDAD0000        <1>  jne L_error_incorrect_type
 10975 00007951 50                      	push rax 
 10976 00007952 FF7508                  	push qword [rbp + 8]
 10977 00007955 FF7500                  	push qword [rbp]
 10978 00007958 4883C308                	add rbx ,8*1
 10979                                  	 .L_fix_stack_label_0112:
 10980 0000795C 488B5518                	mov rdx, qword[rbp+8*3]
 10981 00007960 4883C203                	add rdx, 3
 10982 00007964 48C1E203                	shl rdx, 3
 10983 00007968 4889EF                  	mov rdi, rbp
 10984 0000796B 4801D7                  	add rdi, rdx
 10985 0000796E 4C8B4500                	mov r8, qword[rbp]
 10986 00007972 4889E9                  	mov rcx, rbp
 10987 00007975 4883E908                	sub rcx, 8
 10988                                  	 .L_loop_fix_stuck_0112:
 10989 00007979 4839CC                  	cmp rsp, rcx
 10990 0000797C 7710                    ja .L_loop_fix_stuck_end_0112
 10991 0000797E 488B19                   	mov rbx, qword[rcx]
 10992 00007981 48891F                  	 mov qword[rdi], rbx
 10993 00007984 4883EF08                	sub rdi, 8
 10994 00007988 4883E908                	sub rcx, 8
 10995 0000798C EBEB                    jmp .L_loop_fix_stuck_0112
 10996                                  	 .L_loop_fix_stuck_end_0112:
 10997 0000798E 4883C708                	add rdi, 8
 10998 00007992 4889FC                  	 mov rsp, rdi
 10999 00007995 4C89C5                  	mov rbp, r8
 11000 00007998 5D                      	pop rbp
 11001 00007999 FFE0                    	jmp rax 
 11002                                  
 11003 0000799B E910010000                      	jmp .L_if_end_0086
 11004                                  
 11005                                          	.L_if_else_0086:
 11006 000079A0 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11007 000079A4 50                      	push rax
 11008 000079A5 6A01                    	push 1
 11009 000079A7 488B0425[40000000]      	mov rax, qword [free_var_8]
 11010 000079AF 803805                  	cmp byte [rax], T_closure 
 11011 000079B2 0F8517A50000                    jne L_code_ptr_error
 11012                                  
 11013 000079B8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11014                                  
 11015 000079BC 53                              push rbx
 11016                                  
 11017 000079BD FF5009                          call SOB_CLOSURE_CODE(rax)
 11018                                  
 11019                                          
 11020 000079C0 483D[02000000]                  	cmp rax, sob_boolean_false
 11021                                  
 11022 000079C6 0F8485000000                    	je .L_if_else_0087
 11023 000079CC 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 11024 000079D0 50                      	push rax
 11025 000079D1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11026 000079D5 50                      	push rax
 11027 000079D6 6A01                    	push 1
 11028 000079D8 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11029 000079E0 803805                  	cmp byte [rax], T_closure 
 11030 000079E3 0F85E6A40000                    jne L_code_ptr_error
 11031                                  
 11032 000079E9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11033                                  
 11034 000079ED 53                              push rbx
 11035                                  
 11036 000079EE FF5009                          call SOB_CLOSURE_CODE(rax)
 11037                                  
 11038 000079F1 50                              	push rax
 11039                                  
 11040 000079F2 6A02                    	push 2
 11041 000079F4 488B0425[08010000]      	mov rax, qword [free_var_33]
 11042                                  	assert_closure(rax)
    42 000079FC 803805              <1>  cmp byte [%1], %2
    43 000079FF 0F8509AD0000        <1>  jne L_error_incorrect_type
 11043 00007A05 50                      	push rax 
 11044 00007A06 FF7508                  	push qword [rbp + 8]
 11045 00007A09 FF7500                  	push qword [rbp]
 11046 00007A0C 4883C308                	add rbx ,8*1
 11047                                  	 .L_fix_stack_label_0111:
 11048 00007A10 488B5518                	mov rdx, qword[rbp+8*3]
 11049 00007A14 4883C203                	add rdx, 3
 11050 00007A18 48C1E203                	shl rdx, 3
 11051 00007A1C 4889EF                  	mov rdi, rbp
 11052 00007A1F 4801D7                  	add rdi, rdx
 11053 00007A22 4C8B4500                	mov r8, qword[rbp]
 11054 00007A26 4889E9                  	mov rcx, rbp
 11055 00007A29 4883E908                	sub rcx, 8
 11056                                  	 .L_loop_fix_stuck_0111:
 11057 00007A2D 4839CC                  	cmp rsp, rcx
 11058 00007A30 7710                    ja .L_loop_fix_stuck_end_0111
 11059 00007A32 488B19                   	mov rbx, qword[rcx]
 11060 00007A35 48891F                  	 mov qword[rdi], rbx
 11061 00007A38 4883EF08                	sub rdi, 8
 11062 00007A3C 4883E908                	sub rcx, 8
 11063 00007A40 EBEB                    jmp .L_loop_fix_stuck_0111
 11064                                  	 .L_loop_fix_stuck_end_0111:
 11065 00007A42 4883C708                	add rdi, 8
 11066 00007A46 4889FC                  	 mov rsp, rdi
 11067 00007A49 4C89C5                  	mov rbp, r8
 11068 00007A4C 5D                      	pop rbp
 11069 00007A4D FFE0                    	jmp rax 
 11070                                  
 11071 00007A4F EB5F                            	jmp .L_if_end_0087
 11072                                  
 11073                                          	.L_if_else_0087:
 11074                                  	 
 11075 00007A51 6A00                    	push 0
 11076 00007A53 488B4510                	mov rax, qword [rbp + 8 * 2]
 11077                                  
 11078 00007A57 488B00                                            	mov rax, qword[rax + 8 * 0]
 11079                                  
 11080 00007A5A 488B00                                            	mov rax, qword[rax + 8 * 0]
 11081                                  	assert_closure(rax)
    42 00007A5D 803805              <1>  cmp byte [%1], %2
    43 00007A60 0F85A8AC0000        <1>  jne L_error_incorrect_type
 11082 00007A66 50                      	push rax 
 11083 00007A67 FF7508                  	push qword [rbp + 8]
 11084 00007A6A FF7500                  	push qword [rbp]
 11085 00007A6D 4883C308                	add rbx ,8*1
 11086                                  	 .L_fix_stack_label_0110:
 11087 00007A71 488B5518                	mov rdx, qword[rbp+8*3]
 11088 00007A75 4883C203                	add rdx, 3
 11089 00007A79 48C1E203                	shl rdx, 3
 11090 00007A7D 4889EF                  	mov rdi, rbp
 11091 00007A80 4801D7                  	add rdi, rdx
 11092 00007A83 4C8B4500                	mov r8, qword[rbp]
 11093 00007A87 4889E9                  	mov rcx, rbp
 11094 00007A8A 4883E908                	sub rcx, 8
 11095                                  	 .L_loop_fix_stuck_0110:
 11096 00007A8E 4839CC                  	cmp rsp, rcx
 11097 00007A91 7710                    ja .L_loop_fix_stuck_end_0110
 11098 00007A93 488B19                   	mov rbx, qword[rcx]
 11099 00007A96 48891F                  	 mov qword[rdi], rbx
 11100 00007A99 4883EF08                	sub rdi, 8
 11101 00007A9D 4883E908                	sub rcx, 8
 11102 00007AA1 EBEB                    jmp .L_loop_fix_stuck_0110
 11103                                  	 .L_loop_fix_stuck_end_0110:
 11104 00007AA3 4883C708                	add rdi, 8
 11105 00007AA7 4889FC                  	 mov rsp, rdi
 11106 00007AAA 4C89C5                  	mov rbp, r8
 11107 00007AAD 5D                      	pop rbp
 11108 00007AAE FFE0                    	jmp rax 
 11109                                  
 11110                                          	.L_if_end_0087:
 11111                                  
 11112                                          	.L_if_end_0086:
 11113                                  
 11114 00007AB0 E931020000                      	jmp .L_if_end_0082
 11115                                  
 11116                                          	.L_if_else_0082:
 11117 00007AB5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11118 00007AB9 50                      	push rax
 11119 00007ABA 6A01                    	push 1
 11120 00007ABC 488B0425[40000000]      	mov rax, qword [free_var_8]
 11121 00007AC4 803805                  	cmp byte [rax], T_closure 
 11122 00007AC7 0F8502A40000                    jne L_code_ptr_error
 11123                                  
 11124 00007ACD 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11125                                  
 11126 00007AD1 53                              push rbx
 11127                                  
 11128 00007AD2 FF5009                          call SOB_CLOSURE_CODE(rax)
 11129                                  
 11130                                          
 11131 00007AD5 483D[02000000]                  	cmp rax, sob_boolean_false
 11132                                  
 11133 00007ADB 0F84A6010000                    	je .L_if_else_0083
 11134 00007AE1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11135 00007AE5 50                      	push rax
 11136 00007AE6 6A01                    	push 1
 11137 00007AE8 488B0425[48000000]      	mov rax, qword [free_var_9]
 11138 00007AF0 803805                  	cmp byte [rax], T_closure 
 11139 00007AF3 0F85D6A30000                    jne L_code_ptr_error
 11140                                  
 11141 00007AF9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11142                                  
 11143 00007AFD 53                              push rbx
 11144                                  
 11145 00007AFE FF5009                          call SOB_CLOSURE_CODE(rax)
 11146                                  
 11147                                          
 11148 00007B01 483D[02000000]                  	cmp rax, sob_boolean_false
 11149                                  
 11150 00007B07 0F8488000000                    	je .L_if_else_0084
 11151 00007B0D 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 11152 00007B11 50                      	push rax
 11153 00007B12 6A01                    	push 1
 11154 00007B14 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11155 00007B1C 803805                  	cmp byte [rax], T_closure 
 11156 00007B1F 0F85AAA30000                    jne L_code_ptr_error
 11157                                  
 11158 00007B25 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11159                                  
 11160 00007B29 53                              push rbx
 11161                                  
 11162 00007B2A FF5009                          call SOB_CLOSURE_CODE(rax)
 11163                                  
 11164 00007B2D 50                              	push rax
 11165 00007B2E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11166 00007B32 50                      	push rax
 11167                                  
 11168 00007B33 6A02                    	push 2
 11169 00007B35 488B0425[08010000]      	mov rax, qword [free_var_33]
 11170                                  	assert_closure(rax)
    42 00007B3D 803805              <1>  cmp byte [%1], %2
    43 00007B40 0F85C8AB0000        <1>  jne L_error_incorrect_type
 11171 00007B46 50                      	push rax 
 11172 00007B47 FF7508                  	push qword [rbp + 8]
 11173 00007B4A FF7500                  	push qword [rbp]
 11174 00007B4D 4883C308                	add rbx ,8*1
 11175                                  	 .L_fix_stack_label_010f:
 11176 00007B51 488B5518                	mov rdx, qword[rbp+8*3]
 11177 00007B55 4883C203                	add rdx, 3
 11178 00007B59 48C1E203                	shl rdx, 3
 11179 00007B5D 4889EF                  	mov rdi, rbp
 11180 00007B60 4801D7                  	add rdi, rdx
 11181 00007B63 4C8B4500                	mov r8, qword[rbp]
 11182 00007B67 4889E9                  	mov rcx, rbp
 11183 00007B6A 4883E908                	sub rcx, 8
 11184                                  	 .L_loop_fix_stuck_010f:
 11185 00007B6E 4839CC                  	cmp rsp, rcx
 11186 00007B71 7710                    ja .L_loop_fix_stuck_end_010f
 11187 00007B73 488B19                   	mov rbx, qword[rcx]
 11188 00007B76 48891F                  	 mov qword[rdi], rbx
 11189 00007B79 4883EF08                	sub rdi, 8
 11190 00007B7D 4883E908                	sub rcx, 8
 11191 00007B81 EBEB                    jmp .L_loop_fix_stuck_010f
 11192                                  	 .L_loop_fix_stuck_end_010f:
 11193 00007B83 4883C708                	add rdi, 8
 11194 00007B87 4889FC                  	 mov rsp, rdi
 11195 00007B8A 4C89C5                  	mov rbp, r8
 11196 00007B8D 5D                      	pop rbp
 11197 00007B8E FFE0                    	jmp rax 
 11198                                  
 11199 00007B90 E9F0000000                      	jmp .L_if_end_0084
 11200                                  
 11201                                          	.L_if_else_0084:
 11202 00007B95 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11203 00007B99 50                      	push rax
 11204 00007B9A 6A01                    	push 1
 11205 00007B9C 488B0425[40000000]      	mov rax, qword [free_var_8]
 11206 00007BA4 803805                  	cmp byte [rax], T_closure 
 11207 00007BA7 0F8522A30000                    jne L_code_ptr_error
 11208                                  
 11209 00007BAD 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11210                                  
 11211 00007BB1 53                              push rbx
 11212                                  
 11213 00007BB2 FF5009                          call SOB_CLOSURE_CODE(rax)
 11214                                  
 11215                                          
 11216 00007BB5 483D[02000000]                  	cmp rax, sob_boolean_false
 11217                                  
 11218 00007BBB 7469                            	je .L_if_else_0085
 11219 00007BBD 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 11220 00007BC1 50                      	push rax
 11221 00007BC2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11222 00007BC6 50                      	push rax
 11223                                  
 11224 00007BC7 6A02                    	push 2
 11225 00007BC9 488B0425[08010000]      	mov rax, qword [free_var_33]
 11226                                  	assert_closure(rax)
    42 00007BD1 803805              <1>  cmp byte [%1], %2
    43 00007BD4 0F8534AB0000        <1>  jne L_error_incorrect_type
 11227 00007BDA 50                      	push rax 
 11228 00007BDB FF7508                  	push qword [rbp + 8]
 11229 00007BDE FF7500                  	push qword [rbp]
 11230 00007BE1 4883C308                	add rbx ,8*1
 11231                                  	 .L_fix_stack_label_010e:
 11232 00007BE5 488B5518                	mov rdx, qword[rbp+8*3]
 11233 00007BE9 4883C203                	add rdx, 3
 11234 00007BED 48C1E203                	shl rdx, 3
 11235 00007BF1 4889EF                  	mov rdi, rbp
 11236 00007BF4 4801D7                  	add rdi, rdx
 11237 00007BF7 4C8B4500                	mov r8, qword[rbp]
 11238 00007BFB 4889E9                  	mov rcx, rbp
 11239 00007BFE 4883E908                	sub rcx, 8
 11240                                  	 .L_loop_fix_stuck_010e:
 11241 00007C02 4839CC                  	cmp rsp, rcx
 11242 00007C05 7710                    ja .L_loop_fix_stuck_end_010e
 11243 00007C07 488B19                   	mov rbx, qword[rcx]
 11244 00007C0A 48891F                  	 mov qword[rdi], rbx
 11245 00007C0D 4883EF08                	sub rdi, 8
 11246 00007C11 4883E908                	sub rcx, 8
 11247 00007C15 EBEB                    jmp .L_loop_fix_stuck_010e
 11248                                  	 .L_loop_fix_stuck_end_010e:
 11249 00007C17 4883C708                	add rdi, 8
 11250 00007C1B 4889FC                  	 mov rsp, rdi
 11251 00007C1E 4C89C5                  	mov rbp, r8
 11252 00007C21 5D                      	pop rbp
 11253 00007C22 FFE0                    	jmp rax 
 11254                                  
 11255 00007C24 EB5F                            	jmp .L_if_end_0085
 11256                                  
 11257                                          	.L_if_else_0085:
 11258                                  	 
 11259 00007C26 6A00                    	push 0
 11260 00007C28 488B4510                	mov rax, qword [rbp + 8 * 2]
 11261                                  
 11262 00007C2C 488B00                                            	mov rax, qword[rax + 8 * 0]
 11263                                  
 11264 00007C2F 488B00                                            	mov rax, qword[rax + 8 * 0]
 11265                                  	assert_closure(rax)
    42 00007C32 803805              <1>  cmp byte [%1], %2
    43 00007C35 0F85D3AA0000        <1>  jne L_error_incorrect_type
 11266 00007C3B 50                      	push rax 
 11267 00007C3C FF7508                  	push qword [rbp + 8]
 11268 00007C3F FF7500                  	push qword [rbp]
 11269 00007C42 4883C308                	add rbx ,8*1
 11270                                  	 .L_fix_stack_label_010d:
 11271 00007C46 488B5518                	mov rdx, qword[rbp+8*3]
 11272 00007C4A 4883C203                	add rdx, 3
 11273 00007C4E 48C1E203                	shl rdx, 3
 11274 00007C52 4889EF                  	mov rdi, rbp
 11275 00007C55 4801D7                  	add rdi, rdx
 11276 00007C58 4C8B4500                	mov r8, qword[rbp]
 11277 00007C5C 4889E9                  	mov rcx, rbp
 11278 00007C5F 4883E908                	sub rcx, 8
 11279                                  	 .L_loop_fix_stuck_010d:
 11280 00007C63 4839CC                  	cmp rsp, rcx
 11281 00007C66 7710                    ja .L_loop_fix_stuck_end_010d
 11282 00007C68 488B19                   	mov rbx, qword[rcx]
 11283 00007C6B 48891F                  	 mov qword[rdi], rbx
 11284 00007C6E 4883EF08                	sub rdi, 8
 11285 00007C72 4883E908                	sub rcx, 8
 11286 00007C76 EBEB                    jmp .L_loop_fix_stuck_010d
 11287                                  	 .L_loop_fix_stuck_end_010d:
 11288 00007C78 4883C708                	add rdi, 8
 11289 00007C7C 4889FC                  	 mov rsp, rdi
 11290 00007C7F 4C89C5                  	mov rbp, r8
 11291 00007C82 5D                      	pop rbp
 11292 00007C83 FFE0                    	jmp rax 
 11293                                  
 11294                                          	.L_if_end_0085:
 11295                                  
 11296                                          	.L_if_end_0084:
 11297                                  
 11298 00007C85 EB5F                            	jmp .L_if_end_0083
 11299                                  
 11300                                          	.L_if_else_0083:
 11301                                  	 
 11302 00007C87 6A00                    	push 0
 11303 00007C89 488B4510                	mov rax, qword [rbp + 8 * 2]
 11304                                  
 11305 00007C8D 488B00                                            	mov rax, qword[rax + 8 * 0]
 11306                                  
 11307 00007C90 488B00                                            	mov rax, qword[rax + 8 * 0]
 11308                                  	assert_closure(rax)
    42 00007C93 803805              <1>  cmp byte [%1], %2
    43 00007C96 0F8572AA0000        <1>  jne L_error_incorrect_type
 11309 00007C9C 50                      	push rax 
 11310 00007C9D FF7508                  	push qword [rbp + 8]
 11311 00007CA0 FF7500                  	push qword [rbp]
 11312 00007CA3 4883C308                	add rbx ,8*1
 11313                                  	 .L_fix_stack_label_010c:
 11314 00007CA7 488B5518                	mov rdx, qword[rbp+8*3]
 11315 00007CAB 4883C203                	add rdx, 3
 11316 00007CAF 48C1E203                	shl rdx, 3
 11317 00007CB3 4889EF                  	mov rdi, rbp
 11318 00007CB6 4801D7                  	add rdi, rdx
 11319 00007CB9 4C8B4500                	mov r8, qword[rbp]
 11320 00007CBD 4889E9                  	mov rcx, rbp
 11321 00007CC0 4883E908                	sub rcx, 8
 11322                                  	 .L_loop_fix_stuck_010c:
 11323 00007CC4 4839CC                  	cmp rsp, rcx
 11324 00007CC7 7710                    ja .L_loop_fix_stuck_end_010c
 11325 00007CC9 488B19                   	mov rbx, qword[rcx]
 11326 00007CCC 48891F                  	 mov qword[rdi], rbx
 11327 00007CCF 4883EF08                	sub rdi, 8
 11328 00007CD3 4883E908                	sub rcx, 8
 11329 00007CD7 EBEB                    jmp .L_loop_fix_stuck_010c
 11330                                  	 .L_loop_fix_stuck_end_010c:
 11331 00007CD9 4883C708                	add rdi, 8
 11332 00007CDD 4889FC                  	 mov rsp, rdi
 11333 00007CE0 4C89C5                  	mov rbp, r8
 11334 00007CE3 5D                      	pop rbp
 11335 00007CE4 FFE0                    	jmp rax 
 11336                                  
 11337                                          	.L_if_end_0083:
 11338                                  
 11339                                          	.L_if_end_0082:
 11340 00007CE6 C9                      	leave
 11341 00007CE7 C22000                  	ret 8 * (2 + 2)
 11342                                  .L_lambda_simple_end_00e0:	; new closure is in rax
 11343 00007CEA 50                      	push rax
 11344                                  
 11345 00007CEB 6A01                    	push 1
 11346 00007CED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11347 00007CF2 E823920000              	call malloc
 11348 00007CF7 50                      	push rax
 11349 00007CF8 BF08000000              	mov rdi, 8 * 1	; new rib
 11350 00007CFD E818920000              	call malloc
 11351 00007D02 50                      	push rax
 11352 00007D03 BF10000000              	mov rdi, 8 * 2	; extended env
 11353 00007D08 E80D920000              	call malloc
 11354 00007D0D 488B7D10                	mov rdi, ENV
 11355 00007D11 BE00000000              	mov rsi, 0
 11356 00007D16 BA01000000              	mov rdx, 1
 11357                                  .L_lambda_simple_env_loop_00e1:	; ext_env[i + 1] <-- env[i]
 11358 00007D1B 4883FE01                	cmp rsi, 1
 11359 00007D1F 7410                    	je .L_lambda_simple_env_end_00e1
 11360 00007D21 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11361 00007D25 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11362 00007D29 48FFC6                  	inc rsi
 11363 00007D2C 48FFC2                  	inc rdx
 11364 00007D2F EBEA                    	jmp .L_lambda_simple_env_loop_00e1
 11365                                  .L_lambda_simple_env_end_00e1:
 11366 00007D31 5B                      	pop rbx
 11367 00007D32 BE00000000              	mov rsi, 0
 11368                                  .L_lambda_simple_params_loop_00e1:	; copy params
 11369 00007D37 4883FE01                	cmp rsi, 1
 11370 00007D3B 740E                    	je .L_lambda_simple_params_end_00e1
 11371 00007D3D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11372 00007D42 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11373 00007D46 48FFC6                  	inc rsi
 11374 00007D49 EBEC                    	jmp .L_lambda_simple_params_loop_00e1
 11375                                  .L_lambda_simple_params_end_00e1:
 11376 00007D4B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11377 00007D4E 4889C3                  	mov rbx, rax
 11378 00007D51 58                      	pop rax
 11379 00007D52 C60005                  	mov byte [rax], T_closure
 11380 00007D55 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11381 00007D59 48C74009[667D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e1
 11382 00007D61 E9C0030000              	jmp .L_lambda_simple_end_00e1
 11383                                  .L_lambda_simple_code_00e1:	; lambda-simple body
 11384 00007D66 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11385 00007D6C 740B                    	je .L_lambda_simple_arity_check_ok_00e1
 11386 00007D6E FF742410                	push qword [rsp + 8 * 2]
 11387 00007D72 6A01                    	push 1
 11388 00007D74 E95A910000              	jmp L_error_incorrect_arity_simple
 11389                                  .L_lambda_simple_arity_check_ok_00e1:
 11390 00007D79 C8000000                	enter 0, 0
 11391 00007D7D BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 11392 00007D82 E893910000              	call malloc
 11393 00007D87 50                      	push rax
 11394 00007D88 BF08000000              	mov rdi, 8 * 1  ; new rib
 11395 00007D8D E888910000              	call malloc
 11396 00007D92 50                      	push rax
 11397 00007D93 BF18000000              	mov rdi, 8 * 3	; extended env
 11398 00007D98 E87D910000              	call malloc
 11399 00007D9D 488B7D10                	mov rdi, ENV
 11400 00007DA1 BE00000000              	mov rsi, 0
 11401 00007DA6 BA01000000              	mov rdx, 1
 11402                                  .L_lambda_opt_env_loop_0024:	; ext_env = env
 11403 00007DAB 4883FE02                	cmp rsi, 2
 11404 00007DAF 7410                    	je .L_lambda_opt_env_end_0024
 11405 00007DB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11406 00007DB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11407 00007DB9 48FFC6                  	inc rsi
 11408 00007DBC 48FFC2                  	inc rdx
 11409 00007DBF EBEA                    	jmp .L_lambda_opt_env_loop_0024
 11410                                  .L_lambda_opt_env_end_0024:
 11411 00007DC1 5B                      	pop rbx
 11412 00007DC2 BE00000000              	mov rsi, 0
 11413                                  .L_lambda_opt_params_loop_0024:	; copy params
 11414 00007DC7 4883FE01                	cmp rsi, 1
 11415 00007DCB 740E                    	je .L_lambda_opt_params_end_0024
 11416 00007DCD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11417 00007DD2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11418 00007DD6 48FFC6                  	inc rsi
 11419 00007DD9 EBEC                    	jmp .L_lambda_opt_params_loop_0024
 11420                                  .L_lambda_opt_params_end_0024:
 11421 00007DDB 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 11422 00007DDE 4889C3                  	mov rbx, rax
 11423 00007DE1 58                      	pop rax
 11424 00007DE2 C60005                  	mov byte [rax], T_closure
 11425 00007DE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11426 00007DE9 48C74009[F67D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0024
 11427 00007DF1 E92C030000              	jmp .L_lambda_opt_end_0024
 11428                                  .L_lambda_opt_code_0024:	; lambda-opt body
 11429 00007DF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11430 00007DFC 740D                    	je .L_lambda_opt_arity_check_exact_0024  ;same num_of_args
 11431 00007DFE 7F5B                    	jg .L_lambda_opt_arity_check_more_0024  ;greater num_of_args
 11432 00007E00 FF742410                	push qword [rsp + 8 * 2]
 11433 00007E04 6A01                    	push 1
 11434 00007E06 E9DC900000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 11435                                  .L_lambda_opt_arity_check_exact_0024:
 11436 00007E0B 4883EC08                	sub rsp, 8 * 1
 11437 00007E0F 4889E7                  	mov rdi, rsp 
 11438                                  	;mov ret
 11439 00007E12 488B4708                	mov rax, qword [rdi + (8 * 1)]
 11440 00007E16 488907                  	mov qword [rdi], rax
 11441 00007E19 4883C708                	add rdi, 8
 11442                                  	;mov env
 11443 00007E1D 488B4708                	mov rax, qword [rdi + (8 * 1)]
 11444 00007E21 488907                  	mov qword [rdi], rax
 11445 00007E24 4883C708                	add rdi, 8
 11446                                  	;mov & update COUNT
 11447 00007E28 488B4708                	mov rax, qword [rdi +(8 * 1)]
 11448 00007E2C 4889C1                  	mov rcx, rax
 11449 00007E2F 48FFC0                  	inc rax
 11450 00007E32 488907                  	mov qword [rdi], rax
 11451 00007E35 4883C708                	add rdi, 8
 11452                                  	;LOOP:move params
 11453                                  .L_lambda_opt_stack_shrink_loop_006a:	
 11454 00007E39 4883F900                	cmp rcx, 0
 11455 00007E3D 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_006a
 11456 00007E3F 488B4708                	mov rax, qword [rdi + 8]
 11457 00007E43 488907                  	mov qword [rdi], rax
 11458 00007E46 4883C708                	add rdi, 8
 11459 00007E4A 48FFC9                  	dec rcx
 11460 00007E4D EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_006a
 11461                                  .L_lambda_opt_stack_shrink_loop_exit_006a:	
 11462 00007E4F 48C707[01000000]        	mov qword [rdi], sob_nil
 11463 00007E56 E995000000              	jmp .L_lambda_opt_stack_adjusted_0024
 11464                                  .L_lambda_opt_arity_check_more_0024:	
 11465 00007E5B 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 11466 00007E60 488D4EFF                	lea rcx, [rsi - 1]
 11467 00007E64 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 11468 00007E69 4989F2                  	mov r10, rsi
 11469 00007E6C 49B9-                   	mov r9, sob_nil
 11469 00007E6E [0100000000000000] 
 11470                                  .L_lambda_opt_stack_shrink_loop_006b:	
 11471 00007E76 4883F900                	cmp rcx, 0
 11472 00007E7A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_006b
 11473 00007E7C BF11000000              	mov rdi, 1 + 8 + 8
 11474 00007E81 E894900000              	call malloc
 11475 00007E86 C60021                  	mov byte [rax], T_pair
 11476 00007E89 488B1E                  	mov rbx, qword [rsi]
 11477 00007E8C 48895801                	mov SOB_PAIR_CAR(rax), rbx
 11478 00007E90 4C894809                	mov SOB_PAIR_CDR(rax), r9
 11479 00007E94 4989C1                  	mov r9, rax
 11480 00007E97 4883EE08                	sub rsi, 8 * 1
 11481 00007E9B 48FFC9                  	dec rcx
 11482 00007E9E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_006b
 11483                                  .L_lambda_opt_stack_shrink_loop_exit_006b:	
 11484 00007EA0 4D890A                  	mov qword [r10], r9
 11485 00007EA3 4983EA08                	sub r10, 8 * 1; the new dest!
 11486 00007EA7 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
 11487 00007EAC B901000000              	mov rcx, 1 
 11488                                  .L_lambda_opt_stack_shrink_loop_006c:	
 11489 00007EB1 4883F900                	cmp rcx, 0
 11490 00007EB5 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_006c
 11491 00007EB7 488B06                  	mov rax, qword [rsi]
 11492 00007EBA 498902                  	mov qword [r10], rax
 11493 00007EBD 4983EA08                	sub r10, 8 * 1
 11494 00007EC1 4883EE08                	sub rsi, 8 * 1
 11495 00007EC5 48FFC9                  	dec rcx
 11496 00007EC8 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_006c
 11497                                  .L_lambda_opt_stack_shrink_loop_exit_006c:	
 11498 00007ECA 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
 11499 00007ED1 4983EA08                	sub r10, 8 * 1
 11500 00007ED5 4883EE08                	sub rsi, 8 * 1
 11501 00007ED9 488B06                  	mov rax, qword [rsi] ;env
 11502 00007EDC 498902                  	mov qword [r10], rax
 11503 00007EDF 4983EA08                	sub r10, 8 * 1
 11504 00007EE3 4883EE08                	sub rsi, 8 * 1
 11505 00007EE7 488B06                  	mov rax, qword [rsi] ;ret
 11506 00007EEA 498902                  	mov qword [r10], rax
 11507 00007EED 4C89D4                  	mov rsp, r10
 11508                                  .L_lambda_opt_stack_adjusted_0024:	
 11509 00007EF0 C8000000                	enter 0, 0
 11510 00007EF4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11511 00007EF8 50                      	push rax
 11512 00007EF9 6A01                    	push 1
 11513 00007EFB 488B0425[00000000]      	mov rax, qword [free_var_0]
 11514 00007F03 803805                  	cmp byte [rax], T_closure 
 11515 00007F06 0F85C39F0000                    jne L_code_ptr_error
 11516                                  
 11517 00007F0C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11518                                  
 11519 00007F10 53                              push rbx
 11520                                  
 11521 00007F11 FF5009                          call SOB_CLOSURE_CODE(rax)
 11522                                  
 11523                                          
 11524 00007F14 483D[02000000]                  	cmp rax, sob_boolean_false
 11525                                  
 11526 00007F1A 7474                            	je .L_if_else_0088
 11527 00007F1C 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 11528 00007F20 50                      	push rax
 11529 00007F21 48B8-                   	mov rax,L_constants + 128
 11529 00007F23 [8000000000000000] 
 11530 00007F2B 50                      	push rax
 11531                                  
 11532 00007F2C 6A02                    	push 2
 11533 00007F2E 488B4510                	mov rax, qword [rbp + 8 * 2]
 11534                                  
 11535 00007F32 488B00                                            	mov rax, qword[rax + 8 * 0]
 11536                                  
 11537 00007F35 488B00                                            	mov rax, qword[rax + 8 * 0]
 11538                                  	assert_closure(rax)
    42 00007F38 803805              <1>  cmp byte [%1], %2
    43 00007F3B 0F85CDA70000        <1>  jne L_error_incorrect_type
 11539 00007F41 50                      	push rax 
 11540 00007F42 FF7508                  	push qword [rbp + 8]
 11541 00007F45 FF7500                  	push qword [rbp]
 11542 00007F48 4883C308                	add rbx ,8*1
 11543                                  	 .L_fix_stack_label_0116:
 11544 00007F4C 488B5518                	mov rdx, qword[rbp+8*3]
 11545 00007F50 4883C203                	add rdx, 3
 11546 00007F54 48C1E203                	shl rdx, 3
 11547 00007F58 4889EF                  	mov rdi, rbp
 11548 00007F5B 4801D7                  	add rdi, rdx
 11549 00007F5E 4C8B4500                	mov r8, qword[rbp]
 11550 00007F62 4889E9                  	mov rcx, rbp
 11551 00007F65 4883E908                	sub rcx, 8
 11552                                  	 .L_loop_fix_stuck_0116:
 11553 00007F69 4839CC                  	cmp rsp, rcx
 11554 00007F6C 7710                    ja .L_loop_fix_stuck_end_0116
 11555 00007F6E 488B19                   	mov rbx, qword[rcx]
 11556 00007F71 48891F                  	 mov qword[rdi], rbx
 11557 00007F74 4883EF08                	sub rdi, 8
 11558 00007F78 4883E908                	sub rcx, 8
 11559 00007F7C EBEB                    jmp .L_loop_fix_stuck_0116
 11560                                  	 .L_loop_fix_stuck_end_0116:
 11561 00007F7E 4883C708                	add rdi, 8
 11562 00007F82 4889FC                  	 mov rsp, rdi
 11563 00007F85 4C89C5                  	mov rbp, r8
 11564 00007F88 5D                      	pop rbp
 11565 00007F89 FFE0                    	jmp rax 
 11566                                  
 11567 00007F8B E98E010000                      	jmp .L_if_end_0088
 11568                                  
 11569                                          	.L_if_else_0088:
 11570 00007F90 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 11571 00007F94 50                      	push rax
 11572 00007F95 48B8-                   	mov rax,L_constants + 128
 11572 00007F97 [8000000000000000] 
 11573 00007F9F 50                      	push rax
 11574 00007FA0 488B0425[18030000]      	mov rax, qword [free_var_99]
 11575 00007FA8 50                      	push rax
 11576 00007FA9 6A03                    	push 3
 11577 00007FAB 488B0425[F8020000]      	mov rax, qword [free_var_95]
 11578 00007FB3 803805                  	cmp byte [rax], T_closure 
 11579 00007FB6 0F85139F0000                    jne L_code_ptr_error
 11580                                  
 11581 00007FBC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11582                                  
 11583 00007FC0 53                              push rbx
 11584                                  
 11585 00007FC1 FF5009                          call SOB_CLOSURE_CODE(rax)
 11586                                  
 11587 00007FC4 50                              	push rax
 11588                                  
 11589 00007FC5 6A01                    	push 1
 11590 00007FC7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11591 00007FCC E8498F0000              	call malloc
 11592 00007FD1 50                      	push rax
 11593 00007FD2 BF10000000              	mov rdi, 8 * 2	; new rib
 11594 00007FD7 E83E8F0000              	call malloc
 11595 00007FDC 50                      	push rax
 11596 00007FDD BF20000000              	mov rdi, 8 * 4	; extended env
 11597 00007FE2 E8338F0000              	call malloc
 11598 00007FE7 488B7D10                	mov rdi, ENV
 11599 00007FEB BE00000000              	mov rsi, 0
 11600 00007FF0 BA01000000              	mov rdx, 1
 11601                                  .L_lambda_simple_env_loop_00e2:	; ext_env[i + 1] <-- env[i]
 11602 00007FF5 4883FE03                	cmp rsi, 3
 11603 00007FF9 7410                    	je .L_lambda_simple_env_end_00e2
 11604 00007FFB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11605 00007FFF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11606 00008003 48FFC6                  	inc rsi
 11607 00008006 48FFC2                  	inc rdx
 11608 00008009 EBEA                    	jmp .L_lambda_simple_env_loop_00e2
 11609                                  .L_lambda_simple_env_end_00e2:
 11610 0000800B 5B                      	pop rbx
 11611 0000800C BE00000000              	mov rsi, 0
 11612                                  .L_lambda_simple_params_loop_00e2:	; copy params
 11613 00008011 4883FE02                	cmp rsi, 2
 11614 00008015 740E                    	je .L_lambda_simple_params_end_00e2
 11615 00008017 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11616 0000801C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11617 00008020 48FFC6                  	inc rsi
 11618 00008023 EBEC                    	jmp .L_lambda_simple_params_loop_00e2
 11619                                  .L_lambda_simple_params_end_00e2:
 11620 00008025 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11621 00008028 4889C3                  	mov rbx, rax
 11622 0000802B 58                      	pop rax
 11623 0000802C C60005                  	mov byte [rax], T_closure
 11624 0000802F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11625 00008033 48C74009[40800000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e2
 11626 0000803B E98B000000              	jmp .L_lambda_simple_end_00e2
 11627                                  .L_lambda_simple_code_00e2:	; lambda-simple body
 11628 00008040 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11629 00008046 740B                    	je .L_lambda_simple_arity_check_ok_00e2
 11630 00008048 FF742410                	push qword [rsp + 8 * 2]
 11631 0000804C 6A01                    	push 1
 11632 0000804E E9808E0000              	jmp L_error_incorrect_arity_simple
 11633                                  .L_lambda_simple_arity_check_ok_00e2:
 11634 00008053 C8000000                	enter 0, 0
 11635 00008057 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 11636 0000805B 50                      	push rax
 11637 0000805C 488B4510                	mov rax, qword [rbp + 8 * 2]
 11638                                  
 11639 00008060 488B00                                            	mov rax, qword[rax + 8 * 0]
 11640                                  
 11641 00008063 488B00                                            	mov rax, qword[rax + 8 * 0]
 11642 00008066 50                      	push rax
 11643                                  
 11644 00008067 6A02                    	push 2
 11645 00008069 488B4510                	mov rax, qword [rbp + 8 * 2]
 11646                                  
 11647 0000806D 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11648                                  
 11649 00008071 488B00                                            	mov rax, qword[rax + 8 * 0]
 11650                                  	assert_closure(rax)
    42 00008074 803805              <1>  cmp byte [%1], %2
    43 00008077 0F8591A60000        <1>  jne L_error_incorrect_type
 11651 0000807D 50                      	push rax 
 11652 0000807E FF7508                  	push qword [rbp + 8]
 11653 00008081 FF7500                  	push qword [rbp]
 11654 00008084 4883C308                	add rbx ,8*1
 11655                                  	 .L_fix_stack_label_0115:
 11656 00008088 488B5518                	mov rdx, qword[rbp+8*3]
 11657 0000808C 4883C203                	add rdx, 3
 11658 00008090 48C1E203                	shl rdx, 3
 11659 00008094 4889EF                  	mov rdi, rbp
 11660 00008097 4801D7                  	add rdi, rdx
 11661 0000809A 4C8B4500                	mov r8, qword[rbp]
 11662 0000809E 4889E9                  	mov rcx, rbp
 11663 000080A1 4883E908                	sub rcx, 8
 11664                                  	 .L_loop_fix_stuck_0115:
 11665 000080A5 4839CC                  	cmp rsp, rcx
 11666 000080A8 7710                    ja .L_loop_fix_stuck_end_0115
 11667 000080AA 488B19                   	mov rbx, qword[rcx]
 11668 000080AD 48891F                  	 mov qword[rdi], rbx
 11669 000080B0 4883EF08                	sub rdi, 8
 11670 000080B4 4883E908                	sub rcx, 8
 11671 000080B8 EBEB                    jmp .L_loop_fix_stuck_0115
 11672                                  	 .L_loop_fix_stuck_end_0115:
 11673 000080BA 4883C708                	add rdi, 8
 11674 000080BE 4889FC                  	 mov rsp, rdi
 11675 000080C1 4C89C5                  	mov rbp, r8
 11676 000080C4 5D                      	pop rbp
 11677 000080C5 FFE0                    	jmp rax 
 11678 000080C7 C9                      	leave
 11679 000080C8 C21800                  	ret 8 * (2 + 1)
 11680                                  .L_lambda_simple_end_00e2:	; new closure is in rax
 11681                                  	assert_closure(rax)
    42 000080CB 803805              <1>  cmp byte [%1], %2
    43 000080CE 0F853AA60000        <1>  jne L_error_incorrect_type
 11682 000080D4 50                      	push rax 
 11683 000080D5 FF7508                  	push qword [rbp + 8]
 11684 000080D8 FF7500                  	push qword [rbp]
 11685 000080DB 4883C308                	add rbx ,8*1
 11686                                  	 .L_fix_stack_label_0114:
 11687 000080DF 488B5518                	mov rdx, qword[rbp+8*3]
 11688 000080E3 4883C203                	add rdx, 3
 11689 000080E7 48C1E203                	shl rdx, 3
 11690 000080EB 4889EF                  	mov rdi, rbp
 11691 000080EE 4801D7                  	add rdi, rdx
 11692 000080F1 4C8B4500                	mov r8, qword[rbp]
 11693 000080F5 4889E9                  	mov rcx, rbp
 11694 000080F8 4883E908                	sub rcx, 8
 11695                                  	 .L_loop_fix_stuck_0114:
 11696 000080FC 4839CC                  	cmp rsp, rcx
 11697 000080FF 7710                    ja .L_loop_fix_stuck_end_0114
 11698 00008101 488B19                   	mov rbx, qword[rcx]
 11699 00008104 48891F                  	 mov qword[rdi], rbx
 11700 00008107 4883EF08                	sub rdi, 8
 11701 0000810B 4883E908                	sub rcx, 8
 11702 0000810F EBEB                    jmp .L_loop_fix_stuck_0114
 11703                                  	 .L_loop_fix_stuck_end_0114:
 11704 00008111 4883C708                	add rdi, 8
 11705 00008115 4889FC                  	 mov rsp, rdi
 11706 00008118 4C89C5                  	mov rbp, r8
 11707 0000811B 5D                      	pop rbp
 11708 0000811C FFE0                    	jmp rax 
 11709                                  
 11710                                          	.L_if_end_0088:
 11711 0000811E C9                      	leave
 11712 0000811F C22000                  	ret 8 * (2 + 2)
 11713                                  .L_lambda_opt_end_0024:	; new closure is in rax
 11714 00008122 C9                      	leave
 11715 00008123 C21800                  	ret 8 * (2 + 1)
 11716                                  .L_lambda_simple_end_00e1:	; new closure is in rax
 11717                                  	assert_closure(rax)
    42 00008126 803805              <1>  cmp byte [%1], %2
    43 00008129 0F85DFA50000        <1>  jne L_error_incorrect_type
 11718 0000812F 50                      	push rax 
 11719 00008130 FF7508                  	push qword [rbp + 8]
 11720 00008133 FF7500                  	push qword [rbp]
 11721 00008136 4883C308                	add rbx ,8*1
 11722                                  	 .L_fix_stack_label_0113:
 11723 0000813A 488B5518                	mov rdx, qword[rbp+8*3]
 11724 0000813E 4883C203                	add rdx, 3
 11725 00008142 48C1E203                	shl rdx, 3
 11726 00008146 4889EF                  	mov rdi, rbp
 11727 00008149 4801D7                  	add rdi, rdx
 11728 0000814C 4C8B4500                	mov r8, qword[rbp]
 11729 00008150 4889E9                  	mov rcx, rbp
 11730 00008153 4883E908                	sub rcx, 8
 11731                                  	 .L_loop_fix_stuck_0113:
 11732 00008157 4839CC                  	cmp rsp, rcx
 11733 0000815A 7710                    ja .L_loop_fix_stuck_end_0113
 11734 0000815C 488B19                   	mov rbx, qword[rcx]
 11735 0000815F 48891F                  	 mov qword[rdi], rbx
 11736 00008162 4883EF08                	sub rdi, 8
 11737 00008166 4883E908                	sub rcx, 8
 11738 0000816A EBEB                    jmp .L_loop_fix_stuck_0113
 11739                                  	 .L_loop_fix_stuck_end_0113:
 11740 0000816C 4883C708                	add rdi, 8
 11741 00008170 4889FC                  	 mov rsp, rdi
 11742 00008173 4C89C5                  	mov rbp, r8
 11743 00008176 5D                      	pop rbp
 11744 00008177 FFE0                    	jmp rax 
 11745 00008179 C9                      	leave
 11746 0000817A C21800                  	ret 8 * (2 + 1)
 11747                                  .L_lambda_simple_end_00df:	; new closure is in rax
 11748 0000817D 803805                  	cmp byte [rax], T_closure 
 11749 00008180 0F85499D0000                    jne L_code_ptr_error
 11750                                  
 11751 00008186 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11752                                  
 11753 0000818A 53                              push rbx
 11754                                  
 11755 0000818B FF5009                          call SOB_CLOSURE_CODE(rax)
 11756                                  
 11757 0000818E 48890425[20030000]              	mov qword [free_var_100], rax
 11758 00008196 48B8-                   	mov rax, sob_void
 11758 00008198 [0000000000000000] 
 11759                                  
 11760 000081A0 4889C7                  	mov rdi, rax
 11761 000081A3 E8838D0000              	call print_sexpr_if_not_void
 11762                                  
 11763 000081A8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11764 000081AD E8688D0000              	call malloc
 11765 000081B2 50                      	push rax
 11766 000081B3 BF00000000              	mov rdi, 8 * 0	; new rib
 11767 000081B8 E85D8D0000              	call malloc
 11768 000081BD 50                      	push rax
 11769 000081BE BF08000000              	mov rdi, 8 * 1	; extended env
 11770 000081C3 E8528D0000              	call malloc
 11771 000081C8 488B7D10                	mov rdi, ENV
 11772 000081CC BE00000000              	mov rsi, 0
 11773 000081D1 BA01000000              	mov rdx, 1
 11774                                  .L_lambda_simple_env_loop_00e3:	; ext_env[i + 1] <-- env[i]
 11775 000081D6 4883FE00                	cmp rsi, 0
 11776 000081DA 7410                    	je .L_lambda_simple_env_end_00e3
 11777 000081DC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11778 000081E0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11779 000081E4 48FFC6                  	inc rsi
 11780 000081E7 48FFC2                  	inc rdx
 11781 000081EA EBEA                    	jmp .L_lambda_simple_env_loop_00e3
 11782                                  .L_lambda_simple_env_end_00e3:
 11783 000081EC 5B                      	pop rbx
 11784 000081ED BE00000000              	mov rsi, 0
 11785                                  .L_lambda_simple_params_loop_00e3:	; copy params
 11786 000081F2 4883FE00                	cmp rsi, 0
 11787 000081F6 740E                    	je .L_lambda_simple_params_end_00e3
 11788 000081F8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11789 000081FD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11790 00008201 48FFC6                  	inc rsi
 11791 00008204 EBEC                    	jmp .L_lambda_simple_params_loop_00e3
 11792                                  .L_lambda_simple_params_end_00e3:
 11793 00008206 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11794 00008209 4889C3                  	mov rbx, rax
 11795 0000820C 58                      	pop rax
 11796 0000820D C60005                  	mov byte [rax], T_closure
 11797 00008210 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11798 00008214 48C74009[21820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e3
 11799 0000821C E9FC000000              	jmp .L_lambda_simple_end_00e3
 11800                                  .L_lambda_simple_code_00e3:	; lambda-simple body
 11801 00008221 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11802 00008227 740B                    	je .L_lambda_simple_arity_check_ok_00e3
 11803 00008229 FF742410                	push qword [rsp + 8 * 2]
 11804 0000822D 6A01                    	push 1
 11805 0000822F E99F8C0000              	jmp L_error_incorrect_arity_simple
 11806                                  .L_lambda_simple_arity_check_ok_00e3:
 11807 00008234 C8000000                	enter 0, 0
 11808 00008238 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11809 0000823C 50                      	push rax
 11810 0000823D 6A01                    	push 1
 11811 0000823F 488B0425[D8000000]      	mov rax, qword [free_var_27]
 11812 00008247 803805                  	cmp byte [rax], T_closure 
 11813 0000824A 0F857F9C0000                    jne L_code_ptr_error
 11814                                  
 11815 00008250 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11816                                  
 11817 00008254 53                              push rbx
 11818                                  
 11819 00008255 FF5009                          call SOB_CLOSURE_CODE(rax)
 11820                                  
 11821                                          
 11822 00008258 483D[02000000]                  	cmp rax, sob_boolean_false
 11823                                  
 11824 0000825E 740F                            	je .L_if_else_0089
 11825 00008260 48B8-                   	mov rax,L_constants + 128
 11825 00008262 [8000000000000000] 
 11826                                  
 11827 0000826A E9AA000000                      	jmp .L_if_end_0089
 11828                                  
 11829                                          	.L_if_else_0089:
 11830 0000826F 48B8-                   	 	mov rax,L_constants + 128
 11830 00008271 [8000000000000000] 
 11831 00008279 50                      	push rax
 11832 0000827A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11833 0000827E 50                      	push rax
 11834 0000827F 6A02                    	push 2
 11835 00008281 488B0425[10030000]      	mov rax, qword [free_var_98]
 11836 00008289 803805                  	cmp byte [rax], T_closure 
 11837 0000828C 0F853D9C0000                    jne L_code_ptr_error
 11838                                  
 11839 00008292 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11840                                  
 11841 00008296 53                              push rbx
 11842                                  
 11843 00008297 FF5009                          call SOB_CLOSURE_CODE(rax)
 11844                                  
 11845 0000829A 50                              	push rax
 11846 0000829B 6A01                    	push 1
 11847 0000829D 488B0425[28030000]      	mov rax, qword [free_var_101]
 11848 000082A5 803805                  	cmp byte [rax], T_closure 
 11849 000082A8 0F85219C0000                    jne L_code_ptr_error
 11850                                  
 11851 000082AE 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 11852                                  
 11853 000082B2 53                              push rbx
 11854                                  
 11855 000082B3 FF5009                          call SOB_CLOSURE_CODE(rax)
 11856                                  
 11857 000082B6 50                              	push rax
 11858 000082B7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11859 000082BB 50                      	push rax
 11860                                  
 11861 000082BC 6A02                    	push 2
 11862 000082BE 488B0425[18030000]      	mov rax, qword [free_var_99]
 11863                                  	assert_closure(rax)
    42 000082C6 803805              <1>  cmp byte [%1], %2
    43 000082C9 0F853FA40000        <1>  jne L_error_incorrect_type
 11864 000082CF 50                      	push rax 
 11865 000082D0 FF7508                  	push qword [rbp + 8]
 11866 000082D3 FF7500                  	push qword [rbp]
 11867 000082D6 4883C308                	add rbx ,8*1
 11868                                  	 .L_fix_stack_label_0117:
 11869 000082DA 488B5518                	mov rdx, qword[rbp+8*3]
 11870 000082DE 4883C203                	add rdx, 3
 11871 000082E2 48C1E203                	shl rdx, 3
 11872 000082E6 4889EF                  	mov rdi, rbp
 11873 000082E9 4801D7                  	add rdi, rdx
 11874 000082EC 4C8B4500                	mov r8, qword[rbp]
 11875 000082F0 4889E9                  	mov rcx, rbp
 11876 000082F3 4883E908                	sub rcx, 8
 11877                                  	 .L_loop_fix_stuck_0117:
 11878 000082F7 4839CC                  	cmp rsp, rcx
 11879 000082FA 7710                    ja .L_loop_fix_stuck_end_0117
 11880 000082FC 488B19                   	mov rbx, qword[rcx]
 11881 000082FF 48891F                  	 mov qword[rdi], rbx
 11882 00008302 4883EF08                	sub rdi, 8
 11883 00008306 4883E908                	sub rcx, 8
 11884 0000830A EBEB                    jmp .L_loop_fix_stuck_0117
 11885                                  	 .L_loop_fix_stuck_end_0117:
 11886 0000830C 4883C708                	add rdi, 8
 11887 00008310 4889FC                  	 mov rsp, rdi
 11888 00008313 4C89C5                  	mov rbp, r8
 11889 00008316 5D                      	pop rbp
 11890 00008317 FFE0                    	jmp rax 
 11891                                  
 11892                                          	.L_if_end_0089:
 11893 00008319 C9                      	leave
 11894 0000831A C21800                  	ret 8 * (2 + 1)
 11895                                  .L_lambda_simple_end_00e3:	; new closure is in rax
 11896 0000831D 48890425[28030000]      	mov qword [free_var_101], rax
 11897 00008325 48B8-                   	mov rax, sob_void
 11897 00008327 [0000000000000000] 
 11898                                  
 11899 0000832F 4889C7                  	mov rdi, rax
 11900 00008332 E8F48B0000              	call print_sexpr_if_not_void
 11901                                  
 11902 00008337 48B8-                   	mov rax,L_constants + 0
 11902 00008339 [0000000000000000] 
 11903 00008341 48890425[30030000]      	mov qword [free_var_102], rax
 11904 00008349 48B8-                   	mov rax, sob_void
 11904 0000834B [0000000000000000] 
 11905                                  
 11906 00008353 4889C7                  	mov rdi, rax
 11907 00008356 E8D08B0000              	call print_sexpr_if_not_void
 11908                                  
 11909 0000835B 48B8-                   	mov rax,L_constants + 0
 11909 0000835D [0000000000000000] 
 11910 00008365 48890425[38030000]      	mov qword [free_var_103], rax
 11911 0000836D 48B8-                   	mov rax, sob_void
 11911 0000836F [0000000000000000] 
 11912                                  
 11913 00008377 4889C7                  	mov rdi, rax
 11914 0000837A E8AC8B0000              	call print_sexpr_if_not_void
 11915                                  
 11916 0000837F 48B8-                   	mov rax,L_constants + 0
 11916 00008381 [0000000000000000] 
 11917 00008389 48890425[40030000]      	mov qword [free_var_104], rax
 11918 00008391 48B8-                   	mov rax, sob_void
 11918 00008393 [0000000000000000] 
 11919                                  
 11920 0000839B 4889C7                  	mov rdi, rax
 11921 0000839E E8888B0000              	call print_sexpr_if_not_void
 11922                                  
 11923 000083A3 48B8-                   	mov rax,L_constants + 0
 11923 000083A5 [0000000000000000] 
 11924 000083AD 48890425[48030000]      	mov qword [free_var_105], rax
 11925 000083B5 48B8-                   	mov rax, sob_void
 11925 000083B7 [0000000000000000] 
 11926                                  
 11927 000083BF 4889C7                  	mov rdi, rax
 11928 000083C2 E8648B0000              	call print_sexpr_if_not_void
 11929                                  
 11930 000083C7 48B8-                   	mov rax,L_constants + 0
 11930 000083C9 [0000000000000000] 
 11931 000083D1 48890425[50030000]      	mov qword [free_var_106], rax
 11932 000083D9 48B8-                   	mov rax, sob_void
 11932 000083DB [0000000000000000] 
 11933                                  
 11934 000083E3 4889C7                  	mov rdi, rax
 11935 000083E6 E8408B0000              	call print_sexpr_if_not_void
 11936                                  
 11937 000083EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11938 000083F0 E8258B0000              	call malloc
 11939 000083F5 50                      	push rax
 11940 000083F6 BF00000000              	mov rdi, 8 * 0	; new rib
 11941 000083FB E81A8B0000              	call malloc
 11942 00008400 50                      	push rax
 11943 00008401 BF08000000              	mov rdi, 8 * 1	; extended env
 11944 00008406 E80F8B0000              	call malloc
 11945 0000840B 488B7D10                	mov rdi, ENV
 11946 0000840F BE00000000              	mov rsi, 0
 11947 00008414 BA01000000              	mov rdx, 1
 11948                                  .L_lambda_simple_env_loop_00e4:	; ext_env[i + 1] <-- env[i]
 11949 00008419 4883FE00                	cmp rsi, 0
 11950 0000841D 7410                    	je .L_lambda_simple_env_end_00e4
 11951 0000841F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11952 00008423 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11953 00008427 48FFC6                  	inc rsi
 11954 0000842A 48FFC2                  	inc rdx
 11955 0000842D EBEA                    	jmp .L_lambda_simple_env_loop_00e4
 11956                                  .L_lambda_simple_env_end_00e4:
 11957 0000842F 5B                      	pop rbx
 11958 00008430 BE00000000              	mov rsi, 0
 11959                                  .L_lambda_simple_params_loop_00e4:	; copy params
 11960 00008435 4883FE00                	cmp rsi, 0
 11961 00008439 740E                    	je .L_lambda_simple_params_end_00e4
 11962 0000843B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11963 00008440 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11964 00008444 48FFC6                  	inc rsi
 11965 00008447 EBEC                    	jmp .L_lambda_simple_params_loop_00e4
 11966                                  .L_lambda_simple_params_end_00e4:
 11967 00008449 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11968 0000844C 4889C3                  	mov rbx, rax
 11969 0000844F 58                      	pop rax
 11970 00008450 C60005                  	mov byte [rax], T_closure
 11971 00008453 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11972 00008457 48C74009[64840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e4
 11973 0000845F E98E000000              	jmp .L_lambda_simple_end_00e4
 11974                                  .L_lambda_simple_code_00e4:	; lambda-simple body
 11975 00008464 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11976 0000846A 740B                    	je .L_lambda_simple_arity_check_ok_00e4
 11977 0000846C FF742410                	push qword [rsp + 8 * 2]
 11978 00008470 6A00                    	push 0
 11979 00008472 E95C8A0000              	jmp L_error_incorrect_arity_simple
 11980                                  .L_lambda_simple_arity_check_ok_00e4:
 11981 00008477 C8000000                	enter 0, 0
 11982 0000847B 48B8-                   	 	mov rax,L_constants + 219
 11982 0000847D [DB00000000000000] 
 11983 00008485 50                      	push rax
 11984 00008486 48B8-                   	mov rax,L_constants + 210
 11984 00008488 [D200000000000000] 
 11985 00008490 50                      	push rax
 11986                                  
 11987 00008491 6A02                    	push 2
 11988 00008493 488B0425[30010000]      	mov rax, qword [free_var_38]
 11989                                  	assert_closure(rax)
    42 0000849B 803805              <1>  cmp byte [%1], %2
    43 0000849E 0F856AA20000        <1>  jne L_error_incorrect_type
 11990 000084A4 50                      	push rax 
 11991 000084A5 FF7508                  	push qword [rbp + 8]
 11992 000084A8 FF7500                  	push qword [rbp]
 11993 000084AB 4883C308                	add rbx ,8*1
 11994                                  	 .L_fix_stack_label_0118:
 11995 000084AF 488B5518                	mov rdx, qword[rbp+8*3]
 11996 000084B3 4883C203                	add rdx, 3
 11997 000084B7 48C1E203                	shl rdx, 3
 11998 000084BB 4889EF                  	mov rdi, rbp
 11999 000084BE 4801D7                  	add rdi, rdx
 12000 000084C1 4C8B4500                	mov r8, qword[rbp]
 12001 000084C5 4889E9                  	mov rcx, rbp
 12002 000084C8 4883E908                	sub rcx, 8
 12003                                  	 .L_loop_fix_stuck_0118:
 12004 000084CC 4839CC                  	cmp rsp, rcx
 12005 000084CF 7710                    ja .L_loop_fix_stuck_end_0118
 12006 000084D1 488B19                   	mov rbx, qword[rcx]
 12007 000084D4 48891F                  	 mov qword[rdi], rbx
 12008 000084D7 4883EF08                	sub rdi, 8
 12009 000084DB 4883E908                	sub rcx, 8
 12010 000084DF EBEB                    jmp .L_loop_fix_stuck_0118
 12011                                  	 .L_loop_fix_stuck_end_0118:
 12012 000084E1 4883C708                	add rdi, 8
 12013 000084E5 4889FC                  	 mov rsp, rdi
 12014 000084E8 4C89C5                  	mov rbp, r8
 12015 000084EB 5D                      	pop rbp
 12016 000084EC FFE0                    	jmp rax 
 12017 000084EE C9                      	leave
 12018 000084EF C21000                  	ret 8 * (2 + 0)
 12019                                  .L_lambda_simple_end_00e4:	; new closure is in rax
 12020 000084F2 50                      	push rax
 12021 000084F3 6A01                    	push 1
 12022 000084F5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12023 000084FA E81B8A0000              	call malloc
 12024 000084FF 50                      	push rax
 12025 00008500 BF00000000              	mov rdi, 8 * 0	; new rib
 12026 00008505 E8108A0000              	call malloc
 12027 0000850A 50                      	push rax
 12028 0000850B BF08000000              	mov rdi, 8 * 1	; extended env
 12029 00008510 E8058A0000              	call malloc
 12030 00008515 488B7D10                	mov rdi, ENV
 12031 00008519 BE00000000              	mov rsi, 0
 12032 0000851E BA01000000              	mov rdx, 1
 12033                                  .L_lambda_simple_env_loop_00e5:	; ext_env[i + 1] <-- env[i]
 12034 00008523 4883FE00                	cmp rsi, 0
 12035 00008527 7410                    	je .L_lambda_simple_env_end_00e5
 12036 00008529 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12037 0000852D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12038 00008531 48FFC6                  	inc rsi
 12039 00008534 48FFC2                  	inc rdx
 12040 00008537 EBEA                    	jmp .L_lambda_simple_env_loop_00e5
 12041                                  .L_lambda_simple_env_end_00e5:
 12042 00008539 5B                      	pop rbx
 12043 0000853A BE00000000              	mov rsi, 0
 12044                                  .L_lambda_simple_params_loop_00e5:	; copy params
 12045 0000853F 4883FE00                	cmp rsi, 0
 12046 00008543 740E                    	je .L_lambda_simple_params_end_00e5
 12047 00008545 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12048 0000854A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12049 0000854E 48FFC6                  	inc rsi
 12050 00008551 EBEC                    	jmp .L_lambda_simple_params_loop_00e5
 12051                                  .L_lambda_simple_params_end_00e5:
 12052 00008553 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12053 00008556 4889C3                  	mov rbx, rax
 12054 00008559 58                      	pop rax
 12055 0000855A C60005                  	mov byte [rax], T_closure
 12056 0000855D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12057 00008561 48C74009[6E850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e5
 12058 00008569 E957150000              	jmp .L_lambda_simple_end_00e5
 12059                                  .L_lambda_simple_code_00e5:	; lambda-simple body
 12060 0000856E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12061 00008574 740B                    	je .L_lambda_simple_arity_check_ok_00e5
 12062 00008576 FF742410                	push qword [rsp + 8 * 2]
 12063 0000857A 6A01                    	push 1
 12064 0000857C E952890000              	jmp L_error_incorrect_arity_simple
 12065                                  .L_lambda_simple_arity_check_ok_00e5:
 12066 00008581 C8000000                	enter 0, 0
 12067 00008585 BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 12068 0000858A E88B890000              	call malloc
 12069 0000858F 50                      	push rax
 12070 00008590 BF08000000              	mov rdi, 8 * 1	; new rib
 12071 00008595 E880890000              	call malloc
 12072 0000859A 50                      	push rax
 12073 0000859B BF10000000              	mov rdi, 8 * 2	; extended env
 12074 000085A0 E875890000              	call malloc
 12075 000085A5 488B7D10                	mov rdi, ENV
 12076 000085A9 BE00000000              	mov rsi, 0
 12077 000085AE BA01000000              	mov rdx, 1
 12078                                  .L_lambda_simple_env_loop_00e6:	; ext_env[i + 1] <-- env[i]
 12079 000085B3 4883FE01                	cmp rsi, 1
 12080 000085B7 7410                    	je .L_lambda_simple_env_end_00e6
 12081 000085B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12082 000085BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12083 000085C1 48FFC6                  	inc rsi
 12084 000085C4 48FFC2                  	inc rdx
 12085 000085C7 EBEA                    	jmp .L_lambda_simple_env_loop_00e6
 12086                                  .L_lambda_simple_env_end_00e6:
 12087 000085C9 5B                      	pop rbx
 12088 000085CA BE00000000              	mov rsi, 0
 12089                                  .L_lambda_simple_params_loop_00e6:	; copy params
 12090 000085CF 4883FE01                	cmp rsi, 1
 12091 000085D3 740E                    	je .L_lambda_simple_params_end_00e6
 12092 000085D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12093 000085DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12094 000085DE 48FFC6                  	inc rsi
 12095 000085E1 EBEC                    	jmp .L_lambda_simple_params_loop_00e6
 12096                                  .L_lambda_simple_params_end_00e6:
 12097 000085E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12098 000085E6 4889C3                  	mov rbx, rax
 12099 000085E9 58                      	pop rax
 12100 000085EA C60005                  	mov byte [rax], T_closure
 12101 000085ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12102 000085F1 48C74009[FE850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e6
 12103 000085F9 E96D040000              	jmp .L_lambda_simple_end_00e6
 12104                                  .L_lambda_simple_code_00e6:	; lambda-simple body
 12105 000085FE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12106 00008604 740B                    	je .L_lambda_simple_arity_check_ok_00e6
 12107 00008606 FF742410                	push qword [rsp + 8 * 2]
 12108 0000860A 6A02                    	push 2
 12109 0000860C E9C2880000              	jmp L_error_incorrect_arity_simple
 12110                                  .L_lambda_simple_arity_check_ok_00e6:
 12111 00008611 C8000000                	enter 0, 0
 12112 00008615 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12113 0000861A E8FB880000              	call malloc
 12114 0000861F 50                      	push rax
 12115 00008620 BF10000000              	mov rdi, 8 * 2	; new rib
 12116 00008625 E8F0880000              	call malloc
 12117 0000862A 50                      	push rax
 12118 0000862B BF18000000              	mov rdi, 8 * 3	; extended env
 12119 00008630 E8E5880000              	call malloc
 12120 00008635 488B7D10                	mov rdi, ENV
 12121 00008639 BE00000000              	mov rsi, 0
 12122 0000863E BA01000000              	mov rdx, 1
 12123                                  .L_lambda_simple_env_loop_00e7:	; ext_env[i + 1] <-- env[i]
 12124 00008643 4883FE02                	cmp rsi, 2
 12125 00008647 7410                    	je .L_lambda_simple_env_end_00e7
 12126 00008649 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12127 0000864D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12128 00008651 48FFC6                  	inc rsi
 12129 00008654 48FFC2                  	inc rdx
 12130 00008657 EBEA                    	jmp .L_lambda_simple_env_loop_00e7
 12131                                  .L_lambda_simple_env_end_00e7:
 12132 00008659 5B                      	pop rbx
 12133 0000865A BE00000000              	mov rsi, 0
 12134                                  .L_lambda_simple_params_loop_00e7:	; copy params
 12135 0000865F 4883FE02                	cmp rsi, 2
 12136 00008663 740E                    	je .L_lambda_simple_params_end_00e7
 12137 00008665 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12138 0000866A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12139 0000866E 48FFC6                  	inc rsi
 12140 00008671 EBEC                    	jmp .L_lambda_simple_params_loop_00e7
 12141                                  .L_lambda_simple_params_end_00e7:
 12142 00008673 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12143 00008676 4889C3                  	mov rbx, rax
 12144 00008679 58                      	pop rax
 12145 0000867A C60005                  	mov byte [rax], T_closure
 12146 0000867D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12147 00008681 48C74009[8E860000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e7
 12148 00008689 E9D9030000              	jmp .L_lambda_simple_end_00e7
 12149                                  .L_lambda_simple_code_00e7:	; lambda-simple body
 12150 0000868E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12151 00008694 740B                    	je .L_lambda_simple_arity_check_ok_00e7
 12152 00008696 FF742410                	push qword [rsp + 8 * 2]
 12153 0000869A 6A02                    	push 2
 12154 0000869C E932880000              	jmp L_error_incorrect_arity_simple
 12155                                  .L_lambda_simple_arity_check_ok_00e7:
 12156 000086A1 C8000000                	enter 0, 0
 12157 000086A5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12158 000086A9 50                      	push rax
 12159 000086AA 6A01                    	push 1
 12160 000086AC 488B0425[48000000]      	mov rax, qword [free_var_9]
 12161 000086B4 803805                  	cmp byte [rax], T_closure 
 12162 000086B7 0F8512980000                    jne L_code_ptr_error
 12163                                  
 12164 000086BD 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12165                                  
 12166 000086C1 53                              push rbx
 12167                                  
 12168 000086C2 FF5009                          call SOB_CLOSURE_CODE(rax)
 12169                                  
 12170                                          
 12171 000086C5 483D[02000000]                  	cmp rax, sob_boolean_false
 12172                                  
 12173 000086CB 0F84AF010000                    	je .L_if_else_008a
 12174 000086D1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12175 000086D5 50                      	push rax
 12176 000086D6 6A01                    	push 1
 12177 000086D8 488B0425[48000000]      	mov rax, qword [free_var_9]
 12178 000086E0 803805                  	cmp byte [rax], T_closure 
 12179 000086E3 0F85E6970000                    jne L_code_ptr_error
 12180                                  
 12181 000086E9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12182                                  
 12183 000086ED 53                              push rbx
 12184                                  
 12185 000086EE FF5009                          call SOB_CLOSURE_CODE(rax)
 12186                                  
 12187                                          
 12188 000086F1 483D[02000000]                  	cmp rax, sob_boolean_false
 12189                                  
 12190 000086F7 746E                            	je .L_if_else_008e
 12191 000086F9 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 12192 000086FD 50                      	push rax
 12193 000086FE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12194 00008702 50                      	push rax
 12195                                  
 12196 00008703 6A02                    	push 2
 12197 00008705 488B4510                	mov rax, qword [rbp + 8 * 2]
 12198                                  
 12199 00008709 488B00                                            	mov rax, qword[rax + 8 * 0]
 12200                                  
 12201 0000870C 488B00                                            	mov rax, qword[rax + 8 * 0]
 12202                                  	assert_closure(rax)
    42 0000870F 803805              <1>  cmp byte [%1], %2
    43 00008712 0F85F69F0000        <1>  jne L_error_incorrect_type
 12203 00008718 50                      	push rax 
 12204 00008719 FF7508                  	push qword [rbp + 8]
 12205 0000871C FF7500                  	push qword [rbp]
 12206 0000871F 4883C308                	add rbx ,8*1
 12207                                  	 .L_fix_stack_label_011e:
 12208 00008723 488B5518                	mov rdx, qword[rbp+8*3]
 12209 00008727 4883C203                	add rdx, 3
 12210 0000872B 48C1E203                	shl rdx, 3
 12211 0000872F 4889EF                  	mov rdi, rbp
 12212 00008732 4801D7                  	add rdi, rdx
 12213 00008735 4C8B4500                	mov r8, qword[rbp]
 12214 00008739 4889E9                  	mov rcx, rbp
 12215 0000873C 4883E908                	sub rcx, 8
 12216                                  	 .L_loop_fix_stuck_011e:
 12217 00008740 4839CC                  	cmp rsp, rcx
 12218 00008743 7710                    ja .L_loop_fix_stuck_end_011e
 12219 00008745 488B19                   	mov rbx, qword[rcx]
 12220 00008748 48891F                  	 mov qword[rdi], rbx
 12221 0000874B 4883EF08                	sub rdi, 8
 12222 0000874F 4883E908                	sub rcx, 8
 12223 00008753 EBEB                    jmp .L_loop_fix_stuck_011e
 12224                                  	 .L_loop_fix_stuck_end_011e:
 12225 00008755 4883C708                	add rdi, 8
 12226 00008759 4889FC                  	 mov rsp, rdi
 12227 0000875C 4C89C5                  	mov rbp, r8
 12228 0000875F 5D                      	pop rbp
 12229 00008760 FFE0                    	jmp rax 
 12230                                  
 12231 00008762 E914010000                      	jmp .L_if_end_008e
 12232                                  
 12233                                          	.L_if_else_008e:
 12234 00008767 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12235 0000876B 50                      	push rax
 12236 0000876C 6A01                    	push 1
 12237 0000876E 488B0425[40000000]      	mov rax, qword [free_var_8]
 12238 00008776 803805                  	cmp byte [rax], T_closure 
 12239 00008779 0F8550970000                    jne L_code_ptr_error
 12240                                  
 12241 0000877F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12242                                  
 12243 00008783 53                              push rbx
 12244                                  
 12245 00008784 FF5009                          call SOB_CLOSURE_CODE(rax)
 12246                                  
 12247                                          
 12248 00008787 483D[02000000]                  	cmp rax, sob_boolean_false
 12249                                  
 12250 0000878D 0F8488000000                    	je .L_if_else_008f
 12251 00008793 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 12252 00008797 50                      	push rax
 12253 00008798 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12254 0000879C 50                      	push rax
 12255 0000879D 6A01                    	push 1
 12256 0000879F 488B0425[B8000000]      	mov rax, qword [free_var_23]
 12257 000087A7 803805                  	cmp byte [rax], T_closure 
 12258 000087AA 0F851F970000                    jne L_code_ptr_error
 12259                                  
 12260 000087B0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12261                                  
 12262 000087B4 53                              push rbx
 12263                                  
 12264 000087B5 FF5009                          call SOB_CLOSURE_CODE(rax)
 12265                                  
 12266 000087B8 50                              	push rax
 12267                                  
 12268 000087B9 6A02                    	push 2
 12269 000087BB 488B4510                	mov rax, qword [rbp + 8 * 2]
 12270                                  
 12271 000087BF 488B00                                            	mov rax, qword[rax + 8 * 0]
 12272                                  
 12273 000087C2 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12274                                  	assert_closure(rax)
    42 000087C6 803805              <1>  cmp byte [%1], %2
    43 000087C9 0F853F9F0000        <1>  jne L_error_incorrect_type
 12275 000087CF 50                      	push rax 
 12276 000087D0 FF7508                  	push qword [rbp + 8]
 12277 000087D3 FF7500                  	push qword [rbp]
 12278 000087D6 4883C308                	add rbx ,8*1
 12279                                  	 .L_fix_stack_label_011d:
 12280 000087DA 488B5518                	mov rdx, qword[rbp+8*3]
 12281 000087DE 4883C203                	add rdx, 3
 12282 000087E2 48C1E203                	shl rdx, 3
 12283 000087E6 4889EF                  	mov rdi, rbp
 12284 000087E9 4801D7                  	add rdi, rdx
 12285 000087EC 4C8B4500                	mov r8, qword[rbp]
 12286 000087F0 4889E9                  	mov rcx, rbp
 12287 000087F3 4883E908                	sub rcx, 8
 12288                                  	 .L_loop_fix_stuck_011d:
 12289 000087F7 4839CC                  	cmp rsp, rcx
 12290 000087FA 7710                    ja .L_loop_fix_stuck_end_011d
 12291 000087FC 488B19                   	mov rbx, qword[rcx]
 12292 000087FF 48891F                  	 mov qword[rdi], rbx
 12293 00008802 4883EF08                	sub rdi, 8
 12294 00008806 4883E908                	sub rcx, 8
 12295 0000880A EBEB                    jmp .L_loop_fix_stuck_011d
 12296                                  	 .L_loop_fix_stuck_end_011d:
 12297 0000880C 4883C708                	add rdi, 8
 12298 00008810 4889FC                  	 mov rsp, rdi
 12299 00008813 4C89C5                  	mov rbp, r8
 12300 00008816 5D                      	pop rbp
 12301 00008817 FFE0                    	jmp rax 
 12302                                  
 12303 00008819 EB60                            	jmp .L_if_end_008f
 12304                                  
 12305                                          	.L_if_else_008f:
 12306                                  	 
 12307 0000881B 6A00                    	push 0
 12308 0000881D 488B4510                	mov rax, qword [rbp + 8 * 2]
 12309                                  
 12310 00008821 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12311                                  
 12312 00008825 488B00                                            	mov rax, qword[rax + 8 * 0]
 12313                                  	assert_closure(rax)
    42 00008828 803805              <1>  cmp byte [%1], %2
    43 0000882B 0F85DD9E0000        <1>  jne L_error_incorrect_type
 12314 00008831 50                      	push rax 
 12315 00008832 FF7508                  	push qword [rbp + 8]
 12316 00008835 FF7500                  	push qword [rbp]
 12317 00008838 4883C308                	add rbx ,8*1
 12318                                  	 .L_fix_stack_label_011c:
 12319 0000883C 488B5518                	mov rdx, qword[rbp+8*3]
 12320 00008840 4883C203                	add rdx, 3
 12321 00008844 48C1E203                	shl rdx, 3
 12322 00008848 4889EF                  	mov rdi, rbp
 12323 0000884B 4801D7                  	add rdi, rdx
 12324 0000884E 4C8B4500                	mov r8, qword[rbp]
 12325 00008852 4889E9                  	mov rcx, rbp
 12326 00008855 4883E908                	sub rcx, 8
 12327                                  	 .L_loop_fix_stuck_011c:
 12328 00008859 4839CC                  	cmp rsp, rcx
 12329 0000885C 7710                    ja .L_loop_fix_stuck_end_011c
 12330 0000885E 488B19                   	mov rbx, qword[rcx]
 12331 00008861 48891F                  	 mov qword[rdi], rbx
 12332 00008864 4883EF08                	sub rdi, 8
 12333 00008868 4883E908                	sub rcx, 8
 12334 0000886C EBEB                    jmp .L_loop_fix_stuck_011c
 12335                                  	 .L_loop_fix_stuck_end_011c:
 12336 0000886E 4883C708                	add rdi, 8
 12337 00008872 4889FC                  	 mov rsp, rdi
 12338 00008875 4C89C5                  	mov rbp, r8
 12339 00008878 5D                      	pop rbp
 12340 00008879 FFE0                    	jmp rax 
 12341                                  
 12342                                          	.L_if_end_008f:
 12343                                  
 12344                                          	.L_if_end_008e:
 12345                                  
 12346 0000887B E9E3010000                      	jmp .L_if_end_008a
 12347                                  
 12348                                          	.L_if_else_008a:
 12349 00008880 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12350 00008884 50                      	push rax
 12351 00008885 6A01                    	push 1
 12352 00008887 488B0425[40000000]      	mov rax, qword [free_var_8]
 12353 0000888F 803805                  	cmp byte [rax], T_closure 
 12354 00008892 0F8537960000                    jne L_code_ptr_error
 12355                                  
 12356 00008898 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12357                                  
 12358 0000889C 53                              push rbx
 12359                                  
 12360 0000889D FF5009                          call SOB_CLOSURE_CODE(rax)
 12361                                  
 12362                                          
 12363 000088A0 483D[02000000]                  	cmp rax, sob_boolean_false
 12364                                  
 12365 000088A6 0F84AD010000                    	je .L_if_else_008b
 12366 000088AC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12367 000088B0 50                      	push rax
 12368 000088B1 6A01                    	push 1
 12369 000088B3 488B0425[48000000]      	mov rax, qword [free_var_9]
 12370 000088BB 803805                  	cmp byte [rax], T_closure 
 12371 000088BE 0F850B960000                    jne L_code_ptr_error
 12372                                  
 12373 000088C4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12374                                  
 12375 000088C8 53                              push rbx
 12376                                  
 12377 000088C9 FF5009                          call SOB_CLOSURE_CODE(rax)
 12378                                  
 12379                                          
 12380 000088CC 483D[02000000]                  	cmp rax, sob_boolean_false
 12381                                  
 12382 000088D2 0F848B000000                    	je .L_if_else_008c
 12383 000088D8 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 12384 000088DC 50                      	push rax
 12385 000088DD 6A01                    	push 1
 12386 000088DF 488B0425[B8000000]      	mov rax, qword [free_var_23]
 12387 000088E7 803805                  	cmp byte [rax], T_closure 
 12388 000088EA 0F85DF950000                    jne L_code_ptr_error
 12389                                  
 12390 000088F0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12391                                  
 12392 000088F4 53                              push rbx
 12393                                  
 12394 000088F5 FF5009                          call SOB_CLOSURE_CODE(rax)
 12395                                  
 12396 000088F8 50                              	push rax
 12397 000088F9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12398 000088FD 50                      	push rax
 12399                                  
 12400 000088FE 6A02                    	push 2
 12401 00008900 488B4510                	mov rax, qword [rbp + 8 * 2]
 12402                                  
 12403 00008904 488B00                                            	mov rax, qword[rax + 8 * 0]
 12404                                  
 12405 00008907 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12406                                  	assert_closure(rax)
    42 0000890B 803805              <1>  cmp byte [%1], %2
    43 0000890E 0F85FA9D0000        <1>  jne L_error_incorrect_type
 12407 00008914 50                      	push rax 
 12408 00008915 FF7508                  	push qword [rbp + 8]
 12409 00008918 FF7500                  	push qword [rbp]
 12410 0000891B 4883C308                	add rbx ,8*1
 12411                                  	 .L_fix_stack_label_011b:
 12412 0000891F 488B5518                	mov rdx, qword[rbp+8*3]
 12413 00008923 4883C203                	add rdx, 3
 12414 00008927 48C1E203                	shl rdx, 3
 12415 0000892B 4889EF                  	mov rdi, rbp
 12416 0000892E 4801D7                  	add rdi, rdx
 12417 00008931 4C8B4500                	mov r8, qword[rbp]
 12418 00008935 4889E9                  	mov rcx, rbp
 12419 00008938 4883E908                	sub rcx, 8
 12420                                  	 .L_loop_fix_stuck_011b:
 12421 0000893C 4839CC                  	cmp rsp, rcx
 12422 0000893F 7710                    ja .L_loop_fix_stuck_end_011b
 12423 00008941 488B19                   	mov rbx, qword[rcx]
 12424 00008944 48891F                  	 mov qword[rdi], rbx
 12425 00008947 4883EF08                	sub rdi, 8
 12426 0000894B 4883E908                	sub rcx, 8
 12427 0000894F EBEB                    jmp .L_loop_fix_stuck_011b
 12428                                  	 .L_loop_fix_stuck_end_011b:
 12429 00008951 4883C708                	add rdi, 8
 12430 00008955 4889FC                  	 mov rsp, rdi
 12431 00008958 4C89C5                  	mov rbp, r8
 12432 0000895B 5D                      	pop rbp
 12433 0000895C FFE0                    	jmp rax 
 12434                                  
 12435 0000895E E9F4000000                      	jmp .L_if_end_008c
 12436                                  
 12437                                          	.L_if_else_008c:
 12438 00008963 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12439 00008967 50                      	push rax
 12440 00008968 6A01                    	push 1
 12441 0000896A 488B0425[40000000]      	mov rax, qword [free_var_8]
 12442 00008972 803805                  	cmp byte [rax], T_closure 
 12443 00008975 0F8554950000                    jne L_code_ptr_error
 12444                                  
 12445 0000897B 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12446                                  
 12447 0000897F 53                              push rbx
 12448                                  
 12449 00008980 FF5009                          call SOB_CLOSURE_CODE(rax)
 12450                                  
 12451                                          
 12452 00008983 483D[02000000]                  	cmp rax, sob_boolean_false
 12453                                  
 12454 00008989 746C                            	je .L_if_else_008d
 12455 0000898B 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 12456 0000898F 50                      	push rax
 12457 00008990 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12458 00008994 50                      	push rax
 12459                                  
 12460 00008995 6A02                    	push 2
 12461 00008997 488B4510                	mov rax, qword [rbp + 8 * 2]
 12462                                  
 12463 0000899B 488B00                                            	mov rax, qword[rax + 8 * 0]
 12464                                  
 12465 0000899E 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12466                                  	assert_closure(rax)
    42 000089A2 803805              <1>  cmp byte [%1], %2
    43 000089A5 0F85639D0000        <1>  jne L_error_incorrect_type
 12467 000089AB 50                      	push rax 
 12468 000089AC FF7508                  	push qword [rbp + 8]
 12469 000089AF FF7500                  	push qword [rbp]
 12470 000089B2 4883C308                	add rbx ,8*1
 12471                                  	 .L_fix_stack_label_011a:
 12472 000089B6 488B5518                	mov rdx, qword[rbp+8*3]
 12473 000089BA 4883C203                	add rdx, 3
 12474 000089BE 48C1E203                	shl rdx, 3
 12475 000089C2 4889EF                  	mov rdi, rbp
 12476 000089C5 4801D7                  	add rdi, rdx
 12477 000089C8 4C8B4500                	mov r8, qword[rbp]
 12478 000089CC 4889E9                  	mov rcx, rbp
 12479 000089CF 4883E908                	sub rcx, 8
 12480                                  	 .L_loop_fix_stuck_011a:
 12481 000089D3 4839CC                  	cmp rsp, rcx
 12482 000089D6 7710                    ja .L_loop_fix_stuck_end_011a
 12483 000089D8 488B19                   	mov rbx, qword[rcx]
 12484 000089DB 48891F                  	 mov qword[rdi], rbx
 12485 000089DE 4883EF08                	sub rdi, 8
 12486 000089E2 4883E908                	sub rcx, 8
 12487 000089E6 EBEB                    jmp .L_loop_fix_stuck_011a
 12488                                  	 .L_loop_fix_stuck_end_011a:
 12489 000089E8 4883C708                	add rdi, 8
 12490 000089EC 4889FC                  	 mov rsp, rdi
 12491 000089EF 4C89C5                  	mov rbp, r8
 12492 000089F2 5D                      	pop rbp
 12493 000089F3 FFE0                    	jmp rax 
 12494                                  
 12495 000089F5 EB60                            	jmp .L_if_end_008d
 12496                                  
 12497                                          	.L_if_else_008d:
 12498                                  	 
 12499 000089F7 6A00                    	push 0
 12500 000089F9 488B4510                	mov rax, qword [rbp + 8 * 2]
 12501                                  
 12502 000089FD 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12503                                  
 12504 00008A01 488B00                                            	mov rax, qword[rax + 8 * 0]
 12505                                  	assert_closure(rax)
    42 00008A04 803805              <1>  cmp byte [%1], %2
    43 00008A07 0F85019D0000        <1>  jne L_error_incorrect_type
 12506 00008A0D 50                      	push rax 
 12507 00008A0E FF7508                  	push qword [rbp + 8]
 12508 00008A11 FF7500                  	push qword [rbp]
 12509 00008A14 4883C308                	add rbx ,8*1
 12510                                  	 .L_fix_stack_label_0119:
 12511 00008A18 488B5518                	mov rdx, qword[rbp+8*3]
 12512 00008A1C 4883C203                	add rdx, 3
 12513 00008A20 48C1E203                	shl rdx, 3
 12514 00008A24 4889EF                  	mov rdi, rbp
 12515 00008A27 4801D7                  	add rdi, rdx
 12516 00008A2A 4C8B4500                	mov r8, qword[rbp]
 12517 00008A2E 4889E9                  	mov rcx, rbp
 12518 00008A31 4883E908                	sub rcx, 8
 12519                                  	 .L_loop_fix_stuck_0119:
 12520 00008A35 4839CC                  	cmp rsp, rcx
 12521 00008A38 7710                    ja .L_loop_fix_stuck_end_0119
 12522 00008A3A 488B19                   	mov rbx, qword[rcx]
 12523 00008A3D 48891F                  	 mov qword[rdi], rbx
 12524 00008A40 4883EF08                	sub rdi, 8
 12525 00008A44 4883E908                	sub rcx, 8
 12526 00008A48 EBEB                    jmp .L_loop_fix_stuck_0119
 12527                                  	 .L_loop_fix_stuck_end_0119:
 12528 00008A4A 4883C708                	add rdi, 8
 12529 00008A4E 4889FC                  	 mov rsp, rdi
 12530 00008A51 4C89C5                  	mov rbp, r8
 12531 00008A54 5D                      	pop rbp
 12532 00008A55 FFE0                    	jmp rax 
 12533                                  
 12534                                          	.L_if_end_008d:
 12535                                  
 12536                                          	.L_if_end_008c:
 12537                                  
 12538 00008A57 EB0A                            	jmp .L_if_end_008b
 12539                                  
 12540                                          	.L_if_else_008b:
 12541 00008A59 48B8-                   	mov rax,L_constants + 0
 12541 00008A5B [0000000000000000] 
 12542                                  
 12543                                          	.L_if_end_008b:
 12544                                  
 12545                                          	.L_if_end_008a:
 12546 00008A63 C9                      	leave
 12547 00008A64 C22000                  	ret 8 * (2 + 2)
 12548                                  .L_lambda_simple_end_00e7:	; new closure is in rax
 12549 00008A67 C9                      	leave
 12550 00008A68 C22000                  	ret 8 * (2 + 2)
 12551                                  .L_lambda_simple_end_00e6:	; new closure is in rax
 12552 00008A6B 50                      	push rax
 12553                                  
 12554 00008A6C 6A01                    	push 1
 12555 00008A6E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12556 00008A73 E8A2840000              	call malloc
 12557 00008A78 50                      	push rax
 12558 00008A79 BF08000000              	mov rdi, 8 * 1	; new rib
 12559 00008A7E E897840000              	call malloc
 12560 00008A83 50                      	push rax
 12561 00008A84 BF10000000              	mov rdi, 8 * 2	; extended env
 12562 00008A89 E88C840000              	call malloc
 12563 00008A8E 488B7D10                	mov rdi, ENV
 12564 00008A92 BE00000000              	mov rsi, 0
 12565 00008A97 BA01000000              	mov rdx, 1
 12566                                  .L_lambda_simple_env_loop_00e8:	; ext_env[i + 1] <-- env[i]
 12567 00008A9C 4883FE01                	cmp rsi, 1
 12568 00008AA0 7410                    	je .L_lambda_simple_env_end_00e8
 12569 00008AA2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12570 00008AA6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12571 00008AAA 48FFC6                  	inc rsi
 12572 00008AAD 48FFC2                  	inc rdx
 12573 00008AB0 EBEA                    	jmp .L_lambda_simple_env_loop_00e8
 12574                                  .L_lambda_simple_env_end_00e8:
 12575 00008AB2 5B                      	pop rbx
 12576 00008AB3 BE00000000              	mov rsi, 0
 12577                                  .L_lambda_simple_params_loop_00e8:	; copy params
 12578 00008AB8 4883FE01                	cmp rsi, 1
 12579 00008ABC 740E                    	je .L_lambda_simple_params_end_00e8
 12580 00008ABE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12581 00008AC3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12582 00008AC7 48FFC6                  	inc rsi
 12583 00008ACA EBEC                    	jmp .L_lambda_simple_params_loop_00e8
 12584                                  .L_lambda_simple_params_end_00e8:
 12585 00008ACC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12586 00008ACF 4889C3                  	mov rbx, rax
 12587 00008AD2 58                      	pop rax
 12588 00008AD3 C60005                  	mov byte [rax], T_closure
 12589 00008AD6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12590 00008ADA 48C74009[E78A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e8
 12591 00008AE2 E9870F0000              	jmp .L_lambda_simple_end_00e8
 12592                                  .L_lambda_simple_code_00e8:	; lambda-simple body
 12593 00008AE7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12594 00008AED 740B                    	je .L_lambda_simple_arity_check_ok_00e8
 12595 00008AEF FF742410                	push qword [rsp + 8 * 2]
 12596 00008AF3 6A01                    	push 1
 12597 00008AF5 E9D9830000              	jmp L_error_incorrect_arity_simple
 12598                                  .L_lambda_simple_arity_check_ok_00e8:
 12599 00008AFA C8000000                	enter 0, 0
 12600 00008AFE 488B0425[38010000]      	 	mov rax, qword [free_var_39]
 12601 00008B06 50                      	push rax
 12602 00008B07 488B0425[40010000]      	mov rax, qword [free_var_40]
 12603 00008B0F 50                      	push rax
 12604 00008B10 6A02                    	push 2
 12605 00008B12 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12606 00008B16 803805                  	cmp byte [rax], T_closure 
 12607 00008B19 0F85B0930000                    jne L_code_ptr_error
 12608                                  
 12609 00008B1F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12610                                  
 12611 00008B23 53                              push rbx
 12612                                  
 12613 00008B24 FF5009                          call SOB_CLOSURE_CODE(rax)
 12614                                  
 12615 00008B27 50                              	push rax
 12616                                  
 12617 00008B28 6A01                    	push 1
 12618 00008B2A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12619 00008B2F E8E6830000              	call malloc
 12620 00008B34 50                      	push rax
 12621 00008B35 BF08000000              	mov rdi, 8 * 1	; new rib
 12622 00008B3A E8DB830000              	call malloc
 12623 00008B3F 50                      	push rax
 12624 00008B40 BF18000000              	mov rdi, 8 * 3	; extended env
 12625 00008B45 E8D0830000              	call malloc
 12626 00008B4A 488B7D10                	mov rdi, ENV
 12627 00008B4E BE00000000              	mov rsi, 0
 12628 00008B53 BA01000000              	mov rdx, 1
 12629                                  .L_lambda_simple_env_loop_00e9:	; ext_env[i + 1] <-- env[i]
 12630 00008B58 4883FE02                	cmp rsi, 2
 12631 00008B5C 7410                    	je .L_lambda_simple_env_end_00e9
 12632 00008B5E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12633 00008B62 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12634 00008B66 48FFC6                  	inc rsi
 12635 00008B69 48FFC2                  	inc rdx
 12636 00008B6C EBEA                    	jmp .L_lambda_simple_env_loop_00e9
 12637                                  .L_lambda_simple_env_end_00e9:
 12638 00008B6E 5B                      	pop rbx
 12639 00008B6F BE00000000              	mov rsi, 0
 12640                                  .L_lambda_simple_params_loop_00e9:	; copy params
 12641 00008B74 4883FE01                	cmp rsi, 1
 12642 00008B78 740E                    	je .L_lambda_simple_params_end_00e9
 12643 00008B7A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12644 00008B7F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12645 00008B83 48FFC6                  	inc rsi
 12646 00008B86 EBEC                    	jmp .L_lambda_simple_params_loop_00e9
 12647                                  .L_lambda_simple_params_end_00e9:
 12648 00008B88 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12649 00008B8B 4889C3                  	mov rbx, rax
 12650 00008B8E 58                      	pop rax
 12651 00008B8F C60005                  	mov byte [rax], T_closure
 12652 00008B92 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12653 00008B96 48C74009[A38B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e9
 12654 00008B9E E9740E0000              	jmp .L_lambda_simple_end_00e9
 12655                                  .L_lambda_simple_code_00e9:	; lambda-simple body
 12656 00008BA3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12657 00008BA9 740B                    	je .L_lambda_simple_arity_check_ok_00e9
 12658 00008BAB FF742410                	push qword [rsp + 8 * 2]
 12659 00008BAF 6A01                    	push 1
 12660 00008BB1 E91D830000              	jmp L_error_incorrect_arity_simple
 12661                                  .L_lambda_simple_arity_check_ok_00e9:
 12662 00008BB6 C8000000                	enter 0, 0
 12663 00008BBA 488B0425[48010000]      	 	mov rax, qword [free_var_41]
 12664 00008BC2 50                      	push rax
 12665 00008BC3 488B0425[50010000]      	mov rax, qword [free_var_42]
 12666 00008BCB 50                      	push rax
 12667 00008BCC 6A02                    	push 2
 12668 00008BCE 488B4510                	mov rax, qword [rbp + 8 * 2]
 12669                                  
 12670 00008BD2 488B00                                            	mov rax, qword[rax + 8 * 0]
 12671                                  
 12672 00008BD5 488B00                                            	mov rax, qword[rax + 8 * 0]
 12673 00008BD8 803805                  	cmp byte [rax], T_closure 
 12674 00008BDB 0F85EE920000                    jne L_code_ptr_error
 12675                                  
 12676 00008BE1 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12677                                  
 12678 00008BE5 53                              push rbx
 12679                                  
 12680 00008BE6 FF5009                          call SOB_CLOSURE_CODE(rax)
 12681                                  
 12682 00008BE9 50                              	push rax
 12683                                  
 12684 00008BEA 6A01                    	push 1
 12685 00008BEC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12686 00008BF1 E824830000              	call malloc
 12687 00008BF6 50                      	push rax
 12688 00008BF7 BF08000000              	mov rdi, 8 * 1	; new rib
 12689 00008BFC E819830000              	call malloc
 12690 00008C01 50                      	push rax
 12691 00008C02 BF20000000              	mov rdi, 8 * 4	; extended env
 12692 00008C07 E80E830000              	call malloc
 12693 00008C0C 488B7D10                	mov rdi, ENV
 12694 00008C10 BE00000000              	mov rsi, 0
 12695 00008C15 BA01000000              	mov rdx, 1
 12696                                  .L_lambda_simple_env_loop_00ea:	; ext_env[i + 1] <-- env[i]
 12697 00008C1A 4883FE03                	cmp rsi, 3
 12698 00008C1E 7410                    	je .L_lambda_simple_env_end_00ea
 12699 00008C20 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12700 00008C24 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12701 00008C28 48FFC6                  	inc rsi
 12702 00008C2B 48FFC2                  	inc rdx
 12703 00008C2E EBEA                    	jmp .L_lambda_simple_env_loop_00ea
 12704                                  .L_lambda_simple_env_end_00ea:
 12705 00008C30 5B                      	pop rbx
 12706 00008C31 BE00000000              	mov rsi, 0
 12707                                  .L_lambda_simple_params_loop_00ea:	; copy params
 12708 00008C36 4883FE01                	cmp rsi, 1
 12709 00008C3A 740E                    	je .L_lambda_simple_params_end_00ea
 12710 00008C3C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12711 00008C41 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12712 00008C45 48FFC6                  	inc rsi
 12713 00008C48 EBEC                    	jmp .L_lambda_simple_params_loop_00ea
 12714                                  .L_lambda_simple_params_end_00ea:
 12715 00008C4A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12716 00008C4D 4889C3                  	mov rbx, rax
 12717 00008C50 58                      	pop rax
 12718 00008C51 C60005                  	mov byte [rax], T_closure
 12719 00008C54 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12720 00008C58 48C74009[658C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ea
 12721 00008C60 E95B0D0000              	jmp .L_lambda_simple_end_00ea
 12722                                  .L_lambda_simple_code_00ea:	; lambda-simple body
 12723 00008C65 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12724 00008C6B 740B                    	je .L_lambda_simple_arity_check_ok_00ea
 12725 00008C6D FF742410                	push qword [rsp + 8 * 2]
 12726 00008C71 6A01                    	push 1
 12727 00008C73 E95B820000              	jmp L_error_incorrect_arity_simple
 12728                                  .L_lambda_simple_arity_check_ok_00ea:
 12729 00008C78 C8000000                	enter 0, 0
 12730 00008C7C BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 12731 00008C81 E894820000              	call malloc
 12732 00008C86 50                      	push rax
 12733 00008C87 BF08000000              	mov rdi, 8 * 1	; new rib
 12734 00008C8C E889820000              	call malloc
 12735 00008C91 50                      	push rax
 12736 00008C92 BF28000000              	mov rdi, 8 * 5	; extended env
 12737 00008C97 E87E820000              	call malloc
 12738 00008C9C 488B7D10                	mov rdi, ENV
 12739 00008CA0 BE00000000              	mov rsi, 0
 12740 00008CA5 BA01000000              	mov rdx, 1
 12741                                  .L_lambda_simple_env_loop_00eb:	; ext_env[i + 1] <-- env[i]
 12742 00008CAA 4883FE04                	cmp rsi, 4
 12743 00008CAE 7410                    	je .L_lambda_simple_env_end_00eb
 12744 00008CB0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12745 00008CB4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12746 00008CB8 48FFC6                  	inc rsi
 12747 00008CBB 48FFC2                  	inc rdx
 12748 00008CBE EBEA                    	jmp .L_lambda_simple_env_loop_00eb
 12749                                  .L_lambda_simple_env_end_00eb:
 12750 00008CC0 5B                      	pop rbx
 12751 00008CC1 BE00000000              	mov rsi, 0
 12752                                  .L_lambda_simple_params_loop_00eb:	; copy params
 12753 00008CC6 4883FE01                	cmp rsi, 1
 12754 00008CCA 740E                    	je .L_lambda_simple_params_end_00eb
 12755 00008CCC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12756 00008CD1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12757 00008CD5 48FFC6                  	inc rsi
 12758 00008CD8 EBEC                    	jmp .L_lambda_simple_params_loop_00eb
 12759                                  .L_lambda_simple_params_end_00eb:
 12760 00008CDA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12761 00008CDD 4889C3                  	mov rbx, rax
 12762 00008CE0 58                      	pop rax
 12763 00008CE1 C60005                  	mov byte [rax], T_closure
 12764 00008CE4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12765 00008CE8 48C74009[F58C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00eb
 12766 00008CF0 E9A1000000              	jmp .L_lambda_simple_end_00eb
 12767                                  .L_lambda_simple_code_00eb:	; lambda-simple body
 12768 00008CF5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12769 00008CFB 740B                    	je .L_lambda_simple_arity_check_ok_00eb
 12770 00008CFD FF742410                	push qword [rsp + 8 * 2]
 12771 00008D01 6A02                    	push 2
 12772 00008D03 E9CB810000              	jmp L_error_incorrect_arity_simple
 12773                                  .L_lambda_simple_arity_check_ok_00eb:
 12774 00008D08 C8000000                	enter 0, 0
 12775 00008D0C 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 12776 00008D10 50                      	push rax
 12777 00008D11 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12778 00008D15 50                      	push rax
 12779 00008D16 6A02                    	push 2
 12780 00008D18 488B4510                	mov rax, qword [rbp + 8 * 2]
 12781                                  
 12782 00008D1C 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12783                                  
 12784 00008D20 488B00                                            	mov rax, qword[rax + 8 * 0]
 12785 00008D23 803805                  	cmp byte [rax], T_closure 
 12786 00008D26 0F85A3910000                    jne L_code_ptr_error
 12787                                  
 12788 00008D2C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 12789                                  
 12790 00008D30 53                              push rbx
 12791                                  
 12792 00008D31 FF5009                          call SOB_CLOSURE_CODE(rax)
 12793                                  
 12794 00008D34 50                              	push rax
 12795                                  
 12796 00008D35 6A01                    	push 1
 12797 00008D37 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12798                                  	assert_closure(rax)
    42 00008D3F 803805              <1>  cmp byte [%1], %2
    43 00008D42 0F85C6990000        <1>  jne L_error_incorrect_type
 12799 00008D48 50                      	push rax 
 12800 00008D49 FF7508                  	push qword [rbp + 8]
 12801 00008D4C FF7500                  	push qword [rbp]
 12802 00008D4F 4883C308                	add rbx ,8*1
 12803                                  	 .L_fix_stack_label_0122:
 12804 00008D53 488B5518                	mov rdx, qword[rbp+8*3]
 12805 00008D57 4883C203                	add rdx, 3
 12806 00008D5B 48C1E203                	shl rdx, 3
 12807 00008D5F 4889EF                  	mov rdi, rbp
 12808 00008D62 4801D7                  	add rdi, rdx
 12809 00008D65 4C8B4500                	mov r8, qword[rbp]
 12810 00008D69 4889E9                  	mov rcx, rbp
 12811 00008D6C 4883E908                	sub rcx, 8
 12812                                  	 .L_loop_fix_stuck_0122:
 12813 00008D70 4839CC                  	cmp rsp, rcx
 12814 00008D73 7710                    ja .L_loop_fix_stuck_end_0122
 12815 00008D75 488B19                   	mov rbx, qword[rcx]
 12816 00008D78 48891F                  	 mov qword[rdi], rbx
 12817 00008D7B 4883EF08                	sub rdi, 8
 12818 00008D7F 4883E908                	sub rcx, 8
 12819 00008D83 EBEB                    jmp .L_loop_fix_stuck_0122
 12820                                  	 .L_loop_fix_stuck_end_0122:
 12821 00008D85 4883C708                	add rdi, 8
 12822 00008D89 4889FC                  	 mov rsp, rdi
 12823 00008D8C 4C89C5                  	mov rbp, r8
 12824 00008D8F 5D                      	pop rbp
 12825 00008D90 FFE0                    	jmp rax 
 12826 00008D92 C9                      	leave
 12827 00008D93 C22000                  	ret 8 * (2 + 2)
 12828                                  .L_lambda_simple_end_00eb:	; new closure is in rax
 12829 00008D96 50                      	push rax
 12830                                  
 12831 00008D97 6A01                    	push 1
 12832 00008D99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12833 00008D9E E877810000              	call malloc
 12834 00008DA3 50                      	push rax
 12835 00008DA4 BF08000000              	mov rdi, 8 * 1	; new rib
 12836 00008DA9 E86C810000              	call malloc
 12837 00008DAE 50                      	push rax
 12838 00008DAF BF28000000              	mov rdi, 8 * 5	; extended env
 12839 00008DB4 E861810000              	call malloc
 12840 00008DB9 488B7D10                	mov rdi, ENV
 12841 00008DBD BE00000000              	mov rsi, 0
 12842 00008DC2 BA01000000              	mov rdx, 1
 12843                                  .L_lambda_simple_env_loop_00ec:	; ext_env[i + 1] <-- env[i]
 12844 00008DC7 4883FE04                	cmp rsi, 4
 12845 00008DCB 7410                    	je .L_lambda_simple_env_end_00ec
 12846 00008DCD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12847 00008DD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12848 00008DD5 48FFC6                  	inc rsi
 12849 00008DD8 48FFC2                  	inc rdx
 12850 00008DDB EBEA                    	jmp .L_lambda_simple_env_loop_00ec
 12851                                  .L_lambda_simple_env_end_00ec:
 12852 00008DDD 5B                      	pop rbx
 12853 00008DDE BE00000000              	mov rsi, 0
 12854                                  .L_lambda_simple_params_loop_00ec:	; copy params
 12855 00008DE3 4883FE01                	cmp rsi, 1
 12856 00008DE7 740E                    	je .L_lambda_simple_params_end_00ec
 12857 00008DE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12858 00008DEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12859 00008DF2 48FFC6                  	inc rsi
 12860 00008DF5 EBEC                    	jmp .L_lambda_simple_params_loop_00ec
 12861                                  .L_lambda_simple_params_end_00ec:
 12862 00008DF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12863 00008DFA 4889C3                  	mov rbx, rax
 12864 00008DFD 58                      	pop rax
 12865 00008DFE C60005                  	mov byte [rax], T_closure
 12866 00008E01 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12867 00008E05 48C74009[128E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ec
 12868 00008E0D E9570B0000              	jmp .L_lambda_simple_end_00ec
 12869                                  .L_lambda_simple_code_00ec:	; lambda-simple body
 12870 00008E12 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12871 00008E18 740B                    	je .L_lambda_simple_arity_check_ok_00ec
 12872 00008E1A FF742410                	push qword [rsp + 8 * 2]
 12873 00008E1E 6A01                    	push 1
 12874 00008E20 E9AE800000              	jmp L_error_incorrect_arity_simple
 12875                                  .L_lambda_simple_arity_check_ok_00ec:
 12876 00008E25 C8000000                	enter 0, 0
 12877 00008E29 BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 12878 00008E2E E8E7800000              	call malloc
 12879 00008E33 50                      	push rax
 12880 00008E34 BF08000000              	mov rdi, 8 * 1	; new rib
 12881 00008E39 E8DC800000              	call malloc
 12882 00008E3E 50                      	push rax
 12883 00008E3F BF30000000              	mov rdi, 8 * 6	; extended env
 12884 00008E44 E8D1800000              	call malloc
 12885 00008E49 488B7D10                	mov rdi, ENV
 12886 00008E4D BE00000000              	mov rsi, 0
 12887 00008E52 BA01000000              	mov rdx, 1
 12888                                  .L_lambda_simple_env_loop_00ed:	; ext_env[i + 1] <-- env[i]
 12889 00008E57 4883FE05                	cmp rsi, 5
 12890 00008E5B 7410                    	je .L_lambda_simple_env_end_00ed
 12891 00008E5D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12892 00008E61 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12893 00008E65 48FFC6                  	inc rsi
 12894 00008E68 48FFC2                  	inc rdx
 12895 00008E6B EBEA                    	jmp .L_lambda_simple_env_loop_00ed
 12896                                  .L_lambda_simple_env_end_00ed:
 12897 00008E6D 5B                      	pop rbx
 12898 00008E6E BE00000000              	mov rsi, 0
 12899                                  .L_lambda_simple_params_loop_00ed:	; copy params
 12900 00008E73 4883FE01                	cmp rsi, 1
 12901 00008E77 740E                    	je .L_lambda_simple_params_end_00ed
 12902 00008E79 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12903 00008E7E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12904 00008E82 48FFC6                  	inc rsi
 12905 00008E85 EBEC                    	jmp .L_lambda_simple_params_loop_00ed
 12906                                  .L_lambda_simple_params_end_00ed:
 12907 00008E87 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12908 00008E8A 4889C3                  	mov rbx, rax
 12909 00008E8D 58                      	pop rax
 12910 00008E8E C60005                  	mov byte [rax], T_closure
 12911 00008E91 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12912 00008E95 48C74009[A28E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ed
 12913 00008E9D E985000000              	jmp .L_lambda_simple_end_00ed
 12914                                  .L_lambda_simple_code_00ed:	; lambda-simple body
 12915 00008EA2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12916 00008EA8 740B                    	je .L_lambda_simple_arity_check_ok_00ed
 12917 00008EAA FF742410                	push qword [rsp + 8 * 2]
 12918 00008EAE 6A02                    	push 2
 12919 00008EB0 E91E800000              	jmp L_error_incorrect_arity_simple
 12920                                  .L_lambda_simple_arity_check_ok_00ed:
 12921 00008EB5 C8000000                	enter 0, 0
 12922 00008EB9 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 12923 00008EBD 50                      	push rax
 12924 00008EBE 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12925 00008EC2 50                      	push rax
 12926                                  
 12927 00008EC3 6A02                    	push 2
 12928 00008EC5 488B4510                	mov rax, qword [rbp + 8 * 2]
 12929                                  
 12930 00008EC9 488B4010                                          	mov rax, qword[rax + 8 * 2]
 12931                                  
 12932 00008ECD 488B00                                            	mov rax, qword[rax + 8 * 0]
 12933                                  	assert_closure(rax)
    42 00008ED0 803805              <1>  cmp byte [%1], %2
    43 00008ED3 0F8535980000        <1>  jne L_error_incorrect_type
 12934 00008ED9 50                      	push rax 
 12935 00008EDA FF7508                  	push qword [rbp + 8]
 12936 00008EDD FF7500                  	push qword [rbp]
 12937 00008EE0 4883C308                	add rbx ,8*1
 12938                                  	 .L_fix_stack_label_0124:
 12939 00008EE4 488B5518                	mov rdx, qword[rbp+8*3]
 12940 00008EE8 4883C203                	add rdx, 3
 12941 00008EEC 48C1E203                	shl rdx, 3
 12942 00008EF0 4889EF                  	mov rdi, rbp
 12943 00008EF3 4801D7                  	add rdi, rdx
 12944 00008EF6 4C8B4500                	mov r8, qword[rbp]
 12945 00008EFA 4889E9                  	mov rcx, rbp
 12946 00008EFD 4883E908                	sub rcx, 8
 12947                                  	 .L_loop_fix_stuck_0124:
 12948 00008F01 4839CC                  	cmp rsp, rcx
 12949 00008F04 7710                    ja .L_loop_fix_stuck_end_0124
 12950 00008F06 488B19                   	mov rbx, qword[rcx]
 12951 00008F09 48891F                  	 mov qword[rdi], rbx
 12952 00008F0C 4883EF08                	sub rdi, 8
 12953 00008F10 4883E908                	sub rcx, 8
 12954 00008F14 EBEB                    jmp .L_loop_fix_stuck_0124
 12955                                  	 .L_loop_fix_stuck_end_0124:
 12956 00008F16 4883C708                	add rdi, 8
 12957 00008F1A 4889FC                  	 mov rsp, rdi
 12958 00008F1D 4C89C5                  	mov rbp, r8
 12959 00008F20 5D                      	pop rbp
 12960 00008F21 FFE0                    	jmp rax 
 12961 00008F23 C9                      	leave
 12962 00008F24 C22000                  	ret 8 * (2 + 2)
 12963                                  .L_lambda_simple_end_00ed:	; new closure is in rax
 12964 00008F27 50                      	push rax
 12965                                  
 12966 00008F28 6A01                    	push 1
 12967 00008F2A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12968 00008F2F E8E67F0000              	call malloc
 12969 00008F34 50                      	push rax
 12970 00008F35 BF08000000              	mov rdi, 8 * 1	; new rib
 12971 00008F3A E8DB7F0000              	call malloc
 12972 00008F3F 50                      	push rax
 12973 00008F40 BF30000000              	mov rdi, 8 * 6	; extended env
 12974 00008F45 E8D07F0000              	call malloc
 12975 00008F4A 488B7D10                	mov rdi, ENV
 12976 00008F4E BE00000000              	mov rsi, 0
 12977 00008F53 BA01000000              	mov rdx, 1
 12978                                  .L_lambda_simple_env_loop_00ee:	; ext_env[i + 1] <-- env[i]
 12979 00008F58 4883FE05                	cmp rsi, 5
 12980 00008F5C 7410                    	je .L_lambda_simple_env_end_00ee
 12981 00008F5E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12982 00008F62 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12983 00008F66 48FFC6                  	inc rsi
 12984 00008F69 48FFC2                  	inc rdx
 12985 00008F6C EBEA                    	jmp .L_lambda_simple_env_loop_00ee
 12986                                  .L_lambda_simple_env_end_00ee:
 12987 00008F6E 5B                      	pop rbx
 12988 00008F6F BE00000000              	mov rsi, 0
 12989                                  .L_lambda_simple_params_loop_00ee:	; copy params
 12990 00008F74 4883FE01                	cmp rsi, 1
 12991 00008F78 740E                    	je .L_lambda_simple_params_end_00ee
 12992 00008F7A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12993 00008F7F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12994 00008F83 48FFC6                  	inc rsi
 12995 00008F86 EBEC                    	jmp .L_lambda_simple_params_loop_00ee
 12996                                  .L_lambda_simple_params_end_00ee:
 12997 00008F88 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12998 00008F8B 4889C3                  	mov rbx, rax
 12999 00008F8E 58                      	pop rax
 13000 00008F8F C60005                  	mov byte [rax], T_closure
 13001 00008F92 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13002 00008F96 48C74009[A38F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ee
 13003 00008F9E E96F090000              	jmp .L_lambda_simple_end_00ee
 13004                                  .L_lambda_simple_code_00ee:	; lambda-simple body
 13005 00008FA3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13006 00008FA9 740B                    	je .L_lambda_simple_arity_check_ok_00ee
 13007 00008FAB FF742410                	push qword [rsp + 8 * 2]
 13008 00008FAF 6A01                    	push 1
 13009 00008FB1 E91D7F0000              	jmp L_error_incorrect_arity_simple
 13010                                  .L_lambda_simple_arity_check_ok_00ee:
 13011 00008FB6 C8000000                	enter 0, 0
 13012 00008FBA BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 13013 00008FBF E8567F0000              	call malloc
 13014 00008FC4 50                      	push rax
 13015 00008FC5 BF08000000              	mov rdi, 8 * 1	; new rib
 13016 00008FCA E84B7F0000              	call malloc
 13017 00008FCF 50                      	push rax
 13018 00008FD0 BF38000000              	mov rdi, 8 * 7	; extended env
 13019 00008FD5 E8407F0000              	call malloc
 13020 00008FDA 488B7D10                	mov rdi, ENV
 13021 00008FDE BE00000000              	mov rsi, 0
 13022 00008FE3 BA01000000              	mov rdx, 1
 13023                                  .L_lambda_simple_env_loop_00ef:	; ext_env[i + 1] <-- env[i]
 13024 00008FE8 4883FE06                	cmp rsi, 6
 13025 00008FEC 7410                    	je .L_lambda_simple_env_end_00ef
 13026 00008FEE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13027 00008FF2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13028 00008FF6 48FFC6                  	inc rsi
 13029 00008FF9 48FFC2                  	inc rdx
 13030 00008FFC EBEA                    	jmp .L_lambda_simple_env_loop_00ef
 13031                                  .L_lambda_simple_env_end_00ef:
 13032 00008FFE 5B                      	pop rbx
 13033 00008FFF BE00000000              	mov rsi, 0
 13034                                  .L_lambda_simple_params_loop_00ef:	; copy params
 13035 00009004 4883FE01                	cmp rsi, 1
 13036 00009008 740E                    	je .L_lambda_simple_params_end_00ef
 13037 0000900A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13038 0000900F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13039 00009013 48FFC6                  	inc rsi
 13040 00009016 EBEC                    	jmp .L_lambda_simple_params_loop_00ef
 13041                                  .L_lambda_simple_params_end_00ef:
 13042 00009018 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13043 0000901B 4889C3                  	mov rbx, rax
 13044 0000901E 58                      	pop rax
 13045 0000901F C60005                  	mov byte [rax], T_closure
 13046 00009022 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13047 00009026 48C74009[33900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ef
 13048 0000902E E9A0000000              	jmp .L_lambda_simple_end_00ef
 13049                                  .L_lambda_simple_code_00ef:	; lambda-simple body
 13050 00009033 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13051 00009039 740B                    	je .L_lambda_simple_arity_check_ok_00ef
 13052 0000903B FF742410                	push qword [rsp + 8 * 2]
 13053 0000903F 6A02                    	push 2
 13054 00009041 E98D7E0000              	jmp L_error_incorrect_arity_simple
 13055                                  .L_lambda_simple_arity_check_ok_00ef:
 13056 00009046 C8000000                	enter 0, 0
 13057 0000904A 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 13058 0000904E 50                      	push rax
 13059 0000904F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13060 00009053 50                      	push rax
 13061 00009054 6A02                    	push 2
 13062 00009056 488B4510                	mov rax, qword [rbp + 8 * 2]
 13063                                  
 13064 0000905A 488B00                                            	mov rax, qword[rax + 8 * 0]
 13065                                  
 13066 0000905D 488B00                                            	mov rax, qword[rax + 8 * 0]
 13067 00009060 803805                  	cmp byte [rax], T_closure 
 13068 00009063 0F85668E0000                    jne L_code_ptr_error
 13069                                  
 13070 00009069 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13071                                  
 13072 0000906D 53                              push rbx
 13073                                  
 13074 0000906E FF5009                          call SOB_CLOSURE_CODE(rax)
 13075                                  
 13076 00009071 50                              	push rax
 13077                                  
 13078 00009072 6A01                    	push 1
 13079 00009074 488B0425[B0020000]      	mov rax, qword [free_var_86]
 13080                                  	assert_closure(rax)
    42 0000907C 803805              <1>  cmp byte [%1], %2
    43 0000907F 0F8589960000        <1>  jne L_error_incorrect_type
 13081 00009085 50                      	push rax 
 13082 00009086 FF7508                  	push qword [rbp + 8]
 13083 00009089 FF7500                  	push qword [rbp]
 13084 0000908C 4883C308                	add rbx ,8*1
 13085                                  	 .L_fix_stack_label_0126:
 13086 00009090 488B5518                	mov rdx, qword[rbp+8*3]
 13087 00009094 4883C203                	add rdx, 3
 13088 00009098 48C1E203                	shl rdx, 3
 13089 0000909C 4889EF                  	mov rdi, rbp
 13090 0000909F 4801D7                  	add rdi, rdx
 13091 000090A2 4C8B4500                	mov r8, qword[rbp]
 13092 000090A6 4889E9                  	mov rcx, rbp
 13093 000090A9 4883E908                	sub rcx, 8
 13094                                  	 .L_loop_fix_stuck_0126:
 13095 000090AD 4839CC                  	cmp rsp, rcx
 13096 000090B0 7710                    ja .L_loop_fix_stuck_end_0126
 13097 000090B2 488B19                   	mov rbx, qword[rcx]
 13098 000090B5 48891F                  	 mov qword[rdi], rbx
 13099 000090B8 4883EF08                	sub rdi, 8
 13100 000090BC 4883E908                	sub rcx, 8
 13101 000090C0 EBEB                    jmp .L_loop_fix_stuck_0126
 13102                                  	 .L_loop_fix_stuck_end_0126:
 13103 000090C2 4883C708                	add rdi, 8
 13104 000090C6 4889FC                  	 mov rsp, rdi
 13105 000090C9 4C89C5                  	mov rbp, r8
 13106 000090CC 5D                      	pop rbp
 13107 000090CD FFE0                    	jmp rax 
 13108 000090CF C9                      	leave
 13109 000090D0 C22000                  	ret 8 * (2 + 2)
 13110                                  .L_lambda_simple_end_00ef:	; new closure is in rax
 13111 000090D3 50                      	push rax
 13112                                  
 13113 000090D4 6A01                    	push 1
 13114 000090D6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13115 000090DB E83A7E0000              	call malloc
 13116 000090E0 50                      	push rax
 13117 000090E1 BF08000000              	mov rdi, 8 * 1	; new rib
 13118 000090E6 E82F7E0000              	call malloc
 13119 000090EB 50                      	push rax
 13120 000090EC BF38000000              	mov rdi, 8 * 7	; extended env
 13121 000090F1 E8247E0000              	call malloc
 13122 000090F6 488B7D10                	mov rdi, ENV
 13123 000090FA BE00000000              	mov rsi, 0
 13124 000090FF BA01000000              	mov rdx, 1
 13125                                  .L_lambda_simple_env_loop_00f0:	; ext_env[i + 1] <-- env[i]
 13126 00009104 4883FE06                	cmp rsi, 6
 13127 00009108 7410                    	je .L_lambda_simple_env_end_00f0
 13128 0000910A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13129 0000910E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13130 00009112 48FFC6                  	inc rsi
 13131 00009115 48FFC2                  	inc rdx
 13132 00009118 EBEA                    	jmp .L_lambda_simple_env_loop_00f0
 13133                                  .L_lambda_simple_env_end_00f0:
 13134 0000911A 5B                      	pop rbx
 13135 0000911B BE00000000              	mov rsi, 0
 13136                                  .L_lambda_simple_params_loop_00f0:	; copy params
 13137 00009120 4883FE01                	cmp rsi, 1
 13138 00009124 740E                    	je .L_lambda_simple_params_end_00f0
 13139 00009126 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13140 0000912B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13141 0000912F 48FFC6                  	inc rsi
 13142 00009132 EBEC                    	jmp .L_lambda_simple_params_loop_00f0
 13143                                  .L_lambda_simple_params_end_00f0:
 13144 00009134 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13145 00009137 4889C3                  	mov rbx, rax
 13146 0000913A 58                      	pop rax
 13147 0000913B C60005                  	mov byte [rax], T_closure
 13148 0000913E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13149 00009142 48C74009[4F910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f0
 13150 0000914A E96C070000              	jmp .L_lambda_simple_end_00f0
 13151                                  .L_lambda_simple_code_00f0:	; lambda-simple body
 13152 0000914F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13153 00009155 740B                    	je .L_lambda_simple_arity_check_ok_00f0
 13154 00009157 FF742410                	push qword [rsp + 8 * 2]
 13155 0000915B 6A01                    	push 1
 13156 0000915D E9717D0000              	jmp L_error_incorrect_arity_simple
 13157                                  .L_lambda_simple_arity_check_ok_00f0:
 13158 00009162 C8000000                	enter 0, 0
 13159 00009166 BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 13160 0000916B E8AA7D0000              	call malloc
 13161 00009170 50                      	push rax
 13162 00009171 BF08000000              	mov rdi, 8 * 1	; new rib
 13163 00009176 E89F7D0000              	call malloc
 13164 0000917B 50                      	push rax
 13165 0000917C BF40000000              	mov rdi, 8 * 8	; extended env
 13166 00009181 E8947D0000              	call malloc
 13167 00009186 488B7D10                	mov rdi, ENV
 13168 0000918A BE00000000              	mov rsi, 0
 13169 0000918F BA01000000              	mov rdx, 1
 13170                                  .L_lambda_simple_env_loop_00f1:	; ext_env[i + 1] <-- env[i]
 13171 00009194 4883FE07                	cmp rsi, 7
 13172 00009198 7410                    	je .L_lambda_simple_env_end_00f1
 13173 0000919A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13174 0000919E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13175 000091A2 48FFC6                  	inc rsi
 13176 000091A5 48FFC2                  	inc rdx
 13177 000091A8 EBEA                    	jmp .L_lambda_simple_env_loop_00f1
 13178                                  .L_lambda_simple_env_end_00f1:
 13179 000091AA 5B                      	pop rbx
 13180 000091AB BE00000000              	mov rsi, 0
 13181                                  .L_lambda_simple_params_loop_00f1:	; copy params
 13182 000091B0 4883FE01                	cmp rsi, 1
 13183 000091B4 740E                    	je .L_lambda_simple_params_end_00f1
 13184 000091B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13185 000091BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13186 000091BF 48FFC6                  	inc rsi
 13187 000091C2 EBEC                    	jmp .L_lambda_simple_params_loop_00f1
 13188                                  .L_lambda_simple_params_end_00f1:
 13189 000091C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13190 000091C7 4889C3                  	mov rbx, rax
 13191 000091CA 58                      	pop rax
 13192 000091CB C60005                  	mov byte [rax], T_closure
 13193 000091CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13194 000091D2 48C74009[DF910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f1
 13195 000091DA E9E6040000              	jmp .L_lambda_simple_end_00f1
 13196                                  .L_lambda_simple_code_00f1:	; lambda-simple body
 13197 000091DF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13198 000091E5 740B                    	je .L_lambda_simple_arity_check_ok_00f1
 13199 000091E7 FF742410                	push qword [rsp + 8 * 2]
 13200 000091EB 6A01                    	push 1
 13201 000091ED E9E17C0000              	jmp L_error_incorrect_arity_simple
 13202                                  .L_lambda_simple_arity_check_ok_00f1:
 13203 000091F2 C8000000                	enter 0, 0
 13204 000091F6 48B8-                   	 	mov rax,L_constants + 23
 13204 000091F8 [1700000000000000] 
 13205 00009200 50                      	push rax
 13206                                  
 13207 00009201 6A01                    	push 1
 13208 00009203 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13209 00009208 E80D7D0000              	call malloc
 13210 0000920D 50                      	push rax
 13211 0000920E BF08000000              	mov rdi, 8 * 1	; new rib
 13212 00009213 E8027D0000              	call malloc
 13213 00009218 50                      	push rax
 13214 00009219 BF48000000              	mov rdi, 8 * 9	; extended env
 13215 0000921E E8F77C0000              	call malloc
 13216 00009223 488B7D10                	mov rdi, ENV
 13217 00009227 BE00000000              	mov rsi, 0
 13218 0000922C BA01000000              	mov rdx, 1
 13219                                  .L_lambda_simple_env_loop_00f2:	; ext_env[i + 1] <-- env[i]
 13220 00009231 4883FE08                	cmp rsi, 8
 13221 00009235 7410                    	je .L_lambda_simple_env_end_00f2
 13222 00009237 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13223 0000923B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13224 0000923F 48FFC6                  	inc rsi
 13225 00009242 48FFC2                  	inc rdx
 13226 00009245 EBEA                    	jmp .L_lambda_simple_env_loop_00f2
 13227                                  .L_lambda_simple_env_end_00f2:
 13228 00009247 5B                      	pop rbx
 13229 00009248 BE00000000              	mov rsi, 0
 13230                                  .L_lambda_simple_params_loop_00f2:	; copy params
 13231 0000924D 4883FE01                	cmp rsi, 1
 13232 00009251 740E                    	je .L_lambda_simple_params_end_00f2
 13233 00009253 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13234 00009258 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13235 0000925C 48FFC6                  	inc rsi
 13236 0000925F EBEC                    	jmp .L_lambda_simple_params_loop_00f2
 13237                                  .L_lambda_simple_params_end_00f2:
 13238 00009261 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13239 00009264 4889C3                  	mov rbx, rax
 13240 00009267 58                      	pop rax
 13241 00009268 C60005                  	mov byte [rax], T_closure
 13242 0000926B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13243 0000926F 48C74009[7C920000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f2
 13244 00009277 E9F2030000              	jmp .L_lambda_simple_end_00f2
 13245                                  .L_lambda_simple_code_00f2:	; lambda-simple body
 13246 0000927C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13247 00009282 740B                    	je .L_lambda_simple_arity_check_ok_00f2
 13248 00009284 FF742410                	push qword [rsp + 8 * 2]
 13249 00009288 6A01                    	push 1
 13250 0000928A E9447C0000              	jmp L_error_incorrect_arity_simple
 13251                                  .L_lambda_simple_arity_check_ok_00f2:
 13252 0000928F C8000000                	enter 0, 0
 13253 00009293 BF08000000              	mov rdi, 8
 13254 00009298 E87D7C0000              	call malloc
 13255 0000929D 488B5D20                	mov rbx, PARAM(0)
 13256 000092A1 488918                  	mov qword [rax], rbx
 13257 000092A4 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 13258                                  
 13259 000092A8 48B8-                            	mov rax, sob_void
 13259 000092AA [0000000000000000] 
 13260                                  
 13261 000092B2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13262 000092B7 E85E7C0000              	call malloc
 13263 000092BC 50                      	push rax
 13264 000092BD BF08000000              	mov rdi, 8 * 1	; new rib
 13265 000092C2 E8537C0000              	call malloc
 13266 000092C7 50                      	push rax
 13267 000092C8 BF50000000              	mov rdi, 8 * 10	; extended env
 13268 000092CD E8487C0000              	call malloc
 13269 000092D2 488B7D10                	mov rdi, ENV
 13270 000092D6 BE00000000              	mov rsi, 0
 13271 000092DB BA01000000              	mov rdx, 1
 13272                                  .L_lambda_simple_env_loop_00f3:	; ext_env[i + 1] <-- env[i]
 13273 000092E0 4883FE09                	cmp rsi, 9
 13274 000092E4 7410                    	je .L_lambda_simple_env_end_00f3
 13275 000092E6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13276 000092EA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13277 000092EE 48FFC6                  	inc rsi
 13278 000092F1 48FFC2                  	inc rdx
 13279 000092F4 EBEA                    	jmp .L_lambda_simple_env_loop_00f3
 13280                                  .L_lambda_simple_env_end_00f3:
 13281 000092F6 5B                      	pop rbx
 13282 000092F7 BE00000000              	mov rsi, 0
 13283                                  .L_lambda_simple_params_loop_00f3:	; copy params
 13284 000092FC 4883FE01                	cmp rsi, 1
 13285 00009300 740E                    	je .L_lambda_simple_params_end_00f3
 13286 00009302 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13287 00009307 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13288 0000930B 48FFC6                  	inc rsi
 13289 0000930E EBEC                    	jmp .L_lambda_simple_params_loop_00f3
 13290                                  .L_lambda_simple_params_end_00f3:
 13291 00009310 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13292 00009313 4889C3                  	mov rbx, rax
 13293 00009316 58                      	pop rax
 13294 00009317 C60005                  	mov byte [rax], T_closure
 13295 0000931A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13296 0000931E 48C74009[2B930000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f3
 13297 00009326 E947010000              	jmp .L_lambda_simple_end_00f3
 13298                                  .L_lambda_simple_code_00f3:	; lambda-simple body
 13299 0000932B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13300 00009331 740B                    	je .L_lambda_simple_arity_check_ok_00f3
 13301 00009333 FF742410                	push qword [rsp + 8 * 2]
 13302 00009337 6A02                    	push 2
 13303 00009339 E9957B0000              	jmp L_error_incorrect_arity_simple
 13304                                  .L_lambda_simple_arity_check_ok_00f3:
 13305 0000933E C8000000                	enter 0, 0
 13306 00009342 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13307 00009346 50                      	push rax
 13308 00009347 6A01                    	push 1
 13309 00009349 488B0425[00000000]      	mov rax, qword [free_var_0]
 13310 00009351 803805                  	cmp byte [rax], T_closure 
 13311 00009354 0F85758B0000                    jne L_code_ptr_error
 13312                                  
 13313 0000935A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13314                                  
 13315 0000935E 53                              push rbx
 13316                                  
 13317 0000935F FF5009                          call SOB_CLOSURE_CODE(rax)
 13318                                  
 13319 00009362 483D[02000000]                  	cmp rax, sob_boolean_false
 13320 00009368 0F8500010000            	jne .L_or_end_0010
 13321 0000936E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13322 00009372 50                      	push rax
 13323 00009373 6A01                    	push 1
 13324 00009375 488B0425[80000000]      	mov rax, qword [free_var_16]
 13325 0000937D 803805                  	cmp byte [rax], T_closure 
 13326 00009380 0F85498B0000                    jne L_code_ptr_error
 13327                                  
 13328 00009386 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13329                                  
 13330 0000938A 53                              push rbx
 13331                                  
 13332 0000938B FF5009                          call SOB_CLOSURE_CODE(rax)
 13333                                  
 13334 0000938E 50                              	push rax
 13335 0000938F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13336 00009393 50                      	push rax
 13337 00009394 6A02                    	push 2
 13338 00009396 488B4510                	mov rax, qword [rbp + 8 * 2]
 13339                                  
 13340 0000939A 488B4008                                          	mov rax, qword[rax + 8 * 1]
 13341                                  
 13342 0000939E 488B00                                            	mov rax, qword[rax + 8 * 0]
 13343 000093A1 803805                  	cmp byte [rax], T_closure 
 13344 000093A4 0F85258B0000                    jne L_code_ptr_error
 13345                                  
 13346 000093AA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13347                                  
 13348 000093AE 53                              push rbx
 13349                                  
 13350 000093AF FF5009                          call SOB_CLOSURE_CODE(rax)
 13351                                  
 13352                                          
 13353 000093B2 483D[02000000]                  	cmp rax, sob_boolean_false
 13354                                  
 13355 000093B8 0F84A6000000                    	je .L_if_else_0090
 13356 000093BE 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 13357 000093C2 50                      	push rax
 13358 000093C3 6A01                    	push 1
 13359 000093C5 488B0425[88000000]      	mov rax, qword [free_var_17]
 13360 000093CD 803805                  	cmp byte [rax], T_closure 
 13361 000093D0 0F85F98A0000                    jne L_code_ptr_error
 13362                                  
 13363 000093D6 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13364                                  
 13365 000093DA 53                              push rbx
 13366                                  
 13367 000093DB FF5009                          call SOB_CLOSURE_CODE(rax)
 13368                                  
 13369 000093DE 50                              	push rax
 13370 000093DF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13371 000093E3 50                      	push rax
 13372 000093E4 6A01                    	push 1
 13373 000093E6 488B0425[80000000]      	mov rax, qword [free_var_16]
 13374 000093EE 803805                  	cmp byte [rax], T_closure 
 13375 000093F1 0F85D88A0000                    jne L_code_ptr_error
 13376                                  
 13377 000093F7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13378                                  
 13379 000093FB 53                              push rbx
 13380                                  
 13381 000093FC FF5009                          call SOB_CLOSURE_CODE(rax)
 13382                                  
 13383 000093FF 50                              	push rax
 13384                                  
 13385 00009400 6A02                    	push 2
 13386 00009402 488B4510                	mov rax, qword [rbp + 8 * 2]
 13387                                  
 13388 00009406 488B00                                            	mov rax, qword[rax + 8 * 0]
 13389                                  
 13390 00009409 488B00                                            	mov rax, qword[rax + 8 * 0]
 13391 0000940C 488B00                  	mov rax, qword [rax]
 13392                                  	assert_closure(rax)
    42 0000940F 803805              <1>  cmp byte [%1], %2
    43 00009412 0F85F6920000        <1>  jne L_error_incorrect_type
 13393 00009418 50                      	push rax 
 13394 00009419 FF7508                  	push qword [rbp + 8]
 13395 0000941C FF7500                  	push qword [rbp]
 13396 0000941F 4883C308                	add rbx ,8*1
 13397                                  	 .L_fix_stack_label_0129:
 13398 00009423 488B5518                	mov rdx, qword[rbp+8*3]
 13399 00009427 4883C203                	add rdx, 3
 13400 0000942B 48C1E203                	shl rdx, 3
 13401 0000942F 4889EF                  	mov rdi, rbp
 13402 00009432 4801D7                  	add rdi, rdx
 13403 00009435 4C8B4500                	mov r8, qword[rbp]
 13404 00009439 4889E9                  	mov rcx, rbp
 13405 0000943C 4883E908                	sub rcx, 8
 13406                                  	 .L_loop_fix_stuck_0129:
 13407 00009440 4839CC                  	cmp rsp, rcx
 13408 00009443 7710                    ja .L_loop_fix_stuck_end_0129
 13409 00009445 488B19                   	mov rbx, qword[rcx]
 13410 00009448 48891F                  	 mov qword[rdi], rbx
 13411 0000944B 4883EF08                	sub rdi, 8
 13412 0000944F 4883E908                	sub rcx, 8
 13413 00009453 EBEB                    jmp .L_loop_fix_stuck_0129
 13414                                  	 .L_loop_fix_stuck_end_0129:
 13415 00009455 4883C708                	add rdi, 8
 13416 00009459 4889FC                  	 mov rsp, rdi
 13417 0000945C 4C89C5                  	mov rbp, r8
 13418 0000945F 5D                      	pop rbp
 13419 00009460 FFE0                    	jmp rax 
 13420                                  
 13421 00009462 EB0A                            	jmp .L_if_end_0090
 13422                                  
 13423                                          	.L_if_else_0090:
 13424 00009464 48B8-                   	mov rax,L_constants + 2
 13424 00009466 [0200000000000000] 
 13425                                  
 13426                                          	.L_if_end_0090:
 13427                                  .L_or_end_0010:
 13428 0000946E C9                      	leave
 13429 0000946F C22000                  	ret 8 * (2 + 2)
 13430                                  .L_lambda_simple_end_00f3:	; new closure is in rax
 13431 00009472 50                      	push rax
 13432 00009473 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13433 00009477 8F00                    	pop qword [rax]
 13434 00009479 48B8-                   	mov rax, sob_void
 13434 0000947B [0000000000000000] 
 13435                                  
 13436 00009483 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 13437 00009488 E88D7A0000              	call malloc
 13438 0000948D 50                      	push rax
 13439 0000948E BF08000000              	mov rdi, 8 * 1  ; new rib
 13440 00009493 E8827A0000              	call malloc
 13441 00009498 50                      	push rax
 13442 00009499 BF50000000              	mov rdi, 8 * 10	; extended env
 13443 0000949E E8777A0000              	call malloc
 13444 000094A3 488B7D10                	mov rdi, ENV
 13445 000094A7 BE00000000              	mov rsi, 0
 13446 000094AC BA01000000              	mov rdx, 1
 13447                                  .L_lambda_opt_env_loop_0025:	; ext_env = env
 13448 000094B1 4883FE09                	cmp rsi, 9
 13449 000094B5 7410                    	je .L_lambda_opt_env_end_0025
 13450 000094B7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13451 000094BB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13452 000094BF 48FFC6                  	inc rsi
 13453 000094C2 48FFC2                  	inc rdx
 13454 000094C5 EBEA                    	jmp .L_lambda_opt_env_loop_0025
 13455                                  .L_lambda_opt_env_end_0025:
 13456 000094C7 5B                      	pop rbx
 13457 000094C8 BE00000000              	mov rsi, 0
 13458                                  .L_lambda_opt_params_loop_0025:	; copy params
 13459 000094CD 4883FE01                	cmp rsi, 1
 13460 000094D1 740E                    	je .L_lambda_opt_params_end_0025
 13461 000094D3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13462 000094D8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13463 000094DC 48FFC6                  	inc rsi
 13464 000094DF EBEC                    	jmp .L_lambda_opt_params_loop_0025
 13465                                  .L_lambda_opt_params_end_0025:
 13466 000094E1 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 13467 000094E4 4889C3                  	mov rbx, rax
 13468 000094E7 58                      	pop rax
 13469 000094E8 C60005                  	mov byte [rax], T_closure
 13470 000094EB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13471 000094EF 48C74009[FC940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0025
 13472 000094F7 E96E010000              	jmp .L_lambda_opt_end_0025
 13473                                  .L_lambda_opt_code_0025:	; lambda-opt body
 13474 000094FC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13475 00009502 740D                    	je .L_lambda_opt_arity_check_exact_0025  ;same num_of_args
 13476 00009504 7F5B                    	jg .L_lambda_opt_arity_check_more_0025  ;greater num_of_args
 13477 00009506 FF742410                	push qword [rsp + 8 * 2]
 13478 0000950A 6A01                    	push 1
 13479 0000950C E9D6790000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 13480                                  .L_lambda_opt_arity_check_exact_0025:
 13481 00009511 4883EC08                	sub rsp, 8 * 1
 13482 00009515 4889E7                  	mov rdi, rsp 
 13483                                  	;mov ret
 13484 00009518 488B4708                	mov rax, qword [rdi + (8 * 1)]
 13485 0000951C 488907                  	mov qword [rdi], rax
 13486 0000951F 4883C708                	add rdi, 8
 13487                                  	;mov env
 13488 00009523 488B4708                	mov rax, qword [rdi + (8 * 1)]
 13489 00009527 488907                  	mov qword [rdi], rax
 13490 0000952A 4883C708                	add rdi, 8
 13491                                  	;mov & update COUNT
 13492 0000952E 488B4708                	mov rax, qword [rdi +(8 * 1)]
 13493 00009532 4889C1                  	mov rcx, rax
 13494 00009535 48FFC0                  	inc rax
 13495 00009538 488907                  	mov qword [rdi], rax
 13496 0000953B 4883C708                	add rdi, 8
 13497                                  	;LOOP:move params
 13498                                  .L_lambda_opt_stack_shrink_loop_006d:	
 13499 0000953F 4883F900                	cmp rcx, 0
 13500 00009543 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_006d
 13501 00009545 488B4708                	mov rax, qword [rdi + 8]
 13502 00009549 488907                  	mov qword [rdi], rax
 13503 0000954C 4883C708                	add rdi, 8
 13504 00009550 48FFC9                  	dec rcx
 13505 00009553 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_006d
 13506                                  .L_lambda_opt_stack_shrink_loop_exit_006d:	
 13507 00009555 48C707[01000000]        	mov qword [rdi], sob_nil
 13508 0000955C E995000000              	jmp .L_lambda_opt_stack_adjusted_0025
 13509                                  .L_lambda_opt_arity_check_more_0025:	
 13510 00009561 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 13511 00009566 488D4EFF                	lea rcx, [rsi - 1]
 13512 0000956A 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 13513 0000956F 4989F2                  	mov r10, rsi
 13514 00009572 49B9-                   	mov r9, sob_nil
 13514 00009574 [0100000000000000] 
 13515                                  .L_lambda_opt_stack_shrink_loop_006e:	
 13516 0000957C 4883F900                	cmp rcx, 0
 13517 00009580 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_006e
 13518 00009582 BF11000000              	mov rdi, 1 + 8 + 8
 13519 00009587 E88E790000              	call malloc
 13520 0000958C C60021                  	mov byte [rax], T_pair
 13521 0000958F 488B1E                  	mov rbx, qword [rsi]
 13522 00009592 48895801                	mov SOB_PAIR_CAR(rax), rbx
 13523 00009596 4C894809                	mov SOB_PAIR_CDR(rax), r9
 13524 0000959A 4989C1                  	mov r9, rax
 13525 0000959D 4883EE08                	sub rsi, 8 * 1
 13526 000095A1 48FFC9                  	dec rcx
 13527 000095A4 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_006e
 13528                                  .L_lambda_opt_stack_shrink_loop_exit_006e:	
 13529 000095A6 4D890A                  	mov qword [r10], r9
 13530 000095A9 4983EA08                	sub r10, 8 * 1; the new dest!
 13531 000095AD 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
 13532 000095B2 B901000000              	mov rcx, 1 
 13533                                  .L_lambda_opt_stack_shrink_loop_006f:	
 13534 000095B7 4883F900                	cmp rcx, 0
 13535 000095BB 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_006f
 13536 000095BD 488B06                  	mov rax, qword [rsi]
 13537 000095C0 498902                  	mov qword [r10], rax
 13538 000095C3 4983EA08                	sub r10, 8 * 1
 13539 000095C7 4883EE08                	sub rsi, 8 * 1
 13540 000095CB 48FFC9                  	dec rcx
 13541 000095CE EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_006f
 13542                                  .L_lambda_opt_stack_shrink_loop_exit_006f:	
 13543 000095D0 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
 13544 000095D7 4983EA08                	sub r10, 8 * 1
 13545 000095DB 4883EE08                	sub rsi, 8 * 1
 13546 000095DF 488B06                  	mov rax, qword [rsi] ;env
 13547 000095E2 498902                  	mov qword [r10], rax
 13548 000095E5 4983EA08                	sub r10, 8 * 1
 13549 000095E9 4883EE08                	sub rsi, 8 * 1
 13550 000095ED 488B06                  	mov rax, qword [rsi] ;ret
 13551 000095F0 498902                  	mov qword [r10], rax
 13552 000095F3 4C89D4                  	mov rsp, r10
 13553                                  .L_lambda_opt_stack_adjusted_0025:	
 13554 000095F6 C8000000                	enter 0, 0
 13555 000095FA 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 13556 000095FE 50                      	push rax
 13557 000095FF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13558 00009603 50                      	push rax
 13559                                  
 13560 00009604 6A02                    	push 2
 13561 00009606 488B4510                	mov rax, qword [rbp + 8 * 2]
 13562                                  
 13563 0000960A 488B00                                            	mov rax, qword[rax + 8 * 0]
 13564                                  
 13565 0000960D 488B00                                            	mov rax, qword[rax + 8 * 0]
 13566 00009610 488B00                  	mov rax, qword [rax]
 13567                                  	assert_closure(rax)
    42 00009613 803805              <1>  cmp byte [%1], %2
    43 00009616 0F85F2900000        <1>  jne L_error_incorrect_type
 13568 0000961C 50                      	push rax 
 13569 0000961D FF7508                  	push qword [rbp + 8]
 13570 00009620 FF7500                  	push qword [rbp]
 13571 00009623 4883C308                	add rbx ,8*1
 13572                                  	 .L_fix_stack_label_012a:
 13573 00009627 488B5518                	mov rdx, qword[rbp+8*3]
 13574 0000962B 4883C203                	add rdx, 3
 13575 0000962F 48C1E203                	shl rdx, 3
 13576 00009633 4889EF                  	mov rdi, rbp
 13577 00009636 4801D7                  	add rdi, rdx
 13578 00009639 4C8B4500                	mov r8, qword[rbp]
 13579 0000963D 4889E9                  	mov rcx, rbp
 13580 00009640 4883E908                	sub rcx, 8
 13581                                  	 .L_loop_fix_stuck_012a:
 13582 00009644 4839CC                  	cmp rsp, rcx
 13583 00009647 7710                    ja .L_loop_fix_stuck_end_012a
 13584 00009649 488B19                   	mov rbx, qword[rcx]
 13585 0000964C 48891F                  	 mov qword[rdi], rbx
 13586 0000964F 4883EF08                	sub rdi, 8
 13587 00009653 4883E908                	sub rcx, 8
 13588 00009657 EBEB                    jmp .L_loop_fix_stuck_012a
 13589                                  	 .L_loop_fix_stuck_end_012a:
 13590 00009659 4883C708                	add rdi, 8
 13591 0000965D 4889FC                  	 mov rsp, rdi
 13592 00009660 4C89C5                  	mov rbp, r8
 13593 00009663 5D                      	pop rbp
 13594 00009664 FFE0                    	jmp rax 
 13595 00009666 C9                      	leave
 13596 00009667 C22000                  	ret 8 * (2 + 2)
 13597                                  .L_lambda_opt_end_0025:	; new closure is in rax
 13598 0000966A C9                      	leave
 13599 0000966B C21800                  	ret 8 * (2 + 1)
 13600                                  .L_lambda_simple_end_00f2:	; new closure is in rax
 13601                                  	assert_closure(rax)
    42 0000966E 803805              <1>  cmp byte [%1], %2
    43 00009671 0F8597900000        <1>  jne L_error_incorrect_type
 13602 00009677 50                      	push rax 
 13603 00009678 FF7508                  	push qword [rbp + 8]
 13604 0000967B FF7500                  	push qword [rbp]
 13605 0000967E 4883C308                	add rbx ,8*1
 13606                                  	 .L_fix_stack_label_0128:
 13607 00009682 488B5518                	mov rdx, qword[rbp+8*3]
 13608 00009686 4883C203                	add rdx, 3
 13609 0000968A 48C1E203                	shl rdx, 3
 13610 0000968E 4889EF                  	mov rdi, rbp
 13611 00009691 4801D7                  	add rdi, rdx
 13612 00009694 4C8B4500                	mov r8, qword[rbp]
 13613 00009698 4889E9                  	mov rcx, rbp
 13614 0000969B 4883E908                	sub rcx, 8
 13615                                  	 .L_loop_fix_stuck_0128:
 13616 0000969F 4839CC                  	cmp rsp, rcx
 13617 000096A2 7710                    ja .L_loop_fix_stuck_end_0128
 13618 000096A4 488B19                   	mov rbx, qword[rcx]
 13619 000096A7 48891F                  	 mov qword[rdi], rbx
 13620 000096AA 4883EF08                	sub rdi, 8
 13621 000096AE 4883E908                	sub rcx, 8
 13622 000096B2 EBEB                    jmp .L_loop_fix_stuck_0128
 13623                                  	 .L_loop_fix_stuck_end_0128:
 13624 000096B4 4883C708                	add rdi, 8
 13625 000096B8 4889FC                  	 mov rsp, rdi
 13626 000096BB 4C89C5                  	mov rbp, r8
 13627 000096BE 5D                      	pop rbp
 13628 000096BF FFE0                    	jmp rax 
 13629 000096C1 C9                      	leave
 13630 000096C2 C21800                  	ret 8 * (2 + 1)
 13631                                  .L_lambda_simple_end_00f1:	; new closure is in rax
 13632 000096C5 50                      	push rax
 13633                                  
 13634 000096C6 6A01                    	push 1
 13635 000096C8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13636 000096CD E848780000              	call malloc
 13637 000096D2 50                      	push rax
 13638 000096D3 BF08000000              	mov rdi, 8 * 1	; new rib
 13639 000096D8 E83D780000              	call malloc
 13640 000096DD 50                      	push rax
 13641 000096DE BF40000000              	mov rdi, 8 * 8	; extended env
 13642 000096E3 E832780000              	call malloc
 13643 000096E8 488B7D10                	mov rdi, ENV
 13644 000096EC BE00000000              	mov rsi, 0
 13645 000096F1 BA01000000              	mov rdx, 1
 13646                                  .L_lambda_simple_env_loop_00f4:	; ext_env[i + 1] <-- env[i]
 13647 000096F6 4883FE07                	cmp rsi, 7
 13648 000096FA 7410                    	je .L_lambda_simple_env_end_00f4
 13649 000096FC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13650 00009700 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13651 00009704 48FFC6                  	inc rsi
 13652 00009707 48FFC2                  	inc rdx
 13653 0000970A EBEA                    	jmp .L_lambda_simple_env_loop_00f4
 13654                                  .L_lambda_simple_env_end_00f4:
 13655 0000970C 5B                      	pop rbx
 13656 0000970D BE00000000              	mov rsi, 0
 13657                                  .L_lambda_simple_params_loop_00f4:	; copy params
 13658 00009712 4883FE01                	cmp rsi, 1
 13659 00009716 740E                    	je .L_lambda_simple_params_end_00f4
 13660 00009718 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13661 0000971D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13662 00009721 48FFC6                  	inc rsi
 13663 00009724 EBEC                    	jmp .L_lambda_simple_params_loop_00f4
 13664                                  .L_lambda_simple_params_end_00f4:
 13665 00009726 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13666 00009729 4889C3                  	mov rbx, rax
 13667 0000972C 58                      	pop rax
 13668 0000972D C60005                  	mov byte [rax], T_closure
 13669 00009730 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13670 00009734 48C74009[41970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f4
 13671 0000973C E923010000              	jmp .L_lambda_simple_end_00f4
 13672                                  .L_lambda_simple_code_00f4:	; lambda-simple body
 13673 00009741 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13674 00009747 740B                    	je .L_lambda_simple_arity_check_ok_00f4
 13675 00009749 FF742410                	push qword [rsp + 8 * 2]
 13676 0000974D 6A01                    	push 1
 13677 0000974F E97F770000              	jmp L_error_incorrect_arity_simple
 13678                                  .L_lambda_simple_arity_check_ok_00f4:
 13679 00009754 C8000000                	enter 0, 0
 13680 00009758 488B4510                	mov rax, qword [rbp + 8 * 2]
 13681                                  
 13682 0000975C 488B4020                                          	mov rax, qword[rax + 8 * 4]
 13683                                  
 13684 00009760 488B00                                            	mov rax, qword[rax + 8 * 0]
 13685 00009763 50                      	push rax
 13686 00009764 6A01                    	push 1
 13687 00009766 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13688 0000976A 803805                  	cmp byte [rax], T_closure 
 13689 0000976D 0F855C870000                    jne L_code_ptr_error
 13690                                  
 13691 00009773 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13692                                  
 13693 00009777 53                              push rbx
 13694                                  
 13695 00009778 FF5009                          call SOB_CLOSURE_CODE(rax)
 13696                                  
 13697 0000977B 48890425[30030000]              	mov qword [free_var_102], rax
 13698                                  
 13699 00009783 48B8-                           	mov rax, sob_void
 13699 00009785 [0000000000000000] 
 13700                                  
 13701 0000978D 488B4510                	mov rax, qword [rbp + 8 * 2]
 13702                                  
 13703 00009791 488B00                                            	mov rax, qword[rax + 8 * 0]
 13704                                  
 13705 00009794 488B00                                            	mov rax, qword[rax + 8 * 0]
 13706 00009797 50                      	push rax
 13707 00009798 6A01                    	push 1
 13708 0000979A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13709 0000979E 803805                  	cmp byte [rax], T_closure 
 13710 000097A1 0F8528870000                    jne L_code_ptr_error
 13711                                  
 13712 000097A7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13713                                  
 13714 000097AB 53                              push rbx
 13715                                  
 13716 000097AC FF5009                          call SOB_CLOSURE_CODE(rax)
 13717                                  
 13718 000097AF 48890425[38030000]              	mov qword [free_var_103], rax
 13719                                  
 13720 000097B7 48B8-                           	mov rax, sob_void
 13720 000097B9 [0000000000000000] 
 13721                                  
 13722 000097C1 488B4510                	mov rax, qword [rbp + 8 * 2]
 13723                                  
 13724 000097C5 488B4008                                          	mov rax, qword[rax + 8 * 1]
 13725                                  
 13726 000097C9 488B00                                            	mov rax, qword[rax + 8 * 0]
 13727 000097CC 50                      	push rax
 13728 000097CD 6A01                    	push 1
 13729 000097CF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13730 000097D3 803805                  	cmp byte [rax], T_closure 
 13731 000097D6 0F85F3860000                    jne L_code_ptr_error
 13732                                  
 13733 000097DC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13734                                  
 13735 000097E0 53                              push rbx
 13736                                  
 13737 000097E1 FF5009                          call SOB_CLOSURE_CODE(rax)
 13738                                  
 13739 000097E4 48890425[40030000]              	mov qword [free_var_104], rax
 13740                                  
 13741 000097EC 48B8-                           	mov rax, sob_void
 13741 000097EE [0000000000000000] 
 13742                                  
 13743 000097F6 488B4510                	mov rax, qword [rbp + 8 * 2]
 13744                                  
 13745 000097FA 488B4010                                          	mov rax, qword[rax + 8 * 2]
 13746                                  
 13747 000097FE 488B00                                            	mov rax, qword[rax + 8 * 0]
 13748 00009801 50                      	push rax
 13749 00009802 6A01                    	push 1
 13750 00009804 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13751 00009808 803805                  	cmp byte [rax], T_closure 
 13752 0000980B 0F85BE860000                    jne L_code_ptr_error
 13753                                  
 13754 00009811 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13755                                  
 13756 00009815 53                              push rbx
 13757                                  
 13758 00009816 FF5009                          call SOB_CLOSURE_CODE(rax)
 13759                                  
 13760 00009819 48890425[48030000]              	mov qword [free_var_105], rax
 13761                                  
 13762 00009821 48B8-                           	mov rax, sob_void
 13762 00009823 [0000000000000000] 
 13763                                  
 13764 0000982B 488B4510                	mov rax, qword [rbp + 8 * 2]
 13765                                  
 13766 0000982F 488B4018                                          	mov rax, qword[rax + 8 * 3]
 13767                                  
 13768 00009833 488B00                                            	mov rax, qword[rax + 8 * 0]
 13769 00009836 50                      	push rax
 13770 00009837 6A01                    	push 1
 13771 00009839 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13772 0000983D 803805                  	cmp byte [rax], T_closure 
 13773 00009840 0F8589860000                    jne L_code_ptr_error
 13774                                  
 13775 00009846 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 13776                                  
 13777 0000984A 53                              push rbx
 13778                                  
 13779 0000984B FF5009                          call SOB_CLOSURE_CODE(rax)
 13780                                  
 13781 0000984E 48890425[50030000]              	mov qword [free_var_106], rax
 13782                                  
 13783 00009856 48B8-                           	mov rax, sob_void
 13783 00009858 [0000000000000000] 
 13784 00009860 C9                      	leave
 13785 00009861 C21800                  	ret 8 * (2 + 1)
 13786                                  .L_lambda_simple_end_00f4:	; new closure is in rax
 13787                                  	assert_closure(rax)
    42 00009864 803805              <1>  cmp byte [%1], %2
    43 00009867 0F85A18E0000        <1>  jne L_error_incorrect_type
 13788 0000986D 50                      	push rax 
 13789 0000986E FF7508                  	push qword [rbp + 8]
 13790 00009871 FF7500                  	push qword [rbp]
 13791 00009874 4883C308                	add rbx ,8*1
 13792                                  	 .L_fix_stack_label_012b:
 13793 00009878 488B5518                	mov rdx, qword[rbp+8*3]
 13794 0000987C 4883C203                	add rdx, 3
 13795 00009880 48C1E203                	shl rdx, 3
 13796 00009884 4889EF                  	mov rdi, rbp
 13797 00009887 4801D7                  	add rdi, rdx
 13798 0000988A 4C8B4500                	mov r8, qword[rbp]
 13799 0000988E 4889E9                  	mov rcx, rbp
 13800 00009891 4883E908                	sub rcx, 8
 13801                                  	 .L_loop_fix_stuck_012b:
 13802 00009895 4839CC                  	cmp rsp, rcx
 13803 00009898 7710                    ja .L_loop_fix_stuck_end_012b
 13804 0000989A 488B19                   	mov rbx, qword[rcx]
 13805 0000989D 48891F                  	 mov qword[rdi], rbx
 13806 000098A0 4883EF08                	sub rdi, 8
 13807 000098A4 4883E908                	sub rcx, 8
 13808 000098A8 EBEB                    jmp .L_loop_fix_stuck_012b
 13809                                  	 .L_loop_fix_stuck_end_012b:
 13810 000098AA 4883C708                	add rdi, 8
 13811 000098AE 4889FC                  	 mov rsp, rdi
 13812 000098B1 4C89C5                  	mov rbp, r8
 13813 000098B4 5D                      	pop rbp
 13814 000098B5 FFE0                    	jmp rax 
 13815 000098B7 C9                      	leave
 13816 000098B8 C21800                  	ret 8 * (2 + 1)
 13817                                  .L_lambda_simple_end_00f0:	; new closure is in rax
 13818                                  	assert_closure(rax)
    42 000098BB 803805              <1>  cmp byte [%1], %2
    43 000098BE 0F854A8E0000        <1>  jne L_error_incorrect_type
 13819 000098C4 50                      	push rax 
 13820 000098C5 FF7508                  	push qword [rbp + 8]
 13821 000098C8 FF7500                  	push qword [rbp]
 13822 000098CB 4883C308                	add rbx ,8*1
 13823                                  	 .L_fix_stack_label_0127:
 13824 000098CF 488B5518                	mov rdx, qword[rbp+8*3]
 13825 000098D3 4883C203                	add rdx, 3
 13826 000098D7 48C1E203                	shl rdx, 3
 13827 000098DB 4889EF                  	mov rdi, rbp
 13828 000098DE 4801D7                  	add rdi, rdx
 13829 000098E1 4C8B4500                	mov r8, qword[rbp]
 13830 000098E5 4889E9                  	mov rcx, rbp
 13831 000098E8 4883E908                	sub rcx, 8
 13832                                  	 .L_loop_fix_stuck_0127:
 13833 000098EC 4839CC                  	cmp rsp, rcx
 13834 000098EF 7710                    ja .L_loop_fix_stuck_end_0127
 13835 000098F1 488B19                   	mov rbx, qword[rcx]
 13836 000098F4 48891F                  	 mov qword[rdi], rbx
 13837 000098F7 4883EF08                	sub rdi, 8
 13838 000098FB 4883E908                	sub rcx, 8
 13839 000098FF EBEB                    jmp .L_loop_fix_stuck_0127
 13840                                  	 .L_loop_fix_stuck_end_0127:
 13841 00009901 4883C708                	add rdi, 8
 13842 00009905 4889FC                  	 mov rsp, rdi
 13843 00009908 4C89C5                  	mov rbp, r8
 13844 0000990B 5D                      	pop rbp
 13845 0000990C FFE0                    	jmp rax 
 13846 0000990E C9                      	leave
 13847 0000990F C21800                  	ret 8 * (2 + 1)
 13848                                  .L_lambda_simple_end_00ee:	; new closure is in rax
 13849                                  	assert_closure(rax)
    42 00009912 803805              <1>  cmp byte [%1], %2
    43 00009915 0F85F38D0000        <1>  jne L_error_incorrect_type
 13850 0000991B 50                      	push rax 
 13851 0000991C FF7508                  	push qword [rbp + 8]
 13852 0000991F FF7500                  	push qword [rbp]
 13853 00009922 4883C308                	add rbx ,8*1
 13854                                  	 .L_fix_stack_label_0125:
 13855 00009926 488B5518                	mov rdx, qword[rbp+8*3]
 13856 0000992A 4883C203                	add rdx, 3
 13857 0000992E 48C1E203                	shl rdx, 3
 13858 00009932 4889EF                  	mov rdi, rbp
 13859 00009935 4801D7                  	add rdi, rdx
 13860 00009938 4C8B4500                	mov r8, qword[rbp]
 13861 0000993C 4889E9                  	mov rcx, rbp
 13862 0000993F 4883E908                	sub rcx, 8
 13863                                  	 .L_loop_fix_stuck_0125:
 13864 00009943 4839CC                  	cmp rsp, rcx
 13865 00009946 7710                    ja .L_loop_fix_stuck_end_0125
 13866 00009948 488B19                   	mov rbx, qword[rcx]
 13867 0000994B 48891F                  	 mov qword[rdi], rbx
 13868 0000994E 4883EF08                	sub rdi, 8
 13869 00009952 4883E908                	sub rcx, 8
 13870 00009956 EBEB                    jmp .L_loop_fix_stuck_0125
 13871                                  	 .L_loop_fix_stuck_end_0125:
 13872 00009958 4883C708                	add rdi, 8
 13873 0000995C 4889FC                  	 mov rsp, rdi
 13874 0000995F 4C89C5                  	mov rbp, r8
 13875 00009962 5D                      	pop rbp
 13876 00009963 FFE0                    	jmp rax 
 13877 00009965 C9                      	leave
 13878 00009966 C21800                  	ret 8 * (2 + 1)
 13879                                  .L_lambda_simple_end_00ec:	; new closure is in rax
 13880                                  	assert_closure(rax)
    42 00009969 803805              <1>  cmp byte [%1], %2
    43 0000996C 0F859C8D0000        <1>  jne L_error_incorrect_type
 13881 00009972 50                      	push rax 
 13882 00009973 FF7508                  	push qword [rbp + 8]
 13883 00009976 FF7500                  	push qword [rbp]
 13884 00009979 4883C308                	add rbx ,8*1
 13885                                  	 .L_fix_stack_label_0123:
 13886 0000997D 488B5518                	mov rdx, qword[rbp+8*3]
 13887 00009981 4883C203                	add rdx, 3
 13888 00009985 48C1E203                	shl rdx, 3
 13889 00009989 4889EF                  	mov rdi, rbp
 13890 0000998C 4801D7                  	add rdi, rdx
 13891 0000998F 4C8B4500                	mov r8, qword[rbp]
 13892 00009993 4889E9                  	mov rcx, rbp
 13893 00009996 4883E908                	sub rcx, 8
 13894                                  	 .L_loop_fix_stuck_0123:
 13895 0000999A 4839CC                  	cmp rsp, rcx
 13896 0000999D 7710                    ja .L_loop_fix_stuck_end_0123
 13897 0000999F 488B19                   	mov rbx, qword[rcx]
 13898 000099A2 48891F                  	 mov qword[rdi], rbx
 13899 000099A5 4883EF08                	sub rdi, 8
 13900 000099A9 4883E908                	sub rcx, 8
 13901 000099AD EBEB                    jmp .L_loop_fix_stuck_0123
 13902                                  	 .L_loop_fix_stuck_end_0123:
 13903 000099AF 4883C708                	add rdi, 8
 13904 000099B3 4889FC                  	 mov rsp, rdi
 13905 000099B6 4C89C5                  	mov rbp, r8
 13906 000099B9 5D                      	pop rbp
 13907 000099BA FFE0                    	jmp rax 
 13908 000099BC C9                      	leave
 13909 000099BD C21800                  	ret 8 * (2 + 1)
 13910                                  .L_lambda_simple_end_00ea:	; new closure is in rax
 13911                                  	assert_closure(rax)
    42 000099C0 803805              <1>  cmp byte [%1], %2
    43 000099C3 0F85458D0000        <1>  jne L_error_incorrect_type
 13912 000099C9 50                      	push rax 
 13913 000099CA FF7508                  	push qword [rbp + 8]
 13914 000099CD FF7500                  	push qword [rbp]
 13915 000099D0 4883C308                	add rbx ,8*1
 13916                                  	 .L_fix_stack_label_0121:
 13917 000099D4 488B5518                	mov rdx, qword[rbp+8*3]
 13918 000099D8 4883C203                	add rdx, 3
 13919 000099DC 48C1E203                	shl rdx, 3
 13920 000099E0 4889EF                  	mov rdi, rbp
 13921 000099E3 4801D7                  	add rdi, rdx
 13922 000099E6 4C8B4500                	mov r8, qword[rbp]
 13923 000099EA 4889E9                  	mov rcx, rbp
 13924 000099ED 4883E908                	sub rcx, 8
 13925                                  	 .L_loop_fix_stuck_0121:
 13926 000099F1 4839CC                  	cmp rsp, rcx
 13927 000099F4 7710                    ja .L_loop_fix_stuck_end_0121
 13928 000099F6 488B19                   	mov rbx, qword[rcx]
 13929 000099F9 48891F                  	 mov qword[rdi], rbx
 13930 000099FC 4883EF08                	sub rdi, 8
 13931 00009A00 4883E908                	sub rcx, 8
 13932 00009A04 EBEB                    jmp .L_loop_fix_stuck_0121
 13933                                  	 .L_loop_fix_stuck_end_0121:
 13934 00009A06 4883C708                	add rdi, 8
 13935 00009A0A 4889FC                  	 mov rsp, rdi
 13936 00009A0D 4C89C5                  	mov rbp, r8
 13937 00009A10 5D                      	pop rbp
 13938 00009A11 FFE0                    	jmp rax 
 13939 00009A13 C9                      	leave
 13940 00009A14 C21800                  	ret 8 * (2 + 1)
 13941                                  .L_lambda_simple_end_00e9:	; new closure is in rax
 13942                                  	assert_closure(rax)
    42 00009A17 803805              <1>  cmp byte [%1], %2
    43 00009A1A 0F85EE8C0000        <1>  jne L_error_incorrect_type
 13943 00009A20 50                      	push rax 
 13944 00009A21 FF7508                  	push qword [rbp + 8]
 13945 00009A24 FF7500                  	push qword [rbp]
 13946 00009A27 4883C308                	add rbx ,8*1
 13947                                  	 .L_fix_stack_label_0120:
 13948 00009A2B 488B5518                	mov rdx, qword[rbp+8*3]
 13949 00009A2F 4883C203                	add rdx, 3
 13950 00009A33 48C1E203                	shl rdx, 3
 13951 00009A37 4889EF                  	mov rdi, rbp
 13952 00009A3A 4801D7                  	add rdi, rdx
 13953 00009A3D 4C8B4500                	mov r8, qword[rbp]
 13954 00009A41 4889E9                  	mov rcx, rbp
 13955 00009A44 4883E908                	sub rcx, 8
 13956                                  	 .L_loop_fix_stuck_0120:
 13957 00009A48 4839CC                  	cmp rsp, rcx
 13958 00009A4B 7710                    ja .L_loop_fix_stuck_end_0120
 13959 00009A4D 488B19                   	mov rbx, qword[rcx]
 13960 00009A50 48891F                  	 mov qword[rdi], rbx
 13961 00009A53 4883EF08                	sub rdi, 8
 13962 00009A57 4883E908                	sub rcx, 8
 13963 00009A5B EBEB                    jmp .L_loop_fix_stuck_0120
 13964                                  	 .L_loop_fix_stuck_end_0120:
 13965 00009A5D 4883C708                	add rdi, 8
 13966 00009A61 4889FC                  	 mov rsp, rdi
 13967 00009A64 4C89C5                  	mov rbp, r8
 13968 00009A67 5D                      	pop rbp
 13969 00009A68 FFE0                    	jmp rax 
 13970 00009A6A C9                      	leave
 13971 00009A6B C21800                  	ret 8 * (2 + 1)
 13972                                  .L_lambda_simple_end_00e8:	; new closure is in rax
 13973                                  	assert_closure(rax)
    42 00009A6E 803805              <1>  cmp byte [%1], %2
    43 00009A71 0F85978C0000        <1>  jne L_error_incorrect_type
 13974 00009A77 50                      	push rax 
 13975 00009A78 FF7508                  	push qword [rbp + 8]
 13976 00009A7B FF7500                  	push qword [rbp]
 13977 00009A7E 4883C308                	add rbx ,8*1
 13978                                  	 .L_fix_stack_label_011f:
 13979 00009A82 488B5518                	mov rdx, qword[rbp+8*3]
 13980 00009A86 4883C203                	add rdx, 3
 13981 00009A8A 48C1E203                	shl rdx, 3
 13982 00009A8E 4889EF                  	mov rdi, rbp
 13983 00009A91 4801D7                  	add rdi, rdx
 13984 00009A94 4C8B4500                	mov r8, qword[rbp]
 13985 00009A98 4889E9                  	mov rcx, rbp
 13986 00009A9B 4883E908                	sub rcx, 8
 13987                                  	 .L_loop_fix_stuck_011f:
 13988 00009A9F 4839CC                  	cmp rsp, rcx
 13989 00009AA2 7710                    ja .L_loop_fix_stuck_end_011f
 13990 00009AA4 488B19                   	mov rbx, qword[rcx]
 13991 00009AA7 48891F                  	 mov qword[rdi], rbx
 13992 00009AAA 4883EF08                	sub rdi, 8
 13993 00009AAE 4883E908                	sub rcx, 8
 13994 00009AB2 EBEB                    jmp .L_loop_fix_stuck_011f
 13995                                  	 .L_loop_fix_stuck_end_011f:
 13996 00009AB4 4883C708                	add rdi, 8
 13997 00009AB8 4889FC                  	 mov rsp, rdi
 13998 00009ABB 4C89C5                  	mov rbp, r8
 13999 00009ABE 5D                      	pop rbp
 14000 00009ABF FFE0                    	jmp rax 
 14001 00009AC1 C9                      	leave
 14002 00009AC2 C21800                  	ret 8 * (2 + 1)
 14003                                  .L_lambda_simple_end_00e5:	; new closure is in rax
 14004 00009AC5 803805                  	cmp byte [rax], T_closure 
 14005 00009AC8 0F8501840000                    jne L_code_ptr_error
 14006                                  
 14007 00009ACE 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14008                                  
 14009 00009AD2 53                              push rbx
 14010                                  
 14011 00009AD3 FF5009                          call SOB_CLOSURE_CODE(rax)
 14012                                  
 14013                                          
 14014 00009AD6 4889C7                  	mov rdi, rax
 14015 00009AD9 E84D740000              	call print_sexpr_if_not_void
 14016                                  
 14017 00009ADE 48B8-                   	mov rax,L_constants + 23
 14017 00009AE0 [1700000000000000] 
 14018 00009AE8 50                      	push rax
 14019 00009AE9 6A01                    	push 1
 14020 00009AEB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14021 00009AF0 E825740000              	call malloc
 14022 00009AF5 50                      	push rax
 14023 00009AF6 BF00000000              	mov rdi, 8 * 0	; new rib
 14024 00009AFB E81A740000              	call malloc
 14025 00009B00 50                      	push rax
 14026 00009B01 BF08000000              	mov rdi, 8 * 1	; extended env
 14027 00009B06 E80F740000              	call malloc
 14028 00009B0B 488B7D10                	mov rdi, ENV
 14029 00009B0F BE00000000              	mov rsi, 0
 14030 00009B14 BA01000000              	mov rdx, 1
 14031                                  .L_lambda_simple_env_loop_00f5:	; ext_env[i + 1] <-- env[i]
 14032 00009B19 4883FE00                	cmp rsi, 0
 14033 00009B1D 7410                    	je .L_lambda_simple_env_end_00f5
 14034 00009B1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14035 00009B23 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14036 00009B27 48FFC6                  	inc rsi
 14037 00009B2A 48FFC2                  	inc rdx
 14038 00009B2D EBEA                    	jmp .L_lambda_simple_env_loop_00f5
 14039                                  .L_lambda_simple_env_end_00f5:
 14040 00009B2F 5B                      	pop rbx
 14041 00009B30 BE00000000              	mov rsi, 0
 14042                                  .L_lambda_simple_params_loop_00f5:	; copy params
 14043 00009B35 4883FE00                	cmp rsi, 0
 14044 00009B39 740E                    	je .L_lambda_simple_params_end_00f5
 14045 00009B3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14046 00009B40 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14047 00009B44 48FFC6                  	inc rsi
 14048 00009B47 EBEC                    	jmp .L_lambda_simple_params_loop_00f5
 14049                                  .L_lambda_simple_params_end_00f5:
 14050 00009B49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14051 00009B4C 4889C3                  	mov rbx, rax
 14052 00009B4F 58                      	pop rax
 14053 00009B50 C60005                  	mov byte [rax], T_closure
 14054 00009B53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14055 00009B57 48C74009[649B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f5
 14056 00009B5F E9B1050000              	jmp .L_lambda_simple_end_00f5
 14057                                  .L_lambda_simple_code_00f5:	; lambda-simple body
 14058 00009B64 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14059 00009B6A 740B                    	je .L_lambda_simple_arity_check_ok_00f5
 14060 00009B6C FF742410                	push qword [rsp + 8 * 2]
 14061 00009B70 6A01                    	push 1
 14062 00009B72 E95C730000              	jmp L_error_incorrect_arity_simple
 14063                                  .L_lambda_simple_arity_check_ok_00f5:
 14064 00009B77 C8000000                	enter 0, 0
 14065 00009B7B BF08000000              	mov rdi, 8
 14066 00009B80 E895730000              	call malloc
 14067 00009B85 488B5D20                	mov rbx, PARAM(0)
 14068 00009B89 488918                  	mov qword [rax], rbx
 14069 00009B8C 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 14070                                  
 14071 00009B90 48B8-                            	mov rax, sob_void
 14071 00009B92 [0000000000000000] 
 14072                                  
 14073 00009B9A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14074 00009B9F E876730000              	call malloc
 14075 00009BA4 50                      	push rax
 14076 00009BA5 BF08000000              	mov rdi, 8 * 1	; new rib
 14077 00009BAA E86B730000              	call malloc
 14078 00009BAF 50                      	push rax
 14079 00009BB0 BF10000000              	mov rdi, 8 * 2	; extended env
 14080 00009BB5 E860730000              	call malloc
 14081 00009BBA 488B7D10                	mov rdi, ENV
 14082 00009BBE BE00000000              	mov rsi, 0
 14083 00009BC3 BA01000000              	mov rdx, 1
 14084                                  .L_lambda_simple_env_loop_00f6:	; ext_env[i + 1] <-- env[i]
 14085 00009BC8 4883FE01                	cmp rsi, 1
 14086 00009BCC 7410                    	je .L_lambda_simple_env_end_00f6
 14087 00009BCE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14088 00009BD2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14089 00009BD6 48FFC6                  	inc rsi
 14090 00009BD9 48FFC2                  	inc rdx
 14091 00009BDC EBEA                    	jmp .L_lambda_simple_env_loop_00f6
 14092                                  .L_lambda_simple_env_end_00f6:
 14093 00009BDE 5B                      	pop rbx
 14094 00009BDF BE00000000              	mov rsi, 0
 14095                                  .L_lambda_simple_params_loop_00f6:	; copy params
 14096 00009BE4 4883FE01                	cmp rsi, 1
 14097 00009BE8 740E                    	je .L_lambda_simple_params_end_00f6
 14098 00009BEA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14099 00009BEF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14100 00009BF3 48FFC6                  	inc rsi
 14101 00009BF6 EBEC                    	jmp .L_lambda_simple_params_loop_00f6
 14102                                  .L_lambda_simple_params_end_00f6:
 14103 00009BF8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14104 00009BFB 4889C3                  	mov rbx, rax
 14105 00009BFE 58                      	pop rax
 14106 00009BFF C60005                  	mov byte [rax], T_closure
 14107 00009C02 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14108 00009C06 48C74009[139C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f6
 14109 00009C0E E906010000              	jmp .L_lambda_simple_end_00f6
 14110                                  .L_lambda_simple_code_00f6:	; lambda-simple body
 14111 00009C13 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14112 00009C19 740B                    	je .L_lambda_simple_arity_check_ok_00f6
 14113 00009C1B FF742410                	push qword [rsp + 8 * 2]
 14114 00009C1F 6A02                    	push 2
 14115 00009C21 E9AD720000              	jmp L_error_incorrect_arity_simple
 14116                                  .L_lambda_simple_arity_check_ok_00f6:
 14117 00009C26 C8000000                	enter 0, 0
 14118 00009C2A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14119 00009C2E 50                      	push rax
 14120 00009C2F 6A01                    	push 1
 14121 00009C31 488B0425[D8000000]      	mov rax, qword [free_var_27]
 14122 00009C39 803805                  	cmp byte [rax], T_closure 
 14123 00009C3C 0F858D820000                    jne L_code_ptr_error
 14124                                  
 14125 00009C42 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14126                                  
 14127 00009C46 53                              push rbx
 14128                                  
 14129 00009C47 FF5009                          call SOB_CLOSURE_CODE(rax)
 14130                                  
 14131                                          
 14132 00009C4A 483D[02000000]                  	cmp rax, sob_boolean_false
 14133                                  
 14134 00009C50 740F                            	je .L_if_else_0091
 14135 00009C52 48B8-                   	mov rax,L_constants + 1
 14135 00009C54 [0100000000000000] 
 14136                                  
 14137 00009C5C E9B4000000                      	jmp .L_if_end_0091
 14138                                  
 14139                                          	.L_if_else_0091:
 14140 00009C61 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 14141 00009C65 50                      	push rax
 14142 00009C66 48B8-                   	mov rax,L_constants + 128
 14142 00009C68 [8000000000000000] 
 14143 00009C70 50                      	push rax
 14144 00009C71 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14145 00009C75 50                      	push rax
 14146 00009C76 6A02                    	push 2
 14147 00009C78 488B0425[10030000]      	mov rax, qword [free_var_98]
 14148 00009C80 803805                  	cmp byte [rax], T_closure 
 14149 00009C83 0F8546820000                    jne L_code_ptr_error
 14150                                  
 14151 00009C89 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14152                                  
 14153 00009C8D 53                              push rbx
 14154                                  
 14155 00009C8E FF5009                          call SOB_CLOSURE_CODE(rax)
 14156                                  
 14157 00009C91 50                              	push rax
 14158 00009C92 6A02                    	push 2
 14159 00009C94 488B4510                	mov rax, qword [rbp + 8 * 2]
 14160                                  
 14161 00009C98 488B00                                            	mov rax, qword[rax + 8 * 0]
 14162                                  
 14163 00009C9B 488B00                                            	mov rax, qword[rax + 8 * 0]
 14164 00009C9E 488B00                  	mov rax, qword [rax]
 14165 00009CA1 803805                  	cmp byte [rax], T_closure 
 14166 00009CA4 0F8525820000                    jne L_code_ptr_error
 14167                                  
 14168 00009CAA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14169                                  
 14170 00009CAE 53                              push rbx
 14171                                  
 14172 00009CAF FF5009                          call SOB_CLOSURE_CODE(rax)
 14173                                  
 14174 00009CB2 50                              	push rax
 14175 00009CB3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 14176 00009CB7 50                      	push rax
 14177                                  
 14178 00009CB8 6A02                    	push 2
 14179 00009CBA 488B0425[68000000]      	mov rax, qword [free_var_13]
 14180                                  	assert_closure(rax)
    42 00009CC2 803805              <1>  cmp byte [%1], %2
    43 00009CC5 0F85438A0000        <1>  jne L_error_incorrect_type
 14181 00009CCB 50                      	push rax 
 14182 00009CCC FF7508                  	push qword [rbp + 8]
 14183 00009CCF FF7500                  	push qword [rbp]
 14184 00009CD2 4883C308                	add rbx ,8*1
 14185                                  	 .L_fix_stack_label_012c:
 14186 00009CD6 488B5518                	mov rdx, qword[rbp+8*3]
 14187 00009CDA 4883C203                	add rdx, 3
 14188 00009CDE 48C1E203                	shl rdx, 3
 14189 00009CE2 4889EF                  	mov rdi, rbp
 14190 00009CE5 4801D7                  	add rdi, rdx
 14191 00009CE8 4C8B4500                	mov r8, qword[rbp]
 14192 00009CEC 4889E9                  	mov rcx, rbp
 14193 00009CEF 4883E908                	sub rcx, 8
 14194                                  	 .L_loop_fix_stuck_012c:
 14195 00009CF3 4839CC                  	cmp rsp, rcx
 14196 00009CF6 7710                    ja .L_loop_fix_stuck_end_012c
 14197 00009CF8 488B19                   	mov rbx, qword[rcx]
 14198 00009CFB 48891F                  	 mov qword[rdi], rbx
 14199 00009CFE 4883EF08                	sub rdi, 8
 14200 00009D02 4883E908                	sub rcx, 8
 14201 00009D06 EBEB                    jmp .L_loop_fix_stuck_012c
 14202                                  	 .L_loop_fix_stuck_end_012c:
 14203 00009D08 4883C708                	add rdi, 8
 14204 00009D0C 4889FC                  	 mov rsp, rdi
 14205 00009D0F 4C89C5                  	mov rbp, r8
 14206 00009D12 5D                      	pop rbp
 14207 00009D13 FFE0                    	jmp rax 
 14208                                  
 14209                                          	.L_if_end_0091:
 14210 00009D15 C9                      	leave
 14211 00009D16 C22000                  	ret 8 * (2 + 2)
 14212                                  .L_lambda_simple_end_00f6:	; new closure is in rax
 14213 00009D19 50                      	push rax
 14214 00009D1A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14215 00009D1E 8F00                    	pop qword [rax]
 14216 00009D20 48B8-                   	mov rax, sob_void
 14216 00009D22 [0000000000000000] 
 14217                                  
 14218 00009D2A BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 14219 00009D2F E8E6710000              	call malloc
 14220 00009D34 50                      	push rax
 14221 00009D35 BF08000000              	mov rdi, 8 * 1  ; new rib
 14222 00009D3A E8DB710000              	call malloc
 14223 00009D3F 50                      	push rax
 14224 00009D40 BF10000000              	mov rdi, 8 * 2	; extended env
 14225 00009D45 E8D0710000              	call malloc
 14226 00009D4A 488B7D10                	mov rdi, ENV
 14227 00009D4E BE00000000              	mov rsi, 0
 14228 00009D53 BA01000000              	mov rdx, 1
 14229                                  .L_lambda_opt_env_loop_0026:	; ext_env = env
 14230 00009D58 4883FE01                	cmp rsi, 1
 14231 00009D5C 7410                    	je .L_lambda_opt_env_end_0026
 14232 00009D5E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14233 00009D62 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14234 00009D66 48FFC6                  	inc rsi
 14235 00009D69 48FFC2                  	inc rdx
 14236 00009D6C EBEA                    	jmp .L_lambda_opt_env_loop_0026
 14237                                  .L_lambda_opt_env_end_0026:
 14238 00009D6E 5B                      	pop rbx
 14239 00009D6F BE00000000              	mov rsi, 0
 14240                                  .L_lambda_opt_params_loop_0026:	; copy params
 14241 00009D74 4883FE01                	cmp rsi, 1
 14242 00009D78 740E                    	je .L_lambda_opt_params_end_0026
 14243 00009D7A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14244 00009D7F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14245 00009D83 48FFC6                  	inc rsi
 14246 00009D86 EBEC                    	jmp .L_lambda_opt_params_loop_0026
 14247                                  .L_lambda_opt_params_end_0026:
 14248 00009D88 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 14249 00009D8B 4889C3                  	mov rbx, rax
 14250 00009D8E 58                      	pop rax
 14251 00009D8F C60005                  	mov byte [rax], T_closure
 14252 00009D92 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14253 00009D96 48C74009[A39D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0026
 14254 00009D9E E96E030000              	jmp .L_lambda_opt_end_0026
 14255                                  .L_lambda_opt_code_0026:	; lambda-opt body
 14256 00009DA3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14257 00009DA9 740D                    	je .L_lambda_opt_arity_check_exact_0026  ;same num_of_args
 14258 00009DAB 7F5B                    	jg .L_lambda_opt_arity_check_more_0026  ;greater num_of_args
 14259 00009DAD FF742410                	push qword [rsp + 8 * 2]
 14260 00009DB1 6A01                    	push 1
 14261 00009DB3 E92F710000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 14262                                  .L_lambda_opt_arity_check_exact_0026:
 14263 00009DB8 4883EC08                	sub rsp, 8 * 1
 14264 00009DBC 4889E7                  	mov rdi, rsp 
 14265                                  	;mov ret
 14266 00009DBF 488B4708                	mov rax, qword [rdi + (8 * 1)]
 14267 00009DC3 488907                  	mov qword [rdi], rax
 14268 00009DC6 4883C708                	add rdi, 8
 14269                                  	;mov env
 14270 00009DCA 488B4708                	mov rax, qword [rdi + (8 * 1)]
 14271 00009DCE 488907                  	mov qword [rdi], rax
 14272 00009DD1 4883C708                	add rdi, 8
 14273                                  	;mov & update COUNT
 14274 00009DD5 488B4708                	mov rax, qword [rdi +(8 * 1)]
 14275 00009DD9 4889C1                  	mov rcx, rax
 14276 00009DDC 48FFC0                  	inc rax
 14277 00009DDF 488907                  	mov qword [rdi], rax
 14278 00009DE2 4883C708                	add rdi, 8
 14279                                  	;LOOP:move params
 14280                                  .L_lambda_opt_stack_shrink_loop_0070:	
 14281 00009DE6 4883F900                	cmp rcx, 0
 14282 00009DEA 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0070
 14283 00009DEC 488B4708                	mov rax, qword [rdi + 8]
 14284 00009DF0 488907                  	mov qword [rdi], rax
 14285 00009DF3 4883C708                	add rdi, 8
 14286 00009DF7 48FFC9                  	dec rcx
 14287 00009DFA EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0070
 14288                                  .L_lambda_opt_stack_shrink_loop_exit_0070:	
 14289 00009DFC 48C707[01000000]        	mov qword [rdi], sob_nil
 14290 00009E03 E995000000              	jmp .L_lambda_opt_stack_adjusted_0026
 14291                                  .L_lambda_opt_arity_check_more_0026:	
 14292 00009E08 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 14293 00009E0D 488D4EFF                	lea rcx, [rsi - 1]
 14294 00009E11 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 14295 00009E16 4989F2                  	mov r10, rsi
 14296 00009E19 49B9-                   	mov r9, sob_nil
 14296 00009E1B [0100000000000000] 
 14297                                  .L_lambda_opt_stack_shrink_loop_0071:	
 14298 00009E23 4883F900                	cmp rcx, 0
 14299 00009E27 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0071
 14300 00009E29 BF11000000              	mov rdi, 1 + 8 + 8
 14301 00009E2E E8E7700000              	call malloc
 14302 00009E33 C60021                  	mov byte [rax], T_pair
 14303 00009E36 488B1E                  	mov rbx, qword [rsi]
 14304 00009E39 48895801                	mov SOB_PAIR_CAR(rax), rbx
 14305 00009E3D 4C894809                	mov SOB_PAIR_CDR(rax), r9
 14306 00009E41 4989C1                  	mov r9, rax
 14307 00009E44 4883EE08                	sub rsi, 8 * 1
 14308 00009E48 48FFC9                  	dec rcx
 14309 00009E4B EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0071
 14310                                  .L_lambda_opt_stack_shrink_loop_exit_0071:	
 14311 00009E4D 4D890A                  	mov qword [r10], r9
 14312 00009E50 4983EA08                	sub r10, 8 * 1; the new dest!
 14313 00009E54 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
 14314 00009E59 B901000000              	mov rcx, 1 
 14315                                  .L_lambda_opt_stack_shrink_loop_0072:	
 14316 00009E5E 4883F900                	cmp rcx, 0
 14317 00009E62 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0072
 14318 00009E64 488B06                  	mov rax, qword [rsi]
 14319 00009E67 498902                  	mov qword [r10], rax
 14320 00009E6A 4983EA08                	sub r10, 8 * 1
 14321 00009E6E 4883EE08                	sub rsi, 8 * 1
 14322 00009E72 48FFC9                  	dec rcx
 14323 00009E75 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0072
 14324                                  .L_lambda_opt_stack_shrink_loop_exit_0072:	
 14325 00009E77 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
 14326 00009E7E 4983EA08                	sub r10, 8 * 1
 14327 00009E82 4883EE08                	sub rsi, 8 * 1
 14328 00009E86 488B06                  	mov rax, qword [rsi] ;env
 14329 00009E89 498902                  	mov qword [r10], rax
 14330 00009E8C 4983EA08                	sub r10, 8 * 1
 14331 00009E90 4883EE08                	sub rsi, 8 * 1
 14332 00009E94 488B06                  	mov rax, qword [rsi] ;ret
 14333 00009E97 498902                  	mov qword [r10], rax
 14334 00009E9A 4C89D4                  	mov rsp, r10
 14335                                  .L_lambda_opt_stack_adjusted_0026:	
 14336 00009E9D C8000000                	enter 0, 0
 14337 00009EA1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 14338 00009EA5 50                      	push rax
 14339 00009EA6 6A01                    	push 1
 14340 00009EA8 488B0425[00000000]      	mov rax, qword [free_var_0]
 14341 00009EB0 803805                  	cmp byte [rax], T_closure 
 14342 00009EB3 0F8516800000                    jne L_code_ptr_error
 14343                                  
 14344 00009EB9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14345                                  
 14346 00009EBD 53                              push rbx
 14347                                  
 14348 00009EBE FF5009                          call SOB_CLOSURE_CODE(rax)
 14349                                  
 14350                                          
 14351 00009EC1 483D[02000000]                  	cmp rax, sob_boolean_false
 14352                                  
 14353 00009EC7 7477                            	je .L_if_else_0092
 14354 00009EC9 48B8-                   	 	mov rax,L_constants + 4
 14354 00009ECB [0400000000000000] 
 14355 00009ED3 50                      	push rax
 14356 00009ED4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14357 00009ED8 50                      	push rax
 14358                                  
 14359 00009ED9 6A02                    	push 2
 14360 00009EDB 488B4510                	mov rax, qword [rbp + 8 * 2]
 14361                                  
 14362 00009EDF 488B00                                            	mov rax, qword[rax + 8 * 0]
 14363                                  
 14364 00009EE2 488B00                                            	mov rax, qword[rax + 8 * 0]
 14365 00009EE5 488B00                  	mov rax, qword [rax]
 14366                                  	assert_closure(rax)
    42 00009EE8 803805              <1>  cmp byte [%1], %2
    43 00009EEB 0F851D880000        <1>  jne L_error_incorrect_type
 14367 00009EF1 50                      	push rax 
 14368 00009EF2 FF7508                  	push qword [rbp + 8]
 14369 00009EF5 FF7500                  	push qword [rbp]
 14370 00009EF8 4883C308                	add rbx ,8*1
 14371                                  	 .L_fix_stack_label_012f:
 14372 00009EFC 488B5518                	mov rdx, qword[rbp+8*3]
 14373 00009F00 4883C203                	add rdx, 3
 14374 00009F04 48C1E203                	shl rdx, 3
 14375 00009F08 4889EF                  	mov rdi, rbp
 14376 00009F0B 4801D7                  	add rdi, rdx
 14377 00009F0E 4C8B4500                	mov r8, qword[rbp]
 14378 00009F12 4889E9                  	mov rcx, rbp
 14379 00009F15 4883E908                	sub rcx, 8
 14380                                  	 .L_loop_fix_stuck_012f:
 14381 00009F19 4839CC                  	cmp rsp, rcx
 14382 00009F1C 7710                    ja .L_loop_fix_stuck_end_012f
 14383 00009F1E 488B19                   	mov rbx, qword[rcx]
 14384 00009F21 48891F                  	 mov qword[rdi], rbx
 14385 00009F24 4883EF08                	sub rdi, 8
 14386 00009F28 4883E908                	sub rcx, 8
 14387 00009F2C EBEB                    jmp .L_loop_fix_stuck_012f
 14388                                  	 .L_loop_fix_stuck_end_012f:
 14389 00009F2E 4883C708                	add rdi, 8
 14390 00009F32 4889FC                  	 mov rsp, rdi
 14391 00009F35 4C89C5                  	mov rbp, r8
 14392 00009F38 5D                      	pop rbp
 14393 00009F39 FFE0                    	jmp rax 
 14394                                  
 14395 00009F3B E9CD010000                      	jmp .L_if_end_0092
 14396                                  
 14397                                          	.L_if_else_0092:
 14398 00009F40 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 14399 00009F44 50                      	push rax
 14400 00009F45 6A01                    	push 1
 14401 00009F47 488B0425[08000000]      	mov rax, qword [free_var_1]
 14402 00009F4F 803805                  	cmp byte [rax], T_closure 
 14403 00009F52 0F85777F0000                    jne L_code_ptr_error
 14404                                  
 14405 00009F58 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14406                                  
 14407 00009F5C 53                              push rbx
 14408                                  
 14409 00009F5D FF5009                          call SOB_CLOSURE_CODE(rax)
 14410                                  
 14411                                          
 14412 00009F60 483D[02000000]                  	cmp rax, sob_boolean_false
 14413                                  
 14414 00009F66 0F848E000000                    	je .L_if_else_0094
 14415 00009F6C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 14416 00009F70 50                      	push rax
 14417 00009F71 6A01                    	push 1
 14418 00009F73 488B0425[88000000]      	mov rax, qword [free_var_17]
 14419 00009F7B 803805                  	cmp byte [rax], T_closure 
 14420 00009F7E 0F854B7F0000                    jne L_code_ptr_error
 14421                                  
 14422 00009F84 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14423                                  
 14424 00009F88 53                              push rbx
 14425                                  
 14426 00009F89 FF5009                          call SOB_CLOSURE_CODE(rax)
 14427                                  
 14428 00009F8C 50                              	push rax
 14429 00009F8D 6A01                    	push 1
 14430 00009F8F 488B0425[00000000]      	mov rax, qword [free_var_0]
 14431 00009F97 803805                  	cmp byte [rax], T_closure 
 14432 00009F9A 0F852F7F0000                    jne L_code_ptr_error
 14433                                  
 14434 00009FA0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14435                                  
 14436 00009FA4 53                              push rbx
 14437                                  
 14438 00009FA5 FF5009                          call SOB_CLOSURE_CODE(rax)
 14439                                  
 14440                                          
 14441 00009FA8 483D[02000000]                  	cmp rax, sob_boolean_false
 14442                                  
 14443 00009FAE 743E                            	je .L_if_else_0095
 14444 00009FB0 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 14445 00009FB4 50                      	push rax
 14446 00009FB5 6A01                    	push 1
 14447 00009FB7 488B0425[80000000]      	mov rax, qword [free_var_16]
 14448 00009FBF 803805                  	cmp byte [rax], T_closure 
 14449 00009FC2 0F85077F0000                    jne L_code_ptr_error
 14450                                  
 14451 00009FC8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14452                                  
 14453 00009FCC 53                              push rbx
 14454                                  
 14455 00009FCD FF5009                          call SOB_CLOSURE_CODE(rax)
 14456                                  
 14457 00009FD0 50                              	push rax
 14458 00009FD1 6A01                    	push 1
 14459 00009FD3 488B0425[18000000]      	mov rax, qword [free_var_3]
 14460 00009FDB 803805                  	cmp byte [rax], T_closure 
 14461 00009FDE 0F85EB7E0000                    jne L_code_ptr_error
 14462                                  
 14463 00009FE4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14464                                  
 14465 00009FE8 53                              push rbx
 14466                                  
 14467 00009FE9 FF5009                          call SOB_CLOSURE_CODE(rax)
 14468                                  
 14469                                          
 14470 00009FEC EB0A                            	jmp .L_if_end_0095
 14471                                  
 14472                                          	.L_if_else_0095:
 14473 00009FEE 48B8-                   	mov rax,L_constants + 2
 14473 00009FF0 [0200000000000000] 
 14474                                  
 14475                                          	.L_if_end_0095:
 14476                                  
 14477 00009FF8 EB0A                            	jmp .L_if_end_0094
 14478                                  
 14479                                          	.L_if_else_0094:
 14480 00009FFA 48B8-                   	mov rax,L_constants + 2
 14480 00009FFC [0200000000000000] 
 14481                                  
 14482                                          	.L_if_end_0094:
 14483                                  
 14484 0000A004 483D[02000000]                  	cmp rax, sob_boolean_false
 14485                                  
 14486 0000A00A 0F848A000000                    	je .L_if_else_0093
 14487 0000A010 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 14488 0000A014 50                      	push rax
 14489 0000A015 6A01                    	push 1
 14490 0000A017 488B0425[80000000]      	mov rax, qword [free_var_16]
 14491 0000A01F 803805                  	cmp byte [rax], T_closure 
 14492 0000A022 0F85A77E0000                    jne L_code_ptr_error
 14493                                  
 14494 0000A028 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14495                                  
 14496 0000A02C 53                              push rbx
 14497                                  
 14498 0000A02D FF5009                          call SOB_CLOSURE_CODE(rax)
 14499                                  
 14500 0000A030 50                              	push rax
 14501 0000A031 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14502 0000A035 50                      	push rax
 14503                                  
 14504 0000A036 6A02                    	push 2
 14505 0000A038 488B4510                	mov rax, qword [rbp + 8 * 2]
 14506                                  
 14507 0000A03C 488B00                                            	mov rax, qword[rax + 8 * 0]
 14508                                  
 14509 0000A03F 488B00                                            	mov rax, qword[rax + 8 * 0]
 14510 0000A042 488B00                  	mov rax, qword [rax]
 14511                                  	assert_closure(rax)
    42 0000A045 803805              <1>  cmp byte [%1], %2
    43 0000A048 0F85C0860000        <1>  jne L_error_incorrect_type
 14512 0000A04E 50                      	push rax 
 14513 0000A04F FF7508                  	push qword [rbp + 8]
 14514 0000A052 FF7500                  	push qword [rbp]
 14515 0000A055 4883C308                	add rbx ,8*1
 14516                                  	 .L_fix_stack_label_012e:
 14517 0000A059 488B5518                	mov rdx, qword[rbp+8*3]
 14518 0000A05D 4883C203                	add rdx, 3
 14519 0000A061 48C1E203                	shl rdx, 3
 14520 0000A065 4889EF                  	mov rdi, rbp
 14521 0000A068 4801D7                  	add rdi, rdx
 14522 0000A06B 4C8B4500                	mov r8, qword[rbp]
 14523 0000A06F 4889E9                  	mov rcx, rbp
 14524 0000A072 4883E908                	sub rcx, 8
 14525                                  	 .L_loop_fix_stuck_012e:
 14526 0000A076 4839CC                  	cmp rsp, rcx
 14527 0000A079 7710                    ja .L_loop_fix_stuck_end_012e
 14528 0000A07B 488B19                   	mov rbx, qword[rcx]
 14529 0000A07E 48891F                  	 mov qword[rdi], rbx
 14530 0000A081 4883EF08                	sub rdi, 8
 14531 0000A085 4883E908                	sub rcx, 8
 14532 0000A089 EBEB                    jmp .L_loop_fix_stuck_012e
 14533                                  	 .L_loop_fix_stuck_end_012e:
 14534 0000A08B 4883C708                	add rdi, 8
 14535 0000A08F 4889FC                  	 mov rsp, rdi
 14536 0000A092 4C89C5                  	mov rbp, r8
 14537 0000A095 5D                      	pop rbp
 14538 0000A096 FFE0                    	jmp rax 
 14539                                  
 14540 0000A098 EB73                            	jmp .L_if_end_0093
 14541                                  
 14542                                          	.L_if_else_0093:
 14543 0000A09A 48B8-                   	 	mov rax,L_constants + 288
 14543 0000A09C [2001000000000000] 
 14544 0000A0A4 50                      	push rax
 14545 0000A0A5 48B8-                   	mov rax,L_constants + 279
 14545 0000A0A7 [1701000000000000] 
 14546 0000A0AF 50                      	push rax
 14547                                  
 14548 0000A0B0 6A02                    	push 2
 14549 0000A0B2 488B0425[30010000]      	mov rax, qword [free_var_38]
 14550                                  	assert_closure(rax)
    42 0000A0BA 803805              <1>  cmp byte [%1], %2
    43 0000A0BD 0F854B860000        <1>  jne L_error_incorrect_type
 14551 0000A0C3 50                      	push rax 
 14552 0000A0C4 FF7508                  	push qword [rbp + 8]
 14553 0000A0C7 FF7500                  	push qword [rbp]
 14554 0000A0CA 4883C308                	add rbx ,8*1
 14555                                  	 .L_fix_stack_label_012d:
 14556 0000A0CE 488B5518                	mov rdx, qword[rbp+8*3]
 14557 0000A0D2 4883C203                	add rdx, 3
 14558 0000A0D6 48C1E203                	shl rdx, 3
 14559 0000A0DA 4889EF                  	mov rdi, rbp
 14560 0000A0DD 4801D7                  	add rdi, rdx
 14561 0000A0E0 4C8B4500                	mov r8, qword[rbp]
 14562 0000A0E4 4889E9                  	mov rcx, rbp
 14563 0000A0E7 4883E908                	sub rcx, 8
 14564                                  	 .L_loop_fix_stuck_012d:
 14565 0000A0EB 4839CC                  	cmp rsp, rcx
 14566 0000A0EE 7710                    ja .L_loop_fix_stuck_end_012d
 14567 0000A0F0 488B19                   	mov rbx, qword[rcx]
 14568 0000A0F3 48891F                  	 mov qword[rdi], rbx
 14569 0000A0F6 4883EF08                	sub rdi, 8
 14570 0000A0FA 4883E908                	sub rcx, 8
 14571 0000A0FE EBEB                    jmp .L_loop_fix_stuck_012d
 14572                                  	 .L_loop_fix_stuck_end_012d:
 14573 0000A100 4883C708                	add rdi, 8
 14574 0000A104 4889FC                  	 mov rsp, rdi
 14575 0000A107 4C89C5                  	mov rbp, r8
 14576 0000A10A 5D                      	pop rbp
 14577 0000A10B FFE0                    	jmp rax 
 14578                                  
 14579                                          	.L_if_end_0093:
 14580                                  
 14581                                          	.L_if_end_0092:
 14582 0000A10D C9                      	leave
 14583 0000A10E C22000                  	ret 8 * (2 + 2)
 14584                                  .L_lambda_opt_end_0026:	; new closure is in rax
 14585 0000A111 C9                      	leave
 14586 0000A112 C21800                  	ret 8 * (2 + 1)
 14587                                  .L_lambda_simple_end_00f5:	; new closure is in rax
 14588 0000A115 803805                  	cmp byte [rax], T_closure 
 14589 0000A118 0F85B17D0000                    jne L_code_ptr_error
 14590                                  
 14591 0000A11E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14592                                  
 14593 0000A122 53                              push rbx
 14594                                  
 14595 0000A123 FF5009                          call SOB_CLOSURE_CODE(rax)
 14596                                  
 14597 0000A126 48890425[58030000]              	mov qword [free_var_107], rax
 14598 0000A12E 48B8-                   	mov rax, sob_void
 14598 0000A130 [0000000000000000] 
 14599                                  
 14600 0000A138 4889C7                  	mov rdi, rax
 14601 0000A13B E8EB6D0000              	call print_sexpr_if_not_void
 14602                                  
 14603 0000A140 48B8-                   	mov rax,L_constants + 0
 14603 0000A142 [0000000000000000] 
 14604 0000A14A 48890425[60030000]      	mov qword [free_var_108], rax
 14605 0000A152 48B8-                   	mov rax, sob_void
 14605 0000A154 [0000000000000000] 
 14606                                  
 14607 0000A15C 4889C7                  	mov rdi, rax
 14608 0000A15F E8C76D0000              	call print_sexpr_if_not_void
 14609                                  
 14610 0000A164 48B8-                   	mov rax,L_constants + 0
 14610 0000A166 [0000000000000000] 
 14611 0000A16E 48890425[68030000]      	mov qword [free_var_109], rax
 14612 0000A176 48B8-                   	mov rax, sob_void
 14612 0000A178 [0000000000000000] 
 14613                                  
 14614 0000A180 4889C7                  	mov rdi, rax
 14615 0000A183 E8A36D0000              	call print_sexpr_if_not_void
 14616                                  
 14617 0000A188 48B8-                   	mov rax,L_constants + 0
 14617 0000A18A [0000000000000000] 
 14618 0000A192 48890425[70030000]      	mov qword [free_var_110], rax
 14619 0000A19A 48B8-                   	mov rax, sob_void
 14619 0000A19C [0000000000000000] 
 14620                                  
 14621 0000A1A4 4889C7                  	mov rdi, rax
 14622 0000A1A7 E87F6D0000              	call print_sexpr_if_not_void
 14623                                  
 14624 0000A1AC 48B8-                   	mov rax,L_constants + 0
 14624 0000A1AE [0000000000000000] 
 14625 0000A1B6 48890425[78030000]      	mov qword [free_var_111], rax
 14626 0000A1BE 48B8-                   	mov rax, sob_void
 14626 0000A1C0 [0000000000000000] 
 14627                                  
 14628 0000A1C8 4889C7                  	mov rdi, rax
 14629 0000A1CB E85B6D0000              	call print_sexpr_if_not_void
 14630                                  
 14631 0000A1D0 48B8-                   	mov rax,L_constants + 0
 14631 0000A1D2 [0000000000000000] 
 14632 0000A1DA 48890425[80030000]      	mov qword [free_var_112], rax
 14633 0000A1E2 48B8-                   	mov rax, sob_void
 14633 0000A1E4 [0000000000000000] 
 14634                                  
 14635 0000A1EC 4889C7                  	mov rdi, rax
 14636 0000A1EF E8376D0000              	call print_sexpr_if_not_void
 14637                                  
 14638 0000A1F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14639 0000A1F9 E81C6D0000              	call malloc
 14640 0000A1FE 50                      	push rax
 14641 0000A1FF BF00000000              	mov rdi, 8 * 0	; new rib
 14642 0000A204 E8116D0000              	call malloc
 14643 0000A209 50                      	push rax
 14644 0000A20A BF08000000              	mov rdi, 8 * 1	; extended env
 14645 0000A20F E8066D0000              	call malloc
 14646 0000A214 488B7D10                	mov rdi, ENV
 14647 0000A218 BE00000000              	mov rsi, 0
 14648 0000A21D BA01000000              	mov rdx, 1
 14649                                  .L_lambda_simple_env_loop_00f7:	; ext_env[i + 1] <-- env[i]
 14650 0000A222 4883FE00                	cmp rsi, 0
 14651 0000A226 7410                    	je .L_lambda_simple_env_end_00f7
 14652 0000A228 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14653 0000A22C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14654 0000A230 48FFC6                  	inc rsi
 14655 0000A233 48FFC2                  	inc rdx
 14656 0000A236 EBEA                    	jmp .L_lambda_simple_env_loop_00f7
 14657                                  .L_lambda_simple_env_end_00f7:
 14658 0000A238 5B                      	pop rbx
 14659 0000A239 BE00000000              	mov rsi, 0
 14660                                  .L_lambda_simple_params_loop_00f7:	; copy params
 14661 0000A23E 4883FE00                	cmp rsi, 0
 14662 0000A242 740E                    	je .L_lambda_simple_params_end_00f7
 14663 0000A244 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14664 0000A249 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14665 0000A24D 48FFC6                  	inc rsi
 14666 0000A250 EBEC                    	jmp .L_lambda_simple_params_loop_00f7
 14667                                  .L_lambda_simple_params_end_00f7:
 14668 0000A252 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14669 0000A255 4889C3                  	mov rbx, rax
 14670 0000A258 58                      	pop rax
 14671 0000A259 C60005                  	mov byte [rax], T_closure
 14672 0000A25C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14673 0000A260 48C74009[6DA20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f7
 14674 0000A268 E927020000              	jmp .L_lambda_simple_end_00f7
 14675                                  .L_lambda_simple_code_00f7:	; lambda-simple body
 14676 0000A26D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14677 0000A273 740B                    	je .L_lambda_simple_arity_check_ok_00f7
 14678 0000A275 FF742410                	push qword [rsp + 8 * 2]
 14679 0000A279 6A01                    	push 1
 14680 0000A27B E9536C0000              	jmp L_error_incorrect_arity_simple
 14681                                  .L_lambda_simple_arity_check_ok_00f7:
 14682 0000A280 C8000000                	enter 0, 0
 14683 0000A284 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 14684 0000A289 E88C6C0000              	call malloc
 14685 0000A28E 50                      	push rax
 14686 0000A28F BF08000000              	mov rdi, 8 * 1  ; new rib
 14687 0000A294 E8816C0000              	call malloc
 14688 0000A299 50                      	push rax
 14689 0000A29A BF10000000              	mov rdi, 8 * 2	; extended env
 14690 0000A29F E8766C0000              	call malloc
 14691 0000A2A4 488B7D10                	mov rdi, ENV
 14692 0000A2A8 BE00000000              	mov rsi, 0
 14693 0000A2AD BA01000000              	mov rdx, 1
 14694                                  .L_lambda_opt_env_loop_0027:	; ext_env = env
 14695 0000A2B2 4883FE01                	cmp rsi, 1
 14696 0000A2B6 7410                    	je .L_lambda_opt_env_end_0027
 14697 0000A2B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14698 0000A2BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14699 0000A2C0 48FFC6                  	inc rsi
 14700 0000A2C3 48FFC2                  	inc rdx
 14701 0000A2C6 EBEA                    	jmp .L_lambda_opt_env_loop_0027
 14702                                  .L_lambda_opt_env_end_0027:
 14703 0000A2C8 5B                      	pop rbx
 14704 0000A2C9 BE00000000              	mov rsi, 0
 14705                                  .L_lambda_opt_params_loop_0027:	; copy params
 14706 0000A2CE 4883FE01                	cmp rsi, 1
 14707 0000A2D2 740E                    	je .L_lambda_opt_params_end_0027
 14708 0000A2D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14709 0000A2D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14710 0000A2DD 48FFC6                  	inc rsi
 14711 0000A2E0 EBEC                    	jmp .L_lambda_opt_params_loop_0027
 14712                                  .L_lambda_opt_params_end_0027:
 14713 0000A2E2 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 14714 0000A2E5 4889C3                  	mov rbx, rax
 14715 0000A2E8 58                      	pop rax
 14716 0000A2E9 C60005                  	mov byte [rax], T_closure
 14717 0000A2EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14718 0000A2F0 48C74009[FDA20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0027
 14719 0000A2F8 E993010000              	jmp .L_lambda_opt_end_0027
 14720                                  .L_lambda_opt_code_0027:	; lambda-opt body
 14721 0000A2FD 48837C241000            	cmp qword [rsp + 8 * 2], 0
 14722 0000A303 740D                    	je .L_lambda_opt_arity_check_exact_0027  ;same num_of_args
 14723 0000A305 7F5B                    	jg .L_lambda_opt_arity_check_more_0027  ;greater num_of_args
 14724 0000A307 FF742410                	push qword [rsp + 8 * 2]
 14725 0000A30B 6A00                    	push 0
 14726 0000A30D E9D56B0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 14727                                  .L_lambda_opt_arity_check_exact_0027:
 14728 0000A312 4883EC08                	sub rsp, 8 * 1
 14729 0000A316 4889E7                  	mov rdi, rsp 
 14730                                  	;mov ret
 14731 0000A319 488B4708                	mov rax, qword [rdi + (8 * 1)]
 14732 0000A31D 488907                  	mov qword [rdi], rax
 14733 0000A320 4883C708                	add rdi, 8
 14734                                  	;mov env
 14735 0000A324 488B4708                	mov rax, qword [rdi + (8 * 1)]
 14736 0000A328 488907                  	mov qword [rdi], rax
 14737 0000A32B 4883C708                	add rdi, 8
 14738                                  	;mov & update COUNT
 14739 0000A32F 488B4708                	mov rax, qword [rdi +(8 * 1)]
 14740 0000A333 4889C1                  	mov rcx, rax
 14741 0000A336 48FFC0                  	inc rax
 14742 0000A339 488907                  	mov qword [rdi], rax
 14743 0000A33C 4883C708                	add rdi, 8
 14744                                  	;LOOP:move params
 14745                                  .L_lambda_opt_stack_shrink_loop_0073:	
 14746 0000A340 4883F900                	cmp rcx, 0
 14747 0000A344 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0073
 14748 0000A346 488B4708                	mov rax, qword [rdi + 8]
 14749 0000A34A 488907                  	mov qword [rdi], rax
 14750 0000A34D 4883C708                	add rdi, 8
 14751 0000A351 48FFC9                  	dec rcx
 14752 0000A354 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0073
 14753                                  .L_lambda_opt_stack_shrink_loop_exit_0073:	
 14754 0000A356 48C707[01000000]        	mov qword [rdi], sob_nil
 14755 0000A35D E994000000              	jmp .L_lambda_opt_stack_adjusted_0027
 14756                                  .L_lambda_opt_arity_check_more_0027:	
 14757 0000A362 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 14758 0000A367 488D0E                  	lea rcx, [rsi - 0]
 14759 0000A36A 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 14760 0000A36F 4989F2                  	mov r10, rsi
 14761 0000A372 49B9-                   	mov r9, sob_nil
 14761 0000A374 [0100000000000000] 
 14762                                  .L_lambda_opt_stack_shrink_loop_0074:	
 14763 0000A37C 4883F900                	cmp rcx, 0
 14764 0000A380 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0074
 14765 0000A382 BF11000000              	mov rdi, 1 + 8 + 8
 14766 0000A387 E88E6B0000              	call malloc
 14767 0000A38C C60021                  	mov byte [rax], T_pair
 14768 0000A38F 488B1E                  	mov rbx, qword [rsi]
 14769 0000A392 48895801                	mov SOB_PAIR_CAR(rax), rbx
 14770 0000A396 4C894809                	mov SOB_PAIR_CDR(rax), r9
 14771 0000A39A 4989C1                  	mov r9, rax
 14772 0000A39D 4883EE08                	sub rsi, 8 * 1
 14773 0000A3A1 48FFC9                  	dec rcx
 14774 0000A3A4 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0074
 14775                                  .L_lambda_opt_stack_shrink_loop_exit_0074:	
 14776 0000A3A6 4D890A                  	mov qword [r10], r9
 14777 0000A3A9 4983EA08                	sub r10, 8 * 1; the new dest!
 14778 0000A3AD 488D742410              	lea rsi, [rsp + (8 * (0 + 2))];the new src
 14779 0000A3B2 B900000000              	mov rcx, 0 
 14780                                  .L_lambda_opt_stack_shrink_loop_0075:	
 14781 0000A3B7 4883F900                	cmp rcx, 0
 14782 0000A3BB 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0075
 14783 0000A3BD 488B06                  	mov rax, qword [rsi]
 14784 0000A3C0 498902                  	mov qword [r10], rax
 14785 0000A3C3 4983EA08                	sub r10, 8 * 1
 14786 0000A3C7 4883EE08                	sub rsi, 8 * 1
 14787 0000A3CB 48FFC9                  	dec rcx
 14788 0000A3CE EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0075
 14789                                  .L_lambda_opt_stack_shrink_loop_exit_0075:	
 14790 0000A3D0 49C70201000000          	mov qword [r10], 1 + 0; 1=opt
 14791 0000A3D7 4983EA08                	sub r10, 8 * 1
 14792 0000A3DB 4883EE08                	sub rsi, 8 * 1
 14793 0000A3DF 488B06                  	mov rax, qword [rsi] ;env
 14794 0000A3E2 498902                  	mov qword [r10], rax
 14795 0000A3E5 4983EA08                	sub r10, 8 * 1
 14796 0000A3E9 4883EE08                	sub rsi, 8 * 1
 14797 0000A3ED 488B06                  	mov rax, qword [rsi] ;ret
 14798 0000A3F0 498902                  	mov qword [r10], rax
 14799 0000A3F3 4C89D4                  	mov rsp, r10
 14800                                  .L_lambda_opt_stack_adjusted_0027:	
 14801 0000A3F6 C8000000                	enter 0, 0
 14802 0000A3FA 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 14803 0000A3FE 50                      	push rax
 14804 0000A3FF 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14805 0000A407 50                      	push rax
 14806 0000A408 6A02                    	push 2
 14807 0000A40A 488B0425[D8020000]      	mov rax, qword [free_var_91]
 14808 0000A412 803805                  	cmp byte [rax], T_closure 
 14809 0000A415 0F85B47A0000                    jne L_code_ptr_error
 14810                                  
 14811 0000A41B 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14812                                  
 14813 0000A41F 53                              push rbx
 14814                                  
 14815 0000A420 FF5009                          call SOB_CLOSURE_CODE(rax)
 14816                                  
 14817 0000A423 50                              	push rax
 14818 0000A424 488B4510                	mov rax, qword [rbp + 8 * 2]
 14819                                  
 14820 0000A428 488B00                                            	mov rax, qword[rax + 8 * 0]
 14821                                  
 14822 0000A42B 488B00                                            	mov rax, qword[rax + 8 * 0]
 14823 0000A42E 50                      	push rax
 14824                                  
 14825 0000A42F 6A02                    	push 2
 14826 0000A431 488B0425[C8020000]      	mov rax, qword [free_var_89]
 14827                                  	assert_closure(rax)
    42 0000A439 803805              <1>  cmp byte [%1], %2
    43 0000A43C 0F85CC820000        <1>  jne L_error_incorrect_type
 14828 0000A442 50                      	push rax 
 14829 0000A443 FF7508                  	push qword [rbp + 8]
 14830 0000A446 FF7500                  	push qword [rbp]
 14831 0000A449 4883C308                	add rbx ,8*1
 14832                                  	 .L_fix_stack_label_0130:
 14833 0000A44D 488B5518                	mov rdx, qword[rbp+8*3]
 14834 0000A451 4883C203                	add rdx, 3
 14835 0000A455 48C1E203                	shl rdx, 3
 14836 0000A459 4889EF                  	mov rdi, rbp
 14837 0000A45C 4801D7                  	add rdi, rdx
 14838 0000A45F 4C8B4500                	mov r8, qword[rbp]
 14839 0000A463 4889E9                  	mov rcx, rbp
 14840 0000A466 4883E908                	sub rcx, 8
 14841                                  	 .L_loop_fix_stuck_0130:
 14842 0000A46A 4839CC                  	cmp rsp, rcx
 14843 0000A46D 7710                    ja .L_loop_fix_stuck_end_0130
 14844 0000A46F 488B19                   	mov rbx, qword[rcx]
 14845 0000A472 48891F                  	 mov qword[rdi], rbx
 14846 0000A475 4883EF08                	sub rdi, 8
 14847 0000A479 4883E908                	sub rcx, 8
 14848 0000A47D EBEB                    jmp .L_loop_fix_stuck_0130
 14849                                  	 .L_loop_fix_stuck_end_0130:
 14850 0000A47F 4883C708                	add rdi, 8
 14851 0000A483 4889FC                  	 mov rsp, rdi
 14852 0000A486 4C89C5                  	mov rbp, r8
 14853 0000A489 5D                      	pop rbp
 14854 0000A48A FFE0                    	jmp rax 
 14855 0000A48C C9                      	leave
 14856 0000A48D C21800                  	ret 8 * (2 + 1)
 14857                                  .L_lambda_opt_end_0027:	; new closure is in rax
 14858 0000A490 C9                      	leave
 14859 0000A491 C21800                  	ret 8 * (2 + 1)
 14860                                  .L_lambda_simple_end_00f7:	; new closure is in rax
 14861 0000A494 50                      	push rax
 14862 0000A495 6A01                    	push 1
 14863 0000A497 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14864 0000A49C E8796A0000              	call malloc
 14865 0000A4A1 50                      	push rax
 14866 0000A4A2 BF00000000              	mov rdi, 8 * 0	; new rib
 14867 0000A4A7 E86E6A0000              	call malloc
 14868 0000A4AC 50                      	push rax
 14869 0000A4AD BF08000000              	mov rdi, 8 * 1	; extended env
 14870 0000A4B2 E8636A0000              	call malloc
 14871 0000A4B7 488B7D10                	mov rdi, ENV
 14872 0000A4BB BE00000000              	mov rsi, 0
 14873 0000A4C0 BA01000000              	mov rdx, 1
 14874                                  .L_lambda_simple_env_loop_00f8:	; ext_env[i + 1] <-- env[i]
 14875 0000A4C5 4883FE00                	cmp rsi, 0
 14876 0000A4C9 7410                    	je .L_lambda_simple_env_end_00f8
 14877 0000A4CB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14878 0000A4CF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14879 0000A4D3 48FFC6                  	inc rsi
 14880 0000A4D6 48FFC2                  	inc rdx
 14881 0000A4D9 EBEA                    	jmp .L_lambda_simple_env_loop_00f8
 14882                                  .L_lambda_simple_env_end_00f8:
 14883 0000A4DB 5B                      	pop rbx
 14884 0000A4DC BE00000000              	mov rsi, 0
 14885                                  .L_lambda_simple_params_loop_00f8:	; copy params
 14886 0000A4E1 4883FE00                	cmp rsi, 0
 14887 0000A4E5 740E                    	je .L_lambda_simple_params_end_00f8
 14888 0000A4E7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14889 0000A4EC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14890 0000A4F0 48FFC6                  	inc rsi
 14891 0000A4F3 EBEC                    	jmp .L_lambda_simple_params_loop_00f8
 14892                                  .L_lambda_simple_params_end_00f8:
 14893 0000A4F5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14894 0000A4F8 4889C3                  	mov rbx, rax
 14895 0000A4FB 58                      	pop rax
 14896 0000A4FC C60005                  	mov byte [rax], T_closure
 14897 0000A4FF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14898 0000A503 48C74009[10A50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f8
 14899 0000A50B E915010000              	jmp .L_lambda_simple_end_00f8
 14900                                  .L_lambda_simple_code_00f8:	; lambda-simple body
 14901 0000A510 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14902 0000A516 740B                    	je .L_lambda_simple_arity_check_ok_00f8
 14903 0000A518 FF742410                	push qword [rsp + 8 * 2]
 14904 0000A51C 6A01                    	push 1
 14905 0000A51E E9B0690000              	jmp L_error_incorrect_arity_simple
 14906                                  .L_lambda_simple_arity_check_ok_00f8:
 14907 0000A523 C8000000                	enter 0, 0
 14908 0000A527 488B0425[30030000]      	mov rax, qword [free_var_102]
 14909 0000A52F 50                      	push rax
 14910 0000A530 6A01                    	push 1
 14911 0000A532 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14912 0000A536 803805                  	cmp byte [rax], T_closure 
 14913 0000A539 0F8590790000                    jne L_code_ptr_error
 14914                                  
 14915 0000A53F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14916                                  
 14917 0000A543 53                              push rbx
 14918                                  
 14919 0000A544 FF5009                          call SOB_CLOSURE_CODE(rax)
 14920                                  
 14921 0000A547 48890425[60030000]              	mov qword [free_var_108], rax
 14922                                  
 14923 0000A54F 48B8-                           	mov rax, sob_void
 14923 0000A551 [0000000000000000] 
 14924                                  
 14925 0000A559 488B0425[38030000]      	mov rax, qword [free_var_103]
 14926 0000A561 50                      	push rax
 14927 0000A562 6A01                    	push 1
 14928 0000A564 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14929 0000A568 803805                  	cmp byte [rax], T_closure 
 14930 0000A56B 0F855E790000                    jne L_code_ptr_error
 14931                                  
 14932 0000A571 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14933                                  
 14934 0000A575 53                              push rbx
 14935                                  
 14936 0000A576 FF5009                          call SOB_CLOSURE_CODE(rax)
 14937                                  
 14938 0000A579 48890425[68030000]              	mov qword [free_var_109], rax
 14939                                  
 14940 0000A581 48B8-                           	mov rax, sob_void
 14940 0000A583 [0000000000000000] 
 14941                                  
 14942 0000A58B 488B0425[50030000]      	mov rax, qword [free_var_106]
 14943 0000A593 50                      	push rax
 14944 0000A594 6A01                    	push 1
 14945 0000A596 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14946 0000A59A 803805                  	cmp byte [rax], T_closure 
 14947 0000A59D 0F852C790000                    jne L_code_ptr_error
 14948                                  
 14949 0000A5A3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14950                                  
 14951 0000A5A7 53                              push rbx
 14952                                  
 14953 0000A5A8 FF5009                          call SOB_CLOSURE_CODE(rax)
 14954                                  
 14955 0000A5AB 48890425[70030000]              	mov qword [free_var_110], rax
 14956                                  
 14957 0000A5B3 48B8-                           	mov rax, sob_void
 14957 0000A5B5 [0000000000000000] 
 14958                                  
 14959 0000A5BD 488B0425[40030000]      	mov rax, qword [free_var_104]
 14960 0000A5C5 50                      	push rax
 14961 0000A5C6 6A01                    	push 1
 14962 0000A5C8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14963 0000A5CC 803805                  	cmp byte [rax], T_closure 
 14964 0000A5CF 0F85FA780000                    jne L_code_ptr_error
 14965                                  
 14966 0000A5D5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14967                                  
 14968 0000A5D9 53                              push rbx
 14969                                  
 14970 0000A5DA FF5009                          call SOB_CLOSURE_CODE(rax)
 14971                                  
 14972 0000A5DD 48890425[78030000]              	mov qword [free_var_111], rax
 14973                                  
 14974 0000A5E5 48B8-                           	mov rax, sob_void
 14974 0000A5E7 [0000000000000000] 
 14975                                  
 14976 0000A5EF 488B0425[48030000]      	mov rax, qword [free_var_105]
 14977 0000A5F7 50                      	push rax
 14978 0000A5F8 6A01                    	push 1
 14979 0000A5FA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14980 0000A5FE 803805                  	cmp byte [rax], T_closure 
 14981 0000A601 0F85C8780000                    jne L_code_ptr_error
 14982                                  
 14983 0000A607 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14984                                  
 14985 0000A60B 53                              push rbx
 14986                                  
 14987 0000A60C FF5009                          call SOB_CLOSURE_CODE(rax)
 14988                                  
 14989 0000A60F 48890425[80030000]              	mov qword [free_var_112], rax
 14990                                  
 14991 0000A617 48B8-                           	mov rax, sob_void
 14991 0000A619 [0000000000000000] 
 14992 0000A621 C9                      	leave
 14993 0000A622 C21800                  	ret 8 * (2 + 1)
 14994                                  .L_lambda_simple_end_00f8:	; new closure is in rax
 14995 0000A625 803805                  	cmp byte [rax], T_closure 
 14996 0000A628 0F85A1780000                    jne L_code_ptr_error
 14997                                  
 14998 0000A62E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 14999                                  
 15000 0000A632 53                              push rbx
 15001                                  
 15002 0000A633 FF5009                          call SOB_CLOSURE_CODE(rax)
 15003                                  
 15004                                          
 15005 0000A636 4889C7                  	mov rdi, rax
 15006 0000A639 E8ED680000              	call print_sexpr_if_not_void
 15007                                  
 15008 0000A63E 48B8-                   	mov rax,L_constants + 0
 15008 0000A640 [0000000000000000] 
 15009 0000A648 48890425[88030000]      	mov qword [free_var_113], rax
 15010 0000A650 48B8-                   	mov rax, sob_void
 15010 0000A652 [0000000000000000] 
 15011                                  
 15012 0000A65A 4889C7                  	mov rdi, rax
 15013 0000A65D E8C9680000              	call print_sexpr_if_not_void
 15014                                  
 15015 0000A662 48B8-                   	mov rax,L_constants + 0
 15015 0000A664 [0000000000000000] 
 15016 0000A66C 48890425[90030000]      	mov qword [free_var_114], rax
 15017 0000A674 48B8-                   	mov rax, sob_void
 15017 0000A676 [0000000000000000] 
 15018                                  
 15019 0000A67E 4889C7                  	mov rdi, rax
 15020 0000A681 E8A5680000              	call print_sexpr_if_not_void
 15021                                  
 15022 0000A686 48B8-                   	mov rax,L_constants + 342
 15022 0000A688 [5601000000000000] 
 15023 0000A690 50                      	push rax
 15024 0000A691 6A01                    	push 1
 15025 0000A693 488B0425[C0000000]      	mov rax, qword [free_var_24]
 15026 0000A69B 803805                  	cmp byte [rax], T_closure 
 15027 0000A69E 0F852B780000                    jne L_code_ptr_error
 15028                                  
 15029 0000A6A4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15030                                  
 15031 0000A6A8 53                              push rbx
 15032                                  
 15033 0000A6A9 FF5009                          call SOB_CLOSURE_CODE(rax)
 15034                                  
 15035 0000A6AC 50                              	push rax
 15036 0000A6AD 48B8-                   	mov rax,L_constants + 346
 15036 0000A6AF [5A01000000000000] 
 15037 0000A6B7 50                      	push rax
 15038 0000A6B8 6A01                    	push 1
 15039 0000A6BA 488B0425[C0000000]      	mov rax, qword [free_var_24]
 15040 0000A6C2 803805                  	cmp byte [rax], T_closure 
 15041 0000A6C5 0F8504780000                    jne L_code_ptr_error
 15042                                  
 15043 0000A6CB 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15044                                  
 15045 0000A6CF 53                              push rbx
 15046                                  
 15047 0000A6D0 FF5009                          call SOB_CLOSURE_CODE(rax)
 15048                                  
 15049 0000A6D3 50                              	push rax
 15050 0000A6D4 6A02                    	push 2
 15051 0000A6D6 488B0425[10030000]      	mov rax, qword [free_var_98]
 15052 0000A6DE 803805                  	cmp byte [rax], T_closure 
 15053 0000A6E1 0F85E8770000                    jne L_code_ptr_error
 15054                                  
 15055 0000A6E7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15056                                  
 15057 0000A6EB 53                              push rbx
 15058                                  
 15059 0000A6EC FF5009                          call SOB_CLOSURE_CODE(rax)
 15060                                  
 15061 0000A6EF 50                              	push rax
 15062 0000A6F0 6A01                    	push 1
 15063 0000A6F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15064 0000A6F7 E81E680000              	call malloc
 15065 0000A6FC 50                      	push rax
 15066 0000A6FD BF00000000              	mov rdi, 8 * 0	; new rib
 15067 0000A702 E813680000              	call malloc
 15068 0000A707 50                      	push rax
 15069 0000A708 BF08000000              	mov rdi, 8 * 1	; extended env
 15070 0000A70D E808680000              	call malloc
 15071 0000A712 488B7D10                	mov rdi, ENV
 15072 0000A716 BE00000000              	mov rsi, 0
 15073 0000A71B BA01000000              	mov rdx, 1
 15074                                  .L_lambda_simple_env_loop_00f9:	; ext_env[i + 1] <-- env[i]
 15075 0000A720 4883FE00                	cmp rsi, 0
 15076 0000A724 7410                    	je .L_lambda_simple_env_end_00f9
 15077 0000A726 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15078 0000A72A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15079 0000A72E 48FFC6                  	inc rsi
 15080 0000A731 48FFC2                  	inc rdx
 15081 0000A734 EBEA                    	jmp .L_lambda_simple_env_loop_00f9
 15082                                  .L_lambda_simple_env_end_00f9:
 15083 0000A736 5B                      	pop rbx
 15084 0000A737 BE00000000              	mov rsi, 0
 15085                                  .L_lambda_simple_params_loop_00f9:	; copy params
 15086 0000A73C 4883FE00                	cmp rsi, 0
 15087 0000A740 740E                    	je .L_lambda_simple_params_end_00f9
 15088 0000A742 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15089 0000A747 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15090 0000A74B 48FFC6                  	inc rsi
 15091 0000A74E EBEC                    	jmp .L_lambda_simple_params_loop_00f9
 15092                                  .L_lambda_simple_params_end_00f9:
 15093 0000A750 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15094 0000A753 4889C3                  	mov rbx, rax
 15095 0000A756 58                      	pop rax
 15096 0000A757 C60005                  	mov byte [rax], T_closure
 15097 0000A75A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15098 0000A75E 48C74009[6BA70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f9
 15099 0000A766 E941030000              	jmp .L_lambda_simple_end_00f9
 15100                                  .L_lambda_simple_code_00f9:	; lambda-simple body
 15101 0000A76B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15102 0000A771 740B                    	je .L_lambda_simple_arity_check_ok_00f9
 15103 0000A773 FF742410                	push qword [rsp + 8 * 2]
 15104 0000A777 6A01                    	push 1
 15105 0000A779 E955670000              	jmp L_error_incorrect_arity_simple
 15106                                  .L_lambda_simple_arity_check_ok_00f9:
 15107 0000A77E C8000000                	enter 0, 0
 15108 0000A782 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15109 0000A787 E88E670000              	call malloc
 15110 0000A78C 50                      	push rax
 15111 0000A78D BF08000000              	mov rdi, 8 * 1	; new rib
 15112 0000A792 E883670000              	call malloc
 15113 0000A797 50                      	push rax
 15114 0000A798 BF10000000              	mov rdi, 8 * 2	; extended env
 15115 0000A79D E878670000              	call malloc
 15116 0000A7A2 488B7D10                	mov rdi, ENV
 15117 0000A7A6 BE00000000              	mov rsi, 0
 15118 0000A7AB BA01000000              	mov rdx, 1
 15119                                  .L_lambda_simple_env_loop_00fa:	; ext_env[i + 1] <-- env[i]
 15120 0000A7B0 4883FE01                	cmp rsi, 1
 15121 0000A7B4 7410                    	je .L_lambda_simple_env_end_00fa
 15122 0000A7B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15123 0000A7BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15124 0000A7BE 48FFC6                  	inc rsi
 15125 0000A7C1 48FFC2                  	inc rdx
 15126 0000A7C4 EBEA                    	jmp .L_lambda_simple_env_loop_00fa
 15127                                  .L_lambda_simple_env_end_00fa:
 15128 0000A7C6 5B                      	pop rbx
 15129 0000A7C7 BE00000000              	mov rsi, 0
 15130                                  .L_lambda_simple_params_loop_00fa:	; copy params
 15131 0000A7CC 4883FE01                	cmp rsi, 1
 15132 0000A7D0 740E                    	je .L_lambda_simple_params_end_00fa
 15133 0000A7D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15134 0000A7D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15135 0000A7DB 48FFC6                  	inc rsi
 15136 0000A7DE EBEC                    	jmp .L_lambda_simple_params_loop_00fa
 15137                                  .L_lambda_simple_params_end_00fa:
 15138 0000A7E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15139 0000A7E3 4889C3                  	mov rbx, rax
 15140 0000A7E6 58                      	pop rax
 15141 0000A7E7 C60005                  	mov byte [rax], T_closure
 15142 0000A7EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15143 0000A7EE 48C74009[FBA70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fa
 15144 0000A7F6 E908010000              	jmp .L_lambda_simple_end_00fa
 15145                                  .L_lambda_simple_code_00fa:	; lambda-simple body
 15146 0000A7FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15147 0000A801 740B                    	je .L_lambda_simple_arity_check_ok_00fa
 15148 0000A803 FF742410                	push qword [rsp + 8 * 2]
 15149 0000A807 6A01                    	push 1
 15150 0000A809 E9C5660000              	jmp L_error_incorrect_arity_simple
 15151                                  .L_lambda_simple_arity_check_ok_00fa:
 15152 0000A80E C8000000                	enter 0, 0
 15153 0000A812 48B8-                   	mov rax,L_constants + 344
 15153 0000A814 [5801000000000000] 
 15154 0000A81C 50                      	push rax
 15155 0000A81D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15156 0000A821 50                      	push rax
 15157 0000A822 48B8-                   	mov rax,L_constants + 342
 15157 0000A824 [5601000000000000] 
 15158 0000A82C 50                      	push rax
 15159 0000A82D 6A03                    	push 3
 15160 0000A82F 488B0425[68030000]      	mov rax, qword [free_var_109]
 15161 0000A837 803805                  	cmp byte [rax], T_closure 
 15162 0000A83A 0F858F760000                    jne L_code_ptr_error
 15163                                  
 15164 0000A840 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15165                                  
 15166 0000A844 53                              push rbx
 15167                                  
 15168 0000A845 FF5009                          call SOB_CLOSURE_CODE(rax)
 15169                                  
 15170                                          
 15171 0000A848 483D[02000000]                  	cmp rax, sob_boolean_false
 15172                                  
 15173 0000A84E 0F84A7000000                    	je .L_if_else_0096
 15174 0000A854 488B4510                	 	mov rax, qword [rbp + 8 * 2]
 15175                                  
 15176 0000A858 488B00                                            	mov rax, qword[rax + 8 * 0]
 15177                                  
 15178 0000A85B 488B00                                            	mov rax, qword[rax + 8 * 0]
 15179 0000A85E 50                      	push rax
 15180 0000A85F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15181 0000A863 50                      	push rax
 15182 0000A864 6A01                    	push 1
 15183 0000A866 488B0425[C0000000]      	mov rax, qword [free_var_24]
 15184 0000A86E 803805                  	cmp byte [rax], T_closure 
 15185 0000A871 0F8558760000                    jne L_code_ptr_error
 15186                                  
 15187 0000A877 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15188                                  
 15189 0000A87B 53                              push rbx
 15190                                  
 15191 0000A87C FF5009                          call SOB_CLOSURE_CODE(rax)
 15192                                  
 15193 0000A87F 50                              	push rax
 15194 0000A880 6A02                    	push 2
 15195 0000A882 488B0425[08030000]      	mov rax, qword [free_var_97]
 15196 0000A88A 803805                  	cmp byte [rax], T_closure 
 15197 0000A88D 0F853C760000                    jne L_code_ptr_error
 15198                                  
 15199 0000A893 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15200                                  
 15201 0000A897 53                              push rbx
 15202                                  
 15203 0000A898 FF5009                          call SOB_CLOSURE_CODE(rax)
 15204                                  
 15205 0000A89B 50                              	push rax
 15206                                  
 15207 0000A89C 6A01                    	push 1
 15208 0000A89E 488B0425[C8000000]      	mov rax, qword [free_var_25]
 15209                                  	assert_closure(rax)
    42 0000A8A6 803805              <1>  cmp byte [%1], %2
    43 0000A8A9 0F855F7E0000        <1>  jne L_error_incorrect_type
 15210 0000A8AF 50                      	push rax 
 15211 0000A8B0 FF7508                  	push qword [rbp + 8]
 15212 0000A8B3 FF7500                  	push qword [rbp]
 15213 0000A8B6 4883C308                	add rbx ,8*1
 15214                                  	 .L_fix_stack_label_0131:
 15215 0000A8BA 488B5518                	mov rdx, qword[rbp+8*3]
 15216 0000A8BE 4883C203                	add rdx, 3
 15217 0000A8C2 48C1E203                	shl rdx, 3
 15218 0000A8C6 4889EF                  	mov rdi, rbp
 15219 0000A8C9 4801D7                  	add rdi, rdx
 15220 0000A8CC 4C8B4500                	mov r8, qword[rbp]
 15221 0000A8D0 4889E9                  	mov rcx, rbp
 15222 0000A8D3 4883E908                	sub rcx, 8
 15223                                  	 .L_loop_fix_stuck_0131:
 15224 0000A8D7 4839CC                  	cmp rsp, rcx
 15225 0000A8DA 7710                    ja .L_loop_fix_stuck_end_0131
 15226 0000A8DC 488B19                   	mov rbx, qword[rcx]
 15227 0000A8DF 48891F                  	 mov qword[rdi], rbx
 15228 0000A8E2 4883EF08                	sub rdi, 8
 15229 0000A8E6 4883E908                	sub rcx, 8
 15230 0000A8EA EBEB                    jmp .L_loop_fix_stuck_0131
 15231                                  	 .L_loop_fix_stuck_end_0131:
 15232 0000A8EC 4883C708                	add rdi, 8
 15233 0000A8F0 4889FC                  	 mov rsp, rdi
 15234 0000A8F3 4C89C5                  	mov rbp, r8
 15235 0000A8F6 5D                      	pop rbp
 15236 0000A8F7 FFE0                    	jmp rax 
 15237                                  
 15238 0000A8F9 EB04                            	jmp .L_if_end_0096
 15239                                  
 15240                                          	.L_if_else_0096:
 15241 0000A8FB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15242                                  
 15243                                          	.L_if_end_0096:
 15244 0000A8FF C9                      	leave
 15245 0000A900 C21800                  	ret 8 * (2 + 1)
 15246                                  .L_lambda_simple_end_00fa:	; new closure is in rax
 15247 0000A903 48890425[88030000]      	mov qword [free_var_113], rax
 15248                                  
 15249 0000A90B 48B8-                           	mov rax, sob_void
 15249 0000A90D [0000000000000000] 
 15250                                  
 15251 0000A915 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15252 0000A91A E8FB650000              	call malloc
 15253 0000A91F 50                      	push rax
 15254 0000A920 BF08000000              	mov rdi, 8 * 1	; new rib
 15255 0000A925 E8F0650000              	call malloc
 15256 0000A92A 50                      	push rax
 15257 0000A92B BF10000000              	mov rdi, 8 * 2	; extended env
 15258 0000A930 E8E5650000              	call malloc
 15259 0000A935 488B7D10                	mov rdi, ENV
 15260 0000A939 BE00000000              	mov rsi, 0
 15261 0000A93E BA01000000              	mov rdx, 1
 15262                                  .L_lambda_simple_env_loop_00fb:	; ext_env[i + 1] <-- env[i]
 15263 0000A943 4883FE01                	cmp rsi, 1
 15264 0000A947 7410                    	je .L_lambda_simple_env_end_00fb
 15265 0000A949 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15266 0000A94D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15267 0000A951 48FFC6                  	inc rsi
 15268 0000A954 48FFC2                  	inc rdx
 15269 0000A957 EBEA                    	jmp .L_lambda_simple_env_loop_00fb
 15270                                  .L_lambda_simple_env_end_00fb:
 15271 0000A959 5B                      	pop rbx
 15272 0000A95A BE00000000              	mov rsi, 0
 15273                                  .L_lambda_simple_params_loop_00fb:	; copy params
 15274 0000A95F 4883FE01                	cmp rsi, 1
 15275 0000A963 740E                    	je .L_lambda_simple_params_end_00fb
 15276 0000A965 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15277 0000A96A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15278 0000A96E 48FFC6                  	inc rsi
 15279 0000A971 EBEC                    	jmp .L_lambda_simple_params_loop_00fb
 15280                                  .L_lambda_simple_params_end_00fb:
 15281 0000A973 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15282 0000A976 4889C3                  	mov rbx, rax
 15283 0000A979 58                      	pop rax
 15284 0000A97A C60005                  	mov byte [rax], T_closure
 15285 0000A97D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15286 0000A981 48C74009[8EA90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fb
 15287 0000A989 E908010000              	jmp .L_lambda_simple_end_00fb
 15288                                  .L_lambda_simple_code_00fb:	; lambda-simple body
 15289 0000A98E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15290 0000A994 740B                    	je .L_lambda_simple_arity_check_ok_00fb
 15291 0000A996 FF742410                	push qword [rsp + 8 * 2]
 15292 0000A99A 6A01                    	push 1
 15293 0000A99C E932650000              	jmp L_error_incorrect_arity_simple
 15294                                  .L_lambda_simple_arity_check_ok_00fb:
 15295 0000A9A1 C8000000                	enter 0, 0
 15296 0000A9A5 48B8-                   	mov rax,L_constants + 348
 15296 0000A9A7 [5C01000000000000] 
 15297 0000A9AF 50                      	push rax
 15298 0000A9B0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15299 0000A9B4 50                      	push rax
 15300 0000A9B5 48B8-                   	mov rax,L_constants + 346
 15300 0000A9B7 [5A01000000000000] 
 15301 0000A9BF 50                      	push rax
 15302 0000A9C0 6A03                    	push 3
 15303 0000A9C2 488B0425[68030000]      	mov rax, qword [free_var_109]
 15304 0000A9CA 803805                  	cmp byte [rax], T_closure 
 15305 0000A9CD 0F85FC740000                    jne L_code_ptr_error
 15306                                  
 15307 0000A9D3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15308                                  
 15309 0000A9D7 53                              push rbx
 15310                                  
 15311 0000A9D8 FF5009                          call SOB_CLOSURE_CODE(rax)
 15312                                  
 15313                                          
 15314 0000A9DB 483D[02000000]                  	cmp rax, sob_boolean_false
 15315                                  
 15316 0000A9E1 0F84A7000000                    	je .L_if_else_0097
 15317 0000A9E7 488B4510                	 	mov rax, qword [rbp + 8 * 2]
 15318                                  
 15319 0000A9EB 488B00                                            	mov rax, qword[rax + 8 * 0]
 15320                                  
 15321 0000A9EE 488B00                                            	mov rax, qword[rax + 8 * 0]
 15322 0000A9F1 50                      	push rax
 15323 0000A9F2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15324 0000A9F6 50                      	push rax
 15325 0000A9F7 6A01                    	push 1
 15326 0000A9F9 488B0425[C0000000]      	mov rax, qword [free_var_24]
 15327 0000AA01 803805                  	cmp byte [rax], T_closure 
 15328 0000AA04 0F85C5740000                    jne L_code_ptr_error
 15329                                  
 15330 0000AA0A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15331                                  
 15332 0000AA0E 53                              push rbx
 15333                                  
 15334 0000AA0F FF5009                          call SOB_CLOSURE_CODE(rax)
 15335                                  
 15336 0000AA12 50                              	push rax
 15337 0000AA13 6A02                    	push 2
 15338 0000AA15 488B0425[10030000]      	mov rax, qword [free_var_98]
 15339 0000AA1D 803805                  	cmp byte [rax], T_closure 
 15340 0000AA20 0F85A9740000                    jne L_code_ptr_error
 15341                                  
 15342 0000AA26 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15343                                  
 15344 0000AA2A 53                              push rbx
 15345                                  
 15346 0000AA2B FF5009                          call SOB_CLOSURE_CODE(rax)
 15347                                  
 15348 0000AA2E 50                              	push rax
 15349                                  
 15350 0000AA2F 6A01                    	push 1
 15351 0000AA31 488B0425[C8000000]      	mov rax, qword [free_var_25]
 15352                                  	assert_closure(rax)
    42 0000AA39 803805              <1>  cmp byte [%1], %2
    43 0000AA3C 0F85CC7C0000        <1>  jne L_error_incorrect_type
 15353 0000AA42 50                      	push rax 
 15354 0000AA43 FF7508                  	push qword [rbp + 8]
 15355 0000AA46 FF7500                  	push qword [rbp]
 15356 0000AA49 4883C308                	add rbx ,8*1
 15357                                  	 .L_fix_stack_label_0132:
 15358 0000AA4D 488B5518                	mov rdx, qword[rbp+8*3]
 15359 0000AA51 4883C203                	add rdx, 3
 15360 0000AA55 48C1E203                	shl rdx, 3
 15361 0000AA59 4889EF                  	mov rdi, rbp
 15362 0000AA5C 4801D7                  	add rdi, rdx
 15363 0000AA5F 4C8B4500                	mov r8, qword[rbp]
 15364 0000AA63 4889E9                  	mov rcx, rbp
 15365 0000AA66 4883E908                	sub rcx, 8
 15366                                  	 .L_loop_fix_stuck_0132:
 15367 0000AA6A 4839CC                  	cmp rsp, rcx
 15368 0000AA6D 7710                    ja .L_loop_fix_stuck_end_0132
 15369 0000AA6F 488B19                   	mov rbx, qword[rcx]
 15370 0000AA72 48891F                  	 mov qword[rdi], rbx
 15371 0000AA75 4883EF08                	sub rdi, 8
 15372 0000AA79 4883E908                	sub rcx, 8
 15373 0000AA7D EBEB                    jmp .L_loop_fix_stuck_0132
 15374                                  	 .L_loop_fix_stuck_end_0132:
 15375 0000AA7F 4883C708                	add rdi, 8
 15376 0000AA83 4889FC                  	 mov rsp, rdi
 15377 0000AA86 4C89C5                  	mov rbp, r8
 15378 0000AA89 5D                      	pop rbp
 15379 0000AA8A FFE0                    	jmp rax 
 15380                                  
 15381 0000AA8C EB04                            	jmp .L_if_end_0097
 15382                                  
 15383                                          	.L_if_else_0097:
 15384 0000AA8E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15385                                  
 15386                                          	.L_if_end_0097:
 15387 0000AA92 C9                      	leave
 15388 0000AA93 C21800                  	ret 8 * (2 + 1)
 15389                                  .L_lambda_simple_end_00fb:	; new closure is in rax
 15390 0000AA96 48890425[90030000]      	mov qword [free_var_114], rax
 15391                                  
 15392 0000AA9E 48B8-                           	mov rax, sob_void
 15392 0000AAA0 [0000000000000000] 
 15393 0000AAA8 C9                      	leave
 15394 0000AAA9 C21800                  	ret 8 * (2 + 1)
 15395                                  .L_lambda_simple_end_00f9:	; new closure is in rax
 15396 0000AAAC 803805                  	cmp byte [rax], T_closure 
 15397 0000AAAF 0F851A740000                    jne L_code_ptr_error
 15398                                  
 15399 0000AAB5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15400                                  
 15401 0000AAB9 53                              push rbx
 15402                                  
 15403 0000AABA FF5009                          call SOB_CLOSURE_CODE(rax)
 15404                                  
 15405                                          
 15406 0000AABD 4889C7                  	mov rdi, rax
 15407 0000AAC0 E866640000              	call print_sexpr_if_not_void
 15408                                  
 15409 0000AAC5 48B8-                   	mov rax,L_constants + 0
 15409 0000AAC7 [0000000000000000] 
 15410 0000AACF 48890425[98030000]      	mov qword [free_var_115], rax
 15411 0000AAD7 48B8-                   	mov rax, sob_void
 15411 0000AAD9 [0000000000000000] 
 15412                                  
 15413 0000AAE1 4889C7                  	mov rdi, rax
 15414 0000AAE4 E842640000              	call print_sexpr_if_not_void
 15415                                  
 15416 0000AAE9 48B8-                   	mov rax,L_constants + 0
 15416 0000AAEB [0000000000000000] 
 15417 0000AAF3 48890425[A0030000]      	mov qword [free_var_116], rax
 15418 0000AAFB 48B8-                   	mov rax, sob_void
 15418 0000AAFD [0000000000000000] 
 15419                                  
 15420 0000AB05 4889C7                  	mov rdi, rax
 15421 0000AB08 E81E640000              	call print_sexpr_if_not_void
 15422                                  
 15423 0000AB0D 48B8-                   	mov rax,L_constants + 0
 15423 0000AB0F [0000000000000000] 
 15424 0000AB17 48890425[A8030000]      	mov qword [free_var_117], rax
 15425 0000AB1F 48B8-                   	mov rax, sob_void
 15425 0000AB21 [0000000000000000] 
 15426                                  
 15427 0000AB29 4889C7                  	mov rdi, rax
 15428 0000AB2C E8FA630000              	call print_sexpr_if_not_void
 15429                                  
 15430 0000AB31 48B8-                   	mov rax,L_constants + 0
 15430 0000AB33 [0000000000000000] 
 15431 0000AB3B 48890425[B0030000]      	mov qword [free_var_118], rax
 15432 0000AB43 48B8-                   	mov rax, sob_void
 15432 0000AB45 [0000000000000000] 
 15433                                  
 15434 0000AB4D 4889C7                  	mov rdi, rax
 15435 0000AB50 E8D6630000              	call print_sexpr_if_not_void
 15436                                  
 15437 0000AB55 48B8-                   	mov rax,L_constants + 0
 15437 0000AB57 [0000000000000000] 
 15438 0000AB5F 48890425[B8030000]      	mov qword [free_var_119], rax
 15439 0000AB67 48B8-                   	mov rax, sob_void
 15439 0000AB69 [0000000000000000] 
 15440                                  
 15441 0000AB71 4889C7                  	mov rdi, rax
 15442 0000AB74 E8B2630000              	call print_sexpr_if_not_void
 15443                                  
 15444 0000AB79 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15445 0000AB7E E897630000              	call malloc
 15446 0000AB83 50                      	push rax
 15447 0000AB84 BF00000000              	mov rdi, 8 * 0	; new rib
 15448 0000AB89 E88C630000              	call malloc
 15449 0000AB8E 50                      	push rax
 15450 0000AB8F BF08000000              	mov rdi, 8 * 1	; extended env
 15451 0000AB94 E881630000              	call malloc
 15452 0000AB99 488B7D10                	mov rdi, ENV
 15453 0000AB9D BE00000000              	mov rsi, 0
 15454 0000ABA2 BA01000000              	mov rdx, 1
 15455                                  .L_lambda_simple_env_loop_00fc:	; ext_env[i + 1] <-- env[i]
 15456 0000ABA7 4883FE00                	cmp rsi, 0
 15457 0000ABAB 7410                    	je .L_lambda_simple_env_end_00fc
 15458 0000ABAD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15459 0000ABB1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15460 0000ABB5 48FFC6                  	inc rsi
 15461 0000ABB8 48FFC2                  	inc rdx
 15462 0000ABBB EBEA                    	jmp .L_lambda_simple_env_loop_00fc
 15463                                  .L_lambda_simple_env_end_00fc:
 15464 0000ABBD 5B                      	pop rbx
 15465 0000ABBE BE00000000              	mov rsi, 0
 15466                                  .L_lambda_simple_params_loop_00fc:	; copy params
 15467 0000ABC3 4883FE00                	cmp rsi, 0
 15468 0000ABC7 740E                    	je .L_lambda_simple_params_end_00fc
 15469 0000ABC9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15470 0000ABCE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15471 0000ABD2 48FFC6                  	inc rsi
 15472 0000ABD5 EBEC                    	jmp .L_lambda_simple_params_loop_00fc
 15473                                  .L_lambda_simple_params_end_00fc:
 15474 0000ABD7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15475 0000ABDA 4889C3                  	mov rbx, rax
 15476 0000ABDD 58                      	pop rax
 15477 0000ABDE C60005                  	mov byte [rax], T_closure
 15478 0000ABE1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15479 0000ABE5 48C74009[F2AB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fc
 15480 0000ABED E931030000              	jmp .L_lambda_simple_end_00fc
 15481                                  .L_lambda_simple_code_00fc:	; lambda-simple body
 15482 0000ABF2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15483 0000ABF8 740B                    	je .L_lambda_simple_arity_check_ok_00fc
 15484 0000ABFA FF742410                	push qword [rsp + 8 * 2]
 15485 0000ABFE 6A01                    	push 1
 15486 0000AC00 E9CE620000              	jmp L_error_incorrect_arity_simple
 15487                                  .L_lambda_simple_arity_check_ok_00fc:
 15488 0000AC05 C8000000                	enter 0, 0
 15489 0000AC09 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 15490 0000AC0E E807630000              	call malloc
 15491 0000AC13 50                      	push rax
 15492 0000AC14 BF08000000              	mov rdi, 8 * 1  ; new rib
 15493 0000AC19 E8FC620000              	call malloc
 15494 0000AC1E 50                      	push rax
 15495 0000AC1F BF10000000              	mov rdi, 8 * 2	; extended env
 15496 0000AC24 E8F1620000              	call malloc
 15497 0000AC29 488B7D10                	mov rdi, ENV
 15498 0000AC2D BE00000000              	mov rsi, 0
 15499 0000AC32 BA01000000              	mov rdx, 1
 15500                                  .L_lambda_opt_env_loop_0028:	; ext_env = env
 15501 0000AC37 4883FE01                	cmp rsi, 1
 15502 0000AC3B 7410                    	je .L_lambda_opt_env_end_0028
 15503 0000AC3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15504 0000AC41 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15505 0000AC45 48FFC6                  	inc rsi
 15506 0000AC48 48FFC2                  	inc rdx
 15507 0000AC4B EBEA                    	jmp .L_lambda_opt_env_loop_0028
 15508                                  .L_lambda_opt_env_end_0028:
 15509 0000AC4D 5B                      	pop rbx
 15510 0000AC4E BE00000000              	mov rsi, 0
 15511                                  .L_lambda_opt_params_loop_0028:	; copy params
 15512 0000AC53 4883FE01                	cmp rsi, 1
 15513 0000AC57 740E                    	je .L_lambda_opt_params_end_0028
 15514 0000AC59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15515 0000AC5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15516 0000AC62 48FFC6                  	inc rsi
 15517 0000AC65 EBEC                    	jmp .L_lambda_opt_params_loop_0028
 15518                                  .L_lambda_opt_params_end_0028:
 15519 0000AC67 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 15520 0000AC6A 4889C3                  	mov rbx, rax
 15521 0000AC6D 58                      	pop rax
 15522 0000AC6E C60005                  	mov byte [rax], T_closure
 15523 0000AC71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15524 0000AC75 48C74009[82AC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0028
 15525 0000AC7D E99D020000              	jmp .L_lambda_opt_end_0028
 15526                                  .L_lambda_opt_code_0028:	; lambda-opt body
 15527 0000AC82 48837C241000            	cmp qword [rsp + 8 * 2], 0
 15528 0000AC88 740D                    	je .L_lambda_opt_arity_check_exact_0028  ;same num_of_args
 15529 0000AC8A 7F5B                    	jg .L_lambda_opt_arity_check_more_0028  ;greater num_of_args
 15530 0000AC8C FF742410                	push qword [rsp + 8 * 2]
 15531 0000AC90 6A00                    	push 0
 15532 0000AC92 E950620000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 15533                                  .L_lambda_opt_arity_check_exact_0028:
 15534 0000AC97 4883EC08                	sub rsp, 8 * 1
 15535 0000AC9B 4889E7                  	mov rdi, rsp 
 15536                                  	;mov ret
 15537 0000AC9E 488B4708                	mov rax, qword [rdi + (8 * 1)]
 15538 0000ACA2 488907                  	mov qword [rdi], rax
 15539 0000ACA5 4883C708                	add rdi, 8
 15540                                  	;mov env
 15541 0000ACA9 488B4708                	mov rax, qword [rdi + (8 * 1)]
 15542 0000ACAD 488907                  	mov qword [rdi], rax
 15543 0000ACB0 4883C708                	add rdi, 8
 15544                                  	;mov & update COUNT
 15545 0000ACB4 488B4708                	mov rax, qword [rdi +(8 * 1)]
 15546 0000ACB8 4889C1                  	mov rcx, rax
 15547 0000ACBB 48FFC0                  	inc rax
 15548 0000ACBE 488907                  	mov qword [rdi], rax
 15549 0000ACC1 4883C708                	add rdi, 8
 15550                                  	;LOOP:move params
 15551                                  .L_lambda_opt_stack_shrink_loop_0076:	
 15552 0000ACC5 4883F900                	cmp rcx, 0
 15553 0000ACC9 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0076
 15554 0000ACCB 488B4708                	mov rax, qword [rdi + 8]
 15555 0000ACCF 488907                  	mov qword [rdi], rax
 15556 0000ACD2 4883C708                	add rdi, 8
 15557 0000ACD6 48FFC9                  	dec rcx
 15558 0000ACD9 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0076
 15559                                  .L_lambda_opt_stack_shrink_loop_exit_0076:	
 15560 0000ACDB 48C707[01000000]        	mov qword [rdi], sob_nil
 15561 0000ACE2 E994000000              	jmp .L_lambda_opt_stack_adjusted_0028
 15562                                  .L_lambda_opt_arity_check_more_0028:	
 15563 0000ACE7 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 15564 0000ACEC 488D0E                  	lea rcx, [rsi - 0]
 15565 0000ACEF 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 15566 0000ACF4 4989F2                  	mov r10, rsi
 15567 0000ACF7 49B9-                   	mov r9, sob_nil
 15567 0000ACF9 [0100000000000000] 
 15568                                  .L_lambda_opt_stack_shrink_loop_0077:	
 15569 0000AD01 4883F900                	cmp rcx, 0
 15570 0000AD05 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0077
 15571 0000AD07 BF11000000              	mov rdi, 1 + 8 + 8
 15572 0000AD0C E809620000              	call malloc
 15573 0000AD11 C60021                  	mov byte [rax], T_pair
 15574 0000AD14 488B1E                  	mov rbx, qword [rsi]
 15575 0000AD17 48895801                	mov SOB_PAIR_CAR(rax), rbx
 15576 0000AD1B 4C894809                	mov SOB_PAIR_CDR(rax), r9
 15577 0000AD1F 4989C1                  	mov r9, rax
 15578 0000AD22 4883EE08                	sub rsi, 8 * 1
 15579 0000AD26 48FFC9                  	dec rcx
 15580 0000AD29 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0077
 15581                                  .L_lambda_opt_stack_shrink_loop_exit_0077:	
 15582 0000AD2B 4D890A                  	mov qword [r10], r9
 15583 0000AD2E 4983EA08                	sub r10, 8 * 1; the new dest!
 15584 0000AD32 488D742410              	lea rsi, [rsp + (8 * (0 + 2))];the new src
 15585 0000AD37 B900000000              	mov rcx, 0 
 15586                                  .L_lambda_opt_stack_shrink_loop_0078:	
 15587 0000AD3C 4883F900                	cmp rcx, 0
 15588 0000AD40 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0078
 15589 0000AD42 488B06                  	mov rax, qword [rsi]
 15590 0000AD45 498902                  	mov qword [r10], rax
 15591 0000AD48 4983EA08                	sub r10, 8 * 1
 15592 0000AD4C 4883EE08                	sub rsi, 8 * 1
 15593 0000AD50 48FFC9                  	dec rcx
 15594 0000AD53 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0078
 15595                                  .L_lambda_opt_stack_shrink_loop_exit_0078:	
 15596 0000AD55 49C70201000000          	mov qword [r10], 1 + 0; 1=opt
 15597 0000AD5C 4983EA08                	sub r10, 8 * 1
 15598 0000AD60 4883EE08                	sub rsi, 8 * 1
 15599 0000AD64 488B06                  	mov rax, qword [rsi] ;env
 15600 0000AD67 498902                  	mov qword [r10], rax
 15601 0000AD6A 4983EA08                	sub r10, 8 * 1
 15602 0000AD6E 4883EE08                	sub rsi, 8 * 1
 15603 0000AD72 488B06                  	mov rax, qword [rsi] ;ret
 15604 0000AD75 498902                  	mov qword [r10], rax
 15605 0000AD78 4C89D4                  	mov rsp, r10
 15606                                  .L_lambda_opt_stack_adjusted_0028:	
 15607 0000AD7B C8000000                	enter 0, 0
 15608 0000AD7F 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 15609 0000AD83 50                      	push rax
 15610 0000AD84 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15611 0000AD89 E88C610000              	call malloc
 15612 0000AD8E 50                      	push rax
 15613 0000AD8F BF08000000              	mov rdi, 8 * 1	; new rib
 15614 0000AD94 E881610000              	call malloc
 15615 0000AD99 50                      	push rax
 15616 0000AD9A BF18000000              	mov rdi, 8 * 3	; extended env
 15617 0000AD9F E876610000              	call malloc
 15618 0000ADA4 488B7D10                	mov rdi, ENV
 15619 0000ADA8 BE00000000              	mov rsi, 0
 15620 0000ADAD BA01000000              	mov rdx, 1
 15621                                  .L_lambda_simple_env_loop_00fd:	; ext_env[i + 1] <-- env[i]
 15622 0000ADB2 4883FE02                	cmp rsi, 2
 15623 0000ADB6 7410                    	je .L_lambda_simple_env_end_00fd
 15624 0000ADB8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15625 0000ADBC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15626 0000ADC0 48FFC6                  	inc rsi
 15627 0000ADC3 48FFC2                  	inc rdx
 15628 0000ADC6 EBEA                    	jmp .L_lambda_simple_env_loop_00fd
 15629                                  .L_lambda_simple_env_end_00fd:
 15630 0000ADC8 5B                      	pop rbx
 15631 0000ADC9 BE00000000              	mov rsi, 0
 15632                                  .L_lambda_simple_params_loop_00fd:	; copy params
 15633 0000ADCE 4883FE01                	cmp rsi, 1
 15634 0000ADD2 740E                    	je .L_lambda_simple_params_end_00fd
 15635 0000ADD4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15636 0000ADD9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15637 0000ADDD 48FFC6                  	inc rsi
 15638 0000ADE0 EBEC                    	jmp .L_lambda_simple_params_loop_00fd
 15639                                  .L_lambda_simple_params_end_00fd:
 15640 0000ADE2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15641 0000ADE5 4889C3                  	mov rbx, rax
 15642 0000ADE8 58                      	pop rax
 15643 0000ADE9 C60005                  	mov byte [rax], T_closure
 15644 0000ADEC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15645 0000ADF0 48C74009[FDAD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fd
 15646 0000ADF8 E999000000              	jmp .L_lambda_simple_end_00fd
 15647                                  .L_lambda_simple_code_00fd:	; lambda-simple body
 15648 0000ADFD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15649 0000AE03 740B                    	je .L_lambda_simple_arity_check_ok_00fd
 15650 0000AE05 FF742410                	push qword [rsp + 8 * 2]
 15651 0000AE09 6A01                    	push 1
 15652 0000AE0B E9C3600000              	jmp L_error_incorrect_arity_simple
 15653                                  .L_lambda_simple_arity_check_ok_00fd:
 15654 0000AE10 C8000000                	enter 0, 0
 15655 0000AE14 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 15656 0000AE18 50                      	push rax
 15657 0000AE19 6A01                    	push 1
 15658 0000AE1B 488B0425[88030000]      	mov rax, qword [free_var_113]
 15659 0000AE23 803805                  	cmp byte [rax], T_closure 
 15660 0000AE26 0F85A3700000                    jne L_code_ptr_error
 15661                                  
 15662 0000AE2C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15663                                  
 15664 0000AE30 53                              push rbx
 15665                                  
 15666 0000AE31 FF5009                          call SOB_CLOSURE_CODE(rax)
 15667                                  
 15668 0000AE34 50                              	push rax
 15669                                  
 15670 0000AE35 6A01                    	push 1
 15671 0000AE37 488B0425[C0000000]      	mov rax, qword [free_var_24]
 15672                                  	assert_closure(rax)
    42 0000AE3F 803805              <1>  cmp byte [%1], %2
    43 0000AE42 0F85C6780000        <1>  jne L_error_incorrect_type
 15673 0000AE48 50                      	push rax 
 15674 0000AE49 FF7508                  	push qword [rbp + 8]
 15675 0000AE4C FF7500                  	push qword [rbp]
 15676 0000AE4F 4883C308                	add rbx ,8*1
 15677                                  	 .L_fix_stack_label_0133:
 15678 0000AE53 488B5518                	mov rdx, qword[rbp+8*3]
 15679 0000AE57 4883C203                	add rdx, 3
 15680 0000AE5B 48C1E203                	shl rdx, 3
 15681 0000AE5F 4889EF                  	mov rdi, rbp
 15682 0000AE62 4801D7                  	add rdi, rdx
 15683 0000AE65 4C8B4500                	mov r8, qword[rbp]
 15684 0000AE69 4889E9                  	mov rcx, rbp
 15685 0000AE6C 4883E908                	sub rcx, 8
 15686                                  	 .L_loop_fix_stuck_0133:
 15687 0000AE70 4839CC                  	cmp rsp, rcx
 15688 0000AE73 7710                    ja .L_loop_fix_stuck_end_0133
 15689 0000AE75 488B19                   	mov rbx, qword[rcx]
 15690 0000AE78 48891F                  	 mov qword[rdi], rbx
 15691 0000AE7B 4883EF08                	sub rdi, 8
 15692 0000AE7F 4883E908                	sub rcx, 8
 15693 0000AE83 EBEB                    jmp .L_loop_fix_stuck_0133
 15694                                  	 .L_loop_fix_stuck_end_0133:
 15695 0000AE85 4883C708                	add rdi, 8
 15696 0000AE89 4889FC                  	 mov rsp, rdi
 15697 0000AE8C 4C89C5                  	mov rbp, r8
 15698 0000AE8F 5D                      	pop rbp
 15699 0000AE90 FFE0                    	jmp rax 
 15700 0000AE92 C9                      	leave
 15701 0000AE93 C21800                  	ret 8 * (2 + 1)
 15702                                  .L_lambda_simple_end_00fd:	; new closure is in rax
 15703 0000AE96 50                      	push rax
 15704 0000AE97 6A02                    	push 2
 15705 0000AE99 488B0425[D8020000]      	mov rax, qword [free_var_91]
 15706 0000AEA1 803805                  	cmp byte [rax], T_closure 
 15707 0000AEA4 0F8525700000                    jne L_code_ptr_error
 15708                                  
 15709 0000AEAA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15710                                  
 15711 0000AEAE 53                              push rbx
 15712                                  
 15713 0000AEAF FF5009                          call SOB_CLOSURE_CODE(rax)
 15714                                  
 15715 0000AEB2 50                              	push rax
 15716 0000AEB3 488B4510                	mov rax, qword [rbp + 8 * 2]
 15717                                  
 15718 0000AEB7 488B00                                            	mov rax, qword[rax + 8 * 0]
 15719                                  
 15720 0000AEBA 488B00                                            	mov rax, qword[rax + 8 * 0]
 15721 0000AEBD 50                      	push rax
 15722                                  
 15723 0000AEBE 6A02                    	push 2
 15724 0000AEC0 488B0425[C8020000]      	mov rax, qword [free_var_89]
 15725                                  	assert_closure(rax)
    42 0000AEC8 803805              <1>  cmp byte [%1], %2
    43 0000AECB 0F853D780000        <1>  jne L_error_incorrect_type
 15726 0000AED1 50                      	push rax 
 15727 0000AED2 FF7508                  	push qword [rbp + 8]
 15728 0000AED5 FF7500                  	push qword [rbp]
 15729 0000AED8 4883C308                	add rbx ,8*1
 15730                                  	 .L_fix_stack_label_0134:
 15731 0000AEDC 488B5518                	mov rdx, qword[rbp+8*3]
 15732 0000AEE0 4883C203                	add rdx, 3
 15733 0000AEE4 48C1E203                	shl rdx, 3
 15734 0000AEE8 4889EF                  	mov rdi, rbp
 15735 0000AEEB 4801D7                  	add rdi, rdx
 15736 0000AEEE 4C8B4500                	mov r8, qword[rbp]
 15737 0000AEF2 4889E9                  	mov rcx, rbp
 15738 0000AEF5 4883E908                	sub rcx, 8
 15739                                  	 .L_loop_fix_stuck_0134:
 15740 0000AEF9 4839CC                  	cmp rsp, rcx
 15741 0000AEFC 7710                    ja .L_loop_fix_stuck_end_0134
 15742 0000AEFE 488B19                   	mov rbx, qword[rcx]
 15743 0000AF01 48891F                  	 mov qword[rdi], rbx
 15744 0000AF04 4883EF08                	sub rdi, 8
 15745 0000AF08 4883E908                	sub rcx, 8
 15746 0000AF0C EBEB                    jmp .L_loop_fix_stuck_0134
 15747                                  	 .L_loop_fix_stuck_end_0134:
 15748 0000AF0E 4883C708                	add rdi, 8
 15749 0000AF12 4889FC                  	 mov rsp, rdi
 15750 0000AF15 4C89C5                  	mov rbp, r8
 15751 0000AF18 5D                      	pop rbp
 15752 0000AF19 FFE0                    	jmp rax 
 15753 0000AF1B C9                      	leave
 15754 0000AF1C C21800                  	ret 8 * (2 + 1)
 15755                                  .L_lambda_opt_end_0028:	; new closure is in rax
 15756 0000AF1F C9                      	leave
 15757 0000AF20 C21800                  	ret 8 * (2 + 1)
 15758                                  .L_lambda_simple_end_00fc:	; new closure is in rax
 15759 0000AF23 50                      	push rax
 15760 0000AF24 6A01                    	push 1
 15761 0000AF26 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15762 0000AF2B E8EA5F0000              	call malloc
 15763 0000AF30 50                      	push rax
 15764 0000AF31 BF00000000              	mov rdi, 8 * 0	; new rib
 15765 0000AF36 E8DF5F0000              	call malloc
 15766 0000AF3B 50                      	push rax
 15767 0000AF3C BF08000000              	mov rdi, 8 * 1	; extended env
 15768 0000AF41 E8D45F0000              	call malloc
 15769 0000AF46 488B7D10                	mov rdi, ENV
 15770 0000AF4A BE00000000              	mov rsi, 0
 15771 0000AF4F BA01000000              	mov rdx, 1
 15772                                  .L_lambda_simple_env_loop_00fe:	; ext_env[i + 1] <-- env[i]
 15773 0000AF54 4883FE00                	cmp rsi, 0
 15774 0000AF58 7410                    	je .L_lambda_simple_env_end_00fe
 15775 0000AF5A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15776 0000AF5E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15777 0000AF62 48FFC6                  	inc rsi
 15778 0000AF65 48FFC2                  	inc rdx
 15779 0000AF68 EBEA                    	jmp .L_lambda_simple_env_loop_00fe
 15780                                  .L_lambda_simple_env_end_00fe:
 15781 0000AF6A 5B                      	pop rbx
 15782 0000AF6B BE00000000              	mov rsi, 0
 15783                                  .L_lambda_simple_params_loop_00fe:	; copy params
 15784 0000AF70 4883FE00                	cmp rsi, 0
 15785 0000AF74 740E                    	je .L_lambda_simple_params_end_00fe
 15786 0000AF76 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15787 0000AF7B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15788 0000AF7F 48FFC6                  	inc rsi
 15789 0000AF82 EBEC                    	jmp .L_lambda_simple_params_loop_00fe
 15790                                  .L_lambda_simple_params_end_00fe:
 15791 0000AF84 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15792 0000AF87 4889C3                  	mov rbx, rax
 15793 0000AF8A 58                      	pop rax
 15794 0000AF8B C60005                  	mov byte [rax], T_closure
 15795 0000AF8E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15796 0000AF92 48C74009[9FAF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fe
 15797 0000AF9A E915010000              	jmp .L_lambda_simple_end_00fe
 15798                                  .L_lambda_simple_code_00fe:	; lambda-simple body
 15799 0000AF9F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15800 0000AFA5 740B                    	je .L_lambda_simple_arity_check_ok_00fe
 15801 0000AFA7 FF742410                	push qword [rsp + 8 * 2]
 15802 0000AFAB 6A01                    	push 1
 15803 0000AFAD E9215F0000              	jmp L_error_incorrect_arity_simple
 15804                                  .L_lambda_simple_arity_check_ok_00fe:
 15805 0000AFB2 C8000000                	enter 0, 0
 15806 0000AFB6 488B0425[30030000]      	mov rax, qword [free_var_102]
 15807 0000AFBE 50                      	push rax
 15808 0000AFBF 6A01                    	push 1
 15809 0000AFC1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15810 0000AFC5 803805                  	cmp byte [rax], T_closure 
 15811 0000AFC8 0F85016F0000                    jne L_code_ptr_error
 15812                                  
 15813 0000AFCE 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15814                                  
 15815 0000AFD2 53                              push rbx
 15816                                  
 15817 0000AFD3 FF5009                          call SOB_CLOSURE_CODE(rax)
 15818                                  
 15819 0000AFD6 48890425[98030000]              	mov qword [free_var_115], rax
 15820                                  
 15821 0000AFDE 48B8-                           	mov rax, sob_void
 15821 0000AFE0 [0000000000000000] 
 15822                                  
 15823 0000AFE8 488B0425[38030000]      	mov rax, qword [free_var_103]
 15824 0000AFF0 50                      	push rax
 15825 0000AFF1 6A01                    	push 1
 15826 0000AFF3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15827 0000AFF7 803805                  	cmp byte [rax], T_closure 
 15828 0000AFFA 0F85CF6E0000                    jne L_code_ptr_error
 15829                                  
 15830 0000B000 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15831                                  
 15832 0000B004 53                              push rbx
 15833                                  
 15834 0000B005 FF5009                          call SOB_CLOSURE_CODE(rax)
 15835                                  
 15836 0000B008 48890425[A0030000]              	mov qword [free_var_116], rax
 15837                                  
 15838 0000B010 48B8-                           	mov rax, sob_void
 15838 0000B012 [0000000000000000] 
 15839                                  
 15840 0000B01A 488B0425[50030000]      	mov rax, qword [free_var_106]
 15841 0000B022 50                      	push rax
 15842 0000B023 6A01                    	push 1
 15843 0000B025 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15844 0000B029 803805                  	cmp byte [rax], T_closure 
 15845 0000B02C 0F859D6E0000                    jne L_code_ptr_error
 15846                                  
 15847 0000B032 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15848                                  
 15849 0000B036 53                              push rbx
 15850                                  
 15851 0000B037 FF5009                          call SOB_CLOSURE_CODE(rax)
 15852                                  
 15853 0000B03A 48890425[A8030000]              	mov qword [free_var_117], rax
 15854                                  
 15855 0000B042 48B8-                           	mov rax, sob_void
 15855 0000B044 [0000000000000000] 
 15856                                  
 15857 0000B04C 488B0425[40030000]      	mov rax, qword [free_var_104]
 15858 0000B054 50                      	push rax
 15859 0000B055 6A01                    	push 1
 15860 0000B057 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15861 0000B05B 803805                  	cmp byte [rax], T_closure 
 15862 0000B05E 0F856B6E0000                    jne L_code_ptr_error
 15863                                  
 15864 0000B064 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15865                                  
 15866 0000B068 53                              push rbx
 15867                                  
 15868 0000B069 FF5009                          call SOB_CLOSURE_CODE(rax)
 15869                                  
 15870 0000B06C 48890425[B0030000]              	mov qword [free_var_118], rax
 15871                                  
 15872 0000B074 48B8-                           	mov rax, sob_void
 15872 0000B076 [0000000000000000] 
 15873                                  
 15874 0000B07E 488B0425[48030000]      	mov rax, qword [free_var_105]
 15875 0000B086 50                      	push rax
 15876 0000B087 6A01                    	push 1
 15877 0000B089 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15878 0000B08D 803805                  	cmp byte [rax], T_closure 
 15879 0000B090 0F85396E0000                    jne L_code_ptr_error
 15880                                  
 15881 0000B096 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15882                                  
 15883 0000B09A 53                              push rbx
 15884                                  
 15885 0000B09B FF5009                          call SOB_CLOSURE_CODE(rax)
 15886                                  
 15887 0000B09E 48890425[B8030000]              	mov qword [free_var_119], rax
 15888                                  
 15889 0000B0A6 48B8-                           	mov rax, sob_void
 15889 0000B0A8 [0000000000000000] 
 15890 0000B0B0 C9                      	leave
 15891 0000B0B1 C21800                  	ret 8 * (2 + 1)
 15892                                  .L_lambda_simple_end_00fe:	; new closure is in rax
 15893 0000B0B4 803805                  	cmp byte [rax], T_closure 
 15894 0000B0B7 0F85126E0000                    jne L_code_ptr_error
 15895                                  
 15896 0000B0BD 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 15897                                  
 15898 0000B0C1 53                              push rbx
 15899                                  
 15900 0000B0C2 FF5009                          call SOB_CLOSURE_CODE(rax)
 15901                                  
 15902                                          
 15903 0000B0C5 4889C7                  	mov rdi, rax
 15904 0000B0C8 E85E5E0000              	call print_sexpr_if_not_void
 15905                                  
 15906 0000B0CD 48B8-                   	mov rax,L_constants + 0
 15906 0000B0CF [0000000000000000] 
 15907 0000B0D7 48890425[C0030000]      	mov qword [free_var_120], rax
 15908 0000B0DF 48B8-                   	mov rax, sob_void
 15908 0000B0E1 [0000000000000000] 
 15909                                  
 15910 0000B0E9 4889C7                  	mov rdi, rax
 15911 0000B0EC E83A5E0000              	call print_sexpr_if_not_void
 15912                                  
 15913 0000B0F1 48B8-                   	mov rax,L_constants + 0
 15913 0000B0F3 [0000000000000000] 
 15914 0000B0FB 48890425[C8030000]      	mov qword [free_var_121], rax
 15915 0000B103 48B8-                   	mov rax, sob_void
 15915 0000B105 [0000000000000000] 
 15916                                  
 15917 0000B10D 4889C7                  	mov rdi, rax
 15918 0000B110 E8165E0000              	call print_sexpr_if_not_void
 15919                                  
 15920 0000B115 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15921 0000B11A E8FB5D0000              	call malloc
 15922 0000B11F 50                      	push rax
 15923 0000B120 BF00000000              	mov rdi, 8 * 0	; new rib
 15924 0000B125 E8F05D0000              	call malloc
 15925 0000B12A 50                      	push rax
 15926 0000B12B BF08000000              	mov rdi, 8 * 1	; extended env
 15927 0000B130 E8E55D0000              	call malloc
 15928 0000B135 488B7D10                	mov rdi, ENV
 15929 0000B139 BE00000000              	mov rsi, 0
 15930 0000B13E BA01000000              	mov rdx, 1
 15931                                  .L_lambda_simple_env_loop_00ff:	; ext_env[i + 1] <-- env[i]
 15932 0000B143 4883FE00                	cmp rsi, 0
 15933 0000B147 7410                    	je .L_lambda_simple_env_end_00ff
 15934 0000B149 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15935 0000B14D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15936 0000B151 48FFC6                  	inc rsi
 15937 0000B154 48FFC2                  	inc rdx
 15938 0000B157 EBEA                    	jmp .L_lambda_simple_env_loop_00ff
 15939                                  .L_lambda_simple_env_end_00ff:
 15940 0000B159 5B                      	pop rbx
 15941 0000B15A BE00000000              	mov rsi, 0
 15942                                  .L_lambda_simple_params_loop_00ff:	; copy params
 15943 0000B15F 4883FE00                	cmp rsi, 0
 15944 0000B163 740E                    	je .L_lambda_simple_params_end_00ff
 15945 0000B165 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15946 0000B16A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15947 0000B16E 48FFC6                  	inc rsi
 15948 0000B171 EBEC                    	jmp .L_lambda_simple_params_loop_00ff
 15949                                  .L_lambda_simple_params_end_00ff:
 15950 0000B173 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15951 0000B176 4889C3                  	mov rbx, rax
 15952 0000B179 58                      	pop rax
 15953 0000B17A C60005                  	mov byte [rax], T_closure
 15954 0000B17D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15955 0000B181 48C74009[8EB10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ff
 15956 0000B189 E954010000              	jmp .L_lambda_simple_end_00ff
 15957                                  .L_lambda_simple_code_00ff:	; lambda-simple body
 15958 0000B18E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15959 0000B194 740B                    	je .L_lambda_simple_arity_check_ok_00ff
 15960 0000B196 FF742410                	push qword [rsp + 8 * 2]
 15961 0000B19A 6A01                    	push 1
 15962 0000B19C E9325D0000              	jmp L_error_incorrect_arity_simple
 15963                                  .L_lambda_simple_arity_check_ok_00ff:
 15964 0000B1A1 C8000000                	enter 0, 0
 15965 0000B1A5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15966 0000B1AA E86B5D0000              	call malloc
 15967 0000B1AF 50                      	push rax
 15968 0000B1B0 BF08000000              	mov rdi, 8 * 1	; new rib
 15969 0000B1B5 E8605D0000              	call malloc
 15970 0000B1BA 50                      	push rax
 15971 0000B1BB BF10000000              	mov rdi, 8 * 2	; extended env
 15972 0000B1C0 E8555D0000              	call malloc
 15973 0000B1C5 488B7D10                	mov rdi, ENV
 15974 0000B1C9 BE00000000              	mov rsi, 0
 15975 0000B1CE BA01000000              	mov rdx, 1
 15976                                  .L_lambda_simple_env_loop_0100:	; ext_env[i + 1] <-- env[i]
 15977 0000B1D3 4883FE01                	cmp rsi, 1
 15978 0000B1D7 7410                    	je .L_lambda_simple_env_end_0100
 15979 0000B1D9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15980 0000B1DD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15981 0000B1E1 48FFC6                  	inc rsi
 15982 0000B1E4 48FFC2                  	inc rdx
 15983 0000B1E7 EBEA                    	jmp .L_lambda_simple_env_loop_0100
 15984                                  .L_lambda_simple_env_end_0100:
 15985 0000B1E9 5B                      	pop rbx
 15986 0000B1EA BE00000000              	mov rsi, 0
 15987                                  .L_lambda_simple_params_loop_0100:	; copy params
 15988 0000B1EF 4883FE01                	cmp rsi, 1
 15989 0000B1F3 740E                    	je .L_lambda_simple_params_end_0100
 15990 0000B1F5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15991 0000B1FA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15992 0000B1FE 48FFC6                  	inc rsi
 15993 0000B201 EBEC                    	jmp .L_lambda_simple_params_loop_0100
 15994                                  .L_lambda_simple_params_end_0100:
 15995 0000B203 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15996 0000B206 4889C3                  	mov rbx, rax
 15997 0000B209 58                      	pop rax
 15998 0000B20A C60005                  	mov byte [rax], T_closure
 15999 0000B20D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16000 0000B211 48C74009[1EB20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0100
 16001 0000B219 E9C0000000              	jmp .L_lambda_simple_end_0100
 16002                                  .L_lambda_simple_code_0100:	; lambda-simple body
 16003 0000B21E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16004 0000B224 740B                    	je .L_lambda_simple_arity_check_ok_0100
 16005 0000B226 FF742410                	push qword [rsp + 8 * 2]
 16006 0000B22A 6A01                    	push 1
 16007 0000B22C E9A25C0000              	jmp L_error_incorrect_arity_simple
 16008                                  .L_lambda_simple_arity_check_ok_0100:
 16009 0000B231 C8000000                	enter 0, 0
 16010 0000B235 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 16011 0000B239 50                      	push rax
 16012 0000B23A 6A01                    	push 1
 16013 0000B23C 488B0425[D8030000]      	mov rax, qword [free_var_123]
 16014 0000B244 803805                  	cmp byte [rax], T_closure 
 16015 0000B247 0F85826C0000                    jne L_code_ptr_error
 16016                                  
 16017 0000B24D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16018                                  
 16019 0000B251 53                              push rbx
 16020                                  
 16021 0000B252 FF5009                          call SOB_CLOSURE_CODE(rax)
 16022                                  
 16023 0000B255 50                              	push rax
 16024 0000B256 488B4510                	mov rax, qword [rbp + 8 * 2]
 16025                                  
 16026 0000B25A 488B00                                            	mov rax, qword[rax + 8 * 0]
 16027                                  
 16028 0000B25D 488B00                                            	mov rax, qword[rax + 8 * 0]
 16029 0000B260 50                      	push rax
 16030 0000B261 6A02                    	push 2
 16031 0000B263 488B0425[D8020000]      	mov rax, qword [free_var_91]
 16032 0000B26B 803805                  	cmp byte [rax], T_closure 
 16033 0000B26E 0F855B6C0000                    jne L_code_ptr_error
 16034                                  
 16035 0000B274 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16036                                  
 16037 0000B278 53                              push rbx
 16038                                  
 16039 0000B279 FF5009                          call SOB_CLOSURE_CODE(rax)
 16040                                  
 16041 0000B27C 50                              	push rax
 16042                                  
 16043 0000B27D 6A01                    	push 1
 16044 0000B27F 488B0425[D0030000]      	mov rax, qword [free_var_122]
 16045                                  	assert_closure(rax)
    42 0000B287 803805              <1>  cmp byte [%1], %2
    43 0000B28A 0F857E740000        <1>  jne L_error_incorrect_type
 16046 0000B290 50                      	push rax 
 16047 0000B291 FF7508                  	push qword [rbp + 8]
 16048 0000B294 FF7500                  	push qword [rbp]
 16049 0000B297 4883C308                	add rbx ,8*1
 16050                                  	 .L_fix_stack_label_0135:
 16051 0000B29B 488B5518                	mov rdx, qword[rbp+8*3]
 16052 0000B29F 4883C203                	add rdx, 3
 16053 0000B2A3 48C1E203                	shl rdx, 3
 16054 0000B2A7 4889EF                  	mov rdi, rbp
 16055 0000B2AA 4801D7                  	add rdi, rdx
 16056 0000B2AD 4C8B4500                	mov r8, qword[rbp]
 16057 0000B2B1 4889E9                  	mov rcx, rbp
 16058 0000B2B4 4883E908                	sub rcx, 8
 16059                                  	 .L_loop_fix_stuck_0135:
 16060 0000B2B8 4839CC                  	cmp rsp, rcx
 16061 0000B2BB 7710                    ja .L_loop_fix_stuck_end_0135
 16062 0000B2BD 488B19                   	mov rbx, qword[rcx]
 16063 0000B2C0 48891F                  	 mov qword[rdi], rbx
 16064 0000B2C3 4883EF08                	sub rdi, 8
 16065 0000B2C7 4883E908                	sub rcx, 8
 16066 0000B2CB EBEB                    jmp .L_loop_fix_stuck_0135
 16067                                  	 .L_loop_fix_stuck_end_0135:
 16068 0000B2CD 4883C708                	add rdi, 8
 16069 0000B2D1 4889FC                  	 mov rsp, rdi
 16070 0000B2D4 4C89C5                  	mov rbp, r8
 16071 0000B2D7 5D                      	pop rbp
 16072 0000B2D8 FFE0                    	jmp rax 
 16073 0000B2DA C9                      	leave
 16074 0000B2DB C21800                  	ret 8 * (2 + 1)
 16075                                  .L_lambda_simple_end_0100:	; new closure is in rax
 16076 0000B2DE C9                      	leave
 16077 0000B2DF C21800                  	ret 8 * (2 + 1)
 16078                                  .L_lambda_simple_end_00ff:	; new closure is in rax
 16079 0000B2E2 50                      	push rax
 16080 0000B2E3 6A01                    	push 1
 16081 0000B2E5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16082 0000B2EA E82B5C0000              	call malloc
 16083 0000B2EF 50                      	push rax
 16084 0000B2F0 BF00000000              	mov rdi, 8 * 0	; new rib
 16085 0000B2F5 E8205C0000              	call malloc
 16086 0000B2FA 50                      	push rax
 16087 0000B2FB BF08000000              	mov rdi, 8 * 1	; extended env
 16088 0000B300 E8155C0000              	call malloc
 16089 0000B305 488B7D10                	mov rdi, ENV
 16090 0000B309 BE00000000              	mov rsi, 0
 16091 0000B30E BA01000000              	mov rdx, 1
 16092                                  .L_lambda_simple_env_loop_0101:	; ext_env[i + 1] <-- env[i]
 16093 0000B313 4883FE00                	cmp rsi, 0
 16094 0000B317 7410                    	je .L_lambda_simple_env_end_0101
 16095 0000B319 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16096 0000B31D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16097 0000B321 48FFC6                  	inc rsi
 16098 0000B324 48FFC2                  	inc rdx
 16099 0000B327 EBEA                    	jmp .L_lambda_simple_env_loop_0101
 16100                                  .L_lambda_simple_env_end_0101:
 16101 0000B329 5B                      	pop rbx
 16102 0000B32A BE00000000              	mov rsi, 0
 16103                                  .L_lambda_simple_params_loop_0101:	; copy params
 16104 0000B32F 4883FE00                	cmp rsi, 0
 16105 0000B333 740E                    	je .L_lambda_simple_params_end_0101
 16106 0000B335 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16107 0000B33A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16108 0000B33E 48FFC6                  	inc rsi
 16109 0000B341 EBEC                    	jmp .L_lambda_simple_params_loop_0101
 16110                                  .L_lambda_simple_params_end_0101:
 16111 0000B343 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16112 0000B346 4889C3                  	mov rbx, rax
 16113 0000B349 58                      	pop rax
 16114 0000B34A C60005                  	mov byte [rax], T_closure
 16115 0000B34D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16116 0000B351 48C74009[5EB30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0101
 16117 0000B359 E97F000000              	jmp .L_lambda_simple_end_0101
 16118                                  .L_lambda_simple_code_0101:	; lambda-simple body
 16119 0000B35E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16120 0000B364 740B                    	je .L_lambda_simple_arity_check_ok_0101
 16121 0000B366 FF742410                	push qword [rsp + 8 * 2]
 16122 0000B36A 6A01                    	push 1
 16123 0000B36C E9625B0000              	jmp L_error_incorrect_arity_simple
 16124                                  .L_lambda_simple_arity_check_ok_0101:
 16125 0000B371 C8000000                	enter 0, 0
 16126 0000B375 488B0425[88030000]      	mov rax, qword [free_var_113]
 16127 0000B37D 50                      	push rax
 16128 0000B37E 6A01                    	push 1
 16129 0000B380 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16130 0000B384 803805                  	cmp byte [rax], T_closure 
 16131 0000B387 0F85426B0000                    jne L_code_ptr_error
 16132                                  
 16133 0000B38D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16134                                  
 16135 0000B391 53                              push rbx
 16136                                  
 16137 0000B392 FF5009                          call SOB_CLOSURE_CODE(rax)
 16138                                  
 16139 0000B395 48890425[C0030000]              	mov qword [free_var_120], rax
 16140                                  
 16141 0000B39D 48B8-                           	mov rax, sob_void
 16141 0000B39F [0000000000000000] 
 16142                                  
 16143 0000B3A7 488B0425[90030000]      	mov rax, qword [free_var_114]
 16144 0000B3AF 50                      	push rax
 16145 0000B3B0 6A01                    	push 1
 16146 0000B3B2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16147 0000B3B6 803805                  	cmp byte [rax], T_closure 
 16148 0000B3B9 0F85106B0000                    jne L_code_ptr_error
 16149                                  
 16150 0000B3BF 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16151                                  
 16152 0000B3C3 53                              push rbx
 16153                                  
 16154 0000B3C4 FF5009                          call SOB_CLOSURE_CODE(rax)
 16155                                  
 16156 0000B3C7 48890425[C8030000]              	mov qword [free_var_121], rax
 16157                                  
 16158 0000B3CF 48B8-                           	mov rax, sob_void
 16158 0000B3D1 [0000000000000000] 
 16159 0000B3D9 C9                      	leave
 16160 0000B3DA C21800                  	ret 8 * (2 + 1)
 16161                                  .L_lambda_simple_end_0101:	; new closure is in rax
 16162 0000B3DD 803805                  	cmp byte [rax], T_closure 
 16163 0000B3E0 0F85E96A0000                    jne L_code_ptr_error
 16164                                  
 16165 0000B3E6 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16166                                  
 16167 0000B3EA 53                              push rbx
 16168                                  
 16169 0000B3EB FF5009                          call SOB_CLOSURE_CODE(rax)
 16170                                  
 16171                                          
 16172 0000B3EE 4889C7                  	mov rdi, rax
 16173 0000B3F1 E8355B0000              	call print_sexpr_if_not_void
 16174                                  
 16175 0000B3F6 48B8-                   	mov rax,L_constants + 0
 16175 0000B3F8 [0000000000000000] 
 16176 0000B400 48890425[E0030000]      	mov qword [free_var_124], rax
 16177 0000B408 48B8-                   	mov rax, sob_void
 16177 0000B40A [0000000000000000] 
 16178                                  
 16179 0000B412 4889C7                  	mov rdi, rax
 16180 0000B415 E8115B0000              	call print_sexpr_if_not_void
 16181                                  
 16182 0000B41A 48B8-                   	mov rax,L_constants + 0
 16182 0000B41C [0000000000000000] 
 16183 0000B424 48890425[E8030000]      	mov qword [free_var_125], rax
 16184 0000B42C 48B8-                   	mov rax, sob_void
 16184 0000B42E [0000000000000000] 
 16185                                  
 16186 0000B436 4889C7                  	mov rdi, rax
 16187 0000B439 E8ED5A0000              	call print_sexpr_if_not_void
 16188                                  
 16189 0000B43E 48B8-                   	mov rax,L_constants + 0
 16189 0000B440 [0000000000000000] 
 16190 0000B448 48890425[F0030000]      	mov qword [free_var_126], rax
 16191 0000B450 48B8-                   	mov rax, sob_void
 16191 0000B452 [0000000000000000] 
 16192                                  
 16193 0000B45A 4889C7                  	mov rdi, rax
 16194 0000B45D E8C95A0000              	call print_sexpr_if_not_void
 16195                                  
 16196 0000B462 48B8-                   	mov rax,L_constants + 0
 16196 0000B464 [0000000000000000] 
 16197 0000B46C 48890425[F8030000]      	mov qword [free_var_127], rax
 16198 0000B474 48B8-                   	mov rax, sob_void
 16198 0000B476 [0000000000000000] 
 16199                                  
 16200 0000B47E 4889C7                  	mov rdi, rax
 16201 0000B481 E8A55A0000              	call print_sexpr_if_not_void
 16202                                  
 16203 0000B486 48B8-                   	mov rax,L_constants + 0
 16203 0000B488 [0000000000000000] 
 16204 0000B490 48890425[00040000]      	mov qword [free_var_128], rax
 16205 0000B498 48B8-                   	mov rax, sob_void
 16205 0000B49A [0000000000000000] 
 16206                                  
 16207 0000B4A2 4889C7                  	mov rdi, rax
 16208 0000B4A5 E8815A0000              	call print_sexpr_if_not_void
 16209                                  
 16210 0000B4AA 48B8-                   	mov rax,L_constants + 0
 16210 0000B4AC [0000000000000000] 
 16211 0000B4B4 48890425[08040000]      	mov qword [free_var_129], rax
 16212 0000B4BC 48B8-                   	mov rax, sob_void
 16212 0000B4BE [0000000000000000] 
 16213                                  
 16214 0000B4C6 4889C7                  	mov rdi, rax
 16215 0000B4C9 E85D5A0000              	call print_sexpr_if_not_void
 16216                                  
 16217 0000B4CE 48B8-                   	mov rax,L_constants + 0
 16217 0000B4D0 [0000000000000000] 
 16218 0000B4D8 48890425[10040000]      	mov qword [free_var_130], rax
 16219 0000B4E0 48B8-                   	mov rax, sob_void
 16219 0000B4E2 [0000000000000000] 
 16220                                  
 16221 0000B4EA 4889C7                  	mov rdi, rax
 16222 0000B4ED E8395A0000              	call print_sexpr_if_not_void
 16223                                  
 16224 0000B4F2 48B8-                   	mov rax,L_constants + 0
 16224 0000B4F4 [0000000000000000] 
 16225 0000B4FC 48890425[18040000]      	mov qword [free_var_131], rax
 16226 0000B504 48B8-                   	mov rax, sob_void
 16226 0000B506 [0000000000000000] 
 16227                                  
 16228 0000B50E 4889C7                  	mov rdi, rax
 16229 0000B511 E8155A0000              	call print_sexpr_if_not_void
 16230                                  
 16231 0000B516 48B8-                   	mov rax,L_constants + 0
 16231 0000B518 [0000000000000000] 
 16232 0000B520 48890425[20040000]      	mov qword [free_var_132], rax
 16233 0000B528 48B8-                   	mov rax, sob_void
 16233 0000B52A [0000000000000000] 
 16234                                  
 16235 0000B532 4889C7                  	mov rdi, rax
 16236 0000B535 E8F1590000              	call print_sexpr_if_not_void
 16237                                  
 16238 0000B53A 48B8-                   	mov rax,L_constants + 0
 16238 0000B53C [0000000000000000] 
 16239 0000B544 48890425[28040000]      	mov qword [free_var_133], rax
 16240 0000B54C 48B8-                   	mov rax, sob_void
 16240 0000B54E [0000000000000000] 
 16241                                  
 16242 0000B556 4889C7                  	mov rdi, rax
 16243 0000B559 E8CD590000              	call print_sexpr_if_not_void
 16244                                  
 16245 0000B55E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16246 0000B563 E8B2590000              	call malloc
 16247 0000B568 50                      	push rax
 16248 0000B569 BF00000000              	mov rdi, 8 * 0	; new rib
 16249 0000B56E E8A7590000              	call malloc
 16250 0000B573 50                      	push rax
 16251 0000B574 BF08000000              	mov rdi, 8 * 1	; extended env
 16252 0000B579 E89C590000              	call malloc
 16253 0000B57E 488B7D10                	mov rdi, ENV
 16254 0000B582 BE00000000              	mov rsi, 0
 16255 0000B587 BA01000000              	mov rdx, 1
 16256                                  .L_lambda_simple_env_loop_0102:	; ext_env[i + 1] <-- env[i]
 16257 0000B58C 4883FE00                	cmp rsi, 0
 16258 0000B590 7410                    	je .L_lambda_simple_env_end_0102
 16259 0000B592 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16260 0000B596 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16261 0000B59A 48FFC6                  	inc rsi
 16262 0000B59D 48FFC2                  	inc rdx
 16263 0000B5A0 EBEA                    	jmp .L_lambda_simple_env_loop_0102
 16264                                  .L_lambda_simple_env_end_0102:
 16265 0000B5A2 5B                      	pop rbx
 16266 0000B5A3 BE00000000              	mov rsi, 0
 16267                                  .L_lambda_simple_params_loop_0102:	; copy params
 16268 0000B5A8 4883FE00                	cmp rsi, 0
 16269 0000B5AC 740E                    	je .L_lambda_simple_params_end_0102
 16270 0000B5AE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16271 0000B5B3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16272 0000B5B7 48FFC6                  	inc rsi
 16273 0000B5BA EBEC                    	jmp .L_lambda_simple_params_loop_0102
 16274                                  .L_lambda_simple_params_end_0102:
 16275 0000B5BC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16276 0000B5BF 4889C3                  	mov rbx, rax
 16277 0000B5C2 58                      	pop rax
 16278 0000B5C3 C60005                  	mov byte [rax], T_closure
 16279 0000B5C6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16280 0000B5CA 48C74009[D7B50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0102
 16281 0000B5D2 E9DD0C0000              	jmp .L_lambda_simple_end_0102
 16282                                  .L_lambda_simple_code_0102:	; lambda-simple body
 16283 0000B5D7 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16284 0000B5DD 740B                    	je .L_lambda_simple_arity_check_ok_0102
 16285 0000B5DF FF742410                	push qword [rsp + 8 * 2]
 16286 0000B5E3 6A02                    	push 2
 16287 0000B5E5 E9E9580000              	jmp L_error_incorrect_arity_simple
 16288                                  .L_lambda_simple_arity_check_ok_0102:
 16289 0000B5EA C8000000                	enter 0, 0
 16290 0000B5EE 48B8-                   	 	mov rax,L_constants + 23
 16290 0000B5F0 [1700000000000000] 
 16291 0000B5F8 50                      	push rax
 16292                                  
 16293 0000B5F9 6A01                    	push 1
 16294 0000B5FB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16295 0000B600 E815590000              	call malloc
 16296 0000B605 50                      	push rax
 16297 0000B606 BF10000000              	mov rdi, 8 * 2	; new rib
 16298 0000B60B E80A590000              	call malloc
 16299 0000B610 50                      	push rax
 16300 0000B611 BF10000000              	mov rdi, 8 * 2	; extended env
 16301 0000B616 E8FF580000              	call malloc
 16302 0000B61B 488B7D10                	mov rdi, ENV
 16303 0000B61F BE00000000              	mov rsi, 0
 16304 0000B624 BA01000000              	mov rdx, 1
 16305                                  .L_lambda_simple_env_loop_0103:	; ext_env[i + 1] <-- env[i]
 16306 0000B629 4883FE01                	cmp rsi, 1
 16307 0000B62D 7410                    	je .L_lambda_simple_env_end_0103
 16308 0000B62F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16309 0000B633 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16310 0000B637 48FFC6                  	inc rsi
 16311 0000B63A 48FFC2                  	inc rdx
 16312 0000B63D EBEA                    	jmp .L_lambda_simple_env_loop_0103
 16313                                  .L_lambda_simple_env_end_0103:
 16314 0000B63F 5B                      	pop rbx
 16315 0000B640 BE00000000              	mov rsi, 0
 16316                                  .L_lambda_simple_params_loop_0103:	; copy params
 16317 0000B645 4883FE02                	cmp rsi, 2
 16318 0000B649 740E                    	je .L_lambda_simple_params_end_0103
 16319 0000B64B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16320 0000B650 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16321 0000B654 48FFC6                  	inc rsi
 16322 0000B657 EBEC                    	jmp .L_lambda_simple_params_loop_0103
 16323                                  .L_lambda_simple_params_end_0103:
 16324 0000B659 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16325 0000B65C 4889C3                  	mov rbx, rax
 16326 0000B65F 58                      	pop rax
 16327 0000B660 C60005                  	mov byte [rax], T_closure
 16328 0000B663 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16329 0000B667 48C74009[74B60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0103
 16330 0000B66F E9E90B0000              	jmp .L_lambda_simple_end_0103
 16331                                  .L_lambda_simple_code_0103:	; lambda-simple body
 16332 0000B674 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16333 0000B67A 740B                    	je .L_lambda_simple_arity_check_ok_0103
 16334 0000B67C FF742410                	push qword [rsp + 8 * 2]
 16335 0000B680 6A01                    	push 1
 16336 0000B682 E94C580000              	jmp L_error_incorrect_arity_simple
 16337                                  .L_lambda_simple_arity_check_ok_0103:
 16338 0000B687 C8000000                	enter 0, 0
 16339 0000B68B BF08000000              	mov rdi, 8
 16340 0000B690 E885580000              	call malloc
 16341 0000B695 488B5D20                	mov rbx, PARAM(0)
 16342 0000B699 488918                  	mov qword [rax], rbx
 16343 0000B69C 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 16344                                  
 16345 0000B6A0 48B8-                            	mov rax, sob_void
 16345 0000B6A2 [0000000000000000] 
 16346                                  
 16347 0000B6AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16348 0000B6AF E866580000              	call malloc
 16349 0000B6B4 50                      	push rax
 16350 0000B6B5 BF08000000              	mov rdi, 8 * 1	; new rib
 16351 0000B6BA E85B580000              	call malloc
 16352 0000B6BF 50                      	push rax
 16353 0000B6C0 BF18000000              	mov rdi, 8 * 3	; extended env
 16354 0000B6C5 E850580000              	call malloc
 16355 0000B6CA 488B7D10                	mov rdi, ENV
 16356 0000B6CE BE00000000              	mov rsi, 0
 16357 0000B6D3 BA01000000              	mov rdx, 1
 16358                                  .L_lambda_simple_env_loop_0104:	; ext_env[i + 1] <-- env[i]
 16359 0000B6D8 4883FE02                	cmp rsi, 2
 16360 0000B6DC 7410                    	je .L_lambda_simple_env_end_0104
 16361 0000B6DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16362 0000B6E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16363 0000B6E6 48FFC6                  	inc rsi
 16364 0000B6E9 48FFC2                  	inc rdx
 16365 0000B6EC EBEA                    	jmp .L_lambda_simple_env_loop_0104
 16366                                  .L_lambda_simple_env_end_0104:
 16367 0000B6EE 5B                      	pop rbx
 16368 0000B6EF BE00000000              	mov rsi, 0
 16369                                  .L_lambda_simple_params_loop_0104:	; copy params
 16370 0000B6F4 4883FE01                	cmp rsi, 1
 16371 0000B6F8 740E                    	je .L_lambda_simple_params_end_0104
 16372 0000B6FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16373 0000B6FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16374 0000B703 48FFC6                  	inc rsi
 16375 0000B706 EBEC                    	jmp .L_lambda_simple_params_loop_0104
 16376                                  .L_lambda_simple_params_end_0104:
 16377 0000B708 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16378 0000B70B 4889C3                  	mov rbx, rax
 16379 0000B70E 58                      	pop rax
 16380 0000B70F C60005                  	mov byte [rax], T_closure
 16381 0000B712 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16382 0000B716 48C74009[23B70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0104
 16383 0000B71E E95D020000              	jmp .L_lambda_simple_end_0104
 16384                                  .L_lambda_simple_code_0104:	; lambda-simple body
 16385 0000B723 48837C241005            	cmp qword [rsp + 8 * 2], 5
 16386 0000B729 740B                    	je .L_lambda_simple_arity_check_ok_0104
 16387 0000B72B FF742410                	push qword [rsp + 8 * 2]
 16388 0000B72F 6A05                    	push 5
 16389 0000B731 E99D570000              	jmp L_error_incorrect_arity_simple
 16390                                  .L_lambda_simple_arity_check_ok_0104:
 16391 0000B736 C8000000                	enter 0, 0
 16392 0000B73A 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 16393 0000B73E 50                      	push rax
 16394 0000B73F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16395 0000B743 50                      	push rax
 16396 0000B744 6A02                    	push 2
 16397 0000B746 488B0425[50030000]      	mov rax, qword [free_var_106]
 16398 0000B74E 803805                  	cmp byte [rax], T_closure 
 16399 0000B751 0F8578670000                    jne L_code_ptr_error
 16400                                  
 16401 0000B757 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16402                                  
 16403 0000B75B 53                              push rbx
 16404                                  
 16405 0000B75C FF5009                          call SOB_CLOSURE_CODE(rax)
 16406                                  
 16407                                          
 16408 0000B75F 483D[02000000]                  	cmp rax, sob_boolean_false
 16409                                  
 16410 0000B765 7427                            	je .L_if_else_0098
 16411 0000B767 488B4540                	mov rax ,qword[rbp + 8 * (4 + 4)]
 16412 0000B76B 50                      	push rax
 16413 0000B76C 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 16414 0000B770 50                      	push rax
 16415 0000B771 6A02                    	push 2
 16416 0000B773 488B0425[30030000]      	mov rax, qword [free_var_102]
 16417 0000B77B 803805                  	cmp byte [rax], T_closure 
 16418 0000B77E 0F854B670000                    jne L_code_ptr_error
 16419                                  
 16420 0000B784 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16421                                  
 16422 0000B788 53                              push rbx
 16423                                  
 16424 0000B789 FF5009                          call SOB_CLOSURE_CODE(rax)
 16425                                  
 16426                                          
 16427 0000B78C EB0A                            	jmp .L_if_end_0098
 16428                                  
 16429                                          	.L_if_else_0098:
 16430 0000B78E 48B8-                   	mov rax,L_constants + 2
 16430 0000B790 [0200000000000000] 
 16431                                  
 16432                                          	.L_if_end_0098:
 16433 0000B798 483D[02000000]          	cmp rax, sob_boolean_false
 16434 0000B79E 0F85D8010000            	jne .L_or_end_0011
 16435 0000B7A4 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 16436 0000B7A8 50                      	push rax
 16437 0000B7A9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16438 0000B7AD 50                      	push rax
 16439 0000B7AE 6A02                    	push 2
 16440 0000B7B0 488B0425[30030000]      	mov rax, qword [free_var_102]
 16441 0000B7B8 803805                  	cmp byte [rax], T_closure 
 16442 0000B7BB 0F850E670000                    jne L_code_ptr_error
 16443                                  
 16444 0000B7C1 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16445                                  
 16446 0000B7C5 53                              push rbx
 16447                                  
 16448 0000B7C6 FF5009                          call SOB_CLOSURE_CODE(rax)
 16449                                  
 16450                                          
 16451 0000B7C9 483D[02000000]                  	cmp rax, sob_boolean_false
 16452                                  
 16453 0000B7CF 0F849D010000                    	je .L_if_else_0099
 16454 0000B7D5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16455 0000B7D9 50                      	push rax
 16456 0000B7DA 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 16457 0000B7DE 50                      	push rax
 16458 0000B7DF 6A02                    	push 2
 16459 0000B7E1 488B0425[78010000]      	mov rax, qword [free_var_47]
 16460 0000B7E9 803805                  	cmp byte [rax], T_closure 
 16461 0000B7EC 0F85DD660000                    jne L_code_ptr_error
 16462                                  
 16463 0000B7F2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16464                                  
 16465 0000B7F6 53                              push rbx
 16466                                  
 16467 0000B7F7 FF5009                          call SOB_CLOSURE_CODE(rax)
 16468                                  
 16469 0000B7FA 50                              	push rax
 16470 0000B7FB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16471 0000B7FF 50                      	push rax
 16472 0000B800 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16473 0000B804 50                      	push rax
 16474 0000B805 6A02                    	push 2
 16475 0000B807 488B0425[78010000]      	mov rax, qword [free_var_47]
 16476 0000B80F 803805                  	cmp byte [rax], T_closure 
 16477 0000B812 0F85B7660000                    jne L_code_ptr_error
 16478                                  
 16479 0000B818 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16480                                  
 16481 0000B81C 53                              push rbx
 16482                                  
 16483 0000B81D FF5009                          call SOB_CLOSURE_CODE(rax)
 16484                                  
 16485 0000B820 50                              	push rax
 16486 0000B821 6A02                    	push 2
 16487 0000B823 488B4510                	mov rax, qword [rbp + 8 * 2]
 16488                                  
 16489 0000B827 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16490                                  
 16491 0000B82B 488B00                                            	mov rax, qword[rax + 8 * 0]
 16492 0000B82E 803805                  	cmp byte [rax], T_closure 
 16493 0000B831 0F8598660000                    jne L_code_ptr_error
 16494                                  
 16495 0000B837 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16496                                  
 16497 0000B83B 53                              push rbx
 16498                                  
 16499 0000B83C FF5009                          call SOB_CLOSURE_CODE(rax)
 16500                                  
 16501 0000B83F 483D[02000000]                  	cmp rax, sob_boolean_false
 16502 0000B845 0F8525010000            	jne .L_or_end_0012
 16503 0000B84B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16504 0000B84F 50                      	push rax
 16505 0000B850 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 16506 0000B854 50                      	push rax
 16507 0000B855 6A02                    	push 2
 16508 0000B857 488B0425[78010000]      	mov rax, qword [free_var_47]
 16509 0000B85F 803805                  	cmp byte [rax], T_closure 
 16510 0000B862 0F8567660000                    jne L_code_ptr_error
 16511                                  
 16512 0000B868 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16513                                  
 16514 0000B86C 53                              push rbx
 16515                                  
 16516 0000B86D FF5009                          call SOB_CLOSURE_CODE(rax)
 16517                                  
 16518 0000B870 50                              	push rax
 16519 0000B871 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16520 0000B875 50                      	push rax
 16521 0000B876 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16522 0000B87A 50                      	push rax
 16523 0000B87B 6A02                    	push 2
 16524 0000B87D 488B0425[78010000]      	mov rax, qword [free_var_47]
 16525 0000B885 803805                  	cmp byte [rax], T_closure 
 16526 0000B888 0F8541660000                    jne L_code_ptr_error
 16527                                  
 16528 0000B88E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16529                                  
 16530 0000B892 53                              push rbx
 16531                                  
 16532 0000B893 FF5009                          call SOB_CLOSURE_CODE(rax)
 16533                                  
 16534 0000B896 50                              	push rax
 16535 0000B897 6A02                    	push 2
 16536 0000B899 488B4510                	mov rax, qword [rbp + 8 * 2]
 16537                                  
 16538 0000B89D 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16539                                  
 16540 0000B8A1 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16541 0000B8A5 803805                  	cmp byte [rax], T_closure 
 16542 0000B8A8 0F8521660000                    jne L_code_ptr_error
 16543                                  
 16544 0000B8AE 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16545                                  
 16546 0000B8B2 53                              push rbx
 16547                                  
 16548 0000B8B3 FF5009                          call SOB_CLOSURE_CODE(rax)
 16549                                  
 16550                                          
 16551 0000B8B6 483D[02000000]                  	cmp rax, sob_boolean_false
 16552                                  
 16553 0000B8BC 0F84A4000000                    	je .L_if_else_009a
 16554 0000B8C2 488B4540                	 	mov rax ,qword[rbp + 8 * (4 + 4)]
 16555 0000B8C6 50                      	push rax
 16556 0000B8C7 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 16557 0000B8CB 50                      	push rax
 16558 0000B8CC 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 16559 0000B8D0 50                      	push rax
 16560 0000B8D1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16561 0000B8D5 50                      	push rax
 16562 0000B8D6 48B8-                   	mov rax,L_constants + 128
 16562 0000B8D8 [8000000000000000] 
 16563 0000B8E0 50                      	push rax
 16564 0000B8E1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16565 0000B8E5 50                      	push rax
 16566 0000B8E6 6A02                    	push 2
 16567 0000B8E8 488B0425[08030000]      	mov rax, qword [free_var_97]
 16568 0000B8F0 803805                  	cmp byte [rax], T_closure 
 16569 0000B8F3 0F85D6650000                    jne L_code_ptr_error
 16570                                  
 16571 0000B8F9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16572                                  
 16573 0000B8FD 53                              push rbx
 16574                                  
 16575 0000B8FE FF5009                          call SOB_CLOSURE_CODE(rax)
 16576                                  
 16577 0000B901 50                              	push rax
 16578                                  
 16579 0000B902 6A05                    	push 5
 16580 0000B904 488B4510                	mov rax, qword [rbp + 8 * 2]
 16581                                  
 16582 0000B908 488B00                                            	mov rax, qword[rax + 8 * 0]
 16583                                  
 16584 0000B90B 488B00                                            	mov rax, qword[rax + 8 * 0]
 16585 0000B90E 488B00                  	mov rax, qword [rax]
 16586                                  	assert_closure(rax)
    42 0000B911 803805              <1>  cmp byte [%1], %2
    43 0000B914 0F85F46D0000        <1>  jne L_error_incorrect_type
 16587 0000B91A 50                      	push rax 
 16588 0000B91B FF7508                  	push qword [rbp + 8]
 16589 0000B91E FF7500                  	push qword [rbp]
 16590 0000B921 4883C308                	add rbx ,8*1
 16591                                  	 .L_fix_stack_label_0137:
 16592 0000B925 488B5518                	mov rdx, qword[rbp+8*3]
 16593 0000B929 4883C203                	add rdx, 3
 16594 0000B92D 48C1E203                	shl rdx, 3
 16595 0000B931 4889EF                  	mov rdi, rbp
 16596 0000B934 4801D7                  	add rdi, rdx
 16597 0000B937 4C8B4500                	mov r8, qword[rbp]
 16598 0000B93B 4889E9                  	mov rcx, rbp
 16599 0000B93E 4883E908                	sub rcx, 8
 16600                                  	 .L_loop_fix_stuck_0137:
 16601 0000B942 4839CC                  	cmp rsp, rcx
 16602 0000B945 7710                    ja .L_loop_fix_stuck_end_0137
 16603 0000B947 488B19                   	mov rbx, qword[rcx]
 16604 0000B94A 48891F                  	 mov qword[rdi], rbx
 16605 0000B94D 4883EF08                	sub rdi, 8
 16606 0000B951 4883E908                	sub rcx, 8
 16607 0000B955 EBEB                    jmp .L_loop_fix_stuck_0137
 16608                                  	 .L_loop_fix_stuck_end_0137:
 16609 0000B957 4883C708                	add rdi, 8
 16610 0000B95B 4889FC                  	 mov rsp, rdi
 16611 0000B95E 4C89C5                  	mov rbp, r8
 16612 0000B961 5D                      	pop rbp
 16613 0000B962 FFE0                    	jmp rax 
 16614                                  
 16615 0000B964 EB0A                            	jmp .L_if_end_009a
 16616                                  
 16617                                          	.L_if_else_009a:
 16618 0000B966 48B8-                   	mov rax,L_constants + 2
 16618 0000B968 [0200000000000000] 
 16619                                  
 16620                                          	.L_if_end_009a:
 16621                                  .L_or_end_0012:
 16622                                  
 16623 0000B970 EB0A                            	jmp .L_if_end_0099
 16624                                  
 16625                                          	.L_if_else_0099:
 16626 0000B972 48B8-                   	mov rax,L_constants + 2
 16626 0000B974 [0200000000000000] 
 16627                                  
 16628                                          	.L_if_end_0099:
 16629                                  .L_or_end_0011:
 16630 0000B97C C9                      	leave
 16631 0000B97D C23800                  	ret 8 * (2 + 5)
 16632                                  .L_lambda_simple_end_0104:	; new closure is in rax
 16633 0000B980 50                      	push rax
 16634 0000B981 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16635 0000B985 8F00                    	pop qword [rax]
 16636 0000B987 48B8-                   	mov rax, sob_void
 16636 0000B989 [0000000000000000] 
 16637                                  
 16638 0000B991 BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 16639 0000B996 E87F550000              	call malloc
 16640 0000B99B 50                      	push rax
 16641 0000B99C BF08000000              	mov rdi, 8 * 1	; new rib
 16642 0000B9A1 E874550000              	call malloc
 16643 0000B9A6 50                      	push rax
 16644 0000B9A7 BF18000000              	mov rdi, 8 * 3	; extended env
 16645 0000B9AC E869550000              	call malloc
 16646 0000B9B1 488B7D10                	mov rdi, ENV
 16647 0000B9B5 BE00000000              	mov rsi, 0
 16648 0000B9BA BA01000000              	mov rdx, 1
 16649                                  .L_lambda_simple_env_loop_0105:	; ext_env[i + 1] <-- env[i]
 16650 0000B9BF 4883FE02                	cmp rsi, 2
 16651 0000B9C3 7410                    	je .L_lambda_simple_env_end_0105
 16652 0000B9C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16653 0000B9C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16654 0000B9CD 48FFC6                  	inc rsi
 16655 0000B9D0 48FFC2                  	inc rdx
 16656 0000B9D3 EBEA                    	jmp .L_lambda_simple_env_loop_0105
 16657                                  .L_lambda_simple_env_end_0105:
 16658 0000B9D5 5B                      	pop rbx
 16659 0000B9D6 BE00000000              	mov rsi, 0
 16660                                  .L_lambda_simple_params_loop_0105:	; copy params
 16661 0000B9DB 4883FE01                	cmp rsi, 1
 16662 0000B9DF 740E                    	je .L_lambda_simple_params_end_0105
 16663 0000B9E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16664 0000B9E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16665 0000B9EA 48FFC6                  	inc rsi
 16666 0000B9ED EBEC                    	jmp .L_lambda_simple_params_loop_0105
 16667                                  .L_lambda_simple_params_end_0105:
 16668 0000B9EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16669 0000B9F2 4889C3                  	mov rbx, rax
 16670 0000B9F5 58                      	pop rax
 16671 0000B9F6 C60005                  	mov byte [rax], T_closure
 16672 0000B9F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16673 0000B9FD 48C74009[0ABA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0105
 16674 0000BA05 E99A020000              	jmp .L_lambda_simple_end_0105
 16675                                  .L_lambda_simple_code_0105:	; lambda-simple body
 16676 0000BA0A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16677 0000BA10 740B                    	je .L_lambda_simple_arity_check_ok_0105
 16678 0000BA12 FF742410                	push qword [rsp + 8 * 2]
 16679 0000BA16 6A02                    	push 2
 16680 0000BA18 E9B6540000              	jmp L_error_incorrect_arity_simple
 16681                                  .L_lambda_simple_arity_check_ok_0105:
 16682 0000BA1D C8000000                	enter 0, 0
 16683 0000BA21 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 16684 0000BA25 50                      	push rax
 16685 0000BA26 6A01                    	push 1
 16686 0000BA28 488B0425[90000000]      	mov rax, qword [free_var_18]
 16687 0000BA30 803805                  	cmp byte [rax], T_closure 
 16688 0000BA33 0F8596640000                    jne L_code_ptr_error
 16689                                  
 16690 0000BA39 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16691                                  
 16692 0000BA3D 53                              push rbx
 16693                                  
 16694 0000BA3E FF5009                          call SOB_CLOSURE_CODE(rax)
 16695                                  
 16696 0000BA41 50                              	push rax
 16697 0000BA42 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16698 0000BA46 50                      	push rax
 16699 0000BA47 6A01                    	push 1
 16700 0000BA49 488B0425[90000000]      	mov rax, qword [free_var_18]
 16701 0000BA51 803805                  	cmp byte [rax], T_closure 
 16702 0000BA54 0F8575640000                    jne L_code_ptr_error
 16703                                  
 16704 0000BA5A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16705                                  
 16706 0000BA5E 53                              push rbx
 16707                                  
 16708 0000BA5F FF5009                          call SOB_CLOSURE_CODE(rax)
 16709                                  
 16710 0000BA62 50                              	push rax
 16711                                  
 16712 0000BA63 6A02                    	push 2
 16713 0000BA65 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16714 0000BA6A E8AB540000              	call malloc
 16715 0000BA6F 50                      	push rax
 16716 0000BA70 BF10000000              	mov rdi, 8 * 2	; new rib
 16717 0000BA75 E8A0540000              	call malloc
 16718 0000BA7A 50                      	push rax
 16719 0000BA7B BF20000000              	mov rdi, 8 * 4	; extended env
 16720 0000BA80 E895540000              	call malloc
 16721 0000BA85 488B7D10                	mov rdi, ENV
 16722 0000BA89 BE00000000              	mov rsi, 0
 16723 0000BA8E BA01000000              	mov rdx, 1
 16724                                  .L_lambda_simple_env_loop_0106:	; ext_env[i + 1] <-- env[i]
 16725 0000BA93 4883FE03                	cmp rsi, 3
 16726 0000BA97 7410                    	je .L_lambda_simple_env_end_0106
 16727 0000BA99 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16728 0000BA9D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16729 0000BAA1 48FFC6                  	inc rsi
 16730 0000BAA4 48FFC2                  	inc rdx
 16731 0000BAA7 EBEA                    	jmp .L_lambda_simple_env_loop_0106
 16732                                  .L_lambda_simple_env_end_0106:
 16733 0000BAA9 5B                      	pop rbx
 16734 0000BAAA BE00000000              	mov rsi, 0
 16735                                  .L_lambda_simple_params_loop_0106:	; copy params
 16736 0000BAAF 4883FE02                	cmp rsi, 2
 16737 0000BAB3 740E                    	je .L_lambda_simple_params_end_0106
 16738 0000BAB5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16739 0000BABA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16740 0000BABE 48FFC6                  	inc rsi
 16741 0000BAC1 EBEC                    	jmp .L_lambda_simple_params_loop_0106
 16742                                  .L_lambda_simple_params_end_0106:
 16743 0000BAC3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16744 0000BAC6 4889C3                  	mov rbx, rax
 16745 0000BAC9 58                      	pop rax
 16746 0000BACA C60005                  	mov byte [rax], T_closure
 16747 0000BACD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16748 0000BAD1 48C74009[DEBA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0106
 16749 0000BAD9 E96F010000              	jmp .L_lambda_simple_end_0106
 16750                                  .L_lambda_simple_code_0106:	; lambda-simple body
 16751 0000BADE 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16752 0000BAE4 740B                    	je .L_lambda_simple_arity_check_ok_0106
 16753 0000BAE6 FF742410                	push qword [rsp + 8 * 2]
 16754 0000BAEA 6A02                    	push 2
 16755 0000BAEC E9E2530000              	jmp L_error_incorrect_arity_simple
 16756                                  .L_lambda_simple_arity_check_ok_0106:
 16757 0000BAF1 C8000000                	enter 0, 0
 16758 0000BAF5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16759 0000BAF9 50                      	push rax
 16760 0000BAFA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16761 0000BAFE 50                      	push rax
 16762 0000BAFF 6A02                    	push 2
 16763 0000BB01 488B0425[38030000]      	mov rax, qword [free_var_103]
 16764 0000BB09 803805                  	cmp byte [rax], T_closure 
 16765 0000BB0C 0F85BD630000                    jne L_code_ptr_error
 16766                                  
 16767 0000BB12 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 16768                                  
 16769 0000BB16 53                              push rbx
 16770                                  
 16771 0000BB17 FF5009                          call SOB_CLOSURE_CODE(rax)
 16772                                  
 16773                                          
 16774 0000BB1A 483D[02000000]                  	cmp rax, sob_boolean_false
 16775                                  
 16776 0000BB20 0F8494000000                    	je .L_if_else_009b
 16777 0000BB26 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 16778 0000BB2A 50                      	push rax
 16779 0000BB2B 488B4510                	mov rax, qword [rbp + 8 * 2]
 16780                                  
 16781 0000BB2F 488B00                                            	mov rax, qword[rax + 8 * 0]
 16782                                  
 16783 0000BB32 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16784 0000BB36 50                      	push rax
 16785 0000BB37 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16786 0000BB3B 50                      	push rax
 16787 0000BB3C 488B4510                	mov rax, qword [rbp + 8 * 2]
 16788                                  
 16789 0000BB40 488B00                                            	mov rax, qword[rax + 8 * 0]
 16790                                  
 16791 0000BB43 488B00                                            	mov rax, qword[rax + 8 * 0]
 16792 0000BB46 50                      	push rax
 16793 0000BB47 48B8-                   	mov rax,L_constants + 32
 16793 0000BB49 [2000000000000000] 
 16794 0000BB51 50                      	push rax
 16795                                  
 16796 0000BB52 6A05                    	push 5
 16797 0000BB54 488B4510                	mov rax, qword [rbp + 8 * 2]
 16798                                  
 16799 0000BB58 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16800                                  
 16801 0000BB5C 488B00                                            	mov rax, qword[rax + 8 * 0]
 16802 0000BB5F 488B00                  	mov rax, qword [rax]
 16803                                  	assert_closure(rax)
    42 0000BB62 803805              <1>  cmp byte [%1], %2
    43 0000BB65 0F85A36B0000        <1>  jne L_error_incorrect_type
 16804 0000BB6B 50                      	push rax 
 16805 0000BB6C FF7508                  	push qword [rbp + 8]
 16806 0000BB6F FF7500                  	push qword [rbp]
 16807 0000BB72 4883C308                	add rbx ,8*1
 16808                                  	 .L_fix_stack_label_013a:
 16809 0000BB76 488B5518                	mov rdx, qword[rbp+8*3]
 16810 0000BB7A 4883C203                	add rdx, 3
 16811 0000BB7E 48C1E203                	shl rdx, 3
 16812 0000BB82 4889EF                  	mov rdi, rbp
 16813 0000BB85 4801D7                  	add rdi, rdx
 16814 0000BB88 4C8B4500                	mov r8, qword[rbp]
 16815 0000BB8C 4889E9                  	mov rcx, rbp
 16816 0000BB8F 4883E908                	sub rcx, 8
 16817                                  	 .L_loop_fix_stuck_013a:
 16818 0000BB93 4839CC                  	cmp rsp, rcx
 16819 0000BB96 7710                    ja .L_loop_fix_stuck_end_013a
 16820 0000BB98 488B19                   	mov rbx, qword[rcx]
 16821 0000BB9B 48891F                  	 mov qword[rdi], rbx
 16822 0000BB9E 4883EF08                	sub rdi, 8
 16823 0000BBA2 4883E908                	sub rcx, 8
 16824 0000BBA6 EBEB                    jmp .L_loop_fix_stuck_013a
 16825                                  	 .L_loop_fix_stuck_end_013a:
 16826 0000BBA8 4883C708                	add rdi, 8
 16827 0000BBAC 4889FC                  	 mov rsp, rdi
 16828 0000BBAF 4C89C5                  	mov rbp, r8
 16829 0000BBB2 5D                      	pop rbp
 16830 0000BBB3 FFE0                    	jmp rax 
 16831                                  
 16832 0000BBB5 E98F000000                      	jmp .L_if_end_009b
 16833                                  
 16834                                          	.L_if_else_009b:
 16835 0000BBBA 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 16836 0000BBBE 50                      	push rax
 16837 0000BBBF 488B4510                	mov rax, qword [rbp + 8 * 2]
 16838                                  
 16839 0000BBC3 488B00                                            	mov rax, qword[rax + 8 * 0]
 16840                                  
 16841 0000BBC6 488B00                                            	mov rax, qword[rax + 8 * 0]
 16842 0000BBC9 50                      	push rax
 16843 0000BBCA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16844 0000BBCE 50                      	push rax
 16845 0000BBCF 488B4510                	mov rax, qword [rbp + 8 * 2]
 16846                                  
 16847 0000BBD3 488B00                                            	mov rax, qword[rax + 8 * 0]
 16848                                  
 16849 0000BBD6 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16850 0000BBDA 50                      	push rax
 16851 0000BBDB 48B8-                   	mov rax,L_constants + 32
 16851 0000BBDD [2000000000000000] 
 16852 0000BBE5 50                      	push rax
 16853                                  
 16854 0000BBE6 6A05                    	push 5
 16855 0000BBE8 488B4510                	mov rax, qword [rbp + 8 * 2]
 16856                                  
 16857 0000BBEC 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16858                                  
 16859 0000BBF0 488B00                                            	mov rax, qword[rax + 8 * 0]
 16860 0000BBF3 488B00                  	mov rax, qword [rax]
 16861                                  	assert_closure(rax)
    42 0000BBF6 803805              <1>  cmp byte [%1], %2
    43 0000BBF9 0F850F6B0000        <1>  jne L_error_incorrect_type
 16862 0000BBFF 50                      	push rax 
 16863 0000BC00 FF7508                  	push qword [rbp + 8]
 16864 0000BC03 FF7500                  	push qword [rbp]
 16865 0000BC06 4883C308                	add rbx ,8*1
 16866                                  	 .L_fix_stack_label_0139:
 16867 0000BC0A 488B5518                	mov rdx, qword[rbp+8*3]
 16868 0000BC0E 4883C203                	add rdx, 3
 16869 0000BC12 48C1E203                	shl rdx, 3
 16870 0000BC16 4889EF                  	mov rdi, rbp
 16871 0000BC19 4801D7                  	add rdi, rdx
 16872 0000BC1C 4C8B4500                	mov r8, qword[rbp]
 16873 0000BC20 4889E9                  	mov rcx, rbp
 16874 0000BC23 4883E908                	sub rcx, 8
 16875                                  	 .L_loop_fix_stuck_0139:
 16876 0000BC27 4839CC                  	cmp rsp, rcx
 16877 0000BC2A 7710                    ja .L_loop_fix_stuck_end_0139
 16878 0000BC2C 488B19                   	mov rbx, qword[rcx]
 16879 0000BC2F 48891F                  	 mov qword[rdi], rbx
 16880 0000BC32 4883EF08                	sub rdi, 8
 16881 0000BC36 4883E908                	sub rcx, 8
 16882 0000BC3A EBEB                    jmp .L_loop_fix_stuck_0139
 16883                                  	 .L_loop_fix_stuck_end_0139:
 16884 0000BC3C 4883C708                	add rdi, 8
 16885 0000BC40 4889FC                  	 mov rsp, rdi
 16886 0000BC43 4C89C5                  	mov rbp, r8
 16887 0000BC46 5D                      	pop rbp
 16888 0000BC47 FFE0                    	jmp rax 
 16889                                  
 16890                                          	.L_if_end_009b:
 16891 0000BC49 C9                      	leave
 16892 0000BC4A C22000                  	ret 8 * (2 + 2)
 16893                                  .L_lambda_simple_end_0106:	; new closure is in rax
 16894                                  	assert_closure(rax)
    42 0000BC4D 803805              <1>  cmp byte [%1], %2
    43 0000BC50 0F85B86A0000        <1>  jne L_error_incorrect_type
 16895 0000BC56 50                      	push rax 
 16896 0000BC57 FF7508                  	push qword [rbp + 8]
 16897 0000BC5A FF7500                  	push qword [rbp]
 16898 0000BC5D 4883C308                	add rbx ,8*1
 16899                                  	 .L_fix_stack_label_0138:
 16900 0000BC61 488B5518                	mov rdx, qword[rbp+8*3]
 16901 0000BC65 4883C203                	add rdx, 3
 16902 0000BC69 48C1E203                	shl rdx, 3
 16903 0000BC6D 4889EF                  	mov rdi, rbp
 16904 0000BC70 4801D7                  	add rdi, rdx
 16905 0000BC73 4C8B4500                	mov r8, qword[rbp]
 16906 0000BC77 4889E9                  	mov rcx, rbp
 16907 0000BC7A 4883E908                	sub rcx, 8
 16908                                  	 .L_loop_fix_stuck_0138:
 16909 0000BC7E 4839CC                  	cmp rsp, rcx
 16910 0000BC81 7710                    ja .L_loop_fix_stuck_end_0138
 16911 0000BC83 488B19                   	mov rbx, qword[rcx]
 16912 0000BC86 48891F                  	 mov qword[rdi], rbx
 16913 0000BC89 4883EF08                	sub rdi, 8
 16914 0000BC8D 4883E908                	sub rcx, 8
 16915 0000BC91 EBEB                    jmp .L_loop_fix_stuck_0138
 16916                                  	 .L_loop_fix_stuck_end_0138:
 16917 0000BC93 4883C708                	add rdi, 8
 16918 0000BC97 4889FC                  	 mov rsp, rdi
 16919 0000BC9A 4C89C5                  	mov rbp, r8
 16920 0000BC9D 5D                      	pop rbp
 16921 0000BC9E FFE0                    	jmp rax 
 16922 0000BCA0 C9                      	leave
 16923 0000BCA1 C22000                  	ret 8 * (2 + 2)
 16924                                  .L_lambda_simple_end_0105:	; new closure is in rax
 16925 0000BCA4 50                      	push rax
 16926                                  
 16927 0000BCA5 6A01                    	push 1
 16928 0000BCA7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16929 0000BCAC E869520000              	call malloc
 16930 0000BCB1 50                      	push rax
 16931 0000BCB2 BF08000000              	mov rdi, 8 * 1	; new rib
 16932 0000BCB7 E85E520000              	call malloc
 16933 0000BCBC 50                      	push rax
 16934 0000BCBD BF18000000              	mov rdi, 8 * 3	; extended env
 16935 0000BCC2 E853520000              	call malloc
 16936 0000BCC7 488B7D10                	mov rdi, ENV
 16937 0000BCCB BE00000000              	mov rsi, 0
 16938 0000BCD0 BA01000000              	mov rdx, 1
 16939                                  .L_lambda_simple_env_loop_0107:	; ext_env[i + 1] <-- env[i]
 16940 0000BCD5 4883FE02                	cmp rsi, 2
 16941 0000BCD9 7410                    	je .L_lambda_simple_env_end_0107
 16942 0000BCDB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16943 0000BCDF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16944 0000BCE3 48FFC6                  	inc rsi
 16945 0000BCE6 48FFC2                  	inc rdx
 16946 0000BCE9 EBEA                    	jmp .L_lambda_simple_env_loop_0107
 16947                                  .L_lambda_simple_env_end_0107:
 16948 0000BCEB 5B                      	pop rbx
 16949 0000BCEC BE00000000              	mov rsi, 0
 16950                                  .L_lambda_simple_params_loop_0107:	; copy params
 16951 0000BCF1 4883FE01                	cmp rsi, 1
 16952 0000BCF5 740E                    	je .L_lambda_simple_params_end_0107
 16953 0000BCF7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16954 0000BCFC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16955 0000BD00 48FFC6                  	inc rsi
 16956 0000BD03 EBEC                    	jmp .L_lambda_simple_params_loop_0107
 16957                                  .L_lambda_simple_params_end_0107:
 16958 0000BD05 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16959 0000BD08 4889C3                  	mov rbx, rax
 16960 0000BD0B 58                      	pop rax
 16961 0000BD0C C60005                  	mov byte [rax], T_closure
 16962 0000BD0F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16963 0000BD13 48C74009[20BD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0107
 16964 0000BD1B E9E6040000              	jmp .L_lambda_simple_end_0107
 16965                                  .L_lambda_simple_code_0107:	; lambda-simple body
 16966 0000BD20 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16967 0000BD26 740B                    	je .L_lambda_simple_arity_check_ok_0107
 16968 0000BD28 FF742410                	push qword [rsp + 8 * 2]
 16969 0000BD2C 6A01                    	push 1
 16970 0000BD2E E9A0510000              	jmp L_error_incorrect_arity_simple
 16971                                  .L_lambda_simple_arity_check_ok_0107:
 16972 0000BD33 C8000000                	enter 0, 0
 16973 0000BD37 48B8-                   	 	mov rax,L_constants + 23
 16973 0000BD39 [1700000000000000] 
 16974 0000BD41 50                      	push rax
 16975                                  
 16976 0000BD42 6A01                    	push 1
 16977 0000BD44 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16978 0000BD49 E8CC510000              	call malloc
 16979 0000BD4E 50                      	push rax
 16980 0000BD4F BF08000000              	mov rdi, 8 * 1	; new rib
 16981 0000BD54 E8C1510000              	call malloc
 16982 0000BD59 50                      	push rax
 16983 0000BD5A BF20000000              	mov rdi, 8 * 4	; extended env
 16984 0000BD5F E8B6510000              	call malloc
 16985 0000BD64 488B7D10                	mov rdi, ENV
 16986 0000BD68 BE00000000              	mov rsi, 0
 16987 0000BD6D BA01000000              	mov rdx, 1
 16988                                  .L_lambda_simple_env_loop_0108:	; ext_env[i + 1] <-- env[i]
 16989 0000BD72 4883FE03                	cmp rsi, 3
 16990 0000BD76 7410                    	je .L_lambda_simple_env_end_0108
 16991 0000BD78 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16992 0000BD7C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16993 0000BD80 48FFC6                  	inc rsi
 16994 0000BD83 48FFC2                  	inc rdx
 16995 0000BD86 EBEA                    	jmp .L_lambda_simple_env_loop_0108
 16996                                  .L_lambda_simple_env_end_0108:
 16997 0000BD88 5B                      	pop rbx
 16998 0000BD89 BE00000000              	mov rsi, 0
 16999                                  .L_lambda_simple_params_loop_0108:	; copy params
 17000 0000BD8E 4883FE01                	cmp rsi, 1
 17001 0000BD92 740E                    	je .L_lambda_simple_params_end_0108
 17002 0000BD94 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17003 0000BD99 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17004 0000BD9D 48FFC6                  	inc rsi
 17005 0000BDA0 EBEC                    	jmp .L_lambda_simple_params_loop_0108
 17006                                  .L_lambda_simple_params_end_0108:
 17007 0000BDA2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17008 0000BDA5 4889C3                  	mov rbx, rax
 17009 0000BDA8 58                      	pop rax
 17010 0000BDA9 C60005                  	mov byte [rax], T_closure
 17011 0000BDAC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17012 0000BDB0 48C74009[BDBD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0108
 17013 0000BDB8 E9F2030000              	jmp .L_lambda_simple_end_0108
 17014                                  .L_lambda_simple_code_0108:	; lambda-simple body
 17015 0000BDBD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17016 0000BDC3 740B                    	je .L_lambda_simple_arity_check_ok_0108
 17017 0000BDC5 FF742410                	push qword [rsp + 8 * 2]
 17018 0000BDC9 6A01                    	push 1
 17019 0000BDCB E903510000              	jmp L_error_incorrect_arity_simple
 17020                                  .L_lambda_simple_arity_check_ok_0108:
 17021 0000BDD0 C8000000                	enter 0, 0
 17022 0000BDD4 BF08000000              	mov rdi, 8
 17023 0000BDD9 E83C510000              	call malloc
 17024 0000BDDE 488B5D20                	mov rbx, PARAM(0)
 17025 0000BDE2 488918                  	mov qword [rax], rbx
 17026 0000BDE5 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17027                                  
 17028 0000BDE9 48B8-                            	mov rax, sob_void
 17028 0000BDEB [0000000000000000] 
 17029                                  
 17030 0000BDF3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17031 0000BDF8 E81D510000              	call malloc
 17032 0000BDFD 50                      	push rax
 17033 0000BDFE BF08000000              	mov rdi, 8 * 1	; new rib
 17034 0000BE03 E812510000              	call malloc
 17035 0000BE08 50                      	push rax
 17036 0000BE09 BF28000000              	mov rdi, 8 * 5	; extended env
 17037 0000BE0E E807510000              	call malloc
 17038 0000BE13 488B7D10                	mov rdi, ENV
 17039 0000BE17 BE00000000              	mov rsi, 0
 17040 0000BE1C BA01000000              	mov rdx, 1
 17041                                  .L_lambda_simple_env_loop_0109:	; ext_env[i + 1] <-- env[i]
 17042 0000BE21 4883FE04                	cmp rsi, 4
 17043 0000BE25 7410                    	je .L_lambda_simple_env_end_0109
 17044 0000BE27 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17045 0000BE2B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17046 0000BE2F 48FFC6                  	inc rsi
 17047 0000BE32 48FFC2                  	inc rdx
 17048 0000BE35 EBEA                    	jmp .L_lambda_simple_env_loop_0109
 17049                                  .L_lambda_simple_env_end_0109:
 17050 0000BE37 5B                      	pop rbx
 17051 0000BE38 BE00000000              	mov rsi, 0
 17052                                  .L_lambda_simple_params_loop_0109:	; copy params
 17053 0000BE3D 4883FE01                	cmp rsi, 1
 17054 0000BE41 740E                    	je .L_lambda_simple_params_end_0109
 17055 0000BE43 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17056 0000BE48 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17057 0000BE4C 48FFC6                  	inc rsi
 17058 0000BE4F EBEC                    	jmp .L_lambda_simple_params_loop_0109
 17059                                  .L_lambda_simple_params_end_0109:
 17060 0000BE51 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17061 0000BE54 4889C3                  	mov rbx, rax
 17062 0000BE57 58                      	pop rax
 17063 0000BE58 C60005                  	mov byte [rax], T_closure
 17064 0000BE5B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17065 0000BE5F 48C74009[6CBE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0109
 17066 0000BE67 E947010000              	jmp .L_lambda_simple_end_0109
 17067                                  .L_lambda_simple_code_0109:	; lambda-simple body
 17068 0000BE6C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17069 0000BE72 740B                    	je .L_lambda_simple_arity_check_ok_0109
 17070 0000BE74 FF742410                	push qword [rsp + 8 * 2]
 17071 0000BE78 6A02                    	push 2
 17072 0000BE7A E954500000              	jmp L_error_incorrect_arity_simple
 17073                                  .L_lambda_simple_arity_check_ok_0109:
 17074 0000BE7F C8000000                	enter 0, 0
 17075 0000BE83 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17076 0000BE87 50                      	push rax
 17077 0000BE88 6A01                    	push 1
 17078 0000BE8A 488B0425[00000000]      	mov rax, qword [free_var_0]
 17079 0000BE92 803805                  	cmp byte [rax], T_closure 
 17080 0000BE95 0F8534600000                    jne L_code_ptr_error
 17081                                  
 17082 0000BE9B 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17083                                  
 17084 0000BE9F 53                              push rbx
 17085                                  
 17086 0000BEA0 FF5009                          call SOB_CLOSURE_CODE(rax)
 17087                                  
 17088 0000BEA3 483D[02000000]                  	cmp rax, sob_boolean_false
 17089 0000BEA9 0F8500010000            	jne .L_or_end_0013
 17090 0000BEAF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17091 0000BEB3 50                      	push rax
 17092 0000BEB4 6A01                    	push 1
 17093 0000BEB6 488B0425[80000000]      	mov rax, qword [free_var_16]
 17094 0000BEBE 803805                  	cmp byte [rax], T_closure 
 17095 0000BEC1 0F8508600000                    jne L_code_ptr_error
 17096                                  
 17097 0000BEC7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17098                                  
 17099 0000BECB 53                              push rbx
 17100                                  
 17101 0000BECC FF5009                          call SOB_CLOSURE_CODE(rax)
 17102                                  
 17103 0000BECF 50                              	push rax
 17104 0000BED0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17105 0000BED4 50                      	push rax
 17106 0000BED5 6A02                    	push 2
 17107 0000BED7 488B4510                	mov rax, qword [rbp + 8 * 2]
 17108                                  
 17109 0000BEDB 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17110                                  
 17111 0000BEDF 488B00                                            	mov rax, qword[rax + 8 * 0]
 17112 0000BEE2 803805                  	cmp byte [rax], T_closure 
 17113 0000BEE5 0F85E45F0000                    jne L_code_ptr_error
 17114                                  
 17115 0000BEEB 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17116                                  
 17117 0000BEEF 53                              push rbx
 17118                                  
 17119 0000BEF0 FF5009                          call SOB_CLOSURE_CODE(rax)
 17120                                  
 17121                                          
 17122 0000BEF3 483D[02000000]                  	cmp rax, sob_boolean_false
 17123                                  
 17124 0000BEF9 0F84A6000000                    	je .L_if_else_009c
 17125 0000BEFF 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 17126 0000BF03 50                      	push rax
 17127 0000BF04 6A01                    	push 1
 17128 0000BF06 488B0425[88000000]      	mov rax, qword [free_var_17]
 17129 0000BF0E 803805                  	cmp byte [rax], T_closure 
 17130 0000BF11 0F85B85F0000                    jne L_code_ptr_error
 17131                                  
 17132 0000BF17 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17133                                  
 17134 0000BF1B 53                              push rbx
 17135                                  
 17136 0000BF1C FF5009                          call SOB_CLOSURE_CODE(rax)
 17137                                  
 17138 0000BF1F 50                              	push rax
 17139 0000BF20 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17140 0000BF24 50                      	push rax
 17141 0000BF25 6A01                    	push 1
 17142 0000BF27 488B0425[80000000]      	mov rax, qword [free_var_16]
 17143 0000BF2F 803805                  	cmp byte [rax], T_closure 
 17144 0000BF32 0F85975F0000                    jne L_code_ptr_error
 17145                                  
 17146 0000BF38 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17147                                  
 17148 0000BF3C 53                              push rbx
 17149                                  
 17150 0000BF3D FF5009                          call SOB_CLOSURE_CODE(rax)
 17151                                  
 17152 0000BF40 50                              	push rax
 17153                                  
 17154 0000BF41 6A02                    	push 2
 17155 0000BF43 488B4510                	mov rax, qword [rbp + 8 * 2]
 17156                                  
 17157 0000BF47 488B00                                            	mov rax, qword[rax + 8 * 0]
 17158                                  
 17159 0000BF4A 488B00                                            	mov rax, qword[rax + 8 * 0]
 17160 0000BF4D 488B00                  	mov rax, qword [rax]
 17161                                  	assert_closure(rax)
    42 0000BF50 803805              <1>  cmp byte [%1], %2
    43 0000BF53 0F85B5670000        <1>  jne L_error_incorrect_type
 17162 0000BF59 50                      	push rax 
 17163 0000BF5A FF7508                  	push qword [rbp + 8]
 17164 0000BF5D FF7500                  	push qword [rbp]
 17165 0000BF60 4883C308                	add rbx ,8*1
 17166                                  	 .L_fix_stack_label_013d:
 17167 0000BF64 488B5518                	mov rdx, qword[rbp+8*3]
 17168 0000BF68 4883C203                	add rdx, 3
 17169 0000BF6C 48C1E203                	shl rdx, 3
 17170 0000BF70 4889EF                  	mov rdi, rbp
 17171 0000BF73 4801D7                  	add rdi, rdx
 17172 0000BF76 4C8B4500                	mov r8, qword[rbp]
 17173 0000BF7A 4889E9                  	mov rcx, rbp
 17174 0000BF7D 4883E908                	sub rcx, 8
 17175                                  	 .L_loop_fix_stuck_013d:
 17176 0000BF81 4839CC                  	cmp rsp, rcx
 17177 0000BF84 7710                    ja .L_loop_fix_stuck_end_013d
 17178 0000BF86 488B19                   	mov rbx, qword[rcx]
 17179 0000BF89 48891F                  	 mov qword[rdi], rbx
 17180 0000BF8C 4883EF08                	sub rdi, 8
 17181 0000BF90 4883E908                	sub rcx, 8
 17182 0000BF94 EBEB                    jmp .L_loop_fix_stuck_013d
 17183                                  	 .L_loop_fix_stuck_end_013d:
 17184 0000BF96 4883C708                	add rdi, 8
 17185 0000BF9A 4889FC                  	 mov rsp, rdi
 17186 0000BF9D 4C89C5                  	mov rbp, r8
 17187 0000BFA0 5D                      	pop rbp
 17188 0000BFA1 FFE0                    	jmp rax 
 17189                                  
 17190 0000BFA3 EB0A                            	jmp .L_if_end_009c
 17191                                  
 17192                                          	.L_if_else_009c:
 17193 0000BFA5 48B8-                   	mov rax,L_constants + 2
 17193 0000BFA7 [0200000000000000] 
 17194                                  
 17195                                          	.L_if_end_009c:
 17196                                  .L_or_end_0013:
 17197 0000BFAF C9                      	leave
 17198 0000BFB0 C22000                  	ret 8 * (2 + 2)
 17199                                  .L_lambda_simple_end_0109:	; new closure is in rax
 17200 0000BFB3 50                      	push rax
 17201 0000BFB4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17202 0000BFB8 8F00                    	pop qword [rax]
 17203 0000BFBA 48B8-                   	mov rax, sob_void
 17203 0000BFBC [0000000000000000] 
 17204                                  
 17205 0000BFC4 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 17206 0000BFC9 E84C4F0000              	call malloc
 17207 0000BFCE 50                      	push rax
 17208 0000BFCF BF08000000              	mov rdi, 8 * 1  ; new rib
 17209 0000BFD4 E8414F0000              	call malloc
 17210 0000BFD9 50                      	push rax
 17211 0000BFDA BF28000000              	mov rdi, 8 * 5	; extended env
 17212 0000BFDF E8364F0000              	call malloc
 17213 0000BFE4 488B7D10                	mov rdi, ENV
 17214 0000BFE8 BE00000000              	mov rsi, 0
 17215 0000BFED BA01000000              	mov rdx, 1
 17216                                  .L_lambda_opt_env_loop_0029:	; ext_env = env
 17217 0000BFF2 4883FE04                	cmp rsi, 4
 17218 0000BFF6 7410                    	je .L_lambda_opt_env_end_0029
 17219 0000BFF8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17220 0000BFFC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17221 0000C000 48FFC6                  	inc rsi
 17222 0000C003 48FFC2                  	inc rdx
 17223 0000C006 EBEA                    	jmp .L_lambda_opt_env_loop_0029
 17224                                  .L_lambda_opt_env_end_0029:
 17225 0000C008 5B                      	pop rbx
 17226 0000C009 BE00000000              	mov rsi, 0
 17227                                  .L_lambda_opt_params_loop_0029:	; copy params
 17228 0000C00E 4883FE01                	cmp rsi, 1
 17229 0000C012 740E                    	je .L_lambda_opt_params_end_0029
 17230 0000C014 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17231 0000C019 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17232 0000C01D 48FFC6                  	inc rsi
 17233 0000C020 EBEC                    	jmp .L_lambda_opt_params_loop_0029
 17234                                  .L_lambda_opt_params_end_0029:
 17235 0000C022 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 17236 0000C025 4889C3                  	mov rbx, rax
 17237 0000C028 58                      	pop rax
 17238 0000C029 C60005                  	mov byte [rax], T_closure
 17239 0000C02C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17240 0000C030 48C74009[3DC00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0029
 17241 0000C038 E96E010000              	jmp .L_lambda_opt_end_0029
 17242                                  .L_lambda_opt_code_0029:	; lambda-opt body
 17243 0000C03D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17244 0000C043 740D                    	je .L_lambda_opt_arity_check_exact_0029  ;same num_of_args
 17245 0000C045 7F5B                    	jg .L_lambda_opt_arity_check_more_0029  ;greater num_of_args
 17246 0000C047 FF742410                	push qword [rsp + 8 * 2]
 17247 0000C04B 6A01                    	push 1
 17248 0000C04D E9954E0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 17249                                  .L_lambda_opt_arity_check_exact_0029:
 17250 0000C052 4883EC08                	sub rsp, 8 * 1
 17251 0000C056 4889E7                  	mov rdi, rsp 
 17252                                  	;mov ret
 17253 0000C059 488B4708                	mov rax, qword [rdi + (8 * 1)]
 17254 0000C05D 488907                  	mov qword [rdi], rax
 17255 0000C060 4883C708                	add rdi, 8
 17256                                  	;mov env
 17257 0000C064 488B4708                	mov rax, qword [rdi + (8 * 1)]
 17258 0000C068 488907                  	mov qword [rdi], rax
 17259 0000C06B 4883C708                	add rdi, 8
 17260                                  	;mov & update COUNT
 17261 0000C06F 488B4708                	mov rax, qword [rdi +(8 * 1)]
 17262 0000C073 4889C1                  	mov rcx, rax
 17263 0000C076 48FFC0                  	inc rax
 17264 0000C079 488907                  	mov qword [rdi], rax
 17265 0000C07C 4883C708                	add rdi, 8
 17266                                  	;LOOP:move params
 17267                                  .L_lambda_opt_stack_shrink_loop_0079:	
 17268 0000C080 4883F900                	cmp rcx, 0
 17269 0000C084 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0079
 17270 0000C086 488B4708                	mov rax, qword [rdi + 8]
 17271 0000C08A 488907                  	mov qword [rdi], rax
 17272 0000C08D 4883C708                	add rdi, 8
 17273 0000C091 48FFC9                  	dec rcx
 17274 0000C094 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0079
 17275                                  .L_lambda_opt_stack_shrink_loop_exit_0079:	
 17276 0000C096 48C707[01000000]        	mov qword [rdi], sob_nil
 17277 0000C09D E995000000              	jmp .L_lambda_opt_stack_adjusted_0029
 17278                                  .L_lambda_opt_arity_check_more_0029:	
 17279 0000C0A2 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 17280 0000C0A7 488D4EFF                	lea rcx, [rsi - 1]
 17281 0000C0AB 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 17282 0000C0B0 4989F2                  	mov r10, rsi
 17283 0000C0B3 49B9-                   	mov r9, sob_nil
 17283 0000C0B5 [0100000000000000] 
 17284                                  .L_lambda_opt_stack_shrink_loop_007a:	
 17285 0000C0BD 4883F900                	cmp rcx, 0
 17286 0000C0C1 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_007a
 17287 0000C0C3 BF11000000              	mov rdi, 1 + 8 + 8
 17288 0000C0C8 E84D4E0000              	call malloc
 17289 0000C0CD C60021                  	mov byte [rax], T_pair
 17290 0000C0D0 488B1E                  	mov rbx, qword [rsi]
 17291 0000C0D3 48895801                	mov SOB_PAIR_CAR(rax), rbx
 17292 0000C0D7 4C894809                	mov SOB_PAIR_CDR(rax), r9
 17293 0000C0DB 4989C1                  	mov r9, rax
 17294 0000C0DE 4883EE08                	sub rsi, 8 * 1
 17295 0000C0E2 48FFC9                  	dec rcx
 17296 0000C0E5 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_007a
 17297                                  .L_lambda_opt_stack_shrink_loop_exit_007a:	
 17298 0000C0E7 4D890A                  	mov qword [r10], r9
 17299 0000C0EA 4983EA08                	sub r10, 8 * 1; the new dest!
 17300 0000C0EE 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
 17301 0000C0F3 B901000000              	mov rcx, 1 
 17302                                  .L_lambda_opt_stack_shrink_loop_007b:	
 17303 0000C0F8 4883F900                	cmp rcx, 0
 17304 0000C0FC 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_007b
 17305 0000C0FE 488B06                  	mov rax, qword [rsi]
 17306 0000C101 498902                  	mov qword [r10], rax
 17307 0000C104 4983EA08                	sub r10, 8 * 1
 17308 0000C108 4883EE08                	sub rsi, 8 * 1
 17309 0000C10C 48FFC9                  	dec rcx
 17310 0000C10F EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_007b
 17311                                  .L_lambda_opt_stack_shrink_loop_exit_007b:	
 17312 0000C111 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
 17313 0000C118 4983EA08                	sub r10, 8 * 1
 17314 0000C11C 4883EE08                	sub rsi, 8 * 1
 17315 0000C120 488B06                  	mov rax, qword [rsi] ;env
 17316 0000C123 498902                  	mov qword [r10], rax
 17317 0000C126 4983EA08                	sub r10, 8 * 1
 17318 0000C12A 4883EE08                	sub rsi, 8 * 1
 17319 0000C12E 488B06                  	mov rax, qword [rsi] ;ret
 17320 0000C131 498902                  	mov qword [r10], rax
 17321 0000C134 4C89D4                  	mov rsp, r10
 17322                                  .L_lambda_opt_stack_adjusted_0029:	
 17323 0000C137 C8000000                	enter 0, 0
 17324 0000C13B 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 17325 0000C13F 50                      	push rax
 17326 0000C140 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17327 0000C144 50                      	push rax
 17328                                  
 17329 0000C145 6A02                    	push 2
 17330 0000C147 488B4510                	mov rax, qword [rbp + 8 * 2]
 17331                                  
 17332 0000C14B 488B00                                            	mov rax, qword[rax + 8 * 0]
 17333                                  
 17334 0000C14E 488B00                                            	mov rax, qword[rax + 8 * 0]
 17335 0000C151 488B00                  	mov rax, qword [rax]
 17336                                  	assert_closure(rax)
    42 0000C154 803805              <1>  cmp byte [%1], %2
    43 0000C157 0F85B1650000        <1>  jne L_error_incorrect_type
 17337 0000C15D 50                      	push rax 
 17338 0000C15E FF7508                  	push qword [rbp + 8]
 17339 0000C161 FF7500                  	push qword [rbp]
 17340 0000C164 4883C308                	add rbx ,8*1
 17341                                  	 .L_fix_stack_label_013e:
 17342 0000C168 488B5518                	mov rdx, qword[rbp+8*3]
 17343 0000C16C 4883C203                	add rdx, 3
 17344 0000C170 48C1E203                	shl rdx, 3
 17345 0000C174 4889EF                  	mov rdi, rbp
 17346 0000C177 4801D7                  	add rdi, rdx
 17347 0000C17A 4C8B4500                	mov r8, qword[rbp]
 17348 0000C17E 4889E9                  	mov rcx, rbp
 17349 0000C181 4883E908                	sub rcx, 8
 17350                                  	 .L_loop_fix_stuck_013e:
 17351 0000C185 4839CC                  	cmp rsp, rcx
 17352 0000C188 7710                    ja .L_loop_fix_stuck_end_013e
 17353 0000C18A 488B19                   	mov rbx, qword[rcx]
 17354 0000C18D 48891F                  	 mov qword[rdi], rbx
 17355 0000C190 4883EF08                	sub rdi, 8
 17356 0000C194 4883E908                	sub rcx, 8
 17357 0000C198 EBEB                    jmp .L_loop_fix_stuck_013e
 17358                                  	 .L_loop_fix_stuck_end_013e:
 17359 0000C19A 4883C708                	add rdi, 8
 17360 0000C19E 4889FC                  	 mov rsp, rdi
 17361 0000C1A1 4C89C5                  	mov rbp, r8
 17362 0000C1A4 5D                      	pop rbp
 17363 0000C1A5 FFE0                    	jmp rax 
 17364 0000C1A7 C9                      	leave
 17365 0000C1A8 C22000                  	ret 8 * (2 + 2)
 17366                                  .L_lambda_opt_end_0029:	; new closure is in rax
 17367 0000C1AB C9                      	leave
 17368 0000C1AC C21800                  	ret 8 * (2 + 1)
 17369                                  .L_lambda_simple_end_0108:	; new closure is in rax
 17370                                  	assert_closure(rax)
    42 0000C1AF 803805              <1>  cmp byte [%1], %2
    43 0000C1B2 0F8556650000        <1>  jne L_error_incorrect_type
 17371 0000C1B8 50                      	push rax 
 17372 0000C1B9 FF7508                  	push qword [rbp + 8]
 17373 0000C1BC FF7500                  	push qword [rbp]
 17374 0000C1BF 4883C308                	add rbx ,8*1
 17375                                  	 .L_fix_stack_label_013c:
 17376 0000C1C3 488B5518                	mov rdx, qword[rbp+8*3]
 17377 0000C1C7 4883C203                	add rdx, 3
 17378 0000C1CB 48C1E203                	shl rdx, 3
 17379 0000C1CF 4889EF                  	mov rdi, rbp
 17380 0000C1D2 4801D7                  	add rdi, rdx
 17381 0000C1D5 4C8B4500                	mov r8, qword[rbp]
 17382 0000C1D9 4889E9                  	mov rcx, rbp
 17383 0000C1DC 4883E908                	sub rcx, 8
 17384                                  	 .L_loop_fix_stuck_013c:
 17385 0000C1E0 4839CC                  	cmp rsp, rcx
 17386 0000C1E3 7710                    ja .L_loop_fix_stuck_end_013c
 17387 0000C1E5 488B19                   	mov rbx, qword[rcx]
 17388 0000C1E8 48891F                  	 mov qword[rdi], rbx
 17389 0000C1EB 4883EF08                	sub rdi, 8
 17390 0000C1EF 4883E908                	sub rcx, 8
 17391 0000C1F3 EBEB                    jmp .L_loop_fix_stuck_013c
 17392                                  	 .L_loop_fix_stuck_end_013c:
 17393 0000C1F5 4883C708                	add rdi, 8
 17394 0000C1F9 4889FC                  	 mov rsp, rdi
 17395 0000C1FC 4C89C5                  	mov rbp, r8
 17396 0000C1FF 5D                      	pop rbp
 17397 0000C200 FFE0                    	jmp rax 
 17398 0000C202 C9                      	leave
 17399 0000C203 C21800                  	ret 8 * (2 + 1)
 17400                                  .L_lambda_simple_end_0107:	; new closure is in rax
 17401                                  	assert_closure(rax)
    42 0000C206 803805              <1>  cmp byte [%1], %2
    43 0000C209 0F85FF640000        <1>  jne L_error_incorrect_type
 17402 0000C20F 50                      	push rax 
 17403 0000C210 FF7508                  	push qword [rbp + 8]
 17404 0000C213 FF7500                  	push qword [rbp]
 17405 0000C216 4883C308                	add rbx ,8*1
 17406                                  	 .L_fix_stack_label_013b:
 17407 0000C21A 488B5518                	mov rdx, qword[rbp+8*3]
 17408 0000C21E 4883C203                	add rdx, 3
 17409 0000C222 48C1E203                	shl rdx, 3
 17410 0000C226 4889EF                  	mov rdi, rbp
 17411 0000C229 4801D7                  	add rdi, rdx
 17412 0000C22C 4C8B4500                	mov r8, qword[rbp]
 17413 0000C230 4889E9                  	mov rcx, rbp
 17414 0000C233 4883E908                	sub rcx, 8
 17415                                  	 .L_loop_fix_stuck_013b:
 17416 0000C237 4839CC                  	cmp rsp, rcx
 17417 0000C23A 7710                    ja .L_loop_fix_stuck_end_013b
 17418 0000C23C 488B19                   	mov rbx, qword[rcx]
 17419 0000C23F 48891F                  	 mov qword[rdi], rbx
 17420 0000C242 4883EF08                	sub rdi, 8
 17421 0000C246 4883E908                	sub rcx, 8
 17422 0000C24A EBEB                    jmp .L_loop_fix_stuck_013b
 17423                                  	 .L_loop_fix_stuck_end_013b:
 17424 0000C24C 4883C708                	add rdi, 8
 17425 0000C250 4889FC                  	 mov rsp, rdi
 17426 0000C253 4C89C5                  	mov rbp, r8
 17427 0000C256 5D                      	pop rbp
 17428 0000C257 FFE0                    	jmp rax 
 17429 0000C259 C9                      	leave
 17430 0000C25A C21800                  	ret 8 * (2 + 1)
 17431                                  .L_lambda_simple_end_0103:	; new closure is in rax
 17432                                  	assert_closure(rax)
    42 0000C25D 803805              <1>  cmp byte [%1], %2
    43 0000C260 0F85A8640000        <1>  jne L_error_incorrect_type
 17433 0000C266 50                      	push rax 
 17434 0000C267 FF7508                  	push qword [rbp + 8]
 17435 0000C26A FF7500                  	push qword [rbp]
 17436 0000C26D 4883C308                	add rbx ,8*1
 17437                                  	 .L_fix_stack_label_0136:
 17438 0000C271 488B5518                	mov rdx, qword[rbp+8*3]
 17439 0000C275 4883C203                	add rdx, 3
 17440 0000C279 48C1E203                	shl rdx, 3
 17441 0000C27D 4889EF                  	mov rdi, rbp
 17442 0000C280 4801D7                  	add rdi, rdx
 17443 0000C283 4C8B4500                	mov r8, qword[rbp]
 17444 0000C287 4889E9                  	mov rcx, rbp
 17445 0000C28A 4883E908                	sub rcx, 8
 17446                                  	 .L_loop_fix_stuck_0136:
 17447 0000C28E 4839CC                  	cmp rsp, rcx
 17448 0000C291 7710                    ja .L_loop_fix_stuck_end_0136
 17449 0000C293 488B19                   	mov rbx, qword[rcx]
 17450 0000C296 48891F                  	 mov qword[rdi], rbx
 17451 0000C299 4883EF08                	sub rdi, 8
 17452 0000C29D 4883E908                	sub rcx, 8
 17453 0000C2A1 EBEB                    jmp .L_loop_fix_stuck_0136
 17454                                  	 .L_loop_fix_stuck_end_0136:
 17455 0000C2A3 4883C708                	add rdi, 8
 17456 0000C2A7 4889FC                  	 mov rsp, rdi
 17457 0000C2AA 4C89C5                  	mov rbp, r8
 17458 0000C2AD 5D                      	pop rbp
 17459 0000C2AE FFE0                    	jmp rax 
 17460 0000C2B0 C9                      	leave
 17461 0000C2B1 C22000                  	ret 8 * (2 + 2)
 17462                                  .L_lambda_simple_end_0102:	; new closure is in rax
 17463 0000C2B4 50                      	push rax
 17464 0000C2B5 6A01                    	push 1
 17465 0000C2B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17466 0000C2BC E8594C0000              	call malloc
 17467 0000C2C1 50                      	push rax
 17468 0000C2C2 BF00000000              	mov rdi, 8 * 0	; new rib
 17469 0000C2C7 E84E4C0000              	call malloc
 17470 0000C2CC 50                      	push rax
 17471 0000C2CD BF08000000              	mov rdi, 8 * 1	; extended env
 17472 0000C2D2 E8434C0000              	call malloc
 17473 0000C2D7 488B7D10                	mov rdi, ENV
 17474 0000C2DB BE00000000              	mov rsi, 0
 17475 0000C2E0 BA01000000              	mov rdx, 1
 17476                                  .L_lambda_simple_env_loop_010a:	; ext_env[i + 1] <-- env[i]
 17477 0000C2E5 4883FE00                	cmp rsi, 0
 17478 0000C2E9 7410                    	je .L_lambda_simple_env_end_010a
 17479 0000C2EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17480 0000C2EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17481 0000C2F3 48FFC6                  	inc rsi
 17482 0000C2F6 48FFC2                  	inc rdx
 17483 0000C2F9 EBEA                    	jmp .L_lambda_simple_env_loop_010a
 17484                                  .L_lambda_simple_env_end_010a:
 17485 0000C2FB 5B                      	pop rbx
 17486 0000C2FC BE00000000              	mov rsi, 0
 17487                                  .L_lambda_simple_params_loop_010a:	; copy params
 17488 0000C301 4883FE00                	cmp rsi, 0
 17489 0000C305 740E                    	je .L_lambda_simple_params_end_010a
 17490 0000C307 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17491 0000C30C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17492 0000C310 48FFC6                  	inc rsi
 17493 0000C313 EBEC                    	jmp .L_lambda_simple_params_loop_010a
 17494                                  .L_lambda_simple_params_end_010a:
 17495 0000C315 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17496 0000C318 4889C3                  	mov rbx, rax
 17497 0000C31B 58                      	pop rax
 17498 0000C31C C60005                  	mov byte [rax], T_closure
 17499 0000C31F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17500 0000C323 48C74009[30C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010a
 17501 0000C32B E907010000              	jmp .L_lambda_simple_end_010a
 17502                                  .L_lambda_simple_code_010a:	; lambda-simple body
 17503 0000C330 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17504 0000C336 740B                    	je .L_lambda_simple_arity_check_ok_010a
 17505 0000C338 FF742410                	push qword [rsp + 8 * 2]
 17506 0000C33C 6A01                    	push 1
 17507 0000C33E E9904B0000              	jmp L_error_incorrect_arity_simple
 17508                                  .L_lambda_simple_arity_check_ok_010a:
 17509 0000C343 C8000000                	enter 0, 0
 17510 0000C347 488B0425[70030000]      	mov rax, qword [free_var_110]
 17511 0000C34F 50                      	push rax
 17512 0000C350 488B0425[60030000]      	mov rax, qword [free_var_108]
 17513 0000C358 50                      	push rax
 17514 0000C359 6A02                    	push 2
 17515 0000C35B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17516 0000C35F 803805                  	cmp byte [rax], T_closure 
 17517 0000C362 0F85675B0000                    jne L_code_ptr_error
 17518                                  
 17519 0000C368 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17520                                  
 17521 0000C36C 53                              push rbx
 17522                                  
 17523 0000C36D FF5009                          call SOB_CLOSURE_CODE(rax)
 17524                                  
 17525 0000C370 48890425[E0030000]              	mov qword [free_var_124], rax
 17526                                  
 17527 0000C378 48B8-                           	mov rax, sob_void
 17527 0000C37A [0000000000000000] 
 17528                                  
 17529 0000C382 488B0425[A8030000]      	mov rax, qword [free_var_117]
 17530 0000C38A 50                      	push rax
 17531 0000C38B 488B0425[98030000]      	mov rax, qword [free_var_115]
 17532 0000C393 50                      	push rax
 17533 0000C394 6A02                    	push 2
 17534 0000C396 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17535 0000C39A 803805                  	cmp byte [rax], T_closure 
 17536 0000C39D 0F852C5B0000                    jne L_code_ptr_error
 17537                                  
 17538 0000C3A3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17539                                  
 17540 0000C3A7 53                              push rbx
 17541                                  
 17542 0000C3A8 FF5009                          call SOB_CLOSURE_CODE(rax)
 17543                                  
 17544 0000C3AB 48890425[08040000]              	mov qword [free_var_129], rax
 17545                                  
 17546 0000C3B3 48B8-                           	mov rax, sob_void
 17546 0000C3B5 [0000000000000000] 
 17547                                  
 17548 0000C3BD 488B0425[70030000]      	mov rax, qword [free_var_110]
 17549 0000C3C5 50                      	push rax
 17550 0000C3C6 488B0425[78030000]      	mov rax, qword [free_var_111]
 17551 0000C3CE 50                      	push rax
 17552 0000C3CF 6A02                    	push 2
 17553 0000C3D1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17554 0000C3D5 803805                  	cmp byte [rax], T_closure 
 17555 0000C3D8 0F85F15A0000                    jne L_code_ptr_error
 17556                                  
 17557 0000C3DE 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17558                                  
 17559 0000C3E2 53                              push rbx
 17560                                  
 17561 0000C3E3 FF5009                          call SOB_CLOSURE_CODE(rax)
 17562                                  
 17563 0000C3E6 48890425[00040000]              	mov qword [free_var_128], rax
 17564                                  
 17565 0000C3EE 48B8-                           	mov rax, sob_void
 17565 0000C3F0 [0000000000000000] 
 17566                                  
 17567 0000C3F8 488B0425[A8030000]      	mov rax, qword [free_var_117]
 17568 0000C400 50                      	push rax
 17569 0000C401 488B0425[B0030000]      	mov rax, qword [free_var_118]
 17570 0000C409 50                      	push rax
 17571 0000C40A 6A02                    	push 2
 17572 0000C40C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17573 0000C410 803805                  	cmp byte [rax], T_closure 
 17574 0000C413 0F85B65A0000                    jne L_code_ptr_error
 17575                                  
 17576 0000C419 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17577                                  
 17578 0000C41D 53                              push rbx
 17579                                  
 17580 0000C41E FF5009                          call SOB_CLOSURE_CODE(rax)
 17581                                  
 17582 0000C421 48890425[28040000]              	mov qword [free_var_133], rax
 17583                                  
 17584 0000C429 48B8-                           	mov rax, sob_void
 17584 0000C42B [0000000000000000] 
 17585 0000C433 C9                      	leave
 17586 0000C434 C21800                  	ret 8 * (2 + 1)
 17587                                  .L_lambda_simple_end_010a:	; new closure is in rax
 17588 0000C437 803805                  	cmp byte [rax], T_closure 
 17589 0000C43A 0F858F5A0000                    jne L_code_ptr_error
 17590                                  
 17591 0000C440 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17592                                  
 17593 0000C444 53                              push rbx
 17594                                  
 17595 0000C445 FF5009                          call SOB_CLOSURE_CODE(rax)
 17596                                  
 17597                                          
 17598 0000C448 4889C7                  	mov rdi, rax
 17599 0000C44B E8DB4A0000              	call print_sexpr_if_not_void
 17600                                  
 17601 0000C450 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17602 0000C455 E8C04A0000              	call malloc
 17603 0000C45A 50                      	push rax
 17604 0000C45B BF00000000              	mov rdi, 8 * 0	; new rib
 17605 0000C460 E8B54A0000              	call malloc
 17606 0000C465 50                      	push rax
 17607 0000C466 BF08000000              	mov rdi, 8 * 1	; extended env
 17608 0000C46B E8AA4A0000              	call malloc
 17609 0000C470 488B7D10                	mov rdi, ENV
 17610 0000C474 BE00000000              	mov rsi, 0
 17611 0000C479 BA01000000              	mov rdx, 1
 17612                                  .L_lambda_simple_env_loop_010b:	; ext_env[i + 1] <-- env[i]
 17613 0000C47E 4883FE00                	cmp rsi, 0
 17614 0000C482 7410                    	je .L_lambda_simple_env_end_010b
 17615 0000C484 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17616 0000C488 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17617 0000C48C 48FFC6                  	inc rsi
 17618 0000C48F 48FFC2                  	inc rdx
 17619 0000C492 EBEA                    	jmp .L_lambda_simple_env_loop_010b
 17620                                  .L_lambda_simple_env_end_010b:
 17621 0000C494 5B                      	pop rbx
 17622 0000C495 BE00000000              	mov rsi, 0
 17623                                  .L_lambda_simple_params_loop_010b:	; copy params
 17624 0000C49A 4883FE00                	cmp rsi, 0
 17625 0000C49E 740E                    	je .L_lambda_simple_params_end_010b
 17626 0000C4A0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17627 0000C4A5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17628 0000C4A9 48FFC6                  	inc rsi
 17629 0000C4AC EBEC                    	jmp .L_lambda_simple_params_loop_010b
 17630                                  .L_lambda_simple_params_end_010b:
 17631 0000C4AE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17632 0000C4B1 4889C3                  	mov rbx, rax
 17633 0000C4B4 58                      	pop rax
 17634 0000C4B5 C60005                  	mov byte [rax], T_closure
 17635 0000C4B8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17636 0000C4BC 48C74009[C9C40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010b
 17637 0000C4C4 E9A40C0000              	jmp .L_lambda_simple_end_010b
 17638                                  .L_lambda_simple_code_010b:	; lambda-simple body
 17639 0000C4C9 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17640 0000C4CF 740B                    	je .L_lambda_simple_arity_check_ok_010b
 17641 0000C4D1 FF742410                	push qword [rsp + 8 * 2]
 17642 0000C4D5 6A02                    	push 2
 17643 0000C4D7 E9F7490000              	jmp L_error_incorrect_arity_simple
 17644                                  .L_lambda_simple_arity_check_ok_010b:
 17645 0000C4DC C8000000                	enter 0, 0
 17646 0000C4E0 48B8-                   	 	mov rax,L_constants + 23
 17646 0000C4E2 [1700000000000000] 
 17647 0000C4EA 50                      	push rax
 17648                                  
 17649 0000C4EB 6A01                    	push 1
 17650 0000C4ED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17651 0000C4F2 E8234A0000              	call malloc
 17652 0000C4F7 50                      	push rax
 17653 0000C4F8 BF10000000              	mov rdi, 8 * 2	; new rib
 17654 0000C4FD E8184A0000              	call malloc
 17655 0000C502 50                      	push rax
 17656 0000C503 BF10000000              	mov rdi, 8 * 2	; extended env
 17657 0000C508 E80D4A0000              	call malloc
 17658 0000C50D 488B7D10                	mov rdi, ENV
 17659 0000C511 BE00000000              	mov rsi, 0
 17660 0000C516 BA01000000              	mov rdx, 1
 17661                                  .L_lambda_simple_env_loop_010c:	; ext_env[i + 1] <-- env[i]
 17662 0000C51B 4883FE01                	cmp rsi, 1
 17663 0000C51F 7410                    	je .L_lambda_simple_env_end_010c
 17664 0000C521 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17665 0000C525 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17666 0000C529 48FFC6                  	inc rsi
 17667 0000C52C 48FFC2                  	inc rdx
 17668 0000C52F EBEA                    	jmp .L_lambda_simple_env_loop_010c
 17669                                  .L_lambda_simple_env_end_010c:
 17670 0000C531 5B                      	pop rbx
 17671 0000C532 BE00000000              	mov rsi, 0
 17672                                  .L_lambda_simple_params_loop_010c:	; copy params
 17673 0000C537 4883FE02                	cmp rsi, 2
 17674 0000C53B 740E                    	je .L_lambda_simple_params_end_010c
 17675 0000C53D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17676 0000C542 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17677 0000C546 48FFC6                  	inc rsi
 17678 0000C549 EBEC                    	jmp .L_lambda_simple_params_loop_010c
 17679                                  .L_lambda_simple_params_end_010c:
 17680 0000C54B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17681 0000C54E 4889C3                  	mov rbx, rax
 17682 0000C551 58                      	pop rax
 17683 0000C552 C60005                  	mov byte [rax], T_closure
 17684 0000C555 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17685 0000C559 48C74009[66C50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010c
 17686 0000C561 E9B00B0000              	jmp .L_lambda_simple_end_010c
 17687                                  .L_lambda_simple_code_010c:	; lambda-simple body
 17688 0000C566 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17689 0000C56C 740B                    	je .L_lambda_simple_arity_check_ok_010c
 17690 0000C56E FF742410                	push qword [rsp + 8 * 2]
 17691 0000C572 6A01                    	push 1
 17692 0000C574 E95A490000              	jmp L_error_incorrect_arity_simple
 17693                                  .L_lambda_simple_arity_check_ok_010c:
 17694 0000C579 C8000000                	enter 0, 0
 17695 0000C57D BF08000000              	mov rdi, 8
 17696 0000C582 E893490000              	call malloc
 17697 0000C587 488B5D20                	mov rbx, PARAM(0)
 17698 0000C58B 488918                  	mov qword [rax], rbx
 17699 0000C58E 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17700                                  
 17701 0000C592 48B8-                            	mov rax, sob_void
 17701 0000C594 [0000000000000000] 
 17702                                  
 17703 0000C59C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17704 0000C5A1 E874490000              	call malloc
 17705 0000C5A6 50                      	push rax
 17706 0000C5A7 BF08000000              	mov rdi, 8 * 1	; new rib
 17707 0000C5AC E869490000              	call malloc
 17708 0000C5B1 50                      	push rax
 17709 0000C5B2 BF18000000              	mov rdi, 8 * 3	; extended env
 17710 0000C5B7 E85E490000              	call malloc
 17711 0000C5BC 488B7D10                	mov rdi, ENV
 17712 0000C5C0 BE00000000              	mov rsi, 0
 17713 0000C5C5 BA01000000              	mov rdx, 1
 17714                                  .L_lambda_simple_env_loop_010d:	; ext_env[i + 1] <-- env[i]
 17715 0000C5CA 4883FE02                	cmp rsi, 2
 17716 0000C5CE 7410                    	je .L_lambda_simple_env_end_010d
 17717 0000C5D0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17718 0000C5D4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17719 0000C5D8 48FFC6                  	inc rsi
 17720 0000C5DB 48FFC2                  	inc rdx
 17721 0000C5DE EBEA                    	jmp .L_lambda_simple_env_loop_010d
 17722                                  .L_lambda_simple_env_end_010d:
 17723 0000C5E0 5B                      	pop rbx
 17724 0000C5E1 BE00000000              	mov rsi, 0
 17725                                  .L_lambda_simple_params_loop_010d:	; copy params
 17726 0000C5E6 4883FE01                	cmp rsi, 1
 17727 0000C5EA 740E                    	je .L_lambda_simple_params_end_010d
 17728 0000C5EC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17729 0000C5F1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17730 0000C5F5 48FFC6                  	inc rsi
 17731 0000C5F8 EBEC                    	jmp .L_lambda_simple_params_loop_010d
 17732                                  .L_lambda_simple_params_end_010d:
 17733 0000C5FA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17734 0000C5FD 4889C3                  	mov rbx, rax
 17735 0000C600 58                      	pop rax
 17736 0000C601 C60005                  	mov byte [rax], T_closure
 17737 0000C604 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17738 0000C608 48C74009[15C60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010d
 17739 0000C610 E924020000              	jmp .L_lambda_simple_end_010d
 17740                                  .L_lambda_simple_code_010d:	; lambda-simple body
 17741 0000C615 48837C241005            	cmp qword [rsp + 8 * 2], 5
 17742 0000C61B 740B                    	je .L_lambda_simple_arity_check_ok_010d
 17743 0000C61D FF742410                	push qword [rsp + 8 * 2]
 17744 0000C621 6A05                    	push 5
 17745 0000C623 E9AB480000              	jmp L_error_incorrect_arity_simple
 17746                                  .L_lambda_simple_arity_check_ok_010d:
 17747 0000C628 C8000000                	enter 0, 0
 17748 0000C62C 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 17749 0000C630 50                      	push rax
 17750 0000C631 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17751 0000C635 50                      	push rax
 17752 0000C636 6A02                    	push 2
 17753 0000C638 488B0425[50030000]      	mov rax, qword [free_var_106]
 17754 0000C640 803805                  	cmp byte [rax], T_closure 
 17755 0000C643 0F8586580000                    jne L_code_ptr_error
 17756                                  
 17757 0000C649 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17758                                  
 17759 0000C64D 53                              push rbx
 17760                                  
 17761 0000C64E FF5009                          call SOB_CLOSURE_CODE(rax)
 17762                                  
 17763 0000C651 483D[02000000]                  	cmp rax, sob_boolean_false
 17764 0000C657 0F85D8010000            	jne .L_or_end_0014
 17765 0000C65D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17766 0000C661 50                      	push rax
 17767 0000C662 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 17768 0000C666 50                      	push rax
 17769 0000C667 6A02                    	push 2
 17770 0000C669 488B0425[78010000]      	mov rax, qword [free_var_47]
 17771 0000C671 803805                  	cmp byte [rax], T_closure 
 17772 0000C674 0F8555580000                    jne L_code_ptr_error
 17773                                  
 17774 0000C67A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17775                                  
 17776 0000C67E 53                              push rbx
 17777                                  
 17778 0000C67F FF5009                          call SOB_CLOSURE_CODE(rax)
 17779                                  
 17780 0000C682 50                              	push rax
 17781 0000C683 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17782 0000C687 50                      	push rax
 17783 0000C688 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17784 0000C68C 50                      	push rax
 17785 0000C68D 6A02                    	push 2
 17786 0000C68F 488B0425[78010000]      	mov rax, qword [free_var_47]
 17787 0000C697 803805                  	cmp byte [rax], T_closure 
 17788 0000C69A 0F852F580000                    jne L_code_ptr_error
 17789                                  
 17790 0000C6A0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17791                                  
 17792 0000C6A4 53                              push rbx
 17793                                  
 17794 0000C6A5 FF5009                          call SOB_CLOSURE_CODE(rax)
 17795                                  
 17796 0000C6A8 50                              	push rax
 17797 0000C6A9 6A02                    	push 2
 17798 0000C6AB 488B4510                	mov rax, qword [rbp + 8 * 2]
 17799                                  
 17800 0000C6AF 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17801                                  
 17802 0000C6B3 488B00                                            	mov rax, qword[rax + 8 * 0]
 17803 0000C6B6 803805                  	cmp byte [rax], T_closure 
 17804 0000C6B9 0F8510580000                    jne L_code_ptr_error
 17805                                  
 17806 0000C6BF 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17807                                  
 17808 0000C6C3 53                              push rbx
 17809                                  
 17810 0000C6C4 FF5009                          call SOB_CLOSURE_CODE(rax)
 17811                                  
 17812 0000C6C7 483D[02000000]                  	cmp rax, sob_boolean_false
 17813 0000C6CD 0F8562010000            	jne .L_or_end_0014
 17814 0000C6D3 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 17815 0000C6D7 50                      	push rax
 17816 0000C6D8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17817 0000C6DC 50                      	push rax
 17818 0000C6DD 6A02                    	push 2
 17819 0000C6DF 488B0425[30030000]      	mov rax, qword [free_var_102]
 17820 0000C6E7 803805                  	cmp byte [rax], T_closure 
 17821 0000C6EA 0F85DF570000                    jne L_code_ptr_error
 17822                                  
 17823 0000C6F0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17824                                  
 17825 0000C6F4 53                              push rbx
 17826                                  
 17827 0000C6F5 FF5009                          call SOB_CLOSURE_CODE(rax)
 17828                                  
 17829                                          
 17830 0000C6F8 483D[02000000]                  	cmp rax, sob_boolean_false
 17831                                  
 17832 0000C6FE 0F8427010000                    	je .L_if_else_009d
 17833 0000C704 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17834 0000C708 50                      	push rax
 17835 0000C709 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 17836 0000C70D 50                      	push rax
 17837 0000C70E 6A02                    	push 2
 17838 0000C710 488B0425[78010000]      	mov rax, qword [free_var_47]
 17839 0000C718 803805                  	cmp byte [rax], T_closure 
 17840 0000C71B 0F85AE570000                    jne L_code_ptr_error
 17841                                  
 17842 0000C721 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17843                                  
 17844 0000C725 53                              push rbx
 17845                                  
 17846 0000C726 FF5009                          call SOB_CLOSURE_CODE(rax)
 17847                                  
 17848 0000C729 50                              	push rax
 17849 0000C72A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17850 0000C72E 50                      	push rax
 17851 0000C72F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17852 0000C733 50                      	push rax
 17853 0000C734 6A02                    	push 2
 17854 0000C736 488B0425[78010000]      	mov rax, qword [free_var_47]
 17855 0000C73E 803805                  	cmp byte [rax], T_closure 
 17856 0000C741 0F8588570000                    jne L_code_ptr_error
 17857                                  
 17858 0000C747 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17859                                  
 17860 0000C74B 53                              push rbx
 17861                                  
 17862 0000C74C FF5009                          call SOB_CLOSURE_CODE(rax)
 17863                                  
 17864 0000C74F 50                              	push rax
 17865 0000C750 6A02                    	push 2
 17866 0000C752 488B4510                	mov rax, qword [rbp + 8 * 2]
 17867                                  
 17868 0000C756 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17869                                  
 17870 0000C75A 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17871 0000C75E 803805                  	cmp byte [rax], T_closure 
 17872 0000C761 0F8568570000                    jne L_code_ptr_error
 17873                                  
 17874 0000C767 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17875                                  
 17876 0000C76B 53                              push rbx
 17877                                  
 17878 0000C76C FF5009                          call SOB_CLOSURE_CODE(rax)
 17879                                  
 17880                                          
 17881 0000C76F 483D[02000000]                  	cmp rax, sob_boolean_false
 17882                                  
 17883 0000C775 0F84A4000000                    	je .L_if_else_009e
 17884 0000C77B 488B4540                	 	mov rax ,qword[rbp + 8 * (4 + 4)]
 17885 0000C77F 50                      	push rax
 17886 0000C780 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 17887 0000C784 50                      	push rax
 17888 0000C785 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 17889 0000C789 50                      	push rax
 17890 0000C78A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17891 0000C78E 50                      	push rax
 17892 0000C78F 48B8-                   	mov rax,L_constants + 128
 17892 0000C791 [8000000000000000] 
 17893 0000C799 50                      	push rax
 17894 0000C79A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17895 0000C79E 50                      	push rax
 17896 0000C79F 6A02                    	push 2
 17897 0000C7A1 488B0425[08030000]      	mov rax, qword [free_var_97]
 17898 0000C7A9 803805                  	cmp byte [rax], T_closure 
 17899 0000C7AC 0F851D570000                    jne L_code_ptr_error
 17900                                  
 17901 0000C7B2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 17902                                  
 17903 0000C7B6 53                              push rbx
 17904                                  
 17905 0000C7B7 FF5009                          call SOB_CLOSURE_CODE(rax)
 17906                                  
 17907 0000C7BA 50                              	push rax
 17908                                  
 17909 0000C7BB 6A05                    	push 5
 17910 0000C7BD 488B4510                	mov rax, qword [rbp + 8 * 2]
 17911                                  
 17912 0000C7C1 488B00                                            	mov rax, qword[rax + 8 * 0]
 17913                                  
 17914 0000C7C4 488B00                                            	mov rax, qword[rax + 8 * 0]
 17915 0000C7C7 488B00                  	mov rax, qword [rax]
 17916                                  	assert_closure(rax)
    42 0000C7CA 803805              <1>  cmp byte [%1], %2
    43 0000C7CD 0F853B5F0000        <1>  jne L_error_incorrect_type
 17917 0000C7D3 50                      	push rax 
 17918 0000C7D4 FF7508                  	push qword [rbp + 8]
 17919 0000C7D7 FF7500                  	push qword [rbp]
 17920 0000C7DA 4883C308                	add rbx ,8*1
 17921                                  	 .L_fix_stack_label_0140:
 17922 0000C7DE 488B5518                	mov rdx, qword[rbp+8*3]
 17923 0000C7E2 4883C203                	add rdx, 3
 17924 0000C7E6 48C1E203                	shl rdx, 3
 17925 0000C7EA 4889EF                  	mov rdi, rbp
 17926 0000C7ED 4801D7                  	add rdi, rdx
 17927 0000C7F0 4C8B4500                	mov r8, qword[rbp]
 17928 0000C7F4 4889E9                  	mov rcx, rbp
 17929 0000C7F7 4883E908                	sub rcx, 8
 17930                                  	 .L_loop_fix_stuck_0140:
 17931 0000C7FB 4839CC                  	cmp rsp, rcx
 17932 0000C7FE 7710                    ja .L_loop_fix_stuck_end_0140
 17933 0000C800 488B19                   	mov rbx, qword[rcx]
 17934 0000C803 48891F                  	 mov qword[rdi], rbx
 17935 0000C806 4883EF08                	sub rdi, 8
 17936 0000C80A 4883E908                	sub rcx, 8
 17937 0000C80E EBEB                    jmp .L_loop_fix_stuck_0140
 17938                                  	 .L_loop_fix_stuck_end_0140:
 17939 0000C810 4883C708                	add rdi, 8
 17940 0000C814 4889FC                  	 mov rsp, rdi
 17941 0000C817 4C89C5                  	mov rbp, r8
 17942 0000C81A 5D                      	pop rbp
 17943 0000C81B FFE0                    	jmp rax 
 17944                                  
 17945 0000C81D EB0A                            	jmp .L_if_end_009e
 17946                                  
 17947                                          	.L_if_else_009e:
 17948 0000C81F 48B8-                   	mov rax,L_constants + 2
 17948 0000C821 [0200000000000000] 
 17949                                  
 17950                                          	.L_if_end_009e:
 17951                                  
 17952 0000C829 EB0A                            	jmp .L_if_end_009d
 17953                                  
 17954                                          	.L_if_else_009d:
 17955 0000C82B 48B8-                   	mov rax,L_constants + 2
 17955 0000C82D [0200000000000000] 
 17956                                  
 17957                                          	.L_if_end_009d:
 17958                                  .L_or_end_0014:
 17959 0000C835 C9                      	leave
 17960 0000C836 C23800                  	ret 8 * (2 + 5)
 17961                                  .L_lambda_simple_end_010d:	; new closure is in rax
 17962 0000C839 50                      	push rax
 17963 0000C83A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17964 0000C83E 8F00                    	pop qword [rax]
 17965 0000C840 48B8-                   	mov rax, sob_void
 17965 0000C842 [0000000000000000] 
 17966                                  
 17967 0000C84A BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 17968 0000C84F E8C6460000              	call malloc
 17969 0000C854 50                      	push rax
 17970 0000C855 BF08000000              	mov rdi, 8 * 1	; new rib
 17971 0000C85A E8BB460000              	call malloc
 17972 0000C85F 50                      	push rax
 17973 0000C860 BF18000000              	mov rdi, 8 * 3	; extended env
 17974 0000C865 E8B0460000              	call malloc
 17975 0000C86A 488B7D10                	mov rdi, ENV
 17976 0000C86E BE00000000              	mov rsi, 0
 17977 0000C873 BA01000000              	mov rdx, 1
 17978                                  .L_lambda_simple_env_loop_010e:	; ext_env[i + 1] <-- env[i]
 17979 0000C878 4883FE02                	cmp rsi, 2
 17980 0000C87C 7410                    	je .L_lambda_simple_env_end_010e
 17981 0000C87E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17982 0000C882 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17983 0000C886 48FFC6                  	inc rsi
 17984 0000C889 48FFC2                  	inc rdx
 17985 0000C88C EBEA                    	jmp .L_lambda_simple_env_loop_010e
 17986                                  .L_lambda_simple_env_end_010e:
 17987 0000C88E 5B                      	pop rbx
 17988 0000C88F BE00000000              	mov rsi, 0
 17989                                  .L_lambda_simple_params_loop_010e:	; copy params
 17990 0000C894 4883FE01                	cmp rsi, 1
 17991 0000C898 740E                    	je .L_lambda_simple_params_end_010e
 17992 0000C89A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17993 0000C89F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17994 0000C8A3 48FFC6                  	inc rsi
 17995 0000C8A6 EBEC                    	jmp .L_lambda_simple_params_loop_010e
 17996                                  .L_lambda_simple_params_end_010e:
 17997 0000C8A8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17998 0000C8AB 4889C3                  	mov rbx, rax
 17999 0000C8AE 58                      	pop rax
 18000 0000C8AF C60005                  	mov byte [rax], T_closure
 18001 0000C8B2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18002 0000C8B6 48C74009[C3C80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010e
 18003 0000C8BE E99A020000              	jmp .L_lambda_simple_end_010e
 18004                                  .L_lambda_simple_code_010e:	; lambda-simple body
 18005 0000C8C3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18006 0000C8C9 740B                    	je .L_lambda_simple_arity_check_ok_010e
 18007 0000C8CB FF742410                	push qword [rsp + 8 * 2]
 18008 0000C8CF 6A02                    	push 2
 18009 0000C8D1 E9FD450000              	jmp L_error_incorrect_arity_simple
 18010                                  .L_lambda_simple_arity_check_ok_010e:
 18011 0000C8D6 C8000000                	enter 0, 0
 18012 0000C8DA 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 18013 0000C8DE 50                      	push rax
 18014 0000C8DF 6A01                    	push 1
 18015 0000C8E1 488B0425[90000000]      	mov rax, qword [free_var_18]
 18016 0000C8E9 803805                  	cmp byte [rax], T_closure 
 18017 0000C8EC 0F85DD550000                    jne L_code_ptr_error
 18018                                  
 18019 0000C8F2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18020                                  
 18021 0000C8F6 53                              push rbx
 18022                                  
 18023 0000C8F7 FF5009                          call SOB_CLOSURE_CODE(rax)
 18024                                  
 18025 0000C8FA 50                              	push rax
 18026 0000C8FB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18027 0000C8FF 50                      	push rax
 18028 0000C900 6A01                    	push 1
 18029 0000C902 488B0425[90000000]      	mov rax, qword [free_var_18]
 18030 0000C90A 803805                  	cmp byte [rax], T_closure 
 18031 0000C90D 0F85BC550000                    jne L_code_ptr_error
 18032                                  
 18033 0000C913 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18034                                  
 18035 0000C917 53                              push rbx
 18036                                  
 18037 0000C918 FF5009                          call SOB_CLOSURE_CODE(rax)
 18038                                  
 18039 0000C91B 50                              	push rax
 18040                                  
 18041 0000C91C 6A02                    	push 2
 18042 0000C91E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18043 0000C923 E8F2450000              	call malloc
 18044 0000C928 50                      	push rax
 18045 0000C929 BF10000000              	mov rdi, 8 * 2	; new rib
 18046 0000C92E E8E7450000              	call malloc
 18047 0000C933 50                      	push rax
 18048 0000C934 BF20000000              	mov rdi, 8 * 4	; extended env
 18049 0000C939 E8DC450000              	call malloc
 18050 0000C93E 488B7D10                	mov rdi, ENV
 18051 0000C942 BE00000000              	mov rsi, 0
 18052 0000C947 BA01000000              	mov rdx, 1
 18053                                  .L_lambda_simple_env_loop_010f:	; ext_env[i + 1] <-- env[i]
 18054 0000C94C 4883FE03                	cmp rsi, 3
 18055 0000C950 7410                    	je .L_lambda_simple_env_end_010f
 18056 0000C952 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18057 0000C956 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18058 0000C95A 48FFC6                  	inc rsi
 18059 0000C95D 48FFC2                  	inc rdx
 18060 0000C960 EBEA                    	jmp .L_lambda_simple_env_loop_010f
 18061                                  .L_lambda_simple_env_end_010f:
 18062 0000C962 5B                      	pop rbx
 18063 0000C963 BE00000000              	mov rsi, 0
 18064                                  .L_lambda_simple_params_loop_010f:	; copy params
 18065 0000C968 4883FE02                	cmp rsi, 2
 18066 0000C96C 740E                    	je .L_lambda_simple_params_end_010f
 18067 0000C96E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18068 0000C973 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18069 0000C977 48FFC6                  	inc rsi
 18070 0000C97A EBEC                    	jmp .L_lambda_simple_params_loop_010f
 18071                                  .L_lambda_simple_params_end_010f:
 18072 0000C97C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18073 0000C97F 4889C3                  	mov rbx, rax
 18074 0000C982 58                      	pop rax
 18075 0000C983 C60005                  	mov byte [rax], T_closure
 18076 0000C986 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18077 0000C98A 48C74009[97C90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010f
 18078 0000C992 E96F010000              	jmp .L_lambda_simple_end_010f
 18079                                  .L_lambda_simple_code_010f:	; lambda-simple body
 18080 0000C997 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18081 0000C99D 740B                    	je .L_lambda_simple_arity_check_ok_010f
 18082 0000C99F FF742410                	push qword [rsp + 8 * 2]
 18083 0000C9A3 6A02                    	push 2
 18084 0000C9A5 E929450000              	jmp L_error_incorrect_arity_simple
 18085                                  .L_lambda_simple_arity_check_ok_010f:
 18086 0000C9AA C8000000                	enter 0, 0
 18087 0000C9AE 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18088 0000C9B2 50                      	push rax
 18089 0000C9B3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18090 0000C9B7 50                      	push rax
 18091 0000C9B8 6A02                    	push 2
 18092 0000C9BA 488B0425[38030000]      	mov rax, qword [free_var_103]
 18093 0000C9C2 803805                  	cmp byte [rax], T_closure 
 18094 0000C9C5 0F8504550000                    jne L_code_ptr_error
 18095                                  
 18096 0000C9CB 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18097                                  
 18098 0000C9CF 53                              push rbx
 18099                                  
 18100 0000C9D0 FF5009                          call SOB_CLOSURE_CODE(rax)
 18101                                  
 18102                                          
 18103 0000C9D3 483D[02000000]                  	cmp rax, sob_boolean_false
 18104                                  
 18105 0000C9D9 0F8494000000                    	je .L_if_else_009f
 18106 0000C9DF 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 18107 0000C9E3 50                      	push rax
 18108 0000C9E4 488B4510                	mov rax, qword [rbp + 8 * 2]
 18109                                  
 18110 0000C9E8 488B00                                            	mov rax, qword[rax + 8 * 0]
 18111                                  
 18112 0000C9EB 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18113 0000C9EF 50                      	push rax
 18114 0000C9F0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18115 0000C9F4 50                      	push rax
 18116 0000C9F5 488B4510                	mov rax, qword [rbp + 8 * 2]
 18117                                  
 18118 0000C9F9 488B00                                            	mov rax, qword[rax + 8 * 0]
 18119                                  
 18120 0000C9FC 488B00                                            	mov rax, qword[rax + 8 * 0]
 18121 0000C9FF 50                      	push rax
 18122 0000CA00 48B8-                   	mov rax,L_constants + 32
 18122 0000CA02 [2000000000000000] 
 18123 0000CA0A 50                      	push rax
 18124                                  
 18125 0000CA0B 6A05                    	push 5
 18126 0000CA0D 488B4510                	mov rax, qword [rbp + 8 * 2]
 18127                                  
 18128 0000CA11 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18129                                  
 18130 0000CA15 488B00                                            	mov rax, qword[rax + 8 * 0]
 18131 0000CA18 488B00                  	mov rax, qword [rax]
 18132                                  	assert_closure(rax)
    42 0000CA1B 803805              <1>  cmp byte [%1], %2
    43 0000CA1E 0F85EA5C0000        <1>  jne L_error_incorrect_type
 18133 0000CA24 50                      	push rax 
 18134 0000CA25 FF7508                  	push qword [rbp + 8]
 18135 0000CA28 FF7500                  	push qword [rbp]
 18136 0000CA2B 4883C308                	add rbx ,8*1
 18137                                  	 .L_fix_stack_label_0143:
 18138 0000CA2F 488B5518                	mov rdx, qword[rbp+8*3]
 18139 0000CA33 4883C203                	add rdx, 3
 18140 0000CA37 48C1E203                	shl rdx, 3
 18141 0000CA3B 4889EF                  	mov rdi, rbp
 18142 0000CA3E 4801D7                  	add rdi, rdx
 18143 0000CA41 4C8B4500                	mov r8, qword[rbp]
 18144 0000CA45 4889E9                  	mov rcx, rbp
 18145 0000CA48 4883E908                	sub rcx, 8
 18146                                  	 .L_loop_fix_stuck_0143:
 18147 0000CA4C 4839CC                  	cmp rsp, rcx
 18148 0000CA4F 7710                    ja .L_loop_fix_stuck_end_0143
 18149 0000CA51 488B19                   	mov rbx, qword[rcx]
 18150 0000CA54 48891F                  	 mov qword[rdi], rbx
 18151 0000CA57 4883EF08                	sub rdi, 8
 18152 0000CA5B 4883E908                	sub rcx, 8
 18153 0000CA5F EBEB                    jmp .L_loop_fix_stuck_0143
 18154                                  	 .L_loop_fix_stuck_end_0143:
 18155 0000CA61 4883C708                	add rdi, 8
 18156 0000CA65 4889FC                  	 mov rsp, rdi
 18157 0000CA68 4C89C5                  	mov rbp, r8
 18158 0000CA6B 5D                      	pop rbp
 18159 0000CA6C FFE0                    	jmp rax 
 18160                                  
 18161 0000CA6E E98F000000                      	jmp .L_if_end_009f
 18162                                  
 18163                                          	.L_if_else_009f:
 18164 0000CA73 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 18165 0000CA77 50                      	push rax
 18166 0000CA78 488B4510                	mov rax, qword [rbp + 8 * 2]
 18167                                  
 18168 0000CA7C 488B00                                            	mov rax, qword[rax + 8 * 0]
 18169                                  
 18170 0000CA7F 488B00                                            	mov rax, qword[rax + 8 * 0]
 18171 0000CA82 50                      	push rax
 18172 0000CA83 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18173 0000CA87 50                      	push rax
 18174 0000CA88 488B4510                	mov rax, qword [rbp + 8 * 2]
 18175                                  
 18176 0000CA8C 488B00                                            	mov rax, qword[rax + 8 * 0]
 18177                                  
 18178 0000CA8F 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18179 0000CA93 50                      	push rax
 18180 0000CA94 48B8-                   	mov rax,L_constants + 32
 18180 0000CA96 [2000000000000000] 
 18181 0000CA9E 50                      	push rax
 18182                                  
 18183 0000CA9F 6A05                    	push 5
 18184 0000CAA1 488B4510                	mov rax, qword [rbp + 8 * 2]
 18185                                  
 18186 0000CAA5 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18187                                  
 18188 0000CAA9 488B00                                            	mov rax, qword[rax + 8 * 0]
 18189 0000CAAC 488B00                  	mov rax, qword [rax]
 18190                                  	assert_closure(rax)
    42 0000CAAF 803805              <1>  cmp byte [%1], %2
    43 0000CAB2 0F85565C0000        <1>  jne L_error_incorrect_type
 18191 0000CAB8 50                      	push rax 
 18192 0000CAB9 FF7508                  	push qword [rbp + 8]
 18193 0000CABC FF7500                  	push qword [rbp]
 18194 0000CABF 4883C308                	add rbx ,8*1
 18195                                  	 .L_fix_stack_label_0142:
 18196 0000CAC3 488B5518                	mov rdx, qword[rbp+8*3]
 18197 0000CAC7 4883C203                	add rdx, 3
 18198 0000CACB 48C1E203                	shl rdx, 3
 18199 0000CACF 4889EF                  	mov rdi, rbp
 18200 0000CAD2 4801D7                  	add rdi, rdx
 18201 0000CAD5 4C8B4500                	mov r8, qword[rbp]
 18202 0000CAD9 4889E9                  	mov rcx, rbp
 18203 0000CADC 4883E908                	sub rcx, 8
 18204                                  	 .L_loop_fix_stuck_0142:
 18205 0000CAE0 4839CC                  	cmp rsp, rcx
 18206 0000CAE3 7710                    ja .L_loop_fix_stuck_end_0142
 18207 0000CAE5 488B19                   	mov rbx, qword[rcx]
 18208 0000CAE8 48891F                  	 mov qword[rdi], rbx
 18209 0000CAEB 4883EF08                	sub rdi, 8
 18210 0000CAEF 4883E908                	sub rcx, 8
 18211 0000CAF3 EBEB                    jmp .L_loop_fix_stuck_0142
 18212                                  	 .L_loop_fix_stuck_end_0142:
 18213 0000CAF5 4883C708                	add rdi, 8
 18214 0000CAF9 4889FC                  	 mov rsp, rdi
 18215 0000CAFC 4C89C5                  	mov rbp, r8
 18216 0000CAFF 5D                      	pop rbp
 18217 0000CB00 FFE0                    	jmp rax 
 18218                                  
 18219                                          	.L_if_end_009f:
 18220 0000CB02 C9                      	leave
 18221 0000CB03 C22000                  	ret 8 * (2 + 2)
 18222                                  .L_lambda_simple_end_010f:	; new closure is in rax
 18223                                  	assert_closure(rax)
    42 0000CB06 803805              <1>  cmp byte [%1], %2
    43 0000CB09 0F85FF5B0000        <1>  jne L_error_incorrect_type
 18224 0000CB0F 50                      	push rax 
 18225 0000CB10 FF7508                  	push qword [rbp + 8]
 18226 0000CB13 FF7500                  	push qword [rbp]
 18227 0000CB16 4883C308                	add rbx ,8*1
 18228                                  	 .L_fix_stack_label_0141:
 18229 0000CB1A 488B5518                	mov rdx, qword[rbp+8*3]
 18230 0000CB1E 4883C203                	add rdx, 3
 18231 0000CB22 48C1E203                	shl rdx, 3
 18232 0000CB26 4889EF                  	mov rdi, rbp
 18233 0000CB29 4801D7                  	add rdi, rdx
 18234 0000CB2C 4C8B4500                	mov r8, qword[rbp]
 18235 0000CB30 4889E9                  	mov rcx, rbp
 18236 0000CB33 4883E908                	sub rcx, 8
 18237                                  	 .L_loop_fix_stuck_0141:
 18238 0000CB37 4839CC                  	cmp rsp, rcx
 18239 0000CB3A 7710                    ja .L_loop_fix_stuck_end_0141
 18240 0000CB3C 488B19                   	mov rbx, qword[rcx]
 18241 0000CB3F 48891F                  	 mov qword[rdi], rbx
 18242 0000CB42 4883EF08                	sub rdi, 8
 18243 0000CB46 4883E908                	sub rcx, 8
 18244 0000CB4A EBEB                    jmp .L_loop_fix_stuck_0141
 18245                                  	 .L_loop_fix_stuck_end_0141:
 18246 0000CB4C 4883C708                	add rdi, 8
 18247 0000CB50 4889FC                  	 mov rsp, rdi
 18248 0000CB53 4C89C5                  	mov rbp, r8
 18249 0000CB56 5D                      	pop rbp
 18250 0000CB57 FFE0                    	jmp rax 
 18251 0000CB59 C9                      	leave
 18252 0000CB5A C22000                  	ret 8 * (2 + 2)
 18253                                  .L_lambda_simple_end_010e:	; new closure is in rax
 18254 0000CB5D 50                      	push rax
 18255                                  
 18256 0000CB5E 6A01                    	push 1
 18257 0000CB60 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18258 0000CB65 E8B0430000              	call malloc
 18259 0000CB6A 50                      	push rax
 18260 0000CB6B BF08000000              	mov rdi, 8 * 1	; new rib
 18261 0000CB70 E8A5430000              	call malloc
 18262 0000CB75 50                      	push rax
 18263 0000CB76 BF18000000              	mov rdi, 8 * 3	; extended env
 18264 0000CB7B E89A430000              	call malloc
 18265 0000CB80 488B7D10                	mov rdi, ENV
 18266 0000CB84 BE00000000              	mov rsi, 0
 18267 0000CB89 BA01000000              	mov rdx, 1
 18268                                  .L_lambda_simple_env_loop_0110:	; ext_env[i + 1] <-- env[i]
 18269 0000CB8E 4883FE02                	cmp rsi, 2
 18270 0000CB92 7410                    	je .L_lambda_simple_env_end_0110
 18271 0000CB94 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18272 0000CB98 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18273 0000CB9C 48FFC6                  	inc rsi
 18274 0000CB9F 48FFC2                  	inc rdx
 18275 0000CBA2 EBEA                    	jmp .L_lambda_simple_env_loop_0110
 18276                                  .L_lambda_simple_env_end_0110:
 18277 0000CBA4 5B                      	pop rbx
 18278 0000CBA5 BE00000000              	mov rsi, 0
 18279                                  .L_lambda_simple_params_loop_0110:	; copy params
 18280 0000CBAA 4883FE01                	cmp rsi, 1
 18281 0000CBAE 740E                    	je .L_lambda_simple_params_end_0110
 18282 0000CBB0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18283 0000CBB5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18284 0000CBB9 48FFC6                  	inc rsi
 18285 0000CBBC EBEC                    	jmp .L_lambda_simple_params_loop_0110
 18286                                  .L_lambda_simple_params_end_0110:
 18287 0000CBBE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18288 0000CBC1 4889C3                  	mov rbx, rax
 18289 0000CBC4 58                      	pop rax
 18290 0000CBC5 C60005                  	mov byte [rax], T_closure
 18291 0000CBC8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18292 0000CBCC 48C74009[D9CB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0110
 18293 0000CBD4 E9E6040000              	jmp .L_lambda_simple_end_0110
 18294                                  .L_lambda_simple_code_0110:	; lambda-simple body
 18295 0000CBD9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18296 0000CBDF 740B                    	je .L_lambda_simple_arity_check_ok_0110
 18297 0000CBE1 FF742410                	push qword [rsp + 8 * 2]
 18298 0000CBE5 6A01                    	push 1
 18299 0000CBE7 E9E7420000              	jmp L_error_incorrect_arity_simple
 18300                                  .L_lambda_simple_arity_check_ok_0110:
 18301 0000CBEC C8000000                	enter 0, 0
 18302 0000CBF0 48B8-                   	 	mov rax,L_constants + 23
 18302 0000CBF2 [1700000000000000] 
 18303 0000CBFA 50                      	push rax
 18304                                  
 18305 0000CBFB 6A01                    	push 1
 18306 0000CBFD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18307 0000CC02 E813430000              	call malloc
 18308 0000CC07 50                      	push rax
 18309 0000CC08 BF08000000              	mov rdi, 8 * 1	; new rib
 18310 0000CC0D E808430000              	call malloc
 18311 0000CC12 50                      	push rax
 18312 0000CC13 BF20000000              	mov rdi, 8 * 4	; extended env
 18313 0000CC18 E8FD420000              	call malloc
 18314 0000CC1D 488B7D10                	mov rdi, ENV
 18315 0000CC21 BE00000000              	mov rsi, 0
 18316 0000CC26 BA01000000              	mov rdx, 1
 18317                                  .L_lambda_simple_env_loop_0111:	; ext_env[i + 1] <-- env[i]
 18318 0000CC2B 4883FE03                	cmp rsi, 3
 18319 0000CC2F 7410                    	je .L_lambda_simple_env_end_0111
 18320 0000CC31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18321 0000CC35 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18322 0000CC39 48FFC6                  	inc rsi
 18323 0000CC3C 48FFC2                  	inc rdx
 18324 0000CC3F EBEA                    	jmp .L_lambda_simple_env_loop_0111
 18325                                  .L_lambda_simple_env_end_0111:
 18326 0000CC41 5B                      	pop rbx
 18327 0000CC42 BE00000000              	mov rsi, 0
 18328                                  .L_lambda_simple_params_loop_0111:	; copy params
 18329 0000CC47 4883FE01                	cmp rsi, 1
 18330 0000CC4B 740E                    	je .L_lambda_simple_params_end_0111
 18331 0000CC4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18332 0000CC52 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18333 0000CC56 48FFC6                  	inc rsi
 18334 0000CC59 EBEC                    	jmp .L_lambda_simple_params_loop_0111
 18335                                  .L_lambda_simple_params_end_0111:
 18336 0000CC5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18337 0000CC5E 4889C3                  	mov rbx, rax
 18338 0000CC61 58                      	pop rax
 18339 0000CC62 C60005                  	mov byte [rax], T_closure
 18340 0000CC65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18341 0000CC69 48C74009[76CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0111
 18342 0000CC71 E9F2030000              	jmp .L_lambda_simple_end_0111
 18343                                  .L_lambda_simple_code_0111:	; lambda-simple body
 18344 0000CC76 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18345 0000CC7C 740B                    	je .L_lambda_simple_arity_check_ok_0111
 18346 0000CC7E FF742410                	push qword [rsp + 8 * 2]
 18347 0000CC82 6A01                    	push 1
 18348 0000CC84 E94A420000              	jmp L_error_incorrect_arity_simple
 18349                                  .L_lambda_simple_arity_check_ok_0111:
 18350 0000CC89 C8000000                	enter 0, 0
 18351 0000CC8D BF08000000              	mov rdi, 8
 18352 0000CC92 E883420000              	call malloc
 18353 0000CC97 488B5D20                	mov rbx, PARAM(0)
 18354 0000CC9B 488918                  	mov qword [rax], rbx
 18355 0000CC9E 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18356                                  
 18357 0000CCA2 48B8-                            	mov rax, sob_void
 18357 0000CCA4 [0000000000000000] 
 18358                                  
 18359 0000CCAC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18360 0000CCB1 E864420000              	call malloc
 18361 0000CCB6 50                      	push rax
 18362 0000CCB7 BF08000000              	mov rdi, 8 * 1	; new rib
 18363 0000CCBC E859420000              	call malloc
 18364 0000CCC1 50                      	push rax
 18365 0000CCC2 BF28000000              	mov rdi, 8 * 5	; extended env
 18366 0000CCC7 E84E420000              	call malloc
 18367 0000CCCC 488B7D10                	mov rdi, ENV
 18368 0000CCD0 BE00000000              	mov rsi, 0
 18369 0000CCD5 BA01000000              	mov rdx, 1
 18370                                  .L_lambda_simple_env_loop_0112:	; ext_env[i + 1] <-- env[i]
 18371 0000CCDA 4883FE04                	cmp rsi, 4
 18372 0000CCDE 7410                    	je .L_lambda_simple_env_end_0112
 18373 0000CCE0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18374 0000CCE4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18375 0000CCE8 48FFC6                  	inc rsi
 18376 0000CCEB 48FFC2                  	inc rdx
 18377 0000CCEE EBEA                    	jmp .L_lambda_simple_env_loop_0112
 18378                                  .L_lambda_simple_env_end_0112:
 18379 0000CCF0 5B                      	pop rbx
 18380 0000CCF1 BE00000000              	mov rsi, 0
 18381                                  .L_lambda_simple_params_loop_0112:	; copy params
 18382 0000CCF6 4883FE01                	cmp rsi, 1
 18383 0000CCFA 740E                    	je .L_lambda_simple_params_end_0112
 18384 0000CCFC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18385 0000CD01 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18386 0000CD05 48FFC6                  	inc rsi
 18387 0000CD08 EBEC                    	jmp .L_lambda_simple_params_loop_0112
 18388                                  .L_lambda_simple_params_end_0112:
 18389 0000CD0A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18390 0000CD0D 4889C3                  	mov rbx, rax
 18391 0000CD10 58                      	pop rax
 18392 0000CD11 C60005                  	mov byte [rax], T_closure
 18393 0000CD14 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18394 0000CD18 48C74009[25CD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0112
 18395 0000CD20 E947010000              	jmp .L_lambda_simple_end_0112
 18396                                  .L_lambda_simple_code_0112:	; lambda-simple body
 18397 0000CD25 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18398 0000CD2B 740B                    	je .L_lambda_simple_arity_check_ok_0112
 18399 0000CD2D FF742410                	push qword [rsp + 8 * 2]
 18400 0000CD31 6A02                    	push 2
 18401 0000CD33 E99B410000              	jmp L_error_incorrect_arity_simple
 18402                                  .L_lambda_simple_arity_check_ok_0112:
 18403 0000CD38 C8000000                	enter 0, 0
 18404 0000CD3C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18405 0000CD40 50                      	push rax
 18406 0000CD41 6A01                    	push 1
 18407 0000CD43 488B0425[00000000]      	mov rax, qword [free_var_0]
 18408 0000CD4B 803805                  	cmp byte [rax], T_closure 
 18409 0000CD4E 0F857B510000                    jne L_code_ptr_error
 18410                                  
 18411 0000CD54 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18412                                  
 18413 0000CD58 53                              push rbx
 18414                                  
 18415 0000CD59 FF5009                          call SOB_CLOSURE_CODE(rax)
 18416                                  
 18417 0000CD5C 483D[02000000]                  	cmp rax, sob_boolean_false
 18418 0000CD62 0F8500010000            	jne .L_or_end_0015
 18419 0000CD68 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18420 0000CD6C 50                      	push rax
 18421 0000CD6D 6A01                    	push 1
 18422 0000CD6F 488B0425[80000000]      	mov rax, qword [free_var_16]
 18423 0000CD77 803805                  	cmp byte [rax], T_closure 
 18424 0000CD7A 0F854F510000                    jne L_code_ptr_error
 18425                                  
 18426 0000CD80 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18427                                  
 18428 0000CD84 53                              push rbx
 18429                                  
 18430 0000CD85 FF5009                          call SOB_CLOSURE_CODE(rax)
 18431                                  
 18432 0000CD88 50                              	push rax
 18433 0000CD89 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18434 0000CD8D 50                      	push rax
 18435 0000CD8E 6A02                    	push 2
 18436 0000CD90 488B4510                	mov rax, qword [rbp + 8 * 2]
 18437                                  
 18438 0000CD94 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18439                                  
 18440 0000CD98 488B00                                            	mov rax, qword[rax + 8 * 0]
 18441 0000CD9B 803805                  	cmp byte [rax], T_closure 
 18442 0000CD9E 0F852B510000                    jne L_code_ptr_error
 18443                                  
 18444 0000CDA4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18445                                  
 18446 0000CDA8 53                              push rbx
 18447                                  
 18448 0000CDA9 FF5009                          call SOB_CLOSURE_CODE(rax)
 18449                                  
 18450                                          
 18451 0000CDAC 483D[02000000]                  	cmp rax, sob_boolean_false
 18452                                  
 18453 0000CDB2 0F84A6000000                    	je .L_if_else_00a0
 18454 0000CDB8 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 18455 0000CDBC 50                      	push rax
 18456 0000CDBD 6A01                    	push 1
 18457 0000CDBF 488B0425[88000000]      	mov rax, qword [free_var_17]
 18458 0000CDC7 803805                  	cmp byte [rax], T_closure 
 18459 0000CDCA 0F85FF500000                    jne L_code_ptr_error
 18460                                  
 18461 0000CDD0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18462                                  
 18463 0000CDD4 53                              push rbx
 18464                                  
 18465 0000CDD5 FF5009                          call SOB_CLOSURE_CODE(rax)
 18466                                  
 18467 0000CDD8 50                              	push rax
 18468 0000CDD9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18469 0000CDDD 50                      	push rax
 18470 0000CDDE 6A01                    	push 1
 18471 0000CDE0 488B0425[80000000]      	mov rax, qword [free_var_16]
 18472 0000CDE8 803805                  	cmp byte [rax], T_closure 
 18473 0000CDEB 0F85DE500000                    jne L_code_ptr_error
 18474                                  
 18475 0000CDF1 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18476                                  
 18477 0000CDF5 53                              push rbx
 18478                                  
 18479 0000CDF6 FF5009                          call SOB_CLOSURE_CODE(rax)
 18480                                  
 18481 0000CDF9 50                              	push rax
 18482                                  
 18483 0000CDFA 6A02                    	push 2
 18484 0000CDFC 488B4510                	mov rax, qword [rbp + 8 * 2]
 18485                                  
 18486 0000CE00 488B00                                            	mov rax, qword[rax + 8 * 0]
 18487                                  
 18488 0000CE03 488B00                                            	mov rax, qword[rax + 8 * 0]
 18489 0000CE06 488B00                  	mov rax, qword [rax]
 18490                                  	assert_closure(rax)
    42 0000CE09 803805              <1>  cmp byte [%1], %2
    43 0000CE0C 0F85FC580000        <1>  jne L_error_incorrect_type
 18491 0000CE12 50                      	push rax 
 18492 0000CE13 FF7508                  	push qword [rbp + 8]
 18493 0000CE16 FF7500                  	push qword [rbp]
 18494 0000CE19 4883C308                	add rbx ,8*1
 18495                                  	 .L_fix_stack_label_0146:
 18496 0000CE1D 488B5518                	mov rdx, qword[rbp+8*3]
 18497 0000CE21 4883C203                	add rdx, 3
 18498 0000CE25 48C1E203                	shl rdx, 3
 18499 0000CE29 4889EF                  	mov rdi, rbp
 18500 0000CE2C 4801D7                  	add rdi, rdx
 18501 0000CE2F 4C8B4500                	mov r8, qword[rbp]
 18502 0000CE33 4889E9                  	mov rcx, rbp
 18503 0000CE36 4883E908                	sub rcx, 8
 18504                                  	 .L_loop_fix_stuck_0146:
 18505 0000CE3A 4839CC                  	cmp rsp, rcx
 18506 0000CE3D 7710                    ja .L_loop_fix_stuck_end_0146
 18507 0000CE3F 488B19                   	mov rbx, qword[rcx]
 18508 0000CE42 48891F                  	 mov qword[rdi], rbx
 18509 0000CE45 4883EF08                	sub rdi, 8
 18510 0000CE49 4883E908                	sub rcx, 8
 18511 0000CE4D EBEB                    jmp .L_loop_fix_stuck_0146
 18512                                  	 .L_loop_fix_stuck_end_0146:
 18513 0000CE4F 4883C708                	add rdi, 8
 18514 0000CE53 4889FC                  	 mov rsp, rdi
 18515 0000CE56 4C89C5                  	mov rbp, r8
 18516 0000CE59 5D                      	pop rbp
 18517 0000CE5A FFE0                    	jmp rax 
 18518                                  
 18519 0000CE5C EB0A                            	jmp .L_if_end_00a0
 18520                                  
 18521                                          	.L_if_else_00a0:
 18522 0000CE5E 48B8-                   	mov rax,L_constants + 2
 18522 0000CE60 [0200000000000000] 
 18523                                  
 18524                                          	.L_if_end_00a0:
 18525                                  .L_or_end_0015:
 18526 0000CE68 C9                      	leave
 18527 0000CE69 C22000                  	ret 8 * (2 + 2)
 18528                                  .L_lambda_simple_end_0112:	; new closure is in rax
 18529 0000CE6C 50                      	push rax
 18530 0000CE6D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18531 0000CE71 8F00                    	pop qword [rax]
 18532 0000CE73 48B8-                   	mov rax, sob_void
 18532 0000CE75 [0000000000000000] 
 18533                                  
 18534 0000CE7D BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 18535 0000CE82 E893400000              	call malloc
 18536 0000CE87 50                      	push rax
 18537 0000CE88 BF08000000              	mov rdi, 8 * 1  ; new rib
 18538 0000CE8D E888400000              	call malloc
 18539 0000CE92 50                      	push rax
 18540 0000CE93 BF28000000              	mov rdi, 8 * 5	; extended env
 18541 0000CE98 E87D400000              	call malloc
 18542 0000CE9D 488B7D10                	mov rdi, ENV
 18543 0000CEA1 BE00000000              	mov rsi, 0
 18544 0000CEA6 BA01000000              	mov rdx, 1
 18545                                  .L_lambda_opt_env_loop_002a:	; ext_env = env
 18546 0000CEAB 4883FE04                	cmp rsi, 4
 18547 0000CEAF 7410                    	je .L_lambda_opt_env_end_002a
 18548 0000CEB1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18549 0000CEB5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18550 0000CEB9 48FFC6                  	inc rsi
 18551 0000CEBC 48FFC2                  	inc rdx
 18552 0000CEBF EBEA                    	jmp .L_lambda_opt_env_loop_002a
 18553                                  .L_lambda_opt_env_end_002a:
 18554 0000CEC1 5B                      	pop rbx
 18555 0000CEC2 BE00000000              	mov rsi, 0
 18556                                  .L_lambda_opt_params_loop_002a:	; copy params
 18557 0000CEC7 4883FE01                	cmp rsi, 1
 18558 0000CECB 740E                    	je .L_lambda_opt_params_end_002a
 18559 0000CECD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18560 0000CED2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18561 0000CED6 48FFC6                  	inc rsi
 18562 0000CED9 EBEC                    	jmp .L_lambda_opt_params_loop_002a
 18563                                  .L_lambda_opt_params_end_002a:
 18564 0000CEDB 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 18565 0000CEDE 4889C3                  	mov rbx, rax
 18566 0000CEE1 58                      	pop rax
 18567 0000CEE2 C60005                  	mov byte [rax], T_closure
 18568 0000CEE5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18569 0000CEE9 48C74009[F6CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002a
 18570 0000CEF1 E96E010000              	jmp .L_lambda_opt_end_002a
 18571                                  .L_lambda_opt_code_002a:	; lambda-opt body
 18572 0000CEF6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18573 0000CEFC 740D                    	je .L_lambda_opt_arity_check_exact_002a  ;same num_of_args
 18574 0000CEFE 7F5B                    	jg .L_lambda_opt_arity_check_more_002a  ;greater num_of_args
 18575 0000CF00 FF742410                	push qword [rsp + 8 * 2]
 18576 0000CF04 6A01                    	push 1
 18577 0000CF06 E9DC3F0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 18578                                  .L_lambda_opt_arity_check_exact_002a:
 18579 0000CF0B 4883EC08                	sub rsp, 8 * 1
 18580 0000CF0F 4889E7                  	mov rdi, rsp 
 18581                                  	;mov ret
 18582 0000CF12 488B4708                	mov rax, qword [rdi + (8 * 1)]
 18583 0000CF16 488907                  	mov qword [rdi], rax
 18584 0000CF19 4883C708                	add rdi, 8
 18585                                  	;mov env
 18586 0000CF1D 488B4708                	mov rax, qword [rdi + (8 * 1)]
 18587 0000CF21 488907                  	mov qword [rdi], rax
 18588 0000CF24 4883C708                	add rdi, 8
 18589                                  	;mov & update COUNT
 18590 0000CF28 488B4708                	mov rax, qword [rdi +(8 * 1)]
 18591 0000CF2C 4889C1                  	mov rcx, rax
 18592 0000CF2F 48FFC0                  	inc rax
 18593 0000CF32 488907                  	mov qword [rdi], rax
 18594 0000CF35 4883C708                	add rdi, 8
 18595                                  	;LOOP:move params
 18596                                  .L_lambda_opt_stack_shrink_loop_007c:	
 18597 0000CF39 4883F900                	cmp rcx, 0
 18598 0000CF3D 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_007c
 18599 0000CF3F 488B4708                	mov rax, qword [rdi + 8]
 18600 0000CF43 488907                  	mov qword [rdi], rax
 18601 0000CF46 4883C708                	add rdi, 8
 18602 0000CF4A 48FFC9                  	dec rcx
 18603 0000CF4D EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_007c
 18604                                  .L_lambda_opt_stack_shrink_loop_exit_007c:	
 18605 0000CF4F 48C707[01000000]        	mov qword [rdi], sob_nil
 18606 0000CF56 E995000000              	jmp .L_lambda_opt_stack_adjusted_002a
 18607                                  .L_lambda_opt_arity_check_more_002a:	
 18608 0000CF5B 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 18609 0000CF60 488D4EFF                	lea rcx, [rsi - 1]
 18610 0000CF64 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 18611 0000CF69 4989F2                  	mov r10, rsi
 18612 0000CF6C 49B9-                   	mov r9, sob_nil
 18612 0000CF6E [0100000000000000] 
 18613                                  .L_lambda_opt_stack_shrink_loop_007d:	
 18614 0000CF76 4883F900                	cmp rcx, 0
 18615 0000CF7A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_007d
 18616 0000CF7C BF11000000              	mov rdi, 1 + 8 + 8
 18617 0000CF81 E8943F0000              	call malloc
 18618 0000CF86 C60021                  	mov byte [rax], T_pair
 18619 0000CF89 488B1E                  	mov rbx, qword [rsi]
 18620 0000CF8C 48895801                	mov SOB_PAIR_CAR(rax), rbx
 18621 0000CF90 4C894809                	mov SOB_PAIR_CDR(rax), r9
 18622 0000CF94 4989C1                  	mov r9, rax
 18623 0000CF97 4883EE08                	sub rsi, 8 * 1
 18624 0000CF9B 48FFC9                  	dec rcx
 18625 0000CF9E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_007d
 18626                                  .L_lambda_opt_stack_shrink_loop_exit_007d:	
 18627 0000CFA0 4D890A                  	mov qword [r10], r9
 18628 0000CFA3 4983EA08                	sub r10, 8 * 1; the new dest!
 18629 0000CFA7 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
 18630 0000CFAC B901000000              	mov rcx, 1 
 18631                                  .L_lambda_opt_stack_shrink_loop_007e:	
 18632 0000CFB1 4883F900                	cmp rcx, 0
 18633 0000CFB5 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_007e
 18634 0000CFB7 488B06                  	mov rax, qword [rsi]
 18635 0000CFBA 498902                  	mov qword [r10], rax
 18636 0000CFBD 4983EA08                	sub r10, 8 * 1
 18637 0000CFC1 4883EE08                	sub rsi, 8 * 1
 18638 0000CFC5 48FFC9                  	dec rcx
 18639 0000CFC8 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_007e
 18640                                  .L_lambda_opt_stack_shrink_loop_exit_007e:	
 18641 0000CFCA 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
 18642 0000CFD1 4983EA08                	sub r10, 8 * 1
 18643 0000CFD5 4883EE08                	sub rsi, 8 * 1
 18644 0000CFD9 488B06                  	mov rax, qword [rsi] ;env
 18645 0000CFDC 498902                  	mov qword [r10], rax
 18646 0000CFDF 4983EA08                	sub r10, 8 * 1
 18647 0000CFE3 4883EE08                	sub rsi, 8 * 1
 18648 0000CFE7 488B06                  	mov rax, qword [rsi] ;ret
 18649 0000CFEA 498902                  	mov qword [r10], rax
 18650 0000CFED 4C89D4                  	mov rsp, r10
 18651                                  .L_lambda_opt_stack_adjusted_002a:	
 18652 0000CFF0 C8000000                	enter 0, 0
 18653 0000CFF4 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 18654 0000CFF8 50                      	push rax
 18655 0000CFF9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18656 0000CFFD 50                      	push rax
 18657                                  
 18658 0000CFFE 6A02                    	push 2
 18659 0000D000 488B4510                	mov rax, qword [rbp + 8 * 2]
 18660                                  
 18661 0000D004 488B00                                            	mov rax, qword[rax + 8 * 0]
 18662                                  
 18663 0000D007 488B00                                            	mov rax, qword[rax + 8 * 0]
 18664 0000D00A 488B00                  	mov rax, qword [rax]
 18665                                  	assert_closure(rax)
    42 0000D00D 803805              <1>  cmp byte [%1], %2
    43 0000D010 0F85F8560000        <1>  jne L_error_incorrect_type
 18666 0000D016 50                      	push rax 
 18667 0000D017 FF7508                  	push qword [rbp + 8]
 18668 0000D01A FF7500                  	push qword [rbp]
 18669 0000D01D 4883C308                	add rbx ,8*1
 18670                                  	 .L_fix_stack_label_0147:
 18671 0000D021 488B5518                	mov rdx, qword[rbp+8*3]
 18672 0000D025 4883C203                	add rdx, 3
 18673 0000D029 48C1E203                	shl rdx, 3
 18674 0000D02D 4889EF                  	mov rdi, rbp
 18675 0000D030 4801D7                  	add rdi, rdx
 18676 0000D033 4C8B4500                	mov r8, qword[rbp]
 18677 0000D037 4889E9                  	mov rcx, rbp
 18678 0000D03A 4883E908                	sub rcx, 8
 18679                                  	 .L_loop_fix_stuck_0147:
 18680 0000D03E 4839CC                  	cmp rsp, rcx
 18681 0000D041 7710                    ja .L_loop_fix_stuck_end_0147
 18682 0000D043 488B19                   	mov rbx, qword[rcx]
 18683 0000D046 48891F                  	 mov qword[rdi], rbx
 18684 0000D049 4883EF08                	sub rdi, 8
 18685 0000D04D 4883E908                	sub rcx, 8
 18686 0000D051 EBEB                    jmp .L_loop_fix_stuck_0147
 18687                                  	 .L_loop_fix_stuck_end_0147:
 18688 0000D053 4883C708                	add rdi, 8
 18689 0000D057 4889FC                  	 mov rsp, rdi
 18690 0000D05A 4C89C5                  	mov rbp, r8
 18691 0000D05D 5D                      	pop rbp
 18692 0000D05E FFE0                    	jmp rax 
 18693 0000D060 C9                      	leave
 18694 0000D061 C22000                  	ret 8 * (2 + 2)
 18695                                  .L_lambda_opt_end_002a:	; new closure is in rax
 18696 0000D064 C9                      	leave
 18697 0000D065 C21800                  	ret 8 * (2 + 1)
 18698                                  .L_lambda_simple_end_0111:	; new closure is in rax
 18699                                  	assert_closure(rax)
    42 0000D068 803805              <1>  cmp byte [%1], %2
    43 0000D06B 0F859D560000        <1>  jne L_error_incorrect_type
 18700 0000D071 50                      	push rax 
 18701 0000D072 FF7508                  	push qword [rbp + 8]
 18702 0000D075 FF7500                  	push qword [rbp]
 18703 0000D078 4883C308                	add rbx ,8*1
 18704                                  	 .L_fix_stack_label_0145:
 18705 0000D07C 488B5518                	mov rdx, qword[rbp+8*3]
 18706 0000D080 4883C203                	add rdx, 3
 18707 0000D084 48C1E203                	shl rdx, 3
 18708 0000D088 4889EF                  	mov rdi, rbp
 18709 0000D08B 4801D7                  	add rdi, rdx
 18710 0000D08E 4C8B4500                	mov r8, qword[rbp]
 18711 0000D092 4889E9                  	mov rcx, rbp
 18712 0000D095 4883E908                	sub rcx, 8
 18713                                  	 .L_loop_fix_stuck_0145:
 18714 0000D099 4839CC                  	cmp rsp, rcx
 18715 0000D09C 7710                    ja .L_loop_fix_stuck_end_0145
 18716 0000D09E 488B19                   	mov rbx, qword[rcx]
 18717 0000D0A1 48891F                  	 mov qword[rdi], rbx
 18718 0000D0A4 4883EF08                	sub rdi, 8
 18719 0000D0A8 4883E908                	sub rcx, 8
 18720 0000D0AC EBEB                    jmp .L_loop_fix_stuck_0145
 18721                                  	 .L_loop_fix_stuck_end_0145:
 18722 0000D0AE 4883C708                	add rdi, 8
 18723 0000D0B2 4889FC                  	 mov rsp, rdi
 18724 0000D0B5 4C89C5                  	mov rbp, r8
 18725 0000D0B8 5D                      	pop rbp
 18726 0000D0B9 FFE0                    	jmp rax 
 18727 0000D0BB C9                      	leave
 18728 0000D0BC C21800                  	ret 8 * (2 + 1)
 18729                                  .L_lambda_simple_end_0110:	; new closure is in rax
 18730                                  	assert_closure(rax)
    42 0000D0BF 803805              <1>  cmp byte [%1], %2
    43 0000D0C2 0F8546560000        <1>  jne L_error_incorrect_type
 18731 0000D0C8 50                      	push rax 
 18732 0000D0C9 FF7508                  	push qword [rbp + 8]
 18733 0000D0CC FF7500                  	push qword [rbp]
 18734 0000D0CF 4883C308                	add rbx ,8*1
 18735                                  	 .L_fix_stack_label_0144:
 18736 0000D0D3 488B5518                	mov rdx, qword[rbp+8*3]
 18737 0000D0D7 4883C203                	add rdx, 3
 18738 0000D0DB 48C1E203                	shl rdx, 3
 18739 0000D0DF 4889EF                  	mov rdi, rbp
 18740 0000D0E2 4801D7                  	add rdi, rdx
 18741 0000D0E5 4C8B4500                	mov r8, qword[rbp]
 18742 0000D0E9 4889E9                  	mov rcx, rbp
 18743 0000D0EC 4883E908                	sub rcx, 8
 18744                                  	 .L_loop_fix_stuck_0144:
 18745 0000D0F0 4839CC                  	cmp rsp, rcx
 18746 0000D0F3 7710                    ja .L_loop_fix_stuck_end_0144
 18747 0000D0F5 488B19                   	mov rbx, qword[rcx]
 18748 0000D0F8 48891F                  	 mov qword[rdi], rbx
 18749 0000D0FB 4883EF08                	sub rdi, 8
 18750 0000D0FF 4883E908                	sub rcx, 8
 18751 0000D103 EBEB                    jmp .L_loop_fix_stuck_0144
 18752                                  	 .L_loop_fix_stuck_end_0144:
 18753 0000D105 4883C708                	add rdi, 8
 18754 0000D109 4889FC                  	 mov rsp, rdi
 18755 0000D10C 4C89C5                  	mov rbp, r8
 18756 0000D10F 5D                      	pop rbp
 18757 0000D110 FFE0                    	jmp rax 
 18758 0000D112 C9                      	leave
 18759 0000D113 C21800                  	ret 8 * (2 + 1)
 18760                                  .L_lambda_simple_end_010c:	; new closure is in rax
 18761                                  	assert_closure(rax)
    42 0000D116 803805              <1>  cmp byte [%1], %2
    43 0000D119 0F85EF550000        <1>  jne L_error_incorrect_type
 18762 0000D11F 50                      	push rax 
 18763 0000D120 FF7508                  	push qword [rbp + 8]
 18764 0000D123 FF7500                  	push qword [rbp]
 18765 0000D126 4883C308                	add rbx ,8*1
 18766                                  	 .L_fix_stack_label_013f:
 18767 0000D12A 488B5518                	mov rdx, qword[rbp+8*3]
 18768 0000D12E 4883C203                	add rdx, 3
 18769 0000D132 48C1E203                	shl rdx, 3
 18770 0000D136 4889EF                  	mov rdi, rbp
 18771 0000D139 4801D7                  	add rdi, rdx
 18772 0000D13C 4C8B4500                	mov r8, qword[rbp]
 18773 0000D140 4889E9                  	mov rcx, rbp
 18774 0000D143 4883E908                	sub rcx, 8
 18775                                  	 .L_loop_fix_stuck_013f:
 18776 0000D147 4839CC                  	cmp rsp, rcx
 18777 0000D14A 7710                    ja .L_loop_fix_stuck_end_013f
 18778 0000D14C 488B19                   	mov rbx, qword[rcx]
 18779 0000D14F 48891F                  	 mov qword[rdi], rbx
 18780 0000D152 4883EF08                	sub rdi, 8
 18781 0000D156 4883E908                	sub rcx, 8
 18782 0000D15A EBEB                    jmp .L_loop_fix_stuck_013f
 18783                                  	 .L_loop_fix_stuck_end_013f:
 18784 0000D15C 4883C708                	add rdi, 8
 18785 0000D160 4889FC                  	 mov rsp, rdi
 18786 0000D163 4C89C5                  	mov rbp, r8
 18787 0000D166 5D                      	pop rbp
 18788 0000D167 FFE0                    	jmp rax 
 18789 0000D169 C9                      	leave
 18790 0000D16A C22000                  	ret 8 * (2 + 2)
 18791                                  .L_lambda_simple_end_010b:	; new closure is in rax
 18792 0000D16D 50                      	push rax
 18793 0000D16E 6A01                    	push 1
 18794 0000D170 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18795 0000D175 E8A03D0000              	call malloc
 18796 0000D17A 50                      	push rax
 18797 0000D17B BF00000000              	mov rdi, 8 * 0	; new rib
 18798 0000D180 E8953D0000              	call malloc
 18799 0000D185 50                      	push rax
 18800 0000D186 BF08000000              	mov rdi, 8 * 1	; extended env
 18801 0000D18B E88A3D0000              	call malloc
 18802 0000D190 488B7D10                	mov rdi, ENV
 18803 0000D194 BE00000000              	mov rsi, 0
 18804 0000D199 BA01000000              	mov rdx, 1
 18805                                  .L_lambda_simple_env_loop_0113:	; ext_env[i + 1] <-- env[i]
 18806 0000D19E 4883FE00                	cmp rsi, 0
 18807 0000D1A2 7410                    	je .L_lambda_simple_env_end_0113
 18808 0000D1A4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18809 0000D1A8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18810 0000D1AC 48FFC6                  	inc rsi
 18811 0000D1AF 48FFC2                  	inc rdx
 18812 0000D1B2 EBEA                    	jmp .L_lambda_simple_env_loop_0113
 18813                                  .L_lambda_simple_env_end_0113:
 18814 0000D1B4 5B                      	pop rbx
 18815 0000D1B5 BE00000000              	mov rsi, 0
 18816                                  .L_lambda_simple_params_loop_0113:	; copy params
 18817 0000D1BA 4883FE00                	cmp rsi, 0
 18818 0000D1BE 740E                    	je .L_lambda_simple_params_end_0113
 18819 0000D1C0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18820 0000D1C5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18821 0000D1C9 48FFC6                  	inc rsi
 18822 0000D1CC EBEC                    	jmp .L_lambda_simple_params_loop_0113
 18823                                  .L_lambda_simple_params_end_0113:
 18824 0000D1CE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18825 0000D1D1 4889C3                  	mov rbx, rax
 18826 0000D1D4 58                      	pop rax
 18827 0000D1D5 C60005                  	mov byte [rax], T_closure
 18828 0000D1D8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18829 0000D1DC 48C74009[E9D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0113
 18830 0000D1E4 E907010000              	jmp .L_lambda_simple_end_0113
 18831                                  .L_lambda_simple_code_0113:	; lambda-simple body
 18832 0000D1E9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18833 0000D1EF 740B                    	je .L_lambda_simple_arity_check_ok_0113
 18834 0000D1F1 FF742410                	push qword [rsp + 8 * 2]
 18835 0000D1F5 6A01                    	push 1
 18836 0000D1F7 E9D73C0000              	jmp L_error_incorrect_arity_simple
 18837                                  .L_lambda_simple_arity_check_ok_0113:
 18838 0000D1FC C8000000                	enter 0, 0
 18839 0000D200 488B0425[70030000]      	mov rax, qword [free_var_110]
 18840 0000D208 50                      	push rax
 18841 0000D209 488B0425[60030000]      	mov rax, qword [free_var_108]
 18842 0000D211 50                      	push rax
 18843 0000D212 6A02                    	push 2
 18844 0000D214 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18845 0000D218 803805                  	cmp byte [rax], T_closure 
 18846 0000D21B 0F85AE4C0000                    jne L_code_ptr_error
 18847                                  
 18848 0000D221 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18849                                  
 18850 0000D225 53                              push rbx
 18851                                  
 18852 0000D226 FF5009                          call SOB_CLOSURE_CODE(rax)
 18853                                  
 18854 0000D229 48890425[E8030000]              	mov qword [free_var_125], rax
 18855                                  
 18856 0000D231 48B8-                           	mov rax, sob_void
 18856 0000D233 [0000000000000000] 
 18857                                  
 18858 0000D23B 488B0425[70030000]      	mov rax, qword [free_var_110]
 18859 0000D243 50                      	push rax
 18860 0000D244 488B0425[60030000]      	mov rax, qword [free_var_108]
 18861 0000D24C 50                      	push rax
 18862 0000D24D 6A02                    	push 2
 18863 0000D24F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18864 0000D253 803805                  	cmp byte [rax], T_closure 
 18865 0000D256 0F85734C0000                    jne L_code_ptr_error
 18866                                  
 18867 0000D25C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18868                                  
 18869 0000D260 53                              push rbx
 18870                                  
 18871 0000D261 FF5009                          call SOB_CLOSURE_CODE(rax)
 18872                                  
 18873 0000D264 48890425[10040000]              	mov qword [free_var_130], rax
 18874                                  
 18875 0000D26C 48B8-                           	mov rax, sob_void
 18875 0000D26E [0000000000000000] 
 18876                                  
 18877 0000D276 488B0425[70030000]      	mov rax, qword [free_var_110]
 18878 0000D27E 50                      	push rax
 18879 0000D27F 488B0425[78030000]      	mov rax, qword [free_var_111]
 18880 0000D287 50                      	push rax
 18881 0000D288 6A02                    	push 2
 18882 0000D28A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18883 0000D28E 803805                  	cmp byte [rax], T_closure 
 18884 0000D291 0F85384C0000                    jne L_code_ptr_error
 18885                                  
 18886 0000D297 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18887                                  
 18888 0000D29B 53                              push rbx
 18889                                  
 18890 0000D29C FF5009                          call SOB_CLOSURE_CODE(rax)
 18891                                  
 18892 0000D29F 48890425[F8030000]              	mov qword [free_var_127], rax
 18893                                  
 18894 0000D2A7 48B8-                           	mov rax, sob_void
 18894 0000D2A9 [0000000000000000] 
 18895                                  
 18896 0000D2B1 488B0425[A8030000]      	mov rax, qword [free_var_117]
 18897 0000D2B9 50                      	push rax
 18898 0000D2BA 488B0425[B0030000]      	mov rax, qword [free_var_118]
 18899 0000D2C2 50                      	push rax
 18900 0000D2C3 6A02                    	push 2
 18901 0000D2C5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18902 0000D2C9 803805                  	cmp byte [rax], T_closure 
 18903 0000D2CC 0F85FD4B0000                    jne L_code_ptr_error
 18904                                  
 18905 0000D2D2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18906                                  
 18907 0000D2D6 53                              push rbx
 18908                                  
 18909 0000D2D7 FF5009                          call SOB_CLOSURE_CODE(rax)
 18910                                  
 18911 0000D2DA 48890425[20040000]              	mov qword [free_var_132], rax
 18912                                  
 18913 0000D2E2 48B8-                           	mov rax, sob_void
 18913 0000D2E4 [0000000000000000] 
 18914 0000D2EC C9                      	leave
 18915 0000D2ED C21800                  	ret 8 * (2 + 1)
 18916                                  .L_lambda_simple_end_0113:	; new closure is in rax
 18917 0000D2F0 803805                  	cmp byte [rax], T_closure 
 18918 0000D2F3 0F85D64B0000                    jne L_code_ptr_error
 18919                                  
 18920 0000D2F9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 18921                                  
 18922 0000D2FD 53                              push rbx
 18923                                  
 18924 0000D2FE FF5009                          call SOB_CLOSURE_CODE(rax)
 18925                                  
 18926                                          
 18927 0000D301 4889C7                  	mov rdi, rax
 18928 0000D304 E8223C0000              	call print_sexpr_if_not_void
 18929                                  
 18930 0000D309 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18931 0000D30E E8073C0000              	call malloc
 18932 0000D313 50                      	push rax
 18933 0000D314 BF00000000              	mov rdi, 8 * 0	; new rib
 18934 0000D319 E8FC3B0000              	call malloc
 18935 0000D31E 50                      	push rax
 18936 0000D31F BF08000000              	mov rdi, 8 * 1	; extended env
 18937 0000D324 E8F13B0000              	call malloc
 18938 0000D329 488B7D10                	mov rdi, ENV
 18939 0000D32D BE00000000              	mov rsi, 0
 18940 0000D332 BA01000000              	mov rdx, 1
 18941                                  .L_lambda_simple_env_loop_0114:	; ext_env[i + 1] <-- env[i]
 18942 0000D337 4883FE00                	cmp rsi, 0
 18943 0000D33B 7410                    	je .L_lambda_simple_env_end_0114
 18944 0000D33D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18945 0000D341 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18946 0000D345 48FFC6                  	inc rsi
 18947 0000D348 48FFC2                  	inc rdx
 18948 0000D34B EBEA                    	jmp .L_lambda_simple_env_loop_0114
 18949                                  .L_lambda_simple_env_end_0114:
 18950 0000D34D 5B                      	pop rbx
 18951 0000D34E BE00000000              	mov rsi, 0
 18952                                  .L_lambda_simple_params_loop_0114:	; copy params
 18953 0000D353 4883FE00                	cmp rsi, 0
 18954 0000D357 740E                    	je .L_lambda_simple_params_end_0114
 18955 0000D359 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18956 0000D35E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18957 0000D362 48FFC6                  	inc rsi
 18958 0000D365 EBEC                    	jmp .L_lambda_simple_params_loop_0114
 18959                                  .L_lambda_simple_params_end_0114:
 18960 0000D367 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18961 0000D36A 4889C3                  	mov rbx, rax
 18962 0000D36D 58                      	pop rax
 18963 0000D36E C60005                  	mov byte [rax], T_closure
 18964 0000D371 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18965 0000D375 48C74009[82D30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0114
 18966 0000D37D E99B0B0000              	jmp .L_lambda_simple_end_0114
 18967                                  .L_lambda_simple_code_0114:	; lambda-simple body
 18968 0000D382 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18969 0000D388 740B                    	je .L_lambda_simple_arity_check_ok_0114
 18970 0000D38A FF742410                	push qword [rsp + 8 * 2]
 18971 0000D38E 6A01                    	push 1
 18972 0000D390 E93E3B0000              	jmp L_error_incorrect_arity_simple
 18973                                  .L_lambda_simple_arity_check_ok_0114:
 18974 0000D395 C8000000                	enter 0, 0
 18975 0000D399 48B8-                   	 	mov rax,L_constants + 23
 18975 0000D39B [1700000000000000] 
 18976 0000D3A3 50                      	push rax
 18977                                  
 18978 0000D3A4 6A01                    	push 1
 18979 0000D3A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18980 0000D3AB E86A3B0000              	call malloc
 18981 0000D3B0 50                      	push rax
 18982 0000D3B1 BF08000000              	mov rdi, 8 * 1	; new rib
 18983 0000D3B6 E85F3B0000              	call malloc
 18984 0000D3BB 50                      	push rax
 18985 0000D3BC BF10000000              	mov rdi, 8 * 2	; extended env
 18986 0000D3C1 E8543B0000              	call malloc
 18987 0000D3C6 488B7D10                	mov rdi, ENV
 18988 0000D3CA BE00000000              	mov rsi, 0
 18989 0000D3CF BA01000000              	mov rdx, 1
 18990                                  .L_lambda_simple_env_loop_0115:	; ext_env[i + 1] <-- env[i]
 18991 0000D3D4 4883FE01                	cmp rsi, 1
 18992 0000D3D8 7410                    	je .L_lambda_simple_env_end_0115
 18993 0000D3DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18994 0000D3DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18995 0000D3E2 48FFC6                  	inc rsi
 18996 0000D3E5 48FFC2                  	inc rdx
 18997 0000D3E8 EBEA                    	jmp .L_lambda_simple_env_loop_0115
 18998                                  .L_lambda_simple_env_end_0115:
 18999 0000D3EA 5B                      	pop rbx
 19000 0000D3EB BE00000000              	mov rsi, 0
 19001                                  .L_lambda_simple_params_loop_0115:	; copy params
 19002 0000D3F0 4883FE01                	cmp rsi, 1
 19003 0000D3F4 740E                    	je .L_lambda_simple_params_end_0115
 19004 0000D3F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19005 0000D3FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19006 0000D3FF 48FFC6                  	inc rsi
 19007 0000D402 EBEC                    	jmp .L_lambda_simple_params_loop_0115
 19008                                  .L_lambda_simple_params_end_0115:
 19009 0000D404 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19010 0000D407 4889C3                  	mov rbx, rax
 19011 0000D40A 58                      	pop rax
 19012 0000D40B C60005                  	mov byte [rax], T_closure
 19013 0000D40E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19014 0000D412 48C74009[1FD40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0115
 19015 0000D41A E9A70A0000              	jmp .L_lambda_simple_end_0115
 19016                                  .L_lambda_simple_code_0115:	; lambda-simple body
 19017 0000D41F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19018 0000D425 740B                    	je .L_lambda_simple_arity_check_ok_0115
 19019 0000D427 FF742410                	push qword [rsp + 8 * 2]
 19020 0000D42B 6A01                    	push 1
 19021 0000D42D E9A13A0000              	jmp L_error_incorrect_arity_simple
 19022                                  .L_lambda_simple_arity_check_ok_0115:
 19023 0000D432 C8000000                	enter 0, 0
 19024 0000D436 BF08000000              	mov rdi, 8
 19025 0000D43B E8DA3A0000              	call malloc
 19026 0000D440 488B5D20                	mov rbx, PARAM(0)
 19027 0000D444 488918                  	mov qword [rax], rbx
 19028 0000D447 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 19029                                  
 19030 0000D44B 48B8-                            	mov rax, sob_void
 19030 0000D44D [0000000000000000] 
 19031                                  
 19032 0000D455 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19033 0000D45A E8BB3A0000              	call malloc
 19034 0000D45F 50                      	push rax
 19035 0000D460 BF08000000              	mov rdi, 8 * 1	; new rib
 19036 0000D465 E8B03A0000              	call malloc
 19037 0000D46A 50                      	push rax
 19038 0000D46B BF18000000              	mov rdi, 8 * 3	; extended env
 19039 0000D470 E8A53A0000              	call malloc
 19040 0000D475 488B7D10                	mov rdi, ENV
 19041 0000D479 BE00000000              	mov rsi, 0
 19042 0000D47E BA01000000              	mov rdx, 1
 19043                                  .L_lambda_simple_env_loop_0116:	; ext_env[i + 1] <-- env[i]
 19044 0000D483 4883FE02                	cmp rsi, 2
 19045 0000D487 7410                    	je .L_lambda_simple_env_end_0116
 19046 0000D489 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19047 0000D48D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19048 0000D491 48FFC6                  	inc rsi
 19049 0000D494 48FFC2                  	inc rdx
 19050 0000D497 EBEA                    	jmp .L_lambda_simple_env_loop_0116
 19051                                  .L_lambda_simple_env_end_0116:
 19052 0000D499 5B                      	pop rbx
 19053 0000D49A BE00000000              	mov rsi, 0
 19054                                  .L_lambda_simple_params_loop_0116:	; copy params
 19055 0000D49F 4883FE01                	cmp rsi, 1
 19056 0000D4A3 740E                    	je .L_lambda_simple_params_end_0116
 19057 0000D4A5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19058 0000D4AA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19059 0000D4AE 48FFC6                  	inc rsi
 19060 0000D4B1 EBEC                    	jmp .L_lambda_simple_params_loop_0116
 19061                                  .L_lambda_simple_params_end_0116:
 19062 0000D4B3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19063 0000D4B6 4889C3                  	mov rbx, rax
 19064 0000D4B9 58                      	pop rax
 19065 0000D4BA C60005                  	mov byte [rax], T_closure
 19066 0000D4BD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19067 0000D4C1 48C74009[CED40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0116
 19068 0000D4C9 E9A8010000              	jmp .L_lambda_simple_end_0116
 19069                                  .L_lambda_simple_code_0116:	; lambda-simple body
 19070 0000D4CE 48837C241004            	cmp qword [rsp + 8 * 2], 4
 19071 0000D4D4 740B                    	je .L_lambda_simple_arity_check_ok_0116
 19072 0000D4D6 FF742410                	push qword [rsp + 8 * 2]
 19073 0000D4DA 6A04                    	push 4
 19074 0000D4DC E9F2390000              	jmp L_error_incorrect_arity_simple
 19075                                  .L_lambda_simple_arity_check_ok_0116:
 19076 0000D4E1 C8000000                	enter 0, 0
 19077 0000D4E5 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 19078 0000D4E9 50                      	push rax
 19079 0000D4EA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19080 0000D4EE 50                      	push rax
 19081 0000D4EF 6A02                    	push 2
 19082 0000D4F1 488B0425[50030000]      	mov rax, qword [free_var_106]
 19083 0000D4F9 803805                  	cmp byte [rax], T_closure 
 19084 0000D4FC 0F85CD490000                    jne L_code_ptr_error
 19085                                  
 19086 0000D502 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19087                                  
 19088 0000D506 53                              push rbx
 19089                                  
 19090 0000D507 FF5009                          call SOB_CLOSURE_CODE(rax)
 19091                                  
 19092 0000D50A 483D[02000000]                  	cmp rax, sob_boolean_false
 19093 0000D510 0F855C010000            	jne .L_or_end_0016
 19094 0000D516 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 19095 0000D51A 50                      	push rax
 19096 0000D51B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19097 0000D51F 50                      	push rax
 19098 0000D520 6A02                    	push 2
 19099 0000D522 488B0425[30030000]      	mov rax, qword [free_var_102]
 19100 0000D52A 803805                  	cmp byte [rax], T_closure 
 19101 0000D52D 0F859C490000                    jne L_code_ptr_error
 19102                                  
 19103 0000D533 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19104                                  
 19105 0000D537 53                              push rbx
 19106                                  
 19107 0000D538 FF5009                          call SOB_CLOSURE_CODE(rax)
 19108                                  
 19109                                          
 19110 0000D53B 483D[02000000]                  	cmp rax, sob_boolean_false
 19111                                  
 19112 0000D541 0F8421010000                    	je .L_if_else_00a1
 19113 0000D547 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19114 0000D54B 50                      	push rax
 19115 0000D54C 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 19116 0000D550 50                      	push rax
 19117 0000D551 6A02                    	push 2
 19118 0000D553 488B0425[78010000]      	mov rax, qword [free_var_47]
 19119 0000D55B 803805                  	cmp byte [rax], T_closure 
 19120 0000D55E 0F856B490000                    jne L_code_ptr_error
 19121                                  
 19122 0000D564 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19123                                  
 19124 0000D568 53                              push rbx
 19125                                  
 19126 0000D569 FF5009                          call SOB_CLOSURE_CODE(rax)
 19127                                  
 19128 0000D56C 50                              	push rax
 19129 0000D56D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19130 0000D571 50                      	push rax
 19131 0000D572 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19132 0000D576 50                      	push rax
 19133 0000D577 6A02                    	push 2
 19134 0000D579 488B0425[78010000]      	mov rax, qword [free_var_47]
 19135 0000D581 803805                  	cmp byte [rax], T_closure 
 19136 0000D584 0F8545490000                    jne L_code_ptr_error
 19137                                  
 19138 0000D58A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19139                                  
 19140 0000D58E 53                              push rbx
 19141                                  
 19142 0000D58F FF5009                          call SOB_CLOSURE_CODE(rax)
 19143                                  
 19144 0000D592 50                              	push rax
 19145 0000D593 6A02                    	push 2
 19146 0000D595 488B4510                	mov rax, qword [rbp + 8 * 2]
 19147                                  
 19148 0000D599 488B4008                                          	mov rax, qword[rax + 8 * 1]
 19149                                  
 19150 0000D59D 488B00                                            	mov rax, qword[rax + 8 * 0]
 19151 0000D5A0 803805                  	cmp byte [rax], T_closure 
 19152 0000D5A3 0F8526490000                    jne L_code_ptr_error
 19153                                  
 19154 0000D5A9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19155                                  
 19156 0000D5AD 53                              push rbx
 19157                                  
 19158 0000D5AE FF5009                          call SOB_CLOSURE_CODE(rax)
 19159                                  
 19160                                          
 19161 0000D5B1 483D[02000000]                  	cmp rax, sob_boolean_false
 19162                                  
 19163 0000D5B7 0F849F000000                    	je .L_if_else_00a2
 19164 0000D5BD 488B4538                	 	mov rax ,qword[rbp + 8 * (4 + 3)]
 19165 0000D5C1 50                      	push rax
 19166 0000D5C2 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 19167 0000D5C6 50                      	push rax
 19168 0000D5C7 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19169 0000D5CB 50                      	push rax
 19170 0000D5CC 48B8-                   	mov rax,L_constants + 128
 19170 0000D5CE [8000000000000000] 
 19171 0000D5D6 50                      	push rax
 19172 0000D5D7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19173 0000D5DB 50                      	push rax
 19174 0000D5DC 6A02                    	push 2
 19175 0000D5DE 488B0425[08030000]      	mov rax, qword [free_var_97]
 19176 0000D5E6 803805                  	cmp byte [rax], T_closure 
 19177 0000D5E9 0F85E0480000                    jne L_code_ptr_error
 19178                                  
 19179 0000D5EF 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19180                                  
 19181 0000D5F3 53                              push rbx
 19182                                  
 19183 0000D5F4 FF5009                          call SOB_CLOSURE_CODE(rax)
 19184                                  
 19185 0000D5F7 50                              	push rax
 19186                                  
 19187 0000D5F8 6A04                    	push 4
 19188 0000D5FA 488B4510                	mov rax, qword [rbp + 8 * 2]
 19189                                  
 19190 0000D5FE 488B00                                            	mov rax, qword[rax + 8 * 0]
 19191                                  
 19192 0000D601 488B00                                            	mov rax, qword[rax + 8 * 0]
 19193 0000D604 488B00                  	mov rax, qword [rax]
 19194                                  	assert_closure(rax)
    42 0000D607 803805              <1>  cmp byte [%1], %2
    43 0000D60A 0F85FE500000        <1>  jne L_error_incorrect_type
 19195 0000D610 50                      	push rax 
 19196 0000D611 FF7508                  	push qword [rbp + 8]
 19197 0000D614 FF7500                  	push qword [rbp]
 19198 0000D617 4883C308                	add rbx ,8*1
 19199                                  	 .L_fix_stack_label_0149:
 19200 0000D61B 488B5518                	mov rdx, qword[rbp+8*3]
 19201 0000D61F 4883C203                	add rdx, 3
 19202 0000D623 48C1E203                	shl rdx, 3
 19203 0000D627 4889EF                  	mov rdi, rbp
 19204 0000D62A 4801D7                  	add rdi, rdx
 19205 0000D62D 4C8B4500                	mov r8, qword[rbp]
 19206 0000D631 4889E9                  	mov rcx, rbp
 19207 0000D634 4883E908                	sub rcx, 8
 19208                                  	 .L_loop_fix_stuck_0149:
 19209 0000D638 4839CC                  	cmp rsp, rcx
 19210 0000D63B 7710                    ja .L_loop_fix_stuck_end_0149
 19211 0000D63D 488B19                   	mov rbx, qword[rcx]
 19212 0000D640 48891F                  	 mov qword[rdi], rbx
 19213 0000D643 4883EF08                	sub rdi, 8
 19214 0000D647 4883E908                	sub rcx, 8
 19215 0000D64B EBEB                    jmp .L_loop_fix_stuck_0149
 19216                                  	 .L_loop_fix_stuck_end_0149:
 19217 0000D64D 4883C708                	add rdi, 8
 19218 0000D651 4889FC                  	 mov rsp, rdi
 19219 0000D654 4C89C5                  	mov rbp, r8
 19220 0000D657 5D                      	pop rbp
 19221 0000D658 FFE0                    	jmp rax 
 19222                                  
 19223 0000D65A EB0A                            	jmp .L_if_end_00a2
 19224                                  
 19225                                          	.L_if_else_00a2:
 19226 0000D65C 48B8-                   	mov rax,L_constants + 2
 19226 0000D65E [0200000000000000] 
 19227                                  
 19228                                          	.L_if_end_00a2:
 19229                                  
 19230 0000D666 EB0A                            	jmp .L_if_end_00a1
 19231                                  
 19232                                          	.L_if_else_00a1:
 19233 0000D668 48B8-                   	mov rax,L_constants + 2
 19233 0000D66A [0200000000000000] 
 19234                                  
 19235                                          	.L_if_end_00a1:
 19236                                  .L_or_end_0016:
 19237 0000D672 C9                      	leave
 19238 0000D673 C23000                  	ret 8 * (2 + 4)
 19239                                  .L_lambda_simple_end_0116:	; new closure is in rax
 19240 0000D676 50                      	push rax
 19241 0000D677 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19242 0000D67B 8F00                    	pop qword [rax]
 19243 0000D67D 48B8-                   	mov rax, sob_void
 19243 0000D67F [0000000000000000] 
 19244                                  
 19245 0000D687 BF11000000              	 	mov rdi, (1 + 8 + 8)	; sob closure
 19246 0000D68C E889380000              	call malloc
 19247 0000D691 50                      	push rax
 19248 0000D692 BF08000000              	mov rdi, 8 * 1	; new rib
 19249 0000D697 E87E380000              	call malloc
 19250 0000D69C 50                      	push rax
 19251 0000D69D BF18000000              	mov rdi, 8 * 3	; extended env
 19252 0000D6A2 E873380000              	call malloc
 19253 0000D6A7 488B7D10                	mov rdi, ENV
 19254 0000D6AB BE00000000              	mov rsi, 0
 19255 0000D6B0 BA01000000              	mov rdx, 1
 19256                                  .L_lambda_simple_env_loop_0117:	; ext_env[i + 1] <-- env[i]
 19257 0000D6B5 4883FE02                	cmp rsi, 2
 19258 0000D6B9 7410                    	je .L_lambda_simple_env_end_0117
 19259 0000D6BB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19260 0000D6BF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19261 0000D6C3 48FFC6                  	inc rsi
 19262 0000D6C6 48FFC2                  	inc rdx
 19263 0000D6C9 EBEA                    	jmp .L_lambda_simple_env_loop_0117
 19264                                  .L_lambda_simple_env_end_0117:
 19265 0000D6CB 5B                      	pop rbx
 19266 0000D6CC BE00000000              	mov rsi, 0
 19267                                  .L_lambda_simple_params_loop_0117:	; copy params
 19268 0000D6D1 4883FE01                	cmp rsi, 1
 19269 0000D6D5 740E                    	je .L_lambda_simple_params_end_0117
 19270 0000D6D7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19271 0000D6DC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19272 0000D6E0 48FFC6                  	inc rsi
 19273 0000D6E3 EBEC                    	jmp .L_lambda_simple_params_loop_0117
 19274                                  .L_lambda_simple_params_end_0117:
 19275 0000D6E5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19276 0000D6E8 4889C3                  	mov rbx, rax
 19277 0000D6EB 58                      	pop rax
 19278 0000D6EC C60005                  	mov byte [rax], T_closure
 19279 0000D6EF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19280 0000D6F3 48C74009[00D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0117
 19281 0000D6FB E90D020000              	jmp .L_lambda_simple_end_0117
 19282                                  .L_lambda_simple_code_0117:	; lambda-simple body
 19283 0000D700 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19284 0000D706 740B                    	je .L_lambda_simple_arity_check_ok_0117
 19285 0000D708 FF742410                	push qword [rsp + 8 * 2]
 19286 0000D70C 6A02                    	push 2
 19287 0000D70E E9C0370000              	jmp L_error_incorrect_arity_simple
 19288                                  .L_lambda_simple_arity_check_ok_0117:
 19289 0000D713 C8000000                	enter 0, 0
 19290 0000D717 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 19291 0000D71B 50                      	push rax
 19292 0000D71C 6A01                    	push 1
 19293 0000D71E 488B0425[90000000]      	mov rax, qword [free_var_18]
 19294 0000D726 803805                  	cmp byte [rax], T_closure 
 19295 0000D729 0F85A0470000                    jne L_code_ptr_error
 19296                                  
 19297 0000D72F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19298                                  
 19299 0000D733 53                              push rbx
 19300                                  
 19301 0000D734 FF5009                          call SOB_CLOSURE_CODE(rax)
 19302                                  
 19303 0000D737 50                              	push rax
 19304 0000D738 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19305 0000D73C 50                      	push rax
 19306 0000D73D 6A01                    	push 1
 19307 0000D73F 488B0425[90000000]      	mov rax, qword [free_var_18]
 19308 0000D747 803805                  	cmp byte [rax], T_closure 
 19309 0000D74A 0F857F470000                    jne L_code_ptr_error
 19310                                  
 19311 0000D750 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19312                                  
 19313 0000D754 53                              push rbx
 19314                                  
 19315 0000D755 FF5009                          call SOB_CLOSURE_CODE(rax)
 19316                                  
 19317 0000D758 50                              	push rax
 19318                                  
 19319 0000D759 6A02                    	push 2
 19320 0000D75B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19321 0000D760 E8B5370000              	call malloc
 19322 0000D765 50                      	push rax
 19323 0000D766 BF10000000              	mov rdi, 8 * 2	; new rib
 19324 0000D76B E8AA370000              	call malloc
 19325 0000D770 50                      	push rax
 19326 0000D771 BF20000000              	mov rdi, 8 * 4	; extended env
 19327 0000D776 E89F370000              	call malloc
 19328 0000D77B 488B7D10                	mov rdi, ENV
 19329 0000D77F BE00000000              	mov rsi, 0
 19330 0000D784 BA01000000              	mov rdx, 1
 19331                                  .L_lambda_simple_env_loop_0118:	; ext_env[i + 1] <-- env[i]
 19332 0000D789 4883FE03                	cmp rsi, 3
 19333 0000D78D 7410                    	je .L_lambda_simple_env_end_0118
 19334 0000D78F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19335 0000D793 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19336 0000D797 48FFC6                  	inc rsi
 19337 0000D79A 48FFC2                  	inc rdx
 19338 0000D79D EBEA                    	jmp .L_lambda_simple_env_loop_0118
 19339                                  .L_lambda_simple_env_end_0118:
 19340 0000D79F 5B                      	pop rbx
 19341 0000D7A0 BE00000000              	mov rsi, 0
 19342                                  .L_lambda_simple_params_loop_0118:	; copy params
 19343 0000D7A5 4883FE02                	cmp rsi, 2
 19344 0000D7A9 740E                    	je .L_lambda_simple_params_end_0118
 19345 0000D7AB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19346 0000D7B0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19347 0000D7B4 48FFC6                  	inc rsi
 19348 0000D7B7 EBEC                    	jmp .L_lambda_simple_params_loop_0118
 19349                                  .L_lambda_simple_params_end_0118:
 19350 0000D7B9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19351 0000D7BC 4889C3                  	mov rbx, rax
 19352 0000D7BF 58                      	pop rax
 19353 0000D7C0 C60005                  	mov byte [rax], T_closure
 19354 0000D7C3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19355 0000D7C7 48C74009[D4D70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0118
 19356 0000D7CF E9E2000000              	jmp .L_lambda_simple_end_0118
 19357                                  .L_lambda_simple_code_0118:	; lambda-simple body
 19358 0000D7D4 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19359 0000D7DA 740B                    	je .L_lambda_simple_arity_check_ok_0118
 19360 0000D7DC FF742410                	push qword [rsp + 8 * 2]
 19361 0000D7E0 6A02                    	push 2
 19362 0000D7E2 E9EC360000              	jmp L_error_incorrect_arity_simple
 19363                                  .L_lambda_simple_arity_check_ok_0118:
 19364 0000D7E7 C8000000                	enter 0, 0
 19365 0000D7EB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19366 0000D7EF 50                      	push rax
 19367 0000D7F0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19368 0000D7F4 50                      	push rax
 19369 0000D7F5 6A02                    	push 2
 19370 0000D7F7 488B0425[50030000]      	mov rax, qword [free_var_106]
 19371 0000D7FF 803805                  	cmp byte [rax], T_closure 
 19372 0000D802 0F85C7460000                    jne L_code_ptr_error
 19373                                  
 19374 0000D808 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19375                                  
 19376 0000D80C 53                              push rbx
 19377                                  
 19378 0000D80D FF5009                          call SOB_CLOSURE_CODE(rax)
 19379                                  
 19380                                          
 19381 0000D810 483D[02000000]                  	cmp rax, sob_boolean_false
 19382                                  
 19383 0000D816 0F848C000000                    	je .L_if_else_00a3
 19384 0000D81C 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 19385 0000D820 50                      	push rax
 19386 0000D821 488B4510                	mov rax, qword [rbp + 8 * 2]
 19387                                  
 19388 0000D825 488B00                                            	mov rax, qword[rax + 8 * 0]
 19389                                  
 19390 0000D828 488B4008                                          	mov rax, qword[rax + 8 * 1]
 19391 0000D82C 50                      	push rax
 19392 0000D82D 488B4510                	mov rax, qword [rbp + 8 * 2]
 19393                                  
 19394 0000D831 488B00                                            	mov rax, qword[rax + 8 * 0]
 19395                                  
 19396 0000D834 488B00                                            	mov rax, qword[rax + 8 * 0]
 19397 0000D837 50                      	push rax
 19398 0000D838 48B8-                   	mov rax,L_constants + 32
 19398 0000D83A [2000000000000000] 
 19399 0000D842 50                      	push rax
 19400                                  
 19401 0000D843 6A04                    	push 4
 19402 0000D845 488B4510                	mov rax, qword [rbp + 8 * 2]
 19403                                  
 19404 0000D849 488B4008                                          	mov rax, qword[rax + 8 * 1]
 19405                                  
 19406 0000D84D 488B00                                            	mov rax, qword[rax + 8 * 0]
 19407 0000D850 488B00                  	mov rax, qword [rax]
 19408                                  	assert_closure(rax)
    42 0000D853 803805              <1>  cmp byte [%1], %2
    43 0000D856 0F85B24E0000        <1>  jne L_error_incorrect_type
 19409 0000D85C 50                      	push rax 
 19410 0000D85D FF7508                  	push qword [rbp + 8]
 19411 0000D860 FF7500                  	push qword [rbp]
 19412 0000D863 4883C308                	add rbx ,8*1
 19413                                  	 .L_fix_stack_label_014b:
 19414 0000D867 488B5518                	mov rdx, qword[rbp+8*3]
 19415 0000D86B 4883C203                	add rdx, 3
 19416 0000D86F 48C1E203                	shl rdx, 3
 19417 0000D873 4889EF                  	mov rdi, rbp
 19418 0000D876 4801D7                  	add rdi, rdx
 19419 0000D879 4C8B4500                	mov r8, qword[rbp]
 19420 0000D87D 4889E9                  	mov rcx, rbp
 19421 0000D880 4883E908                	sub rcx, 8
 19422                                  	 .L_loop_fix_stuck_014b:
 19423 0000D884 4839CC                  	cmp rsp, rcx
 19424 0000D887 7710                    ja .L_loop_fix_stuck_end_014b
 19425 0000D889 488B19                   	mov rbx, qword[rcx]
 19426 0000D88C 48891F                  	 mov qword[rdi], rbx
 19427 0000D88F 4883EF08                	sub rdi, 8
 19428 0000D893 4883E908                	sub rcx, 8
 19429 0000D897 EBEB                    jmp .L_loop_fix_stuck_014b
 19430                                  	 .L_loop_fix_stuck_end_014b:
 19431 0000D899 4883C708                	add rdi, 8
 19432 0000D89D 4889FC                  	 mov rsp, rdi
 19433 0000D8A0 4C89C5                  	mov rbp, r8
 19434 0000D8A3 5D                      	pop rbp
 19435 0000D8A4 FFE0                    	jmp rax 
 19436                                  
 19437 0000D8A6 EB0A                            	jmp .L_if_end_00a3
 19438                                  
 19439                                          	.L_if_else_00a3:
 19440 0000D8A8 48B8-                   	mov rax,L_constants + 2
 19440 0000D8AA [0200000000000000] 
 19441                                  
 19442                                          	.L_if_end_00a3:
 19443 0000D8B2 C9                      	leave
 19444 0000D8B3 C22000                  	ret 8 * (2 + 2)
 19445                                  .L_lambda_simple_end_0118:	; new closure is in rax
 19446                                  	assert_closure(rax)
    42 0000D8B6 803805              <1>  cmp byte [%1], %2
    43 0000D8B9 0F854F4E0000        <1>  jne L_error_incorrect_type
 19447 0000D8BF 50                      	push rax 
 19448 0000D8C0 FF7508                  	push qword [rbp + 8]
 19449 0000D8C3 FF7500                  	push qword [rbp]
 19450 0000D8C6 4883C308                	add rbx ,8*1
 19451                                  	 .L_fix_stack_label_014a:
 19452 0000D8CA 488B5518                	mov rdx, qword[rbp+8*3]
 19453 0000D8CE 4883C203                	add rdx, 3
 19454 0000D8D2 48C1E203                	shl rdx, 3
 19455 0000D8D6 4889EF                  	mov rdi, rbp
 19456 0000D8D9 4801D7                  	add rdi, rdx
 19457 0000D8DC 4C8B4500                	mov r8, qword[rbp]
 19458 0000D8E0 4889E9                  	mov rcx, rbp
 19459 0000D8E3 4883E908                	sub rcx, 8
 19460                                  	 .L_loop_fix_stuck_014a:
 19461 0000D8E7 4839CC                  	cmp rsp, rcx
 19462 0000D8EA 7710                    ja .L_loop_fix_stuck_end_014a
 19463 0000D8EC 488B19                   	mov rbx, qword[rcx]
 19464 0000D8EF 48891F                  	 mov qword[rdi], rbx
 19465 0000D8F2 4883EF08                	sub rdi, 8
 19466 0000D8F6 4883E908                	sub rcx, 8
 19467 0000D8FA EBEB                    jmp .L_loop_fix_stuck_014a
 19468                                  	 .L_loop_fix_stuck_end_014a:
 19469 0000D8FC 4883C708                	add rdi, 8
 19470 0000D900 4889FC                  	 mov rsp, rdi
 19471 0000D903 4C89C5                  	mov rbp, r8
 19472 0000D906 5D                      	pop rbp
 19473 0000D907 FFE0                    	jmp rax 
 19474 0000D909 C9                      	leave
 19475 0000D90A C22000                  	ret 8 * (2 + 2)
 19476                                  .L_lambda_simple_end_0117:	; new closure is in rax
 19477 0000D90D 50                      	push rax
 19478                                  
 19479 0000D90E 6A01                    	push 1
 19480 0000D910 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19481 0000D915 E800360000              	call malloc
 19482 0000D91A 50                      	push rax
 19483 0000D91B BF08000000              	mov rdi, 8 * 1	; new rib
 19484 0000D920 E8F5350000              	call malloc
 19485 0000D925 50                      	push rax
 19486 0000D926 BF18000000              	mov rdi, 8 * 3	; extended env
 19487 0000D92B E8EA350000              	call malloc
 19488 0000D930 488B7D10                	mov rdi, ENV
 19489 0000D934 BE00000000              	mov rsi, 0
 19490 0000D939 BA01000000              	mov rdx, 1
 19491                                  .L_lambda_simple_env_loop_0119:	; ext_env[i + 1] <-- env[i]
 19492 0000D93E 4883FE02                	cmp rsi, 2
 19493 0000D942 7410                    	je .L_lambda_simple_env_end_0119
 19494 0000D944 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19495 0000D948 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19496 0000D94C 48FFC6                  	inc rsi
 19497 0000D94F 48FFC2                  	inc rdx
 19498 0000D952 EBEA                    	jmp .L_lambda_simple_env_loop_0119
 19499                                  .L_lambda_simple_env_end_0119:
 19500 0000D954 5B                      	pop rbx
 19501 0000D955 BE00000000              	mov rsi, 0
 19502                                  .L_lambda_simple_params_loop_0119:	; copy params
 19503 0000D95A 4883FE01                	cmp rsi, 1
 19504 0000D95E 740E                    	je .L_lambda_simple_params_end_0119
 19505 0000D960 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19506 0000D965 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19507 0000D969 48FFC6                  	inc rsi
 19508 0000D96C EBEC                    	jmp .L_lambda_simple_params_loop_0119
 19509                                  .L_lambda_simple_params_end_0119:
 19510 0000D96E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19511 0000D971 4889C3                  	mov rbx, rax
 19512 0000D974 58                      	pop rax
 19513 0000D975 C60005                  	mov byte [rax], T_closure
 19514 0000D978 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19515 0000D97C 48C74009[89D90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0119
 19516 0000D984 E9E6040000              	jmp .L_lambda_simple_end_0119
 19517                                  .L_lambda_simple_code_0119:	; lambda-simple body
 19518 0000D989 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19519 0000D98F 740B                    	je .L_lambda_simple_arity_check_ok_0119
 19520 0000D991 FF742410                	push qword [rsp + 8 * 2]
 19521 0000D995 6A01                    	push 1
 19522 0000D997 E937350000              	jmp L_error_incorrect_arity_simple
 19523                                  .L_lambda_simple_arity_check_ok_0119:
 19524 0000D99C C8000000                	enter 0, 0
 19525 0000D9A0 48B8-                   	 	mov rax,L_constants + 23
 19525 0000D9A2 [1700000000000000] 
 19526 0000D9AA 50                      	push rax
 19527                                  
 19528 0000D9AB 6A01                    	push 1
 19529 0000D9AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19530 0000D9B2 E863350000              	call malloc
 19531 0000D9B7 50                      	push rax
 19532 0000D9B8 BF08000000              	mov rdi, 8 * 1	; new rib
 19533 0000D9BD E858350000              	call malloc
 19534 0000D9C2 50                      	push rax
 19535 0000D9C3 BF20000000              	mov rdi, 8 * 4	; extended env
 19536 0000D9C8 E84D350000              	call malloc
 19537 0000D9CD 488B7D10                	mov rdi, ENV
 19538 0000D9D1 BE00000000              	mov rsi, 0
 19539 0000D9D6 BA01000000              	mov rdx, 1
 19540                                  .L_lambda_simple_env_loop_011a:	; ext_env[i + 1] <-- env[i]
 19541 0000D9DB 4883FE03                	cmp rsi, 3
 19542 0000D9DF 7410                    	je .L_lambda_simple_env_end_011a
 19543 0000D9E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19544 0000D9E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19545 0000D9E9 48FFC6                  	inc rsi
 19546 0000D9EC 48FFC2                  	inc rdx
 19547 0000D9EF EBEA                    	jmp .L_lambda_simple_env_loop_011a
 19548                                  .L_lambda_simple_env_end_011a:
 19549 0000D9F1 5B                      	pop rbx
 19550 0000D9F2 BE00000000              	mov rsi, 0
 19551                                  .L_lambda_simple_params_loop_011a:	; copy params
 19552 0000D9F7 4883FE01                	cmp rsi, 1
 19553 0000D9FB 740E                    	je .L_lambda_simple_params_end_011a
 19554 0000D9FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19555 0000DA02 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19556 0000DA06 48FFC6                  	inc rsi
 19557 0000DA09 EBEC                    	jmp .L_lambda_simple_params_loop_011a
 19558                                  .L_lambda_simple_params_end_011a:
 19559 0000DA0B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19560 0000DA0E 4889C3                  	mov rbx, rax
 19561 0000DA11 58                      	pop rax
 19562 0000DA12 C60005                  	mov byte [rax], T_closure
 19563 0000DA15 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19564 0000DA19 48C74009[26DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011a
 19565 0000DA21 E9F2030000              	jmp .L_lambda_simple_end_011a
 19566                                  .L_lambda_simple_code_011a:	; lambda-simple body
 19567 0000DA26 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19568 0000DA2C 740B                    	je .L_lambda_simple_arity_check_ok_011a
 19569 0000DA2E FF742410                	push qword [rsp + 8 * 2]
 19570 0000DA32 6A01                    	push 1
 19571 0000DA34 E99A340000              	jmp L_error_incorrect_arity_simple
 19572                                  .L_lambda_simple_arity_check_ok_011a:
 19573 0000DA39 C8000000                	enter 0, 0
 19574 0000DA3D BF08000000              	mov rdi, 8
 19575 0000DA42 E8D3340000              	call malloc
 19576 0000DA47 488B5D20                	mov rbx, PARAM(0)
 19577 0000DA4B 488918                  	mov qword [rax], rbx
 19578 0000DA4E 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 19579                                  
 19580 0000DA52 48B8-                            	mov rax, sob_void
 19580 0000DA54 [0000000000000000] 
 19581                                  
 19582 0000DA5C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19583 0000DA61 E8B4340000              	call malloc
 19584 0000DA66 50                      	push rax
 19585 0000DA67 BF08000000              	mov rdi, 8 * 1	; new rib
 19586 0000DA6C E8A9340000              	call malloc
 19587 0000DA71 50                      	push rax
 19588 0000DA72 BF28000000              	mov rdi, 8 * 5	; extended env
 19589 0000DA77 E89E340000              	call malloc
 19590 0000DA7C 488B7D10                	mov rdi, ENV
 19591 0000DA80 BE00000000              	mov rsi, 0
 19592 0000DA85 BA01000000              	mov rdx, 1
 19593                                  .L_lambda_simple_env_loop_011b:	; ext_env[i + 1] <-- env[i]
 19594 0000DA8A 4883FE04                	cmp rsi, 4
 19595 0000DA8E 7410                    	je .L_lambda_simple_env_end_011b
 19596 0000DA90 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19597 0000DA94 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19598 0000DA98 48FFC6                  	inc rsi
 19599 0000DA9B 48FFC2                  	inc rdx
 19600 0000DA9E EBEA                    	jmp .L_lambda_simple_env_loop_011b
 19601                                  .L_lambda_simple_env_end_011b:
 19602 0000DAA0 5B                      	pop rbx
 19603 0000DAA1 BE00000000              	mov rsi, 0
 19604                                  .L_lambda_simple_params_loop_011b:	; copy params
 19605 0000DAA6 4883FE01                	cmp rsi, 1
 19606 0000DAAA 740E                    	je .L_lambda_simple_params_end_011b
 19607 0000DAAC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19608 0000DAB1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19609 0000DAB5 48FFC6                  	inc rsi
 19610 0000DAB8 EBEC                    	jmp .L_lambda_simple_params_loop_011b
 19611                                  .L_lambda_simple_params_end_011b:
 19612 0000DABA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19613 0000DABD 4889C3                  	mov rbx, rax
 19614 0000DAC0 58                      	pop rax
 19615 0000DAC1 C60005                  	mov byte [rax], T_closure
 19616 0000DAC4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19617 0000DAC8 48C74009[D5DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011b
 19618 0000DAD0 E947010000              	jmp .L_lambda_simple_end_011b
 19619                                  .L_lambda_simple_code_011b:	; lambda-simple body
 19620 0000DAD5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19621 0000DADB 740B                    	je .L_lambda_simple_arity_check_ok_011b
 19622 0000DADD FF742410                	push qword [rsp + 8 * 2]
 19623 0000DAE1 6A02                    	push 2
 19624 0000DAE3 E9EB330000              	jmp L_error_incorrect_arity_simple
 19625                                  .L_lambda_simple_arity_check_ok_011b:
 19626 0000DAE8 C8000000                	enter 0, 0
 19627 0000DAEC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19628 0000DAF0 50                      	push rax
 19629 0000DAF1 6A01                    	push 1
 19630 0000DAF3 488B0425[00000000]      	mov rax, qword [free_var_0]
 19631 0000DAFB 803805                  	cmp byte [rax], T_closure 
 19632 0000DAFE 0F85CB430000                    jne L_code_ptr_error
 19633                                  
 19634 0000DB04 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19635                                  
 19636 0000DB08 53                              push rbx
 19637                                  
 19638 0000DB09 FF5009                          call SOB_CLOSURE_CODE(rax)
 19639                                  
 19640 0000DB0C 483D[02000000]                  	cmp rax, sob_boolean_false
 19641 0000DB12 0F8500010000            	jne .L_or_end_0017
 19642 0000DB18 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19643 0000DB1C 50                      	push rax
 19644 0000DB1D 6A01                    	push 1
 19645 0000DB1F 488B0425[80000000]      	mov rax, qword [free_var_16]
 19646 0000DB27 803805                  	cmp byte [rax], T_closure 
 19647 0000DB2A 0F859F430000                    jne L_code_ptr_error
 19648                                  
 19649 0000DB30 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19650                                  
 19651 0000DB34 53                              push rbx
 19652                                  
 19653 0000DB35 FF5009                          call SOB_CLOSURE_CODE(rax)
 19654                                  
 19655 0000DB38 50                              	push rax
 19656 0000DB39 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19657 0000DB3D 50                      	push rax
 19658 0000DB3E 6A02                    	push 2
 19659 0000DB40 488B4510                	mov rax, qword [rbp + 8 * 2]
 19660                                  
 19661 0000DB44 488B4008                                          	mov rax, qword[rax + 8 * 1]
 19662                                  
 19663 0000DB48 488B00                                            	mov rax, qword[rax + 8 * 0]
 19664 0000DB4B 803805                  	cmp byte [rax], T_closure 
 19665 0000DB4E 0F857B430000                    jne L_code_ptr_error
 19666                                  
 19667 0000DB54 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19668                                  
 19669 0000DB58 53                              push rbx
 19670                                  
 19671 0000DB59 FF5009                          call SOB_CLOSURE_CODE(rax)
 19672                                  
 19673                                          
 19674 0000DB5C 483D[02000000]                  	cmp rax, sob_boolean_false
 19675                                  
 19676 0000DB62 0F84A6000000                    	je .L_if_else_00a4
 19677 0000DB68 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 19678 0000DB6C 50                      	push rax
 19679 0000DB6D 6A01                    	push 1
 19680 0000DB6F 488B0425[88000000]      	mov rax, qword [free_var_17]
 19681 0000DB77 803805                  	cmp byte [rax], T_closure 
 19682 0000DB7A 0F854F430000                    jne L_code_ptr_error
 19683                                  
 19684 0000DB80 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19685                                  
 19686 0000DB84 53                              push rbx
 19687                                  
 19688 0000DB85 FF5009                          call SOB_CLOSURE_CODE(rax)
 19689                                  
 19690 0000DB88 50                              	push rax
 19691 0000DB89 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19692 0000DB8D 50                      	push rax
 19693 0000DB8E 6A01                    	push 1
 19694 0000DB90 488B0425[80000000]      	mov rax, qword [free_var_16]
 19695 0000DB98 803805                  	cmp byte [rax], T_closure 
 19696 0000DB9B 0F852E430000                    jne L_code_ptr_error
 19697                                  
 19698 0000DBA1 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 19699                                  
 19700 0000DBA5 53                              push rbx
 19701                                  
 19702 0000DBA6 FF5009                          call SOB_CLOSURE_CODE(rax)
 19703                                  
 19704 0000DBA9 50                              	push rax
 19705                                  
 19706 0000DBAA 6A02                    	push 2
 19707 0000DBAC 488B4510                	mov rax, qword [rbp + 8 * 2]
 19708                                  
 19709 0000DBB0 488B00                                            	mov rax, qword[rax + 8 * 0]
 19710                                  
 19711 0000DBB3 488B00                                            	mov rax, qword[rax + 8 * 0]
 19712 0000DBB6 488B00                  	mov rax, qword [rax]
 19713                                  	assert_closure(rax)
    42 0000DBB9 803805              <1>  cmp byte [%1], %2
    43 0000DBBC 0F854C4B0000        <1>  jne L_error_incorrect_type
 19714 0000DBC2 50                      	push rax 
 19715 0000DBC3 FF7508                  	push qword [rbp + 8]
 19716 0000DBC6 FF7500                  	push qword [rbp]
 19717 0000DBC9 4883C308                	add rbx ,8*1
 19718                                  	 .L_fix_stack_label_014e:
 19719 0000DBCD 488B5518                	mov rdx, qword[rbp+8*3]
 19720 0000DBD1 4883C203                	add rdx, 3
 19721 0000DBD5 48C1E203                	shl rdx, 3
 19722 0000DBD9 4889EF                  	mov rdi, rbp
 19723 0000DBDC 4801D7                  	add rdi, rdx
 19724 0000DBDF 4C8B4500                	mov r8, qword[rbp]
 19725 0000DBE3 4889E9                  	mov rcx, rbp
 19726 0000DBE6 4883E908                	sub rcx, 8
 19727                                  	 .L_loop_fix_stuck_014e:
 19728 0000DBEA 4839CC                  	cmp rsp, rcx
 19729 0000DBED 7710                    ja .L_loop_fix_stuck_end_014e
 19730 0000DBEF 488B19                   	mov rbx, qword[rcx]
 19731 0000DBF2 48891F                  	 mov qword[rdi], rbx
 19732 0000DBF5 4883EF08                	sub rdi, 8
 19733 0000DBF9 4883E908                	sub rcx, 8
 19734 0000DBFD EBEB                    jmp .L_loop_fix_stuck_014e
 19735                                  	 .L_loop_fix_stuck_end_014e:
 19736 0000DBFF 4883C708                	add rdi, 8
 19737 0000DC03 4889FC                  	 mov rsp, rdi
 19738 0000DC06 4C89C5                  	mov rbp, r8
 19739 0000DC09 5D                      	pop rbp
 19740 0000DC0A FFE0                    	jmp rax 
 19741                                  
 19742 0000DC0C EB0A                            	jmp .L_if_end_00a4
 19743                                  
 19744                                          	.L_if_else_00a4:
 19745 0000DC0E 48B8-                   	mov rax,L_constants + 2
 19745 0000DC10 [0200000000000000] 
 19746                                  
 19747                                          	.L_if_end_00a4:
 19748                                  .L_or_end_0017:
 19749 0000DC18 C9                      	leave
 19750 0000DC19 C22000                  	ret 8 * (2 + 2)
 19751                                  .L_lambda_simple_end_011b:	; new closure is in rax
 19752 0000DC1C 50                      	push rax
 19753 0000DC1D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19754 0000DC21 8F00                    	pop qword [rax]
 19755 0000DC23 48B8-                   	mov rax, sob_void
 19755 0000DC25 [0000000000000000] 
 19756                                  
 19757 0000DC2D BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 19758 0000DC32 E8E3320000              	call malloc
 19759 0000DC37 50                      	push rax
 19760 0000DC38 BF08000000              	mov rdi, 8 * 1  ; new rib
 19761 0000DC3D E8D8320000              	call malloc
 19762 0000DC42 50                      	push rax
 19763 0000DC43 BF28000000              	mov rdi, 8 * 5	; extended env
 19764 0000DC48 E8CD320000              	call malloc
 19765 0000DC4D 488B7D10                	mov rdi, ENV
 19766 0000DC51 BE00000000              	mov rsi, 0
 19767 0000DC56 BA01000000              	mov rdx, 1
 19768                                  .L_lambda_opt_env_loop_002b:	; ext_env = env
 19769 0000DC5B 4883FE04                	cmp rsi, 4
 19770 0000DC5F 7410                    	je .L_lambda_opt_env_end_002b
 19771 0000DC61 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19772 0000DC65 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19773 0000DC69 48FFC6                  	inc rsi
 19774 0000DC6C 48FFC2                  	inc rdx
 19775 0000DC6F EBEA                    	jmp .L_lambda_opt_env_loop_002b
 19776                                  .L_lambda_opt_env_end_002b:
 19777 0000DC71 5B                      	pop rbx
 19778 0000DC72 BE00000000              	mov rsi, 0
 19779                                  .L_lambda_opt_params_loop_002b:	; copy params
 19780 0000DC77 4883FE01                	cmp rsi, 1
 19781 0000DC7B 740E                    	je .L_lambda_opt_params_end_002b
 19782 0000DC7D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19783 0000DC82 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19784 0000DC86 48FFC6                  	inc rsi
 19785 0000DC89 EBEC                    	jmp .L_lambda_opt_params_loop_002b
 19786                                  .L_lambda_opt_params_end_002b:
 19787 0000DC8B 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 19788 0000DC8E 4889C3                  	mov rbx, rax
 19789 0000DC91 58                      	pop rax
 19790 0000DC92 C60005                  	mov byte [rax], T_closure
 19791 0000DC95 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19792 0000DC99 48C74009[A6DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002b
 19793 0000DCA1 E96E010000              	jmp .L_lambda_opt_end_002b
 19794                                  .L_lambda_opt_code_002b:	; lambda-opt body
 19795 0000DCA6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19796 0000DCAC 740D                    	je .L_lambda_opt_arity_check_exact_002b  ;same num_of_args
 19797 0000DCAE 7F5B                    	jg .L_lambda_opt_arity_check_more_002b  ;greater num_of_args
 19798 0000DCB0 FF742410                	push qword [rsp + 8 * 2]
 19799 0000DCB4 6A01                    	push 1
 19800 0000DCB6 E92C320000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 19801                                  .L_lambda_opt_arity_check_exact_002b:
 19802 0000DCBB 4883EC08                	sub rsp, 8 * 1
 19803 0000DCBF 4889E7                  	mov rdi, rsp 
 19804                                  	;mov ret
 19805 0000DCC2 488B4708                	mov rax, qword [rdi + (8 * 1)]
 19806 0000DCC6 488907                  	mov qword [rdi], rax
 19807 0000DCC9 4883C708                	add rdi, 8
 19808                                  	;mov env
 19809 0000DCCD 488B4708                	mov rax, qword [rdi + (8 * 1)]
 19810 0000DCD1 488907                  	mov qword [rdi], rax
 19811 0000DCD4 4883C708                	add rdi, 8
 19812                                  	;mov & update COUNT
 19813 0000DCD8 488B4708                	mov rax, qword [rdi +(8 * 1)]
 19814 0000DCDC 4889C1                  	mov rcx, rax
 19815 0000DCDF 48FFC0                  	inc rax
 19816 0000DCE2 488907                  	mov qword [rdi], rax
 19817 0000DCE5 4883C708                	add rdi, 8
 19818                                  	;LOOP:move params
 19819                                  .L_lambda_opt_stack_shrink_loop_007f:	
 19820 0000DCE9 4883F900                	cmp rcx, 0
 19821 0000DCED 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_007f
 19822 0000DCEF 488B4708                	mov rax, qword [rdi + 8]
 19823 0000DCF3 488907                  	mov qword [rdi], rax
 19824 0000DCF6 4883C708                	add rdi, 8
 19825 0000DCFA 48FFC9                  	dec rcx
 19826 0000DCFD EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_007f
 19827                                  .L_lambda_opt_stack_shrink_loop_exit_007f:	
 19828 0000DCFF 48C707[01000000]        	mov qword [rdi], sob_nil
 19829 0000DD06 E995000000              	jmp .L_lambda_opt_stack_adjusted_002b
 19830                                  .L_lambda_opt_arity_check_more_002b:	
 19831 0000DD0B 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 19832 0000DD10 488D4EFF                	lea rcx, [rsi - 1]
 19833 0000DD14 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 19834 0000DD19 4989F2                  	mov r10, rsi
 19835 0000DD1C 49B9-                   	mov r9, sob_nil
 19835 0000DD1E [0100000000000000] 
 19836                                  .L_lambda_opt_stack_shrink_loop_0080:	
 19837 0000DD26 4883F900                	cmp rcx, 0
 19838 0000DD2A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0080
 19839 0000DD2C BF11000000              	mov rdi, 1 + 8 + 8
 19840 0000DD31 E8E4310000              	call malloc
 19841 0000DD36 C60021                  	mov byte [rax], T_pair
 19842 0000DD39 488B1E                  	mov rbx, qword [rsi]
 19843 0000DD3C 48895801                	mov SOB_PAIR_CAR(rax), rbx
 19844 0000DD40 4C894809                	mov SOB_PAIR_CDR(rax), r9
 19845 0000DD44 4989C1                  	mov r9, rax
 19846 0000DD47 4883EE08                	sub rsi, 8 * 1
 19847 0000DD4B 48FFC9                  	dec rcx
 19848 0000DD4E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0080
 19849                                  .L_lambda_opt_stack_shrink_loop_exit_0080:	
 19850 0000DD50 4D890A                  	mov qword [r10], r9
 19851 0000DD53 4983EA08                	sub r10, 8 * 1; the new dest!
 19852 0000DD57 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
 19853 0000DD5C B901000000              	mov rcx, 1 
 19854                                  .L_lambda_opt_stack_shrink_loop_0081:	
 19855 0000DD61 4883F900                	cmp rcx, 0
 19856 0000DD65 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0081
 19857 0000DD67 488B06                  	mov rax, qword [rsi]
 19858 0000DD6A 498902                  	mov qword [r10], rax
 19859 0000DD6D 4983EA08                	sub r10, 8 * 1
 19860 0000DD71 4883EE08                	sub rsi, 8 * 1
 19861 0000DD75 48FFC9                  	dec rcx
 19862 0000DD78 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0081
 19863                                  .L_lambda_opt_stack_shrink_loop_exit_0081:	
 19864 0000DD7A 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
 19865 0000DD81 4983EA08                	sub r10, 8 * 1
 19866 0000DD85 4883EE08                	sub rsi, 8 * 1
 19867 0000DD89 488B06                  	mov rax, qword [rsi] ;env
 19868 0000DD8C 498902                  	mov qword [r10], rax
 19869 0000DD8F 4983EA08                	sub r10, 8 * 1
 19870 0000DD93 4883EE08                	sub rsi, 8 * 1
 19871 0000DD97 488B06                  	mov rax, qword [rsi] ;ret
 19872 0000DD9A 498902                  	mov qword [r10], rax
 19873 0000DD9D 4C89D4                  	mov rsp, r10
 19874                                  .L_lambda_opt_stack_adjusted_002b:	
 19875 0000DDA0 C8000000                	enter 0, 0
 19876 0000DDA4 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 19877 0000DDA8 50                      	push rax
 19878 0000DDA9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19879 0000DDAD 50                      	push rax
 19880                                  
 19881 0000DDAE 6A02                    	push 2
 19882 0000DDB0 488B4510                	mov rax, qword [rbp + 8 * 2]
 19883                                  
 19884 0000DDB4 488B00                                            	mov rax, qword[rax + 8 * 0]
 19885                                  
 19886 0000DDB7 488B00                                            	mov rax, qword[rax + 8 * 0]
 19887 0000DDBA 488B00                  	mov rax, qword [rax]
 19888                                  	assert_closure(rax)
    42 0000DDBD 803805              <1>  cmp byte [%1], %2
    43 0000DDC0 0F8548490000        <1>  jne L_error_incorrect_type
 19889 0000DDC6 50                      	push rax 
 19890 0000DDC7 FF7508                  	push qword [rbp + 8]
 19891 0000DDCA FF7500                  	push qword [rbp]
 19892 0000DDCD 4883C308                	add rbx ,8*1
 19893                                  	 .L_fix_stack_label_014f:
 19894 0000DDD1 488B5518                	mov rdx, qword[rbp+8*3]
 19895 0000DDD5 4883C203                	add rdx, 3
 19896 0000DDD9 48C1E203                	shl rdx, 3
 19897 0000DDDD 4889EF                  	mov rdi, rbp
 19898 0000DDE0 4801D7                  	add rdi, rdx
 19899 0000DDE3 4C8B4500                	mov r8, qword[rbp]
 19900 0000DDE7 4889E9                  	mov rcx, rbp
 19901 0000DDEA 4883E908                	sub rcx, 8
 19902                                  	 .L_loop_fix_stuck_014f:
 19903 0000DDEE 4839CC                  	cmp rsp, rcx
 19904 0000DDF1 7710                    ja .L_loop_fix_stuck_end_014f
 19905 0000DDF3 488B19                   	mov rbx, qword[rcx]
 19906 0000DDF6 48891F                  	 mov qword[rdi], rbx
 19907 0000DDF9 4883EF08                	sub rdi, 8
 19908 0000DDFD 4883E908                	sub rcx, 8
 19909 0000DE01 EBEB                    jmp .L_loop_fix_stuck_014f
 19910                                  	 .L_loop_fix_stuck_end_014f:
 19911 0000DE03 4883C708                	add rdi, 8
 19912 0000DE07 4889FC                  	 mov rsp, rdi
 19913 0000DE0A 4C89C5                  	mov rbp, r8
 19914 0000DE0D 5D                      	pop rbp
 19915 0000DE0E FFE0                    	jmp rax 
 19916 0000DE10 C9                      	leave
 19917 0000DE11 C22000                  	ret 8 * (2 + 2)
 19918                                  .L_lambda_opt_end_002b:	; new closure is in rax
 19919 0000DE14 C9                      	leave
 19920 0000DE15 C21800                  	ret 8 * (2 + 1)
 19921                                  .L_lambda_simple_end_011a:	; new closure is in rax
 19922                                  	assert_closure(rax)
    42 0000DE18 803805              <1>  cmp byte [%1], %2
    43 0000DE1B 0F85ED480000        <1>  jne L_error_incorrect_type
 19923 0000DE21 50                      	push rax 
 19924 0000DE22 FF7508                  	push qword [rbp + 8]
 19925 0000DE25 FF7500                  	push qword [rbp]
 19926 0000DE28 4883C308                	add rbx ,8*1
 19927                                  	 .L_fix_stack_label_014d:
 19928 0000DE2C 488B5518                	mov rdx, qword[rbp+8*3]
 19929 0000DE30 4883C203                	add rdx, 3
 19930 0000DE34 48C1E203                	shl rdx, 3
 19931 0000DE38 4889EF                  	mov rdi, rbp
 19932 0000DE3B 4801D7                  	add rdi, rdx
 19933 0000DE3E 4C8B4500                	mov r8, qword[rbp]
 19934 0000DE42 4889E9                  	mov rcx, rbp
 19935 0000DE45 4883E908                	sub rcx, 8
 19936                                  	 .L_loop_fix_stuck_014d:
 19937 0000DE49 4839CC                  	cmp rsp, rcx
 19938 0000DE4C 7710                    ja .L_loop_fix_stuck_end_014d
 19939 0000DE4E 488B19                   	mov rbx, qword[rcx]
 19940 0000DE51 48891F                  	 mov qword[rdi], rbx
 19941 0000DE54 4883EF08                	sub rdi, 8
 19942 0000DE58 4883E908                	sub rcx, 8
 19943 0000DE5C EBEB                    jmp .L_loop_fix_stuck_014d
 19944                                  	 .L_loop_fix_stuck_end_014d:
 19945 0000DE5E 4883C708                	add rdi, 8
 19946 0000DE62 4889FC                  	 mov rsp, rdi
 19947 0000DE65 4C89C5                  	mov rbp, r8
 19948 0000DE68 5D                      	pop rbp
 19949 0000DE69 FFE0                    	jmp rax 
 19950 0000DE6B C9                      	leave
 19951 0000DE6C C21800                  	ret 8 * (2 + 1)
 19952                                  .L_lambda_simple_end_0119:	; new closure is in rax
 19953                                  	assert_closure(rax)
    42 0000DE6F 803805              <1>  cmp byte [%1], %2
    43 0000DE72 0F8596480000        <1>  jne L_error_incorrect_type
 19954 0000DE78 50                      	push rax 
 19955 0000DE79 FF7508                  	push qword [rbp + 8]
 19956 0000DE7C FF7500                  	push qword [rbp]
 19957 0000DE7F 4883C308                	add rbx ,8*1
 19958                                  	 .L_fix_stack_label_014c:
 19959 0000DE83 488B5518                	mov rdx, qword[rbp+8*3]
 19960 0000DE87 4883C203                	add rdx, 3
 19961 0000DE8B 48C1E203                	shl rdx, 3
 19962 0000DE8F 4889EF                  	mov rdi, rbp
 19963 0000DE92 4801D7                  	add rdi, rdx
 19964 0000DE95 4C8B4500                	mov r8, qword[rbp]
 19965 0000DE99 4889E9                  	mov rcx, rbp
 19966 0000DE9C 4883E908                	sub rcx, 8
 19967                                  	 .L_loop_fix_stuck_014c:
 19968 0000DEA0 4839CC                  	cmp rsp, rcx
 19969 0000DEA3 7710                    ja .L_loop_fix_stuck_end_014c
 19970 0000DEA5 488B19                   	mov rbx, qword[rcx]
 19971 0000DEA8 48891F                  	 mov qword[rdi], rbx
 19972 0000DEAB 4883EF08                	sub rdi, 8
 19973 0000DEAF 4883E908                	sub rcx, 8
 19974 0000DEB3 EBEB                    jmp .L_loop_fix_stuck_014c
 19975                                  	 .L_loop_fix_stuck_end_014c:
 19976 0000DEB5 4883C708                	add rdi, 8
 19977 0000DEB9 4889FC                  	 mov rsp, rdi
 19978 0000DEBC 4C89C5                  	mov rbp, r8
 19979 0000DEBF 5D                      	pop rbp
 19980 0000DEC0 FFE0                    	jmp rax 
 19981 0000DEC2 C9                      	leave
 19982 0000DEC3 C21800                  	ret 8 * (2 + 1)
 19983                                  .L_lambda_simple_end_0115:	; new closure is in rax
 19984                                  	assert_closure(rax)
    42 0000DEC6 803805              <1>  cmp byte [%1], %2
    43 0000DEC9 0F853F480000        <1>  jne L_error_incorrect_type
 19985 0000DECF 50                      	push rax 
 19986 0000DED0 FF7508                  	push qword [rbp + 8]
 19987 0000DED3 FF7500                  	push qword [rbp]
 19988 0000DED6 4883C308                	add rbx ,8*1
 19989                                  	 .L_fix_stack_label_0148:
 19990 0000DEDA 488B5518                	mov rdx, qword[rbp+8*3]
 19991 0000DEDE 4883C203                	add rdx, 3
 19992 0000DEE2 48C1E203                	shl rdx, 3
 19993 0000DEE6 4889EF                  	mov rdi, rbp
 19994 0000DEE9 4801D7                  	add rdi, rdx
 19995 0000DEEC 4C8B4500                	mov r8, qword[rbp]
 19996 0000DEF0 4889E9                  	mov rcx, rbp
 19997 0000DEF3 4883E908                	sub rcx, 8
 19998                                  	 .L_loop_fix_stuck_0148:
 19999 0000DEF7 4839CC                  	cmp rsp, rcx
 20000 0000DEFA 7710                    ja .L_loop_fix_stuck_end_0148
 20001 0000DEFC 488B19                   	mov rbx, qword[rcx]
 20002 0000DEFF 48891F                  	 mov qword[rdi], rbx
 20003 0000DF02 4883EF08                	sub rdi, 8
 20004 0000DF06 4883E908                	sub rcx, 8
 20005 0000DF0A EBEB                    jmp .L_loop_fix_stuck_0148
 20006                                  	 .L_loop_fix_stuck_end_0148:
 20007 0000DF0C 4883C708                	add rdi, 8
 20008 0000DF10 4889FC                  	 mov rsp, rdi
 20009 0000DF13 4C89C5                  	mov rbp, r8
 20010 0000DF16 5D                      	pop rbp
 20011 0000DF17 FFE0                    	jmp rax 
 20012 0000DF19 C9                      	leave
 20013 0000DF1A C21800                  	ret 8 * (2 + 1)
 20014                                  .L_lambda_simple_end_0114:	; new closure is in rax
 20015 0000DF1D 50                      	push rax
 20016 0000DF1E 6A01                    	push 1
 20017 0000DF20 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20018 0000DF25 E8F02F0000              	call malloc
 20019 0000DF2A 50                      	push rax
 20020 0000DF2B BF00000000              	mov rdi, 8 * 0	; new rib
 20021 0000DF30 E8E52F0000              	call malloc
 20022 0000DF35 50                      	push rax
 20023 0000DF36 BF08000000              	mov rdi, 8 * 1	; extended env
 20024 0000DF3B E8DA2F0000              	call malloc
 20025 0000DF40 488B7D10                	mov rdi, ENV
 20026 0000DF44 BE00000000              	mov rsi, 0
 20027 0000DF49 BA01000000              	mov rdx, 1
 20028                                  .L_lambda_simple_env_loop_011c:	; ext_env[i + 1] <-- env[i]
 20029 0000DF4E 4883FE00                	cmp rsi, 0
 20030 0000DF52 7410                    	je .L_lambda_simple_env_end_011c
 20031 0000DF54 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20032 0000DF58 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20033 0000DF5C 48FFC6                  	inc rsi
 20034 0000DF5F 48FFC2                  	inc rdx
 20035 0000DF62 EBEA                    	jmp .L_lambda_simple_env_loop_011c
 20036                                  .L_lambda_simple_env_end_011c:
 20037 0000DF64 5B                      	pop rbx
 20038 0000DF65 BE00000000              	mov rsi, 0
 20039                                  .L_lambda_simple_params_loop_011c:	; copy params
 20040 0000DF6A 4883FE00                	cmp rsi, 0
 20041 0000DF6E 740E                    	je .L_lambda_simple_params_end_011c
 20042 0000DF70 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20043 0000DF75 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20044 0000DF79 48FFC6                  	inc rsi
 20045 0000DF7C EBEC                    	jmp .L_lambda_simple_params_loop_011c
 20046                                  .L_lambda_simple_params_end_011c:
 20047 0000DF7E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20048 0000DF81 4889C3                  	mov rbx, rax
 20049 0000DF84 58                      	pop rax
 20050 0000DF85 C60005                  	mov byte [rax], T_closure
 20051 0000DF88 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20052 0000DF8C 48C74009[99DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011c
 20053 0000DF94 E97F000000              	jmp .L_lambda_simple_end_011c
 20054                                  .L_lambda_simple_code_011c:	; lambda-simple body
 20055 0000DF99 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20056 0000DF9F 740B                    	je .L_lambda_simple_arity_check_ok_011c
 20057 0000DFA1 FF742410                	push qword [rsp + 8 * 2]
 20058 0000DFA5 6A01                    	push 1
 20059 0000DFA7 E9272F0000              	jmp L_error_incorrect_arity_simple
 20060                                  .L_lambda_simple_arity_check_ok_011c:
 20061 0000DFAC C8000000                	enter 0, 0
 20062 0000DFB0 488B0425[70030000]      	mov rax, qword [free_var_110]
 20063 0000DFB8 50                      	push rax
 20064 0000DFB9 6A01                    	push 1
 20065 0000DFBB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20066 0000DFBF 803805                  	cmp byte [rax], T_closure 
 20067 0000DFC2 0F85073F0000                    jne L_code_ptr_error
 20068                                  
 20069 0000DFC8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20070                                  
 20071 0000DFCC 53                              push rbx
 20072                                  
 20073 0000DFCD FF5009                          call SOB_CLOSURE_CODE(rax)
 20074                                  
 20075 0000DFD0 48890425[F0030000]              	mov qword [free_var_126], rax
 20076                                  
 20077 0000DFD8 48B8-                           	mov rax, sob_void
 20077 0000DFDA [0000000000000000] 
 20078                                  
 20079 0000DFE2 488B0425[A8030000]      	mov rax, qword [free_var_117]
 20080 0000DFEA 50                      	push rax
 20081 0000DFEB 6A01                    	push 1
 20082 0000DFED 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20083 0000DFF1 803805                  	cmp byte [rax], T_closure 
 20084 0000DFF4 0F85D53E0000                    jne L_code_ptr_error
 20085                                  
 20086 0000DFFA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20087                                  
 20088 0000DFFE 53                              push rbx
 20089                                  
 20090 0000DFFF FF5009                          call SOB_CLOSURE_CODE(rax)
 20091                                  
 20092 0000E002 48890425[18040000]              	mov qword [free_var_131], rax
 20093                                  
 20094 0000E00A 48B8-                           	mov rax, sob_void
 20094 0000E00C [0000000000000000] 
 20095 0000E014 C9                      	leave
 20096 0000E015 C21800                  	ret 8 * (2 + 1)
 20097                                  .L_lambda_simple_end_011c:	; new closure is in rax
 20098 0000E018 803805                  	cmp byte [rax], T_closure 
 20099 0000E01B 0F85AE3E0000                    jne L_code_ptr_error
 20100                                  
 20101 0000E021 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20102                                  
 20103 0000E025 53                              push rbx
 20104                                  
 20105 0000E026 FF5009                          call SOB_CLOSURE_CODE(rax)
 20106                                  
 20107                                          
 20108 0000E029 4889C7                  	mov rdi, rax
 20109 0000E02C E8FA2E0000              	call print_sexpr_if_not_void
 20110                                  
 20111 0000E031 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20112 0000E036 E8DF2E0000              	call malloc
 20113 0000E03B 50                      	push rax
 20114 0000E03C BF00000000              	mov rdi, 8 * 0	; new rib
 20115 0000E041 E8D42E0000              	call malloc
 20116 0000E046 50                      	push rax
 20117 0000E047 BF08000000              	mov rdi, 8 * 1	; extended env
 20118 0000E04C E8C92E0000              	call malloc
 20119 0000E051 488B7D10                	mov rdi, ENV
 20120 0000E055 BE00000000              	mov rsi, 0
 20121 0000E05A BA01000000              	mov rdx, 1
 20122                                  .L_lambda_simple_env_loop_011d:	; ext_env[i + 1] <-- env[i]
 20123 0000E05F 4883FE00                	cmp rsi, 0
 20124 0000E063 7410                    	je .L_lambda_simple_env_end_011d
 20125 0000E065 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20126 0000E069 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20127 0000E06D 48FFC6                  	inc rsi
 20128 0000E070 48FFC2                  	inc rdx
 20129 0000E073 EBEA                    	jmp .L_lambda_simple_env_loop_011d
 20130                                  .L_lambda_simple_env_end_011d:
 20131 0000E075 5B                      	pop rbx
 20132 0000E076 BE00000000              	mov rsi, 0
 20133                                  .L_lambda_simple_params_loop_011d:	; copy params
 20134 0000E07B 4883FE00                	cmp rsi, 0
 20135 0000E07F 740E                    	je .L_lambda_simple_params_end_011d
 20136 0000E081 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20137 0000E086 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20138 0000E08A 48FFC6                  	inc rsi
 20139 0000E08D EBEC                    	jmp .L_lambda_simple_params_loop_011d
 20140                                  .L_lambda_simple_params_end_011d:
 20141 0000E08F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20142 0000E092 4889C3                  	mov rbx, rax
 20143 0000E095 58                      	pop rax
 20144 0000E096 C60005                  	mov byte [rax], T_closure
 20145 0000E099 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20146 0000E09D 48C74009[AAE00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011d
 20147 0000E0A5 E9F7000000              	jmp .L_lambda_simple_end_011d
 20148                                  .L_lambda_simple_code_011d:	; lambda-simple body
 20149 0000E0AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20150 0000E0B0 740B                    	je .L_lambda_simple_arity_check_ok_011d
 20151 0000E0B2 FF742410                	push qword [rsp + 8 * 2]
 20152 0000E0B6 6A01                    	push 1
 20153 0000E0B8 E9162E0000              	jmp L_error_incorrect_arity_simple
 20154                                  .L_lambda_simple_arity_check_ok_011d:
 20155 0000E0BD C8000000                	enter 0, 0
 20156 0000E0C1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20157 0000E0C5 50                      	push rax
 20158 0000E0C6 6A01                    	push 1
 20159 0000E0C8 488B0425[00000000]      	mov rax, qword [free_var_0]
 20160 0000E0D0 803805                  	cmp byte [rax], T_closure 
 20161 0000E0D3 0F85F63D0000                    jne L_code_ptr_error
 20162                                  
 20163 0000E0D9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20164                                  
 20165 0000E0DD 53                              push rbx
 20166                                  
 20167 0000E0DE FF5009                          call SOB_CLOSURE_CODE(rax)
 20168                                  
 20169                                          
 20170 0000E0E1 483D[02000000]                  	cmp rax, sob_boolean_false
 20171                                  
 20172 0000E0E7 740F                            	je .L_if_else_00a5
 20173 0000E0E9 48B8-                   	mov rax,L_constants + 32
 20173 0000E0EB [2000000000000000] 
 20174                                  
 20175 0000E0F3 E9A5000000                      	jmp .L_if_end_00a5
 20176                                  
 20177                                          	.L_if_else_00a5:
 20178 0000E0F8 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 20179 0000E0FC 50                      	push rax
 20180 0000E0FD 6A01                    	push 1
 20181 0000E0FF 488B0425[88000000]      	mov rax, qword [free_var_17]
 20182 0000E107 803805                  	cmp byte [rax], T_closure 
 20183 0000E10A 0F85BF3D0000                    jne L_code_ptr_error
 20184                                  
 20185 0000E110 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20186                                  
 20187 0000E114 53                              push rbx
 20188                                  
 20189 0000E115 FF5009                          call SOB_CLOSURE_CODE(rax)
 20190                                  
 20191 0000E118 50                              	push rax
 20192 0000E119 6A01                    	push 1
 20193 0000E11B 488B0425[30040000]      	mov rax, qword [free_var_134]
 20194 0000E123 803805                  	cmp byte [rax], T_closure 
 20195 0000E126 0F85A33D0000                    jne L_code_ptr_error
 20196                                  
 20197 0000E12C 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20198                                  
 20199 0000E130 53                              push rbx
 20200                                  
 20201 0000E131 FF5009                          call SOB_CLOSURE_CODE(rax)
 20202                                  
 20203 0000E134 50                              	push rax
 20204 0000E135 48B8-                   	mov rax,L_constants + 128
 20204 0000E137 [8000000000000000] 
 20205 0000E13F 50                      	push rax
 20206                                  
 20207 0000E140 6A02                    	push 2
 20208 0000E142 488B0425[08030000]      	mov rax, qword [free_var_97]
 20209                                  	assert_closure(rax)
    42 0000E14A 803805              <1>  cmp byte [%1], %2
    43 0000E14D 0F85BB450000        <1>  jne L_error_incorrect_type
 20210 0000E153 50                      	push rax 
 20211 0000E154 FF7508                  	push qword [rbp + 8]
 20212 0000E157 FF7500                  	push qword [rbp]
 20213 0000E15A 4883C308                	add rbx ,8*1
 20214                                  	 .L_fix_stack_label_0150:
 20215 0000E15E 488B5518                	mov rdx, qword[rbp+8*3]
 20216 0000E162 4883C203                	add rdx, 3
 20217 0000E166 48C1E203                	shl rdx, 3
 20218 0000E16A 4889EF                  	mov rdi, rbp
 20219 0000E16D 4801D7                  	add rdi, rdx
 20220 0000E170 4C8B4500                	mov r8, qword[rbp]
 20221 0000E174 4889E9                  	mov rcx, rbp
 20222 0000E177 4883E908                	sub rcx, 8
 20223                                  	 .L_loop_fix_stuck_0150:
 20224 0000E17B 4839CC                  	cmp rsp, rcx
 20225 0000E17E 7710                    ja .L_loop_fix_stuck_end_0150
 20226 0000E180 488B19                   	mov rbx, qword[rcx]
 20227 0000E183 48891F                  	 mov qword[rdi], rbx
 20228 0000E186 4883EF08                	sub rdi, 8
 20229 0000E18A 4883E908                	sub rcx, 8
 20230 0000E18E EBEB                    jmp .L_loop_fix_stuck_0150
 20231                                  	 .L_loop_fix_stuck_end_0150:
 20232 0000E190 4883C708                	add rdi, 8
 20233 0000E194 4889FC                  	 mov rsp, rdi
 20234 0000E197 4C89C5                  	mov rbp, r8
 20235 0000E19A 5D                      	pop rbp
 20236 0000E19B FFE0                    	jmp rax 
 20237                                  
 20238                                          	.L_if_end_00a5:
 20239 0000E19D C9                      	leave
 20240 0000E19E C21800                  	ret 8 * (2 + 1)
 20241                                  .L_lambda_simple_end_011d:	; new closure is in rax
 20242 0000E1A1 48890425[30040000]      	mov qword [free_var_134], rax
 20243 0000E1A9 48B8-                   	mov rax, sob_void
 20243 0000E1AB [0000000000000000] 
 20244                                  
 20245 0000E1B3 4889C7                  	mov rdi, rax
 20246 0000E1B6 E8702D0000              	call print_sexpr_if_not_void
 20247                                  
 20248 0000E1BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20249 0000E1C0 E8552D0000              	call malloc
 20250 0000E1C5 50                      	push rax
 20251 0000E1C6 BF00000000              	mov rdi, 8 * 0	; new rib
 20252 0000E1CB E84A2D0000              	call malloc
 20253 0000E1D0 50                      	push rax
 20254 0000E1D1 BF08000000              	mov rdi, 8 * 1	; extended env
 20255 0000E1D6 E83F2D0000              	call malloc
 20256 0000E1DB 488B7D10                	mov rdi, ENV
 20257 0000E1DF BE00000000              	mov rsi, 0
 20258 0000E1E4 BA01000000              	mov rdx, 1
 20259                                  .L_lambda_simple_env_loop_011e:	; ext_env[i + 1] <-- env[i]
 20260 0000E1E9 4883FE00                	cmp rsi, 0
 20261 0000E1ED 7410                    	je .L_lambda_simple_env_end_011e
 20262 0000E1EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20263 0000E1F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20264 0000E1F7 48FFC6                  	inc rsi
 20265 0000E1FA 48FFC2                  	inc rdx
 20266 0000E1FD EBEA                    	jmp .L_lambda_simple_env_loop_011e
 20267                                  .L_lambda_simple_env_end_011e:
 20268 0000E1FF 5B                      	pop rbx
 20269 0000E200 BE00000000              	mov rsi, 0
 20270                                  .L_lambda_simple_params_loop_011e:	; copy params
 20271 0000E205 4883FE00                	cmp rsi, 0
 20272 0000E209 740E                    	je .L_lambda_simple_params_end_011e
 20273 0000E20B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20274 0000E210 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20275 0000E214 48FFC6                  	inc rsi
 20276 0000E217 EBEC                    	jmp .L_lambda_simple_params_loop_011e
 20277                                  .L_lambda_simple_params_end_011e:
 20278 0000E219 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20279 0000E21C 4889C3                  	mov rbx, rax
 20280 0000E21F 58                      	pop rax
 20281 0000E220 C60005                  	mov byte [rax], T_closure
 20282 0000E223 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20283 0000E227 48C74009[34E20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011e
 20284 0000E22F E9FD000000              	jmp .L_lambda_simple_end_011e
 20285                                  .L_lambda_simple_code_011e:	; lambda-simple body
 20286 0000E234 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20287 0000E23A 740B                    	je .L_lambda_simple_arity_check_ok_011e
 20288 0000E23C FF742410                	push qword [rsp + 8 * 2]
 20289 0000E240 6A01                    	push 1
 20290 0000E242 E98C2C0000              	jmp L_error_incorrect_arity_simple
 20291                                  .L_lambda_simple_arity_check_ok_011e:
 20292 0000E247 C8000000                	enter 0, 0
 20293 0000E24B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20294 0000E24F 50                      	push rax
 20295 0000E250 6A01                    	push 1
 20296 0000E252 488B0425[00000000]      	mov rax, qword [free_var_0]
 20297 0000E25A 803805                  	cmp byte [rax], T_closure 
 20298 0000E25D 0F856C3C0000                    jne L_code_ptr_error
 20299                                  
 20300 0000E263 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20301                                  
 20302 0000E267 53                              push rbx
 20303                                  
 20304 0000E268 FF5009                          call SOB_CLOSURE_CODE(rax)
 20305                                  
 20306 0000E26B 483D[02000000]                  	cmp rax, sob_boolean_false
 20307 0000E271 0F85B6000000            	jne .L_or_end_0018
 20308 0000E277 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20309 0000E27B 50                      	push rax
 20310 0000E27C 6A01                    	push 1
 20311 0000E27E 488B0425[08000000]      	mov rax, qword [free_var_1]
 20312 0000E286 803805                  	cmp byte [rax], T_closure 
 20313 0000E289 0F85403C0000                    jne L_code_ptr_error
 20314                                  
 20315 0000E28F 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20316                                  
 20317 0000E293 53                              push rbx
 20318                                  
 20319 0000E294 FF5009                          call SOB_CLOSURE_CODE(rax)
 20320                                  
 20321                                          
 20322 0000E297 483D[02000000]                  	cmp rax, sob_boolean_false
 20323                                  
 20324 0000E29D 0F8480000000                    	je .L_if_else_00a6
 20325 0000E2A3 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 20326 0000E2A7 50                      	push rax
 20327 0000E2A8 6A01                    	push 1
 20328 0000E2AA 488B0425[88000000]      	mov rax, qword [free_var_17]
 20329 0000E2B2 803805                  	cmp byte [rax], T_closure 
 20330 0000E2B5 0F85143C0000                    jne L_code_ptr_error
 20331                                  
 20332 0000E2BB 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20333                                  
 20334 0000E2BF 53                              push rbx
 20335                                  
 20336 0000E2C0 FF5009                          call SOB_CLOSURE_CODE(rax)
 20337                                  
 20338 0000E2C3 50                              	push rax
 20339                                  
 20340 0000E2C4 6A01                    	push 1
 20341 0000E2C6 488B0425[A0020000]      	mov rax, qword [free_var_84]
 20342                                  	assert_closure(rax)
    42 0000E2CE 803805              <1>  cmp byte [%1], %2
    43 0000E2D1 0F8537440000        <1>  jne L_error_incorrect_type
 20343 0000E2D7 50                      	push rax 
 20344 0000E2D8 FF7508                  	push qword [rbp + 8]
 20345 0000E2DB FF7500                  	push qword [rbp]
 20346 0000E2DE 4883C308                	add rbx ,8*1
 20347                                  	 .L_fix_stack_label_0151:
 20348 0000E2E2 488B5518                	mov rdx, qword[rbp+8*3]
 20349 0000E2E6 4883C203                	add rdx, 3
 20350 0000E2EA 48C1E203                	shl rdx, 3
 20351 0000E2EE 4889EF                  	mov rdi, rbp
 20352 0000E2F1 4801D7                  	add rdi, rdx
 20353 0000E2F4 4C8B4500                	mov r8, qword[rbp]
 20354 0000E2F8 4889E9                  	mov rcx, rbp
 20355 0000E2FB 4883E908                	sub rcx, 8
 20356                                  	 .L_loop_fix_stuck_0151:
 20357 0000E2FF 4839CC                  	cmp rsp, rcx
 20358 0000E302 7710                    ja .L_loop_fix_stuck_end_0151
 20359 0000E304 488B19                   	mov rbx, qword[rcx]
 20360 0000E307 48891F                  	 mov qword[rdi], rbx
 20361 0000E30A 4883EF08                	sub rdi, 8
 20362 0000E30E 4883E908                	sub rcx, 8
 20363 0000E312 EBEB                    jmp .L_loop_fix_stuck_0151
 20364                                  	 .L_loop_fix_stuck_end_0151:
 20365 0000E314 4883C708                	add rdi, 8
 20366 0000E318 4889FC                  	 mov rsp, rdi
 20367 0000E31B 4C89C5                  	mov rbp, r8
 20368 0000E31E 5D                      	pop rbp
 20369 0000E31F FFE0                    	jmp rax 
 20370                                  
 20371 0000E321 EB0A                            	jmp .L_if_end_00a6
 20372                                  
 20373                                          	.L_if_else_00a6:
 20374 0000E323 48B8-                   	mov rax,L_constants + 2
 20374 0000E325 [0200000000000000] 
 20375                                  
 20376                                          	.L_if_end_00a6:
 20377                                  .L_or_end_0018:
 20378 0000E32D C9                      	leave
 20379 0000E32E C21800                  	ret 8 * (2 + 1)
 20380                                  .L_lambda_simple_end_011e:	; new closure is in rax
 20381 0000E331 48890425[A0020000]      	mov qword [free_var_84], rax
 20382 0000E339 48B8-                   	mov rax, sob_void
 20382 0000E33B [0000000000000000] 
 20383                                  
 20384 0000E343 4889C7                  	mov rdi, rax
 20385 0000E346 E8E02B0000              	call print_sexpr_if_not_void
 20386                                  
 20387 0000E34B 488B0425[98010000]      	mov rax, qword [free_var_51]
 20388 0000E353 50                      	push rax
 20389 0000E354 6A01                    	push 1
 20390 0000E356 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20391 0000E35B E8BA2B0000              	call malloc
 20392 0000E360 50                      	push rax
 20393 0000E361 BF00000000              	mov rdi, 8 * 0	; new rib
 20394 0000E366 E8AF2B0000              	call malloc
 20395 0000E36B 50                      	push rax
 20396 0000E36C BF08000000              	mov rdi, 8 * 1	; extended env
 20397 0000E371 E8A42B0000              	call malloc
 20398 0000E376 488B7D10                	mov rdi, ENV
 20399 0000E37A BE00000000              	mov rsi, 0
 20400 0000E37F BA01000000              	mov rdx, 1
 20401                                  .L_lambda_simple_env_loop_011f:	; ext_env[i + 1] <-- env[i]
 20402 0000E384 4883FE00                	cmp rsi, 0
 20403 0000E388 7410                    	je .L_lambda_simple_env_end_011f
 20404 0000E38A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20405 0000E38E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20406 0000E392 48FFC6                  	inc rsi
 20407 0000E395 48FFC2                  	inc rdx
 20408 0000E398 EBEA                    	jmp .L_lambda_simple_env_loop_011f
 20409                                  .L_lambda_simple_env_end_011f:
 20410 0000E39A 5B                      	pop rbx
 20411 0000E39B BE00000000              	mov rsi, 0
 20412                                  .L_lambda_simple_params_loop_011f:	; copy params
 20413 0000E3A0 4883FE00                	cmp rsi, 0
 20414 0000E3A4 740E                    	je .L_lambda_simple_params_end_011f
 20415 0000E3A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20416 0000E3AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20417 0000E3AF 48FFC6                  	inc rsi
 20418 0000E3B2 EBEC                    	jmp .L_lambda_simple_params_loop_011f
 20419                                  .L_lambda_simple_params_end_011f:
 20420 0000E3B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20421 0000E3B7 4889C3                  	mov rbx, rax
 20422 0000E3BA 58                      	pop rax
 20423 0000E3BB C60005                  	mov byte [rax], T_closure
 20424 0000E3BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20425 0000E3C2 48C74009[CFE30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011f
 20426 0000E3CA E9F2030000              	jmp .L_lambda_simple_end_011f
 20427                                  .L_lambda_simple_code_011f:	; lambda-simple body
 20428 0000E3CF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20429 0000E3D5 740B                    	je .L_lambda_simple_arity_check_ok_011f
 20430 0000E3D7 FF742410                	push qword [rsp + 8 * 2]
 20431 0000E3DB 6A01                    	push 1
 20432 0000E3DD E9F12A0000              	jmp L_error_incorrect_arity_simple
 20433                                  .L_lambda_simple_arity_check_ok_011f:
 20434 0000E3E2 C8000000                	enter 0, 0
 20435 0000E3E6 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 20436 0000E3EB E82A2B0000              	call malloc
 20437 0000E3F0 50                      	push rax
 20438 0000E3F1 BF08000000              	mov rdi, 8 * 1  ; new rib
 20439 0000E3F6 E81F2B0000              	call malloc
 20440 0000E3FB 50                      	push rax
 20441 0000E3FC BF10000000              	mov rdi, 8 * 2	; extended env
 20442 0000E401 E8142B0000              	call malloc
 20443 0000E406 488B7D10                	mov rdi, ENV
 20444 0000E40A BE00000000              	mov rsi, 0
 20445 0000E40F BA01000000              	mov rdx, 1
 20446                                  .L_lambda_opt_env_loop_002c:	; ext_env = env
 20447 0000E414 4883FE01                	cmp rsi, 1
 20448 0000E418 7410                    	je .L_lambda_opt_env_end_002c
 20449 0000E41A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20450 0000E41E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20451 0000E422 48FFC6                  	inc rsi
 20452 0000E425 48FFC2                  	inc rdx
 20453 0000E428 EBEA                    	jmp .L_lambda_opt_env_loop_002c
 20454                                  .L_lambda_opt_env_end_002c:
 20455 0000E42A 5B                      	pop rbx
 20456 0000E42B BE00000000              	mov rsi, 0
 20457                                  .L_lambda_opt_params_loop_002c:	; copy params
 20458 0000E430 4883FE01                	cmp rsi, 1
 20459 0000E434 740E                    	je .L_lambda_opt_params_end_002c
 20460 0000E436 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20461 0000E43B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20462 0000E43F 48FFC6                  	inc rsi
 20463 0000E442 EBEC                    	jmp .L_lambda_opt_params_loop_002c
 20464                                  .L_lambda_opt_params_end_002c:
 20465 0000E444 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 20466 0000E447 4889C3                  	mov rbx, rax
 20467 0000E44A 58                      	pop rax
 20468 0000E44B C60005                  	mov byte [rax], T_closure
 20469 0000E44E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20470 0000E452 48C74009[5FE40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002c
 20471 0000E45A E95E030000              	jmp .L_lambda_opt_end_002c
 20472                                  .L_lambda_opt_code_002c:	; lambda-opt body
 20473 0000E45F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20474 0000E465 740D                    	je .L_lambda_opt_arity_check_exact_002c  ;same num_of_args
 20475 0000E467 7F5B                    	jg .L_lambda_opt_arity_check_more_002c  ;greater num_of_args
 20476 0000E469 FF742410                	push qword [rsp + 8 * 2]
 20477 0000E46D 6A01                    	push 1
 20478 0000E46F E9732A0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 20479                                  .L_lambda_opt_arity_check_exact_002c:
 20480 0000E474 4883EC08                	sub rsp, 8 * 1
 20481 0000E478 4889E7                  	mov rdi, rsp 
 20482                                  	;mov ret
 20483 0000E47B 488B4708                	mov rax, qword [rdi + (8 * 1)]
 20484 0000E47F 488907                  	mov qword [rdi], rax
 20485 0000E482 4883C708                	add rdi, 8
 20486                                  	;mov env
 20487 0000E486 488B4708                	mov rax, qword [rdi + (8 * 1)]
 20488 0000E48A 488907                  	mov qword [rdi], rax
 20489 0000E48D 4883C708                	add rdi, 8
 20490                                  	;mov & update COUNT
 20491 0000E491 488B4708                	mov rax, qword [rdi +(8 * 1)]
 20492 0000E495 4889C1                  	mov rcx, rax
 20493 0000E498 48FFC0                  	inc rax
 20494 0000E49B 488907                  	mov qword [rdi], rax
 20495 0000E49E 4883C708                	add rdi, 8
 20496                                  	;LOOP:move params
 20497                                  .L_lambda_opt_stack_shrink_loop_0082:	
 20498 0000E4A2 4883F900                	cmp rcx, 0
 20499 0000E4A6 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0082
 20500 0000E4A8 488B4708                	mov rax, qword [rdi + 8]
 20501 0000E4AC 488907                  	mov qword [rdi], rax
 20502 0000E4AF 4883C708                	add rdi, 8
 20503 0000E4B3 48FFC9                  	dec rcx
 20504 0000E4B6 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0082
 20505                                  .L_lambda_opt_stack_shrink_loop_exit_0082:	
 20506 0000E4B8 48C707[01000000]        	mov qword [rdi], sob_nil
 20507 0000E4BF E995000000              	jmp .L_lambda_opt_stack_adjusted_002c
 20508                                  .L_lambda_opt_arity_check_more_002c:	
 20509 0000E4C4 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 20510 0000E4C9 488D4EFF                	lea rcx, [rsi - 1]
 20511 0000E4CD 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 20512 0000E4D2 4989F2                  	mov r10, rsi
 20513 0000E4D5 49B9-                   	mov r9, sob_nil
 20513 0000E4D7 [0100000000000000] 
 20514                                  .L_lambda_opt_stack_shrink_loop_0083:	
 20515 0000E4DF 4883F900                	cmp rcx, 0
 20516 0000E4E3 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0083
 20517 0000E4E5 BF11000000              	mov rdi, 1 + 8 + 8
 20518 0000E4EA E82B2A0000              	call malloc
 20519 0000E4EF C60021                  	mov byte [rax], T_pair
 20520 0000E4F2 488B1E                  	mov rbx, qword [rsi]
 20521 0000E4F5 48895801                	mov SOB_PAIR_CAR(rax), rbx
 20522 0000E4F9 4C894809                	mov SOB_PAIR_CDR(rax), r9
 20523 0000E4FD 4989C1                  	mov r9, rax
 20524 0000E500 4883EE08                	sub rsi, 8 * 1
 20525 0000E504 48FFC9                  	dec rcx
 20526 0000E507 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0083
 20527                                  .L_lambda_opt_stack_shrink_loop_exit_0083:	
 20528 0000E509 4D890A                  	mov qword [r10], r9
 20529 0000E50C 4983EA08                	sub r10, 8 * 1; the new dest!
 20530 0000E510 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
 20531 0000E515 B901000000              	mov rcx, 1 
 20532                                  .L_lambda_opt_stack_shrink_loop_0084:	
 20533 0000E51A 4883F900                	cmp rcx, 0
 20534 0000E51E 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0084
 20535 0000E520 488B06                  	mov rax, qword [rsi]
 20536 0000E523 498902                  	mov qword [r10], rax
 20537 0000E526 4983EA08                	sub r10, 8 * 1
 20538 0000E52A 4883EE08                	sub rsi, 8 * 1
 20539 0000E52E 48FFC9                  	dec rcx
 20540 0000E531 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0084
 20541                                  .L_lambda_opt_stack_shrink_loop_exit_0084:	
 20542 0000E533 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
 20543 0000E53A 4983EA08                	sub r10, 8 * 1
 20544 0000E53E 4883EE08                	sub rsi, 8 * 1
 20545 0000E542 488B06                  	mov rax, qword [rsi] ;env
 20546 0000E545 498902                  	mov qword [r10], rax
 20547 0000E548 4983EA08                	sub r10, 8 * 1
 20548 0000E54C 4883EE08                	sub rsi, 8 * 1
 20549 0000E550 488B06                  	mov rax, qword [rsi] ;ret
 20550 0000E553 498902                  	mov qword [r10], rax
 20551 0000E556 4C89D4                  	mov rsp, r10
 20552                                  .L_lambda_opt_stack_adjusted_002c:	
 20553 0000E559 C8000000                	enter 0, 0
 20554 0000E55D 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 20555 0000E561 50                      	push rax
 20556 0000E562 6A01                    	push 1
 20557 0000E564 488B0425[00000000]      	mov rax, qword [free_var_0]
 20558 0000E56C 803805                  	cmp byte [rax], T_closure 
 20559 0000E56F 0F855A390000                    jne L_code_ptr_error
 20560                                  
 20561 0000E575 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20562                                  
 20563 0000E579 53                              push rbx
 20564                                  
 20565 0000E57A FF5009                          call SOB_CLOSURE_CODE(rax)
 20566                                  
 20567                                          
 20568 0000E57D 483D[02000000]                  	cmp rax, sob_boolean_false
 20569                                  
 20570 0000E583 740F                            	je .L_if_else_00a7
 20571 0000E585 48B8-                   	mov rax,L_constants + 0
 20571 0000E587 [0000000000000000] 
 20572                                  
 20573 0000E58F E9CB000000                      	jmp .L_if_end_00a7
 20574                                  
 20575                                          	.L_if_else_00a7:
 20576 0000E594 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20577 0000E598 50                      	push rax
 20578 0000E599 6A01                    	push 1
 20579 0000E59B 488B0425[08000000]      	mov rax, qword [free_var_1]
 20580 0000E5A3 803805                  	cmp byte [rax], T_closure 
 20581 0000E5A6 0F8523390000                    jne L_code_ptr_error
 20582                                  
 20583 0000E5AC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20584                                  
 20585 0000E5B0 53                              push rbx
 20586                                  
 20587 0000E5B1 FF5009                          call SOB_CLOSURE_CODE(rax)
 20588                                  
 20589                                          
 20590 0000E5B4 483D[02000000]                  	cmp rax, sob_boolean_false
 20591                                  
 20592 0000E5BA 743E                            	je .L_if_else_00a9
 20593 0000E5BC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20594 0000E5C0 50                      	push rax
 20595 0000E5C1 6A01                    	push 1
 20596 0000E5C3 488B0425[88000000]      	mov rax, qword [free_var_17]
 20597 0000E5CB 803805                  	cmp byte [rax], T_closure 
 20598 0000E5CE 0F85FB380000                    jne L_code_ptr_error
 20599                                  
 20600 0000E5D4 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20601                                  
 20602 0000E5D8 53                              push rbx
 20603                                  
 20604 0000E5D9 FF5009                          call SOB_CLOSURE_CODE(rax)
 20605                                  
 20606 0000E5DC 50                              	push rax
 20607 0000E5DD 6A01                    	push 1
 20608 0000E5DF 488B0425[00000000]      	mov rax, qword [free_var_0]
 20609 0000E5E7 803805                  	cmp byte [rax], T_closure 
 20610 0000E5EA 0F85DF380000                    jne L_code_ptr_error
 20611                                  
 20612 0000E5F0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20613                                  
 20614 0000E5F4 53                              push rbx
 20615                                  
 20616 0000E5F5 FF5009                          call SOB_CLOSURE_CODE(rax)
 20617                                  
 20618                                          
 20619 0000E5F8 EB0A                            	jmp .L_if_end_00a9
 20620                                  
 20621                                          	.L_if_else_00a9:
 20622 0000E5FA 48B8-                   	mov rax,L_constants + 2
 20622 0000E5FC [0200000000000000] 
 20623                                  
 20624                                          	.L_if_end_00a9:
 20625                                  
 20626 0000E604 483D[02000000]                  	cmp rax, sob_boolean_false
 20627                                  
 20628 0000E60A 7422                            	je .L_if_else_00a8
 20629 0000E60C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20630 0000E610 50                      	push rax
 20631 0000E611 6A01                    	push 1
 20632 0000E613 488B0425[80000000]      	mov rax, qword [free_var_16]
 20633 0000E61B 803805                  	cmp byte [rax], T_closure 
 20634 0000E61E 0F85AB380000                    jne L_code_ptr_error
 20635                                  
 20636 0000E624 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20637                                  
 20638 0000E628 53                              push rbx
 20639                                  
 20640 0000E629 FF5009                          call SOB_CLOSURE_CODE(rax)
 20641                                  
 20642                                          
 20643 0000E62C EB31                            	jmp .L_if_end_00a8
 20644                                  
 20645                                          	.L_if_else_00a8:
 20646 0000E62E 48B8-                   	mov rax,L_constants + 379
 20646 0000E630 [7B01000000000000] 
 20647 0000E638 50                      	push rax
 20648 0000E639 48B8-                   	mov rax,L_constants + 370
 20648 0000E63B [7201000000000000] 
 20649 0000E643 50                      	push rax
 20650 0000E644 6A02                    	push 2
 20651 0000E646 488B0425[30010000]      	mov rax, qword [free_var_38]
 20652 0000E64E 803805                  	cmp byte [rax], T_closure 
 20653 0000E651 0F8578380000                    jne L_code_ptr_error
 20654                                  
 20655 0000E657 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20656                                  
 20657 0000E65B 53                              push rbx
 20658                                  
 20659 0000E65C FF5009                          call SOB_CLOSURE_CODE(rax)
 20660                                  
 20661                                          
 20662                                          	.L_if_end_00a8:
 20663                                  
 20664                                          	.L_if_end_00a7:
 20665 0000E65F 50                      	push rax
 20666                                  
 20667 0000E660 6A01                    	push 1
 20668 0000E662 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20669 0000E667 E8AE280000              	call malloc
 20670 0000E66C 50                      	push rax
 20671 0000E66D BF10000000              	mov rdi, 8 * 2	; new rib
 20672 0000E672 E8A3280000              	call malloc
 20673 0000E677 50                      	push rax
 20674 0000E678 BF18000000              	mov rdi, 8 * 3	; extended env
 20675 0000E67D E898280000              	call malloc
 20676 0000E682 488B7D10                	mov rdi, ENV
 20677 0000E686 BE00000000              	mov rsi, 0
 20678 0000E68B BA01000000              	mov rdx, 1
 20679                                  .L_lambda_simple_env_loop_0120:	; ext_env[i + 1] <-- env[i]
 20680 0000E690 4883FE02                	cmp rsi, 2
 20681 0000E694 7410                    	je .L_lambda_simple_env_end_0120
 20682 0000E696 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20683 0000E69A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20684 0000E69E 48FFC6                  	inc rsi
 20685 0000E6A1 48FFC2                  	inc rdx
 20686 0000E6A4 EBEA                    	jmp .L_lambda_simple_env_loop_0120
 20687                                  .L_lambda_simple_env_end_0120:
 20688 0000E6A6 5B                      	pop rbx
 20689 0000E6A7 BE00000000              	mov rsi, 0
 20690                                  .L_lambda_simple_params_loop_0120:	; copy params
 20691 0000E6AC 4883FE02                	cmp rsi, 2
 20692 0000E6B0 740E                    	je .L_lambda_simple_params_end_0120
 20693 0000E6B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20694 0000E6B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20695 0000E6BB 48FFC6                  	inc rsi
 20696 0000E6BE EBEC                    	jmp .L_lambda_simple_params_loop_0120
 20697                                  .L_lambda_simple_params_end_0120:
 20698 0000E6C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20699 0000E6C3 4889C3                  	mov rbx, rax
 20700 0000E6C6 58                      	pop rax
 20701 0000E6C7 C60005                  	mov byte [rax], T_closure
 20702 0000E6CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20703 0000E6CE 48C74009[DBE60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0120
 20704 0000E6D6 E98B000000              	jmp .L_lambda_simple_end_0120
 20705                                  .L_lambda_simple_code_0120:	; lambda-simple body
 20706 0000E6DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20707 0000E6E1 740B                    	je .L_lambda_simple_arity_check_ok_0120
 20708 0000E6E3 FF742410                	push qword [rsp + 8 * 2]
 20709 0000E6E7 6A01                    	push 1
 20710 0000E6E9 E9E5270000              	jmp L_error_incorrect_arity_simple
 20711                                  .L_lambda_simple_arity_check_ok_0120:
 20712 0000E6EE C8000000                	enter 0, 0
 20713 0000E6F2 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 20714 0000E6F6 50                      	push rax
 20715 0000E6F7 488B4510                	mov rax, qword [rbp + 8 * 2]
 20716                                  
 20717 0000E6FB 488B00                                            	mov rax, qword[rax + 8 * 0]
 20718                                  
 20719 0000E6FE 488B00                                            	mov rax, qword[rax + 8 * 0]
 20720 0000E701 50                      	push rax
 20721                                  
 20722 0000E702 6A02                    	push 2
 20723 0000E704 488B4510                	mov rax, qword [rbp + 8 * 2]
 20724                                  
 20725 0000E708 488B4008                                          	mov rax, qword[rax + 8 * 1]
 20726                                  
 20727 0000E70C 488B00                                            	mov rax, qword[rax + 8 * 0]
 20728                                  	assert_closure(rax)
    42 0000E70F 803805              <1>  cmp byte [%1], %2
    43 0000E712 0F85F63F0000        <1>  jne L_error_incorrect_type
 20729 0000E718 50                      	push rax 
 20730 0000E719 FF7508                  	push qword [rbp + 8]
 20731 0000E71C FF7500                  	push qword [rbp]
 20732 0000E71F 4883C308                	add rbx ,8*1
 20733                                  	 .L_fix_stack_label_0153:
 20734 0000E723 488B5518                	mov rdx, qword[rbp+8*3]
 20735 0000E727 4883C203                	add rdx, 3
 20736 0000E72B 48C1E203                	shl rdx, 3
 20737 0000E72F 4889EF                  	mov rdi, rbp
 20738 0000E732 4801D7                  	add rdi, rdx
 20739 0000E735 4C8B4500                	mov r8, qword[rbp]
 20740 0000E739 4889E9                  	mov rcx, rbp
 20741 0000E73C 4883E908                	sub rcx, 8
 20742                                  	 .L_loop_fix_stuck_0153:
 20743 0000E740 4839CC                  	cmp rsp, rcx
 20744 0000E743 7710                    ja .L_loop_fix_stuck_end_0153
 20745 0000E745 488B19                   	mov rbx, qword[rcx]
 20746 0000E748 48891F                  	 mov qword[rdi], rbx
 20747 0000E74B 4883EF08                	sub rdi, 8
 20748 0000E74F 4883E908                	sub rcx, 8
 20749 0000E753 EBEB                    jmp .L_loop_fix_stuck_0153
 20750                                  	 .L_loop_fix_stuck_end_0153:
 20751 0000E755 4883C708                	add rdi, 8
 20752 0000E759 4889FC                  	 mov rsp, rdi
 20753 0000E75C 4C89C5                  	mov rbp, r8
 20754 0000E75F 5D                      	pop rbp
 20755 0000E760 FFE0                    	jmp rax 
 20756 0000E762 C9                      	leave
 20757 0000E763 C21800                  	ret 8 * (2 + 1)
 20758                                  .L_lambda_simple_end_0120:	; new closure is in rax
 20759                                  	assert_closure(rax)
    42 0000E766 803805              <1>  cmp byte [%1], %2
    43 0000E769 0F859F3F0000        <1>  jne L_error_incorrect_type
 20760 0000E76F 50                      	push rax 
 20761 0000E770 FF7508                  	push qword [rbp + 8]
 20762 0000E773 FF7500                  	push qword [rbp]
 20763 0000E776 4883C308                	add rbx ,8*1
 20764                                  	 .L_fix_stack_label_0152:
 20765 0000E77A 488B5518                	mov rdx, qword[rbp+8*3]
 20766 0000E77E 4883C203                	add rdx, 3
 20767 0000E782 48C1E203                	shl rdx, 3
 20768 0000E786 4889EF                  	mov rdi, rbp
 20769 0000E789 4801D7                  	add rdi, rdx
 20770 0000E78C 4C8B4500                	mov r8, qword[rbp]
 20771 0000E790 4889E9                  	mov rcx, rbp
 20772 0000E793 4883E908                	sub rcx, 8
 20773                                  	 .L_loop_fix_stuck_0152:
 20774 0000E797 4839CC                  	cmp rsp, rcx
 20775 0000E79A 7710                    ja .L_loop_fix_stuck_end_0152
 20776 0000E79C 488B19                   	mov rbx, qword[rcx]
 20777 0000E79F 48891F                  	 mov qword[rdi], rbx
 20778 0000E7A2 4883EF08                	sub rdi, 8
 20779 0000E7A6 4883E908                	sub rcx, 8
 20780 0000E7AA EBEB                    jmp .L_loop_fix_stuck_0152
 20781                                  	 .L_loop_fix_stuck_end_0152:
 20782 0000E7AC 4883C708                	add rdi, 8
 20783 0000E7B0 4889FC                  	 mov rsp, rdi
 20784 0000E7B3 4C89C5                  	mov rbp, r8
 20785 0000E7B6 5D                      	pop rbp
 20786 0000E7B7 FFE0                    	jmp rax 
 20787 0000E7B9 C9                      	leave
 20788 0000E7BA C22000                  	ret 8 * (2 + 2)
 20789                                  .L_lambda_opt_end_002c:	; new closure is in rax
 20790 0000E7BD C9                      	leave
 20791 0000E7BE C21800                  	ret 8 * (2 + 1)
 20792                                  .L_lambda_simple_end_011f:	; new closure is in rax
 20793 0000E7C1 803805                  	cmp byte [rax], T_closure 
 20794 0000E7C4 0F8505370000                    jne L_code_ptr_error
 20795                                  
 20796 0000E7CA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20797                                  
 20798 0000E7CE 53                              push rbx
 20799                                  
 20800 0000E7CF FF5009                          call SOB_CLOSURE_CODE(rax)
 20801                                  
 20802 0000E7D2 48890425[98010000]              	mov qword [free_var_51], rax
 20803 0000E7DA 48B8-                   	mov rax, sob_void
 20803 0000E7DC [0000000000000000] 
 20804                                  
 20805 0000E7E4 4889C7                  	mov rdi, rax
 20806 0000E7E7 E83F270000              	call print_sexpr_if_not_void
 20807                                  
 20808 0000E7EC 488B0425[A0010000]      	mov rax, qword [free_var_52]
 20809 0000E7F4 50                      	push rax
 20810 0000E7F5 6A01                    	push 1
 20811 0000E7F7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20812 0000E7FC E819270000              	call malloc
 20813 0000E801 50                      	push rax
 20814 0000E802 BF00000000              	mov rdi, 8 * 0	; new rib
 20815 0000E807 E80E270000              	call malloc
 20816 0000E80C 50                      	push rax
 20817 0000E80D BF08000000              	mov rdi, 8 * 1	; extended env
 20818 0000E812 E803270000              	call malloc
 20819 0000E817 488B7D10                	mov rdi, ENV
 20820 0000E81B BE00000000              	mov rsi, 0
 20821 0000E820 BA01000000              	mov rdx, 1
 20822                                  .L_lambda_simple_env_loop_0121:	; ext_env[i + 1] <-- env[i]
 20823 0000E825 4883FE00                	cmp rsi, 0
 20824 0000E829 7410                    	je .L_lambda_simple_env_end_0121
 20825 0000E82B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20826 0000E82F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20827 0000E833 48FFC6                  	inc rsi
 20828 0000E836 48FFC2                  	inc rdx
 20829 0000E839 EBEA                    	jmp .L_lambda_simple_env_loop_0121
 20830                                  .L_lambda_simple_env_end_0121:
 20831 0000E83B 5B                      	pop rbx
 20832 0000E83C BE00000000              	mov rsi, 0
 20833                                  .L_lambda_simple_params_loop_0121:	; copy params
 20834 0000E841 4883FE00                	cmp rsi, 0
 20835 0000E845 740E                    	je .L_lambda_simple_params_end_0121
 20836 0000E847 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20837 0000E84C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20838 0000E850 48FFC6                  	inc rsi
 20839 0000E853 EBEC                    	jmp .L_lambda_simple_params_loop_0121
 20840                                  .L_lambda_simple_params_end_0121:
 20841 0000E855 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20842 0000E858 4889C3                  	mov rbx, rax
 20843 0000E85B 58                      	pop rax
 20844 0000E85C C60005                  	mov byte [rax], T_closure
 20845 0000E85F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20846 0000E863 48C74009[70E80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0121
 20847 0000E86B E9F2030000              	jmp .L_lambda_simple_end_0121
 20848                                  .L_lambda_simple_code_0121:	; lambda-simple body
 20849 0000E870 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20850 0000E876 740B                    	je .L_lambda_simple_arity_check_ok_0121
 20851 0000E878 FF742410                	push qword [rsp + 8 * 2]
 20852 0000E87C 6A01                    	push 1
 20853 0000E87E E950260000              	jmp L_error_incorrect_arity_simple
 20854                                  .L_lambda_simple_arity_check_ok_0121:
 20855 0000E883 C8000000                	enter 0, 0
 20856 0000E887 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 20857 0000E88C E889260000              	call malloc
 20858 0000E891 50                      	push rax
 20859 0000E892 BF08000000              	mov rdi, 8 * 1  ; new rib
 20860 0000E897 E87E260000              	call malloc
 20861 0000E89C 50                      	push rax
 20862 0000E89D BF10000000              	mov rdi, 8 * 2	; extended env
 20863 0000E8A2 E873260000              	call malloc
 20864 0000E8A7 488B7D10                	mov rdi, ENV
 20865 0000E8AB BE00000000              	mov rsi, 0
 20866 0000E8B0 BA01000000              	mov rdx, 1
 20867                                  .L_lambda_opt_env_loop_002d:	; ext_env = env
 20868 0000E8B5 4883FE01                	cmp rsi, 1
 20869 0000E8B9 7410                    	je .L_lambda_opt_env_end_002d
 20870 0000E8BB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20871 0000E8BF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20872 0000E8C3 48FFC6                  	inc rsi
 20873 0000E8C6 48FFC2                  	inc rdx
 20874 0000E8C9 EBEA                    	jmp .L_lambda_opt_env_loop_002d
 20875                                  .L_lambda_opt_env_end_002d:
 20876 0000E8CB 5B                      	pop rbx
 20877 0000E8CC BE00000000              	mov rsi, 0
 20878                                  .L_lambda_opt_params_loop_002d:	; copy params
 20879 0000E8D1 4883FE01                	cmp rsi, 1
 20880 0000E8D5 740E                    	je .L_lambda_opt_params_end_002d
 20881 0000E8D7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20882 0000E8DC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20883 0000E8E0 48FFC6                  	inc rsi
 20884 0000E8E3 EBEC                    	jmp .L_lambda_opt_params_loop_002d
 20885                                  .L_lambda_opt_params_end_002d:
 20886 0000E8E5 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 20887 0000E8E8 4889C3                  	mov rbx, rax
 20888 0000E8EB 58                      	pop rax
 20889 0000E8EC C60005                  	mov byte [rax], T_closure
 20890 0000E8EF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20891 0000E8F3 48C74009[00E90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002d
 20892 0000E8FB E95E030000              	jmp .L_lambda_opt_end_002d
 20893                                  .L_lambda_opt_code_002d:	; lambda-opt body
 20894 0000E900 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20895 0000E906 740D                    	je .L_lambda_opt_arity_check_exact_002d  ;same num_of_args
 20896 0000E908 7F5B                    	jg .L_lambda_opt_arity_check_more_002d  ;greater num_of_args
 20897 0000E90A FF742410                	push qword [rsp + 8 * 2]
 20898 0000E90E 6A01                    	push 1
 20899 0000E910 E9D2250000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 20900                                  .L_lambda_opt_arity_check_exact_002d:
 20901 0000E915 4883EC08                	sub rsp, 8 * 1
 20902 0000E919 4889E7                  	mov rdi, rsp 
 20903                                  	;mov ret
 20904 0000E91C 488B4708                	mov rax, qword [rdi + (8 * 1)]
 20905 0000E920 488907                  	mov qword [rdi], rax
 20906 0000E923 4883C708                	add rdi, 8
 20907                                  	;mov env
 20908 0000E927 488B4708                	mov rax, qword [rdi + (8 * 1)]
 20909 0000E92B 488907                  	mov qword [rdi], rax
 20910 0000E92E 4883C708                	add rdi, 8
 20911                                  	;mov & update COUNT
 20912 0000E932 488B4708                	mov rax, qword [rdi +(8 * 1)]
 20913 0000E936 4889C1                  	mov rcx, rax
 20914 0000E939 48FFC0                  	inc rax
 20915 0000E93C 488907                  	mov qword [rdi], rax
 20916 0000E93F 4883C708                	add rdi, 8
 20917                                  	;LOOP:move params
 20918                                  .L_lambda_opt_stack_shrink_loop_0085:	
 20919 0000E943 4883F900                	cmp rcx, 0
 20920 0000E947 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0085
 20921 0000E949 488B4708                	mov rax, qword [rdi + 8]
 20922 0000E94D 488907                  	mov qword [rdi], rax
 20923 0000E950 4883C708                	add rdi, 8
 20924 0000E954 48FFC9                  	dec rcx
 20925 0000E957 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0085
 20926                                  .L_lambda_opt_stack_shrink_loop_exit_0085:	
 20927 0000E959 48C707[01000000]        	mov qword [rdi], sob_nil
 20928 0000E960 E995000000              	jmp .L_lambda_opt_stack_adjusted_002d
 20929                                  .L_lambda_opt_arity_check_more_002d:	
 20930 0000E965 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 20931 0000E96A 488D4EFF                	lea rcx, [rsi - 1]
 20932 0000E96E 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 20933 0000E973 4989F2                  	mov r10, rsi
 20934 0000E976 49B9-                   	mov r9, sob_nil
 20934 0000E978 [0100000000000000] 
 20935                                  .L_lambda_opt_stack_shrink_loop_0086:	
 20936 0000E980 4883F900                	cmp rcx, 0
 20937 0000E984 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0086
 20938 0000E986 BF11000000              	mov rdi, 1 + 8 + 8
 20939 0000E98B E88A250000              	call malloc
 20940 0000E990 C60021                  	mov byte [rax], T_pair
 20941 0000E993 488B1E                  	mov rbx, qword [rsi]
 20942 0000E996 48895801                	mov SOB_PAIR_CAR(rax), rbx
 20943 0000E99A 4C894809                	mov SOB_PAIR_CDR(rax), r9
 20944 0000E99E 4989C1                  	mov r9, rax
 20945 0000E9A1 4883EE08                	sub rsi, 8 * 1
 20946 0000E9A5 48FFC9                  	dec rcx
 20947 0000E9A8 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0086
 20948                                  .L_lambda_opt_stack_shrink_loop_exit_0086:	
 20949 0000E9AA 4D890A                  	mov qword [r10], r9
 20950 0000E9AD 4983EA08                	sub r10, 8 * 1; the new dest!
 20951 0000E9B1 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
 20952 0000E9B6 B901000000              	mov rcx, 1 
 20953                                  .L_lambda_opt_stack_shrink_loop_0087:	
 20954 0000E9BB 4883F900                	cmp rcx, 0
 20955 0000E9BF 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0087
 20956 0000E9C1 488B06                  	mov rax, qword [rsi]
 20957 0000E9C4 498902                  	mov qword [r10], rax
 20958 0000E9C7 4983EA08                	sub r10, 8 * 1
 20959 0000E9CB 4883EE08                	sub rsi, 8 * 1
 20960 0000E9CF 48FFC9                  	dec rcx
 20961 0000E9D2 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0087
 20962                                  .L_lambda_opt_stack_shrink_loop_exit_0087:	
 20963 0000E9D4 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
 20964 0000E9DB 4983EA08                	sub r10, 8 * 1
 20965 0000E9DF 4883EE08                	sub rsi, 8 * 1
 20966 0000E9E3 488B06                  	mov rax, qword [rsi] ;env
 20967 0000E9E6 498902                  	mov qword [r10], rax
 20968 0000E9E9 4983EA08                	sub r10, 8 * 1
 20969 0000E9ED 4883EE08                	sub rsi, 8 * 1
 20970 0000E9F1 488B06                  	mov rax, qword [rsi] ;ret
 20971 0000E9F4 498902                  	mov qword [r10], rax
 20972 0000E9F7 4C89D4                  	mov rsp, r10
 20973                                  .L_lambda_opt_stack_adjusted_002d:	
 20974 0000E9FA C8000000                	enter 0, 0
 20975 0000E9FE 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 20976 0000EA02 50                      	push rax
 20977 0000EA03 6A01                    	push 1
 20978 0000EA05 488B0425[00000000]      	mov rax, qword [free_var_0]
 20979 0000EA0D 803805                  	cmp byte [rax], T_closure 
 20980 0000EA10 0F85B9340000                    jne L_code_ptr_error
 20981                                  
 20982 0000EA16 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 20983                                  
 20984 0000EA1A 53                              push rbx
 20985                                  
 20986 0000EA1B FF5009                          call SOB_CLOSURE_CODE(rax)
 20987                                  
 20988                                          
 20989 0000EA1E 483D[02000000]                  	cmp rax, sob_boolean_false
 20990                                  
 20991 0000EA24 740F                            	je .L_if_else_00aa
 20992 0000EA26 48B8-                   	mov rax,L_constants + 4
 20992 0000EA28 [0400000000000000] 
 20993                                  
 20994 0000EA30 E9CB000000                      	jmp .L_if_end_00aa
 20995                                  
 20996                                          	.L_if_else_00aa:
 20997 0000EA35 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20998 0000EA39 50                      	push rax
 20999 0000EA3A 6A01                    	push 1
 21000 0000EA3C 488B0425[08000000]      	mov rax, qword [free_var_1]
 21001 0000EA44 803805                  	cmp byte [rax], T_closure 
 21002 0000EA47 0F8582340000                    jne L_code_ptr_error
 21003                                  
 21004 0000EA4D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21005                                  
 21006 0000EA51 53                              push rbx
 21007                                  
 21008 0000EA52 FF5009                          call SOB_CLOSURE_CODE(rax)
 21009                                  
 21010                                          
 21011 0000EA55 483D[02000000]                  	cmp rax, sob_boolean_false
 21012                                  
 21013 0000EA5B 743E                            	je .L_if_else_00ac
 21014 0000EA5D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21015 0000EA61 50                      	push rax
 21016 0000EA62 6A01                    	push 1
 21017 0000EA64 488B0425[88000000]      	mov rax, qword [free_var_17]
 21018 0000EA6C 803805                  	cmp byte [rax], T_closure 
 21019 0000EA6F 0F855A340000                    jne L_code_ptr_error
 21020                                  
 21021 0000EA75 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21022                                  
 21023 0000EA79 53                              push rbx
 21024                                  
 21025 0000EA7A FF5009                          call SOB_CLOSURE_CODE(rax)
 21026                                  
 21027 0000EA7D 50                              	push rax
 21028 0000EA7E 6A01                    	push 1
 21029 0000EA80 488B0425[00000000]      	mov rax, qword [free_var_0]
 21030 0000EA88 803805                  	cmp byte [rax], T_closure 
 21031 0000EA8B 0F853E340000                    jne L_code_ptr_error
 21032                                  
 21033 0000EA91 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21034                                  
 21035 0000EA95 53                              push rbx
 21036                                  
 21037 0000EA96 FF5009                          call SOB_CLOSURE_CODE(rax)
 21038                                  
 21039                                          
 21040 0000EA99 EB0A                            	jmp .L_if_end_00ac
 21041                                  
 21042                                          	.L_if_else_00ac:
 21043 0000EA9B 48B8-                   	mov rax,L_constants + 2
 21043 0000EA9D [0200000000000000] 
 21044                                  
 21045                                          	.L_if_end_00ac:
 21046                                  
 21047 0000EAA5 483D[02000000]                  	cmp rax, sob_boolean_false
 21048                                  
 21049 0000EAAB 7422                            	je .L_if_else_00ab
 21050 0000EAAD 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21051 0000EAB1 50                      	push rax
 21052 0000EAB2 6A01                    	push 1
 21053 0000EAB4 488B0425[80000000]      	mov rax, qword [free_var_16]
 21054 0000EABC 803805                  	cmp byte [rax], T_closure 
 21055 0000EABF 0F850A340000                    jne L_code_ptr_error
 21056                                  
 21057 0000EAC5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21058                                  
 21059 0000EAC9 53                              push rbx
 21060                                  
 21061 0000EACA FF5009                          call SOB_CLOSURE_CODE(rax)
 21062                                  
 21063                                          
 21064 0000EACD EB31                            	jmp .L_if_end_00ab
 21065                                  
 21066                                          	.L_if_else_00ab:
 21067 0000EACF 48B8-                   	mov rax,L_constants + 460
 21067 0000EAD1 [CC01000000000000] 
 21068 0000EAD9 50                      	push rax
 21069 0000EADA 48B8-                   	mov rax,L_constants + 451
 21069 0000EADC [C301000000000000] 
 21070 0000EAE4 50                      	push rax
 21071 0000EAE5 6A02                    	push 2
 21072 0000EAE7 488B0425[30010000]      	mov rax, qword [free_var_38]
 21073 0000EAEF 803805                  	cmp byte [rax], T_closure 
 21074 0000EAF2 0F85D7330000                    jne L_code_ptr_error
 21075                                  
 21076 0000EAF8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21077                                  
 21078 0000EAFC 53                              push rbx
 21079                                  
 21080 0000EAFD FF5009                          call SOB_CLOSURE_CODE(rax)
 21081                                  
 21082                                          
 21083                                          	.L_if_end_00ab:
 21084                                  
 21085                                          	.L_if_end_00aa:
 21086 0000EB00 50                      	push rax
 21087                                  
 21088 0000EB01 6A01                    	push 1
 21089 0000EB03 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21090 0000EB08 E80D240000              	call malloc
 21091 0000EB0D 50                      	push rax
 21092 0000EB0E BF10000000              	mov rdi, 8 * 2	; new rib
 21093 0000EB13 E802240000              	call malloc
 21094 0000EB18 50                      	push rax
 21095 0000EB19 BF18000000              	mov rdi, 8 * 3	; extended env
 21096 0000EB1E E8F7230000              	call malloc
 21097 0000EB23 488B7D10                	mov rdi, ENV
 21098 0000EB27 BE00000000              	mov rsi, 0
 21099 0000EB2C BA01000000              	mov rdx, 1
 21100                                  .L_lambda_simple_env_loop_0122:	; ext_env[i + 1] <-- env[i]
 21101 0000EB31 4883FE02                	cmp rsi, 2
 21102 0000EB35 7410                    	je .L_lambda_simple_env_end_0122
 21103 0000EB37 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21104 0000EB3B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21105 0000EB3F 48FFC6                  	inc rsi
 21106 0000EB42 48FFC2                  	inc rdx
 21107 0000EB45 EBEA                    	jmp .L_lambda_simple_env_loop_0122
 21108                                  .L_lambda_simple_env_end_0122:
 21109 0000EB47 5B                      	pop rbx
 21110 0000EB48 BE00000000              	mov rsi, 0
 21111                                  .L_lambda_simple_params_loop_0122:	; copy params
 21112 0000EB4D 4883FE02                	cmp rsi, 2
 21113 0000EB51 740E                    	je .L_lambda_simple_params_end_0122
 21114 0000EB53 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21115 0000EB58 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21116 0000EB5C 48FFC6                  	inc rsi
 21117 0000EB5F EBEC                    	jmp .L_lambda_simple_params_loop_0122
 21118                                  .L_lambda_simple_params_end_0122:
 21119 0000EB61 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21120 0000EB64 4889C3                  	mov rbx, rax
 21121 0000EB67 58                      	pop rax
 21122 0000EB68 C60005                  	mov byte [rax], T_closure
 21123 0000EB6B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21124 0000EB6F 48C74009[7CEB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0122
 21125 0000EB77 E98B000000              	jmp .L_lambda_simple_end_0122
 21126                                  .L_lambda_simple_code_0122:	; lambda-simple body
 21127 0000EB7C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21128 0000EB82 740B                    	je .L_lambda_simple_arity_check_ok_0122
 21129 0000EB84 FF742410                	push qword [rsp + 8 * 2]
 21130 0000EB88 6A01                    	push 1
 21131 0000EB8A E944230000              	jmp L_error_incorrect_arity_simple
 21132                                  .L_lambda_simple_arity_check_ok_0122:
 21133 0000EB8F C8000000                	enter 0, 0
 21134 0000EB93 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 21135 0000EB97 50                      	push rax
 21136 0000EB98 488B4510                	mov rax, qword [rbp + 8 * 2]
 21137                                  
 21138 0000EB9C 488B00                                            	mov rax, qword[rax + 8 * 0]
 21139                                  
 21140 0000EB9F 488B00                                            	mov rax, qword[rax + 8 * 0]
 21141 0000EBA2 50                      	push rax
 21142                                  
 21143 0000EBA3 6A02                    	push 2
 21144 0000EBA5 488B4510                	mov rax, qword [rbp + 8 * 2]
 21145                                  
 21146 0000EBA9 488B4008                                          	mov rax, qword[rax + 8 * 1]
 21147                                  
 21148 0000EBAD 488B00                                            	mov rax, qword[rax + 8 * 0]
 21149                                  	assert_closure(rax)
    42 0000EBB0 803805              <1>  cmp byte [%1], %2
    43 0000EBB3 0F85553B0000        <1>  jne L_error_incorrect_type
 21150 0000EBB9 50                      	push rax 
 21151 0000EBBA FF7508                  	push qword [rbp + 8]
 21152 0000EBBD FF7500                  	push qword [rbp]
 21153 0000EBC0 4883C308                	add rbx ,8*1
 21154                                  	 .L_fix_stack_label_0155:
 21155 0000EBC4 488B5518                	mov rdx, qword[rbp+8*3]
 21156 0000EBC8 4883C203                	add rdx, 3
 21157 0000EBCC 48C1E203                	shl rdx, 3
 21158 0000EBD0 4889EF                  	mov rdi, rbp
 21159 0000EBD3 4801D7                  	add rdi, rdx
 21160 0000EBD6 4C8B4500                	mov r8, qword[rbp]
 21161 0000EBDA 4889E9                  	mov rcx, rbp
 21162 0000EBDD 4883E908                	sub rcx, 8
 21163                                  	 .L_loop_fix_stuck_0155:
 21164 0000EBE1 4839CC                  	cmp rsp, rcx
 21165 0000EBE4 7710                    ja .L_loop_fix_stuck_end_0155
 21166 0000EBE6 488B19                   	mov rbx, qword[rcx]
 21167 0000EBE9 48891F                  	 mov qword[rdi], rbx
 21168 0000EBEC 4883EF08                	sub rdi, 8
 21169 0000EBF0 4883E908                	sub rcx, 8
 21170 0000EBF4 EBEB                    jmp .L_loop_fix_stuck_0155
 21171                                  	 .L_loop_fix_stuck_end_0155:
 21172 0000EBF6 4883C708                	add rdi, 8
 21173 0000EBFA 4889FC                  	 mov rsp, rdi
 21174 0000EBFD 4C89C5                  	mov rbp, r8
 21175 0000EC00 5D                      	pop rbp
 21176 0000EC01 FFE0                    	jmp rax 
 21177 0000EC03 C9                      	leave
 21178 0000EC04 C21800                  	ret 8 * (2 + 1)
 21179                                  .L_lambda_simple_end_0122:	; new closure is in rax
 21180                                  	assert_closure(rax)
    42 0000EC07 803805              <1>  cmp byte [%1], %2
    43 0000EC0A 0F85FE3A0000        <1>  jne L_error_incorrect_type
 21181 0000EC10 50                      	push rax 
 21182 0000EC11 FF7508                  	push qword [rbp + 8]
 21183 0000EC14 FF7500                  	push qword [rbp]
 21184 0000EC17 4883C308                	add rbx ,8*1
 21185                                  	 .L_fix_stack_label_0154:
 21186 0000EC1B 488B5518                	mov rdx, qword[rbp+8*3]
 21187 0000EC1F 4883C203                	add rdx, 3
 21188 0000EC23 48C1E203                	shl rdx, 3
 21189 0000EC27 4889EF                  	mov rdi, rbp
 21190 0000EC2A 4801D7                  	add rdi, rdx
 21191 0000EC2D 4C8B4500                	mov r8, qword[rbp]
 21192 0000EC31 4889E9                  	mov rcx, rbp
 21193 0000EC34 4883E908                	sub rcx, 8
 21194                                  	 .L_loop_fix_stuck_0154:
 21195 0000EC38 4839CC                  	cmp rsp, rcx
 21196 0000EC3B 7710                    ja .L_loop_fix_stuck_end_0154
 21197 0000EC3D 488B19                   	mov rbx, qword[rcx]
 21198 0000EC40 48891F                  	 mov qword[rdi], rbx
 21199 0000EC43 4883EF08                	sub rdi, 8
 21200 0000EC47 4883E908                	sub rcx, 8
 21201 0000EC4B EBEB                    jmp .L_loop_fix_stuck_0154
 21202                                  	 .L_loop_fix_stuck_end_0154:
 21203 0000EC4D 4883C708                	add rdi, 8
 21204 0000EC51 4889FC                  	 mov rsp, rdi
 21205 0000EC54 4C89C5                  	mov rbp, r8
 21206 0000EC57 5D                      	pop rbp
 21207 0000EC58 FFE0                    	jmp rax 
 21208 0000EC5A C9                      	leave
 21209 0000EC5B C22000                  	ret 8 * (2 + 2)
 21210                                  .L_lambda_opt_end_002d:	; new closure is in rax
 21211 0000EC5E C9                      	leave
 21212 0000EC5F C21800                  	ret 8 * (2 + 1)
 21213                                  .L_lambda_simple_end_0121:	; new closure is in rax
 21214 0000EC62 803805                  	cmp byte [rax], T_closure 
 21215 0000EC65 0F8564320000                    jne L_code_ptr_error
 21216                                  
 21217 0000EC6B 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21218                                  
 21219 0000EC6F 53                              push rbx
 21220                                  
 21221 0000EC70 FF5009                          call SOB_CLOSURE_CODE(rax)
 21222                                  
 21223 0000EC73 48890425[A0010000]              	mov qword [free_var_52], rax
 21224 0000EC7B 48B8-                   	mov rax, sob_void
 21224 0000EC7D [0000000000000000] 
 21225                                  
 21226 0000EC85 4889C7                  	mov rdi, rax
 21227 0000EC88 E89E220000              	call print_sexpr_if_not_void
 21228                                  
 21229 0000EC8D 48B8-                   	mov rax,L_constants + 23
 21229 0000EC8F [1700000000000000] 
 21230 0000EC97 50                      	push rax
 21231 0000EC98 6A01                    	push 1
 21232 0000EC9A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21233 0000EC9F E876220000              	call malloc
 21234 0000ECA4 50                      	push rax
 21235 0000ECA5 BF00000000              	mov rdi, 8 * 0	; new rib
 21236 0000ECAA E86B220000              	call malloc
 21237 0000ECAF 50                      	push rax
 21238 0000ECB0 BF08000000              	mov rdi, 8 * 1	; extended env
 21239 0000ECB5 E860220000              	call malloc
 21240 0000ECBA 488B7D10                	mov rdi, ENV
 21241 0000ECBE BE00000000              	mov rsi, 0
 21242 0000ECC3 BA01000000              	mov rdx, 1
 21243                                  .L_lambda_simple_env_loop_0123:	; ext_env[i + 1] <-- env[i]
 21244 0000ECC8 4883FE00                	cmp rsi, 0
 21245 0000ECCC 7410                    	je .L_lambda_simple_env_end_0123
 21246 0000ECCE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21247 0000ECD2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21248 0000ECD6 48FFC6                  	inc rsi
 21249 0000ECD9 48FFC2                  	inc rdx
 21250 0000ECDC EBEA                    	jmp .L_lambda_simple_env_loop_0123
 21251                                  .L_lambda_simple_env_end_0123:
 21252 0000ECDE 5B                      	pop rbx
 21253 0000ECDF BE00000000              	mov rsi, 0
 21254                                  .L_lambda_simple_params_loop_0123:	; copy params
 21255 0000ECE4 4883FE00                	cmp rsi, 0
 21256 0000ECE8 740E                    	je .L_lambda_simple_params_end_0123
 21257 0000ECEA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21258 0000ECEF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21259 0000ECF3 48FFC6                  	inc rsi
 21260 0000ECF6 EBEC                    	jmp .L_lambda_simple_params_loop_0123
 21261                                  .L_lambda_simple_params_end_0123:
 21262 0000ECF8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21263 0000ECFB 4889C3                  	mov rbx, rax
 21264 0000ECFE 58                      	pop rax
 21265 0000ECFF C60005                  	mov byte [rax], T_closure
 21266 0000ED02 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21267 0000ED06 48C74009[13ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0123
 21268 0000ED0E E92A040000              	jmp .L_lambda_simple_end_0123
 21269                                  .L_lambda_simple_code_0123:	; lambda-simple body
 21270 0000ED13 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21271 0000ED19 740B                    	je .L_lambda_simple_arity_check_ok_0123
 21272 0000ED1B FF742410                	push qword [rsp + 8 * 2]
 21273 0000ED1F 6A01                    	push 1
 21274 0000ED21 E9AD210000              	jmp L_error_incorrect_arity_simple
 21275                                  .L_lambda_simple_arity_check_ok_0123:
 21276 0000ED26 C8000000                	enter 0, 0
 21277 0000ED2A BF08000000              	mov rdi, 8
 21278 0000ED2F E8E6210000              	call malloc
 21279 0000ED34 488B5D20                	mov rbx, PARAM(0)
 21280 0000ED38 488918                  	mov qword [rax], rbx
 21281 0000ED3B 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 21282                                  
 21283 0000ED3F 48B8-                            	mov rax, sob_void
 21283 0000ED41 [0000000000000000] 
 21284                                  
 21285 0000ED49 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21286 0000ED4E E8C7210000              	call malloc
 21287 0000ED53 50                      	push rax
 21288 0000ED54 BF08000000              	mov rdi, 8 * 1	; new rib
 21289 0000ED59 E8BC210000              	call malloc
 21290 0000ED5E 50                      	push rax
 21291 0000ED5F BF10000000              	mov rdi, 8 * 2	; extended env
 21292 0000ED64 E8B1210000              	call malloc
 21293 0000ED69 488B7D10                	mov rdi, ENV
 21294 0000ED6D BE00000000              	mov rsi, 0
 21295 0000ED72 BA01000000              	mov rdx, 1
 21296                                  .L_lambda_simple_env_loop_0124:	; ext_env[i + 1] <-- env[i]
 21297 0000ED77 4883FE01                	cmp rsi, 1
 21298 0000ED7B 7410                    	je .L_lambda_simple_env_end_0124
 21299 0000ED7D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21300 0000ED81 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21301 0000ED85 48FFC6                  	inc rsi
 21302 0000ED88 48FFC2                  	inc rdx
 21303 0000ED8B EBEA                    	jmp .L_lambda_simple_env_loop_0124
 21304                                  .L_lambda_simple_env_end_0124:
 21305 0000ED8D 5B                      	pop rbx
 21306 0000ED8E BE00000000              	mov rsi, 0
 21307                                  .L_lambda_simple_params_loop_0124:	; copy params
 21308 0000ED93 4883FE01                	cmp rsi, 1
 21309 0000ED97 740E                    	je .L_lambda_simple_params_end_0124
 21310 0000ED99 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21311 0000ED9E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21312 0000EDA2 48FFC6                  	inc rsi
 21313 0000EDA5 EBEC                    	jmp .L_lambda_simple_params_loop_0124
 21314                                  .L_lambda_simple_params_end_0124:
 21315 0000EDA7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21316 0000EDAA 4889C3                  	mov rbx, rax
 21317 0000EDAD 58                      	pop rax
 21318 0000EDAE C60005                  	mov byte [rax], T_closure
 21319 0000EDB1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21320 0000EDB5 48C74009[C2ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0124
 21321 0000EDBD E960020000              	jmp .L_lambda_simple_end_0124
 21322                                  .L_lambda_simple_code_0124:	; lambda-simple body
 21323 0000EDC2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21324 0000EDC8 740B                    	je .L_lambda_simple_arity_check_ok_0124
 21325 0000EDCA FF742410                	push qword [rsp + 8 * 2]
 21326 0000EDCE 6A02                    	push 2
 21327 0000EDD0 E9FE200000              	jmp L_error_incorrect_arity_simple
 21328                                  .L_lambda_simple_arity_check_ok_0124:
 21329 0000EDD5 C8000000                	enter 0, 0
 21330 0000EDD9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21331 0000EDDD 50                      	push rax
 21332 0000EDDE 6A01                    	push 1
 21333 0000EDE0 488B0425[00000000]      	mov rax, qword [free_var_0]
 21334 0000EDE8 803805                  	cmp byte [rax], T_closure 
 21335 0000EDEB 0F85DE300000                    jne L_code_ptr_error
 21336                                  
 21337 0000EDF1 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21338                                  
 21339 0000EDF5 53                              push rbx
 21340                                  
 21341 0000EDF6 FF5009                          call SOB_CLOSURE_CODE(rax)
 21342                                  
 21343                                          
 21344 0000EDF9 483D[02000000]                  	cmp rax, sob_boolean_false
 21345                                  
 21346 0000EDFF 7472                            	je .L_if_else_00ad
 21347 0000EE01 48B8-                   	 	mov rax,L_constants + 0
 21347 0000EE03 [0000000000000000] 
 21348 0000EE0B 50                      	push rax
 21349 0000EE0C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21350 0000EE10 50                      	push rax
 21351                                  
 21352 0000EE11 6A02                    	push 2
 21353 0000EE13 488B0425[98010000]      	mov rax, qword [free_var_51]
 21354                                  	assert_closure(rax)
    42 0000EE1B 803805              <1>  cmp byte [%1], %2
    43 0000EE1E 0F85EA380000        <1>  jne L_error_incorrect_type
 21355 0000EE24 50                      	push rax 
 21356 0000EE25 FF7508                  	push qword [rbp + 8]
 21357 0000EE28 FF7500                  	push qword [rbp]
 21358 0000EE2B 4883C308                	add rbx ,8*1
 21359                                  	 .L_fix_stack_label_0157:
 21360 0000EE2F 488B5518                	mov rdx, qword[rbp+8*3]
 21361 0000EE33 4883C203                	add rdx, 3
 21362 0000EE37 48C1E203                	shl rdx, 3
 21363 0000EE3B 4889EF                  	mov rdi, rbp
 21364 0000EE3E 4801D7                  	add rdi, rdx
 21365 0000EE41 4C8B4500                	mov r8, qword[rbp]
 21366 0000EE45 4889E9                  	mov rcx, rbp
 21367 0000EE48 4883E908                	sub rcx, 8
 21368                                  	 .L_loop_fix_stuck_0157:
 21369 0000EE4C 4839CC                  	cmp rsp, rcx
 21370 0000EE4F 7710                    ja .L_loop_fix_stuck_end_0157
 21371 0000EE51 488B19                   	mov rbx, qword[rcx]
 21372 0000EE54 48891F                  	 mov qword[rdi], rbx
 21373 0000EE57 4883EF08                	sub rdi, 8
 21374 0000EE5B 4883E908                	sub rcx, 8
 21375 0000EE5F EBEB                    jmp .L_loop_fix_stuck_0157
 21376                                  	 .L_loop_fix_stuck_end_0157:
 21377 0000EE61 4883C708                	add rdi, 8
 21378 0000EE65 4889FC                  	 mov rsp, rdi
 21379 0000EE68 4C89C5                  	mov rbp, r8
 21380 0000EE6B 5D                      	pop rbp
 21381 0000EE6C FFE0                    	jmp rax 
 21382                                  
 21383 0000EE6E E9AB010000                      	jmp .L_if_end_00ad
 21384                                  
 21385                                          	.L_if_else_00ad:
 21386 0000EE73 48B8-                   	 	mov rax,L_constants + 128
 21386 0000EE75 [8000000000000000] 
 21387 0000EE7D 50                      	push rax
 21388 0000EE7E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21389 0000EE82 50                      	push rax
 21390 0000EE83 6A02                    	push 2
 21391 0000EE85 488B0425[08030000]      	mov rax, qword [free_var_97]
 21392 0000EE8D 803805                  	cmp byte [rax], T_closure 
 21393 0000EE90 0F8539300000                    jne L_code_ptr_error
 21394                                  
 21395 0000EE96 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21396                                  
 21397 0000EE9A 53                              push rbx
 21398                                  
 21399 0000EE9B FF5009                          call SOB_CLOSURE_CODE(rax)
 21400                                  
 21401 0000EE9E 50                              	push rax
 21402 0000EE9F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21403 0000EEA3 50                      	push rax
 21404 0000EEA4 6A01                    	push 1
 21405 0000EEA6 488B0425[88000000]      	mov rax, qword [free_var_17]
 21406 0000EEAE 803805                  	cmp byte [rax], T_closure 
 21407 0000EEB1 0F8518300000                    jne L_code_ptr_error
 21408                                  
 21409 0000EEB7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21410                                  
 21411 0000EEBB 53                              push rbx
 21412                                  
 21413 0000EEBC FF5009                          call SOB_CLOSURE_CODE(rax)
 21414                                  
 21415 0000EEBF 50                              	push rax
 21416 0000EEC0 6A02                    	push 2
 21417 0000EEC2 488B4510                	mov rax, qword [rbp + 8 * 2]
 21418                                  
 21419 0000EEC6 488B00                                            	mov rax, qword[rax + 8 * 0]
 21420                                  
 21421 0000EEC9 488B00                                            	mov rax, qword[rax + 8 * 0]
 21422 0000EECC 488B00                  	mov rax, qword [rax]
 21423 0000EECF 803805                  	cmp byte [rax], T_closure 
 21424 0000EED2 0F85F72F0000                    jne L_code_ptr_error
 21425                                  
 21426 0000EED8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21427                                  
 21428 0000EEDC 53                              push rbx
 21429                                  
 21430 0000EEDD FF5009                          call SOB_CLOSURE_CODE(rax)
 21431                                  
 21432 0000EEE0 50                              	push rax
 21433                                  
 21434 0000EEE1 6A01                    	push 1
 21435 0000EEE3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21436 0000EEE8 E82D200000              	call malloc
 21437 0000EEED 50                      	push rax
 21438 0000EEEE BF10000000              	mov rdi, 8 * 2	; new rib
 21439 0000EEF3 E822200000              	call malloc
 21440 0000EEF8 50                      	push rax
 21441 0000EEF9 BF18000000              	mov rdi, 8 * 3	; extended env
 21442 0000EEFE E817200000              	call malloc
 21443 0000EF03 488B7D10                	mov rdi, ENV
 21444 0000EF07 BE00000000              	mov rsi, 0
 21445 0000EF0C BA01000000              	mov rdx, 1
 21446                                  .L_lambda_simple_env_loop_0125:	; ext_env[i + 1] <-- env[i]
 21447 0000EF11 4883FE02                	cmp rsi, 2
 21448 0000EF15 7410                    	je .L_lambda_simple_env_end_0125
 21449 0000EF17 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21450 0000EF1B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21451 0000EF1F 48FFC6                  	inc rsi
 21452 0000EF22 48FFC2                  	inc rdx
 21453 0000EF25 EBEA                    	jmp .L_lambda_simple_env_loop_0125
 21454                                  .L_lambda_simple_env_end_0125:
 21455 0000EF27 5B                      	pop rbx
 21456 0000EF28 BE00000000              	mov rsi, 0
 21457                                  .L_lambda_simple_params_loop_0125:	; copy params
 21458 0000EF2D 4883FE02                	cmp rsi, 2
 21459 0000EF31 740E                    	je .L_lambda_simple_params_end_0125
 21460 0000EF33 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21461 0000EF38 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21462 0000EF3C 48FFC6                  	inc rsi
 21463 0000EF3F EBEC                    	jmp .L_lambda_simple_params_loop_0125
 21464                                  .L_lambda_simple_params_end_0125:
 21465 0000EF41 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21466 0000EF44 4889C3                  	mov rbx, rax
 21467 0000EF47 58                      	pop rax
 21468 0000EF48 C60005                  	mov byte [rax], T_closure
 21469 0000EF4B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21470 0000EF4F 48C74009[59EF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0125
 21471 0000EF57 EB72                    	jmp .L_lambda_simple_end_0125
 21472                                  .L_lambda_simple_code_0125:	; lambda-simple body
 21473 0000EF59 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21474 0000EF5F 740B                    	je .L_lambda_simple_arity_check_ok_0125
 21475 0000EF61 FF742410                	push qword [rsp + 8 * 2]
 21476 0000EF65 6A01                    	push 1
 21477 0000EF67 E9671F0000              	jmp L_error_incorrect_arity_simple
 21478                                  .L_lambda_simple_arity_check_ok_0125:
 21479 0000EF6C C8000000                	enter 0, 0
 21480 0000EF70 488B4510                	mov rax, qword [rbp + 8 * 2]
 21481                                  
 21482 0000EF74 488B00                                            	mov rax, qword[rax + 8 * 0]
 21483                                  
 21484 0000EF77 488B00                                            	mov rax, qword[rax + 8 * 0]
 21485 0000EF7A 50                      	push rax
 21486 0000EF7B 6A01                    	push 1
 21487 0000EF7D 488B0425[80000000]      	mov rax, qword [free_var_16]
 21488 0000EF85 803805                  	cmp byte [rax], T_closure 
 21489 0000EF88 0F85412F0000                    jne L_code_ptr_error
 21490                                  
 21491 0000EF8E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21492                                  
 21493 0000EF92 53                              push rbx
 21494                                  
 21495 0000EF93 FF5009                          call SOB_CLOSURE_CODE(rax)
 21496                                  
 21497 0000EF96 50                              	push rax
 21498 0000EF97 488B4510                	mov rax, qword [rbp + 8 * 2]
 21499                                  
 21500 0000EF9B 488B00                                            	mov rax, qword[rax + 8 * 0]
 21501                                  
 21502 0000EF9E 488B4008                                          	mov rax, qword[rax + 8 * 1]
 21503 0000EFA2 50                      	push rax
 21504 0000EFA3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21505 0000EFA7 50                      	push rax
 21506 0000EFA8 6A03                    	push 3
 21507 0000EFAA 488B0425[88010000]      	mov rax, qword [free_var_49]
 21508 0000EFB2 803805                  	cmp byte [rax], T_closure 
 21509 0000EFB5 0F85142F0000                    jne L_code_ptr_error
 21510                                  
 21511 0000EFBB 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21512                                  
 21513 0000EFBF 53                              push rbx
 21514                                  
 21515 0000EFC0 FF5009                          call SOB_CLOSURE_CODE(rax)
 21516                                  
 21517                                          
 21518 0000EFC3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21519 0000EFC7 C9                      	leave
 21520 0000EFC8 C21800                  	ret 8 * (2 + 1)
 21521                                  .L_lambda_simple_end_0125:	; new closure is in rax
 21522                                  	assert_closure(rax)
    42 0000EFCB 803805              <1>  cmp byte [%1], %2
    43 0000EFCE 0F853A370000        <1>  jne L_error_incorrect_type
 21523 0000EFD4 50                      	push rax 
 21524 0000EFD5 FF7508                  	push qword [rbp + 8]
 21525 0000EFD8 FF7500                  	push qword [rbp]
 21526 0000EFDB 4883C308                	add rbx ,8*1
 21527                                  	 .L_fix_stack_label_0156:
 21528 0000EFDF 488B5518                	mov rdx, qword[rbp+8*3]
 21529 0000EFE3 4883C203                	add rdx, 3
 21530 0000EFE7 48C1E203                	shl rdx, 3
 21531 0000EFEB 4889EF                  	mov rdi, rbp
 21532 0000EFEE 4801D7                  	add rdi, rdx
 21533 0000EFF1 4C8B4500                	mov r8, qword[rbp]
 21534 0000EFF5 4889E9                  	mov rcx, rbp
 21535 0000EFF8 4883E908                	sub rcx, 8
 21536                                  	 .L_loop_fix_stuck_0156:
 21537 0000EFFC 4839CC                  	cmp rsp, rcx
 21538 0000EFFF 7710                    ja .L_loop_fix_stuck_end_0156
 21539 0000F001 488B19                   	mov rbx, qword[rcx]
 21540 0000F004 48891F                  	 mov qword[rdi], rbx
 21541 0000F007 4883EF08                	sub rdi, 8
 21542 0000F00B 4883E908                	sub rcx, 8
 21543 0000F00F EBEB                    jmp .L_loop_fix_stuck_0156
 21544                                  	 .L_loop_fix_stuck_end_0156:
 21545 0000F011 4883C708                	add rdi, 8
 21546 0000F015 4889FC                  	 mov rsp, rdi
 21547 0000F018 4C89C5                  	mov rbp, r8
 21548 0000F01B 5D                      	pop rbp
 21549 0000F01C FFE0                    	jmp rax 
 21550                                  
 21551                                          	.L_if_end_00ad:
 21552 0000F01E C9                      	leave
 21553 0000F01F C22000                  	ret 8 * (2 + 2)
 21554                                  .L_lambda_simple_end_0124:	; new closure is in rax
 21555 0000F022 50                      	push rax
 21556 0000F023 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21557 0000F027 8F00                    	pop qword [rax]
 21558 0000F029 48B8-                   	mov rax, sob_void
 21558 0000F02B [0000000000000000] 
 21559                                  
 21560 0000F033 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21561 0000F038 E8DD1E0000              	call malloc
 21562 0000F03D 50                      	push rax
 21563 0000F03E BF08000000              	mov rdi, 8 * 1	; new rib
 21564 0000F043 E8D21E0000              	call malloc
 21565 0000F048 50                      	push rax
 21566 0000F049 BF10000000              	mov rdi, 8 * 2	; extended env
 21567 0000F04E E8C71E0000              	call malloc
 21568 0000F053 488B7D10                	mov rdi, ENV
 21569 0000F057 BE00000000              	mov rsi, 0
 21570 0000F05C BA01000000              	mov rdx, 1
 21571                                  .L_lambda_simple_env_loop_0126:	; ext_env[i + 1] <-- env[i]
 21572 0000F061 4883FE01                	cmp rsi, 1
 21573 0000F065 7410                    	je .L_lambda_simple_env_end_0126
 21574 0000F067 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21575 0000F06B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21576 0000F06F 48FFC6                  	inc rsi
 21577 0000F072 48FFC2                  	inc rdx
 21578 0000F075 EBEA                    	jmp .L_lambda_simple_env_loop_0126
 21579                                  .L_lambda_simple_env_end_0126:
 21580 0000F077 5B                      	pop rbx
 21581 0000F078 BE00000000              	mov rsi, 0
 21582                                  .L_lambda_simple_params_loop_0126:	; copy params
 21583 0000F07D 4883FE01                	cmp rsi, 1
 21584 0000F081 740E                    	je .L_lambda_simple_params_end_0126
 21585 0000F083 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21586 0000F088 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21587 0000F08C 48FFC6                  	inc rsi
 21588 0000F08F EBEC                    	jmp .L_lambda_simple_params_loop_0126
 21589                                  .L_lambda_simple_params_end_0126:
 21590 0000F091 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21591 0000F094 4889C3                  	mov rbx, rax
 21592 0000F097 58                      	pop rax
 21593 0000F098 C60005                  	mov byte [rax], T_closure
 21594 0000F09B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21595 0000F09F 48C74009[ACF00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0126
 21596 0000F0A7 E98D000000              	jmp .L_lambda_simple_end_0126
 21597                                  .L_lambda_simple_code_0126:	; lambda-simple body
 21598 0000F0AC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21599 0000F0B2 740B                    	je .L_lambda_simple_arity_check_ok_0126
 21600 0000F0B4 FF742410                	push qword [rsp + 8 * 2]
 21601 0000F0B8 6A01                    	push 1
 21602 0000F0BA E9141E0000              	jmp L_error_incorrect_arity_simple
 21603                                  .L_lambda_simple_arity_check_ok_0126:
 21604 0000F0BF C8000000                	enter 0, 0
 21605 0000F0C3 48B8-                   	 	mov rax,L_constants + 32
 21605 0000F0C5 [2000000000000000] 
 21606 0000F0CD 50                      	push rax
 21607 0000F0CE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21608 0000F0D2 50                      	push rax
 21609                                  
 21610 0000F0D3 6A02                    	push 2
 21611 0000F0D5 488B4510                	mov rax, qword [rbp + 8 * 2]
 21612                                  
 21613 0000F0D9 488B00                                            	mov rax, qword[rax + 8 * 0]
 21614                                  
 21615 0000F0DC 488B00                                            	mov rax, qword[rax + 8 * 0]
 21616 0000F0DF 488B00                  	mov rax, qword [rax]
 21617                                  	assert_closure(rax)
    42 0000F0E2 803805              <1>  cmp byte [%1], %2
    43 0000F0E5 0F8523360000        <1>  jne L_error_incorrect_type
 21618 0000F0EB 50                      	push rax 
 21619 0000F0EC FF7508                  	push qword [rbp + 8]
 21620 0000F0EF FF7500                  	push qword [rbp]
 21621 0000F0F2 4883C308                	add rbx ,8*1
 21622                                  	 .L_fix_stack_label_0158:
 21623 0000F0F6 488B5518                	mov rdx, qword[rbp+8*3]
 21624 0000F0FA 4883C203                	add rdx, 3
 21625 0000F0FE 48C1E203                	shl rdx, 3
 21626 0000F102 4889EF                  	mov rdi, rbp
 21627 0000F105 4801D7                  	add rdi, rdx
 21628 0000F108 4C8B4500                	mov r8, qword[rbp]
 21629 0000F10C 4889E9                  	mov rcx, rbp
 21630 0000F10F 4883E908                	sub rcx, 8
 21631                                  	 .L_loop_fix_stuck_0158:
 21632 0000F113 4839CC                  	cmp rsp, rcx
 21633 0000F116 7710                    ja .L_loop_fix_stuck_end_0158
 21634 0000F118 488B19                   	mov rbx, qword[rcx]
 21635 0000F11B 48891F                  	 mov qword[rdi], rbx
 21636 0000F11E 4883EF08                	sub rdi, 8
 21637 0000F122 4883E908                	sub rcx, 8
 21638 0000F126 EBEB                    jmp .L_loop_fix_stuck_0158
 21639                                  	 .L_loop_fix_stuck_end_0158:
 21640 0000F128 4883C708                	add rdi, 8
 21641 0000F12C 4889FC                  	 mov rsp, rdi
 21642 0000F12F 4C89C5                  	mov rbp, r8
 21643 0000F132 5D                      	pop rbp
 21644 0000F133 FFE0                    	jmp rax 
 21645 0000F135 C9                      	leave
 21646 0000F136 C21800                  	ret 8 * (2 + 1)
 21647                                  .L_lambda_simple_end_0126:	; new closure is in rax
 21648 0000F139 C9                      	leave
 21649 0000F13A C21800                  	ret 8 * (2 + 1)
 21650                                  .L_lambda_simple_end_0123:	; new closure is in rax
 21651 0000F13D 803805                  	cmp byte [rax], T_closure 
 21652 0000F140 0F85892D0000                    jne L_code_ptr_error
 21653                                  
 21654 0000F146 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21655                                  
 21656 0000F14A 53                              push rbx
 21657                                  
 21658 0000F14B FF5009                          call SOB_CLOSURE_CODE(rax)
 21659                                  
 21660 0000F14E 48890425[38040000]              	mov qword [free_var_135], rax
 21661 0000F156 48B8-                   	mov rax, sob_void
 21661 0000F158 [0000000000000000] 
 21662                                  
 21663 0000F160 4889C7                  	mov rdi, rax
 21664 0000F163 E8C31D0000              	call print_sexpr_if_not_void
 21665                                  
 21666 0000F168 48B8-                   	mov rax,L_constants + 23
 21666 0000F16A [1700000000000000] 
 21667 0000F172 50                      	push rax
 21668 0000F173 6A01                    	push 1
 21669 0000F175 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21670 0000F17A E89B1D0000              	call malloc
 21671 0000F17F 50                      	push rax
 21672 0000F180 BF00000000              	mov rdi, 8 * 0	; new rib
 21673 0000F185 E8901D0000              	call malloc
 21674 0000F18A 50                      	push rax
 21675 0000F18B BF08000000              	mov rdi, 8 * 1	; extended env
 21676 0000F190 E8851D0000              	call malloc
 21677 0000F195 488B7D10                	mov rdi, ENV
 21678 0000F199 BE00000000              	mov rsi, 0
 21679 0000F19E BA01000000              	mov rdx, 1
 21680                                  .L_lambda_simple_env_loop_0127:	; ext_env[i + 1] <-- env[i]
 21681 0000F1A3 4883FE00                	cmp rsi, 0
 21682 0000F1A7 7410                    	je .L_lambda_simple_env_end_0127
 21683 0000F1A9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21684 0000F1AD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21685 0000F1B1 48FFC6                  	inc rsi
 21686 0000F1B4 48FFC2                  	inc rdx
 21687 0000F1B7 EBEA                    	jmp .L_lambda_simple_env_loop_0127
 21688                                  .L_lambda_simple_env_end_0127:
 21689 0000F1B9 5B                      	pop rbx
 21690 0000F1BA BE00000000              	mov rsi, 0
 21691                                  .L_lambda_simple_params_loop_0127:	; copy params
 21692 0000F1BF 4883FE00                	cmp rsi, 0
 21693 0000F1C3 740E                    	je .L_lambda_simple_params_end_0127
 21694 0000F1C5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21695 0000F1CA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21696 0000F1CE 48FFC6                  	inc rsi
 21697 0000F1D1 EBEC                    	jmp .L_lambda_simple_params_loop_0127
 21698                                  .L_lambda_simple_params_end_0127:
 21699 0000F1D3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21700 0000F1D6 4889C3                  	mov rbx, rax
 21701 0000F1D9 58                      	pop rax
 21702 0000F1DA C60005                  	mov byte [rax], T_closure
 21703 0000F1DD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21704 0000F1E1 48C74009[EEF10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0127
 21705 0000F1E9 E92A040000              	jmp .L_lambda_simple_end_0127
 21706                                  .L_lambda_simple_code_0127:	; lambda-simple body
 21707 0000F1EE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21708 0000F1F4 740B                    	je .L_lambda_simple_arity_check_ok_0127
 21709 0000F1F6 FF742410                	push qword [rsp + 8 * 2]
 21710 0000F1FA 6A01                    	push 1
 21711 0000F1FC E9D21C0000              	jmp L_error_incorrect_arity_simple
 21712                                  .L_lambda_simple_arity_check_ok_0127:
 21713 0000F201 C8000000                	enter 0, 0
 21714 0000F205 BF08000000              	mov rdi, 8
 21715 0000F20A E80B1D0000              	call malloc
 21716 0000F20F 488B5D20                	mov rbx, PARAM(0)
 21717 0000F213 488918                  	mov qword [rax], rbx
 21718 0000F216 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 21719                                  
 21720 0000F21A 48B8-                            	mov rax, sob_void
 21720 0000F21C [0000000000000000] 
 21721                                  
 21722 0000F224 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21723 0000F229 E8EC1C0000              	call malloc
 21724 0000F22E 50                      	push rax
 21725 0000F22F BF08000000              	mov rdi, 8 * 1	; new rib
 21726 0000F234 E8E11C0000              	call malloc
 21727 0000F239 50                      	push rax
 21728 0000F23A BF10000000              	mov rdi, 8 * 2	; extended env
 21729 0000F23F E8D61C0000              	call malloc
 21730 0000F244 488B7D10                	mov rdi, ENV
 21731 0000F248 BE00000000              	mov rsi, 0
 21732 0000F24D BA01000000              	mov rdx, 1
 21733                                  .L_lambda_simple_env_loop_0128:	; ext_env[i + 1] <-- env[i]
 21734 0000F252 4883FE01                	cmp rsi, 1
 21735 0000F256 7410                    	je .L_lambda_simple_env_end_0128
 21736 0000F258 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21737 0000F25C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21738 0000F260 48FFC6                  	inc rsi
 21739 0000F263 48FFC2                  	inc rdx
 21740 0000F266 EBEA                    	jmp .L_lambda_simple_env_loop_0128
 21741                                  .L_lambda_simple_env_end_0128:
 21742 0000F268 5B                      	pop rbx
 21743 0000F269 BE00000000              	mov rsi, 0
 21744                                  .L_lambda_simple_params_loop_0128:	; copy params
 21745 0000F26E 4883FE01                	cmp rsi, 1
 21746 0000F272 740E                    	je .L_lambda_simple_params_end_0128
 21747 0000F274 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21748 0000F279 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21749 0000F27D 48FFC6                  	inc rsi
 21750 0000F280 EBEC                    	jmp .L_lambda_simple_params_loop_0128
 21751                                  .L_lambda_simple_params_end_0128:
 21752 0000F282 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21753 0000F285 4889C3                  	mov rbx, rax
 21754 0000F288 58                      	pop rax
 21755 0000F289 C60005                  	mov byte [rax], T_closure
 21756 0000F28C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21757 0000F290 48C74009[9DF20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0128
 21758 0000F298 E960020000              	jmp .L_lambda_simple_end_0128
 21759                                  .L_lambda_simple_code_0128:	; lambda-simple body
 21760 0000F29D 48837C241002            	cmp qword [rsp + 8 * 2], 2
 21761 0000F2A3 740B                    	je .L_lambda_simple_arity_check_ok_0128
 21762 0000F2A5 FF742410                	push qword [rsp + 8 * 2]
 21763 0000F2A9 6A02                    	push 2
 21764 0000F2AB E9231C0000              	jmp L_error_incorrect_arity_simple
 21765                                  .L_lambda_simple_arity_check_ok_0128:
 21766 0000F2B0 C8000000                	enter 0, 0
 21767 0000F2B4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21768 0000F2B8 50                      	push rax
 21769 0000F2B9 6A01                    	push 1
 21770 0000F2BB 488B0425[00000000]      	mov rax, qword [free_var_0]
 21771 0000F2C3 803805                  	cmp byte [rax], T_closure 
 21772 0000F2C6 0F85032C0000                    jne L_code_ptr_error
 21773                                  
 21774 0000F2CC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21775                                  
 21776 0000F2D0 53                              push rbx
 21777                                  
 21778 0000F2D1 FF5009                          call SOB_CLOSURE_CODE(rax)
 21779                                  
 21780                                          
 21781 0000F2D4 483D[02000000]                  	cmp rax, sob_boolean_false
 21782                                  
 21783 0000F2DA 7472                            	je .L_if_else_00ae
 21784 0000F2DC 48B8-                   	 	mov rax,L_constants + 4
 21784 0000F2DE [0400000000000000] 
 21785 0000F2E6 50                      	push rax
 21786 0000F2E7 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21787 0000F2EB 50                      	push rax
 21788                                  
 21789 0000F2EC 6A02                    	push 2
 21790 0000F2EE 488B0425[A0010000]      	mov rax, qword [free_var_52]
 21791                                  	assert_closure(rax)
    42 0000F2F6 803805              <1>  cmp byte [%1], %2
    43 0000F2F9 0F850F340000        <1>  jne L_error_incorrect_type
 21792 0000F2FF 50                      	push rax 
 21793 0000F300 FF7508                  	push qword [rbp + 8]
 21794 0000F303 FF7500                  	push qword [rbp]
 21795 0000F306 4883C308                	add rbx ,8*1
 21796                                  	 .L_fix_stack_label_015a:
 21797 0000F30A 488B5518                	mov rdx, qword[rbp+8*3]
 21798 0000F30E 4883C203                	add rdx, 3
 21799 0000F312 48C1E203                	shl rdx, 3
 21800 0000F316 4889EF                  	mov rdi, rbp
 21801 0000F319 4801D7                  	add rdi, rdx
 21802 0000F31C 4C8B4500                	mov r8, qword[rbp]
 21803 0000F320 4889E9                  	mov rcx, rbp
 21804 0000F323 4883E908                	sub rcx, 8
 21805                                  	 .L_loop_fix_stuck_015a:
 21806 0000F327 4839CC                  	cmp rsp, rcx
 21807 0000F32A 7710                    ja .L_loop_fix_stuck_end_015a
 21808 0000F32C 488B19                   	mov rbx, qword[rcx]
 21809 0000F32F 48891F                  	 mov qword[rdi], rbx
 21810 0000F332 4883EF08                	sub rdi, 8
 21811 0000F336 4883E908                	sub rcx, 8
 21812 0000F33A EBEB                    jmp .L_loop_fix_stuck_015a
 21813                                  	 .L_loop_fix_stuck_end_015a:
 21814 0000F33C 4883C708                	add rdi, 8
 21815 0000F340 4889FC                  	 mov rsp, rdi
 21816 0000F343 4C89C5                  	mov rbp, r8
 21817 0000F346 5D                      	pop rbp
 21818 0000F347 FFE0                    	jmp rax 
 21819                                  
 21820 0000F349 E9AB010000                      	jmp .L_if_end_00ae
 21821                                  
 21822                                          	.L_if_else_00ae:
 21823 0000F34E 48B8-                   	 	mov rax,L_constants + 128
 21823 0000F350 [8000000000000000] 
 21824 0000F358 50                      	push rax
 21825 0000F359 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21826 0000F35D 50                      	push rax
 21827 0000F35E 6A02                    	push 2
 21828 0000F360 488B0425[08030000]      	mov rax, qword [free_var_97]
 21829 0000F368 803805                  	cmp byte [rax], T_closure 
 21830 0000F36B 0F855E2B0000                    jne L_code_ptr_error
 21831                                  
 21832 0000F371 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21833                                  
 21834 0000F375 53                              push rbx
 21835                                  
 21836 0000F376 FF5009                          call SOB_CLOSURE_CODE(rax)
 21837                                  
 21838 0000F379 50                              	push rax
 21839 0000F37A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21840 0000F37E 50                      	push rax
 21841 0000F37F 6A01                    	push 1
 21842 0000F381 488B0425[88000000]      	mov rax, qword [free_var_17]
 21843 0000F389 803805                  	cmp byte [rax], T_closure 
 21844 0000F38C 0F853D2B0000                    jne L_code_ptr_error
 21845                                  
 21846 0000F392 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21847                                  
 21848 0000F396 53                              push rbx
 21849                                  
 21850 0000F397 FF5009                          call SOB_CLOSURE_CODE(rax)
 21851                                  
 21852 0000F39A 50                              	push rax
 21853 0000F39B 6A02                    	push 2
 21854 0000F39D 488B4510                	mov rax, qword [rbp + 8 * 2]
 21855                                  
 21856 0000F3A1 488B00                                            	mov rax, qword[rax + 8 * 0]
 21857                                  
 21858 0000F3A4 488B00                                            	mov rax, qword[rax + 8 * 0]
 21859 0000F3A7 488B00                  	mov rax, qword [rax]
 21860 0000F3AA 803805                  	cmp byte [rax], T_closure 
 21861 0000F3AD 0F851C2B0000                    jne L_code_ptr_error
 21862                                  
 21863 0000F3B3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21864                                  
 21865 0000F3B7 53                              push rbx
 21866                                  
 21867 0000F3B8 FF5009                          call SOB_CLOSURE_CODE(rax)
 21868                                  
 21869 0000F3BB 50                              	push rax
 21870                                  
 21871 0000F3BC 6A01                    	push 1
 21872 0000F3BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21873 0000F3C3 E8521B0000              	call malloc
 21874 0000F3C8 50                      	push rax
 21875 0000F3C9 BF10000000              	mov rdi, 8 * 2	; new rib
 21876 0000F3CE E8471B0000              	call malloc
 21877 0000F3D3 50                      	push rax
 21878 0000F3D4 BF18000000              	mov rdi, 8 * 3	; extended env
 21879 0000F3D9 E83C1B0000              	call malloc
 21880 0000F3DE 488B7D10                	mov rdi, ENV
 21881 0000F3E2 BE00000000              	mov rsi, 0
 21882 0000F3E7 BA01000000              	mov rdx, 1
 21883                                  .L_lambda_simple_env_loop_0129:	; ext_env[i + 1] <-- env[i]
 21884 0000F3EC 4883FE02                	cmp rsi, 2
 21885 0000F3F0 7410                    	je .L_lambda_simple_env_end_0129
 21886 0000F3F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21887 0000F3F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21888 0000F3FA 48FFC6                  	inc rsi
 21889 0000F3FD 48FFC2                  	inc rdx
 21890 0000F400 EBEA                    	jmp .L_lambda_simple_env_loop_0129
 21891                                  .L_lambda_simple_env_end_0129:
 21892 0000F402 5B                      	pop rbx
 21893 0000F403 BE00000000              	mov rsi, 0
 21894                                  .L_lambda_simple_params_loop_0129:	; copy params
 21895 0000F408 4883FE02                	cmp rsi, 2
 21896 0000F40C 740E                    	je .L_lambda_simple_params_end_0129
 21897 0000F40E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21898 0000F413 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21899 0000F417 48FFC6                  	inc rsi
 21900 0000F41A EBEC                    	jmp .L_lambda_simple_params_loop_0129
 21901                                  .L_lambda_simple_params_end_0129:
 21902 0000F41C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21903 0000F41F 4889C3                  	mov rbx, rax
 21904 0000F422 58                      	pop rax
 21905 0000F423 C60005                  	mov byte [rax], T_closure
 21906 0000F426 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21907 0000F42A 48C74009[34F40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0129
 21908 0000F432 EB72                    	jmp .L_lambda_simple_end_0129
 21909                                  .L_lambda_simple_code_0129:	; lambda-simple body
 21910 0000F434 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21911 0000F43A 740B                    	je .L_lambda_simple_arity_check_ok_0129
 21912 0000F43C FF742410                	push qword [rsp + 8 * 2]
 21913 0000F440 6A01                    	push 1
 21914 0000F442 E98C1A0000              	jmp L_error_incorrect_arity_simple
 21915                                  .L_lambda_simple_arity_check_ok_0129:
 21916 0000F447 C8000000                	enter 0, 0
 21917 0000F44B 488B4510                	mov rax, qword [rbp + 8 * 2]
 21918                                  
 21919 0000F44F 488B00                                            	mov rax, qword[rax + 8 * 0]
 21920                                  
 21921 0000F452 488B00                                            	mov rax, qword[rax + 8 * 0]
 21922 0000F455 50                      	push rax
 21923 0000F456 6A01                    	push 1
 21924 0000F458 488B0425[80000000]      	mov rax, qword [free_var_16]
 21925 0000F460 803805                  	cmp byte [rax], T_closure 
 21926 0000F463 0F85662A0000                    jne L_code_ptr_error
 21927                                  
 21928 0000F469 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21929                                  
 21930 0000F46D 53                              push rbx
 21931                                  
 21932 0000F46E FF5009                          call SOB_CLOSURE_CODE(rax)
 21933                                  
 21934 0000F471 50                              	push rax
 21935 0000F472 488B4510                	mov rax, qword [rbp + 8 * 2]
 21936                                  
 21937 0000F476 488B00                                            	mov rax, qword[rax + 8 * 0]
 21938                                  
 21939 0000F479 488B4008                                          	mov rax, qword[rax + 8 * 1]
 21940 0000F47D 50                      	push rax
 21941 0000F47E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21942 0000F482 50                      	push rax
 21943 0000F483 6A03                    	push 3
 21944 0000F485 488B0425[90010000]      	mov rax, qword [free_var_50]
 21945 0000F48D 803805                  	cmp byte [rax], T_closure 
 21946 0000F490 0F85392A0000                    jne L_code_ptr_error
 21947                                  
 21948 0000F496 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 21949                                  
 21950 0000F49A 53                              push rbx
 21951                                  
 21952 0000F49B FF5009                          call SOB_CLOSURE_CODE(rax)
 21953                                  
 21954                                          
 21955 0000F49E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21956 0000F4A2 C9                      	leave
 21957 0000F4A3 C21800                  	ret 8 * (2 + 1)
 21958                                  .L_lambda_simple_end_0129:	; new closure is in rax
 21959                                  	assert_closure(rax)
    42 0000F4A6 803805              <1>  cmp byte [%1], %2
    43 0000F4A9 0F855F320000        <1>  jne L_error_incorrect_type
 21960 0000F4AF 50                      	push rax 
 21961 0000F4B0 FF7508                  	push qword [rbp + 8]
 21962 0000F4B3 FF7500                  	push qword [rbp]
 21963 0000F4B6 4883C308                	add rbx ,8*1
 21964                                  	 .L_fix_stack_label_0159:
 21965 0000F4BA 488B5518                	mov rdx, qword[rbp+8*3]
 21966 0000F4BE 4883C203                	add rdx, 3
 21967 0000F4C2 48C1E203                	shl rdx, 3
 21968 0000F4C6 4889EF                  	mov rdi, rbp
 21969 0000F4C9 4801D7                  	add rdi, rdx
 21970 0000F4CC 4C8B4500                	mov r8, qword[rbp]
 21971 0000F4D0 4889E9                  	mov rcx, rbp
 21972 0000F4D3 4883E908                	sub rcx, 8
 21973                                  	 .L_loop_fix_stuck_0159:
 21974 0000F4D7 4839CC                  	cmp rsp, rcx
 21975 0000F4DA 7710                    ja .L_loop_fix_stuck_end_0159
 21976 0000F4DC 488B19                   	mov rbx, qword[rcx]
 21977 0000F4DF 48891F                  	 mov qword[rdi], rbx
 21978 0000F4E2 4883EF08                	sub rdi, 8
 21979 0000F4E6 4883E908                	sub rcx, 8
 21980 0000F4EA EBEB                    jmp .L_loop_fix_stuck_0159
 21981                                  	 .L_loop_fix_stuck_end_0159:
 21982 0000F4EC 4883C708                	add rdi, 8
 21983 0000F4F0 4889FC                  	 mov rsp, rdi
 21984 0000F4F3 4C89C5                  	mov rbp, r8
 21985 0000F4F6 5D                      	pop rbp
 21986 0000F4F7 FFE0                    	jmp rax 
 21987                                  
 21988                                          	.L_if_end_00ae:
 21989 0000F4F9 C9                      	leave
 21990 0000F4FA C22000                  	ret 8 * (2 + 2)
 21991                                  .L_lambda_simple_end_0128:	; new closure is in rax
 21992 0000F4FD 50                      	push rax
 21993 0000F4FE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21994 0000F502 8F00                    	pop qword [rax]
 21995 0000F504 48B8-                   	mov rax, sob_void
 21995 0000F506 [0000000000000000] 
 21996                                  
 21997 0000F50E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21998 0000F513 E8021A0000              	call malloc
 21999 0000F518 50                      	push rax
 22000 0000F519 BF08000000              	mov rdi, 8 * 1	; new rib
 22001 0000F51E E8F7190000              	call malloc
 22002 0000F523 50                      	push rax
 22003 0000F524 BF10000000              	mov rdi, 8 * 2	; extended env
 22004 0000F529 E8EC190000              	call malloc
 22005 0000F52E 488B7D10                	mov rdi, ENV
 22006 0000F532 BE00000000              	mov rsi, 0
 22007 0000F537 BA01000000              	mov rdx, 1
 22008                                  .L_lambda_simple_env_loop_012a:	; ext_env[i + 1] <-- env[i]
 22009 0000F53C 4883FE01                	cmp rsi, 1
 22010 0000F540 7410                    	je .L_lambda_simple_env_end_012a
 22011 0000F542 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22012 0000F546 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22013 0000F54A 48FFC6                  	inc rsi
 22014 0000F54D 48FFC2                  	inc rdx
 22015 0000F550 EBEA                    	jmp .L_lambda_simple_env_loop_012a
 22016                                  .L_lambda_simple_env_end_012a:
 22017 0000F552 5B                      	pop rbx
 22018 0000F553 BE00000000              	mov rsi, 0
 22019                                  .L_lambda_simple_params_loop_012a:	; copy params
 22020 0000F558 4883FE01                	cmp rsi, 1
 22021 0000F55C 740E                    	je .L_lambda_simple_params_end_012a
 22022 0000F55E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22023 0000F563 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22024 0000F567 48FFC6                  	inc rsi
 22025 0000F56A EBEC                    	jmp .L_lambda_simple_params_loop_012a
 22026                                  .L_lambda_simple_params_end_012a:
 22027 0000F56C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22028 0000F56F 4889C3                  	mov rbx, rax
 22029 0000F572 58                      	pop rax
 22030 0000F573 C60005                  	mov byte [rax], T_closure
 22031 0000F576 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22032 0000F57A 48C74009[87F50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012a
 22033 0000F582 E98D000000              	jmp .L_lambda_simple_end_012a
 22034                                  .L_lambda_simple_code_012a:	; lambda-simple body
 22035 0000F587 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22036 0000F58D 740B                    	je .L_lambda_simple_arity_check_ok_012a
 22037 0000F58F FF742410                	push qword [rsp + 8 * 2]
 22038 0000F593 6A01                    	push 1
 22039 0000F595 E939190000              	jmp L_error_incorrect_arity_simple
 22040                                  .L_lambda_simple_arity_check_ok_012a:
 22041 0000F59A C8000000                	enter 0, 0
 22042 0000F59E 48B8-                   	 	mov rax,L_constants + 32
 22042 0000F5A0 [2000000000000000] 
 22043 0000F5A8 50                      	push rax
 22044 0000F5A9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22045 0000F5AD 50                      	push rax
 22046                                  
 22047 0000F5AE 6A02                    	push 2
 22048 0000F5B0 488B4510                	mov rax, qword [rbp + 8 * 2]
 22049                                  
 22050 0000F5B4 488B00                                            	mov rax, qword[rax + 8 * 0]
 22051                                  
 22052 0000F5B7 488B00                                            	mov rax, qword[rax + 8 * 0]
 22053 0000F5BA 488B00                  	mov rax, qword [rax]
 22054                                  	assert_closure(rax)
    42 0000F5BD 803805              <1>  cmp byte [%1], %2
    43 0000F5C0 0F8548310000        <1>  jne L_error_incorrect_type
 22055 0000F5C6 50                      	push rax 
 22056 0000F5C7 FF7508                  	push qword [rbp + 8]
 22057 0000F5CA FF7500                  	push qword [rbp]
 22058 0000F5CD 4883C308                	add rbx ,8*1
 22059                                  	 .L_fix_stack_label_015b:
 22060 0000F5D1 488B5518                	mov rdx, qword[rbp+8*3]
 22061 0000F5D5 4883C203                	add rdx, 3
 22062 0000F5D9 48C1E203                	shl rdx, 3
 22063 0000F5DD 4889EF                  	mov rdi, rbp
 22064 0000F5E0 4801D7                  	add rdi, rdx
 22065 0000F5E3 4C8B4500                	mov r8, qword[rbp]
 22066 0000F5E7 4889E9                  	mov rcx, rbp
 22067 0000F5EA 4883E908                	sub rcx, 8
 22068                                  	 .L_loop_fix_stuck_015b:
 22069 0000F5EE 4839CC                  	cmp rsp, rcx
 22070 0000F5F1 7710                    ja .L_loop_fix_stuck_end_015b
 22071 0000F5F3 488B19                   	mov rbx, qword[rcx]
 22072 0000F5F6 48891F                  	 mov qword[rdi], rbx
 22073 0000F5F9 4883EF08                	sub rdi, 8
 22074 0000F5FD 4883E908                	sub rcx, 8
 22075 0000F601 EBEB                    jmp .L_loop_fix_stuck_015b
 22076                                  	 .L_loop_fix_stuck_end_015b:
 22077 0000F603 4883C708                	add rdi, 8
 22078 0000F607 4889FC                  	 mov rsp, rdi
 22079 0000F60A 4C89C5                  	mov rbp, r8
 22080 0000F60D 5D                      	pop rbp
 22081 0000F60E FFE0                    	jmp rax 
 22082 0000F610 C9                      	leave
 22083 0000F611 C21800                  	ret 8 * (2 + 1)
 22084                                  .L_lambda_simple_end_012a:	; new closure is in rax
 22085 0000F614 C9                      	leave
 22086 0000F615 C21800                  	ret 8 * (2 + 1)
 22087                                  .L_lambda_simple_end_0127:	; new closure is in rax
 22088 0000F618 803805                  	cmp byte [rax], T_closure 
 22089 0000F61B 0F85AE280000                    jne L_code_ptr_error
 22090                                  
 22091 0000F621 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22092                                  
 22093 0000F625 53                              push rbx
 22094                                  
 22095 0000F626 FF5009                          call SOB_CLOSURE_CODE(rax)
 22096                                  
 22097 0000F629 48890425[D0030000]              	mov qword [free_var_122], rax
 22098 0000F631 48B8-                   	mov rax, sob_void
 22098 0000F633 [0000000000000000] 
 22099                                  
 22100 0000F63B 4889C7                  	mov rdi, rax
 22101 0000F63E E8E8180000              	call print_sexpr_if_not_void
 22102                                  
 22103 0000F643 BF11000000              	mov rdi, (1 + 8 + 8)   ;closure
 22104 0000F648 E8CD180000              	call malloc
 22105 0000F64D 50                      	push rax
 22106 0000F64E BF00000000              	mov rdi, 8 * 0  ; new rib
 22107 0000F653 E8C2180000              	call malloc
 22108 0000F658 50                      	push rax
 22109 0000F659 BF08000000              	mov rdi, 8 * 1	; extended env
 22110 0000F65E E8B7180000              	call malloc
 22111 0000F663 488B7D10                	mov rdi, ENV
 22112 0000F667 BE00000000              	mov rsi, 0
 22113 0000F66C BA01000000              	mov rdx, 1
 22114                                  .L_lambda_opt_env_loop_002e:	; ext_env = env
 22115 0000F671 4883FE00                	cmp rsi, 0
 22116 0000F675 7410                    	je .L_lambda_opt_env_end_002e
 22117 0000F677 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22118 0000F67B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22119 0000F67F 48FFC6                  	inc rsi
 22120 0000F682 48FFC2                  	inc rdx
 22121 0000F685 EBEA                    	jmp .L_lambda_opt_env_loop_002e
 22122                                  .L_lambda_opt_env_end_002e:
 22123 0000F687 5B                      	pop rbx
 22124 0000F688 BE00000000              	mov rsi, 0
 22125                                  .L_lambda_opt_params_loop_002e:	; copy params
 22126 0000F68D 4883FE00                	cmp rsi, 0
 22127 0000F691 740E                    	je .L_lambda_opt_params_end_002e
 22128 0000F693 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22129 0000F698 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22130 0000F69C 48FFC6                  	inc rsi
 22131 0000F69F EBEC                    	jmp .L_lambda_opt_params_loop_002e
 22132                                  .L_lambda_opt_params_end_002e:
 22133 0000F6A1 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 22134 0000F6A4 4889C3                  	mov rbx, rax
 22135 0000F6A7 58                      	pop rax
 22136 0000F6A8 C60005                  	mov byte [rax], T_closure
 22137 0000F6AB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22138 0000F6AF 48C74009[BCF60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002e
 22139 0000F6B7 E963010000              	jmp .L_lambda_opt_end_002e
 22140                                  .L_lambda_opt_code_002e:	; lambda-opt body
 22141 0000F6BC 48837C241000            	cmp qword [rsp + 8 * 2], 0
 22142 0000F6C2 740D                    	je .L_lambda_opt_arity_check_exact_002e  ;same num_of_args
 22143 0000F6C4 7F5B                    	jg .L_lambda_opt_arity_check_more_002e  ;greater num_of_args
 22144 0000F6C6 FF742410                	push qword [rsp + 8 * 2]
 22145 0000F6CA 6A00                    	push 0
 22146 0000F6CC E916180000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 22147                                  .L_lambda_opt_arity_check_exact_002e:
 22148 0000F6D1 4883EC08                	sub rsp, 8 * 1
 22149 0000F6D5 4889E7                  	mov rdi, rsp 
 22150                                  	;mov ret
 22151 0000F6D8 488B4708                	mov rax, qword [rdi + (8 * 1)]
 22152 0000F6DC 488907                  	mov qword [rdi], rax
 22153 0000F6DF 4883C708                	add rdi, 8
 22154                                  	;mov env
 22155 0000F6E3 488B4708                	mov rax, qword [rdi + (8 * 1)]
 22156 0000F6E7 488907                  	mov qword [rdi], rax
 22157 0000F6EA 4883C708                	add rdi, 8
 22158                                  	;mov & update COUNT
 22159 0000F6EE 488B4708                	mov rax, qword [rdi +(8 * 1)]
 22160 0000F6F2 4889C1                  	mov rcx, rax
 22161 0000F6F5 48FFC0                  	inc rax
 22162 0000F6F8 488907                  	mov qword [rdi], rax
 22163 0000F6FB 4883C708                	add rdi, 8
 22164                                  	;LOOP:move params
 22165                                  .L_lambda_opt_stack_shrink_loop_0088:	
 22166 0000F6FF 4883F900                	cmp rcx, 0
 22167 0000F703 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0088
 22168 0000F705 488B4708                	mov rax, qword [rdi + 8]
 22169 0000F709 488907                  	mov qword [rdi], rax
 22170 0000F70C 4883C708                	add rdi, 8
 22171 0000F710 48FFC9                  	dec rcx
 22172 0000F713 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0088
 22173                                  .L_lambda_opt_stack_shrink_loop_exit_0088:	
 22174 0000F715 48C707[01000000]        	mov qword [rdi], sob_nil
 22175 0000F71C E994000000              	jmp .L_lambda_opt_stack_adjusted_002e
 22176                                  .L_lambda_opt_arity_check_more_002e:	
 22177 0000F721 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 22178 0000F726 488D0E                  	lea rcx, [rsi - 0]
 22179 0000F729 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 22180 0000F72E 4989F2                  	mov r10, rsi
 22181 0000F731 49B9-                   	mov r9, sob_nil
 22181 0000F733 [0100000000000000] 
 22182                                  .L_lambda_opt_stack_shrink_loop_0089:	
 22183 0000F73B 4883F900                	cmp rcx, 0
 22184 0000F73F 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0089
 22185 0000F741 BF11000000              	mov rdi, 1 + 8 + 8
 22186 0000F746 E8CF170000              	call malloc
 22187 0000F74B C60021                  	mov byte [rax], T_pair
 22188 0000F74E 488B1E                  	mov rbx, qword [rsi]
 22189 0000F751 48895801                	mov SOB_PAIR_CAR(rax), rbx
 22190 0000F755 4C894809                	mov SOB_PAIR_CDR(rax), r9
 22191 0000F759 4989C1                  	mov r9, rax
 22192 0000F75C 4883EE08                	sub rsi, 8 * 1
 22193 0000F760 48FFC9                  	dec rcx
 22194 0000F763 EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0089
 22195                                  .L_lambda_opt_stack_shrink_loop_exit_0089:	
 22196 0000F765 4D890A                  	mov qword [r10], r9
 22197 0000F768 4983EA08                	sub r10, 8 * 1; the new dest!
 22198 0000F76C 488D742410              	lea rsi, [rsp + (8 * (0 + 2))];the new src
 22199 0000F771 B900000000              	mov rcx, 0 
 22200                                  .L_lambda_opt_stack_shrink_loop_008a:	
 22201 0000F776 4883F900                	cmp rcx, 0
 22202 0000F77A 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_008a
 22203 0000F77C 488B06                  	mov rax, qword [rsi]
 22204 0000F77F 498902                  	mov qword [r10], rax
 22205 0000F782 4983EA08                	sub r10, 8 * 1
 22206 0000F786 4883EE08                	sub rsi, 8 * 1
 22207 0000F78A 48FFC9                  	dec rcx
 22208 0000F78D EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_008a
 22209                                  .L_lambda_opt_stack_shrink_loop_exit_008a:	
 22210 0000F78F 49C70201000000          	mov qword [r10], 1 + 0; 1=opt
 22211 0000F796 4983EA08                	sub r10, 8 * 1
 22212 0000F79A 4883EE08                	sub rsi, 8 * 1
 22213 0000F79E 488B06                  	mov rax, qword [rsi] ;env
 22214 0000F7A1 498902                  	mov qword [r10], rax
 22215 0000F7A4 4983EA08                	sub r10, 8 * 1
 22216 0000F7A8 4883EE08                	sub rsi, 8 * 1
 22217 0000F7AC 488B06                  	mov rax, qword [rsi] ;ret
 22218 0000F7AF 498902                  	mov qword [r10], rax
 22219 0000F7B2 4C89D4                  	mov rsp, r10
 22220                                  .L_lambda_opt_stack_adjusted_002e:	
 22221 0000F7B5 C8000000                	enter 0, 0
 22222 0000F7B9 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 22223 0000F7BD 50                      	push rax
 22224                                  
 22225 0000F7BE 6A01                    	push 1
 22226 0000F7C0 488B0425[38040000]      	mov rax, qword [free_var_135]
 22227                                  	assert_closure(rax)
    42 0000F7C8 803805              <1>  cmp byte [%1], %2
    43 0000F7CB 0F853D2F0000        <1>  jne L_error_incorrect_type
 22228 0000F7D1 50                      	push rax 
 22229 0000F7D2 FF7508                  	push qword [rbp + 8]
 22230 0000F7D5 FF7500                  	push qword [rbp]
 22231 0000F7D8 4883C308                	add rbx ,8*1
 22232                                  	 .L_fix_stack_label_015c:
 22233 0000F7DC 488B5518                	mov rdx, qword[rbp+8*3]
 22234 0000F7E0 4883C203                	add rdx, 3
 22235 0000F7E4 48C1E203                	shl rdx, 3
 22236 0000F7E8 4889EF                  	mov rdi, rbp
 22237 0000F7EB 4801D7                  	add rdi, rdx
 22238 0000F7EE 4C8B4500                	mov r8, qword[rbp]
 22239 0000F7F2 4889E9                  	mov rcx, rbp
 22240 0000F7F5 4883E908                	sub rcx, 8
 22241                                  	 .L_loop_fix_stuck_015c:
 22242 0000F7F9 4839CC                  	cmp rsp, rcx
 22243 0000F7FC 7710                    ja .L_loop_fix_stuck_end_015c
 22244 0000F7FE 488B19                   	mov rbx, qword[rcx]
 22245 0000F801 48891F                  	 mov qword[rdi], rbx
 22246 0000F804 4883EF08                	sub rdi, 8
 22247 0000F808 4883E908                	sub rcx, 8
 22248 0000F80C EBEB                    jmp .L_loop_fix_stuck_015c
 22249                                  	 .L_loop_fix_stuck_end_015c:
 22250 0000F80E 4883C708                	add rdi, 8
 22251 0000F812 4889FC                  	 mov rsp, rdi
 22252 0000F815 4C89C5                  	mov rbp, r8
 22253 0000F818 5D                      	pop rbp
 22254 0000F819 FFE0                    	jmp rax 
 22255 0000F81B C9                      	leave
 22256 0000F81C C21800                  	ret 8 * (2 + 1)
 22257                                  .L_lambda_opt_end_002e:	; new closure is in rax
 22258 0000F81F 48890425[40040000]      	mov qword [free_var_136], rax
 22259 0000F827 48B8-                   	mov rax, sob_void
 22259 0000F829 [0000000000000000] 
 22260                                  
 22261 0000F831 4889C7                  	mov rdi, rax
 22262 0000F834 E8F2160000              	call print_sexpr_if_not_void
 22263                                  
 22264 0000F839 48B8-                   	mov rax,L_constants + 23
 22264 0000F83B [1700000000000000] 
 22265 0000F843 50                      	push rax
 22266 0000F844 6A01                    	push 1
 22267 0000F846 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22268 0000F84B E8CA160000              	call malloc
 22269 0000F850 50                      	push rax
 22270 0000F851 BF00000000              	mov rdi, 8 * 0	; new rib
 22271 0000F856 E8BF160000              	call malloc
 22272 0000F85B 50                      	push rax
 22273 0000F85C BF08000000              	mov rdi, 8 * 1	; extended env
 22274 0000F861 E8B4160000              	call malloc
 22275 0000F866 488B7D10                	mov rdi, ENV
 22276 0000F86A BE00000000              	mov rsi, 0
 22277 0000F86F BA01000000              	mov rdx, 1
 22278                                  .L_lambda_simple_env_loop_012b:	; ext_env[i + 1] <-- env[i]
 22279 0000F874 4883FE00                	cmp rsi, 0
 22280 0000F878 7410                    	je .L_lambda_simple_env_end_012b
 22281 0000F87A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22282 0000F87E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22283 0000F882 48FFC6                  	inc rsi
 22284 0000F885 48FFC2                  	inc rdx
 22285 0000F888 EBEA                    	jmp .L_lambda_simple_env_loop_012b
 22286                                  .L_lambda_simple_env_end_012b:
 22287 0000F88A 5B                      	pop rbx
 22288 0000F88B BE00000000              	mov rsi, 0
 22289                                  .L_lambda_simple_params_loop_012b:	; copy params
 22290 0000F890 4883FE00                	cmp rsi, 0
 22291 0000F894 740E                    	je .L_lambda_simple_params_end_012b
 22292 0000F896 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22293 0000F89B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22294 0000F89F 48FFC6                  	inc rsi
 22295 0000F8A2 EBEC                    	jmp .L_lambda_simple_params_loop_012b
 22296                                  .L_lambda_simple_params_end_012b:
 22297 0000F8A4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22298 0000F8A7 4889C3                  	mov rbx, rax
 22299 0000F8AA 58                      	pop rax
 22300 0000F8AB C60005                  	mov byte [rax], T_closure
 22301 0000F8AE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22302 0000F8B2 48C74009[BFF80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012b
 22303 0000F8BA E91D030000              	jmp .L_lambda_simple_end_012b
 22304                                  .L_lambda_simple_code_012b:	; lambda-simple body
 22305 0000F8BF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22306 0000F8C5 740B                    	je .L_lambda_simple_arity_check_ok_012b
 22307 0000F8C7 FF742410                	push qword [rsp + 8 * 2]
 22308 0000F8CB 6A01                    	push 1
 22309 0000F8CD E901160000              	jmp L_error_incorrect_arity_simple
 22310                                  .L_lambda_simple_arity_check_ok_012b:
 22311 0000F8D2 C8000000                	enter 0, 0
 22312 0000F8D6 BF08000000              	mov rdi, 8
 22313 0000F8DB E83A160000              	call malloc
 22314 0000F8E0 488B5D20                	mov rbx, PARAM(0)
 22315 0000F8E4 488918                  	mov qword [rax], rbx
 22316 0000F8E7 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 22317                                  
 22318 0000F8EB 48B8-                            	mov rax, sob_void
 22318 0000F8ED [0000000000000000] 
 22319                                  
 22320 0000F8F5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22321 0000F8FA E81B160000              	call malloc
 22322 0000F8FF 50                      	push rax
 22323 0000F900 BF08000000              	mov rdi, 8 * 1	; new rib
 22324 0000F905 E810160000              	call malloc
 22325 0000F90A 50                      	push rax
 22326 0000F90B BF10000000              	mov rdi, 8 * 2	; extended env
 22327 0000F910 E805160000              	call malloc
 22328 0000F915 488B7D10                	mov rdi, ENV
 22329 0000F919 BE00000000              	mov rsi, 0
 22330 0000F91E BA01000000              	mov rdx, 1
 22331                                  .L_lambda_simple_env_loop_012c:	; ext_env[i + 1] <-- env[i]
 22332 0000F923 4883FE01                	cmp rsi, 1
 22333 0000F927 7410                    	je .L_lambda_simple_env_end_012c
 22334 0000F929 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22335 0000F92D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22336 0000F931 48FFC6                  	inc rsi
 22337 0000F934 48FFC2                  	inc rdx
 22338 0000F937 EBEA                    	jmp .L_lambda_simple_env_loop_012c
 22339                                  .L_lambda_simple_env_end_012c:
 22340 0000F939 5B                      	pop rbx
 22341 0000F93A BE00000000              	mov rsi, 0
 22342                                  .L_lambda_simple_params_loop_012c:	; copy params
 22343 0000F93F 4883FE01                	cmp rsi, 1
 22344 0000F943 740E                    	je .L_lambda_simple_params_end_012c
 22345 0000F945 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22346 0000F94A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22347 0000F94E 48FFC6                  	inc rsi
 22348 0000F951 EBEC                    	jmp .L_lambda_simple_params_loop_012c
 22349                                  .L_lambda_simple_params_end_012c:
 22350 0000F953 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22351 0000F956 4889C3                  	mov rbx, rax
 22352 0000F959 58                      	pop rax
 22353 0000F95A C60005                  	mov byte [rax], T_closure
 22354 0000F95D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22355 0000F961 48C74009[6EF90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012c
 22356 0000F969 E932010000              	jmp .L_lambda_simple_end_012c
 22357                                  .L_lambda_simple_code_012c:	; lambda-simple body
 22358 0000F96E 48837C241003            	cmp qword [rsp + 8 * 2], 3
 22359 0000F974 740B                    	je .L_lambda_simple_arity_check_ok_012c
 22360 0000F976 FF742410                	push qword [rsp + 8 * 2]
 22361 0000F97A 6A03                    	push 3
 22362 0000F97C E952150000              	jmp L_error_incorrect_arity_simple
 22363                                  .L_lambda_simple_arity_check_ok_012c:
 22364 0000F981 C8000000                	enter 0, 0
 22365 0000F985 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 22366 0000F989 50                      	push rax
 22367 0000F98A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22368 0000F98E 50                      	push rax
 22369 0000F98F 6A02                    	push 2
 22370 0000F991 488B0425[30030000]      	mov rax, qword [free_var_102]
 22371 0000F999 803805                  	cmp byte [rax], T_closure 
 22372 0000F99C 0F852D250000                    jne L_code_ptr_error
 22373                                  
 22374 0000F9A2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22375                                  
 22376 0000F9A6 53                              push rbx
 22377                                  
 22378 0000F9A7 FF5009                          call SOB_CLOSURE_CODE(rax)
 22379                                  
 22380                                          
 22381 0000F9AA 483D[02000000]                  	cmp rax, sob_boolean_false
 22382                                  
 22383 0000F9B0 0F84DC000000                    	je .L_if_else_00af
 22384 0000F9B6 488B4530                	 	mov rax ,qword[rbp + 8 * (4 + 2)]
 22385 0000F9BA 50                      	push rax
 22386 0000F9BB 48B8-                   	mov rax,L_constants + 128
 22386 0000F9BD [8000000000000000] 
 22387 0000F9C5 50                      	push rax
 22388 0000F9C6 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22389 0000F9CA 50                      	push rax
 22390 0000F9CB 6A02                    	push 2
 22391 0000F9CD 488B0425[08030000]      	mov rax, qword [free_var_97]
 22392 0000F9D5 803805                  	cmp byte [rax], T_closure 
 22393 0000F9D8 0F85F1240000                    jne L_code_ptr_error
 22394                                  
 22395 0000F9DE 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22396                                  
 22397 0000F9E2 53                              push rbx
 22398                                  
 22399 0000F9E3 FF5009                          call SOB_CLOSURE_CODE(rax)
 22400                                  
 22401 0000F9E6 50                              	push rax
 22402 0000F9E7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22403 0000F9EB 50                      	push rax
 22404 0000F9EC 6A03                    	push 3
 22405 0000F9EE 488B4510                	mov rax, qword [rbp + 8 * 2]
 22406                                  
 22407 0000F9F2 488B00                                            	mov rax, qword[rax + 8 * 0]
 22408                                  
 22409 0000F9F5 488B00                                            	mov rax, qword[rax + 8 * 0]
 22410 0000F9F8 488B00                  	mov rax, qword [rax]
 22411 0000F9FB 803805                  	cmp byte [rax], T_closure 
 22412 0000F9FE 0F85CB240000                    jne L_code_ptr_error
 22413                                  
 22414 0000FA04 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22415                                  
 22416 0000FA08 53                              push rbx
 22417                                  
 22418 0000FA09 FF5009                          call SOB_CLOSURE_CODE(rax)
 22419                                  
 22420 0000FA0C 50                              	push rax
 22421 0000FA0D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22422 0000FA11 50                      	push rax
 22423 0000FA12 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22424 0000FA16 50                      	push rax
 22425 0000FA17 6A02                    	push 2
 22426 0000FA19 488B0425[78010000]      	mov rax, qword [free_var_47]
 22427 0000FA21 803805                  	cmp byte [rax], T_closure 
 22428 0000FA24 0F85A5240000                    jne L_code_ptr_error
 22429                                  
 22430 0000FA2A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22431                                  
 22432 0000FA2E 53                              push rbx
 22433                                  
 22434 0000FA2F FF5009                          call SOB_CLOSURE_CODE(rax)
 22435                                  
 22436 0000FA32 50                              	push rax
 22437                                  
 22438 0000FA33 6A02                    	push 2
 22439 0000FA35 488B0425[68000000]      	mov rax, qword [free_var_13]
 22440                                  	assert_closure(rax)
    42 0000FA3D 803805              <1>  cmp byte [%1], %2
    43 0000FA40 0F85C82C0000        <1>  jne L_error_incorrect_type
 22441 0000FA46 50                      	push rax 
 22442 0000FA47 FF7508                  	push qword [rbp + 8]
 22443 0000FA4A FF7500                  	push qword [rbp]
 22444 0000FA4D 4883C308                	add rbx ,8*1
 22445                                  	 .L_fix_stack_label_015d:
 22446 0000FA51 488B5518                	mov rdx, qword[rbp+8*3]
 22447 0000FA55 4883C203                	add rdx, 3
 22448 0000FA59 48C1E203                	shl rdx, 3
 22449 0000FA5D 4889EF                  	mov rdi, rbp
 22450 0000FA60 4801D7                  	add rdi, rdx
 22451 0000FA63 4C8B4500                	mov r8, qword[rbp]
 22452 0000FA67 4889E9                  	mov rcx, rbp
 22453 0000FA6A 4883E908                	sub rcx, 8
 22454                                  	 .L_loop_fix_stuck_015d:
 22455 0000FA6E 4839CC                  	cmp rsp, rcx
 22456 0000FA71 7710                    ja .L_loop_fix_stuck_end_015d
 22457 0000FA73 488B19                   	mov rbx, qword[rcx]
 22458 0000FA76 48891F                  	 mov qword[rdi], rbx
 22459 0000FA79 4883EF08                	sub rdi, 8
 22460 0000FA7D 4883E908                	sub rcx, 8
 22461 0000FA81 EBEB                    jmp .L_loop_fix_stuck_015d
 22462                                  	 .L_loop_fix_stuck_end_015d:
 22463 0000FA83 4883C708                	add rdi, 8
 22464 0000FA87 4889FC                  	 mov rsp, rdi
 22465 0000FA8A 4C89C5                  	mov rbp, r8
 22466 0000FA8D 5D                      	pop rbp
 22467 0000FA8E FFE0                    	jmp rax 
 22468                                  
 22469 0000FA90 EB0A                            	jmp .L_if_end_00af
 22470                                  
 22471                                          	.L_if_else_00af:
 22472 0000FA92 48B8-                   	mov rax,L_constants + 1
 22472 0000FA94 [0100000000000000] 
 22473                                  
 22474                                          	.L_if_end_00af:
 22475 0000FA9C C9                      	leave
 22476 0000FA9D C22800                  	ret 8 * (2 + 3)
 22477                                  .L_lambda_simple_end_012c:	; new closure is in rax
 22478 0000FAA0 50                      	push rax
 22479 0000FAA1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22480 0000FAA5 8F00                    	pop qword [rax]
 22481 0000FAA7 48B8-                   	mov rax, sob_void
 22481 0000FAA9 [0000000000000000] 
 22482                                  
 22483 0000FAB1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22484 0000FAB6 E85F140000              	call malloc
 22485 0000FABB 50                      	push rax
 22486 0000FABC BF08000000              	mov rdi, 8 * 1	; new rib
 22487 0000FAC1 E854140000              	call malloc
 22488 0000FAC6 50                      	push rax
 22489 0000FAC7 BF10000000              	mov rdi, 8 * 2	; extended env
 22490 0000FACC E849140000              	call malloc
 22491 0000FAD1 488B7D10                	mov rdi, ENV
 22492 0000FAD5 BE00000000              	mov rsi, 0
 22493 0000FADA BA01000000              	mov rdx, 1
 22494                                  .L_lambda_simple_env_loop_012d:	; ext_env[i + 1] <-- env[i]
 22495 0000FADF 4883FE01                	cmp rsi, 1
 22496 0000FAE3 7410                    	je .L_lambda_simple_env_end_012d
 22497 0000FAE5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22498 0000FAE9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22499 0000FAED 48FFC6                  	inc rsi
 22500 0000FAF0 48FFC2                  	inc rdx
 22501 0000FAF3 EBEA                    	jmp .L_lambda_simple_env_loop_012d
 22502                                  .L_lambda_simple_env_end_012d:
 22503 0000FAF5 5B                      	pop rbx
 22504 0000FAF6 BE00000000              	mov rsi, 0
 22505                                  .L_lambda_simple_params_loop_012d:	; copy params
 22506 0000FAFB 4883FE01                	cmp rsi, 1
 22507 0000FAFF 740E                    	je .L_lambda_simple_params_end_012d
 22508 0000FB01 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22509 0000FB06 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22510 0000FB0A 48FFC6                  	inc rsi
 22511 0000FB0D EBEC                    	jmp .L_lambda_simple_params_loop_012d
 22512                                  .L_lambda_simple_params_end_012d:
 22513 0000FB0F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22514 0000FB12 4889C3                  	mov rbx, rax
 22515 0000FB15 58                      	pop rax
 22516 0000FB16 C60005                  	mov byte [rax], T_closure
 22517 0000FB19 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22518 0000FB1D 48C74009[2AFB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012d
 22519 0000FB25 E9AE000000              	jmp .L_lambda_simple_end_012d
 22520                                  .L_lambda_simple_code_012d:	; lambda-simple body
 22521 0000FB2A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22522 0000FB30 740B                    	je .L_lambda_simple_arity_check_ok_012d
 22523 0000FB32 FF742410                	push qword [rsp + 8 * 2]
 22524 0000FB36 6A01                    	push 1
 22525 0000FB38 E996130000              	jmp L_error_incorrect_arity_simple
 22526                                  .L_lambda_simple_arity_check_ok_012d:
 22527 0000FB3D C8000000                	enter 0, 0
 22528 0000FB41 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 22529 0000FB45 50                      	push rax
 22530 0000FB46 6A01                    	push 1
 22531 0000FB48 488B0425[90000000]      	mov rax, qword [free_var_18]
 22532 0000FB50 803805                  	cmp byte [rax], T_closure 
 22533 0000FB53 0F8576230000                    jne L_code_ptr_error
 22534                                  
 22535 0000FB59 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22536                                  
 22537 0000FB5D 53                              push rbx
 22538                                  
 22539 0000FB5E FF5009                          call SOB_CLOSURE_CODE(rax)
 22540                                  
 22541 0000FB61 50                              	push rax
 22542 0000FB62 48B8-                   	mov rax,L_constants + 32
 22542 0000FB64 [2000000000000000] 
 22543 0000FB6C 50                      	push rax
 22544 0000FB6D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22545 0000FB71 50                      	push rax
 22546                                  
 22547 0000FB72 6A03                    	push 3
 22548 0000FB74 488B4510                	mov rax, qword [rbp + 8 * 2]
 22549                                  
 22550 0000FB78 488B00                                            	mov rax, qword[rax + 8 * 0]
 22551                                  
 22552 0000FB7B 488B00                                            	mov rax, qword[rax + 8 * 0]
 22553 0000FB7E 488B00                  	mov rax, qword [rax]
 22554                                  	assert_closure(rax)
    42 0000FB81 803805              <1>  cmp byte [%1], %2
    43 0000FB84 0F85842B0000        <1>  jne L_error_incorrect_type
 22555 0000FB8A 50                      	push rax 
 22556 0000FB8B FF7508                  	push qword [rbp + 8]
 22557 0000FB8E FF7500                  	push qword [rbp]
 22558 0000FB91 4883C308                	add rbx ,8*1
 22559                                  	 .L_fix_stack_label_015e:
 22560 0000FB95 488B5518                	mov rdx, qword[rbp+8*3]
 22561 0000FB99 4883C203                	add rdx, 3
 22562 0000FB9D 48C1E203                	shl rdx, 3
 22563 0000FBA1 4889EF                  	mov rdi, rbp
 22564 0000FBA4 4801D7                  	add rdi, rdx
 22565 0000FBA7 4C8B4500                	mov r8, qword[rbp]
 22566 0000FBAB 4889E9                  	mov rcx, rbp
 22567 0000FBAE 4883E908                	sub rcx, 8
 22568                                  	 .L_loop_fix_stuck_015e:
 22569 0000FBB2 4839CC                  	cmp rsp, rcx
 22570 0000FBB5 7710                    ja .L_loop_fix_stuck_end_015e
 22571 0000FBB7 488B19                   	mov rbx, qword[rcx]
 22572 0000FBBA 48891F                  	 mov qword[rdi], rbx
 22573 0000FBBD 4883EF08                	sub rdi, 8
 22574 0000FBC1 4883E908                	sub rcx, 8
 22575 0000FBC5 EBEB                    jmp .L_loop_fix_stuck_015e
 22576                                  	 .L_loop_fix_stuck_end_015e:
 22577 0000FBC7 4883C708                	add rdi, 8
 22578 0000FBCB 4889FC                  	 mov rsp, rdi
 22579 0000FBCE 4C89C5                  	mov rbp, r8
 22580 0000FBD1 5D                      	pop rbp
 22581 0000FBD2 FFE0                    	jmp rax 
 22582 0000FBD4 C9                      	leave
 22583 0000FBD5 C21800                  	ret 8 * (2 + 1)
 22584                                  .L_lambda_simple_end_012d:	; new closure is in rax
 22585 0000FBD8 C9                      	leave
 22586 0000FBD9 C21800                  	ret 8 * (2 + 1)
 22587                                  .L_lambda_simple_end_012b:	; new closure is in rax
 22588 0000FBDC 803805                  	cmp byte [rax], T_closure 
 22589 0000FBDF 0F85EA220000                    jne L_code_ptr_error
 22590                                  
 22591 0000FBE5 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22592                                  
 22593 0000FBE9 53                              push rbx
 22594                                  
 22595 0000FBEA FF5009                          call SOB_CLOSURE_CODE(rax)
 22596                                  
 22597 0000FBED 48890425[D8030000]              	mov qword [free_var_123], rax
 22598 0000FBF5 48B8-                   	mov rax, sob_void
 22598 0000FBF7 [0000000000000000] 
 22599                                  
 22600 0000FBFF 4889C7                  	mov rdi, rax
 22601 0000FC02 E824130000              	call print_sexpr_if_not_void
 22602                                  
 22603 0000FC07 48B8-                   	mov rax,L_constants + 23
 22603 0000FC09 [1700000000000000] 
 22604 0000FC11 50                      	push rax
 22605 0000FC12 6A01                    	push 1
 22606 0000FC14 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22607 0000FC19 E8FC120000              	call malloc
 22608 0000FC1E 50                      	push rax
 22609 0000FC1F BF00000000              	mov rdi, 8 * 0	; new rib
 22610 0000FC24 E8F1120000              	call malloc
 22611 0000FC29 50                      	push rax
 22612 0000FC2A BF08000000              	mov rdi, 8 * 1	; extended env
 22613 0000FC2F E8E6120000              	call malloc
 22614 0000FC34 488B7D10                	mov rdi, ENV
 22615 0000FC38 BE00000000              	mov rsi, 0
 22616 0000FC3D BA01000000              	mov rdx, 1
 22617                                  .L_lambda_simple_env_loop_012e:	; ext_env[i + 1] <-- env[i]
 22618 0000FC42 4883FE00                	cmp rsi, 0
 22619 0000FC46 7410                    	je .L_lambda_simple_env_end_012e
 22620 0000FC48 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22621 0000FC4C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22622 0000FC50 48FFC6                  	inc rsi
 22623 0000FC53 48FFC2                  	inc rdx
 22624 0000FC56 EBEA                    	jmp .L_lambda_simple_env_loop_012e
 22625                                  .L_lambda_simple_env_end_012e:
 22626 0000FC58 5B                      	pop rbx
 22627 0000FC59 BE00000000              	mov rsi, 0
 22628                                  .L_lambda_simple_params_loop_012e:	; copy params
 22629 0000FC5E 4883FE00                	cmp rsi, 0
 22630 0000FC62 740E                    	je .L_lambda_simple_params_end_012e
 22631 0000FC64 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22632 0000FC69 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22633 0000FC6D 48FFC6                  	inc rsi
 22634 0000FC70 EBEC                    	jmp .L_lambda_simple_params_loop_012e
 22635                                  .L_lambda_simple_params_end_012e:
 22636 0000FC72 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22637 0000FC75 4889C3                  	mov rbx, rax
 22638 0000FC78 58                      	pop rax
 22639 0000FC79 C60005                  	mov byte [rax], T_closure
 22640 0000FC7C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22641 0000FC80 48C74009[8DFC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012e
 22642 0000FC88 E91D030000              	jmp .L_lambda_simple_end_012e
 22643                                  .L_lambda_simple_code_012e:	; lambda-simple body
 22644 0000FC8D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22645 0000FC93 740B                    	je .L_lambda_simple_arity_check_ok_012e
 22646 0000FC95 FF742410                	push qword [rsp + 8 * 2]
 22647 0000FC99 6A01                    	push 1
 22648 0000FC9B E933120000              	jmp L_error_incorrect_arity_simple
 22649                                  .L_lambda_simple_arity_check_ok_012e:
 22650 0000FCA0 C8000000                	enter 0, 0
 22651 0000FCA4 BF08000000              	mov rdi, 8
 22652 0000FCA9 E86C120000              	call malloc
 22653 0000FCAE 488B5D20                	mov rbx, PARAM(0)
 22654 0000FCB2 488918                  	mov qword [rax], rbx
 22655 0000FCB5 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 22656                                  
 22657 0000FCB9 48B8-                            	mov rax, sob_void
 22657 0000FCBB [0000000000000000] 
 22658                                  
 22659 0000FCC3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22660 0000FCC8 E84D120000              	call malloc
 22661 0000FCCD 50                      	push rax
 22662 0000FCCE BF08000000              	mov rdi, 8 * 1	; new rib
 22663 0000FCD3 E842120000              	call malloc
 22664 0000FCD8 50                      	push rax
 22665 0000FCD9 BF10000000              	mov rdi, 8 * 2	; extended env
 22666 0000FCDE E837120000              	call malloc
 22667 0000FCE3 488B7D10                	mov rdi, ENV
 22668 0000FCE7 BE00000000              	mov rsi, 0
 22669 0000FCEC BA01000000              	mov rdx, 1
 22670                                  .L_lambda_simple_env_loop_012f:	; ext_env[i + 1] <-- env[i]
 22671 0000FCF1 4883FE01                	cmp rsi, 1
 22672 0000FCF5 7410                    	je .L_lambda_simple_env_end_012f
 22673 0000FCF7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22674 0000FCFB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22675 0000FCFF 48FFC6                  	inc rsi
 22676 0000FD02 48FFC2                  	inc rdx
 22677 0000FD05 EBEA                    	jmp .L_lambda_simple_env_loop_012f
 22678                                  .L_lambda_simple_env_end_012f:
 22679 0000FD07 5B                      	pop rbx
 22680 0000FD08 BE00000000              	mov rsi, 0
 22681                                  .L_lambda_simple_params_loop_012f:	; copy params
 22682 0000FD0D 4883FE01                	cmp rsi, 1
 22683 0000FD11 740E                    	je .L_lambda_simple_params_end_012f
 22684 0000FD13 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22685 0000FD18 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22686 0000FD1C 48FFC6                  	inc rsi
 22687 0000FD1F EBEC                    	jmp .L_lambda_simple_params_loop_012f
 22688                                  .L_lambda_simple_params_end_012f:
 22689 0000FD21 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22690 0000FD24 4889C3                  	mov rbx, rax
 22691 0000FD27 58                      	pop rax
 22692 0000FD28 C60005                  	mov byte [rax], T_closure
 22693 0000FD2B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22694 0000FD2F 48C74009[3CFD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012f
 22695 0000FD37 E932010000              	jmp .L_lambda_simple_end_012f
 22696                                  .L_lambda_simple_code_012f:	; lambda-simple body
 22697 0000FD3C 48837C241003            	cmp qword [rsp + 8 * 2], 3
 22698 0000FD42 740B                    	je .L_lambda_simple_arity_check_ok_012f
 22699 0000FD44 FF742410                	push qword [rsp + 8 * 2]
 22700 0000FD48 6A03                    	push 3
 22701 0000FD4A E984110000              	jmp L_error_incorrect_arity_simple
 22702                                  .L_lambda_simple_arity_check_ok_012f:
 22703 0000FD4F C8000000                	enter 0, 0
 22704 0000FD53 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 22705 0000FD57 50                      	push rax
 22706 0000FD58 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22707 0000FD5C 50                      	push rax
 22708 0000FD5D 6A02                    	push 2
 22709 0000FD5F 488B0425[30030000]      	mov rax, qword [free_var_102]
 22710 0000FD67 803805                  	cmp byte [rax], T_closure 
 22711 0000FD6A 0F855F210000                    jne L_code_ptr_error
 22712                                  
 22713 0000FD70 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22714                                  
 22715 0000FD74 53                              push rbx
 22716                                  
 22717 0000FD75 FF5009                          call SOB_CLOSURE_CODE(rax)
 22718                                  
 22719                                          
 22720 0000FD78 483D[02000000]                  	cmp rax, sob_boolean_false
 22721                                  
 22722 0000FD7E 0F84DC000000                    	je .L_if_else_00b0
 22723 0000FD84 488B4530                	 	mov rax ,qword[rbp + 8 * (4 + 2)]
 22724 0000FD88 50                      	push rax
 22725 0000FD89 48B8-                   	mov rax,L_constants + 128
 22725 0000FD8B [8000000000000000] 
 22726 0000FD93 50                      	push rax
 22727 0000FD94 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22728 0000FD98 50                      	push rax
 22729 0000FD99 6A02                    	push 2
 22730 0000FD9B 488B0425[08030000]      	mov rax, qword [free_var_97]
 22731 0000FDA3 803805                  	cmp byte [rax], T_closure 
 22732 0000FDA6 0F8523210000                    jne L_code_ptr_error
 22733                                  
 22734 0000FDAC 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22735                                  
 22736 0000FDB0 53                              push rbx
 22737                                  
 22738 0000FDB1 FF5009                          call SOB_CLOSURE_CODE(rax)
 22739                                  
 22740 0000FDB4 50                              	push rax
 22741 0000FDB5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22742 0000FDB9 50                      	push rax
 22743 0000FDBA 6A03                    	push 3
 22744 0000FDBC 488B4510                	mov rax, qword [rbp + 8 * 2]
 22745                                  
 22746 0000FDC0 488B00                                            	mov rax, qword[rax + 8 * 0]
 22747                                  
 22748 0000FDC3 488B00                                            	mov rax, qword[rax + 8 * 0]
 22749 0000FDC6 488B00                  	mov rax, qword [rax]
 22750 0000FDC9 803805                  	cmp byte [rax], T_closure 
 22751 0000FDCC 0F85FD200000                    jne L_code_ptr_error
 22752                                  
 22753 0000FDD2 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22754                                  
 22755 0000FDD6 53                              push rbx
 22756                                  
 22757 0000FDD7 FF5009                          call SOB_CLOSURE_CODE(rax)
 22758                                  
 22759 0000FDDA 50                              	push rax
 22760 0000FDDB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22761 0000FDDF 50                      	push rax
 22762 0000FDE0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22763 0000FDE4 50                      	push rax
 22764 0000FDE5 6A02                    	push 2
 22765 0000FDE7 488B0425[80010000]      	mov rax, qword [free_var_48]
 22766 0000FDEF 803805                  	cmp byte [rax], T_closure 
 22767 0000FDF2 0F85D7200000                    jne L_code_ptr_error
 22768                                  
 22769 0000FDF8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22770                                  
 22771 0000FDFC 53                              push rbx
 22772                                  
 22773 0000FDFD FF5009                          call SOB_CLOSURE_CODE(rax)
 22774                                  
 22775 0000FE00 50                              	push rax
 22776                                  
 22777 0000FE01 6A02                    	push 2
 22778 0000FE03 488B0425[68000000]      	mov rax, qword [free_var_13]
 22779                                  	assert_closure(rax)
    42 0000FE0B 803805              <1>  cmp byte [%1], %2
    43 0000FE0E 0F85FA280000        <1>  jne L_error_incorrect_type
 22780 0000FE14 50                      	push rax 
 22781 0000FE15 FF7508                  	push qword [rbp + 8]
 22782 0000FE18 FF7500                  	push qword [rbp]
 22783 0000FE1B 4883C308                	add rbx ,8*1
 22784                                  	 .L_fix_stack_label_015f:
 22785 0000FE1F 488B5518                	mov rdx, qword[rbp+8*3]
 22786 0000FE23 4883C203                	add rdx, 3
 22787 0000FE27 48C1E203                	shl rdx, 3
 22788 0000FE2B 4889EF                  	mov rdi, rbp
 22789 0000FE2E 4801D7                  	add rdi, rdx
 22790 0000FE31 4C8B4500                	mov r8, qword[rbp]
 22791 0000FE35 4889E9                  	mov rcx, rbp
 22792 0000FE38 4883E908                	sub rcx, 8
 22793                                  	 .L_loop_fix_stuck_015f:
 22794 0000FE3C 4839CC                  	cmp rsp, rcx
 22795 0000FE3F 7710                    ja .L_loop_fix_stuck_end_015f
 22796 0000FE41 488B19                   	mov rbx, qword[rcx]
 22797 0000FE44 48891F                  	 mov qword[rdi], rbx
 22798 0000FE47 4883EF08                	sub rdi, 8
 22799 0000FE4B 4883E908                	sub rcx, 8
 22800 0000FE4F EBEB                    jmp .L_loop_fix_stuck_015f
 22801                                  	 .L_loop_fix_stuck_end_015f:
 22802 0000FE51 4883C708                	add rdi, 8
 22803 0000FE55 4889FC                  	 mov rsp, rdi
 22804 0000FE58 4C89C5                  	mov rbp, r8
 22805 0000FE5B 5D                      	pop rbp
 22806 0000FE5C FFE0                    	jmp rax 
 22807                                  
 22808 0000FE5E EB0A                            	jmp .L_if_end_00b0
 22809                                  
 22810                                          	.L_if_else_00b0:
 22811 0000FE60 48B8-                   	mov rax,L_constants + 1
 22811 0000FE62 [0100000000000000] 
 22812                                  
 22813                                          	.L_if_end_00b0:
 22814 0000FE6A C9                      	leave
 22815 0000FE6B C22800                  	ret 8 * (2 + 3)
 22816                                  .L_lambda_simple_end_012f:	; new closure is in rax
 22817 0000FE6E 50                      	push rax
 22818 0000FE6F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22819 0000FE73 8F00                    	pop qword [rax]
 22820 0000FE75 48B8-                   	mov rax, sob_void
 22820 0000FE77 [0000000000000000] 
 22821                                  
 22822 0000FE7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22823 0000FE84 E891100000              	call malloc
 22824 0000FE89 50                      	push rax
 22825 0000FE8A BF08000000              	mov rdi, 8 * 1	; new rib
 22826 0000FE8F E886100000              	call malloc
 22827 0000FE94 50                      	push rax
 22828 0000FE95 BF10000000              	mov rdi, 8 * 2	; extended env
 22829 0000FE9A E87B100000              	call malloc
 22830 0000FE9F 488B7D10                	mov rdi, ENV
 22831 0000FEA3 BE00000000              	mov rsi, 0
 22832 0000FEA8 BA01000000              	mov rdx, 1
 22833                                  .L_lambda_simple_env_loop_0130:	; ext_env[i + 1] <-- env[i]
 22834 0000FEAD 4883FE01                	cmp rsi, 1
 22835 0000FEB1 7410                    	je .L_lambda_simple_env_end_0130
 22836 0000FEB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22837 0000FEB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22838 0000FEBB 48FFC6                  	inc rsi
 22839 0000FEBE 48FFC2                  	inc rdx
 22840 0000FEC1 EBEA                    	jmp .L_lambda_simple_env_loop_0130
 22841                                  .L_lambda_simple_env_end_0130:
 22842 0000FEC3 5B                      	pop rbx
 22843 0000FEC4 BE00000000              	mov rsi, 0
 22844                                  .L_lambda_simple_params_loop_0130:	; copy params
 22845 0000FEC9 4883FE01                	cmp rsi, 1
 22846 0000FECD 740E                    	je .L_lambda_simple_params_end_0130
 22847 0000FECF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22848 0000FED4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22849 0000FED8 48FFC6                  	inc rsi
 22850 0000FEDB EBEC                    	jmp .L_lambda_simple_params_loop_0130
 22851                                  .L_lambda_simple_params_end_0130:
 22852 0000FEDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22853 0000FEE0 4889C3                  	mov rbx, rax
 22854 0000FEE3 58                      	pop rax
 22855 0000FEE4 C60005                  	mov byte [rax], T_closure
 22856 0000FEE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22857 0000FEEB 48C74009[F8FE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0130
 22858 0000FEF3 E9AE000000              	jmp .L_lambda_simple_end_0130
 22859                                  .L_lambda_simple_code_0130:	; lambda-simple body
 22860 0000FEF8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22861 0000FEFE 740B                    	je .L_lambda_simple_arity_check_ok_0130
 22862 0000FF00 FF742410                	push qword [rsp + 8 * 2]
 22863 0000FF04 6A01                    	push 1
 22864 0000FF06 E9C80F0000              	jmp L_error_incorrect_arity_simple
 22865                                  .L_lambda_simple_arity_check_ok_0130:
 22866 0000FF0B C8000000                	enter 0, 0
 22867 0000FF0F 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 22868 0000FF13 50                      	push rax
 22869 0000FF14 6A01                    	push 1
 22870 0000FF16 488B0425[98000000]      	mov rax, qword [free_var_19]
 22871 0000FF1E 803805                  	cmp byte [rax], T_closure 
 22872 0000FF21 0F85A81F0000                    jne L_code_ptr_error
 22873                                  
 22874 0000FF27 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22875                                  
 22876 0000FF2B 53                              push rbx
 22877                                  
 22878 0000FF2C FF5009                          call SOB_CLOSURE_CODE(rax)
 22879                                  
 22880 0000FF2F 50                              	push rax
 22881 0000FF30 48B8-                   	mov rax,L_constants + 32
 22881 0000FF32 [2000000000000000] 
 22882 0000FF3A 50                      	push rax
 22883 0000FF3B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22884 0000FF3F 50                      	push rax
 22885                                  
 22886 0000FF40 6A03                    	push 3
 22887 0000FF42 488B4510                	mov rax, qword [rbp + 8 * 2]
 22888                                  
 22889 0000FF46 488B00                                            	mov rax, qword[rax + 8 * 0]
 22890                                  
 22891 0000FF49 488B00                                            	mov rax, qword[rax + 8 * 0]
 22892 0000FF4C 488B00                  	mov rax, qword [rax]
 22893                                  	assert_closure(rax)
    42 0000FF4F 803805              <1>  cmp byte [%1], %2
    43 0000FF52 0F85B6270000        <1>  jne L_error_incorrect_type
 22894 0000FF58 50                      	push rax 
 22895 0000FF59 FF7508                  	push qword [rbp + 8]
 22896 0000FF5C FF7500                  	push qword [rbp]
 22897 0000FF5F 4883C308                	add rbx ,8*1
 22898                                  	 .L_fix_stack_label_0160:
 22899 0000FF63 488B5518                	mov rdx, qword[rbp+8*3]
 22900 0000FF67 4883C203                	add rdx, 3
 22901 0000FF6B 48C1E203                	shl rdx, 3
 22902 0000FF6F 4889EF                  	mov rdi, rbp
 22903 0000FF72 4801D7                  	add rdi, rdx
 22904 0000FF75 4C8B4500                	mov r8, qword[rbp]
 22905 0000FF79 4889E9                  	mov rcx, rbp
 22906 0000FF7C 4883E908                	sub rcx, 8
 22907                                  	 .L_loop_fix_stuck_0160:
 22908 0000FF80 4839CC                  	cmp rsp, rcx
 22909 0000FF83 7710                    ja .L_loop_fix_stuck_end_0160
 22910 0000FF85 488B19                   	mov rbx, qword[rcx]
 22911 0000FF88 48891F                  	 mov qword[rdi], rbx
 22912 0000FF8B 4883EF08                	sub rdi, 8
 22913 0000FF8F 4883E908                	sub rcx, 8
 22914 0000FF93 EBEB                    jmp .L_loop_fix_stuck_0160
 22915                                  	 .L_loop_fix_stuck_end_0160:
 22916 0000FF95 4883C708                	add rdi, 8
 22917 0000FF99 4889FC                  	 mov rsp, rdi
 22918 0000FF9C 4C89C5                  	mov rbp, r8
 22919 0000FF9F 5D                      	pop rbp
 22920 0000FFA0 FFE0                    	jmp rax 
 22921 0000FFA2 C9                      	leave
 22922 0000FFA3 C21800                  	ret 8 * (2 + 1)
 22923                                  .L_lambda_simple_end_0130:	; new closure is in rax
 22924 0000FFA6 C9                      	leave
 22925 0000FFA7 C21800                  	ret 8 * (2 + 1)
 22926                                  .L_lambda_simple_end_012e:	; new closure is in rax
 22927 0000FFAA 803805                  	cmp byte [rax], T_closure 
 22928 0000FFAD 0F851C1F0000                    jne L_code_ptr_error
 22929                                  
 22930 0000FFB3 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22931                                  
 22932 0000FFB7 53                              push rbx
 22933                                  
 22934 0000FFB8 FF5009                          call SOB_CLOSURE_CODE(rax)
 22935                                  
 22936 0000FFBB 48890425[48040000]              	mov qword [free_var_137], rax
 22937 0000FFC3 48B8-                   	mov rax, sob_void
 22937 0000FFC5 [0000000000000000] 
 22938                                  
 22939 0000FFCD 4889C7                  	mov rdi, rax
 22940 0000FFD0 E8560F0000              	call print_sexpr_if_not_void
 22941                                  
 22942 0000FFD5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22943 0000FFDA E83B0F0000              	call malloc
 22944 0000FFDF 50                      	push rax
 22945 0000FFE0 BF00000000              	mov rdi, 8 * 0	; new rib
 22946 0000FFE5 E8300F0000              	call malloc
 22947 0000FFEA 50                      	push rax
 22948 0000FFEB BF08000000              	mov rdi, 8 * 1	; extended env
 22949 0000FFF0 E8250F0000              	call malloc
 22950 0000FFF5 488B7D10                	mov rdi, ENV
 22951 0000FFF9 BE00000000              	mov rsi, 0
 22952 0000FFFE BA01000000              	mov rdx, 1
 22953                                  .L_lambda_simple_env_loop_0131:	; ext_env[i + 1] <-- env[i]
 22954 00010003 4883FE00                	cmp rsi, 0
 22955 00010007 7410                    	je .L_lambda_simple_env_end_0131
 22956 00010009 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22957 0001000D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22958 00010011 48FFC6                  	inc rsi
 22959 00010014 48FFC2                  	inc rdx
 22960 00010017 EBEA                    	jmp .L_lambda_simple_env_loop_0131
 22961                                  .L_lambda_simple_env_end_0131:
 22962 00010019 5B                      	pop rbx
 22963 0001001A BE00000000              	mov rsi, 0
 22964                                  .L_lambda_simple_params_loop_0131:	; copy params
 22965 0001001F 4883FE00                	cmp rsi, 0
 22966 00010023 740E                    	je .L_lambda_simple_params_end_0131
 22967 00010025 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22968 0001002A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22969 0001002E 48FFC6                  	inc rsi
 22970 00010031 EBEC                    	jmp .L_lambda_simple_params_loop_0131
 22971                                  .L_lambda_simple_params_end_0131:
 22972 00010033 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22973 00010036 4889C3                  	mov rbx, rax
 22974 00010039 58                      	pop rax
 22975 0001003A C60005                  	mov byte [rax], T_closure
 22976 0001003D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22977 00010041 48C74009[4E000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0131
 22978 00010049 E999000000              	jmp .L_lambda_simple_end_0131
 22979                                  .L_lambda_simple_code_0131:	; lambda-simple body
 22980 0001004E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22981 00010054 740B                    	je .L_lambda_simple_arity_check_ok_0131
 22982 00010056 FF742410                	push qword [rsp + 8 * 2]
 22983 0001005A 6A01                    	push 1
 22984 0001005C E9720E0000              	jmp L_error_incorrect_arity_simple
 22985                                  .L_lambda_simple_arity_check_ok_0131:
 22986 00010061 C8000000                	enter 0, 0
 22987 00010065 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 22988 00010069 50                      	push rax
 22989 0001006A 6A00                    	push 0
 22990 0001006C 488B0425[D0000000]      	mov rax, qword [free_var_26]
 22991 00010074 803805                  	cmp byte [rax], T_closure 
 22992 00010077 0F85521E0000                    jne L_code_ptr_error
 22993                                  
 22994 0001007D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 22995                                  
 22996 00010081 53                              push rbx
 22997                                  
 22998 00010082 FF5009                          call SOB_CLOSURE_CODE(rax)
 22999                                  
 23000 00010085 50                              	push rax
 23001                                  
 23002 00010086 6A02                    	push 2
 23003 00010088 488B0425[60010000]      	mov rax, qword [free_var_44]
 23004                                  	assert_closure(rax)
    42 00010090 803805              <1>  cmp byte [%1], %2
    43 00010093 0F8575260000        <1>  jne L_error_incorrect_type
 23005 00010099 50                      	push rax 
 23006 0001009A FF7508                  	push qword [rbp + 8]
 23007 0001009D FF7500                  	push qword [rbp]
 23008 000100A0 4883C308                	add rbx ,8*1
 23009                                  	 .L_fix_stack_label_0161:
 23010 000100A4 488B5518                	mov rdx, qword[rbp+8*3]
 23011 000100A8 4883C203                	add rdx, 3
 23012 000100AC 48C1E203                	shl rdx, 3
 23013 000100B0 4889EF                  	mov rdi, rbp
 23014 000100B3 4801D7                  	add rdi, rdx
 23015 000100B6 4C8B4500                	mov r8, qword[rbp]
 23016 000100BA 4889E9                  	mov rcx, rbp
 23017 000100BD 4883E908                	sub rcx, 8
 23018                                  	 .L_loop_fix_stuck_0161:
 23019 000100C1 4839CC                  	cmp rsp, rcx
 23020 000100C4 7710                    ja .L_loop_fix_stuck_end_0161
 23021 000100C6 488B19                   	mov rbx, qword[rcx]
 23022 000100C9 48891F                  	 mov qword[rdi], rbx
 23023 000100CC 4883EF08                	sub rdi, 8
 23024 000100D0 4883E908                	sub rcx, 8
 23025 000100D4 EBEB                    jmp .L_loop_fix_stuck_0161
 23026                                  	 .L_loop_fix_stuck_end_0161:
 23027 000100D6 4883C708                	add rdi, 8
 23028 000100DA 4889FC                  	 mov rsp, rdi
 23029 000100DD 4C89C5                  	mov rbp, r8
 23030 000100E0 5D                      	pop rbp
 23031 000100E1 FFE0                    	jmp rax 
 23032 000100E3 C9                      	leave
 23033 000100E4 C21800                  	ret 8 * (2 + 1)
 23034                                  .L_lambda_simple_end_0131:	; new closure is in rax
 23035 000100E7 48890425[50040000]      	mov qword [free_var_138], rax
 23036 000100EF 48B8-                   	mov rax, sob_void
 23036 000100F1 [0000000000000000] 
 23037                                  
 23038 000100F9 4889C7                  	mov rdi, rax
 23039 000100FC E82A0E0000              	call print_sexpr_if_not_void
 23040                                  
 23041 00010101 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23042 00010106 E80F0E0000              	call malloc
 23043 0001010B 50                      	push rax
 23044 0001010C BF00000000              	mov rdi, 8 * 0	; new rib
 23045 00010111 E8040E0000              	call malloc
 23046 00010116 50                      	push rax
 23047 00010117 BF08000000              	mov rdi, 8 * 1	; extended env
 23048 0001011C E8F90D0000              	call malloc
 23049 00010121 488B7D10                	mov rdi, ENV
 23050 00010125 BE00000000              	mov rsi, 0
 23051 0001012A BA01000000              	mov rdx, 1
 23052                                  .L_lambda_simple_env_loop_0132:	; ext_env[i + 1] <-- env[i]
 23053 0001012F 4883FE00                	cmp rsi, 0
 23054 00010133 7410                    	je .L_lambda_simple_env_end_0132
 23055 00010135 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23056 00010139 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23057 0001013D 48FFC6                  	inc rsi
 23058 00010140 48FFC2                  	inc rdx
 23059 00010143 EBEA                    	jmp .L_lambda_simple_env_loop_0132
 23060                                  .L_lambda_simple_env_end_0132:
 23061 00010145 5B                      	pop rbx
 23062 00010146 BE00000000              	mov rsi, 0
 23063                                  .L_lambda_simple_params_loop_0132:	; copy params
 23064 0001014B 4883FE00                	cmp rsi, 0
 23065 0001014F 740E                    	je .L_lambda_simple_params_end_0132
 23066 00010151 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23067 00010156 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23068 0001015A 48FFC6                  	inc rsi
 23069 0001015D EBEC                    	jmp .L_lambda_simple_params_loop_0132
 23070                                  .L_lambda_simple_params_end_0132:
 23071 0001015F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23072 00010162 4889C3                  	mov rbx, rax
 23073 00010165 58                      	pop rax
 23074 00010166 C60005                  	mov byte [rax], T_closure
 23075 00010169 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23076 0001016D 48C74009[7A010100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0132
 23077 00010175 E988000000              	jmp .L_lambda_simple_end_0132
 23078                                  .L_lambda_simple_code_0132:	; lambda-simple body
 23079 0001017A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23080 00010180 740B                    	je .L_lambda_simple_arity_check_ok_0132
 23081 00010182 FF742410                	push qword [rsp + 8 * 2]
 23082 00010186 6A01                    	push 1
 23083 00010188 E9460D0000              	jmp L_error_incorrect_arity_simple
 23084                                  .L_lambda_simple_arity_check_ok_0132:
 23085 0001018D C8000000                	enter 0, 0
 23086 00010191 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 23087 00010195 50                      	push rax
 23088 00010196 48B8-                   	mov rax,L_constants + 32
 23088 00010198 [2000000000000000] 
 23089 000101A0 50                      	push rax
 23090                                  
 23091 000101A1 6A02                    	push 2
 23092 000101A3 488B0425[30030000]      	mov rax, qword [free_var_102]
 23093                                  	assert_closure(rax)
    42 000101AB 803805              <1>  cmp byte [%1], %2
    43 000101AE 0F855A250000        <1>  jne L_error_incorrect_type
 23094 000101B4 50                      	push rax 
 23095 000101B5 FF7508                  	push qword [rbp + 8]
 23096 000101B8 FF7500                  	push qword [rbp]
 23097 000101BB 4883C308                	add rbx ,8*1
 23098                                  	 .L_fix_stack_label_0162:
 23099 000101BF 488B5518                	mov rdx, qword[rbp+8*3]
 23100 000101C3 4883C203                	add rdx, 3
 23101 000101C7 48C1E203                	shl rdx, 3
 23102 000101CB 4889EF                  	mov rdi, rbp
 23103 000101CE 4801D7                  	add rdi, rdx
 23104 000101D1 4C8B4500                	mov r8, qword[rbp]
 23105 000101D5 4889E9                  	mov rcx, rbp
 23106 000101D8 4883E908                	sub rcx, 8
 23107                                  	 .L_loop_fix_stuck_0162:
 23108 000101DC 4839CC                  	cmp rsp, rcx
 23109 000101DF 7710                    ja .L_loop_fix_stuck_end_0162
 23110 000101E1 488B19                   	mov rbx, qword[rcx]
 23111 000101E4 48891F                  	 mov qword[rdi], rbx
 23112 000101E7 4883EF08                	sub rdi, 8
 23113 000101EB 4883E908                	sub rcx, 8
 23114 000101EF EBEB                    jmp .L_loop_fix_stuck_0162
 23115                                  	 .L_loop_fix_stuck_end_0162:
 23116 000101F1 4883C708                	add rdi, 8
 23117 000101F5 4889FC                  	 mov rsp, rdi
 23118 000101F8 4C89C5                  	mov rbp, r8
 23119 000101FB 5D                      	pop rbp
 23120 000101FC FFE0                    	jmp rax 
 23121 000101FE C9                      	leave
 23122 000101FF C21800                  	ret 8 * (2 + 1)
 23123                                  .L_lambda_simple_end_0132:	; new closure is in rax
 23124 00010202 48890425[58040000]      	mov qword [free_var_139], rax
 23125 0001020A 48B8-                   	mov rax, sob_void
 23125 0001020C [0000000000000000] 
 23126                                  
 23127 00010214 4889C7                  	mov rdi, rax
 23128 00010217 E80F0D0000              	call print_sexpr_if_not_void
 23129                                  
 23130 0001021C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23131 00010221 E8F40C0000              	call malloc
 23132 00010226 50                      	push rax
 23133 00010227 BF00000000              	mov rdi, 8 * 0	; new rib
 23134 0001022C E8E90C0000              	call malloc
 23135 00010231 50                      	push rax
 23136 00010232 BF08000000              	mov rdi, 8 * 1	; extended env
 23137 00010237 E8DE0C0000              	call malloc
 23138 0001023C 488B7D10                	mov rdi, ENV
 23139 00010240 BE00000000              	mov rsi, 0
 23140 00010245 BA01000000              	mov rdx, 1
 23141                                  .L_lambda_simple_env_loop_0133:	; ext_env[i + 1] <-- env[i]
 23142 0001024A 4883FE00                	cmp rsi, 0
 23143 0001024E 7410                    	je .L_lambda_simple_env_end_0133
 23144 00010250 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23145 00010254 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23146 00010258 48FFC6                  	inc rsi
 23147 0001025B 48FFC2                  	inc rdx
 23148 0001025E EBEA                    	jmp .L_lambda_simple_env_loop_0133
 23149                                  .L_lambda_simple_env_end_0133:
 23150 00010260 5B                      	pop rbx
 23151 00010261 BE00000000              	mov rsi, 0
 23152                                  .L_lambda_simple_params_loop_0133:	; copy params
 23153 00010266 4883FE00                	cmp rsi, 0
 23154 0001026A 740E                    	je .L_lambda_simple_params_end_0133
 23155 0001026C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23156 00010271 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23157 00010275 48FFC6                  	inc rsi
 23158 00010278 EBEC                    	jmp .L_lambda_simple_params_loop_0133
 23159                                  .L_lambda_simple_params_end_0133:
 23160 0001027A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23161 0001027D 4889C3                  	mov rbx, rax
 23162 00010280 58                      	pop rax
 23163 00010281 C60005                  	mov byte [rax], T_closure
 23164 00010284 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23165 00010288 48C74009[95020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0133
 23166 00010290 E988000000              	jmp .L_lambda_simple_end_0133
 23167                                  .L_lambda_simple_code_0133:	; lambda-simple body
 23168 00010295 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23169 0001029B 740B                    	je .L_lambda_simple_arity_check_ok_0133
 23170 0001029D FF742410                	push qword [rsp + 8 * 2]
 23171 000102A1 6A01                    	push 1
 23172 000102A3 E92B0C0000              	jmp L_error_incorrect_arity_simple
 23173                                  .L_lambda_simple_arity_check_ok_0133:
 23174 000102A8 C8000000                	enter 0, 0
 23175 000102AC 48B8-                   	 	mov rax,L_constants + 32
 23175 000102AE [2000000000000000] 
 23176 000102B6 50                      	push rax
 23177 000102B7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23178 000102BB 50                      	push rax
 23179                                  
 23180 000102BC 6A02                    	push 2
 23181 000102BE 488B0425[30030000]      	mov rax, qword [free_var_102]
 23182                                  	assert_closure(rax)
    42 000102C6 803805              <1>  cmp byte [%1], %2
    43 000102C9 0F853F240000        <1>  jne L_error_incorrect_type
 23183 000102CF 50                      	push rax 
 23184 000102D0 FF7508                  	push qword [rbp + 8]
 23185 000102D3 FF7500                  	push qword [rbp]
 23186 000102D6 4883C308                	add rbx ,8*1
 23187                                  	 .L_fix_stack_label_0163:
 23188 000102DA 488B5518                	mov rdx, qword[rbp+8*3]
 23189 000102DE 4883C203                	add rdx, 3
 23190 000102E2 48C1E203                	shl rdx, 3
 23191 000102E6 4889EF                  	mov rdi, rbp
 23192 000102E9 4801D7                  	add rdi, rdx
 23193 000102EC 4C8B4500                	mov r8, qword[rbp]
 23194 000102F0 4889E9                  	mov rcx, rbp
 23195 000102F3 4883E908                	sub rcx, 8
 23196                                  	 .L_loop_fix_stuck_0163:
 23197 000102F7 4839CC                  	cmp rsp, rcx
 23198 000102FA 7710                    ja .L_loop_fix_stuck_end_0163
 23199 000102FC 488B19                   	mov rbx, qword[rcx]
 23200 000102FF 48891F                  	 mov qword[rdi], rbx
 23201 00010302 4883EF08                	sub rdi, 8
 23202 00010306 4883E908                	sub rcx, 8
 23203 0001030A EBEB                    jmp .L_loop_fix_stuck_0163
 23204                                  	 .L_loop_fix_stuck_end_0163:
 23205 0001030C 4883C708                	add rdi, 8
 23206 00010310 4889FC                  	 mov rsp, rdi
 23207 00010313 4C89C5                  	mov rbp, r8
 23208 00010316 5D                      	pop rbp
 23209 00010317 FFE0                    	jmp rax 
 23210 00010319 C9                      	leave
 23211 0001031A C21800                  	ret 8 * (2 + 1)
 23212                                  .L_lambda_simple_end_0133:	; new closure is in rax
 23213 0001031D 48890425[60040000]      	mov qword [free_var_140], rax
 23214 00010325 48B8-                   	mov rax, sob_void
 23214 00010327 [0000000000000000] 
 23215                                  
 23216 0001032F 4889C7                  	mov rdi, rax
 23217 00010332 E8F40B0000              	call print_sexpr_if_not_void
 23218                                  
 23219 00010337 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23220 0001033C E8D90B0000              	call malloc
 23221 00010341 50                      	push rax
 23222 00010342 BF00000000              	mov rdi, 8 * 0	; new rib
 23223 00010347 E8CE0B0000              	call malloc
 23224 0001034C 50                      	push rax
 23225 0001034D BF08000000              	mov rdi, 8 * 1	; extended env
 23226 00010352 E8C30B0000              	call malloc
 23227 00010357 488B7D10                	mov rdi, ENV
 23228 0001035B BE00000000              	mov rsi, 0
 23229 00010360 BA01000000              	mov rdx, 1
 23230                                  .L_lambda_simple_env_loop_0134:	; ext_env[i + 1] <-- env[i]
 23231 00010365 4883FE00                	cmp rsi, 0
 23232 00010369 7410                    	je .L_lambda_simple_env_end_0134
 23233 0001036B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23234 0001036F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23235 00010373 48FFC6                  	inc rsi
 23236 00010376 48FFC2                  	inc rdx
 23237 00010379 EBEA                    	jmp .L_lambda_simple_env_loop_0134
 23238                                  .L_lambda_simple_env_end_0134:
 23239 0001037B 5B                      	pop rbx
 23240 0001037C BE00000000              	mov rsi, 0
 23241                                  .L_lambda_simple_params_loop_0134:	; copy params
 23242 00010381 4883FE00                	cmp rsi, 0
 23243 00010385 740E                    	je .L_lambda_simple_params_end_0134
 23244 00010387 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23245 0001038C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23246 00010390 48FFC6                  	inc rsi
 23247 00010393 EBEC                    	jmp .L_lambda_simple_params_loop_0134
 23248                                  .L_lambda_simple_params_end_0134:
 23249 00010395 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23250 00010398 4889C3                  	mov rbx, rax
 23251 0001039B 58                      	pop rax
 23252 0001039C C60005                  	mov byte [rax], T_closure
 23253 0001039F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23254 000103A3 48C74009[B0030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0134
 23255 000103AB E9A4000000              	jmp .L_lambda_simple_end_0134
 23256                                  .L_lambda_simple_code_0134:	; lambda-simple body
 23257 000103B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23258 000103B6 740B                    	je .L_lambda_simple_arity_check_ok_0134
 23259 000103B8 FF742410                	push qword [rsp + 8 * 2]
 23260 000103BC 6A01                    	push 1
 23261 000103BE E9100B0000              	jmp L_error_incorrect_arity_simple
 23262                                  .L_lambda_simple_arity_check_ok_0134:
 23263 000103C3 C8000000                	enter 0, 0
 23264 000103C7 48B8-                   	 	mov rax,L_constants + 512
 23264 000103C9 [0002000000000000] 
 23265 000103D1 50                      	push rax
 23266 000103D2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23267 000103D6 50                      	push rax
 23268 000103D7 6A02                    	push 2
 23269 000103D9 488B0425[60010000]      	mov rax, qword [free_var_44]
 23270 000103E1 803805                  	cmp byte [rax], T_closure 
 23271 000103E4 0F85E51A0000                    jne L_code_ptr_error
 23272                                  
 23273 000103EA 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23274                                  
 23275 000103EE 53                              push rbx
 23276                                  
 23277 000103EF FF5009                          call SOB_CLOSURE_CODE(rax)
 23278                                  
 23279 000103F2 50                              	push rax
 23280                                  
 23281 000103F3 6A01                    	push 1
 23282 000103F5 488B0425[D8000000]      	mov rax, qword [free_var_27]
 23283                                  	assert_closure(rax)
    42 000103FD 803805              <1>  cmp byte [%1], %2
    43 00010400 0F8508230000        <1>  jne L_error_incorrect_type
 23284 00010406 50                      	push rax 
 23285 00010407 FF7508                  	push qword [rbp + 8]
 23286 0001040A FF7500                  	push qword [rbp]
 23287 0001040D 4883C308                	add rbx ,8*1
 23288                                  	 .L_fix_stack_label_0164:
 23289 00010411 488B5518                	mov rdx, qword[rbp+8*3]
 23290 00010415 4883C203                	add rdx, 3
 23291 00010419 48C1E203                	shl rdx, 3
 23292 0001041D 4889EF                  	mov rdi, rbp
 23293 00010420 4801D7                  	add rdi, rdx
 23294 00010423 4C8B4500                	mov r8, qword[rbp]
 23295 00010427 4889E9                  	mov rcx, rbp
 23296 0001042A 4883E908                	sub rcx, 8
 23297                                  	 .L_loop_fix_stuck_0164:
 23298 0001042E 4839CC                  	cmp rsp, rcx
 23299 00010431 7710                    ja .L_loop_fix_stuck_end_0164
 23300 00010433 488B19                   	mov rbx, qword[rcx]
 23301 00010436 48891F                  	 mov qword[rdi], rbx
 23302 00010439 4883EF08                	sub rdi, 8
 23303 0001043D 4883E908                	sub rcx, 8
 23304 00010441 EBEB                    jmp .L_loop_fix_stuck_0164
 23305                                  	 .L_loop_fix_stuck_end_0164:
 23306 00010443 4883C708                	add rdi, 8
 23307 00010447 4889FC                  	 mov rsp, rdi
 23308 0001044A 4C89C5                  	mov rbp, r8
 23309 0001044D 5D                      	pop rbp
 23310 0001044E FFE0                    	jmp rax 
 23311 00010450 C9                      	leave
 23312 00010451 C21800                  	ret 8 * (2 + 1)
 23313                                  .L_lambda_simple_end_0134:	; new closure is in rax
 23314 00010454 48890425[68040000]      	mov qword [free_var_141], rax
 23315 0001045C 48B8-                   	mov rax, sob_void
 23315 0001045E [0000000000000000] 
 23316                                  
 23317 00010466 4889C7                  	mov rdi, rax
 23318 00010469 E8BD0A0000              	call print_sexpr_if_not_void
 23319                                  
 23320 0001046E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23321 00010473 E8A20A0000              	call malloc
 23322 00010478 50                      	push rax
 23323 00010479 BF00000000              	mov rdi, 8 * 0	; new rib
 23324 0001047E E8970A0000              	call malloc
 23325 00010483 50                      	push rax
 23326 00010484 BF08000000              	mov rdi, 8 * 1	; extended env
 23327 00010489 E88C0A0000              	call malloc
 23328 0001048E 488B7D10                	mov rdi, ENV
 23329 00010492 BE00000000              	mov rsi, 0
 23330 00010497 BA01000000              	mov rdx, 1
 23331                                  .L_lambda_simple_env_loop_0135:	; ext_env[i + 1] <-- env[i]
 23332 0001049C 4883FE00                	cmp rsi, 0
 23333 000104A0 7410                    	je .L_lambda_simple_env_end_0135
 23334 000104A2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23335 000104A6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23336 000104AA 48FFC6                  	inc rsi
 23337 000104AD 48FFC2                  	inc rdx
 23338 000104B0 EBEA                    	jmp .L_lambda_simple_env_loop_0135
 23339                                  .L_lambda_simple_env_end_0135:
 23340 000104B2 5B                      	pop rbx
 23341 000104B3 BE00000000              	mov rsi, 0
 23342                                  .L_lambda_simple_params_loop_0135:	; copy params
 23343 000104B8 4883FE00                	cmp rsi, 0
 23344 000104BC 740E                    	je .L_lambda_simple_params_end_0135
 23345 000104BE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23346 000104C3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23347 000104C7 48FFC6                  	inc rsi
 23348 000104CA EBEC                    	jmp .L_lambda_simple_params_loop_0135
 23349                                  .L_lambda_simple_params_end_0135:
 23350 000104CC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23351 000104CF 4889C3                  	mov rbx, rax
 23352 000104D2 58                      	pop rax
 23353 000104D3 C60005                  	mov byte [rax], T_closure
 23354 000104D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23355 000104DA 48C74009[E7040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0135
 23356 000104E2 E999000000              	jmp .L_lambda_simple_end_0135
 23357                                  .L_lambda_simple_code_0135:	; lambda-simple body
 23358 000104E7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23359 000104ED 740B                    	je .L_lambda_simple_arity_check_ok_0135
 23360 000104EF FF742410                	push qword [rsp + 8 * 2]
 23361 000104F3 6A01                    	push 1
 23362 000104F5 E9D9090000              	jmp L_error_incorrect_arity_simple
 23363                                  .L_lambda_simple_arity_check_ok_0135:
 23364 000104FA C8000000                	enter 0, 0
 23365 000104FE 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 23366 00010502 50                      	push rax
 23367 00010503 6A01                    	push 1
 23368 00010505 488B0425[68040000]      	mov rax, qword [free_var_141]
 23369 0001050D 803805                  	cmp byte [rax], T_closure 
 23370 00010510 0F85B9190000                    jne L_code_ptr_error
 23371                                  
 23372 00010516 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23373                                  
 23374 0001051A 53                              push rbx
 23375                                  
 23376 0001051B FF5009                          call SOB_CLOSURE_CODE(rax)
 23377                                  
 23378 0001051E 50                              	push rax
 23379                                  
 23380 0001051F 6A01                    	push 1
 23381 00010521 488B0425[B0020000]      	mov rax, qword [free_var_86]
 23382                                  	assert_closure(rax)
    42 00010529 803805              <1>  cmp byte [%1], %2
    43 0001052C 0F85DC210000        <1>  jne L_error_incorrect_type
 23383 00010532 50                      	push rax 
 23384 00010533 FF7508                  	push qword [rbp + 8]
 23385 00010536 FF7500                  	push qword [rbp]
 23386 00010539 4883C308                	add rbx ,8*1
 23387                                  	 .L_fix_stack_label_0165:
 23388 0001053D 488B5518                	mov rdx, qword[rbp+8*3]
 23389 00010541 4883C203                	add rdx, 3
 23390 00010545 48C1E203                	shl rdx, 3
 23391 00010549 4889EF                  	mov rdi, rbp
 23392 0001054C 4801D7                  	add rdi, rdx
 23393 0001054F 4C8B4500                	mov r8, qword[rbp]
 23394 00010553 4889E9                  	mov rcx, rbp
 23395 00010556 4883E908                	sub rcx, 8
 23396                                  	 .L_loop_fix_stuck_0165:
 23397 0001055A 4839CC                  	cmp rsp, rcx
 23398 0001055D 7710                    ja .L_loop_fix_stuck_end_0165
 23399 0001055F 488B19                   	mov rbx, qword[rcx]
 23400 00010562 48891F                  	 mov qword[rdi], rbx
 23401 00010565 4883EF08                	sub rdi, 8
 23402 00010569 4883E908                	sub rcx, 8
 23403 0001056D EBEB                    jmp .L_loop_fix_stuck_0165
 23404                                  	 .L_loop_fix_stuck_end_0165:
 23405 0001056F 4883C708                	add rdi, 8
 23406 00010573 4889FC                  	 mov rsp, rdi
 23407 00010576 4C89C5                  	mov rbp, r8
 23408 00010579 5D                      	pop rbp
 23409 0001057A FFE0                    	jmp rax 
 23410 0001057C C9                      	leave
 23411 0001057D C21800                  	ret 8 * (2 + 1)
 23412                                  .L_lambda_simple_end_0135:	; new closure is in rax
 23413 00010580 48890425[70040000]      	mov qword [free_var_142], rax
 23414 00010588 48B8-                   	mov rax, sob_void
 23414 0001058A [0000000000000000] 
 23415                                  
 23416 00010592 4889C7                  	mov rdi, rax
 23417 00010595 E891090000              	call print_sexpr_if_not_void
 23418                                  
 23419 0001059A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23420 0001059F E876090000              	call malloc
 23421 000105A4 50                      	push rax
 23422 000105A5 BF00000000              	mov rdi, 8 * 0	; new rib
 23423 000105AA E86B090000              	call malloc
 23424 000105AF 50                      	push rax
 23425 000105B0 BF08000000              	mov rdi, 8 * 1	; extended env
 23426 000105B5 E860090000              	call malloc
 23427 000105BA 488B7D10                	mov rdi, ENV
 23428 000105BE BE00000000              	mov rsi, 0
 23429 000105C3 BA01000000              	mov rdx, 1
 23430                                  .L_lambda_simple_env_loop_0136:	; ext_env[i + 1] <-- env[i]
 23431 000105C8 4883FE00                	cmp rsi, 0
 23432 000105CC 7410                    	je .L_lambda_simple_env_end_0136
 23433 000105CE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23434 000105D2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23435 000105D6 48FFC6                  	inc rsi
 23436 000105D9 48FFC2                  	inc rdx
 23437 000105DC EBEA                    	jmp .L_lambda_simple_env_loop_0136
 23438                                  .L_lambda_simple_env_end_0136:
 23439 000105DE 5B                      	pop rbx
 23440 000105DF BE00000000              	mov rsi, 0
 23441                                  .L_lambda_simple_params_loop_0136:	; copy params
 23442 000105E4 4883FE00                	cmp rsi, 0
 23443 000105E8 740E                    	je .L_lambda_simple_params_end_0136
 23444 000105EA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23445 000105EF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23446 000105F3 48FFC6                  	inc rsi
 23447 000105F6 EBEC                    	jmp .L_lambda_simple_params_loop_0136
 23448                                  .L_lambda_simple_params_end_0136:
 23449 000105F8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23450 000105FB 4889C3                  	mov rbx, rax
 23451 000105FE 58                      	pop rax
 23452 000105FF C60005                  	mov byte [rax], T_closure
 23453 00010602 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23454 00010606 48C74009[13060100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0136
 23455 0001060E E9AB000000              	jmp .L_lambda_simple_end_0136
 23456                                  .L_lambda_simple_code_0136:	; lambda-simple body
 23457 00010613 48837C241001            	cmp qword [rsp + 8 * 2], 1
 23458 00010619 740B                    	je .L_lambda_simple_arity_check_ok_0136
 23459 0001061B FF742410                	push qword [rsp + 8 * 2]
 23460 0001061F 6A01                    	push 1
 23461 00010621 E9AD080000              	jmp L_error_incorrect_arity_simple
 23462                                  .L_lambda_simple_arity_check_ok_0136:
 23463 00010626 C8000000                	enter 0, 0
 23464 0001062A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23465 0001062E 50                      	push rax
 23466 0001062F 6A01                    	push 1
 23467 00010631 488B0425[60040000]      	mov rax, qword [free_var_140]
 23468 00010639 803805                  	cmp byte [rax], T_closure 
 23469 0001063C 0F858D180000                    jne L_code_ptr_error
 23470                                  
 23471 00010642 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23472                                  
 23473 00010646 53                              push rbx
 23474                                  
 23475 00010647 FF5009                          call SOB_CLOSURE_CODE(rax)
 23476                                  
 23477                                          
 23478 0001064A 483D[02000000]                  	cmp rax, sob_boolean_false
 23479                                  
 23480 00010650 7464                            	je .L_if_else_00b1
 23481 00010652 488B4520                	 	mov rax ,qword[rbp + 8 * (4 + 0)]
 23482 00010656 50                      	push rax
 23483                                  
 23484 00010657 6A01                    	push 1
 23485 00010659 488B0425[10030000]      	mov rax, qword [free_var_98]
 23486                                  	assert_closure(rax)
    42 00010661 803805              <1>  cmp byte [%1], %2
    43 00010664 0F85A4200000        <1>  jne L_error_incorrect_type
 23487 0001066A 50                      	push rax 
 23488 0001066B FF7508                  	push qword [rbp + 8]
 23489 0001066E FF7500                  	push qword [rbp]
 23490 00010671 4883C308                	add rbx ,8*1
 23491                                  	 .L_fix_stack_label_0166:
 23492 00010675 488B5518                	mov rdx, qword[rbp+8*3]
 23493 00010679 4883C203                	add rdx, 3
 23494 0001067D 48C1E203                	shl rdx, 3
 23495 00010681 4889EF                  	mov rdi, rbp
 23496 00010684 4801D7                  	add rdi, rdx
 23497 00010687 4C8B4500                	mov r8, qword[rbp]
 23498 0001068B 4889E9                  	mov rcx, rbp
 23499 0001068E 4883E908                	sub rcx, 8
 23500                                  	 .L_loop_fix_stuck_0166:
 23501 00010692 4839CC                  	cmp rsp, rcx
 23502 00010695 7710                    ja .L_loop_fix_stuck_end_0166
 23503 00010697 488B19                   	mov rbx, qword[rcx]
 23504 0001069A 48891F                  	 mov qword[rdi], rbx
 23505 0001069D 4883EF08                	sub rdi, 8
 23506 000106A1 4883E908                	sub rcx, 8
 23507 000106A5 EBEB                    jmp .L_loop_fix_stuck_0166
 23508                                  	 .L_loop_fix_stuck_end_0166:
 23509 000106A7 4883C708                	add rdi, 8
 23510 000106AB 4889FC                  	 mov rsp, rdi
 23511 000106AE 4C89C5                  	mov rbp, r8
 23512 000106B1 5D                      	pop rbp
 23513 000106B2 FFE0                    	jmp rax 
 23514                                  
 23515 000106B4 EB04                            	jmp .L_if_end_00b1
 23516                                  
 23517                                          	.L_if_else_00b1:
 23518 000106B6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23519                                  
 23520                                          	.L_if_end_00b1:
 23521 000106BA C9                      	leave
 23522 000106BB C21800                  	ret 8 * (2 + 1)
 23523                                  .L_lambda_simple_end_0136:	; new closure is in rax
 23524 000106BE 48890425[78040000]      	mov qword [free_var_143], rax
 23525 000106C6 48B8-                   	mov rax, sob_void
 23525 000106C8 [0000000000000000] 
 23526                                  
 23527 000106D0 4889C7                  	mov rdi, rax
 23528 000106D3 E853080000              	call print_sexpr_if_not_void
 23529                                  
 23530 000106D8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 23531 000106DD E838080000              	call malloc
 23532 000106E2 50                      	push rax
 23533 000106E3 BF00000000              	mov rdi, 8 * 0	; new rib
 23534 000106E8 E82D080000              	call malloc
 23535 000106ED 50                      	push rax
 23536 000106EE BF08000000              	mov rdi, 8 * 1	; extended env
 23537 000106F3 E822080000              	call malloc
 23538 000106F8 488B7D10                	mov rdi, ENV
 23539 000106FC BE00000000              	mov rsi, 0
 23540 00010701 BA01000000              	mov rdx, 1
 23541                                  .L_lambda_simple_env_loop_0137:	; ext_env[i + 1] <-- env[i]
 23542 00010706 4883FE00                	cmp rsi, 0
 23543 0001070A 7410                    	je .L_lambda_simple_env_end_0137
 23544 0001070C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 23545 00010710 48890CD0                	mov qword [rax + 8 * rdx], rcx
 23546 00010714 48FFC6                  	inc rsi
 23547 00010717 48FFC2                  	inc rdx
 23548 0001071A EBEA                    	jmp .L_lambda_simple_env_loop_0137
 23549                                  .L_lambda_simple_env_end_0137:
 23550 0001071C 5B                      	pop rbx
 23551 0001071D BE00000000              	mov rsi, 0
 23552                                  .L_lambda_simple_params_loop_0137:	; copy params
 23553 00010722 4883FE00                	cmp rsi, 0
 23554 00010726 740E                    	je .L_lambda_simple_params_end_0137
 23555 00010728 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 23556 0001072D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 23557 00010731 48FFC6                  	inc rsi
 23558 00010734 EBEC                    	jmp .L_lambda_simple_params_loop_0137
 23559                                  .L_lambda_simple_params_end_0137:
 23560 00010736 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 23561 00010739 4889C3                  	mov rbx, rax
 23562 0001073C 58                      	pop rax
 23563 0001073D C60005                  	mov byte [rax], T_closure
 23564 00010740 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 23565 00010744 48C74009[51070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0137
 23566 0001074C E9AE040000              	jmp .L_lambda_simple_end_0137
 23567                                  .L_lambda_simple_code_0137:	; lambda-simple body
 23568 00010751 48837C241002            	cmp qword [rsp + 8 * 2], 2
 23569 00010757 740B                    	je .L_lambda_simple_arity_check_ok_0137
 23570 00010759 FF742410                	push qword [rsp + 8 * 2]
 23571 0001075D 6A02                    	push 2
 23572 0001075F E96F070000              	jmp L_error_incorrect_arity_simple
 23573                                  .L_lambda_simple_arity_check_ok_0137:
 23574 00010764 C8000000                	enter 0, 0
 23575 00010768 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23576 0001076C 50                      	push rax
 23577 0001076D 6A01                    	push 1
 23578 0001076F 488B0425[08000000]      	mov rax, qword [free_var_1]
 23579 00010777 803805                  	cmp byte [rax], T_closure 
 23580 0001077A 0F854F170000                    jne L_code_ptr_error
 23581                                  
 23582 00010780 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23583                                  
 23584 00010784 53                              push rbx
 23585                                  
 23586 00010785 FF5009                          call SOB_CLOSURE_CODE(rax)
 23587                                  
 23588                                          
 23589 00010788 483D[02000000]                  	cmp rax, sob_boolean_false
 23590                                  
 23591 0001078E 7422                            	je .L_if_else_00ba
 23592 00010790 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 23593 00010794 50                      	push rax
 23594 00010795 6A01                    	push 1
 23595 00010797 488B0425[08000000]      	mov rax, qword [free_var_1]
 23596 0001079F 803805                  	cmp byte [rax], T_closure 
 23597 000107A2 0F8527170000                    jne L_code_ptr_error
 23598                                  
 23599 000107A8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23600                                  
 23601 000107AC 53                              push rbx
 23602                                  
 23603 000107AD FF5009                          call SOB_CLOSURE_CODE(rax)
 23604                                  
 23605                                          
 23606 000107B0 EB0A                            	jmp .L_if_end_00ba
 23607                                  
 23608                                          	.L_if_else_00ba:
 23609 000107B2 48B8-                   	mov rax,L_constants + 2
 23609 000107B4 [0200000000000000] 
 23610                                  
 23611                                          	.L_if_end_00ba:
 23612                                  
 23613 000107BC 483D[02000000]                  	cmp rax, sob_boolean_false
 23614                                  
 23615 000107C2 0F8419010000                    	je .L_if_else_00b2
 23616 000107C8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 23617 000107CC 50                      	push rax
 23618 000107CD 6A01                    	push 1
 23619 000107CF 488B0425[80000000]      	mov rax, qword [free_var_16]
 23620 000107D7 803805                  	cmp byte [rax], T_closure 
 23621 000107DA 0F85EF160000                    jne L_code_ptr_error
 23622                                  
 23623 000107E0 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23624                                  
 23625 000107E4 53                              push rbx
 23626                                  
 23627 000107E5 FF5009                          call SOB_CLOSURE_CODE(rax)
 23628                                  
 23629 000107E8 50                              	push rax
 23630 000107E9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23631 000107ED 50                      	push rax
 23632 000107EE 6A01                    	push 1
 23633 000107F0 488B0425[80000000]      	mov rax, qword [free_var_16]
 23634 000107F8 803805                  	cmp byte [rax], T_closure 
 23635 000107FB 0F85CE160000                    jne L_code_ptr_error
 23636                                  
 23637 00010801 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23638                                  
 23639 00010805 53                              push rbx
 23640                                  
 23641 00010806 FF5009                          call SOB_CLOSURE_CODE(rax)
 23642                                  
 23643 00010809 50                              	push rax
 23644 0001080A 6A02                    	push 2
 23645 0001080C 488B0425[80040000]      	mov rax, qword [free_var_144]
 23646 00010814 803805                  	cmp byte [rax], T_closure 
 23647 00010817 0F85B2160000                    jne L_code_ptr_error
 23648                                  
 23649 0001081D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23650                                  
 23651 00010821 53                              push rbx
 23652                                  
 23653 00010822 FF5009                          call SOB_CLOSURE_CODE(rax)
 23654                                  
 23655                                          
 23656 00010825 483D[02000000]                  	cmp rax, sob_boolean_false
 23657                                  
 23658 0001082B 0F84A1000000                    	je .L_if_else_00b9
 23659 00010831 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 23660 00010835 50                      	push rax
 23661 00010836 6A01                    	push 1
 23662 00010838 488B0425[88000000]      	mov rax, qword [free_var_17]
 23663 00010840 803805                  	cmp byte [rax], T_closure 
 23664 00010843 0F8586160000                    jne L_code_ptr_error
 23665                                  
 23666 00010849 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23667                                  
 23668 0001084D 53                              push rbx
 23669                                  
 23670 0001084E FF5009                          call SOB_CLOSURE_CODE(rax)
 23671                                  
 23672 00010851 50                              	push rax
 23673 00010852 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23674 00010856 50                      	push rax
 23675 00010857 6A01                    	push 1
 23676 00010859 488B0425[88000000]      	mov rax, qword [free_var_17]
 23677 00010861 803805                  	cmp byte [rax], T_closure 
 23678 00010864 0F8565160000                    jne L_code_ptr_error
 23679                                  
 23680 0001086A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23681                                  
 23682 0001086E 53                              push rbx
 23683                                  
 23684 0001086F FF5009                          call SOB_CLOSURE_CODE(rax)
 23685                                  
 23686 00010872 50                              	push rax
 23687                                  
 23688 00010873 6A02                    	push 2
 23689 00010875 488B0425[80040000]      	mov rax, qword [free_var_144]
 23690                                  	assert_closure(rax)
    42 0001087D 803805              <1>  cmp byte [%1], %2
    43 00010880 0F85881E0000        <1>  jne L_error_incorrect_type
 23691 00010886 50                      	push rax 
 23692 00010887 FF7508                  	push qword [rbp + 8]
 23693 0001088A FF7500                  	push qword [rbp]
 23694 0001088D 4883C308                	add rbx ,8*1
 23695                                  	 .L_fix_stack_label_016a:
 23696 00010891 488B5518                	mov rdx, qword[rbp+8*3]
 23697 00010895 4883C203                	add rdx, 3
 23698 00010899 48C1E203                	shl rdx, 3
 23699 0001089D 4889EF                  	mov rdi, rbp
 23700 000108A0 4801D7                  	add rdi, rdx
 23701 000108A3 4C8B4500                	mov r8, qword[rbp]
 23702 000108A7 4889E9                  	mov rcx, rbp
 23703 000108AA 4883E908                	sub rcx, 8
 23704                                  	 .L_loop_fix_stuck_016a:
 23705 000108AE 4839CC                  	cmp rsp, rcx
 23706 000108B1 7710                    ja .L_loop_fix_stuck_end_016a
 23707 000108B3 488B19                   	mov rbx, qword[rcx]
 23708 000108B6 48891F                  	 mov qword[rdi], rbx
 23709 000108B9 4883EF08                	sub rdi, 8
 23710 000108BD 4883E908                	sub rcx, 8
 23711 000108C1 EBEB                    jmp .L_loop_fix_stuck_016a
 23712                                  	 .L_loop_fix_stuck_end_016a:
 23713 000108C3 4883C708                	add rdi, 8
 23714 000108C7 4889FC                  	 mov rsp, rdi
 23715 000108CA 4C89C5                  	mov rbp, r8
 23716 000108CD 5D                      	pop rbp
 23717 000108CE FFE0                    	jmp rax 
 23718                                  
 23719 000108D0 EB0A                            	jmp .L_if_end_00b9
 23720                                  
 23721                                          	.L_if_else_00b9:
 23722 000108D2 48B8-                   	mov rax,L_constants + 2
 23722 000108D4 [0200000000000000] 
 23723                                  
 23724                                          	.L_if_end_00b9:
 23725                                  
 23726 000108DC E91A030000                      	jmp .L_if_end_00b2
 23727                                  
 23728                                          	.L_if_else_00b2:
 23729 000108E1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23730 000108E5 50                      	push rax
 23731 000108E6 6A01                    	push 1
 23732 000108E8 488B0425[30000000]      	mov rax, qword [free_var_6]
 23733 000108F0 803805                  	cmp byte [rax], T_closure 
 23734 000108F3 0F85D6150000                    jne L_code_ptr_error
 23735                                  
 23736 000108F9 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23737                                  
 23738 000108FD 53                              push rbx
 23739                                  
 23740 000108FE FF5009                          call SOB_CLOSURE_CODE(rax)
 23741                                  
 23742                                          
 23743 00010901 483D[02000000]                  	cmp rax, sob_boolean_false
 23744                                  
 23745 00010907 0F8493000000                    	je .L_if_else_00b7
 23746 0001090D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 23747 00010911 50                      	push rax
 23748 00010912 6A01                    	push 1
 23749 00010914 488B0425[30000000]      	mov rax, qword [free_var_6]
 23750 0001091C 803805                  	cmp byte [rax], T_closure 
 23751 0001091F 0F85AA150000                    jne L_code_ptr_error
 23752                                  
 23753 00010925 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23754                                  
 23755 00010929 53                              push rbx
 23756                                  
 23757 0001092A FF5009                          call SOB_CLOSURE_CODE(rax)
 23758                                  
 23759                                          
 23760 0001092D 483D[02000000]                  	cmp rax, sob_boolean_false
 23761                                  
 23762 00010933 745F                            	je .L_if_else_00b8
 23763 00010935 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 23764 00010939 50                      	push rax
 23765 0001093A 6A01                    	push 1
 23766 0001093C 488B0425[98000000]      	mov rax, qword [free_var_19]
 23767 00010944 803805                  	cmp byte [rax], T_closure 
 23768 00010947 0F8582150000                    jne L_code_ptr_error
 23769                                  
 23770 0001094D 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23771                                  
 23772 00010951 53                              push rbx
 23773                                  
 23774 00010952 FF5009                          call SOB_CLOSURE_CODE(rax)
 23775                                  
 23776 00010955 50                              	push rax
 23777 00010956 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23778 0001095A 50                      	push rax
 23779 0001095B 6A01                    	push 1
 23780 0001095D 488B0425[98000000]      	mov rax, qword [free_var_19]
 23781 00010965 803805                  	cmp byte [rax], T_closure 
 23782 00010968 0F8561150000                    jne L_code_ptr_error
 23783                                  
 23784 0001096E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23785                                  
 23786 00010972 53                              push rbx
 23787                                  
 23788 00010973 FF5009                          call SOB_CLOSURE_CODE(rax)
 23789                                  
 23790 00010976 50                              	push rax
 23791 00010977 6A02                    	push 2
 23792 00010979 488B0425[50030000]      	mov rax, qword [free_var_106]
 23793 00010981 803805                  	cmp byte [rax], T_closure 
 23794 00010984 0F8545150000                    jne L_code_ptr_error
 23795                                  
 23796 0001098A 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23797                                  
 23798 0001098E 53                              push rbx
 23799                                  
 23800 0001098F FF5009                          call SOB_CLOSURE_CODE(rax)
 23801                                  
 23802                                          
 23803 00010992 EB0A                            	jmp .L_if_end_00b8
 23804                                  
 23805                                          	.L_if_else_00b8:
 23806 00010994 48B8-                   	mov rax,L_constants + 2
 23806 00010996 [0200000000000000] 
 23807                                  
 23808                                          	.L_if_end_00b8:
 23809                                  
 23810 0001099E EB0A                            	jmp .L_if_end_00b7
 23811                                  
 23812                                          	.L_if_else_00b7:
 23813 000109A0 48B8-                   	mov rax,L_constants + 2
 23813 000109A2 [0200000000000000] 
 23814                                  
 23815                                          	.L_if_end_00b7:
 23816                                  
 23817 000109AA 483D[02000000]                  	cmp rax, sob_boolean_false
 23818                                  
 23819 000109B0 0F84A4000000                    	je .L_if_else_00b3
 23820 000109B6 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 23821 000109BA 50                      	push rax
 23822 000109BB 6A01                    	push 1
 23823 000109BD 488B0425[48040000]      	mov rax, qword [free_var_137]
 23824 000109C5 803805                  	cmp byte [rax], T_closure 
 23825 000109C8 0F8501150000                    jne L_code_ptr_error
 23826                                  
 23827 000109CE 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23828                                  
 23829 000109D2 53                              push rbx
 23830                                  
 23831 000109D3 FF5009                          call SOB_CLOSURE_CODE(rax)
 23832                                  
 23833 000109D6 50                              	push rax
 23834 000109D7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23835 000109DB 50                      	push rax
 23836 000109DC 6A01                    	push 1
 23837 000109DE 488B0425[48040000]      	mov rax, qword [free_var_137]
 23838 000109E6 803805                  	cmp byte [rax], T_closure 
 23839 000109E9 0F85E0140000                    jne L_code_ptr_error
 23840                                  
 23841 000109EF 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23842                                  
 23843 000109F3 53                              push rbx
 23844                                  
 23845 000109F4 FF5009                          call SOB_CLOSURE_CODE(rax)
 23846                                  
 23847 000109F7 50                              	push rax
 23848                                  
 23849 000109F8 6A02                    	push 2
 23850 000109FA 488B0425[80040000]      	mov rax, qword [free_var_144]
 23851                                  	assert_closure(rax)
    42 00010A02 803805              <1>  cmp byte [%1], %2
    43 00010A05 0F85031D0000        <1>  jne L_error_incorrect_type
 23852 00010A0B 50                      	push rax 
 23853 00010A0C FF7508                  	push qword [rbp + 8]
 23854 00010A0F FF7500                  	push qword [rbp]
 23855 00010A12 4883C308                	add rbx ,8*1
 23856                                  	 .L_fix_stack_label_0169:
 23857 00010A16 488B5518                	mov rdx, qword[rbp+8*3]
 23858 00010A1A 4883C203                	add rdx, 3
 23859 00010A1E 48C1E203                	shl rdx, 3
 23860 00010A22 4889EF                  	mov rdi, rbp
 23861 00010A25 4801D7                  	add rdi, rdx
 23862 00010A28 4C8B4500                	mov r8, qword[rbp]
 23863 00010A2C 4889E9                  	mov rcx, rbp
 23864 00010A2F 4883E908                	sub rcx, 8
 23865                                  	 .L_loop_fix_stuck_0169:
 23866 00010A33 4839CC                  	cmp rsp, rcx
 23867 00010A36 7710                    ja .L_loop_fix_stuck_end_0169
 23868 00010A38 488B19                   	mov rbx, qword[rcx]
 23869 00010A3B 48891F                  	 mov qword[rdi], rbx
 23870 00010A3E 4883EF08                	sub rdi, 8
 23871 00010A42 4883E908                	sub rcx, 8
 23872 00010A46 EBEB                    jmp .L_loop_fix_stuck_0169
 23873                                  	 .L_loop_fix_stuck_end_0169:
 23874 00010A48 4883C708                	add rdi, 8
 23875 00010A4C 4889FC                  	 mov rsp, rdi
 23876 00010A4F 4C89C5                  	mov rbp, r8
 23877 00010A52 5D                      	pop rbp
 23878 00010A53 FFE0                    	jmp rax 
 23879                                  
 23880 00010A55 E9A1010000                      	jmp .L_if_end_00b3
 23881                                  
 23882                                          	.L_if_else_00b3:
 23883 00010A5A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23884 00010A5E 50                      	push rax
 23885 00010A5F 6A01                    	push 1
 23886 00010A61 488B0425[20000000]      	mov rax, qword [free_var_4]
 23887 00010A69 803805                  	cmp byte [rax], T_closure 
 23888 00010A6C 0F855D140000                    jne L_code_ptr_error
 23889                                  
 23890 00010A72 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23891                                  
 23892 00010A76 53                              push rbx
 23893                                  
 23894 00010A77 FF5009                          call SOB_CLOSURE_CODE(rax)
 23895                                  
 23896                                          
 23897 00010A7A 483D[02000000]                  	cmp rax, sob_boolean_false
 23898                                  
 23899 00010A80 0F8493000000                    	je .L_if_else_00b5
 23900 00010A86 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 23901 00010A8A 50                      	push rax
 23902 00010A8B 6A01                    	push 1
 23903 00010A8D 488B0425[20000000]      	mov rax, qword [free_var_4]
 23904 00010A95 803805                  	cmp byte [rax], T_closure 
 23905 00010A98 0F8531140000                    jne L_code_ptr_error
 23906                                  
 23907 00010A9E 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23908                                  
 23909 00010AA2 53                              push rbx
 23910                                  
 23911 00010AA3 FF5009                          call SOB_CLOSURE_CODE(rax)
 23912                                  
 23913                                          
 23914 00010AA6 483D[02000000]                  	cmp rax, sob_boolean_false
 23915                                  
 23916 00010AAC 745F                            	je .L_if_else_00b6
 23917 00010AAE 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 23918 00010AB2 50                      	push rax
 23919 00010AB3 6A01                    	push 1
 23920 00010AB5 488B0425[90000000]      	mov rax, qword [free_var_18]
 23921 00010ABD 803805                  	cmp byte [rax], T_closure 
 23922 00010AC0 0F8509140000                    jne L_code_ptr_error
 23923                                  
 23924 00010AC6 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23925                                  
 23926 00010ACA 53                              push rbx
 23927                                  
 23928 00010ACB FF5009                          call SOB_CLOSURE_CODE(rax)
 23929                                  
 23930 00010ACE 50                              	push rax
 23931 00010ACF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23932 00010AD3 50                      	push rax
 23933 00010AD4 6A01                    	push 1
 23934 00010AD6 488B0425[90000000]      	mov rax, qword [free_var_18]
 23935 00010ADE 803805                  	cmp byte [rax], T_closure 
 23936 00010AE1 0F85E8130000                    jne L_code_ptr_error
 23937                                  
 23938 00010AE7 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23939                                  
 23940 00010AEB 53                              push rbx
 23941                                  
 23942 00010AEC FF5009                          call SOB_CLOSURE_CODE(rax)
 23943                                  
 23944 00010AEF 50                              	push rax
 23945 00010AF0 6A02                    	push 2
 23946 00010AF2 488B0425[50030000]      	mov rax, qword [free_var_106]
 23947 00010AFA 803805                  	cmp byte [rax], T_closure 
 23948 00010AFD 0F85CC130000                    jne L_code_ptr_error
 23949                                  
 23950 00010B03 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 23951                                  
 23952 00010B07 53                              push rbx
 23953                                  
 23954 00010B08 FF5009                          call SOB_CLOSURE_CODE(rax)
 23955                                  
 23956                                          
 23957 00010B0B EB0A                            	jmp .L_if_end_00b6
 23958                                  
 23959                                          	.L_if_else_00b6:
 23960 00010B0D 48B8-                   	mov rax,L_constants + 2
 23960 00010B0F [0200000000000000] 
 23961                                  
 23962                                          	.L_if_end_00b6:
 23963                                  
 23964 00010B17 EB0A                            	jmp .L_if_end_00b5
 23965                                  
 23966                                          	.L_if_else_00b5:
 23967 00010B19 48B8-                   	mov rax,L_constants + 2
 23967 00010B1B [0200000000000000] 
 23968                                  
 23969                                          	.L_if_end_00b5:
 23970                                  
 23971 00010B23 483D[02000000]                  	cmp rax, sob_boolean_false
 23972                                  
 23973 00010B29 7469                            	je .L_if_else_00b4
 23974 00010B2B 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 23975 00010B2F 50                      	push rax
 23976 00010B30 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 23977 00010B34 50                      	push rax
 23978                                  
 23979 00010B35 6A02                    	push 2
 23980 00010B37 488B0425[F0030000]      	mov rax, qword [free_var_126]
 23981                                  	assert_closure(rax)
    42 00010B3F 803805              <1>  cmp byte [%1], %2
    43 00010B42 0F85C61B0000        <1>  jne L_error_incorrect_type
 23982 00010B48 50                      	push rax 
 23983 00010B49 FF7508                  	push qword [rbp + 8]
 23984 00010B4C FF7500                  	push qword [rbp]
 23985 00010B4F 4883C308                	add rbx ,8*1
 23986                                  	 .L_fix_stack_label_0168:
 23987 00010B53 488B5518                	mov rdx, qword[rbp+8*3]
 23988 00010B57 4883C203                	add rdx, 3
 23989 00010B5B 48C1E203                	shl rdx, 3
 23990 00010B5F 4889EF                  	mov rdi, rbp
 23991 00010B62 4801D7                  	add rdi, rdx
 23992 00010B65 4C8B4500                	mov r8, qword[rbp]
 23993 00010B69 4889E9                  	mov rcx, rbp
 23994 00010B6C 4883E908                	sub rcx, 8
 23995                                  	 .L_loop_fix_stuck_0168:
 23996 00010B70 4839CC                  	cmp rsp, rcx
 23997 00010B73 7710                    ja .L_loop_fix_stuck_end_0168
 23998 00010B75 488B19                   	mov rbx, qword[rcx]
 23999 00010B78 48891F                  	 mov qword[rdi], rbx
 24000 00010B7B 4883EF08                	sub rdi, 8
 24001 00010B7F 4883E908                	sub rcx, 8
 24002 00010B83 EBEB                    jmp .L_loop_fix_stuck_0168
 24003                                  	 .L_loop_fix_stuck_end_0168:
 24004 00010B85 4883C708                	add rdi, 8
 24005 00010B89 4889FC                  	 mov rsp, rdi
 24006 00010B8C 4C89C5                  	mov rbp, r8
 24007 00010B8F 5D                      	pop rbp
 24008 00010B90 FFE0                    	jmp rax 
 24009                                  
 24010 00010B92 EB67                            	jmp .L_if_end_00b4
 24011                                  
 24012                                          	.L_if_else_00b4:
 24013 00010B94 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 24014 00010B98 50                      	push rax
 24015 00010B99 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 24016 00010B9D 50                      	push rax
 24017                                  
 24018 00010B9E 6A02                    	push 2
 24019 00010BA0 488B0425[B8010000]      	mov rax, qword [free_var_55]
 24020                                  	assert_closure(rax)
    42 00010BA8 803805              <1>  cmp byte [%1], %2
    43 00010BAB 0F855D1B0000        <1>  jne L_error_incorrect_type
 24021 00010BB1 50                      	push rax 
 24022 00010BB2 FF7508                  	push qword [rbp + 8]
 24023 00010BB5 FF7500                  	push qword [rbp]
 24024 00010BB8 4883C308                	add rbx ,8*1
 24025                                  	 .L_fix_stack_label_0167:
 24026 00010BBC 488B5518                	mov rdx, qword[rbp+8*3]
 24027 00010BC0 4883C203                	add rdx, 3
 24028 00010BC4 48C1E203                	shl rdx, 3
 24029 00010BC8 4889EF                  	mov rdi, rbp
 24030 00010BCB 4801D7                  	add rdi, rdx
 24031 00010BCE 4C8B4500                	mov r8, qword[rbp]
 24032 00010BD2 4889E9                  	mov rcx, rbp
 24033 00010BD5 4883E908                	sub rcx, 8
 24034                                  	 .L_loop_fix_stuck_0167:
 24035 00010BD9 4839CC                  	cmp rsp, rcx
 24036 00010BDC 7710                    ja .L_loop_fix_stuck_end_0167
 24037 00010BDE 488B19                   	mov rbx, qword[rcx]
 24038 00010BE1 48891F                  	 mov qword[rdi], rbx
 24039 00010BE4 4883EF08                	sub rdi, 8
 24040 00010BE8 4883E908                	sub rcx, 8
 24041 00010BEC EBEB                    jmp .L_loop_fix_stuck_0167
 24042                                  	 .L_loop_fix_stuck_end_0167:
 24043 00010BEE 4883C708                	add rdi, 8
 24044 00010BF2 4889FC                  	 mov rsp, rdi
 24045 00010BF5 4C89C5                  	mov rbp, r8
 24046 00010BF8 5D                      	pop rbp
 24047 00010BF9 FFE0                    	jmp rax 
 24048                                  
 24049                                          	.L_if_end_00b4:
 24050                                  
 24051                                          	.L_if_end_00b3:
 24052                                  
 24053                                          	.L_if_end_00b2:
 24054 00010BFB C9                      	leave
 24055 00010BFC C22000                  	ret 8 * (2 + 2)
 24056                                  .L_lambda_simple_end_0137:	; new closure is in rax
 24057 00010BFF 48890425[80040000]      	mov qword [free_var_144], rax
 24058 00010C07 48B8-                   	mov rax, sob_void
 24058 00010C09 [0000000000000000] 
 24059                                  
 24060 00010C11 4889C7                  	mov rdi, rax
 24061 00010C14 E812030000              	call print_sexpr_if_not_void
 24062                                  
 24063 00010C19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 24064 00010C1E E8F7020000              	call malloc
 24065 00010C23 50                      	push rax
 24066 00010C24 BF00000000              	mov rdi, 8 * 0	; new rib
 24067 00010C29 E8EC020000              	call malloc
 24068 00010C2E 50                      	push rax
 24069 00010C2F BF08000000              	mov rdi, 8 * 1	; extended env
 24070 00010C34 E8E1020000              	call malloc
 24071 00010C39 488B7D10                	mov rdi, ENV
 24072 00010C3D BE00000000              	mov rsi, 0
 24073 00010C42 BA01000000              	mov rdx, 1
 24074                                  .L_lambda_simple_env_loop_0138:	; ext_env[i + 1] <-- env[i]
 24075 00010C47 4883FE00                	cmp rsi, 0
 24076 00010C4B 7410                    	je .L_lambda_simple_env_end_0138
 24077 00010C4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 24078 00010C51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 24079 00010C55 48FFC6                  	inc rsi
 24080 00010C58 48FFC2                  	inc rdx
 24081 00010C5B EBEA                    	jmp .L_lambda_simple_env_loop_0138
 24082                                  .L_lambda_simple_env_end_0138:
 24083 00010C5D 5B                      	pop rbx
 24084 00010C5E BE00000000              	mov rsi, 0
 24085                                  .L_lambda_simple_params_loop_0138:	; copy params
 24086 00010C63 4883FE00                	cmp rsi, 0
 24087 00010C67 740E                    	je .L_lambda_simple_params_end_0138
 24088 00010C69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 24089 00010C6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 24090 00010C72 48FFC6                  	inc rsi
 24091 00010C75 EBEC                    	jmp .L_lambda_simple_params_loop_0138
 24092                                  .L_lambda_simple_params_end_0138:
 24093 00010C77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 24094 00010C7A 4889C3                  	mov rbx, rax
 24095 00010C7D 58                      	pop rax
 24096 00010C7E C60005                  	mov byte [rax], T_closure
 24097 00010C81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 24098 00010C85 48C74009[920C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0138
 24099 00010C8D E985010000              	jmp .L_lambda_simple_end_0138
 24100                                  .L_lambda_simple_code_0138:	; lambda-simple body
 24101 00010C92 48837C241002            	cmp qword [rsp + 8 * 2], 2
 24102 00010C98 740B                    	je .L_lambda_simple_arity_check_ok_0138
 24103 00010C9A FF742410                	push qword [rsp + 8 * 2]
 24104 00010C9E 6A02                    	push 2
 24105 00010CA0 E92E020000              	jmp L_error_incorrect_arity_simple
 24106                                  .L_lambda_simple_arity_check_ok_0138:
 24107 00010CA5 C8000000                	enter 0, 0
 24108 00010CA9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 24109 00010CAD 50                      	push rax
 24110 00010CAE 6A01                    	push 1
 24111 00010CB0 488B0425[00000000]      	mov rax, qword [free_var_0]
 24112 00010CB8 803805                  	cmp byte [rax], T_closure 
 24113 00010CBB 0F850E120000                    jne L_code_ptr_error
 24114                                  
 24115 00010CC1 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 24116                                  
 24117 00010CC5 53                              push rbx
 24118                                  
 24119 00010CC6 FF5009                          call SOB_CLOSURE_CODE(rax)
 24120                                  
 24121                                          
 24122 00010CC9 483D[02000000]                  	cmp rax, sob_boolean_false
 24123                                  
 24124 00010CCF 740F                            	je .L_if_else_00bb
 24125 00010CD1 48B8-                   	mov rax,L_constants + 2
 24125 00010CD3 [0200000000000000] 
 24126                                  
 24127 00010CDB E933010000                      	jmp .L_if_end_00bb
 24128                                  
 24129                                          	.L_if_else_00bb:
 24130 00010CE0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 24131 00010CE4 50                      	push rax
 24132 00010CE5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 24133 00010CE9 50                      	push rax
 24134 00010CEA 6A01                    	push 1
 24135 00010CEC 488B0425[C0010000]      	mov rax, qword [free_var_56]
 24136 00010CF4 803805                  	cmp byte [rax], T_closure 
 24137 00010CF7 0F85D2110000                    jne L_code_ptr_error
 24138                                  
 24139 00010CFD 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 24140                                  
 24141 00010D01 53                              push rbx
 24142                                  
 24143 00010D02 FF5009                          call SOB_CLOSURE_CODE(rax)
 24144                                  
 24145 00010D05 50                              	push rax
 24146 00010D06 6A02                    	push 2
 24147 00010D08 488B0425[B8010000]      	mov rax, qword [free_var_55]
 24148 00010D10 803805                  	cmp byte [rax], T_closure 
 24149 00010D13 0F85B6110000                    jne L_code_ptr_error
 24150                                  
 24151 00010D19 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 24152                                  
 24153 00010D1D 53                              push rbx
 24154                                  
 24155 00010D1E FF5009                          call SOB_CLOSURE_CODE(rax)
 24156                                  
 24157                                          
 24158 00010D21 483D[02000000]                  	cmp rax, sob_boolean_false
 24159                                  
 24160 00010D27 7467                            	je .L_if_else_00bc
 24161 00010D29 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 24162 00010D2D 50                      	push rax
 24163                                  
 24164 00010D2E 6A01                    	push 1
 24165 00010D30 488B0425[80000000]      	mov rax, qword [free_var_16]
 24166                                  	assert_closure(rax)
    42 00010D38 803805              <1>  cmp byte [%1], %2
    43 00010D3B 0F85CD190000        <1>  jne L_error_incorrect_type
 24167 00010D41 50                      	push rax 
 24168 00010D42 FF7508                  	push qword [rbp + 8]
 24169 00010D45 FF7500                  	push qword [rbp]
 24170 00010D48 4883C308                	add rbx ,8*1
 24171                                  	 .L_fix_stack_label_016c:
 24172 00010D4C 488B5518                	mov rdx, qword[rbp+8*3]
 24173 00010D50 4883C203                	add rdx, 3
 24174 00010D54 48C1E203                	shl rdx, 3
 24175 00010D58 4889EF                  	mov rdi, rbp
 24176 00010D5B 4801D7                  	add rdi, rdx
 24177 00010D5E 4C8B4500                	mov r8, qword[rbp]
 24178 00010D62 4889E9                  	mov rcx, rbp
 24179 00010D65 4883E908                	sub rcx, 8
 24180                                  	 .L_loop_fix_stuck_016c:
 24181 00010D69 4839CC                  	cmp rsp, rcx
 24182 00010D6C 7710                    ja .L_loop_fix_stuck_end_016c
 24183 00010D6E 488B19                   	mov rbx, qword[rcx]
 24184 00010D71 48891F                  	 mov qword[rdi], rbx
 24185 00010D74 4883EF08                	sub rdi, 8
 24186 00010D78 4883E908                	sub rcx, 8
 24187 00010D7C EBEB                    jmp .L_loop_fix_stuck_016c
 24188                                  	 .L_loop_fix_stuck_end_016c:
 24189 00010D7E 4883C708                	add rdi, 8
 24190 00010D82 4889FC                  	 mov rsp, rdi
 24191 00010D85 4C89C5                  	mov rbp, r8
 24192 00010D88 5D                      	pop rbp
 24193 00010D89 FFE0                    	jmp rax 
 24194                                  
 24195 00010D8B E983000000                      	jmp .L_if_end_00bc
 24196                                  
 24197                                          	.L_if_else_00bc:
 24198 00010D90 488B4528                	 	mov rax ,qword[rbp + 8 * (4 + 1)]
 24199 00010D94 50                      	push rax
 24200 00010D95 6A01                    	push 1
 24201 00010D97 488B0425[88000000]      	mov rax, qword [free_var_17]
 24202 00010D9F 803805                  	cmp byte [rax], T_closure 
 24203 00010DA2 0F8527110000                    jne L_code_ptr_error
 24204                                  
 24205 00010DA8 488B5801                        mov rbx, SOB_CLOSURE_ENV(rax)
 24206                                  
 24207 00010DAC 53                              push rbx
 24208                                  
 24209 00010DAD FF5009                          call SOB_CLOSURE_CODE(rax)
 24210                                  
 24211 00010DB0 50                              	push rax
 24212 00010DB1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 24213 00010DB5 50                      	push rax
 24214                                  
 24215 00010DB6 6A02                    	push 2
 24216 00010DB8 488B0425[88040000]      	mov rax, qword [free_var_145]
 24217                                  	assert_closure(rax)
    42 00010DC0 803805              <1>  cmp byte [%1], %2
    43 00010DC3 0F8545190000        <1>  jne L_error_incorrect_type
 24218 00010DC9 50                      	push rax 
 24219 00010DCA FF7508                  	push qword [rbp + 8]
 24220 00010DCD FF7500                  	push qword [rbp]
 24221 00010DD0 4883C308                	add rbx ,8*1
 24222                                  	 .L_fix_stack_label_016b:
 24223 00010DD4 488B5518                	mov rdx, qword[rbp+8*3]
 24224 00010DD8 4883C203                	add rdx, 3
 24225 00010DDC 48C1E203                	shl rdx, 3
 24226 00010DE0 4889EF                  	mov rdi, rbp
 24227 00010DE3 4801D7                  	add rdi, rdx
 24228 00010DE6 4C8B4500                	mov r8, qword[rbp]
 24229 00010DEA 4889E9                  	mov rcx, rbp
 24230 00010DED 4883E908                	sub rcx, 8
 24231                                  	 .L_loop_fix_stuck_016b:
 24232 00010DF1 4839CC                  	cmp rsp, rcx
 24233 00010DF4 7710                    ja .L_loop_fix_stuck_end_016b
 24234 00010DF6 488B19                   	mov rbx, qword[rcx]
 24235 00010DF9 48891F                  	 mov qword[rdi], rbx
 24236 00010DFC 4883EF08                	sub rdi, 8
 24237 00010E00 4883E908                	sub rcx, 8
 24238 00010E04 EBEB                    jmp .L_loop_fix_stuck_016b
 24239                                  	 .L_loop_fix_stuck_end_016b:
 24240 00010E06 4883C708                	add rdi, 8
 24241 00010E0A 4889FC                  	 mov rsp, rdi
 24242 00010E0D 4C89C5                  	mov rbp, r8
 24243 00010E10 5D                      	pop rbp
 24244 00010E11 FFE0                    	jmp rax 
 24245                                  
 24246                                          	.L_if_end_00bc:
 24247                                  
 24248                                          	.L_if_end_00bb:
 24249 00010E13 C9                      	leave
 24250 00010E14 C22000                  	ret 8 * (2 + 2)
 24251                                  .L_lambda_simple_end_0138:	; new closure is in rax
 24252 00010E17 48890425[88040000]      	mov qword [free_var_145], rax
 24253 00010E1F 48B8-                   	mov rax, sob_void
 24253 00010E21 [0000000000000000] 
 24254                                  
 24255 00010E29 4889C7                  	mov rdi, rax
 24256 00010E2C E8FA000000              	call print_sexpr_if_not_void
 24257                                  
 24258 00010E31 48B8-                   	mov rax,L_constants + 3
 24258 00010E33 [0300000000000000] 
 24259                                  
 24260 00010E3B 4889C7                  	mov rdi, rax
 24261 00010E3E E8E8000000              	call print_sexpr_if_not_void
 24262                                  
 24263 00010E43 48BF-                           mov rdi, fmt_memory_usage
 24263 00010E45 [7002000000000000] 
 24264 00010E4D 488B3425[F7020000]              mov rsi, qword [top_of_memory]
 24265 00010E55 4881EE[90040000]                sub rsi, memory
 24266 00010E5C B800000000                      mov rax, 0
 24267                                  	ENTER
    33 00010E61 C8000000            <1>  enter 0, 0
    34 00010E65 4883E4F0            <1>  and rsp, ~15
 24268 00010E69 E8(00000000)                    call printf
 24269                                  	LEAVE
    38 00010E6E C9                  <1>  leave
 24270 00010E6F C9                      	leave
 24271 00010E70 C3                      	ret
 24272                                  
 24273                                  L_error_non_closure:
 24274 00010E71 488B3C25[00000000]              mov rdi, qword [stderr]
 24275 00010E79 48BE-                           mov rsi, fmt_non_closure
 24275 00010E7B [A702000000000000] 
 24276 00010E83 B800000000                      mov rax, 0
 24277                                  	ENTER
    33 00010E88 C8000000            <1>  enter 0, 0
    34 00010E8C 4883E4F0            <1>  and rsp, ~15
 24278 00010E90 E8(00000000)                    call fprintf
 24279                                  	LEAVE
    38 00010E95 C9                  <1>  leave
 24280 00010E96 48C7C0FEFFFFFF                  mov rax, -2
 24281 00010E9D E8(00000000)                    call exit
 24282                                  
 24283                                  L_error_improper_list:
 24284 00010EA2 488B3C25[00000000]      	mov rdi, qword [stderr]
 24285 00010EAA 48BE-                   	mov rsi, fmt_error_improper_list
 24285 00010EAC [CF02000000000000] 
 24286 00010EB4 B800000000              	mov rax, 0
 24287                                  	ENTER
    33 00010EB9 C8000000            <1>  enter 0, 0
    34 00010EBD 4883E4F0            <1>  and rsp, ~15
 24288 00010EC1 E8(00000000)            	call fprintf
 24289                                  	LEAVE
    38 00010EC6 C9                  <1>  leave
 24290 00010EC7 48C7C0F9FFFFFF          	mov rax, -7
 24291 00010ECE E8(00000000)            	call exit
 24292                                  
 24293                                  L_error_incorrect_arity_simple:
 24294 00010ED3 488B3C25[00000000]              mov rdi, qword [stderr]
 24295 00010EDB 48BE-                           mov rsi, fmt_incorrect_arity_simple
 24295 00010EDD [1102000000000000] 
 24296 00010EE5 EB12                            jmp L_error_incorrect_arity_common
 24297                                  L_error_incorrect_arity_opt:
 24298 00010EE7 488B3C25[00000000]              mov rdi, qword [stderr]
 24299 00010EEF 48BE-                           mov rsi, fmt_incorrect_arity_opt
 24299 00010EF1 [3C02000000000000] 
 24300                                  L_error_incorrect_arity_common:
 24301 00010EF9 5A                              pop rdx
 24302 00010EFA 59                              pop rcx
 24303 00010EFB B800000000                      mov rax, 0
 24304                                  	ENTER
    33 00010F00 C8000000            <1>  enter 0, 0
    34 00010F04 4883E4F0            <1>  and rsp, ~15
 24305 00010F08 E8(00000000)                    call fprintf
 24306                                  	LEAVE
    38 00010F0D C9                  <1>  leave
 24307 00010F0E 48C7C0FAFFFFFF                  mov rax, -6
 24308 00010F15 E8(00000000)                    call exit
 24309                                  
 24310                                  section .data
 24311                                  fmt_incorrect_arity_simple:
 24312 00000211 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 24312 0000021A 74656420256C642061-
 24312 00000223 7267756D656E74732C-
 24312 0000022C 206275742067697665-
 24312 00000235 6E20256C640A00     
 24313                                  fmt_incorrect_arity_opt:
 24314 0000023C 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 24314 00000245 746564206174206C65-
 24314 0000024E 61737420256C642061-
 24314 00000257 7267756D656E74732C-
 24314 00000260 206275742067697665-
 24314 00000269 6E20256C640A00     
 24315                                  fmt_memory_usage:
 24316 00000270 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 24316 00000279 6420256C6420627974-
 24316 00000282 6573206F662064796E-
 24316 0000028B 616D6963616C6C792D-
 24316 00000294 616C6C6F6361746564-
 24316 0000029D 206D656D6F72790A0A-
 24316 000002A6 00                 
 24317                                  fmt_non_closure:
 24318 000002A7 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 24318 000002B0 7074696E6720746F20-
 24318 000002B9 6170706C792061206E-
 24318 000002C2 6F6E2D636C6F737572-
 24318 000002CB 65210A00           
 24319                                  fmt_error_improper_list:
 24320 000002CF 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 24320 000002D8 7267756D656E742069-
 24320 000002E1 73206E6F7420612070-
 24320 000002EA 726F706572206C6973-
 24320 000002F3 74210A00           
 24321                                  
 24322                                  section .bss
 24323                                  memory:
 24324 00000490 <res 40000000h>         	resb gbytes(1)
 24325                                  
 24326                                  section .data
 24327                                  top_of_memory:
 24328 000002F7 [9004000000000000]              dq memory
 24329                                  
 24330                                  section .text
 24331                                  malloc:
 24332 00010F1A 488B0425[F7020000]              mov rax, qword [top_of_memory]
 24333 00010F22 48013C25[F7020000]              add qword [top_of_memory], rdi
 24334 00010F2A C3                              ret
 24335                                          
 24336                                  print_sexpr_if_not_void:
 24337 00010F2B 4881FF[00000000]        	cmp rdi, sob_void
 24338 00010F32 7501                    	jne print_sexpr
 24339 00010F34 C3                      	ret
 24340                                  
 24341                                  section .data
 24342                                  fmt_void:
 24343 000002FF 233C766F69643E00        	db `#<void>\0`
 24344                                  fmt_nil:
 24345 00000307 282900                  	db `()\0`
 24346                                  fmt_boolean_false:
 24347 0000030A 236600                  	db `#f\0`
 24348                                  fmt_boolean_true:
 24349 0000030D 237400                  	db `#t\0`
 24350                                  fmt_char_backslash:
 24351 00000310 235C5C00                	db `#\\\\\0`
 24352                                  fmt_char_dquote:
 24353 00000314 235C2200                	db `#\\"\0`
 24354                                  fmt_char_simple:
 24355 00000318 235C256300              	db `#\\%c\0`
 24356                                  fmt_char_null:
 24357 0000031D 235C6E756C00            	db `#\\nul\0`
 24358                                  fmt_char_bell:
 24359 00000323 235C62656C6C00          	db `#\\bell\0`
 24360                                  fmt_char_backspace:
 24361 0000032A 235C6261636B737061-     	db `#\\backspace\0`
 24361 00000333 636500             
 24362                                  fmt_char_tab:
 24363 00000336 235C74616200            	db `#\\tab\0`
 24364                                  fmt_char_newline:
 24365 0000033C 235C6E65776C696E65-     	db `#\\newline\0`
 24365 00000345 00                 
 24366                                  fmt_char_formfeed:
 24367 00000346 235C7061676500          	db `#\\page\0`
 24368                                  fmt_char_return:
 24369 0000034D 235C72657475726E00      	db `#\\return\0`
 24370                                  fmt_char_escape:
 24371 00000356 235C65736300            	db `#\\esc\0`
 24372                                  fmt_char_space:
 24373 0000035C 235C737061636500        	db `#\\space\0`
 24374                                  fmt_char_hex:
 24375 00000364 235C782530325800        	db `#\\x%02X\0`
 24376                                  fmt_closure:
 24377 0000036C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 24377 00000375 206174203078253038-
 24377 0000037E 5820656E763D307825-
 24377 00000387 30385820636F64653D-
 24377 00000390 3078253038583E00   
 24378                                  fmt_lparen:
 24379 00000398 2800                    	db `(\0`
 24380                                  fmt_dotted_pair:
 24381 0000039A 202E2000                	db ` . \0`
 24382                                  fmt_rparen:
 24383 0000039E 2900                    	db `)\0`
 24384                                  fmt_space:
 24385 000003A0 2000                    	db ` \0`
 24386                                  fmt_empty_vector:
 24387 000003A2 23282900                	db `#()\0`
 24388                                  fmt_vector:
 24389 000003A6 232800                  	db `#(\0`
 24390                                  fmt_real:
 24391 000003A9 256600                  	db `%f\0`
 24392                                  fmt_fraction:
 24393 000003AC 256C642F256C6400        	db `%ld/%ld\0`
 24394                                  fmt_zero:
 24395 000003B4 3000                    	db `0\0`
 24396                                  fmt_int:
 24397 000003B6 256C6400                	db `%ld\0`
 24398                                  fmt_unknown_sexpr_error:
 24399 000003BA 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
 24399 000003C3 6F723A20556E6B6E6F-
 24399 000003CC 776E2074797065206F-
 24399 000003D5 662073657870722028-
 24399 000003DE 3078253032582920   
 24400 000003E6 617420616464726573-     	db `at address 0x%08X\n\n\0`
 24400 000003EF 73203078253038580A-
 24400 000003F8 0A00               
 24401                                  fmt_dquote:
 24402 000003FA 2200                    	db `\"\0`
 24403                                  fmt_string_char:
 24404 000003FC 256300                          db `%c\0`
 24405                                  fmt_string_char_7:
 24406 000003FF 5C6100                          db `\\a\0`
 24407                                  fmt_string_char_8:
 24408 00000402 5C6200                          db `\\b\0`
 24409                                  fmt_string_char_9:
 24410 00000405 5C7400                          db `\\t\0`
 24411                                  fmt_string_char_10:
 24412 00000408 5C6E00                          db `\\n\0`
 24413                                  fmt_string_char_11:
 24414 0000040B 5C7600                          db `\\v\0`
 24415                                  fmt_string_char_12:
 24416 0000040E 5C6600                          db `\\f\0`
 24417                                  fmt_string_char_13:
 24418 00000411 5C7200                          db `\\r\0`
 24419                                  fmt_string_char_34:
 24420 00000414 5C2200                          db `\\"\0`
 24421                                  fmt_string_char_92:
 24422 00000417 5C5C00                          db `\\\\\0`
 24423                                  fmt_string_char_hex:
 24424 0000041A 5C7825583B00                    db `\\x%X;\0`
 24425                                  
 24426                                  section .text
 24427                                  
 24428                                  print_sexpr:
 24429                                  	ENTER
    33 00010F35 C8000000            <1>  enter 0, 0
    34 00010F39 4883E4F0            <1>  and rsp, ~15
 24430 00010F3D 8A07                    	mov al, byte [rdi]
 24431 00010F3F 3C00                    	cmp al, T_void
 24432 00010F41 744D                    	je .Lvoid
 24433 00010F43 3C01                    	cmp al, T_nil
 24434 00010F45 7458                    	je .Lnil
 24435 00010F47 3C09                    	cmp al, T_boolean_false
 24436 00010F49 7463                    	je .Lboolean_false
 24437 00010F4B 3C0A                    	cmp al, T_boolean_true
 24438 00010F4D 746E                    	je .Lboolean_true
 24439 00010F4F 3C02                    	cmp al, T_char
 24440 00010F51 7479                    	je .Lchar
 24441 00010F53 3C04                    	cmp al, T_symbol
 24442 00010F55 0F84BB010000            	je .Lsymbol
 24443 00010F5B 3C21                    	cmp al, T_pair
 24444 00010F5D 0F84D6010000            	je .Lpair
 24445 00010F63 3C22                    	cmp al, T_vector
 24446 00010F65 0F849F020000            	je .Lvector
 24447 00010F6B 3C05                    	cmp al, T_closure
 24448 00010F6D 0F8489010000            	je .Lclosure
 24449 00010F73 3C12                    	cmp al, T_real
 24450 00010F75 0F8430030000            	je .Lreal
 24451 00010F7B 3C11                    	cmp al, T_rational
 24452 00010F7D 0F8456030000            	je .Lrational
 24453 00010F83 3C03                    	cmp al, T_string
 24454 00010F85 0F848F030000            	je .Lstring
 24455                                  
 24456 00010F8B E9C7040000              	jmp .Lunknown_sexpr_type
 24457                                  
 24458                                  .Lvoid:
 24459 00010F90 48BF-                   	mov rdi, fmt_void
 24459 00010F92 [FF02000000000000] 
 24460 00010F9A E9F5040000              	jmp .Lemit
 24461                                  
 24462                                  .Lnil:
 24463 00010F9F 48BF-                   	mov rdi, fmt_nil
 24463 00010FA1 [0703000000000000] 
 24464 00010FA9 E9E6040000              	jmp .Lemit
 24465                                  
 24466                                  .Lboolean_false:
 24467 00010FAE 48BF-                   	mov rdi, fmt_boolean_false
 24467 00010FB0 [0A03000000000000] 
 24468 00010FB8 E9D7040000              	jmp .Lemit
 24469                                  
 24470                                  .Lboolean_true:
 24471 00010FBD 48BF-                   	mov rdi, fmt_boolean_true
 24471 00010FBF [0D03000000000000] 
 24472 00010FC7 E9C8040000              	jmp .Lemit
 24473                                  
 24474                                  .Lchar:
 24475 00010FCC 8A4701                  	mov al, byte [rdi + 1]
 24476 00010FCF 3C20                    	cmp al, ' '
 24477 00010FD1 7E28                    	jle .Lchar_whitespace
 24478 00010FD3 3C5C                    	cmp al, 92 		; backslash
 24479 00010FD5 0F847C000000            	je .Lchar_backslash
 24480 00010FDB 3C22                    	cmp al, '"'
 24481 00010FDD 0F8483000000            	je .Lchar_dquote
 24482 00010FE3 4825FF000000            	and rax, 255
 24483 00010FE9 48BF-                   	mov rdi, fmt_char_simple
 24483 00010FEB [1803000000000000] 
 24484 00010FF3 4889C6                  	mov rsi, rax
 24485 00010FF6 E999040000              	jmp .Lemit
 24486                                  
 24487                                  .Lchar_whitespace:
 24488 00010FFB 3C00                    	cmp al, 0
 24489 00010FFD 7476                    	je .Lchar_null
 24490 00010FFF 3C07                    	cmp al, 7
 24491 00011001 0F847D000000            	je .Lchar_bell
 24492 00011007 3C08                    	cmp al, 8
 24493 00011009 0F8484000000            	je .Lchar_backspace
 24494 0001100F 3C09                    	cmp al, 9
 24495 00011011 0F848B000000            	je .Lchar_tab
 24496 00011017 3C0A                    	cmp al, 10
 24497 00011019 0F8492000000            	je .Lchar_newline
 24498 0001101F 3C0C                    	cmp al, 12
 24499 00011021 0F8499000000            	je .Lchar_formfeed
 24500 00011027 3C0D                    	cmp al, 13
 24501 00011029 0F84A0000000            	je .Lchar_return
 24502 0001102F 3C1B                    	cmp al, 27
 24503 00011031 0F84A7000000            	je .Lchar_escape
 24504 00011037 4825FF000000            	and rax, 255
 24505 0001103D 3C20                    	cmp al, ' '
 24506 0001103F 0F84A8000000            	je .Lchar_space
 24507 00011045 48BF-                   	mov rdi, fmt_char_hex
 24507 00011047 [6403000000000000] 
 24508 0001104F 4889C6                  	mov rsi, rax
 24509 00011052 E93D040000              	jmp .Lemit	
 24510                                  
 24511                                  .Lchar_backslash:
 24512 00011057 48BF-                   	mov rdi, fmt_char_backslash
 24512 00011059 [1003000000000000] 
 24513 00011061 E92E040000              	jmp .Lemit
 24514                                  
 24515                                  .Lchar_dquote:
 24516 00011066 48BF-                   	mov rdi, fmt_char_dquote
 24516 00011068 [1403000000000000] 
 24517 00011070 E91F040000              	jmp .Lemit
 24518                                  
 24519                                  .Lchar_null:
 24520 00011075 48BF-                   	mov rdi, fmt_char_null
 24520 00011077 [1D03000000000000] 
 24521 0001107F E910040000              	jmp .Lemit
 24522                                  
 24523                                  .Lchar_bell:
 24524 00011084 48BF-                   	mov rdi, fmt_char_bell
 24524 00011086 [2303000000000000] 
 24525 0001108E E901040000              	jmp .Lemit
 24526                                  
 24527                                  .Lchar_backspace:
 24528 00011093 48BF-                   	mov rdi, fmt_char_backspace
 24528 00011095 [2A03000000000000] 
 24529 0001109D E9F2030000              	jmp .Lemit
 24530                                  
 24531                                  .Lchar_tab:
 24532 000110A2 48BF-                   	mov rdi, fmt_char_tab
 24532 000110A4 [3603000000000000] 
 24533 000110AC E9E3030000              	jmp .Lemit
 24534                                  
 24535                                  .Lchar_newline:
 24536 000110B1 48BF-                   	mov rdi, fmt_char_newline
 24536 000110B3 [3C03000000000000] 
 24537 000110BB E9D4030000              	jmp .Lemit
 24538                                  
 24539                                  .Lchar_formfeed:
 24540 000110C0 48BF-                   	mov rdi, fmt_char_formfeed
 24540 000110C2 [4603000000000000] 
 24541 000110CA E9C5030000              	jmp .Lemit
 24542                                  
 24543                                  .Lchar_return:
 24544 000110CF 48BF-                   	mov rdi, fmt_char_return
 24544 000110D1 [4D03000000000000] 
 24545 000110D9 E9B6030000              	jmp .Lemit
 24546                                  
 24547                                  .Lchar_escape:
 24548 000110DE 48BF-                   	mov rdi, fmt_char_escape
 24548 000110E0 [5603000000000000] 
 24549 000110E8 E9A7030000              	jmp .Lemit
 24550                                  
 24551                                  .Lchar_space:
 24552 000110ED 48BF-                   	mov rdi, fmt_char_space
 24552 000110EF [5C03000000000000] 
 24553 000110F7 E998030000              	jmp .Lemit
 24554                                  
 24555                                  .Lclosure:
 24556 000110FC 4889FE                  	mov rsi, qword rdi
 24557 000110FF 48BF-                   	mov rdi, fmt_closure
 24557 00011101 [6C03000000000000] 
 24558 00011109 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 24559 0001110D 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 24560 00011111 E97E030000              	jmp .Lemit
 24561                                  
 24562                                  .Lsymbol:
 24563 00011116 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 24564 0001111A BE01000000              	mov rsi, 1		 ; size = 1 byte
 24565 0001111F 488B5701                	mov rdx, qword [rdi + 1] ; length
 24566 00011123 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 24567 00011127 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 24568 0001112F E8(00000000)            	call fwrite
 24569 00011134 E970030000              	jmp .Lend
 24570                                  	
 24571                                  .Lpair:
 24572 00011139 57                      	push rdi
 24573 0001113A 48BF-                   	mov rdi, fmt_lparen
 24573 0001113C [9803000000000000] 
 24574 00011144 B800000000              	mov rax, 0
 24575                                          ENTER
    33 00011149 C8000000            <1>  enter 0, 0
    34 0001114D 4883E4F0            <1>  and rsp, ~15
 24576 00011151 E8(00000000)            	call printf
 24577                                          LEAVE
    38 00011156 C9                  <1>  leave
 24578 00011157 488B3C24                	mov rdi, qword [rsp] 	; pair
 24579 0001115B 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 24580 0001115F E8D1FDFFFF              	call print_sexpr
 24581 00011164 5F                      	pop rdi 		; pair
 24582 00011165 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 24583                                  .Lcdr:
 24584 00011169 8A07                    	mov al, byte [rdi]
 24585 0001116B 3C01                    	cmp al, T_nil
 24586 0001116D 7447                    	je .Lcdr_nil
 24587 0001116F 3C21                    	cmp al, T_pair
 24588 00011171 7462                    	je .Lcdr_pair
 24589 00011173 57                      	push rdi
 24590 00011174 48BF-                   	mov rdi, fmt_dotted_pair
 24590 00011176 [9A03000000000000] 
 24591 0001117E B800000000              	mov rax, 0
 24592                                  	ENTER
    33 00011183 C8000000            <1>  enter 0, 0
    34 00011187 4883E4F0            <1>  and rsp, ~15
 24593 0001118B E8(00000000)            	call printf
 24594                                  	LEAVE
    38 00011190 C9                  <1>  leave
 24595 00011191 5F                      	pop rdi
 24596 00011192 E89EFDFFFF              	call print_sexpr
 24597 00011197 48BF-                   	mov rdi, fmt_rparen
 24597 00011199 [9E03000000000000] 
 24598 000111A1 B800000000              	mov rax, 0
 24599                                  	ENTER
    33 000111A6 C8000000            <1>  enter 0, 0
    34 000111AA 4883E4F0            <1>  and rsp, ~15
 24600 000111AE E8(00000000)            	call printf
 24601                                  	LEAVE
    38 000111B3 C9                  <1>  leave
 24602                                  	LEAVE
    38 000111B4 C9                  <1>  leave
 24603 000111B5 C3                      	ret
 24604                                  
 24605                                  .Lcdr_nil:
 24606 000111B6 48BF-                   	mov rdi, fmt_rparen
 24606 000111B8 [9E03000000000000] 
 24607 000111C0 B800000000              	mov rax, 0
 24608                                  	ENTER
    33 000111C5 C8000000            <1>  enter 0, 0
    34 000111C9 4883E4F0            <1>  and rsp, ~15
 24609 000111CD E8(00000000)            	call printf
 24610                                  	LEAVE
    38 000111D2 C9                  <1>  leave
 24611                                  	LEAVE
    38 000111D3 C9                  <1>  leave
 24612 000111D4 C3                      	ret
 24613                                  
 24614                                  .Lcdr_pair:
 24615 000111D5 57                      	push rdi
 24616 000111D6 48BF-                   	mov rdi, fmt_space
 24616 000111D8 [A003000000000000] 
 24617 000111E0 B800000000              	mov rax, 0
 24618                                  	ENTER
    33 000111E5 C8000000            <1>  enter 0, 0
    34 000111E9 4883E4F0            <1>  and rsp, ~15
 24619 000111ED E8(00000000)            	call printf
 24620                                  	LEAVE
    38 000111F2 C9                  <1>  leave
 24621 000111F3 488B3C24                	mov rdi, qword [rsp]
 24622 000111F7 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 24623 000111FB E835FDFFFF              	call print_sexpr
 24624 00011200 5F                      	pop rdi
 24625 00011201 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 24626 00011205 E95FFFFFFF              	jmp .Lcdr
 24627                                  
 24628                                  .Lvector:
 24629 0001120A 488B4701                	mov rax, qword [rdi + 1] ; length
 24630 0001120E 4883F800                	cmp rax, 0
 24631 00011212 0F8484000000            	je .Lvector_empty
 24632 00011218 57                      	push rdi
 24633 00011219 48BF-                   	mov rdi, fmt_vector
 24633 0001121B [A603000000000000] 
 24634 00011223 B800000000              	mov rax, 0
 24635                                  	ENTER
    33 00011228 C8000000            <1>  enter 0, 0
    34 0001122C 4883E4F0            <1>  and rsp, ~15
 24636 00011230 E8(00000000)            	call printf
 24637                                  	LEAVE
    38 00011235 C9                  <1>  leave
 24638 00011236 488B3C24                	mov rdi, qword [rsp]
 24639 0001123A FF7701                  	push qword [rdi + 1]
 24640 0001123D 6A01                    	push 1
 24641 0001123F 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 24642 00011243 E8EDFCFFFF              	call print_sexpr
 24643                                  .Lvector_loop:
 24644                                  	; [rsp] index
 24645                                  	; [rsp + 8*1] limit
 24646                                  	; [rsp + 8*2] vector
 24647 00011248 488B0424                	mov rax, qword [rsp]
 24648 0001124C 483B442408              	cmp rax, qword [rsp + 8*1]
 24649 00011251 7436                    	je .Lvector_end
 24650 00011253 48BF-                   	mov rdi, fmt_space
 24650 00011255 [A003000000000000] 
 24651 0001125D B800000000              	mov rax, 0
 24652                                  	ENTER
    33 00011262 C8000000            <1>  enter 0, 0
    34 00011266 4883E4F0            <1>  and rsp, ~15
 24653 0001126A E8(00000000)            	call printf
 24654                                  	LEAVE
    38 0001126F C9                  <1>  leave
 24655 00011270 488B0424                	mov rax, qword [rsp]
 24656 00011274 488B5C2410              	mov rbx, qword [rsp + 8*2]
 24657 00011279 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 24658 0001127E E8B2FCFFFF              	call print_sexpr
 24659 00011283 48FF0424                	inc qword [rsp]
 24660 00011287 EBBF                    	jmp .Lvector_loop
 24661                                  
 24662                                  .Lvector_end:
 24663 00011289 4883C418                	add rsp, 8*3
 24664 0001128D 48BF-                   	mov rdi, fmt_rparen
 24664 0001128F [9E03000000000000] 
 24665 00011297 E9F8010000              	jmp .Lemit	
 24666                                  
 24667                                  .Lvector_empty:
 24668 0001129C 48BF-                   	mov rdi, fmt_empty_vector
 24668 0001129E [A203000000000000] 
 24669 000112A6 E9E9010000              	jmp .Lemit
 24670                                  
 24671                                  .Lreal:
 24672 000112AB FF7701                  	push qword [rdi + 1]
 24673 000112AE F20F100424              	movsd xmm0, qword [rsp]
 24674 000112B3 4883C408                	add rsp, 8*1
 24675 000112B7 48BF-                   	mov rdi, fmt_real
 24675 000112B9 [A903000000000000] 
 24676 000112C1 B801000000              	mov rax, 1
 24677                                  	ENTER
    33 000112C6 C8000000            <1>  enter 0, 0
    34 000112CA 4883E4F0            <1>  and rsp, ~15
 24678 000112CE E8(00000000)            	call printf
 24679                                  	LEAVE
    38 000112D3 C9                  <1>  leave
 24680 000112D4 E9D0010000              	jmp .Lend
 24681                                  
 24682                                  .Lrational:
 24683 000112D9 488B7701                	mov rsi, qword [rdi + 1]
 24684 000112DD 488B5709                	mov rdx, qword [rdi + 1 + 8]
 24685 000112E1 4883FE00                	cmp rsi, 0
 24686 000112E5 7415                    	je .Lrat_zero
 24687 000112E7 4883FA01                	cmp rdx, 1
 24688 000112EB 741E                    	je .Lrat_int
 24689 000112ED 48BF-                   	mov rdi, fmt_fraction
 24689 000112EF [AC03000000000000] 
 24690 000112F7 E998010000              	jmp .Lemit
 24691                                  
 24692                                  .Lrat_zero:
 24693 000112FC 48BF-                   	mov rdi, fmt_zero
 24693 000112FE [B403000000000000] 
 24694 00011306 E989010000              	jmp .Lemit
 24695                                  
 24696                                  .Lrat_int:
 24697 0001130B 48BF-                   	mov rdi, fmt_int
 24697 0001130D [B603000000000000] 
 24698 00011315 E97A010000              	jmp .Lemit
 24699                                  
 24700                                  .Lstring:
 24701 0001131A 488D4709                	lea rax, [rdi + 1 + 8]
 24702 0001131E 50                      	push rax
 24703 0001131F FF7701                  	push qword [rdi + 1]
 24704 00011322 48BF-                   	mov rdi, fmt_dquote
 24704 00011324 [FA03000000000000] 
 24705 0001132C B800000000              	mov rax, 0
 24706                                  	ENTER
    33 00011331 C8000000            <1>  enter 0, 0
    34 00011335 4883E4F0            <1>  and rsp, ~15
 24707 00011339 E8(00000000)            	call printf
 24708                                  	LEAVE
    38 0001133E C9                  <1>  leave
 24709                                  .Lstring_loop:
 24710                                  	; qword [rsp]: limit
 24711                                  	; qword [rsp + 8*1]: char *
 24712 0001133F 48833C2400              	cmp qword [rsp], 0
 24713 00011344 0F84FD000000            	je .Lstring_end
 24714 0001134A 488B442408              	mov rax, qword [rsp + 8*1]
 24715 0001134F 8A00                    	mov al, byte [rax]
 24716 00011351 4825FF000000            	and rax, 255
 24717 00011357 3C07                    	cmp al, 7
 24718 00011359 7468                            je .Lstring_char_7
 24719 0001135B 3C08                            cmp al, 8
 24720 0001135D 7470                            je .Lstring_char_8
 24721 0001135F 3C09                            cmp al, 9
 24722 00011361 7478                            je .Lstring_char_9
 24723 00011363 3C0A                            cmp al, 10
 24724 00011365 0F847C000000                    je .Lstring_char_10
 24725 0001136B 3C0B                            cmp al, 11
 24726 0001136D 0F8480000000                    je .Lstring_char_11
 24727 00011373 3C0C                            cmp al, 12
 24728 00011375 0F8484000000                    je .Lstring_char_12
 24729 0001137B 3C0D                            cmp al, 13
 24730 0001137D 0F8488000000                    je .Lstring_char_13
 24731 00011383 3C22                            cmp al, 34
 24732 00011385 0F848C000000                    je .Lstring_char_34
 24733 0001138B 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 24735 0001138D 3C20                            cmp al, ' '
 24736 0001138F 0F8CA0000000                    jl .Lstring_char_hex
 24737 00011395 48BF-                           mov rdi, fmt_string_char
 24737 00011397 [FC03000000000000] 
 24738 0001139F 4889C6                          mov rsi, rax
 24739                                  .Lstring_char_emit:
 24740 000113A2 B800000000                      mov rax, 0
 24741                                          ENTER
    33 000113A7 C8000000            <1>  enter 0, 0
    34 000113AB 4883E4F0            <1>  and rsp, ~15
 24742 000113AF E8(00000000)                    call printf
 24743                                          LEAVE
    38 000113B4 C9                  <1>  leave
 24744 000113B5 48FF0C24                        dec qword [rsp]
 24745 000113B9 48FF442408                      inc qword [rsp + 8*1]
 24746 000113BE E97CFFFFFF                      jmp .Lstring_loop
 24747                                  
 24748                                  .Lstring_char_7:
 24749 000113C3 48BF-                           mov rdi, fmt_string_char_7
 24749 000113C5 [FF03000000000000] 
 24750 000113CD EBD3                            jmp .Lstring_char_emit
 24751                                  
 24752                                  .Lstring_char_8:
 24753 000113CF 48BF-                           mov rdi, fmt_string_char_8
 24753 000113D1 [0204000000000000] 
 24754 000113D9 EBC7                            jmp .Lstring_char_emit
 24755                                          
 24756                                  .Lstring_char_9:
 24757 000113DB 48BF-                           mov rdi, fmt_string_char_9
 24757 000113DD [0504000000000000] 
 24758 000113E5 EBBB                            jmp .Lstring_char_emit
 24759                                  
 24760                                  .Lstring_char_10:
 24761 000113E7 48BF-                           mov rdi, fmt_string_char_10
 24761 000113E9 [0804000000000000] 
 24762 000113F1 EBAF                            jmp .Lstring_char_emit
 24763                                  
 24764                                  .Lstring_char_11:
 24765 000113F3 48BF-                           mov rdi, fmt_string_char_11
 24765 000113F5 [0B04000000000000] 
 24766 000113FD EBA3                            jmp .Lstring_char_emit
 24767                                  
 24768                                  .Lstring_char_12:
 24769 000113FF 48BF-                           mov rdi, fmt_string_char_12
 24769 00011401 [0E04000000000000] 
 24770 00011409 EB97                            jmp .Lstring_char_emit
 24771                                  
 24772                                  .Lstring_char_13:
 24773 0001140B 48BF-                           mov rdi, fmt_string_char_13
 24773 0001140D [1104000000000000] 
 24774 00011415 EB8B                            jmp .Lstring_char_emit
 24775                                  
 24776                                  .Lstring_char_34:
 24777 00011417 48BF-                           mov rdi, fmt_string_char_34
 24777 00011419 [1404000000000000] 
 24778 00011421 E97CFFFFFF                      jmp .Lstring_char_emit
 24779                                  
 24780                                  .Lstring_char_92:
 24781 00011426 48BF-                           mov rdi, fmt_string_char_92
 24781 00011428 [1704000000000000] 
 24782 00011430 E96DFFFFFF                      jmp .Lstring_char_emit
 24783                                  
 24784                                  .Lstring_char_hex:
 24785 00011435 48BF-                           mov rdi, fmt_string_char_hex
 24785 00011437 [1A04000000000000] 
 24786 0001143F 4889C6                          mov rsi, rax
 24787 00011442 E95BFFFFFF                      jmp .Lstring_char_emit        
 24788                                  
 24789                                  .Lstring_end:
 24790 00011447 4883C410                	add rsp, 8 * 2
 24791 0001144B 48BF-                   	mov rdi, fmt_dquote
 24791 0001144D [FA03000000000000] 
 24792 00011455 EB3D                    	jmp .Lemit
 24793                                  
 24794                                  .Lunknown_sexpr_type:
 24795 00011457 48BE-                   	mov rsi, fmt_unknown_sexpr_error
 24795 00011459 [BA03000000000000] 
 24796 00011461 4825FF000000            	and rax, 255
 24797 00011467 4889C2                  	mov rdx, rax
 24798 0001146A 4889F9                  	mov rcx, rdi
 24799 0001146D 488B3C25[00000000]      	mov rdi, qword [stderr]
 24800 00011475 B800000000              	mov rax, 0
 24801                                  	ENTER
    33 0001147A C8000000            <1>  enter 0, 0
    34 0001147E 4883E4F0            <1>  and rsp, ~15
 24802 00011482 E8(00000000)            	call fprintf
 24803                                  	LEAVE
    38 00011487 C9                  <1>  leave
 24804 00011488 48C7C0FFFFFFFF          	mov rax, -1
 24805 0001148F E8(00000000)            	call exit
 24806                                  
 24807                                  .Lemit:
 24808 00011494 B800000000              	mov rax, 0
 24809                                  	ENTER
    33 00011499 C8000000            <1>  enter 0, 0
    34 0001149D 4883E4F0            <1>  and rsp, ~15
 24810 000114A1 E8(00000000)            	call printf
 24811                                  	LEAVE
    38 000114A6 C9                  <1>  leave
 24812 000114A7 EB00                    	jmp .Lend
 24813                                  
 24814                                  .Lend:
 24815                                  	LEAVE
    38 000114A9 C9                  <1>  leave
 24816 000114AA C3                      	ret
 24817                                  
 24818                                  ;;; rdi: address of free variable
 24819                                  ;;; rsi: address of code-pointer
 24820                                  bind_primitive:
 24821                                          ENTER
    33 000114AB C8000000            <1>  enter 0, 0
    34 000114AF 4883E4F0            <1>  and rsp, ~15
 24822 000114B3 57                              push rdi
 24823 000114B4 BF11000000                      mov rdi, (1 + 8 + 8)
 24824 000114B9 E85CFAFFFF                      call malloc
 24825 000114BE 5F                              pop rdi
 24826 000114BF C60005                          mov byte [rax], T_closure
 24827 000114C2 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 24828 000114CA 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 24829 000114CE 488907                          mov qword [rdi], rax
 24830                                          LEAVE
    38 000114D1 C9                  <1>  leave
 24831 000114D2 C3                              ret
 24832                                  
 24833                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
 24834                                  L_code_ptr_bin_apply:
 24835 000114D3 C8000000                        enter 0, 0
 24836                                          ;finding the list's length
 24837 000114D7 4831C9                          xor rcx, rcx ;0
 24838 000114DA 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
 24839                                          assert_pair(rax)
    42 000114DE 803821              <1>  cmp byte [%1], %2
    43 000114E1 0F8527120000        <1>  jne L_error_incorrect_type
 24840 000114E7 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
 24841                                          my_loop1:
 24842 000114EB 483D[01000000]                          cmp rax, sob_nil ;if nill
 24843 000114F1 7417                                    je my_loop_end1 ;jmp end
 24844 000114F3 48FFC1                                  inc rcx 
 24845 000114F6 53                                      push rbx ;insrting val to stack
 24846                                                  assert_pair(rax)
    42 000114F7 803821              <1>  cmp byte [%1], %2
    43 000114FA 0F850E120000        <1>  jne L_error_incorrect_type
 24847 00011500 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
 24848 00011504 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
 24849 00011508 EBE1                                    jmp my_loop1
 24850                                          my_loop_end1:
 24851                                          
 24852                                          
 24853                                  
 24854                                          ;make values in the opposite order:
 24855                                          ;1.pushing all argument one more time in the right order
 24856 0001150A 4889CB                          mov rbx, rcx ;count-up
 24857 0001150D B900000000                      mov rcx, 0 
 24858 00011512 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
 24859                                          my_loop2:
 24860 00011515 4839D9                                  cmp rcx, rbx ; if rcx = n
 24861 00011518 740A                                    je my_loop_end2 ;then: jump to the end
 24862 0001151A 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
 24863 0001151E 50                                      push rax
 24864 0001151F 48FFC1                                  inc rcx
 24865 00011522 EBF1                                    jmp my_loop2
 24866                                          my_loop_end2:
 24867                                          
 24868                                          ;2.overwriting element above by element below but in correct order
 24869 00011524 488D14DD30000000                lea rdx, [8 * (rbx + 6)] ;nubmer of *bytes* we need to skip
 24870 0001152C 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
 24871 00011530 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
 24872 00011534 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
 24873 00011538 B900000000                      mov rcx, 0
 24874                                          my_loop3:
 24875 0001153D 4839D9                                  cmp rcx, rbx ;if rcx = n
 24876 00011540 7417                                    je my_loop_end3 ;then: jump to the end
 24877 00011542 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
 24878 00011546 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
 24879 0001154A 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
 24880 0001154D 4883C408                                add rsp, 8 ;pop arg we used
 24881 00011551 48FFC1                                  inc rcx 
 24882 00011554 4831C0                                  xor rax, rax
 24883 00011557 EBE4                                    jmp my_loop3
 24884                                          my_loop_end3:
 24885                                          
 24886 00011559 4883F906                        cmp rcx, 6
 24887 0001155D 7F11                            jg seven_or_more
 24888 0001155F 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
 24889 00011563 48F7DB                          neg rbx 
 24890 00011566 4883C306                        add rbx, 6      ;sub 6 from num_of_args
 24891 0001156A 488D24DC                        lea rsp, [rsp + 8 * rbx] ; pop rest of old frame 
 24892 0001156E EB05                            jmp continu
 24893                                          seven_or_more:
 24894 00011570 488D642430                      lea rsp, [rsp + 8 * 6] ; pop rest of 1st time pushed args
 24895                                          continu:
 24896 00011575 51                              push rcx ;push number of arguments
 24897 00011576 41FF7001                        push SOB_CLOSURE_ENV(r8) ; push lex-env
 24898 0001157A 57                              push rdi ; push old ret-add
 24899 0001157B 4889F5                          mov rbp, rsi ;rbp = old-rbp
 24900 0001157E 41FF6009                        jmp SOB_CLOSURE_CODE(r8) ; fun to apply
 24901                                  	
 24902                                  L_code_ptr_is_null:
 24903                                          ENTER
    33 00011582 C8000000            <1>  enter 0, 0
    34 00011586 4883E4F0            <1>  and rsp, ~15
 24904 0001158A 48837D1801                      cmp COUNT, 1
 24905 0001158F 0F85A5100000                    jne L_error_arg_count_1
 24906 00011595 488B4520                        mov rax, PARAM(0)
 24907 00011599 803801                          cmp byte [rax], T_nil
 24908 0001159C 750C                            jne .L_false
 24909 0001159E 48B8-                           mov rax, sob_boolean_true
 24909 000115A0 [0300000000000000] 
 24910 000115A8 EB0A                            jmp .L_end
 24911                                  .L_false:
 24912 000115AA 48B8-                           mov rax, sob_boolean_false
 24912 000115AC [0200000000000000] 
 24913                                  .L_end:
 24914                                          LEAVE
    38 000115B4 C9                  <1>  leave
 24915 000115B5 C21800                          ret AND_KILL_FRAME(1)
 24916                                  
 24917                                  L_code_ptr_is_pair:
 24918                                          ENTER
    33 000115B8 C8000000            <1>  enter 0, 0
    34 000115BC 4883E4F0            <1>  and rsp, ~15
 24919 000115C0 48837D1801                      cmp COUNT, 1
 24920 000115C5 0F856F100000                    jne L_error_arg_count_1
 24921 000115CB 488B4520                        mov rax, PARAM(0)
 24922 000115CF 803821                          cmp byte [rax], T_pair
 24923 000115D2 750C                            jne .L_false
 24924 000115D4 48B8-                           mov rax, sob_boolean_true
 24924 000115D6 [0300000000000000] 
 24925 000115DE EB0A                            jmp .L_end
 24926                                  .L_false:
 24927 000115E0 48B8-                           mov rax, sob_boolean_false
 24927 000115E2 [0200000000000000] 
 24928                                  .L_end:
 24929                                          LEAVE
    38 000115EA C9                  <1>  leave
 24930 000115EB C21800                          ret AND_KILL_FRAME(1)
 24931                                          
 24932                                  L_code_ptr_is_void:
 24933                                          ENTER
    33 000115EE C8000000            <1>  enter 0, 0
    34 000115F2 4883E4F0            <1>  and rsp, ~15
 24934 000115F6 48837D1801                      cmp COUNT, 1
 24935 000115FB 0F8539100000                    jne L_error_arg_count_1
 24936 00011601 488B4520                        mov rax, PARAM(0)
 24937 00011605 803800                          cmp byte [rax], T_void
 24938 00011608 750C                            jne .L_false
 24939 0001160A 48B8-                           mov rax, sob_boolean_true
 24939 0001160C [0300000000000000] 
 24940 00011614 EB0A                            jmp .L_end
 24941                                  .L_false:
 24942 00011616 48B8-                           mov rax, sob_boolean_false
 24942 00011618 [0200000000000000] 
 24943                                  .L_end:
 24944                                          LEAVE
    38 00011620 C9                  <1>  leave
 24945 00011621 C21800                          ret AND_KILL_FRAME(1)
 24946                                  
 24947                                  L_code_ptr_is_char:
 24948                                          ENTER
    33 00011624 C8000000            <1>  enter 0, 0
    34 00011628 4883E4F0            <1>  and rsp, ~15
 24949 0001162C 48837D1801                      cmp COUNT, 1
 24950 00011631 0F8503100000                    jne L_error_arg_count_1
 24951 00011637 488B4520                        mov rax, PARAM(0)
 24952 0001163B 803802                          cmp byte [rax], T_char
 24953 0001163E 750C                            jne .L_false
 24954 00011640 48B8-                           mov rax, sob_boolean_true
 24954 00011642 [0300000000000000] 
 24955 0001164A EB0A                            jmp .L_end
 24956                                  .L_false:
 24957 0001164C 48B8-                           mov rax, sob_boolean_false
 24957 0001164E [0200000000000000] 
 24958                                  .L_end:
 24959                                          LEAVE
    38 00011656 C9                  <1>  leave
 24960 00011657 C21800                          ret AND_KILL_FRAME(1)
 24961                                  
 24962                                  L_code_ptr_is_string:
 24963                                          ENTER
    33 0001165A C8000000            <1>  enter 0, 0
    34 0001165E 4883E4F0            <1>  and rsp, ~15
 24964 00011662 48837D1801                      cmp COUNT, 1
 24965 00011667 0F85CD0F0000                    jne L_error_arg_count_1
 24966 0001166D 488B4520                        mov rax, PARAM(0)
 24967 00011671 803803                          cmp byte [rax], T_string
 24968 00011674 750C                            jne .L_false
 24969 00011676 48B8-                           mov rax, sob_boolean_true
 24969 00011678 [0300000000000000] 
 24970 00011680 EB0A                            jmp .L_end
 24971                                  .L_false:
 24972 00011682 48B8-                           mov rax, sob_boolean_false
 24972 00011684 [0200000000000000] 
 24973                                  .L_end:
 24974                                          LEAVE
    38 0001168C C9                  <1>  leave
 24975 0001168D C21800                          ret AND_KILL_FRAME(1)
 24976                                  
 24977                                  L_code_ptr_is_symbol:
 24978                                          ENTER
    33 00011690 C8000000            <1>  enter 0, 0
    34 00011694 4883E4F0            <1>  and rsp, ~15
 24979 00011698 48837D1801                      cmp COUNT, 1
 24980 0001169D 0F85970F0000                    jne L_error_arg_count_1
 24981 000116A3 488B4520                        mov rax, PARAM(0)
 24982 000116A7 803804                          cmp byte [rax], T_symbol
 24983 000116AA 750C                            jne .L_false
 24984 000116AC 48B8-                           mov rax, sob_boolean_true
 24984 000116AE [0300000000000000] 
 24985 000116B6 EB0A                            jmp .L_end
 24986                                  .L_false:
 24987 000116B8 48B8-                           mov rax, sob_boolean_false
 24987 000116BA [0200000000000000] 
 24988                                  .L_end:
 24989                                          LEAVE
    38 000116C2 C9                  <1>  leave
 24990 000116C3 C21800                          ret AND_KILL_FRAME(1)
 24991                                  
 24992                                  L_code_ptr_is_vector:
 24993                                          ENTER
    33 000116C6 C8000000            <1>  enter 0, 0
    34 000116CA 4883E4F0            <1>  and rsp, ~15
 24994 000116CE 48837D1801                      cmp COUNT, 1
 24995 000116D3 0F85610F0000                    jne L_error_arg_count_1
 24996 000116D9 488B4520                        mov rax, PARAM(0)
 24997 000116DD 803822                          cmp byte [rax], T_vector
 24998 000116E0 750C                            jne .L_false
 24999 000116E2 48B8-                           mov rax, sob_boolean_true
 24999 000116E4 [0300000000000000] 
 25000 000116EC EB0A                            jmp .L_end
 25001                                  .L_false:
 25002 000116EE 48B8-                           mov rax, sob_boolean_false
 25002 000116F0 [0200000000000000] 
 25003                                  .L_end:
 25004                                          LEAVE
    38 000116F8 C9                  <1>  leave
 25005 000116F9 C21800                          ret AND_KILL_FRAME(1)
 25006                                  
 25007                                  L_code_ptr_is_closure:
 25008                                          ENTER
    33 000116FC C8000000            <1>  enter 0, 0
    34 00011700 4883E4F0            <1>  and rsp, ~15
 25009 00011704 48837D1801                      cmp COUNT, 1
 25010 00011709 0F852B0F0000                    jne L_error_arg_count_1
 25011 0001170F 488B4520                        mov rax, PARAM(0)
 25012 00011713 803805                          cmp byte [rax], T_closure
 25013 00011716 750C                            jne .L_false
 25014 00011718 48B8-                           mov rax, sob_boolean_true
 25014 0001171A [0300000000000000] 
 25015 00011722 EB0A                            jmp .L_end
 25016                                  .L_false:
 25017 00011724 48B8-                           mov rax, sob_boolean_false
 25017 00011726 [0200000000000000] 
 25018                                  .L_end:
 25019                                          LEAVE
    38 0001172E C9                  <1>  leave
 25020 0001172F C21800                          ret AND_KILL_FRAME(1)
 25021                                  
 25022                                  L_code_ptr_is_real:
 25023                                          ENTER
    33 00011732 C8000000            <1>  enter 0, 0
    34 00011736 4883E4F0            <1>  and rsp, ~15
 25024 0001173A 48837D1801                      cmp COUNT, 1
 25025 0001173F 0F85F50E0000                    jne L_error_arg_count_1
 25026 00011745 488B4520                        mov rax, PARAM(0)
 25027 00011749 803812                          cmp byte [rax], T_real
 25028 0001174C 750C                            jne .L_false
 25029 0001174E 48B8-                           mov rax, sob_boolean_true
 25029 00011750 [0300000000000000] 
 25030 00011758 EB0A                            jmp .L_end
 25031                                  .L_false:
 25032 0001175A 48B8-                           mov rax, sob_boolean_false
 25032 0001175C [0200000000000000] 
 25033                                  .L_end:
 25034                                          LEAVE
    38 00011764 C9                  <1>  leave
 25035 00011765 C21800                          ret AND_KILL_FRAME(1)
 25036                                  
 25037                                  L_code_ptr_is_rational:
 25038                                          ENTER
    33 00011768 C8000000            <1>  enter 0, 0
    34 0001176C 4883E4F0            <1>  and rsp, ~15
 25039 00011770 48837D1801                      cmp COUNT, 1
 25040 00011775 0F85BF0E0000                    jne L_error_arg_count_1
 25041 0001177B 488B4520                        mov rax, PARAM(0)
 25042 0001177F 803811                          cmp byte [rax], T_rational
 25043 00011782 750C                            jne .L_false
 25044 00011784 48B8-                           mov rax, sob_boolean_true
 25044 00011786 [0300000000000000] 
 25045 0001178E EB0A                            jmp .L_end
 25046                                  .L_false:
 25047 00011790 48B8-                           mov rax, sob_boolean_false
 25047 00011792 [0200000000000000] 
 25048                                  .L_end:
 25049                                          LEAVE
    38 0001179A C9                  <1>  leave
 25050 0001179B C21800                          ret AND_KILL_FRAME(1)
 25051                                  
 25052                                  L_code_ptr_is_boolean:
 25053                                          ENTER
    33 0001179E C8000000            <1>  enter 0, 0
    34 000117A2 4883E4F0            <1>  and rsp, ~15
 25054 000117A6 48837D1801                      cmp COUNT, 1
 25055 000117AB 0F85890E0000                    jne L_error_arg_count_1
 25056 000117B1 488B4520                        mov rax, PARAM(0)
 25057 000117B5 8A18                            mov bl, byte [rax]
 25058 000117B7 80E308                          and bl, T_boolean
 25059 000117BA 740C                            je .L_false
 25060 000117BC 48B8-                           mov rax, sob_boolean_true
 25060 000117BE [0300000000000000] 
 25061 000117C6 EB0A                            jmp .L_end
 25062                                  .L_false:
 25063 000117C8 48B8-                           mov rax, sob_boolean_false
 25063 000117CA [0200000000000000] 
 25064                                  .L_end:
 25065                                          LEAVE
    38 000117D2 C9                  <1>  leave
 25066 000117D3 C21800                          ret AND_KILL_FRAME(1)
 25067                                          
 25068                                  L_code_ptr_is_number:
 25069                                          ENTER
    33 000117D6 C8000000            <1>  enter 0, 0
    34 000117DA 4883E4F0            <1>  and rsp, ~15
 25070 000117DE 48837D1801                      cmp COUNT, 1
 25071 000117E3 0F85510E0000                    jne L_error_arg_count_1
 25072 000117E9 488B4520                        mov rax, PARAM(0)
 25073 000117ED 8A18                            mov bl, byte [rax]
 25074 000117EF 80E310                          and bl, T_number
 25075 000117F2 740C                            je .L_false
 25076 000117F4 48B8-                           mov rax, sob_boolean_true
 25076 000117F6 [0300000000000000] 
 25077 000117FE EB0A                            jmp .L_end
 25078                                  .L_false:
 25079 00011800 48B8-                           mov rax, sob_boolean_false
 25079 00011802 [0200000000000000] 
 25080                                  .L_end:
 25081                                          LEAVE
    38 0001180A C9                  <1>  leave
 25082 0001180B C21800                          ret AND_KILL_FRAME(1)
 25083                                          
 25084                                  L_code_ptr_is_collection:
 25085                                          ENTER
    33 0001180E C8000000            <1>  enter 0, 0
    34 00011812 4883E4F0            <1>  and rsp, ~15
 25086 00011816 48837D1801                      cmp COUNT, 1
 25087 0001181B 0F85190E0000                    jne L_error_arg_count_1
 25088 00011821 488B4520                        mov rax, PARAM(0)
 25089 00011825 8A18                            mov bl, byte [rax]
 25090 00011827 80E320                          and bl, T_collection
 25091 0001182A 740C                            je .L_false
 25092 0001182C 48B8-                           mov rax, sob_boolean_true
 25092 0001182E [0300000000000000] 
 25093 00011836 EB0A                            jmp .L_end
 25094                                  .L_false:
 25095 00011838 48B8-                           mov rax, sob_boolean_false
 25095 0001183A [0200000000000000] 
 25096                                  .L_end:
 25097                                          LEAVE
    38 00011842 C9                  <1>  leave
 25098 00011843 C21800                          ret AND_KILL_FRAME(1)
 25099                                  
 25100                                  L_code_ptr_cons:
 25101                                          ENTER
    33 00011846 C8000000            <1>  enter 0, 0
    34 0001184A 4883E4F0            <1>  and rsp, ~15
 25102 0001184E 48837D1802                      cmp COUNT, 2
 25103 00011853 0F85160E0000                    jne L_error_arg_count_2
 25104 00011859 BF11000000                      mov rdi, (1 + 8 + 8)
 25105 0001185E E8B7F6FFFF                      call malloc
 25106 00011863 C60021                          mov byte [rax], T_pair
 25107 00011866 488B5D20                        mov rbx, PARAM(0)
 25108 0001186A 48895801                        mov SOB_PAIR_CAR(rax), rbx
 25109 0001186E 488B5D28                        mov rbx, PARAM(1)
 25110 00011872 48895809                        mov SOB_PAIR_CDR(rax), rbx
 25111                                          LEAVE
    38 00011876 C9                  <1>  leave
 25112 00011877 C22000                          ret AND_KILL_FRAME(2)
 25113                                  
 25114                                  L_code_ptr_display_sexpr:
 25115                                          ENTER
    33 0001187A C8000000            <1>  enter 0, 0
    34 0001187E 4883E4F0            <1>  and rsp, ~15
 25116 00011882 48837D1801                      cmp COUNT, 1
 25117 00011887 0F85AD0D0000                    jne L_error_arg_count_1
 25118 0001188D 488B7D20                        mov rdi, PARAM(0)
 25119 00011891 E89FF6FFFF                      call print_sexpr
 25120 00011896 48B8-                           mov rax, sob_void
 25120 00011898 [0000000000000000] 
 25121                                          LEAVE
    38 000118A0 C9                  <1>  leave
 25122 000118A1 C21800                          ret AND_KILL_FRAME(1)
 25123                                  
 25124                                  L_code_ptr_write_char:
 25125                                          ENTER
    33 000118A4 C8000000            <1>  enter 0, 0
    34 000118A8 4883E4F0            <1>  and rsp, ~15
 25126 000118AC 48837D1801                      cmp COUNT, 1
 25127 000118B1 0F85830D0000                    jne L_error_arg_count_1
 25128 000118B7 488B4520                        mov rax, PARAM(0)
 25129                                          assert_char(rax)
    42 000118BB 803802              <1>  cmp byte [%1], %2
    43 000118BE 0F854A0E0000        <1>  jne L_error_incorrect_type
 25130 000118C4 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 25131 000118C7 4825FF000000                    and rax, 255
 25132 000118CD 48BF-                           mov rdi, fmt_char
 25132 000118CF [2004000000000000] 
 25133 000118D7 4889C6                          mov rsi, rax
 25134 000118DA B800000000                      mov rax, 0
 25135                                  	ENTER
    33 000118DF C8000000            <1>  enter 0, 0
    34 000118E3 4883E4F0            <1>  and rsp, ~15
 25136 000118E7 E8(00000000)                    call printf
 25137                                  	LEAVE
    38 000118EC C9                  <1>  leave
 25138 000118ED 48B8-                           mov rax, sob_void
 25138 000118EF [0000000000000000] 
 25139                                          LEAVE
    38 000118F7 C9                  <1>  leave
 25140 000118F8 C21800                          ret AND_KILL_FRAME(1)
 25141                                  
 25142                                  L_code_ptr_car:
 25143                                          ENTER
    33 000118FB C8000000            <1>  enter 0, 0
    34 000118FF 4883E4F0            <1>  and rsp, ~15
 25144 00011903 48837D1801                      cmp COUNT, 1
 25145 00011908 0F852C0D0000                    jne L_error_arg_count_1
 25146 0001190E 488B4520                        mov rax, PARAM(0)
 25147                                          assert_pair(rax)
    42 00011912 803821              <1>  cmp byte [%1], %2
    43 00011915 0F85F30D0000        <1>  jne L_error_incorrect_type
 25148 0001191B 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 25149                                          LEAVE
    38 0001191F C9                  <1>  leave
 25150 00011920 C21800                          ret AND_KILL_FRAME(1)
 25151                                          
 25152                                  L_code_ptr_cdr:
 25153                                          ENTER
    33 00011923 C8000000            <1>  enter 0, 0
    34 00011927 4883E4F0            <1>  and rsp, ~15
 25154 0001192B 48837D1801                      cmp COUNT, 1
 25155 00011930 0F85040D0000                    jne L_error_arg_count_1
 25156 00011936 488B4520                        mov rax, PARAM(0)
 25157                                          assert_pair(rax)
    42 0001193A 803821              <1>  cmp byte [%1], %2
    43 0001193D 0F85CB0D0000        <1>  jne L_error_incorrect_type
 25158 00011943 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 25159                                          LEAVE
    38 00011947 C9                  <1>  leave
 25160 00011948 C21800                          ret AND_KILL_FRAME(1)
 25161                                          
 25162                                  L_code_ptr_string_length:
 25163                                          ENTER
    33 0001194B C8000000            <1>  enter 0, 0
    34 0001194F 4883E4F0            <1>  and rsp, ~15
 25164 00011953 48837D1801                      cmp COUNT, 1
 25165 00011958 0F85DC0C0000                    jne L_error_arg_count_1
 25166 0001195E 488B4520                        mov rax, PARAM(0)
 25167                                          assert_string(rax)
    42 00011962 803803              <1>  cmp byte [%1], %2
    43 00011965 0F85A30D0000        <1>  jne L_error_incorrect_type
 25168 0001196B 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 25169 0001196F E83A0C0000                      call make_integer
 25170                                          LEAVE
    38 00011974 C9                  <1>  leave
 25171 00011975 C21800                          ret AND_KILL_FRAME(1)
 25172                                  
 25173                                  L_code_ptr_vector_length:
 25174                                          ENTER
    33 00011978 C8000000            <1>  enter 0, 0
    34 0001197C 4883E4F0            <1>  and rsp, ~15
 25175 00011980 48837D1801                      cmp COUNT, 1
 25176 00011985 0F85AF0C0000                    jne L_error_arg_count_1
 25177 0001198B 488B4520                        mov rax, PARAM(0)
 25178                                          assert_vector(rax)
    42 0001198F 803822              <1>  cmp byte [%1], %2
    43 00011992 0F85760D0000        <1>  jne L_error_incorrect_type
 25179 00011998 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 25180 0001199C E80D0C0000                      call make_integer
 25181                                          LEAVE
    38 000119A1 C9                  <1>  leave
 25182 000119A2 C21800                          ret AND_KILL_FRAME(1)
 25183                                  
 25184                                  L_code_ptr_real_to_integer:
 25185                                          ENTER
    33 000119A5 C8000000            <1>  enter 0, 0
    34 000119A9 4883E4F0            <1>  and rsp, ~15
 25186 000119AD 48837D1801                      cmp COUNT, 1
 25187 000119B2 0F85820C0000                    jne L_error_arg_count_1
 25188 000119B8 488B5D20                        mov rbx, PARAM(0)
 25189                                          assert_real(rbx)
    42 000119BC 803B12              <1>  cmp byte [%1], %2
    43 000119BF 0F85490D0000        <1>  jne L_error_incorrect_type
 25190 000119C5 F20F104301                      movsd xmm0, qword [rbx + 1]
 25191 000119CA F2480F2CF8                      cvttsd2si rdi, xmm0
 25192 000119CF E8DA0B0000                      call make_integer
 25193                                          LEAVE
    38 000119D4 C9                  <1>  leave
 25194 000119D5 C21800                          ret AND_KILL_FRAME(1)
 25195                                  
 25196                                  L_code_ptr_exit:
 25197                                          ENTER
    33 000119D8 C8000000            <1>  enter 0, 0
    34 000119DC 4883E4F0            <1>  and rsp, ~15
 25198 000119E0 48837D1800                      cmp COUNT, 0
 25199 000119E5 0F851A0C0000                    jne L_error_arg_count_0
 25200 000119EB B800000000                      mov rax, 0
 25201 000119F0 E8(00000000)                    call exit
 25202                                  
 25203                                  L_code_ptr_integer_to_real:
 25204                                          ENTER
    33 000119F5 C8000000            <1>  enter 0, 0
    34 000119F9 4883E4F0            <1>  and rsp, ~15
 25205 000119FD 48837D1801                      cmp COUNT, 1
 25206 00011A02 0F85320C0000                    jne L_error_arg_count_1
 25207 00011A08 488B4520                        mov rax, PARAM(0)
 25208                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00011A0C 803811              <2>  cmp byte [%1], %2
    43 00011A0F 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 00011A15 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00011A1A 0F85EE0C0000        <1>  jne L_error_incorrect_type
 25209 00011A20 FF7001                          push qword [rax + 1]
 25210 00011A23 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 25211 00011A29 E8640B0000                      call make_real
 25212                                          LEAVE
    38 00011A2E C9                  <1>  leave
 25213 00011A2F C21800                          ret AND_KILL_FRAME(1)
 25214                                  
 25215                                  L_code_ptr_rational_to_real:
 25216                                          ENTER
    33 00011A32 C8000000            <1>  enter 0, 0
    34 00011A36 4883E4F0            <1>  and rsp, ~15
 25217 00011A3A 48837D1801                      cmp COUNT, 1
 25218 00011A3F 0F85F50B0000                    jne L_error_arg_count_1
 25219 00011A45 488B4520                        mov rax, PARAM(0)
 25220                                          assert_rational(rax)
    42 00011A49 803811              <1>  cmp byte [%1], %2
    43 00011A4C 0F85BC0C0000        <1>  jne L_error_incorrect_type
 25221 00011A52 FF7001                          push qword [rax + 1]
 25222 00011A55 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 25223 00011A5B FF7009                          push qword [rax + 1 + 8]
 25224 00011A5E F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 25225 00011A64 F20F5EC1                        divsd xmm0, xmm1
 25226 00011A68 E8250B0000                      call make_real
 25227                                          LEAVE
    38 00011A6D C9                  <1>  leave
 25228 00011A6E C21800                          ret AND_KILL_FRAME(1)
 25229                                  
 25230                                  L_code_ptr_char_to_integer:
 25231                                          ENTER
    33 00011A71 C8000000            <1>  enter 0, 0
    34 00011A75 4883E4F0            <1>  and rsp, ~15
 25232 00011A79 48837D1801                      cmp COUNT, 1
 25233 00011A7E 0F85B60B0000                    jne L_error_arg_count_1
 25234 00011A84 488B4520                        mov rax, PARAM(0)
 25235                                          assert_char(rax)
    42 00011A88 803802              <1>  cmp byte [%1], %2
    43 00011A8B 0F857D0C0000        <1>  jne L_error_incorrect_type
 25236 00011A91 8A4001                          mov al, byte [rax + 1]
 25237 00011A94 4825FF000000                    and rax, 255
 25238 00011A9A 4889C7                          mov rdi, rax
 25239 00011A9D E80C0B0000                      call make_integer
 25240                                          LEAVE
    38 00011AA2 C9                  <1>  leave
 25241 00011AA3 C21800                          ret AND_KILL_FRAME(1)
 25242                                  
 25243                                  L_code_ptr_integer_to_char:
 25244                                          ENTER
    33 00011AA6 C8000000            <1>  enter 0, 0
    34 00011AAA 4883E4F0            <1>  and rsp, ~15
 25245 00011AAE 48837D1801                      cmp COUNT, 1
 25246 00011AB3 0F85810B0000                    jne L_error_arg_count_1
 25247 00011AB9 488B4520                        mov rax, PARAM(0)
 25248                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00011ABD 803811              <2>  cmp byte [%1], %2
    43 00011AC0 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00011AC6 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00011ACB 0F853D0C0000        <1>  jne L_error_incorrect_type
 25249 00011AD1 488B5801                        mov rbx, qword [rax + 1]
 25250 00011AD5 4883FB00                        cmp rbx, 0
 25251 00011AD9 0F8EF50A0000                    jle L_error_integer_range
 25252 00011ADF 4881FB00010000                  cmp rbx, 256
 25253 00011AE6 0F8DE80A0000                    jge L_error_integer_range
 25254 00011AEC BF02000000                      mov rdi, (1 + 1)
 25255 00011AF1 E824F4FFFF                      call malloc
 25256 00011AF6 C60002                          mov byte [rax], T_char
 25257 00011AF9 885801                          mov byte [rax + 1], bl
 25258                                          LEAVE
    38 00011AFC C9                  <1>  leave
 25259 00011AFD C21800                          ret AND_KILL_FRAME(1)
 25260                                  
 25261                                  L_code_ptr_trng:
 25262                                          ENTER
    33 00011B00 C8000000            <1>  enter 0, 0
    34 00011B04 4883E4F0            <1>  and rsp, ~15
 25263 00011B08 48837D1800                      cmp COUNT, 0
 25264 00011B0D 0F85F20A0000                    jne L_error_arg_count_0
 25265 00011B13 480FC7F7                        rdrand rdi
 25266 00011B17 48D1EF                          shr rdi, 1
 25267 00011B1A E88F0A0000                      call make_integer
 25268                                          LEAVE
    38 00011B1F C9                  <1>  leave
 25269 00011B20 C21000                          ret AND_KILL_FRAME(0)
 25270                                  
 25271                                  L_code_ptr_is_zero:
 25272                                          ENTER
    33 00011B23 C8000000            <1>  enter 0, 0
    34 00011B27 4883E4F0            <1>  and rsp, ~15
 25273 00011B2B 48837D1801                      cmp COUNT, 1
 25274 00011B30 0F85040B0000                    jne L_error_arg_count_1
 25275 00011B36 488B4520                        mov rax, PARAM(0)
 25276 00011B3A 803811                          cmp byte [rax], T_rational
 25277 00011B3D 740A                            je .L_rational
 25278 00011B3F 803812                          cmp byte [rax], T_real
 25279 00011B42 740E                            je .L_real
 25280 00011B44 E9C50B0000                      jmp L_error_incorrect_type
 25281                                  .L_rational:
 25282 00011B49 4883780100                      cmp qword [rax + 1], 0
 25283 00011B4E 7420                            je .L_zero
 25284 00011B50 EB12                            jmp .L_not_zero
 25285                                  .L_real:
 25286 00011B52 660FEFC0                        pxor xmm0, xmm0
 25287 00011B56 FF7001                          push qword [rax + 1]
 25288 00011B59 F20F100C24                      movsd xmm1, qword [rsp]
 25289 00011B5E 660F2EC1                        ucomisd xmm0, xmm1
 25290 00011B62 740C                            je .L_zero
 25291                                  .L_not_zero:
 25292 00011B64 48B8-                           mov rax, sob_boolean_false
 25292 00011B66 [0200000000000000] 
 25293 00011B6E EB0A                            jmp .L_end
 25294                                  .L_zero:
 25295 00011B70 48B8-                           mov rax, sob_boolean_true
 25295 00011B72 [0300000000000000] 
 25296                                  .L_end:
 25297                                          LEAVE
    38 00011B7A C9                  <1>  leave
 25298 00011B7B C21800                          ret AND_KILL_FRAME(1)
 25299                                  
 25300                                  L_code_ptr_is_integer:
 25301                                          ENTER
    33 00011B7E C8000000            <1>  enter 0, 0
    34 00011B82 4883E4F0            <1>  and rsp, ~15
 25302 00011B86 48837D1801                      cmp COUNT, 1
 25303 00011B8B 0F85A90A0000                    jne L_error_arg_count_1
 25304 00011B91 488B4520                        mov rax, PARAM(0)
 25305 00011B95 803811                          cmp byte [rax], T_rational
 25306 00011B98 7513                            jne .L_false
 25307 00011B9A 4883780901                      cmp qword [rax + 1 + 8], 1
 25308 00011B9F 750C                            jne .L_false
 25309 00011BA1 48B8-                           mov rax, sob_boolean_true
 25309 00011BA3 [0300000000000000] 
 25310 00011BAB EB0A                            jmp .L_exit
 25311                                  .L_false:
 25312 00011BAD 48B8-                           mov rax, sob_boolean_false
 25312 00011BAF [0200000000000000] 
 25313                                  .L_exit:
 25314                                          LEAVE
    38 00011BB7 C9                  <1>  leave
 25315 00011BB8 C21800                          ret AND_KILL_FRAME(1)
 25316                                  
 25317                                  L_code_ptr_raw_bin_add_rr:
 25318                                          ENTER
    33 00011BBB C8000000            <1>  enter 0, 0
    34 00011BBF 4883E4F0            <1>  and rsp, ~15
 25319 00011BC3 48837D1802                      cmp COUNT, 2
 25320 00011BC8 0F85A10A0000                    jne L_error_arg_count_2
 25321 00011BCE 488B5D20                        mov rbx, PARAM(0)
 25322                                          assert_real(rbx)
    42 00011BD2 803B12              <1>  cmp byte [%1], %2
    43 00011BD5 0F85330B0000        <1>  jne L_error_incorrect_type
 25323 00011BDB 488B4D28                        mov rcx, PARAM(1)
 25324                                          assert_real(rcx)
    42 00011BDF 803912              <1>  cmp byte [%1], %2
    43 00011BE2 0F85260B0000        <1>  jne L_error_incorrect_type
 25325 00011BE8 F20F104301                      movsd xmm0, qword [rbx + 1]
 25326 00011BED F20F104901                      movsd xmm1, qword [rcx + 1]
 25327 00011BF2 F20F58C1                        addsd xmm0, xmm1
 25328 00011BF6 E897090000                      call make_real
 25329                                          LEAVE
    38 00011BFB C9                  <1>  leave
 25330 00011BFC C22000                          ret AND_KILL_FRAME(2)
 25331                                  
 25332                                  L_code_ptr_raw_bin_sub_rr:
 25333                                          ENTER
    33 00011BFF C8000000            <1>  enter 0, 0
    34 00011C03 4883E4F0            <1>  and rsp, ~15
 25334 00011C07 48837D1802                      cmp COUNT, 2
 25335 00011C0C 0F855D0A0000                    jne L_error_arg_count_2
 25336 00011C12 488B5D20                        mov rbx, PARAM(0)
 25337                                          assert_real(rbx)
    42 00011C16 803B12              <1>  cmp byte [%1], %2
    43 00011C19 0F85EF0A0000        <1>  jne L_error_incorrect_type
 25338 00011C1F 488B4D28                        mov rcx, PARAM(1)
 25339                                          assert_real(rcx)
    42 00011C23 803912              <1>  cmp byte [%1], %2
    43 00011C26 0F85E20A0000        <1>  jne L_error_incorrect_type
 25340 00011C2C F20F104301                      movsd xmm0, qword [rbx + 1]
 25341 00011C31 F20F104901                      movsd xmm1, qword [rcx + 1]
 25342 00011C36 F20F5CC1                        subsd xmm0, xmm1
 25343 00011C3A E853090000                      call make_real
 25344                                          LEAVE
    38 00011C3F C9                  <1>  leave
 25345 00011C40 C22000                          ret AND_KILL_FRAME(2)
 25346                                  
 25347                                  L_code_ptr_raw_bin_mul_rr:
 25348                                          ENTER
    33 00011C43 C8000000            <1>  enter 0, 0
    34 00011C47 4883E4F0            <1>  and rsp, ~15
 25349 00011C4B 48837D1802                      cmp COUNT, 2
 25350 00011C50 0F85190A0000                    jne L_error_arg_count_2
 25351 00011C56 488B5D20                        mov rbx, PARAM(0)
 25352                                          assert_real(rbx)
    42 00011C5A 803B12              <1>  cmp byte [%1], %2
    43 00011C5D 0F85AB0A0000        <1>  jne L_error_incorrect_type
 25353 00011C63 488B4D28                        mov rcx, PARAM(1)
 25354                                          assert_real(rcx)
    42 00011C67 803912              <1>  cmp byte [%1], %2
    43 00011C6A 0F859E0A0000        <1>  jne L_error_incorrect_type
 25355 00011C70 F20F104301                      movsd xmm0, qword [rbx + 1]
 25356 00011C75 F20F104901                      movsd xmm1, qword [rcx + 1]
 25357 00011C7A F20F59C1                        mulsd xmm0, xmm1
 25358 00011C7E E80F090000                      call make_real
 25359                                          LEAVE
    38 00011C83 C9                  <1>  leave
 25360 00011C84 C22000                          ret AND_KILL_FRAME(2)
 25361                                  
 25362                                  L_code_ptr_raw_bin_div_rr:
 25363                                          ENTER
    33 00011C87 C8000000            <1>  enter 0, 0
    34 00011C8B 4883E4F0            <1>  and rsp, ~15
 25364 00011C8F 48837D1802                      cmp COUNT, 2
 25365 00011C94 0F85D5090000                    jne L_error_arg_count_2
 25366 00011C9A 488B5D20                        mov rbx, PARAM(0)
 25367                                          assert_real(rbx)
    42 00011C9E 803B12              <1>  cmp byte [%1], %2
    43 00011CA1 0F85670A0000        <1>  jne L_error_incorrect_type
 25368 00011CA7 488B4D28                        mov rcx, PARAM(1)
 25369                                          assert_real(rcx)
    42 00011CAB 803912              <1>  cmp byte [%1], %2
    43 00011CAE 0F855A0A0000        <1>  jne L_error_incorrect_type
 25370 00011CB4 F20F104301                      movsd xmm0, qword [rbx + 1]
 25371 00011CB9 F20F104901                      movsd xmm1, qword [rcx + 1]
 25372 00011CBE 660FEFD2                        pxor xmm2, xmm2
 25373 00011CC2 660F2ECA                        ucomisd xmm1, xmm2
 25374 00011CC6 0F84730A0000                    je L_error_division_by_zero
 25375 00011CCC F20F5EC1                        divsd xmm0, xmm1
 25376 00011CD0 E8BD080000                      call make_real
 25377                                          LEAVE
    38 00011CD5 C9                  <1>  leave
 25378 00011CD6 C22000                          ret AND_KILL_FRAME(2)
 25379                                  
 25380                                  L_code_ptr_raw_bin_add_qq:
 25381                                          ENTER
    33 00011CD9 C8000000            <1>  enter 0, 0
    34 00011CDD 4883E4F0            <1>  and rsp, ~15
 25382 00011CE1 48837D1802                      cmp COUNT, 2
 25383 00011CE6 0F8583090000                    jne L_error_arg_count_2
 25384 00011CEC 4C8B4520                        mov r8, PARAM(0)
 25385                                          assert_rational(r8)
    42 00011CF0 41803811            <1>  cmp byte [%1], %2
    43 00011CF4 0F85140A0000        <1>  jne L_error_incorrect_type
 25386 00011CFA 4C8B4D28                        mov r9, PARAM(1)
 25387                                          assert_rational(r9)
    42 00011CFE 41803911            <1>  cmp byte [%1], %2
    43 00011D02 0F85060A0000        <1>  jne L_error_incorrect_type
 25388 00011D08 498B4001                        mov rax, qword [r8 + 1] ; num1
 25389 00011D0C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 25390 00011D10 4899                            cqo
 25391 00011D12 48F7EB                          imul rbx
 25392 00011D15 4889C6                          mov rsi, rax
 25393 00011D18 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 25394 00011D1C 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 25395 00011D20 4899                            cqo
 25396 00011D22 48F7EB                          imul rbx
 25397 00011D25 4801C6                          add rsi, rax
 25398 00011D28 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 25399 00011D2C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 25400 00011D30 4899                            cqo
 25401 00011D32 48F7EB                          imul rbx
 25402 00011D35 4889C7                          mov rdi, rax
 25403 00011D38 E827010000                      call normalize_rational
 25404                                          LEAVE
    38 00011D3D C9                  <1>  leave
 25405 00011D3E C22000                          ret AND_KILL_FRAME(2)
 25406                                  
 25407                                  L_code_ptr_raw_bin_sub_qq:
 25408                                          ENTER
    33 00011D41 C8000000            <1>  enter 0, 0
    34 00011D45 4883E4F0            <1>  and rsp, ~15
 25409 00011D49 48837D1802                      cmp COUNT, 2
 25410 00011D4E 0F851B090000                    jne L_error_arg_count_2
 25411 00011D54 4C8B4520                        mov r8, PARAM(0)
 25412                                          assert_rational(r8)
    42 00011D58 41803811            <1>  cmp byte [%1], %2
    43 00011D5C 0F85AC090000        <1>  jne L_error_incorrect_type
 25413 00011D62 4C8B4D28                        mov r9, PARAM(1)
 25414                                          assert_rational(r9)
    42 00011D66 41803911            <1>  cmp byte [%1], %2
    43 00011D6A 0F859E090000        <1>  jne L_error_incorrect_type
 25415 00011D70 498B4001                        mov rax, qword [r8 + 1] ; num1
 25416 00011D74 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 25417 00011D78 4899                            cqo
 25418 00011D7A 48F7EB                          imul rbx
 25419 00011D7D 4889C6                          mov rsi, rax
 25420 00011D80 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 25421 00011D84 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 25422 00011D88 4899                            cqo
 25423 00011D8A 48F7EB                          imul rbx
 25424 00011D8D 4829C6                          sub rsi, rax
 25425 00011D90 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 25426 00011D94 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 25427 00011D98 4899                            cqo
 25428 00011D9A 48F7EB                          imul rbx
 25429 00011D9D 4889C7                          mov rdi, rax
 25430 00011DA0 E8BF000000                      call normalize_rational
 25431                                          LEAVE
    38 00011DA5 C9                  <1>  leave
 25432 00011DA6 C22000                          ret AND_KILL_FRAME(2)
 25433                                  
 25434                                  L_code_ptr_raw_bin_mul_qq:
 25435                                          ENTER
    33 00011DA9 C8000000            <1>  enter 0, 0
    34 00011DAD 4883E4F0            <1>  and rsp, ~15
 25436 00011DB1 48837D1802                      cmp COUNT, 2
 25437 00011DB6 0F85B3080000                    jne L_error_arg_count_2
 25438 00011DBC 4C8B4520                        mov r8, PARAM(0)
 25439                                          assert_rational(r8)
    42 00011DC0 41803811            <1>  cmp byte [%1], %2
    43 00011DC4 0F8544090000        <1>  jne L_error_incorrect_type
 25440 00011DCA 4C8B4D28                        mov r9, PARAM(1)
 25441                                          assert_rational(r9)
    42 00011DCE 41803911            <1>  cmp byte [%1], %2
    43 00011DD2 0F8536090000        <1>  jne L_error_incorrect_type
 25442 00011DD8 498B4001                        mov rax, qword [r8 + 1] ; num1
 25443 00011DDC 498B5901                        mov rbx, qword [r9 + 1] ; num2
 25444 00011DE0 4899                            cqo
 25445 00011DE2 48F7EB                          imul rbx
 25446 00011DE5 4889C6                          mov rsi, rax
 25447 00011DE8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 25448 00011DEC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 25449 00011DF0 4899                            cqo
 25450 00011DF2 48F7EB                          imul rbx
 25451 00011DF5 4889C7                          mov rdi, rax
 25452 00011DF8 E867000000                      call normalize_rational
 25453                                          LEAVE
    38 00011DFD C9                  <1>  leave
 25454 00011DFE C22000                          ret AND_KILL_FRAME(2)
 25455                                          
 25456                                  L_code_ptr_raw_bin_div_qq:
 25457                                          ENTER
    33 00011E01 C8000000            <1>  enter 0, 0
    34 00011E05 4883E4F0            <1>  and rsp, ~15
 25458 00011E09 48837D1802                      cmp COUNT, 2
 25459 00011E0E 0F855B080000                    jne L_error_arg_count_2
 25460 00011E14 4C8B4520                        mov r8, PARAM(0)
 25461                                          assert_rational(r8)
    42 00011E18 41803811            <1>  cmp byte [%1], %2
    43 00011E1C 0F85EC080000        <1>  jne L_error_incorrect_type
 25462 00011E22 4C8B4D28                        mov r9, PARAM(1)
 25463                                          assert_rational(r9)
    42 00011E26 41803911            <1>  cmp byte [%1], %2
    43 00011E2A 0F85DE080000        <1>  jne L_error_incorrect_type
 25464 00011E30 4983790100                      cmp qword [r9 + 1], 0
 25465 00011E35 0F8404090000                    je L_error_division_by_zero
 25466 00011E3B 498B4001                        mov rax, qword [r8 + 1] ; num1
 25467 00011E3F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 25468 00011E43 4899                            cqo
 25469 00011E45 48F7EB                          imul rbx
 25470 00011E48 4889C6                          mov rsi, rax
 25471 00011E4B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 25472 00011E4F 498B5901                        mov rbx, qword [r9 + 1] ; num2
 25473 00011E53 4899                            cqo
 25474 00011E55 48F7EB                          imul rbx
 25475 00011E58 4889C7                          mov rdi, rax
 25476 00011E5B E804000000                      call normalize_rational
 25477                                          LEAVE
    38 00011E60 C9                  <1>  leave
 25478 00011E61 C22000                          ret AND_KILL_FRAME(2)
 25479                                          
 25480                                  normalize_rational:
 25481 00011E64 56                              push rsi
 25482 00011E65 57                              push rdi
 25483 00011E66 E839000000                      call gcd
 25484 00011E6B 4889C3                          mov rbx, rax
 25485 00011E6E 58                              pop rax
 25486 00011E6F 4899                            cqo
 25487 00011E71 48F7FB                          idiv rbx
 25488 00011E74 4989C0                          mov r8, rax
 25489 00011E77 58                              pop rax
 25490 00011E78 4899                            cqo
 25491 00011E7A 48F7FB                          idiv rbx
 25492 00011E7D 4989C1                          mov r9, rax
 25493 00011E80 BF11000000                      mov rdi, (1 + 8 + 8)
 25494 00011E85 E890F0FFFF                      call malloc
 25495 00011E8A C60011                          mov byte [rax], T_rational
 25496 00011E8D 4C894801                        mov qword [rax + 1], r9
 25497 00011E91 4C894009                        mov qword [rax + 1 + 8], r8
 25498 00011E95 C3                              ret
 25499                                  
 25500                                  iabs:
 25501 00011E96 4889F8                          mov rax, rdi
 25502 00011E99 4883F800                        cmp rax, 0
 25503 00011E9D 7C01                            jl .Lneg
 25504 00011E9F C3                              ret
 25505                                  .Lneg:
 25506 00011EA0 48F7D8                          neg rax
 25507 00011EA3 C3                              ret
 25508                                  
 25509                                  gcd:
 25510 00011EA4 E8EDFFFFFF                      call iabs
 25511 00011EA9 4889C3                          mov rbx, rax
 25512 00011EAC 4889F7                          mov rdi, rsi
 25513 00011EAF E8E2FFFFFF                      call iabs
 25514 00011EB4 4883F800                        cmp rax, 0
 25515 00011EB8 7502                            jne .L0
 25516 00011EBA 4893                            xchg rax, rbx
 25517                                  .L0:
 25518 00011EBC 4883FB00                        cmp rbx, 0
 25519 00011EC0 740C                            je .L1
 25520 00011EC2 4899                            cqo
 25521 00011EC4 48F7F3                          div rbx
 25522 00011EC7 4889D0                          mov rax, rdx
 25523 00011ECA 4893                            xchg rax, rbx
 25524 00011ECC EBEE                            jmp .L0
 25525                                  .L1:
 25526 00011ECE C3                              ret
 25527                                  
 25528                                  L_code_ptr_error:
 25529                                          ENTER
    33 00011ECF C8000000            <1>  enter 0, 0
    34 00011ED3 4883E4F0            <1>  and rsp, ~15
 25530 00011ED7 48837D1802                      cmp COUNT, 2
 25531 00011EDC 0F858D070000                    jne L_error_arg_count_2
 25532 00011EE2 488B7520                        mov rsi, PARAM(0)
 25533                                          assert_symbol(rsi)
    42 00011EE6 803E04              <1>  cmp byte [%1], %2
    43 00011EE9 0F851F080000        <1>  jne L_error_incorrect_type
 25534 00011EEF 488B7528                        mov rsi, PARAM(1)
 25535                                          assert_string(rsi)
    42 00011EF3 803E03              <1>  cmp byte [%1], %2
    43 00011EF6 0F8512080000        <1>  jne L_error_incorrect_type
 25536 00011EFC 48BF-                           mov rdi, fmt_scheme_error_part_1
 25536 00011EFE [5805000000000000] 
 25537 00011F06 B800000000                      mov rax, 0
 25538                                  	ENTER
    33 00011F0B C8000000            <1>  enter 0, 0
    34 00011F0F 4883E4F0            <1>  and rsp, ~15
 25539 00011F13 E8(00000000)                    call printf
 25540                                  	LEAVE
    38 00011F18 C9                  <1>  leave
 25541 00011F19 488B7D20                        mov rdi, PARAM(0)
 25542 00011F1D E813F0FFFF                      call print_sexpr
 25543 00011F22 48BF-                           mov rdi, fmt_scheme_error_part_2
 25543 00011F24 [6C05000000000000] 
 25544 00011F2C B800000000                      mov rax, 0
 25545                                  	ENTER
    33 00011F31 C8000000            <1>  enter 0, 0
    34 00011F35 4883E4F0            <1>  and rsp, ~15
 25546 00011F39 E8(00000000)                    call printf
 25547                                  	LEAVE
    38 00011F3E C9                  <1>  leave
 25548 00011F3F 488B4528                        mov rax, PARAM(1)       ; sob_string
 25549 00011F43 BE01000000                      mov rsi, 1              ; size = 1 byte
 25550 00011F48 488B5001                        mov rdx, qword [rax + 1] ; length
 25551 00011F4C 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 25552 00011F50 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 25553 00011F58 E8(00000000)                    call fwrite
 25554 00011F5D 48BF-                           mov rdi, fmt_scheme_error_part_3
 25554 00011F5F [AE05000000000000] 
 25555 00011F67 B800000000                      mov rax, 0
 25556                                  	ENTER
    33 00011F6C C8000000            <1>  enter 0, 0
    34 00011F70 4883E4F0            <1>  and rsp, ~15
 25557 00011F74 E8(00000000)                    call printf
 25558                                  	LEAVE
    38 00011F79 C9                  <1>  leave
 25559 00011F7A 48C7C0F7FFFFFF                  mov rax, -9
 25560 00011F81 E8(00000000)                    call exit
 25561                                  
 25562                                  L_code_ptr_raw_less_than_rr:
 25563                                          ENTER
    33 00011F86 C8000000            <1>  enter 0, 0
    34 00011F8A 4883E4F0            <1>  and rsp, ~15
 25564 00011F8E 48837D1802                      cmp COUNT, 2
 25565 00011F93 0F85D6060000                    jne L_error_arg_count_2
 25566 00011F99 488B7520                        mov rsi, PARAM(0)
 25567                                          assert_real(rsi)
    42 00011F9D 803E12              <1>  cmp byte [%1], %2
    43 00011FA0 0F8568070000        <1>  jne L_error_incorrect_type
 25568 00011FA6 488B7D28                        mov rdi, PARAM(1)
 25569                                          assert_real(rdi)
    42 00011FAA 803F12              <1>  cmp byte [%1], %2
    43 00011FAD 0F855B070000        <1>  jne L_error_incorrect_type
 25570 00011FB3 F20F104601                      movsd xmm0, qword [rsi + 1]
 25571 00011FB8 F20F104F01                      movsd xmm1, qword [rdi + 1]
 25572 00011FBD 660F2FC1                        comisd xmm0, xmm1
 25573 00011FC1 730C                            jae .L_false
 25574 00011FC3 48B8-                           mov rax, sob_boolean_true
 25574 00011FC5 [0300000000000000] 
 25575 00011FCD EB0A                            jmp .L_exit
 25576                                  .L_false:
 25577 00011FCF 48B8-                           mov rax, sob_boolean_false
 25577 00011FD1 [0200000000000000] 
 25578                                  .L_exit:
 25579                                          LEAVE
    38 00011FD9 C9                  <1>  leave
 25580 00011FDA C22000                          ret AND_KILL_FRAME(2)
 25581                                          
 25582                                  L_code_ptr_raw_less_than_qq:
 25583                                          ENTER
    33 00011FDD C8000000            <1>  enter 0, 0
    34 00011FE1 4883E4F0            <1>  and rsp, ~15
 25584 00011FE5 48837D1802                      cmp COUNT, 2
 25585 00011FEA 0F857F060000                    jne L_error_arg_count_2
 25586 00011FF0 488B7520                        mov rsi, PARAM(0)
 25587                                          assert_rational(rsi)
    42 00011FF4 803E11              <1>  cmp byte [%1], %2
    43 00011FF7 0F8511070000        <1>  jne L_error_incorrect_type
 25588 00011FFD 488B7D28                        mov rdi, PARAM(1)
 25589                                          assert_rational(rdi)
    42 00012001 803F11              <1>  cmp byte [%1], %2
    43 00012004 0F8504070000        <1>  jne L_error_incorrect_type
 25590 0001200A 488B4601                        mov rax, qword [rsi + 1] ; num1
 25591 0001200E 4899                            cqo
 25592 00012010 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 25593 00012014 4889C1                          mov rcx, rax
 25594 00012017 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 25595 0001201B 4899                            cqo
 25596 0001201D 48F76F01                        imul qword [rdi + 1]          ; num2
 25597 00012021 4829C1                          sub rcx, rax
 25598 00012024 7D0C                            jge .L_false
 25599 00012026 48B8-                           mov rax, sob_boolean_true
 25599 00012028 [0300000000000000] 
 25600 00012030 EB0A                            jmp .L_exit
 25601                                  .L_false:
 25602 00012032 48B8-                           mov rax, sob_boolean_false
 25602 00012034 [0200000000000000] 
 25603                                  .L_exit:
 25604                                          LEAVE
    38 0001203C C9                  <1>  leave
 25605 0001203D C22000                          ret AND_KILL_FRAME(2)
 25606                                  
 25607                                  L_code_ptr_raw_equal_rr:
 25608                                          ENTER
    33 00012040 C8000000            <1>  enter 0, 0
    34 00012044 4883E4F0            <1>  and rsp, ~15
 25609 00012048 48837D1802                      cmp COUNT, 2
 25610 0001204D 0F851C060000                    jne L_error_arg_count_2
 25611 00012053 488B7520                        mov rsi, PARAM(0)
 25612                                          assert_real(rsi)
    42 00012057 803E12              <1>  cmp byte [%1], %2
    43 0001205A 0F85AE060000        <1>  jne L_error_incorrect_type
 25613 00012060 488B7D28                        mov rdi, PARAM(1)
 25614                                          assert_real(rdi)
    42 00012064 803F12              <1>  cmp byte [%1], %2
    43 00012067 0F85A1060000        <1>  jne L_error_incorrect_type
 25615 0001206D F20F104601                      movsd xmm0, qword [rsi + 1]
 25616 00012072 F20F104F01                      movsd xmm1, qword [rdi + 1]
 25617 00012077 660F2FC1                        comisd xmm0, xmm1
 25618 0001207B 750C                            jne .L_false
 25619 0001207D 48B8-                           mov rax, sob_boolean_true
 25619 0001207F [0300000000000000] 
 25620 00012087 EB0A                            jmp .L_exit
 25621                                  .L_false:
 25622 00012089 48B8-                           mov rax, sob_boolean_false
 25622 0001208B [0200000000000000] 
 25623                                  .L_exit:
 25624                                          LEAVE
    38 00012093 C9                  <1>  leave
 25625 00012094 C22000                          ret AND_KILL_FRAME(2)
 25626                                          
 25627                                  L_code_ptr_raw_equal_qq:
 25628                                          ENTER
    33 00012097 C8000000            <1>  enter 0, 0
    34 0001209B 4883E4F0            <1>  and rsp, ~15
 25629 0001209F 48837D1802                      cmp COUNT, 2
 25630 000120A4 0F85C5050000                    jne L_error_arg_count_2
 25631 000120AA 488B7520                        mov rsi, PARAM(0)
 25632                                          assert_rational(rsi)
    42 000120AE 803E11              <1>  cmp byte [%1], %2
    43 000120B1 0F8557060000        <1>  jne L_error_incorrect_type
 25633 000120B7 488B7D28                        mov rdi, PARAM(1)
 25634                                          assert_rational(rdi)
    42 000120BB 803F11              <1>  cmp byte [%1], %2
    43 000120BE 0F854A060000        <1>  jne L_error_incorrect_type
 25635 000120C4 488B4601                        mov rax, qword [rsi + 1] ; num1
 25636 000120C8 4899                            cqo
 25637 000120CA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 25638 000120CE 4889C1                          mov rcx, rax
 25639 000120D1 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 25640 000120D5 4899                            cqo
 25641 000120D7 48F76F01                        imul qword [rdi + 1]          ; num2
 25642 000120DB 4829C1                          sub rcx, rax
 25643 000120DE 750C                            jne .L_false
 25644 000120E0 48B8-                           mov rax, sob_boolean_true
 25644 000120E2 [0300000000000000] 
 25645 000120EA EB0A                            jmp .L_exit
 25646                                  .L_false:
 25647 000120EC 48B8-                           mov rax, sob_boolean_false
 25647 000120EE [0200000000000000] 
 25648                                  .L_exit:
 25649                                          LEAVE
    38 000120F6 C9                  <1>  leave
 25650 000120F7 C22000                          ret AND_KILL_FRAME(2)
 25651                                  
 25652                                  L_code_ptr_quotient:
 25653                                          ENTER
    33 000120FA C8000000            <1>  enter 0, 0
    34 000120FE 4883E4F0            <1>  and rsp, ~15
 25654 00012102 48837D1802                      cmp COUNT, 2
 25655 00012107 0F8562050000                    jne L_error_arg_count_2
 25656 0001210D 488B7520                        mov rsi, PARAM(0)
 25657                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012111 803E11              <2>  cmp byte [%1], %2
    43 00012114 0F85F4050000        <2>  jne L_error_incorrect_type
    48 0001211A 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0001211F 0F85E9050000        <1>  jne L_error_incorrect_type
 25658 00012125 488B7D28                        mov rdi, PARAM(1)
 25659                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00012129 803F11              <2>  cmp byte [%1], %2
    43 0001212C 0F85DC050000        <2>  jne L_error_incorrect_type
    48 00012132 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012137 0F85D1050000        <1>  jne L_error_incorrect_type
 25660 0001213D 488B4601                        mov rax, qword [rsi + 1]
 25661 00012141 488B5F01                        mov rbx, qword [rdi + 1]
 25662 00012145 4883FB00                        cmp rbx, 0
 25663 00012149 0F84F0050000                    je L_error_division_by_zero
 25664 0001214F 4899                            cqo
 25665 00012151 48F7FB                          idiv rbx
 25666 00012154 4889C7                          mov rdi, rax
 25667 00012157 E852040000                      call make_integer
 25668                                          LEAVE
    38 0001215C C9                  <1>  leave
 25669 0001215D C22000                          ret AND_KILL_FRAME(2)
 25670                                          
 25671                                  L_code_ptr_remainder:
 25672                                          ENTER
    33 00012160 C8000000            <1>  enter 0, 0
    34 00012164 4883E4F0            <1>  and rsp, ~15
 25673 00012168 48837D1802                      cmp COUNT, 2
 25674 0001216D 0F85FC040000                    jne L_error_arg_count_2
 25675 00012173 488B7520                        mov rsi, PARAM(0)
 25676                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012177 803E11              <2>  cmp byte [%1], %2
    43 0001217A 0F858E050000        <2>  jne L_error_incorrect_type
    48 00012180 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012185 0F8583050000        <1>  jne L_error_incorrect_type
 25677 0001218B 488B7D28                        mov rdi, PARAM(1)
 25678                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0001218F 803F11              <2>  cmp byte [%1], %2
    43 00012192 0F8576050000        <2>  jne L_error_incorrect_type
    48 00012198 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0001219D 0F856B050000        <1>  jne L_error_incorrect_type
 25679 000121A3 488B4601                        mov rax, qword [rsi + 1]
 25680 000121A7 488B5F01                        mov rbx, qword [rdi + 1]
 25681 000121AB 4883FB00                        cmp rbx, 0
 25682 000121AF 0F848A050000                    je L_error_division_by_zero
 25683 000121B5 4899                            cqo
 25684 000121B7 48F7FB                          idiv rbx
 25685 000121BA 4889D7                          mov rdi, rdx
 25686 000121BD E8EC030000                      call make_integer
 25687                                          LEAVE
    38 000121C2 C9                  <1>  leave
 25688 000121C3 C22000                          ret AND_KILL_FRAME(2)
 25689                                  
 25690                                  L_code_ptr_set_car:
 25691                                          ENTER
    33 000121C6 C8000000            <1>  enter 0, 0
    34 000121CA 4883E4F0            <1>  and rsp, ~15
 25692 000121CE 48837D1802                      cmp COUNT, 2
 25693 000121D3 0F8596040000                    jne L_error_arg_count_2
 25694 000121D9 488B4520                        mov rax, PARAM(0)
 25695                                          assert_pair(rax)
    42 000121DD 803821              <1>  cmp byte [%1], %2
    43 000121E0 0F8528050000        <1>  jne L_error_incorrect_type
 25696 000121E6 488B5D28                        mov rbx, PARAM(1)
 25697 000121EA 48895801                        mov SOB_PAIR_CAR(rax), rbx
 25698 000121EE 48B8-                           mov rax, sob_void
 25698 000121F0 [0000000000000000] 
 25699                                          LEAVE
    38 000121F8 C9                  <1>  leave
 25700 000121F9 C22000                          ret AND_KILL_FRAME(2)
 25701                                  
 25702                                  L_code_ptr_set_cdr:
 25703                                          ENTER
    33 000121FC C8000000            <1>  enter 0, 0
    34 00012200 4883E4F0            <1>  and rsp, ~15
 25704 00012204 48837D1802                      cmp COUNT, 2
 25705 00012209 0F8560040000                    jne L_error_arg_count_2
 25706 0001220F 488B4520                        mov rax, PARAM(0)
 25707                                          assert_pair(rax)
    42 00012213 803821              <1>  cmp byte [%1], %2
    43 00012216 0F85F2040000        <1>  jne L_error_incorrect_type
 25708 0001221C 488B5D28                        mov rbx, PARAM(1)
 25709 00012220 48895809                        mov SOB_PAIR_CDR(rax), rbx
 25710 00012224 48B8-                           mov rax, sob_void
 25710 00012226 [0000000000000000] 
 25711                                          LEAVE
    38 0001222E C9                  <1>  leave
 25712 0001222F C22000                          ret AND_KILL_FRAME(2)
 25713                                  
 25714                                  L_code_ptr_string_ref:
 25715                                          ENTER
    33 00012232 C8000000            <1>  enter 0, 0
    34 00012236 4883E4F0            <1>  and rsp, ~15
 25716 0001223A 48837D1802                      cmp COUNT, 2
 25717 0001223F 0F852A040000                    jne L_error_arg_count_2
 25718 00012245 488B7D20                        mov rdi, PARAM(0)
 25719                                          assert_string(rdi)
    42 00012249 803F03              <1>  cmp byte [%1], %2
    43 0001224C 0F85BC040000        <1>  jne L_error_incorrect_type
 25720 00012252 488B7528                        mov rsi, PARAM(1)
 25721                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012256 803E11              <2>  cmp byte [%1], %2
    43 00012259 0F85AF040000        <2>  jne L_error_incorrect_type
    48 0001225F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012264 0F85A4040000        <1>  jne L_error_incorrect_type
 25722 0001226A 488B5701                        mov rdx, qword [rdi + 1]
 25723 0001226E 488B4E01                        mov rcx, qword [rsi + 1]
 25724 00012272 4839D1                          cmp rcx, rdx
 25725 00012275 0F8D59030000                    jge L_error_integer_range
 25726 0001227B 4883F900                        cmp rcx, 0
 25727 0001227F 0F8C4F030000                    jl L_error_integer_range
 25728 00012285 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 25729 00012289 BF02000000                      mov rdi, 2
 25730 0001228E E887ECFFFF                      call malloc
 25731 00012293 C60002                          mov byte [rax], T_char
 25732 00012296 885801                          mov byte [rax + 1], bl
 25733                                          LEAVE
    38 00012299 C9                  <1>  leave
 25734 0001229A C22000                          ret AND_KILL_FRAME(2)
 25735                                  
 25736                                  L_code_ptr_vector_ref:
 25737                                          ENTER
    33 0001229D C8000000            <1>  enter 0, 0
    34 000122A1 4883E4F0            <1>  and rsp, ~15
 25738 000122A5 48837D1802                      cmp COUNT, 2
 25739 000122AA 0F85BF030000                    jne L_error_arg_count_2
 25740 000122B0 488B7D20                        mov rdi, PARAM(0)
 25741                                          assert_vector(rdi)
    42 000122B4 803F22              <1>  cmp byte [%1], %2
    43 000122B7 0F8551040000        <1>  jne L_error_incorrect_type
 25742 000122BD 488B7528                        mov rsi, PARAM(1)
 25743                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000122C1 803E11              <2>  cmp byte [%1], %2
    43 000122C4 0F8544040000        <2>  jne L_error_incorrect_type
    48 000122CA 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000122CF 0F8539040000        <1>  jne L_error_incorrect_type
 25744 000122D5 488B5701                        mov rdx, qword [rdi + 1]
 25745 000122D9 488B4E01                        mov rcx, qword [rsi + 1]
 25746 000122DD 4839D1                          cmp rcx, rdx
 25747 000122E0 0F8DEE020000                    jge L_error_integer_range
 25748 000122E6 4883F900                        cmp rcx, 0
 25749 000122EA 0F8CE4020000                    jl L_error_integer_range
 25750 000122F0 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 25751                                          LEAVE
    38 000122F5 C9                  <1>  leave
 25752 000122F6 C22000                          ret AND_KILL_FRAME(2)
 25753                                  
 25754                                  L_code_ptr_vector_set:
 25755                                          ENTER
    33 000122F9 C8000000            <1>  enter 0, 0
    34 000122FD 4883E4F0            <1>  and rsp, ~15
 25756 00012301 48837D1803                      cmp COUNT, 3
 25757 00012306 0F85CD030000                    jne L_error_arg_count_3
 25758 0001230C 488B7D20                        mov rdi, PARAM(0)
 25759                                          assert_vector(rdi)
    42 00012310 803F22              <1>  cmp byte [%1], %2
    43 00012313 0F85F5030000        <1>  jne L_error_incorrect_type
 25760 00012319 488B7528                        mov rsi, PARAM(1)
 25761                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0001231D 803E11              <2>  cmp byte [%1], %2
    43 00012320 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00012326 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0001232B 0F85DD030000        <1>  jne L_error_incorrect_type
 25762 00012331 488B5701                        mov rdx, qword [rdi + 1]
 25763 00012335 488B4E01                        mov rcx, qword [rsi + 1]
 25764 00012339 4839D1                          cmp rcx, rdx
 25765 0001233C 0F8D92020000                    jge L_error_integer_range
 25766 00012342 4883F900                        cmp rcx, 0
 25767 00012346 0F8C88020000                    jl L_error_integer_range
 25768 0001234C 488B4530                        mov rax, PARAM(2)
 25769 00012350 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 25770 00012355 48B8-                           mov rax, sob_void
 25770 00012357 [0000000000000000] 
 25771                                          LEAVE
    38 0001235F C9                  <1>  leave
 25772 00012360 C22800                          ret AND_KILL_FRAME(3)
 25773                                  
 25774                                  L_code_ptr_string_set:
 25775                                          ENTER
    33 00012363 C8000000            <1>  enter 0, 0
    34 00012367 4883E4F0            <1>  and rsp, ~15
 25776 0001236B 48837D1803                      cmp COUNT, 3
 25777 00012370 0F8563030000                    jne L_error_arg_count_3
 25778 00012376 488B7D20                        mov rdi, PARAM(0)
 25779                                          assert_string(rdi)
    42 0001237A 803F03              <1>  cmp byte [%1], %2
    43 0001237D 0F858B030000        <1>  jne L_error_incorrect_type
 25780 00012383 488B7528                        mov rsi, PARAM(1)
 25781                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012387 803E11              <2>  cmp byte [%1], %2
    43 0001238A 0F857E030000        <2>  jne L_error_incorrect_type
    48 00012390 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012395 0F8573030000        <1>  jne L_error_incorrect_type
 25782 0001239B 488B5701                        mov rdx, qword [rdi + 1]
 25783 0001239F 488B4E01                        mov rcx, qword [rsi + 1]
 25784 000123A3 4839D1                          cmp rcx, rdx
 25785 000123A6 0F8D28020000                    jge L_error_integer_range
 25786 000123AC 4883F900                        cmp rcx, 0
 25787 000123B0 0F8C1E020000                    jl L_error_integer_range
 25788 000123B6 488B4530                        mov rax, PARAM(2)
 25789                                          assert_char(rax)
    42 000123BA 803802              <1>  cmp byte [%1], %2
    43 000123BD 0F854B030000        <1>  jne L_error_incorrect_type
 25790 000123C3 8A4001                          mov al, byte [rax + 1]
 25791 000123C6 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 25792 000123CA 48B8-                           mov rax, sob_void
 25792 000123CC [0000000000000000] 
 25793                                          LEAVE
    38 000123D4 C9                  <1>  leave
 25794 000123D5 C22800                          ret AND_KILL_FRAME(3)
 25795                                  
 25796                                  L_code_ptr_make_vector:
 25797                                          ENTER
    33 000123D8 C8000000            <1>  enter 0, 0
    34 000123DC 4883E4F0            <1>  and rsp, ~15
 25798 000123E0 48837D1802                      cmp COUNT, 2
 25799 000123E5 0F8584020000                    jne L_error_arg_count_2
 25800 000123EB 488B4D20                        mov rcx, PARAM(0)
 25801                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000123EF 803911              <2>  cmp byte [%1], %2
    43 000123F2 0F8516030000        <2>  jne L_error_incorrect_type
    48 000123F8 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000123FD 0F850B030000        <1>  jne L_error_incorrect_type
 25802 00012403 488B4901                        mov rcx, qword [rcx + 1]
 25803 00012407 4883F900                        cmp rcx, 0
 25804 0001240B 0F8CC3010000                    jl L_error_integer_range
 25805 00012411 488B5528                        mov rdx, PARAM(1)
 25806 00012415 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 25807 0001241D E8F8EAFFFF                      call malloc
 25808 00012422 C60022                          mov byte [rax], T_vector
 25809 00012425 48894801                        mov qword [rax + 1], rcx
 25810 00012429 41B800000000                    mov r8, 0
 25811                                  .L0:
 25812 0001242F 4939C8                          cmp r8, rcx
 25813 00012432 740A                            je .L1
 25814 00012434 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 25815 00012439 49FFC0                          inc r8
 25816 0001243C EBF1                            jmp .L0
 25817                                  .L1:
 25818                                          LEAVE
    38 0001243E C9                  <1>  leave
 25819 0001243F C22000                          ret AND_KILL_FRAME(2)
 25820                                          
 25821                                  L_code_ptr_make_string:
 25822                                          ENTER
    33 00012442 C8000000            <1>  enter 0, 0
    34 00012446 4883E4F0            <1>  and rsp, ~15
 25823 0001244A 48837D1802                      cmp COUNT, 2
 25824 0001244F 0F851A020000                    jne L_error_arg_count_2
 25825 00012455 488B4D20                        mov rcx, PARAM(0)
 25826                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00012459 803911              <2>  cmp byte [%1], %2
    43 0001245C 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00012462 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012467 0F85A1020000        <1>  jne L_error_incorrect_type
 25827 0001246D 488B4901                        mov rcx, qword [rcx + 1]
 25828 00012471 4883F900                        cmp rcx, 0
 25829 00012475 0F8C59010000                    jl L_error_integer_range
 25830 0001247B 488B5528                        mov rdx, PARAM(1)
 25831                                          assert_char(rdx)
    42 0001247F 803A02              <1>  cmp byte [%1], %2
    43 00012482 0F8586020000        <1>  jne L_error_incorrect_type
 25832 00012488 8A5201                          mov dl, byte [rdx + 1]
 25833 0001248B 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 25834 0001248F E886EAFFFF                      call malloc
 25835 00012494 C60003                          mov byte [rax], T_string
 25836 00012497 48894801                        mov qword [rax + 1], rcx
 25837 0001249B 41B800000000                    mov r8, 0
 25838                                  .L0:
 25839 000124A1 4939C8                          cmp r8, rcx
 25840 000124A4 740A                            je .L1
 25841 000124A6 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 25842 000124AB 49FFC0                          inc r8
 25843 000124AE EBF1                            jmp .L0
 25844                                  .L1:
 25845                                          LEAVE
    38 000124B0 C9                  <1>  leave
 25846 000124B1 C22000                          ret AND_KILL_FRAME(2)
 25847                                  
 25848                                  L_code_ptr_numerator:
 25849                                          ENTER
    33 000124B4 C8000000            <1>  enter 0, 0
    34 000124B8 4883E4F0            <1>  and rsp, ~15
 25850 000124BC 48837D1801                      cmp COUNT, 1
 25851 000124C1 0F8573010000                    jne L_error_arg_count_1
 25852 000124C7 488B4520                        mov rax, PARAM(0)
 25853                                          assert_rational(rax)
    42 000124CB 803811              <1>  cmp byte [%1], %2
    43 000124CE 0F853A020000        <1>  jne L_error_incorrect_type
 25854 000124D4 488B7801                        mov rdi, qword [rax + 1]
 25855 000124D8 E8D1000000                      call make_integer
 25856                                          LEAVE
    38 000124DD C9                  <1>  leave
 25857 000124DE C21800                          ret AND_KILL_FRAME(1)
 25858                                          
 25859                                  L_code_ptr_denominator:
 25860                                          ENTER
    33 000124E1 C8000000            <1>  enter 0, 0
    34 000124E5 4883E4F0            <1>  and rsp, ~15
 25861 000124E9 48837D1801                      cmp COUNT, 1
 25862 000124EE 0F8546010000                    jne L_error_arg_count_1
 25863 000124F4 488B4520                        mov rax, PARAM(0)
 25864                                          assert_rational(rax)
    42 000124F8 803811              <1>  cmp byte [%1], %2
    43 000124FB 0F850D020000        <1>  jne L_error_incorrect_type
 25865 00012501 488B7809                        mov rdi, qword [rax + 1 + 8]
 25866 00012505 E8A4000000                      call make_integer
 25867                                          LEAVE
    38 0001250A C9                  <1>  leave
 25868 0001250B C21800                          ret AND_KILL_FRAME(1)
 25869                                  
 25870                                  L_code_ptr_eq:
 25871                                  	ENTER
    33 0001250E C8000000            <1>  enter 0, 0
    34 00012512 4883E4F0            <1>  and rsp, ~15
 25872 00012516 48837D1802              	cmp COUNT, 2
 25873 0001251B 0F854E010000            	jne L_error_arg_count_2
 25874 00012521 488B7D20                	mov rdi, PARAM(0)
 25875 00012525 488B7528                	mov rsi, PARAM(1)
 25876 00012529 4839F7                  	cmp rdi, rsi
 25877 0001252C 744A                    	je .L_eq_true
 25878 0001252E 8A17                    	mov dl, byte [rdi]
 25879 00012530 3A16                    	cmp dl, byte [rsi]
 25880 00012532 7550                    	jne .L_eq_false
 25881 00012534 80FA02                  	cmp dl, T_char
 25882 00012537 7437                    	je .L_char
 25883 00012539 80FA04                  	cmp dl, T_symbol
 25884 0001253C 742A                    	je .L_symbol
 25885 0001253E 80FA12                  	cmp dl, T_real
 25886 00012541 741D                    	je .L_real
 25887 00012543 80FA11                  	cmp dl, T_rational
 25888 00012546 7402                    	je .L_rational
 25889 00012548 EB3A                    	jmp .L_eq_false
 25890                                  .L_rational:
 25891 0001254A 488B4601                	mov rax, qword [rsi + 1]
 25892 0001254E 483B4701                	cmp rax, qword [rdi + 1]
 25893 00012552 7530                    	jne .L_eq_false
 25894 00012554 488B4609                	mov rax, qword [rsi + 1 + 8]
 25895 00012558 483B4709                	cmp rax, qword [rdi + 1 + 8]
 25896 0001255C 7526                    	jne .L_eq_false
 25897 0001255E EB18                    	jmp .L_eq_true
 25898                                  .L_real:
 25899 00012560 488B4601                	mov rax, qword [rsi + 1]
 25900 00012564 483B4701                	cmp rax, qword [rdi + 1]
 25901                                  .L_symbol:
 25902                                  	; never reached, because symbols are static!
 25903                                  	; but I'm keeping it in case, I'll ever change
 25904                                  	; the implementation
 25905 00012568 488B4601                	mov rax, qword [rsi + 1]
 25906 0001256C 483B4701                	cmp rax, qword [rdi + 1]
 25907                                  .L_char:
 25908 00012570 8A5E01                  	mov bl, byte [rsi + 1]
 25909 00012573 3A5F01                  	cmp bl, byte [rdi + 1]
 25910 00012576 750C                    	jne .L_eq_false
 25911                                  .L_eq_true:
 25912 00012578 48B8-                   	mov rax, sob_boolean_true
 25912 0001257A [0300000000000000] 
 25913 00012582 EB0A                    	jmp .L_eq_exit
 25914                                  .L_eq_false:
 25915 00012584 48B8-                   	mov rax, sob_boolean_false
 25915 00012586 [0200000000000000] 
 25916                                  .L_eq_exit:
 25917                                  	LEAVE
    38 0001258E C9                  <1>  leave
 25918 0001258F C22000                  	ret AND_KILL_FRAME(2)
 25919                                  
 25920                                  make_real:
 25921                                          ENTER
    33 00012592 C8000000            <1>  enter 0, 0
    34 00012596 4883E4F0            <1>  and rsp, ~15
 25922 0001259A BF09000000                      mov rdi, (1 + 8)
 25923 0001259F E876E9FFFF                      call malloc
 25924 000125A4 C60012                          mov byte [rax], T_real
 25925 000125A7 F20F114001                      movsd qword [rax + 1], xmm0
 25926                                          LEAVE
    38 000125AC C9                  <1>  leave
 25927 000125AD C3                              ret
 25928                                          
 25929                                  make_integer:
 25930                                          ENTER
    33 000125AE C8000000            <1>  enter 0, 0
    34 000125B2 4883E4F0            <1>  and rsp, ~15
 25931 000125B6 4889FE                          mov rsi, rdi
 25932 000125B9 BF11000000                      mov rdi, (1 + 8 + 8)
 25933 000125BE E857E9FFFF                      call malloc
 25934 000125C3 C60011                          mov byte [rax], T_rational
 25935 000125C6 48897001                        mov qword [rax + 1], rsi
 25936 000125CA 48C7400901000000                mov qword [rax + 1 + 8], 1
 25937                                          LEAVE
    38 000125D2 C9                  <1>  leave
 25938 000125D3 C3                              ret
 25939                                          
 25940                                  L_error_integer_range:
 25941 000125D4 488B3C25[00000000]              mov rdi, qword [stderr]
 25942 000125DC 48BE-                           mov rsi, fmt_integer_range
 25942 000125DE [2505000000000000] 
 25943 000125E6 B800000000                      mov rax, 0
 25944                                  	ENTER
    33 000125EB C8000000            <1>  enter 0, 0
    34 000125EF 4883E4F0            <1>  and rsp, ~15
 25945 000125F3 E8(00000000)                    call fprintf
 25946                                  	LEAVE
    38 000125F8 C9                  <1>  leave
 25947 000125F9 48C7C0FBFFFFFF                  mov rax, -5
 25948 00012600 E8(00000000)                    call exit
 25949                                  
 25950                                  L_error_arg_count_0:
 25951 00012605 488B3C25[00000000]              mov rdi, qword [stderr]
 25952 0001260D 48BE-                           mov rsi, fmt_arg_count_0
 25952 0001260F [2304000000000000] 
 25953 00012617 488B5518                        mov rdx, COUNT
 25954 0001261B B800000000                      mov rax, 0
 25955                                  	ENTER
    33 00012620 C8000000            <1>  enter 0, 0
    34 00012624 4883E4F0            <1>  and rsp, ~15
 25956 00012628 E8(00000000)                    call fprintf
 25957                                  	LEAVE
    38 0001262D C9                  <1>  leave
 25958 0001262E 48C7C0FDFFFFFF                  mov rax, -3
 25959 00012635 E8(00000000)                    call exit
 25960                                  
 25961                                  L_error_arg_count_1:
 25962 0001263A 488B3C25[00000000]              mov rdi, qword [stderr]
 25963 00012642 48BE-                           mov rsi, fmt_arg_count_1
 25963 00012644 [4B04000000000000] 
 25964 0001264C 488B5518                        mov rdx, COUNT
 25965 00012650 B800000000                      mov rax, 0
 25966                                  	ENTER
    33 00012655 C8000000            <1>  enter 0, 0
    34 00012659 4883E4F0            <1>  and rsp, ~15
 25967 0001265D E8(00000000)                    call fprintf
 25968                                  	LEAVE
    38 00012662 C9                  <1>  leave
 25969 00012663 48C7C0FDFFFFFF                  mov rax, -3
 25970 0001266A E8(00000000)                    call exit
 25971                                  
 25972                                  L_error_arg_count_2:
 25973 0001266F 488B3C25[00000000]              mov rdi, qword [stderr]
 25974 00012677 48BE-                           mov rsi, fmt_arg_count_2
 25974 00012679 [B104000000000000] 
 25975 00012681 488B5518                        mov rdx, COUNT
 25976 00012685 B800000000                      mov rax, 0
 25977                                  	ENTER
    33 0001268A C8000000            <1>  enter 0, 0
    34 0001268E 4883E4F0            <1>  and rsp, ~15
 25978 00012692 E8(00000000)                    call fprintf
 25979                                  	LEAVE
    38 00012697 C9                  <1>  leave
 25980 00012698 48C7C0FDFFFFFF                  mov rax, -3
 25981 0001269F E8(00000000)                    call exit
 25982                                  
 25983                                  L_error_arg_count_12:
 25984 000126A4 488B3C25[00000000]              mov rdi, qword [stderr]
 25985 000126AC 48BE-                           mov rsi, fmt_arg_count_12
 25985 000126AE [7104000000000000] 
 25986 000126B6 488B5518                        mov rdx, COUNT
 25987 000126BA B800000000                      mov rax, 0
 25988                                  	ENTER
    33 000126BF C8000000            <1>  enter 0, 0
    34 000126C3 4883E4F0            <1>  and rsp, ~15
 25989 000126C7 E8(00000000)                    call fprintf
 25990                                  	LEAVE
    38 000126CC C9                  <1>  leave
 25991 000126CD 48C7C0FDFFFFFF                  mov rax, -3
 25992 000126D4 E8(00000000)                    call exit
 25993                                  
 25994                                  L_error_arg_count_3:
 25995 000126D9 488B3C25[00000000]              mov rdi, qword [stderr]
 25996 000126E1 48BE-                           mov rsi, fmt_arg_count_3
 25996 000126E3 [D804000000000000] 
 25997 000126EB 488B5518                        mov rdx, COUNT
 25998 000126EF B800000000                      mov rax, 0
 25999                                  	ENTER
    33 000126F4 C8000000            <1>  enter 0, 0
    34 000126F8 4883E4F0            <1>  and rsp, ~15
 26000 000126FC E8(00000000)                    call fprintf
 26001                                  	LEAVE
    38 00012701 C9                  <1>  leave
 26002 00012702 48C7C0FDFFFFFF                  mov rax, -3
 26003 00012709 E8(00000000)                    call exit
 26004                                          
 26005                                  L_error_incorrect_type:
 26006 0001270E 488B3C25[00000000]              mov rdi, qword [stderr]
 26007 00012716 48BE-                           mov rsi, fmt_type
 26007 00012718 [0105000000000000] 
 26008 00012720 B800000000                      mov rax, 0
 26009                                  	ENTER
    33 00012725 C8000000            <1>  enter 0, 0
    34 00012729 4883E4F0            <1>  and rsp, ~15
 26010 0001272D E8(00000000)                    call fprintf
 26011                                  	LEAVE
    38 00012732 C9                  <1>  leave
 26012 00012733 48C7C0FCFFFFFF                  mov rax, -4
 26013 0001273A E8(00000000)                    call exit
 26014                                  
 26015                                  L_error_division_by_zero:
 26016 0001273F 488B3C25[00000000]              mov rdi, qword [stderr]
 26017 00012747 48BE-                           mov rsi, fmt_division_by_zero
 26017 00012749 [4205000000000000] 
 26018 00012751 B800000000                      mov rax, 0
 26019                                  	ENTER
    33 00012756 C8000000            <1>  enter 0, 0
    34 0001275A 4883E4F0            <1>  and rsp, ~15
 26020 0001275E E8(00000000)                    call fprintf
 26021                                  	LEAVE
    38 00012763 C9                  <1>  leave
 26022 00012764 48C7C0F8FFFFFF                  mov rax, -8
 26023 0001276B E8(00000000)                    call exit
 26024                                  
 26025                                  section .data
 26026                                  fmt_char:
 26027 00000420 256300                          db `%c\0`
 26028                                  fmt_arg_count_0:
 26029 00000423 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 26029 0000042C 74696E67207A65726F-
 26029 00000435 20617267756D656E74-
 26029 0000043E 732E20466F756E6420-
 26029 00000447 25640A00           
 26030                                  fmt_arg_count_1:
 26031 0000044B 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 26031 00000454 74696E67206F6E6520-
 26031 0000045D 617267756D656E742E-
 26031 00000466 20466F756E64202564-
 26031 0000046F 0A00               
 26032                                  fmt_arg_count_12:
 26033 00000471 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 26033 0000047A 74696E67206F6E6520-
 26033 00000483 726571756972656420-
 26033 0000048C 616E64206F6E65206F-
 26033 00000495 7074696F6E616C2061-
 26033 0000049E 7267756D656E742E20-
 26033 000004A7 466F756E642025640A-
 26033 000004B0 00                 
 26034                                  fmt_arg_count_2:
 26035 000004B1 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 26035 000004BA 74696E672074776F20-
 26035 000004C3 617267756D656E7473-
 26035 000004CC 2E20466F756E642025-
 26035 000004D5 640A00             
 26036                                  fmt_arg_count_3:
 26037 000004D8 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 26037 000004E1 74696E672074687265-
 26037 000004EA 6520617267756D656E-
 26037 000004F3 74732E20466F756E64-
 26037 000004FC 2025640A00         
 26038                                  fmt_type:
 26039 00000501 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 26039 0000050A 696F6E207061737365-
 26039 00000513 6420696E636F727265-
 26039 0000051C 637420747970650A00 
 26040                                  fmt_integer_range:
 26041 00000525 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 26041 0000052E 7265637420696E7465-
 26041 00000537 6765722072616E6765-
 26041 00000540 0A00               
 26042                                  fmt_division_by_zero:
 26043 00000542 212121204469766973-             db `!!! Division by zero\n\0`
 26043 0000054B 696F6E206279207A65-
 26043 00000554 726F0A00           
 26044                                  fmt_scheme_error_part_1:
 26045 00000558 0A2121212054686520-             db `\n!!! The procedure \0`
 26045 00000561 70726F636564757265-
 26045 0000056A 2000               
 26046                                  fmt_scheme_error_part_2:
 26047 0000056C 2061736B656420746F-             db ` asked to terminate the program\n`
 26047 00000575 207465726D696E6174-
 26047 0000057E 65207468652070726F-
 26047 00000587 6772616D0A         
 26048 0000058C 202020207769746820-             db `    with the following message:\n\n\0`
 26048 00000595 74686520666F6C6C6F-
 26048 0000059E 77696E67206D657373-
 26048 000005A7 6167653A0A0A00     
 26049                                  fmt_scheme_error_part_3:
 26050 000005AE 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 26050 000005B7 210A0A00           
