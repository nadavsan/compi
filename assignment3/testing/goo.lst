     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 20
    84 00000007 140000000000000001-     	dq 20, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 10
    86 00000018 0A0000000000000001-     	dq 10, 1
    86 00000021 00000000000000     
    87 00000028 21                      	db T_pair	; (10)
    88 00000029 [1700000000000000]-     	dq L_constants + 23, L_constants + 1
    88 00000031 [0100000000000000] 
    89 00000039 21                      	db T_pair	; (20 10)
    90 0000003A [0600000000000000]-     	dq L_constants + 6, L_constants + 40
    90 00000042 [2800000000000000] 
    91                                  
    92                                  section .bss
    93                                  free_var_0:	; location of null?
    94 00000000 ????????????????        	resq 1
    95                                  free_var_1:	; location of pair?
    96 00000008 ????????????????        	resq 1
    97                                  free_var_2:	; location of void?
    98 00000010 ????????????????        	resq 1
    99                                  free_var_3:	; location of char?
   100 00000018 ????????????????        	resq 1
   101                                  free_var_4:	; location of string?
   102 00000020 ????????????????        	resq 1
   103                                  free_var_5:	; location of symbol?
   104 00000028 ????????????????        	resq 1
   105                                  free_var_6:	; location of vector?
   106 00000030 ????????????????        	resq 1
   107                                  free_var_7:	; location of procedure?
   108 00000038 ????????????????        	resq 1
   109                                  free_var_8:	; location of real?
   110 00000040 ????????????????        	resq 1
   111                                  free_var_9:	; location of rational?
   112 00000048 ????????????????        	resq 1
   113                                  free_var_10:	; location of boolean?
   114 00000050 ????????????????        	resq 1
   115                                  free_var_11:	; location of number?
   116 00000058 ????????????????        	resq 1
   117                                  free_var_12:	; location of collection?
   118 00000060 ????????????????        	resq 1
   119                                  free_var_13:	; location of cons
   120 00000068 ????????????????        	resq 1
   121                                  free_var_14:	; location of display-sexpr
   122 00000070 ????????????????        	resq 1
   123                                  free_var_15:	; location of write-char
   124 00000078 ????????????????        	resq 1
   125                                  free_var_16:	; location of car
   126 00000080 ????????????????        	resq 1
   127                                  free_var_17:	; location of cdr
   128 00000088 ????????????????        	resq 1
   129                                  free_var_18:	; location of string-length
   130 00000090 ????????????????        	resq 1
   131                                  free_var_19:	; location of vector-length
   132 00000098 ????????????????        	resq 1
   133                                  free_var_20:	; location of real->integer
   134 000000A0 ????????????????        	resq 1
   135                                  free_var_21:	; location of exit
   136 000000A8 ????????????????        	resq 1
   137                                  free_var_22:	; location of integer->real
   138 000000B0 ????????????????        	resq 1
   139                                  free_var_23:	; location of rational->real
   140 000000B8 ????????????????        	resq 1
   141                                  free_var_24:	; location of char->integer
   142 000000C0 ????????????????        	resq 1
   143                                  free_var_25:	; location of integer->char
   144 000000C8 ????????????????        	resq 1
   145                                  free_var_26:	; location of trng
   146 000000D0 ????????????????        	resq 1
   147                                  free_var_27:	; location of zero?
   148 000000D8 ????????????????        	resq 1
   149                                  free_var_28:	; location of integer?
   150 000000E0 ????????????????        	resq 1
   151                                  free_var_29:	; location of __bin-apply
   152 000000E8 ????????????????        	resq 1
   153                                  free_var_30:	; location of __bin-add-rr
   154 000000F0 ????????????????        	resq 1
   155                                  free_var_31:	; location of __bin-sub-rr
   156 000000F8 ????????????????        	resq 1
   157                                  free_var_32:	; location of __bin-mul-rr
   158 00000100 ????????????????        	resq 1
   159                                  free_var_33:	; location of __bin-div-rr
   160 00000108 ????????????????        	resq 1
   161                                  free_var_34:	; location of __bin-add-qq
   162 00000110 ????????????????        	resq 1
   163                                  free_var_35:	; location of __bin-sub-qq
   164 00000118 ????????????????        	resq 1
   165                                  free_var_36:	; location of __bin-mul-qq
   166 00000120 ????????????????        	resq 1
   167                                  free_var_37:	; location of __bin-div-qq
   168 00000128 ????????????????        	resq 1
   169                                  free_var_38:	; location of error
   170 00000130 ????????????????        	resq 1
   171                                  free_var_39:	; location of __bin-less-than-rr
   172 00000138 ????????????????        	resq 1
   173                                  free_var_40:	; location of __bin-less-than-qq
   174 00000140 ????????????????        	resq 1
   175                                  free_var_41:	; location of __bin-equal-rr
   176 00000148 ????????????????        	resq 1
   177                                  free_var_42:	; location of __bin-equal-qq
   178 00000150 ????????????????        	resq 1
   179                                  free_var_43:	; location of quotient
   180 00000158 ????????????????        	resq 1
   181                                  free_var_44:	; location of remainder
   182 00000160 ????????????????        	resq 1
   183                                  free_var_45:	; location of set-car!
   184 00000168 ????????????????        	resq 1
   185                                  free_var_46:	; location of set-cdr!
   186 00000170 ????????????????        	resq 1
   187                                  free_var_47:	; location of string-ref
   188 00000178 ????????????????        	resq 1
   189                                  free_var_48:	; location of vector-ref
   190 00000180 ????????????????        	resq 1
   191                                  free_var_49:	; location of vector-set!
   192 00000188 ????????????????        	resq 1
   193                                  free_var_50:	; location of string-set!
   194 00000190 ????????????????        	resq 1
   195                                  free_var_51:	; location of make-vector
   196 00000198 ????????????????        	resq 1
   197                                  free_var_52:	; location of make-string
   198 000001A0 ????????????????        	resq 1
   199                                  free_var_53:	; location of numerator
   200 000001A8 ????????????????        	resq 1
   201                                  free_var_54:	; location of denominator
   202 000001B0 ????????????????        	resq 1
   203                                  free_var_55:	; location of eq?
   204 000001B8 ????????????????        	resq 1
   205                                  
   206                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   207                                  global main
   208                                  section .text
   209                                  main:
   210 00000000 C8000000                        enter 0, 0
   211                                          
   212                                  	; building closure for null?
   213 00000004 48BF-                   	mov rdi, free_var_0
   213 00000006 [0000000000000000] 
   214 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   214 00000010 [EA0C000000000000] 
   215 00000018 E8FC0B0000              	call bind_primitive
   216                                  
   217                                  	; building closure for pair?
   218 0000001D 48BF-                   	mov rdi, free_var_1
   218 0000001F [0800000000000000] 
   219 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   219 00000029 [200D000000000000] 
   220 00000031 E8E30B0000              	call bind_primitive
   221                                  
   222                                  	; building closure for void?
   223 00000036 48BF-                   	mov rdi, free_var_2
   223 00000038 [1000000000000000] 
   224 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   224 00000042 [560D000000000000] 
   225 0000004A E8CA0B0000              	call bind_primitive
   226                                  
   227                                  	; building closure for char?
   228 0000004F 48BF-                   	mov rdi, free_var_3
   228 00000051 [1800000000000000] 
   229 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   229 0000005B [8C0D000000000000] 
   230 00000063 E8B10B0000              	call bind_primitive
   231                                  
   232                                  	; building closure for string?
   233 00000068 48BF-                   	mov rdi, free_var_4
   233 0000006A [2000000000000000] 
   234 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   234 00000074 [C20D000000000000] 
   235 0000007C E8980B0000              	call bind_primitive
   236                                  
   237                                  	; building closure for symbol?
   238 00000081 48BF-                   	mov rdi, free_var_5
   238 00000083 [2800000000000000] 
   239 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   239 0000008D [F80D000000000000] 
   240 00000095 E87F0B0000              	call bind_primitive
   241                                  
   242                                  	; building closure for vector?
   243 0000009A 48BF-                   	mov rdi, free_var_6
   243 0000009C [3000000000000000] 
   244 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   244 000000A6 [2E0E000000000000] 
   245 000000AE E8660B0000              	call bind_primitive
   246                                  
   247                                  	; building closure for procedure?
   248 000000B3 48BF-                   	mov rdi, free_var_7
   248 000000B5 [3800000000000000] 
   249 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   249 000000BF [640E000000000000] 
   250 000000C7 E84D0B0000              	call bind_primitive
   251                                  
   252                                  	; building closure for real?
   253 000000CC 48BF-                   	mov rdi, free_var_8
   253 000000CE [4000000000000000] 
   254 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   254 000000D8 [9A0E000000000000] 
   255 000000E0 E8340B0000              	call bind_primitive
   256                                  
   257                                  	; building closure for rational?
   258 000000E5 48BF-                   	mov rdi, free_var_9
   258 000000E7 [4800000000000000] 
   259 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   259 000000F1 [D00E000000000000] 
   260 000000F9 E81B0B0000              	call bind_primitive
   261                                  
   262                                  	; building closure for boolean?
   263 000000FE 48BF-                   	mov rdi, free_var_10
   263 00000100 [5000000000000000] 
   264 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   264 0000010A [060F000000000000] 
   265 00000112 E8020B0000              	call bind_primitive
   266                                  
   267                                  	; building closure for number?
   268 00000117 48BF-                   	mov rdi, free_var_11
   268 00000119 [5800000000000000] 
   269 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   269 00000123 [3E0F000000000000] 
   270 0000012B E8E90A0000              	call bind_primitive
   271                                  
   272                                  	; building closure for collection?
   273 00000130 48BF-                   	mov rdi, free_var_12
   273 00000132 [6000000000000000] 
   274 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   274 0000013C [760F000000000000] 
   275 00000144 E8D00A0000              	call bind_primitive
   276                                  
   277                                  	; building closure for cons
   278 00000149 48BF-                   	mov rdi, free_var_13
   278 0000014B [6800000000000000] 
   279 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   279 00000155 [AE0F000000000000] 
   280 0000015D E8B70A0000              	call bind_primitive
   281                                  
   282                                  	; building closure for display-sexpr
   283 00000162 48BF-                   	mov rdi, free_var_14
   283 00000164 [7000000000000000] 
   284 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   284 0000016E [E20F000000000000] 
   285 00000176 E89E0A0000              	call bind_primitive
   286                                  
   287                                  	; building closure for write-char
   288 0000017B 48BF-                   	mov rdi, free_var_15
   288 0000017D [7800000000000000] 
   289 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   289 00000187 [0C10000000000000] 
   290 0000018F E8850A0000              	call bind_primitive
   291                                  
   292                                  	; building closure for car
   293 00000194 48BF-                   	mov rdi, free_var_16
   293 00000196 [8000000000000000] 
   294 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   294 000001A0 [6310000000000000] 
   295 000001A8 E86C0A0000              	call bind_primitive
   296                                  
   297                                  	; building closure for cdr
   298 000001AD 48BF-                   	mov rdi, free_var_17
   298 000001AF [8800000000000000] 
   299 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   299 000001B9 [8B10000000000000] 
   300 000001C1 E8530A0000              	call bind_primitive
   301                                  
   302                                  	; building closure for string-length
   303 000001C6 48BF-                   	mov rdi, free_var_18
   303 000001C8 [9000000000000000] 
   304 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   304 000001D2 [B310000000000000] 
   305 000001DA E83A0A0000              	call bind_primitive
   306                                  
   307                                  	; building closure for vector-length
   308 000001DF 48BF-                   	mov rdi, free_var_19
   308 000001E1 [9800000000000000] 
   309 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   309 000001EB [E010000000000000] 
   310 000001F3 E8210A0000              	call bind_primitive
   311                                  
   312                                  	; building closure for real->integer
   313 000001F8 48BF-                   	mov rdi, free_var_20
   313 000001FA [A000000000000000] 
   314 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   314 00000204 [0D11000000000000] 
   315 0000020C E8080A0000              	call bind_primitive
   316                                  
   317                                  	; building closure for exit
   318 00000211 48BF-                   	mov rdi, free_var_21
   318 00000213 [A800000000000000] 
   319 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   319 0000021D [4011000000000000] 
   320 00000225 E8EF090000              	call bind_primitive
   321                                  
   322                                  	; building closure for integer->real
   323 0000022A 48BF-                   	mov rdi, free_var_22
   323 0000022C [B000000000000000] 
   324 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   324 00000236 [5D11000000000000] 
   325 0000023E E8D6090000              	call bind_primitive
   326                                  
   327                                  	; building closure for rational->real
   328 00000243 48BF-                   	mov rdi, free_var_23
   328 00000245 [B800000000000000] 
   329 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   329 0000024F [9A11000000000000] 
   330 00000257 E8BD090000              	call bind_primitive
   331                                  
   332                                  	; building closure for char->integer
   333 0000025C 48BF-                   	mov rdi, free_var_24
   333 0000025E [C000000000000000] 
   334 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   334 00000268 [D911000000000000] 
   335 00000270 E8A4090000              	call bind_primitive
   336                                  
   337                                  	; building closure for integer->char
   338 00000275 48BF-                   	mov rdi, free_var_25
   338 00000277 [C800000000000000] 
   339 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   339 00000281 [0E12000000000000] 
   340 00000289 E88B090000              	call bind_primitive
   341                                  
   342                                  	; building closure for trng
   343 0000028E 48BF-                   	mov rdi, free_var_26
   343 00000290 [D000000000000000] 
   344 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   344 0000029A [6812000000000000] 
   345 000002A2 E872090000              	call bind_primitive
   346                                  
   347                                  	; building closure for zero?
   348 000002A7 48BF-                   	mov rdi, free_var_27
   348 000002A9 [D800000000000000] 
   349 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   349 000002B3 [8B12000000000000] 
   350 000002BB E859090000              	call bind_primitive
   351                                  
   352                                  	; building closure for integer?
   353 000002C0 48BF-                   	mov rdi, free_var_28
   353 000002C2 [E000000000000000] 
   354 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   354 000002CC [E612000000000000] 
   355 000002D4 E840090000              	call bind_primitive
   356                                  
   357                                  	; building closure for __bin-apply
   358 000002D9 48BF-                   	mov rdi, free_var_29
   358 000002DB [E800000000000000] 
   359 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   359 000002E5 [410C000000000000] 
   360 000002ED E827090000              	call bind_primitive
   361                                  
   362                                  	; building closure for __bin-add-rr
   363 000002F2 48BF-                   	mov rdi, free_var_30
   363 000002F4 [F000000000000000] 
   364 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   364 000002FE [2313000000000000] 
   365 00000306 E80E090000              	call bind_primitive
   366                                  
   367                                  	; building closure for __bin-sub-rr
   368 0000030B 48BF-                   	mov rdi, free_var_31
   368 0000030D [F800000000000000] 
   369 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   369 00000317 [6713000000000000] 
   370 0000031F E8F5080000              	call bind_primitive
   371                                  
   372                                  	; building closure for __bin-mul-rr
   373 00000324 48BF-                   	mov rdi, free_var_32
   373 00000326 [0001000000000000] 
   374 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   374 00000330 [AB13000000000000] 
   375 00000338 E8DC080000              	call bind_primitive
   376                                  
   377                                  	; building closure for __bin-div-rr
   378 0000033D 48BF-                   	mov rdi, free_var_33
   378 0000033F [0801000000000000] 
   379 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   379 00000349 [EF13000000000000] 
   380 00000351 E8C3080000              	call bind_primitive
   381                                  
   382                                  	; building closure for __bin-add-qq
   383 00000356 48BF-                   	mov rdi, free_var_34
   383 00000358 [1001000000000000] 
   384 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   384 00000362 [4114000000000000] 
   385 0000036A E8AA080000              	call bind_primitive
   386                                  
   387                                  	; building closure for __bin-sub-qq
   388 0000036F 48BF-                   	mov rdi, free_var_35
   388 00000371 [1801000000000000] 
   389 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   389 0000037B [A914000000000000] 
   390 00000383 E891080000              	call bind_primitive
   391                                  
   392                                  	; building closure for __bin-mul-qq
   393 00000388 48BF-                   	mov rdi, free_var_36
   393 0000038A [2001000000000000] 
   394 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   394 00000394 [1115000000000000] 
   395 0000039C E878080000              	call bind_primitive
   396                                  
   397                                  	; building closure for __bin-div-qq
   398 000003A1 48BF-                   	mov rdi, free_var_37
   398 000003A3 [2801000000000000] 
   399 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   399 000003AD [6915000000000000] 
   400 000003B5 E85F080000              	call bind_primitive
   401                                  
   402                                  	; building closure for error
   403 000003BA 48BF-                   	mov rdi, free_var_38
   403 000003BC [3001000000000000] 
   404 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   404 000003C6 [3716000000000000] 
   405 000003CE E846080000              	call bind_primitive
   406                                  
   407                                  	; building closure for __bin-less-than-rr
   408 000003D3 48BF-                   	mov rdi, free_var_39
   408 000003D5 [3801000000000000] 
   409 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   409 000003DF [EE16000000000000] 
   410 000003E7 E82D080000              	call bind_primitive
   411                                  
   412                                  	; building closure for __bin-less-than-qq
   413 000003EC 48BF-                   	mov rdi, free_var_40
   413 000003EE [4001000000000000] 
   414 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   414 000003F8 [4517000000000000] 
   415 00000400 E814080000              	call bind_primitive
   416                                  
   417                                  	; building closure for __bin-equal-rr
   418 00000405 48BF-                   	mov rdi, free_var_41
   418 00000407 [4801000000000000] 
   419 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   419 00000411 [A817000000000000] 
   420 00000419 E8FB070000              	call bind_primitive
   421                                  
   422                                  	; building closure for __bin-equal-qq
   423 0000041E 48BF-                   	mov rdi, free_var_42
   423 00000420 [5001000000000000] 
   424 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   424 0000042A [FF17000000000000] 
   425 00000432 E8E2070000              	call bind_primitive
   426                                  
   427                                  	; building closure for quotient
   428 00000437 48BF-                   	mov rdi, free_var_43
   428 00000439 [5801000000000000] 
   429 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   429 00000443 [6218000000000000] 
   430 0000044B E8C9070000              	call bind_primitive
   431                                  
   432                                  	; building closure for remainder
   433 00000450 48BF-                   	mov rdi, free_var_44
   433 00000452 [6001000000000000] 
   434 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   434 0000045C [C818000000000000] 
   435 00000464 E8B0070000              	call bind_primitive
   436                                  
   437                                  	; building closure for set-car!
   438 00000469 48BF-                   	mov rdi, free_var_45
   438 0000046B [6801000000000000] 
   439 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   439 00000475 [2E19000000000000] 
   440 0000047D E897070000              	call bind_primitive
   441                                  
   442                                  	; building closure for set-cdr!
   443 00000482 48BF-                   	mov rdi, free_var_46
   443 00000484 [7001000000000000] 
   444 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   444 0000048E [6419000000000000] 
   445 00000496 E87E070000              	call bind_primitive
   446                                  
   447                                  	; building closure for string-ref
   448 0000049B 48BF-                   	mov rdi, free_var_47
   448 0000049D [7801000000000000] 
   449 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   449 000004A7 [9A19000000000000] 
   450 000004AF E865070000              	call bind_primitive
   451                                  
   452                                  	; building closure for vector-ref
   453 000004B4 48BF-                   	mov rdi, free_var_48
   453 000004B6 [8001000000000000] 
   454 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   454 000004C0 [051A000000000000] 
   455 000004C8 E84C070000              	call bind_primitive
   456                                  
   457                                  	; building closure for vector-set!
   458 000004CD 48BF-                   	mov rdi, free_var_49
   458 000004CF [8801000000000000] 
   459 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   459 000004D9 [611A000000000000] 
   460 000004E1 E833070000              	call bind_primitive
   461                                  
   462                                  	; building closure for string-set!
   463 000004E6 48BF-                   	mov rdi, free_var_50
   463 000004E8 [9001000000000000] 
   464 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   464 000004F2 [CB1A000000000000] 
   465 000004FA E81A070000              	call bind_primitive
   466                                  
   467                                  	; building closure for make-vector
   468 000004FF 48BF-                   	mov rdi, free_var_51
   468 00000501 [9801000000000000] 
   469 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   469 0000050B [401B000000000000] 
   470 00000513 E801070000              	call bind_primitive
   471                                  
   472                                  	; building closure for make-string
   473 00000518 48BF-                   	mov rdi, free_var_52
   473 0000051A [A001000000000000] 
   474 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   474 00000524 [AA1B000000000000] 
   475 0000052C E8E8060000              	call bind_primitive
   476                                  
   477                                  	; building closure for numerator
   478 00000531 48BF-                   	mov rdi, free_var_53
   478 00000533 [A801000000000000] 
   479 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   479 0000053D [1C1C000000000000] 
   480 00000545 E8CF060000              	call bind_primitive
   481                                  
   482                                  	; building closure for denominator
   483 0000054A 48BF-                   	mov rdi, free_var_54
   483 0000054C [B001000000000000] 
   484 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   484 00000556 [491C000000000000] 
   485 0000055E E8B6060000              	call bind_primitive
   486                                  
   487                                  	; building closure for eq?
   488 00000563 48BF-                   	mov rdi, free_var_55
   488 00000565 [B801000000000000] 
   489 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   489 0000056F [761C000000000000] 
   490 00000577 E89D060000              	call bind_primitive
   491                                  
   492 0000057C 48B8-                   	mov rax,L_constants + 57
   492 0000057E [3900000000000000] 
   493 00000586 50                      	push rax
   494 00000587 488B0425[18010000]      	mov rax, qword [free_var_35]
   495 0000058F 50                      	push rax
   496 00000590 6A02                    	push 2
   497 00000592 488B0425[E8000000]      	mov rax, qword [free_var_29]
   498                                  	assert_closure(rax)
    42 0000059A 803805              <1>  cmp byte [%1], %2
    43 0000059D 0F85D3180000        <1>  jne L_error_incorrect_type
   499 000005A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   500 000005A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
   501                                  
   502 000005A9 4889C7                  	mov rdi, rax
   503 000005AC E8E8000000              	call print_sexpr_if_not_void
   504                                  
   505 000005B1 48BF-                           mov rdi, fmt_memory_usage
   505 000005B3 [A900000000000000] 
   506 000005BB 488B3425[30010000]              mov rsi, qword [top_of_memory]
   507 000005C3 4881EE[C0010000]                sub rsi, memory
   508 000005CA B800000000                      mov rax, 0
   509                                  	ENTER
    33 000005CF C8000000            <1>  enter 0, 0
    34 000005D3 4883E4F0            <1>  and rsp, ~15
   510 000005D7 E8(00000000)                    call printf
   511                                  	LEAVE
    38 000005DC C9                  <1>  leave
   512 000005DD C9                      	leave
   513 000005DE C3                      	ret
   514                                  
   515                                  L_error_non_closure:
   516 000005DF 488B3C25[00000000]              mov rdi, qword [stderr]
   517 000005E7 48BE-                           mov rsi, fmt_non_closure
   517 000005E9 [E000000000000000] 
   518 000005F1 B800000000                      mov rax, 0
   519                                  	ENTER
    33 000005F6 C8000000            <1>  enter 0, 0
    34 000005FA 4883E4F0            <1>  and rsp, ~15
   520 000005FE E8(00000000)                    call fprintf
   521                                  	LEAVE
    38 00000603 C9                  <1>  leave
   522 00000604 48C7C0FEFFFFFF                  mov rax, -2
   523 0000060B E8(00000000)                    call exit
   524                                  
   525                                  L_error_improper_list:
   526 00000610 488B3C25[00000000]      	mov rdi, qword [stderr]
   527 00000618 48BE-                   	mov rsi, fmt_error_improper_list
   527 0000061A [0801000000000000] 
   528 00000622 B800000000              	mov rax, 0
   529                                  	ENTER
    33 00000627 C8000000            <1>  enter 0, 0
    34 0000062B 4883E4F0            <1>  and rsp, ~15
   530 0000062F E8(00000000)            	call fprintf
   531                                  	LEAVE
    38 00000634 C9                  <1>  leave
   532 00000635 48C7C0F9FFFFFF          	mov rax, -7
   533 0000063C E8(00000000)            	call exit
   534                                  
   535                                  L_error_incorrect_arity_simple:
   536 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   537 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   537 0000064B [4A00000000000000] 
   538 00000653 EB12                            jmp L_error_incorrect_arity_common
   539                                  L_error_incorrect_arity_opt:
   540 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   541 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   541 0000065F [7500000000000000] 
   542                                  L_error_incorrect_arity_common:
   543 00000667 5A                              pop rdx
   544 00000668 59                              pop rcx
   545 00000669 B800000000                      mov rax, 0
   546                                  	ENTER
    33 0000066E C8000000            <1>  enter 0, 0
    34 00000672 4883E4F0            <1>  and rsp, ~15
   547 00000676 E8(00000000)                    call fprintf
   548                                  	LEAVE
    38 0000067B C9                  <1>  leave
   549 0000067C 48C7C0FAFFFFFF                  mov rax, -6
   550 00000683 E8(00000000)                    call exit
   551                                  
   552                                  section .data
   553                                  fmt_incorrect_arity_simple:
   554 0000004A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   554 00000053 74656420256C642061-
   554 0000005C 7267756D656E74732C-
   554 00000065 206275742067697665-
   554 0000006E 6E20256C640A00     
   555                                  fmt_incorrect_arity_opt:
   556 00000075 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   556 0000007E 746564206174206C65-
   556 00000087 61737420256C642061-
   556 00000090 7267756D656E74732C-
   556 00000099 206275742067697665-
   556 000000A2 6E20256C640A00     
   557                                  fmt_memory_usage:
   558 000000A9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   558 000000B2 6420256C6420627974-
   558 000000BB 6573206F662064796E-
   558 000000C4 616D6963616C6C792D-
   558 000000CD 616C6C6F6361746564-
   558 000000D6 206D656D6F72790A0A-
   558 000000DF 00                 
   559                                  fmt_non_closure:
   560 000000E0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   560 000000E9 7074696E6720746F20-
   560 000000F2 6170706C792061206E-
   560 000000FB 6F6E2D636C6F737572-
   560 00000104 65210A00           
   561                                  fmt_error_improper_list:
   562 00000108 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   562 00000111 7267756D656E742069-
   562 0000011A 73206E6F7420612070-
   562 00000123 726F706572206C6973-
   562 0000012C 74210A00           
   563                                  
   564                                  section .bss
   565                                  memory:
   566 000001C0 <res 40000000h>         	resb gbytes(1)
   567                                  
   568                                  section .data
   569                                  top_of_memory:
   570 00000130 [C001000000000000]              dq memory
   571                                  
   572                                  section .text
   573                                  malloc:
   574 00000688 488B0425[30010000]              mov rax, qword [top_of_memory]
   575 00000690 48013C25[30010000]              add qword [top_of_memory], rdi
   576 00000698 C3                              ret
   577                                          
   578                                  print_sexpr_if_not_void:
   579 00000699 4881FF[00000000]        	cmp rdi, sob_void
   580 000006A0 7501                    	jne print_sexpr
   581 000006A2 C3                      	ret
   582                                  
   583                                  section .data
   584                                  fmt_void:
   585 00000138 233C766F69643E00        	db `#<void>\0`
   586                                  fmt_nil:
   587 00000140 282900                  	db `()\0`
   588                                  fmt_boolean_false:
   589 00000143 236600                  	db `#f\0`
   590                                  fmt_boolean_true:
   591 00000146 237400                  	db `#t\0`
   592                                  fmt_char_backslash:
   593 00000149 235C5C00                	db `#\\\\\0`
   594                                  fmt_char_dquote:
   595 0000014D 235C2200                	db `#\\"\0`
   596                                  fmt_char_simple:
   597 00000151 235C256300              	db `#\\%c\0`
   598                                  fmt_char_null:
   599 00000156 235C6E756C00            	db `#\\nul\0`
   600                                  fmt_char_bell:
   601 0000015C 235C62656C6C00          	db `#\\bell\0`
   602                                  fmt_char_backspace:
   603 00000163 235C6261636B737061-     	db `#\\backspace\0`
   603 0000016C 636500             
   604                                  fmt_char_tab:
   605 0000016F 235C74616200            	db `#\\tab\0`
   606                                  fmt_char_newline:
   607 00000175 235C6E65776C696E65-     	db `#\\newline\0`
   607 0000017E 00                 
   608                                  fmt_char_formfeed:
   609 0000017F 235C7061676500          	db `#\\page\0`
   610                                  fmt_char_return:
   611 00000186 235C72657475726E00      	db `#\\return\0`
   612                                  fmt_char_escape:
   613 0000018F 235C65736300            	db `#\\esc\0`
   614                                  fmt_char_space:
   615 00000195 235C737061636500        	db `#\\space\0`
   616                                  fmt_char_hex:
   617 0000019D 235C782530325800        	db `#\\x%02X\0`
   618                                  fmt_closure:
   619 000001A5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   619 000001AE 206174203078253038-
   619 000001B7 5820656E763D307825-
   619 000001C0 30385820636F64653D-
   619 000001C9 3078253038583E00   
   620                                  fmt_lparen:
   621 000001D1 2800                    	db `(\0`
   622                                  fmt_dotted_pair:
   623 000001D3 202E2000                	db ` . \0`
   624                                  fmt_rparen:
   625 000001D7 2900                    	db `)\0`
   626                                  fmt_space:
   627 000001D9 2000                    	db ` \0`
   628                                  fmt_empty_vector:
   629 000001DB 23282900                	db `#()\0`
   630                                  fmt_vector:
   631 000001DF 232800                  	db `#(\0`
   632                                  fmt_real:
   633 000001E2 256600                  	db `%f\0`
   634                                  fmt_fraction:
   635 000001E5 256C642F256C6400        	db `%ld/%ld\0`
   636                                  fmt_zero:
   637 000001ED 3000                    	db `0\0`
   638                                  fmt_int:
   639 000001EF 256C6400                	db `%ld\0`
   640                                  fmt_unknown_sexpr_error:
   641 000001F3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   641 000001FC 6F723A20556E6B6E6F-
   641 00000205 776E2074797065206F-
   641 0000020E 662073657870722028-
   641 00000217 3078253032582920   
   642 0000021F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   642 00000228 73203078253038580A-
   642 00000231 0A00               
   643                                  fmt_dquote:
   644 00000233 2200                    	db `\"\0`
   645                                  fmt_string_char:
   646 00000235 256300                          db `%c\0`
   647                                  fmt_string_char_7:
   648 00000238 5C6100                          db `\\a\0`
   649                                  fmt_string_char_8:
   650 0000023B 5C6200                          db `\\b\0`
   651                                  fmt_string_char_9:
   652 0000023E 5C7400                          db `\\t\0`
   653                                  fmt_string_char_10:
   654 00000241 5C6E00                          db `\\n\0`
   655                                  fmt_string_char_11:
   656 00000244 5C7600                          db `\\v\0`
   657                                  fmt_string_char_12:
   658 00000247 5C6600                          db `\\f\0`
   659                                  fmt_string_char_13:
   660 0000024A 5C7200                          db `\\r\0`
   661                                  fmt_string_char_34:
   662 0000024D 5C2200                          db `\\"\0`
   663                                  fmt_string_char_92:
   664 00000250 5C5C00                          db `\\\\\0`
   665                                  fmt_string_char_hex:
   666 00000253 5C7825583B00                    db `\\x%X;\0`
   667                                  
   668                                  section .text
   669                                  
   670                                  print_sexpr:
   671                                  	ENTER
    33 000006A3 C8000000            <1>  enter 0, 0
    34 000006A7 4883E4F0            <1>  and rsp, ~15
   672 000006AB 8A07                    	mov al, byte [rdi]
   673 000006AD 3C00                    	cmp al, T_void
   674 000006AF 744D                    	je .Lvoid
   675 000006B1 3C01                    	cmp al, T_nil
   676 000006B3 7458                    	je .Lnil
   677 000006B5 3C09                    	cmp al, T_boolean_false
   678 000006B7 7463                    	je .Lboolean_false
   679 000006B9 3C0A                    	cmp al, T_boolean_true
   680 000006BB 746E                    	je .Lboolean_true
   681 000006BD 3C02                    	cmp al, T_char
   682 000006BF 7479                    	je .Lchar
   683 000006C1 3C04                    	cmp al, T_symbol
   684 000006C3 0F84BB010000            	je .Lsymbol
   685 000006C9 3C21                    	cmp al, T_pair
   686 000006CB 0F84D6010000            	je .Lpair
   687 000006D1 3C22                    	cmp al, T_vector
   688 000006D3 0F849F020000            	je .Lvector
   689 000006D9 3C05                    	cmp al, T_closure
   690 000006DB 0F8489010000            	je .Lclosure
   691 000006E1 3C12                    	cmp al, T_real
   692 000006E3 0F8430030000            	je .Lreal
   693 000006E9 3C11                    	cmp al, T_rational
   694 000006EB 0F8456030000            	je .Lrational
   695 000006F1 3C03                    	cmp al, T_string
   696 000006F3 0F848F030000            	je .Lstring
   697                                  
   698 000006F9 E9C7040000              	jmp .Lunknown_sexpr_type
   699                                  
   700                                  .Lvoid:
   701 000006FE 48BF-                   	mov rdi, fmt_void
   701 00000700 [3801000000000000] 
   702 00000708 E9F5040000              	jmp .Lemit
   703                                  
   704                                  .Lnil:
   705 0000070D 48BF-                   	mov rdi, fmt_nil
   705 0000070F [4001000000000000] 
   706 00000717 E9E6040000              	jmp .Lemit
   707                                  
   708                                  .Lboolean_false:
   709 0000071C 48BF-                   	mov rdi, fmt_boolean_false
   709 0000071E [4301000000000000] 
   710 00000726 E9D7040000              	jmp .Lemit
   711                                  
   712                                  .Lboolean_true:
   713 0000072B 48BF-                   	mov rdi, fmt_boolean_true
   713 0000072D [4601000000000000] 
   714 00000735 E9C8040000              	jmp .Lemit
   715                                  
   716                                  .Lchar:
   717 0000073A 8A4701                  	mov al, byte [rdi + 1]
   718 0000073D 3C20                    	cmp al, ' '
   719 0000073F 7E28                    	jle .Lchar_whitespace
   720 00000741 3C5C                    	cmp al, 92 		; backslash
   721 00000743 0F847C000000            	je .Lchar_backslash
   722 00000749 3C22                    	cmp al, '"'
   723 0000074B 0F8483000000            	je .Lchar_dquote
   724 00000751 4825FF000000            	and rax, 255
   725 00000757 48BF-                   	mov rdi, fmt_char_simple
   725 00000759 [5101000000000000] 
   726 00000761 4889C6                  	mov rsi, rax
   727 00000764 E999040000              	jmp .Lemit
   728                                  
   729                                  .Lchar_whitespace:
   730 00000769 3C00                    	cmp al, 0
   731 0000076B 7476                    	je .Lchar_null
   732 0000076D 3C07                    	cmp al, 7
   733 0000076F 0F847D000000            	je .Lchar_bell
   734 00000775 3C08                    	cmp al, 8
   735 00000777 0F8484000000            	je .Lchar_backspace
   736 0000077D 3C09                    	cmp al, 9
   737 0000077F 0F848B000000            	je .Lchar_tab
   738 00000785 3C0A                    	cmp al, 10
   739 00000787 0F8492000000            	je .Lchar_newline
   740 0000078D 3C0C                    	cmp al, 12
   741 0000078F 0F8499000000            	je .Lchar_formfeed
   742 00000795 3C0D                    	cmp al, 13
   743 00000797 0F84A0000000            	je .Lchar_return
   744 0000079D 3C1B                    	cmp al, 27
   745 0000079F 0F84A7000000            	je .Lchar_escape
   746 000007A5 4825FF000000            	and rax, 255
   747 000007AB 3C20                    	cmp al, ' '
   748 000007AD 0F84A8000000            	je .Lchar_space
   749 000007B3 48BF-                   	mov rdi, fmt_char_hex
   749 000007B5 [9D01000000000000] 
   750 000007BD 4889C6                  	mov rsi, rax
   751 000007C0 E93D040000              	jmp .Lemit	
   752                                  
   753                                  .Lchar_backslash:
   754 000007C5 48BF-                   	mov rdi, fmt_char_backslash
   754 000007C7 [4901000000000000] 
   755 000007CF E92E040000              	jmp .Lemit
   756                                  
   757                                  .Lchar_dquote:
   758 000007D4 48BF-                   	mov rdi, fmt_char_dquote
   758 000007D6 [4D01000000000000] 
   759 000007DE E91F040000              	jmp .Lemit
   760                                  
   761                                  .Lchar_null:
   762 000007E3 48BF-                   	mov rdi, fmt_char_null
   762 000007E5 [5601000000000000] 
   763 000007ED E910040000              	jmp .Lemit
   764                                  
   765                                  .Lchar_bell:
   766 000007F2 48BF-                   	mov rdi, fmt_char_bell
   766 000007F4 [5C01000000000000] 
   767 000007FC E901040000              	jmp .Lemit
   768                                  
   769                                  .Lchar_backspace:
   770 00000801 48BF-                   	mov rdi, fmt_char_backspace
   770 00000803 [6301000000000000] 
   771 0000080B E9F2030000              	jmp .Lemit
   772                                  
   773                                  .Lchar_tab:
   774 00000810 48BF-                   	mov rdi, fmt_char_tab
   774 00000812 [6F01000000000000] 
   775 0000081A E9E3030000              	jmp .Lemit
   776                                  
   777                                  .Lchar_newline:
   778 0000081F 48BF-                   	mov rdi, fmt_char_newline
   778 00000821 [7501000000000000] 
   779 00000829 E9D4030000              	jmp .Lemit
   780                                  
   781                                  .Lchar_formfeed:
   782 0000082E 48BF-                   	mov rdi, fmt_char_formfeed
   782 00000830 [7F01000000000000] 
   783 00000838 E9C5030000              	jmp .Lemit
   784                                  
   785                                  .Lchar_return:
   786 0000083D 48BF-                   	mov rdi, fmt_char_return
   786 0000083F [8601000000000000] 
   787 00000847 E9B6030000              	jmp .Lemit
   788                                  
   789                                  .Lchar_escape:
   790 0000084C 48BF-                   	mov rdi, fmt_char_escape
   790 0000084E [8F01000000000000] 
   791 00000856 E9A7030000              	jmp .Lemit
   792                                  
   793                                  .Lchar_space:
   794 0000085B 48BF-                   	mov rdi, fmt_char_space
   794 0000085D [9501000000000000] 
   795 00000865 E998030000              	jmp .Lemit
   796                                  
   797                                  .Lclosure:
   798 0000086A 4889FE                  	mov rsi, qword rdi
   799 0000086D 48BF-                   	mov rdi, fmt_closure
   799 0000086F [A501000000000000] 
   800 00000877 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   801 0000087B 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   802 0000087F E97E030000              	jmp .Lemit
   803                                  
   804                                  .Lsymbol:
   805 00000884 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   806 00000888 BE01000000              	mov rsi, 1		 ; size = 1 byte
   807 0000088D 488B5701                	mov rdx, qword [rdi + 1] ; length
   808 00000891 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   809 00000895 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   810 0000089D E8(00000000)            	call fwrite
   811 000008A2 E970030000              	jmp .Lend
   812                                  	
   813                                  .Lpair:
   814 000008A7 57                      	push rdi
   815 000008A8 48BF-                   	mov rdi, fmt_lparen
   815 000008AA [D101000000000000] 
   816 000008B2 B800000000              	mov rax, 0
   817                                          ENTER
    33 000008B7 C8000000            <1>  enter 0, 0
    34 000008BB 4883E4F0            <1>  and rsp, ~15
   818 000008BF E8(00000000)            	call printf
   819                                          LEAVE
    38 000008C4 C9                  <1>  leave
   820 000008C5 488B3C24                	mov rdi, qword [rsp] 	; pair
   821 000008C9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   822 000008CD E8D1FDFFFF              	call print_sexpr
   823 000008D2 5F                      	pop rdi 		; pair
   824 000008D3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   825                                  .Lcdr:
   826 000008D7 8A07                    	mov al, byte [rdi]
   827 000008D9 3C01                    	cmp al, T_nil
   828 000008DB 7447                    	je .Lcdr_nil
   829 000008DD 3C21                    	cmp al, T_pair
   830 000008DF 7462                    	je .Lcdr_pair
   831 000008E1 57                      	push rdi
   832 000008E2 48BF-                   	mov rdi, fmt_dotted_pair
   832 000008E4 [D301000000000000] 
   833 000008EC B800000000              	mov rax, 0
   834                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   835 000008F9 E8(00000000)            	call printf
   836                                  	LEAVE
    38 000008FE C9                  <1>  leave
   837 000008FF 5F                      	pop rdi
   838 00000900 E89EFDFFFF              	call print_sexpr
   839 00000905 48BF-                   	mov rdi, fmt_rparen
   839 00000907 [D701000000000000] 
   840 0000090F B800000000              	mov rax, 0
   841                                  	ENTER
    33 00000914 C8000000            <1>  enter 0, 0
    34 00000918 4883E4F0            <1>  and rsp, ~15
   842 0000091C E8(00000000)            	call printf
   843                                  	LEAVE
    38 00000921 C9                  <1>  leave
   844                                  	LEAVE
    38 00000922 C9                  <1>  leave
   845 00000923 C3                      	ret
   846                                  
   847                                  .Lcdr_nil:
   848 00000924 48BF-                   	mov rdi, fmt_rparen
   848 00000926 [D701000000000000] 
   849 0000092E B800000000              	mov rax, 0
   850                                  	ENTER
    33 00000933 C8000000            <1>  enter 0, 0
    34 00000937 4883E4F0            <1>  and rsp, ~15
   851 0000093B E8(00000000)            	call printf
   852                                  	LEAVE
    38 00000940 C9                  <1>  leave
   853                                  	LEAVE
    38 00000941 C9                  <1>  leave
   854 00000942 C3                      	ret
   855                                  
   856                                  .Lcdr_pair:
   857 00000943 57                      	push rdi
   858 00000944 48BF-                   	mov rdi, fmt_space
   858 00000946 [D901000000000000] 
   859 0000094E B800000000              	mov rax, 0
   860                                  	ENTER
    33 00000953 C8000000            <1>  enter 0, 0
    34 00000957 4883E4F0            <1>  and rsp, ~15
   861 0000095B E8(00000000)            	call printf
   862                                  	LEAVE
    38 00000960 C9                  <1>  leave
   863 00000961 488B3C24                	mov rdi, qword [rsp]
   864 00000965 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   865 00000969 E835FDFFFF              	call print_sexpr
   866 0000096E 5F                      	pop rdi
   867 0000096F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   868 00000973 E95FFFFFFF              	jmp .Lcdr
   869                                  
   870                                  .Lvector:
   871 00000978 488B4701                	mov rax, qword [rdi + 1] ; length
   872 0000097C 4883F800                	cmp rax, 0
   873 00000980 0F8484000000            	je .Lvector_empty
   874 00000986 57                      	push rdi
   875 00000987 48BF-                   	mov rdi, fmt_vector
   875 00000989 [DF01000000000000] 
   876 00000991 B800000000              	mov rax, 0
   877                                  	ENTER
    33 00000996 C8000000            <1>  enter 0, 0
    34 0000099A 4883E4F0            <1>  and rsp, ~15
   878 0000099E E8(00000000)            	call printf
   879                                  	LEAVE
    38 000009A3 C9                  <1>  leave
   880 000009A4 488B3C24                	mov rdi, qword [rsp]
   881 000009A8 FF7701                  	push qword [rdi + 1]
   882 000009AB 6A01                    	push 1
   883 000009AD 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   884 000009B1 E8EDFCFFFF              	call print_sexpr
   885                                  .Lvector_loop:
   886                                  	; [rsp] index
   887                                  	; [rsp + 8*1] limit
   888                                  	; [rsp + 8*2] vector
   889 000009B6 488B0424                	mov rax, qword [rsp]
   890 000009BA 483B442408              	cmp rax, qword [rsp + 8*1]
   891 000009BF 7436                    	je .Lvector_end
   892 000009C1 48BF-                   	mov rdi, fmt_space
   892 000009C3 [D901000000000000] 
   893 000009CB B800000000              	mov rax, 0
   894                                  	ENTER
    33 000009D0 C8000000            <1>  enter 0, 0
    34 000009D4 4883E4F0            <1>  and rsp, ~15
   895 000009D8 E8(00000000)            	call printf
   896                                  	LEAVE
    38 000009DD C9                  <1>  leave
   897 000009DE 488B0424                	mov rax, qword [rsp]
   898 000009E2 488B5C2410              	mov rbx, qword [rsp + 8*2]
   899 000009E7 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   900 000009EC E8B2FCFFFF              	call print_sexpr
   901 000009F1 48FF0424                	inc qword [rsp]
   902 000009F5 EBBF                    	jmp .Lvector_loop
   903                                  
   904                                  .Lvector_end:
   905 000009F7 4883C418                	add rsp, 8*3
   906 000009FB 48BF-                   	mov rdi, fmt_rparen
   906 000009FD [D701000000000000] 
   907 00000A05 E9F8010000              	jmp .Lemit	
   908                                  
   909                                  .Lvector_empty:
   910 00000A0A 48BF-                   	mov rdi, fmt_empty_vector
   910 00000A0C [DB01000000000000] 
   911 00000A14 E9E9010000              	jmp .Lemit
   912                                  
   913                                  .Lreal:
   914 00000A19 FF7701                  	push qword [rdi + 1]
   915 00000A1C F20F100424              	movsd xmm0, qword [rsp]
   916 00000A21 4883C408                	add rsp, 8*1
   917 00000A25 48BF-                   	mov rdi, fmt_real
   917 00000A27 [E201000000000000] 
   918 00000A2F B801000000              	mov rax, 1
   919                                  	ENTER
    33 00000A34 C8000000            <1>  enter 0, 0
    34 00000A38 4883E4F0            <1>  and rsp, ~15
   920 00000A3C E8(00000000)            	call printf
   921                                  	LEAVE
    38 00000A41 C9                  <1>  leave
   922 00000A42 E9D0010000              	jmp .Lend
   923                                  
   924                                  .Lrational:
   925 00000A47 488B7701                	mov rsi, qword [rdi + 1]
   926 00000A4B 488B5709                	mov rdx, qword [rdi + 1 + 8]
   927 00000A4F 4883FE00                	cmp rsi, 0
   928 00000A53 7415                    	je .Lrat_zero
   929 00000A55 4883FA01                	cmp rdx, 1
   930 00000A59 741E                    	je .Lrat_int
   931 00000A5B 48BF-                   	mov rdi, fmt_fraction
   931 00000A5D [E501000000000000] 
   932 00000A65 E998010000              	jmp .Lemit
   933                                  
   934                                  .Lrat_zero:
   935 00000A6A 48BF-                   	mov rdi, fmt_zero
   935 00000A6C [ED01000000000000] 
   936 00000A74 E989010000              	jmp .Lemit
   937                                  
   938                                  .Lrat_int:
   939 00000A79 48BF-                   	mov rdi, fmt_int
   939 00000A7B [EF01000000000000] 
   940 00000A83 E97A010000              	jmp .Lemit
   941                                  
   942                                  .Lstring:
   943 00000A88 488D4709                	lea rax, [rdi + 1 + 8]
   944 00000A8C 50                      	push rax
   945 00000A8D FF7701                  	push qword [rdi + 1]
   946 00000A90 48BF-                   	mov rdi, fmt_dquote
   946 00000A92 [3302000000000000] 
   947 00000A9A B800000000              	mov rax, 0
   948                                  	ENTER
    33 00000A9F C8000000            <1>  enter 0, 0
    34 00000AA3 4883E4F0            <1>  and rsp, ~15
   949 00000AA7 E8(00000000)            	call printf
   950                                  	LEAVE
    38 00000AAC C9                  <1>  leave
   951                                  .Lstring_loop:
   952                                  	; qword [rsp]: limit
   953                                  	; qword [rsp + 8*1]: char *
   954 00000AAD 48833C2400              	cmp qword [rsp], 0
   955 00000AB2 0F84FD000000            	je .Lstring_end
   956 00000AB8 488B442408              	mov rax, qword [rsp + 8*1]
   957 00000ABD 8A00                    	mov al, byte [rax]
   958 00000ABF 4825FF000000            	and rax, 255
   959 00000AC5 3C07                    	cmp al, 7
   960 00000AC7 7468                            je .Lstring_char_7
   961 00000AC9 3C08                            cmp al, 8
   962 00000ACB 7470                            je .Lstring_char_8
   963 00000ACD 3C09                            cmp al, 9
   964 00000ACF 7478                            je .Lstring_char_9
   965 00000AD1 3C0A                            cmp al, 10
   966 00000AD3 0F847C000000                    je .Lstring_char_10
   967 00000AD9 3C0B                            cmp al, 11
   968 00000ADB 0F8480000000                    je .Lstring_char_11
   969 00000AE1 3C0C                            cmp al, 12
   970 00000AE3 0F8484000000                    je .Lstring_char_12
   971 00000AE9 3C0D                            cmp al, 13
   972 00000AEB 0F8488000000                    je .Lstring_char_13
   973 00000AF1 3C22                            cmp al, 34
   974 00000AF3 0F848C000000                    je .Lstring_char_34
   975 00000AF9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   977 00000AFB 3C20                            cmp al, ' '
   978 00000AFD 0F8CA0000000                    jl .Lstring_char_hex
   979 00000B03 48BF-                           mov rdi, fmt_string_char
   979 00000B05 [3502000000000000] 
   980 00000B0D 4889C6                          mov rsi, rax
   981                                  .Lstring_char_emit:
   982 00000B10 B800000000                      mov rax, 0
   983                                          ENTER
    33 00000B15 C8000000            <1>  enter 0, 0
    34 00000B19 4883E4F0            <1>  and rsp, ~15
   984 00000B1D E8(00000000)                    call printf
   985                                          LEAVE
    38 00000B22 C9                  <1>  leave
   986 00000B23 48FF0C24                        dec qword [rsp]
   987 00000B27 48FF442408                      inc qword [rsp + 8*1]
   988 00000B2C E97CFFFFFF                      jmp .Lstring_loop
   989                                  
   990                                  .Lstring_char_7:
   991 00000B31 48BF-                           mov rdi, fmt_string_char_7
   991 00000B33 [3802000000000000] 
   992 00000B3B EBD3                            jmp .Lstring_char_emit
   993                                  
   994                                  .Lstring_char_8:
   995 00000B3D 48BF-                           mov rdi, fmt_string_char_8
   995 00000B3F [3B02000000000000] 
   996 00000B47 EBC7                            jmp .Lstring_char_emit
   997                                          
   998                                  .Lstring_char_9:
   999 00000B49 48BF-                           mov rdi, fmt_string_char_9
   999 00000B4B [3E02000000000000] 
  1000 00000B53 EBBB                            jmp .Lstring_char_emit
  1001                                  
  1002                                  .Lstring_char_10:
  1003 00000B55 48BF-                           mov rdi, fmt_string_char_10
  1003 00000B57 [4102000000000000] 
  1004 00000B5F EBAF                            jmp .Lstring_char_emit
  1005                                  
  1006                                  .Lstring_char_11:
  1007 00000B61 48BF-                           mov rdi, fmt_string_char_11
  1007 00000B63 [4402000000000000] 
  1008 00000B6B EBA3                            jmp .Lstring_char_emit
  1009                                  
  1010                                  .Lstring_char_12:
  1011 00000B6D 48BF-                           mov rdi, fmt_string_char_12
  1011 00000B6F [4702000000000000] 
  1012 00000B77 EB97                            jmp .Lstring_char_emit
  1013                                  
  1014                                  .Lstring_char_13:
  1015 00000B79 48BF-                           mov rdi, fmt_string_char_13
  1015 00000B7B [4A02000000000000] 
  1016 00000B83 EB8B                            jmp .Lstring_char_emit
  1017                                  
  1018                                  .Lstring_char_34:
  1019 00000B85 48BF-                           mov rdi, fmt_string_char_34
  1019 00000B87 [4D02000000000000] 
  1020 00000B8F E97CFFFFFF                      jmp .Lstring_char_emit
  1021                                  
  1022                                  .Lstring_char_92:
  1023 00000B94 48BF-                           mov rdi, fmt_string_char_92
  1023 00000B96 [5002000000000000] 
  1024 00000B9E E96DFFFFFF                      jmp .Lstring_char_emit
  1025                                  
  1026                                  .Lstring_char_hex:
  1027 00000BA3 48BF-                           mov rdi, fmt_string_char_hex
  1027 00000BA5 [5302000000000000] 
  1028 00000BAD 4889C6                          mov rsi, rax
  1029 00000BB0 E95BFFFFFF                      jmp .Lstring_char_emit        
  1030                                  
  1031                                  .Lstring_end:
  1032 00000BB5 4883C410                	add rsp, 8 * 2
  1033 00000BB9 48BF-                   	mov rdi, fmt_dquote
  1033 00000BBB [3302000000000000] 
  1034 00000BC3 EB3D                    	jmp .Lemit
  1035                                  
  1036                                  .Lunknown_sexpr_type:
  1037 00000BC5 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1037 00000BC7 [F301000000000000] 
  1038 00000BCF 4825FF000000            	and rax, 255
  1039 00000BD5 4889C2                  	mov rdx, rax
  1040 00000BD8 4889F9                  	mov rcx, rdi
  1041 00000BDB 488B3C25[00000000]      	mov rdi, qword [stderr]
  1042 00000BE3 B800000000              	mov rax, 0
  1043                                  	ENTER
    33 00000BE8 C8000000            <1>  enter 0, 0
    34 00000BEC 4883E4F0            <1>  and rsp, ~15
  1044 00000BF0 E8(00000000)            	call fprintf
  1045                                  	LEAVE
    38 00000BF5 C9                  <1>  leave
  1046 00000BF6 48C7C0FFFFFFFF          	mov rax, -1
  1047 00000BFD E8(00000000)            	call exit
  1048                                  
  1049                                  .Lemit:
  1050 00000C02 B800000000              	mov rax, 0
  1051                                  	ENTER
    33 00000C07 C8000000            <1>  enter 0, 0
    34 00000C0B 4883E4F0            <1>  and rsp, ~15
  1052 00000C0F E8(00000000)            	call printf
  1053                                  	LEAVE
    38 00000C14 C9                  <1>  leave
  1054 00000C15 EB00                    	jmp .Lend
  1055                                  
  1056                                  .Lend:
  1057                                  	LEAVE
    38 00000C17 C9                  <1>  leave
  1058 00000C18 C3                      	ret
  1059                                  
  1060                                  ;;; rdi: address of free variable
  1061                                  ;;; rsi: address of code-pointer
  1062                                  bind_primitive:
  1063                                          ENTER
    33 00000C19 C8000000            <1>  enter 0, 0
    34 00000C1D 4883E4F0            <1>  and rsp, ~15
  1064 00000C21 57                              push rdi
  1065 00000C22 BF11000000                      mov rdi, (1 + 8 + 8)
  1066 00000C27 E85CFAFFFF                      call malloc
  1067 00000C2C 5F                              pop rdi
  1068 00000C2D C60005                          mov byte [rax], T_closure
  1069 00000C30 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1070 00000C38 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1071 00000C3C 488907                          mov qword [rdi], rax
  1072                                          LEAVE
    38 00000C3F C9                  <1>  leave
  1073 00000C40 C3                              ret
  1074                                  
  1075                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1076                                  L_code_ptr_bin_apply:
  1077 00000C41 C8000000                        enter 0, 0
  1078                                          ;finding the list's length
  1079 00000C45 CC                              int3
  1080 00000C46 4831C9                          xor rcx, rcx ;0
  1081 00000C49 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
  1082                                          assert_pair(rax)
    42 00000C4D 803821              <1>  cmp byte [%1], %2
    43 00000C50 0F8520120000        <1>  jne L_error_incorrect_type
  1083 00000C56 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
  1084                                          my_loop1:
  1085 00000C5A 483D[01000000]                          cmp rax, sob_nil ;if nill
  1086 00000C60 7417                                    je my_loop_end1 ;jmp end
  1087 00000C62 48FFC1                                  inc rcx 
  1088 00000C65 53                                      push rbx ;insrting val to stack
  1089                                                  assert_pair(rax)
    42 00000C66 803821              <1>  cmp byte [%1], %2
    43 00000C69 0F8507120000        <1>  jne L_error_incorrect_type
  1090 00000C6F 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
  1091 00000C73 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
  1092 00000C77 EBE1                                    jmp my_loop1
  1093                                          my_loop_end1:
  1094 00000C79 CC                              int3
  1095                                          ;TODO: ecx = 0 ?
  1096                                  
  1097                                          ;make values in the opposite order:
  1098                                          ;1.pushing all argument one more time in the right order
  1099 00000C7A 4889CB                          mov rbx, rcx ;count-up
  1100 00000C7D B900000000                      mov rcx, 0 
  1101 00000C82 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
  1102                                          my_loop2:
  1103 00000C85 4839D9                                  cmp rcx, rbx ; if rcx = n
  1104 00000C88 740A                                    je my_loop_end2 ;then: jump to the end
  1105 00000C8A 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
  1106 00000C8E 50                                      push rax
  1107 00000C8F 48FFC1                                  inc rcx
  1108 00000C92 EBF1                                    jmp my_loop2
  1109                                          my_loop_end2:
  1110 00000C94 CC                              int3
  1111                                          ;2.overwriting element above by element below but in correct order
  1112 00000C95 488D14DD30000000                lea rdx, [8 * (rbx + 6)] ;nubmer of *qwords* we need to skip
  1113                                          ;shl rdx, 3 ;nubmer of *bytes* we need to skip
  1114 00000C9D 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
  1115 00000CA1 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
  1116                                          ;mov r10, qword [rbp + 8 * 2] ; save lex-env
  1117 00000CA5 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
  1118 00000CA9 B900000000                      mov rcx, 0
  1119                                          my_loop3:
  1120 00000CAE 4839D9                                  cmp rcx, rbx ;if rcx = n
  1121 00000CB1 7417                                    je my_loop_end3 ;then: jump to the end
  1122 00000CB3 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
  1123 00000CB7 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
  1124 00000CBB 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
  1125 00000CBE 4883C408                                add rsp, 8 ;pop arg we used
  1126 00000CC2 48FFC1                                  inc rcx 
  1127 00000CC5 4831C0                                  xor rax, rax
  1128 00000CC8 EBE4                                    jmp my_loop3
  1129                                          my_loop_end3:
  1130 00000CCA CC                              int3
  1131 00000CCB 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
  1132 00000CCF 83F901                          cmp ecx, 1
  1133 00000CD2 7F06                            jg two_or_more
  1134 00000CD4 4883C428                        add rsp, 8 * 5 ; pop old-rbp, return-address, le-ap 
  1135 00000CD8 EB04                            jmp continu
  1136                                          two_or_more:
  1137 00000CDA 4883C420                        add rsp, 8 * 4 ; pop old-rbp, return-address, le-ap 
  1138                                          continu:
  1139 00000CDE 51                              push rcx ;push number of arguments
  1140 00000CDF 41FF7001                        push SOB_CLOSURE_ENV(r8) ; push lex-env
  1141 00000CE3 57                              push rdi ; push old ret-add
  1142 00000CE4 4889F5                          mov rbp, rsi ;rbp = old-rbp
  1143                                          ;mov rsp, rbp; the part of LEAVE we need
  1144 00000CE7 41FFE0                          jmp r8 ; fun to apply
  1145                                  	
  1146                                  L_code_ptr_is_null:
  1147                                          ENTER
    33 00000CEA C8000000            <1>  enter 0, 0
    34 00000CEE 4883E4F0            <1>  and rsp, ~15
  1148 00000CF2 48837D1801                      cmp COUNT, 1
  1149 00000CF7 0F85A5100000                    jne L_error_arg_count_1
  1150 00000CFD 488B4520                        mov rax, PARAM(0)
  1151 00000D01 803801                          cmp byte [rax], T_nil
  1152 00000D04 750C                            jne .L_false
  1153 00000D06 48B8-                           mov rax, sob_boolean_true
  1153 00000D08 [0300000000000000] 
  1154 00000D10 EB0A                            jmp .L_end
  1155                                  .L_false:
  1156 00000D12 48B8-                           mov rax, sob_boolean_false
  1156 00000D14 [0200000000000000] 
  1157                                  .L_end:
  1158                                          LEAVE
    38 00000D1C C9                  <1>  leave
  1159 00000D1D C21800                          ret AND_KILL_FRAME(1)
  1160                                  
  1161                                  L_code_ptr_is_pair:
  1162                                          ENTER
    33 00000D20 C8000000            <1>  enter 0, 0
    34 00000D24 4883E4F0            <1>  and rsp, ~15
  1163 00000D28 48837D1801                      cmp COUNT, 1
  1164 00000D2D 0F856F100000                    jne L_error_arg_count_1
  1165 00000D33 488B4520                        mov rax, PARAM(0)
  1166 00000D37 803821                          cmp byte [rax], T_pair
  1167 00000D3A 750C                            jne .L_false
  1168 00000D3C 48B8-                           mov rax, sob_boolean_true
  1168 00000D3E [0300000000000000] 
  1169 00000D46 EB0A                            jmp .L_end
  1170                                  .L_false:
  1171 00000D48 48B8-                           mov rax, sob_boolean_false
  1171 00000D4A [0200000000000000] 
  1172                                  .L_end:
  1173                                          LEAVE
    38 00000D52 C9                  <1>  leave
  1174 00000D53 C21800                          ret AND_KILL_FRAME(1)
  1175                                          
  1176                                  L_code_ptr_is_void:
  1177                                          ENTER
    33 00000D56 C8000000            <1>  enter 0, 0
    34 00000D5A 4883E4F0            <1>  and rsp, ~15
  1178 00000D5E 48837D1801                      cmp COUNT, 1
  1179 00000D63 0F8539100000                    jne L_error_arg_count_1
  1180 00000D69 488B4520                        mov rax, PARAM(0)
  1181 00000D6D 803800                          cmp byte [rax], T_void
  1182 00000D70 750C                            jne .L_false
  1183 00000D72 48B8-                           mov rax, sob_boolean_true
  1183 00000D74 [0300000000000000] 
  1184 00000D7C EB0A                            jmp .L_end
  1185                                  .L_false:
  1186 00000D7E 48B8-                           mov rax, sob_boolean_false
  1186 00000D80 [0200000000000000] 
  1187                                  .L_end:
  1188                                          LEAVE
    38 00000D88 C9                  <1>  leave
  1189 00000D89 C21800                          ret AND_KILL_FRAME(1)
  1190                                  
  1191                                  L_code_ptr_is_char:
  1192                                          ENTER
    33 00000D8C C8000000            <1>  enter 0, 0
    34 00000D90 4883E4F0            <1>  and rsp, ~15
  1193 00000D94 48837D1801                      cmp COUNT, 1
  1194 00000D99 0F8503100000                    jne L_error_arg_count_1
  1195 00000D9F 488B4520                        mov rax, PARAM(0)
  1196 00000DA3 803802                          cmp byte [rax], T_char
  1197 00000DA6 750C                            jne .L_false
  1198 00000DA8 48B8-                           mov rax, sob_boolean_true
  1198 00000DAA [0300000000000000] 
  1199 00000DB2 EB0A                            jmp .L_end
  1200                                  .L_false:
  1201 00000DB4 48B8-                           mov rax, sob_boolean_false
  1201 00000DB6 [0200000000000000] 
  1202                                  .L_end:
  1203                                          LEAVE
    38 00000DBE C9                  <1>  leave
  1204 00000DBF C21800                          ret AND_KILL_FRAME(1)
  1205                                  
  1206                                  L_code_ptr_is_string:
  1207                                          ENTER
    33 00000DC2 C8000000            <1>  enter 0, 0
    34 00000DC6 4883E4F0            <1>  and rsp, ~15
  1208 00000DCA 48837D1801                      cmp COUNT, 1
  1209 00000DCF 0F85CD0F0000                    jne L_error_arg_count_1
  1210 00000DD5 488B4520                        mov rax, PARAM(0)
  1211 00000DD9 803803                          cmp byte [rax], T_string
  1212 00000DDC 750C                            jne .L_false
  1213 00000DDE 48B8-                           mov rax, sob_boolean_true
  1213 00000DE0 [0300000000000000] 
  1214 00000DE8 EB0A                            jmp .L_end
  1215                                  .L_false:
  1216 00000DEA 48B8-                           mov rax, sob_boolean_false
  1216 00000DEC [0200000000000000] 
  1217                                  .L_end:
  1218                                          LEAVE
    38 00000DF4 C9                  <1>  leave
  1219 00000DF5 C21800                          ret AND_KILL_FRAME(1)
  1220                                  
  1221                                  L_code_ptr_is_symbol:
  1222                                          ENTER
    33 00000DF8 C8000000            <1>  enter 0, 0
    34 00000DFC 4883E4F0            <1>  and rsp, ~15
  1223 00000E00 48837D1801                      cmp COUNT, 1
  1224 00000E05 0F85970F0000                    jne L_error_arg_count_1
  1225 00000E0B 488B4520                        mov rax, PARAM(0)
  1226 00000E0F 803804                          cmp byte [rax], T_symbol
  1227 00000E12 750C                            jne .L_false
  1228 00000E14 48B8-                           mov rax, sob_boolean_true
  1228 00000E16 [0300000000000000] 
  1229 00000E1E EB0A                            jmp .L_end
  1230                                  .L_false:
  1231 00000E20 48B8-                           mov rax, sob_boolean_false
  1231 00000E22 [0200000000000000] 
  1232                                  .L_end:
  1233                                          LEAVE
    38 00000E2A C9                  <1>  leave
  1234 00000E2B C21800                          ret AND_KILL_FRAME(1)
  1235                                  
  1236                                  L_code_ptr_is_vector:
  1237                                          ENTER
    33 00000E2E C8000000            <1>  enter 0, 0
    34 00000E32 4883E4F0            <1>  and rsp, ~15
  1238 00000E36 48837D1801                      cmp COUNT, 1
  1239 00000E3B 0F85610F0000                    jne L_error_arg_count_1
  1240 00000E41 488B4520                        mov rax, PARAM(0)
  1241 00000E45 803822                          cmp byte [rax], T_vector
  1242 00000E48 750C                            jne .L_false
  1243 00000E4A 48B8-                           mov rax, sob_boolean_true
  1243 00000E4C [0300000000000000] 
  1244 00000E54 EB0A                            jmp .L_end
  1245                                  .L_false:
  1246 00000E56 48B8-                           mov rax, sob_boolean_false
  1246 00000E58 [0200000000000000] 
  1247                                  .L_end:
  1248                                          LEAVE
    38 00000E60 C9                  <1>  leave
  1249 00000E61 C21800                          ret AND_KILL_FRAME(1)
  1250                                  
  1251                                  L_code_ptr_is_closure:
  1252                                          ENTER
    33 00000E64 C8000000            <1>  enter 0, 0
    34 00000E68 4883E4F0            <1>  and rsp, ~15
  1253 00000E6C 48837D1801                      cmp COUNT, 1
  1254 00000E71 0F852B0F0000                    jne L_error_arg_count_1
  1255 00000E77 488B4520                        mov rax, PARAM(0)
  1256 00000E7B 803805                          cmp byte [rax], T_closure
  1257 00000E7E 750C                            jne .L_false
  1258 00000E80 48B8-                           mov rax, sob_boolean_true
  1258 00000E82 [0300000000000000] 
  1259 00000E8A EB0A                            jmp .L_end
  1260                                  .L_false:
  1261 00000E8C 48B8-                           mov rax, sob_boolean_false
  1261 00000E8E [0200000000000000] 
  1262                                  .L_end:
  1263                                          LEAVE
    38 00000E96 C9                  <1>  leave
  1264 00000E97 C21800                          ret AND_KILL_FRAME(1)
  1265                                  
  1266                                  L_code_ptr_is_real:
  1267                                          ENTER
    33 00000E9A C8000000            <1>  enter 0, 0
    34 00000E9E 4883E4F0            <1>  and rsp, ~15
  1268 00000EA2 48837D1801                      cmp COUNT, 1
  1269 00000EA7 0F85F50E0000                    jne L_error_arg_count_1
  1270 00000EAD 488B4520                        mov rax, PARAM(0)
  1271 00000EB1 803812                          cmp byte [rax], T_real
  1272 00000EB4 750C                            jne .L_false
  1273 00000EB6 48B8-                           mov rax, sob_boolean_true
  1273 00000EB8 [0300000000000000] 
  1274 00000EC0 EB0A                            jmp .L_end
  1275                                  .L_false:
  1276 00000EC2 48B8-                           mov rax, sob_boolean_false
  1276 00000EC4 [0200000000000000] 
  1277                                  .L_end:
  1278                                          LEAVE
    38 00000ECC C9                  <1>  leave
  1279 00000ECD C21800                          ret AND_KILL_FRAME(1)
  1280                                  
  1281                                  L_code_ptr_is_rational:
  1282                                          ENTER
    33 00000ED0 C8000000            <1>  enter 0, 0
    34 00000ED4 4883E4F0            <1>  and rsp, ~15
  1283 00000ED8 48837D1801                      cmp COUNT, 1
  1284 00000EDD 0F85BF0E0000                    jne L_error_arg_count_1
  1285 00000EE3 488B4520                        mov rax, PARAM(0)
  1286 00000EE7 803811                          cmp byte [rax], T_rational
  1287 00000EEA 750C                            jne .L_false
  1288 00000EEC 48B8-                           mov rax, sob_boolean_true
  1288 00000EEE [0300000000000000] 
  1289 00000EF6 EB0A                            jmp .L_end
  1290                                  .L_false:
  1291 00000EF8 48B8-                           mov rax, sob_boolean_false
  1291 00000EFA [0200000000000000] 
  1292                                  .L_end:
  1293                                          LEAVE
    38 00000F02 C9                  <1>  leave
  1294 00000F03 C21800                          ret AND_KILL_FRAME(1)
  1295                                  
  1296                                  L_code_ptr_is_boolean:
  1297                                          ENTER
    33 00000F06 C8000000            <1>  enter 0, 0
    34 00000F0A 4883E4F0            <1>  and rsp, ~15
  1298 00000F0E 48837D1801                      cmp COUNT, 1
  1299 00000F13 0F85890E0000                    jne L_error_arg_count_1
  1300 00000F19 488B4520                        mov rax, PARAM(0)
  1301 00000F1D 8A18                            mov bl, byte [rax]
  1302 00000F1F 80E308                          and bl, T_boolean
  1303 00000F22 740C                            je .L_false
  1304 00000F24 48B8-                           mov rax, sob_boolean_true
  1304 00000F26 [0300000000000000] 
  1305 00000F2E EB0A                            jmp .L_end
  1306                                  .L_false:
  1307 00000F30 48B8-                           mov rax, sob_boolean_false
  1307 00000F32 [0200000000000000] 
  1308                                  .L_end:
  1309                                          LEAVE
    38 00000F3A C9                  <1>  leave
  1310 00000F3B C21800                          ret AND_KILL_FRAME(1)
  1311                                          
  1312                                  L_code_ptr_is_number:
  1313                                          ENTER
    33 00000F3E C8000000            <1>  enter 0, 0
    34 00000F42 4883E4F0            <1>  and rsp, ~15
  1314 00000F46 48837D1801                      cmp COUNT, 1
  1315 00000F4B 0F85510E0000                    jne L_error_arg_count_1
  1316 00000F51 488B4520                        mov rax, PARAM(0)
  1317 00000F55 8A18                            mov bl, byte [rax]
  1318 00000F57 80E310                          and bl, T_number
  1319 00000F5A 740C                            je .L_false
  1320 00000F5C 48B8-                           mov rax, sob_boolean_true
  1320 00000F5E [0300000000000000] 
  1321 00000F66 EB0A                            jmp .L_end
  1322                                  .L_false:
  1323 00000F68 48B8-                           mov rax, sob_boolean_false
  1323 00000F6A [0200000000000000] 
  1324                                  .L_end:
  1325                                          LEAVE
    38 00000F72 C9                  <1>  leave
  1326 00000F73 C21800                          ret AND_KILL_FRAME(1)
  1327                                          
  1328                                  L_code_ptr_is_collection:
  1329                                          ENTER
    33 00000F76 C8000000            <1>  enter 0, 0
    34 00000F7A 4883E4F0            <1>  and rsp, ~15
  1330 00000F7E 48837D1801                      cmp COUNT, 1
  1331 00000F83 0F85190E0000                    jne L_error_arg_count_1
  1332 00000F89 488B4520                        mov rax, PARAM(0)
  1333 00000F8D 8A18                            mov bl, byte [rax]
  1334 00000F8F 80E320                          and bl, T_collection
  1335 00000F92 740C                            je .L_false
  1336 00000F94 48B8-                           mov rax, sob_boolean_true
  1336 00000F96 [0300000000000000] 
  1337 00000F9E EB0A                            jmp .L_end
  1338                                  .L_false:
  1339 00000FA0 48B8-                           mov rax, sob_boolean_false
  1339 00000FA2 [0200000000000000] 
  1340                                  .L_end:
  1341                                          LEAVE
    38 00000FAA C9                  <1>  leave
  1342 00000FAB C21800                          ret AND_KILL_FRAME(1)
  1343                                  
  1344                                  L_code_ptr_cons:
  1345                                          ENTER
    33 00000FAE C8000000            <1>  enter 0, 0
    34 00000FB2 4883E4F0            <1>  and rsp, ~15
  1346 00000FB6 48837D1802                      cmp COUNT, 2
  1347 00000FBB 0F85160E0000                    jne L_error_arg_count_2
  1348 00000FC1 BF11000000                      mov rdi, (1 + 8 + 8)
  1349 00000FC6 E8BDF6FFFF                      call malloc
  1350 00000FCB C60021                          mov byte [rax], T_pair
  1351 00000FCE 488B5D20                        mov rbx, PARAM(0)
  1352 00000FD2 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1353 00000FD6 488B5D28                        mov rbx, PARAM(1)
  1354 00000FDA 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1355                                          LEAVE
    38 00000FDE C9                  <1>  leave
  1356 00000FDF C22000                          ret AND_KILL_FRAME(2)
  1357                                  
  1358                                  L_code_ptr_display_sexpr:
  1359                                          ENTER
    33 00000FE2 C8000000            <1>  enter 0, 0
    34 00000FE6 4883E4F0            <1>  and rsp, ~15
  1360 00000FEA 48837D1801                      cmp COUNT, 1
  1361 00000FEF 0F85AD0D0000                    jne L_error_arg_count_1
  1362 00000FF5 488B7D20                        mov rdi, PARAM(0)
  1363 00000FF9 E8A5F6FFFF                      call print_sexpr
  1364 00000FFE 48B8-                           mov rax, sob_void
  1364 00001000 [0000000000000000] 
  1365                                          LEAVE
    38 00001008 C9                  <1>  leave
  1366 00001009 C21800                          ret AND_KILL_FRAME(1)
  1367                                  
  1368                                  L_code_ptr_write_char:
  1369                                          ENTER
    33 0000100C C8000000            <1>  enter 0, 0
    34 00001010 4883E4F0            <1>  and rsp, ~15
  1370 00001014 48837D1801                      cmp COUNT, 1
  1371 00001019 0F85830D0000                    jne L_error_arg_count_1
  1372 0000101F 488B4520                        mov rax, PARAM(0)
  1373                                          assert_char(rax)
    42 00001023 803802              <1>  cmp byte [%1], %2
    43 00001026 0F854A0E0000        <1>  jne L_error_incorrect_type
  1374 0000102C 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1375 0000102F 4825FF000000                    and rax, 255
  1376 00001035 48BF-                           mov rdi, fmt_char
  1376 00001037 [5902000000000000] 
  1377 0000103F 4889C6                          mov rsi, rax
  1378 00001042 B800000000                      mov rax, 0
  1379                                  	ENTER
    33 00001047 C8000000            <1>  enter 0, 0
    34 0000104B 4883E4F0            <1>  and rsp, ~15
  1380 0000104F E8(00000000)                    call printf
  1381                                  	LEAVE
    38 00001054 C9                  <1>  leave
  1382 00001055 48B8-                           mov rax, sob_void
  1382 00001057 [0000000000000000] 
  1383                                          LEAVE
    38 0000105F C9                  <1>  leave
  1384 00001060 C21800                          ret AND_KILL_FRAME(1)
  1385                                  
  1386                                  L_code_ptr_car:
  1387                                          ENTER
    33 00001063 C8000000            <1>  enter 0, 0
    34 00001067 4883E4F0            <1>  and rsp, ~15
  1388 0000106B 48837D1801                      cmp COUNT, 1
  1389 00001070 0F852C0D0000                    jne L_error_arg_count_1
  1390 00001076 488B4520                        mov rax, PARAM(0)
  1391                                          assert_pair(rax)
    42 0000107A 803821              <1>  cmp byte [%1], %2
    43 0000107D 0F85F30D0000        <1>  jne L_error_incorrect_type
  1392 00001083 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1393                                          LEAVE
    38 00001087 C9                  <1>  leave
  1394 00001088 C21800                          ret AND_KILL_FRAME(1)
  1395                                          
  1396                                  L_code_ptr_cdr:
  1397                                          ENTER
    33 0000108B C8000000            <1>  enter 0, 0
    34 0000108F 4883E4F0            <1>  and rsp, ~15
  1398 00001093 48837D1801                      cmp COUNT, 1
  1399 00001098 0F85040D0000                    jne L_error_arg_count_1
  1400 0000109E 488B4520                        mov rax, PARAM(0)
  1401                                          assert_pair(rax)
    42 000010A2 803821              <1>  cmp byte [%1], %2
    43 000010A5 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1402 000010AB 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1403                                          LEAVE
    38 000010AF C9                  <1>  leave
  1404 000010B0 C21800                          ret AND_KILL_FRAME(1)
  1405                                          
  1406                                  L_code_ptr_string_length:
  1407                                          ENTER
    33 000010B3 C8000000            <1>  enter 0, 0
    34 000010B7 4883E4F0            <1>  and rsp, ~15
  1408 000010BB 48837D1801                      cmp COUNT, 1
  1409 000010C0 0F85DC0C0000                    jne L_error_arg_count_1
  1410 000010C6 488B4520                        mov rax, PARAM(0)
  1411                                          assert_string(rax)
    42 000010CA 803803              <1>  cmp byte [%1], %2
    43 000010CD 0F85A30D0000        <1>  jne L_error_incorrect_type
  1412 000010D3 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1413 000010D7 E83A0C0000                      call make_integer
  1414                                          LEAVE
    38 000010DC C9                  <1>  leave
  1415 000010DD C21800                          ret AND_KILL_FRAME(1)
  1416                                  
  1417                                  L_code_ptr_vector_length:
  1418                                          ENTER
    33 000010E0 C8000000            <1>  enter 0, 0
    34 000010E4 4883E4F0            <1>  and rsp, ~15
  1419 000010E8 48837D1801                      cmp COUNT, 1
  1420 000010ED 0F85AF0C0000                    jne L_error_arg_count_1
  1421 000010F3 488B4520                        mov rax, PARAM(0)
  1422                                          assert_vector(rax)
    42 000010F7 803822              <1>  cmp byte [%1], %2
    43 000010FA 0F85760D0000        <1>  jne L_error_incorrect_type
  1423 00001100 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1424 00001104 E80D0C0000                      call make_integer
  1425                                          LEAVE
    38 00001109 C9                  <1>  leave
  1426 0000110A C21800                          ret AND_KILL_FRAME(1)
  1427                                  
  1428                                  L_code_ptr_real_to_integer:
  1429                                          ENTER
    33 0000110D C8000000            <1>  enter 0, 0
    34 00001111 4883E4F0            <1>  and rsp, ~15
  1430 00001115 48837D1801                      cmp COUNT, 1
  1431 0000111A 0F85820C0000                    jne L_error_arg_count_1
  1432 00001120 488B5D20                        mov rbx, PARAM(0)
  1433                                          assert_real(rbx)
    42 00001124 803B12              <1>  cmp byte [%1], %2
    43 00001127 0F85490D0000        <1>  jne L_error_incorrect_type
  1434 0000112D F20F104301                      movsd xmm0, qword [rbx + 1]
  1435 00001132 F2480F2CF8                      cvttsd2si rdi, xmm0
  1436 00001137 E8DA0B0000                      call make_integer
  1437                                          LEAVE
    38 0000113C C9                  <1>  leave
  1438 0000113D C21800                          ret AND_KILL_FRAME(1)
  1439                                  
  1440                                  L_code_ptr_exit:
  1441                                          ENTER
    33 00001140 C8000000            <1>  enter 0, 0
    34 00001144 4883E4F0            <1>  and rsp, ~15
  1442 00001148 48837D1800                      cmp COUNT, 0
  1443 0000114D 0F851A0C0000                    jne L_error_arg_count_0
  1444 00001153 B800000000                      mov rax, 0
  1445 00001158 E8(00000000)                    call exit
  1446                                  
  1447                                  L_code_ptr_integer_to_real:
  1448                                          ENTER
    33 0000115D C8000000            <1>  enter 0, 0
    34 00001161 4883E4F0            <1>  and rsp, ~15
  1449 00001165 48837D1801                      cmp COUNT, 1
  1450 0000116A 0F85320C0000                    jne L_error_arg_count_1
  1451 00001170 488B4520                        mov rax, PARAM(0)
  1452                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001174 803811              <2>  cmp byte [%1], %2
    43 00001177 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 0000117D 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001182 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1453 00001188 FF7001                          push qword [rax + 1]
  1454 0000118B F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1455 00001191 E8640B0000                      call make_real
  1456                                          LEAVE
    38 00001196 C9                  <1>  leave
  1457 00001197 C21800                          ret AND_KILL_FRAME(1)
  1458                                  
  1459                                  L_code_ptr_rational_to_real:
  1460                                          ENTER
    33 0000119A C8000000            <1>  enter 0, 0
    34 0000119E 4883E4F0            <1>  and rsp, ~15
  1461 000011A2 48837D1801                      cmp COUNT, 1
  1462 000011A7 0F85F50B0000                    jne L_error_arg_count_1
  1463 000011AD 488B4520                        mov rax, PARAM(0)
  1464                                          assert_rational(rax)
    42 000011B1 803811              <1>  cmp byte [%1], %2
    43 000011B4 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1465 000011BA FF7001                          push qword [rax + 1]
  1466 000011BD F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1467 000011C3 FF7009                          push qword [rax + 1 + 8]
  1468 000011C6 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1469 000011CC F20F5EC1                        divsd xmm0, xmm1
  1470 000011D0 E8250B0000                      call make_real
  1471                                          LEAVE
    38 000011D5 C9                  <1>  leave
  1472 000011D6 C21800                          ret AND_KILL_FRAME(1)
  1473                                  
  1474                                  L_code_ptr_char_to_integer:
  1475                                          ENTER
    33 000011D9 C8000000            <1>  enter 0, 0
    34 000011DD 4883E4F0            <1>  and rsp, ~15
  1476 000011E1 48837D1801                      cmp COUNT, 1
  1477 000011E6 0F85B60B0000                    jne L_error_arg_count_1
  1478 000011EC 488B4520                        mov rax, PARAM(0)
  1479                                          assert_char(rax)
    42 000011F0 803802              <1>  cmp byte [%1], %2
    43 000011F3 0F857D0C0000        <1>  jne L_error_incorrect_type
  1480 000011F9 8A4001                          mov al, byte [rax + 1]
  1481 000011FC 4825FF000000                    and rax, 255
  1482 00001202 4889C7                          mov rdi, rax
  1483 00001205 E80C0B0000                      call make_integer
  1484                                          LEAVE
    38 0000120A C9                  <1>  leave
  1485 0000120B C21800                          ret AND_KILL_FRAME(1)
  1486                                  
  1487                                  L_code_ptr_integer_to_char:
  1488                                          ENTER
    33 0000120E C8000000            <1>  enter 0, 0
    34 00001212 4883E4F0            <1>  and rsp, ~15
  1489 00001216 48837D1801                      cmp COUNT, 1
  1490 0000121B 0F85810B0000                    jne L_error_arg_count_1
  1491 00001221 488B4520                        mov rax, PARAM(0)
  1492                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001225 803811              <2>  cmp byte [%1], %2
    43 00001228 0F85480C0000        <2>  jne L_error_incorrect_type
    48 0000122E 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001233 0F853D0C0000        <1>  jne L_error_incorrect_type
  1493 00001239 488B5801                        mov rbx, qword [rax + 1]
  1494 0000123D 4883FB00                        cmp rbx, 0
  1495 00001241 0F8EF50A0000                    jle L_error_integer_range
  1496 00001247 4881FB00010000                  cmp rbx, 256
  1497 0000124E 0F8DE80A0000                    jge L_error_integer_range
  1498 00001254 BF02000000                      mov rdi, (1 + 1)
  1499 00001259 E82AF4FFFF                      call malloc
  1500 0000125E C60002                          mov byte [rax], T_char
  1501 00001261 885801                          mov byte [rax + 1], bl
  1502                                          LEAVE
    38 00001264 C9                  <1>  leave
  1503 00001265 C21800                          ret AND_KILL_FRAME(1)
  1504                                  
  1505                                  L_code_ptr_trng:
  1506                                          ENTER
    33 00001268 C8000000            <1>  enter 0, 0
    34 0000126C 4883E4F0            <1>  and rsp, ~15
  1507 00001270 48837D1800                      cmp COUNT, 0
  1508 00001275 0F85F20A0000                    jne L_error_arg_count_0
  1509 0000127B 480FC7F7                        rdrand rdi
  1510 0000127F 48D1EF                          shr rdi, 1
  1511 00001282 E88F0A0000                      call make_integer
  1512                                          LEAVE
    38 00001287 C9                  <1>  leave
  1513 00001288 C21000                          ret AND_KILL_FRAME(0)
  1514                                  
  1515                                  L_code_ptr_is_zero:
  1516                                          ENTER
    33 0000128B C8000000            <1>  enter 0, 0
    34 0000128F 4883E4F0            <1>  and rsp, ~15
  1517 00001293 48837D1801                      cmp COUNT, 1
  1518 00001298 0F85040B0000                    jne L_error_arg_count_1
  1519 0000129E 488B4520                        mov rax, PARAM(0)
  1520 000012A2 803811                          cmp byte [rax], T_rational
  1521 000012A5 740A                            je .L_rational
  1522 000012A7 803812                          cmp byte [rax], T_real
  1523 000012AA 740E                            je .L_real
  1524 000012AC E9C50B0000                      jmp L_error_incorrect_type
  1525                                  .L_rational:
  1526 000012B1 4883780100                      cmp qword [rax + 1], 0
  1527 000012B6 7420                            je .L_zero
  1528 000012B8 EB12                            jmp .L_not_zero
  1529                                  .L_real:
  1530 000012BA 660FEFC0                        pxor xmm0, xmm0
  1531 000012BE FF7001                          push qword [rax + 1]
  1532 000012C1 F20F100C24                      movsd xmm1, qword [rsp]
  1533 000012C6 660F2EC1                        ucomisd xmm0, xmm1
  1534 000012CA 740C                            je .L_zero
  1535                                  .L_not_zero:
  1536 000012CC 48B8-                           mov rax, sob_boolean_false
  1536 000012CE [0200000000000000] 
  1537 000012D6 EB0A                            jmp .L_end
  1538                                  .L_zero:
  1539 000012D8 48B8-                           mov rax, sob_boolean_true
  1539 000012DA [0300000000000000] 
  1540                                  .L_end:
  1541                                          LEAVE
    38 000012E2 C9                  <1>  leave
  1542 000012E3 C21800                          ret AND_KILL_FRAME(1)
  1543                                  
  1544                                  L_code_ptr_is_integer:
  1545                                          ENTER
    33 000012E6 C8000000            <1>  enter 0, 0
    34 000012EA 4883E4F0            <1>  and rsp, ~15
  1546 000012EE 48837D1801                      cmp COUNT, 1
  1547 000012F3 0F85A90A0000                    jne L_error_arg_count_1
  1548 000012F9 488B4520                        mov rax, PARAM(0)
  1549 000012FD 803811                          cmp byte [rax], T_rational
  1550 00001300 7513                            jne .L_false
  1551 00001302 4883780901                      cmp qword [rax + 1 + 8], 1
  1552 00001307 750C                            jne .L_false
  1553 00001309 48B8-                           mov rax, sob_boolean_true
  1553 0000130B [0300000000000000] 
  1554 00001313 EB0A                            jmp .L_exit
  1555                                  .L_false:
  1556 00001315 48B8-                           mov rax, sob_boolean_false
  1556 00001317 [0200000000000000] 
  1557                                  .L_exit:
  1558                                          LEAVE
    38 0000131F C9                  <1>  leave
  1559 00001320 C21800                          ret AND_KILL_FRAME(1)
  1560                                  
  1561                                  L_code_ptr_raw_bin_add_rr:
  1562                                          ENTER
    33 00001323 C8000000            <1>  enter 0, 0
    34 00001327 4883E4F0            <1>  and rsp, ~15
  1563 0000132B 48837D1802                      cmp COUNT, 2
  1564 00001330 0F85A10A0000                    jne L_error_arg_count_2
  1565 00001336 488B5D20                        mov rbx, PARAM(0)
  1566                                          assert_real(rbx)
    42 0000133A 803B12              <1>  cmp byte [%1], %2
    43 0000133D 0F85330B0000        <1>  jne L_error_incorrect_type
  1567 00001343 488B4D28                        mov rcx, PARAM(1)
  1568                                          assert_real(rcx)
    42 00001347 803912              <1>  cmp byte [%1], %2
    43 0000134A 0F85260B0000        <1>  jne L_error_incorrect_type
  1569 00001350 F20F104301                      movsd xmm0, qword [rbx + 1]
  1570 00001355 F20F104901                      movsd xmm1, qword [rcx + 1]
  1571 0000135A F20F58C1                        addsd xmm0, xmm1
  1572 0000135E E897090000                      call make_real
  1573                                          LEAVE
    38 00001363 C9                  <1>  leave
  1574 00001364 C22000                          ret AND_KILL_FRAME(2)
  1575                                  
  1576                                  L_code_ptr_raw_bin_sub_rr:
  1577                                          ENTER
    33 00001367 C8000000            <1>  enter 0, 0
    34 0000136B 4883E4F0            <1>  and rsp, ~15
  1578 0000136F 48837D1802                      cmp COUNT, 2
  1579 00001374 0F855D0A0000                    jne L_error_arg_count_2
  1580 0000137A 488B5D20                        mov rbx, PARAM(0)
  1581                                          assert_real(rbx)
    42 0000137E 803B12              <1>  cmp byte [%1], %2
    43 00001381 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1582 00001387 488B4D28                        mov rcx, PARAM(1)
  1583                                          assert_real(rcx)
    42 0000138B 803912              <1>  cmp byte [%1], %2
    43 0000138E 0F85E20A0000        <1>  jne L_error_incorrect_type
  1584 00001394 F20F104301                      movsd xmm0, qword [rbx + 1]
  1585 00001399 F20F104901                      movsd xmm1, qword [rcx + 1]
  1586 0000139E F20F5CC1                        subsd xmm0, xmm1
  1587 000013A2 E853090000                      call make_real
  1588                                          LEAVE
    38 000013A7 C9                  <1>  leave
  1589 000013A8 C22000                          ret AND_KILL_FRAME(2)
  1590                                  
  1591                                  L_code_ptr_raw_bin_mul_rr:
  1592                                          ENTER
    33 000013AB C8000000            <1>  enter 0, 0
    34 000013AF 4883E4F0            <1>  and rsp, ~15
  1593 000013B3 48837D1802                      cmp COUNT, 2
  1594 000013B8 0F85190A0000                    jne L_error_arg_count_2
  1595 000013BE 488B5D20                        mov rbx, PARAM(0)
  1596                                          assert_real(rbx)
    42 000013C2 803B12              <1>  cmp byte [%1], %2
    43 000013C5 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1597 000013CB 488B4D28                        mov rcx, PARAM(1)
  1598                                          assert_real(rcx)
    42 000013CF 803912              <1>  cmp byte [%1], %2
    43 000013D2 0F859E0A0000        <1>  jne L_error_incorrect_type
  1599 000013D8 F20F104301                      movsd xmm0, qword [rbx + 1]
  1600 000013DD F20F104901                      movsd xmm1, qword [rcx + 1]
  1601 000013E2 F20F59C1                        mulsd xmm0, xmm1
  1602 000013E6 E80F090000                      call make_real
  1603                                          LEAVE
    38 000013EB C9                  <1>  leave
  1604 000013EC C22000                          ret AND_KILL_FRAME(2)
  1605                                  
  1606                                  L_code_ptr_raw_bin_div_rr:
  1607                                          ENTER
    33 000013EF C8000000            <1>  enter 0, 0
    34 000013F3 4883E4F0            <1>  and rsp, ~15
  1608 000013F7 48837D1802                      cmp COUNT, 2
  1609 000013FC 0F85D5090000                    jne L_error_arg_count_2
  1610 00001402 488B5D20                        mov rbx, PARAM(0)
  1611                                          assert_real(rbx)
    42 00001406 803B12              <1>  cmp byte [%1], %2
    43 00001409 0F85670A0000        <1>  jne L_error_incorrect_type
  1612 0000140F 488B4D28                        mov rcx, PARAM(1)
  1613                                          assert_real(rcx)
    42 00001413 803912              <1>  cmp byte [%1], %2
    43 00001416 0F855A0A0000        <1>  jne L_error_incorrect_type
  1614 0000141C F20F104301                      movsd xmm0, qword [rbx + 1]
  1615 00001421 F20F104901                      movsd xmm1, qword [rcx + 1]
  1616 00001426 660FEFD2                        pxor xmm2, xmm2
  1617 0000142A 660F2ECA                        ucomisd xmm1, xmm2
  1618 0000142E 0F84730A0000                    je L_error_division_by_zero
  1619 00001434 F20F5EC1                        divsd xmm0, xmm1
  1620 00001438 E8BD080000                      call make_real
  1621                                          LEAVE
    38 0000143D C9                  <1>  leave
  1622 0000143E C22000                          ret AND_KILL_FRAME(2)
  1623                                  
  1624                                  L_code_ptr_raw_bin_add_qq:
  1625                                          ENTER
    33 00001441 C8000000            <1>  enter 0, 0
    34 00001445 4883E4F0            <1>  and rsp, ~15
  1626 00001449 48837D1802                      cmp COUNT, 2
  1627 0000144E 0F8583090000                    jne L_error_arg_count_2
  1628 00001454 4C8B4520                        mov r8, PARAM(0)
  1629                                          assert_rational(r8)
    42 00001458 41803811            <1>  cmp byte [%1], %2
    43 0000145C 0F85140A0000        <1>  jne L_error_incorrect_type
  1630 00001462 4C8B4D28                        mov r9, PARAM(1)
  1631                                          assert_rational(r9)
    42 00001466 41803911            <1>  cmp byte [%1], %2
    43 0000146A 0F85060A0000        <1>  jne L_error_incorrect_type
  1632 00001470 498B4001                        mov rax, qword [r8 + 1] ; num1
  1633 00001474 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1634 00001478 4899                            cqo
  1635 0000147A 48F7EB                          imul rbx
  1636 0000147D 4889C6                          mov rsi, rax
  1637 00001480 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1638 00001484 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1639 00001488 4899                            cqo
  1640 0000148A 48F7EB                          imul rbx
  1641 0000148D 4801C6                          add rsi, rax
  1642 00001490 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1643 00001494 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1644 00001498 4899                            cqo
  1645 0000149A 48F7EB                          imul rbx
  1646 0000149D 4889C7                          mov rdi, rax
  1647 000014A0 E827010000                      call normalize_rational
  1648                                          LEAVE
    38 000014A5 C9                  <1>  leave
  1649 000014A6 C22000                          ret AND_KILL_FRAME(2)
  1650                                  
  1651                                  L_code_ptr_raw_bin_sub_qq:
  1652                                          ENTER
    33 000014A9 C8000000            <1>  enter 0, 0
    34 000014AD 4883E4F0            <1>  and rsp, ~15
  1653 000014B1 48837D1802                      cmp COUNT, 2
  1654 000014B6 0F851B090000                    jne L_error_arg_count_2
  1655 000014BC 4C8B4520                        mov r8, PARAM(0)
  1656                                          assert_rational(r8)
    42 000014C0 41803811            <1>  cmp byte [%1], %2
    43 000014C4 0F85AC090000        <1>  jne L_error_incorrect_type
  1657 000014CA 4C8B4D28                        mov r9, PARAM(1)
  1658                                          assert_rational(r9)
    42 000014CE 41803911            <1>  cmp byte [%1], %2
    43 000014D2 0F859E090000        <1>  jne L_error_incorrect_type
  1659 000014D8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1660 000014DC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1661 000014E0 4899                            cqo
  1662 000014E2 48F7EB                          imul rbx
  1663 000014E5 4889C6                          mov rsi, rax
  1664 000014E8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1665 000014EC 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1666 000014F0 4899                            cqo
  1667 000014F2 48F7EB                          imul rbx
  1668 000014F5 4829C6                          sub rsi, rax
  1669 000014F8 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1670 000014FC 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1671 00001500 4899                            cqo
  1672 00001502 48F7EB                          imul rbx
  1673 00001505 4889C7                          mov rdi, rax
  1674 00001508 E8BF000000                      call normalize_rational
  1675                                          LEAVE
    38 0000150D C9                  <1>  leave
  1676 0000150E C22000                          ret AND_KILL_FRAME(2)
  1677                                  
  1678                                  L_code_ptr_raw_bin_mul_qq:
  1679                                          ENTER
    33 00001511 C8000000            <1>  enter 0, 0
    34 00001515 4883E4F0            <1>  and rsp, ~15
  1680 00001519 48837D1802                      cmp COUNT, 2
  1681 0000151E 0F85B3080000                    jne L_error_arg_count_2
  1682 00001524 4C8B4520                        mov r8, PARAM(0)
  1683                                          assert_rational(r8)
    42 00001528 41803811            <1>  cmp byte [%1], %2
    43 0000152C 0F8544090000        <1>  jne L_error_incorrect_type
  1684 00001532 4C8B4D28                        mov r9, PARAM(1)
  1685                                          assert_rational(r9)
    42 00001536 41803911            <1>  cmp byte [%1], %2
    43 0000153A 0F8536090000        <1>  jne L_error_incorrect_type
  1686 00001540 498B4001                        mov rax, qword [r8 + 1] ; num1
  1687 00001544 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1688 00001548 4899                            cqo
  1689 0000154A 48F7EB                          imul rbx
  1690 0000154D 4889C6                          mov rsi, rax
  1691 00001550 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1692 00001554 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1693 00001558 4899                            cqo
  1694 0000155A 48F7EB                          imul rbx
  1695 0000155D 4889C7                          mov rdi, rax
  1696 00001560 E867000000                      call normalize_rational
  1697                                          LEAVE
    38 00001565 C9                  <1>  leave
  1698 00001566 C22000                          ret AND_KILL_FRAME(2)
  1699                                          
  1700                                  L_code_ptr_raw_bin_div_qq:
  1701                                          ENTER
    33 00001569 C8000000            <1>  enter 0, 0
    34 0000156D 4883E4F0            <1>  and rsp, ~15
  1702 00001571 48837D1802                      cmp COUNT, 2
  1703 00001576 0F855B080000                    jne L_error_arg_count_2
  1704 0000157C 4C8B4520                        mov r8, PARAM(0)
  1705                                          assert_rational(r8)
    42 00001580 41803811            <1>  cmp byte [%1], %2
    43 00001584 0F85EC080000        <1>  jne L_error_incorrect_type
  1706 0000158A 4C8B4D28                        mov r9, PARAM(1)
  1707                                          assert_rational(r9)
    42 0000158E 41803911            <1>  cmp byte [%1], %2
    43 00001592 0F85DE080000        <1>  jne L_error_incorrect_type
  1708 00001598 4983790100                      cmp qword [r9 + 1], 0
  1709 0000159D 0F8404090000                    je L_error_division_by_zero
  1710 000015A3 498B4001                        mov rax, qword [r8 + 1] ; num1
  1711 000015A7 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1712 000015AB 4899                            cqo
  1713 000015AD 48F7EB                          imul rbx
  1714 000015B0 4889C6                          mov rsi, rax
  1715 000015B3 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1716 000015B7 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1717 000015BB 4899                            cqo
  1718 000015BD 48F7EB                          imul rbx
  1719 000015C0 4889C7                          mov rdi, rax
  1720 000015C3 E804000000                      call normalize_rational
  1721                                          LEAVE
    38 000015C8 C9                  <1>  leave
  1722 000015C9 C22000                          ret AND_KILL_FRAME(2)
  1723                                          
  1724                                  normalize_rational:
  1725 000015CC 56                              push rsi
  1726 000015CD 57                              push rdi
  1727 000015CE E839000000                      call gcd
  1728 000015D3 4889C3                          mov rbx, rax
  1729 000015D6 58                              pop rax
  1730 000015D7 4899                            cqo
  1731 000015D9 48F7FB                          idiv rbx
  1732 000015DC 4989C0                          mov r8, rax
  1733 000015DF 58                              pop rax
  1734 000015E0 4899                            cqo
  1735 000015E2 48F7FB                          idiv rbx
  1736 000015E5 4989C1                          mov r9, rax
  1737 000015E8 BF11000000                      mov rdi, (1 + 8 + 8)
  1738 000015ED E896F0FFFF                      call malloc
  1739 000015F2 C60011                          mov byte [rax], T_rational
  1740 000015F5 4C894801                        mov qword [rax + 1], r9
  1741 000015F9 4C894009                        mov qword [rax + 1 + 8], r8
  1742 000015FD C3                              ret
  1743                                  
  1744                                  iabs:
  1745 000015FE 4889F8                          mov rax, rdi
  1746 00001601 4883F800                        cmp rax, 0
  1747 00001605 7C01                            jl .Lneg
  1748 00001607 C3                              ret
  1749                                  .Lneg:
  1750 00001608 48F7D8                          neg rax
  1751 0000160B C3                              ret
  1752                                  
  1753                                  gcd:
  1754 0000160C E8EDFFFFFF                      call iabs
  1755 00001611 4889C3                          mov rbx, rax
  1756 00001614 4889F7                          mov rdi, rsi
  1757 00001617 E8E2FFFFFF                      call iabs
  1758 0000161C 4883F800                        cmp rax, 0
  1759 00001620 7502                            jne .L0
  1760 00001622 4893                            xchg rax, rbx
  1761                                  .L0:
  1762 00001624 4883FB00                        cmp rbx, 0
  1763 00001628 740C                            je .L1
  1764 0000162A 4899                            cqo
  1765 0000162C 48F7F3                          div rbx
  1766 0000162F 4889D0                          mov rax, rdx
  1767 00001632 4893                            xchg rax, rbx
  1768 00001634 EBEE                            jmp .L0
  1769                                  .L1:
  1770 00001636 C3                              ret
  1771                                  
  1772                                  L_code_ptr_error:
  1773                                          ENTER
    33 00001637 C8000000            <1>  enter 0, 0
    34 0000163B 4883E4F0            <1>  and rsp, ~15
  1774 0000163F 48837D1802                      cmp COUNT, 2
  1775 00001644 0F858D070000                    jne L_error_arg_count_2
  1776 0000164A 488B7520                        mov rsi, PARAM(0)
  1777                                          assert_symbol(rsi)
    42 0000164E 803E04              <1>  cmp byte [%1], %2
    43 00001651 0F851F080000        <1>  jne L_error_incorrect_type
  1778 00001657 488B7528                        mov rsi, PARAM(1)
  1779                                          assert_string(rsi)
    42 0000165B 803E03              <1>  cmp byte [%1], %2
    43 0000165E 0F8512080000        <1>  jne L_error_incorrect_type
  1780 00001664 48BF-                           mov rdi, fmt_scheme_error_part_1
  1780 00001666 [9103000000000000] 
  1781 0000166E B800000000                      mov rax, 0
  1782                                  	ENTER
    33 00001673 C8000000            <1>  enter 0, 0
    34 00001677 4883E4F0            <1>  and rsp, ~15
  1783 0000167B E8(00000000)                    call printf
  1784                                  	LEAVE
    38 00001680 C9                  <1>  leave
  1785 00001681 488B7D20                        mov rdi, PARAM(0)
  1786 00001685 E819F0FFFF                      call print_sexpr
  1787 0000168A 48BF-                           mov rdi, fmt_scheme_error_part_2
  1787 0000168C [A503000000000000] 
  1788 00001694 B800000000                      mov rax, 0
  1789                                  	ENTER
    33 00001699 C8000000            <1>  enter 0, 0
    34 0000169D 4883E4F0            <1>  and rsp, ~15
  1790 000016A1 E8(00000000)                    call printf
  1791                                  	LEAVE
    38 000016A6 C9                  <1>  leave
  1792 000016A7 488B4528                        mov rax, PARAM(1)       ; sob_string
  1793 000016AB BE01000000                      mov rsi, 1              ; size = 1 byte
  1794 000016B0 488B5001                        mov rdx, qword [rax + 1] ; length
  1795 000016B4 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1796 000016B8 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1797 000016C0 E8(00000000)                    call fwrite
  1798 000016C5 48BF-                           mov rdi, fmt_scheme_error_part_3
  1798 000016C7 [E703000000000000] 
  1799 000016CF B800000000                      mov rax, 0
  1800                                  	ENTER
    33 000016D4 C8000000            <1>  enter 0, 0
    34 000016D8 4883E4F0            <1>  and rsp, ~15
  1801 000016DC E8(00000000)                    call printf
  1802                                  	LEAVE
    38 000016E1 C9                  <1>  leave
  1803 000016E2 48C7C0F7FFFFFF                  mov rax, -9
  1804 000016E9 E8(00000000)                    call exit
  1805                                  
  1806                                  L_code_ptr_raw_less_than_rr:
  1807                                          ENTER
    33 000016EE C8000000            <1>  enter 0, 0
    34 000016F2 4883E4F0            <1>  and rsp, ~15
  1808 000016F6 48837D1802                      cmp COUNT, 2
  1809 000016FB 0F85D6060000                    jne L_error_arg_count_2
  1810 00001701 488B7520                        mov rsi, PARAM(0)
  1811                                          assert_real(rsi)
    42 00001705 803E12              <1>  cmp byte [%1], %2
    43 00001708 0F8568070000        <1>  jne L_error_incorrect_type
  1812 0000170E 488B7D28                        mov rdi, PARAM(1)
  1813                                          assert_real(rdi)
    42 00001712 803F12              <1>  cmp byte [%1], %2
    43 00001715 0F855B070000        <1>  jne L_error_incorrect_type
  1814 0000171B F20F104601                      movsd xmm0, qword [rsi + 1]
  1815 00001720 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1816 00001725 660F2FC1                        comisd xmm0, xmm1
  1817 00001729 730C                            jae .L_false
  1818 0000172B 48B8-                           mov rax, sob_boolean_true
  1818 0000172D [0300000000000000] 
  1819 00001735 EB0A                            jmp .L_exit
  1820                                  .L_false:
  1821 00001737 48B8-                           mov rax, sob_boolean_false
  1821 00001739 [0200000000000000] 
  1822                                  .L_exit:
  1823                                          LEAVE
    38 00001741 C9                  <1>  leave
  1824 00001742 C22000                          ret AND_KILL_FRAME(2)
  1825                                          
  1826                                  L_code_ptr_raw_less_than_qq:
  1827                                          ENTER
    33 00001745 C8000000            <1>  enter 0, 0
    34 00001749 4883E4F0            <1>  and rsp, ~15
  1828 0000174D 48837D1802                      cmp COUNT, 2
  1829 00001752 0F857F060000                    jne L_error_arg_count_2
  1830 00001758 488B7520                        mov rsi, PARAM(0)
  1831                                          assert_rational(rsi)
    42 0000175C 803E11              <1>  cmp byte [%1], %2
    43 0000175F 0F8511070000        <1>  jne L_error_incorrect_type
  1832 00001765 488B7D28                        mov rdi, PARAM(1)
  1833                                          assert_rational(rdi)
    42 00001769 803F11              <1>  cmp byte [%1], %2
    43 0000176C 0F8504070000        <1>  jne L_error_incorrect_type
  1834 00001772 488B4601                        mov rax, qword [rsi + 1] ; num1
  1835 00001776 4899                            cqo
  1836 00001778 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1837 0000177C 4889C1                          mov rcx, rax
  1838 0000177F 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1839 00001783 4899                            cqo
  1840 00001785 48F76F01                        imul qword [rdi + 1]          ; num2
  1841 00001789 4829C1                          sub rcx, rax
  1842 0000178C 7D0C                            jge .L_false
  1843 0000178E 48B8-                           mov rax, sob_boolean_true
  1843 00001790 [0300000000000000] 
  1844 00001798 EB0A                            jmp .L_exit
  1845                                  .L_false:
  1846 0000179A 48B8-                           mov rax, sob_boolean_false
  1846 0000179C [0200000000000000] 
  1847                                  .L_exit:
  1848                                          LEAVE
    38 000017A4 C9                  <1>  leave
  1849 000017A5 C22000                          ret AND_KILL_FRAME(2)
  1850                                  
  1851                                  L_code_ptr_raw_equal_rr:
  1852                                          ENTER
    33 000017A8 C8000000            <1>  enter 0, 0
    34 000017AC 4883E4F0            <1>  and rsp, ~15
  1853 000017B0 48837D1802                      cmp COUNT, 2
  1854 000017B5 0F851C060000                    jne L_error_arg_count_2
  1855 000017BB 488B7520                        mov rsi, PARAM(0)
  1856                                          assert_real(rsi)
    42 000017BF 803E12              <1>  cmp byte [%1], %2
    43 000017C2 0F85AE060000        <1>  jne L_error_incorrect_type
  1857 000017C8 488B7D28                        mov rdi, PARAM(1)
  1858                                          assert_real(rdi)
    42 000017CC 803F12              <1>  cmp byte [%1], %2
    43 000017CF 0F85A1060000        <1>  jne L_error_incorrect_type
  1859 000017D5 F20F104601                      movsd xmm0, qword [rsi + 1]
  1860 000017DA F20F104F01                      movsd xmm1, qword [rdi + 1]
  1861 000017DF 660F2FC1                        comisd xmm0, xmm1
  1862 000017E3 750C                            jne .L_false
  1863 000017E5 48B8-                           mov rax, sob_boolean_true
  1863 000017E7 [0300000000000000] 
  1864 000017EF EB0A                            jmp .L_exit
  1865                                  .L_false:
  1866 000017F1 48B8-                           mov rax, sob_boolean_false
  1866 000017F3 [0200000000000000] 
  1867                                  .L_exit:
  1868                                          LEAVE
    38 000017FB C9                  <1>  leave
  1869 000017FC C22000                          ret AND_KILL_FRAME(2)
  1870                                          
  1871                                  L_code_ptr_raw_equal_qq:
  1872                                          ENTER
    33 000017FF C8000000            <1>  enter 0, 0
    34 00001803 4883E4F0            <1>  and rsp, ~15
  1873 00001807 48837D1802                      cmp COUNT, 2
  1874 0000180C 0F85C5050000                    jne L_error_arg_count_2
  1875 00001812 488B7520                        mov rsi, PARAM(0)
  1876                                          assert_rational(rsi)
    42 00001816 803E11              <1>  cmp byte [%1], %2
    43 00001819 0F8557060000        <1>  jne L_error_incorrect_type
  1877 0000181F 488B7D28                        mov rdi, PARAM(1)
  1878                                          assert_rational(rdi)
    42 00001823 803F11              <1>  cmp byte [%1], %2
    43 00001826 0F854A060000        <1>  jne L_error_incorrect_type
  1879 0000182C 488B4601                        mov rax, qword [rsi + 1] ; num1
  1880 00001830 4899                            cqo
  1881 00001832 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1882 00001836 4889C1                          mov rcx, rax
  1883 00001839 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1884 0000183D 4899                            cqo
  1885 0000183F 48F76F01                        imul qword [rdi + 1]          ; num2
  1886 00001843 4829C1                          sub rcx, rax
  1887 00001846 750C                            jne .L_false
  1888 00001848 48B8-                           mov rax, sob_boolean_true
  1888 0000184A [0300000000000000] 
  1889 00001852 EB0A                            jmp .L_exit
  1890                                  .L_false:
  1891 00001854 48B8-                           mov rax, sob_boolean_false
  1891 00001856 [0200000000000000] 
  1892                                  .L_exit:
  1893                                          LEAVE
    38 0000185E C9                  <1>  leave
  1894 0000185F C22000                          ret AND_KILL_FRAME(2)
  1895                                  
  1896                                  L_code_ptr_quotient:
  1897                                          ENTER
    33 00001862 C8000000            <1>  enter 0, 0
    34 00001866 4883E4F0            <1>  and rsp, ~15
  1898 0000186A 48837D1802                      cmp COUNT, 2
  1899 0000186F 0F8562050000                    jne L_error_arg_count_2
  1900 00001875 488B7520                        mov rsi, PARAM(0)
  1901                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001879 803E11              <2>  cmp byte [%1], %2
    43 0000187C 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00001882 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001887 0F85E9050000        <1>  jne L_error_incorrect_type
  1902 0000188D 488B7D28                        mov rdi, PARAM(1)
  1903                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001891 803F11              <2>  cmp byte [%1], %2
    43 00001894 0F85DC050000        <2>  jne L_error_incorrect_type
    48 0000189A 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000189F 0F85D1050000        <1>  jne L_error_incorrect_type
  1904 000018A5 488B4601                        mov rax, qword [rsi + 1]
  1905 000018A9 488B5F01                        mov rbx, qword [rdi + 1]
  1906 000018AD 4883FB00                        cmp rbx, 0
  1907 000018B1 0F84F0050000                    je L_error_division_by_zero
  1908 000018B7 4899                            cqo
  1909 000018B9 48F7FB                          idiv rbx
  1910 000018BC 4889C7                          mov rdi, rax
  1911 000018BF E852040000                      call make_integer
  1912                                          LEAVE
    38 000018C4 C9                  <1>  leave
  1913 000018C5 C22000                          ret AND_KILL_FRAME(2)
  1914                                          
  1915                                  L_code_ptr_remainder:
  1916                                          ENTER
    33 000018C8 C8000000            <1>  enter 0, 0
    34 000018CC 4883E4F0            <1>  and rsp, ~15
  1917 000018D0 48837D1802                      cmp COUNT, 2
  1918 000018D5 0F85FC040000                    jne L_error_arg_count_2
  1919 000018DB 488B7520                        mov rsi, PARAM(0)
  1920                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018DF 803E11              <2>  cmp byte [%1], %2
    43 000018E2 0F858E050000        <2>  jne L_error_incorrect_type
    48 000018E8 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018ED 0F8583050000        <1>  jne L_error_incorrect_type
  1921 000018F3 488B7D28                        mov rdi, PARAM(1)
  1922                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000018F7 803F11              <2>  cmp byte [%1], %2
    43 000018FA 0F8576050000        <2>  jne L_error_incorrect_type
    48 00001900 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001905 0F856B050000        <1>  jne L_error_incorrect_type
  1923 0000190B 488B4601                        mov rax, qword [rsi + 1]
  1924 0000190F 488B5F01                        mov rbx, qword [rdi + 1]
  1925 00001913 4883FB00                        cmp rbx, 0
  1926 00001917 0F848A050000                    je L_error_division_by_zero
  1927 0000191D 4899                            cqo
  1928 0000191F 48F7FB                          idiv rbx
  1929 00001922 4889D7                          mov rdi, rdx
  1930 00001925 E8EC030000                      call make_integer
  1931                                          LEAVE
    38 0000192A C9                  <1>  leave
  1932 0000192B C22000                          ret AND_KILL_FRAME(2)
  1933                                  
  1934                                  L_code_ptr_set_car:
  1935                                          ENTER
    33 0000192E C8000000            <1>  enter 0, 0
    34 00001932 4883E4F0            <1>  and rsp, ~15
  1936 00001936 48837D1802                      cmp COUNT, 2
  1937 0000193B 0F8596040000                    jne L_error_arg_count_2
  1938 00001941 488B4520                        mov rax, PARAM(0)
  1939                                          assert_pair(rax)
    42 00001945 803821              <1>  cmp byte [%1], %2
    43 00001948 0F8528050000        <1>  jne L_error_incorrect_type
  1940 0000194E 488B5D28                        mov rbx, PARAM(1)
  1941 00001952 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1942 00001956 48B8-                           mov rax, sob_void
  1942 00001958 [0000000000000000] 
  1943                                          LEAVE
    38 00001960 C9                  <1>  leave
  1944 00001961 C22000                          ret AND_KILL_FRAME(2)
  1945                                  
  1946                                  L_code_ptr_set_cdr:
  1947                                          ENTER
    33 00001964 C8000000            <1>  enter 0, 0
    34 00001968 4883E4F0            <1>  and rsp, ~15
  1948 0000196C 48837D1802                      cmp COUNT, 2
  1949 00001971 0F8560040000                    jne L_error_arg_count_2
  1950 00001977 488B4520                        mov rax, PARAM(0)
  1951                                          assert_pair(rax)
    42 0000197B 803821              <1>  cmp byte [%1], %2
    43 0000197E 0F85F2040000        <1>  jne L_error_incorrect_type
  1952 00001984 488B5D28                        mov rbx, PARAM(1)
  1953 00001988 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1954 0000198C 48B8-                           mov rax, sob_void
  1954 0000198E [0000000000000000] 
  1955                                          LEAVE
    38 00001996 C9                  <1>  leave
  1956 00001997 C22000                          ret AND_KILL_FRAME(2)
  1957                                  
  1958                                  L_code_ptr_string_ref:
  1959                                          ENTER
    33 0000199A C8000000            <1>  enter 0, 0
    34 0000199E 4883E4F0            <1>  and rsp, ~15
  1960 000019A2 48837D1802                      cmp COUNT, 2
  1961 000019A7 0F852A040000                    jne L_error_arg_count_2
  1962 000019AD 488B7D20                        mov rdi, PARAM(0)
  1963                                          assert_string(rdi)
    42 000019B1 803F03              <1>  cmp byte [%1], %2
    43 000019B4 0F85BC040000        <1>  jne L_error_incorrect_type
  1964 000019BA 488B7528                        mov rsi, PARAM(1)
  1965                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019BE 803E11              <2>  cmp byte [%1], %2
    43 000019C1 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000019C7 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019CC 0F85A4040000        <1>  jne L_error_incorrect_type
  1966 000019D2 488B5701                        mov rdx, qword [rdi + 1]
  1967 000019D6 488B4E01                        mov rcx, qword [rsi + 1]
  1968 000019DA 4839D1                          cmp rcx, rdx
  1969 000019DD 0F8D59030000                    jge L_error_integer_range
  1970 000019E3 4883F900                        cmp rcx, 0
  1971 000019E7 0F8C4F030000                    jl L_error_integer_range
  1972 000019ED 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1973 000019F1 BF02000000                      mov rdi, 2
  1974 000019F6 E88DECFFFF                      call malloc
  1975 000019FB C60002                          mov byte [rax], T_char
  1976 000019FE 885801                          mov byte [rax + 1], bl
  1977                                          LEAVE
    38 00001A01 C9                  <1>  leave
  1978 00001A02 C22000                          ret AND_KILL_FRAME(2)
  1979                                  
  1980                                  L_code_ptr_vector_ref:
  1981                                          ENTER
    33 00001A05 C8000000            <1>  enter 0, 0
    34 00001A09 4883E4F0            <1>  and rsp, ~15
  1982 00001A0D 48837D1802                      cmp COUNT, 2
  1983 00001A12 0F85BF030000                    jne L_error_arg_count_2
  1984 00001A18 488B7D20                        mov rdi, PARAM(0)
  1985                                          assert_vector(rdi)
    42 00001A1C 803F22              <1>  cmp byte [%1], %2
    43 00001A1F 0F8551040000        <1>  jne L_error_incorrect_type
  1986 00001A25 488B7528                        mov rsi, PARAM(1)
  1987                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A29 803E11              <2>  cmp byte [%1], %2
    43 00001A2C 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001A32 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A37 0F8539040000        <1>  jne L_error_incorrect_type
  1988 00001A3D 488B5701                        mov rdx, qword [rdi + 1]
  1989 00001A41 488B4E01                        mov rcx, qword [rsi + 1]
  1990 00001A45 4839D1                          cmp rcx, rdx
  1991 00001A48 0F8DEE020000                    jge L_error_integer_range
  1992 00001A4E 4883F900                        cmp rcx, 0
  1993 00001A52 0F8CE4020000                    jl L_error_integer_range
  1994 00001A58 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1995                                          LEAVE
    38 00001A5D C9                  <1>  leave
  1996 00001A5E C22000                          ret AND_KILL_FRAME(2)
  1997                                  
  1998                                  L_code_ptr_vector_set:
  1999                                          ENTER
    33 00001A61 C8000000            <1>  enter 0, 0
    34 00001A65 4883E4F0            <1>  and rsp, ~15
  2000 00001A69 48837D1803                      cmp COUNT, 3
  2001 00001A6E 0F85CD030000                    jne L_error_arg_count_3
  2002 00001A74 488B7D20                        mov rdi, PARAM(0)
  2003                                          assert_vector(rdi)
    42 00001A78 803F22              <1>  cmp byte [%1], %2
    43 00001A7B 0F85F5030000        <1>  jne L_error_incorrect_type
  2004 00001A81 488B7528                        mov rsi, PARAM(1)
  2005                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A85 803E11              <2>  cmp byte [%1], %2
    43 00001A88 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001A8E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A93 0F85DD030000        <1>  jne L_error_incorrect_type
  2006 00001A99 488B5701                        mov rdx, qword [rdi + 1]
  2007 00001A9D 488B4E01                        mov rcx, qword [rsi + 1]
  2008 00001AA1 4839D1                          cmp rcx, rdx
  2009 00001AA4 0F8D92020000                    jge L_error_integer_range
  2010 00001AAA 4883F900                        cmp rcx, 0
  2011 00001AAE 0F8C88020000                    jl L_error_integer_range
  2012 00001AB4 488B4530                        mov rax, PARAM(2)
  2013 00001AB8 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2014 00001ABD 48B8-                           mov rax, sob_void
  2014 00001ABF [0000000000000000] 
  2015                                          LEAVE
    38 00001AC7 C9                  <1>  leave
  2016 00001AC8 C22800                          ret AND_KILL_FRAME(3)
  2017                                  
  2018                                  L_code_ptr_string_set:
  2019                                          ENTER
    33 00001ACB C8000000            <1>  enter 0, 0
    34 00001ACF 4883E4F0            <1>  and rsp, ~15
  2020 00001AD3 48837D1803                      cmp COUNT, 3
  2021 00001AD8 0F8563030000                    jne L_error_arg_count_3
  2022 00001ADE 488B7D20                        mov rdi, PARAM(0)
  2023                                          assert_string(rdi)
    42 00001AE2 803F03              <1>  cmp byte [%1], %2
    43 00001AE5 0F858B030000        <1>  jne L_error_incorrect_type
  2024 00001AEB 488B7528                        mov rsi, PARAM(1)
  2025                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001AEF 803E11              <2>  cmp byte [%1], %2
    43 00001AF2 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001AF8 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001AFD 0F8573030000        <1>  jne L_error_incorrect_type
  2026 00001B03 488B5701                        mov rdx, qword [rdi + 1]
  2027 00001B07 488B4E01                        mov rcx, qword [rsi + 1]
  2028 00001B0B 4839D1                          cmp rcx, rdx
  2029 00001B0E 0F8D28020000                    jge L_error_integer_range
  2030 00001B14 4883F900                        cmp rcx, 0
  2031 00001B18 0F8C1E020000                    jl L_error_integer_range
  2032 00001B1E 488B4530                        mov rax, PARAM(2)
  2033                                          assert_char(rax)
    42 00001B22 803802              <1>  cmp byte [%1], %2
    43 00001B25 0F854B030000        <1>  jne L_error_incorrect_type
  2034 00001B2B 8A4001                          mov al, byte [rax + 1]
  2035 00001B2E 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2036 00001B32 48B8-                           mov rax, sob_void
  2036 00001B34 [0000000000000000] 
  2037                                          LEAVE
    38 00001B3C C9                  <1>  leave
  2038 00001B3D C22800                          ret AND_KILL_FRAME(3)
  2039                                  
  2040                                  L_code_ptr_make_vector:
  2041                                          ENTER
    33 00001B40 C8000000            <1>  enter 0, 0
    34 00001B44 4883E4F0            <1>  and rsp, ~15
  2042 00001B48 48837D1802                      cmp COUNT, 2
  2043 00001B4D 0F8584020000                    jne L_error_arg_count_2
  2044 00001B53 488B4D20                        mov rcx, PARAM(0)
  2045                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B57 803911              <2>  cmp byte [%1], %2
    43 00001B5A 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001B60 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B65 0F850B030000        <1>  jne L_error_incorrect_type
  2046 00001B6B 488B4901                        mov rcx, qword [rcx + 1]
  2047 00001B6F 4883F900                        cmp rcx, 0
  2048 00001B73 0F8CC3010000                    jl L_error_integer_range
  2049 00001B79 488B5528                        mov rdx, PARAM(1)
  2050 00001B7D 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2051 00001B85 E8FEEAFFFF                      call malloc
  2052 00001B8A C60022                          mov byte [rax], T_vector
  2053 00001B8D 48894801                        mov qword [rax + 1], rcx
  2054 00001B91 41B800000000                    mov r8, 0
  2055                                  .L0:
  2056 00001B97 4939C8                          cmp r8, rcx
  2057 00001B9A 740A                            je .L1
  2058 00001B9C 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2059 00001BA1 49FFC0                          inc r8
  2060 00001BA4 EBF1                            jmp .L0
  2061                                  .L1:
  2062                                          LEAVE
    38 00001BA6 C9                  <1>  leave
  2063 00001BA7 C22000                          ret AND_KILL_FRAME(2)
  2064                                          
  2065                                  L_code_ptr_make_string:
  2066                                          ENTER
    33 00001BAA C8000000            <1>  enter 0, 0
    34 00001BAE 4883E4F0            <1>  and rsp, ~15
  2067 00001BB2 48837D1802                      cmp COUNT, 2
  2068 00001BB7 0F851A020000                    jne L_error_arg_count_2
  2069 00001BBD 488B4D20                        mov rcx, PARAM(0)
  2070                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001BC1 803911              <2>  cmp byte [%1], %2
    43 00001BC4 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001BCA 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BCF 0F85A1020000        <1>  jne L_error_incorrect_type
  2071 00001BD5 488B4901                        mov rcx, qword [rcx + 1]
  2072 00001BD9 4883F900                        cmp rcx, 0
  2073 00001BDD 0F8C59010000                    jl L_error_integer_range
  2074 00001BE3 488B5528                        mov rdx, PARAM(1)
  2075                                          assert_char(rdx)
    42 00001BE7 803A02              <1>  cmp byte [%1], %2
    43 00001BEA 0F8586020000        <1>  jne L_error_incorrect_type
  2076 00001BF0 8A5201                          mov dl, byte [rdx + 1]
  2077 00001BF3 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2078 00001BF7 E88CEAFFFF                      call malloc
  2079 00001BFC C60003                          mov byte [rax], T_string
  2080 00001BFF 48894801                        mov qword [rax + 1], rcx
  2081 00001C03 41B800000000                    mov r8, 0
  2082                                  .L0:
  2083 00001C09 4939C8                          cmp r8, rcx
  2084 00001C0C 740A                            je .L1
  2085 00001C0E 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2086 00001C13 49FFC0                          inc r8
  2087 00001C16 EBF1                            jmp .L0
  2088                                  .L1:
  2089                                          LEAVE
    38 00001C18 C9                  <1>  leave
  2090 00001C19 C22000                          ret AND_KILL_FRAME(2)
  2091                                  
  2092                                  L_code_ptr_numerator:
  2093                                          ENTER
    33 00001C1C C8000000            <1>  enter 0, 0
    34 00001C20 4883E4F0            <1>  and rsp, ~15
  2094 00001C24 48837D1801                      cmp COUNT, 1
  2095 00001C29 0F8573010000                    jne L_error_arg_count_1
  2096 00001C2F 488B4520                        mov rax, PARAM(0)
  2097                                          assert_rational(rax)
    42 00001C33 803811              <1>  cmp byte [%1], %2
    43 00001C36 0F853A020000        <1>  jne L_error_incorrect_type
  2098 00001C3C 488B7801                        mov rdi, qword [rax + 1]
  2099 00001C40 E8D1000000                      call make_integer
  2100                                          LEAVE
    38 00001C45 C9                  <1>  leave
  2101 00001C46 C21800                          ret AND_KILL_FRAME(1)
  2102                                          
  2103                                  L_code_ptr_denominator:
  2104                                          ENTER
    33 00001C49 C8000000            <1>  enter 0, 0
    34 00001C4D 4883E4F0            <1>  and rsp, ~15
  2105 00001C51 48837D1801                      cmp COUNT, 1
  2106 00001C56 0F8546010000                    jne L_error_arg_count_1
  2107 00001C5C 488B4520                        mov rax, PARAM(0)
  2108                                          assert_rational(rax)
    42 00001C60 803811              <1>  cmp byte [%1], %2
    43 00001C63 0F850D020000        <1>  jne L_error_incorrect_type
  2109 00001C69 488B7809                        mov rdi, qword [rax + 1 + 8]
  2110 00001C6D E8A4000000                      call make_integer
  2111                                          LEAVE
    38 00001C72 C9                  <1>  leave
  2112 00001C73 C21800                          ret AND_KILL_FRAME(1)
  2113                                  
  2114                                  L_code_ptr_eq:
  2115                                  	ENTER
    33 00001C76 C8000000            <1>  enter 0, 0
    34 00001C7A 4883E4F0            <1>  and rsp, ~15
  2116 00001C7E 48837D1802              	cmp COUNT, 2
  2117 00001C83 0F854E010000            	jne L_error_arg_count_2
  2118 00001C89 488B7D20                	mov rdi, PARAM(0)
  2119 00001C8D 488B7528                	mov rsi, PARAM(1)
  2120 00001C91 4839F7                  	cmp rdi, rsi
  2121 00001C94 744A                    	je .L_eq_true
  2122 00001C96 8A17                    	mov dl, byte [rdi]
  2123 00001C98 3A16                    	cmp dl, byte [rsi]
  2124 00001C9A 7550                    	jne .L_eq_false
  2125 00001C9C 80FA02                  	cmp dl, T_char
  2126 00001C9F 7437                    	je .L_char
  2127 00001CA1 80FA04                  	cmp dl, T_symbol
  2128 00001CA4 742A                    	je .L_symbol
  2129 00001CA6 80FA12                  	cmp dl, T_real
  2130 00001CA9 741D                    	je .L_real
  2131 00001CAB 80FA11                  	cmp dl, T_rational
  2132 00001CAE 7402                    	je .L_rational
  2133 00001CB0 EB3A                    	jmp .L_eq_false
  2134                                  .L_rational:
  2135 00001CB2 488B4601                	mov rax, qword [rsi + 1]
  2136 00001CB6 483B4701                	cmp rax, qword [rdi + 1]
  2137 00001CBA 7530                    	jne .L_eq_false
  2138 00001CBC 488B4609                	mov rax, qword [rsi + 1 + 8]
  2139 00001CC0 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2140 00001CC4 7526                    	jne .L_eq_false
  2141 00001CC6 EB18                    	jmp .L_eq_true
  2142                                  .L_real:
  2143 00001CC8 488B4601                	mov rax, qword [rsi + 1]
  2144 00001CCC 483B4701                	cmp rax, qword [rdi + 1]
  2145                                  .L_symbol:
  2146                                  	; never reached, because symbols are static!
  2147                                  	; but I'm keeping it in case, I'll ever change
  2148                                  	; the implementation
  2149 00001CD0 488B4601                	mov rax, qword [rsi + 1]
  2150 00001CD4 483B4701                	cmp rax, qword [rdi + 1]
  2151                                  .L_char:
  2152 00001CD8 8A5E01                  	mov bl, byte [rsi + 1]
  2153 00001CDB 3A5F01                  	cmp bl, byte [rdi + 1]
  2154 00001CDE 750C                    	jne .L_eq_false
  2155                                  .L_eq_true:
  2156 00001CE0 48B8-                   	mov rax, sob_boolean_true
  2156 00001CE2 [0300000000000000] 
  2157 00001CEA EB0A                    	jmp .L_eq_exit
  2158                                  .L_eq_false:
  2159 00001CEC 48B8-                   	mov rax, sob_boolean_false
  2159 00001CEE [0200000000000000] 
  2160                                  .L_eq_exit:
  2161                                  	LEAVE
    38 00001CF6 C9                  <1>  leave
  2162 00001CF7 C22000                  	ret AND_KILL_FRAME(2)
  2163                                  
  2164                                  make_real:
  2165                                          ENTER
    33 00001CFA C8000000            <1>  enter 0, 0
    34 00001CFE 4883E4F0            <1>  and rsp, ~15
  2166 00001D02 BF09000000                      mov rdi, (1 + 8)
  2167 00001D07 E87CE9FFFF                      call malloc
  2168 00001D0C C60012                          mov byte [rax], T_real
  2169 00001D0F F20F114001                      movsd qword [rax + 1], xmm0
  2170                                          LEAVE
    38 00001D14 C9                  <1>  leave
  2171 00001D15 C3                              ret
  2172                                          
  2173                                  make_integer:
  2174                                          ENTER
    33 00001D16 C8000000            <1>  enter 0, 0
    34 00001D1A 4883E4F0            <1>  and rsp, ~15
  2175 00001D1E 4889FE                          mov rsi, rdi
  2176 00001D21 BF11000000                      mov rdi, (1 + 8 + 8)
  2177 00001D26 E85DE9FFFF                      call malloc
  2178 00001D2B C60011                          mov byte [rax], T_rational
  2179 00001D2E 48897001                        mov qword [rax + 1], rsi
  2180 00001D32 48C7400901000000                mov qword [rax + 1 + 8], 1
  2181                                          LEAVE
    38 00001D3A C9                  <1>  leave
  2182 00001D3B C3                              ret
  2183                                          
  2184                                  L_error_integer_range:
  2185 00001D3C 488B3C25[00000000]              mov rdi, qword [stderr]
  2186 00001D44 48BE-                           mov rsi, fmt_integer_range
  2186 00001D46 [5E03000000000000] 
  2187 00001D4E B800000000                      mov rax, 0
  2188                                  	ENTER
    33 00001D53 C8000000            <1>  enter 0, 0
    34 00001D57 4883E4F0            <1>  and rsp, ~15
  2189 00001D5B E8(00000000)                    call fprintf
  2190                                  	LEAVE
    38 00001D60 C9                  <1>  leave
  2191 00001D61 48C7C0FBFFFFFF                  mov rax, -5
  2192 00001D68 E8(00000000)                    call exit
  2193                                  
  2194                                  L_error_arg_count_0:
  2195 00001D6D 488B3C25[00000000]              mov rdi, qword [stderr]
  2196 00001D75 48BE-                           mov rsi, fmt_arg_count_0
  2196 00001D77 [5C02000000000000] 
  2197 00001D7F 488B5518                        mov rdx, COUNT
  2198 00001D83 B800000000                      mov rax, 0
  2199                                  	ENTER
    33 00001D88 C8000000            <1>  enter 0, 0
    34 00001D8C 4883E4F0            <1>  and rsp, ~15
  2200 00001D90 E8(00000000)                    call fprintf
  2201                                  	LEAVE
    38 00001D95 C9                  <1>  leave
  2202 00001D96 48C7C0FDFFFFFF                  mov rax, -3
  2203 00001D9D E8(00000000)                    call exit
  2204                                  
  2205                                  L_error_arg_count_1:
  2206 00001DA2 488B3C25[00000000]              mov rdi, qword [stderr]
  2207 00001DAA 48BE-                           mov rsi, fmt_arg_count_1
  2207 00001DAC [8402000000000000] 
  2208 00001DB4 488B5518                        mov rdx, COUNT
  2209 00001DB8 B800000000                      mov rax, 0
  2210                                  	ENTER
    33 00001DBD C8000000            <1>  enter 0, 0
    34 00001DC1 4883E4F0            <1>  and rsp, ~15
  2211 00001DC5 E8(00000000)                    call fprintf
  2212                                  	LEAVE
    38 00001DCA C9                  <1>  leave
  2213 00001DCB 48C7C0FDFFFFFF                  mov rax, -3
  2214 00001DD2 E8(00000000)                    call exit
  2215                                  
  2216                                  L_error_arg_count_2:
  2217 00001DD7 488B3C25[00000000]              mov rdi, qword [stderr]
  2218 00001DDF 48BE-                           mov rsi, fmt_arg_count_2
  2218 00001DE1 [EA02000000000000] 
  2219 00001DE9 488B5518                        mov rdx, COUNT
  2220 00001DED B800000000                      mov rax, 0
  2221                                  	ENTER
    33 00001DF2 C8000000            <1>  enter 0, 0
    34 00001DF6 4883E4F0            <1>  and rsp, ~15
  2222 00001DFA E8(00000000)                    call fprintf
  2223                                  	LEAVE
    38 00001DFF C9                  <1>  leave
  2224 00001E00 48C7C0FDFFFFFF                  mov rax, -3
  2225 00001E07 E8(00000000)                    call exit
  2226                                  
  2227                                  L_error_arg_count_12:
  2228 00001E0C 488B3C25[00000000]              mov rdi, qword [stderr]
  2229 00001E14 48BE-                           mov rsi, fmt_arg_count_12
  2229 00001E16 [AA02000000000000] 
  2230 00001E1E 488B5518                        mov rdx, COUNT
  2231 00001E22 B800000000                      mov rax, 0
  2232                                  	ENTER
    33 00001E27 C8000000            <1>  enter 0, 0
    34 00001E2B 4883E4F0            <1>  and rsp, ~15
  2233 00001E2F E8(00000000)                    call fprintf
  2234                                  	LEAVE
    38 00001E34 C9                  <1>  leave
  2235 00001E35 48C7C0FDFFFFFF                  mov rax, -3
  2236 00001E3C E8(00000000)                    call exit
  2237                                  
  2238                                  L_error_arg_count_3:
  2239 00001E41 488B3C25[00000000]              mov rdi, qword [stderr]
  2240 00001E49 48BE-                           mov rsi, fmt_arg_count_3
  2240 00001E4B [1103000000000000] 
  2241 00001E53 488B5518                        mov rdx, COUNT
  2242 00001E57 B800000000                      mov rax, 0
  2243                                  	ENTER
    33 00001E5C C8000000            <1>  enter 0, 0
    34 00001E60 4883E4F0            <1>  and rsp, ~15
  2244 00001E64 E8(00000000)                    call fprintf
  2245                                  	LEAVE
    38 00001E69 C9                  <1>  leave
  2246 00001E6A 48C7C0FDFFFFFF                  mov rax, -3
  2247 00001E71 E8(00000000)                    call exit
  2248                                          
  2249                                  L_error_incorrect_type:
  2250 00001E76 488B3C25[00000000]              mov rdi, qword [stderr]
  2251 00001E7E 48BE-                           mov rsi, fmt_type
  2251 00001E80 [3A03000000000000] 
  2252 00001E88 B800000000                      mov rax, 0
  2253                                  	ENTER
    33 00001E8D C8000000            <1>  enter 0, 0
    34 00001E91 4883E4F0            <1>  and rsp, ~15
  2254 00001E95 E8(00000000)                    call fprintf
  2255                                  	LEAVE
    38 00001E9A C9                  <1>  leave
  2256 00001E9B 48C7C0FCFFFFFF                  mov rax, -4
  2257 00001EA2 E8(00000000)                    call exit
  2258                                  
  2259                                  L_error_division_by_zero:
  2260 00001EA7 488B3C25[00000000]              mov rdi, qword [stderr]
  2261 00001EAF 48BE-                           mov rsi, fmt_division_by_zero
  2261 00001EB1 [7B03000000000000] 
  2262 00001EB9 B800000000                      mov rax, 0
  2263                                  	ENTER
    33 00001EBE C8000000            <1>  enter 0, 0
    34 00001EC2 4883E4F0            <1>  and rsp, ~15
  2264 00001EC6 E8(00000000)                    call fprintf
  2265                                  	LEAVE
    38 00001ECB C9                  <1>  leave
  2266 00001ECC 48C7C0F8FFFFFF                  mov rax, -8
  2267 00001ED3 E8(00000000)                    call exit
  2268                                  
  2269                                  section .data
  2270                                  fmt_char:
  2271 00000259 256300                          db `%c\0`
  2272                                  fmt_arg_count_0:
  2273 0000025C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2273 00000265 74696E67207A65726F-
  2273 0000026E 20617267756D656E74-
  2273 00000277 732E20466F756E6420-
  2273 00000280 25640A00           
  2274                                  fmt_arg_count_1:
  2275 00000284 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2275 0000028D 74696E67206F6E6520-
  2275 00000296 617267756D656E742E-
  2275 0000029F 20466F756E64202564-
  2275 000002A8 0A00               
  2276                                  fmt_arg_count_12:
  2277 000002AA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2277 000002B3 74696E67206F6E6520-
  2277 000002BC 726571756972656420-
  2277 000002C5 616E64206F6E65206F-
  2277 000002CE 7074696F6E616C2061-
  2277 000002D7 7267756D656E742E20-
  2277 000002E0 466F756E642025640A-
  2277 000002E9 00                 
  2278                                  fmt_arg_count_2:
  2279 000002EA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2279 000002F3 74696E672074776F20-
  2279 000002FC 617267756D656E7473-
  2279 00000305 2E20466F756E642025-
  2279 0000030E 640A00             
  2280                                  fmt_arg_count_3:
  2281 00000311 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2281 0000031A 74696E672074687265-
  2281 00000323 6520617267756D656E-
  2281 0000032C 74732E20466F756E64-
  2281 00000335 2025640A00         
  2282                                  fmt_type:
  2283 0000033A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2283 00000343 696F6E207061737365-
  2283 0000034C 6420696E636F727265-
  2283 00000355 637420747970650A00 
  2284                                  fmt_integer_range:
  2285 0000035E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2285 00000367 7265637420696E7465-
  2285 00000370 6765722072616E6765-
  2285 00000379 0A00               
  2286                                  fmt_division_by_zero:
  2287 0000037B 212121204469766973-             db `!!! Division by zero\n\0`
  2287 00000384 696F6E206279207A65-
  2287 0000038D 726F0A00           
  2288                                  fmt_scheme_error_part_1:
  2289 00000391 0A2121212054686520-             db `\n!!! The procedure \0`
  2289 0000039A 70726F636564757265-
  2289 000003A3 2000               
  2290                                  fmt_scheme_error_part_2:
  2291 000003A5 2061736B656420746F-             db ` asked to terminate the program\n`
  2291 000003AE 207465726D696E6174-
  2291 000003B7 65207468652070726F-
  2291 000003C0 6772616D0A         
  2292 000003C5 202020207769746820-             db `    with the following message:\n\n\0`
  2292 000003CE 74686520666F6C6C6F-
  2292 000003D7 77696E67206D657373-
  2292 000003E0 6167653A0A0A00     
  2293                                  fmt_scheme_error_part_3:
  2294 000003E7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2294 000003F0 210A0A00           
