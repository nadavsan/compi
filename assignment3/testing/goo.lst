     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "a"
    84 00000007 0100000000000000        	dq 1
    85 0000000F 61                      	db 0x61
    86 00000010 04                      	db T_symbol	; a
    87 00000011 [0600000000000000]      	dq L_constants + 6
    88 00000019 03                      	db T_string	; "b"
    89 0000001A 0100000000000000        	dq 1
    90 00000022 62                      	db 0x62
    91 00000023 04                      	db T_symbol	; b
    92 00000024 [1900000000000000]      	dq L_constants + 25
    93 0000002C 21                      	db T_pair	; (b)
    94 0000002D [2300000000000000]-     	dq L_constants + 35, L_constants + 1
    94 00000035 [0100000000000000] 
    95 0000003D 21                      	db T_pair	; (a b)
    96 0000003E [1000000000000000]-     	dq L_constants + 16, L_constants + 44
    96 00000046 [2C00000000000000] 
    97                                  
    98                                  section .bss
    99                                  free_var_0:	; location of null?
   100 00000000 ????????????????        	resq 1
   101                                  free_var_1:	; location of pair?
   102 00000008 ????????????????        	resq 1
   103                                  free_var_2:	; location of void?
   104 00000010 ????????????????        	resq 1
   105                                  free_var_3:	; location of char?
   106 00000018 ????????????????        	resq 1
   107                                  free_var_4:	; location of string?
   108 00000020 ????????????????        	resq 1
   109                                  free_var_5:	; location of symbol?
   110 00000028 ????????????????        	resq 1
   111                                  free_var_6:	; location of vector?
   112 00000030 ????????????????        	resq 1
   113                                  free_var_7:	; location of procedure?
   114 00000038 ????????????????        	resq 1
   115                                  free_var_8:	; location of real?
   116 00000040 ????????????????        	resq 1
   117                                  free_var_9:	; location of rational?
   118 00000048 ????????????????        	resq 1
   119                                  free_var_10:	; location of boolean?
   120 00000050 ????????????????        	resq 1
   121                                  free_var_11:	; location of number?
   122 00000058 ????????????????        	resq 1
   123                                  free_var_12:	; location of collection?
   124 00000060 ????????????????        	resq 1
   125                                  free_var_13:	; location of cons
   126 00000068 ????????????????        	resq 1
   127                                  free_var_14:	; location of display-sexpr
   128 00000070 ????????????????        	resq 1
   129                                  free_var_15:	; location of write-char
   130 00000078 ????????????????        	resq 1
   131                                  free_var_16:	; location of car
   132 00000080 ????????????????        	resq 1
   133                                  free_var_17:	; location of cdr
   134 00000088 ????????????????        	resq 1
   135                                  free_var_18:	; location of string-length
   136 00000090 ????????????????        	resq 1
   137                                  free_var_19:	; location of vector-length
   138 00000098 ????????????????        	resq 1
   139                                  free_var_20:	; location of real->integer
   140 000000A0 ????????????????        	resq 1
   141                                  free_var_21:	; location of exit
   142 000000A8 ????????????????        	resq 1
   143                                  free_var_22:	; location of integer->real
   144 000000B0 ????????????????        	resq 1
   145                                  free_var_23:	; location of rational->real
   146 000000B8 ????????????????        	resq 1
   147                                  free_var_24:	; location of char->integer
   148 000000C0 ????????????????        	resq 1
   149                                  free_var_25:	; location of integer->char
   150 000000C8 ????????????????        	resq 1
   151                                  free_var_26:	; location of trng
   152 000000D0 ????????????????        	resq 1
   153                                  free_var_27:	; location of zero?
   154 000000D8 ????????????????        	resq 1
   155                                  free_var_28:	; location of integer?
   156 000000E0 ????????????????        	resq 1
   157                                  free_var_29:	; location of __bin-apply
   158 000000E8 ????????????????        	resq 1
   159                                  free_var_30:	; location of __bin-add-rr
   160 000000F0 ????????????????        	resq 1
   161                                  free_var_31:	; location of __bin-sub-rr
   162 000000F8 ????????????????        	resq 1
   163                                  free_var_32:	; location of __bin-mul-rr
   164 00000100 ????????????????        	resq 1
   165                                  free_var_33:	; location of __bin-div-rr
   166 00000108 ????????????????        	resq 1
   167                                  free_var_34:	; location of __bin-add-qq
   168 00000110 ????????????????        	resq 1
   169                                  free_var_35:	; location of __bin-sub-qq
   170 00000118 ????????????????        	resq 1
   171                                  free_var_36:	; location of __bin-mul-qq
   172 00000120 ????????????????        	resq 1
   173                                  free_var_37:	; location of __bin-div-qq
   174 00000128 ????????????????        	resq 1
   175                                  free_var_38:	; location of error
   176 00000130 ????????????????        	resq 1
   177                                  free_var_39:	; location of __bin-less-than-rr
   178 00000138 ????????????????        	resq 1
   179                                  free_var_40:	; location of __bin-less-than-qq
   180 00000140 ????????????????        	resq 1
   181                                  free_var_41:	; location of __bin-equal-rr
   182 00000148 ????????????????        	resq 1
   183                                  free_var_42:	; location of __bin-equal-qq
   184 00000150 ????????????????        	resq 1
   185                                  free_var_43:	; location of quotient
   186 00000158 ????????????????        	resq 1
   187                                  free_var_44:	; location of remainder
   188 00000160 ????????????????        	resq 1
   189                                  free_var_45:	; location of set-car!
   190 00000168 ????????????????        	resq 1
   191                                  free_var_46:	; location of set-cdr!
   192 00000170 ????????????????        	resq 1
   193                                  free_var_47:	; location of string-ref
   194 00000178 ????????????????        	resq 1
   195                                  free_var_48:	; location of vector-ref
   196 00000180 ????????????????        	resq 1
   197                                  free_var_49:	; location of vector-set!
   198 00000188 ????????????????        	resq 1
   199                                  free_var_50:	; location of string-set!
   200 00000190 ????????????????        	resq 1
   201                                  free_var_51:	; location of make-vector
   202 00000198 ????????????????        	resq 1
   203                                  free_var_52:	; location of make-string
   204 000001A0 ????????????????        	resq 1
   205                                  free_var_53:	; location of numerator
   206 000001A8 ????????????????        	resq 1
   207                                  free_var_54:	; location of denominator
   208 000001B0 ????????????????        	resq 1
   209                                  free_var_55:	; location of eq?
   210 000001B8 ????????????????        	resq 1
   211                                  
   212                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   213                                  global main
   214                                  section .text
   215                                  main:
   216 00000000 C8000000                        enter 0, 0
   217                                          
   218                                  	; building closure for null?
   219 00000004 48BF-                   	mov rdi, free_var_0
   219 00000006 [0000000000000000] 
   220 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   220 00000010 [AB0B000000000000] 
   221 00000018 E8660B0000              	call bind_primitive
   222                                  
   223                                  	; building closure for pair?
   224 0000001D 48BF-                   	mov rdi, free_var_1
   224 0000001F [0800000000000000] 
   225 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   225 00000029 [E10B000000000000] 
   226 00000031 E84D0B0000              	call bind_primitive
   227                                  
   228                                  	; building closure for void?
   229 00000036 48BF-                   	mov rdi, free_var_2
   229 00000038 [1000000000000000] 
   230 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   230 00000042 [170C000000000000] 
   231 0000004A E8340B0000              	call bind_primitive
   232                                  
   233                                  	; building closure for char?
   234 0000004F 48BF-                   	mov rdi, free_var_3
   234 00000051 [1800000000000000] 
   235 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   235 0000005B [4D0C000000000000] 
   236 00000063 E81B0B0000              	call bind_primitive
   237                                  
   238                                  	; building closure for string?
   239 00000068 48BF-                   	mov rdi, free_var_4
   239 0000006A [2000000000000000] 
   240 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   240 00000074 [830C000000000000] 
   241 0000007C E8020B0000              	call bind_primitive
   242                                  
   243                                  	; building closure for symbol?
   244 00000081 48BF-                   	mov rdi, free_var_5
   244 00000083 [2800000000000000] 
   245 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   245 0000008D [B90C000000000000] 
   246 00000095 E8E90A0000              	call bind_primitive
   247                                  
   248                                  	; building closure for vector?
   249 0000009A 48BF-                   	mov rdi, free_var_6
   249 0000009C [3000000000000000] 
   250 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   250 000000A6 [EF0C000000000000] 
   251 000000AE E8D00A0000              	call bind_primitive
   252                                  
   253                                  	; building closure for procedure?
   254 000000B3 48BF-                   	mov rdi, free_var_7
   254 000000B5 [3800000000000000] 
   255 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   255 000000BF [250D000000000000] 
   256 000000C7 E8B70A0000              	call bind_primitive
   257                                  
   258                                  	; building closure for real?
   259 000000CC 48BF-                   	mov rdi, free_var_8
   259 000000CE [4000000000000000] 
   260 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   260 000000D8 [5B0D000000000000] 
   261 000000E0 E89E0A0000              	call bind_primitive
   262                                  
   263                                  	; building closure for rational?
   264 000000E5 48BF-                   	mov rdi, free_var_9
   264 000000E7 [4800000000000000] 
   265 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   265 000000F1 [910D000000000000] 
   266 000000F9 E8850A0000              	call bind_primitive
   267                                  
   268                                  	; building closure for boolean?
   269 000000FE 48BF-                   	mov rdi, free_var_10
   269 00000100 [5000000000000000] 
   270 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   270 0000010A [C70D000000000000] 
   271 00000112 E86C0A0000              	call bind_primitive
   272                                  
   273                                  	; building closure for number?
   274 00000117 48BF-                   	mov rdi, free_var_11
   274 00000119 [5800000000000000] 
   275 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   275 00000123 [FF0D000000000000] 
   276 0000012B E8530A0000              	call bind_primitive
   277                                  
   278                                  	; building closure for collection?
   279 00000130 48BF-                   	mov rdi, free_var_12
   279 00000132 [6000000000000000] 
   280 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   280 0000013C [370E000000000000] 
   281 00000144 E83A0A0000              	call bind_primitive
   282                                  
   283                                  	; building closure for cons
   284 00000149 48BF-                   	mov rdi, free_var_13
   284 0000014B [6800000000000000] 
   285 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   285 00000155 [6F0E000000000000] 
   286 0000015D E8210A0000              	call bind_primitive
   287                                  
   288                                  	; building closure for display-sexpr
   289 00000162 48BF-                   	mov rdi, free_var_14
   289 00000164 [7000000000000000] 
   290 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   290 0000016E [A30E000000000000] 
   291 00000176 E8080A0000              	call bind_primitive
   292                                  
   293                                  	; building closure for write-char
   294 0000017B 48BF-                   	mov rdi, free_var_15
   294 0000017D [7800000000000000] 
   295 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   295 00000187 [CD0E000000000000] 
   296 0000018F E8EF090000              	call bind_primitive
   297                                  
   298                                  	; building closure for car
   299 00000194 48BF-                   	mov rdi, free_var_16
   299 00000196 [8000000000000000] 
   300 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   300 000001A0 [1B0F000000000000] 
   301 000001A8 E8D6090000              	call bind_primitive
   302                                  
   303                                  	; building closure for cdr
   304 000001AD 48BF-                   	mov rdi, free_var_17
   304 000001AF [8800000000000000] 
   305 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   305 000001B9 [430F000000000000] 
   306 000001C1 E8BD090000              	call bind_primitive
   307                                  
   308                                  	; building closure for string-length
   309 000001C6 48BF-                   	mov rdi, free_var_18
   309 000001C8 [9000000000000000] 
   310 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   310 000001D2 [6B0F000000000000] 
   311 000001DA E8A4090000              	call bind_primitive
   312                                  
   313                                  	; building closure for vector-length
   314 000001DF 48BF-                   	mov rdi, free_var_19
   314 000001E1 [9800000000000000] 
   315 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   315 000001EB [980F000000000000] 
   316 000001F3 E88B090000              	call bind_primitive
   317                                  
   318                                  	; building closure for real->integer
   319 000001F8 48BF-                   	mov rdi, free_var_20
   319 000001FA [A000000000000000] 
   320 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   320 00000204 [C50F000000000000] 
   321 0000020C E872090000              	call bind_primitive
   322                                  
   323                                  	; building closure for exit
   324 00000211 48BF-                   	mov rdi, free_var_21
   324 00000213 [A800000000000000] 
   325 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   325 0000021D [F80F000000000000] 
   326 00000225 E859090000              	call bind_primitive
   327                                  
   328                                  	; building closure for integer->real
   329 0000022A 48BF-                   	mov rdi, free_var_22
   329 0000022C [B000000000000000] 
   330 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   330 00000236 [1510000000000000] 
   331 0000023E E840090000              	call bind_primitive
   332                                  
   333                                  	; building closure for rational->real
   334 00000243 48BF-                   	mov rdi, free_var_23
   334 00000245 [B800000000000000] 
   335 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   335 0000024F [5210000000000000] 
   336 00000257 E827090000              	call bind_primitive
   337                                  
   338                                  	; building closure for char->integer
   339 0000025C 48BF-                   	mov rdi, free_var_24
   339 0000025E [C000000000000000] 
   340 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   340 00000268 [9110000000000000] 
   341 00000270 E80E090000              	call bind_primitive
   342                                  
   343                                  	; building closure for integer->char
   344 00000275 48BF-                   	mov rdi, free_var_25
   344 00000277 [C800000000000000] 
   345 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   345 00000281 [C610000000000000] 
   346 00000289 E8F5080000              	call bind_primitive
   347                                  
   348                                  	; building closure for trng
   349 0000028E 48BF-                   	mov rdi, free_var_26
   349 00000290 [D000000000000000] 
   350 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   350 0000029A [2011000000000000] 
   351 000002A2 E8DC080000              	call bind_primitive
   352                                  
   353                                  	; building closure for zero?
   354 000002A7 48BF-                   	mov rdi, free_var_27
   354 000002A9 [D800000000000000] 
   355 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   355 000002B3 [4311000000000000] 
   356 000002BB E8C3080000              	call bind_primitive
   357                                  
   358                                  	; building closure for integer?
   359 000002C0 48BF-                   	mov rdi, free_var_28
   359 000002C2 [E000000000000000] 
   360 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   360 000002CC [9E11000000000000] 
   361 000002D4 E8AA080000              	call bind_primitive
   362                                  
   363                                  	; building closure for __bin-apply
   364 000002D9 48BF-                   	mov rdi, free_var_29
   364 000002DB [E800000000000000] 
   365 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   365 000002E5 [AB0B000000000000] 
   366 000002ED E891080000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-add-rr
   369 000002F2 48BF-                   	mov rdi, free_var_30
   369 000002F4 [F000000000000000] 
   370 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   370 000002FE [DB11000000000000] 
   371 00000306 E878080000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-sub-rr
   374 0000030B 48BF-                   	mov rdi, free_var_31
   374 0000030D [F800000000000000] 
   375 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   375 00000317 [1F12000000000000] 
   376 0000031F E85F080000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-mul-rr
   379 00000324 48BF-                   	mov rdi, free_var_32
   379 00000326 [0001000000000000] 
   380 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   380 00000330 [6312000000000000] 
   381 00000338 E846080000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-div-rr
   384 0000033D 48BF-                   	mov rdi, free_var_33
   384 0000033F [0801000000000000] 
   385 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   385 00000349 [A712000000000000] 
   386 00000351 E82D080000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-add-qq
   389 00000356 48BF-                   	mov rdi, free_var_34
   389 00000358 [1001000000000000] 
   390 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   390 00000362 [F912000000000000] 
   391 0000036A E814080000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-sub-qq
   394 0000036F 48BF-                   	mov rdi, free_var_35
   394 00000371 [1801000000000000] 
   395 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   395 0000037B [6113000000000000] 
   396 00000383 E8FB070000              	call bind_primitive
   397                                  
   398                                  	; building closure for __bin-mul-qq
   399 00000388 48BF-                   	mov rdi, free_var_36
   399 0000038A [2001000000000000] 
   400 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   400 00000394 [C913000000000000] 
   401 0000039C E8E2070000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-div-qq
   404 000003A1 48BF-                   	mov rdi, free_var_37
   404 000003A3 [2801000000000000] 
   405 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   405 000003AD [2114000000000000] 
   406 000003B5 E8C9070000              	call bind_primitive
   407                                  
   408                                  	; building closure for error
   409 000003BA 48BF-                   	mov rdi, free_var_38
   409 000003BC [3001000000000000] 
   410 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   410 000003C6 [EF14000000000000] 
   411 000003CE E8B0070000              	call bind_primitive
   412                                  
   413                                  	; building closure for __bin-less-than-rr
   414 000003D3 48BF-                   	mov rdi, free_var_39
   414 000003D5 [3801000000000000] 
   415 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   415 000003DF [8B15000000000000] 
   416 000003E7 E897070000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-less-than-qq
   419 000003EC 48BF-                   	mov rdi, free_var_40
   419 000003EE [4001000000000000] 
   420 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   420 000003F8 [E215000000000000] 
   421 00000400 E87E070000              	call bind_primitive
   422                                  
   423                                  	; building closure for __bin-equal-rr
   424 00000405 48BF-                   	mov rdi, free_var_41
   424 00000407 [4801000000000000] 
   425 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   425 00000411 [4516000000000000] 
   426 00000419 E865070000              	call bind_primitive
   427                                  
   428                                  	; building closure for __bin-equal-qq
   429 0000041E 48BF-                   	mov rdi, free_var_42
   429 00000420 [5001000000000000] 
   430 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   430 0000042A [9C16000000000000] 
   431 00000432 E84C070000              	call bind_primitive
   432                                  
   433                                  	; building closure for quotient
   434 00000437 48BF-                   	mov rdi, free_var_43
   434 00000439 [5801000000000000] 
   435 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   435 00000443 [FF16000000000000] 
   436 0000044B E833070000              	call bind_primitive
   437                                  
   438                                  	; building closure for remainder
   439 00000450 48BF-                   	mov rdi, free_var_44
   439 00000452 [6001000000000000] 
   440 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   440 0000045C [6517000000000000] 
   441 00000464 E81A070000              	call bind_primitive
   442                                  
   443                                  	; building closure for set-car!
   444 00000469 48BF-                   	mov rdi, free_var_45
   444 0000046B [6801000000000000] 
   445 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   445 00000475 [CB17000000000000] 
   446 0000047D E801070000              	call bind_primitive
   447                                  
   448                                  	; building closure for set-cdr!
   449 00000482 48BF-                   	mov rdi, free_var_46
   449 00000484 [7001000000000000] 
   450 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   450 0000048E [0118000000000000] 
   451 00000496 E8E8060000              	call bind_primitive
   452                                  
   453                                  	; building closure for string-ref
   454 0000049B 48BF-                   	mov rdi, free_var_47
   454 0000049D [7801000000000000] 
   455 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   455 000004A7 [3718000000000000] 
   456 000004AF E8CF060000              	call bind_primitive
   457                                  
   458                                  	; building closure for vector-ref
   459 000004B4 48BF-                   	mov rdi, free_var_48
   459 000004B6 [8001000000000000] 
   460 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   460 000004C0 [A218000000000000] 
   461 000004C8 E8B6060000              	call bind_primitive
   462                                  
   463                                  	; building closure for vector-set!
   464 000004CD 48BF-                   	mov rdi, free_var_49
   464 000004CF [8801000000000000] 
   465 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   465 000004D9 [FE18000000000000] 
   466 000004E1 E89D060000              	call bind_primitive
   467                                  
   468                                  	; building closure for string-set!
   469 000004E6 48BF-                   	mov rdi, free_var_50
   469 000004E8 [9001000000000000] 
   470 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   470 000004F2 [6819000000000000] 
   471 000004FA E884060000              	call bind_primitive
   472                                  
   473                                  	; building closure for make-vector
   474 000004FF 48BF-                   	mov rdi, free_var_51
   474 00000501 [9801000000000000] 
   475 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   475 0000050B [DD19000000000000] 
   476 00000513 E86B060000              	call bind_primitive
   477                                  
   478                                  	; building closure for make-string
   479 00000518 48BF-                   	mov rdi, free_var_52
   479 0000051A [A001000000000000] 
   480 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   480 00000524 [471A000000000000] 
   481 0000052C E852060000              	call bind_primitive
   482                                  
   483                                  	; building closure for numerator
   484 00000531 48BF-                   	mov rdi, free_var_53
   484 00000533 [A801000000000000] 
   485 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   485 0000053D [B91A000000000000] 
   486 00000545 E839060000              	call bind_primitive
   487                                  
   488                                  	; building closure for denominator
   489 0000054A 48BF-                   	mov rdi, free_var_54
   489 0000054C [B001000000000000] 
   490 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   490 00000556 [E61A000000000000] 
   491 0000055E E820060000              	call bind_primitive
   492                                  
   493                                  	; building closure for eq?
   494 00000563 48BF-                   	mov rdi, free_var_55
   494 00000565 [B801000000000000] 
   495 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   495 0000056F [131B000000000000] 
   496 00000577 E807060000              	call bind_primitive
   497                                  
   498 0000057C 48B8-                   	mov rax,61+L_constants
   498 0000057E [3D00000000000000] 
   499                                  
   500 00000586 4889C7                  	mov rdi, rax
   501 00000589 E8C4000000              	call print_sexpr_if_not_void
   502                                  
   503 0000058E 48BF-                           mov rdi, fmt_memory_usage
   503 00000590 [AD00000000000000] 
   504 00000598 488B3425[34010000]              mov rsi, qword [top_of_memory]
   505 000005A0 4881EE[C0010000]                sub rsi, memory
   506 000005A7 B800000000                      mov rax, 0
   507 000005AC E8(00000000)                    call printf
   508 000005B1 C9                      	leave
   509 000005B2 C3                      	ret
   510                                  
   511                                  L_error_non_closure:
   512 000005B3 488B3C25[00000000]              mov rdi, qword [stderr]
   513 000005BB 48BE-                           mov rsi, fmt_non_closure
   513 000005BD [E400000000000000] 
   514 000005C5 B800000000                      mov rax, 0
   515 000005CA E8(00000000)                    call fprintf
   516 000005CF 48C7C0FEFFFFFF                  mov rax, -2
   517 000005D6 E8(00000000)                    call exit
   518                                  
   519                                  L_error_improper_list:
   520 000005DB 488B3C25[00000000]      	mov rdi, qword [stderr]
   521 000005E3 48BE-                   	mov rsi, fmt_error_improper_list
   521 000005E5 [0C01000000000000] 
   522 000005ED B800000000              	mov rax, 0
   523 000005F2 E8(00000000)            	call fprintf
   524 000005F7 48C7C0F9FFFFFF          	mov rax, -7
   525 000005FE E8(00000000)            	call exit
   526                                  
   527                                  L_error_incorrect_arity_simple:
   528 00000603 488B3C25[00000000]              mov rdi, qword [stderr]
   529 0000060B 48BE-                           mov rsi, fmt_incorrect_arity_simple
   529 0000060D [4E00000000000000] 
   530 00000615 EB12                            jmp L_error_incorrect_arity_common
   531                                  L_error_incorrect_arity_opt:
   532 00000617 488B3C25[00000000]              mov rdi, qword [stderr]
   533 0000061F 48BE-                           mov rsi, fmt_incorrect_arity_opt
   533 00000621 [7900000000000000] 
   534                                  L_error_incorrect_arity_common:
   535 00000629 5A                              pop rdx
   536 0000062A 59                              pop rcx
   537 0000062B B800000000                      mov rax, 0
   538 00000630 E8(00000000)                    call fprintf
   539 00000635 48C7C0FAFFFFFF                  mov rax, -6
   540 0000063C E8(00000000)                    call exit
   541                                  
   542                                  section .data
   543                                  fmt_incorrect_arity_simple:
   544 0000004E 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   544 00000057 74656420256C642061-
   544 00000060 7267756D656E74732C-
   544 00000069 206275742067697665-
   544 00000072 6E20256C640A00     
   545                                  fmt_incorrect_arity_opt:
   546 00000079 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   546 00000082 746564206174206C65-
   546 0000008B 61737420256C642061-
   546 00000094 7267756D656E74732C-
   546 0000009D 206275742067697665-
   546 000000A6 6E20256C640A00     
   547                                  fmt_memory_usage:
   548 000000AD 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   548 000000B6 6420256C6420627974-
   548 000000BF 6573206F662064796E-
   548 000000C8 616D6963616C6C792D-
   548 000000D1 616C6C6F6361746564-
   548 000000DA 206D656D6F72790A0A-
   548 000000E3 00                 
   549                                  fmt_non_closure:
   550 000000E4 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   550 000000ED 7074696E6720746F20-
   550 000000F6 6170706C792061206E-
   550 000000FF 6F6E2D636C6F737572-
   550 00000108 65210A00           
   551                                  fmt_error_improper_list:
   552 0000010C 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   552 00000115 7267756D656E742069-
   552 0000011E 73206E6F7420612070-
   552 00000127 726F706572206C6973-
   552 00000130 74210A00           
   553                                  
   554                                  section .bss
   555                                  memory:
   556 000001C0 <res 40000000h>         	resb gbytes(1)
   557                                  
   558                                  section .data
   559                                  top_of_memory:
   560 00000134 [C001000000000000]              dq memory
   561                                  
   562                                  section .text
   563                                  malloc:
   564 00000641 488B0425[34010000]              mov rax, qword [top_of_memory]
   565 00000649 48013C25[34010000]              add qword [top_of_memory], rdi
   566 00000651 C3                              ret
   567                                          
   568                                  print_sexpr_if_not_void:
   569 00000652 4881FF[00000000]        	cmp rdi, sob_void
   570 00000659 7501                    	jne print_sexpr
   571 0000065B C3                      	ret
   572                                  
   573                                  section .data
   574                                  fmt_void:
   575 0000013C 233C766F69643E00        	db `#<void>\0`
   576                                  fmt_nil:
   577 00000144 282900                  	db `()\0`
   578                                  fmt_boolean_false:
   579 00000147 236600                  	db `#f\0`
   580                                  fmt_boolean_true:
   581 0000014A 237400                  	db `#t\0`
   582                                  fmt_char_backslash:
   583 0000014D 235C5C00                	db `#\\\\\0`
   584                                  fmt_char_dquote:
   585 00000151 235C2200                	db `#\\"\0`
   586                                  fmt_char_simple:
   587 00000155 235C256300              	db `#\\%c\0`
   588                                  fmt_char_null:
   589 0000015A 235C6E756C00            	db `#\\nul\0`
   590                                  fmt_char_bell:
   591 00000160 235C62656C6C00          	db `#\\bell\0`
   592                                  fmt_char_backspace:
   593 00000167 235C6261636B737061-     	db `#\\backspace\0`
   593 00000170 636500             
   594                                  fmt_char_tab:
   595 00000173 235C74616200            	db `#\\tab\0`
   596                                  fmt_char_newline:
   597 00000179 235C6E65776C696E65-     	db `#\\newline\0`
   597 00000182 00                 
   598                                  fmt_char_formfeed:
   599 00000183 235C7061676500          	db `#\\page\0`
   600                                  fmt_char_return:
   601 0000018A 235C72657475726E00      	db `#\\return\0`
   602                                  fmt_char_escape:
   603 00000193 235C65736300            	db `#\\esc\0`
   604                                  fmt_char_space:
   605 00000199 235C737061636500        	db `#\\space\0`
   606                                  fmt_char_hex:
   607 000001A1 235C782530325800        	db `#\\x%02X\0`
   608                                  fmt_closure:
   609 000001A9 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   609 000001B2 206174203078253038-
   609 000001BB 5820656E763D307825-
   609 000001C4 30385820636F64653D-
   609 000001CD 3078253038583E00   
   610                                  fmt_lparen:
   611 000001D5 2800                    	db `(\0`
   612                                  fmt_dotted_pair:
   613 000001D7 202E2000                	db ` . \0`
   614                                  fmt_rparen:
   615 000001DB 2900                    	db `)\0`
   616                                  fmt_space:
   617 000001DD 2000                    	db ` \0`
   618                                  fmt_empty_vector:
   619 000001DF 23282900                	db `#()\0`
   620                                  fmt_vector:
   621 000001E3 232800                  	db `#(\0`
   622                                  fmt_real:
   623 000001E6 256600                  	db `%f\0`
   624                                  fmt_fraction:
   625 000001E9 256C642F256C6400        	db `%ld/%ld\0`
   626                                  fmt_zero:
   627 000001F1 3000                    	db `0\0`
   628                                  fmt_int:
   629 000001F3 256C6400                	db `%ld\0`
   630                                  fmt_unknown_sexpr_error:
   631 000001F7 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   631 00000200 6F723A20556E6B6E6F-
   631 00000209 776E2074797065206F-
   631 00000212 662073657870722028-
   631 0000021B 3078253032582920   
   632 00000223 617420616464726573-     	db `at address 0x%08X\n\n\0`
   632 0000022C 73203078253038580A-
   632 00000235 0A00               
   633                                  fmt_dquote:
   634 00000237 2200                    	db `\"\0`
   635                                  fmt_string_char:
   636 00000239 256300                          db `%c\0`
   637                                  fmt_string_char_7:
   638 0000023C 5C6100                          db `\\a\0`
   639                                  fmt_string_char_8:
   640 0000023F 5C6200                          db `\\b\0`
   641                                  fmt_string_char_9:
   642 00000242 5C7400                          db `\\t\0`
   643                                  fmt_string_char_10:
   644 00000245 5C6E00                          db `\\n\0`
   645                                  fmt_string_char_11:
   646 00000248 5C7600                          db `\\v\0`
   647                                  fmt_string_char_12:
   648 0000024B 5C6600                          db `\\f\0`
   649                                  fmt_string_char_13:
   650 0000024E 5C7200                          db `\\r\0`
   651                                  fmt_string_char_34:
   652 00000251 5C2200                          db `\\"\0`
   653                                  fmt_string_char_92:
   654 00000254 5C5C00                          db `\\\\\0`
   655                                  fmt_string_char_hex:
   656 00000257 5C7825583B00                    db `\\x%X;\0`
   657                                  
   658                                  section .text
   659                                  
   660                                  print_sexpr:
   661                                  	ENTER
    33 0000065C C8000000            <1>  enter 0, 0
    34 00000660 4883E4F0            <1>  and rsp, ~15
   662 00000664 8A07                    	mov al, byte [rdi]
   663 00000666 3C00                    	cmp al, T_void
   664 00000668 744D                    	je .Lvoid
   665 0000066A 3C01                    	cmp al, T_nil
   666 0000066C 7458                    	je .Lnil
   667 0000066E 3C09                    	cmp al, T_boolean_false
   668 00000670 7463                    	je .Lboolean_false
   669 00000672 3C0A                    	cmp al, T_boolean_true
   670 00000674 746E                    	je .Lboolean_true
   671 00000676 3C02                    	cmp al, T_char
   672 00000678 7479                    	je .Lchar
   673 0000067A 3C04                    	cmp al, T_symbol
   674 0000067C 0F84BB010000            	je .Lsymbol
   675 00000682 3C21                    	cmp al, T_pair
   676 00000684 0F84D6010000            	je .Lpair
   677 0000068A 3C22                    	cmp al, T_vector
   678 0000068C 0F8478020000            	je .Lvector
   679 00000692 3C05                    	cmp al, T_closure
   680 00000694 0F8489010000            	je .Lclosure
   681 0000069A 3C12                    	cmp al, T_real
   682 0000069C 0F84F3020000            	je .Lreal
   683 000006A2 3C11                    	cmp al, T_rational
   684 000006A4 0F8419030000            	je .Lrational
   685 000006AA 3C03                    	cmp al, T_string
   686 000006AC 0F8452030000            	je .Lstring
   687                                  
   688 000006B2 E98A040000              	jmp .Lunknown_sexpr_type
   689                                  
   690                                  .Lvoid:
   691 000006B7 48BF-                   	mov rdi, fmt_void
   691 000006B9 [3C01000000000000] 
   692 000006C1 E9AF040000              	jmp .Lemit
   693                                  
   694                                  .Lnil:
   695 000006C6 48BF-                   	mov rdi, fmt_nil
   695 000006C8 [4401000000000000] 
   696 000006D0 E9A0040000              	jmp .Lemit
   697                                  
   698                                  .Lboolean_false:
   699 000006D5 48BF-                   	mov rdi, fmt_boolean_false
   699 000006D7 [4701000000000000] 
   700 000006DF E991040000              	jmp .Lemit
   701                                  
   702                                  .Lboolean_true:
   703 000006E4 48BF-                   	mov rdi, fmt_boolean_true
   703 000006E6 [4A01000000000000] 
   704 000006EE E982040000              	jmp .Lemit
   705                                  
   706                                  .Lchar:
   707 000006F3 8A4701                  	mov al, byte [rdi + 1]
   708 000006F6 3C20                    	cmp al, ' '
   709 000006F8 7E28                    	jle .Lchar_whitespace
   710 000006FA 3C5C                    	cmp al, 92 		; backslash
   711 000006FC 0F847C000000            	je .Lchar_backslash
   712 00000702 3C22                    	cmp al, '"'
   713 00000704 0F8483000000            	je .Lchar_dquote
   714 0000070A 4825FF000000            	and rax, 255
   715 00000710 48BF-                   	mov rdi, fmt_char_simple
   715 00000712 [5501000000000000] 
   716 0000071A 4889C6                  	mov rsi, rax
   717 0000071D E953040000              	jmp .Lemit
   718                                  
   719                                  .Lchar_whitespace:
   720 00000722 3C00                    	cmp al, 0
   721 00000724 7476                    	je .Lchar_null
   722 00000726 3C07                    	cmp al, 7
   723 00000728 0F847D000000            	je .Lchar_bell
   724 0000072E 3C08                    	cmp al, 8
   725 00000730 0F8484000000            	je .Lchar_backspace
   726 00000736 3C09                    	cmp al, 9
   727 00000738 0F848B000000            	je .Lchar_tab
   728 0000073E 3C0A                    	cmp al, 10
   729 00000740 0F8492000000            	je .Lchar_newline
   730 00000746 3C0C                    	cmp al, 12
   731 00000748 0F8499000000            	je .Lchar_formfeed
   732 0000074E 3C0D                    	cmp al, 13
   733 00000750 0F84A0000000            	je .Lchar_return
   734 00000756 3C1B                    	cmp al, 27
   735 00000758 0F84A7000000            	je .Lchar_escape
   736 0000075E 4825FF000000            	and rax, 255
   737 00000764 3C20                    	cmp al, ' '
   738 00000766 0F84A8000000            	je .Lchar_space
   739 0000076C 48BF-                   	mov rdi, fmt_char_hex
   739 0000076E [A101000000000000] 
   740 00000776 4889C6                  	mov rsi, rax
   741 00000779 E9F7030000              	jmp .Lemit	
   742                                  
   743                                  .Lchar_backslash:
   744 0000077E 48BF-                   	mov rdi, fmt_char_backslash
   744 00000780 [4D01000000000000] 
   745 00000788 E9E8030000              	jmp .Lemit
   746                                  
   747                                  .Lchar_dquote:
   748 0000078D 48BF-                   	mov rdi, fmt_char_dquote
   748 0000078F [5101000000000000] 
   749 00000797 E9D9030000              	jmp .Lemit
   750                                  
   751                                  .Lchar_null:
   752 0000079C 48BF-                   	mov rdi, fmt_char_null
   752 0000079E [5A01000000000000] 
   753 000007A6 E9CA030000              	jmp .Lemit
   754                                  
   755                                  .Lchar_bell:
   756 000007AB 48BF-                   	mov rdi, fmt_char_bell
   756 000007AD [6001000000000000] 
   757 000007B5 E9BB030000              	jmp .Lemit
   758                                  
   759                                  .Lchar_backspace:
   760 000007BA 48BF-                   	mov rdi, fmt_char_backspace
   760 000007BC [6701000000000000] 
   761 000007C4 E9AC030000              	jmp .Lemit
   762                                  
   763                                  .Lchar_tab:
   764 000007C9 48BF-                   	mov rdi, fmt_char_tab
   764 000007CB [7301000000000000] 
   765 000007D3 E99D030000              	jmp .Lemit
   766                                  
   767                                  .Lchar_newline:
   768 000007D8 48BF-                   	mov rdi, fmt_char_newline
   768 000007DA [7901000000000000] 
   769 000007E2 E98E030000              	jmp .Lemit
   770                                  
   771                                  .Lchar_formfeed:
   772 000007E7 48BF-                   	mov rdi, fmt_char_formfeed
   772 000007E9 [8301000000000000] 
   773 000007F1 E97F030000              	jmp .Lemit
   774                                  
   775                                  .Lchar_return:
   776 000007F6 48BF-                   	mov rdi, fmt_char_return
   776 000007F8 [8A01000000000000] 
   777 00000800 E970030000              	jmp .Lemit
   778                                  
   779                                  .Lchar_escape:
   780 00000805 48BF-                   	mov rdi, fmt_char_escape
   780 00000807 [9301000000000000] 
   781 0000080F E961030000              	jmp .Lemit
   782                                  
   783                                  .Lchar_space:
   784 00000814 48BF-                   	mov rdi, fmt_char_space
   784 00000816 [9901000000000000] 
   785 0000081E E952030000              	jmp .Lemit
   786                                  
   787                                  .Lclosure:
   788 00000823 4889FE                  	mov rsi, qword rdi
   789 00000826 48BF-                   	mov rdi, fmt_closure
   789 00000828 [A901000000000000] 
   790 00000830 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   791 00000834 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   792 00000838 E938030000              	jmp .Lemit
   793                                  
   794                                  .Lsymbol:
   795 0000083D 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   796 00000841 BE01000000              	mov rsi, 1		 ; size = 1 byte
   797 00000846 488B5701                	mov rdx, qword [rdi + 1] ; length
   798 0000084A 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   799 0000084E 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   800 00000856 E8(00000000)            	call fwrite
   801 0000085B E921030000              	jmp .Lend
   802                                  	
   803                                  .Lpair:
   804 00000860 57                      	push rdi
   805 00000861 48BF-                   	mov rdi, fmt_lparen
   805 00000863 [D501000000000000] 
   806 0000086B B800000000              	mov rax, 0
   807                                          ENTER
    33 00000870 C8000000            <1>  enter 0, 0
    34 00000874 4883E4F0            <1>  and rsp, ~15
   808 00000878 E8(00000000)            	call printf
   809                                          LEAVE
    38 0000087D C9                  <1>  leave
   810 0000087E 488B3C24                	mov rdi, qword [rsp] 	; pair
   811 00000882 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   812 00000886 E8D1FDFFFF              	call print_sexpr
   813 0000088B 5F                      	pop rdi 		; pair
   814 0000088C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   815                                  .Lcdr:
   816 00000890 8A07                    	mov al, byte [rdi]
   817 00000892 3C01                    	cmp al, T_nil
   818 00000894 7435                    	je .Lcdr_nil
   819 00000896 3C21                    	cmp al, T_pair
   820 00000898 7447                    	je .Lcdr_pair
   821 0000089A 57                      	push rdi
   822 0000089B 48BF-                   	mov rdi, fmt_dotted_pair
   822 0000089D [D701000000000000] 
   823 000008A5 B800000000              	mov rax, 0
   824 000008AA E8(00000000)            	call printf
   825 000008AF 5F                      	pop rdi
   826 000008B0 E8A7FDFFFF              	call print_sexpr
   827 000008B5 48BF-                   	mov rdi, fmt_rparen
   827 000008B7 [DB01000000000000] 
   828 000008BF B800000000              	mov rax, 0
   829 000008C4 E8(00000000)            	call printf
   830                                  	LEAVE
    38 000008C9 C9                  <1>  leave
   831 000008CA C3                      	ret
   832                                  
   833                                  .Lcdr_nil:
   834 000008CB 48BF-                   	mov rdi, fmt_rparen
   834 000008CD [DB01000000000000] 
   835 000008D5 B800000000              	mov rax, 0
   836 000008DA E8(00000000)            	call printf
   837                                  	LEAVE
    38 000008DF C9                  <1>  leave
   838 000008E0 C3                      	ret
   839                                  
   840                                  .Lcdr_pair:
   841 000008E1 57                      	push rdi
   842 000008E2 48BF-                   	mov rdi, fmt_space
   842 000008E4 [DD01000000000000] 
   843 000008EC B800000000              	mov rax, 0
   844 000008F1 E8(00000000)            	call printf
   845 000008F6 488B3C24                	mov rdi, qword [rsp]
   846 000008FA 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   847 000008FE E859FDFFFF              	call print_sexpr
   848 00000903 5F                      	pop rdi
   849 00000904 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   850 00000908 EB86                    	jmp .Lcdr
   851                                  
   852                                  .Lvector:
   853 0000090A 488B4701                	mov rax, qword [rdi + 1] ; length
   854 0000090E 4883F800                	cmp rax, 0
   855 00000912 7472                    	je .Lvector_empty
   856 00000914 57                      	push rdi
   857 00000915 48BF-                   	mov rdi, fmt_vector
   857 00000917 [E301000000000000] 
   858 0000091F B800000000              	mov rax, 0
   859 00000924 E8(00000000)            	call printf
   860 00000929 488B3C24                	mov rdi, qword [rsp]
   861 0000092D FF7701                  	push qword [rdi + 1]
   862 00000930 6A01                    	push 1
   863 00000932 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   864 00000936 E821FDFFFF              	call print_sexpr
   865                                  .Lvector_loop:
   866                                  	; [rsp] index
   867                                  	; [rsp + 8*1] limit
   868                                  	; [rsp + 8*2] vector
   869 0000093B 488B0424                	mov rax, qword [rsp]
   870 0000093F 483B442408              	cmp rax, qword [rsp + 8*1]
   871 00000944 742D                    	je .Lvector_end
   872 00000946 48BF-                   	mov rdi, fmt_space
   872 00000948 [DD01000000000000] 
   873 00000950 B800000000              	mov rax, 0
   874 00000955 E8(00000000)            	call printf
   875 0000095A 488B0424                	mov rax, qword [rsp]
   876 0000095E 488B5C2410              	mov rbx, qword [rsp + 8*2]
   877 00000963 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   878 00000968 E8EFFCFFFF              	call print_sexpr
   879 0000096D 48FF0424                	inc qword [rsp]
   880 00000971 EBC8                    	jmp .Lvector_loop
   881                                  
   882                                  .Lvector_end:
   883 00000973 4883C418                	add rsp, 8*3
   884 00000977 48BF-                   	mov rdi, fmt_rparen
   884 00000979 [DB01000000000000] 
   885 00000981 E9EF010000              	jmp .Lemit	
   886                                  
   887                                  .Lvector_empty:
   888 00000986 48BF-                   	mov rdi, fmt_empty_vector
   888 00000988 [DF01000000000000] 
   889 00000990 E9E0010000              	jmp .Lemit
   890                                  
   891                                  .Lreal:
   892 00000995 FF7701                  	push qword [rdi + 1]
   893 00000998 F20F100424              	movsd xmm0, qword [rsp]
   894 0000099D 4883C408                	add rsp, 8*1
   895 000009A1 48BF-                   	mov rdi, fmt_real
   895 000009A3 [E601000000000000] 
   896 000009AB B801000000              	mov rax, 1
   897                                  	ENTER
    33 000009B0 C8000000            <1>  enter 0, 0
    34 000009B4 4883E4F0            <1>  and rsp, ~15
   898 000009B8 E8(00000000)            	call printf
   899                                  	LEAVE
    38 000009BD C9                  <1>  leave
   900 000009BE E9BE010000              	jmp .Lend
   901                                  
   902                                  .Lrational:
   903 000009C3 488B7701                	mov rsi, qword [rdi + 1]
   904 000009C7 488B5709                	mov rdx, qword [rdi + 1 + 8]
   905 000009CB 4883FE00                	cmp rsi, 0
   906 000009CF 7415                    	je .Lrat_zero
   907 000009D1 4883FA01                	cmp rdx, 1
   908 000009D5 741E                    	je .Lrat_int
   909 000009D7 48BF-                   	mov rdi, fmt_fraction
   909 000009D9 [E901000000000000] 
   910 000009E1 E98F010000              	jmp .Lemit
   911                                  
   912                                  .Lrat_zero:
   913 000009E6 48BF-                   	mov rdi, fmt_zero
   913 000009E8 [F101000000000000] 
   914 000009F0 E980010000              	jmp .Lemit
   915                                  
   916                                  .Lrat_int:
   917 000009F5 48BF-                   	mov rdi, fmt_int
   917 000009F7 [F301000000000000] 
   918 000009FF E971010000              	jmp .Lemit
   919                                  
   920                                  .Lstring:
   921 00000A04 488D4709                	lea rax, [rdi + 1 + 8]
   922 00000A08 50                      	push rax
   923 00000A09 FF7701                  	push qword [rdi + 1]
   924 00000A0C 48BF-                   	mov rdi, fmt_dquote
   924 00000A0E [3702000000000000] 
   925 00000A16 B800000000              	mov rax, 0
   926                                  	ENTER
    33 00000A1B C8000000            <1>  enter 0, 0
    34 00000A1F 4883E4F0            <1>  and rsp, ~15
   927 00000A23 E8(00000000)            	call printf
   928                                  	LEAVE
    38 00000A28 C9                  <1>  leave
   929                                  .Lstring_loop:
   930                                  	; qword [rsp]: limit
   931                                  	; qword [rsp + 8*1]: char *
   932 00000A29 48833C2400              	cmp qword [rsp], 0
   933 00000A2E 0F84FD000000            	je .Lstring_end
   934 00000A34 488B442408              	mov rax, qword [rsp + 8*1]
   935 00000A39 8A00                    	mov al, byte [rax]
   936 00000A3B 4825FF000000            	and rax, 255
   937 00000A41 3C07                    	cmp al, 7
   938 00000A43 7468                            je .Lstring_char_7
   939 00000A45 3C08                            cmp al, 8
   940 00000A47 7470                            je .Lstring_char_8
   941 00000A49 3C09                            cmp al, 9
   942 00000A4B 7478                            je .Lstring_char_9
   943 00000A4D 3C0A                            cmp al, 10
   944 00000A4F 0F847C000000                    je .Lstring_char_10
   945 00000A55 3C0B                            cmp al, 11
   946 00000A57 0F8480000000                    je .Lstring_char_11
   947 00000A5D 3C0C                            cmp al, 12
   948 00000A5F 0F8484000000                    je .Lstring_char_12
   949 00000A65 3C0D                            cmp al, 13
   950 00000A67 0F8488000000                    je .Lstring_char_13
   951 00000A6D 3C22                            cmp al, 34
   952 00000A6F 0F848C000000                    je .Lstring_char_34
   953 00000A75 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   955 00000A77 3C20                            cmp al, ' '
   956 00000A79 0F8CA0000000                    jl .Lstring_char_hex
   957 00000A7F 48BF-                           mov rdi, fmt_string_char
   957 00000A81 [3902000000000000] 
   958 00000A89 4889C6                          mov rsi, rax
   959                                  .Lstring_char_emit:
   960 00000A8C B800000000                      mov rax, 0
   961                                          ENTER
    33 00000A91 C8000000            <1>  enter 0, 0
    34 00000A95 4883E4F0            <1>  and rsp, ~15
   962 00000A99 E8(00000000)                    call printf
   963                                          LEAVE
    38 00000A9E C9                  <1>  leave
   964 00000A9F 48FF0C24                        dec qword [rsp]
   965 00000AA3 48FF442408                      inc qword [rsp + 8*1]
   966 00000AA8 E97CFFFFFF                      jmp .Lstring_loop
   967                                  
   968                                  .Lstring_char_7:
   969 00000AAD 48BF-                           mov rdi, fmt_string_char_7
   969 00000AAF [3C02000000000000] 
   970 00000AB7 EBD3                            jmp .Lstring_char_emit
   971                                  
   972                                  .Lstring_char_8:
   973 00000AB9 48BF-                           mov rdi, fmt_string_char_8
   973 00000ABB [3F02000000000000] 
   974 00000AC3 EBC7                            jmp .Lstring_char_emit
   975                                          
   976                                  .Lstring_char_9:
   977 00000AC5 48BF-                           mov rdi, fmt_string_char_9
   977 00000AC7 [4202000000000000] 
   978 00000ACF EBBB                            jmp .Lstring_char_emit
   979                                  
   980                                  .Lstring_char_10:
   981 00000AD1 48BF-                           mov rdi, fmt_string_char_10
   981 00000AD3 [4502000000000000] 
   982 00000ADB EBAF                            jmp .Lstring_char_emit
   983                                  
   984                                  .Lstring_char_11:
   985 00000ADD 48BF-                           mov rdi, fmt_string_char_11
   985 00000ADF [4802000000000000] 
   986 00000AE7 EBA3                            jmp .Lstring_char_emit
   987                                  
   988                                  .Lstring_char_12:
   989 00000AE9 48BF-                           mov rdi, fmt_string_char_12
   989 00000AEB [4B02000000000000] 
   990 00000AF3 EB97                            jmp .Lstring_char_emit
   991                                  
   992                                  .Lstring_char_13:
   993 00000AF5 48BF-                           mov rdi, fmt_string_char_13
   993 00000AF7 [4E02000000000000] 
   994 00000AFF EB8B                            jmp .Lstring_char_emit
   995                                  
   996                                  .Lstring_char_34:
   997 00000B01 48BF-                           mov rdi, fmt_string_char_34
   997 00000B03 [5102000000000000] 
   998 00000B0B E97CFFFFFF                      jmp .Lstring_char_emit
   999                                  
  1000                                  .Lstring_char_92:
  1001 00000B10 48BF-                           mov rdi, fmt_string_char_92
  1001 00000B12 [5402000000000000] 
  1002 00000B1A E96DFFFFFF                      jmp .Lstring_char_emit
  1003                                  
  1004                                  .Lstring_char_hex:
  1005 00000B1F 48BF-                           mov rdi, fmt_string_char_hex
  1005 00000B21 [5702000000000000] 
  1006 00000B29 4889C6                          mov rsi, rax
  1007 00000B2C E95BFFFFFF                      jmp .Lstring_char_emit        
  1008                                  
  1009                                  .Lstring_end:
  1010 00000B31 4883C410                	add rsp, 8 * 2
  1011 00000B35 48BF-                   	mov rdi, fmt_dquote
  1011 00000B37 [3702000000000000] 
  1012 00000B3F EB34                    	jmp .Lemit
  1013                                  
  1014                                  .Lunknown_sexpr_type:
  1015 00000B41 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1015 00000B43 [F701000000000000] 
  1016 00000B4B 4825FF000000            	and rax, 255
  1017 00000B51 4889C2                  	mov rdx, rax
  1018 00000B54 4889F9                  	mov rcx, rdi
  1019 00000B57 488B3C25[00000000]      	mov rdi, qword [stderr]
  1020 00000B5F B800000000              	mov rax, 0
  1021 00000B64 E8(00000000)            	call fprintf
  1022 00000B69 48C7C0FFFFFFFF          	mov rax, -1
  1023 00000B70 E8(00000000)            	call exit
  1024                                  
  1025                                  .Lemit:
  1026 00000B75 B800000000              	mov rax, 0
  1027 00000B7A E8(00000000)            	call printf
  1028 00000B7F EB00                    	jmp .Lend
  1029                                  
  1030                                  .Lend:
  1031                                  	LEAVE
    38 00000B81 C9                  <1>  leave
  1032 00000B82 C3                      	ret
  1033                                  
  1034                                  ;;; rdi: address of free variable
  1035                                  ;;; rsi: address of code-pointer
  1036                                  bind_primitive:
  1037                                          ENTER
    33 00000B83 C8000000            <1>  enter 0, 0
    34 00000B87 4883E4F0            <1>  and rsp, ~15
  1038 00000B8B 57                              push rdi
  1039 00000B8C BF11000000                      mov rdi, (1 + 8 + 8)
  1040 00000B91 E8ABFAFFFF                      call malloc
  1041 00000B96 5F                              pop rdi
  1042 00000B97 C60005                          mov byte [rax], T_closure
  1043 00000B9A 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1044 00000BA2 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1045 00000BA6 488907                          mov qword [rdi], rax
  1046                                          LEAVE
    38 00000BA9 C9                  <1>  leave
  1047 00000BAA C3                              ret
  1048                                  
  1049                                  
  1050                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1051                                  L_code_ptr_bin_apply:
  1052                                          
  1053                                  L_code_ptr_is_null:
  1054                                          ENTER
    33 00000BAB C8000000            <1>  enter 0, 0
    34 00000BAF 4883E4F0            <1>  and rsp, ~15
  1055 00000BB3 48837D1801                      cmp COUNT, 1
  1056 00000BB8 0F856F100000                    jne L_error_arg_count_1
  1057 00000BBE 488B4520                        mov rax, PARAM(0)
  1058 00000BC2 803801                          cmp byte [rax], T_nil
  1059 00000BC5 750C                            jne .L_false
  1060 00000BC7 48B8-                           mov rax, sob_boolean_true
  1060 00000BC9 [0300000000000000] 
  1061 00000BD1 EB0A                            jmp .L_end
  1062                                  .L_false:
  1063 00000BD3 48B8-                           mov rax, sob_boolean_false
  1063 00000BD5 [0200000000000000] 
  1064                                  .L_end:
  1065                                          LEAVE
    38 00000BDD C9                  <1>  leave
  1066 00000BDE C21800                          ret AND_KILL_FRAME(1)
  1067                                  
  1068                                  L_code_ptr_is_pair:
  1069                                          ENTER
    33 00000BE1 C8000000            <1>  enter 0, 0
    34 00000BE5 4883E4F0            <1>  and rsp, ~15
  1070 00000BE9 48837D1801                      cmp COUNT, 1
  1071 00000BEE 0F8539100000                    jne L_error_arg_count_1
  1072 00000BF4 488B4520                        mov rax, PARAM(0)
  1073 00000BF8 803821                          cmp byte [rax], T_pair
  1074 00000BFB 750C                            jne .L_false
  1075 00000BFD 48B8-                           mov rax, sob_boolean_true
  1075 00000BFF [0300000000000000] 
  1076 00000C07 EB0A                            jmp .L_end
  1077                                  .L_false:
  1078 00000C09 48B8-                           mov rax, sob_boolean_false
  1078 00000C0B [0200000000000000] 
  1079                                  .L_end:
  1080                                          LEAVE
    38 00000C13 C9                  <1>  leave
  1081 00000C14 C21800                          ret AND_KILL_FRAME(1)
  1082                                          
  1083                                  L_code_ptr_is_void:
  1084                                          ENTER
    33 00000C17 C8000000            <1>  enter 0, 0
    34 00000C1B 4883E4F0            <1>  and rsp, ~15
  1085 00000C1F 48837D1801                      cmp COUNT, 1
  1086 00000C24 0F8503100000                    jne L_error_arg_count_1
  1087 00000C2A 488B4520                        mov rax, PARAM(0)
  1088 00000C2E 803800                          cmp byte [rax], T_void
  1089 00000C31 750C                            jne .L_false
  1090 00000C33 48B8-                           mov rax, sob_boolean_true
  1090 00000C35 [0300000000000000] 
  1091 00000C3D EB0A                            jmp .L_end
  1092                                  .L_false:
  1093 00000C3F 48B8-                           mov rax, sob_boolean_false
  1093 00000C41 [0200000000000000] 
  1094                                  .L_end:
  1095                                          LEAVE
    38 00000C49 C9                  <1>  leave
  1096 00000C4A C21800                          ret AND_KILL_FRAME(1)
  1097                                  
  1098                                  L_code_ptr_is_char:
  1099                                          ENTER
    33 00000C4D C8000000            <1>  enter 0, 0
    34 00000C51 4883E4F0            <1>  and rsp, ~15
  1100 00000C55 48837D1801                      cmp COUNT, 1
  1101 00000C5A 0F85CD0F0000                    jne L_error_arg_count_1
  1102 00000C60 488B4520                        mov rax, PARAM(0)
  1103 00000C64 803802                          cmp byte [rax], T_char
  1104 00000C67 750C                            jne .L_false
  1105 00000C69 48B8-                           mov rax, sob_boolean_true
  1105 00000C6B [0300000000000000] 
  1106 00000C73 EB0A                            jmp .L_end
  1107                                  .L_false:
  1108 00000C75 48B8-                           mov rax, sob_boolean_false
  1108 00000C77 [0200000000000000] 
  1109                                  .L_end:
  1110                                          LEAVE
    38 00000C7F C9                  <1>  leave
  1111 00000C80 C21800                          ret AND_KILL_FRAME(1)
  1112                                  
  1113                                  L_code_ptr_is_string:
  1114                                          ENTER
    33 00000C83 C8000000            <1>  enter 0, 0
    34 00000C87 4883E4F0            <1>  and rsp, ~15
  1115 00000C8B 48837D1801                      cmp COUNT, 1
  1116 00000C90 0F85970F0000                    jne L_error_arg_count_1
  1117 00000C96 488B4520                        mov rax, PARAM(0)
  1118 00000C9A 803803                          cmp byte [rax], T_string
  1119 00000C9D 750C                            jne .L_false
  1120 00000C9F 48B8-                           mov rax, sob_boolean_true
  1120 00000CA1 [0300000000000000] 
  1121 00000CA9 EB0A                            jmp .L_end
  1122                                  .L_false:
  1123 00000CAB 48B8-                           mov rax, sob_boolean_false
  1123 00000CAD [0200000000000000] 
  1124                                  .L_end:
  1125                                          LEAVE
    38 00000CB5 C9                  <1>  leave
  1126 00000CB6 C21800                          ret AND_KILL_FRAME(1)
  1127                                  
  1128                                  L_code_ptr_is_symbol:
  1129                                          ENTER
    33 00000CB9 C8000000            <1>  enter 0, 0
    34 00000CBD 4883E4F0            <1>  and rsp, ~15
  1130 00000CC1 48837D1801                      cmp COUNT, 1
  1131 00000CC6 0F85610F0000                    jne L_error_arg_count_1
  1132 00000CCC 488B4520                        mov rax, PARAM(0)
  1133 00000CD0 803804                          cmp byte [rax], T_symbol
  1134 00000CD3 750C                            jne .L_false
  1135 00000CD5 48B8-                           mov rax, sob_boolean_true
  1135 00000CD7 [0300000000000000] 
  1136 00000CDF EB0A                            jmp .L_end
  1137                                  .L_false:
  1138 00000CE1 48B8-                           mov rax, sob_boolean_false
  1138 00000CE3 [0200000000000000] 
  1139                                  .L_end:
  1140                                          LEAVE
    38 00000CEB C9                  <1>  leave
  1141 00000CEC C21800                          ret AND_KILL_FRAME(1)
  1142                                  
  1143                                  L_code_ptr_is_vector:
  1144                                          ENTER
    33 00000CEF C8000000            <1>  enter 0, 0
    34 00000CF3 4883E4F0            <1>  and rsp, ~15
  1145 00000CF7 48837D1801                      cmp COUNT, 1
  1146 00000CFC 0F852B0F0000                    jne L_error_arg_count_1
  1147 00000D02 488B4520                        mov rax, PARAM(0)
  1148 00000D06 803822                          cmp byte [rax], T_vector
  1149 00000D09 750C                            jne .L_false
  1150 00000D0B 48B8-                           mov rax, sob_boolean_true
  1150 00000D0D [0300000000000000] 
  1151 00000D15 EB0A                            jmp .L_end
  1152                                  .L_false:
  1153 00000D17 48B8-                           mov rax, sob_boolean_false
  1153 00000D19 [0200000000000000] 
  1154                                  .L_end:
  1155                                          LEAVE
    38 00000D21 C9                  <1>  leave
  1156 00000D22 C21800                          ret AND_KILL_FRAME(1)
  1157                                  
  1158                                  L_code_ptr_is_closure:
  1159                                          ENTER
    33 00000D25 C8000000            <1>  enter 0, 0
    34 00000D29 4883E4F0            <1>  and rsp, ~15
  1160 00000D2D 48837D1801                      cmp COUNT, 1
  1161 00000D32 0F85F50E0000                    jne L_error_arg_count_1
  1162 00000D38 488B4520                        mov rax, PARAM(0)
  1163 00000D3C 803805                          cmp byte [rax], T_closure
  1164 00000D3F 750C                            jne .L_false
  1165 00000D41 48B8-                           mov rax, sob_boolean_true
  1165 00000D43 [0300000000000000] 
  1166 00000D4B EB0A                            jmp .L_end
  1167                                  .L_false:
  1168 00000D4D 48B8-                           mov rax, sob_boolean_false
  1168 00000D4F [0200000000000000] 
  1169                                  .L_end:
  1170                                          LEAVE
    38 00000D57 C9                  <1>  leave
  1171 00000D58 C21800                          ret AND_KILL_FRAME(1)
  1172                                  
  1173                                  L_code_ptr_is_real:
  1174                                          ENTER
    33 00000D5B C8000000            <1>  enter 0, 0
    34 00000D5F 4883E4F0            <1>  and rsp, ~15
  1175 00000D63 48837D1801                      cmp COUNT, 1
  1176 00000D68 0F85BF0E0000                    jne L_error_arg_count_1
  1177 00000D6E 488B4520                        mov rax, PARAM(0)
  1178 00000D72 803812                          cmp byte [rax], T_real
  1179 00000D75 750C                            jne .L_false
  1180 00000D77 48B8-                           mov rax, sob_boolean_true
  1180 00000D79 [0300000000000000] 
  1181 00000D81 EB0A                            jmp .L_end
  1182                                  .L_false:
  1183 00000D83 48B8-                           mov rax, sob_boolean_false
  1183 00000D85 [0200000000000000] 
  1184                                  .L_end:
  1185                                          LEAVE
    38 00000D8D C9                  <1>  leave
  1186 00000D8E C21800                          ret AND_KILL_FRAME(1)
  1187                                  
  1188                                  L_code_ptr_is_rational:
  1189                                          ENTER
    33 00000D91 C8000000            <1>  enter 0, 0
    34 00000D95 4883E4F0            <1>  and rsp, ~15
  1190 00000D99 48837D1801                      cmp COUNT, 1
  1191 00000D9E 0F85890E0000                    jne L_error_arg_count_1
  1192 00000DA4 488B4520                        mov rax, PARAM(0)
  1193 00000DA8 803811                          cmp byte [rax], T_rational
  1194 00000DAB 750C                            jne .L_false
  1195 00000DAD 48B8-                           mov rax, sob_boolean_true
  1195 00000DAF [0300000000000000] 
  1196 00000DB7 EB0A                            jmp .L_end
  1197                                  .L_false:
  1198 00000DB9 48B8-                           mov rax, sob_boolean_false
  1198 00000DBB [0200000000000000] 
  1199                                  .L_end:
  1200                                          LEAVE
    38 00000DC3 C9                  <1>  leave
  1201 00000DC4 C21800                          ret AND_KILL_FRAME(1)
  1202                                  
  1203                                  L_code_ptr_is_boolean:
  1204                                          ENTER
    33 00000DC7 C8000000            <1>  enter 0, 0
    34 00000DCB 4883E4F0            <1>  and rsp, ~15
  1205 00000DCF 48837D1801                      cmp COUNT, 1
  1206 00000DD4 0F85530E0000                    jne L_error_arg_count_1
  1207 00000DDA 488B4520                        mov rax, PARAM(0)
  1208 00000DDE 8A18                            mov bl, byte [rax]
  1209 00000DE0 80E308                          and bl, T_boolean
  1210 00000DE3 740C                            je .L_false
  1211 00000DE5 48B8-                           mov rax, sob_boolean_true
  1211 00000DE7 [0300000000000000] 
  1212 00000DEF EB0A                            jmp .L_end
  1213                                  .L_false:
  1214 00000DF1 48B8-                           mov rax, sob_boolean_false
  1214 00000DF3 [0200000000000000] 
  1215                                  .L_end:
  1216                                          LEAVE
    38 00000DFB C9                  <1>  leave
  1217 00000DFC C21800                          ret AND_KILL_FRAME(1)
  1218                                          
  1219                                  L_code_ptr_is_number:
  1220                                          ENTER
    33 00000DFF C8000000            <1>  enter 0, 0
    34 00000E03 4883E4F0            <1>  and rsp, ~15
  1221 00000E07 48837D1801                      cmp COUNT, 1
  1222 00000E0C 0F851B0E0000                    jne L_error_arg_count_1
  1223 00000E12 488B4520                        mov rax, PARAM(0)
  1224 00000E16 8A18                            mov bl, byte [rax]
  1225 00000E18 80E310                          and bl, T_number
  1226 00000E1B 740C                            je .L_false
  1227 00000E1D 48B8-                           mov rax, sob_boolean_true
  1227 00000E1F [0300000000000000] 
  1228 00000E27 EB0A                            jmp .L_end
  1229                                  .L_false:
  1230 00000E29 48B8-                           mov rax, sob_boolean_false
  1230 00000E2B [0200000000000000] 
  1231                                  .L_end:
  1232                                          LEAVE
    38 00000E33 C9                  <1>  leave
  1233 00000E34 C21800                          ret AND_KILL_FRAME(1)
  1234                                          
  1235                                  L_code_ptr_is_collection:
  1236                                          ENTER
    33 00000E37 C8000000            <1>  enter 0, 0
    34 00000E3B 4883E4F0            <1>  and rsp, ~15
  1237 00000E3F 48837D1801                      cmp COUNT, 1
  1238 00000E44 0F85E30D0000                    jne L_error_arg_count_1
  1239 00000E4A 488B4520                        mov rax, PARAM(0)
  1240 00000E4E 8A18                            mov bl, byte [rax]
  1241 00000E50 80E320                          and bl, T_collection
  1242 00000E53 740C                            je .L_false
  1243 00000E55 48B8-                           mov rax, sob_boolean_true
  1243 00000E57 [0300000000000000] 
  1244 00000E5F EB0A                            jmp .L_end
  1245                                  .L_false:
  1246 00000E61 48B8-                           mov rax, sob_boolean_false
  1246 00000E63 [0200000000000000] 
  1247                                  .L_end:
  1248                                          LEAVE
    38 00000E6B C9                  <1>  leave
  1249 00000E6C C21800                          ret AND_KILL_FRAME(1)
  1250                                  
  1251                                  L_code_ptr_cons:
  1252                                          ENTER
    33 00000E6F C8000000            <1>  enter 0, 0
    34 00000E73 4883E4F0            <1>  and rsp, ~15
  1253 00000E77 48837D1802                      cmp COUNT, 2
  1254 00000E7C 0F85D70D0000                    jne L_error_arg_count_2
  1255 00000E82 BF11000000                      mov rdi, (1 + 8 + 8)
  1256 00000E87 E8B5F7FFFF                      call malloc
  1257 00000E8C C60021                          mov byte [rax], T_pair
  1258 00000E8F 488B5D20                        mov rbx, PARAM(0)
  1259 00000E93 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1260 00000E97 488B5D28                        mov rbx, PARAM(1)
  1261 00000E9B 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1262                                          LEAVE
    38 00000E9F C9                  <1>  leave
  1263 00000EA0 C22000                          ret AND_KILL_FRAME(2)
  1264                                  
  1265                                  L_code_ptr_display_sexpr:
  1266                                          ENTER
    33 00000EA3 C8000000            <1>  enter 0, 0
    34 00000EA7 4883E4F0            <1>  and rsp, ~15
  1267 00000EAB 48837D1801                      cmp COUNT, 1
  1268 00000EB0 0F85770D0000                    jne L_error_arg_count_1
  1269 00000EB6 488B7D20                        mov rdi, PARAM(0)
  1270 00000EBA E89DF7FFFF                      call print_sexpr
  1271 00000EBF 48B8-                           mov rax, sob_void
  1271 00000EC1 [0000000000000000] 
  1272                                          LEAVE
    38 00000EC9 C9                  <1>  leave
  1273 00000ECA C21800                          ret AND_KILL_FRAME(1)
  1274                                  
  1275                                  L_code_ptr_write_char:
  1276                                          ENTER
    33 00000ECD C8000000            <1>  enter 0, 0
    34 00000ED1 4883E4F0            <1>  and rsp, ~15
  1277 00000ED5 48837D1801                      cmp COUNT, 1
  1278 00000EDA 0F854D0D0000                    jne L_error_arg_count_1
  1279 00000EE0 488B4520                        mov rax, PARAM(0)
  1280                                          assert_char(rax)
    42 00000EE4 803802              <1>  cmp byte [%1], %2
    43 00000EE7 0F85F00D0000        <1>  jne L_error_incorrect_type
  1281 00000EED 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1282 00000EF0 4825FF000000                    and rax, 255
  1283 00000EF6 48BF-                           mov rdi, fmt_char
  1283 00000EF8 [5D02000000000000] 
  1284 00000F00 4889C6                          mov rsi, rax
  1285 00000F03 B800000000                      mov rax, 0
  1286 00000F08 E8(00000000)                    call printf
  1287 00000F0D 48B8-                           mov rax, sob_void
  1287 00000F0F [0000000000000000] 
  1288                                          LEAVE
    38 00000F17 C9                  <1>  leave
  1289 00000F18 C21800                          ret AND_KILL_FRAME(1)
  1290                                  
  1291                                  L_code_ptr_car:
  1292                                          ENTER
    33 00000F1B C8000000            <1>  enter 0, 0
    34 00000F1F 4883E4F0            <1>  and rsp, ~15
  1293 00000F23 48837D1801                      cmp COUNT, 1
  1294 00000F28 0F85FF0C0000                    jne L_error_arg_count_1
  1295 00000F2E 488B4520                        mov rax, PARAM(0)
  1296                                          assert_pair(rax)
    42 00000F32 803821              <1>  cmp byte [%1], %2
    43 00000F35 0F85A20D0000        <1>  jne L_error_incorrect_type
  1297 00000F3B 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1298                                          LEAVE
    38 00000F3F C9                  <1>  leave
  1299 00000F40 C21800                          ret AND_KILL_FRAME(1)
  1300                                          
  1301                                  L_code_ptr_cdr:
  1302                                          ENTER
    33 00000F43 C8000000            <1>  enter 0, 0
    34 00000F47 4883E4F0            <1>  and rsp, ~15
  1303 00000F4B 48837D1801                      cmp COUNT, 1
  1304 00000F50 0F85D70C0000                    jne L_error_arg_count_1
  1305 00000F56 488B4520                        mov rax, PARAM(0)
  1306                                          assert_pair(rax)
    42 00000F5A 803821              <1>  cmp byte [%1], %2
    43 00000F5D 0F857A0D0000        <1>  jne L_error_incorrect_type
  1307 00000F63 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1308                                          LEAVE
    38 00000F67 C9                  <1>  leave
  1309 00000F68 C21800                          ret AND_KILL_FRAME(1)
  1310                                          
  1311                                  L_code_ptr_string_length:
  1312                                          ENTER
    33 00000F6B C8000000            <1>  enter 0, 0
    34 00000F6F 4883E4F0            <1>  and rsp, ~15
  1313 00000F73 48837D1801                      cmp COUNT, 1
  1314 00000F78 0F85AF0C0000                    jne L_error_arg_count_1
  1315 00000F7E 488B4520                        mov rax, PARAM(0)
  1316                                          assert_string(rax)
    42 00000F82 803803              <1>  cmp byte [%1], %2
    43 00000F85 0F85520D0000        <1>  jne L_error_incorrect_type
  1317 00000F8B 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1318 00000F8F E81F0C0000                      call make_integer
  1319                                          LEAVE
    38 00000F94 C9                  <1>  leave
  1320 00000F95 C21800                          ret AND_KILL_FRAME(1)
  1321                                  
  1322                                  L_code_ptr_vector_length:
  1323                                          ENTER
    33 00000F98 C8000000            <1>  enter 0, 0
    34 00000F9C 4883E4F0            <1>  and rsp, ~15
  1324 00000FA0 48837D1801                      cmp COUNT, 1
  1325 00000FA5 0F85820C0000                    jne L_error_arg_count_1
  1326 00000FAB 488B4520                        mov rax, PARAM(0)
  1327                                          assert_vector(rax)
    42 00000FAF 803822              <1>  cmp byte [%1], %2
    43 00000FB2 0F85250D0000        <1>  jne L_error_incorrect_type
  1328 00000FB8 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1329 00000FBC E8F20B0000                      call make_integer
  1330                                          LEAVE
    38 00000FC1 C9                  <1>  leave
  1331 00000FC2 C21800                          ret AND_KILL_FRAME(1)
  1332                                  
  1333                                  L_code_ptr_real_to_integer:
  1334                                          ENTER
    33 00000FC5 C8000000            <1>  enter 0, 0
    34 00000FC9 4883E4F0            <1>  and rsp, ~15
  1335 00000FCD 48837D1801                      cmp COUNT, 1
  1336 00000FD2 0F85550C0000                    jne L_error_arg_count_1
  1337 00000FD8 488B5D20                        mov rbx, PARAM(0)
  1338                                          assert_real(rbx)
    42 00000FDC 803B12              <1>  cmp byte [%1], %2
    43 00000FDF 0F85F80C0000        <1>  jne L_error_incorrect_type
  1339 00000FE5 F20F104301                      movsd xmm0, qword [rbx + 1]
  1340 00000FEA F2480F2CF8                      cvttsd2si rdi, xmm0
  1341 00000FEF E8BF0B0000                      call make_integer
  1342                                          LEAVE
    38 00000FF4 C9                  <1>  leave
  1343 00000FF5 C21800                          ret AND_KILL_FRAME(1)
  1344                                  
  1345                                  L_code_ptr_exit:
  1346                                          ENTER
    33 00000FF8 C8000000            <1>  enter 0, 0
    34 00000FFC 4883E4F0            <1>  and rsp, ~15
  1347 00001000 48837D1800                      cmp COUNT, 0
  1348 00001005 0F85F60B0000                    jne L_error_arg_count_0
  1349 0000100B B800000000                      mov rax, 0
  1350 00001010 E8(00000000)                    call exit
  1351                                  
  1352                                  L_code_ptr_integer_to_real:
  1353                                          ENTER
    33 00001015 C8000000            <1>  enter 0, 0
    34 00001019 4883E4F0            <1>  and rsp, ~15
  1354 0000101D 48837D1801                      cmp COUNT, 1
  1355 00001022 0F85050C0000                    jne L_error_arg_count_1
  1356 00001028 488B4520                        mov rax, PARAM(0)
  1357                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000102C 803811              <2>  cmp byte [%1], %2
    43 0000102F 0F85A80C0000        <2>  jne L_error_incorrect_type
    48 00001035 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000103A 0F859D0C0000        <1>  jne L_error_incorrect_type
  1358 00001040 FF7001                          push qword [rax + 1]
  1359 00001043 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1360 00001049 E8490B0000                      call make_real
  1361                                          LEAVE
    38 0000104E C9                  <1>  leave
  1362 0000104F C21800                          ret AND_KILL_FRAME(1)
  1363                                  
  1364                                  L_code_ptr_rational_to_real:
  1365                                          ENTER
    33 00001052 C8000000            <1>  enter 0, 0
    34 00001056 4883E4F0            <1>  and rsp, ~15
  1366 0000105A 48837D1801                      cmp COUNT, 1
  1367 0000105F 0F85C80B0000                    jne L_error_arg_count_1
  1368 00001065 488B4520                        mov rax, PARAM(0)
  1369                                          assert_rational(rax)
    42 00001069 803811              <1>  cmp byte [%1], %2
    43 0000106C 0F856B0C0000        <1>  jne L_error_incorrect_type
  1370 00001072 FF7001                          push qword [rax + 1]
  1371 00001075 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1372 0000107B FF7009                          push qword [rax + 1 + 8]
  1373 0000107E F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1374 00001084 F20F5EC1                        divsd xmm0, xmm1
  1375 00001088 E80A0B0000                      call make_real
  1376                                          LEAVE
    38 0000108D C9                  <1>  leave
  1377 0000108E C21800                          ret AND_KILL_FRAME(1)
  1378                                  
  1379                                  L_code_ptr_char_to_integer:
  1380                                          ENTER
    33 00001091 C8000000            <1>  enter 0, 0
    34 00001095 4883E4F0            <1>  and rsp, ~15
  1381 00001099 48837D1801                      cmp COUNT, 1
  1382 0000109E 0F85890B0000                    jne L_error_arg_count_1
  1383 000010A4 488B4520                        mov rax, PARAM(0)
  1384                                          assert_char(rax)
    42 000010A8 803802              <1>  cmp byte [%1], %2
    43 000010AB 0F852C0C0000        <1>  jne L_error_incorrect_type
  1385 000010B1 8A4001                          mov al, byte [rax + 1]
  1386 000010B4 4825FF000000                    and rax, 255
  1387 000010BA 4889C7                          mov rdi, rax
  1388 000010BD E8F10A0000                      call make_integer
  1389                                          LEAVE
    38 000010C2 C9                  <1>  leave
  1390 000010C3 C21800                          ret AND_KILL_FRAME(1)
  1391                                  
  1392                                  L_code_ptr_integer_to_char:
  1393                                          ENTER
    33 000010C6 C8000000            <1>  enter 0, 0
    34 000010CA 4883E4F0            <1>  and rsp, ~15
  1394 000010CE 48837D1801                      cmp COUNT, 1
  1395 000010D3 0F85540B0000                    jne L_error_arg_count_1
  1396 000010D9 488B4520                        mov rax, PARAM(0)
  1397                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010DD 803811              <2>  cmp byte [%1], %2
    43 000010E0 0F85F70B0000        <2>  jne L_error_incorrect_type
    48 000010E6 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010EB 0F85EC0B0000        <1>  jne L_error_incorrect_type
  1398 000010F1 488B5801                        mov rbx, qword [rax + 1]
  1399 000010F5 4883FB00                        cmp rbx, 0
  1400 000010F9 0F8EDA0A0000                    jle L_error_integer_range
  1401 000010FF 4881FB00010000                  cmp rbx, 256
  1402 00001106 0F8DCD0A0000                    jge L_error_integer_range
  1403 0000110C BF02000000                      mov rdi, (1 + 1)
  1404 00001111 E82BF5FFFF                      call malloc
  1405 00001116 C60002                          mov byte [rax], T_char
  1406 00001119 885801                          mov byte [rax + 1], bl
  1407                                          LEAVE
    38 0000111C C9                  <1>  leave
  1408 0000111D C21800                          ret AND_KILL_FRAME(1)
  1409                                  
  1410                                  L_code_ptr_trng:
  1411                                          ENTER
    33 00001120 C8000000            <1>  enter 0, 0
    34 00001124 4883E4F0            <1>  and rsp, ~15
  1412 00001128 48837D1800                      cmp COUNT, 0
  1413 0000112D 0F85CE0A0000                    jne L_error_arg_count_0
  1414 00001133 480FC7F7                        rdrand rdi
  1415 00001137 48D1EF                          shr rdi, 1
  1416 0000113A E8740A0000                      call make_integer
  1417                                          LEAVE
    38 0000113F C9                  <1>  leave
  1418 00001140 C21000                          ret AND_KILL_FRAME(0)
  1419                                  
  1420                                  L_code_ptr_is_zero:
  1421                                          ENTER
    33 00001143 C8000000            <1>  enter 0, 0
    34 00001147 4883E4F0            <1>  and rsp, ~15
  1422 0000114B 48837D1801                      cmp COUNT, 1
  1423 00001150 0F85D70A0000                    jne L_error_arg_count_1
  1424 00001156 488B4520                        mov rax, PARAM(0)
  1425 0000115A 803811                          cmp byte [rax], T_rational
  1426 0000115D 740A                            je .L_rational
  1427 0000115F 803812                          cmp byte [rax], T_real
  1428 00001162 740E                            je .L_real
  1429 00001164 E9740B0000                      jmp L_error_incorrect_type
  1430                                  .L_rational:
  1431 00001169 4883780100                      cmp qword [rax + 1], 0
  1432 0000116E 7420                            je .L_zero
  1433 00001170 EB12                            jmp .L_not_zero
  1434                                  .L_real:
  1435 00001172 660FEFC0                        pxor xmm0, xmm0
  1436 00001176 FF7001                          push qword [rax + 1]
  1437 00001179 F20F100C24                      movsd xmm1, qword [rsp]
  1438 0000117E 660F2EC1                        ucomisd xmm0, xmm1
  1439 00001182 740C                            je .L_zero
  1440                                  .L_not_zero:
  1441 00001184 48B8-                           mov rax, sob_boolean_false
  1441 00001186 [0200000000000000] 
  1442 0000118E EB0A                            jmp .L_end
  1443                                  .L_zero:
  1444 00001190 48B8-                           mov rax, sob_boolean_true
  1444 00001192 [0300000000000000] 
  1445                                  .L_end:
  1446                                          LEAVE
    38 0000119A C9                  <1>  leave
  1447 0000119B C21800                          ret AND_KILL_FRAME(1)
  1448                                  
  1449                                  L_code_ptr_is_integer:
  1450                                          ENTER
    33 0000119E C8000000            <1>  enter 0, 0
    34 000011A2 4883E4F0            <1>  and rsp, ~15
  1451 000011A6 48837D1801                      cmp COUNT, 1
  1452 000011AB 0F857C0A0000                    jne L_error_arg_count_1
  1453 000011B1 488B4520                        mov rax, PARAM(0)
  1454 000011B5 803811                          cmp byte [rax], T_rational
  1455 000011B8 7513                            jne .L_false
  1456 000011BA 4883780901                      cmp qword [rax + 1 + 8], 1
  1457 000011BF 750C                            jne .L_false
  1458 000011C1 48B8-                           mov rax, sob_boolean_true
  1458 000011C3 [0300000000000000] 
  1459 000011CB EB0A                            jmp .L_exit
  1460                                  .L_false:
  1461 000011CD 48B8-                           mov rax, sob_boolean_false
  1461 000011CF [0200000000000000] 
  1462                                  .L_exit:
  1463                                          LEAVE
    38 000011D7 C9                  <1>  leave
  1464 000011D8 C21800                          ret AND_KILL_FRAME(1)
  1465                                  
  1466                                  L_code_ptr_raw_bin_add_rr:
  1467                                          ENTER
    33 000011DB C8000000            <1>  enter 0, 0
    34 000011DF 4883E4F0            <1>  and rsp, ~15
  1468 000011E3 48837D1802                      cmp COUNT, 2
  1469 000011E8 0F856B0A0000                    jne L_error_arg_count_2
  1470 000011EE 488B5D20                        mov rbx, PARAM(0)
  1471                                          assert_real(rbx)
    42 000011F2 803B12              <1>  cmp byte [%1], %2
    43 000011F5 0F85E20A0000        <1>  jne L_error_incorrect_type
  1472 000011FB 488B4D28                        mov rcx, PARAM(1)
  1473                                          assert_real(rcx)
    42 000011FF 803912              <1>  cmp byte [%1], %2
    43 00001202 0F85D50A0000        <1>  jne L_error_incorrect_type
  1474 00001208 F20F104301                      movsd xmm0, qword [rbx + 1]
  1475 0000120D F20F104901                      movsd xmm1, qword [rcx + 1]
  1476 00001212 F20F58C1                        addsd xmm0, xmm1
  1477 00001216 E87C090000                      call make_real
  1478                                          LEAVE
    38 0000121B C9                  <1>  leave
  1479 0000121C C22000                          ret AND_KILL_FRAME(2)
  1480                                  
  1481                                  L_code_ptr_raw_bin_sub_rr:
  1482                                          ENTER
    33 0000121F C8000000            <1>  enter 0, 0
    34 00001223 4883E4F0            <1>  and rsp, ~15
  1483 00001227 48837D1802                      cmp COUNT, 2
  1484 0000122C 0F85270A0000                    jne L_error_arg_count_2
  1485 00001232 488B5D20                        mov rbx, PARAM(0)
  1486                                          assert_real(rbx)
    42 00001236 803B12              <1>  cmp byte [%1], %2
    43 00001239 0F859E0A0000        <1>  jne L_error_incorrect_type
  1487 0000123F 488B4D28                        mov rcx, PARAM(1)
  1488                                          assert_real(rcx)
    42 00001243 803912              <1>  cmp byte [%1], %2
    43 00001246 0F85910A0000        <1>  jne L_error_incorrect_type
  1489 0000124C F20F104301                      movsd xmm0, qword [rbx + 1]
  1490 00001251 F20F104901                      movsd xmm1, qword [rcx + 1]
  1491 00001256 F20F5CC1                        subsd xmm0, xmm1
  1492 0000125A E838090000                      call make_real
  1493                                          LEAVE
    38 0000125F C9                  <1>  leave
  1494 00001260 C22000                          ret AND_KILL_FRAME(2)
  1495                                  
  1496                                  L_code_ptr_raw_bin_mul_rr:
  1497                                          ENTER
    33 00001263 C8000000            <1>  enter 0, 0
    34 00001267 4883E4F0            <1>  and rsp, ~15
  1498 0000126B 48837D1802                      cmp COUNT, 2
  1499 00001270 0F85E3090000                    jne L_error_arg_count_2
  1500 00001276 488B5D20                        mov rbx, PARAM(0)
  1501                                          assert_real(rbx)
    42 0000127A 803B12              <1>  cmp byte [%1], %2
    43 0000127D 0F855A0A0000        <1>  jne L_error_incorrect_type
  1502 00001283 488B4D28                        mov rcx, PARAM(1)
  1503                                          assert_real(rcx)
    42 00001287 803912              <1>  cmp byte [%1], %2
    43 0000128A 0F854D0A0000        <1>  jne L_error_incorrect_type
  1504 00001290 F20F104301                      movsd xmm0, qword [rbx + 1]
  1505 00001295 F20F104901                      movsd xmm1, qword [rcx + 1]
  1506 0000129A F20F59C1                        mulsd xmm0, xmm1
  1507 0000129E E8F4080000                      call make_real
  1508                                          LEAVE
    38 000012A3 C9                  <1>  leave
  1509 000012A4 C22000                          ret AND_KILL_FRAME(2)
  1510                                  
  1511                                  L_code_ptr_raw_bin_div_rr:
  1512                                          ENTER
    33 000012A7 C8000000            <1>  enter 0, 0
    34 000012AB 4883E4F0            <1>  and rsp, ~15
  1513 000012AF 48837D1802                      cmp COUNT, 2
  1514 000012B4 0F859F090000                    jne L_error_arg_count_2
  1515 000012BA 488B5D20                        mov rbx, PARAM(0)
  1516                                          assert_real(rbx)
    42 000012BE 803B12              <1>  cmp byte [%1], %2
    43 000012C1 0F85160A0000        <1>  jne L_error_incorrect_type
  1517 000012C7 488B4D28                        mov rcx, PARAM(1)
  1518                                          assert_real(rcx)
    42 000012CB 803912              <1>  cmp byte [%1], %2
    43 000012CE 0F85090A0000        <1>  jne L_error_incorrect_type
  1519 000012D4 F20F104301                      movsd xmm0, qword [rbx + 1]
  1520 000012D9 F20F104901                      movsd xmm1, qword [rcx + 1]
  1521 000012DE 660FEFD2                        pxor xmm2, xmm2
  1522 000012E2 660F2ECA                        ucomisd xmm1, xmm2
  1523 000012E6 0F84190A0000                    je L_error_division_by_zero
  1524 000012EC F20F5EC1                        divsd xmm0, xmm1
  1525 000012F0 E8A2080000                      call make_real
  1526                                          LEAVE
    38 000012F5 C9                  <1>  leave
  1527 000012F6 C22000                          ret AND_KILL_FRAME(2)
  1528                                  
  1529                                  L_code_ptr_raw_bin_add_qq:
  1530                                          ENTER
    33 000012F9 C8000000            <1>  enter 0, 0
    34 000012FD 4883E4F0            <1>  and rsp, ~15
  1531 00001301 48837D1802                      cmp COUNT, 2
  1532 00001306 0F854D090000                    jne L_error_arg_count_2
  1533 0000130C 4C8B4520                        mov r8, PARAM(0)
  1534                                          assert_rational(r8)
    42 00001310 41803811            <1>  cmp byte [%1], %2
    43 00001314 0F85C3090000        <1>  jne L_error_incorrect_type
  1535 0000131A 4C8B4D28                        mov r9, PARAM(1)
  1536                                          assert_rational(r9)
    42 0000131E 41803911            <1>  cmp byte [%1], %2
    43 00001322 0F85B5090000        <1>  jne L_error_incorrect_type
  1537 00001328 498B4001                        mov rax, qword [r8 + 1] ; num1
  1538 0000132C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1539 00001330 4899                            cqo
  1540 00001332 48F7EB                          imul rbx
  1541 00001335 4889C6                          mov rsi, rax
  1542 00001338 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1543 0000133C 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1544 00001340 4899                            cqo
  1545 00001342 48F7EB                          imul rbx
  1546 00001345 4801C6                          add rsi, rax
  1547 00001348 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1548 0000134C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1549 00001350 4899                            cqo
  1550 00001352 48F7EB                          imul rbx
  1551 00001355 4889C7                          mov rdi, rax
  1552 00001358 E827010000                      call normalize_rational
  1553                                          LEAVE
    38 0000135D C9                  <1>  leave
  1554 0000135E C22000                          ret AND_KILL_FRAME(2)
  1555                                  
  1556                                  L_code_ptr_raw_bin_sub_qq:
  1557                                          ENTER
    33 00001361 C8000000            <1>  enter 0, 0
    34 00001365 4883E4F0            <1>  and rsp, ~15
  1558 00001369 48837D1802                      cmp COUNT, 2
  1559 0000136E 0F85E5080000                    jne L_error_arg_count_2
  1560 00001374 4C8B4520                        mov r8, PARAM(0)
  1561                                          assert_rational(r8)
    42 00001378 41803811            <1>  cmp byte [%1], %2
    43 0000137C 0F855B090000        <1>  jne L_error_incorrect_type
  1562 00001382 4C8B4D28                        mov r9, PARAM(1)
  1563                                          assert_rational(r9)
    42 00001386 41803911            <1>  cmp byte [%1], %2
    43 0000138A 0F854D090000        <1>  jne L_error_incorrect_type
  1564 00001390 498B4001                        mov rax, qword [r8 + 1] ; num1
  1565 00001394 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1566 00001398 4899                            cqo
  1567 0000139A 48F7EB                          imul rbx
  1568 0000139D 4889C6                          mov rsi, rax
  1569 000013A0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1570 000013A4 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1571 000013A8 4899                            cqo
  1572 000013AA 48F7EB                          imul rbx
  1573 000013AD 4829C6                          sub rsi, rax
  1574 000013B0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1575 000013B4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1576 000013B8 4899                            cqo
  1577 000013BA 48F7EB                          imul rbx
  1578 000013BD 4889C7                          mov rdi, rax
  1579 000013C0 E8BF000000                      call normalize_rational
  1580                                          LEAVE
    38 000013C5 C9                  <1>  leave
  1581 000013C6 C22000                          ret AND_KILL_FRAME(2)
  1582                                  
  1583                                  L_code_ptr_raw_bin_mul_qq:
  1584                                          ENTER
    33 000013C9 C8000000            <1>  enter 0, 0
    34 000013CD 4883E4F0            <1>  and rsp, ~15
  1585 000013D1 48837D1802                      cmp COUNT, 2
  1586 000013D6 0F857D080000                    jne L_error_arg_count_2
  1587 000013DC 4C8B4520                        mov r8, PARAM(0)
  1588                                          assert_rational(r8)
    42 000013E0 41803811            <1>  cmp byte [%1], %2
    43 000013E4 0F85F3080000        <1>  jne L_error_incorrect_type
  1589 000013EA 4C8B4D28                        mov r9, PARAM(1)
  1590                                          assert_rational(r9)
    42 000013EE 41803911            <1>  cmp byte [%1], %2
    43 000013F2 0F85E5080000        <1>  jne L_error_incorrect_type
  1591 000013F8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1592 000013FC 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1593 00001400 4899                            cqo
  1594 00001402 48F7EB                          imul rbx
  1595 00001405 4889C6                          mov rsi, rax
  1596 00001408 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1597 0000140C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1598 00001410 4899                            cqo
  1599 00001412 48F7EB                          imul rbx
  1600 00001415 4889C7                          mov rdi, rax
  1601 00001418 E867000000                      call normalize_rational
  1602                                          LEAVE
    38 0000141D C9                  <1>  leave
  1603 0000141E C22000                          ret AND_KILL_FRAME(2)
  1604                                          
  1605                                  L_code_ptr_raw_bin_div_qq:
  1606                                          ENTER
    33 00001421 C8000000            <1>  enter 0, 0
    34 00001425 4883E4F0            <1>  and rsp, ~15
  1607 00001429 48837D1802                      cmp COUNT, 2
  1608 0000142E 0F8525080000                    jne L_error_arg_count_2
  1609 00001434 4C8B4520                        mov r8, PARAM(0)
  1610                                          assert_rational(r8)
    42 00001438 41803811            <1>  cmp byte [%1], %2
    43 0000143C 0F859B080000        <1>  jne L_error_incorrect_type
  1611 00001442 4C8B4D28                        mov r9, PARAM(1)
  1612                                          assert_rational(r9)
    42 00001446 41803911            <1>  cmp byte [%1], %2
    43 0000144A 0F858D080000        <1>  jne L_error_incorrect_type
  1613 00001450 4983790100                      cmp qword [r9 + 1], 0
  1614 00001455 0F84AA080000                    je L_error_division_by_zero
  1615 0000145B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1616 0000145F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1617 00001463 4899                            cqo
  1618 00001465 48F7EB                          imul rbx
  1619 00001468 4889C6                          mov rsi, rax
  1620 0000146B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1621 0000146F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1622 00001473 4899                            cqo
  1623 00001475 48F7EB                          imul rbx
  1624 00001478 4889C7                          mov rdi, rax
  1625 0000147B E804000000                      call normalize_rational
  1626                                          LEAVE
    38 00001480 C9                  <1>  leave
  1627 00001481 C22000                          ret AND_KILL_FRAME(2)
  1628                                          
  1629                                  normalize_rational:
  1630 00001484 56                              push rsi
  1631 00001485 57                              push rdi
  1632 00001486 E839000000                      call gcd
  1633 0000148B 4889C3                          mov rbx, rax
  1634 0000148E 58                              pop rax
  1635 0000148F 4899                            cqo
  1636 00001491 48F7FB                          idiv rbx
  1637 00001494 4989C0                          mov r8, rax
  1638 00001497 58                              pop rax
  1639 00001498 4899                            cqo
  1640 0000149A 48F7FB                          idiv rbx
  1641 0000149D 4989C1                          mov r9, rax
  1642 000014A0 BF11000000                      mov rdi, (1 + 8 + 8)
  1643 000014A5 E897F1FFFF                      call malloc
  1644 000014AA C60011                          mov byte [rax], T_rational
  1645 000014AD 4C894801                        mov qword [rax + 1], r9
  1646 000014B1 4C894009                        mov qword [rax + 1 + 8], r8
  1647 000014B5 C3                              ret
  1648                                  
  1649                                  iabs:
  1650 000014B6 4889F8                          mov rax, rdi
  1651 000014B9 4883F800                        cmp rax, 0
  1652 000014BD 7C01                            jl .Lneg
  1653 000014BF C3                              ret
  1654                                  .Lneg:
  1655 000014C0 48F7D8                          neg rax
  1656 000014C3 C3                              ret
  1657                                  
  1658                                  gcd:
  1659 000014C4 E8EDFFFFFF                      call iabs
  1660 000014C9 4889C3                          mov rbx, rax
  1661 000014CC 4889F7                          mov rdi, rsi
  1662 000014CF E8E2FFFFFF                      call iabs
  1663 000014D4 4883F800                        cmp rax, 0
  1664 000014D8 7502                            jne .L0
  1665 000014DA 4893                            xchg rax, rbx
  1666                                  .L0:
  1667 000014DC 4883FB00                        cmp rbx, 0
  1668 000014E0 740C                            je .L1
  1669 000014E2 4899                            cqo
  1670 000014E4 48F7F3                          div rbx
  1671 000014E7 4889D0                          mov rax, rdx
  1672 000014EA 4893                            xchg rax, rbx
  1673 000014EC EBEE                            jmp .L0
  1674                                  .L1:
  1675 000014EE C3                              ret
  1676                                  
  1677                                  L_code_ptr_error:
  1678                                          ENTER
    33 000014EF C8000000            <1>  enter 0, 0
    34 000014F3 4883E4F0            <1>  and rsp, ~15
  1679 000014F7 48837D1802                      cmp COUNT, 2
  1680 000014FC 0F8557070000                    jne L_error_arg_count_2
  1681 00001502 488B7520                        mov rsi, PARAM(0)
  1682                                          assert_symbol(rsi)
    42 00001506 803E04              <1>  cmp byte [%1], %2
    43 00001509 0F85CE070000        <1>  jne L_error_incorrect_type
  1683 0000150F 488B7528                        mov rsi, PARAM(1)
  1684                                          assert_string(rsi)
    42 00001513 803E03              <1>  cmp byte [%1], %2
    43 00001516 0F85C1070000        <1>  jne L_error_incorrect_type
  1685 0000151C 48BF-                           mov rdi, fmt_scheme_error_part_1
  1685 0000151E [9503000000000000] 
  1686 00001526 B800000000                      mov rax, 0
  1687 0000152B E8(00000000)                    call printf
  1688 00001530 488B7D20                        mov rdi, PARAM(0)
  1689 00001534 E823F1FFFF                      call print_sexpr
  1690 00001539 48BF-                           mov rdi, fmt_scheme_error_part_2
  1690 0000153B [A903000000000000] 
  1691 00001543 B800000000                      mov rax, 0
  1692 00001548 E8(00000000)                    call printf
  1693 0000154D 488B4528                        mov rax, PARAM(1)       ; sob_string
  1694 00001551 BE01000000                      mov rsi, 1              ; size = 1 byte
  1695 00001556 488B5001                        mov rdx, qword [rax + 1] ; length
  1696 0000155A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1697 0000155E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1698 00001566 E8(00000000)                    call fwrite
  1699 0000156B 48BF-                           mov rdi, fmt_scheme_error_part_3
  1699 0000156D [EB03000000000000] 
  1700 00001575 B800000000                      mov rax, 0
  1701 0000157A E8(00000000)                    call printf
  1702 0000157F 48C7C0F7FFFFFF                  mov rax, -9
  1703 00001586 E8(00000000)                    call exit
  1704                                  
  1705                                  L_code_ptr_raw_less_than_rr:
  1706                                          ENTER
    33 0000158B C8000000            <1>  enter 0, 0
    34 0000158F 4883E4F0            <1>  and rsp, ~15
  1707 00001593 48837D1802                      cmp COUNT, 2
  1708 00001598 0F85BB060000                    jne L_error_arg_count_2
  1709 0000159E 488B7520                        mov rsi, PARAM(0)
  1710                                          assert_real(rsi)
    42 000015A2 803E12              <1>  cmp byte [%1], %2
    43 000015A5 0F8532070000        <1>  jne L_error_incorrect_type
  1711 000015AB 488B7D28                        mov rdi, PARAM(1)
  1712                                          assert_real(rdi)
    42 000015AF 803F12              <1>  cmp byte [%1], %2
    43 000015B2 0F8525070000        <1>  jne L_error_incorrect_type
  1713 000015B8 F20F104601                      movsd xmm0, qword [rsi + 1]
  1714 000015BD F20F104F01                      movsd xmm1, qword [rdi + 1]
  1715 000015C2 660F2FC1                        comisd xmm0, xmm1
  1716 000015C6 730C                            jae .L_false
  1717 000015C8 48B8-                           mov rax, sob_boolean_true
  1717 000015CA [0300000000000000] 
  1718 000015D2 EB0A                            jmp .L_exit
  1719                                  .L_false:
  1720 000015D4 48B8-                           mov rax, sob_boolean_false
  1720 000015D6 [0200000000000000] 
  1721                                  .L_exit:
  1722                                          LEAVE
    38 000015DE C9                  <1>  leave
  1723 000015DF C22000                          ret AND_KILL_FRAME(2)
  1724                                          
  1725                                  L_code_ptr_raw_less_than_qq:
  1726                                          ENTER
    33 000015E2 C8000000            <1>  enter 0, 0
    34 000015E6 4883E4F0            <1>  and rsp, ~15
  1727 000015EA 48837D1802                      cmp COUNT, 2
  1728 000015EF 0F8564060000                    jne L_error_arg_count_2
  1729 000015F5 488B7520                        mov rsi, PARAM(0)
  1730                                          assert_rational(rsi)
    42 000015F9 803E11              <1>  cmp byte [%1], %2
    43 000015FC 0F85DB060000        <1>  jne L_error_incorrect_type
  1731 00001602 488B7D28                        mov rdi, PARAM(1)
  1732                                          assert_rational(rdi)
    42 00001606 803F11              <1>  cmp byte [%1], %2
    43 00001609 0F85CE060000        <1>  jne L_error_incorrect_type
  1733 0000160F 488B4601                        mov rax, qword [rsi + 1] ; num1
  1734 00001613 4899                            cqo
  1735 00001615 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1736 00001619 4889C1                          mov rcx, rax
  1737 0000161C 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1738 00001620 4899                            cqo
  1739 00001622 48F76F01                        imul qword [rdi + 1]          ; num2
  1740 00001626 4829C1                          sub rcx, rax
  1741 00001629 7D0C                            jge .L_false
  1742 0000162B 48B8-                           mov rax, sob_boolean_true
  1742 0000162D [0300000000000000] 
  1743 00001635 EB0A                            jmp .L_exit
  1744                                  .L_false:
  1745 00001637 48B8-                           mov rax, sob_boolean_false
  1745 00001639 [0200000000000000] 
  1746                                  .L_exit:
  1747                                          LEAVE
    38 00001641 C9                  <1>  leave
  1748 00001642 C22000                          ret AND_KILL_FRAME(2)
  1749                                  
  1750                                  L_code_ptr_raw_equal_rr:
  1751                                          ENTER
    33 00001645 C8000000            <1>  enter 0, 0
    34 00001649 4883E4F0            <1>  and rsp, ~15
  1752 0000164D 48837D1802                      cmp COUNT, 2
  1753 00001652 0F8501060000                    jne L_error_arg_count_2
  1754 00001658 488B7520                        mov rsi, PARAM(0)
  1755                                          assert_real(rsi)
    42 0000165C 803E12              <1>  cmp byte [%1], %2
    43 0000165F 0F8578060000        <1>  jne L_error_incorrect_type
  1756 00001665 488B7D28                        mov rdi, PARAM(1)
  1757                                          assert_real(rdi)
    42 00001669 803F12              <1>  cmp byte [%1], %2
    43 0000166C 0F856B060000        <1>  jne L_error_incorrect_type
  1758 00001672 F20F104601                      movsd xmm0, qword [rsi + 1]
  1759 00001677 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1760 0000167C 660F2FC1                        comisd xmm0, xmm1
  1761 00001680 750C                            jne .L_false
  1762 00001682 48B8-                           mov rax, sob_boolean_true
  1762 00001684 [0300000000000000] 
  1763 0000168C EB0A                            jmp .L_exit
  1764                                  .L_false:
  1765 0000168E 48B8-                           mov rax, sob_boolean_false
  1765 00001690 [0200000000000000] 
  1766                                  .L_exit:
  1767                                          LEAVE
    38 00001698 C9                  <1>  leave
  1768 00001699 C22000                          ret AND_KILL_FRAME(2)
  1769                                          
  1770                                  L_code_ptr_raw_equal_qq:
  1771                                          ENTER
    33 0000169C C8000000            <1>  enter 0, 0
    34 000016A0 4883E4F0            <1>  and rsp, ~15
  1772 000016A4 48837D1802                      cmp COUNT, 2
  1773 000016A9 0F85AA050000                    jne L_error_arg_count_2
  1774 000016AF 488B7520                        mov rsi, PARAM(0)
  1775                                          assert_rational(rsi)
    42 000016B3 803E11              <1>  cmp byte [%1], %2
    43 000016B6 0F8521060000        <1>  jne L_error_incorrect_type
  1776 000016BC 488B7D28                        mov rdi, PARAM(1)
  1777                                          assert_rational(rdi)
    42 000016C0 803F11              <1>  cmp byte [%1], %2
    43 000016C3 0F8514060000        <1>  jne L_error_incorrect_type
  1778 000016C9 488B4601                        mov rax, qword [rsi + 1] ; num1
  1779 000016CD 4899                            cqo
  1780 000016CF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1781 000016D3 4889C1                          mov rcx, rax
  1782 000016D6 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1783 000016DA 4899                            cqo
  1784 000016DC 48F76F01                        imul qword [rdi + 1]          ; num2
  1785 000016E0 4829C1                          sub rcx, rax
  1786 000016E3 750C                            jne .L_false
  1787 000016E5 48B8-                           mov rax, sob_boolean_true
  1787 000016E7 [0300000000000000] 
  1788 000016EF EB0A                            jmp .L_exit
  1789                                  .L_false:
  1790 000016F1 48B8-                           mov rax, sob_boolean_false
  1790 000016F3 [0200000000000000] 
  1791                                  .L_exit:
  1792                                          LEAVE
    38 000016FB C9                  <1>  leave
  1793 000016FC C22000                          ret AND_KILL_FRAME(2)
  1794                                  
  1795                                  L_code_ptr_quotient:
  1796                                          ENTER
    33 000016FF C8000000            <1>  enter 0, 0
    34 00001703 4883E4F0            <1>  and rsp, ~15
  1797 00001707 48837D1802                      cmp COUNT, 2
  1798 0000170C 0F8547050000                    jne L_error_arg_count_2
  1799 00001712 488B7520                        mov rsi, PARAM(0)
  1800                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001716 803E11              <2>  cmp byte [%1], %2
    43 00001719 0F85BE050000        <2>  jne L_error_incorrect_type
    48 0000171F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001724 0F85B3050000        <1>  jne L_error_incorrect_type
  1801 0000172A 488B7D28                        mov rdi, PARAM(1)
  1802                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000172E 803F11              <2>  cmp byte [%1], %2
    43 00001731 0F85A6050000        <2>  jne L_error_incorrect_type
    48 00001737 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000173C 0F859B050000        <1>  jne L_error_incorrect_type
  1803 00001742 488B4601                        mov rax, qword [rsi + 1]
  1804 00001746 488B5F01                        mov rbx, qword [rdi + 1]
  1805 0000174A 4883FB00                        cmp rbx, 0
  1806 0000174E 0F84B1050000                    je L_error_division_by_zero
  1807 00001754 4899                            cqo
  1808 00001756 48F7FB                          idiv rbx
  1809 00001759 4889C7                          mov rdi, rax
  1810 0000175C E852040000                      call make_integer
  1811                                          LEAVE
    38 00001761 C9                  <1>  leave
  1812 00001762 C22000                          ret AND_KILL_FRAME(2)
  1813                                          
  1814                                  L_code_ptr_remainder:
  1815                                          ENTER
    33 00001765 C8000000            <1>  enter 0, 0
    34 00001769 4883E4F0            <1>  and rsp, ~15
  1816 0000176D 48837D1802                      cmp COUNT, 2
  1817 00001772 0F85E1040000                    jne L_error_arg_count_2
  1818 00001778 488B7520                        mov rsi, PARAM(0)
  1819                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000177C 803E11              <2>  cmp byte [%1], %2
    43 0000177F 0F8558050000        <2>  jne L_error_incorrect_type
    48 00001785 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000178A 0F854D050000        <1>  jne L_error_incorrect_type
  1820 00001790 488B7D28                        mov rdi, PARAM(1)
  1821                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001794 803F11              <2>  cmp byte [%1], %2
    43 00001797 0F8540050000        <2>  jne L_error_incorrect_type
    48 0000179D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017A2 0F8535050000        <1>  jne L_error_incorrect_type
  1822 000017A8 488B4601                        mov rax, qword [rsi + 1]
  1823 000017AC 488B5F01                        mov rbx, qword [rdi + 1]
  1824 000017B0 4883FB00                        cmp rbx, 0
  1825 000017B4 0F844B050000                    je L_error_division_by_zero
  1826 000017BA 4899                            cqo
  1827 000017BC 48F7FB                          idiv rbx
  1828 000017BF 4889D7                          mov rdi, rdx
  1829 000017C2 E8EC030000                      call make_integer
  1830                                          LEAVE
    38 000017C7 C9                  <1>  leave
  1831 000017C8 C22000                          ret AND_KILL_FRAME(2)
  1832                                  
  1833                                  L_code_ptr_set_car:
  1834                                          ENTER
    33 000017CB C8000000            <1>  enter 0, 0
    34 000017CF 4883E4F0            <1>  and rsp, ~15
  1835 000017D3 48837D1802                      cmp COUNT, 2
  1836 000017D8 0F857B040000                    jne L_error_arg_count_2
  1837 000017DE 488B4520                        mov rax, PARAM(0)
  1838                                          assert_pair(rax)
    42 000017E2 803821              <1>  cmp byte [%1], %2
    43 000017E5 0F85F2040000        <1>  jne L_error_incorrect_type
  1839 000017EB 488B5D28                        mov rbx, PARAM(1)
  1840 000017EF 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1841 000017F3 48B8-                           mov rax, sob_void
  1841 000017F5 [0000000000000000] 
  1842                                          LEAVE
    38 000017FD C9                  <1>  leave
  1843 000017FE C22000                          ret AND_KILL_FRAME(2)
  1844                                  
  1845                                  L_code_ptr_set_cdr:
  1846                                          ENTER
    33 00001801 C8000000            <1>  enter 0, 0
    34 00001805 4883E4F0            <1>  and rsp, ~15
  1847 00001809 48837D1802                      cmp COUNT, 2
  1848 0000180E 0F8545040000                    jne L_error_arg_count_2
  1849 00001814 488B4520                        mov rax, PARAM(0)
  1850                                          assert_pair(rax)
    42 00001818 803821              <1>  cmp byte [%1], %2
    43 0000181B 0F85BC040000        <1>  jne L_error_incorrect_type
  1851 00001821 488B5D28                        mov rbx, PARAM(1)
  1852 00001825 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1853 00001829 48B8-                           mov rax, sob_void
  1853 0000182B [0000000000000000] 
  1854                                          LEAVE
    38 00001833 C9                  <1>  leave
  1855 00001834 C22000                          ret AND_KILL_FRAME(2)
  1856                                  
  1857                                  L_code_ptr_string_ref:
  1858                                          ENTER
    33 00001837 C8000000            <1>  enter 0, 0
    34 0000183B 4883E4F0            <1>  and rsp, ~15
  1859 0000183F 48837D1802                      cmp COUNT, 2
  1860 00001844 0F850F040000                    jne L_error_arg_count_2
  1861 0000184A 488B7D20                        mov rdi, PARAM(0)
  1862                                          assert_string(rdi)
    42 0000184E 803F03              <1>  cmp byte [%1], %2
    43 00001851 0F8586040000        <1>  jne L_error_incorrect_type
  1863 00001857 488B7528                        mov rsi, PARAM(1)
  1864                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000185B 803E11              <2>  cmp byte [%1], %2
    43 0000185E 0F8579040000        <2>  jne L_error_incorrect_type
    48 00001864 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001869 0F856E040000        <1>  jne L_error_incorrect_type
  1865 0000186F 488B5701                        mov rdx, qword [rdi + 1]
  1866 00001873 488B4E01                        mov rcx, qword [rsi + 1]
  1867 00001877 4839D1                          cmp rcx, rdx
  1868 0000187A 0F8D59030000                    jge L_error_integer_range
  1869 00001880 4883F900                        cmp rcx, 0
  1870 00001884 0F8C4F030000                    jl L_error_integer_range
  1871 0000188A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1872 0000188E BF02000000                      mov rdi, 2
  1873 00001893 E8A9EDFFFF                      call malloc
  1874 00001898 C60002                          mov byte [rax], T_char
  1875 0000189B 885801                          mov byte [rax + 1], bl
  1876                                          LEAVE
    38 0000189E C9                  <1>  leave
  1877 0000189F C22000                          ret AND_KILL_FRAME(2)
  1878                                  
  1879                                  L_code_ptr_vector_ref:
  1880                                          ENTER
    33 000018A2 C8000000            <1>  enter 0, 0
    34 000018A6 4883E4F0            <1>  and rsp, ~15
  1881 000018AA 48837D1802                      cmp COUNT, 2
  1882 000018AF 0F85A4030000                    jne L_error_arg_count_2
  1883 000018B5 488B7D20                        mov rdi, PARAM(0)
  1884                                          assert_vector(rdi)
    42 000018B9 803F22              <1>  cmp byte [%1], %2
    43 000018BC 0F851B040000        <1>  jne L_error_incorrect_type
  1885 000018C2 488B7528                        mov rsi, PARAM(1)
  1886                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018C6 803E11              <2>  cmp byte [%1], %2
    43 000018C9 0F850E040000        <2>  jne L_error_incorrect_type
    48 000018CF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018D4 0F8503040000        <1>  jne L_error_incorrect_type
  1887 000018DA 488B5701                        mov rdx, qword [rdi + 1]
  1888 000018DE 488B4E01                        mov rcx, qword [rsi + 1]
  1889 000018E2 4839D1                          cmp rcx, rdx
  1890 000018E5 0F8DEE020000                    jge L_error_integer_range
  1891 000018EB 4883F900                        cmp rcx, 0
  1892 000018EF 0F8CE4020000                    jl L_error_integer_range
  1893 000018F5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1894                                          LEAVE
    38 000018FA C9                  <1>  leave
  1895 000018FB C22000                          ret AND_KILL_FRAME(2)
  1896                                  
  1897                                  L_code_ptr_vector_set:
  1898                                          ENTER
    33 000018FE C8000000            <1>  enter 0, 0
    34 00001902 4883E4F0            <1>  and rsp, ~15
  1899 00001906 48837D1803                      cmp COUNT, 3
  1900 0000190B 0F85A0030000                    jne L_error_arg_count_3
  1901 00001911 488B7D20                        mov rdi, PARAM(0)
  1902                                          assert_vector(rdi)
    42 00001915 803F22              <1>  cmp byte [%1], %2
    43 00001918 0F85BF030000        <1>  jne L_error_incorrect_type
  1903 0000191E 488B7528                        mov rsi, PARAM(1)
  1904                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001922 803E11              <2>  cmp byte [%1], %2
    43 00001925 0F85B2030000        <2>  jne L_error_incorrect_type
    48 0000192B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001930 0F85A7030000        <1>  jne L_error_incorrect_type
  1905 00001936 488B5701                        mov rdx, qword [rdi + 1]
  1906 0000193A 488B4E01                        mov rcx, qword [rsi + 1]
  1907 0000193E 4839D1                          cmp rcx, rdx
  1908 00001941 0F8D92020000                    jge L_error_integer_range
  1909 00001947 4883F900                        cmp rcx, 0
  1910 0000194B 0F8C88020000                    jl L_error_integer_range
  1911 00001951 488B4530                        mov rax, PARAM(2)
  1912 00001955 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1913 0000195A 48B8-                           mov rax, sob_void
  1913 0000195C [0000000000000000] 
  1914                                          LEAVE
    38 00001964 C9                  <1>  leave
  1915 00001965 C22800                          ret AND_KILL_FRAME(3)
  1916                                  
  1917                                  L_code_ptr_string_set:
  1918                                          ENTER
    33 00001968 C8000000            <1>  enter 0, 0
    34 0000196C 4883E4F0            <1>  and rsp, ~15
  1919 00001970 48837D1803                      cmp COUNT, 3
  1920 00001975 0F8536030000                    jne L_error_arg_count_3
  1921 0000197B 488B7D20                        mov rdi, PARAM(0)
  1922                                          assert_string(rdi)
    42 0000197F 803F03              <1>  cmp byte [%1], %2
    43 00001982 0F8555030000        <1>  jne L_error_incorrect_type
  1923 00001988 488B7528                        mov rsi, PARAM(1)
  1924                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000198C 803E11              <2>  cmp byte [%1], %2
    43 0000198F 0F8548030000        <2>  jne L_error_incorrect_type
    48 00001995 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000199A 0F853D030000        <1>  jne L_error_incorrect_type
  1925 000019A0 488B5701                        mov rdx, qword [rdi + 1]
  1926 000019A4 488B4E01                        mov rcx, qword [rsi + 1]
  1927 000019A8 4839D1                          cmp rcx, rdx
  1928 000019AB 0F8D28020000                    jge L_error_integer_range
  1929 000019B1 4883F900                        cmp rcx, 0
  1930 000019B5 0F8C1E020000                    jl L_error_integer_range
  1931 000019BB 488B4530                        mov rax, PARAM(2)
  1932                                          assert_char(rax)
    42 000019BF 803802              <1>  cmp byte [%1], %2
    43 000019C2 0F8515030000        <1>  jne L_error_incorrect_type
  1933 000019C8 8A4001                          mov al, byte [rax + 1]
  1934 000019CB 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1935 000019CF 48B8-                           mov rax, sob_void
  1935 000019D1 [0000000000000000] 
  1936                                          LEAVE
    38 000019D9 C9                  <1>  leave
  1937 000019DA C22800                          ret AND_KILL_FRAME(3)
  1938                                  
  1939                                  L_code_ptr_make_vector:
  1940                                          ENTER
    33 000019DD C8000000            <1>  enter 0, 0
    34 000019E1 4883E4F0            <1>  and rsp, ~15
  1941 000019E5 48837D1802                      cmp COUNT, 2
  1942 000019EA 0F8569020000                    jne L_error_arg_count_2
  1943 000019F0 488B4D20                        mov rcx, PARAM(0)
  1944                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000019F4 803911              <2>  cmp byte [%1], %2
    43 000019F7 0F85E0020000        <2>  jne L_error_incorrect_type
    48 000019FD 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A02 0F85D5020000        <1>  jne L_error_incorrect_type
  1945 00001A08 488B4901                        mov rcx, qword [rcx + 1]
  1946 00001A0C 4883F900                        cmp rcx, 0
  1947 00001A10 0F8CC3010000                    jl L_error_integer_range
  1948 00001A16 488B5528                        mov rdx, PARAM(1)
  1949 00001A1A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1950 00001A22 E81AECFFFF                      call malloc
  1951 00001A27 C60022                          mov byte [rax], T_vector
  1952 00001A2A 48894801                        mov qword [rax + 1], rcx
  1953 00001A2E 41B800000000                    mov r8, 0
  1954                                  .L0:
  1955 00001A34 4939C8                          cmp r8, rcx
  1956 00001A37 740A                            je .L1
  1957 00001A39 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1958 00001A3E 49FFC0                          inc r8
  1959 00001A41 EBF1                            jmp .L0
  1960                                  .L1:
  1961                                          LEAVE
    38 00001A43 C9                  <1>  leave
  1962 00001A44 C22000                          ret AND_KILL_FRAME(2)
  1963                                          
  1964                                  L_code_ptr_make_string:
  1965                                          ENTER
    33 00001A47 C8000000            <1>  enter 0, 0
    34 00001A4B 4883E4F0            <1>  and rsp, ~15
  1966 00001A4F 48837D1802                      cmp COUNT, 2
  1967 00001A54 0F85FF010000                    jne L_error_arg_count_2
  1968 00001A5A 488B4D20                        mov rcx, PARAM(0)
  1969                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A5E 803911              <2>  cmp byte [%1], %2
    43 00001A61 0F8576020000        <2>  jne L_error_incorrect_type
    48 00001A67 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A6C 0F856B020000        <1>  jne L_error_incorrect_type
  1970 00001A72 488B4901                        mov rcx, qword [rcx + 1]
  1971 00001A76 4883F900                        cmp rcx, 0
  1972 00001A7A 0F8C59010000                    jl L_error_integer_range
  1973 00001A80 488B5528                        mov rdx, PARAM(1)
  1974                                          assert_char(rdx)
    42 00001A84 803A02              <1>  cmp byte [%1], %2
    43 00001A87 0F8550020000        <1>  jne L_error_incorrect_type
  1975 00001A8D 8A5201                          mov dl, byte [rdx + 1]
  1976 00001A90 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  1977 00001A94 E8A8EBFFFF                      call malloc
  1978 00001A99 C60003                          mov byte [rax], T_string
  1979 00001A9C 48894801                        mov qword [rax + 1], rcx
  1980 00001AA0 41B800000000                    mov r8, 0
  1981                                  .L0:
  1982 00001AA6 4939C8                          cmp r8, rcx
  1983 00001AA9 740A                            je .L1
  1984 00001AAB 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  1985 00001AB0 49FFC0                          inc r8
  1986 00001AB3 EBF1                            jmp .L0
  1987                                  .L1:
  1988                                          LEAVE
    38 00001AB5 C9                  <1>  leave
  1989 00001AB6 C22000                          ret AND_KILL_FRAME(2)
  1990                                  
  1991                                  L_code_ptr_numerator:
  1992                                          ENTER
    33 00001AB9 C8000000            <1>  enter 0, 0
    34 00001ABD 4883E4F0            <1>  and rsp, ~15
  1993 00001AC1 48837D1801                      cmp COUNT, 1
  1994 00001AC6 0F8561010000                    jne L_error_arg_count_1
  1995 00001ACC 488B4520                        mov rax, PARAM(0)
  1996                                          assert_rational(rax)
    42 00001AD0 803811              <1>  cmp byte [%1], %2
    43 00001AD3 0F8504020000        <1>  jne L_error_incorrect_type
  1997 00001AD9 488B7801                        mov rdi, qword [rax + 1]
  1998 00001ADD E8D1000000                      call make_integer
  1999                                          LEAVE
    38 00001AE2 C9                  <1>  leave
  2000 00001AE3 C21800                          ret AND_KILL_FRAME(1)
  2001                                          
  2002                                  L_code_ptr_denominator:
  2003                                          ENTER
    33 00001AE6 C8000000            <1>  enter 0, 0
    34 00001AEA 4883E4F0            <1>  and rsp, ~15
  2004 00001AEE 48837D1801                      cmp COUNT, 1
  2005 00001AF3 0F8534010000                    jne L_error_arg_count_1
  2006 00001AF9 488B4520                        mov rax, PARAM(0)
  2007                                          assert_rational(rax)
    42 00001AFD 803811              <1>  cmp byte [%1], %2
    43 00001B00 0F85D7010000        <1>  jne L_error_incorrect_type
  2008 00001B06 488B7809                        mov rdi, qword [rax + 1 + 8]
  2009 00001B0A E8A4000000                      call make_integer
  2010                                          LEAVE
    38 00001B0F C9                  <1>  leave
  2011 00001B10 C21800                          ret AND_KILL_FRAME(1)
  2012                                  
  2013                                  L_code_ptr_eq:
  2014                                  	ENTER
    33 00001B13 C8000000            <1>  enter 0, 0
    34 00001B17 4883E4F0            <1>  and rsp, ~15
  2015 00001B1B 48837D1802              	cmp COUNT, 2
  2016 00001B20 0F8533010000            	jne L_error_arg_count_2
  2017 00001B26 488B7D20                	mov rdi, PARAM(0)
  2018 00001B2A 488B7528                	mov rsi, PARAM(1)
  2019 00001B2E 4839F7                  	cmp rdi, rsi
  2020 00001B31 744A                    	je .L_eq_true
  2021 00001B33 8A17                    	mov dl, byte [rdi]
  2022 00001B35 3A16                    	cmp dl, byte [rsi]
  2023 00001B37 7550                    	jne .L_eq_false
  2024 00001B39 80FA02                  	cmp dl, T_char
  2025 00001B3C 7437                    	je .L_char
  2026 00001B3E 80FA04                  	cmp dl, T_symbol
  2027 00001B41 742A                    	je .L_symbol
  2028 00001B43 80FA12                  	cmp dl, T_real
  2029 00001B46 741D                    	je .L_real
  2030 00001B48 80FA11                  	cmp dl, T_rational
  2031 00001B4B 7402                    	je .L_rational
  2032 00001B4D EB3A                    	jmp .L_eq_false
  2033                                  .L_rational:
  2034 00001B4F 488B4601                	mov rax, qword [rsi + 1]
  2035 00001B53 483B4701                	cmp rax, qword [rdi + 1]
  2036 00001B57 7530                    	jne .L_eq_false
  2037 00001B59 488B4609                	mov rax, qword [rsi + 1 + 8]
  2038 00001B5D 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2039 00001B61 7526                    	jne .L_eq_false
  2040 00001B63 EB18                    	jmp .L_eq_true
  2041                                  .L_real:
  2042 00001B65 488B4601                	mov rax, qword [rsi + 1]
  2043 00001B69 483B4701                	cmp rax, qword [rdi + 1]
  2044                                  .L_symbol:
  2045                                  	; never reached, because symbols are static!
  2046                                  	; but I'm keeping it in case, I'll ever change
  2047                                  	; the implementation
  2048 00001B6D 488B4601                	mov rax, qword [rsi + 1]
  2049 00001B71 483B4701                	cmp rax, qword [rdi + 1]
  2050                                  .L_char:
  2051 00001B75 8A5E01                  	mov bl, byte [rsi + 1]
  2052 00001B78 3A5F01                  	cmp bl, byte [rdi + 1]
  2053 00001B7B 750C                    	jne .L_eq_false
  2054                                  .L_eq_true:
  2055 00001B7D 48B8-                   	mov rax, sob_boolean_true
  2055 00001B7F [0300000000000000] 
  2056 00001B87 EB0A                    	jmp .L_eq_exit
  2057                                  .L_eq_false:
  2058 00001B89 48B8-                   	mov rax, sob_boolean_false
  2058 00001B8B [0200000000000000] 
  2059                                  .L_eq_exit:
  2060                                  	LEAVE
    38 00001B93 C9                  <1>  leave
  2061 00001B94 C22000                  	ret AND_KILL_FRAME(2)
  2062                                  
  2063                                  make_real:
  2064                                          ENTER
    33 00001B97 C8000000            <1>  enter 0, 0
    34 00001B9B 4883E4F0            <1>  and rsp, ~15
  2065 00001B9F BF09000000                      mov rdi, (1 + 8)
  2066 00001BA4 E898EAFFFF                      call malloc
  2067 00001BA9 C60012                          mov byte [rax], T_real
  2068 00001BAC F20F114001                      movsd qword [rax + 1], xmm0
  2069                                          LEAVE
    38 00001BB1 C9                  <1>  leave
  2070 00001BB2 C3                              ret
  2071                                          
  2072                                  make_integer:
  2073                                          ENTER
    33 00001BB3 C8000000            <1>  enter 0, 0
    34 00001BB7 4883E4F0            <1>  and rsp, ~15
  2074 00001BBB 4889FE                          mov rsi, rdi
  2075 00001BBE BF11000000                      mov rdi, (1 + 8 + 8)
  2076 00001BC3 E879EAFFFF                      call malloc
  2077 00001BC8 C60011                          mov byte [rax], T_rational
  2078 00001BCB 48897001                        mov qword [rax + 1], rsi
  2079 00001BCF 48C7400901000000                mov qword [rax + 1 + 8], 1
  2080                                          LEAVE
    38 00001BD7 C9                  <1>  leave
  2081 00001BD8 C3                              ret
  2082                                          
  2083                                  L_error_integer_range:
  2084 00001BD9 488B3C25[00000000]              mov rdi, qword [stderr]
  2085 00001BE1 48BE-                           mov rsi, fmt_integer_range
  2085 00001BE3 [6203000000000000] 
  2086 00001BEB B800000000                      mov rax, 0
  2087 00001BF0 E8(00000000)                    call fprintf
  2088 00001BF5 48C7C0FBFFFFFF                  mov rax, -5
  2089 00001BFC E8(00000000)                    call exit
  2090                                  
  2091                                  L_error_arg_count_0:
  2092 00001C01 488B3C25[00000000]              mov rdi, qword [stderr]
  2093 00001C09 48BE-                           mov rsi, fmt_arg_count_0
  2093 00001C0B [6002000000000000] 
  2094 00001C13 488B5518                        mov rdx, COUNT
  2095 00001C17 B800000000                      mov rax, 0
  2096 00001C1C E8(00000000)                    call fprintf
  2097 00001C21 48C7C0FDFFFFFF                  mov rax, -3
  2098 00001C28 E8(00000000)                    call exit
  2099                                  
  2100                                  L_error_arg_count_1:
  2101 00001C2D 488B3C25[00000000]              mov rdi, qword [stderr]
  2102 00001C35 48BE-                           mov rsi, fmt_arg_count_1
  2102 00001C37 [8802000000000000] 
  2103 00001C3F 488B5518                        mov rdx, COUNT
  2104 00001C43 B800000000                      mov rax, 0
  2105 00001C48 E8(00000000)                    call fprintf
  2106 00001C4D 48C7C0FDFFFFFF                  mov rax, -3
  2107 00001C54 E8(00000000)                    call exit
  2108                                  
  2109                                  L_error_arg_count_2:
  2110 00001C59 488B3C25[00000000]              mov rdi, qword [stderr]
  2111 00001C61 48BE-                           mov rsi, fmt_arg_count_2
  2111 00001C63 [EE02000000000000] 
  2112 00001C6B 488B5518                        mov rdx, COUNT
  2113 00001C6F B800000000                      mov rax, 0
  2114 00001C74 E8(00000000)                    call fprintf
  2115 00001C79 48C7C0FDFFFFFF                  mov rax, -3
  2116 00001C80 E8(00000000)                    call exit
  2117                                  
  2118                                  L_error_arg_count_12:
  2119 00001C85 488B3C25[00000000]              mov rdi, qword [stderr]
  2120 00001C8D 48BE-                           mov rsi, fmt_arg_count_12
  2120 00001C8F [AE02000000000000] 
  2121 00001C97 488B5518                        mov rdx, COUNT
  2122 00001C9B B800000000                      mov rax, 0
  2123 00001CA0 E8(00000000)                    call fprintf
  2124 00001CA5 48C7C0FDFFFFFF                  mov rax, -3
  2125 00001CAC E8(00000000)                    call exit
  2126                                  
  2127                                  L_error_arg_count_3:
  2128 00001CB1 488B3C25[00000000]              mov rdi, qword [stderr]
  2129 00001CB9 48BE-                           mov rsi, fmt_arg_count_3
  2129 00001CBB [1503000000000000] 
  2130 00001CC3 488B5518                        mov rdx, COUNT
  2131 00001CC7 B800000000                      mov rax, 0
  2132 00001CCC E8(00000000)                    call fprintf
  2133 00001CD1 48C7C0FDFFFFFF                  mov rax, -3
  2134 00001CD8 E8(00000000)                    call exit
  2135                                          
  2136                                  L_error_incorrect_type:
  2137 00001CDD 488B3C25[00000000]              mov rdi, qword [stderr]
  2138 00001CE5 48BE-                           mov rsi, fmt_type
  2138 00001CE7 [3E03000000000000] 
  2139 00001CEF B800000000                      mov rax, 0
  2140 00001CF4 E8(00000000)                    call fprintf
  2141 00001CF9 48C7C0FCFFFFFF                  mov rax, -4
  2142 00001D00 E8(00000000)                    call exit
  2143                                  
  2144                                  L_error_division_by_zero:
  2145 00001D05 488B3C25[00000000]              mov rdi, qword [stderr]
  2146 00001D0D 48BE-                           mov rsi, fmt_division_by_zero
  2146 00001D0F [7F03000000000000] 
  2147 00001D17 B800000000                      mov rax, 0
  2148 00001D1C E8(00000000)                    call fprintf
  2149 00001D21 48C7C0F8FFFFFF                  mov rax, -8
  2150 00001D28 E8(00000000)                    call exit
  2151                                  
  2152                                  section .data
  2153                                  fmt_char:
  2154 0000025D 256300                          db `%c\0`
  2155                                  fmt_arg_count_0:
  2156 00000260 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2156 00000269 74696E67207A65726F-
  2156 00000272 20617267756D656E74-
  2156 0000027B 732E20466F756E6420-
  2156 00000284 25640A00           
  2157                                  fmt_arg_count_1:
  2158 00000288 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2158 00000291 74696E67206F6E6520-
  2158 0000029A 617267756D656E742E-
  2158 000002A3 20466F756E64202564-
  2158 000002AC 0A00               
  2159                                  fmt_arg_count_12:
  2160 000002AE 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2160 000002B7 74696E67206F6E6520-
  2160 000002C0 726571756972656420-
  2160 000002C9 616E64206F6E65206F-
  2160 000002D2 7074696F6E616C2061-
  2160 000002DB 7267756D656E742E20-
  2160 000002E4 466F756E642025640A-
  2160 000002ED 00                 
  2161                                  fmt_arg_count_2:
  2162 000002EE 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2162 000002F7 74696E672074776F20-
  2162 00000300 617267756D656E7473-
  2162 00000309 2E20466F756E642025-
  2162 00000312 640A00             
  2163                                  fmt_arg_count_3:
  2164 00000315 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2164 0000031E 74696E672074687265-
  2164 00000327 6520617267756D656E-
  2164 00000330 74732E20466F756E64-
  2164 00000339 2025640A00         
  2165                                  fmt_type:
  2166 0000033E 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2166 00000347 696F6E207061737365-
  2166 00000350 6420696E636F727265-
  2166 00000359 637420747970650A00 
  2167                                  fmt_integer_range:
  2168 00000362 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2168 0000036B 7265637420696E7465-
  2168 00000374 6765722072616E6765-
  2168 0000037D 0A00               
  2169                                  fmt_division_by_zero:
  2170 0000037F 212121204469766973-             db `!!! Division by zero\n\0`
  2170 00000388 696F6E206279207A65-
  2170 00000391 726F0A00           
  2171                                  fmt_scheme_error_part_1:
  2172 00000395 0A2121212054686520-             db `\n!!! The procedure \0`
  2172 0000039E 70726F636564757265-
  2172 000003A7 2000               
  2173                                  fmt_scheme_error_part_2:
  2174 000003A9 2061736B656420746F-             db ` asked to terminate the program\n`
  2174 000003B2 207465726D696E6174-
  2174 000003BB 65207468652070726F-
  2174 000003C4 6772616D0A         
  2175 000003C9 202020207769746820-             db `    with the following message:\n\n\0`
  2175 000003D2 74686520666F6C6C6F-
  2175 000003DB 77696E67206D657373-
  2175 000003E4 6167653A0A0A00     
  2176                                  fmt_scheme_error_part_3:
  2177 000003EB 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2177 000003F4 210A0A00           
