     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 1
    84 00000007 010000000000000001-     	dq 1, 1
    84 00000010 00000000000000     
    85                                  
    86                                  section .bss
    87                                  free_var_0:	; location of null?
    88 00000000 ????????????????        	resq 1
    89                                  free_var_1:	; location of pair?
    90 00000008 ????????????????        	resq 1
    91                                  free_var_2:	; location of void?
    92 00000010 ????????????????        	resq 1
    93                                  free_var_3:	; location of char?
    94 00000018 ????????????????        	resq 1
    95                                  free_var_4:	; location of string?
    96 00000020 ????????????????        	resq 1
    97                                  free_var_5:	; location of symbol?
    98 00000028 ????????????????        	resq 1
    99                                  free_var_6:	; location of vector?
   100 00000030 ????????????????        	resq 1
   101                                  free_var_7:	; location of procedure?
   102 00000038 ????????????????        	resq 1
   103                                  free_var_8:	; location of real?
   104 00000040 ????????????????        	resq 1
   105                                  free_var_9:	; location of rational?
   106 00000048 ????????????????        	resq 1
   107                                  free_var_10:	; location of boolean?
   108 00000050 ????????????????        	resq 1
   109                                  free_var_11:	; location of number?
   110 00000058 ????????????????        	resq 1
   111                                  free_var_12:	; location of collection?
   112 00000060 ????????????????        	resq 1
   113                                  free_var_13:	; location of cons
   114 00000068 ????????????????        	resq 1
   115                                  free_var_14:	; location of display-sexpr
   116 00000070 ????????????????        	resq 1
   117                                  free_var_15:	; location of write-char
   118 00000078 ????????????????        	resq 1
   119                                  free_var_16:	; location of car
   120 00000080 ????????????????        	resq 1
   121                                  free_var_17:	; location of cdr
   122 00000088 ????????????????        	resq 1
   123                                  free_var_18:	; location of string-length
   124 00000090 ????????????????        	resq 1
   125                                  free_var_19:	; location of vector-length
   126 00000098 ????????????????        	resq 1
   127                                  free_var_20:	; location of real->integer
   128 000000A0 ????????????????        	resq 1
   129                                  free_var_21:	; location of exit
   130 000000A8 ????????????????        	resq 1
   131                                  free_var_22:	; location of integer->real
   132 000000B0 ????????????????        	resq 1
   133                                  free_var_23:	; location of rational->real
   134 000000B8 ????????????????        	resq 1
   135                                  free_var_24:	; location of char->integer
   136 000000C0 ????????????????        	resq 1
   137                                  free_var_25:	; location of integer->char
   138 000000C8 ????????????????        	resq 1
   139                                  free_var_26:	; location of trng
   140 000000D0 ????????????????        	resq 1
   141                                  free_var_27:	; location of zero?
   142 000000D8 ????????????????        	resq 1
   143                                  free_var_28:	; location of integer?
   144 000000E0 ????????????????        	resq 1
   145                                  free_var_29:	; location of __bin-apply
   146 000000E8 ????????????????        	resq 1
   147                                  free_var_30:	; location of __bin-add-rr
   148 000000F0 ????????????????        	resq 1
   149                                  free_var_31:	; location of __bin-sub-rr
   150 000000F8 ????????????????        	resq 1
   151                                  free_var_32:	; location of __bin-mul-rr
   152 00000100 ????????????????        	resq 1
   153                                  free_var_33:	; location of __bin-div-rr
   154 00000108 ????????????????        	resq 1
   155                                  free_var_34:	; location of __bin-add-qq
   156 00000110 ????????????????        	resq 1
   157                                  free_var_35:	; location of __bin-sub-qq
   158 00000118 ????????????????        	resq 1
   159                                  free_var_36:	; location of __bin-mul-qq
   160 00000120 ????????????????        	resq 1
   161                                  free_var_37:	; location of __bin-div-qq
   162 00000128 ????????????????        	resq 1
   163                                  free_var_38:	; location of error
   164 00000130 ????????????????        	resq 1
   165                                  free_var_39:	; location of __bin-less-than-rr
   166 00000138 ????????????????        	resq 1
   167                                  free_var_40:	; location of __bin-less-than-qq
   168 00000140 ????????????????        	resq 1
   169                                  free_var_41:	; location of __bin-equal-rr
   170 00000148 ????????????????        	resq 1
   171                                  free_var_42:	; location of __bin-equal-qq
   172 00000150 ????????????????        	resq 1
   173                                  free_var_43:	; location of quotient
   174 00000158 ????????????????        	resq 1
   175                                  free_var_44:	; location of remainder
   176 00000160 ????????????????        	resq 1
   177                                  free_var_45:	; location of set-car!
   178 00000168 ????????????????        	resq 1
   179                                  free_var_46:	; location of set-cdr!
   180 00000170 ????????????????        	resq 1
   181                                  free_var_47:	; location of string-ref
   182 00000178 ????????????????        	resq 1
   183                                  free_var_48:	; location of vector-ref
   184 00000180 ????????????????        	resq 1
   185                                  free_var_49:	; location of vector-set!
   186 00000188 ????????????????        	resq 1
   187                                  free_var_50:	; location of string-set!
   188 00000190 ????????????????        	resq 1
   189                                  free_var_51:	; location of make-vector
   190 00000198 ????????????????        	resq 1
   191                                  free_var_52:	; location of make-string
   192 000001A0 ????????????????        	resq 1
   193                                  free_var_53:	; location of numerator
   194 000001A8 ????????????????        	resq 1
   195                                  free_var_54:	; location of denominator
   196 000001B0 ????????????????        	resq 1
   197                                  free_var_55:	; location of eq?
   198 000001B8 ????????????????        	resq 1
   199                                  
   200                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   201                                  global main
   202                                  section .text
   203                                  main:
   204 00000000 C8000000                        enter 0, 0
   205                                          
   206                                  	; building closure for null?
   207 00000004 48BF-                   	mov rdi, free_var_0
   207 00000006 [0000000000000000] 
   208 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   208 00000010 [5A0C000000000000] 
   209 00000018 E8150C0000              	call bind_primitive
   210                                  
   211                                  	; building closure for pair?
   212 0000001D 48BF-                   	mov rdi, free_var_1
   212 0000001F [0800000000000000] 
   213 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   213 00000029 [900C000000000000] 
   214 00000031 E8FC0B0000              	call bind_primitive
   215                                  
   216                                  	; building closure for void?
   217 00000036 48BF-                   	mov rdi, free_var_2
   217 00000038 [1000000000000000] 
   218 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   218 00000042 [C60C000000000000] 
   219 0000004A E8E30B0000              	call bind_primitive
   220                                  
   221                                  	; building closure for char?
   222 0000004F 48BF-                   	mov rdi, free_var_3
   222 00000051 [1800000000000000] 
   223 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   223 0000005B [FC0C000000000000] 
   224 00000063 E8CA0B0000              	call bind_primitive
   225                                  
   226                                  	; building closure for string?
   227 00000068 48BF-                   	mov rdi, free_var_4
   227 0000006A [2000000000000000] 
   228 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   228 00000074 [320D000000000000] 
   229 0000007C E8B10B0000              	call bind_primitive
   230                                  
   231                                  	; building closure for symbol?
   232 00000081 48BF-                   	mov rdi, free_var_5
   232 00000083 [2800000000000000] 
   233 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   233 0000008D [680D000000000000] 
   234 00000095 E8980B0000              	call bind_primitive
   235                                  
   236                                  	; building closure for vector?
   237 0000009A 48BF-                   	mov rdi, free_var_6
   237 0000009C [3000000000000000] 
   238 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   238 000000A6 [9E0D000000000000] 
   239 000000AE E87F0B0000              	call bind_primitive
   240                                  
   241                                  	; building closure for procedure?
   242 000000B3 48BF-                   	mov rdi, free_var_7
   242 000000B5 [3800000000000000] 
   243 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   243 000000BF [D40D000000000000] 
   244 000000C7 E8660B0000              	call bind_primitive
   245                                  
   246                                  	; building closure for real?
   247 000000CC 48BF-                   	mov rdi, free_var_8
   247 000000CE [4000000000000000] 
   248 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   248 000000D8 [0A0E000000000000] 
   249 000000E0 E84D0B0000              	call bind_primitive
   250                                  
   251                                  	; building closure for rational?
   252 000000E5 48BF-                   	mov rdi, free_var_9
   252 000000E7 [4800000000000000] 
   253 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   253 000000F1 [400E000000000000] 
   254 000000F9 E8340B0000              	call bind_primitive
   255                                  
   256                                  	; building closure for boolean?
   257 000000FE 48BF-                   	mov rdi, free_var_10
   257 00000100 [5000000000000000] 
   258 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   258 0000010A [760E000000000000] 
   259 00000112 E81B0B0000              	call bind_primitive
   260                                  
   261                                  	; building closure for number?
   262 00000117 48BF-                   	mov rdi, free_var_11
   262 00000119 [5800000000000000] 
   263 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   263 00000123 [AE0E000000000000] 
   264 0000012B E8020B0000              	call bind_primitive
   265                                  
   266                                  	; building closure for collection?
   267 00000130 48BF-                   	mov rdi, free_var_12
   267 00000132 [6000000000000000] 
   268 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   268 0000013C [E60E000000000000] 
   269 00000144 E8E90A0000              	call bind_primitive
   270                                  
   271                                  	; building closure for cons
   272 00000149 48BF-                   	mov rdi, free_var_13
   272 0000014B [6800000000000000] 
   273 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   273 00000155 [1E0F000000000000] 
   274 0000015D E8D00A0000              	call bind_primitive
   275                                  
   276                                  	; building closure for display-sexpr
   277 00000162 48BF-                   	mov rdi, free_var_14
   277 00000164 [7000000000000000] 
   278 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   278 0000016E [520F000000000000] 
   279 00000176 E8B70A0000              	call bind_primitive
   280                                  
   281                                  	; building closure for write-char
   282 0000017B 48BF-                   	mov rdi, free_var_15
   282 0000017D [7800000000000000] 
   283 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   283 00000187 [7C0F000000000000] 
   284 0000018F E89E0A0000              	call bind_primitive
   285                                  
   286                                  	; building closure for car
   287 00000194 48BF-                   	mov rdi, free_var_16
   287 00000196 [8000000000000000] 
   288 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   288 000001A0 [CA0F000000000000] 
   289 000001A8 E8850A0000              	call bind_primitive
   290                                  
   291                                  	; building closure for cdr
   292 000001AD 48BF-                   	mov rdi, free_var_17
   292 000001AF [8800000000000000] 
   293 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   293 000001B9 [F20F000000000000] 
   294 000001C1 E86C0A0000              	call bind_primitive
   295                                  
   296                                  	; building closure for string-length
   297 000001C6 48BF-                   	mov rdi, free_var_18
   297 000001C8 [9000000000000000] 
   298 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   298 000001D2 [1A10000000000000] 
   299 000001DA E8530A0000              	call bind_primitive
   300                                  
   301                                  	; building closure for vector-length
   302 000001DF 48BF-                   	mov rdi, free_var_19
   302 000001E1 [9800000000000000] 
   303 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   303 000001EB [4710000000000000] 
   304 000001F3 E83A0A0000              	call bind_primitive
   305                                  
   306                                  	; building closure for real->integer
   307 000001F8 48BF-                   	mov rdi, free_var_20
   307 000001FA [A000000000000000] 
   308 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   308 00000204 [7410000000000000] 
   309 0000020C E8210A0000              	call bind_primitive
   310                                  
   311                                  	; building closure for exit
   312 00000211 48BF-                   	mov rdi, free_var_21
   312 00000213 [A800000000000000] 
   313 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   313 0000021D [A710000000000000] 
   314 00000225 E8080A0000              	call bind_primitive
   315                                  
   316                                  	; building closure for integer->real
   317 0000022A 48BF-                   	mov rdi, free_var_22
   317 0000022C [B000000000000000] 
   318 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   318 00000236 [C410000000000000] 
   319 0000023E E8EF090000              	call bind_primitive
   320                                  
   321                                  	; building closure for rational->real
   322 00000243 48BF-                   	mov rdi, free_var_23
   322 00000245 [B800000000000000] 
   323 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   323 0000024F [0111000000000000] 
   324 00000257 E8D6090000              	call bind_primitive
   325                                  
   326                                  	; building closure for char->integer
   327 0000025C 48BF-                   	mov rdi, free_var_24
   327 0000025E [C000000000000000] 
   328 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   328 00000268 [4011000000000000] 
   329 00000270 E8BD090000              	call bind_primitive
   330                                  
   331                                  	; building closure for integer->char
   332 00000275 48BF-                   	mov rdi, free_var_25
   332 00000277 [C800000000000000] 
   333 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   333 00000281 [7511000000000000] 
   334 00000289 E8A4090000              	call bind_primitive
   335                                  
   336                                  	; building closure for trng
   337 0000028E 48BF-                   	mov rdi, free_var_26
   337 00000290 [D000000000000000] 
   338 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   338 0000029A [CF11000000000000] 
   339 000002A2 E88B090000              	call bind_primitive
   340                                  
   341                                  	; building closure for zero?
   342 000002A7 48BF-                   	mov rdi, free_var_27
   342 000002A9 [D800000000000000] 
   343 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   343 000002B3 [F211000000000000] 
   344 000002BB E872090000              	call bind_primitive
   345                                  
   346                                  	; building closure for integer?
   347 000002C0 48BF-                   	mov rdi, free_var_28
   347 000002C2 [E000000000000000] 
   348 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   348 000002CC [4D12000000000000] 
   349 000002D4 E859090000              	call bind_primitive
   350                                  
   351                                  	; building closure for __bin-apply
   352 000002D9 48BF-                   	mov rdi, free_var_29
   352 000002DB [E800000000000000] 
   353 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   353 000002E5 [5A0C000000000000] 
   354 000002ED E840090000              	call bind_primitive
   355                                  
   356                                  	; building closure for __bin-add-rr
   357 000002F2 48BF-                   	mov rdi, free_var_30
   357 000002F4 [F000000000000000] 
   358 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   358 000002FE [8A12000000000000] 
   359 00000306 E827090000              	call bind_primitive
   360                                  
   361                                  	; building closure for __bin-sub-rr
   362 0000030B 48BF-                   	mov rdi, free_var_31
   362 0000030D [F800000000000000] 
   363 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   363 00000317 [CE12000000000000] 
   364 0000031F E80E090000              	call bind_primitive
   365                                  
   366                                  	; building closure for __bin-mul-rr
   367 00000324 48BF-                   	mov rdi, free_var_32
   367 00000326 [0001000000000000] 
   368 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   368 00000330 [1213000000000000] 
   369 00000338 E8F5080000              	call bind_primitive
   370                                  
   371                                  	; building closure for __bin-div-rr
   372 0000033D 48BF-                   	mov rdi, free_var_33
   372 0000033F [0801000000000000] 
   373 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   373 00000349 [5613000000000000] 
   374 00000351 E8DC080000              	call bind_primitive
   375                                  
   376                                  	; building closure for __bin-add-qq
   377 00000356 48BF-                   	mov rdi, free_var_34
   377 00000358 [1001000000000000] 
   378 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   378 00000362 [A813000000000000] 
   379 0000036A E8C3080000              	call bind_primitive
   380                                  
   381                                  	; building closure for __bin-sub-qq
   382 0000036F 48BF-                   	mov rdi, free_var_35
   382 00000371 [1801000000000000] 
   383 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   383 0000037B [1014000000000000] 
   384 00000383 E8AA080000              	call bind_primitive
   385                                  
   386                                  	; building closure for __bin-mul-qq
   387 00000388 48BF-                   	mov rdi, free_var_36
   387 0000038A [2001000000000000] 
   388 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   388 00000394 [7814000000000000] 
   389 0000039C E891080000              	call bind_primitive
   390                                  
   391                                  	; building closure for __bin-div-qq
   392 000003A1 48BF-                   	mov rdi, free_var_37
   392 000003A3 [2801000000000000] 
   393 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   393 000003AD [D014000000000000] 
   394 000003B5 E878080000              	call bind_primitive
   395                                  
   396                                  	; building closure for error
   397 000003BA 48BF-                   	mov rdi, free_var_38
   397 000003BC [3001000000000000] 
   398 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   398 000003C6 [9E15000000000000] 
   399 000003CE E85F080000              	call bind_primitive
   400                                  
   401                                  	; building closure for __bin-less-than-rr
   402 000003D3 48BF-                   	mov rdi, free_var_39
   402 000003D5 [3801000000000000] 
   403 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   403 000003DF [3A16000000000000] 
   404 000003E7 E846080000              	call bind_primitive
   405                                  
   406                                  	; building closure for __bin-less-than-qq
   407 000003EC 48BF-                   	mov rdi, free_var_40
   407 000003EE [4001000000000000] 
   408 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   408 000003F8 [9116000000000000] 
   409 00000400 E82D080000              	call bind_primitive
   410                                  
   411                                  	; building closure for __bin-equal-rr
   412 00000405 48BF-                   	mov rdi, free_var_41
   412 00000407 [4801000000000000] 
   413 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   413 00000411 [F416000000000000] 
   414 00000419 E814080000              	call bind_primitive
   415                                  
   416                                  	; building closure for __bin-equal-qq
   417 0000041E 48BF-                   	mov rdi, free_var_42
   417 00000420 [5001000000000000] 
   418 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   418 0000042A [4B17000000000000] 
   419 00000432 E8FB070000              	call bind_primitive
   420                                  
   421                                  	; building closure for quotient
   422 00000437 48BF-                   	mov rdi, free_var_43
   422 00000439 [5801000000000000] 
   423 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   423 00000443 [AE17000000000000] 
   424 0000044B E8E2070000              	call bind_primitive
   425                                  
   426                                  	; building closure for remainder
   427 00000450 48BF-                   	mov rdi, free_var_44
   427 00000452 [6001000000000000] 
   428 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   428 0000045C [1418000000000000] 
   429 00000464 E8C9070000              	call bind_primitive
   430                                  
   431                                  	; building closure for set-car!
   432 00000469 48BF-                   	mov rdi, free_var_45
   432 0000046B [6801000000000000] 
   433 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   433 00000475 [7A18000000000000] 
   434 0000047D E8B0070000              	call bind_primitive
   435                                  
   436                                  	; building closure for set-cdr!
   437 00000482 48BF-                   	mov rdi, free_var_46
   437 00000484 [7001000000000000] 
   438 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   438 0000048E [B018000000000000] 
   439 00000496 E897070000              	call bind_primitive
   440                                  
   441                                  	; building closure for string-ref
   442 0000049B 48BF-                   	mov rdi, free_var_47
   442 0000049D [7801000000000000] 
   443 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   443 000004A7 [E618000000000000] 
   444 000004AF E87E070000              	call bind_primitive
   445                                  
   446                                  	; building closure for vector-ref
   447 000004B4 48BF-                   	mov rdi, free_var_48
   447 000004B6 [8001000000000000] 
   448 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   448 000004C0 [5119000000000000] 
   449 000004C8 E865070000              	call bind_primitive
   450                                  
   451                                  	; building closure for vector-set!
   452 000004CD 48BF-                   	mov rdi, free_var_49
   452 000004CF [8801000000000000] 
   453 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   453 000004D9 [AD19000000000000] 
   454 000004E1 E84C070000              	call bind_primitive
   455                                  
   456                                  	; building closure for string-set!
   457 000004E6 48BF-                   	mov rdi, free_var_50
   457 000004E8 [9001000000000000] 
   458 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   458 000004F2 [171A000000000000] 
   459 000004FA E833070000              	call bind_primitive
   460                                  
   461                                  	; building closure for make-vector
   462 000004FF 48BF-                   	mov rdi, free_var_51
   462 00000501 [9801000000000000] 
   463 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   463 0000050B [8C1A000000000000] 
   464 00000513 E81A070000              	call bind_primitive
   465                                  
   466                                  	; building closure for make-string
   467 00000518 48BF-                   	mov rdi, free_var_52
   467 0000051A [A001000000000000] 
   468 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   468 00000524 [F61A000000000000] 
   469 0000052C E801070000              	call bind_primitive
   470                                  
   471                                  	; building closure for numerator
   472 00000531 48BF-                   	mov rdi, free_var_53
   472 00000533 [A801000000000000] 
   473 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   473 0000053D [681B000000000000] 
   474 00000545 E8E8060000              	call bind_primitive
   475                                  
   476                                  	; building closure for denominator
   477 0000054A 48BF-                   	mov rdi, free_var_54
   477 0000054C [B001000000000000] 
   478 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   478 00000556 [951B000000000000] 
   479 0000055E E8CF060000              	call bind_primitive
   480                                  
   481                                  	; building closure for eq?
   482 00000563 48BF-                   	mov rdi, free_var_55
   482 00000565 [B801000000000000] 
   483 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   483 0000056F [C21B000000000000] 
   484 00000577 E8B6060000              	call bind_primitive
   485                                  
   486                                  	 
   487 0000057C 48B8-                   	mov rax,6+L_constants
   487 0000057E [0600000000000000] 
   488 00000586 50                      	push rax
   489                                  
   490 00000587 6A01                    	push 1
   491 00000589 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   492 0000058E E85D010000              	call malloc
   493 00000593 50                      	push rax
   494 00000594 BF00000000              	mov rdi, 8 * 0	; new rib
   495 00000599 E852010000              	call malloc
   496 0000059E 50                      	push rax
   497 0000059F BF08000000              	mov rdi, 8 * 1	; extended env
   498 000005A4 E847010000              	call malloc
   499 000005A9 488B7D10                	mov rdi, ENV
   500 000005AD BE00000000              	mov rsi, 0
   501 000005B2 BA01000000              	mov rdx, 1
   502                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   503 000005B7 4883FE01                	cmp rsi, 1
   504 000005BB 7410                    	je .L_lambda_simple_env_end_0001
   505 000005BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   506 000005C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
   507 000005C5 48FFC6                  	inc rsi
   508 000005C8 48FFC2                  	inc rdx
   509 000005CB EBEA                    	jmp .L_lambda_simple_env_loop_0001
   510                                  .L_lambda_simple_env_end_0001:
   511 000005CD 5B                      	pop rbx
   512 000005CE BE00000000              	mov rsi, 0
   513                                  .L_lambda_simple_params_loop_0001:	; copy params
   514 000005D3 4883FE00                	cmp rsi, 0
   515 000005D7 740E                    	je .L_lambda_simple_params_end_0001
   516 000005D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   517 000005DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
   518 000005E2 48FFC6                  	inc rsi
   519 000005E5 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   520                                  .L_lambda_simple_params_end_0001:
   521 000005E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   522 000005EA 4889C3                  	mov rbx, rax
   523 000005ED 58                      	pop rax
   524 000005EE C60005                  	mov byte [rax], T_closure
   525 000005F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   526 000005F5 48C74009[FF050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   527 000005FD EB1F                    	jmp .L_lambda_simple_end_0001
   528                                  .L_lambda_simple_code_0001:	; lambda-simple body
   529 000005FF 48837C241001            	cmp qword [rsp + 8 * 2], 1
   530 00000605 740B                    	je .L_lambda_simple_arity_check_ok_0001
   531 00000607 FF742410                	push qword [rsp + 8 * 2]
   532 0000060B 6A01                    	push 1
   533 0000060D E9A0000000              	jmp L_error_incorrect_arity_simple
   534                                  .L_lambda_simple_arity_check_ok_0001:
   535 00000612 C8000000                	enter 0, 0
   536 00000616 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
   537 0000061A C9                      	leave
   538 0000061B C21800                  	ret 8 * (2 + 1)
   539                                  .L_lambda_simple_end_0001:	; new closure is in rax
   540                                  	assert_closure(rax)
    42 0000061E 803805              <1>  cmp byte [%1], %2
    43 00000621 0F8565170000        <1>  jne L_error_incorrect_type
   541 00000627 750C                    	jne .L_error_incorrect_type_0001
   542 00000629 50                      	push rax 
   543 0000062A FFD0                    	call rax
   544 0000062C 4883C408                add rsp,8*1
   545 00000630 5B                      	pop rbx
   546 00000631 488D24DC                	lea rsp, [rsp + 8 * rbx]
   547                                  ;	shl rbx, 3
   548                                  ;	add rsp, rbx
   549                                  	.L_error_incorrect_type_0001:
   550                                  
   551 00000635 4889C7                  	mov rdi, rax
   552 00000638 E8C4000000              	call print_sexpr_if_not_void
   553                                  
   554 0000063D 48BF-                           mov rdi, fmt_memory_usage
   554 0000063F [7600000000000000] 
   555 00000647 488B3425[FD000000]              mov rsi, qword [top_of_memory]
   556 0000064F 4881EE[C0010000]                sub rsi, memory
   557 00000656 B800000000                      mov rax, 0
   558 0000065B E8(00000000)                    call printf
   559 00000660 C9                      	leave
   560 00000661 C3                      	ret
   561                                  
   562                                  L_error_non_closure:
   563 00000662 488B3C25[00000000]              mov rdi, qword [stderr]
   564 0000066A 48BE-                           mov rsi, fmt_non_closure
   564 0000066C [AD00000000000000] 
   565 00000674 B800000000                      mov rax, 0
   566 00000679 E8(00000000)                    call fprintf
   567 0000067E 48C7C0FEFFFFFF                  mov rax, -2
   568 00000685 E8(00000000)                    call exit
   569                                  
   570                                  L_error_improper_list:
   571 0000068A 488B3C25[00000000]      	mov rdi, qword [stderr]
   572 00000692 48BE-                   	mov rsi, fmt_error_improper_list
   572 00000694 [D500000000000000] 
   573 0000069C B800000000              	mov rax, 0
   574 000006A1 E8(00000000)            	call fprintf
   575 000006A6 48C7C0F9FFFFFF          	mov rax, -7
   576 000006AD E8(00000000)            	call exit
   577                                  
   578                                  L_error_incorrect_arity_simple:
   579 000006B2 488B3C25[00000000]              mov rdi, qword [stderr]
   580 000006BA 48BE-                           mov rsi, fmt_incorrect_arity_simple
   580 000006BC [1700000000000000] 
   581 000006C4 EB12                            jmp L_error_incorrect_arity_common
   582                                  L_error_incorrect_arity_opt:
   583 000006C6 488B3C25[00000000]              mov rdi, qword [stderr]
   584 000006CE 48BE-                           mov rsi, fmt_incorrect_arity_opt
   584 000006D0 [4200000000000000] 
   585                                  L_error_incorrect_arity_common:
   586 000006D8 5A                              pop rdx
   587 000006D9 59                              pop rcx
   588 000006DA B800000000                      mov rax, 0
   589 000006DF E8(00000000)                    call fprintf
   590 000006E4 48C7C0FAFFFFFF                  mov rax, -6
   591 000006EB E8(00000000)                    call exit
   592                                  
   593                                  section .data
   594                                  fmt_incorrect_arity_simple:
   595 00000017 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   595 00000020 74656420256C642061-
   595 00000029 7267756D656E74732C-
   595 00000032 206275742067697665-
   595 0000003B 6E20256C640A00     
   596                                  fmt_incorrect_arity_opt:
   597 00000042 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   597 0000004B 746564206174206C65-
   597 00000054 61737420256C642061-
   597 0000005D 7267756D656E74732C-
   597 00000066 206275742067697665-
   597 0000006F 6E20256C640A00     
   598                                  fmt_memory_usage:
   599 00000076 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   599 0000007F 6420256C6420627974-
   599 00000088 6573206F662064796E-
   599 00000091 616D6963616C6C792D-
   599 0000009A 616C6C6F6361746564-
   599 000000A3 206D656D6F72790A0A-
   599 000000AC 00                 
   600                                  fmt_non_closure:
   601 000000AD 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   601 000000B6 7074696E6720746F20-
   601 000000BF 6170706C792061206E-
   601 000000C8 6F6E2D636C6F737572-
   601 000000D1 65210A00           
   602                                  fmt_error_improper_list:
   603 000000D5 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   603 000000DE 7267756D656E742069-
   603 000000E7 73206E6F7420612070-
   603 000000F0 726F706572206C6973-
   603 000000F9 74210A00           
   604                                  
   605                                  section .bss
   606                                  memory:
   607 000001C0 <res 40000000h>         	resb gbytes(1)
   608                                  
   609                                  section .data
   610                                  top_of_memory:
   611 000000FD [C001000000000000]              dq memory
   612                                  
   613                                  section .text
   614                                  malloc:
   615 000006F0 488B0425[FD000000]              mov rax, qword [top_of_memory]
   616 000006F8 48013C25[FD000000]              add qword [top_of_memory], rdi
   617 00000700 C3                              ret
   618                                          
   619                                  print_sexpr_if_not_void:
   620 00000701 4881FF[00000000]        	cmp rdi, sob_void
   621 00000708 7501                    	jne print_sexpr
   622 0000070A C3                      	ret
   623                                  
   624                                  section .data
   625                                  fmt_void:
   626 00000105 233C766F69643E00        	db `#<void>\0`
   627                                  fmt_nil:
   628 0000010D 282900                  	db `()\0`
   629                                  fmt_boolean_false:
   630 00000110 236600                  	db `#f\0`
   631                                  fmt_boolean_true:
   632 00000113 237400                  	db `#t\0`
   633                                  fmt_char_backslash:
   634 00000116 235C5C00                	db `#\\\\\0`
   635                                  fmt_char_dquote:
   636 0000011A 235C2200                	db `#\\"\0`
   637                                  fmt_char_simple:
   638 0000011E 235C256300              	db `#\\%c\0`
   639                                  fmt_char_null:
   640 00000123 235C6E756C00            	db `#\\nul\0`
   641                                  fmt_char_bell:
   642 00000129 235C62656C6C00          	db `#\\bell\0`
   643                                  fmt_char_backspace:
   644 00000130 235C6261636B737061-     	db `#\\backspace\0`
   644 00000139 636500             
   645                                  fmt_char_tab:
   646 0000013C 235C74616200            	db `#\\tab\0`
   647                                  fmt_char_newline:
   648 00000142 235C6E65776C696E65-     	db `#\\newline\0`
   648 0000014B 00                 
   649                                  fmt_char_formfeed:
   650 0000014C 235C7061676500          	db `#\\page\0`
   651                                  fmt_char_return:
   652 00000153 235C72657475726E00      	db `#\\return\0`
   653                                  fmt_char_escape:
   654 0000015C 235C65736300            	db `#\\esc\0`
   655                                  fmt_char_space:
   656 00000162 235C737061636500        	db `#\\space\0`
   657                                  fmt_char_hex:
   658 0000016A 235C782530325800        	db `#\\x%02X\0`
   659                                  fmt_closure:
   660 00000172 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   660 0000017B 206174203078253038-
   660 00000184 5820656E763D307825-
   660 0000018D 30385820636F64653D-
   660 00000196 3078253038583E00   
   661                                  fmt_lparen:
   662 0000019E 2800                    	db `(\0`
   663                                  fmt_dotted_pair:
   664 000001A0 202E2000                	db ` . \0`
   665                                  fmt_rparen:
   666 000001A4 2900                    	db `)\0`
   667                                  fmt_space:
   668 000001A6 2000                    	db ` \0`
   669                                  fmt_empty_vector:
   670 000001A8 23282900                	db `#()\0`
   671                                  fmt_vector:
   672 000001AC 232800                  	db `#(\0`
   673                                  fmt_real:
   674 000001AF 256600                  	db `%f\0`
   675                                  fmt_fraction:
   676 000001B2 256C642F256C6400        	db `%ld/%ld\0`
   677                                  fmt_zero:
   678 000001BA 3000                    	db `0\0`
   679                                  fmt_int:
   680 000001BC 256C6400                	db `%ld\0`
   681                                  fmt_unknown_sexpr_error:
   682 000001C0 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   682 000001C9 6F723A20556E6B6E6F-
   682 000001D2 776E2074797065206F-
   682 000001DB 662073657870722028-
   682 000001E4 3078253032582920   
   683 000001EC 617420616464726573-     	db `at address 0x%08X\n\n\0`
   683 000001F5 73203078253038580A-
   683 000001FE 0A00               
   684                                  fmt_dquote:
   685 00000200 2200                    	db `\"\0`
   686                                  fmt_string_char:
   687 00000202 256300                          db `%c\0`
   688                                  fmt_string_char_7:
   689 00000205 5C6100                          db `\\a\0`
   690                                  fmt_string_char_8:
   691 00000208 5C6200                          db `\\b\0`
   692                                  fmt_string_char_9:
   693 0000020B 5C7400                          db `\\t\0`
   694                                  fmt_string_char_10:
   695 0000020E 5C6E00                          db `\\n\0`
   696                                  fmt_string_char_11:
   697 00000211 5C7600                          db `\\v\0`
   698                                  fmt_string_char_12:
   699 00000214 5C6600                          db `\\f\0`
   700                                  fmt_string_char_13:
   701 00000217 5C7200                          db `\\r\0`
   702                                  fmt_string_char_34:
   703 0000021A 5C2200                          db `\\"\0`
   704                                  fmt_string_char_92:
   705 0000021D 5C5C00                          db `\\\\\0`
   706                                  fmt_string_char_hex:
   707 00000220 5C7825583B00                    db `\\x%X;\0`
   708                                  
   709                                  section .text
   710                                  
   711                                  print_sexpr:
   712                                  	ENTER
    33 0000070B C8000000            <1>  enter 0, 0
    34 0000070F 4883E4F0            <1>  and rsp, ~15
   713 00000713 8A07                    	mov al, byte [rdi]
   714 00000715 3C00                    	cmp al, T_void
   715 00000717 744D                    	je .Lvoid
   716 00000719 3C01                    	cmp al, T_nil
   717 0000071B 7458                    	je .Lnil
   718 0000071D 3C09                    	cmp al, T_boolean_false
   719 0000071F 7463                    	je .Lboolean_false
   720 00000721 3C0A                    	cmp al, T_boolean_true
   721 00000723 746E                    	je .Lboolean_true
   722 00000725 3C02                    	cmp al, T_char
   723 00000727 7479                    	je .Lchar
   724 00000729 3C04                    	cmp al, T_symbol
   725 0000072B 0F84BB010000            	je .Lsymbol
   726 00000731 3C21                    	cmp al, T_pair
   727 00000733 0F84D6010000            	je .Lpair
   728 00000739 3C22                    	cmp al, T_vector
   729 0000073B 0F8478020000            	je .Lvector
   730 00000741 3C05                    	cmp al, T_closure
   731 00000743 0F8489010000            	je .Lclosure
   732 00000749 3C12                    	cmp al, T_real
   733 0000074B 0F84F3020000            	je .Lreal
   734 00000751 3C11                    	cmp al, T_rational
   735 00000753 0F8419030000            	je .Lrational
   736 00000759 3C03                    	cmp al, T_string
   737 0000075B 0F8452030000            	je .Lstring
   738                                  
   739 00000761 E98A040000              	jmp .Lunknown_sexpr_type
   740                                  
   741                                  .Lvoid:
   742 00000766 48BF-                   	mov rdi, fmt_void
   742 00000768 [0501000000000000] 
   743 00000770 E9AF040000              	jmp .Lemit
   744                                  
   745                                  .Lnil:
   746 00000775 48BF-                   	mov rdi, fmt_nil
   746 00000777 [0D01000000000000] 
   747 0000077F E9A0040000              	jmp .Lemit
   748                                  
   749                                  .Lboolean_false:
   750 00000784 48BF-                   	mov rdi, fmt_boolean_false
   750 00000786 [1001000000000000] 
   751 0000078E E991040000              	jmp .Lemit
   752                                  
   753                                  .Lboolean_true:
   754 00000793 48BF-                   	mov rdi, fmt_boolean_true
   754 00000795 [1301000000000000] 
   755 0000079D E982040000              	jmp .Lemit
   756                                  
   757                                  .Lchar:
   758 000007A2 8A4701                  	mov al, byte [rdi + 1]
   759 000007A5 3C20                    	cmp al, ' '
   760 000007A7 7E28                    	jle .Lchar_whitespace
   761 000007A9 3C5C                    	cmp al, 92 		; backslash
   762 000007AB 0F847C000000            	je .Lchar_backslash
   763 000007B1 3C22                    	cmp al, '"'
   764 000007B3 0F8483000000            	je .Lchar_dquote
   765 000007B9 4825FF000000            	and rax, 255
   766 000007BF 48BF-                   	mov rdi, fmt_char_simple
   766 000007C1 [1E01000000000000] 
   767 000007C9 4889C6                  	mov rsi, rax
   768 000007CC E953040000              	jmp .Lemit
   769                                  
   770                                  .Lchar_whitespace:
   771 000007D1 3C00                    	cmp al, 0
   772 000007D3 7476                    	je .Lchar_null
   773 000007D5 3C07                    	cmp al, 7
   774 000007D7 0F847D000000            	je .Lchar_bell
   775 000007DD 3C08                    	cmp al, 8
   776 000007DF 0F8484000000            	je .Lchar_backspace
   777 000007E5 3C09                    	cmp al, 9
   778 000007E7 0F848B000000            	je .Lchar_tab
   779 000007ED 3C0A                    	cmp al, 10
   780 000007EF 0F8492000000            	je .Lchar_newline
   781 000007F5 3C0C                    	cmp al, 12
   782 000007F7 0F8499000000            	je .Lchar_formfeed
   783 000007FD 3C0D                    	cmp al, 13
   784 000007FF 0F84A0000000            	je .Lchar_return
   785 00000805 3C1B                    	cmp al, 27
   786 00000807 0F84A7000000            	je .Lchar_escape
   787 0000080D 4825FF000000            	and rax, 255
   788 00000813 3C20                    	cmp al, ' '
   789 00000815 0F84A8000000            	je .Lchar_space
   790 0000081B 48BF-                   	mov rdi, fmt_char_hex
   790 0000081D [6A01000000000000] 
   791 00000825 4889C6                  	mov rsi, rax
   792 00000828 E9F7030000              	jmp .Lemit	
   793                                  
   794                                  .Lchar_backslash:
   795 0000082D 48BF-                   	mov rdi, fmt_char_backslash
   795 0000082F [1601000000000000] 
   796 00000837 E9E8030000              	jmp .Lemit
   797                                  
   798                                  .Lchar_dquote:
   799 0000083C 48BF-                   	mov rdi, fmt_char_dquote
   799 0000083E [1A01000000000000] 
   800 00000846 E9D9030000              	jmp .Lemit
   801                                  
   802                                  .Lchar_null:
   803 0000084B 48BF-                   	mov rdi, fmt_char_null
   803 0000084D [2301000000000000] 
   804 00000855 E9CA030000              	jmp .Lemit
   805                                  
   806                                  .Lchar_bell:
   807 0000085A 48BF-                   	mov rdi, fmt_char_bell
   807 0000085C [2901000000000000] 
   808 00000864 E9BB030000              	jmp .Lemit
   809                                  
   810                                  .Lchar_backspace:
   811 00000869 48BF-                   	mov rdi, fmt_char_backspace
   811 0000086B [3001000000000000] 
   812 00000873 E9AC030000              	jmp .Lemit
   813                                  
   814                                  .Lchar_tab:
   815 00000878 48BF-                   	mov rdi, fmt_char_tab
   815 0000087A [3C01000000000000] 
   816 00000882 E99D030000              	jmp .Lemit
   817                                  
   818                                  .Lchar_newline:
   819 00000887 48BF-                   	mov rdi, fmt_char_newline
   819 00000889 [4201000000000000] 
   820 00000891 E98E030000              	jmp .Lemit
   821                                  
   822                                  .Lchar_formfeed:
   823 00000896 48BF-                   	mov rdi, fmt_char_formfeed
   823 00000898 [4C01000000000000] 
   824 000008A0 E97F030000              	jmp .Lemit
   825                                  
   826                                  .Lchar_return:
   827 000008A5 48BF-                   	mov rdi, fmt_char_return
   827 000008A7 [5301000000000000] 
   828 000008AF E970030000              	jmp .Lemit
   829                                  
   830                                  .Lchar_escape:
   831 000008B4 48BF-                   	mov rdi, fmt_char_escape
   831 000008B6 [5C01000000000000] 
   832 000008BE E961030000              	jmp .Lemit
   833                                  
   834                                  .Lchar_space:
   835 000008C3 48BF-                   	mov rdi, fmt_char_space
   835 000008C5 [6201000000000000] 
   836 000008CD E952030000              	jmp .Lemit
   837                                  
   838                                  .Lclosure:
   839 000008D2 4889FE                  	mov rsi, qword rdi
   840 000008D5 48BF-                   	mov rdi, fmt_closure
   840 000008D7 [7201000000000000] 
   841 000008DF 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   842 000008E3 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   843 000008E7 E938030000              	jmp .Lemit
   844                                  
   845                                  .Lsymbol:
   846 000008EC 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   847 000008F0 BE01000000              	mov rsi, 1		 ; size = 1 byte
   848 000008F5 488B5701                	mov rdx, qword [rdi + 1] ; length
   849 000008F9 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   850 000008FD 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   851 00000905 E8(00000000)            	call fwrite
   852 0000090A E921030000              	jmp .Lend
   853                                  	
   854                                  .Lpair:
   855 0000090F 57                      	push rdi
   856 00000910 48BF-                   	mov rdi, fmt_lparen
   856 00000912 [9E01000000000000] 
   857 0000091A B800000000              	mov rax, 0
   858                                          ENTER
    33 0000091F C8000000            <1>  enter 0, 0
    34 00000923 4883E4F0            <1>  and rsp, ~15
   859 00000927 E8(00000000)            	call printf
   860                                          LEAVE
    38 0000092C C9                  <1>  leave
   861 0000092D 488B3C24                	mov rdi, qword [rsp] 	; pair
   862 00000931 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   863 00000935 E8D1FDFFFF              	call print_sexpr
   864 0000093A 5F                      	pop rdi 		; pair
   865 0000093B 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   866                                  .Lcdr:
   867 0000093F 8A07                    	mov al, byte [rdi]
   868 00000941 3C01                    	cmp al, T_nil
   869 00000943 7435                    	je .Lcdr_nil
   870 00000945 3C21                    	cmp al, T_pair
   871 00000947 7447                    	je .Lcdr_pair
   872 00000949 57                      	push rdi
   873 0000094A 48BF-                   	mov rdi, fmt_dotted_pair
   873 0000094C [A001000000000000] 
   874 00000954 B800000000              	mov rax, 0
   875 00000959 E8(00000000)            	call printf
   876 0000095E 5F                      	pop rdi
   877 0000095F E8A7FDFFFF              	call print_sexpr
   878 00000964 48BF-                   	mov rdi, fmt_rparen
   878 00000966 [A401000000000000] 
   879 0000096E B800000000              	mov rax, 0
   880 00000973 E8(00000000)            	call printf
   881                                  	LEAVE
    38 00000978 C9                  <1>  leave
   882 00000979 C3                      	ret
   883                                  
   884                                  .Lcdr_nil:
   885 0000097A 48BF-                   	mov rdi, fmt_rparen
   885 0000097C [A401000000000000] 
   886 00000984 B800000000              	mov rax, 0
   887 00000989 E8(00000000)            	call printf
   888                                  	LEAVE
    38 0000098E C9                  <1>  leave
   889 0000098F C3                      	ret
   890                                  
   891                                  .Lcdr_pair:
   892 00000990 57                      	push rdi
   893 00000991 48BF-                   	mov rdi, fmt_space
   893 00000993 [A601000000000000] 
   894 0000099B B800000000              	mov rax, 0
   895 000009A0 E8(00000000)            	call printf
   896 000009A5 488B3C24                	mov rdi, qword [rsp]
   897 000009A9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   898 000009AD E859FDFFFF              	call print_sexpr
   899 000009B2 5F                      	pop rdi
   900 000009B3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   901 000009B7 EB86                    	jmp .Lcdr
   902                                  
   903                                  .Lvector:
   904 000009B9 488B4701                	mov rax, qword [rdi + 1] ; length
   905 000009BD 4883F800                	cmp rax, 0
   906 000009C1 7472                    	je .Lvector_empty
   907 000009C3 57                      	push rdi
   908 000009C4 48BF-                   	mov rdi, fmt_vector
   908 000009C6 [AC01000000000000] 
   909 000009CE B800000000              	mov rax, 0
   910 000009D3 E8(00000000)            	call printf
   911 000009D8 488B3C24                	mov rdi, qword [rsp]
   912 000009DC FF7701                  	push qword [rdi + 1]
   913 000009DF 6A01                    	push 1
   914 000009E1 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   915 000009E5 E821FDFFFF              	call print_sexpr
   916                                  .Lvector_loop:
   917                                  	; [rsp] index
   918                                  	; [rsp + 8*1] limit
   919                                  	; [rsp + 8*2] vector
   920 000009EA 488B0424                	mov rax, qword [rsp]
   921 000009EE 483B442408              	cmp rax, qword [rsp + 8*1]
   922 000009F3 742D                    	je .Lvector_end
   923 000009F5 48BF-                   	mov rdi, fmt_space
   923 000009F7 [A601000000000000] 
   924 000009FF B800000000              	mov rax, 0
   925 00000A04 E8(00000000)            	call printf
   926 00000A09 488B0424                	mov rax, qword [rsp]
   927 00000A0D 488B5C2410              	mov rbx, qword [rsp + 8*2]
   928 00000A12 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   929 00000A17 E8EFFCFFFF              	call print_sexpr
   930 00000A1C 48FF0424                	inc qword [rsp]
   931 00000A20 EBC8                    	jmp .Lvector_loop
   932                                  
   933                                  .Lvector_end:
   934 00000A22 4883C418                	add rsp, 8*3
   935 00000A26 48BF-                   	mov rdi, fmt_rparen
   935 00000A28 [A401000000000000] 
   936 00000A30 E9EF010000              	jmp .Lemit	
   937                                  
   938                                  .Lvector_empty:
   939 00000A35 48BF-                   	mov rdi, fmt_empty_vector
   939 00000A37 [A801000000000000] 
   940 00000A3F E9E0010000              	jmp .Lemit
   941                                  
   942                                  .Lreal:
   943 00000A44 FF7701                  	push qword [rdi + 1]
   944 00000A47 F20F100424              	movsd xmm0, qword [rsp]
   945 00000A4C 4883C408                	add rsp, 8*1
   946 00000A50 48BF-                   	mov rdi, fmt_real
   946 00000A52 [AF01000000000000] 
   947 00000A5A B801000000              	mov rax, 1
   948                                  	ENTER
    33 00000A5F C8000000            <1>  enter 0, 0
    34 00000A63 4883E4F0            <1>  and rsp, ~15
   949 00000A67 E8(00000000)            	call printf
   950                                  	LEAVE
    38 00000A6C C9                  <1>  leave
   951 00000A6D E9BE010000              	jmp .Lend
   952                                  
   953                                  .Lrational:
   954 00000A72 488B7701                	mov rsi, qword [rdi + 1]
   955 00000A76 488B5709                	mov rdx, qword [rdi + 1 + 8]
   956 00000A7A 4883FE00                	cmp rsi, 0
   957 00000A7E 7415                    	je .Lrat_zero
   958 00000A80 4883FA01                	cmp rdx, 1
   959 00000A84 741E                    	je .Lrat_int
   960 00000A86 48BF-                   	mov rdi, fmt_fraction
   960 00000A88 [B201000000000000] 
   961 00000A90 E98F010000              	jmp .Lemit
   962                                  
   963                                  .Lrat_zero:
   964 00000A95 48BF-                   	mov rdi, fmt_zero
   964 00000A97 [BA01000000000000] 
   965 00000A9F E980010000              	jmp .Lemit
   966                                  
   967                                  .Lrat_int:
   968 00000AA4 48BF-                   	mov rdi, fmt_int
   968 00000AA6 [BC01000000000000] 
   969 00000AAE E971010000              	jmp .Lemit
   970                                  
   971                                  .Lstring:
   972 00000AB3 488D4709                	lea rax, [rdi + 1 + 8]
   973 00000AB7 50                      	push rax
   974 00000AB8 FF7701                  	push qword [rdi + 1]
   975 00000ABB 48BF-                   	mov rdi, fmt_dquote
   975 00000ABD [0002000000000000] 
   976 00000AC5 B800000000              	mov rax, 0
   977                                  	ENTER
    33 00000ACA C8000000            <1>  enter 0, 0
    34 00000ACE 4883E4F0            <1>  and rsp, ~15
   978 00000AD2 E8(00000000)            	call printf
   979                                  	LEAVE
    38 00000AD7 C9                  <1>  leave
   980                                  .Lstring_loop:
   981                                  	; qword [rsp]: limit
   982                                  	; qword [rsp + 8*1]: char *
   983 00000AD8 48833C2400              	cmp qword [rsp], 0
   984 00000ADD 0F84FD000000            	je .Lstring_end
   985 00000AE3 488B442408              	mov rax, qword [rsp + 8*1]
   986 00000AE8 8A00                    	mov al, byte [rax]
   987 00000AEA 4825FF000000            	and rax, 255
   988 00000AF0 3C07                    	cmp al, 7
   989 00000AF2 7468                            je .Lstring_char_7
   990 00000AF4 3C08                            cmp al, 8
   991 00000AF6 7470                            je .Lstring_char_8
   992 00000AF8 3C09                            cmp al, 9
   993 00000AFA 7478                            je .Lstring_char_9
   994 00000AFC 3C0A                            cmp al, 10
   995 00000AFE 0F847C000000                    je .Lstring_char_10
   996 00000B04 3C0B                            cmp al, 11
   997 00000B06 0F8480000000                    je .Lstring_char_11
   998 00000B0C 3C0C                            cmp al, 12
   999 00000B0E 0F8484000000                    je .Lstring_char_12
  1000 00000B14 3C0D                            cmp al, 13
  1001 00000B16 0F8488000000                    je .Lstring_char_13
  1002 00000B1C 3C22                            cmp al, 34
  1003 00000B1E 0F848C000000                    je .Lstring_char_34
  1004 00000B24 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1006 00000B26 3C20                            cmp al, ' '
  1007 00000B28 0F8CA0000000                    jl .Lstring_char_hex
  1008 00000B2E 48BF-                           mov rdi, fmt_string_char
  1008 00000B30 [0202000000000000] 
  1009 00000B38 4889C6                          mov rsi, rax
  1010                                  .Lstring_char_emit:
  1011 00000B3B B800000000                      mov rax, 0
  1012                                          ENTER
    33 00000B40 C8000000            <1>  enter 0, 0
    34 00000B44 4883E4F0            <1>  and rsp, ~15
  1013 00000B48 E8(00000000)                    call printf
  1014                                          LEAVE
    38 00000B4D C9                  <1>  leave
  1015 00000B4E 48FF0C24                        dec qword [rsp]
  1016 00000B52 48FF442408                      inc qword [rsp + 8*1]
  1017 00000B57 E97CFFFFFF                      jmp .Lstring_loop
  1018                                  
  1019                                  .Lstring_char_7:
  1020 00000B5C 48BF-                           mov rdi, fmt_string_char_7
  1020 00000B5E [0502000000000000] 
  1021 00000B66 EBD3                            jmp .Lstring_char_emit
  1022                                  
  1023                                  .Lstring_char_8:
  1024 00000B68 48BF-                           mov rdi, fmt_string_char_8
  1024 00000B6A [0802000000000000] 
  1025 00000B72 EBC7                            jmp .Lstring_char_emit
  1026                                          
  1027                                  .Lstring_char_9:
  1028 00000B74 48BF-                           mov rdi, fmt_string_char_9
  1028 00000B76 [0B02000000000000] 
  1029 00000B7E EBBB                            jmp .Lstring_char_emit
  1030                                  
  1031                                  .Lstring_char_10:
  1032 00000B80 48BF-                           mov rdi, fmt_string_char_10
  1032 00000B82 [0E02000000000000] 
  1033 00000B8A EBAF                            jmp .Lstring_char_emit
  1034                                  
  1035                                  .Lstring_char_11:
  1036 00000B8C 48BF-                           mov rdi, fmt_string_char_11
  1036 00000B8E [1102000000000000] 
  1037 00000B96 EBA3                            jmp .Lstring_char_emit
  1038                                  
  1039                                  .Lstring_char_12:
  1040 00000B98 48BF-                           mov rdi, fmt_string_char_12
  1040 00000B9A [1402000000000000] 
  1041 00000BA2 EB97                            jmp .Lstring_char_emit
  1042                                  
  1043                                  .Lstring_char_13:
  1044 00000BA4 48BF-                           mov rdi, fmt_string_char_13
  1044 00000BA6 [1702000000000000] 
  1045 00000BAE EB8B                            jmp .Lstring_char_emit
  1046                                  
  1047                                  .Lstring_char_34:
  1048 00000BB0 48BF-                           mov rdi, fmt_string_char_34
  1048 00000BB2 [1A02000000000000] 
  1049 00000BBA E97CFFFFFF                      jmp .Lstring_char_emit
  1050                                  
  1051                                  .Lstring_char_92:
  1052 00000BBF 48BF-                           mov rdi, fmt_string_char_92
  1052 00000BC1 [1D02000000000000] 
  1053 00000BC9 E96DFFFFFF                      jmp .Lstring_char_emit
  1054                                  
  1055                                  .Lstring_char_hex:
  1056 00000BCE 48BF-                           mov rdi, fmt_string_char_hex
  1056 00000BD0 [2002000000000000] 
  1057 00000BD8 4889C6                          mov rsi, rax
  1058 00000BDB E95BFFFFFF                      jmp .Lstring_char_emit        
  1059                                  
  1060                                  .Lstring_end:
  1061 00000BE0 4883C410                	add rsp, 8 * 2
  1062 00000BE4 48BF-                   	mov rdi, fmt_dquote
  1062 00000BE6 [0002000000000000] 
  1063 00000BEE EB34                    	jmp .Lemit
  1064                                  
  1065                                  .Lunknown_sexpr_type:
  1066 00000BF0 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1066 00000BF2 [C001000000000000] 
  1067 00000BFA 4825FF000000            	and rax, 255
  1068 00000C00 4889C2                  	mov rdx, rax
  1069 00000C03 4889F9                  	mov rcx, rdi
  1070 00000C06 488B3C25[00000000]      	mov rdi, qword [stderr]
  1071 00000C0E B800000000              	mov rax, 0
  1072 00000C13 E8(00000000)            	call fprintf
  1073 00000C18 48C7C0FFFFFFFF          	mov rax, -1
  1074 00000C1F E8(00000000)            	call exit
  1075                                  
  1076                                  .Lemit:
  1077 00000C24 B800000000              	mov rax, 0
  1078 00000C29 E8(00000000)            	call printf
  1079 00000C2E EB00                    	jmp .Lend
  1080                                  
  1081                                  .Lend:
  1082                                  	LEAVE
    38 00000C30 C9                  <1>  leave
  1083 00000C31 C3                      	ret
  1084                                  
  1085                                  ;;; rdi: address of free variable
  1086                                  ;;; rsi: address of code-pointer
  1087                                  bind_primitive:
  1088                                          ENTER
    33 00000C32 C8000000            <1>  enter 0, 0
    34 00000C36 4883E4F0            <1>  and rsp, ~15
  1089 00000C3A 57                              push rdi
  1090 00000C3B BF11000000                      mov rdi, (1 + 8 + 8)
  1091 00000C40 E8ABFAFFFF                      call malloc
  1092 00000C45 5F                              pop rdi
  1093 00000C46 C60005                          mov byte [rax], T_closure
  1094 00000C49 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1095 00000C51 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1096 00000C55 488907                          mov qword [rdi], rax
  1097                                          LEAVE
    38 00000C58 C9                  <1>  leave
  1098 00000C59 C3                              ret
  1099                                  
  1100                                  
  1101                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1102                                  L_code_ptr_bin_apply:
  1103                                          
  1104                                  L_code_ptr_is_null:
  1105                                          ENTER
    33 00000C5A C8000000            <1>  enter 0, 0
    34 00000C5E 4883E4F0            <1>  and rsp, ~15
  1106 00000C62 48837D1801                      cmp COUNT, 1
  1107 00000C67 0F856F100000                    jne L_error_arg_count_1
  1108 00000C6D 488B4520                        mov rax, PARAM(0)
  1109 00000C71 803801                          cmp byte [rax], T_nil
  1110 00000C74 750C                            jne .L_false
  1111 00000C76 48B8-                           mov rax, sob_boolean_true
  1111 00000C78 [0300000000000000] 
  1112 00000C80 EB0A                            jmp .L_end
  1113                                  .L_false:
  1114 00000C82 48B8-                           mov rax, sob_boolean_false
  1114 00000C84 [0200000000000000] 
  1115                                  .L_end:
  1116                                          LEAVE
    38 00000C8C C9                  <1>  leave
  1117 00000C8D C21800                          ret AND_KILL_FRAME(1)
  1118                                  
  1119                                  L_code_ptr_is_pair:
  1120                                          ENTER
    33 00000C90 C8000000            <1>  enter 0, 0
    34 00000C94 4883E4F0            <1>  and rsp, ~15
  1121 00000C98 48837D1801                      cmp COUNT, 1
  1122 00000C9D 0F8539100000                    jne L_error_arg_count_1
  1123 00000CA3 488B4520                        mov rax, PARAM(0)
  1124 00000CA7 803821                          cmp byte [rax], T_pair
  1125 00000CAA 750C                            jne .L_false
  1126 00000CAC 48B8-                           mov rax, sob_boolean_true
  1126 00000CAE [0300000000000000] 
  1127 00000CB6 EB0A                            jmp .L_end
  1128                                  .L_false:
  1129 00000CB8 48B8-                           mov rax, sob_boolean_false
  1129 00000CBA [0200000000000000] 
  1130                                  .L_end:
  1131                                          LEAVE
    38 00000CC2 C9                  <1>  leave
  1132 00000CC3 C21800                          ret AND_KILL_FRAME(1)
  1133                                          
  1134                                  L_code_ptr_is_void:
  1135                                          ENTER
    33 00000CC6 C8000000            <1>  enter 0, 0
    34 00000CCA 4883E4F0            <1>  and rsp, ~15
  1136 00000CCE 48837D1801                      cmp COUNT, 1
  1137 00000CD3 0F8503100000                    jne L_error_arg_count_1
  1138 00000CD9 488B4520                        mov rax, PARAM(0)
  1139 00000CDD 803800                          cmp byte [rax], T_void
  1140 00000CE0 750C                            jne .L_false
  1141 00000CE2 48B8-                           mov rax, sob_boolean_true
  1141 00000CE4 [0300000000000000] 
  1142 00000CEC EB0A                            jmp .L_end
  1143                                  .L_false:
  1144 00000CEE 48B8-                           mov rax, sob_boolean_false
  1144 00000CF0 [0200000000000000] 
  1145                                  .L_end:
  1146                                          LEAVE
    38 00000CF8 C9                  <1>  leave
  1147 00000CF9 C21800                          ret AND_KILL_FRAME(1)
  1148                                  
  1149                                  L_code_ptr_is_char:
  1150                                          ENTER
    33 00000CFC C8000000            <1>  enter 0, 0
    34 00000D00 4883E4F0            <1>  and rsp, ~15
  1151 00000D04 48837D1801                      cmp COUNT, 1
  1152 00000D09 0F85CD0F0000                    jne L_error_arg_count_1
  1153 00000D0F 488B4520                        mov rax, PARAM(0)
  1154 00000D13 803802                          cmp byte [rax], T_char
  1155 00000D16 750C                            jne .L_false
  1156 00000D18 48B8-                           mov rax, sob_boolean_true
  1156 00000D1A [0300000000000000] 
  1157 00000D22 EB0A                            jmp .L_end
  1158                                  .L_false:
  1159 00000D24 48B8-                           mov rax, sob_boolean_false
  1159 00000D26 [0200000000000000] 
  1160                                  .L_end:
  1161                                          LEAVE
    38 00000D2E C9                  <1>  leave
  1162 00000D2F C21800                          ret AND_KILL_FRAME(1)
  1163                                  
  1164                                  L_code_ptr_is_string:
  1165                                          ENTER
    33 00000D32 C8000000            <1>  enter 0, 0
    34 00000D36 4883E4F0            <1>  and rsp, ~15
  1166 00000D3A 48837D1801                      cmp COUNT, 1
  1167 00000D3F 0F85970F0000                    jne L_error_arg_count_1
  1168 00000D45 488B4520                        mov rax, PARAM(0)
  1169 00000D49 803803                          cmp byte [rax], T_string
  1170 00000D4C 750C                            jne .L_false
  1171 00000D4E 48B8-                           mov rax, sob_boolean_true
  1171 00000D50 [0300000000000000] 
  1172 00000D58 EB0A                            jmp .L_end
  1173                                  .L_false:
  1174 00000D5A 48B8-                           mov rax, sob_boolean_false
  1174 00000D5C [0200000000000000] 
  1175                                  .L_end:
  1176                                          LEAVE
    38 00000D64 C9                  <1>  leave
  1177 00000D65 C21800                          ret AND_KILL_FRAME(1)
  1178                                  
  1179                                  L_code_ptr_is_symbol:
  1180                                          ENTER
    33 00000D68 C8000000            <1>  enter 0, 0
    34 00000D6C 4883E4F0            <1>  and rsp, ~15
  1181 00000D70 48837D1801                      cmp COUNT, 1
  1182 00000D75 0F85610F0000                    jne L_error_arg_count_1
  1183 00000D7B 488B4520                        mov rax, PARAM(0)
  1184 00000D7F 803804                          cmp byte [rax], T_symbol
  1185 00000D82 750C                            jne .L_false
  1186 00000D84 48B8-                           mov rax, sob_boolean_true
  1186 00000D86 [0300000000000000] 
  1187 00000D8E EB0A                            jmp .L_end
  1188                                  .L_false:
  1189 00000D90 48B8-                           mov rax, sob_boolean_false
  1189 00000D92 [0200000000000000] 
  1190                                  .L_end:
  1191                                          LEAVE
    38 00000D9A C9                  <1>  leave
  1192 00000D9B C21800                          ret AND_KILL_FRAME(1)
  1193                                  
  1194                                  L_code_ptr_is_vector:
  1195                                          ENTER
    33 00000D9E C8000000            <1>  enter 0, 0
    34 00000DA2 4883E4F0            <1>  and rsp, ~15
  1196 00000DA6 48837D1801                      cmp COUNT, 1
  1197 00000DAB 0F852B0F0000                    jne L_error_arg_count_1
  1198 00000DB1 488B4520                        mov rax, PARAM(0)
  1199 00000DB5 803822                          cmp byte [rax], T_vector
  1200 00000DB8 750C                            jne .L_false
  1201 00000DBA 48B8-                           mov rax, sob_boolean_true
  1201 00000DBC [0300000000000000] 
  1202 00000DC4 EB0A                            jmp .L_end
  1203                                  .L_false:
  1204 00000DC6 48B8-                           mov rax, sob_boolean_false
  1204 00000DC8 [0200000000000000] 
  1205                                  .L_end:
  1206                                          LEAVE
    38 00000DD0 C9                  <1>  leave
  1207 00000DD1 C21800                          ret AND_KILL_FRAME(1)
  1208                                  
  1209                                  L_code_ptr_is_closure:
  1210                                          ENTER
    33 00000DD4 C8000000            <1>  enter 0, 0
    34 00000DD8 4883E4F0            <1>  and rsp, ~15
  1211 00000DDC 48837D1801                      cmp COUNT, 1
  1212 00000DE1 0F85F50E0000                    jne L_error_arg_count_1
  1213 00000DE7 488B4520                        mov rax, PARAM(0)
  1214 00000DEB 803805                          cmp byte [rax], T_closure
  1215 00000DEE 750C                            jne .L_false
  1216 00000DF0 48B8-                           mov rax, sob_boolean_true
  1216 00000DF2 [0300000000000000] 
  1217 00000DFA EB0A                            jmp .L_end
  1218                                  .L_false:
  1219 00000DFC 48B8-                           mov rax, sob_boolean_false
  1219 00000DFE [0200000000000000] 
  1220                                  .L_end:
  1221                                          LEAVE
    38 00000E06 C9                  <1>  leave
  1222 00000E07 C21800                          ret AND_KILL_FRAME(1)
  1223                                  
  1224                                  L_code_ptr_is_real:
  1225                                          ENTER
    33 00000E0A C8000000            <1>  enter 0, 0
    34 00000E0E 4883E4F0            <1>  and rsp, ~15
  1226 00000E12 48837D1801                      cmp COUNT, 1
  1227 00000E17 0F85BF0E0000                    jne L_error_arg_count_1
  1228 00000E1D 488B4520                        mov rax, PARAM(0)
  1229 00000E21 803812                          cmp byte [rax], T_real
  1230 00000E24 750C                            jne .L_false
  1231 00000E26 48B8-                           mov rax, sob_boolean_true
  1231 00000E28 [0300000000000000] 
  1232 00000E30 EB0A                            jmp .L_end
  1233                                  .L_false:
  1234 00000E32 48B8-                           mov rax, sob_boolean_false
  1234 00000E34 [0200000000000000] 
  1235                                  .L_end:
  1236                                          LEAVE
    38 00000E3C C9                  <1>  leave
  1237 00000E3D C21800                          ret AND_KILL_FRAME(1)
  1238                                  
  1239                                  L_code_ptr_is_rational:
  1240                                          ENTER
    33 00000E40 C8000000            <1>  enter 0, 0
    34 00000E44 4883E4F0            <1>  and rsp, ~15
  1241 00000E48 48837D1801                      cmp COUNT, 1
  1242 00000E4D 0F85890E0000                    jne L_error_arg_count_1
  1243 00000E53 488B4520                        mov rax, PARAM(0)
  1244 00000E57 803811                          cmp byte [rax], T_rational
  1245 00000E5A 750C                            jne .L_false
  1246 00000E5C 48B8-                           mov rax, sob_boolean_true
  1246 00000E5E [0300000000000000] 
  1247 00000E66 EB0A                            jmp .L_end
  1248                                  .L_false:
  1249 00000E68 48B8-                           mov rax, sob_boolean_false
  1249 00000E6A [0200000000000000] 
  1250                                  .L_end:
  1251                                          LEAVE
    38 00000E72 C9                  <1>  leave
  1252 00000E73 C21800                          ret AND_KILL_FRAME(1)
  1253                                  
  1254                                  L_code_ptr_is_boolean:
  1255                                          ENTER
    33 00000E76 C8000000            <1>  enter 0, 0
    34 00000E7A 4883E4F0            <1>  and rsp, ~15
  1256 00000E7E 48837D1801                      cmp COUNT, 1
  1257 00000E83 0F85530E0000                    jne L_error_arg_count_1
  1258 00000E89 488B4520                        mov rax, PARAM(0)
  1259 00000E8D 8A18                            mov bl, byte [rax]
  1260 00000E8F 80E308                          and bl, T_boolean
  1261 00000E92 740C                            je .L_false
  1262 00000E94 48B8-                           mov rax, sob_boolean_true
  1262 00000E96 [0300000000000000] 
  1263 00000E9E EB0A                            jmp .L_end
  1264                                  .L_false:
  1265 00000EA0 48B8-                           mov rax, sob_boolean_false
  1265 00000EA2 [0200000000000000] 
  1266                                  .L_end:
  1267                                          LEAVE
    38 00000EAA C9                  <1>  leave
  1268 00000EAB C21800                          ret AND_KILL_FRAME(1)
  1269                                          
  1270                                  L_code_ptr_is_number:
  1271                                          ENTER
    33 00000EAE C8000000            <1>  enter 0, 0
    34 00000EB2 4883E4F0            <1>  and rsp, ~15
  1272 00000EB6 48837D1801                      cmp COUNT, 1
  1273 00000EBB 0F851B0E0000                    jne L_error_arg_count_1
  1274 00000EC1 488B4520                        mov rax, PARAM(0)
  1275 00000EC5 8A18                            mov bl, byte [rax]
  1276 00000EC7 80E310                          and bl, T_number
  1277 00000ECA 740C                            je .L_false
  1278 00000ECC 48B8-                           mov rax, sob_boolean_true
  1278 00000ECE [0300000000000000] 
  1279 00000ED6 EB0A                            jmp .L_end
  1280                                  .L_false:
  1281 00000ED8 48B8-                           mov rax, sob_boolean_false
  1281 00000EDA [0200000000000000] 
  1282                                  .L_end:
  1283                                          LEAVE
    38 00000EE2 C9                  <1>  leave
  1284 00000EE3 C21800                          ret AND_KILL_FRAME(1)
  1285                                          
  1286                                  L_code_ptr_is_collection:
  1287                                          ENTER
    33 00000EE6 C8000000            <1>  enter 0, 0
    34 00000EEA 4883E4F0            <1>  and rsp, ~15
  1288 00000EEE 48837D1801                      cmp COUNT, 1
  1289 00000EF3 0F85E30D0000                    jne L_error_arg_count_1
  1290 00000EF9 488B4520                        mov rax, PARAM(0)
  1291 00000EFD 8A18                            mov bl, byte [rax]
  1292 00000EFF 80E320                          and bl, T_collection
  1293 00000F02 740C                            je .L_false
  1294 00000F04 48B8-                           mov rax, sob_boolean_true
  1294 00000F06 [0300000000000000] 
  1295 00000F0E EB0A                            jmp .L_end
  1296                                  .L_false:
  1297 00000F10 48B8-                           mov rax, sob_boolean_false
  1297 00000F12 [0200000000000000] 
  1298                                  .L_end:
  1299                                          LEAVE
    38 00000F1A C9                  <1>  leave
  1300 00000F1B C21800                          ret AND_KILL_FRAME(1)
  1301                                  
  1302                                  L_code_ptr_cons:
  1303                                          ENTER
    33 00000F1E C8000000            <1>  enter 0, 0
    34 00000F22 4883E4F0            <1>  and rsp, ~15
  1304 00000F26 48837D1802                      cmp COUNT, 2
  1305 00000F2B 0F85D70D0000                    jne L_error_arg_count_2
  1306 00000F31 BF11000000                      mov rdi, (1 + 8 + 8)
  1307 00000F36 E8B5F7FFFF                      call malloc
  1308 00000F3B C60021                          mov byte [rax], T_pair
  1309 00000F3E 488B5D20                        mov rbx, PARAM(0)
  1310 00000F42 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1311 00000F46 488B5D28                        mov rbx, PARAM(1)
  1312 00000F4A 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1313                                          LEAVE
    38 00000F4E C9                  <1>  leave
  1314 00000F4F C22000                          ret AND_KILL_FRAME(2)
  1315                                  
  1316                                  L_code_ptr_display_sexpr:
  1317                                          ENTER
    33 00000F52 C8000000            <1>  enter 0, 0
    34 00000F56 4883E4F0            <1>  and rsp, ~15
  1318 00000F5A 48837D1801                      cmp COUNT, 1
  1319 00000F5F 0F85770D0000                    jne L_error_arg_count_1
  1320 00000F65 488B7D20                        mov rdi, PARAM(0)
  1321 00000F69 E89DF7FFFF                      call print_sexpr
  1322 00000F6E 48B8-                           mov rax, sob_void
  1322 00000F70 [0000000000000000] 
  1323                                          LEAVE
    38 00000F78 C9                  <1>  leave
  1324 00000F79 C21800                          ret AND_KILL_FRAME(1)
  1325                                  
  1326                                  L_code_ptr_write_char:
  1327                                          ENTER
    33 00000F7C C8000000            <1>  enter 0, 0
    34 00000F80 4883E4F0            <1>  and rsp, ~15
  1328 00000F84 48837D1801                      cmp COUNT, 1
  1329 00000F89 0F854D0D0000                    jne L_error_arg_count_1
  1330 00000F8F 488B4520                        mov rax, PARAM(0)
  1331                                          assert_char(rax)
    42 00000F93 803802              <1>  cmp byte [%1], %2
    43 00000F96 0F85F00D0000        <1>  jne L_error_incorrect_type
  1332 00000F9C 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1333 00000F9F 4825FF000000                    and rax, 255
  1334 00000FA5 48BF-                           mov rdi, fmt_char
  1334 00000FA7 [2602000000000000] 
  1335 00000FAF 4889C6                          mov rsi, rax
  1336 00000FB2 B800000000                      mov rax, 0
  1337 00000FB7 E8(00000000)                    call printf
  1338 00000FBC 48B8-                           mov rax, sob_void
  1338 00000FBE [0000000000000000] 
  1339                                          LEAVE
    38 00000FC6 C9                  <1>  leave
  1340 00000FC7 C21800                          ret AND_KILL_FRAME(1)
  1341                                  
  1342                                  L_code_ptr_car:
  1343                                          ENTER
    33 00000FCA C8000000            <1>  enter 0, 0
    34 00000FCE 4883E4F0            <1>  and rsp, ~15
  1344 00000FD2 48837D1801                      cmp COUNT, 1
  1345 00000FD7 0F85FF0C0000                    jne L_error_arg_count_1
  1346 00000FDD 488B4520                        mov rax, PARAM(0)
  1347                                          assert_pair(rax)
    42 00000FE1 803821              <1>  cmp byte [%1], %2
    43 00000FE4 0F85A20D0000        <1>  jne L_error_incorrect_type
  1348 00000FEA 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1349                                          LEAVE
    38 00000FEE C9                  <1>  leave
  1350 00000FEF C21800                          ret AND_KILL_FRAME(1)
  1351                                          
  1352                                  L_code_ptr_cdr:
  1353                                          ENTER
    33 00000FF2 C8000000            <1>  enter 0, 0
    34 00000FF6 4883E4F0            <1>  and rsp, ~15
  1354 00000FFA 48837D1801                      cmp COUNT, 1
  1355 00000FFF 0F85D70C0000                    jne L_error_arg_count_1
  1356 00001005 488B4520                        mov rax, PARAM(0)
  1357                                          assert_pair(rax)
    42 00001009 803821              <1>  cmp byte [%1], %2
    43 0000100C 0F857A0D0000        <1>  jne L_error_incorrect_type
  1358 00001012 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1359                                          LEAVE
    38 00001016 C9                  <1>  leave
  1360 00001017 C21800                          ret AND_KILL_FRAME(1)
  1361                                          
  1362                                  L_code_ptr_string_length:
  1363                                          ENTER
    33 0000101A C8000000            <1>  enter 0, 0
    34 0000101E 4883E4F0            <1>  and rsp, ~15
  1364 00001022 48837D1801                      cmp COUNT, 1
  1365 00001027 0F85AF0C0000                    jne L_error_arg_count_1
  1366 0000102D 488B4520                        mov rax, PARAM(0)
  1367                                          assert_string(rax)
    42 00001031 803803              <1>  cmp byte [%1], %2
    43 00001034 0F85520D0000        <1>  jne L_error_incorrect_type
  1368 0000103A 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1369 0000103E E81F0C0000                      call make_integer
  1370                                          LEAVE
    38 00001043 C9                  <1>  leave
  1371 00001044 C21800                          ret AND_KILL_FRAME(1)
  1372                                  
  1373                                  L_code_ptr_vector_length:
  1374                                          ENTER
    33 00001047 C8000000            <1>  enter 0, 0
    34 0000104B 4883E4F0            <1>  and rsp, ~15
  1375 0000104F 48837D1801                      cmp COUNT, 1
  1376 00001054 0F85820C0000                    jne L_error_arg_count_1
  1377 0000105A 488B4520                        mov rax, PARAM(0)
  1378                                          assert_vector(rax)
    42 0000105E 803822              <1>  cmp byte [%1], %2
    43 00001061 0F85250D0000        <1>  jne L_error_incorrect_type
  1379 00001067 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1380 0000106B E8F20B0000                      call make_integer
  1381                                          LEAVE
    38 00001070 C9                  <1>  leave
  1382 00001071 C21800                          ret AND_KILL_FRAME(1)
  1383                                  
  1384                                  L_code_ptr_real_to_integer:
  1385                                          ENTER
    33 00001074 C8000000            <1>  enter 0, 0
    34 00001078 4883E4F0            <1>  and rsp, ~15
  1386 0000107C 48837D1801                      cmp COUNT, 1
  1387 00001081 0F85550C0000                    jne L_error_arg_count_1
  1388 00001087 488B5D20                        mov rbx, PARAM(0)
  1389                                          assert_real(rbx)
    42 0000108B 803B12              <1>  cmp byte [%1], %2
    43 0000108E 0F85F80C0000        <1>  jne L_error_incorrect_type
  1390 00001094 F20F104301                      movsd xmm0, qword [rbx + 1]
  1391 00001099 F2480F2CF8                      cvttsd2si rdi, xmm0
  1392 0000109E E8BF0B0000                      call make_integer
  1393                                          LEAVE
    38 000010A3 C9                  <1>  leave
  1394 000010A4 C21800                          ret AND_KILL_FRAME(1)
  1395                                  
  1396                                  L_code_ptr_exit:
  1397                                          ENTER
    33 000010A7 C8000000            <1>  enter 0, 0
    34 000010AB 4883E4F0            <1>  and rsp, ~15
  1398 000010AF 48837D1800                      cmp COUNT, 0
  1399 000010B4 0F85F60B0000                    jne L_error_arg_count_0
  1400 000010BA B800000000                      mov rax, 0
  1401 000010BF E8(00000000)                    call exit
  1402                                  
  1403                                  L_code_ptr_integer_to_real:
  1404                                          ENTER
    33 000010C4 C8000000            <1>  enter 0, 0
    34 000010C8 4883E4F0            <1>  and rsp, ~15
  1405 000010CC 48837D1801                      cmp COUNT, 1
  1406 000010D1 0F85050C0000                    jne L_error_arg_count_1
  1407 000010D7 488B4520                        mov rax, PARAM(0)
  1408                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010DB 803811              <2>  cmp byte [%1], %2
    43 000010DE 0F85A80C0000        <2>  jne L_error_incorrect_type
    48 000010E4 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010E9 0F859D0C0000        <1>  jne L_error_incorrect_type
  1409 000010EF FF7001                          push qword [rax + 1]
  1410 000010F2 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1411 000010F8 E8490B0000                      call make_real
  1412                                          LEAVE
    38 000010FD C9                  <1>  leave
  1413 000010FE C21800                          ret AND_KILL_FRAME(1)
  1414                                  
  1415                                  L_code_ptr_rational_to_real:
  1416                                          ENTER
    33 00001101 C8000000            <1>  enter 0, 0
    34 00001105 4883E4F0            <1>  and rsp, ~15
  1417 00001109 48837D1801                      cmp COUNT, 1
  1418 0000110E 0F85C80B0000                    jne L_error_arg_count_1
  1419 00001114 488B4520                        mov rax, PARAM(0)
  1420                                          assert_rational(rax)
    42 00001118 803811              <1>  cmp byte [%1], %2
    43 0000111B 0F856B0C0000        <1>  jne L_error_incorrect_type
  1421 00001121 FF7001                          push qword [rax + 1]
  1422 00001124 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1423 0000112A FF7009                          push qword [rax + 1 + 8]
  1424 0000112D F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1425 00001133 F20F5EC1                        divsd xmm0, xmm1
  1426 00001137 E80A0B0000                      call make_real
  1427                                          LEAVE
    38 0000113C C9                  <1>  leave
  1428 0000113D C21800                          ret AND_KILL_FRAME(1)
  1429                                  
  1430                                  L_code_ptr_char_to_integer:
  1431                                          ENTER
    33 00001140 C8000000            <1>  enter 0, 0
    34 00001144 4883E4F0            <1>  and rsp, ~15
  1432 00001148 48837D1801                      cmp COUNT, 1
  1433 0000114D 0F85890B0000                    jne L_error_arg_count_1
  1434 00001153 488B4520                        mov rax, PARAM(0)
  1435                                          assert_char(rax)
    42 00001157 803802              <1>  cmp byte [%1], %2
    43 0000115A 0F852C0C0000        <1>  jne L_error_incorrect_type
  1436 00001160 8A4001                          mov al, byte [rax + 1]
  1437 00001163 4825FF000000                    and rax, 255
  1438 00001169 4889C7                          mov rdi, rax
  1439 0000116C E8F10A0000                      call make_integer
  1440                                          LEAVE
    38 00001171 C9                  <1>  leave
  1441 00001172 C21800                          ret AND_KILL_FRAME(1)
  1442                                  
  1443                                  L_code_ptr_integer_to_char:
  1444                                          ENTER
    33 00001175 C8000000            <1>  enter 0, 0
    34 00001179 4883E4F0            <1>  and rsp, ~15
  1445 0000117D 48837D1801                      cmp COUNT, 1
  1446 00001182 0F85540B0000                    jne L_error_arg_count_1
  1447 00001188 488B4520                        mov rax, PARAM(0)
  1448                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000118C 803811              <2>  cmp byte [%1], %2
    43 0000118F 0F85F70B0000        <2>  jne L_error_incorrect_type
    48 00001195 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000119A 0F85EC0B0000        <1>  jne L_error_incorrect_type
  1449 000011A0 488B5801                        mov rbx, qword [rax + 1]
  1450 000011A4 4883FB00                        cmp rbx, 0
  1451 000011A8 0F8EDA0A0000                    jle L_error_integer_range
  1452 000011AE 4881FB00010000                  cmp rbx, 256
  1453 000011B5 0F8DCD0A0000                    jge L_error_integer_range
  1454 000011BB BF02000000                      mov rdi, (1 + 1)
  1455 000011C0 E82BF5FFFF                      call malloc
  1456 000011C5 C60002                          mov byte [rax], T_char
  1457 000011C8 885801                          mov byte [rax + 1], bl
  1458                                          LEAVE
    38 000011CB C9                  <1>  leave
  1459 000011CC C21800                          ret AND_KILL_FRAME(1)
  1460                                  
  1461                                  L_code_ptr_trng:
  1462                                          ENTER
    33 000011CF C8000000            <1>  enter 0, 0
    34 000011D3 4883E4F0            <1>  and rsp, ~15
  1463 000011D7 48837D1800                      cmp COUNT, 0
  1464 000011DC 0F85CE0A0000                    jne L_error_arg_count_0
  1465 000011E2 480FC7F7                        rdrand rdi
  1466 000011E6 48D1EF                          shr rdi, 1
  1467 000011E9 E8740A0000                      call make_integer
  1468                                          LEAVE
    38 000011EE C9                  <1>  leave
  1469 000011EF C21000                          ret AND_KILL_FRAME(0)
  1470                                  
  1471                                  L_code_ptr_is_zero:
  1472                                          ENTER
    33 000011F2 C8000000            <1>  enter 0, 0
    34 000011F6 4883E4F0            <1>  and rsp, ~15
  1473 000011FA 48837D1801                      cmp COUNT, 1
  1474 000011FF 0F85D70A0000                    jne L_error_arg_count_1
  1475 00001205 488B4520                        mov rax, PARAM(0)
  1476 00001209 803811                          cmp byte [rax], T_rational
  1477 0000120C 740A                            je .L_rational
  1478 0000120E 803812                          cmp byte [rax], T_real
  1479 00001211 740E                            je .L_real
  1480 00001213 E9740B0000                      jmp L_error_incorrect_type
  1481                                  .L_rational:
  1482 00001218 4883780100                      cmp qword [rax + 1], 0
  1483 0000121D 7420                            je .L_zero
  1484 0000121F EB12                            jmp .L_not_zero
  1485                                  .L_real:
  1486 00001221 660FEFC0                        pxor xmm0, xmm0
  1487 00001225 FF7001                          push qword [rax + 1]
  1488 00001228 F20F100C24                      movsd xmm1, qword [rsp]
  1489 0000122D 660F2EC1                        ucomisd xmm0, xmm1
  1490 00001231 740C                            je .L_zero
  1491                                  .L_not_zero:
  1492 00001233 48B8-                           mov rax, sob_boolean_false
  1492 00001235 [0200000000000000] 
  1493 0000123D EB0A                            jmp .L_end
  1494                                  .L_zero:
  1495 0000123F 48B8-                           mov rax, sob_boolean_true
  1495 00001241 [0300000000000000] 
  1496                                  .L_end:
  1497                                          LEAVE
    38 00001249 C9                  <1>  leave
  1498 0000124A C21800                          ret AND_KILL_FRAME(1)
  1499                                  
  1500                                  L_code_ptr_is_integer:
  1501                                          ENTER
    33 0000124D C8000000            <1>  enter 0, 0
    34 00001251 4883E4F0            <1>  and rsp, ~15
  1502 00001255 48837D1801                      cmp COUNT, 1
  1503 0000125A 0F857C0A0000                    jne L_error_arg_count_1
  1504 00001260 488B4520                        mov rax, PARAM(0)
  1505 00001264 803811                          cmp byte [rax], T_rational
  1506 00001267 7513                            jne .L_false
  1507 00001269 4883780901                      cmp qword [rax + 1 + 8], 1
  1508 0000126E 750C                            jne .L_false
  1509 00001270 48B8-                           mov rax, sob_boolean_true
  1509 00001272 [0300000000000000] 
  1510 0000127A EB0A                            jmp .L_exit
  1511                                  .L_false:
  1512 0000127C 48B8-                           mov rax, sob_boolean_false
  1512 0000127E [0200000000000000] 
  1513                                  .L_exit:
  1514                                          LEAVE
    38 00001286 C9                  <1>  leave
  1515 00001287 C21800                          ret AND_KILL_FRAME(1)
  1516                                  
  1517                                  L_code_ptr_raw_bin_add_rr:
  1518                                          ENTER
    33 0000128A C8000000            <1>  enter 0, 0
    34 0000128E 4883E4F0            <1>  and rsp, ~15
  1519 00001292 48837D1802                      cmp COUNT, 2
  1520 00001297 0F856B0A0000                    jne L_error_arg_count_2
  1521 0000129D 488B5D20                        mov rbx, PARAM(0)
  1522                                          assert_real(rbx)
    42 000012A1 803B12              <1>  cmp byte [%1], %2
    43 000012A4 0F85E20A0000        <1>  jne L_error_incorrect_type
  1523 000012AA 488B4D28                        mov rcx, PARAM(1)
  1524                                          assert_real(rcx)
    42 000012AE 803912              <1>  cmp byte [%1], %2
    43 000012B1 0F85D50A0000        <1>  jne L_error_incorrect_type
  1525 000012B7 F20F104301                      movsd xmm0, qword [rbx + 1]
  1526 000012BC F20F104901                      movsd xmm1, qword [rcx + 1]
  1527 000012C1 F20F58C1                        addsd xmm0, xmm1
  1528 000012C5 E87C090000                      call make_real
  1529                                          LEAVE
    38 000012CA C9                  <1>  leave
  1530 000012CB C22000                          ret AND_KILL_FRAME(2)
  1531                                  
  1532                                  L_code_ptr_raw_bin_sub_rr:
  1533                                          ENTER
    33 000012CE C8000000            <1>  enter 0, 0
    34 000012D2 4883E4F0            <1>  and rsp, ~15
  1534 000012D6 48837D1802                      cmp COUNT, 2
  1535 000012DB 0F85270A0000                    jne L_error_arg_count_2
  1536 000012E1 488B5D20                        mov rbx, PARAM(0)
  1537                                          assert_real(rbx)
    42 000012E5 803B12              <1>  cmp byte [%1], %2
    43 000012E8 0F859E0A0000        <1>  jne L_error_incorrect_type
  1538 000012EE 488B4D28                        mov rcx, PARAM(1)
  1539                                          assert_real(rcx)
    42 000012F2 803912              <1>  cmp byte [%1], %2
    43 000012F5 0F85910A0000        <1>  jne L_error_incorrect_type
  1540 000012FB F20F104301                      movsd xmm0, qword [rbx + 1]
  1541 00001300 F20F104901                      movsd xmm1, qword [rcx + 1]
  1542 00001305 F20F5CC1                        subsd xmm0, xmm1
  1543 00001309 E838090000                      call make_real
  1544                                          LEAVE
    38 0000130E C9                  <1>  leave
  1545 0000130F C22000                          ret AND_KILL_FRAME(2)
  1546                                  
  1547                                  L_code_ptr_raw_bin_mul_rr:
  1548                                          ENTER
    33 00001312 C8000000            <1>  enter 0, 0
    34 00001316 4883E4F0            <1>  and rsp, ~15
  1549 0000131A 48837D1802                      cmp COUNT, 2
  1550 0000131F 0F85E3090000                    jne L_error_arg_count_2
  1551 00001325 488B5D20                        mov rbx, PARAM(0)
  1552                                          assert_real(rbx)
    42 00001329 803B12              <1>  cmp byte [%1], %2
    43 0000132C 0F855A0A0000        <1>  jne L_error_incorrect_type
  1553 00001332 488B4D28                        mov rcx, PARAM(1)
  1554                                          assert_real(rcx)
    42 00001336 803912              <1>  cmp byte [%1], %2
    43 00001339 0F854D0A0000        <1>  jne L_error_incorrect_type
  1555 0000133F F20F104301                      movsd xmm0, qword [rbx + 1]
  1556 00001344 F20F104901                      movsd xmm1, qword [rcx + 1]
  1557 00001349 F20F59C1                        mulsd xmm0, xmm1
  1558 0000134D E8F4080000                      call make_real
  1559                                          LEAVE
    38 00001352 C9                  <1>  leave
  1560 00001353 C22000                          ret AND_KILL_FRAME(2)
  1561                                  
  1562                                  L_code_ptr_raw_bin_div_rr:
  1563                                          ENTER
    33 00001356 C8000000            <1>  enter 0, 0
    34 0000135A 4883E4F0            <1>  and rsp, ~15
  1564 0000135E 48837D1802                      cmp COUNT, 2
  1565 00001363 0F859F090000                    jne L_error_arg_count_2
  1566 00001369 488B5D20                        mov rbx, PARAM(0)
  1567                                          assert_real(rbx)
    42 0000136D 803B12              <1>  cmp byte [%1], %2
    43 00001370 0F85160A0000        <1>  jne L_error_incorrect_type
  1568 00001376 488B4D28                        mov rcx, PARAM(1)
  1569                                          assert_real(rcx)
    42 0000137A 803912              <1>  cmp byte [%1], %2
    43 0000137D 0F85090A0000        <1>  jne L_error_incorrect_type
  1570 00001383 F20F104301                      movsd xmm0, qword [rbx + 1]
  1571 00001388 F20F104901                      movsd xmm1, qword [rcx + 1]
  1572 0000138D 660FEFD2                        pxor xmm2, xmm2
  1573 00001391 660F2ECA                        ucomisd xmm1, xmm2
  1574 00001395 0F84190A0000                    je L_error_division_by_zero
  1575 0000139B F20F5EC1                        divsd xmm0, xmm1
  1576 0000139F E8A2080000                      call make_real
  1577                                          LEAVE
    38 000013A4 C9                  <1>  leave
  1578 000013A5 C22000                          ret AND_KILL_FRAME(2)
  1579                                  
  1580                                  L_code_ptr_raw_bin_add_qq:
  1581                                          ENTER
    33 000013A8 C8000000            <1>  enter 0, 0
    34 000013AC 4883E4F0            <1>  and rsp, ~15
  1582 000013B0 48837D1802                      cmp COUNT, 2
  1583 000013B5 0F854D090000                    jne L_error_arg_count_2
  1584 000013BB 4C8B4520                        mov r8, PARAM(0)
  1585                                          assert_rational(r8)
    42 000013BF 41803811            <1>  cmp byte [%1], %2
    43 000013C3 0F85C3090000        <1>  jne L_error_incorrect_type
  1586 000013C9 4C8B4D28                        mov r9, PARAM(1)
  1587                                          assert_rational(r9)
    42 000013CD 41803911            <1>  cmp byte [%1], %2
    43 000013D1 0F85B5090000        <1>  jne L_error_incorrect_type
  1588 000013D7 498B4001                        mov rax, qword [r8 + 1] ; num1
  1589 000013DB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1590 000013DF 4899                            cqo
  1591 000013E1 48F7EB                          imul rbx
  1592 000013E4 4889C6                          mov rsi, rax
  1593 000013E7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1594 000013EB 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1595 000013EF 4899                            cqo
  1596 000013F1 48F7EB                          imul rbx
  1597 000013F4 4801C6                          add rsi, rax
  1598 000013F7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1599 000013FB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1600 000013FF 4899                            cqo
  1601 00001401 48F7EB                          imul rbx
  1602 00001404 4889C7                          mov rdi, rax
  1603 00001407 E827010000                      call normalize_rational
  1604                                          LEAVE
    38 0000140C C9                  <1>  leave
  1605 0000140D C22000                          ret AND_KILL_FRAME(2)
  1606                                  
  1607                                  L_code_ptr_raw_bin_sub_qq:
  1608                                          ENTER
    33 00001410 C8000000            <1>  enter 0, 0
    34 00001414 4883E4F0            <1>  and rsp, ~15
  1609 00001418 48837D1802                      cmp COUNT, 2
  1610 0000141D 0F85E5080000                    jne L_error_arg_count_2
  1611 00001423 4C8B4520                        mov r8, PARAM(0)
  1612                                          assert_rational(r8)
    42 00001427 41803811            <1>  cmp byte [%1], %2
    43 0000142B 0F855B090000        <1>  jne L_error_incorrect_type
  1613 00001431 4C8B4D28                        mov r9, PARAM(1)
  1614                                          assert_rational(r9)
    42 00001435 41803911            <1>  cmp byte [%1], %2
    43 00001439 0F854D090000        <1>  jne L_error_incorrect_type
  1615 0000143F 498B4001                        mov rax, qword [r8 + 1] ; num1
  1616 00001443 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1617 00001447 4899                            cqo
  1618 00001449 48F7EB                          imul rbx
  1619 0000144C 4889C6                          mov rsi, rax
  1620 0000144F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1621 00001453 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1622 00001457 4899                            cqo
  1623 00001459 48F7EB                          imul rbx
  1624 0000145C 4829C6                          sub rsi, rax
  1625 0000145F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1626 00001463 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1627 00001467 4899                            cqo
  1628 00001469 48F7EB                          imul rbx
  1629 0000146C 4889C7                          mov rdi, rax
  1630 0000146F E8BF000000                      call normalize_rational
  1631                                          LEAVE
    38 00001474 C9                  <1>  leave
  1632 00001475 C22000                          ret AND_KILL_FRAME(2)
  1633                                  
  1634                                  L_code_ptr_raw_bin_mul_qq:
  1635                                          ENTER
    33 00001478 C8000000            <1>  enter 0, 0
    34 0000147C 4883E4F0            <1>  and rsp, ~15
  1636 00001480 48837D1802                      cmp COUNT, 2
  1637 00001485 0F857D080000                    jne L_error_arg_count_2
  1638 0000148B 4C8B4520                        mov r8, PARAM(0)
  1639                                          assert_rational(r8)
    42 0000148F 41803811            <1>  cmp byte [%1], %2
    43 00001493 0F85F3080000        <1>  jne L_error_incorrect_type
  1640 00001499 4C8B4D28                        mov r9, PARAM(1)
  1641                                          assert_rational(r9)
    42 0000149D 41803911            <1>  cmp byte [%1], %2
    43 000014A1 0F85E5080000        <1>  jne L_error_incorrect_type
  1642 000014A7 498B4001                        mov rax, qword [r8 + 1] ; num1
  1643 000014AB 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1644 000014AF 4899                            cqo
  1645 000014B1 48F7EB                          imul rbx
  1646 000014B4 4889C6                          mov rsi, rax
  1647 000014B7 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1648 000014BB 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1649 000014BF 4899                            cqo
  1650 000014C1 48F7EB                          imul rbx
  1651 000014C4 4889C7                          mov rdi, rax
  1652 000014C7 E867000000                      call normalize_rational
  1653                                          LEAVE
    38 000014CC C9                  <1>  leave
  1654 000014CD C22000                          ret AND_KILL_FRAME(2)
  1655                                          
  1656                                  L_code_ptr_raw_bin_div_qq:
  1657                                          ENTER
    33 000014D0 C8000000            <1>  enter 0, 0
    34 000014D4 4883E4F0            <1>  and rsp, ~15
  1658 000014D8 48837D1802                      cmp COUNT, 2
  1659 000014DD 0F8525080000                    jne L_error_arg_count_2
  1660 000014E3 4C8B4520                        mov r8, PARAM(0)
  1661                                          assert_rational(r8)
    42 000014E7 41803811            <1>  cmp byte [%1], %2
    43 000014EB 0F859B080000        <1>  jne L_error_incorrect_type
  1662 000014F1 4C8B4D28                        mov r9, PARAM(1)
  1663                                          assert_rational(r9)
    42 000014F5 41803911            <1>  cmp byte [%1], %2
    43 000014F9 0F858D080000        <1>  jne L_error_incorrect_type
  1664 000014FF 4983790100                      cmp qword [r9 + 1], 0
  1665 00001504 0F84AA080000                    je L_error_division_by_zero
  1666 0000150A 498B4001                        mov rax, qword [r8 + 1] ; num1
  1667 0000150E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1668 00001512 4899                            cqo
  1669 00001514 48F7EB                          imul rbx
  1670 00001517 4889C6                          mov rsi, rax
  1671 0000151A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1672 0000151E 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1673 00001522 4899                            cqo
  1674 00001524 48F7EB                          imul rbx
  1675 00001527 4889C7                          mov rdi, rax
  1676 0000152A E804000000                      call normalize_rational
  1677                                          LEAVE
    38 0000152F C9                  <1>  leave
  1678 00001530 C22000                          ret AND_KILL_FRAME(2)
  1679                                          
  1680                                  normalize_rational:
  1681 00001533 56                              push rsi
  1682 00001534 57                              push rdi
  1683 00001535 E839000000                      call gcd
  1684 0000153A 4889C3                          mov rbx, rax
  1685 0000153D 58                              pop rax
  1686 0000153E 4899                            cqo
  1687 00001540 48F7FB                          idiv rbx
  1688 00001543 4989C0                          mov r8, rax
  1689 00001546 58                              pop rax
  1690 00001547 4899                            cqo
  1691 00001549 48F7FB                          idiv rbx
  1692 0000154C 4989C1                          mov r9, rax
  1693 0000154F BF11000000                      mov rdi, (1 + 8 + 8)
  1694 00001554 E897F1FFFF                      call malloc
  1695 00001559 C60011                          mov byte [rax], T_rational
  1696 0000155C 4C894801                        mov qword [rax + 1], r9
  1697 00001560 4C894009                        mov qword [rax + 1 + 8], r8
  1698 00001564 C3                              ret
  1699                                  
  1700                                  iabs:
  1701 00001565 4889F8                          mov rax, rdi
  1702 00001568 4883F800                        cmp rax, 0
  1703 0000156C 7C01                            jl .Lneg
  1704 0000156E C3                              ret
  1705                                  .Lneg:
  1706 0000156F 48F7D8                          neg rax
  1707 00001572 C3                              ret
  1708                                  
  1709                                  gcd:
  1710 00001573 E8EDFFFFFF                      call iabs
  1711 00001578 4889C3                          mov rbx, rax
  1712 0000157B 4889F7                          mov rdi, rsi
  1713 0000157E E8E2FFFFFF                      call iabs
  1714 00001583 4883F800                        cmp rax, 0
  1715 00001587 7502                            jne .L0
  1716 00001589 4893                            xchg rax, rbx
  1717                                  .L0:
  1718 0000158B 4883FB00                        cmp rbx, 0
  1719 0000158F 740C                            je .L1
  1720 00001591 4899                            cqo
  1721 00001593 48F7F3                          div rbx
  1722 00001596 4889D0                          mov rax, rdx
  1723 00001599 4893                            xchg rax, rbx
  1724 0000159B EBEE                            jmp .L0
  1725                                  .L1:
  1726 0000159D C3                              ret
  1727                                  
  1728                                  L_code_ptr_error:
  1729                                          ENTER
    33 0000159E C8000000            <1>  enter 0, 0
    34 000015A2 4883E4F0            <1>  and rsp, ~15
  1730 000015A6 48837D1802                      cmp COUNT, 2
  1731 000015AB 0F8557070000                    jne L_error_arg_count_2
  1732 000015B1 488B7520                        mov rsi, PARAM(0)
  1733                                          assert_symbol(rsi)
    42 000015B5 803E04              <1>  cmp byte [%1], %2
    43 000015B8 0F85CE070000        <1>  jne L_error_incorrect_type
  1734 000015BE 488B7528                        mov rsi, PARAM(1)
  1735                                          assert_string(rsi)
    42 000015C2 803E03              <1>  cmp byte [%1], %2
    43 000015C5 0F85C1070000        <1>  jne L_error_incorrect_type
  1736 000015CB 48BF-                           mov rdi, fmt_scheme_error_part_1
  1736 000015CD [5E03000000000000] 
  1737 000015D5 B800000000                      mov rax, 0
  1738 000015DA E8(00000000)                    call printf
  1739 000015DF 488B7D20                        mov rdi, PARAM(0)
  1740 000015E3 E823F1FFFF                      call print_sexpr
  1741 000015E8 48BF-                           mov rdi, fmt_scheme_error_part_2
  1741 000015EA [7203000000000000] 
  1742 000015F2 B800000000                      mov rax, 0
  1743 000015F7 E8(00000000)                    call printf
  1744 000015FC 488B4528                        mov rax, PARAM(1)       ; sob_string
  1745 00001600 BE01000000                      mov rsi, 1              ; size = 1 byte
  1746 00001605 488B5001                        mov rdx, qword [rax + 1] ; length
  1747 00001609 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1748 0000160D 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1749 00001615 E8(00000000)                    call fwrite
  1750 0000161A 48BF-                           mov rdi, fmt_scheme_error_part_3
  1750 0000161C [B403000000000000] 
  1751 00001624 B800000000                      mov rax, 0
  1752 00001629 E8(00000000)                    call printf
  1753 0000162E 48C7C0F7FFFFFF                  mov rax, -9
  1754 00001635 E8(00000000)                    call exit
  1755                                  
  1756                                  L_code_ptr_raw_less_than_rr:
  1757                                          ENTER
    33 0000163A C8000000            <1>  enter 0, 0
    34 0000163E 4883E4F0            <1>  and rsp, ~15
  1758 00001642 48837D1802                      cmp COUNT, 2
  1759 00001647 0F85BB060000                    jne L_error_arg_count_2
  1760 0000164D 488B7520                        mov rsi, PARAM(0)
  1761                                          assert_real(rsi)
    42 00001651 803E12              <1>  cmp byte [%1], %2
    43 00001654 0F8532070000        <1>  jne L_error_incorrect_type
  1762 0000165A 488B7D28                        mov rdi, PARAM(1)
  1763                                          assert_real(rdi)
    42 0000165E 803F12              <1>  cmp byte [%1], %2
    43 00001661 0F8525070000        <1>  jne L_error_incorrect_type
  1764 00001667 F20F104601                      movsd xmm0, qword [rsi + 1]
  1765 0000166C F20F104F01                      movsd xmm1, qword [rdi + 1]
  1766 00001671 660F2FC1                        comisd xmm0, xmm1
  1767 00001675 730C                            jae .L_false
  1768 00001677 48B8-                           mov rax, sob_boolean_true
  1768 00001679 [0300000000000000] 
  1769 00001681 EB0A                            jmp .L_exit
  1770                                  .L_false:
  1771 00001683 48B8-                           mov rax, sob_boolean_false
  1771 00001685 [0200000000000000] 
  1772                                  .L_exit:
  1773                                          LEAVE
    38 0000168D C9                  <1>  leave
  1774 0000168E C22000                          ret AND_KILL_FRAME(2)
  1775                                          
  1776                                  L_code_ptr_raw_less_than_qq:
  1777                                          ENTER
    33 00001691 C8000000            <1>  enter 0, 0
    34 00001695 4883E4F0            <1>  and rsp, ~15
  1778 00001699 48837D1802                      cmp COUNT, 2
  1779 0000169E 0F8564060000                    jne L_error_arg_count_2
  1780 000016A4 488B7520                        mov rsi, PARAM(0)
  1781                                          assert_rational(rsi)
    42 000016A8 803E11              <1>  cmp byte [%1], %2
    43 000016AB 0F85DB060000        <1>  jne L_error_incorrect_type
  1782 000016B1 488B7D28                        mov rdi, PARAM(1)
  1783                                          assert_rational(rdi)
    42 000016B5 803F11              <1>  cmp byte [%1], %2
    43 000016B8 0F85CE060000        <1>  jne L_error_incorrect_type
  1784 000016BE 488B4601                        mov rax, qword [rsi + 1] ; num1
  1785 000016C2 4899                            cqo
  1786 000016C4 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1787 000016C8 4889C1                          mov rcx, rax
  1788 000016CB 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1789 000016CF 4899                            cqo
  1790 000016D1 48F76F01                        imul qword [rdi + 1]          ; num2
  1791 000016D5 4829C1                          sub rcx, rax
  1792 000016D8 7D0C                            jge .L_false
  1793 000016DA 48B8-                           mov rax, sob_boolean_true
  1793 000016DC [0300000000000000] 
  1794 000016E4 EB0A                            jmp .L_exit
  1795                                  .L_false:
  1796 000016E6 48B8-                           mov rax, sob_boolean_false
  1796 000016E8 [0200000000000000] 
  1797                                  .L_exit:
  1798                                          LEAVE
    38 000016F0 C9                  <1>  leave
  1799 000016F1 C22000                          ret AND_KILL_FRAME(2)
  1800                                  
  1801                                  L_code_ptr_raw_equal_rr:
  1802                                          ENTER
    33 000016F4 C8000000            <1>  enter 0, 0
    34 000016F8 4883E4F0            <1>  and rsp, ~15
  1803 000016FC 48837D1802                      cmp COUNT, 2
  1804 00001701 0F8501060000                    jne L_error_arg_count_2
  1805 00001707 488B7520                        mov rsi, PARAM(0)
  1806                                          assert_real(rsi)
    42 0000170B 803E12              <1>  cmp byte [%1], %2
    43 0000170E 0F8578060000        <1>  jne L_error_incorrect_type
  1807 00001714 488B7D28                        mov rdi, PARAM(1)
  1808                                          assert_real(rdi)
    42 00001718 803F12              <1>  cmp byte [%1], %2
    43 0000171B 0F856B060000        <1>  jne L_error_incorrect_type
  1809 00001721 F20F104601                      movsd xmm0, qword [rsi + 1]
  1810 00001726 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1811 0000172B 660F2FC1                        comisd xmm0, xmm1
  1812 0000172F 750C                            jne .L_false
  1813 00001731 48B8-                           mov rax, sob_boolean_true
  1813 00001733 [0300000000000000] 
  1814 0000173B EB0A                            jmp .L_exit
  1815                                  .L_false:
  1816 0000173D 48B8-                           mov rax, sob_boolean_false
  1816 0000173F [0200000000000000] 
  1817                                  .L_exit:
  1818                                          LEAVE
    38 00001747 C9                  <1>  leave
  1819 00001748 C22000                          ret AND_KILL_FRAME(2)
  1820                                          
  1821                                  L_code_ptr_raw_equal_qq:
  1822                                          ENTER
    33 0000174B C8000000            <1>  enter 0, 0
    34 0000174F 4883E4F0            <1>  and rsp, ~15
  1823 00001753 48837D1802                      cmp COUNT, 2
  1824 00001758 0F85AA050000                    jne L_error_arg_count_2
  1825 0000175E 488B7520                        mov rsi, PARAM(0)
  1826                                          assert_rational(rsi)
    42 00001762 803E11              <1>  cmp byte [%1], %2
    43 00001765 0F8521060000        <1>  jne L_error_incorrect_type
  1827 0000176B 488B7D28                        mov rdi, PARAM(1)
  1828                                          assert_rational(rdi)
    42 0000176F 803F11              <1>  cmp byte [%1], %2
    43 00001772 0F8514060000        <1>  jne L_error_incorrect_type
  1829 00001778 488B4601                        mov rax, qword [rsi + 1] ; num1
  1830 0000177C 4899                            cqo
  1831 0000177E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1832 00001782 4889C1                          mov rcx, rax
  1833 00001785 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1834 00001789 4899                            cqo
  1835 0000178B 48F76F01                        imul qword [rdi + 1]          ; num2
  1836 0000178F 4829C1                          sub rcx, rax
  1837 00001792 750C                            jne .L_false
  1838 00001794 48B8-                           mov rax, sob_boolean_true
  1838 00001796 [0300000000000000] 
  1839 0000179E EB0A                            jmp .L_exit
  1840                                  .L_false:
  1841 000017A0 48B8-                           mov rax, sob_boolean_false
  1841 000017A2 [0200000000000000] 
  1842                                  .L_exit:
  1843                                          LEAVE
    38 000017AA C9                  <1>  leave
  1844 000017AB C22000                          ret AND_KILL_FRAME(2)
  1845                                  
  1846                                  L_code_ptr_quotient:
  1847                                          ENTER
    33 000017AE C8000000            <1>  enter 0, 0
    34 000017B2 4883E4F0            <1>  and rsp, ~15
  1848 000017B6 48837D1802                      cmp COUNT, 2
  1849 000017BB 0F8547050000                    jne L_error_arg_count_2
  1850 000017C1 488B7520                        mov rsi, PARAM(0)
  1851                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000017C5 803E11              <2>  cmp byte [%1], %2
    43 000017C8 0F85BE050000        <2>  jne L_error_incorrect_type
    48 000017CE 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017D3 0F85B3050000        <1>  jne L_error_incorrect_type
  1852 000017D9 488B7D28                        mov rdi, PARAM(1)
  1853                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000017DD 803F11              <2>  cmp byte [%1], %2
    43 000017E0 0F85A6050000        <2>  jne L_error_incorrect_type
    48 000017E6 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017EB 0F859B050000        <1>  jne L_error_incorrect_type
  1854 000017F1 488B4601                        mov rax, qword [rsi + 1]
  1855 000017F5 488B5F01                        mov rbx, qword [rdi + 1]
  1856 000017F9 4883FB00                        cmp rbx, 0
  1857 000017FD 0F84B1050000                    je L_error_division_by_zero
  1858 00001803 4899                            cqo
  1859 00001805 48F7FB                          idiv rbx
  1860 00001808 4889C7                          mov rdi, rax
  1861 0000180B E852040000                      call make_integer
  1862                                          LEAVE
    38 00001810 C9                  <1>  leave
  1863 00001811 C22000                          ret AND_KILL_FRAME(2)
  1864                                          
  1865                                  L_code_ptr_remainder:
  1866                                          ENTER
    33 00001814 C8000000            <1>  enter 0, 0
    34 00001818 4883E4F0            <1>  and rsp, ~15
  1867 0000181C 48837D1802                      cmp COUNT, 2
  1868 00001821 0F85E1040000                    jne L_error_arg_count_2
  1869 00001827 488B7520                        mov rsi, PARAM(0)
  1870                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000182B 803E11              <2>  cmp byte [%1], %2
    43 0000182E 0F8558050000        <2>  jne L_error_incorrect_type
    48 00001834 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001839 0F854D050000        <1>  jne L_error_incorrect_type
  1871 0000183F 488B7D28                        mov rdi, PARAM(1)
  1872                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001843 803F11              <2>  cmp byte [%1], %2
    43 00001846 0F8540050000        <2>  jne L_error_incorrect_type
    48 0000184C 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001851 0F8535050000        <1>  jne L_error_incorrect_type
  1873 00001857 488B4601                        mov rax, qword [rsi + 1]
  1874 0000185B 488B5F01                        mov rbx, qword [rdi + 1]
  1875 0000185F 4883FB00                        cmp rbx, 0
  1876 00001863 0F844B050000                    je L_error_division_by_zero
  1877 00001869 4899                            cqo
  1878 0000186B 48F7FB                          idiv rbx
  1879 0000186E 4889D7                          mov rdi, rdx
  1880 00001871 E8EC030000                      call make_integer
  1881                                          LEAVE
    38 00001876 C9                  <1>  leave
  1882 00001877 C22000                          ret AND_KILL_FRAME(2)
  1883                                  
  1884                                  L_code_ptr_set_car:
  1885                                          ENTER
    33 0000187A C8000000            <1>  enter 0, 0
    34 0000187E 4883E4F0            <1>  and rsp, ~15
  1886 00001882 48837D1802                      cmp COUNT, 2
  1887 00001887 0F857B040000                    jne L_error_arg_count_2
  1888 0000188D 488B4520                        mov rax, PARAM(0)
  1889                                          assert_pair(rax)
    42 00001891 803821              <1>  cmp byte [%1], %2
    43 00001894 0F85F2040000        <1>  jne L_error_incorrect_type
  1890 0000189A 488B5D28                        mov rbx, PARAM(1)
  1891 0000189E 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1892 000018A2 48B8-                           mov rax, sob_void
  1892 000018A4 [0000000000000000] 
  1893                                          LEAVE
    38 000018AC C9                  <1>  leave
  1894 000018AD C22000                          ret AND_KILL_FRAME(2)
  1895                                  
  1896                                  L_code_ptr_set_cdr:
  1897                                          ENTER
    33 000018B0 C8000000            <1>  enter 0, 0
    34 000018B4 4883E4F0            <1>  and rsp, ~15
  1898 000018B8 48837D1802                      cmp COUNT, 2
  1899 000018BD 0F8545040000                    jne L_error_arg_count_2
  1900 000018C3 488B4520                        mov rax, PARAM(0)
  1901                                          assert_pair(rax)
    42 000018C7 803821              <1>  cmp byte [%1], %2
    43 000018CA 0F85BC040000        <1>  jne L_error_incorrect_type
  1902 000018D0 488B5D28                        mov rbx, PARAM(1)
  1903 000018D4 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1904 000018D8 48B8-                           mov rax, sob_void
  1904 000018DA [0000000000000000] 
  1905                                          LEAVE
    38 000018E2 C9                  <1>  leave
  1906 000018E3 C22000                          ret AND_KILL_FRAME(2)
  1907                                  
  1908                                  L_code_ptr_string_ref:
  1909                                          ENTER
    33 000018E6 C8000000            <1>  enter 0, 0
    34 000018EA 4883E4F0            <1>  and rsp, ~15
  1910 000018EE 48837D1802                      cmp COUNT, 2
  1911 000018F3 0F850F040000                    jne L_error_arg_count_2
  1912 000018F9 488B7D20                        mov rdi, PARAM(0)
  1913                                          assert_string(rdi)
    42 000018FD 803F03              <1>  cmp byte [%1], %2
    43 00001900 0F8586040000        <1>  jne L_error_incorrect_type
  1914 00001906 488B7528                        mov rsi, PARAM(1)
  1915                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000190A 803E11              <2>  cmp byte [%1], %2
    43 0000190D 0F8579040000        <2>  jne L_error_incorrect_type
    48 00001913 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001918 0F856E040000        <1>  jne L_error_incorrect_type
  1916 0000191E 488B5701                        mov rdx, qword [rdi + 1]
  1917 00001922 488B4E01                        mov rcx, qword [rsi + 1]
  1918 00001926 4839D1                          cmp rcx, rdx
  1919 00001929 0F8D59030000                    jge L_error_integer_range
  1920 0000192F 4883F900                        cmp rcx, 0
  1921 00001933 0F8C4F030000                    jl L_error_integer_range
  1922 00001939 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1923 0000193D BF02000000                      mov rdi, 2
  1924 00001942 E8A9EDFFFF                      call malloc
  1925 00001947 C60002                          mov byte [rax], T_char
  1926 0000194A 885801                          mov byte [rax + 1], bl
  1927                                          LEAVE
    38 0000194D C9                  <1>  leave
  1928 0000194E C22000                          ret AND_KILL_FRAME(2)
  1929                                  
  1930                                  L_code_ptr_vector_ref:
  1931                                          ENTER
    33 00001951 C8000000            <1>  enter 0, 0
    34 00001955 4883E4F0            <1>  and rsp, ~15
  1932 00001959 48837D1802                      cmp COUNT, 2
  1933 0000195E 0F85A4030000                    jne L_error_arg_count_2
  1934 00001964 488B7D20                        mov rdi, PARAM(0)
  1935                                          assert_vector(rdi)
    42 00001968 803F22              <1>  cmp byte [%1], %2
    43 0000196B 0F851B040000        <1>  jne L_error_incorrect_type
  1936 00001971 488B7528                        mov rsi, PARAM(1)
  1937                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001975 803E11              <2>  cmp byte [%1], %2
    43 00001978 0F850E040000        <2>  jne L_error_incorrect_type
    48 0000197E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001983 0F8503040000        <1>  jne L_error_incorrect_type
  1938 00001989 488B5701                        mov rdx, qword [rdi + 1]
  1939 0000198D 488B4E01                        mov rcx, qword [rsi + 1]
  1940 00001991 4839D1                          cmp rcx, rdx
  1941 00001994 0F8DEE020000                    jge L_error_integer_range
  1942 0000199A 4883F900                        cmp rcx, 0
  1943 0000199E 0F8CE4020000                    jl L_error_integer_range
  1944 000019A4 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1945                                          LEAVE
    38 000019A9 C9                  <1>  leave
  1946 000019AA C22000                          ret AND_KILL_FRAME(2)
  1947                                  
  1948                                  L_code_ptr_vector_set:
  1949                                          ENTER
    33 000019AD C8000000            <1>  enter 0, 0
    34 000019B1 4883E4F0            <1>  and rsp, ~15
  1950 000019B5 48837D1803                      cmp COUNT, 3
  1951 000019BA 0F85A0030000                    jne L_error_arg_count_3
  1952 000019C0 488B7D20                        mov rdi, PARAM(0)
  1953                                          assert_vector(rdi)
    42 000019C4 803F22              <1>  cmp byte [%1], %2
    43 000019C7 0F85BF030000        <1>  jne L_error_incorrect_type
  1954 000019CD 488B7528                        mov rsi, PARAM(1)
  1955                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019D1 803E11              <2>  cmp byte [%1], %2
    43 000019D4 0F85B2030000        <2>  jne L_error_incorrect_type
    48 000019DA 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019DF 0F85A7030000        <1>  jne L_error_incorrect_type
  1956 000019E5 488B5701                        mov rdx, qword [rdi + 1]
  1957 000019E9 488B4E01                        mov rcx, qword [rsi + 1]
  1958 000019ED 4839D1                          cmp rcx, rdx
  1959 000019F0 0F8D92020000                    jge L_error_integer_range
  1960 000019F6 4883F900                        cmp rcx, 0
  1961 000019FA 0F8C88020000                    jl L_error_integer_range
  1962 00001A00 488B4530                        mov rax, PARAM(2)
  1963 00001A04 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1964 00001A09 48B8-                           mov rax, sob_void
  1964 00001A0B [0000000000000000] 
  1965                                          LEAVE
    38 00001A13 C9                  <1>  leave
  1966 00001A14 C22800                          ret AND_KILL_FRAME(3)
  1967                                  
  1968                                  L_code_ptr_string_set:
  1969                                          ENTER
    33 00001A17 C8000000            <1>  enter 0, 0
    34 00001A1B 4883E4F0            <1>  and rsp, ~15
  1970 00001A1F 48837D1803                      cmp COUNT, 3
  1971 00001A24 0F8536030000                    jne L_error_arg_count_3
  1972 00001A2A 488B7D20                        mov rdi, PARAM(0)
  1973                                          assert_string(rdi)
    42 00001A2E 803F03              <1>  cmp byte [%1], %2
    43 00001A31 0F8555030000        <1>  jne L_error_incorrect_type
  1974 00001A37 488B7528                        mov rsi, PARAM(1)
  1975                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A3B 803E11              <2>  cmp byte [%1], %2
    43 00001A3E 0F8548030000        <2>  jne L_error_incorrect_type
    48 00001A44 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A49 0F853D030000        <1>  jne L_error_incorrect_type
  1976 00001A4F 488B5701                        mov rdx, qword [rdi + 1]
  1977 00001A53 488B4E01                        mov rcx, qword [rsi + 1]
  1978 00001A57 4839D1                          cmp rcx, rdx
  1979 00001A5A 0F8D28020000                    jge L_error_integer_range
  1980 00001A60 4883F900                        cmp rcx, 0
  1981 00001A64 0F8C1E020000                    jl L_error_integer_range
  1982 00001A6A 488B4530                        mov rax, PARAM(2)
  1983                                          assert_char(rax)
    42 00001A6E 803802              <1>  cmp byte [%1], %2
    43 00001A71 0F8515030000        <1>  jne L_error_incorrect_type
  1984 00001A77 8A4001                          mov al, byte [rax + 1]
  1985 00001A7A 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1986 00001A7E 48B8-                           mov rax, sob_void
  1986 00001A80 [0000000000000000] 
  1987                                          LEAVE
    38 00001A88 C9                  <1>  leave
  1988 00001A89 C22800                          ret AND_KILL_FRAME(3)
  1989                                  
  1990                                  L_code_ptr_make_vector:
  1991                                          ENTER
    33 00001A8C C8000000            <1>  enter 0, 0
    34 00001A90 4883E4F0            <1>  and rsp, ~15
  1992 00001A94 48837D1802                      cmp COUNT, 2
  1993 00001A99 0F8569020000                    jne L_error_arg_count_2
  1994 00001A9F 488B4D20                        mov rcx, PARAM(0)
  1995                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001AA3 803911              <2>  cmp byte [%1], %2
    43 00001AA6 0F85E0020000        <2>  jne L_error_incorrect_type
    48 00001AAC 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001AB1 0F85D5020000        <1>  jne L_error_incorrect_type
  1996 00001AB7 488B4901                        mov rcx, qword [rcx + 1]
  1997 00001ABB 4883F900                        cmp rcx, 0
  1998 00001ABF 0F8CC3010000                    jl L_error_integer_range
  1999 00001AC5 488B5528                        mov rdx, PARAM(1)
  2000 00001AC9 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2001 00001AD1 E81AECFFFF                      call malloc
  2002 00001AD6 C60022                          mov byte [rax], T_vector
  2003 00001AD9 48894801                        mov qword [rax + 1], rcx
  2004 00001ADD 41B800000000                    mov r8, 0
  2005                                  .L0:
  2006 00001AE3 4939C8                          cmp r8, rcx
  2007 00001AE6 740A                            je .L1
  2008 00001AE8 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2009 00001AED 49FFC0                          inc r8
  2010 00001AF0 EBF1                            jmp .L0
  2011                                  .L1:
  2012                                          LEAVE
    38 00001AF2 C9                  <1>  leave
  2013 00001AF3 C22000                          ret AND_KILL_FRAME(2)
  2014                                          
  2015                                  L_code_ptr_make_string:
  2016                                          ENTER
    33 00001AF6 C8000000            <1>  enter 0, 0
    34 00001AFA 4883E4F0            <1>  and rsp, ~15
  2017 00001AFE 48837D1802                      cmp COUNT, 2
  2018 00001B03 0F85FF010000                    jne L_error_arg_count_2
  2019 00001B09 488B4D20                        mov rcx, PARAM(0)
  2020                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B0D 803911              <2>  cmp byte [%1], %2
    43 00001B10 0F8576020000        <2>  jne L_error_incorrect_type
    48 00001B16 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B1B 0F856B020000        <1>  jne L_error_incorrect_type
  2021 00001B21 488B4901                        mov rcx, qword [rcx + 1]
  2022 00001B25 4883F900                        cmp rcx, 0
  2023 00001B29 0F8C59010000                    jl L_error_integer_range
  2024 00001B2F 488B5528                        mov rdx, PARAM(1)
  2025                                          assert_char(rdx)
    42 00001B33 803A02              <1>  cmp byte [%1], %2
    43 00001B36 0F8550020000        <1>  jne L_error_incorrect_type
  2026 00001B3C 8A5201                          mov dl, byte [rdx + 1]
  2027 00001B3F 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2028 00001B43 E8A8EBFFFF                      call malloc
  2029 00001B48 C60003                          mov byte [rax], T_string
  2030 00001B4B 48894801                        mov qword [rax + 1], rcx
  2031 00001B4F 41B800000000                    mov r8, 0
  2032                                  .L0:
  2033 00001B55 4939C8                          cmp r8, rcx
  2034 00001B58 740A                            je .L1
  2035 00001B5A 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2036 00001B5F 49FFC0                          inc r8
  2037 00001B62 EBF1                            jmp .L0
  2038                                  .L1:
  2039                                          LEAVE
    38 00001B64 C9                  <1>  leave
  2040 00001B65 C22000                          ret AND_KILL_FRAME(2)
  2041                                  
  2042                                  L_code_ptr_numerator:
  2043                                          ENTER
    33 00001B68 C8000000            <1>  enter 0, 0
    34 00001B6C 4883E4F0            <1>  and rsp, ~15
  2044 00001B70 48837D1801                      cmp COUNT, 1
  2045 00001B75 0F8561010000                    jne L_error_arg_count_1
  2046 00001B7B 488B4520                        mov rax, PARAM(0)
  2047                                          assert_rational(rax)
    42 00001B7F 803811              <1>  cmp byte [%1], %2
    43 00001B82 0F8504020000        <1>  jne L_error_incorrect_type
  2048 00001B88 488B7801                        mov rdi, qword [rax + 1]
  2049 00001B8C E8D1000000                      call make_integer
  2050                                          LEAVE
    38 00001B91 C9                  <1>  leave
  2051 00001B92 C21800                          ret AND_KILL_FRAME(1)
  2052                                          
  2053                                  L_code_ptr_denominator:
  2054                                          ENTER
    33 00001B95 C8000000            <1>  enter 0, 0
    34 00001B99 4883E4F0            <1>  and rsp, ~15
  2055 00001B9D 48837D1801                      cmp COUNT, 1
  2056 00001BA2 0F8534010000                    jne L_error_arg_count_1
  2057 00001BA8 488B4520                        mov rax, PARAM(0)
  2058                                          assert_rational(rax)
    42 00001BAC 803811              <1>  cmp byte [%1], %2
    43 00001BAF 0F85D7010000        <1>  jne L_error_incorrect_type
  2059 00001BB5 488B7809                        mov rdi, qword [rax + 1 + 8]
  2060 00001BB9 E8A4000000                      call make_integer
  2061                                          LEAVE
    38 00001BBE C9                  <1>  leave
  2062 00001BBF C21800                          ret AND_KILL_FRAME(1)
  2063                                  
  2064                                  L_code_ptr_eq:
  2065                                  	ENTER
    33 00001BC2 C8000000            <1>  enter 0, 0
    34 00001BC6 4883E4F0            <1>  and rsp, ~15
  2066 00001BCA 48837D1802              	cmp COUNT, 2
  2067 00001BCF 0F8533010000            	jne L_error_arg_count_2
  2068 00001BD5 488B7D20                	mov rdi, PARAM(0)
  2069 00001BD9 488B7528                	mov rsi, PARAM(1)
  2070 00001BDD 4839F7                  	cmp rdi, rsi
  2071 00001BE0 744A                    	je .L_eq_true
  2072 00001BE2 8A17                    	mov dl, byte [rdi]
  2073 00001BE4 3A16                    	cmp dl, byte [rsi]
  2074 00001BE6 7550                    	jne .L_eq_false
  2075 00001BE8 80FA02                  	cmp dl, T_char
  2076 00001BEB 7437                    	je .L_char
  2077 00001BED 80FA04                  	cmp dl, T_symbol
  2078 00001BF0 742A                    	je .L_symbol
  2079 00001BF2 80FA12                  	cmp dl, T_real
  2080 00001BF5 741D                    	je .L_real
  2081 00001BF7 80FA11                  	cmp dl, T_rational
  2082 00001BFA 7402                    	je .L_rational
  2083 00001BFC EB3A                    	jmp .L_eq_false
  2084                                  .L_rational:
  2085 00001BFE 488B4601                	mov rax, qword [rsi + 1]
  2086 00001C02 483B4701                	cmp rax, qword [rdi + 1]
  2087 00001C06 7530                    	jne .L_eq_false
  2088 00001C08 488B4609                	mov rax, qword [rsi + 1 + 8]
  2089 00001C0C 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2090 00001C10 7526                    	jne .L_eq_false
  2091 00001C12 EB18                    	jmp .L_eq_true
  2092                                  .L_real:
  2093 00001C14 488B4601                	mov rax, qword [rsi + 1]
  2094 00001C18 483B4701                	cmp rax, qword [rdi + 1]
  2095                                  .L_symbol:
  2096                                  	; never reached, because symbols are static!
  2097                                  	; but I'm keeping it in case, I'll ever change
  2098                                  	; the implementation
  2099 00001C1C 488B4601                	mov rax, qword [rsi + 1]
  2100 00001C20 483B4701                	cmp rax, qword [rdi + 1]
  2101                                  .L_char:
  2102 00001C24 8A5E01                  	mov bl, byte [rsi + 1]
  2103 00001C27 3A5F01                  	cmp bl, byte [rdi + 1]
  2104 00001C2A 750C                    	jne .L_eq_false
  2105                                  .L_eq_true:
  2106 00001C2C 48B8-                   	mov rax, sob_boolean_true
  2106 00001C2E [0300000000000000] 
  2107 00001C36 EB0A                    	jmp .L_eq_exit
  2108                                  .L_eq_false:
  2109 00001C38 48B8-                   	mov rax, sob_boolean_false
  2109 00001C3A [0200000000000000] 
  2110                                  .L_eq_exit:
  2111                                  	LEAVE
    38 00001C42 C9                  <1>  leave
  2112 00001C43 C22000                  	ret AND_KILL_FRAME(2)
  2113                                  
  2114                                  make_real:
  2115                                          ENTER
    33 00001C46 C8000000            <1>  enter 0, 0
    34 00001C4A 4883E4F0            <1>  and rsp, ~15
  2116 00001C4E BF09000000                      mov rdi, (1 + 8)
  2117 00001C53 E898EAFFFF                      call malloc
  2118 00001C58 C60012                          mov byte [rax], T_real
  2119 00001C5B F20F114001                      movsd qword [rax + 1], xmm0
  2120                                          LEAVE
    38 00001C60 C9                  <1>  leave
  2121 00001C61 C3                              ret
  2122                                          
  2123                                  make_integer:
  2124                                          ENTER
    33 00001C62 C8000000            <1>  enter 0, 0
    34 00001C66 4883E4F0            <1>  and rsp, ~15
  2125 00001C6A 4889FE                          mov rsi, rdi
  2126 00001C6D BF11000000                      mov rdi, (1 + 8 + 8)
  2127 00001C72 E879EAFFFF                      call malloc
  2128 00001C77 C60011                          mov byte [rax], T_rational
  2129 00001C7A 48897001                        mov qword [rax + 1], rsi
  2130 00001C7E 48C7400901000000                mov qword [rax + 1 + 8], 1
  2131                                          LEAVE
    38 00001C86 C9                  <1>  leave
  2132 00001C87 C3                              ret
  2133                                          
  2134                                  L_error_integer_range:
  2135 00001C88 488B3C25[00000000]              mov rdi, qword [stderr]
  2136 00001C90 48BE-                           mov rsi, fmt_integer_range
  2136 00001C92 [2B03000000000000] 
  2137 00001C9A B800000000                      mov rax, 0
  2138 00001C9F E8(00000000)                    call fprintf
  2139 00001CA4 48C7C0FBFFFFFF                  mov rax, -5
  2140 00001CAB E8(00000000)                    call exit
  2141                                  
  2142                                  L_error_arg_count_0:
  2143 00001CB0 488B3C25[00000000]              mov rdi, qword [stderr]
  2144 00001CB8 48BE-                           mov rsi, fmt_arg_count_0
  2144 00001CBA [2902000000000000] 
  2145 00001CC2 488B5518                        mov rdx, COUNT
  2146 00001CC6 B800000000                      mov rax, 0
  2147 00001CCB E8(00000000)                    call fprintf
  2148 00001CD0 48C7C0FDFFFFFF                  mov rax, -3
  2149 00001CD7 E8(00000000)                    call exit
  2150                                  
  2151                                  L_error_arg_count_1:
  2152 00001CDC 488B3C25[00000000]              mov rdi, qword [stderr]
  2153 00001CE4 48BE-                           mov rsi, fmt_arg_count_1
  2153 00001CE6 [5102000000000000] 
  2154 00001CEE 488B5518                        mov rdx, COUNT
  2155 00001CF2 B800000000                      mov rax, 0
  2156 00001CF7 E8(00000000)                    call fprintf
  2157 00001CFC 48C7C0FDFFFFFF                  mov rax, -3
  2158 00001D03 E8(00000000)                    call exit
  2159                                  
  2160                                  L_error_arg_count_2:
  2161 00001D08 488B3C25[00000000]              mov rdi, qword [stderr]
  2162 00001D10 48BE-                           mov rsi, fmt_arg_count_2
  2162 00001D12 [B702000000000000] 
  2163 00001D1A 488B5518                        mov rdx, COUNT
  2164 00001D1E B800000000                      mov rax, 0
  2165 00001D23 E8(00000000)                    call fprintf
  2166 00001D28 48C7C0FDFFFFFF                  mov rax, -3
  2167 00001D2F E8(00000000)                    call exit
  2168                                  
  2169                                  L_error_arg_count_12:
  2170 00001D34 488B3C25[00000000]              mov rdi, qword [stderr]
  2171 00001D3C 48BE-                           mov rsi, fmt_arg_count_12
  2171 00001D3E [7702000000000000] 
  2172 00001D46 488B5518                        mov rdx, COUNT
  2173 00001D4A B800000000                      mov rax, 0
  2174 00001D4F E8(00000000)                    call fprintf
  2175 00001D54 48C7C0FDFFFFFF                  mov rax, -3
  2176 00001D5B E8(00000000)                    call exit
  2177                                  
  2178                                  L_error_arg_count_3:
  2179 00001D60 488B3C25[00000000]              mov rdi, qword [stderr]
  2180 00001D68 48BE-                           mov rsi, fmt_arg_count_3
  2180 00001D6A [DE02000000000000] 
  2181 00001D72 488B5518                        mov rdx, COUNT
  2182 00001D76 B800000000                      mov rax, 0
  2183 00001D7B E8(00000000)                    call fprintf
  2184 00001D80 48C7C0FDFFFFFF                  mov rax, -3
  2185 00001D87 E8(00000000)                    call exit
  2186                                          
  2187                                  L_error_incorrect_type:
  2188 00001D8C 488B3C25[00000000]              mov rdi, qword [stderr]
  2189 00001D94 48BE-                           mov rsi, fmt_type
  2189 00001D96 [0703000000000000] 
  2190 00001D9E B800000000                      mov rax, 0
  2191 00001DA3 E8(00000000)                    call fprintf
  2192 00001DA8 48C7C0FCFFFFFF                  mov rax, -4
  2193 00001DAF E8(00000000)                    call exit
  2194                                  
  2195                                  L_error_division_by_zero:
  2196 00001DB4 488B3C25[00000000]              mov rdi, qword [stderr]
  2197 00001DBC 48BE-                           mov rsi, fmt_division_by_zero
  2197 00001DBE [4803000000000000] 
  2198 00001DC6 B800000000                      mov rax, 0
  2199 00001DCB E8(00000000)                    call fprintf
  2200 00001DD0 48C7C0F8FFFFFF                  mov rax, -8
  2201 00001DD7 E8(00000000)                    call exit
  2202                                  
  2203                                  section .data
  2204                                  fmt_char:
  2205 00000226 256300                          db `%c\0`
  2206                                  fmt_arg_count_0:
  2207 00000229 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2207 00000232 74696E67207A65726F-
  2207 0000023B 20617267756D656E74-
  2207 00000244 732E20466F756E6420-
  2207 0000024D 25640A00           
  2208                                  fmt_arg_count_1:
  2209 00000251 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2209 0000025A 74696E67206F6E6520-
  2209 00000263 617267756D656E742E-
  2209 0000026C 20466F756E64202564-
  2209 00000275 0A00               
  2210                                  fmt_arg_count_12:
  2211 00000277 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2211 00000280 74696E67206F6E6520-
  2211 00000289 726571756972656420-
  2211 00000292 616E64206F6E65206F-
  2211 0000029B 7074696F6E616C2061-
  2211 000002A4 7267756D656E742E20-
  2211 000002AD 466F756E642025640A-
  2211 000002B6 00                 
  2212                                  fmt_arg_count_2:
  2213 000002B7 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2213 000002C0 74696E672074776F20-
  2213 000002C9 617267756D656E7473-
  2213 000002D2 2E20466F756E642025-
  2213 000002DB 640A00             
  2214                                  fmt_arg_count_3:
  2215 000002DE 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2215 000002E7 74696E672074687265-
  2215 000002F0 6520617267756D656E-
  2215 000002F9 74732E20466F756E64-
  2215 00000302 2025640A00         
  2216                                  fmt_type:
  2217 00000307 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2217 00000310 696F6E207061737365-
  2217 00000319 6420696E636F727265-
  2217 00000322 637420747970650A00 
  2218                                  fmt_integer_range:
  2219 0000032B 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2219 00000334 7265637420696E7465-
  2219 0000033D 6765722072616E6765-
  2219 00000346 0A00               
  2220                                  fmt_division_by_zero:
  2221 00000348 212121204469766973-             db `!!! Division by zero\n\0`
  2221 00000351 696F6E206279207A65-
  2221 0000035A 726F0A00           
  2222                                  fmt_scheme_error_part_1:
  2223 0000035E 0A2121212054686520-             db `\n!!! The procedure \0`
  2223 00000367 70726F636564757265-
  2223 00000370 2000               
  2224                                  fmt_scheme_error_part_2:
  2225 00000372 2061736B656420746F-             db ` asked to terminate the program\n`
  2225 0000037B 207465726D696E6174-
  2225 00000384 65207468652070726F-
  2225 0000038D 6772616D0A         
  2226 00000392 202020207769746820-             db `    with the following message:\n\n\0`
  2226 0000039B 74686520666F6C6C6F-
  2226 000003A4 77696E67206D657373-
  2226 000003AD 6167653A0A0A00     
  2227                                  fmt_scheme_error_part_3:
  2228 000003B4 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2228 000003BD 210A0A00           
