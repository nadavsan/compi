     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 20
    84 00000007 140000000000000001-     	dq 20, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 10
    86 00000018 0A0000000000000001-     	dq 10, 1
    86 00000021 00000000000000     
    87 00000028 21                      	db T_pair	; (10)
    88 00000029 [1700000000000000]-     	dq L_constants + 23, L_constants + 1
    88 00000031 [0100000000000000] 
    89 00000039 21                      	db T_pair	; (20 10)
    90 0000003A [0600000000000000]-     	dq L_constants + 6, L_constants + 40
    90 00000042 [2800000000000000] 
    91                                  
    92                                  section .bss
    93                                  free_var_0:	; location of null?
    94 00000000 ????????????????        	resq 1
    95                                  free_var_1:	; location of pair?
    96 00000008 ????????????????        	resq 1
    97                                  free_var_2:	; location of void?
    98 00000010 ????????????????        	resq 1
    99                                  free_var_3:	; location of char?
   100 00000018 ????????????????        	resq 1
   101                                  free_var_4:	; location of string?
   102 00000020 ????????????????        	resq 1
   103                                  free_var_5:	; location of symbol?
   104 00000028 ????????????????        	resq 1
   105                                  free_var_6:	; location of vector?
   106 00000030 ????????????????        	resq 1
   107                                  free_var_7:	; location of procedure?
   108 00000038 ????????????????        	resq 1
   109                                  free_var_8:	; location of real?
   110 00000040 ????????????????        	resq 1
   111                                  free_var_9:	; location of rational?
   112 00000048 ????????????????        	resq 1
   113                                  free_var_10:	; location of boolean?
   114 00000050 ????????????????        	resq 1
   115                                  free_var_11:	; location of number?
   116 00000058 ????????????????        	resq 1
   117                                  free_var_12:	; location of collection?
   118 00000060 ????????????????        	resq 1
   119                                  free_var_13:	; location of cons
   120 00000068 ????????????????        	resq 1
   121                                  free_var_14:	; location of display-sexpr
   122 00000070 ????????????????        	resq 1
   123                                  free_var_15:	; location of write-char
   124 00000078 ????????????????        	resq 1
   125                                  free_var_16:	; location of car
   126 00000080 ????????????????        	resq 1
   127                                  free_var_17:	; location of cdr
   128 00000088 ????????????????        	resq 1
   129                                  free_var_18:	; location of string-length
   130 00000090 ????????????????        	resq 1
   131                                  free_var_19:	; location of vector-length
   132 00000098 ????????????????        	resq 1
   133                                  free_var_20:	; location of real->integer
   134 000000A0 ????????????????        	resq 1
   135                                  free_var_21:	; location of exit
   136 000000A8 ????????????????        	resq 1
   137                                  free_var_22:	; location of integer->real
   138 000000B0 ????????????????        	resq 1
   139                                  free_var_23:	; location of rational->real
   140 000000B8 ????????????????        	resq 1
   141                                  free_var_24:	; location of char->integer
   142 000000C0 ????????????????        	resq 1
   143                                  free_var_25:	; location of integer->char
   144 000000C8 ????????????????        	resq 1
   145                                  free_var_26:	; location of trng
   146 000000D0 ????????????????        	resq 1
   147                                  free_var_27:	; location of zero?
   148 000000D8 ????????????????        	resq 1
   149                                  free_var_28:	; location of integer?
   150 000000E0 ????????????????        	resq 1
   151                                  free_var_29:	; location of __bin-apply
   152 000000E8 ????????????????        	resq 1
   153                                  free_var_30:	; location of __bin-add-rr
   154 000000F0 ????????????????        	resq 1
   155                                  free_var_31:	; location of __bin-sub-rr
   156 000000F8 ????????????????        	resq 1
   157                                  free_var_32:	; location of __bin-mul-rr
   158 00000100 ????????????????        	resq 1
   159                                  free_var_33:	; location of __bin-div-rr
   160 00000108 ????????????????        	resq 1
   161                                  free_var_34:	; location of __bin-add-qq
   162 00000110 ????????????????        	resq 1
   163                                  free_var_35:	; location of __bin-sub-qq
   164 00000118 ????????????????        	resq 1
   165                                  free_var_36:	; location of __bin-mul-qq
   166 00000120 ????????????????        	resq 1
   167                                  free_var_37:	; location of __bin-div-qq
   168 00000128 ????????????????        	resq 1
   169                                  free_var_38:	; location of error
   170 00000130 ????????????????        	resq 1
   171                                  free_var_39:	; location of __bin-less-than-rr
   172 00000138 ????????????????        	resq 1
   173                                  free_var_40:	; location of __bin-less-than-qq
   174 00000140 ????????????????        	resq 1
   175                                  free_var_41:	; location of __bin-equal-rr
   176 00000148 ????????????????        	resq 1
   177                                  free_var_42:	; location of __bin-equal-qq
   178 00000150 ????????????????        	resq 1
   179                                  free_var_43:	; location of quotient
   180 00000158 ????????????????        	resq 1
   181                                  free_var_44:	; location of remainder
   182 00000160 ????????????????        	resq 1
   183                                  free_var_45:	; location of set-car!
   184 00000168 ????????????????        	resq 1
   185                                  free_var_46:	; location of set-cdr!
   186 00000170 ????????????????        	resq 1
   187                                  free_var_47:	; location of string-ref
   188 00000178 ????????????????        	resq 1
   189                                  free_var_48:	; location of vector-ref
   190 00000180 ????????????????        	resq 1
   191                                  free_var_49:	; location of vector-set!
   192 00000188 ????????????????        	resq 1
   193                                  free_var_50:	; location of string-set!
   194 00000190 ????????????????        	resq 1
   195                                  free_var_51:	; location of make-vector
   196 00000198 ????????????????        	resq 1
   197                                  free_var_52:	; location of make-string
   198 000001A0 ????????????????        	resq 1
   199                                  free_var_53:	; location of numerator
   200 000001A8 ????????????????        	resq 1
   201                                  free_var_54:	; location of denominator
   202 000001B0 ????????????????        	resq 1
   203                                  free_var_55:	; location of eq?
   204 000001B8 ????????????????        	resq 1
   205                                  
   206                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   207                                  global main
   208                                  section .text
   209                                  main:
   210 00000000 C8000000                        enter 0, 0
   211                                          
   212                                  	; building closure for null?
   213 00000004 48BF-                   	mov rdi, free_var_0
   213 00000006 [0000000000000000] 
   214 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   214 00000010 [DD0C000000000000] 
   215 00000018 E8FC0B0000              	call bind_primitive
   216                                  
   217                                  	; building closure for pair?
   218 0000001D 48BF-                   	mov rdi, free_var_1
   218 0000001F [0800000000000000] 
   219 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   219 00000029 [130D000000000000] 
   220 00000031 E8E30B0000              	call bind_primitive
   221                                  
   222                                  	; building closure for void?
   223 00000036 48BF-                   	mov rdi, free_var_2
   223 00000038 [1000000000000000] 
   224 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   224 00000042 [490D000000000000] 
   225 0000004A E8CA0B0000              	call bind_primitive
   226                                  
   227                                  	; building closure for char?
   228 0000004F 48BF-                   	mov rdi, free_var_3
   228 00000051 [1800000000000000] 
   229 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   229 0000005B [7F0D000000000000] 
   230 00000063 E8B10B0000              	call bind_primitive
   231                                  
   232                                  	; building closure for string?
   233 00000068 48BF-                   	mov rdi, free_var_4
   233 0000006A [2000000000000000] 
   234 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   234 00000074 [B50D000000000000] 
   235 0000007C E8980B0000              	call bind_primitive
   236                                  
   237                                  	; building closure for symbol?
   238 00000081 48BF-                   	mov rdi, free_var_5
   238 00000083 [2800000000000000] 
   239 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   239 0000008D [EB0D000000000000] 
   240 00000095 E87F0B0000              	call bind_primitive
   241                                  
   242                                  	; building closure for vector?
   243 0000009A 48BF-                   	mov rdi, free_var_6
   243 0000009C [3000000000000000] 
   244 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   244 000000A6 [210E000000000000] 
   245 000000AE E8660B0000              	call bind_primitive
   246                                  
   247                                  	; building closure for procedure?
   248 000000B3 48BF-                   	mov rdi, free_var_7
   248 000000B5 [3800000000000000] 
   249 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   249 000000BF [570E000000000000] 
   250 000000C7 E84D0B0000              	call bind_primitive
   251                                  
   252                                  	; building closure for real?
   253 000000CC 48BF-                   	mov rdi, free_var_8
   253 000000CE [4000000000000000] 
   254 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   254 000000D8 [8D0E000000000000] 
   255 000000E0 E8340B0000              	call bind_primitive
   256                                  
   257                                  	; building closure for rational?
   258 000000E5 48BF-                   	mov rdi, free_var_9
   258 000000E7 [4800000000000000] 
   259 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   259 000000F1 [C30E000000000000] 
   260 000000F9 E81B0B0000              	call bind_primitive
   261                                  
   262                                  	; building closure for boolean?
   263 000000FE 48BF-                   	mov rdi, free_var_10
   263 00000100 [5000000000000000] 
   264 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   264 0000010A [F90E000000000000] 
   265 00000112 E8020B0000              	call bind_primitive
   266                                  
   267                                  	; building closure for number?
   268 00000117 48BF-                   	mov rdi, free_var_11
   268 00000119 [5800000000000000] 
   269 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   269 00000123 [310F000000000000] 
   270 0000012B E8E90A0000              	call bind_primitive
   271                                  
   272                                  	; building closure for collection?
   273 00000130 48BF-                   	mov rdi, free_var_12
   273 00000132 [6000000000000000] 
   274 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   274 0000013C [690F000000000000] 
   275 00000144 E8D00A0000              	call bind_primitive
   276                                  
   277                                  	; building closure for cons
   278 00000149 48BF-                   	mov rdi, free_var_13
   278 0000014B [6800000000000000] 
   279 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   279 00000155 [A10F000000000000] 
   280 0000015D E8B70A0000              	call bind_primitive
   281                                  
   282                                  	; building closure for display-sexpr
   283 00000162 48BF-                   	mov rdi, free_var_14
   283 00000164 [7000000000000000] 
   284 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   284 0000016E [D50F000000000000] 
   285 00000176 E89E0A0000              	call bind_primitive
   286                                  
   287                                  	; building closure for write-char
   288 0000017B 48BF-                   	mov rdi, free_var_15
   288 0000017D [7800000000000000] 
   289 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   289 00000187 [FF0F000000000000] 
   290 0000018F E8850A0000              	call bind_primitive
   291                                  
   292                                  	; building closure for car
   293 00000194 48BF-                   	mov rdi, free_var_16
   293 00000196 [8000000000000000] 
   294 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   294 000001A0 [5610000000000000] 
   295 000001A8 E86C0A0000              	call bind_primitive
   296                                  
   297                                  	; building closure for cdr
   298 000001AD 48BF-                   	mov rdi, free_var_17
   298 000001AF [8800000000000000] 
   299 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   299 000001B9 [7E10000000000000] 
   300 000001C1 E8530A0000              	call bind_primitive
   301                                  
   302                                  	; building closure for string-length
   303 000001C6 48BF-                   	mov rdi, free_var_18
   303 000001C8 [9000000000000000] 
   304 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   304 000001D2 [A610000000000000] 
   305 000001DA E83A0A0000              	call bind_primitive
   306                                  
   307                                  	; building closure for vector-length
   308 000001DF 48BF-                   	mov rdi, free_var_19
   308 000001E1 [9800000000000000] 
   309 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   309 000001EB [D310000000000000] 
   310 000001F3 E8210A0000              	call bind_primitive
   311                                  
   312                                  	; building closure for real->integer
   313 000001F8 48BF-                   	mov rdi, free_var_20
   313 000001FA [A000000000000000] 
   314 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   314 00000204 [0011000000000000] 
   315 0000020C E8080A0000              	call bind_primitive
   316                                  
   317                                  	; building closure for exit
   318 00000211 48BF-                   	mov rdi, free_var_21
   318 00000213 [A800000000000000] 
   319 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   319 0000021D [3311000000000000] 
   320 00000225 E8EF090000              	call bind_primitive
   321                                  
   322                                  	; building closure for integer->real
   323 0000022A 48BF-                   	mov rdi, free_var_22
   323 0000022C [B000000000000000] 
   324 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   324 00000236 [5011000000000000] 
   325 0000023E E8D6090000              	call bind_primitive
   326                                  
   327                                  	; building closure for rational->real
   328 00000243 48BF-                   	mov rdi, free_var_23
   328 00000245 [B800000000000000] 
   329 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   329 0000024F [8D11000000000000] 
   330 00000257 E8BD090000              	call bind_primitive
   331                                  
   332                                  	; building closure for char->integer
   333 0000025C 48BF-                   	mov rdi, free_var_24
   333 0000025E [C000000000000000] 
   334 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   334 00000268 [CC11000000000000] 
   335 00000270 E8A4090000              	call bind_primitive
   336                                  
   337                                  	; building closure for integer->char
   338 00000275 48BF-                   	mov rdi, free_var_25
   338 00000277 [C800000000000000] 
   339 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   339 00000281 [0112000000000000] 
   340 00000289 E88B090000              	call bind_primitive
   341                                  
   342                                  	; building closure for trng
   343 0000028E 48BF-                   	mov rdi, free_var_26
   343 00000290 [D000000000000000] 
   344 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   344 0000029A [5B12000000000000] 
   345 000002A2 E872090000              	call bind_primitive
   346                                  
   347                                  	; building closure for zero?
   348 000002A7 48BF-                   	mov rdi, free_var_27
   348 000002A9 [D800000000000000] 
   349 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   349 000002B3 [7E12000000000000] 
   350 000002BB E859090000              	call bind_primitive
   351                                  
   352                                  	; building closure for integer?
   353 000002C0 48BF-                   	mov rdi, free_var_28
   353 000002C2 [E000000000000000] 
   354 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   354 000002CC [D912000000000000] 
   355 000002D4 E840090000              	call bind_primitive
   356                                  
   357                                  	; building closure for __bin-apply
   358 000002D9 48BF-                   	mov rdi, free_var_29
   358 000002DB [E800000000000000] 
   359 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   359 000002E5 [410C000000000000] 
   360 000002ED E827090000              	call bind_primitive
   361                                  
   362                                  	; building closure for __bin-add-rr
   363 000002F2 48BF-                   	mov rdi, free_var_30
   363 000002F4 [F000000000000000] 
   364 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   364 000002FE [1613000000000000] 
   365 00000306 E80E090000              	call bind_primitive
   366                                  
   367                                  	; building closure for __bin-sub-rr
   368 0000030B 48BF-                   	mov rdi, free_var_31
   368 0000030D [F800000000000000] 
   369 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   369 00000317 [5A13000000000000] 
   370 0000031F E8F5080000              	call bind_primitive
   371                                  
   372                                  	; building closure for __bin-mul-rr
   373 00000324 48BF-                   	mov rdi, free_var_32
   373 00000326 [0001000000000000] 
   374 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   374 00000330 [9E13000000000000] 
   375 00000338 E8DC080000              	call bind_primitive
   376                                  
   377                                  	; building closure for __bin-div-rr
   378 0000033D 48BF-                   	mov rdi, free_var_33
   378 0000033F [0801000000000000] 
   379 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   379 00000349 [E213000000000000] 
   380 00000351 E8C3080000              	call bind_primitive
   381                                  
   382                                  	; building closure for __bin-add-qq
   383 00000356 48BF-                   	mov rdi, free_var_34
   383 00000358 [1001000000000000] 
   384 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   384 00000362 [3414000000000000] 
   385 0000036A E8AA080000              	call bind_primitive
   386                                  
   387                                  	; building closure for __bin-sub-qq
   388 0000036F 48BF-                   	mov rdi, free_var_35
   388 00000371 [1801000000000000] 
   389 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   389 0000037B [9C14000000000000] 
   390 00000383 E891080000              	call bind_primitive
   391                                  
   392                                  	; building closure for __bin-mul-qq
   393 00000388 48BF-                   	mov rdi, free_var_36
   393 0000038A [2001000000000000] 
   394 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   394 00000394 [0415000000000000] 
   395 0000039C E878080000              	call bind_primitive
   396                                  
   397                                  	; building closure for __bin-div-qq
   398 000003A1 48BF-                   	mov rdi, free_var_37
   398 000003A3 [2801000000000000] 
   399 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   399 000003AD [5C15000000000000] 
   400 000003B5 E85F080000              	call bind_primitive
   401                                  
   402                                  	; building closure for error
   403 000003BA 48BF-                   	mov rdi, free_var_38
   403 000003BC [3001000000000000] 
   404 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   404 000003C6 [2A16000000000000] 
   405 000003CE E846080000              	call bind_primitive
   406                                  
   407                                  	; building closure for __bin-less-than-rr
   408 000003D3 48BF-                   	mov rdi, free_var_39
   408 000003D5 [3801000000000000] 
   409 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   409 000003DF [E116000000000000] 
   410 000003E7 E82D080000              	call bind_primitive
   411                                  
   412                                  	; building closure for __bin-less-than-qq
   413 000003EC 48BF-                   	mov rdi, free_var_40
   413 000003EE [4001000000000000] 
   414 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   414 000003F8 [3817000000000000] 
   415 00000400 E814080000              	call bind_primitive
   416                                  
   417                                  	; building closure for __bin-equal-rr
   418 00000405 48BF-                   	mov rdi, free_var_41
   418 00000407 [4801000000000000] 
   419 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   419 00000411 [9B17000000000000] 
   420 00000419 E8FB070000              	call bind_primitive
   421                                  
   422                                  	; building closure for __bin-equal-qq
   423 0000041E 48BF-                   	mov rdi, free_var_42
   423 00000420 [5001000000000000] 
   424 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   424 0000042A [F217000000000000] 
   425 00000432 E8E2070000              	call bind_primitive
   426                                  
   427                                  	; building closure for quotient
   428 00000437 48BF-                   	mov rdi, free_var_43
   428 00000439 [5801000000000000] 
   429 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   429 00000443 [5518000000000000] 
   430 0000044B E8C9070000              	call bind_primitive
   431                                  
   432                                  	; building closure for remainder
   433 00000450 48BF-                   	mov rdi, free_var_44
   433 00000452 [6001000000000000] 
   434 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   434 0000045C [BB18000000000000] 
   435 00000464 E8B0070000              	call bind_primitive
   436                                  
   437                                  	; building closure for set-car!
   438 00000469 48BF-                   	mov rdi, free_var_45
   438 0000046B [6801000000000000] 
   439 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   439 00000475 [2119000000000000] 
   440 0000047D E897070000              	call bind_primitive
   441                                  
   442                                  	; building closure for set-cdr!
   443 00000482 48BF-                   	mov rdi, free_var_46
   443 00000484 [7001000000000000] 
   444 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   444 0000048E [5719000000000000] 
   445 00000496 E87E070000              	call bind_primitive
   446                                  
   447                                  	; building closure for string-ref
   448 0000049B 48BF-                   	mov rdi, free_var_47
   448 0000049D [7801000000000000] 
   449 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   449 000004A7 [8D19000000000000] 
   450 000004AF E865070000              	call bind_primitive
   451                                  
   452                                  	; building closure for vector-ref
   453 000004B4 48BF-                   	mov rdi, free_var_48
   453 000004B6 [8001000000000000] 
   454 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   454 000004C0 [F819000000000000] 
   455 000004C8 E84C070000              	call bind_primitive
   456                                  
   457                                  	; building closure for vector-set!
   458 000004CD 48BF-                   	mov rdi, free_var_49
   458 000004CF [8801000000000000] 
   459 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   459 000004D9 [541A000000000000] 
   460 000004E1 E833070000              	call bind_primitive
   461                                  
   462                                  	; building closure for string-set!
   463 000004E6 48BF-                   	mov rdi, free_var_50
   463 000004E8 [9001000000000000] 
   464 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   464 000004F2 [BE1A000000000000] 
   465 000004FA E81A070000              	call bind_primitive
   466                                  
   467                                  	; building closure for make-vector
   468 000004FF 48BF-                   	mov rdi, free_var_51
   468 00000501 [9801000000000000] 
   469 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   469 0000050B [331B000000000000] 
   470 00000513 E801070000              	call bind_primitive
   471                                  
   472                                  	; building closure for make-string
   473 00000518 48BF-                   	mov rdi, free_var_52
   473 0000051A [A001000000000000] 
   474 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   474 00000524 [9D1B000000000000] 
   475 0000052C E8E8060000              	call bind_primitive
   476                                  
   477                                  	; building closure for numerator
   478 00000531 48BF-                   	mov rdi, free_var_53
   478 00000533 [A801000000000000] 
   479 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   479 0000053D [0F1C000000000000] 
   480 00000545 E8CF060000              	call bind_primitive
   481                                  
   482                                  	; building closure for denominator
   483 0000054A 48BF-                   	mov rdi, free_var_54
   483 0000054C [B001000000000000] 
   484 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   484 00000556 [3C1C000000000000] 
   485 0000055E E8B6060000              	call bind_primitive
   486                                  
   487                                  	; building closure for eq?
   488 00000563 48BF-                   	mov rdi, free_var_55
   488 00000565 [B801000000000000] 
   489 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   489 0000056F [691C000000000000] 
   490 00000577 E89D060000              	call bind_primitive
   491                                  
   492 0000057C 48B8-                   	mov rax,L_constants + 57
   492 0000057E [3900000000000000] 
   493 00000586 50                      	push rax
   494 00000587 488B0425[18010000]      	mov rax, qword [free_var_35]
   495 0000058F 50                      	push rax
   496 00000590 6A02                    	push 2
   497 00000592 488B0425[E8000000]      	mov rax, qword [free_var_29]
   498                                          .goo:
   499                                  	assert_closure(rax)
    42 0000059A 803805              <1>  cmp byte [%1], %2
    43 0000059D 0F85C6180000        <1>  jne L_error_incorrect_type
   500 000005A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   501 000005A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
   502                                  
   503 000005A9 4889C7                  	mov rdi, rax
   504 000005AC E8E8000000              	call print_sexpr_if_not_void
   505                                  
   506 000005B1 48BF-                           mov rdi, fmt_memory_usage
   506 000005B3 [A900000000000000] 
   507 000005BB 488B3425[30010000]              mov rsi, qword [top_of_memory]
   508 000005C3 4881EE[C0010000]                sub rsi, memory
   509 000005CA B800000000                      mov rax, 0
   510                                  	ENTER
    33 000005CF C8000000            <1>  enter 0, 0
    34 000005D3 4883E4F0            <1>  and rsp, ~15
   511 000005D7 E8(00000000)                    call printf
   512                                  	LEAVE
    38 000005DC C9                  <1>  leave
   513 000005DD C9                      	leave
   514 000005DE C3                      	ret
   515                                  
   516                                  L_error_non_closure:
   517 000005DF 488B3C25[00000000]              mov rdi, qword [stderr]
   518 000005E7 48BE-                           mov rsi, fmt_non_closure
   518 000005E9 [E000000000000000] 
   519 000005F1 B800000000                      mov rax, 0
   520                                  	ENTER
    33 000005F6 C8000000            <1>  enter 0, 0
    34 000005FA 4883E4F0            <1>  and rsp, ~15
   521 000005FE E8(00000000)                    call fprintf
   522                                  	LEAVE
    38 00000603 C9                  <1>  leave
   523 00000604 48C7C0FEFFFFFF                  mov rax, -2
   524 0000060B E8(00000000)                    call exit
   525                                  
   526                                  L_error_improper_list:
   527 00000610 488B3C25[00000000]      	mov rdi, qword [stderr]
   528 00000618 48BE-                   	mov rsi, fmt_error_improper_list
   528 0000061A [0801000000000000] 
   529 00000622 B800000000              	mov rax, 0
   530                                  	ENTER
    33 00000627 C8000000            <1>  enter 0, 0
    34 0000062B 4883E4F0            <1>  and rsp, ~15
   531 0000062F E8(00000000)            	call fprintf
   532                                  	LEAVE
    38 00000634 C9                  <1>  leave
   533 00000635 48C7C0F9FFFFFF          	mov rax, -7
   534 0000063C E8(00000000)            	call exit
   535                                  
   536                                  L_error_incorrect_arity_simple:
   537 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   538 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   538 0000064B [4A00000000000000] 
   539 00000653 EB12                            jmp L_error_incorrect_arity_common
   540                                  L_error_incorrect_arity_opt:
   541 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   542 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   542 0000065F [7500000000000000] 
   543                                  L_error_incorrect_arity_common:
   544 00000667 5A                              pop rdx
   545 00000668 59                              pop rcx
   546 00000669 B800000000                      mov rax, 0
   547                                  	ENTER
    33 0000066E C8000000            <1>  enter 0, 0
    34 00000672 4883E4F0            <1>  and rsp, ~15
   548 00000676 E8(00000000)                    call fprintf
   549                                  	LEAVE
    38 0000067B C9                  <1>  leave
   550 0000067C 48C7C0FAFFFFFF                  mov rax, -6
   551 00000683 E8(00000000)                    call exit
   552                                  
   553                                  section .data
   554                                  fmt_incorrect_arity_simple:
   555 0000004A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   555 00000053 74656420256C642061-
   555 0000005C 7267756D656E74732C-
   555 00000065 206275742067697665-
   555 0000006E 6E20256C640A00     
   556                                  fmt_incorrect_arity_opt:
   557 00000075 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   557 0000007E 746564206174206C65-
   557 00000087 61737420256C642061-
   557 00000090 7267756D656E74732C-
   557 00000099 206275742067697665-
   557 000000A2 6E20256C640A00     
   558                                  fmt_memory_usage:
   559 000000A9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   559 000000B2 6420256C6420627974-
   559 000000BB 6573206F662064796E-
   559 000000C4 616D6963616C6C792D-
   559 000000CD 616C6C6F6361746564-
   559 000000D6 206D656D6F72790A0A-
   559 000000DF 00                 
   560                                  fmt_non_closure:
   561 000000E0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   561 000000E9 7074696E6720746F20-
   561 000000F2 6170706C792061206E-
   561 000000FB 6F6E2D636C6F737572-
   561 00000104 65210A00           
   562                                  fmt_error_improper_list:
   563 00000108 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   563 00000111 7267756D656E742069-
   563 0000011A 73206E6F7420612070-
   563 00000123 726F706572206C6973-
   563 0000012C 74210A00           
   564                                  
   565                                  section .bss
   566                                  memory:
   567 000001C0 <res 40000000h>         	resb gbytes(1)
   568                                  
   569                                  section .data
   570                                  top_of_memory:
   571 00000130 [C001000000000000]              dq memory
   572                                  
   573                                  section .text
   574                                  malloc:
   575 00000688 488B0425[30010000]              mov rax, qword [top_of_memory]
   576 00000690 48013C25[30010000]              add qword [top_of_memory], rdi
   577 00000698 C3                              ret
   578                                          
   579                                  print_sexpr_if_not_void:
   580 00000699 4881FF[00000000]        	cmp rdi, sob_void
   581 000006A0 7501                    	jne print_sexpr
   582 000006A2 C3                      	ret
   583                                  
   584                                  section .data
   585                                  fmt_void:
   586 00000138 233C766F69643E00        	db `#<void>\0`
   587                                  fmt_nil:
   588 00000140 282900                  	db `()\0`
   589                                  fmt_boolean_false:
   590 00000143 236600                  	db `#f\0`
   591                                  fmt_boolean_true:
   592 00000146 237400                  	db `#t\0`
   593                                  fmt_char_backslash:
   594 00000149 235C5C00                	db `#\\\\\0`
   595                                  fmt_char_dquote:
   596 0000014D 235C2200                	db `#\\"\0`
   597                                  fmt_char_simple:
   598 00000151 235C256300              	db `#\\%c\0`
   599                                  fmt_char_null:
   600 00000156 235C6E756C00            	db `#\\nul\0`
   601                                  fmt_char_bell:
   602 0000015C 235C62656C6C00          	db `#\\bell\0`
   603                                  fmt_char_backspace:
   604 00000163 235C6261636B737061-     	db `#\\backspace\0`
   604 0000016C 636500             
   605                                  fmt_char_tab:
   606 0000016F 235C74616200            	db `#\\tab\0`
   607                                  fmt_char_newline:
   608 00000175 235C6E65776C696E65-     	db `#\\newline\0`
   608 0000017E 00                 
   609                                  fmt_char_formfeed:
   610 0000017F 235C7061676500          	db `#\\page\0`
   611                                  fmt_char_return:
   612 00000186 235C72657475726E00      	db `#\\return\0`
   613                                  fmt_char_escape:
   614 0000018F 235C65736300            	db `#\\esc\0`
   615                                  fmt_char_space:
   616 00000195 235C737061636500        	db `#\\space\0`
   617                                  fmt_char_hex:
   618 0000019D 235C782530325800        	db `#\\x%02X\0`
   619                                  fmt_closure:
   620 000001A5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   620 000001AE 206174203078253038-
   620 000001B7 5820656E763D307825-
   620 000001C0 30385820636F64653D-
   620 000001C9 3078253038583E00   
   621                                  fmt_lparen:
   622 000001D1 2800                    	db `(\0`
   623                                  fmt_dotted_pair:
   624 000001D3 202E2000                	db ` . \0`
   625                                  fmt_rparen:
   626 000001D7 2900                    	db `)\0`
   627                                  fmt_space:
   628 000001D9 2000                    	db ` \0`
   629                                  fmt_empty_vector:
   630 000001DB 23282900                	db `#()\0`
   631                                  fmt_vector:
   632 000001DF 232800                  	db `#(\0`
   633                                  fmt_real:
   634 000001E2 256600                  	db `%f\0`
   635                                  fmt_fraction:
   636 000001E5 256C642F256C6400        	db `%ld/%ld\0`
   637                                  fmt_zero:
   638 000001ED 3000                    	db `0\0`
   639                                  fmt_int:
   640 000001EF 256C6400                	db `%ld\0`
   641                                  fmt_unknown_sexpr_error:
   642 000001F3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   642 000001FC 6F723A20556E6B6E6F-
   642 00000205 776E2074797065206F-
   642 0000020E 662073657870722028-
   642 00000217 3078253032582920   
   643 0000021F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   643 00000228 73203078253038580A-
   643 00000231 0A00               
   644                                  fmt_dquote:
   645 00000233 2200                    	db `\"\0`
   646                                  fmt_string_char:
   647 00000235 256300                          db `%c\0`
   648                                  fmt_string_char_7:
   649 00000238 5C6100                          db `\\a\0`
   650                                  fmt_string_char_8:
   651 0000023B 5C6200                          db `\\b\0`
   652                                  fmt_string_char_9:
   653 0000023E 5C7400                          db `\\t\0`
   654                                  fmt_string_char_10:
   655 00000241 5C6E00                          db `\\n\0`
   656                                  fmt_string_char_11:
   657 00000244 5C7600                          db `\\v\0`
   658                                  fmt_string_char_12:
   659 00000247 5C6600                          db `\\f\0`
   660                                  fmt_string_char_13:
   661 0000024A 5C7200                          db `\\r\0`
   662                                  fmt_string_char_34:
   663 0000024D 5C2200                          db `\\"\0`
   664                                  fmt_string_char_92:
   665 00000250 5C5C00                          db `\\\\\0`
   666                                  fmt_string_char_hex:
   667 00000253 5C7825583B00                    db `\\x%X;\0`
   668                                  
   669                                  section .text
   670                                  
   671                                  print_sexpr:
   672                                  	ENTER
    33 000006A3 C8000000            <1>  enter 0, 0
    34 000006A7 4883E4F0            <1>  and rsp, ~15
   673 000006AB 8A07                    	mov al, byte [rdi]
   674 000006AD 3C00                    	cmp al, T_void
   675 000006AF 744D                    	je .Lvoid
   676 000006B1 3C01                    	cmp al, T_nil
   677 000006B3 7458                    	je .Lnil
   678 000006B5 3C09                    	cmp al, T_boolean_false
   679 000006B7 7463                    	je .Lboolean_false
   680 000006B9 3C0A                    	cmp al, T_boolean_true
   681 000006BB 746E                    	je .Lboolean_true
   682 000006BD 3C02                    	cmp al, T_char
   683 000006BF 7479                    	je .Lchar
   684 000006C1 3C04                    	cmp al, T_symbol
   685 000006C3 0F84BB010000            	je .Lsymbol
   686 000006C9 3C21                    	cmp al, T_pair
   687 000006CB 0F84D6010000            	je .Lpair
   688 000006D1 3C22                    	cmp al, T_vector
   689 000006D3 0F849F020000            	je .Lvector
   690 000006D9 3C05                    	cmp al, T_closure
   691 000006DB 0F8489010000            	je .Lclosure
   692 000006E1 3C12                    	cmp al, T_real
   693 000006E3 0F8430030000            	je .Lreal
   694 000006E9 3C11                    	cmp al, T_rational
   695 000006EB 0F8456030000            	je .Lrational
   696 000006F1 3C03                    	cmp al, T_string
   697 000006F3 0F848F030000            	je .Lstring
   698                                  
   699 000006F9 E9C7040000              	jmp .Lunknown_sexpr_type
   700                                  
   701                                  .Lvoid:
   702 000006FE 48BF-                   	mov rdi, fmt_void
   702 00000700 [3801000000000000] 
   703 00000708 E9F5040000              	jmp .Lemit
   704                                  
   705                                  .Lnil:
   706 0000070D 48BF-                   	mov rdi, fmt_nil
   706 0000070F [4001000000000000] 
   707 00000717 E9E6040000              	jmp .Lemit
   708                                  
   709                                  .Lboolean_false:
   710 0000071C 48BF-                   	mov rdi, fmt_boolean_false
   710 0000071E [4301000000000000] 
   711 00000726 E9D7040000              	jmp .Lemit
   712                                  
   713                                  .Lboolean_true:
   714 0000072B 48BF-                   	mov rdi, fmt_boolean_true
   714 0000072D [4601000000000000] 
   715 00000735 E9C8040000              	jmp .Lemit
   716                                  
   717                                  .Lchar:
   718 0000073A 8A4701                  	mov al, byte [rdi + 1]
   719 0000073D 3C20                    	cmp al, ' '
   720 0000073F 7E28                    	jle .Lchar_whitespace
   721 00000741 3C5C                    	cmp al, 92 		; backslash
   722 00000743 0F847C000000            	je .Lchar_backslash
   723 00000749 3C22                    	cmp al, '"'
   724 0000074B 0F8483000000            	je .Lchar_dquote
   725 00000751 4825FF000000            	and rax, 255
   726 00000757 48BF-                   	mov rdi, fmt_char_simple
   726 00000759 [5101000000000000] 
   727 00000761 4889C6                  	mov rsi, rax
   728 00000764 E999040000              	jmp .Lemit
   729                                  
   730                                  .Lchar_whitespace:
   731 00000769 3C00                    	cmp al, 0
   732 0000076B 7476                    	je .Lchar_null
   733 0000076D 3C07                    	cmp al, 7
   734 0000076F 0F847D000000            	je .Lchar_bell
   735 00000775 3C08                    	cmp al, 8
   736 00000777 0F8484000000            	je .Lchar_backspace
   737 0000077D 3C09                    	cmp al, 9
   738 0000077F 0F848B000000            	je .Lchar_tab
   739 00000785 3C0A                    	cmp al, 10
   740 00000787 0F8492000000            	je .Lchar_newline
   741 0000078D 3C0C                    	cmp al, 12
   742 0000078F 0F8499000000            	je .Lchar_formfeed
   743 00000795 3C0D                    	cmp al, 13
   744 00000797 0F84A0000000            	je .Lchar_return
   745 0000079D 3C1B                    	cmp al, 27
   746 0000079F 0F84A7000000            	je .Lchar_escape
   747 000007A5 4825FF000000            	and rax, 255
   748 000007AB 3C20                    	cmp al, ' '
   749 000007AD 0F84A8000000            	je .Lchar_space
   750 000007B3 48BF-                   	mov rdi, fmt_char_hex
   750 000007B5 [9D01000000000000] 
   751 000007BD 4889C6                  	mov rsi, rax
   752 000007C0 E93D040000              	jmp .Lemit	
   753                                  
   754                                  .Lchar_backslash:
   755 000007C5 48BF-                   	mov rdi, fmt_char_backslash
   755 000007C7 [4901000000000000] 
   756 000007CF E92E040000              	jmp .Lemit
   757                                  
   758                                  .Lchar_dquote:
   759 000007D4 48BF-                   	mov rdi, fmt_char_dquote
   759 000007D6 [4D01000000000000] 
   760 000007DE E91F040000              	jmp .Lemit
   761                                  
   762                                  .Lchar_null:
   763 000007E3 48BF-                   	mov rdi, fmt_char_null
   763 000007E5 [5601000000000000] 
   764 000007ED E910040000              	jmp .Lemit
   765                                  
   766                                  .Lchar_bell:
   767 000007F2 48BF-                   	mov rdi, fmt_char_bell
   767 000007F4 [5C01000000000000] 
   768 000007FC E901040000              	jmp .Lemit
   769                                  
   770                                  .Lchar_backspace:
   771 00000801 48BF-                   	mov rdi, fmt_char_backspace
   771 00000803 [6301000000000000] 
   772 0000080B E9F2030000              	jmp .Lemit
   773                                  
   774                                  .Lchar_tab:
   775 00000810 48BF-                   	mov rdi, fmt_char_tab
   775 00000812 [6F01000000000000] 
   776 0000081A E9E3030000              	jmp .Lemit
   777                                  
   778                                  .Lchar_newline:
   779 0000081F 48BF-                   	mov rdi, fmt_char_newline
   779 00000821 [7501000000000000] 
   780 00000829 E9D4030000              	jmp .Lemit
   781                                  
   782                                  .Lchar_formfeed:
   783 0000082E 48BF-                   	mov rdi, fmt_char_formfeed
   783 00000830 [7F01000000000000] 
   784 00000838 E9C5030000              	jmp .Lemit
   785                                  
   786                                  .Lchar_return:
   787 0000083D 48BF-                   	mov rdi, fmt_char_return
   787 0000083F [8601000000000000] 
   788 00000847 E9B6030000              	jmp .Lemit
   789                                  
   790                                  .Lchar_escape:
   791 0000084C 48BF-                   	mov rdi, fmt_char_escape
   791 0000084E [8F01000000000000] 
   792 00000856 E9A7030000              	jmp .Lemit
   793                                  
   794                                  .Lchar_space:
   795 0000085B 48BF-                   	mov rdi, fmt_char_space
   795 0000085D [9501000000000000] 
   796 00000865 E998030000              	jmp .Lemit
   797                                  
   798                                  .Lclosure:
   799 0000086A 4889FE                  	mov rsi, qword rdi
   800 0000086D 48BF-                   	mov rdi, fmt_closure
   800 0000086F [A501000000000000] 
   801 00000877 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   802 0000087B 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   803 0000087F E97E030000              	jmp .Lemit
   804                                  
   805                                  .Lsymbol:
   806 00000884 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   807 00000888 BE01000000              	mov rsi, 1		 ; size = 1 byte
   808 0000088D 488B5701                	mov rdx, qword [rdi + 1] ; length
   809 00000891 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   810 00000895 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   811 0000089D E8(00000000)            	call fwrite
   812 000008A2 E970030000              	jmp .Lend
   813                                  	
   814                                  .Lpair:
   815 000008A7 57                      	push rdi
   816 000008A8 48BF-                   	mov rdi, fmt_lparen
   816 000008AA [D101000000000000] 
   817 000008B2 B800000000              	mov rax, 0
   818                                          ENTER
    33 000008B7 C8000000            <1>  enter 0, 0
    34 000008BB 4883E4F0            <1>  and rsp, ~15
   819 000008BF E8(00000000)            	call printf
   820                                          LEAVE
    38 000008C4 C9                  <1>  leave
   821 000008C5 488B3C24                	mov rdi, qword [rsp] 	; pair
   822 000008C9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   823 000008CD E8D1FDFFFF              	call print_sexpr
   824 000008D2 5F                      	pop rdi 		; pair
   825 000008D3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   826                                  .Lcdr:
   827 000008D7 8A07                    	mov al, byte [rdi]
   828 000008D9 3C01                    	cmp al, T_nil
   829 000008DB 7447                    	je .Lcdr_nil
   830 000008DD 3C21                    	cmp al, T_pair
   831 000008DF 7462                    	je .Lcdr_pair
   832 000008E1 57                      	push rdi
   833 000008E2 48BF-                   	mov rdi, fmt_dotted_pair
   833 000008E4 [D301000000000000] 
   834 000008EC B800000000              	mov rax, 0
   835                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   836 000008F9 E8(00000000)            	call printf
   837                                  	LEAVE
    38 000008FE C9                  <1>  leave
   838 000008FF 5F                      	pop rdi
   839 00000900 E89EFDFFFF              	call print_sexpr
   840 00000905 48BF-                   	mov rdi, fmt_rparen
   840 00000907 [D701000000000000] 
   841 0000090F B800000000              	mov rax, 0
   842                                  	ENTER
    33 00000914 C8000000            <1>  enter 0, 0
    34 00000918 4883E4F0            <1>  and rsp, ~15
   843 0000091C E8(00000000)            	call printf
   844                                  	LEAVE
    38 00000921 C9                  <1>  leave
   845                                  	LEAVE
    38 00000922 C9                  <1>  leave
   846 00000923 C3                      	ret
   847                                  
   848                                  .Lcdr_nil:
   849 00000924 48BF-                   	mov rdi, fmt_rparen
   849 00000926 [D701000000000000] 
   850 0000092E B800000000              	mov rax, 0
   851                                  	ENTER
    33 00000933 C8000000            <1>  enter 0, 0
    34 00000937 4883E4F0            <1>  and rsp, ~15
   852 0000093B E8(00000000)            	call printf
   853                                  	LEAVE
    38 00000940 C9                  <1>  leave
   854                                  	LEAVE
    38 00000941 C9                  <1>  leave
   855 00000942 C3                      	ret
   856                                  
   857                                  .Lcdr_pair:
   858 00000943 57                      	push rdi
   859 00000944 48BF-                   	mov rdi, fmt_space
   859 00000946 [D901000000000000] 
   860 0000094E B800000000              	mov rax, 0
   861                                  	ENTER
    33 00000953 C8000000            <1>  enter 0, 0
    34 00000957 4883E4F0            <1>  and rsp, ~15
   862 0000095B E8(00000000)            	call printf
   863                                  	LEAVE
    38 00000960 C9                  <1>  leave
   864 00000961 488B3C24                	mov rdi, qword [rsp]
   865 00000965 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   866 00000969 E835FDFFFF              	call print_sexpr
   867 0000096E 5F                      	pop rdi
   868 0000096F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   869 00000973 E95FFFFFFF              	jmp .Lcdr
   870                                  
   871                                  .Lvector:
   872 00000978 488B4701                	mov rax, qword [rdi + 1] ; length
   873 0000097C 4883F800                	cmp rax, 0
   874 00000980 0F8484000000            	je .Lvector_empty
   875 00000986 57                      	push rdi
   876 00000987 48BF-                   	mov rdi, fmt_vector
   876 00000989 [DF01000000000000] 
   877 00000991 B800000000              	mov rax, 0
   878                                  	ENTER
    33 00000996 C8000000            <1>  enter 0, 0
    34 0000099A 4883E4F0            <1>  and rsp, ~15
   879 0000099E E8(00000000)            	call printf
   880                                  	LEAVE
    38 000009A3 C9                  <1>  leave
   881 000009A4 488B3C24                	mov rdi, qword [rsp]
   882 000009A8 FF7701                  	push qword [rdi + 1]
   883 000009AB 6A01                    	push 1
   884 000009AD 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   885 000009B1 E8EDFCFFFF              	call print_sexpr
   886                                  .Lvector_loop:
   887                                  	; [rsp] index
   888                                  	; [rsp + 8*1] limit
   889                                  	; [rsp + 8*2] vector
   890 000009B6 488B0424                	mov rax, qword [rsp]
   891 000009BA 483B442408              	cmp rax, qword [rsp + 8*1]
   892 000009BF 7436                    	je .Lvector_end
   893 000009C1 48BF-                   	mov rdi, fmt_space
   893 000009C3 [D901000000000000] 
   894 000009CB B800000000              	mov rax, 0
   895                                  	ENTER
    33 000009D0 C8000000            <1>  enter 0, 0
    34 000009D4 4883E4F0            <1>  and rsp, ~15
   896 000009D8 E8(00000000)            	call printf
   897                                  	LEAVE
    38 000009DD C9                  <1>  leave
   898 000009DE 488B0424                	mov rax, qword [rsp]
   899 000009E2 488B5C2410              	mov rbx, qword [rsp + 8*2]
   900 000009E7 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   901 000009EC E8B2FCFFFF              	call print_sexpr
   902 000009F1 48FF0424                	inc qword [rsp]
   903 000009F5 EBBF                    	jmp .Lvector_loop
   904                                  
   905                                  .Lvector_end:
   906 000009F7 4883C418                	add rsp, 8*3
   907 000009FB 48BF-                   	mov rdi, fmt_rparen
   907 000009FD [D701000000000000] 
   908 00000A05 E9F8010000              	jmp .Lemit	
   909                                  
   910                                  .Lvector_empty:
   911 00000A0A 48BF-                   	mov rdi, fmt_empty_vector
   911 00000A0C [DB01000000000000] 
   912 00000A14 E9E9010000              	jmp .Lemit
   913                                  
   914                                  .Lreal:
   915 00000A19 FF7701                  	push qword [rdi + 1]
   916 00000A1C F20F100424              	movsd xmm0, qword [rsp]
   917 00000A21 4883C408                	add rsp, 8*1
   918 00000A25 48BF-                   	mov rdi, fmt_real
   918 00000A27 [E201000000000000] 
   919 00000A2F B801000000              	mov rax, 1
   920                                  	ENTER
    33 00000A34 C8000000            <1>  enter 0, 0
    34 00000A38 4883E4F0            <1>  and rsp, ~15
   921 00000A3C E8(00000000)            	call printf
   922                                  	LEAVE
    38 00000A41 C9                  <1>  leave
   923 00000A42 E9D0010000              	jmp .Lend
   924                                  
   925                                  .Lrational:
   926 00000A47 488B7701                	mov rsi, qword [rdi + 1]
   927 00000A4B 488B5709                	mov rdx, qword [rdi + 1 + 8]
   928 00000A4F 4883FE00                	cmp rsi, 0
   929 00000A53 7415                    	je .Lrat_zero
   930 00000A55 4883FA01                	cmp rdx, 1
   931 00000A59 741E                    	je .Lrat_int
   932 00000A5B 48BF-                   	mov rdi, fmt_fraction
   932 00000A5D [E501000000000000] 
   933 00000A65 E998010000              	jmp .Lemit
   934                                  
   935                                  .Lrat_zero:
   936 00000A6A 48BF-                   	mov rdi, fmt_zero
   936 00000A6C [ED01000000000000] 
   937 00000A74 E989010000              	jmp .Lemit
   938                                  
   939                                  .Lrat_int:
   940 00000A79 48BF-                   	mov rdi, fmt_int
   940 00000A7B [EF01000000000000] 
   941 00000A83 E97A010000              	jmp .Lemit
   942                                  
   943                                  .Lstring:
   944 00000A88 488D4709                	lea rax, [rdi + 1 + 8]
   945 00000A8C 50                      	push rax
   946 00000A8D FF7701                  	push qword [rdi + 1]
   947 00000A90 48BF-                   	mov rdi, fmt_dquote
   947 00000A92 [3302000000000000] 
   948 00000A9A B800000000              	mov rax, 0
   949                                  	ENTER
    33 00000A9F C8000000            <1>  enter 0, 0
    34 00000AA3 4883E4F0            <1>  and rsp, ~15
   950 00000AA7 E8(00000000)            	call printf
   951                                  	LEAVE
    38 00000AAC C9                  <1>  leave
   952                                  .Lstring_loop:
   953                                  	; qword [rsp]: limit
   954                                  	; qword [rsp + 8*1]: char *
   955 00000AAD 48833C2400              	cmp qword [rsp], 0
   956 00000AB2 0F84FD000000            	je .Lstring_end
   957 00000AB8 488B442408              	mov rax, qword [rsp + 8*1]
   958 00000ABD 8A00                    	mov al, byte [rax]
   959 00000ABF 4825FF000000            	and rax, 255
   960 00000AC5 3C07                    	cmp al, 7
   961 00000AC7 7468                            je .Lstring_char_7
   962 00000AC9 3C08                            cmp al, 8
   963 00000ACB 7470                            je .Lstring_char_8
   964 00000ACD 3C09                            cmp al, 9
   965 00000ACF 7478                            je .Lstring_char_9
   966 00000AD1 3C0A                            cmp al, 10
   967 00000AD3 0F847C000000                    je .Lstring_char_10
   968 00000AD9 3C0B                            cmp al, 11
   969 00000ADB 0F8480000000                    je .Lstring_char_11
   970 00000AE1 3C0C                            cmp al, 12
   971 00000AE3 0F8484000000                    je .Lstring_char_12
   972 00000AE9 3C0D                            cmp al, 13
   973 00000AEB 0F8488000000                    je .Lstring_char_13
   974 00000AF1 3C22                            cmp al, 34
   975 00000AF3 0F848C000000                    je .Lstring_char_34
   976 00000AF9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   978 00000AFB 3C20                            cmp al, ' '
   979 00000AFD 0F8CA0000000                    jl .Lstring_char_hex
   980 00000B03 48BF-                           mov rdi, fmt_string_char
   980 00000B05 [3502000000000000] 
   981 00000B0D 4889C6                          mov rsi, rax
   982                                  .Lstring_char_emit:
   983 00000B10 B800000000                      mov rax, 0
   984                                          ENTER
    33 00000B15 C8000000            <1>  enter 0, 0
    34 00000B19 4883E4F0            <1>  and rsp, ~15
   985 00000B1D E8(00000000)                    call printf
   986                                          LEAVE
    38 00000B22 C9                  <1>  leave
   987 00000B23 48FF0C24                        dec qword [rsp]
   988 00000B27 48FF442408                      inc qword [rsp + 8*1]
   989 00000B2C E97CFFFFFF                      jmp .Lstring_loop
   990                                  
   991                                  .Lstring_char_7:
   992 00000B31 48BF-                           mov rdi, fmt_string_char_7
   992 00000B33 [3802000000000000] 
   993 00000B3B EBD3                            jmp .Lstring_char_emit
   994                                  
   995                                  .Lstring_char_8:
   996 00000B3D 48BF-                           mov rdi, fmt_string_char_8
   996 00000B3F [3B02000000000000] 
   997 00000B47 EBC7                            jmp .Lstring_char_emit
   998                                          
   999                                  .Lstring_char_9:
  1000 00000B49 48BF-                           mov rdi, fmt_string_char_9
  1000 00000B4B [3E02000000000000] 
  1001 00000B53 EBBB                            jmp .Lstring_char_emit
  1002                                  
  1003                                  .Lstring_char_10:
  1004 00000B55 48BF-                           mov rdi, fmt_string_char_10
  1004 00000B57 [4102000000000000] 
  1005 00000B5F EBAF                            jmp .Lstring_char_emit
  1006                                  
  1007                                  .Lstring_char_11:
  1008 00000B61 48BF-                           mov rdi, fmt_string_char_11
  1008 00000B63 [4402000000000000] 
  1009 00000B6B EBA3                            jmp .Lstring_char_emit
  1010                                  
  1011                                  .Lstring_char_12:
  1012 00000B6D 48BF-                           mov rdi, fmt_string_char_12
  1012 00000B6F [4702000000000000] 
  1013 00000B77 EB97                            jmp .Lstring_char_emit
  1014                                  
  1015                                  .Lstring_char_13:
  1016 00000B79 48BF-                           mov rdi, fmt_string_char_13
  1016 00000B7B [4A02000000000000] 
  1017 00000B83 EB8B                            jmp .Lstring_char_emit
  1018                                  
  1019                                  .Lstring_char_34:
  1020 00000B85 48BF-                           mov rdi, fmt_string_char_34
  1020 00000B87 [4D02000000000000] 
  1021 00000B8F E97CFFFFFF                      jmp .Lstring_char_emit
  1022                                  
  1023                                  .Lstring_char_92:
  1024 00000B94 48BF-                           mov rdi, fmt_string_char_92
  1024 00000B96 [5002000000000000] 
  1025 00000B9E E96DFFFFFF                      jmp .Lstring_char_emit
  1026                                  
  1027                                  .Lstring_char_hex:
  1028 00000BA3 48BF-                           mov rdi, fmt_string_char_hex
  1028 00000BA5 [5302000000000000] 
  1029 00000BAD 4889C6                          mov rsi, rax
  1030 00000BB0 E95BFFFFFF                      jmp .Lstring_char_emit        
  1031                                  
  1032                                  .Lstring_end:
  1033 00000BB5 4883C410                	add rsp, 8 * 2
  1034 00000BB9 48BF-                   	mov rdi, fmt_dquote
  1034 00000BBB [3302000000000000] 
  1035 00000BC3 EB3D                    	jmp .Lemit
  1036                                  
  1037                                  .Lunknown_sexpr_type:
  1038 00000BC5 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1038 00000BC7 [F301000000000000] 
  1039 00000BCF 4825FF000000            	and rax, 255
  1040 00000BD5 4889C2                  	mov rdx, rax
  1041 00000BD8 4889F9                  	mov rcx, rdi
  1042 00000BDB 488B3C25[00000000]      	mov rdi, qword [stderr]
  1043 00000BE3 B800000000              	mov rax, 0
  1044                                  	ENTER
    33 00000BE8 C8000000            <1>  enter 0, 0
    34 00000BEC 4883E4F0            <1>  and rsp, ~15
  1045 00000BF0 E8(00000000)            	call fprintf
  1046                                  	LEAVE
    38 00000BF5 C9                  <1>  leave
  1047 00000BF6 48C7C0FFFFFFFF          	mov rax, -1
  1048 00000BFD E8(00000000)            	call exit
  1049                                  
  1050                                  .Lemit:
  1051 00000C02 B800000000              	mov rax, 0
  1052                                  	ENTER
    33 00000C07 C8000000            <1>  enter 0, 0
    34 00000C0B 4883E4F0            <1>  and rsp, ~15
  1053 00000C0F E8(00000000)            	call printf
  1054                                  	LEAVE
    38 00000C14 C9                  <1>  leave
  1055 00000C15 EB00                    	jmp .Lend
  1056                                  
  1057                                  .Lend:
  1058                                  	LEAVE
    38 00000C17 C9                  <1>  leave
  1059 00000C18 C3                      	ret
  1060                                  
  1061                                  ;;; rdi: address of free variable
  1062                                  ;;; rsi: address of code-pointer
  1063                                  bind_primitive:
  1064                                          ENTER
    33 00000C19 C8000000            <1>  enter 0, 0
    34 00000C1D 4883E4F0            <1>  and rsp, ~15
  1065 00000C21 57                              push rdi
  1066 00000C22 BF11000000                      mov rdi, (1 + 8 + 8)
  1067 00000C27 E85CFAFFFF                      call malloc
  1068 00000C2C 5F                              pop rdi
  1069 00000C2D C60005                          mov byte [rax], T_closure
  1070 00000C30 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1071 00000C38 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1072 00000C3C 488907                          mov qword [rdi], rax
  1073                                          LEAVE
    38 00000C3F C9                  <1>  leave
  1074 00000C40 C3                              ret
  1075                                  
  1076                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1077                                  L_code_ptr_bin_apply:
  1078 00000C41 C8000000                        enter 0, 0
  1079                                          ;finding the list's length
  1080 00000C45 4831C9                          xor rcx, rcx ;0
  1081 00000C48 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
  1082                                          assert_pair(rax)
    42 00000C4C 803821              <1>  cmp byte [%1], %2
    43 00000C4F 0F8514120000        <1>  jne L_error_incorrect_type
  1083 00000C55 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
  1084                                          my_loop1:
  1085 00000C59 483D[01000000]                          cmp rax, sob_nil ;if nill
  1086 00000C5F 7417                                    je my_loop_end1 ;jmp end
  1087 00000C61 48FFC1                                  inc rcx 
  1088 00000C64 53                                      push rbx ;insrting val to stack
  1089                                                  assert_pair(rax)
    42 00000C65 803821              <1>  cmp byte [%1], %2
    43 00000C68 0F85FB110000        <1>  jne L_error_incorrect_type
  1090 00000C6E 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
  1091 00000C72 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
  1092 00000C76 EBE1                                    jmp my_loop1
  1093                                          my_loop_end1:
  1094                                  
  1095                                          ;TODO: ecx = 0 ?
  1096                                  
  1097                                          ;make values in the opposite order:
  1098                                          ;1.pushing all argument one more time in the right order
  1099 00000C78 4889CB                          mov rbx, rcx ;count-up
  1100 00000C7B B900000000                      mov rcx, 0 
  1101 00000C80 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
  1102                                          my_loop2:
  1103 00000C83 4839D9                                  cmp rcx, rbx ; if rcx = n
  1104 00000C86 740A                                    je my_loop_end2 ;then: jump to the end
  1105 00000C88 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
  1106 00000C8C 50                                      push rax
  1107 00000C8D 48FFC1                                  inc rcx
  1108 00000C90 EBF1                                    jmp my_loop2
  1109                                          my_loop_end2:
  1110                                          ;2.overwriting element above by element below but in correct order
  1111 00000C92 488D5306                        lea rdx, [rbx + 6] ;nubmer of *qwords* we need to skip
  1112 00000C96 48C1E203                        shl rdx, 3 ;nubmer of *bytes* we need to skip
  1113 00000C9A 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
  1114 00000C9E 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
  1115 00000CA2 4C8B5510                        mov r10, qword [rbp + 8 * 2] ; save lex-env
  1116 00000CA6 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
  1117 00000CAA B900000000                      mov rcx, 0
  1118                                          my_loop3:
  1119 00000CAF 4839D9                                  cmp rcx, rbx ;if rcx = n
  1120 00000CB2 7414                                    je my_loop_end3 ;then: jump to the end
  1121 00000CB4 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
  1122 00000CB8 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
  1123 00000CBC 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
  1124 00000CBF 4883C408                                add rsp, 8 ;pop arg we used
  1125 00000CC3 48FFC1                                  inc rcx 
  1126 00000CC6 EBE7                                    jmp my_loop3
  1127                                          my_loop_end3:
  1128 00000CC8 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
  1129 00000CCC 4883C420                        add rsp, 8 * 4 ; pop old-rbp, return-address, le-ap 
  1130 00000CD0 51                              push rcx ;push number of arguments
  1131 00000CD1 4152                            push r10 ; push lex-env
  1132 00000CD3 57                              push rdi ; push old ret-add
  1133 00000CD4 4889F5                          mov rbp, rsi ;rbp = old-rbp
  1134 00000CD7 4889EC                          mov rsp, rbp; the part of LEAVE we need
  1135 00000CDA 41FFE0                          jmp r8 ; fun to apply
  1136                                  	
  1137                                  L_code_ptr_is_null:
  1138                                          ENTER
    33 00000CDD C8000000            <1>  enter 0, 0
    34 00000CE1 4883E4F0            <1>  and rsp, ~15
  1139 00000CE5 48837D1801                      cmp COUNT, 1
  1140 00000CEA 0F85A5100000                    jne L_error_arg_count_1
  1141 00000CF0 488B4520                        mov rax, PARAM(0)
  1142 00000CF4 803801                          cmp byte [rax], T_nil
  1143 00000CF7 750C                            jne .L_false
  1144 00000CF9 48B8-                           mov rax, sob_boolean_true
  1144 00000CFB [0300000000000000] 
  1145 00000D03 EB0A                            jmp .L_end
  1146                                  .L_false:
  1147 00000D05 48B8-                           mov rax, sob_boolean_false
  1147 00000D07 [0200000000000000] 
  1148                                  .L_end:
  1149                                          LEAVE
    38 00000D0F C9                  <1>  leave
  1150 00000D10 C21800                          ret AND_KILL_FRAME(1)
  1151                                  
  1152                                  L_code_ptr_is_pair:
  1153                                          ENTER
    33 00000D13 C8000000            <1>  enter 0, 0
    34 00000D17 4883E4F0            <1>  and rsp, ~15
  1154 00000D1B 48837D1801                      cmp COUNT, 1
  1155 00000D20 0F856F100000                    jne L_error_arg_count_1
  1156 00000D26 488B4520                        mov rax, PARAM(0)
  1157 00000D2A 803821                          cmp byte [rax], T_pair
  1158 00000D2D 750C                            jne .L_false
  1159 00000D2F 48B8-                           mov rax, sob_boolean_true
  1159 00000D31 [0300000000000000] 
  1160 00000D39 EB0A                            jmp .L_end
  1161                                  .L_false:
  1162 00000D3B 48B8-                           mov rax, sob_boolean_false
  1162 00000D3D [0200000000000000] 
  1163                                  .L_end:
  1164                                          LEAVE
    38 00000D45 C9                  <1>  leave
  1165 00000D46 C21800                          ret AND_KILL_FRAME(1)
  1166                                          
  1167                                  L_code_ptr_is_void:
  1168                                          ENTER
    33 00000D49 C8000000            <1>  enter 0, 0
    34 00000D4D 4883E4F0            <1>  and rsp, ~15
  1169 00000D51 48837D1801                      cmp COUNT, 1
  1170 00000D56 0F8539100000                    jne L_error_arg_count_1
  1171 00000D5C 488B4520                        mov rax, PARAM(0)
  1172 00000D60 803800                          cmp byte [rax], T_void
  1173 00000D63 750C                            jne .L_false
  1174 00000D65 48B8-                           mov rax, sob_boolean_true
  1174 00000D67 [0300000000000000] 
  1175 00000D6F EB0A                            jmp .L_end
  1176                                  .L_false:
  1177 00000D71 48B8-                           mov rax, sob_boolean_false
  1177 00000D73 [0200000000000000] 
  1178                                  .L_end:
  1179                                          LEAVE
    38 00000D7B C9                  <1>  leave
  1180 00000D7C C21800                          ret AND_KILL_FRAME(1)
  1181                                  
  1182                                  L_code_ptr_is_char:
  1183                                          ENTER
    33 00000D7F C8000000            <1>  enter 0, 0
    34 00000D83 4883E4F0            <1>  and rsp, ~15
  1184 00000D87 48837D1801                      cmp COUNT, 1
  1185 00000D8C 0F8503100000                    jne L_error_arg_count_1
  1186 00000D92 488B4520                        mov rax, PARAM(0)
  1187 00000D96 803802                          cmp byte [rax], T_char
  1188 00000D99 750C                            jne .L_false
  1189 00000D9B 48B8-                           mov rax, sob_boolean_true
  1189 00000D9D [0300000000000000] 
  1190 00000DA5 EB0A                            jmp .L_end
  1191                                  .L_false:
  1192 00000DA7 48B8-                           mov rax, sob_boolean_false
  1192 00000DA9 [0200000000000000] 
  1193                                  .L_end:
  1194                                          LEAVE
    38 00000DB1 C9                  <1>  leave
  1195 00000DB2 C21800                          ret AND_KILL_FRAME(1)
  1196                                  
  1197                                  L_code_ptr_is_string:
  1198                                          ENTER
    33 00000DB5 C8000000            <1>  enter 0, 0
    34 00000DB9 4883E4F0            <1>  and rsp, ~15
  1199 00000DBD 48837D1801                      cmp COUNT, 1
  1200 00000DC2 0F85CD0F0000                    jne L_error_arg_count_1
  1201 00000DC8 488B4520                        mov rax, PARAM(0)
  1202 00000DCC 803803                          cmp byte [rax], T_string
  1203 00000DCF 750C                            jne .L_false
  1204 00000DD1 48B8-                           mov rax, sob_boolean_true
  1204 00000DD3 [0300000000000000] 
  1205 00000DDB EB0A                            jmp .L_end
  1206                                  .L_false:
  1207 00000DDD 48B8-                           mov rax, sob_boolean_false
  1207 00000DDF [0200000000000000] 
  1208                                  .L_end:
  1209                                          LEAVE
    38 00000DE7 C9                  <1>  leave
  1210 00000DE8 C21800                          ret AND_KILL_FRAME(1)
  1211                                  
  1212                                  L_code_ptr_is_symbol:
  1213                                          ENTER
    33 00000DEB C8000000            <1>  enter 0, 0
    34 00000DEF 4883E4F0            <1>  and rsp, ~15
  1214 00000DF3 48837D1801                      cmp COUNT, 1
  1215 00000DF8 0F85970F0000                    jne L_error_arg_count_1
  1216 00000DFE 488B4520                        mov rax, PARAM(0)
  1217 00000E02 803804                          cmp byte [rax], T_symbol
  1218 00000E05 750C                            jne .L_false
  1219 00000E07 48B8-                           mov rax, sob_boolean_true
  1219 00000E09 [0300000000000000] 
  1220 00000E11 EB0A                            jmp .L_end
  1221                                  .L_false:
  1222 00000E13 48B8-                           mov rax, sob_boolean_false
  1222 00000E15 [0200000000000000] 
  1223                                  .L_end:
  1224                                          LEAVE
    38 00000E1D C9                  <1>  leave
  1225 00000E1E C21800                          ret AND_KILL_FRAME(1)
  1226                                  
  1227                                  L_code_ptr_is_vector:
  1228                                          ENTER
    33 00000E21 C8000000            <1>  enter 0, 0
    34 00000E25 4883E4F0            <1>  and rsp, ~15
  1229 00000E29 48837D1801                      cmp COUNT, 1
  1230 00000E2E 0F85610F0000                    jne L_error_arg_count_1
  1231 00000E34 488B4520                        mov rax, PARAM(0)
  1232 00000E38 803822                          cmp byte [rax], T_vector
  1233 00000E3B 750C                            jne .L_false
  1234 00000E3D 48B8-                           mov rax, sob_boolean_true
  1234 00000E3F [0300000000000000] 
  1235 00000E47 EB0A                            jmp .L_end
  1236                                  .L_false:
  1237 00000E49 48B8-                           mov rax, sob_boolean_false
  1237 00000E4B [0200000000000000] 
  1238                                  .L_end:
  1239                                          LEAVE
    38 00000E53 C9                  <1>  leave
  1240 00000E54 C21800                          ret AND_KILL_FRAME(1)
  1241                                  
  1242                                  L_code_ptr_is_closure:
  1243                                          ENTER
    33 00000E57 C8000000            <1>  enter 0, 0
    34 00000E5B 4883E4F0            <1>  and rsp, ~15
  1244 00000E5F 48837D1801                      cmp COUNT, 1
  1245 00000E64 0F852B0F0000                    jne L_error_arg_count_1
  1246 00000E6A 488B4520                        mov rax, PARAM(0)
  1247 00000E6E 803805                          cmp byte [rax], T_closure
  1248 00000E71 750C                            jne .L_false
  1249 00000E73 48B8-                           mov rax, sob_boolean_true
  1249 00000E75 [0300000000000000] 
  1250 00000E7D EB0A                            jmp .L_end
  1251                                  .L_false:
  1252 00000E7F 48B8-                           mov rax, sob_boolean_false
  1252 00000E81 [0200000000000000] 
  1253                                  .L_end:
  1254                                          LEAVE
    38 00000E89 C9                  <1>  leave
  1255 00000E8A C21800                          ret AND_KILL_FRAME(1)
  1256                                  
  1257                                  L_code_ptr_is_real:
  1258                                          ENTER
    33 00000E8D C8000000            <1>  enter 0, 0
    34 00000E91 4883E4F0            <1>  and rsp, ~15
  1259 00000E95 48837D1801                      cmp COUNT, 1
  1260 00000E9A 0F85F50E0000                    jne L_error_arg_count_1
  1261 00000EA0 488B4520                        mov rax, PARAM(0)
  1262 00000EA4 803812                          cmp byte [rax], T_real
  1263 00000EA7 750C                            jne .L_false
  1264 00000EA9 48B8-                           mov rax, sob_boolean_true
  1264 00000EAB [0300000000000000] 
  1265 00000EB3 EB0A                            jmp .L_end
  1266                                  .L_false:
  1267 00000EB5 48B8-                           mov rax, sob_boolean_false
  1267 00000EB7 [0200000000000000] 
  1268                                  .L_end:
  1269                                          LEAVE
    38 00000EBF C9                  <1>  leave
  1270 00000EC0 C21800                          ret AND_KILL_FRAME(1)
  1271                                  
  1272                                  L_code_ptr_is_rational:
  1273                                          ENTER
    33 00000EC3 C8000000            <1>  enter 0, 0
    34 00000EC7 4883E4F0            <1>  and rsp, ~15
  1274 00000ECB 48837D1801                      cmp COUNT, 1
  1275 00000ED0 0F85BF0E0000                    jne L_error_arg_count_1
  1276 00000ED6 488B4520                        mov rax, PARAM(0)
  1277 00000EDA 803811                          cmp byte [rax], T_rational
  1278 00000EDD 750C                            jne .L_false
  1279 00000EDF 48B8-                           mov rax, sob_boolean_true
  1279 00000EE1 [0300000000000000] 
  1280 00000EE9 EB0A                            jmp .L_end
  1281                                  .L_false:
  1282 00000EEB 48B8-                           mov rax, sob_boolean_false
  1282 00000EED [0200000000000000] 
  1283                                  .L_end:
  1284                                          LEAVE
    38 00000EF5 C9                  <1>  leave
  1285 00000EF6 C21800                          ret AND_KILL_FRAME(1)
  1286                                  
  1287                                  L_code_ptr_is_boolean:
  1288                                          ENTER
    33 00000EF9 C8000000            <1>  enter 0, 0
    34 00000EFD 4883E4F0            <1>  and rsp, ~15
  1289 00000F01 48837D1801                      cmp COUNT, 1
  1290 00000F06 0F85890E0000                    jne L_error_arg_count_1
  1291 00000F0C 488B4520                        mov rax, PARAM(0)
  1292 00000F10 8A18                            mov bl, byte [rax]
  1293 00000F12 80E308                          and bl, T_boolean
  1294 00000F15 740C                            je .L_false
  1295 00000F17 48B8-                           mov rax, sob_boolean_true
  1295 00000F19 [0300000000000000] 
  1296 00000F21 EB0A                            jmp .L_end
  1297                                  .L_false:
  1298 00000F23 48B8-                           mov rax, sob_boolean_false
  1298 00000F25 [0200000000000000] 
  1299                                  .L_end:
  1300                                          LEAVE
    38 00000F2D C9                  <1>  leave
  1301 00000F2E C21800                          ret AND_KILL_FRAME(1)
  1302                                          
  1303                                  L_code_ptr_is_number:
  1304                                          ENTER
    33 00000F31 C8000000            <1>  enter 0, 0
    34 00000F35 4883E4F0            <1>  and rsp, ~15
  1305 00000F39 48837D1801                      cmp COUNT, 1
  1306 00000F3E 0F85510E0000                    jne L_error_arg_count_1
  1307 00000F44 488B4520                        mov rax, PARAM(0)
  1308 00000F48 8A18                            mov bl, byte [rax]
  1309 00000F4A 80E310                          and bl, T_number
  1310 00000F4D 740C                            je .L_false
  1311 00000F4F 48B8-                           mov rax, sob_boolean_true
  1311 00000F51 [0300000000000000] 
  1312 00000F59 EB0A                            jmp .L_end
  1313                                  .L_false:
  1314 00000F5B 48B8-                           mov rax, sob_boolean_false
  1314 00000F5D [0200000000000000] 
  1315                                  .L_end:
  1316                                          LEAVE
    38 00000F65 C9                  <1>  leave
  1317 00000F66 C21800                          ret AND_KILL_FRAME(1)
  1318                                          
  1319                                  L_code_ptr_is_collection:
  1320                                          ENTER
    33 00000F69 C8000000            <1>  enter 0, 0
    34 00000F6D 4883E4F0            <1>  and rsp, ~15
  1321 00000F71 48837D1801                      cmp COUNT, 1
  1322 00000F76 0F85190E0000                    jne L_error_arg_count_1
  1323 00000F7C 488B4520                        mov rax, PARAM(0)
  1324 00000F80 8A18                            mov bl, byte [rax]
  1325 00000F82 80E320                          and bl, T_collection
  1326 00000F85 740C                            je .L_false
  1327 00000F87 48B8-                           mov rax, sob_boolean_true
  1327 00000F89 [0300000000000000] 
  1328 00000F91 EB0A                            jmp .L_end
  1329                                  .L_false:
  1330 00000F93 48B8-                           mov rax, sob_boolean_false
  1330 00000F95 [0200000000000000] 
  1331                                  .L_end:
  1332                                          LEAVE
    38 00000F9D C9                  <1>  leave
  1333 00000F9E C21800                          ret AND_KILL_FRAME(1)
  1334                                  
  1335                                  L_code_ptr_cons:
  1336                                          ENTER
    33 00000FA1 C8000000            <1>  enter 0, 0
    34 00000FA5 4883E4F0            <1>  and rsp, ~15
  1337 00000FA9 48837D1802                      cmp COUNT, 2
  1338 00000FAE 0F85160E0000                    jne L_error_arg_count_2
  1339 00000FB4 BF11000000                      mov rdi, (1 + 8 + 8)
  1340 00000FB9 E8CAF6FFFF                      call malloc
  1341 00000FBE C60021                          mov byte [rax], T_pair
  1342 00000FC1 488B5D20                        mov rbx, PARAM(0)
  1343 00000FC5 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1344 00000FC9 488B5D28                        mov rbx, PARAM(1)
  1345 00000FCD 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1346                                          LEAVE
    38 00000FD1 C9                  <1>  leave
  1347 00000FD2 C22000                          ret AND_KILL_FRAME(2)
  1348                                  
  1349                                  L_code_ptr_display_sexpr:
  1350                                          ENTER
    33 00000FD5 C8000000            <1>  enter 0, 0
    34 00000FD9 4883E4F0            <1>  and rsp, ~15
  1351 00000FDD 48837D1801                      cmp COUNT, 1
  1352 00000FE2 0F85AD0D0000                    jne L_error_arg_count_1
  1353 00000FE8 488B7D20                        mov rdi, PARAM(0)
  1354 00000FEC E8B2F6FFFF                      call print_sexpr
  1355 00000FF1 48B8-                           mov rax, sob_void
  1355 00000FF3 [0000000000000000] 
  1356                                          LEAVE
    38 00000FFB C9                  <1>  leave
  1357 00000FFC C21800                          ret AND_KILL_FRAME(1)
  1358                                  
  1359                                  L_code_ptr_write_char:
  1360                                          ENTER
    33 00000FFF C8000000            <1>  enter 0, 0
    34 00001003 4883E4F0            <1>  and rsp, ~15
  1361 00001007 48837D1801                      cmp COUNT, 1
  1362 0000100C 0F85830D0000                    jne L_error_arg_count_1
  1363 00001012 488B4520                        mov rax, PARAM(0)
  1364                                          assert_char(rax)
    42 00001016 803802              <1>  cmp byte [%1], %2
    43 00001019 0F854A0E0000        <1>  jne L_error_incorrect_type
  1365 0000101F 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1366 00001022 4825FF000000                    and rax, 255
  1367 00001028 48BF-                           mov rdi, fmt_char
  1367 0000102A [5902000000000000] 
  1368 00001032 4889C6                          mov rsi, rax
  1369 00001035 B800000000                      mov rax, 0
  1370                                  	ENTER
    33 0000103A C8000000            <1>  enter 0, 0
    34 0000103E 4883E4F0            <1>  and rsp, ~15
  1371 00001042 E8(00000000)                    call printf
  1372                                  	LEAVE
    38 00001047 C9                  <1>  leave
  1373 00001048 48B8-                           mov rax, sob_void
  1373 0000104A [0000000000000000] 
  1374                                          LEAVE
    38 00001052 C9                  <1>  leave
  1375 00001053 C21800                          ret AND_KILL_FRAME(1)
  1376                                  
  1377                                  L_code_ptr_car:
  1378                                          ENTER
    33 00001056 C8000000            <1>  enter 0, 0
    34 0000105A 4883E4F0            <1>  and rsp, ~15
  1379 0000105E 48837D1801                      cmp COUNT, 1
  1380 00001063 0F852C0D0000                    jne L_error_arg_count_1
  1381 00001069 488B4520                        mov rax, PARAM(0)
  1382                                          assert_pair(rax)
    42 0000106D 803821              <1>  cmp byte [%1], %2
    43 00001070 0F85F30D0000        <1>  jne L_error_incorrect_type
  1383 00001076 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1384                                          LEAVE
    38 0000107A C9                  <1>  leave
  1385 0000107B C21800                          ret AND_KILL_FRAME(1)
  1386                                          
  1387                                  L_code_ptr_cdr:
  1388                                          ENTER
    33 0000107E C8000000            <1>  enter 0, 0
    34 00001082 4883E4F0            <1>  and rsp, ~15
  1389 00001086 48837D1801                      cmp COUNT, 1
  1390 0000108B 0F85040D0000                    jne L_error_arg_count_1
  1391 00001091 488B4520                        mov rax, PARAM(0)
  1392                                          assert_pair(rax)
    42 00001095 803821              <1>  cmp byte [%1], %2
    43 00001098 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1393 0000109E 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1394                                          LEAVE
    38 000010A2 C9                  <1>  leave
  1395 000010A3 C21800                          ret AND_KILL_FRAME(1)
  1396                                          
  1397                                  L_code_ptr_string_length:
  1398                                          ENTER
    33 000010A6 C8000000            <1>  enter 0, 0
    34 000010AA 4883E4F0            <1>  and rsp, ~15
  1399 000010AE 48837D1801                      cmp COUNT, 1
  1400 000010B3 0F85DC0C0000                    jne L_error_arg_count_1
  1401 000010B9 488B4520                        mov rax, PARAM(0)
  1402                                          assert_string(rax)
    42 000010BD 803803              <1>  cmp byte [%1], %2
    43 000010C0 0F85A30D0000        <1>  jne L_error_incorrect_type
  1403 000010C6 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1404 000010CA E83A0C0000                      call make_integer
  1405                                          LEAVE
    38 000010CF C9                  <1>  leave
  1406 000010D0 C21800                          ret AND_KILL_FRAME(1)
  1407                                  
  1408                                  L_code_ptr_vector_length:
  1409                                          ENTER
    33 000010D3 C8000000            <1>  enter 0, 0
    34 000010D7 4883E4F0            <1>  and rsp, ~15
  1410 000010DB 48837D1801                      cmp COUNT, 1
  1411 000010E0 0F85AF0C0000                    jne L_error_arg_count_1
  1412 000010E6 488B4520                        mov rax, PARAM(0)
  1413                                          assert_vector(rax)
    42 000010EA 803822              <1>  cmp byte [%1], %2
    43 000010ED 0F85760D0000        <1>  jne L_error_incorrect_type
  1414 000010F3 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1415 000010F7 E80D0C0000                      call make_integer
  1416                                          LEAVE
    38 000010FC C9                  <1>  leave
  1417 000010FD C21800                          ret AND_KILL_FRAME(1)
  1418                                  
  1419                                  L_code_ptr_real_to_integer:
  1420                                          ENTER
    33 00001100 C8000000            <1>  enter 0, 0
    34 00001104 4883E4F0            <1>  and rsp, ~15
  1421 00001108 48837D1801                      cmp COUNT, 1
  1422 0000110D 0F85820C0000                    jne L_error_arg_count_1
  1423 00001113 488B5D20                        mov rbx, PARAM(0)
  1424                                          assert_real(rbx)
    42 00001117 803B12              <1>  cmp byte [%1], %2
    43 0000111A 0F85490D0000        <1>  jne L_error_incorrect_type
  1425 00001120 F20F104301                      movsd xmm0, qword [rbx + 1]
  1426 00001125 F2480F2CF8                      cvttsd2si rdi, xmm0
  1427 0000112A E8DA0B0000                      call make_integer
  1428                                          LEAVE
    38 0000112F C9                  <1>  leave
  1429 00001130 C21800                          ret AND_KILL_FRAME(1)
  1430                                  
  1431                                  L_code_ptr_exit:
  1432                                          ENTER
    33 00001133 C8000000            <1>  enter 0, 0
    34 00001137 4883E4F0            <1>  and rsp, ~15
  1433 0000113B 48837D1800                      cmp COUNT, 0
  1434 00001140 0F851A0C0000                    jne L_error_arg_count_0
  1435 00001146 B800000000                      mov rax, 0
  1436 0000114B E8(00000000)                    call exit
  1437                                  
  1438                                  L_code_ptr_integer_to_real:
  1439                                          ENTER
    33 00001150 C8000000            <1>  enter 0, 0
    34 00001154 4883E4F0            <1>  and rsp, ~15
  1440 00001158 48837D1801                      cmp COUNT, 1
  1441 0000115D 0F85320C0000                    jne L_error_arg_count_1
  1442 00001163 488B4520                        mov rax, PARAM(0)
  1443                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001167 803811              <2>  cmp byte [%1], %2
    43 0000116A 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 00001170 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001175 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1444 0000117B FF7001                          push qword [rax + 1]
  1445 0000117E F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1446 00001184 E8640B0000                      call make_real
  1447                                          LEAVE
    38 00001189 C9                  <1>  leave
  1448 0000118A C21800                          ret AND_KILL_FRAME(1)
  1449                                  
  1450                                  L_code_ptr_rational_to_real:
  1451                                          ENTER
    33 0000118D C8000000            <1>  enter 0, 0
    34 00001191 4883E4F0            <1>  and rsp, ~15
  1452 00001195 48837D1801                      cmp COUNT, 1
  1453 0000119A 0F85F50B0000                    jne L_error_arg_count_1
  1454 000011A0 488B4520                        mov rax, PARAM(0)
  1455                                          assert_rational(rax)
    42 000011A4 803811              <1>  cmp byte [%1], %2
    43 000011A7 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1456 000011AD FF7001                          push qword [rax + 1]
  1457 000011B0 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1458 000011B6 FF7009                          push qword [rax + 1 + 8]
  1459 000011B9 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1460 000011BF F20F5EC1                        divsd xmm0, xmm1
  1461 000011C3 E8250B0000                      call make_real
  1462                                          LEAVE
    38 000011C8 C9                  <1>  leave
  1463 000011C9 C21800                          ret AND_KILL_FRAME(1)
  1464                                  
  1465                                  L_code_ptr_char_to_integer:
  1466                                          ENTER
    33 000011CC C8000000            <1>  enter 0, 0
    34 000011D0 4883E4F0            <1>  and rsp, ~15
  1467 000011D4 48837D1801                      cmp COUNT, 1
  1468 000011D9 0F85B60B0000                    jne L_error_arg_count_1
  1469 000011DF 488B4520                        mov rax, PARAM(0)
  1470                                          assert_char(rax)
    42 000011E3 803802              <1>  cmp byte [%1], %2
    43 000011E6 0F857D0C0000        <1>  jne L_error_incorrect_type
  1471 000011EC 8A4001                          mov al, byte [rax + 1]
  1472 000011EF 4825FF000000                    and rax, 255
  1473 000011F5 4889C7                          mov rdi, rax
  1474 000011F8 E80C0B0000                      call make_integer
  1475                                          LEAVE
    38 000011FD C9                  <1>  leave
  1476 000011FE C21800                          ret AND_KILL_FRAME(1)
  1477                                  
  1478                                  L_code_ptr_integer_to_char:
  1479                                          ENTER
    33 00001201 C8000000            <1>  enter 0, 0
    34 00001205 4883E4F0            <1>  and rsp, ~15
  1480 00001209 48837D1801                      cmp COUNT, 1
  1481 0000120E 0F85810B0000                    jne L_error_arg_count_1
  1482 00001214 488B4520                        mov rax, PARAM(0)
  1483                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001218 803811              <2>  cmp byte [%1], %2
    43 0000121B 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001221 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001226 0F853D0C0000        <1>  jne L_error_incorrect_type
  1484 0000122C 488B5801                        mov rbx, qword [rax + 1]
  1485 00001230 4883FB00                        cmp rbx, 0
  1486 00001234 0F8EF50A0000                    jle L_error_integer_range
  1487 0000123A 4881FB00010000                  cmp rbx, 256
  1488 00001241 0F8DE80A0000                    jge L_error_integer_range
  1489 00001247 BF02000000                      mov rdi, (1 + 1)
  1490 0000124C E837F4FFFF                      call malloc
  1491 00001251 C60002                          mov byte [rax], T_char
  1492 00001254 885801                          mov byte [rax + 1], bl
  1493                                          LEAVE
    38 00001257 C9                  <1>  leave
  1494 00001258 C21800                          ret AND_KILL_FRAME(1)
  1495                                  
  1496                                  L_code_ptr_trng:
  1497                                          ENTER
    33 0000125B C8000000            <1>  enter 0, 0
    34 0000125F 4883E4F0            <1>  and rsp, ~15
  1498 00001263 48837D1800                      cmp COUNT, 0
  1499 00001268 0F85F20A0000                    jne L_error_arg_count_0
  1500 0000126E 480FC7F7                        rdrand rdi
  1501 00001272 48D1EF                          shr rdi, 1
  1502 00001275 E88F0A0000                      call make_integer
  1503                                          LEAVE
    38 0000127A C9                  <1>  leave
  1504 0000127B C21000                          ret AND_KILL_FRAME(0)
  1505                                  
  1506                                  L_code_ptr_is_zero:
  1507                                          ENTER
    33 0000127E C8000000            <1>  enter 0, 0
    34 00001282 4883E4F0            <1>  and rsp, ~15
  1508 00001286 48837D1801                      cmp COUNT, 1
  1509 0000128B 0F85040B0000                    jne L_error_arg_count_1
  1510 00001291 488B4520                        mov rax, PARAM(0)
  1511 00001295 803811                          cmp byte [rax], T_rational
  1512 00001298 740A                            je .L_rational
  1513 0000129A 803812                          cmp byte [rax], T_real
  1514 0000129D 740E                            je .L_real
  1515 0000129F E9C50B0000                      jmp L_error_incorrect_type
  1516                                  .L_rational:
  1517 000012A4 4883780100                      cmp qword [rax + 1], 0
  1518 000012A9 7420                            je .L_zero
  1519 000012AB EB12                            jmp .L_not_zero
  1520                                  .L_real:
  1521 000012AD 660FEFC0                        pxor xmm0, xmm0
  1522 000012B1 FF7001                          push qword [rax + 1]
  1523 000012B4 F20F100C24                      movsd xmm1, qword [rsp]
  1524 000012B9 660F2EC1                        ucomisd xmm0, xmm1
  1525 000012BD 740C                            je .L_zero
  1526                                  .L_not_zero:
  1527 000012BF 48B8-                           mov rax, sob_boolean_false
  1527 000012C1 [0200000000000000] 
  1528 000012C9 EB0A                            jmp .L_end
  1529                                  .L_zero:
  1530 000012CB 48B8-                           mov rax, sob_boolean_true
  1530 000012CD [0300000000000000] 
  1531                                  .L_end:
  1532                                          LEAVE
    38 000012D5 C9                  <1>  leave
  1533 000012D6 C21800                          ret AND_KILL_FRAME(1)
  1534                                  
  1535                                  L_code_ptr_is_integer:
  1536                                          ENTER
    33 000012D9 C8000000            <1>  enter 0, 0
    34 000012DD 4883E4F0            <1>  and rsp, ~15
  1537 000012E1 48837D1801                      cmp COUNT, 1
  1538 000012E6 0F85A90A0000                    jne L_error_arg_count_1
  1539 000012EC 488B4520                        mov rax, PARAM(0)
  1540 000012F0 803811                          cmp byte [rax], T_rational
  1541 000012F3 7513                            jne .L_false
  1542 000012F5 4883780901                      cmp qword [rax + 1 + 8], 1
  1543 000012FA 750C                            jne .L_false
  1544 000012FC 48B8-                           mov rax, sob_boolean_true
  1544 000012FE [0300000000000000] 
  1545 00001306 EB0A                            jmp .L_exit
  1546                                  .L_false:
  1547 00001308 48B8-                           mov rax, sob_boolean_false
  1547 0000130A [0200000000000000] 
  1548                                  .L_exit:
  1549                                          LEAVE
    38 00001312 C9                  <1>  leave
  1550 00001313 C21800                          ret AND_KILL_FRAME(1)
  1551                                  
  1552                                  L_code_ptr_raw_bin_add_rr:
  1553                                          ENTER
    33 00001316 C8000000            <1>  enter 0, 0
    34 0000131A 4883E4F0            <1>  and rsp, ~15
  1554 0000131E 48837D1802                      cmp COUNT, 2
  1555 00001323 0F85A10A0000                    jne L_error_arg_count_2
  1556 00001329 488B5D20                        mov rbx, PARAM(0)
  1557                                          assert_real(rbx)
    42 0000132D 803B12              <1>  cmp byte [%1], %2
    43 00001330 0F85330B0000        <1>  jne L_error_incorrect_type
  1558 00001336 488B4D28                        mov rcx, PARAM(1)
  1559                                          assert_real(rcx)
    42 0000133A 803912              <1>  cmp byte [%1], %2
    43 0000133D 0F85260B0000        <1>  jne L_error_incorrect_type
  1560 00001343 F20F104301                      movsd xmm0, qword [rbx + 1]
  1561 00001348 F20F104901                      movsd xmm1, qword [rcx + 1]
  1562 0000134D F20F58C1                        addsd xmm0, xmm1
  1563 00001351 E897090000                      call make_real
  1564                                          LEAVE
    38 00001356 C9                  <1>  leave
  1565 00001357 C22000                          ret AND_KILL_FRAME(2)
  1566                                  
  1567                                  L_code_ptr_raw_bin_sub_rr:
  1568                                          ENTER
    33 0000135A C8000000            <1>  enter 0, 0
    34 0000135E 4883E4F0            <1>  and rsp, ~15
  1569 00001362 48837D1802                      cmp COUNT, 2
  1570 00001367 0F855D0A0000                    jne L_error_arg_count_2
  1571 0000136D 488B5D20                        mov rbx, PARAM(0)
  1572                                          assert_real(rbx)
    42 00001371 803B12              <1>  cmp byte [%1], %2
    43 00001374 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1573 0000137A 488B4D28                        mov rcx, PARAM(1)
  1574                                          assert_real(rcx)
    42 0000137E 803912              <1>  cmp byte [%1], %2
    43 00001381 0F85E20A0000        <1>  jne L_error_incorrect_type
  1575 00001387 F20F104301                      movsd xmm0, qword [rbx + 1]
  1576 0000138C F20F104901                      movsd xmm1, qword [rcx + 1]
  1577 00001391 F20F5CC1                        subsd xmm0, xmm1
  1578 00001395 E853090000                      call make_real
  1579                                          LEAVE
    38 0000139A C9                  <1>  leave
  1580 0000139B C22000                          ret AND_KILL_FRAME(2)
  1581                                  
  1582                                  L_code_ptr_raw_bin_mul_rr:
  1583                                          ENTER
    33 0000139E C8000000            <1>  enter 0, 0
    34 000013A2 4883E4F0            <1>  and rsp, ~15
  1584 000013A6 48837D1802                      cmp COUNT, 2
  1585 000013AB 0F85190A0000                    jne L_error_arg_count_2
  1586 000013B1 488B5D20                        mov rbx, PARAM(0)
  1587                                          assert_real(rbx)
    42 000013B5 803B12              <1>  cmp byte [%1], %2
    43 000013B8 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1588 000013BE 488B4D28                        mov rcx, PARAM(1)
  1589                                          assert_real(rcx)
    42 000013C2 803912              <1>  cmp byte [%1], %2
    43 000013C5 0F859E0A0000        <1>  jne L_error_incorrect_type
  1590 000013CB F20F104301                      movsd xmm0, qword [rbx + 1]
  1591 000013D0 F20F104901                      movsd xmm1, qword [rcx + 1]
  1592 000013D5 F20F59C1                        mulsd xmm0, xmm1
  1593 000013D9 E80F090000                      call make_real
  1594                                          LEAVE
    38 000013DE C9                  <1>  leave
  1595 000013DF C22000                          ret AND_KILL_FRAME(2)
  1596                                  
  1597                                  L_code_ptr_raw_bin_div_rr:
  1598                                          ENTER
    33 000013E2 C8000000            <1>  enter 0, 0
    34 000013E6 4883E4F0            <1>  and rsp, ~15
  1599 000013EA 48837D1802                      cmp COUNT, 2
  1600 000013EF 0F85D5090000                    jne L_error_arg_count_2
  1601 000013F5 488B5D20                        mov rbx, PARAM(0)
  1602                                          assert_real(rbx)
    42 000013F9 803B12              <1>  cmp byte [%1], %2
    43 000013FC 0F85670A0000        <1>  jne L_error_incorrect_type
  1603 00001402 488B4D28                        mov rcx, PARAM(1)
  1604                                          assert_real(rcx)
    42 00001406 803912              <1>  cmp byte [%1], %2
    43 00001409 0F855A0A0000        <1>  jne L_error_incorrect_type
  1605 0000140F F20F104301                      movsd xmm0, qword [rbx + 1]
  1606 00001414 F20F104901                      movsd xmm1, qword [rcx + 1]
  1607 00001419 660FEFD2                        pxor xmm2, xmm2
  1608 0000141D 660F2ECA                        ucomisd xmm1, xmm2
  1609 00001421 0F84730A0000                    je L_error_division_by_zero
  1610 00001427 F20F5EC1                        divsd xmm0, xmm1
  1611 0000142B E8BD080000                      call make_real
  1612                                          LEAVE
    38 00001430 C9                  <1>  leave
  1613 00001431 C22000                          ret AND_KILL_FRAME(2)
  1614                                  
  1615                                  L_code_ptr_raw_bin_add_qq:
  1616                                          ENTER
    33 00001434 C8000000            <1>  enter 0, 0
    34 00001438 4883E4F0            <1>  and rsp, ~15
  1617 0000143C 48837D1802                      cmp COUNT, 2
  1618 00001441 0F8583090000                    jne L_error_arg_count_2
  1619 00001447 4C8B4520                        mov r8, PARAM(0)
  1620                                          assert_rational(r8)
    42 0000144B 41803811            <1>  cmp byte [%1], %2
    43 0000144F 0F85140A0000        <1>  jne L_error_incorrect_type
  1621 00001455 4C8B4D28                        mov r9, PARAM(1)
  1622                                          assert_rational(r9)
    42 00001459 41803911            <1>  cmp byte [%1], %2
    43 0000145D 0F85060A0000        <1>  jne L_error_incorrect_type
  1623 00001463 498B4001                        mov rax, qword [r8 + 1] ; num1
  1624 00001467 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1625 0000146B 4899                            cqo
  1626 0000146D 48F7EB                          imul rbx
  1627 00001470 4889C6                          mov rsi, rax
  1628 00001473 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1629 00001477 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1630 0000147B 4899                            cqo
  1631 0000147D 48F7EB                          imul rbx
  1632 00001480 4801C6                          add rsi, rax
  1633 00001483 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1634 00001487 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1635 0000148B 4899                            cqo
  1636 0000148D 48F7EB                          imul rbx
  1637 00001490 4889C7                          mov rdi, rax
  1638 00001493 E827010000                      call normalize_rational
  1639                                          LEAVE
    38 00001498 C9                  <1>  leave
  1640 00001499 C22000                          ret AND_KILL_FRAME(2)
  1641                                  
  1642                                  L_code_ptr_raw_bin_sub_qq:
  1643                                          ENTER
    33 0000149C C8000000            <1>  enter 0, 0
    34 000014A0 4883E4F0            <1>  and rsp, ~15
  1644 000014A4 48837D1802                      cmp COUNT, 2
  1645 000014A9 0F851B090000                    jne L_error_arg_count_2
  1646 000014AF 4C8B4520                        mov r8, PARAM(0)
  1647                                          assert_rational(r8)
    42 000014B3 41803811            <1>  cmp byte [%1], %2
    43 000014B7 0F85AC090000        <1>  jne L_error_incorrect_type
  1648 000014BD 4C8B4D28                        mov r9, PARAM(1)
  1649                                          assert_rational(r9)
    42 000014C1 41803911            <1>  cmp byte [%1], %2
    43 000014C5 0F859E090000        <1>  jne L_error_incorrect_type
  1650 000014CB 498B4001                        mov rax, qword [r8 + 1] ; num1
  1651 000014CF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1652 000014D3 4899                            cqo
  1653 000014D5 48F7EB                          imul rbx
  1654 000014D8 4889C6                          mov rsi, rax
  1655 000014DB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1656 000014DF 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1657 000014E3 4899                            cqo
  1658 000014E5 48F7EB                          imul rbx
  1659 000014E8 4829C6                          sub rsi, rax
  1660 000014EB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1661 000014EF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1662 000014F3 4899                            cqo
  1663 000014F5 48F7EB                          imul rbx
  1664 000014F8 4889C7                          mov rdi, rax
  1665 000014FB E8BF000000                      call normalize_rational
  1666                                          LEAVE
    38 00001500 C9                  <1>  leave
  1667 00001501 C22000                          ret AND_KILL_FRAME(2)
  1668                                  
  1669                                  L_code_ptr_raw_bin_mul_qq:
  1670                                          ENTER
    33 00001504 C8000000            <1>  enter 0, 0
    34 00001508 4883E4F0            <1>  and rsp, ~15
  1671 0000150C 48837D1802                      cmp COUNT, 2
  1672 00001511 0F85B3080000                    jne L_error_arg_count_2
  1673 00001517 4C8B4520                        mov r8, PARAM(0)
  1674                                          assert_rational(r8)
    42 0000151B 41803811            <1>  cmp byte [%1], %2
    43 0000151F 0F8544090000        <1>  jne L_error_incorrect_type
  1675 00001525 4C8B4D28                        mov r9, PARAM(1)
  1676                                          assert_rational(r9)
    42 00001529 41803911            <1>  cmp byte [%1], %2
    43 0000152D 0F8536090000        <1>  jne L_error_incorrect_type
  1677 00001533 498B4001                        mov rax, qword [r8 + 1] ; num1
  1678 00001537 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1679 0000153B 4899                            cqo
  1680 0000153D 48F7EB                          imul rbx
  1681 00001540 4889C6                          mov rsi, rax
  1682 00001543 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1683 00001547 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1684 0000154B 4899                            cqo
  1685 0000154D 48F7EB                          imul rbx
  1686 00001550 4889C7                          mov rdi, rax
  1687 00001553 E867000000                      call normalize_rational
  1688                                          LEAVE
    38 00001558 C9                  <1>  leave
  1689 00001559 C22000                          ret AND_KILL_FRAME(2)
  1690                                          
  1691                                  L_code_ptr_raw_bin_div_qq:
  1692                                          ENTER
    33 0000155C C8000000            <1>  enter 0, 0
    34 00001560 4883E4F0            <1>  and rsp, ~15
  1693 00001564 48837D1802                      cmp COUNT, 2
  1694 00001569 0F855B080000                    jne L_error_arg_count_2
  1695 0000156F 4C8B4520                        mov r8, PARAM(0)
  1696                                          assert_rational(r8)
    42 00001573 41803811            <1>  cmp byte [%1], %2
    43 00001577 0F85EC080000        <1>  jne L_error_incorrect_type
  1697 0000157D 4C8B4D28                        mov r9, PARAM(1)
  1698                                          assert_rational(r9)
    42 00001581 41803911            <1>  cmp byte [%1], %2
    43 00001585 0F85DE080000        <1>  jne L_error_incorrect_type
  1699 0000158B 4983790100                      cmp qword [r9 + 1], 0
  1700 00001590 0F8404090000                    je L_error_division_by_zero
  1701 00001596 498B4001                        mov rax, qword [r8 + 1] ; num1
  1702 0000159A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1703 0000159E 4899                            cqo
  1704 000015A0 48F7EB                          imul rbx
  1705 000015A3 4889C6                          mov rsi, rax
  1706 000015A6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1707 000015AA 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1708 000015AE 4899                            cqo
  1709 000015B0 48F7EB                          imul rbx
  1710 000015B3 4889C7                          mov rdi, rax
  1711 000015B6 E804000000                      call normalize_rational
  1712                                          LEAVE
    38 000015BB C9                  <1>  leave
  1713 000015BC C22000                          ret AND_KILL_FRAME(2)
  1714                                          
  1715                                  normalize_rational:
  1716 000015BF 56                              push rsi
  1717 000015C0 57                              push rdi
  1718 000015C1 E839000000                      call gcd
  1719 000015C6 4889C3                          mov rbx, rax
  1720 000015C9 58                              pop rax
  1721 000015CA 4899                            cqo
  1722 000015CC 48F7FB                          idiv rbx
  1723 000015CF 4989C0                          mov r8, rax
  1724 000015D2 58                              pop rax
  1725 000015D3 4899                            cqo
  1726 000015D5 48F7FB                          idiv rbx
  1727 000015D8 4989C1                          mov r9, rax
  1728 000015DB BF11000000                      mov rdi, (1 + 8 + 8)
  1729 000015E0 E8A3F0FFFF                      call malloc
  1730 000015E5 C60011                          mov byte [rax], T_rational
  1731 000015E8 4C894801                        mov qword [rax + 1], r9
  1732 000015EC 4C894009                        mov qword [rax + 1 + 8], r8
  1733 000015F0 C3                              ret
  1734                                  
  1735                                  iabs:
  1736 000015F1 4889F8                          mov rax, rdi
  1737 000015F4 4883F800                        cmp rax, 0
  1738 000015F8 7C01                            jl .Lneg
  1739 000015FA C3                              ret
  1740                                  .Lneg:
  1741 000015FB 48F7D8                          neg rax
  1742 000015FE C3                              ret
  1743                                  
  1744                                  gcd:
  1745 000015FF E8EDFFFFFF                      call iabs
  1746 00001604 4889C3                          mov rbx, rax
  1747 00001607 4889F7                          mov rdi, rsi
  1748 0000160A E8E2FFFFFF                      call iabs
  1749 0000160F 4883F800                        cmp rax, 0
  1750 00001613 7502                            jne .L0
  1751 00001615 4893                            xchg rax, rbx
  1752                                  .L0:
  1753 00001617 4883FB00                        cmp rbx, 0
  1754 0000161B 740C                            je .L1
  1755 0000161D 4899                            cqo
  1756 0000161F 48F7F3                          div rbx
  1757 00001622 4889D0                          mov rax, rdx
  1758 00001625 4893                            xchg rax, rbx
  1759 00001627 EBEE                            jmp .L0
  1760                                  .L1:
  1761 00001629 C3                              ret
  1762                                  
  1763                                  L_code_ptr_error:
  1764                                          ENTER
    33 0000162A C8000000            <1>  enter 0, 0
    34 0000162E 4883E4F0            <1>  and rsp, ~15
  1765 00001632 48837D1802                      cmp COUNT, 2
  1766 00001637 0F858D070000                    jne L_error_arg_count_2
  1767 0000163D 488B7520                        mov rsi, PARAM(0)
  1768                                          assert_symbol(rsi)
    42 00001641 803E04              <1>  cmp byte [%1], %2
    43 00001644 0F851F080000        <1>  jne L_error_incorrect_type
  1769 0000164A 488B7528                        mov rsi, PARAM(1)
  1770                                          assert_string(rsi)
    42 0000164E 803E03              <1>  cmp byte [%1], %2
    43 00001651 0F8512080000        <1>  jne L_error_incorrect_type
  1771 00001657 48BF-                           mov rdi, fmt_scheme_error_part_1
  1771 00001659 [9103000000000000] 
  1772 00001661 B800000000                      mov rax, 0
  1773                                  	ENTER
    33 00001666 C8000000            <1>  enter 0, 0
    34 0000166A 4883E4F0            <1>  and rsp, ~15
  1774 0000166E E8(00000000)                    call printf
  1775                                  	LEAVE
    38 00001673 C9                  <1>  leave
  1776 00001674 488B7D20                        mov rdi, PARAM(0)
  1777 00001678 E826F0FFFF                      call print_sexpr
  1778 0000167D 48BF-                           mov rdi, fmt_scheme_error_part_2
  1778 0000167F [A503000000000000] 
  1779 00001687 B800000000                      mov rax, 0
  1780                                  	ENTER
    33 0000168C C8000000            <1>  enter 0, 0
    34 00001690 4883E4F0            <1>  and rsp, ~15
  1781 00001694 E8(00000000)                    call printf
  1782                                  	LEAVE
    38 00001699 C9                  <1>  leave
  1783 0000169A 488B4528                        mov rax, PARAM(1)       ; sob_string
  1784 0000169E BE01000000                      mov rsi, 1              ; size = 1 byte
  1785 000016A3 488B5001                        mov rdx, qword [rax + 1] ; length
  1786 000016A7 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1787 000016AB 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1788 000016B3 E8(00000000)                    call fwrite
  1789 000016B8 48BF-                           mov rdi, fmt_scheme_error_part_3
  1789 000016BA [E703000000000000] 
  1790 000016C2 B800000000                      mov rax, 0
  1791                                  	ENTER
    33 000016C7 C8000000            <1>  enter 0, 0
    34 000016CB 4883E4F0            <1>  and rsp, ~15
  1792 000016CF E8(00000000)                    call printf
  1793                                  	LEAVE
    38 000016D4 C9                  <1>  leave
  1794 000016D5 48C7C0F7FFFFFF                  mov rax, -9
  1795 000016DC E8(00000000)                    call exit
  1796                                  
  1797                                  L_code_ptr_raw_less_than_rr:
  1798                                          ENTER
    33 000016E1 C8000000            <1>  enter 0, 0
    34 000016E5 4883E4F0            <1>  and rsp, ~15
  1799 000016E9 48837D1802                      cmp COUNT, 2
  1800 000016EE 0F85D6060000                    jne L_error_arg_count_2
  1801 000016F4 488B7520                        mov rsi, PARAM(0)
  1802                                          assert_real(rsi)
    42 000016F8 803E12              <1>  cmp byte [%1], %2
    43 000016FB 0F8568070000        <1>  jne L_error_incorrect_type
  1803 00001701 488B7D28                        mov rdi, PARAM(1)
  1804                                          assert_real(rdi)
    42 00001705 803F12              <1>  cmp byte [%1], %2
    43 00001708 0F855B070000        <1>  jne L_error_incorrect_type
  1805 0000170E F20F104601                      movsd xmm0, qword [rsi + 1]
  1806 00001713 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1807 00001718 660F2FC1                        comisd xmm0, xmm1
  1808 0000171C 730C                            jae .L_false
  1809 0000171E 48B8-                           mov rax, sob_boolean_true
  1809 00001720 [0300000000000000] 
  1810 00001728 EB0A                            jmp .L_exit
  1811                                  .L_false:
  1812 0000172A 48B8-                           mov rax, sob_boolean_false
  1812 0000172C [0200000000000000] 
  1813                                  .L_exit:
  1814                                          LEAVE
    38 00001734 C9                  <1>  leave
  1815 00001735 C22000                          ret AND_KILL_FRAME(2)
  1816                                          
  1817                                  L_code_ptr_raw_less_than_qq:
  1818                                          ENTER
    33 00001738 C8000000            <1>  enter 0, 0
    34 0000173C 4883E4F0            <1>  and rsp, ~15
  1819 00001740 48837D1802                      cmp COUNT, 2
  1820 00001745 0F857F060000                    jne L_error_arg_count_2
  1821 0000174B 488B7520                        mov rsi, PARAM(0)
  1822                                          assert_rational(rsi)
    42 0000174F 803E11              <1>  cmp byte [%1], %2
    43 00001752 0F8511070000        <1>  jne L_error_incorrect_type
  1823 00001758 488B7D28                        mov rdi, PARAM(1)
  1824                                          assert_rational(rdi)
    42 0000175C 803F11              <1>  cmp byte [%1], %2
    43 0000175F 0F8504070000        <1>  jne L_error_incorrect_type
  1825 00001765 488B4601                        mov rax, qword [rsi + 1] ; num1
  1826 00001769 4899                            cqo
  1827 0000176B 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1828 0000176F 4889C1                          mov rcx, rax
  1829 00001772 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1830 00001776 4899                            cqo
  1831 00001778 48F76F01                        imul qword [rdi + 1]          ; num2
  1832 0000177C 4829C1                          sub rcx, rax
  1833 0000177F 7D0C                            jge .L_false
  1834 00001781 48B8-                           mov rax, sob_boolean_true
  1834 00001783 [0300000000000000] 
  1835 0000178B EB0A                            jmp .L_exit
  1836                                  .L_false:
  1837 0000178D 48B8-                           mov rax, sob_boolean_false
  1837 0000178F [0200000000000000] 
  1838                                  .L_exit:
  1839                                          LEAVE
    38 00001797 C9                  <1>  leave
  1840 00001798 C22000                          ret AND_KILL_FRAME(2)
  1841                                  
  1842                                  L_code_ptr_raw_equal_rr:
  1843                                          ENTER
    33 0000179B C8000000            <1>  enter 0, 0
    34 0000179F 4883E4F0            <1>  and rsp, ~15
  1844 000017A3 48837D1802                      cmp COUNT, 2
  1845 000017A8 0F851C060000                    jne L_error_arg_count_2
  1846 000017AE 488B7520                        mov rsi, PARAM(0)
  1847                                          assert_real(rsi)
    42 000017B2 803E12              <1>  cmp byte [%1], %2
    43 000017B5 0F85AE060000        <1>  jne L_error_incorrect_type
  1848 000017BB 488B7D28                        mov rdi, PARAM(1)
  1849                                          assert_real(rdi)
    42 000017BF 803F12              <1>  cmp byte [%1], %2
    43 000017C2 0F85A1060000        <1>  jne L_error_incorrect_type
  1850 000017C8 F20F104601                      movsd xmm0, qword [rsi + 1]
  1851 000017CD F20F104F01                      movsd xmm1, qword [rdi + 1]
  1852 000017D2 660F2FC1                        comisd xmm0, xmm1
  1853 000017D6 750C                            jne .L_false
  1854 000017D8 48B8-                           mov rax, sob_boolean_true
  1854 000017DA [0300000000000000] 
  1855 000017E2 EB0A                            jmp .L_exit
  1856                                  .L_false:
  1857 000017E4 48B8-                           mov rax, sob_boolean_false
  1857 000017E6 [0200000000000000] 
  1858                                  .L_exit:
  1859                                          LEAVE
    38 000017EE C9                  <1>  leave
  1860 000017EF C22000                          ret AND_KILL_FRAME(2)
  1861                                          
  1862                                  L_code_ptr_raw_equal_qq:
  1863                                          ENTER
    33 000017F2 C8000000            <1>  enter 0, 0
    34 000017F6 4883E4F0            <1>  and rsp, ~15
  1864 000017FA 48837D1802                      cmp COUNT, 2
  1865 000017FF 0F85C5050000                    jne L_error_arg_count_2
  1866 00001805 488B7520                        mov rsi, PARAM(0)
  1867                                          assert_rational(rsi)
    42 00001809 803E11              <1>  cmp byte [%1], %2
    43 0000180C 0F8557060000        <1>  jne L_error_incorrect_type
  1868 00001812 488B7D28                        mov rdi, PARAM(1)
  1869                                          assert_rational(rdi)
    42 00001816 803F11              <1>  cmp byte [%1], %2
    43 00001819 0F854A060000        <1>  jne L_error_incorrect_type
  1870 0000181F 488B4601                        mov rax, qword [rsi + 1] ; num1
  1871 00001823 4899                            cqo
  1872 00001825 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1873 00001829 4889C1                          mov rcx, rax
  1874 0000182C 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1875 00001830 4899                            cqo
  1876 00001832 48F76F01                        imul qword [rdi + 1]          ; num2
  1877 00001836 4829C1                          sub rcx, rax
  1878 00001839 750C                            jne .L_false
  1879 0000183B 48B8-                           mov rax, sob_boolean_true
  1879 0000183D [0300000000000000] 
  1880 00001845 EB0A                            jmp .L_exit
  1881                                  .L_false:
  1882 00001847 48B8-                           mov rax, sob_boolean_false
  1882 00001849 [0200000000000000] 
  1883                                  .L_exit:
  1884                                          LEAVE
    38 00001851 C9                  <1>  leave
  1885 00001852 C22000                          ret AND_KILL_FRAME(2)
  1886                                  
  1887                                  L_code_ptr_quotient:
  1888                                          ENTER
    33 00001855 C8000000            <1>  enter 0, 0
    34 00001859 4883E4F0            <1>  and rsp, ~15
  1889 0000185D 48837D1802                      cmp COUNT, 2
  1890 00001862 0F8562050000                    jne L_error_arg_count_2
  1891 00001868 488B7520                        mov rsi, PARAM(0)
  1892                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000186C 803E11              <2>  cmp byte [%1], %2
    43 0000186F 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00001875 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000187A 0F85E9050000        <1>  jne L_error_incorrect_type
  1893 00001880 488B7D28                        mov rdi, PARAM(1)
  1894                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001884 803F11              <2>  cmp byte [%1], %2
    43 00001887 0F85DC050000        <2>  jne L_error_incorrect_type
    48 0000188D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001892 0F85D1050000        <1>  jne L_error_incorrect_type
  1895 00001898 488B4601                        mov rax, qword [rsi + 1]
  1896 0000189C 488B5F01                        mov rbx, qword [rdi + 1]
  1897 000018A0 4883FB00                        cmp rbx, 0
  1898 000018A4 0F84F0050000                    je L_error_division_by_zero
  1899 000018AA 4899                            cqo
  1900 000018AC 48F7FB                          idiv rbx
  1901 000018AF 4889C7                          mov rdi, rax
  1902 000018B2 E852040000                      call make_integer
  1903                                          LEAVE
    38 000018B7 C9                  <1>  leave
  1904 000018B8 C22000                          ret AND_KILL_FRAME(2)
  1905                                          
  1906                                  L_code_ptr_remainder:
  1907                                          ENTER
    33 000018BB C8000000            <1>  enter 0, 0
    34 000018BF 4883E4F0            <1>  and rsp, ~15
  1908 000018C3 48837D1802                      cmp COUNT, 2
  1909 000018C8 0F85FC040000                    jne L_error_arg_count_2
  1910 000018CE 488B7520                        mov rsi, PARAM(0)
  1911                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018D2 803E11              <2>  cmp byte [%1], %2
    43 000018D5 0F858E050000        <2>  jne L_error_incorrect_type
    48 000018DB 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018E0 0F8583050000        <1>  jne L_error_incorrect_type
  1912 000018E6 488B7D28                        mov rdi, PARAM(1)
  1913                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000018EA 803F11              <2>  cmp byte [%1], %2
    43 000018ED 0F8576050000        <2>  jne L_error_incorrect_type
    48 000018F3 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018F8 0F856B050000        <1>  jne L_error_incorrect_type
  1914 000018FE 488B4601                        mov rax, qword [rsi + 1]
  1915 00001902 488B5F01                        mov rbx, qword [rdi + 1]
  1916 00001906 4883FB00                        cmp rbx, 0
  1917 0000190A 0F848A050000                    je L_error_division_by_zero
  1918 00001910 4899                            cqo
  1919 00001912 48F7FB                          idiv rbx
  1920 00001915 4889D7                          mov rdi, rdx
  1921 00001918 E8EC030000                      call make_integer
  1922                                          LEAVE
    38 0000191D C9                  <1>  leave
  1923 0000191E C22000                          ret AND_KILL_FRAME(2)
  1924                                  
  1925                                  L_code_ptr_set_car:
  1926                                          ENTER
    33 00001921 C8000000            <1>  enter 0, 0
    34 00001925 4883E4F0            <1>  and rsp, ~15
  1927 00001929 48837D1802                      cmp COUNT, 2
  1928 0000192E 0F8596040000                    jne L_error_arg_count_2
  1929 00001934 488B4520                        mov rax, PARAM(0)
  1930                                          assert_pair(rax)
    42 00001938 803821              <1>  cmp byte [%1], %2
    43 0000193B 0F8528050000        <1>  jne L_error_incorrect_type
  1931 00001941 488B5D28                        mov rbx, PARAM(1)
  1932 00001945 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1933 00001949 48B8-                           mov rax, sob_void
  1933 0000194B [0000000000000000] 
  1934                                          LEAVE
    38 00001953 C9                  <1>  leave
  1935 00001954 C22000                          ret AND_KILL_FRAME(2)
  1936                                  
  1937                                  L_code_ptr_set_cdr:
  1938                                          ENTER
    33 00001957 C8000000            <1>  enter 0, 0
    34 0000195B 4883E4F0            <1>  and rsp, ~15
  1939 0000195F 48837D1802                      cmp COUNT, 2
  1940 00001964 0F8560040000                    jne L_error_arg_count_2
  1941 0000196A 488B4520                        mov rax, PARAM(0)
  1942                                          assert_pair(rax)
    42 0000196E 803821              <1>  cmp byte [%1], %2
    43 00001971 0F85F2040000        <1>  jne L_error_incorrect_type
  1943 00001977 488B5D28                        mov rbx, PARAM(1)
  1944 0000197B 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1945 0000197F 48B8-                           mov rax, sob_void
  1945 00001981 [0000000000000000] 
  1946                                          LEAVE
    38 00001989 C9                  <1>  leave
  1947 0000198A C22000                          ret AND_KILL_FRAME(2)
  1948                                  
  1949                                  L_code_ptr_string_ref:
  1950                                          ENTER
    33 0000198D C8000000            <1>  enter 0, 0
    34 00001991 4883E4F0            <1>  and rsp, ~15
  1951 00001995 48837D1802                      cmp COUNT, 2
  1952 0000199A 0F852A040000                    jne L_error_arg_count_2
  1953 000019A0 488B7D20                        mov rdi, PARAM(0)
  1954                                          assert_string(rdi)
    42 000019A4 803F03              <1>  cmp byte [%1], %2
    43 000019A7 0F85BC040000        <1>  jne L_error_incorrect_type
  1955 000019AD 488B7528                        mov rsi, PARAM(1)
  1956                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019B1 803E11              <2>  cmp byte [%1], %2
    43 000019B4 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000019BA 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019BF 0F85A4040000        <1>  jne L_error_incorrect_type
  1957 000019C5 488B5701                        mov rdx, qword [rdi + 1]
  1958 000019C9 488B4E01                        mov rcx, qword [rsi + 1]
  1959 000019CD 4839D1                          cmp rcx, rdx
  1960 000019D0 0F8D59030000                    jge L_error_integer_range
  1961 000019D6 4883F900                        cmp rcx, 0
  1962 000019DA 0F8C4F030000                    jl L_error_integer_range
  1963 000019E0 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1964 000019E4 BF02000000                      mov rdi, 2
  1965 000019E9 E89AECFFFF                      call malloc
  1966 000019EE C60002                          mov byte [rax], T_char
  1967 000019F1 885801                          mov byte [rax + 1], bl
  1968                                          LEAVE
    38 000019F4 C9                  <1>  leave
  1969 000019F5 C22000                          ret AND_KILL_FRAME(2)
  1970                                  
  1971                                  L_code_ptr_vector_ref:
  1972                                          ENTER
    33 000019F8 C8000000            <1>  enter 0, 0
    34 000019FC 4883E4F0            <1>  and rsp, ~15
  1973 00001A00 48837D1802                      cmp COUNT, 2
  1974 00001A05 0F85BF030000                    jne L_error_arg_count_2
  1975 00001A0B 488B7D20                        mov rdi, PARAM(0)
  1976                                          assert_vector(rdi)
    42 00001A0F 803F22              <1>  cmp byte [%1], %2
    43 00001A12 0F8551040000        <1>  jne L_error_incorrect_type
  1977 00001A18 488B7528                        mov rsi, PARAM(1)
  1978                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A1C 803E11              <2>  cmp byte [%1], %2
    43 00001A1F 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001A25 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A2A 0F8539040000        <1>  jne L_error_incorrect_type
  1979 00001A30 488B5701                        mov rdx, qword [rdi + 1]
  1980 00001A34 488B4E01                        mov rcx, qword [rsi + 1]
  1981 00001A38 4839D1                          cmp rcx, rdx
  1982 00001A3B 0F8DEE020000                    jge L_error_integer_range
  1983 00001A41 4883F900                        cmp rcx, 0
  1984 00001A45 0F8CE4020000                    jl L_error_integer_range
  1985 00001A4B 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1986                                          LEAVE
    38 00001A50 C9                  <1>  leave
  1987 00001A51 C22000                          ret AND_KILL_FRAME(2)
  1988                                  
  1989                                  L_code_ptr_vector_set:
  1990                                          ENTER
    33 00001A54 C8000000            <1>  enter 0, 0
    34 00001A58 4883E4F0            <1>  and rsp, ~15
  1991 00001A5C 48837D1803                      cmp COUNT, 3
  1992 00001A61 0F85CD030000                    jne L_error_arg_count_3
  1993 00001A67 488B7D20                        mov rdi, PARAM(0)
  1994                                          assert_vector(rdi)
    42 00001A6B 803F22              <1>  cmp byte [%1], %2
    43 00001A6E 0F85F5030000        <1>  jne L_error_incorrect_type
  1995 00001A74 488B7528                        mov rsi, PARAM(1)
  1996                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A78 803E11              <2>  cmp byte [%1], %2
    43 00001A7B 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001A81 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A86 0F85DD030000        <1>  jne L_error_incorrect_type
  1997 00001A8C 488B5701                        mov rdx, qword [rdi + 1]
  1998 00001A90 488B4E01                        mov rcx, qword [rsi + 1]
  1999 00001A94 4839D1                          cmp rcx, rdx
  2000 00001A97 0F8D92020000                    jge L_error_integer_range
  2001 00001A9D 4883F900                        cmp rcx, 0
  2002 00001AA1 0F8C88020000                    jl L_error_integer_range
  2003 00001AA7 488B4530                        mov rax, PARAM(2)
  2004 00001AAB 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2005 00001AB0 48B8-                           mov rax, sob_void
  2005 00001AB2 [0000000000000000] 
  2006                                          LEAVE
    38 00001ABA C9                  <1>  leave
  2007 00001ABB C22800                          ret AND_KILL_FRAME(3)
  2008                                  
  2009                                  L_code_ptr_string_set:
  2010                                          ENTER
    33 00001ABE C8000000            <1>  enter 0, 0
    34 00001AC2 4883E4F0            <1>  and rsp, ~15
  2011 00001AC6 48837D1803                      cmp COUNT, 3
  2012 00001ACB 0F8563030000                    jne L_error_arg_count_3
  2013 00001AD1 488B7D20                        mov rdi, PARAM(0)
  2014                                          assert_string(rdi)
    42 00001AD5 803F03              <1>  cmp byte [%1], %2
    43 00001AD8 0F858B030000        <1>  jne L_error_incorrect_type
  2015 00001ADE 488B7528                        mov rsi, PARAM(1)
  2016                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001AE2 803E11              <2>  cmp byte [%1], %2
    43 00001AE5 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001AEB 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001AF0 0F8573030000        <1>  jne L_error_incorrect_type
  2017 00001AF6 488B5701                        mov rdx, qword [rdi + 1]
  2018 00001AFA 488B4E01                        mov rcx, qword [rsi + 1]
  2019 00001AFE 4839D1                          cmp rcx, rdx
  2020 00001B01 0F8D28020000                    jge L_error_integer_range
  2021 00001B07 4883F900                        cmp rcx, 0
  2022 00001B0B 0F8C1E020000                    jl L_error_integer_range
  2023 00001B11 488B4530                        mov rax, PARAM(2)
  2024                                          assert_char(rax)
    42 00001B15 803802              <1>  cmp byte [%1], %2
    43 00001B18 0F854B030000        <1>  jne L_error_incorrect_type
  2025 00001B1E 8A4001                          mov al, byte [rax + 1]
  2026 00001B21 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2027 00001B25 48B8-                           mov rax, sob_void
  2027 00001B27 [0000000000000000] 
  2028                                          LEAVE
    38 00001B2F C9                  <1>  leave
  2029 00001B30 C22800                          ret AND_KILL_FRAME(3)
  2030                                  
  2031                                  L_code_ptr_make_vector:
  2032                                          ENTER
    33 00001B33 C8000000            <1>  enter 0, 0
    34 00001B37 4883E4F0            <1>  and rsp, ~15
  2033 00001B3B 48837D1802                      cmp COUNT, 2
  2034 00001B40 0F8584020000                    jne L_error_arg_count_2
  2035 00001B46 488B4D20                        mov rcx, PARAM(0)
  2036                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B4A 803911              <2>  cmp byte [%1], %2
    43 00001B4D 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001B53 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B58 0F850B030000        <1>  jne L_error_incorrect_type
  2037 00001B5E 488B4901                        mov rcx, qword [rcx + 1]
  2038 00001B62 4883F900                        cmp rcx, 0
  2039 00001B66 0F8CC3010000                    jl L_error_integer_range
  2040 00001B6C 488B5528                        mov rdx, PARAM(1)
  2041 00001B70 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2042 00001B78 E80BEBFFFF                      call malloc
  2043 00001B7D C60022                          mov byte [rax], T_vector
  2044 00001B80 48894801                        mov qword [rax + 1], rcx
  2045 00001B84 41B800000000                    mov r8, 0
  2046                                  .L0:
  2047 00001B8A 4939C8                          cmp r8, rcx
  2048 00001B8D 740A                            je .L1
  2049 00001B8F 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2050 00001B94 49FFC0                          inc r8
  2051 00001B97 EBF1                            jmp .L0
  2052                                  .L1:
  2053                                          LEAVE
    38 00001B99 C9                  <1>  leave
  2054 00001B9A C22000                          ret AND_KILL_FRAME(2)
  2055                                          
  2056                                  L_code_ptr_make_string:
  2057                                          ENTER
    33 00001B9D C8000000            <1>  enter 0, 0
    34 00001BA1 4883E4F0            <1>  and rsp, ~15
  2058 00001BA5 48837D1802                      cmp COUNT, 2
  2059 00001BAA 0F851A020000                    jne L_error_arg_count_2
  2060 00001BB0 488B4D20                        mov rcx, PARAM(0)
  2061                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001BB4 803911              <2>  cmp byte [%1], %2
    43 00001BB7 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001BBD 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BC2 0F85A1020000        <1>  jne L_error_incorrect_type
  2062 00001BC8 488B4901                        mov rcx, qword [rcx + 1]
  2063 00001BCC 4883F900                        cmp rcx, 0
  2064 00001BD0 0F8C59010000                    jl L_error_integer_range
  2065 00001BD6 488B5528                        mov rdx, PARAM(1)
  2066                                          assert_char(rdx)
    42 00001BDA 803A02              <1>  cmp byte [%1], %2
    43 00001BDD 0F8586020000        <1>  jne L_error_incorrect_type
  2067 00001BE3 8A5201                          mov dl, byte [rdx + 1]
  2068 00001BE6 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2069 00001BEA E899EAFFFF                      call malloc
  2070 00001BEF C60003                          mov byte [rax], T_string
  2071 00001BF2 48894801                        mov qword [rax + 1], rcx
  2072 00001BF6 41B800000000                    mov r8, 0
  2073                                  .L0:
  2074 00001BFC 4939C8                          cmp r8, rcx
  2075 00001BFF 740A                            je .L1
  2076 00001C01 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2077 00001C06 49FFC0                          inc r8
  2078 00001C09 EBF1                            jmp .L0
  2079                                  .L1:
  2080                                          LEAVE
    38 00001C0B C9                  <1>  leave
  2081 00001C0C C22000                          ret AND_KILL_FRAME(2)
  2082                                  
  2083                                  L_code_ptr_numerator:
  2084                                          ENTER
    33 00001C0F C8000000            <1>  enter 0, 0
    34 00001C13 4883E4F0            <1>  and rsp, ~15
  2085 00001C17 48837D1801                      cmp COUNT, 1
  2086 00001C1C 0F8573010000                    jne L_error_arg_count_1
  2087 00001C22 488B4520                        mov rax, PARAM(0)
  2088                                          assert_rational(rax)
    42 00001C26 803811              <1>  cmp byte [%1], %2
    43 00001C29 0F853A020000        <1>  jne L_error_incorrect_type
  2089 00001C2F 488B7801                        mov rdi, qword [rax + 1]
  2090 00001C33 E8D1000000                      call make_integer
  2091                                          LEAVE
    38 00001C38 C9                  <1>  leave
  2092 00001C39 C21800                          ret AND_KILL_FRAME(1)
  2093                                          
  2094                                  L_code_ptr_denominator:
  2095                                          ENTER
    33 00001C3C C8000000            <1>  enter 0, 0
    34 00001C40 4883E4F0            <1>  and rsp, ~15
  2096 00001C44 48837D1801                      cmp COUNT, 1
  2097 00001C49 0F8546010000                    jne L_error_arg_count_1
  2098 00001C4F 488B4520                        mov rax, PARAM(0)
  2099                                          assert_rational(rax)
    42 00001C53 803811              <1>  cmp byte [%1], %2
    43 00001C56 0F850D020000        <1>  jne L_error_incorrect_type
  2100 00001C5C 488B7809                        mov rdi, qword [rax + 1 + 8]
  2101 00001C60 E8A4000000                      call make_integer
  2102                                          LEAVE
    38 00001C65 C9                  <1>  leave
  2103 00001C66 C21800                          ret AND_KILL_FRAME(1)
  2104                                  
  2105                                  L_code_ptr_eq:
  2106                                  	ENTER
    33 00001C69 C8000000            <1>  enter 0, 0
    34 00001C6D 4883E4F0            <1>  and rsp, ~15
  2107 00001C71 48837D1802              	cmp COUNT, 2
  2108 00001C76 0F854E010000            	jne L_error_arg_count_2
  2109 00001C7C 488B7D20                	mov rdi, PARAM(0)
  2110 00001C80 488B7528                	mov rsi, PARAM(1)
  2111 00001C84 4839F7                  	cmp rdi, rsi
  2112 00001C87 744A                    	je .L_eq_true
  2113 00001C89 8A17                    	mov dl, byte [rdi]
  2114 00001C8B 3A16                    	cmp dl, byte [rsi]
  2115 00001C8D 7550                    	jne .L_eq_false
  2116 00001C8F 80FA02                  	cmp dl, T_char
  2117 00001C92 7437                    	je .L_char
  2118 00001C94 80FA04                  	cmp dl, T_symbol
  2119 00001C97 742A                    	je .L_symbol
  2120 00001C99 80FA12                  	cmp dl, T_real
  2121 00001C9C 741D                    	je .L_real
  2122 00001C9E 80FA11                  	cmp dl, T_rational
  2123 00001CA1 7402                    	je .L_rational
  2124 00001CA3 EB3A                    	jmp .L_eq_false
  2125                                  .L_rational:
  2126 00001CA5 488B4601                	mov rax, qword [rsi + 1]
  2127 00001CA9 483B4701                	cmp rax, qword [rdi + 1]
  2128 00001CAD 7530                    	jne .L_eq_false
  2129 00001CAF 488B4609                	mov rax, qword [rsi + 1 + 8]
  2130 00001CB3 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2131 00001CB7 7526                    	jne .L_eq_false
  2132 00001CB9 EB18                    	jmp .L_eq_true
  2133                                  .L_real:
  2134 00001CBB 488B4601                	mov rax, qword [rsi + 1]
  2135 00001CBF 483B4701                	cmp rax, qword [rdi + 1]
  2136                                  .L_symbol:
  2137                                  	; never reached, because symbols are static!
  2138                                  	; but I'm keeping it in case, I'll ever change
  2139                                  	; the implementation
  2140 00001CC3 488B4601                	mov rax, qword [rsi + 1]
  2141 00001CC7 483B4701                	cmp rax, qword [rdi + 1]
  2142                                  .L_char:
  2143 00001CCB 8A5E01                  	mov bl, byte [rsi + 1]
  2144 00001CCE 3A5F01                  	cmp bl, byte [rdi + 1]
  2145 00001CD1 750C                    	jne .L_eq_false
  2146                                  .L_eq_true:
  2147 00001CD3 48B8-                   	mov rax, sob_boolean_true
  2147 00001CD5 [0300000000000000] 
  2148 00001CDD EB0A                    	jmp .L_eq_exit
  2149                                  .L_eq_false:
  2150 00001CDF 48B8-                   	mov rax, sob_boolean_false
  2150 00001CE1 [0200000000000000] 
  2151                                  .L_eq_exit:
  2152                                  	LEAVE
    38 00001CE9 C9                  <1>  leave
  2153 00001CEA C22000                  	ret AND_KILL_FRAME(2)
  2154                                  
  2155                                  make_real:
  2156                                          ENTER
    33 00001CED C8000000            <1>  enter 0, 0
    34 00001CF1 4883E4F0            <1>  and rsp, ~15
  2157 00001CF5 BF09000000                      mov rdi, (1 + 8)
  2158 00001CFA E889E9FFFF                      call malloc
  2159 00001CFF C60012                          mov byte [rax], T_real
  2160 00001D02 F20F114001                      movsd qword [rax + 1], xmm0
  2161                                          LEAVE
    38 00001D07 C9                  <1>  leave
  2162 00001D08 C3                              ret
  2163                                          
  2164                                  make_integer:
  2165                                          ENTER
    33 00001D09 C8000000            <1>  enter 0, 0
    34 00001D0D 4883E4F0            <1>  and rsp, ~15
  2166 00001D11 4889FE                          mov rsi, rdi
  2167 00001D14 BF11000000                      mov rdi, (1 + 8 + 8)
  2168 00001D19 E86AE9FFFF                      call malloc
  2169 00001D1E C60011                          mov byte [rax], T_rational
  2170 00001D21 48897001                        mov qword [rax + 1], rsi
  2171 00001D25 48C7400901000000                mov qword [rax + 1 + 8], 1
  2172                                          LEAVE
    38 00001D2D C9                  <1>  leave
  2173 00001D2E C3                              ret
  2174                                          
  2175                                  L_error_integer_range:
  2176 00001D2F 488B3C25[00000000]              mov rdi, qword [stderr]
  2177 00001D37 48BE-                           mov rsi, fmt_integer_range
  2177 00001D39 [5E03000000000000] 
  2178 00001D41 B800000000                      mov rax, 0
  2179                                  	ENTER
    33 00001D46 C8000000            <1>  enter 0, 0
    34 00001D4A 4883E4F0            <1>  and rsp, ~15
  2180 00001D4E E8(00000000)                    call fprintf
  2181                                  	LEAVE
    38 00001D53 C9                  <1>  leave
  2182 00001D54 48C7C0FBFFFFFF                  mov rax, -5
  2183 00001D5B E8(00000000)                    call exit
  2184                                  
  2185                                  L_error_arg_count_0:
  2186 00001D60 488B3C25[00000000]              mov rdi, qword [stderr]
  2187 00001D68 48BE-                           mov rsi, fmt_arg_count_0
  2187 00001D6A [5C02000000000000] 
  2188 00001D72 488B5518                        mov rdx, COUNT
  2189 00001D76 B800000000                      mov rax, 0
  2190                                  	ENTER
    33 00001D7B C8000000            <1>  enter 0, 0
    34 00001D7F 4883E4F0            <1>  and rsp, ~15
  2191 00001D83 E8(00000000)                    call fprintf
  2192                                  	LEAVE
    38 00001D88 C9                  <1>  leave
  2193 00001D89 48C7C0FDFFFFFF                  mov rax, -3
  2194 00001D90 E8(00000000)                    call exit
  2195                                  
  2196                                  L_error_arg_count_1:
  2197 00001D95 488B3C25[00000000]              mov rdi, qword [stderr]
  2198 00001D9D 48BE-                           mov rsi, fmt_arg_count_1
  2198 00001D9F [8402000000000000] 
  2199 00001DA7 488B5518                        mov rdx, COUNT
  2200 00001DAB B800000000                      mov rax, 0
  2201                                  	ENTER
    33 00001DB0 C8000000            <1>  enter 0, 0
    34 00001DB4 4883E4F0            <1>  and rsp, ~15
  2202 00001DB8 E8(00000000)                    call fprintf
  2203                                  	LEAVE
    38 00001DBD C9                  <1>  leave
  2204 00001DBE 48C7C0FDFFFFFF                  mov rax, -3
  2205 00001DC5 E8(00000000)                    call exit
  2206                                  
  2207                                  L_error_arg_count_2:
  2208 00001DCA 488B3C25[00000000]              mov rdi, qword [stderr]
  2209 00001DD2 48BE-                           mov rsi, fmt_arg_count_2
  2209 00001DD4 [EA02000000000000] 
  2210 00001DDC 488B5518                        mov rdx, COUNT
  2211 00001DE0 B800000000                      mov rax, 0
  2212                                  	ENTER
    33 00001DE5 C8000000            <1>  enter 0, 0
    34 00001DE9 4883E4F0            <1>  and rsp, ~15
  2213 00001DED E8(00000000)                    call fprintf
  2214                                  	LEAVE
    38 00001DF2 C9                  <1>  leave
  2215 00001DF3 48C7C0FDFFFFFF                  mov rax, -3
  2216 00001DFA E8(00000000)                    call exit
  2217                                  
  2218                                  L_error_arg_count_12:
  2219 00001DFF 488B3C25[00000000]              mov rdi, qword [stderr]
  2220 00001E07 48BE-                           mov rsi, fmt_arg_count_12
  2220 00001E09 [AA02000000000000] 
  2221 00001E11 488B5518                        mov rdx, COUNT
  2222 00001E15 B800000000                      mov rax, 0
  2223                                  	ENTER
    33 00001E1A C8000000            <1>  enter 0, 0
    34 00001E1E 4883E4F0            <1>  and rsp, ~15
  2224 00001E22 E8(00000000)                    call fprintf
  2225                                  	LEAVE
    38 00001E27 C9                  <1>  leave
  2226 00001E28 48C7C0FDFFFFFF                  mov rax, -3
  2227 00001E2F E8(00000000)                    call exit
  2228                                  
  2229                                  L_error_arg_count_3:
  2230 00001E34 488B3C25[00000000]              mov rdi, qword [stderr]
  2231 00001E3C 48BE-                           mov rsi, fmt_arg_count_3
  2231 00001E3E [1103000000000000] 
  2232 00001E46 488B5518                        mov rdx, COUNT
  2233 00001E4A B800000000                      mov rax, 0
  2234                                  	ENTER
    33 00001E4F C8000000            <1>  enter 0, 0
    34 00001E53 4883E4F0            <1>  and rsp, ~15
  2235 00001E57 E8(00000000)                    call fprintf
  2236                                  	LEAVE
    38 00001E5C C9                  <1>  leave
  2237 00001E5D 48C7C0FDFFFFFF                  mov rax, -3
  2238 00001E64 E8(00000000)                    call exit
  2239                                          
  2240                                  L_error_incorrect_type:
  2241 00001E69 488B3C25[00000000]              mov rdi, qword [stderr]
  2242 00001E71 48BE-                           mov rsi, fmt_type
  2242 00001E73 [3A03000000000000] 
  2243 00001E7B B800000000                      mov rax, 0
  2244                                  	ENTER
    33 00001E80 C8000000            <1>  enter 0, 0
    34 00001E84 4883E4F0            <1>  and rsp, ~15
  2245 00001E88 E8(00000000)                    call fprintf
  2246                                  	LEAVE
    38 00001E8D C9                  <1>  leave
  2247 00001E8E 48C7C0FCFFFFFF                  mov rax, -4
  2248 00001E95 E8(00000000)                    call exit
  2249                                  
  2250                                  L_error_division_by_zero:
  2251 00001E9A 488B3C25[00000000]              mov rdi, qword [stderr]
  2252 00001EA2 48BE-                           mov rsi, fmt_division_by_zero
  2252 00001EA4 [7B03000000000000] 
  2253 00001EAC B800000000                      mov rax, 0
  2254                                  	ENTER
    33 00001EB1 C8000000            <1>  enter 0, 0
    34 00001EB5 4883E4F0            <1>  and rsp, ~15
  2255 00001EB9 E8(00000000)                    call fprintf
  2256                                  	LEAVE
    38 00001EBE C9                  <1>  leave
  2257 00001EBF 48C7C0F8FFFFFF                  mov rax, -8
  2258 00001EC6 E8(00000000)                    call exit
  2259                                  
  2260                                  section .data
  2261                                  fmt_char:
  2262 00000259 256300                          db `%c\0`
  2263                                  fmt_arg_count_0:
  2264 0000025C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2264 00000265 74696E67207A65726F-
  2264 0000026E 20617267756D656E74-
  2264 00000277 732E20466F756E6420-
  2264 00000280 25640A00           
  2265                                  fmt_arg_count_1:
  2266 00000284 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2266 0000028D 74696E67206F6E6520-
  2266 00000296 617267756D656E742E-
  2266 0000029F 20466F756E64202564-
  2266 000002A8 0A00               
  2267                                  fmt_arg_count_12:
  2268 000002AA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2268 000002B3 74696E67206F6E6520-
  2268 000002BC 726571756972656420-
  2268 000002C5 616E64206F6E65206F-
  2268 000002CE 7074696F6E616C2061-
  2268 000002D7 7267756D656E742E20-
  2268 000002E0 466F756E642025640A-
  2268 000002E9 00                 
  2269                                  fmt_arg_count_2:
  2270 000002EA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2270 000002F3 74696E672074776F20-
  2270 000002FC 617267756D656E7473-
  2270 00000305 2E20466F756E642025-
  2270 0000030E 640A00             
  2271                                  fmt_arg_count_3:
  2272 00000311 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2272 0000031A 74696E672074687265-
  2272 00000323 6520617267756D656E-
  2272 0000032C 74732E20466F756E64-
  2272 00000335 2025640A00         
  2273                                  fmt_type:
  2274 0000033A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2274 00000343 696F6E207061737365-
  2274 0000034C 6420696E636F727265-
  2274 00000355 637420747970650A00 
  2275                                  fmt_integer_range:
  2276 0000035E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2276 00000367 7265637420696E7465-
  2276 00000370 6765722072616E6765-
  2276 00000379 0A00               
  2277                                  fmt_division_by_zero:
  2278 0000037B 212121204469766973-             db `!!! Division by zero\n\0`
  2278 00000384 696F6E206279207A65-
  2278 0000038D 726F0A00           
  2279                                  fmt_scheme_error_part_1:
  2280 00000391 0A2121212054686520-             db `\n!!! The procedure \0`
  2280 0000039A 70726F636564757265-
  2280 000003A3 2000               
  2281                                  fmt_scheme_error_part_2:
  2282 000003A5 2061736B656420746F-             db ` asked to terminate the program\n`
  2282 000003AE 207465726D696E6174-
  2282 000003B7 65207468652070726F-
  2282 000003C0 6772616D0A         
  2283 000003C5 202020207769746820-             db `    with the following message:\n\n\0`
  2283 000003CE 74686520666F6C6C6F-
  2283 000003D7 77696E67206D657373-
  2283 000003E0 6167653A0A0A00     
  2284                                  fmt_scheme_error_part_3:
  2285 000003E7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2285 000003F0 210A0A00           
