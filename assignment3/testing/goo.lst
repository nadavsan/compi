     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "whatever"
    84 00000007 0800000000000000        	dq 8
    85 0000000F 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
    86 00000017 04                      	db T_symbol	; whatever
    87 00000018 [0600000000000000]      	dq L_constants + 6
    88 00000020 11                      	db T_rational	; 0
    89 00000021 000000000000000001-     	dq 0, 1
    89 0000002A 00000000000000     
    90 00000031 03                      	db T_string	; "+"
    91 00000032 0100000000000000        	dq 1
    92 0000003A 2B                      	db 0x2B
    93 0000003B 04                      	db T_symbol	; +
    94 0000003C [3100000000000000]      	dq L_constants + 49
    95 00000044 03                      	db T_string	; "all arguments need ...
    96 00000045 2000000000000000        	dq 32
    97 0000004D 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
    98 00000055 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
    99 0000005D 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   100 00000065 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   101 0000006D 03                      	db T_string	; "-"
   102 0000006E 0100000000000000        	dq 1
   103 00000076 2D                      	db 0x2D
   104 00000077 04                      	db T_symbol	; -
   105 00000078 [6D00000000000000]      	dq L_constants + 109
   106 00000080 11                      	db T_rational	; 1
   107 00000081 010000000000000001-     	dq 1, 1
   107 0000008A 00000000000000     
   108 00000091 03                      	db T_string	; "*"
   109 00000092 0100000000000000        	dq 1
   110 0000009A 2A                      	db 0x2A
   111 0000009B 04                      	db T_symbol	; *
   112 0000009C [9100000000000000]      	dq L_constants + 145
   113 000000A4 03                      	db T_string	; "/"
   114 000000A5 0100000000000000        	dq 1
   115 000000AD 2F                      	db 0x2F
   116 000000AE 04                      	db T_symbol	; /
   117 000000AF [A400000000000000]      	dq L_constants + 164
   118 000000B7 03                      	db T_string	; "generic-comparator"
   119 000000B8 1200000000000000        	dq 18
   120 000000C0 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   121 000000C8 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   122 000000D0 6F72                    	db 0x6F, 0x72
   123 000000D2 04                      	db T_symbol	; generic-comparator
   124 000000D3 [B700000000000000]      	dq L_constants + 183
   125 000000DB 03                      	db T_string	; "all the arguments m...
   126 000000DC 2100000000000000        	dq 33
   127 000000E4 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   128 000000EC 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   129 000000F4 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   130 000000FC 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   131 00000104 73                      	db 0x73
   132 00000105 03                      	db T_string	; "make-list"
   133 00000106 0900000000000000        	dq 9
   134 0000010E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   135 00000116 74                      	db 0x74
   136 00000117 04                      	db T_symbol	; make-list
   137 00000118 [0501000000000000]      	dq L_constants + 261
   138 00000120 03                      	db T_string	; "Usage: (make-list l...
   139 00000121 2D00000000000000        	dq 45
   140 00000129 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   141 00000131 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   142 00000139 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   143 00000141 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   144 00000149 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   145 00000151 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   146 00000156 0241                    	db T_char, 0x41	; #\A
   147 00000158 025A                    	db T_char, 0x5A	; #\Z
   148 0000015A 0261                    	db T_char, 0x61	; #\a
   149 0000015C 027A                    	db T_char, 0x7A	; #\z
   150 0000015E 03                      	db T_string	; "make-vector"
   151 0000015F 0B00000000000000        	dq 11
   152 00000167 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   153 0000016F 746F72                  	db 0x74, 0x6F, 0x72
   154 00000172 04                      	db T_symbol	; make-vector
   155 00000173 [5E01000000000000]      	dq L_constants + 350
   156 0000017B 03                      	db T_string	; "Usage: (make-vector...
   157 0000017C 2B00000000000000        	dq 43
   158 00000184 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   159 0000018C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   160 00000194 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   161 0000019C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   162 000001A4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   163 000001AC 6C7429                  	db 0x6C, 0x74, 0x29
   164 000001AF 03                      	db T_string	; "make-string"
   165 000001B0 0B00000000000000        	dq 11
   166 000001B8 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   167 000001C0 696E67                  	db 0x69, 0x6E, 0x67
   168 000001C3 04                      	db T_symbol	; make-string
   169 000001C4 [AF01000000000000]      	dq L_constants + 431
   170 000001CC 03                      	db T_string	; "Usage: (make-string...
   171 000001CD 2B00000000000000        	dq 43
   172 000001D5 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   173 000001DD 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   174 000001E5 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   175 000001ED 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   176 000001F5 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   177 000001FD 6C7429                  	db 0x6C, 0x74, 0x29
   178 00000200 11                      	db T_rational	; 2
   179 00000201 020000000000000001-     	dq 2, 1
   179 0000020A 00000000000000     
   180 00000211 03                      	db T_string	; "a"
   181 00000212 0100000000000000        	dq 1
   182 0000021A 61                      	db 0x61
   183 0000021B 04                      	db T_symbol	; a
   184 0000021C [1102000000000000]      	dq L_constants + 529
   185 00000224 03                      	db T_string	; "b"
   186 00000225 0100000000000000        	dq 1
   187 0000022D 62                      	db 0x62
   188 0000022E 04                      	db T_symbol	; b
   189 0000022F [2402000000000000]      	dq L_constants + 548
   190 00000237 21                      	db T_pair	; (b)
   191 00000238 [2E02000000000000]-     	dq L_constants + 558, L_constants + 1
   191 00000240 [0100000000000000] 
   192 00000248 21                      	db T_pair	; (a b)
   193 00000249 [1B02000000000000]-     	dq L_constants + 539, L_constants + 567
   193 00000251 [3702000000000000] 
   194 00000259 21                      	db T_pair	; ((a b))
   195 0000025A [4802000000000000]-     	dq L_constants + 584, L_constants + 1
   195 00000262 [0100000000000000] 
   196                                  
   197                                  section .bss
   198                                  free_var_0:	; location of null?
   199 00000000 ????????????????        	resq 1
   200                                  free_var_1:	; location of pair?
   201 00000008 ????????????????        	resq 1
   202                                  free_var_2:	; location of void?
   203 00000010 ????????????????        	resq 1
   204                                  free_var_3:	; location of char?
   205 00000018 ????????????????        	resq 1
   206                                  free_var_4:	; location of string?
   207 00000020 ????????????????        	resq 1
   208                                  free_var_5:	; location of symbol?
   209 00000028 ????????????????        	resq 1
   210                                  free_var_6:	; location of vector?
   211 00000030 ????????????????        	resq 1
   212                                  free_var_7:	; location of procedure?
   213 00000038 ????????????????        	resq 1
   214                                  free_var_8:	; location of real?
   215 00000040 ????????????????        	resq 1
   216                                  free_var_9:	; location of rational?
   217 00000048 ????????????????        	resq 1
   218                                  free_var_10:	; location of boolean?
   219 00000050 ????????????????        	resq 1
   220                                  free_var_11:	; location of number?
   221 00000058 ????????????????        	resq 1
   222                                  free_var_12:	; location of collection?
   223 00000060 ????????????????        	resq 1
   224                                  free_var_13:	; location of cons
   225 00000068 ????????????????        	resq 1
   226                                  free_var_14:	; location of display-sexpr
   227 00000070 ????????????????        	resq 1
   228                                  free_var_15:	; location of write-char
   229 00000078 ????????????????        	resq 1
   230                                  free_var_16:	; location of car
   231 00000080 ????????????????        	resq 1
   232                                  free_var_17:	; location of cdr
   233 00000088 ????????????????        	resq 1
   234                                  free_var_18:	; location of string-length
   235 00000090 ????????????????        	resq 1
   236                                  free_var_19:	; location of vector-length
   237 00000098 ????????????????        	resq 1
   238                                  free_var_20:	; location of real->integer
   239 000000A0 ????????????????        	resq 1
   240                                  free_var_21:	; location of exit
   241 000000A8 ????????????????        	resq 1
   242                                  free_var_22:	; location of integer->real
   243 000000B0 ????????????????        	resq 1
   244                                  free_var_23:	; location of rational->real
   245 000000B8 ????????????????        	resq 1
   246                                  free_var_24:	; location of char->integer
   247 000000C0 ????????????????        	resq 1
   248                                  free_var_25:	; location of integer->char
   249 000000C8 ????????????????        	resq 1
   250                                  free_var_26:	; location of trng
   251 000000D0 ????????????????        	resq 1
   252                                  free_var_27:	; location of zero?
   253 000000D8 ????????????????        	resq 1
   254                                  free_var_28:	; location of integer?
   255 000000E0 ????????????????        	resq 1
   256                                  free_var_29:	; location of __bin-apply
   257 000000E8 ????????????????        	resq 1
   258                                  free_var_30:	; location of __bin-add-rr
   259 000000F0 ????????????????        	resq 1
   260                                  free_var_31:	; location of __bin-sub-rr
   261 000000F8 ????????????????        	resq 1
   262                                  free_var_32:	; location of __bin-mul-rr
   263 00000100 ????????????????        	resq 1
   264                                  free_var_33:	; location of __bin-div-rr
   265 00000108 ????????????????        	resq 1
   266                                  free_var_34:	; location of __bin-add-qq
   267 00000110 ????????????????        	resq 1
   268                                  free_var_35:	; location of __bin-sub-qq
   269 00000118 ????????????????        	resq 1
   270                                  free_var_36:	; location of __bin-mul-qq
   271 00000120 ????????????????        	resq 1
   272                                  free_var_37:	; location of __bin-div-qq
   273 00000128 ????????????????        	resq 1
   274                                  free_var_38:	; location of error
   275 00000130 ????????????????        	resq 1
   276                                  free_var_39:	; location of __bin-less-than-rr
   277 00000138 ????????????????        	resq 1
   278                                  free_var_40:	; location of __bin-less-than-qq
   279 00000140 ????????????????        	resq 1
   280                                  free_var_41:	; location of __bin-equal-rr
   281 00000148 ????????????????        	resq 1
   282                                  free_var_42:	; location of __bin-equal-qq
   283 00000150 ????????????????        	resq 1
   284                                  free_var_43:	; location of quotient
   285 00000158 ????????????????        	resq 1
   286                                  free_var_44:	; location of remainder
   287 00000160 ????????????????        	resq 1
   288                                  free_var_45:	; location of set-car!
   289 00000168 ????????????????        	resq 1
   290                                  free_var_46:	; location of set-cdr!
   291 00000170 ????????????????        	resq 1
   292                                  free_var_47:	; location of string-ref
   293 00000178 ????????????????        	resq 1
   294                                  free_var_48:	; location of vector-ref
   295 00000180 ????????????????        	resq 1
   296                                  free_var_49:	; location of vector-set!
   297 00000188 ????????????????        	resq 1
   298                                  free_var_50:	; location of string-set!
   299 00000190 ????????????????        	resq 1
   300                                  free_var_51:	; location of make-vector
   301 00000198 ????????????????        	resq 1
   302                                  free_var_52:	; location of make-string
   303 000001A0 ????????????????        	resq 1
   304                                  free_var_53:	; location of numerator
   305 000001A8 ????????????????        	resq 1
   306                                  free_var_54:	; location of denominator
   307 000001B0 ????????????????        	resq 1
   308                                  free_var_55:	; location of eq?
   309 000001B8 ????????????????        	resq 1
   310                                  free_var_56:	; location of caar
   311 000001C0 ????????????????        	resq 1
   312                                  free_var_57:	; location of cadr
   313 000001C8 ????????????????        	resq 1
   314                                  free_var_58:	; location of cdar
   315 000001D0 ????????????????        	resq 1
   316                                  free_var_59:	; location of cddr
   317 000001D8 ????????????????        	resq 1
   318                                  free_var_60:	; location of caaar
   319 000001E0 ????????????????        	resq 1
   320                                  free_var_61:	; location of caadr
   321 000001E8 ????????????????        	resq 1
   322                                  free_var_62:	; location of cadar
   323 000001F0 ????????????????        	resq 1
   324                                  free_var_63:	; location of caddr
   325 000001F8 ????????????????        	resq 1
   326                                  free_var_64:	; location of cdaar
   327 00000200 ????????????????        	resq 1
   328                                  free_var_65:	; location of cdadr
   329 00000208 ????????????????        	resq 1
   330                                  free_var_66:	; location of cddar
   331 00000210 ????????????????        	resq 1
   332                                  free_var_67:	; location of cdddr
   333 00000218 ????????????????        	resq 1
   334                                  free_var_68:	; location of caaaar
   335 00000220 ????????????????        	resq 1
   336                                  free_var_69:	; location of caaadr
   337 00000228 ????????????????        	resq 1
   338                                  free_var_70:	; location of caadar
   339 00000230 ????????????????        	resq 1
   340                                  free_var_71:	; location of caaddr
   341 00000238 ????????????????        	resq 1
   342                                  free_var_72:	; location of cadaar
   343 00000240 ????????????????        	resq 1
   344                                  free_var_73:	; location of cadadr
   345 00000248 ????????????????        	resq 1
   346                                  free_var_74:	; location of caddar
   347 00000250 ????????????????        	resq 1
   348                                  free_var_75:	; location of cadddr
   349 00000258 ????????????????        	resq 1
   350                                  free_var_76:	; location of cdaaar
   351 00000260 ????????????????        	resq 1
   352                                  free_var_77:	; location of cdaadr
   353 00000268 ????????????????        	resq 1
   354                                  free_var_78:	; location of cdadar
   355 00000270 ????????????????        	resq 1
   356                                  free_var_79:	; location of cdaddr
   357 00000278 ????????????????        	resq 1
   358                                  free_var_80:	; location of cddaar
   359 00000280 ????????????????        	resq 1
   360                                  free_var_81:	; location of cddadr
   361 00000288 ????????????????        	resq 1
   362                                  free_var_82:	; location of cdddar
   363 00000290 ????????????????        	resq 1
   364                                  free_var_83:	; location of cddddr
   365 00000298 ????????????????        	resq 1
   366                                  free_var_84:	; location of list?
   367 000002A0 ????????????????        	resq 1
   368                                  free_var_85:	; location of list
   369 000002A8 ????????????????        	resq 1
   370                                  free_var_86:	; location of not
   371 000002B0 ????????????????        	resq 1
   372                                  free_var_87:	; location of fraction?
   373 000002B8 ????????????????        	resq 1
   374                                  free_var_88:	; location of list*
   375 000002C0 ????????????????        	resq 1
   376                                  free_var_89:	; location of apply
   377 000002C8 ????????????????        	resq 1
   378                                  free_var_90:	; location of ormap
   379 000002D0 ????????????????        	resq 1
   380                                  free_var_91:	; location of map
   381 000002D8 ????????????????        	resq 1
   382                                  free_var_92:	; location of andmap
   383 000002E0 ????????????????        	resq 1
   384                                  free_var_93:	; location of reverse
   385 000002E8 ????????????????        	resq 1
   386                                  free_var_94:	; location of append
   387 000002F0 ????????????????        	resq 1
   388                                  free_var_95:	; location of fold-left
   389 000002F8 ????????????????        	resq 1
   390                                  free_var_96:	; location of fold-right
   391 00000300 ????????????????        	resq 1
   392                                  free_var_97:	; location of +
   393 00000308 ????????????????        	resq 1
   394                                  free_var_98:	; location of -
   395 00000310 ????????????????        	resq 1
   396                                  free_var_99:	; location of *
   397 00000318 ????????????????        	resq 1
   398                                  free_var_100:	; location of /
   399 00000320 ????????????????        	resq 1
   400                                  free_var_101:	; location of fact
   401 00000328 ????????????????        	resq 1
   402                                  free_var_102:	; location of <
   403 00000330 ????????????????        	resq 1
   404                                  free_var_103:	; location of <=
   405 00000338 ????????????????        	resq 1
   406                                  free_var_104:	; location of >
   407 00000340 ????????????????        	resq 1
   408                                  free_var_105:	; location of >=
   409 00000348 ????????????????        	resq 1
   410                                  free_var_106:	; location of =
   411 00000350 ????????????????        	resq 1
   412                                  free_var_107:	; location of make-list
   413 00000358 ????????????????        	resq 1
   414                                  free_var_108:	; location of char<?
   415 00000360 ????????????????        	resq 1
   416                                  free_var_109:	; location of char<=?
   417 00000368 ????????????????        	resq 1
   418                                  free_var_110:	; location of char=?
   419 00000370 ????????????????        	resq 1
   420                                  free_var_111:	; location of char>?
   421 00000378 ????????????????        	resq 1
   422                                  free_var_112:	; location of char>=?
   423 00000380 ????????????????        	resq 1
   424                                  free_var_113:	; location of char-downcase
   425 00000388 ????????????????        	resq 1
   426                                  free_var_114:	; location of char-upcase
   427 00000390 ????????????????        	resq 1
   428                                  free_var_115:	; location of char-ci<?
   429 00000398 ????????????????        	resq 1
   430                                  free_var_116:	; location of char-ci<=?
   431 000003A0 ????????????????        	resq 1
   432                                  free_var_117:	; location of char-ci=?
   433 000003A8 ????????????????        	resq 1
   434                                  free_var_118:	; location of char-ci>?
   435 000003B0 ????????????????        	resq 1
   436                                  free_var_119:	; location of char-ci>=?
   437 000003B8 ????????????????        	resq 1
   438                                  free_var_120:	; location of string-downcase
   439 000003C0 ????????????????        	resq 1
   440                                  free_var_121:	; location of string-upcase
   441 000003C8 ????????????????        	resq 1
   442                                  free_var_122:	; location of list->string
   443 000003D0 ????????????????        	resq 1
   444                                  free_var_123:	; location of string->list
   445 000003D8 ????????????????        	resq 1
   446                                  free_var_124:	; location of string<?
   447 000003E0 ????????????????        	resq 1
   448                                  free_var_125:	; location of string<=?
   449 000003E8 ????????????????        	resq 1
   450                                  free_var_126:	; location of string=?
   451 000003F0 ????????????????        	resq 1
   452                                  free_var_127:	; location of string>=?
   453 000003F8 ????????????????        	resq 1
   454                                  free_var_128:	; location of string>?
   455 00000400 ????????????????        	resq 1
   456                                  free_var_129:	; location of string-ci<?
   457 00000408 ????????????????        	resq 1
   458                                  free_var_130:	; location of string-ci<=?
   459 00000410 ????????????????        	resq 1
   460                                  free_var_131:	; location of string-ci=?
   461 00000418 ????????????????        	resq 1
   462                                  free_var_132:	; location of string-ci>=?
   463 00000420 ????????????????        	resq 1
   464                                  free_var_133:	; location of string-ci>?
   465 00000428 ????????????????        	resq 1
   466                                  free_var_134:	; location of length
   467 00000430 ????????????????        	resq 1
   468                                  free_var_135:	; location of list->vector
   469 00000438 ????????????????        	resq 1
   470                                  free_var_136:	; location of vector
   471 00000440 ????????????????        	resq 1
   472                                  free_var_137:	; location of vector->list
   473 00000448 ????????????????        	resq 1
   474                                  free_var_138:	; location of random
   475 00000450 ????????????????        	resq 1
   476                                  free_var_139:	; location of positive?
   477 00000458 ????????????????        	resq 1
   478                                  free_var_140:	; location of negative?
   479 00000460 ????????????????        	resq 1
   480                                  free_var_141:	; location of even?
   481 00000468 ????????????????        	resq 1
   482                                  free_var_142:	; location of odd?
   483 00000470 ????????????????        	resq 1
   484                                  free_var_143:	; location of abs
   485 00000478 ????????????????        	resq 1
   486                                  free_var_144:	; location of equal?
   487 00000480 ????????????????        	resq 1
   488                                  free_var_145:	; location of assoc
   489 00000488 ????????????????        	resq 1
   490                                  
   491                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   492                                  global main
   493                                  section .text
   494                                  main:
   495 00000000 C8000000                        enter 0, 0
   496                                          
   497                                  	; building closure for null?
   498 00000004 48BF-                   	mov rdi, free_var_0
   498 00000006 [0000000000000000] 
   499 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   499 00000010 [601D010000000000] 
   500 00000018 E86C1C0100              	call bind_primitive
   501                                  
   502                                  	; building closure for pair?
   503 0000001D 48BF-                   	mov rdi, free_var_1
   503 0000001F [0800000000000000] 
   504 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   504 00000029 [961D010000000000] 
   505 00000031 E8531C0100              	call bind_primitive
   506                                  
   507                                  	; building closure for void?
   508 00000036 48BF-                   	mov rdi, free_var_2
   508 00000038 [1000000000000000] 
   509 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   509 00000042 [CC1D010000000000] 
   510 0000004A E83A1C0100              	call bind_primitive
   511                                  
   512                                  	; building closure for char?
   513 0000004F 48BF-                   	mov rdi, free_var_3
   513 00000051 [1800000000000000] 
   514 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   514 0000005B [021E010000000000] 
   515 00000063 E8211C0100              	call bind_primitive
   516                                  
   517                                  	; building closure for string?
   518 00000068 48BF-                   	mov rdi, free_var_4
   518 0000006A [2000000000000000] 
   519 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   519 00000074 [381E010000000000] 
   520 0000007C E8081C0100              	call bind_primitive
   521                                  
   522                                  	; building closure for symbol?
   523 00000081 48BF-                   	mov rdi, free_var_5
   523 00000083 [2800000000000000] 
   524 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   524 0000008D [6E1E010000000000] 
   525 00000095 E8EF1B0100              	call bind_primitive
   526                                  
   527                                  	; building closure for vector?
   528 0000009A 48BF-                   	mov rdi, free_var_6
   528 0000009C [3000000000000000] 
   529 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   529 000000A6 [A41E010000000000] 
   530 000000AE E8D61B0100              	call bind_primitive
   531                                  
   532                                  	; building closure for procedure?
   533 000000B3 48BF-                   	mov rdi, free_var_7
   533 000000B5 [3800000000000000] 
   534 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   534 000000BF [DA1E010000000000] 
   535 000000C7 E8BD1B0100              	call bind_primitive
   536                                  
   537                                  	; building closure for real?
   538 000000CC 48BF-                   	mov rdi, free_var_8
   538 000000CE [4000000000000000] 
   539 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   539 000000D8 [101F010000000000] 
   540 000000E0 E8A41B0100              	call bind_primitive
   541                                  
   542                                  	; building closure for rational?
   543 000000E5 48BF-                   	mov rdi, free_var_9
   543 000000E7 [4800000000000000] 
   544 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   544 000000F1 [461F010000000000] 
   545 000000F9 E88B1B0100              	call bind_primitive
   546                                  
   547                                  	; building closure for boolean?
   548 000000FE 48BF-                   	mov rdi, free_var_10
   548 00000100 [5000000000000000] 
   549 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   549 0000010A [7C1F010000000000] 
   550 00000112 E8721B0100              	call bind_primitive
   551                                  
   552                                  	; building closure for number?
   553 00000117 48BF-                   	mov rdi, free_var_11
   553 00000119 [5800000000000000] 
   554 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   554 00000123 [B41F010000000000] 
   555 0000012B E8591B0100              	call bind_primitive
   556                                  
   557                                  	; building closure for collection?
   558 00000130 48BF-                   	mov rdi, free_var_12
   558 00000132 [6000000000000000] 
   559 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   559 0000013C [EC1F010000000000] 
   560 00000144 E8401B0100              	call bind_primitive
   561                                  
   562                                  	; building closure for cons
   563 00000149 48BF-                   	mov rdi, free_var_13
   563 0000014B [6800000000000000] 
   564 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   564 00000155 [2420010000000000] 
   565 0000015D E8271B0100              	call bind_primitive
   566                                  
   567                                  	; building closure for display-sexpr
   568 00000162 48BF-                   	mov rdi, free_var_14
   568 00000164 [7000000000000000] 
   569 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   569 0000016E [5820010000000000] 
   570 00000176 E80E1B0100              	call bind_primitive
   571                                  
   572                                  	; building closure for write-char
   573 0000017B 48BF-                   	mov rdi, free_var_15
   573 0000017D [7800000000000000] 
   574 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   574 00000187 [8220010000000000] 
   575 0000018F E8F51A0100              	call bind_primitive
   576                                  
   577                                  	; building closure for car
   578 00000194 48BF-                   	mov rdi, free_var_16
   578 00000196 [8000000000000000] 
   579 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   579 000001A0 [D920010000000000] 
   580 000001A8 E8DC1A0100              	call bind_primitive
   581                                  
   582                                  	; building closure for cdr
   583 000001AD 48BF-                   	mov rdi, free_var_17
   583 000001AF [8800000000000000] 
   584 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   584 000001B9 [0121010000000000] 
   585 000001C1 E8C31A0100              	call bind_primitive
   586                                  
   587                                  	; building closure for string-length
   588 000001C6 48BF-                   	mov rdi, free_var_18
   588 000001C8 [9000000000000000] 
   589 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   589 000001D2 [2921010000000000] 
   590 000001DA E8AA1A0100              	call bind_primitive
   591                                  
   592                                  	; building closure for vector-length
   593 000001DF 48BF-                   	mov rdi, free_var_19
   593 000001E1 [9800000000000000] 
   594 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   594 000001EB [5621010000000000] 
   595 000001F3 E8911A0100              	call bind_primitive
   596                                  
   597                                  	; building closure for real->integer
   598 000001F8 48BF-                   	mov rdi, free_var_20
   598 000001FA [A000000000000000] 
   599 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   599 00000204 [8321010000000000] 
   600 0000020C E8781A0100              	call bind_primitive
   601                                  
   602                                  	; building closure for exit
   603 00000211 48BF-                   	mov rdi, free_var_21
   603 00000213 [A800000000000000] 
   604 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   604 0000021D [B621010000000000] 
   605 00000225 E85F1A0100              	call bind_primitive
   606                                  
   607                                  	; building closure for integer->real
   608 0000022A 48BF-                   	mov rdi, free_var_22
   608 0000022C [B000000000000000] 
   609 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   609 00000236 [D321010000000000] 
   610 0000023E E8461A0100              	call bind_primitive
   611                                  
   612                                  	; building closure for rational->real
   613 00000243 48BF-                   	mov rdi, free_var_23
   613 00000245 [B800000000000000] 
   614 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   614 0000024F [1022010000000000] 
   615 00000257 E82D1A0100              	call bind_primitive
   616                                  
   617                                  	; building closure for char->integer
   618 0000025C 48BF-                   	mov rdi, free_var_24
   618 0000025E [C000000000000000] 
   619 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   619 00000268 [4F22010000000000] 
   620 00000270 E8141A0100              	call bind_primitive
   621                                  
   622                                  	; building closure for integer->char
   623 00000275 48BF-                   	mov rdi, free_var_25
   623 00000277 [C800000000000000] 
   624 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   624 00000281 [8422010000000000] 
   625 00000289 E8FB190100              	call bind_primitive
   626                                  
   627                                  	; building closure for trng
   628 0000028E 48BF-                   	mov rdi, free_var_26
   628 00000290 [D000000000000000] 
   629 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   629 0000029A [DE22010000000000] 
   630 000002A2 E8E2190100              	call bind_primitive
   631                                  
   632                                  	; building closure for zero?
   633 000002A7 48BF-                   	mov rdi, free_var_27
   633 000002A9 [D800000000000000] 
   634 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   634 000002B3 [0123010000000000] 
   635 000002BB E8C9190100              	call bind_primitive
   636                                  
   637                                  	; building closure for integer?
   638 000002C0 48BF-                   	mov rdi, free_var_28
   638 000002C2 [E000000000000000] 
   639 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   639 000002CC [5C23010000000000] 
   640 000002D4 E8B0190100              	call bind_primitive
   641                                  
   642                                  	; building closure for __bin-apply
   643 000002D9 48BF-                   	mov rdi, free_var_29
   643 000002DB [E800000000000000] 
   644 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   644 000002E5 [B11C010000000000] 
   645 000002ED E897190100              	call bind_primitive
   646                                  
   647                                  	; building closure for __bin-add-rr
   648 000002F2 48BF-                   	mov rdi, free_var_30
   648 000002F4 [F000000000000000] 
   649 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   649 000002FE [9923010000000000] 
   650 00000306 E87E190100              	call bind_primitive
   651                                  
   652                                  	; building closure for __bin-sub-rr
   653 0000030B 48BF-                   	mov rdi, free_var_31
   653 0000030D [F800000000000000] 
   654 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   654 00000317 [DD23010000000000] 
   655 0000031F E865190100              	call bind_primitive
   656                                  
   657                                  	; building closure for __bin-mul-rr
   658 00000324 48BF-                   	mov rdi, free_var_32
   658 00000326 [0001000000000000] 
   659 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   659 00000330 [2124010000000000] 
   660 00000338 E84C190100              	call bind_primitive
   661                                  
   662                                  	; building closure for __bin-div-rr
   663 0000033D 48BF-                   	mov rdi, free_var_33
   663 0000033F [0801000000000000] 
   664 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   664 00000349 [6524010000000000] 
   665 00000351 E833190100              	call bind_primitive
   666                                  
   667                                  	; building closure for __bin-add-qq
   668 00000356 48BF-                   	mov rdi, free_var_34
   668 00000358 [1001000000000000] 
   669 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   669 00000362 [B724010000000000] 
   670 0000036A E81A190100              	call bind_primitive
   671                                  
   672                                  	; building closure for __bin-sub-qq
   673 0000036F 48BF-                   	mov rdi, free_var_35
   673 00000371 [1801000000000000] 
   674 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   674 0000037B [1F25010000000000] 
   675 00000383 E801190100              	call bind_primitive
   676                                  
   677                                  	; building closure for __bin-mul-qq
   678 00000388 48BF-                   	mov rdi, free_var_36
   678 0000038A [2001000000000000] 
   679 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   679 00000394 [8725010000000000] 
   680 0000039C E8E8180100              	call bind_primitive
   681                                  
   682                                  	; building closure for __bin-div-qq
   683 000003A1 48BF-                   	mov rdi, free_var_37
   683 000003A3 [2801000000000000] 
   684 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   684 000003AD [DF25010000000000] 
   685 000003B5 E8CF180100              	call bind_primitive
   686                                  
   687                                  	; building closure for error
   688 000003BA 48BF-                   	mov rdi, free_var_38
   688 000003BC [3001000000000000] 
   689 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   689 000003C6 [AD26010000000000] 
   690 000003CE E8B6180100              	call bind_primitive
   691                                  
   692                                  	; building closure for __bin-less-than-rr
   693 000003D3 48BF-                   	mov rdi, free_var_39
   693 000003D5 [3801000000000000] 
   694 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   694 000003DF [6427010000000000] 
   695 000003E7 E89D180100              	call bind_primitive
   696                                  
   697                                  	; building closure for __bin-less-than-qq
   698 000003EC 48BF-                   	mov rdi, free_var_40
   698 000003EE [4001000000000000] 
   699 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   699 000003F8 [BB27010000000000] 
   700 00000400 E884180100              	call bind_primitive
   701                                  
   702                                  	; building closure for __bin-equal-rr
   703 00000405 48BF-                   	mov rdi, free_var_41
   703 00000407 [4801000000000000] 
   704 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   704 00000411 [1E28010000000000] 
   705 00000419 E86B180100              	call bind_primitive
   706                                  
   707                                  	; building closure for __bin-equal-qq
   708 0000041E 48BF-                   	mov rdi, free_var_42
   708 00000420 [5001000000000000] 
   709 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   709 0000042A [7528010000000000] 
   710 00000432 E852180100              	call bind_primitive
   711                                  
   712                                  	; building closure for quotient
   713 00000437 48BF-                   	mov rdi, free_var_43
   713 00000439 [5801000000000000] 
   714 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   714 00000443 [D828010000000000] 
   715 0000044B E839180100              	call bind_primitive
   716                                  
   717                                  	; building closure for remainder
   718 00000450 48BF-                   	mov rdi, free_var_44
   718 00000452 [6001000000000000] 
   719 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   719 0000045C [3E29010000000000] 
   720 00000464 E820180100              	call bind_primitive
   721                                  
   722                                  	; building closure for set-car!
   723 00000469 48BF-                   	mov rdi, free_var_45
   723 0000046B [6801000000000000] 
   724 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   724 00000475 [A429010000000000] 
   725 0000047D E807180100              	call bind_primitive
   726                                  
   727                                  	; building closure for set-cdr!
   728 00000482 48BF-                   	mov rdi, free_var_46
   728 00000484 [7001000000000000] 
   729 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   729 0000048E [DA29010000000000] 
   730 00000496 E8EE170100              	call bind_primitive
   731                                  
   732                                  	; building closure for string-ref
   733 0000049B 48BF-                   	mov rdi, free_var_47
   733 0000049D [7801000000000000] 
   734 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   734 000004A7 [102A010000000000] 
   735 000004AF E8D5170100              	call bind_primitive
   736                                  
   737                                  	; building closure for vector-ref
   738 000004B4 48BF-                   	mov rdi, free_var_48
   738 000004B6 [8001000000000000] 
   739 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   739 000004C0 [7B2A010000000000] 
   740 000004C8 E8BC170100              	call bind_primitive
   741                                  
   742                                  	; building closure for vector-set!
   743 000004CD 48BF-                   	mov rdi, free_var_49
   743 000004CF [8801000000000000] 
   744 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   744 000004D9 [D72A010000000000] 
   745 000004E1 E8A3170100              	call bind_primitive
   746                                  
   747                                  	; building closure for string-set!
   748 000004E6 48BF-                   	mov rdi, free_var_50
   748 000004E8 [9001000000000000] 
   749 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   749 000004F2 [412B010000000000] 
   750 000004FA E88A170100              	call bind_primitive
   751                                  
   752                                  	; building closure for make-vector
   753 000004FF 48BF-                   	mov rdi, free_var_51
   753 00000501 [9801000000000000] 
   754 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   754 0000050B [B62B010000000000] 
   755 00000513 E871170100              	call bind_primitive
   756                                  
   757                                  	; building closure for make-string
   758 00000518 48BF-                   	mov rdi, free_var_52
   758 0000051A [A001000000000000] 
   759 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   759 00000524 [202C010000000000] 
   760 0000052C E858170100              	call bind_primitive
   761                                  
   762                                  	; building closure for numerator
   763 00000531 48BF-                   	mov rdi, free_var_53
   763 00000533 [A801000000000000] 
   764 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   764 0000053D [922C010000000000] 
   765 00000545 E83F170100              	call bind_primitive
   766                                  
   767                                  	; building closure for denominator
   768 0000054A 48BF-                   	mov rdi, free_var_54
   768 0000054C [B001000000000000] 
   769 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   769 00000556 [BF2C010000000000] 
   770 0000055E E826170100              	call bind_primitive
   771                                  
   772                                  	; building closure for eq?
   773 00000563 48BF-                   	mov rdi, free_var_55
   773 00000565 [B801000000000000] 
   774 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   774 0000056F [EC2C010000000000] 
   775 00000577 E80D170100              	call bind_primitive
   776                                  
   777 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   778 00000581 E872110100              	call malloc
   779 00000586 50                      	push rax
   780 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   781 0000058C E867110100              	call malloc
   782 00000591 50                      	push rax
   783 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   784 00000597 E85C110100              	call malloc
   785 0000059C 488B7D10                	mov rdi, ENV
   786 000005A0 BE00000000              	mov rsi, 0
   787 000005A5 BA01000000              	mov rdx, 1
   788                                  .L_lambda_simple_env_loop_0001:	; ext_env[i + 1] <-- env[i]
   789 000005AA 4883FE00                	cmp rsi, 0
   790 000005AE 7410                    	je .L_lambda_simple_env_end_0001
   791 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   792 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   793 000005B8 48FFC6                  	inc rsi
   794 000005BB 48FFC2                  	inc rdx
   795 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_0001
   796                                  .L_lambda_simple_env_end_0001:
   797 000005C0 5B                      	pop rbx
   798 000005C1 BE00000000              	mov rsi, 0
   799                                  .L_lambda_simple_params_loop_0001:	; copy params
   800 000005C6 4883FE00                	cmp rsi, 0
   801 000005CA 740E                    	je .L_lambda_simple_params_end_0001
   802 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   803 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   804 000005D5 48FFC6                  	inc rsi
   805 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_0001
   806                                  .L_lambda_simple_params_end_0001:
   807 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   808 000005DD 4889C3                  	mov rbx, rax
   809 000005E0 58                      	pop rax
   810 000005E1 C60005                  	mov byte [rax], T_closure
   811 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   812 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0001
   813 000005F0 E9A4000000              	jmp .L_lambda_simple_end_0001
   814                                  .L_lambda_simple_code_0001:	; lambda-simple body
   815 000005F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
   816 000005FB 740B                    	je .L_lambda_simple_arity_check_ok_0001
   817 000005FD FF742410                	push qword [rsp + 8 * 2]
   818 00000601 6A01                    	push 1
   819 00000603 E9A9100100              	jmp L_error_incorrect_arity_simple
   820                                  .L_lambda_simple_arity_check_ok_0001:
   821 00000608 C8000000                	enter 0, 0
   822 0000060C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   823 00000610 50                      	push rax
   824 00000611 6A01                    	push 1
   825 00000613 488B0425[80000000]      	mov rax, qword [free_var_16]
   826                                  	assert_closure(rax)
    42 0000061B 803805              <1>  cmp byte [%1], %2
    43 0000061E 0F85C8280100        <1>  jne L_error_incorrect_type
   827 00000624 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   828 00000627 FF5009                  	call SOB_CLOSURE_CODE(rax)
   829 0000062A 50                      	push rax
   830 0000062B 6A01                    	push 1
   831 0000062D 488B0425[80000000]      	mov rax, qword [free_var_16]
   832                                  .L_applic_TC_0001:
   833 00000635 803805                  	cmp byte [rax], T_closure
   834 00000638 0F856F200100            	jne L_code_ptr_error
   835 0000063E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   836 00000642 53                      	push rbx
   837 00000643 FF7508                  	push qword [rbp + 8]
   838 00000646 FF7500                  	push qword [rbp]
   839 00000649 488B4D18                	mov rcx, [rbp + 3 * 8]
   840 0000064D 488B542418              	mov rdx, [rsp + 3 * 8]
   841 00000652 488D7204                	lea rsi, [rdx + 4]
   842 00000656 4C8D4EFF                	lea r9, [rsi - 1]
   843 0000065A 488D7903                	lea rdi, [rcx + 3]
   844 0000065E 4D31C0                  	xor r8, r8
   845                                  .L_tc_recycle_frame_loop_0001:
   846 00000661 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
   847 00000665 4C8944FD00              	mov [rbp + (rdi * 8)], r8
   848 0000066A 49FFC9                  	dec r9
   849 0000066D 4D31C0                  	xor r8, r8
   850 00000670 48FFCF                  	dec rdi
   851 00000673 48FFCE                  	dec rsi
   852 00000676 4883FE00                	cmp rsi, 0
   853 0000067A 75E5                    	jne .L_tc_recycle_frame_loop_0001
   854                                  .L_tc_recycle_frame_done_0001:
   855                                  ;this pop rbp in sot to the right place
   856 0000067C 4989C9                  	mov r9, rcx
   857 0000067F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
   858 00000687 4C01CC                  	add rsp, r9
   859 0000068A 5D                      	pop rbp
   860 0000068B 488B4D00                	mov rcx, qword [rbp]
   861 0000068F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   862 00000693 FFE3                    	jmp rbx
   863 00000695 C9                      	leave
   864 00000696 C21800                  	ret 8 * (2 + 1)
   865                                  .L_lambda_simple_end_0001:	; new closure is in rax
   866 00000699 48890425[C0010000]      	mov qword [free_var_56], rax
   867 000006A1 48B8-                   	mov rax, sob_void
   867 000006A3 [0000000000000000] 
   868                                  
   869 000006AB 4889C7                  	mov rdi, rax
   870 000006AE E856100100              	call print_sexpr_if_not_void
   871                                  
   872 000006B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   873 000006B8 E83B100100              	call malloc
   874 000006BD 50                      	push rax
   875 000006BE BF00000000              	mov rdi, 8 * 0	; new rib
   876 000006C3 E830100100              	call malloc
   877 000006C8 50                      	push rax
   878 000006C9 BF08000000              	mov rdi, 8 * 1	; extended env
   879 000006CE E825100100              	call malloc
   880 000006D3 488B7D10                	mov rdi, ENV
   881 000006D7 BE00000000              	mov rsi, 0
   882 000006DC BA01000000              	mov rdx, 1
   883                                  .L_lambda_simple_env_loop_0002:	; ext_env[i + 1] <-- env[i]
   884 000006E1 4883FE00                	cmp rsi, 0
   885 000006E5 7410                    	je .L_lambda_simple_env_end_0002
   886 000006E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   887 000006EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
   888 000006EF 48FFC6                  	inc rsi
   889 000006F2 48FFC2                  	inc rdx
   890 000006F5 EBEA                    	jmp .L_lambda_simple_env_loop_0002
   891                                  .L_lambda_simple_env_end_0002:
   892 000006F7 5B                      	pop rbx
   893 000006F8 BE00000000              	mov rsi, 0
   894                                  .L_lambda_simple_params_loop_0002:	; copy params
   895 000006FD 4883FE00                	cmp rsi, 0
   896 00000701 740E                    	je .L_lambda_simple_params_end_0002
   897 00000703 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   898 00000708 488914F3                	mov qword [rbx + 8 * rsi], rdx
   899 0000070C 48FFC6                  	inc rsi
   900 0000070F EBEC                    	jmp .L_lambda_simple_params_loop_0002
   901                                  .L_lambda_simple_params_end_0002:
   902 00000711 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   903 00000714 4889C3                  	mov rbx, rax
   904 00000717 58                      	pop rax
   905 00000718 C60005                  	mov byte [rax], T_closure
   906 0000071B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   907 0000071F 48C74009[2C070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0002
   908 00000727 E9A4000000              	jmp .L_lambda_simple_end_0002
   909                                  .L_lambda_simple_code_0002:	; lambda-simple body
   910 0000072C 48837C241001            	cmp qword [rsp + 8 * 2], 1
   911 00000732 740B                    	je .L_lambda_simple_arity_check_ok_0002
   912 00000734 FF742410                	push qword [rsp + 8 * 2]
   913 00000738 6A01                    	push 1
   914 0000073A E9720F0100              	jmp L_error_incorrect_arity_simple
   915                                  .L_lambda_simple_arity_check_ok_0002:
   916 0000073F C8000000                	enter 0, 0
   917 00000743 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   918 00000747 50                      	push rax
   919 00000748 6A01                    	push 1
   920 0000074A 488B0425[88000000]      	mov rax, qword [free_var_17]
   921                                  	assert_closure(rax)
    42 00000752 803805              <1>  cmp byte [%1], %2
    43 00000755 0F8591270100        <1>  jne L_error_incorrect_type
   922 0000075B FF7001                  	push SOB_CLOSURE_ENV(rax) 
   923 0000075E FF5009                  	call SOB_CLOSURE_CODE(rax)
   924 00000761 50                      	push rax
   925 00000762 6A01                    	push 1
   926 00000764 488B0425[80000000]      	mov rax, qword [free_var_16]
   927                                  .L_applic_TC_0002:
   928 0000076C 803805                  	cmp byte [rax], T_closure
   929 0000076F 0F85381F0100            	jne L_code_ptr_error
   930 00000775 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
   931 00000779 53                      	push rbx
   932 0000077A FF7508                  	push qword [rbp + 8]
   933 0000077D FF7500                  	push qword [rbp]
   934 00000780 488B4D18                	mov rcx, [rbp + 3 * 8]
   935 00000784 488B542418              	mov rdx, [rsp + 3 * 8]
   936 00000789 488D7204                	lea rsi, [rdx + 4]
   937 0000078D 4C8D4EFF                	lea r9, [rsi - 1]
   938 00000791 488D7903                	lea rdi, [rcx + 3]
   939 00000795 4D31C0                  	xor r8, r8
   940                                  .L_tc_recycle_frame_loop_0002:
   941 00000798 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
   942 0000079C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
   943 000007A1 49FFC9                  	dec r9
   944 000007A4 4D31C0                  	xor r8, r8
   945 000007A7 48FFCF                  	dec rdi
   946 000007AA 48FFCE                  	dec rsi
   947 000007AD 4883FE00                	cmp rsi, 0
   948 000007B1 75E5                    	jne .L_tc_recycle_frame_loop_0002
   949                                  .L_tc_recycle_frame_done_0002:
   950                                  ;this pop rbp in sot to the right place
   951 000007B3 4989C9                  	mov r9, rcx
   952 000007B6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
   953 000007BE 4C01CC                  	add rsp, r9
   954 000007C1 5D                      	pop rbp
   955 000007C2 488B4D00                	mov rcx, qword [rbp]
   956 000007C6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
   957 000007CA FFE3                    	jmp rbx
   958 000007CC C9                      	leave
   959 000007CD C21800                  	ret 8 * (2 + 1)
   960                                  .L_lambda_simple_end_0002:	; new closure is in rax
   961 000007D0 48890425[C8010000]      	mov qword [free_var_57], rax
   962 000007D8 48B8-                   	mov rax, sob_void
   962 000007DA [0000000000000000] 
   963                                  
   964 000007E2 4889C7                  	mov rdi, rax
   965 000007E5 E81F0F0100              	call print_sexpr_if_not_void
   966                                  
   967 000007EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   968 000007EF E8040F0100              	call malloc
   969 000007F4 50                      	push rax
   970 000007F5 BF00000000              	mov rdi, 8 * 0	; new rib
   971 000007FA E8F90E0100              	call malloc
   972 000007FF 50                      	push rax
   973 00000800 BF08000000              	mov rdi, 8 * 1	; extended env
   974 00000805 E8EE0E0100              	call malloc
   975 0000080A 488B7D10                	mov rdi, ENV
   976 0000080E BE00000000              	mov rsi, 0
   977 00000813 BA01000000              	mov rdx, 1
   978                                  .L_lambda_simple_env_loop_0003:	; ext_env[i + 1] <-- env[i]
   979 00000818 4883FE00                	cmp rsi, 0
   980 0000081C 7410                    	je .L_lambda_simple_env_end_0003
   981 0000081E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   982 00000822 48890CD0                	mov qword [rax + 8 * rdx], rcx
   983 00000826 48FFC6                  	inc rsi
   984 00000829 48FFC2                  	inc rdx
   985 0000082C EBEA                    	jmp .L_lambda_simple_env_loop_0003
   986                                  .L_lambda_simple_env_end_0003:
   987 0000082E 5B                      	pop rbx
   988 0000082F BE00000000              	mov rsi, 0
   989                                  .L_lambda_simple_params_loop_0003:	; copy params
   990 00000834 4883FE00                	cmp rsi, 0
   991 00000838 740E                    	je .L_lambda_simple_params_end_0003
   992 0000083A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   993 0000083F 488914F3                	mov qword [rbx + 8 * rsi], rdx
   994 00000843 48FFC6                  	inc rsi
   995 00000846 EBEC                    	jmp .L_lambda_simple_params_loop_0003
   996                                  .L_lambda_simple_params_end_0003:
   997 00000848 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   998 0000084B 4889C3                  	mov rbx, rax
   999 0000084E 58                      	pop rax
  1000 0000084F C60005                  	mov byte [rax], T_closure
  1001 00000852 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1002 00000856 48C74009[63080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0003
  1003 0000085E E9A4000000              	jmp .L_lambda_simple_end_0003
  1004                                  .L_lambda_simple_code_0003:	; lambda-simple body
  1005 00000863 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1006 00000869 740B                    	je .L_lambda_simple_arity_check_ok_0003
  1007 0000086B FF742410                	push qword [rsp + 8 * 2]
  1008 0000086F 6A01                    	push 1
  1009 00000871 E93B0E0100              	jmp L_error_incorrect_arity_simple
  1010                                  .L_lambda_simple_arity_check_ok_0003:
  1011 00000876 C8000000                	enter 0, 0
  1012 0000087A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1013 0000087E 50                      	push rax
  1014 0000087F 6A01                    	push 1
  1015 00000881 488B0425[80000000]      	mov rax, qword [free_var_16]
  1016                                  	assert_closure(rax)
    42 00000889 803805              <1>  cmp byte [%1], %2
    43 0000088C 0F855A260100        <1>  jne L_error_incorrect_type
  1017 00000892 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1018 00000895 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1019 00000898 50                      	push rax
  1020 00000899 6A01                    	push 1
  1021 0000089B 488B0425[88000000]      	mov rax, qword [free_var_17]
  1022                                  .L_applic_TC_0003:
  1023 000008A3 803805                  	cmp byte [rax], T_closure
  1024 000008A6 0F85011E0100            	jne L_code_ptr_error
  1025 000008AC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1026 000008B0 53                      	push rbx
  1027 000008B1 FF7508                  	push qword [rbp + 8]
  1028 000008B4 FF7500                  	push qword [rbp]
  1029 000008B7 488B4D18                	mov rcx, [rbp + 3 * 8]
  1030 000008BB 488B542418              	mov rdx, [rsp + 3 * 8]
  1031 000008C0 488D7204                	lea rsi, [rdx + 4]
  1032 000008C4 4C8D4EFF                	lea r9, [rsi - 1]
  1033 000008C8 488D7903                	lea rdi, [rcx + 3]
  1034 000008CC 4D31C0                  	xor r8, r8
  1035                                  .L_tc_recycle_frame_loop_0003:
  1036 000008CF 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1037 000008D3 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1038 000008D8 49FFC9                  	dec r9
  1039 000008DB 4D31C0                  	xor r8, r8
  1040 000008DE 48FFCF                  	dec rdi
  1041 000008E1 48FFCE                  	dec rsi
  1042 000008E4 4883FE00                	cmp rsi, 0
  1043 000008E8 75E5                    	jne .L_tc_recycle_frame_loop_0003
  1044                                  .L_tc_recycle_frame_done_0003:
  1045                                  ;this pop rbp in sot to the right place
  1046 000008EA 4989C9                  	mov r9, rcx
  1047 000008ED 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1048 000008F5 4C01CC                  	add rsp, r9
  1049 000008F8 5D                      	pop rbp
  1050 000008F9 488B4D00                	mov rcx, qword [rbp]
  1051 000008FD 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1052 00000901 FFE3                    	jmp rbx
  1053 00000903 C9                      	leave
  1054 00000904 C21800                  	ret 8 * (2 + 1)
  1055                                  .L_lambda_simple_end_0003:	; new closure is in rax
  1056 00000907 48890425[D0010000]      	mov qword [free_var_58], rax
  1057 0000090F 48B8-                   	mov rax, sob_void
  1057 00000911 [0000000000000000] 
  1058                                  
  1059 00000919 4889C7                  	mov rdi, rax
  1060 0000091C E8E80D0100              	call print_sexpr_if_not_void
  1061                                  
  1062 00000921 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1063 00000926 E8CD0D0100              	call malloc
  1064 0000092B 50                      	push rax
  1065 0000092C BF00000000              	mov rdi, 8 * 0	; new rib
  1066 00000931 E8C20D0100              	call malloc
  1067 00000936 50                      	push rax
  1068 00000937 BF08000000              	mov rdi, 8 * 1	; extended env
  1069 0000093C E8B70D0100              	call malloc
  1070 00000941 488B7D10                	mov rdi, ENV
  1071 00000945 BE00000000              	mov rsi, 0
  1072 0000094A BA01000000              	mov rdx, 1
  1073                                  .L_lambda_simple_env_loop_0004:	; ext_env[i + 1] <-- env[i]
  1074 0000094F 4883FE00                	cmp rsi, 0
  1075 00000953 7410                    	je .L_lambda_simple_env_end_0004
  1076 00000955 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1077 00000959 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1078 0000095D 48FFC6                  	inc rsi
  1079 00000960 48FFC2                  	inc rdx
  1080 00000963 EBEA                    	jmp .L_lambda_simple_env_loop_0004
  1081                                  .L_lambda_simple_env_end_0004:
  1082 00000965 5B                      	pop rbx
  1083 00000966 BE00000000              	mov rsi, 0
  1084                                  .L_lambda_simple_params_loop_0004:	; copy params
  1085 0000096B 4883FE00                	cmp rsi, 0
  1086 0000096F 740E                    	je .L_lambda_simple_params_end_0004
  1087 00000971 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1088 00000976 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1089 0000097A 48FFC6                  	inc rsi
  1090 0000097D EBEC                    	jmp .L_lambda_simple_params_loop_0004
  1091                                  .L_lambda_simple_params_end_0004:
  1092 0000097F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1093 00000982 4889C3                  	mov rbx, rax
  1094 00000985 58                      	pop rax
  1095 00000986 C60005                  	mov byte [rax], T_closure
  1096 00000989 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1097 0000098D 48C74009[9A090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0004
  1098 00000995 E9A4000000              	jmp .L_lambda_simple_end_0004
  1099                                  .L_lambda_simple_code_0004:	; lambda-simple body
  1100 0000099A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1101 000009A0 740B                    	je .L_lambda_simple_arity_check_ok_0004
  1102 000009A2 FF742410                	push qword [rsp + 8 * 2]
  1103 000009A6 6A01                    	push 1
  1104 000009A8 E9040D0100              	jmp L_error_incorrect_arity_simple
  1105                                  .L_lambda_simple_arity_check_ok_0004:
  1106 000009AD C8000000                	enter 0, 0
  1107 000009B1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1108 000009B5 50                      	push rax
  1109 000009B6 6A01                    	push 1
  1110 000009B8 488B0425[88000000]      	mov rax, qword [free_var_17]
  1111                                  	assert_closure(rax)
    42 000009C0 803805              <1>  cmp byte [%1], %2
    43 000009C3 0F8523250100        <1>  jne L_error_incorrect_type
  1112 000009C9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1113 000009CC FF5009                  	call SOB_CLOSURE_CODE(rax)
  1114 000009CF 50                      	push rax
  1115 000009D0 6A01                    	push 1
  1116 000009D2 488B0425[88000000]      	mov rax, qword [free_var_17]
  1117                                  .L_applic_TC_0004:
  1118 000009DA 803805                  	cmp byte [rax], T_closure
  1119 000009DD 0F85CA1C0100            	jne L_code_ptr_error
  1120 000009E3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1121 000009E7 53                      	push rbx
  1122 000009E8 FF7508                  	push qword [rbp + 8]
  1123 000009EB FF7500                  	push qword [rbp]
  1124 000009EE 488B4D18                	mov rcx, [rbp + 3 * 8]
  1125 000009F2 488B542418              	mov rdx, [rsp + 3 * 8]
  1126 000009F7 488D7204                	lea rsi, [rdx + 4]
  1127 000009FB 4C8D4EFF                	lea r9, [rsi - 1]
  1128 000009FF 488D7903                	lea rdi, [rcx + 3]
  1129 00000A03 4D31C0                  	xor r8, r8
  1130                                  .L_tc_recycle_frame_loop_0004:
  1131 00000A06 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1132 00000A0A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1133 00000A0F 49FFC9                  	dec r9
  1134 00000A12 4D31C0                  	xor r8, r8
  1135 00000A15 48FFCF                  	dec rdi
  1136 00000A18 48FFCE                  	dec rsi
  1137 00000A1B 4883FE00                	cmp rsi, 0
  1138 00000A1F 75E5                    	jne .L_tc_recycle_frame_loop_0004
  1139                                  .L_tc_recycle_frame_done_0004:
  1140                                  ;this pop rbp in sot to the right place
  1141 00000A21 4989C9                  	mov r9, rcx
  1142 00000A24 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1143 00000A2C 4C01CC                  	add rsp, r9
  1144 00000A2F 5D                      	pop rbp
  1145 00000A30 488B4D00                	mov rcx, qword [rbp]
  1146 00000A34 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1147 00000A38 FFE3                    	jmp rbx
  1148 00000A3A C9                      	leave
  1149 00000A3B C21800                  	ret 8 * (2 + 1)
  1150                                  .L_lambda_simple_end_0004:	; new closure is in rax
  1151 00000A3E 48890425[D8010000]      	mov qword [free_var_59], rax
  1152 00000A46 48B8-                   	mov rax, sob_void
  1152 00000A48 [0000000000000000] 
  1153                                  
  1154 00000A50 4889C7                  	mov rdi, rax
  1155 00000A53 E8B10C0100              	call print_sexpr_if_not_void
  1156                                  
  1157 00000A58 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1158 00000A5D E8960C0100              	call malloc
  1159 00000A62 50                      	push rax
  1160 00000A63 BF00000000              	mov rdi, 8 * 0	; new rib
  1161 00000A68 E88B0C0100              	call malloc
  1162 00000A6D 50                      	push rax
  1163 00000A6E BF08000000              	mov rdi, 8 * 1	; extended env
  1164 00000A73 E8800C0100              	call malloc
  1165 00000A78 488B7D10                	mov rdi, ENV
  1166 00000A7C BE00000000              	mov rsi, 0
  1167 00000A81 BA01000000              	mov rdx, 1
  1168                                  .L_lambda_simple_env_loop_0005:	; ext_env[i + 1] <-- env[i]
  1169 00000A86 4883FE00                	cmp rsi, 0
  1170 00000A8A 7410                    	je .L_lambda_simple_env_end_0005
  1171 00000A8C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1172 00000A90 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1173 00000A94 48FFC6                  	inc rsi
  1174 00000A97 48FFC2                  	inc rdx
  1175 00000A9A EBEA                    	jmp .L_lambda_simple_env_loop_0005
  1176                                  .L_lambda_simple_env_end_0005:
  1177 00000A9C 5B                      	pop rbx
  1178 00000A9D BE00000000              	mov rsi, 0
  1179                                  .L_lambda_simple_params_loop_0005:	; copy params
  1180 00000AA2 4883FE00                	cmp rsi, 0
  1181 00000AA6 740E                    	je .L_lambda_simple_params_end_0005
  1182 00000AA8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1183 00000AAD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1184 00000AB1 48FFC6                  	inc rsi
  1185 00000AB4 EBEC                    	jmp .L_lambda_simple_params_loop_0005
  1186                                  .L_lambda_simple_params_end_0005:
  1187 00000AB6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1188 00000AB9 4889C3                  	mov rbx, rax
  1189 00000ABC 58                      	pop rax
  1190 00000ABD C60005                  	mov byte [rax], T_closure
  1191 00000AC0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1192 00000AC4 48C74009[D10A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0005
  1193 00000ACC E9A4000000              	jmp .L_lambda_simple_end_0005
  1194                                  .L_lambda_simple_code_0005:	; lambda-simple body
  1195 00000AD1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1196 00000AD7 740B                    	je .L_lambda_simple_arity_check_ok_0005
  1197 00000AD9 FF742410                	push qword [rsp + 8 * 2]
  1198 00000ADD 6A01                    	push 1
  1199 00000ADF E9CD0B0100              	jmp L_error_incorrect_arity_simple
  1200                                  .L_lambda_simple_arity_check_ok_0005:
  1201 00000AE4 C8000000                	enter 0, 0
  1202 00000AE8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1203 00000AEC 50                      	push rax
  1204 00000AED 6A01                    	push 1
  1205 00000AEF 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1206                                  	assert_closure(rax)
    42 00000AF7 803805              <1>  cmp byte [%1], %2
    43 00000AFA 0F85EC230100        <1>  jne L_error_incorrect_type
  1207 00000B00 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1208 00000B03 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1209 00000B06 50                      	push rax
  1210 00000B07 6A01                    	push 1
  1211 00000B09 488B0425[80000000]      	mov rax, qword [free_var_16]
  1212                                  .L_applic_TC_0005:
  1213 00000B11 803805                  	cmp byte [rax], T_closure
  1214 00000B14 0F85931B0100            	jne L_code_ptr_error
  1215 00000B1A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1216 00000B1E 53                      	push rbx
  1217 00000B1F FF7508                  	push qword [rbp + 8]
  1218 00000B22 FF7500                  	push qword [rbp]
  1219 00000B25 488B4D18                	mov rcx, [rbp + 3 * 8]
  1220 00000B29 488B542418              	mov rdx, [rsp + 3 * 8]
  1221 00000B2E 488D7204                	lea rsi, [rdx + 4]
  1222 00000B32 4C8D4EFF                	lea r9, [rsi - 1]
  1223 00000B36 488D7903                	lea rdi, [rcx + 3]
  1224 00000B3A 4D31C0                  	xor r8, r8
  1225                                  .L_tc_recycle_frame_loop_0005:
  1226 00000B3D 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1227 00000B41 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1228 00000B46 49FFC9                  	dec r9
  1229 00000B49 4D31C0                  	xor r8, r8
  1230 00000B4C 48FFCF                  	dec rdi
  1231 00000B4F 48FFCE                  	dec rsi
  1232 00000B52 4883FE00                	cmp rsi, 0
  1233 00000B56 75E5                    	jne .L_tc_recycle_frame_loop_0005
  1234                                  .L_tc_recycle_frame_done_0005:
  1235                                  ;this pop rbp in sot to the right place
  1236 00000B58 4989C9                  	mov r9, rcx
  1237 00000B5B 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1238 00000B63 4C01CC                  	add rsp, r9
  1239 00000B66 5D                      	pop rbp
  1240 00000B67 488B4D00                	mov rcx, qword [rbp]
  1241 00000B6B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1242 00000B6F FFE3                    	jmp rbx
  1243 00000B71 C9                      	leave
  1244 00000B72 C21800                  	ret 8 * (2 + 1)
  1245                                  .L_lambda_simple_end_0005:	; new closure is in rax
  1246 00000B75 48890425[E0010000]      	mov qword [free_var_60], rax
  1247 00000B7D 48B8-                   	mov rax, sob_void
  1247 00000B7F [0000000000000000] 
  1248                                  
  1249 00000B87 4889C7                  	mov rdi, rax
  1250 00000B8A E87A0B0100              	call print_sexpr_if_not_void
  1251                                  
  1252 00000B8F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1253 00000B94 E85F0B0100              	call malloc
  1254 00000B99 50                      	push rax
  1255 00000B9A BF00000000              	mov rdi, 8 * 0	; new rib
  1256 00000B9F E8540B0100              	call malloc
  1257 00000BA4 50                      	push rax
  1258 00000BA5 BF08000000              	mov rdi, 8 * 1	; extended env
  1259 00000BAA E8490B0100              	call malloc
  1260 00000BAF 488B7D10                	mov rdi, ENV
  1261 00000BB3 BE00000000              	mov rsi, 0
  1262 00000BB8 BA01000000              	mov rdx, 1
  1263                                  .L_lambda_simple_env_loop_0006:	; ext_env[i + 1] <-- env[i]
  1264 00000BBD 4883FE00                	cmp rsi, 0
  1265 00000BC1 7410                    	je .L_lambda_simple_env_end_0006
  1266 00000BC3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1267 00000BC7 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1268 00000BCB 48FFC6                  	inc rsi
  1269 00000BCE 48FFC2                  	inc rdx
  1270 00000BD1 EBEA                    	jmp .L_lambda_simple_env_loop_0006
  1271                                  .L_lambda_simple_env_end_0006:
  1272 00000BD3 5B                      	pop rbx
  1273 00000BD4 BE00000000              	mov rsi, 0
  1274                                  .L_lambda_simple_params_loop_0006:	; copy params
  1275 00000BD9 4883FE00                	cmp rsi, 0
  1276 00000BDD 740E                    	je .L_lambda_simple_params_end_0006
  1277 00000BDF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1278 00000BE4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1279 00000BE8 48FFC6                  	inc rsi
  1280 00000BEB EBEC                    	jmp .L_lambda_simple_params_loop_0006
  1281                                  .L_lambda_simple_params_end_0006:
  1282 00000BED 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1283 00000BF0 4889C3                  	mov rbx, rax
  1284 00000BF3 58                      	pop rax
  1285 00000BF4 C60005                  	mov byte [rax], T_closure
  1286 00000BF7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1287 00000BFB 48C74009[080C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0006
  1288 00000C03 E9A4000000              	jmp .L_lambda_simple_end_0006
  1289                                  .L_lambda_simple_code_0006:	; lambda-simple body
  1290 00000C08 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1291 00000C0E 740B                    	je .L_lambda_simple_arity_check_ok_0006
  1292 00000C10 FF742410                	push qword [rsp + 8 * 2]
  1293 00000C14 6A01                    	push 1
  1294 00000C16 E9960A0100              	jmp L_error_incorrect_arity_simple
  1295                                  .L_lambda_simple_arity_check_ok_0006:
  1296 00000C1B C8000000                	enter 0, 0
  1297 00000C1F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1298 00000C23 50                      	push rax
  1299 00000C24 6A01                    	push 1
  1300 00000C26 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1301                                  	assert_closure(rax)
    42 00000C2E 803805              <1>  cmp byte [%1], %2
    43 00000C31 0F85B5220100        <1>  jne L_error_incorrect_type
  1302 00000C37 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1303 00000C3A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1304 00000C3D 50                      	push rax
  1305 00000C3E 6A01                    	push 1
  1306 00000C40 488B0425[80000000]      	mov rax, qword [free_var_16]
  1307                                  .L_applic_TC_0006:
  1308 00000C48 803805                  	cmp byte [rax], T_closure
  1309 00000C4B 0F855C1A0100            	jne L_code_ptr_error
  1310 00000C51 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1311 00000C55 53                      	push rbx
  1312 00000C56 FF7508                  	push qword [rbp + 8]
  1313 00000C59 FF7500                  	push qword [rbp]
  1314 00000C5C 488B4D18                	mov rcx, [rbp + 3 * 8]
  1315 00000C60 488B542418              	mov rdx, [rsp + 3 * 8]
  1316 00000C65 488D7204                	lea rsi, [rdx + 4]
  1317 00000C69 4C8D4EFF                	lea r9, [rsi - 1]
  1318 00000C6D 488D7903                	lea rdi, [rcx + 3]
  1319 00000C71 4D31C0                  	xor r8, r8
  1320                                  .L_tc_recycle_frame_loop_0006:
  1321 00000C74 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1322 00000C78 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1323 00000C7D 49FFC9                  	dec r9
  1324 00000C80 4D31C0                  	xor r8, r8
  1325 00000C83 48FFCF                  	dec rdi
  1326 00000C86 48FFCE                  	dec rsi
  1327 00000C89 4883FE00                	cmp rsi, 0
  1328 00000C8D 75E5                    	jne .L_tc_recycle_frame_loop_0006
  1329                                  .L_tc_recycle_frame_done_0006:
  1330                                  ;this pop rbp in sot to the right place
  1331 00000C8F 4989C9                  	mov r9, rcx
  1332 00000C92 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1333 00000C9A 4C01CC                  	add rsp, r9
  1334 00000C9D 5D                      	pop rbp
  1335 00000C9E 488B4D00                	mov rcx, qword [rbp]
  1336 00000CA2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1337 00000CA6 FFE3                    	jmp rbx
  1338 00000CA8 C9                      	leave
  1339 00000CA9 C21800                  	ret 8 * (2 + 1)
  1340                                  .L_lambda_simple_end_0006:	; new closure is in rax
  1341 00000CAC 48890425[E8010000]      	mov qword [free_var_61], rax
  1342 00000CB4 48B8-                   	mov rax, sob_void
  1342 00000CB6 [0000000000000000] 
  1343                                  
  1344 00000CBE 4889C7                  	mov rdi, rax
  1345 00000CC1 E8430A0100              	call print_sexpr_if_not_void
  1346                                  
  1347 00000CC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1348 00000CCB E8280A0100              	call malloc
  1349 00000CD0 50                      	push rax
  1350 00000CD1 BF00000000              	mov rdi, 8 * 0	; new rib
  1351 00000CD6 E81D0A0100              	call malloc
  1352 00000CDB 50                      	push rax
  1353 00000CDC BF08000000              	mov rdi, 8 * 1	; extended env
  1354 00000CE1 E8120A0100              	call malloc
  1355 00000CE6 488B7D10                	mov rdi, ENV
  1356 00000CEA BE00000000              	mov rsi, 0
  1357 00000CEF BA01000000              	mov rdx, 1
  1358                                  .L_lambda_simple_env_loop_0007:	; ext_env[i + 1] <-- env[i]
  1359 00000CF4 4883FE00                	cmp rsi, 0
  1360 00000CF8 7410                    	je .L_lambda_simple_env_end_0007
  1361 00000CFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1362 00000CFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1363 00000D02 48FFC6                  	inc rsi
  1364 00000D05 48FFC2                  	inc rdx
  1365 00000D08 EBEA                    	jmp .L_lambda_simple_env_loop_0007
  1366                                  .L_lambda_simple_env_end_0007:
  1367 00000D0A 5B                      	pop rbx
  1368 00000D0B BE00000000              	mov rsi, 0
  1369                                  .L_lambda_simple_params_loop_0007:	; copy params
  1370 00000D10 4883FE00                	cmp rsi, 0
  1371 00000D14 740E                    	je .L_lambda_simple_params_end_0007
  1372 00000D16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1373 00000D1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1374 00000D1F 48FFC6                  	inc rsi
  1375 00000D22 EBEC                    	jmp .L_lambda_simple_params_loop_0007
  1376                                  .L_lambda_simple_params_end_0007:
  1377 00000D24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1378 00000D27 4889C3                  	mov rbx, rax
  1379 00000D2A 58                      	pop rax
  1380 00000D2B C60005                  	mov byte [rax], T_closure
  1381 00000D2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1382 00000D32 48C74009[3F0D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0007
  1383 00000D3A E9A4000000              	jmp .L_lambda_simple_end_0007
  1384                                  .L_lambda_simple_code_0007:	; lambda-simple body
  1385 00000D3F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1386 00000D45 740B                    	je .L_lambda_simple_arity_check_ok_0007
  1387 00000D47 FF742410                	push qword [rsp + 8 * 2]
  1388 00000D4B 6A01                    	push 1
  1389 00000D4D E95F090100              	jmp L_error_incorrect_arity_simple
  1390                                  .L_lambda_simple_arity_check_ok_0007:
  1391 00000D52 C8000000                	enter 0, 0
  1392 00000D56 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1393 00000D5A 50                      	push rax
  1394 00000D5B 6A01                    	push 1
  1395 00000D5D 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1396                                  	assert_closure(rax)
    42 00000D65 803805              <1>  cmp byte [%1], %2
    43 00000D68 0F857E210100        <1>  jne L_error_incorrect_type
  1397 00000D6E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1398 00000D71 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1399 00000D74 50                      	push rax
  1400 00000D75 6A01                    	push 1
  1401 00000D77 488B0425[80000000]      	mov rax, qword [free_var_16]
  1402                                  .L_applic_TC_0007:
  1403 00000D7F 803805                  	cmp byte [rax], T_closure
  1404 00000D82 0F8525190100            	jne L_code_ptr_error
  1405 00000D88 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1406 00000D8C 53                      	push rbx
  1407 00000D8D FF7508                  	push qword [rbp + 8]
  1408 00000D90 FF7500                  	push qword [rbp]
  1409 00000D93 488B4D18                	mov rcx, [rbp + 3 * 8]
  1410 00000D97 488B542418              	mov rdx, [rsp + 3 * 8]
  1411 00000D9C 488D7204                	lea rsi, [rdx + 4]
  1412 00000DA0 4C8D4EFF                	lea r9, [rsi - 1]
  1413 00000DA4 488D7903                	lea rdi, [rcx + 3]
  1414 00000DA8 4D31C0                  	xor r8, r8
  1415                                  .L_tc_recycle_frame_loop_0007:
  1416 00000DAB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1417 00000DAF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1418 00000DB4 49FFC9                  	dec r9
  1419 00000DB7 4D31C0                  	xor r8, r8
  1420 00000DBA 48FFCF                  	dec rdi
  1421 00000DBD 48FFCE                  	dec rsi
  1422 00000DC0 4883FE00                	cmp rsi, 0
  1423 00000DC4 75E5                    	jne .L_tc_recycle_frame_loop_0007
  1424                                  .L_tc_recycle_frame_done_0007:
  1425                                  ;this pop rbp in sot to the right place
  1426 00000DC6 4989C9                  	mov r9, rcx
  1427 00000DC9 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1428 00000DD1 4C01CC                  	add rsp, r9
  1429 00000DD4 5D                      	pop rbp
  1430 00000DD5 488B4D00                	mov rcx, qword [rbp]
  1431 00000DD9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1432 00000DDD FFE3                    	jmp rbx
  1433 00000DDF C9                      	leave
  1434 00000DE0 C21800                  	ret 8 * (2 + 1)
  1435                                  .L_lambda_simple_end_0007:	; new closure is in rax
  1436 00000DE3 48890425[F0010000]      	mov qword [free_var_62], rax
  1437 00000DEB 48B8-                   	mov rax, sob_void
  1437 00000DED [0000000000000000] 
  1438                                  
  1439 00000DF5 4889C7                  	mov rdi, rax
  1440 00000DF8 E80C090100              	call print_sexpr_if_not_void
  1441                                  
  1442 00000DFD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1443 00000E02 E8F1080100              	call malloc
  1444 00000E07 50                      	push rax
  1445 00000E08 BF00000000              	mov rdi, 8 * 0	; new rib
  1446 00000E0D E8E6080100              	call malloc
  1447 00000E12 50                      	push rax
  1448 00000E13 BF08000000              	mov rdi, 8 * 1	; extended env
  1449 00000E18 E8DB080100              	call malloc
  1450 00000E1D 488B7D10                	mov rdi, ENV
  1451 00000E21 BE00000000              	mov rsi, 0
  1452 00000E26 BA01000000              	mov rdx, 1
  1453                                  .L_lambda_simple_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  1454 00000E2B 4883FE00                	cmp rsi, 0
  1455 00000E2F 7410                    	je .L_lambda_simple_env_end_0008
  1456 00000E31 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1457 00000E35 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1458 00000E39 48FFC6                  	inc rsi
  1459 00000E3C 48FFC2                  	inc rdx
  1460 00000E3F EBEA                    	jmp .L_lambda_simple_env_loop_0008
  1461                                  .L_lambda_simple_env_end_0008:
  1462 00000E41 5B                      	pop rbx
  1463 00000E42 BE00000000              	mov rsi, 0
  1464                                  .L_lambda_simple_params_loop_0008:	; copy params
  1465 00000E47 4883FE00                	cmp rsi, 0
  1466 00000E4B 740E                    	je .L_lambda_simple_params_end_0008
  1467 00000E4D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1468 00000E52 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1469 00000E56 48FFC6                  	inc rsi
  1470 00000E59 EBEC                    	jmp .L_lambda_simple_params_loop_0008
  1471                                  .L_lambda_simple_params_end_0008:
  1472 00000E5B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1473 00000E5E 4889C3                  	mov rbx, rax
  1474 00000E61 58                      	pop rax
  1475 00000E62 C60005                  	mov byte [rax], T_closure
  1476 00000E65 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1477 00000E69 48C74009[760E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0008
  1478 00000E71 E9A4000000              	jmp .L_lambda_simple_end_0008
  1479                                  .L_lambda_simple_code_0008:	; lambda-simple body
  1480 00000E76 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1481 00000E7C 740B                    	je .L_lambda_simple_arity_check_ok_0008
  1482 00000E7E FF742410                	push qword [rsp + 8 * 2]
  1483 00000E82 6A01                    	push 1
  1484 00000E84 E928080100              	jmp L_error_incorrect_arity_simple
  1485                                  .L_lambda_simple_arity_check_ok_0008:
  1486 00000E89 C8000000                	enter 0, 0
  1487 00000E8D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1488 00000E91 50                      	push rax
  1489 00000E92 6A01                    	push 1
  1490 00000E94 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1491                                  	assert_closure(rax)
    42 00000E9C 803805              <1>  cmp byte [%1], %2
    43 00000E9F 0F8547200100        <1>  jne L_error_incorrect_type
  1492 00000EA5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1493 00000EA8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1494 00000EAB 50                      	push rax
  1495 00000EAC 6A01                    	push 1
  1496 00000EAE 488B0425[80000000]      	mov rax, qword [free_var_16]
  1497                                  .L_applic_TC_0008:
  1498 00000EB6 803805                  	cmp byte [rax], T_closure
  1499 00000EB9 0F85EE170100            	jne L_code_ptr_error
  1500 00000EBF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1501 00000EC3 53                      	push rbx
  1502 00000EC4 FF7508                  	push qword [rbp + 8]
  1503 00000EC7 FF7500                  	push qword [rbp]
  1504 00000ECA 488B4D18                	mov rcx, [rbp + 3 * 8]
  1505 00000ECE 488B542418              	mov rdx, [rsp + 3 * 8]
  1506 00000ED3 488D7204                	lea rsi, [rdx + 4]
  1507 00000ED7 4C8D4EFF                	lea r9, [rsi - 1]
  1508 00000EDB 488D7903                	lea rdi, [rcx + 3]
  1509 00000EDF 4D31C0                  	xor r8, r8
  1510                                  .L_tc_recycle_frame_loop_0008:
  1511 00000EE2 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1512 00000EE6 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1513 00000EEB 49FFC9                  	dec r9
  1514 00000EEE 4D31C0                  	xor r8, r8
  1515 00000EF1 48FFCF                  	dec rdi
  1516 00000EF4 48FFCE                  	dec rsi
  1517 00000EF7 4883FE00                	cmp rsi, 0
  1518 00000EFB 75E5                    	jne .L_tc_recycle_frame_loop_0008
  1519                                  .L_tc_recycle_frame_done_0008:
  1520                                  ;this pop rbp in sot to the right place
  1521 00000EFD 4989C9                  	mov r9, rcx
  1522 00000F00 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1523 00000F08 4C01CC                  	add rsp, r9
  1524 00000F0B 5D                      	pop rbp
  1525 00000F0C 488B4D00                	mov rcx, qword [rbp]
  1526 00000F10 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1527 00000F14 FFE3                    	jmp rbx
  1528 00000F16 C9                      	leave
  1529 00000F17 C21800                  	ret 8 * (2 + 1)
  1530                                  .L_lambda_simple_end_0008:	; new closure is in rax
  1531 00000F1A 48890425[F8010000]      	mov qword [free_var_63], rax
  1532 00000F22 48B8-                   	mov rax, sob_void
  1532 00000F24 [0000000000000000] 
  1533                                  
  1534 00000F2C 4889C7                  	mov rdi, rax
  1535 00000F2F E8D5070100              	call print_sexpr_if_not_void
  1536                                  
  1537 00000F34 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1538 00000F39 E8BA070100              	call malloc
  1539 00000F3E 50                      	push rax
  1540 00000F3F BF00000000              	mov rdi, 8 * 0	; new rib
  1541 00000F44 E8AF070100              	call malloc
  1542 00000F49 50                      	push rax
  1543 00000F4A BF08000000              	mov rdi, 8 * 1	; extended env
  1544 00000F4F E8A4070100              	call malloc
  1545 00000F54 488B7D10                	mov rdi, ENV
  1546 00000F58 BE00000000              	mov rsi, 0
  1547 00000F5D BA01000000              	mov rdx, 1
  1548                                  .L_lambda_simple_env_loop_0009:	; ext_env[i + 1] <-- env[i]
  1549 00000F62 4883FE00                	cmp rsi, 0
  1550 00000F66 7410                    	je .L_lambda_simple_env_end_0009
  1551 00000F68 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1552 00000F6C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1553 00000F70 48FFC6                  	inc rsi
  1554 00000F73 48FFC2                  	inc rdx
  1555 00000F76 EBEA                    	jmp .L_lambda_simple_env_loop_0009
  1556                                  .L_lambda_simple_env_end_0009:
  1557 00000F78 5B                      	pop rbx
  1558 00000F79 BE00000000              	mov rsi, 0
  1559                                  .L_lambda_simple_params_loop_0009:	; copy params
  1560 00000F7E 4883FE00                	cmp rsi, 0
  1561 00000F82 740E                    	je .L_lambda_simple_params_end_0009
  1562 00000F84 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1563 00000F89 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1564 00000F8D 48FFC6                  	inc rsi
  1565 00000F90 EBEC                    	jmp .L_lambda_simple_params_loop_0009
  1566                                  .L_lambda_simple_params_end_0009:
  1567 00000F92 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1568 00000F95 4889C3                  	mov rbx, rax
  1569 00000F98 58                      	pop rax
  1570 00000F99 C60005                  	mov byte [rax], T_closure
  1571 00000F9C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1572 00000FA0 48C74009[AD0F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0009
  1573 00000FA8 E9A4000000              	jmp .L_lambda_simple_end_0009
  1574                                  .L_lambda_simple_code_0009:	; lambda-simple body
  1575 00000FAD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1576 00000FB3 740B                    	je .L_lambda_simple_arity_check_ok_0009
  1577 00000FB5 FF742410                	push qword [rsp + 8 * 2]
  1578 00000FB9 6A01                    	push 1
  1579 00000FBB E9F1060100              	jmp L_error_incorrect_arity_simple
  1580                                  .L_lambda_simple_arity_check_ok_0009:
  1581 00000FC0 C8000000                	enter 0, 0
  1582 00000FC4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1583 00000FC8 50                      	push rax
  1584 00000FC9 6A01                    	push 1
  1585 00000FCB 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1586                                  	assert_closure(rax)
    42 00000FD3 803805              <1>  cmp byte [%1], %2
    43 00000FD6 0F85101F0100        <1>  jne L_error_incorrect_type
  1587 00000FDC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1588 00000FDF FF5009                  	call SOB_CLOSURE_CODE(rax)
  1589 00000FE2 50                      	push rax
  1590 00000FE3 6A01                    	push 1
  1591 00000FE5 488B0425[88000000]      	mov rax, qword [free_var_17]
  1592                                  .L_applic_TC_0009:
  1593 00000FED 803805                  	cmp byte [rax], T_closure
  1594 00000FF0 0F85B7160100            	jne L_code_ptr_error
  1595 00000FF6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1596 00000FFA 53                      	push rbx
  1597 00000FFB FF7508                  	push qword [rbp + 8]
  1598 00000FFE FF7500                  	push qword [rbp]
  1599 00001001 488B4D18                	mov rcx, [rbp + 3 * 8]
  1600 00001005 488B542418              	mov rdx, [rsp + 3 * 8]
  1601 0000100A 488D7204                	lea rsi, [rdx + 4]
  1602 0000100E 4C8D4EFF                	lea r9, [rsi - 1]
  1603 00001012 488D7903                	lea rdi, [rcx + 3]
  1604 00001016 4D31C0                  	xor r8, r8
  1605                                  .L_tc_recycle_frame_loop_0009:
  1606 00001019 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1607 0000101D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1608 00001022 49FFC9                  	dec r9
  1609 00001025 4D31C0                  	xor r8, r8
  1610 00001028 48FFCF                  	dec rdi
  1611 0000102B 48FFCE                  	dec rsi
  1612 0000102E 4883FE00                	cmp rsi, 0
  1613 00001032 75E5                    	jne .L_tc_recycle_frame_loop_0009
  1614                                  .L_tc_recycle_frame_done_0009:
  1615                                  ;this pop rbp in sot to the right place
  1616 00001034 4989C9                  	mov r9, rcx
  1617 00001037 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1618 0000103F 4C01CC                  	add rsp, r9
  1619 00001042 5D                      	pop rbp
  1620 00001043 488B4D00                	mov rcx, qword [rbp]
  1621 00001047 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1622 0000104B FFE3                    	jmp rbx
  1623 0000104D C9                      	leave
  1624 0000104E C21800                  	ret 8 * (2 + 1)
  1625                                  .L_lambda_simple_end_0009:	; new closure is in rax
  1626 00001051 48890425[00020000]      	mov qword [free_var_64], rax
  1627 00001059 48B8-                   	mov rax, sob_void
  1627 0000105B [0000000000000000] 
  1628                                  
  1629 00001063 4889C7                  	mov rdi, rax
  1630 00001066 E89E060100              	call print_sexpr_if_not_void
  1631                                  
  1632 0000106B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1633 00001070 E883060100              	call malloc
  1634 00001075 50                      	push rax
  1635 00001076 BF00000000              	mov rdi, 8 * 0	; new rib
  1636 0000107B E878060100              	call malloc
  1637 00001080 50                      	push rax
  1638 00001081 BF08000000              	mov rdi, 8 * 1	; extended env
  1639 00001086 E86D060100              	call malloc
  1640 0000108B 488B7D10                	mov rdi, ENV
  1641 0000108F BE00000000              	mov rsi, 0
  1642 00001094 BA01000000              	mov rdx, 1
  1643                                  .L_lambda_simple_env_loop_000a:	; ext_env[i + 1] <-- env[i]
  1644 00001099 4883FE00                	cmp rsi, 0
  1645 0000109D 7410                    	je .L_lambda_simple_env_end_000a
  1646 0000109F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1647 000010A3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1648 000010A7 48FFC6                  	inc rsi
  1649 000010AA 48FFC2                  	inc rdx
  1650 000010AD EBEA                    	jmp .L_lambda_simple_env_loop_000a
  1651                                  .L_lambda_simple_env_end_000a:
  1652 000010AF 5B                      	pop rbx
  1653 000010B0 BE00000000              	mov rsi, 0
  1654                                  .L_lambda_simple_params_loop_000a:	; copy params
  1655 000010B5 4883FE00                	cmp rsi, 0
  1656 000010B9 740E                    	je .L_lambda_simple_params_end_000a
  1657 000010BB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1658 000010C0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1659 000010C4 48FFC6                  	inc rsi
  1660 000010C7 EBEC                    	jmp .L_lambda_simple_params_loop_000a
  1661                                  .L_lambda_simple_params_end_000a:
  1662 000010C9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1663 000010CC 4889C3                  	mov rbx, rax
  1664 000010CF 58                      	pop rax
  1665 000010D0 C60005                  	mov byte [rax], T_closure
  1666 000010D3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1667 000010D7 48C74009[E4100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000a
  1668 000010DF E9A4000000              	jmp .L_lambda_simple_end_000a
  1669                                  .L_lambda_simple_code_000a:	; lambda-simple body
  1670 000010E4 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1671 000010EA 740B                    	je .L_lambda_simple_arity_check_ok_000a
  1672 000010EC FF742410                	push qword [rsp + 8 * 2]
  1673 000010F0 6A01                    	push 1
  1674 000010F2 E9BA050100              	jmp L_error_incorrect_arity_simple
  1675                                  .L_lambda_simple_arity_check_ok_000a:
  1676 000010F7 C8000000                	enter 0, 0
  1677 000010FB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1678 000010FF 50                      	push rax
  1679 00001100 6A01                    	push 1
  1680 00001102 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1681                                  	assert_closure(rax)
    42 0000110A 803805              <1>  cmp byte [%1], %2
    43 0000110D 0F85D91D0100        <1>  jne L_error_incorrect_type
  1682 00001113 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1683 00001116 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1684 00001119 50                      	push rax
  1685 0000111A 6A01                    	push 1
  1686 0000111C 488B0425[88000000]      	mov rax, qword [free_var_17]
  1687                                  .L_applic_TC_000a:
  1688 00001124 803805                  	cmp byte [rax], T_closure
  1689 00001127 0F8580150100            	jne L_code_ptr_error
  1690 0000112D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1691 00001131 53                      	push rbx
  1692 00001132 FF7508                  	push qword [rbp + 8]
  1693 00001135 FF7500                  	push qword [rbp]
  1694 00001138 488B4D18                	mov rcx, [rbp + 3 * 8]
  1695 0000113C 488B542418              	mov rdx, [rsp + 3 * 8]
  1696 00001141 488D7204                	lea rsi, [rdx + 4]
  1697 00001145 4C8D4EFF                	lea r9, [rsi - 1]
  1698 00001149 488D7903                	lea rdi, [rcx + 3]
  1699 0000114D 4D31C0                  	xor r8, r8
  1700                                  .L_tc_recycle_frame_loop_000a:
  1701 00001150 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1702 00001154 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1703 00001159 49FFC9                  	dec r9
  1704 0000115C 4D31C0                  	xor r8, r8
  1705 0000115F 48FFCF                  	dec rdi
  1706 00001162 48FFCE                  	dec rsi
  1707 00001165 4883FE00                	cmp rsi, 0
  1708 00001169 75E5                    	jne .L_tc_recycle_frame_loop_000a
  1709                                  .L_tc_recycle_frame_done_000a:
  1710                                  ;this pop rbp in sot to the right place
  1711 0000116B 4989C9                  	mov r9, rcx
  1712 0000116E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1713 00001176 4C01CC                  	add rsp, r9
  1714 00001179 5D                      	pop rbp
  1715 0000117A 488B4D00                	mov rcx, qword [rbp]
  1716 0000117E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1717 00001182 FFE3                    	jmp rbx
  1718 00001184 C9                      	leave
  1719 00001185 C21800                  	ret 8 * (2 + 1)
  1720                                  .L_lambda_simple_end_000a:	; new closure is in rax
  1721 00001188 48890425[08020000]      	mov qword [free_var_65], rax
  1722 00001190 48B8-                   	mov rax, sob_void
  1722 00001192 [0000000000000000] 
  1723                                  
  1724 0000119A 4889C7                  	mov rdi, rax
  1725 0000119D E867050100              	call print_sexpr_if_not_void
  1726                                  
  1727 000011A2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1728 000011A7 E84C050100              	call malloc
  1729 000011AC 50                      	push rax
  1730 000011AD BF00000000              	mov rdi, 8 * 0	; new rib
  1731 000011B2 E841050100              	call malloc
  1732 000011B7 50                      	push rax
  1733 000011B8 BF08000000              	mov rdi, 8 * 1	; extended env
  1734 000011BD E836050100              	call malloc
  1735 000011C2 488B7D10                	mov rdi, ENV
  1736 000011C6 BE00000000              	mov rsi, 0
  1737 000011CB BA01000000              	mov rdx, 1
  1738                                  .L_lambda_simple_env_loop_000b:	; ext_env[i + 1] <-- env[i]
  1739 000011D0 4883FE00                	cmp rsi, 0
  1740 000011D4 7410                    	je .L_lambda_simple_env_end_000b
  1741 000011D6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1742 000011DA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1743 000011DE 48FFC6                  	inc rsi
  1744 000011E1 48FFC2                  	inc rdx
  1745 000011E4 EBEA                    	jmp .L_lambda_simple_env_loop_000b
  1746                                  .L_lambda_simple_env_end_000b:
  1747 000011E6 5B                      	pop rbx
  1748 000011E7 BE00000000              	mov rsi, 0
  1749                                  .L_lambda_simple_params_loop_000b:	; copy params
  1750 000011EC 4883FE00                	cmp rsi, 0
  1751 000011F0 740E                    	je .L_lambda_simple_params_end_000b
  1752 000011F2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1753 000011F7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1754 000011FB 48FFC6                  	inc rsi
  1755 000011FE EBEC                    	jmp .L_lambda_simple_params_loop_000b
  1756                                  .L_lambda_simple_params_end_000b:
  1757 00001200 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1758 00001203 4889C3                  	mov rbx, rax
  1759 00001206 58                      	pop rax
  1760 00001207 C60005                  	mov byte [rax], T_closure
  1761 0000120A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1762 0000120E 48C74009[1B120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000b
  1763 00001216 E9A4000000              	jmp .L_lambda_simple_end_000b
  1764                                  .L_lambda_simple_code_000b:	; lambda-simple body
  1765 0000121B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1766 00001221 740B                    	je .L_lambda_simple_arity_check_ok_000b
  1767 00001223 FF742410                	push qword [rsp + 8 * 2]
  1768 00001227 6A01                    	push 1
  1769 00001229 E983040100              	jmp L_error_incorrect_arity_simple
  1770                                  .L_lambda_simple_arity_check_ok_000b:
  1771 0000122E C8000000                	enter 0, 0
  1772 00001232 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1773 00001236 50                      	push rax
  1774 00001237 6A01                    	push 1
  1775 00001239 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1776                                  	assert_closure(rax)
    42 00001241 803805              <1>  cmp byte [%1], %2
    43 00001244 0F85A21C0100        <1>  jne L_error_incorrect_type
  1777 0000124A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1778 0000124D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1779 00001250 50                      	push rax
  1780 00001251 6A01                    	push 1
  1781 00001253 488B0425[88000000]      	mov rax, qword [free_var_17]
  1782                                  .L_applic_TC_000b:
  1783 0000125B 803805                  	cmp byte [rax], T_closure
  1784 0000125E 0F8549140100            	jne L_code_ptr_error
  1785 00001264 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1786 00001268 53                      	push rbx
  1787 00001269 FF7508                  	push qword [rbp + 8]
  1788 0000126C FF7500                  	push qword [rbp]
  1789 0000126F 488B4D18                	mov rcx, [rbp + 3 * 8]
  1790 00001273 488B542418              	mov rdx, [rsp + 3 * 8]
  1791 00001278 488D7204                	lea rsi, [rdx + 4]
  1792 0000127C 4C8D4EFF                	lea r9, [rsi - 1]
  1793 00001280 488D7903                	lea rdi, [rcx + 3]
  1794 00001284 4D31C0                  	xor r8, r8
  1795                                  .L_tc_recycle_frame_loop_000b:
  1796 00001287 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1797 0000128B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1798 00001290 49FFC9                  	dec r9
  1799 00001293 4D31C0                  	xor r8, r8
  1800 00001296 48FFCF                  	dec rdi
  1801 00001299 48FFCE                  	dec rsi
  1802 0000129C 4883FE00                	cmp rsi, 0
  1803 000012A0 75E5                    	jne .L_tc_recycle_frame_loop_000b
  1804                                  .L_tc_recycle_frame_done_000b:
  1805                                  ;this pop rbp in sot to the right place
  1806 000012A2 4989C9                  	mov r9, rcx
  1807 000012A5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1808 000012AD 4C01CC                  	add rsp, r9
  1809 000012B0 5D                      	pop rbp
  1810 000012B1 488B4D00                	mov rcx, qword [rbp]
  1811 000012B5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1812 000012B9 FFE3                    	jmp rbx
  1813 000012BB C9                      	leave
  1814 000012BC C21800                  	ret 8 * (2 + 1)
  1815                                  .L_lambda_simple_end_000b:	; new closure is in rax
  1816 000012BF 48890425[10020000]      	mov qword [free_var_66], rax
  1817 000012C7 48B8-                   	mov rax, sob_void
  1817 000012C9 [0000000000000000] 
  1818                                  
  1819 000012D1 4889C7                  	mov rdi, rax
  1820 000012D4 E830040100              	call print_sexpr_if_not_void
  1821                                  
  1822 000012D9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1823 000012DE E815040100              	call malloc
  1824 000012E3 50                      	push rax
  1825 000012E4 BF00000000              	mov rdi, 8 * 0	; new rib
  1826 000012E9 E80A040100              	call malloc
  1827 000012EE 50                      	push rax
  1828 000012EF BF08000000              	mov rdi, 8 * 1	; extended env
  1829 000012F4 E8FF030100              	call malloc
  1830 000012F9 488B7D10                	mov rdi, ENV
  1831 000012FD BE00000000              	mov rsi, 0
  1832 00001302 BA01000000              	mov rdx, 1
  1833                                  .L_lambda_simple_env_loop_000c:	; ext_env[i + 1] <-- env[i]
  1834 00001307 4883FE00                	cmp rsi, 0
  1835 0000130B 7410                    	je .L_lambda_simple_env_end_000c
  1836 0000130D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1837 00001311 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1838 00001315 48FFC6                  	inc rsi
  1839 00001318 48FFC2                  	inc rdx
  1840 0000131B EBEA                    	jmp .L_lambda_simple_env_loop_000c
  1841                                  .L_lambda_simple_env_end_000c:
  1842 0000131D 5B                      	pop rbx
  1843 0000131E BE00000000              	mov rsi, 0
  1844                                  .L_lambda_simple_params_loop_000c:	; copy params
  1845 00001323 4883FE00                	cmp rsi, 0
  1846 00001327 740E                    	je .L_lambda_simple_params_end_000c
  1847 00001329 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1848 0000132E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1849 00001332 48FFC6                  	inc rsi
  1850 00001335 EBEC                    	jmp .L_lambda_simple_params_loop_000c
  1851                                  .L_lambda_simple_params_end_000c:
  1852 00001337 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1853 0000133A 4889C3                  	mov rbx, rax
  1854 0000133D 58                      	pop rax
  1855 0000133E C60005                  	mov byte [rax], T_closure
  1856 00001341 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1857 00001345 48C74009[52130000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000c
  1858 0000134D E9A4000000              	jmp .L_lambda_simple_end_000c
  1859                                  .L_lambda_simple_code_000c:	; lambda-simple body
  1860 00001352 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1861 00001358 740B                    	je .L_lambda_simple_arity_check_ok_000c
  1862 0000135A FF742410                	push qword [rsp + 8 * 2]
  1863 0000135E 6A01                    	push 1
  1864 00001360 E94C030100              	jmp L_error_incorrect_arity_simple
  1865                                  .L_lambda_simple_arity_check_ok_000c:
  1866 00001365 C8000000                	enter 0, 0
  1867 00001369 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1868 0000136D 50                      	push rax
  1869 0000136E 6A01                    	push 1
  1870 00001370 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1871                                  	assert_closure(rax)
    42 00001378 803805              <1>  cmp byte [%1], %2
    43 0000137B 0F856B1B0100        <1>  jne L_error_incorrect_type
  1872 00001381 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1873 00001384 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1874 00001387 50                      	push rax
  1875 00001388 6A01                    	push 1
  1876 0000138A 488B0425[88000000]      	mov rax, qword [free_var_17]
  1877                                  .L_applic_TC_000c:
  1878 00001392 803805                  	cmp byte [rax], T_closure
  1879 00001395 0F8512130100            	jne L_code_ptr_error
  1880 0000139B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1881 0000139F 53                      	push rbx
  1882 000013A0 FF7508                  	push qword [rbp + 8]
  1883 000013A3 FF7500                  	push qword [rbp]
  1884 000013A6 488B4D18                	mov rcx, [rbp + 3 * 8]
  1885 000013AA 488B542418              	mov rdx, [rsp + 3 * 8]
  1886 000013AF 488D7204                	lea rsi, [rdx + 4]
  1887 000013B3 4C8D4EFF                	lea r9, [rsi - 1]
  1888 000013B7 488D7903                	lea rdi, [rcx + 3]
  1889 000013BB 4D31C0                  	xor r8, r8
  1890                                  .L_tc_recycle_frame_loop_000c:
  1891 000013BE 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1892 000013C2 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1893 000013C7 49FFC9                  	dec r9
  1894 000013CA 4D31C0                  	xor r8, r8
  1895 000013CD 48FFCF                  	dec rdi
  1896 000013D0 48FFCE                  	dec rsi
  1897 000013D3 4883FE00                	cmp rsi, 0
  1898 000013D7 75E5                    	jne .L_tc_recycle_frame_loop_000c
  1899                                  .L_tc_recycle_frame_done_000c:
  1900                                  ;this pop rbp in sot to the right place
  1901 000013D9 4989C9                  	mov r9, rcx
  1902 000013DC 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1903 000013E4 4C01CC                  	add rsp, r9
  1904 000013E7 5D                      	pop rbp
  1905 000013E8 488B4D00                	mov rcx, qword [rbp]
  1906 000013EC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  1907 000013F0 FFE3                    	jmp rbx
  1908 000013F2 C9                      	leave
  1909 000013F3 C21800                  	ret 8 * (2 + 1)
  1910                                  .L_lambda_simple_end_000c:	; new closure is in rax
  1911 000013F6 48890425[18020000]      	mov qword [free_var_67], rax
  1912 000013FE 48B8-                   	mov rax, sob_void
  1912 00001400 [0000000000000000] 
  1913                                  
  1914 00001408 4889C7                  	mov rdi, rax
  1915 0000140B E8F9020100              	call print_sexpr_if_not_void
  1916                                  
  1917 00001410 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1918 00001415 E8DE020100              	call malloc
  1919 0000141A 50                      	push rax
  1920 0000141B BF00000000              	mov rdi, 8 * 0	; new rib
  1921 00001420 E8D3020100              	call malloc
  1922 00001425 50                      	push rax
  1923 00001426 BF08000000              	mov rdi, 8 * 1	; extended env
  1924 0000142B E8C8020100              	call malloc
  1925 00001430 488B7D10                	mov rdi, ENV
  1926 00001434 BE00000000              	mov rsi, 0
  1927 00001439 BA01000000              	mov rdx, 1
  1928                                  .L_lambda_simple_env_loop_000d:	; ext_env[i + 1] <-- env[i]
  1929 0000143E 4883FE00                	cmp rsi, 0
  1930 00001442 7410                    	je .L_lambda_simple_env_end_000d
  1931 00001444 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1932 00001448 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1933 0000144C 48FFC6                  	inc rsi
  1934 0000144F 48FFC2                  	inc rdx
  1935 00001452 EBEA                    	jmp .L_lambda_simple_env_loop_000d
  1936                                  .L_lambda_simple_env_end_000d:
  1937 00001454 5B                      	pop rbx
  1938 00001455 BE00000000              	mov rsi, 0
  1939                                  .L_lambda_simple_params_loop_000d:	; copy params
  1940 0000145A 4883FE00                	cmp rsi, 0
  1941 0000145E 740E                    	je .L_lambda_simple_params_end_000d
  1942 00001460 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1943 00001465 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1944 00001469 48FFC6                  	inc rsi
  1945 0000146C EBEC                    	jmp .L_lambda_simple_params_loop_000d
  1946                                  .L_lambda_simple_params_end_000d:
  1947 0000146E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1948 00001471 4889C3                  	mov rbx, rax
  1949 00001474 58                      	pop rax
  1950 00001475 C60005                  	mov byte [rax], T_closure
  1951 00001478 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1952 0000147C 48C74009[89140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000d
  1953 00001484 E9A4000000              	jmp .L_lambda_simple_end_000d
  1954                                  .L_lambda_simple_code_000d:	; lambda-simple body
  1955 00001489 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1956 0000148F 740B                    	je .L_lambda_simple_arity_check_ok_000d
  1957 00001491 FF742410                	push qword [rsp + 8 * 2]
  1958 00001495 6A01                    	push 1
  1959 00001497 E915020100              	jmp L_error_incorrect_arity_simple
  1960                                  .L_lambda_simple_arity_check_ok_000d:
  1961 0000149C C8000000                	enter 0, 0
  1962 000014A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1963 000014A4 50                      	push rax
  1964 000014A5 6A01                    	push 1
  1965 000014A7 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1966                                  	assert_closure(rax)
    42 000014AF 803805              <1>  cmp byte [%1], %2
    43 000014B2 0F85341A0100        <1>  jne L_error_incorrect_type
  1967 000014B8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1968 000014BB FF5009                  	call SOB_CLOSURE_CODE(rax)
  1969 000014BE 50                      	push rax
  1970 000014BF 6A01                    	push 1
  1971 000014C1 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1972                                  .L_applic_TC_000d:
  1973 000014C9 803805                  	cmp byte [rax], T_closure
  1974 000014CC 0F85DB110100            	jne L_code_ptr_error
  1975 000014D2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  1976 000014D6 53                      	push rbx
  1977 000014D7 FF7508                  	push qword [rbp + 8]
  1978 000014DA FF7500                  	push qword [rbp]
  1979 000014DD 488B4D18                	mov rcx, [rbp + 3 * 8]
  1980 000014E1 488B542418              	mov rdx, [rsp + 3 * 8]
  1981 000014E6 488D7204                	lea rsi, [rdx + 4]
  1982 000014EA 4C8D4EFF                	lea r9, [rsi - 1]
  1983 000014EE 488D7903                	lea rdi, [rcx + 3]
  1984 000014F2 4D31C0                  	xor r8, r8
  1985                                  .L_tc_recycle_frame_loop_000d:
  1986 000014F5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  1987 000014F9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  1988 000014FE 49FFC9                  	dec r9
  1989 00001501 4D31C0                  	xor r8, r8
  1990 00001504 48FFCF                  	dec rdi
  1991 00001507 48FFCE                  	dec rsi
  1992 0000150A 4883FE00                	cmp rsi, 0
  1993 0000150E 75E5                    	jne .L_tc_recycle_frame_loop_000d
  1994                                  .L_tc_recycle_frame_done_000d:
  1995                                  ;this pop rbp in sot to the right place
  1996 00001510 4989C9                  	mov r9, rcx
  1997 00001513 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  1998 0000151B 4C01CC                  	add rsp, r9
  1999 0000151E 5D                      	pop rbp
  2000 0000151F 488B4D00                	mov rcx, qword [rbp]
  2001 00001523 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2002 00001527 FFE3                    	jmp rbx
  2003 00001529 C9                      	leave
  2004 0000152A C21800                  	ret 8 * (2 + 1)
  2005                                  .L_lambda_simple_end_000d:	; new closure is in rax
  2006 0000152D 48890425[20020000]      	mov qword [free_var_68], rax
  2007 00001535 48B8-                   	mov rax, sob_void
  2007 00001537 [0000000000000000] 
  2008                                  
  2009 0000153F 4889C7                  	mov rdi, rax
  2010 00001542 E8C2010100              	call print_sexpr_if_not_void
  2011                                  
  2012 00001547 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2013 0000154C E8A7010100              	call malloc
  2014 00001551 50                      	push rax
  2015 00001552 BF00000000              	mov rdi, 8 * 0	; new rib
  2016 00001557 E89C010100              	call malloc
  2017 0000155C 50                      	push rax
  2018 0000155D BF08000000              	mov rdi, 8 * 1	; extended env
  2019 00001562 E891010100              	call malloc
  2020 00001567 488B7D10                	mov rdi, ENV
  2021 0000156B BE00000000              	mov rsi, 0
  2022 00001570 BA01000000              	mov rdx, 1
  2023                                  .L_lambda_simple_env_loop_000e:	; ext_env[i + 1] <-- env[i]
  2024 00001575 4883FE00                	cmp rsi, 0
  2025 00001579 7410                    	je .L_lambda_simple_env_end_000e
  2026 0000157B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2027 0000157F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2028 00001583 48FFC6                  	inc rsi
  2029 00001586 48FFC2                  	inc rdx
  2030 00001589 EBEA                    	jmp .L_lambda_simple_env_loop_000e
  2031                                  .L_lambda_simple_env_end_000e:
  2032 0000158B 5B                      	pop rbx
  2033 0000158C BE00000000              	mov rsi, 0
  2034                                  .L_lambda_simple_params_loop_000e:	; copy params
  2035 00001591 4883FE00                	cmp rsi, 0
  2036 00001595 740E                    	je .L_lambda_simple_params_end_000e
  2037 00001597 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2038 0000159C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2039 000015A0 48FFC6                  	inc rsi
  2040 000015A3 EBEC                    	jmp .L_lambda_simple_params_loop_000e
  2041                                  .L_lambda_simple_params_end_000e:
  2042 000015A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2043 000015A8 4889C3                  	mov rbx, rax
  2044 000015AB 58                      	pop rax
  2045 000015AC C60005                  	mov byte [rax], T_closure
  2046 000015AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2047 000015B3 48C74009[C0150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000e
  2048 000015BB E9A4000000              	jmp .L_lambda_simple_end_000e
  2049                                  .L_lambda_simple_code_000e:	; lambda-simple body
  2050 000015C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2051 000015C6 740B                    	je .L_lambda_simple_arity_check_ok_000e
  2052 000015C8 FF742410                	push qword [rsp + 8 * 2]
  2053 000015CC 6A01                    	push 1
  2054 000015CE E9DE000100              	jmp L_error_incorrect_arity_simple
  2055                                  .L_lambda_simple_arity_check_ok_000e:
  2056 000015D3 C8000000                	enter 0, 0
  2057 000015D7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2058 000015DB 50                      	push rax
  2059 000015DC 6A01                    	push 1
  2060 000015DE 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2061                                  	assert_closure(rax)
    42 000015E6 803805              <1>  cmp byte [%1], %2
    43 000015E9 0F85FD180100        <1>  jne L_error_incorrect_type
  2062 000015EF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2063 000015F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2064 000015F5 50                      	push rax
  2065 000015F6 6A01                    	push 1
  2066 000015F8 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2067                                  .L_applic_TC_000e:
  2068 00001600 803805                  	cmp byte [rax], T_closure
  2069 00001603 0F85A4100100            	jne L_code_ptr_error
  2070 00001609 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2071 0000160D 53                      	push rbx
  2072 0000160E FF7508                  	push qword [rbp + 8]
  2073 00001611 FF7500                  	push qword [rbp]
  2074 00001614 488B4D18                	mov rcx, [rbp + 3 * 8]
  2075 00001618 488B542418              	mov rdx, [rsp + 3 * 8]
  2076 0000161D 488D7204                	lea rsi, [rdx + 4]
  2077 00001621 4C8D4EFF                	lea r9, [rsi - 1]
  2078 00001625 488D7903                	lea rdi, [rcx + 3]
  2079 00001629 4D31C0                  	xor r8, r8
  2080                                  .L_tc_recycle_frame_loop_000e:
  2081 0000162C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2082 00001630 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2083 00001635 49FFC9                  	dec r9
  2084 00001638 4D31C0                  	xor r8, r8
  2085 0000163B 48FFCF                  	dec rdi
  2086 0000163E 48FFCE                  	dec rsi
  2087 00001641 4883FE00                	cmp rsi, 0
  2088 00001645 75E5                    	jne .L_tc_recycle_frame_loop_000e
  2089                                  .L_tc_recycle_frame_done_000e:
  2090                                  ;this pop rbp in sot to the right place
  2091 00001647 4989C9                  	mov r9, rcx
  2092 0000164A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2093 00001652 4C01CC                  	add rsp, r9
  2094 00001655 5D                      	pop rbp
  2095 00001656 488B4D00                	mov rcx, qword [rbp]
  2096 0000165A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2097 0000165E FFE3                    	jmp rbx
  2098 00001660 C9                      	leave
  2099 00001661 C21800                  	ret 8 * (2 + 1)
  2100                                  .L_lambda_simple_end_000e:	; new closure is in rax
  2101 00001664 48890425[28020000]      	mov qword [free_var_69], rax
  2102 0000166C 48B8-                   	mov rax, sob_void
  2102 0000166E [0000000000000000] 
  2103                                  
  2104 00001676 4889C7                  	mov rdi, rax
  2105 00001679 E88B000100              	call print_sexpr_if_not_void
  2106                                  
  2107 0000167E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2108 00001683 E870000100              	call malloc
  2109 00001688 50                      	push rax
  2110 00001689 BF00000000              	mov rdi, 8 * 0	; new rib
  2111 0000168E E865000100              	call malloc
  2112 00001693 50                      	push rax
  2113 00001694 BF08000000              	mov rdi, 8 * 1	; extended env
  2114 00001699 E85A000100              	call malloc
  2115 0000169E 488B7D10                	mov rdi, ENV
  2116 000016A2 BE00000000              	mov rsi, 0
  2117 000016A7 BA01000000              	mov rdx, 1
  2118                                  .L_lambda_simple_env_loop_000f:	; ext_env[i + 1] <-- env[i]
  2119 000016AC 4883FE00                	cmp rsi, 0
  2120 000016B0 7410                    	je .L_lambda_simple_env_end_000f
  2121 000016B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2122 000016B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2123 000016BA 48FFC6                  	inc rsi
  2124 000016BD 48FFC2                  	inc rdx
  2125 000016C0 EBEA                    	jmp .L_lambda_simple_env_loop_000f
  2126                                  .L_lambda_simple_env_end_000f:
  2127 000016C2 5B                      	pop rbx
  2128 000016C3 BE00000000              	mov rsi, 0
  2129                                  .L_lambda_simple_params_loop_000f:	; copy params
  2130 000016C8 4883FE00                	cmp rsi, 0
  2131 000016CC 740E                    	je .L_lambda_simple_params_end_000f
  2132 000016CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2133 000016D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2134 000016D7 48FFC6                  	inc rsi
  2135 000016DA EBEC                    	jmp .L_lambda_simple_params_loop_000f
  2136                                  .L_lambda_simple_params_end_000f:
  2137 000016DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2138 000016DF 4889C3                  	mov rbx, rax
  2139 000016E2 58                      	pop rax
  2140 000016E3 C60005                  	mov byte [rax], T_closure
  2141 000016E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2142 000016EA 48C74009[F7160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_000f
  2143 000016F2 E9A4000000              	jmp .L_lambda_simple_end_000f
  2144                                  .L_lambda_simple_code_000f:	; lambda-simple body
  2145 000016F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2146 000016FD 740B                    	je .L_lambda_simple_arity_check_ok_000f
  2147 000016FF FF742410                	push qword [rsp + 8 * 2]
  2148 00001703 6A01                    	push 1
  2149 00001705 E9A7FF0000              	jmp L_error_incorrect_arity_simple
  2150                                  .L_lambda_simple_arity_check_ok_000f:
  2151 0000170A C8000000                	enter 0, 0
  2152 0000170E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2153 00001712 50                      	push rax
  2154 00001713 6A01                    	push 1
  2155 00001715 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2156                                  	assert_closure(rax)
    42 0000171D 803805              <1>  cmp byte [%1], %2
    43 00001720 0F85C6170100        <1>  jne L_error_incorrect_type
  2157 00001726 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2158 00001729 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2159 0000172C 50                      	push rax
  2160 0000172D 6A01                    	push 1
  2161 0000172F 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2162                                  .L_applic_TC_000f:
  2163 00001737 803805                  	cmp byte [rax], T_closure
  2164 0000173A 0F856D0F0100            	jne L_code_ptr_error
  2165 00001740 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2166 00001744 53                      	push rbx
  2167 00001745 FF7508                  	push qword [rbp + 8]
  2168 00001748 FF7500                  	push qword [rbp]
  2169 0000174B 488B4D18                	mov rcx, [rbp + 3 * 8]
  2170 0000174F 488B542418              	mov rdx, [rsp + 3 * 8]
  2171 00001754 488D7204                	lea rsi, [rdx + 4]
  2172 00001758 4C8D4EFF                	lea r9, [rsi - 1]
  2173 0000175C 488D7903                	lea rdi, [rcx + 3]
  2174 00001760 4D31C0                  	xor r8, r8
  2175                                  .L_tc_recycle_frame_loop_000f:
  2176 00001763 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2177 00001767 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2178 0000176C 49FFC9                  	dec r9
  2179 0000176F 4D31C0                  	xor r8, r8
  2180 00001772 48FFCF                  	dec rdi
  2181 00001775 48FFCE                  	dec rsi
  2182 00001778 4883FE00                	cmp rsi, 0
  2183 0000177C 75E5                    	jne .L_tc_recycle_frame_loop_000f
  2184                                  .L_tc_recycle_frame_done_000f:
  2185                                  ;this pop rbp in sot to the right place
  2186 0000177E 4989C9                  	mov r9, rcx
  2187 00001781 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2188 00001789 4C01CC                  	add rsp, r9
  2189 0000178C 5D                      	pop rbp
  2190 0000178D 488B4D00                	mov rcx, qword [rbp]
  2191 00001791 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2192 00001795 FFE3                    	jmp rbx
  2193 00001797 C9                      	leave
  2194 00001798 C21800                  	ret 8 * (2 + 1)
  2195                                  .L_lambda_simple_end_000f:	; new closure is in rax
  2196 0000179B 48890425[30020000]      	mov qword [free_var_70], rax
  2197 000017A3 48B8-                   	mov rax, sob_void
  2197 000017A5 [0000000000000000] 
  2198                                  
  2199 000017AD 4889C7                  	mov rdi, rax
  2200 000017B0 E854FF0000              	call print_sexpr_if_not_void
  2201                                  
  2202 000017B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2203 000017BA E839FF0000              	call malloc
  2204 000017BF 50                      	push rax
  2205 000017C0 BF00000000              	mov rdi, 8 * 0	; new rib
  2206 000017C5 E82EFF0000              	call malloc
  2207 000017CA 50                      	push rax
  2208 000017CB BF08000000              	mov rdi, 8 * 1	; extended env
  2209 000017D0 E823FF0000              	call malloc
  2210 000017D5 488B7D10                	mov rdi, ENV
  2211 000017D9 BE00000000              	mov rsi, 0
  2212 000017DE BA01000000              	mov rdx, 1
  2213                                  .L_lambda_simple_env_loop_0010:	; ext_env[i + 1] <-- env[i]
  2214 000017E3 4883FE00                	cmp rsi, 0
  2215 000017E7 7410                    	je .L_lambda_simple_env_end_0010
  2216 000017E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2217 000017ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2218 000017F1 48FFC6                  	inc rsi
  2219 000017F4 48FFC2                  	inc rdx
  2220 000017F7 EBEA                    	jmp .L_lambda_simple_env_loop_0010
  2221                                  .L_lambda_simple_env_end_0010:
  2222 000017F9 5B                      	pop rbx
  2223 000017FA BE00000000              	mov rsi, 0
  2224                                  .L_lambda_simple_params_loop_0010:	; copy params
  2225 000017FF 4883FE00                	cmp rsi, 0
  2226 00001803 740E                    	je .L_lambda_simple_params_end_0010
  2227 00001805 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2228 0000180A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2229 0000180E 48FFC6                  	inc rsi
  2230 00001811 EBEC                    	jmp .L_lambda_simple_params_loop_0010
  2231                                  .L_lambda_simple_params_end_0010:
  2232 00001813 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2233 00001816 4889C3                  	mov rbx, rax
  2234 00001819 58                      	pop rax
  2235 0000181A C60005                  	mov byte [rax], T_closure
  2236 0000181D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2237 00001821 48C74009[2E180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0010
  2238 00001829 E9A4000000              	jmp .L_lambda_simple_end_0010
  2239                                  .L_lambda_simple_code_0010:	; lambda-simple body
  2240 0000182E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2241 00001834 740B                    	je .L_lambda_simple_arity_check_ok_0010
  2242 00001836 FF742410                	push qword [rsp + 8 * 2]
  2243 0000183A 6A01                    	push 1
  2244 0000183C E970FE0000              	jmp L_error_incorrect_arity_simple
  2245                                  .L_lambda_simple_arity_check_ok_0010:
  2246 00001841 C8000000                	enter 0, 0
  2247 00001845 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2248 00001849 50                      	push rax
  2249 0000184A 6A01                    	push 1
  2250 0000184C 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2251                                  	assert_closure(rax)
    42 00001854 803805              <1>  cmp byte [%1], %2
    43 00001857 0F858F160100        <1>  jne L_error_incorrect_type
  2252 0000185D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2253 00001860 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2254 00001863 50                      	push rax
  2255 00001864 6A01                    	push 1
  2256 00001866 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2257                                  .L_applic_TC_0010:
  2258 0000186E 803805                  	cmp byte [rax], T_closure
  2259 00001871 0F85360E0100            	jne L_code_ptr_error
  2260 00001877 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2261 0000187B 53                      	push rbx
  2262 0000187C FF7508                  	push qword [rbp + 8]
  2263 0000187F FF7500                  	push qword [rbp]
  2264 00001882 488B4D18                	mov rcx, [rbp + 3 * 8]
  2265 00001886 488B542418              	mov rdx, [rsp + 3 * 8]
  2266 0000188B 488D7204                	lea rsi, [rdx + 4]
  2267 0000188F 4C8D4EFF                	lea r9, [rsi - 1]
  2268 00001893 488D7903                	lea rdi, [rcx + 3]
  2269 00001897 4D31C0                  	xor r8, r8
  2270                                  .L_tc_recycle_frame_loop_0010:
  2271 0000189A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2272 0000189E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2273 000018A3 49FFC9                  	dec r9
  2274 000018A6 4D31C0                  	xor r8, r8
  2275 000018A9 48FFCF                  	dec rdi
  2276 000018AC 48FFCE                  	dec rsi
  2277 000018AF 4883FE00                	cmp rsi, 0
  2278 000018B3 75E5                    	jne .L_tc_recycle_frame_loop_0010
  2279                                  .L_tc_recycle_frame_done_0010:
  2280                                  ;this pop rbp in sot to the right place
  2281 000018B5 4989C9                  	mov r9, rcx
  2282 000018B8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2283 000018C0 4C01CC                  	add rsp, r9
  2284 000018C3 5D                      	pop rbp
  2285 000018C4 488B4D00                	mov rcx, qword [rbp]
  2286 000018C8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2287 000018CC FFE3                    	jmp rbx
  2288 000018CE C9                      	leave
  2289 000018CF C21800                  	ret 8 * (2 + 1)
  2290                                  .L_lambda_simple_end_0010:	; new closure is in rax
  2291 000018D2 48890425[38020000]      	mov qword [free_var_71], rax
  2292 000018DA 48B8-                   	mov rax, sob_void
  2292 000018DC [0000000000000000] 
  2293                                  
  2294 000018E4 4889C7                  	mov rdi, rax
  2295 000018E7 E81DFE0000              	call print_sexpr_if_not_void
  2296                                  
  2297 000018EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2298 000018F1 E802FE0000              	call malloc
  2299 000018F6 50                      	push rax
  2300 000018F7 BF00000000              	mov rdi, 8 * 0	; new rib
  2301 000018FC E8F7FD0000              	call malloc
  2302 00001901 50                      	push rax
  2303 00001902 BF08000000              	mov rdi, 8 * 1	; extended env
  2304 00001907 E8ECFD0000              	call malloc
  2305 0000190C 488B7D10                	mov rdi, ENV
  2306 00001910 BE00000000              	mov rsi, 0
  2307 00001915 BA01000000              	mov rdx, 1
  2308                                  .L_lambda_simple_env_loop_0011:	; ext_env[i + 1] <-- env[i]
  2309 0000191A 4883FE00                	cmp rsi, 0
  2310 0000191E 7410                    	je .L_lambda_simple_env_end_0011
  2311 00001920 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2312 00001924 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2313 00001928 48FFC6                  	inc rsi
  2314 0000192B 48FFC2                  	inc rdx
  2315 0000192E EBEA                    	jmp .L_lambda_simple_env_loop_0011
  2316                                  .L_lambda_simple_env_end_0011:
  2317 00001930 5B                      	pop rbx
  2318 00001931 BE00000000              	mov rsi, 0
  2319                                  .L_lambda_simple_params_loop_0011:	; copy params
  2320 00001936 4883FE00                	cmp rsi, 0
  2321 0000193A 740E                    	je .L_lambda_simple_params_end_0011
  2322 0000193C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2323 00001941 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2324 00001945 48FFC6                  	inc rsi
  2325 00001948 EBEC                    	jmp .L_lambda_simple_params_loop_0011
  2326                                  .L_lambda_simple_params_end_0011:
  2327 0000194A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2328 0000194D 4889C3                  	mov rbx, rax
  2329 00001950 58                      	pop rax
  2330 00001951 C60005                  	mov byte [rax], T_closure
  2331 00001954 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2332 00001958 48C74009[65190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0011
  2333 00001960 E9A4000000              	jmp .L_lambda_simple_end_0011
  2334                                  .L_lambda_simple_code_0011:	; lambda-simple body
  2335 00001965 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2336 0000196B 740B                    	je .L_lambda_simple_arity_check_ok_0011
  2337 0000196D FF742410                	push qword [rsp + 8 * 2]
  2338 00001971 6A01                    	push 1
  2339 00001973 E939FD0000              	jmp L_error_incorrect_arity_simple
  2340                                  .L_lambda_simple_arity_check_ok_0011:
  2341 00001978 C8000000                	enter 0, 0
  2342 0000197C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2343 00001980 50                      	push rax
  2344 00001981 6A01                    	push 1
  2345 00001983 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2346                                  	assert_closure(rax)
    42 0000198B 803805              <1>  cmp byte [%1], %2
    43 0000198E 0F8558150100        <1>  jne L_error_incorrect_type
  2347 00001994 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2348 00001997 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2349 0000199A 50                      	push rax
  2350 0000199B 6A01                    	push 1
  2351 0000199D 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2352                                  .L_applic_TC_0011:
  2353 000019A5 803805                  	cmp byte [rax], T_closure
  2354 000019A8 0F85FF0C0100            	jne L_code_ptr_error
  2355 000019AE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2356 000019B2 53                      	push rbx
  2357 000019B3 FF7508                  	push qword [rbp + 8]
  2358 000019B6 FF7500                  	push qword [rbp]
  2359 000019B9 488B4D18                	mov rcx, [rbp + 3 * 8]
  2360 000019BD 488B542418              	mov rdx, [rsp + 3 * 8]
  2361 000019C2 488D7204                	lea rsi, [rdx + 4]
  2362 000019C6 4C8D4EFF                	lea r9, [rsi - 1]
  2363 000019CA 488D7903                	lea rdi, [rcx + 3]
  2364 000019CE 4D31C0                  	xor r8, r8
  2365                                  .L_tc_recycle_frame_loop_0011:
  2366 000019D1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2367 000019D5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2368 000019DA 49FFC9                  	dec r9
  2369 000019DD 4D31C0                  	xor r8, r8
  2370 000019E0 48FFCF                  	dec rdi
  2371 000019E3 48FFCE                  	dec rsi
  2372 000019E6 4883FE00                	cmp rsi, 0
  2373 000019EA 75E5                    	jne .L_tc_recycle_frame_loop_0011
  2374                                  .L_tc_recycle_frame_done_0011:
  2375                                  ;this pop rbp in sot to the right place
  2376 000019EC 4989C9                  	mov r9, rcx
  2377 000019EF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2378 000019F7 4C01CC                  	add rsp, r9
  2379 000019FA 5D                      	pop rbp
  2380 000019FB 488B4D00                	mov rcx, qword [rbp]
  2381 000019FF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2382 00001A03 FFE3                    	jmp rbx
  2383 00001A05 C9                      	leave
  2384 00001A06 C21800                  	ret 8 * (2 + 1)
  2385                                  .L_lambda_simple_end_0011:	; new closure is in rax
  2386 00001A09 48890425[40020000]      	mov qword [free_var_72], rax
  2387 00001A11 48B8-                   	mov rax, sob_void
  2387 00001A13 [0000000000000000] 
  2388                                  
  2389 00001A1B 4889C7                  	mov rdi, rax
  2390 00001A1E E8E6FC0000              	call print_sexpr_if_not_void
  2391                                  
  2392 00001A23 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2393 00001A28 E8CBFC0000              	call malloc
  2394 00001A2D 50                      	push rax
  2395 00001A2E BF00000000              	mov rdi, 8 * 0	; new rib
  2396 00001A33 E8C0FC0000              	call malloc
  2397 00001A38 50                      	push rax
  2398 00001A39 BF08000000              	mov rdi, 8 * 1	; extended env
  2399 00001A3E E8B5FC0000              	call malloc
  2400 00001A43 488B7D10                	mov rdi, ENV
  2401 00001A47 BE00000000              	mov rsi, 0
  2402 00001A4C BA01000000              	mov rdx, 1
  2403                                  .L_lambda_simple_env_loop_0012:	; ext_env[i + 1] <-- env[i]
  2404 00001A51 4883FE00                	cmp rsi, 0
  2405 00001A55 7410                    	je .L_lambda_simple_env_end_0012
  2406 00001A57 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2407 00001A5B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2408 00001A5F 48FFC6                  	inc rsi
  2409 00001A62 48FFC2                  	inc rdx
  2410 00001A65 EBEA                    	jmp .L_lambda_simple_env_loop_0012
  2411                                  .L_lambda_simple_env_end_0012:
  2412 00001A67 5B                      	pop rbx
  2413 00001A68 BE00000000              	mov rsi, 0
  2414                                  .L_lambda_simple_params_loop_0012:	; copy params
  2415 00001A6D 4883FE00                	cmp rsi, 0
  2416 00001A71 740E                    	je .L_lambda_simple_params_end_0012
  2417 00001A73 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2418 00001A78 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2419 00001A7C 48FFC6                  	inc rsi
  2420 00001A7F EBEC                    	jmp .L_lambda_simple_params_loop_0012
  2421                                  .L_lambda_simple_params_end_0012:
  2422 00001A81 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2423 00001A84 4889C3                  	mov rbx, rax
  2424 00001A87 58                      	pop rax
  2425 00001A88 C60005                  	mov byte [rax], T_closure
  2426 00001A8B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2427 00001A8F 48C74009[9C1A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0012
  2428 00001A97 E9A4000000              	jmp .L_lambda_simple_end_0012
  2429                                  .L_lambda_simple_code_0012:	; lambda-simple body
  2430 00001A9C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2431 00001AA2 740B                    	je .L_lambda_simple_arity_check_ok_0012
  2432 00001AA4 FF742410                	push qword [rsp + 8 * 2]
  2433 00001AA8 6A01                    	push 1
  2434 00001AAA E902FC0000              	jmp L_error_incorrect_arity_simple
  2435                                  .L_lambda_simple_arity_check_ok_0012:
  2436 00001AAF C8000000                	enter 0, 0
  2437 00001AB3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2438 00001AB7 50                      	push rax
  2439 00001AB8 6A01                    	push 1
  2440 00001ABA 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2441                                  	assert_closure(rax)
    42 00001AC2 803805              <1>  cmp byte [%1], %2
    43 00001AC5 0F8521140100        <1>  jne L_error_incorrect_type
  2442 00001ACB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2443 00001ACE FF5009                  	call SOB_CLOSURE_CODE(rax)
  2444 00001AD1 50                      	push rax
  2445 00001AD2 6A01                    	push 1
  2446 00001AD4 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2447                                  .L_applic_TC_0012:
  2448 00001ADC 803805                  	cmp byte [rax], T_closure
  2449 00001ADF 0F85C80B0100            	jne L_code_ptr_error
  2450 00001AE5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2451 00001AE9 53                      	push rbx
  2452 00001AEA FF7508                  	push qword [rbp + 8]
  2453 00001AED FF7500                  	push qword [rbp]
  2454 00001AF0 488B4D18                	mov rcx, [rbp + 3 * 8]
  2455 00001AF4 488B542418              	mov rdx, [rsp + 3 * 8]
  2456 00001AF9 488D7204                	lea rsi, [rdx + 4]
  2457 00001AFD 4C8D4EFF                	lea r9, [rsi - 1]
  2458 00001B01 488D7903                	lea rdi, [rcx + 3]
  2459 00001B05 4D31C0                  	xor r8, r8
  2460                                  .L_tc_recycle_frame_loop_0012:
  2461 00001B08 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2462 00001B0C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2463 00001B11 49FFC9                  	dec r9
  2464 00001B14 4D31C0                  	xor r8, r8
  2465 00001B17 48FFCF                  	dec rdi
  2466 00001B1A 48FFCE                  	dec rsi
  2467 00001B1D 4883FE00                	cmp rsi, 0
  2468 00001B21 75E5                    	jne .L_tc_recycle_frame_loop_0012
  2469                                  .L_tc_recycle_frame_done_0012:
  2470                                  ;this pop rbp in sot to the right place
  2471 00001B23 4989C9                  	mov r9, rcx
  2472 00001B26 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2473 00001B2E 4C01CC                  	add rsp, r9
  2474 00001B31 5D                      	pop rbp
  2475 00001B32 488B4D00                	mov rcx, qword [rbp]
  2476 00001B36 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2477 00001B3A FFE3                    	jmp rbx
  2478 00001B3C C9                      	leave
  2479 00001B3D C21800                  	ret 8 * (2 + 1)
  2480                                  .L_lambda_simple_end_0012:	; new closure is in rax
  2481 00001B40 48890425[48020000]      	mov qword [free_var_73], rax
  2482 00001B48 48B8-                   	mov rax, sob_void
  2482 00001B4A [0000000000000000] 
  2483                                  
  2484 00001B52 4889C7                  	mov rdi, rax
  2485 00001B55 E8AFFB0000              	call print_sexpr_if_not_void
  2486                                  
  2487 00001B5A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2488 00001B5F E894FB0000              	call malloc
  2489 00001B64 50                      	push rax
  2490 00001B65 BF00000000              	mov rdi, 8 * 0	; new rib
  2491 00001B6A E889FB0000              	call malloc
  2492 00001B6F 50                      	push rax
  2493 00001B70 BF08000000              	mov rdi, 8 * 1	; extended env
  2494 00001B75 E87EFB0000              	call malloc
  2495 00001B7A 488B7D10                	mov rdi, ENV
  2496 00001B7E BE00000000              	mov rsi, 0
  2497 00001B83 BA01000000              	mov rdx, 1
  2498                                  .L_lambda_simple_env_loop_0013:	; ext_env[i + 1] <-- env[i]
  2499 00001B88 4883FE00                	cmp rsi, 0
  2500 00001B8C 7410                    	je .L_lambda_simple_env_end_0013
  2501 00001B8E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2502 00001B92 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2503 00001B96 48FFC6                  	inc rsi
  2504 00001B99 48FFC2                  	inc rdx
  2505 00001B9C EBEA                    	jmp .L_lambda_simple_env_loop_0013
  2506                                  .L_lambda_simple_env_end_0013:
  2507 00001B9E 5B                      	pop rbx
  2508 00001B9F BE00000000              	mov rsi, 0
  2509                                  .L_lambda_simple_params_loop_0013:	; copy params
  2510 00001BA4 4883FE00                	cmp rsi, 0
  2511 00001BA8 740E                    	je .L_lambda_simple_params_end_0013
  2512 00001BAA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2513 00001BAF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2514 00001BB3 48FFC6                  	inc rsi
  2515 00001BB6 EBEC                    	jmp .L_lambda_simple_params_loop_0013
  2516                                  .L_lambda_simple_params_end_0013:
  2517 00001BB8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2518 00001BBB 4889C3                  	mov rbx, rax
  2519 00001BBE 58                      	pop rax
  2520 00001BBF C60005                  	mov byte [rax], T_closure
  2521 00001BC2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2522 00001BC6 48C74009[D31B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0013
  2523 00001BCE E9A4000000              	jmp .L_lambda_simple_end_0013
  2524                                  .L_lambda_simple_code_0013:	; lambda-simple body
  2525 00001BD3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2526 00001BD9 740B                    	je .L_lambda_simple_arity_check_ok_0013
  2527 00001BDB FF742410                	push qword [rsp + 8 * 2]
  2528 00001BDF 6A01                    	push 1
  2529 00001BE1 E9CBFA0000              	jmp L_error_incorrect_arity_simple
  2530                                  .L_lambda_simple_arity_check_ok_0013:
  2531 00001BE6 C8000000                	enter 0, 0
  2532 00001BEA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2533 00001BEE 50                      	push rax
  2534 00001BEF 6A01                    	push 1
  2535 00001BF1 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2536                                  	assert_closure(rax)
    42 00001BF9 803805              <1>  cmp byte [%1], %2
    43 00001BFC 0F85EA120100        <1>  jne L_error_incorrect_type
  2537 00001C02 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2538 00001C05 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2539 00001C08 50                      	push rax
  2540 00001C09 6A01                    	push 1
  2541 00001C0B 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2542                                  .L_applic_TC_0013:
  2543 00001C13 803805                  	cmp byte [rax], T_closure
  2544 00001C16 0F85910A0100            	jne L_code_ptr_error
  2545 00001C1C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2546 00001C20 53                      	push rbx
  2547 00001C21 FF7508                  	push qword [rbp + 8]
  2548 00001C24 FF7500                  	push qword [rbp]
  2549 00001C27 488B4D18                	mov rcx, [rbp + 3 * 8]
  2550 00001C2B 488B542418              	mov rdx, [rsp + 3 * 8]
  2551 00001C30 488D7204                	lea rsi, [rdx + 4]
  2552 00001C34 4C8D4EFF                	lea r9, [rsi - 1]
  2553 00001C38 488D7903                	lea rdi, [rcx + 3]
  2554 00001C3C 4D31C0                  	xor r8, r8
  2555                                  .L_tc_recycle_frame_loop_0013:
  2556 00001C3F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2557 00001C43 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2558 00001C48 49FFC9                  	dec r9
  2559 00001C4B 4D31C0                  	xor r8, r8
  2560 00001C4E 48FFCF                  	dec rdi
  2561 00001C51 48FFCE                  	dec rsi
  2562 00001C54 4883FE00                	cmp rsi, 0
  2563 00001C58 75E5                    	jne .L_tc_recycle_frame_loop_0013
  2564                                  .L_tc_recycle_frame_done_0013:
  2565                                  ;this pop rbp in sot to the right place
  2566 00001C5A 4989C9                  	mov r9, rcx
  2567 00001C5D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2568 00001C65 4C01CC                  	add rsp, r9
  2569 00001C68 5D                      	pop rbp
  2570 00001C69 488B4D00                	mov rcx, qword [rbp]
  2571 00001C6D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2572 00001C71 FFE3                    	jmp rbx
  2573 00001C73 C9                      	leave
  2574 00001C74 C21800                  	ret 8 * (2 + 1)
  2575                                  .L_lambda_simple_end_0013:	; new closure is in rax
  2576 00001C77 48890425[50020000]      	mov qword [free_var_74], rax
  2577 00001C7F 48B8-                   	mov rax, sob_void
  2577 00001C81 [0000000000000000] 
  2578                                  
  2579 00001C89 4889C7                  	mov rdi, rax
  2580 00001C8C E878FA0000              	call print_sexpr_if_not_void
  2581                                  
  2582 00001C91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2583 00001C96 E85DFA0000              	call malloc
  2584 00001C9B 50                      	push rax
  2585 00001C9C BF00000000              	mov rdi, 8 * 0	; new rib
  2586 00001CA1 E852FA0000              	call malloc
  2587 00001CA6 50                      	push rax
  2588 00001CA7 BF08000000              	mov rdi, 8 * 1	; extended env
  2589 00001CAC E847FA0000              	call malloc
  2590 00001CB1 488B7D10                	mov rdi, ENV
  2591 00001CB5 BE00000000              	mov rsi, 0
  2592 00001CBA BA01000000              	mov rdx, 1
  2593                                  .L_lambda_simple_env_loop_0014:	; ext_env[i + 1] <-- env[i]
  2594 00001CBF 4883FE00                	cmp rsi, 0
  2595 00001CC3 7410                    	je .L_lambda_simple_env_end_0014
  2596 00001CC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2597 00001CC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2598 00001CCD 48FFC6                  	inc rsi
  2599 00001CD0 48FFC2                  	inc rdx
  2600 00001CD3 EBEA                    	jmp .L_lambda_simple_env_loop_0014
  2601                                  .L_lambda_simple_env_end_0014:
  2602 00001CD5 5B                      	pop rbx
  2603 00001CD6 BE00000000              	mov rsi, 0
  2604                                  .L_lambda_simple_params_loop_0014:	; copy params
  2605 00001CDB 4883FE00                	cmp rsi, 0
  2606 00001CDF 740E                    	je .L_lambda_simple_params_end_0014
  2607 00001CE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2608 00001CE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2609 00001CEA 48FFC6                  	inc rsi
  2610 00001CED EBEC                    	jmp .L_lambda_simple_params_loop_0014
  2611                                  .L_lambda_simple_params_end_0014:
  2612 00001CEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2613 00001CF2 4889C3                  	mov rbx, rax
  2614 00001CF5 58                      	pop rax
  2615 00001CF6 C60005                  	mov byte [rax], T_closure
  2616 00001CF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2617 00001CFD 48C74009[0A1D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0014
  2618 00001D05 E9A4000000              	jmp .L_lambda_simple_end_0014
  2619                                  .L_lambda_simple_code_0014:	; lambda-simple body
  2620 00001D0A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2621 00001D10 740B                    	je .L_lambda_simple_arity_check_ok_0014
  2622 00001D12 FF742410                	push qword [rsp + 8 * 2]
  2623 00001D16 6A01                    	push 1
  2624 00001D18 E994F90000              	jmp L_error_incorrect_arity_simple
  2625                                  .L_lambda_simple_arity_check_ok_0014:
  2626 00001D1D C8000000                	enter 0, 0
  2627 00001D21 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2628 00001D25 50                      	push rax
  2629 00001D26 6A01                    	push 1
  2630 00001D28 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2631                                  	assert_closure(rax)
    42 00001D30 803805              <1>  cmp byte [%1], %2
    43 00001D33 0F85B3110100        <1>  jne L_error_incorrect_type
  2632 00001D39 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2633 00001D3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2634 00001D3F 50                      	push rax
  2635 00001D40 6A01                    	push 1
  2636 00001D42 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2637                                  .L_applic_TC_0014:
  2638 00001D4A 803805                  	cmp byte [rax], T_closure
  2639 00001D4D 0F855A090100            	jne L_code_ptr_error
  2640 00001D53 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2641 00001D57 53                      	push rbx
  2642 00001D58 FF7508                  	push qword [rbp + 8]
  2643 00001D5B FF7500                  	push qword [rbp]
  2644 00001D5E 488B4D18                	mov rcx, [rbp + 3 * 8]
  2645 00001D62 488B542418              	mov rdx, [rsp + 3 * 8]
  2646 00001D67 488D7204                	lea rsi, [rdx + 4]
  2647 00001D6B 4C8D4EFF                	lea r9, [rsi - 1]
  2648 00001D6F 488D7903                	lea rdi, [rcx + 3]
  2649 00001D73 4D31C0                  	xor r8, r8
  2650                                  .L_tc_recycle_frame_loop_0014:
  2651 00001D76 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2652 00001D7A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2653 00001D7F 49FFC9                  	dec r9
  2654 00001D82 4D31C0                  	xor r8, r8
  2655 00001D85 48FFCF                  	dec rdi
  2656 00001D88 48FFCE                  	dec rsi
  2657 00001D8B 4883FE00                	cmp rsi, 0
  2658 00001D8F 75E5                    	jne .L_tc_recycle_frame_loop_0014
  2659                                  .L_tc_recycle_frame_done_0014:
  2660                                  ;this pop rbp in sot to the right place
  2661 00001D91 4989C9                  	mov r9, rcx
  2662 00001D94 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2663 00001D9C 4C01CC                  	add rsp, r9
  2664 00001D9F 5D                      	pop rbp
  2665 00001DA0 488B4D00                	mov rcx, qword [rbp]
  2666 00001DA4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2667 00001DA8 FFE3                    	jmp rbx
  2668 00001DAA C9                      	leave
  2669 00001DAB C21800                  	ret 8 * (2 + 1)
  2670                                  .L_lambda_simple_end_0014:	; new closure is in rax
  2671 00001DAE 48890425[58020000]      	mov qword [free_var_75], rax
  2672 00001DB6 48B8-                   	mov rax, sob_void
  2672 00001DB8 [0000000000000000] 
  2673                                  
  2674 00001DC0 4889C7                  	mov rdi, rax
  2675 00001DC3 E841F90000              	call print_sexpr_if_not_void
  2676                                  
  2677 00001DC8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2678 00001DCD E826F90000              	call malloc
  2679 00001DD2 50                      	push rax
  2680 00001DD3 BF00000000              	mov rdi, 8 * 0	; new rib
  2681 00001DD8 E81BF90000              	call malloc
  2682 00001DDD 50                      	push rax
  2683 00001DDE BF08000000              	mov rdi, 8 * 1	; extended env
  2684 00001DE3 E810F90000              	call malloc
  2685 00001DE8 488B7D10                	mov rdi, ENV
  2686 00001DEC BE00000000              	mov rsi, 0
  2687 00001DF1 BA01000000              	mov rdx, 1
  2688                                  .L_lambda_simple_env_loop_0015:	; ext_env[i + 1] <-- env[i]
  2689 00001DF6 4883FE00                	cmp rsi, 0
  2690 00001DFA 7410                    	je .L_lambda_simple_env_end_0015
  2691 00001DFC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2692 00001E00 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2693 00001E04 48FFC6                  	inc rsi
  2694 00001E07 48FFC2                  	inc rdx
  2695 00001E0A EBEA                    	jmp .L_lambda_simple_env_loop_0015
  2696                                  .L_lambda_simple_env_end_0015:
  2697 00001E0C 5B                      	pop rbx
  2698 00001E0D BE00000000              	mov rsi, 0
  2699                                  .L_lambda_simple_params_loop_0015:	; copy params
  2700 00001E12 4883FE00                	cmp rsi, 0
  2701 00001E16 740E                    	je .L_lambda_simple_params_end_0015
  2702 00001E18 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2703 00001E1D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2704 00001E21 48FFC6                  	inc rsi
  2705 00001E24 EBEC                    	jmp .L_lambda_simple_params_loop_0015
  2706                                  .L_lambda_simple_params_end_0015:
  2707 00001E26 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2708 00001E29 4889C3                  	mov rbx, rax
  2709 00001E2C 58                      	pop rax
  2710 00001E2D C60005                  	mov byte [rax], T_closure
  2711 00001E30 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2712 00001E34 48C74009[411E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0015
  2713 00001E3C E9A4000000              	jmp .L_lambda_simple_end_0015
  2714                                  .L_lambda_simple_code_0015:	; lambda-simple body
  2715 00001E41 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2716 00001E47 740B                    	je .L_lambda_simple_arity_check_ok_0015
  2717 00001E49 FF742410                	push qword [rsp + 8 * 2]
  2718 00001E4D 6A01                    	push 1
  2719 00001E4F E95DF80000              	jmp L_error_incorrect_arity_simple
  2720                                  .L_lambda_simple_arity_check_ok_0015:
  2721 00001E54 C8000000                	enter 0, 0
  2722 00001E58 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2723 00001E5C 50                      	push rax
  2724 00001E5D 6A01                    	push 1
  2725 00001E5F 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2726                                  	assert_closure(rax)
    42 00001E67 803805              <1>  cmp byte [%1], %2
    43 00001E6A 0F857C100100        <1>  jne L_error_incorrect_type
  2727 00001E70 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2728 00001E73 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2729 00001E76 50                      	push rax
  2730 00001E77 6A01                    	push 1
  2731 00001E79 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2732                                  .L_applic_TC_0015:
  2733 00001E81 803805                  	cmp byte [rax], T_closure
  2734 00001E84 0F8523080100            	jne L_code_ptr_error
  2735 00001E8A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2736 00001E8E 53                      	push rbx
  2737 00001E8F FF7508                  	push qword [rbp + 8]
  2738 00001E92 FF7500                  	push qword [rbp]
  2739 00001E95 488B4D18                	mov rcx, [rbp + 3 * 8]
  2740 00001E99 488B542418              	mov rdx, [rsp + 3 * 8]
  2741 00001E9E 488D7204                	lea rsi, [rdx + 4]
  2742 00001EA2 4C8D4EFF                	lea r9, [rsi - 1]
  2743 00001EA6 488D7903                	lea rdi, [rcx + 3]
  2744 00001EAA 4D31C0                  	xor r8, r8
  2745                                  .L_tc_recycle_frame_loop_0015:
  2746 00001EAD 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2747 00001EB1 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2748 00001EB6 49FFC9                  	dec r9
  2749 00001EB9 4D31C0                  	xor r8, r8
  2750 00001EBC 48FFCF                  	dec rdi
  2751 00001EBF 48FFCE                  	dec rsi
  2752 00001EC2 4883FE00                	cmp rsi, 0
  2753 00001EC6 75E5                    	jne .L_tc_recycle_frame_loop_0015
  2754                                  .L_tc_recycle_frame_done_0015:
  2755                                  ;this pop rbp in sot to the right place
  2756 00001EC8 4989C9                  	mov r9, rcx
  2757 00001ECB 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2758 00001ED3 4C01CC                  	add rsp, r9
  2759 00001ED6 5D                      	pop rbp
  2760 00001ED7 488B4D00                	mov rcx, qword [rbp]
  2761 00001EDB 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2762 00001EDF FFE3                    	jmp rbx
  2763 00001EE1 C9                      	leave
  2764 00001EE2 C21800                  	ret 8 * (2 + 1)
  2765                                  .L_lambda_simple_end_0015:	; new closure is in rax
  2766 00001EE5 48890425[60020000]      	mov qword [free_var_76], rax
  2767 00001EED 48B8-                   	mov rax, sob_void
  2767 00001EEF [0000000000000000] 
  2768                                  
  2769 00001EF7 4889C7                  	mov rdi, rax
  2770 00001EFA E80AF80000              	call print_sexpr_if_not_void
  2771                                  
  2772 00001EFF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2773 00001F04 E8EFF70000              	call malloc
  2774 00001F09 50                      	push rax
  2775 00001F0A BF00000000              	mov rdi, 8 * 0	; new rib
  2776 00001F0F E8E4F70000              	call malloc
  2777 00001F14 50                      	push rax
  2778 00001F15 BF08000000              	mov rdi, 8 * 1	; extended env
  2779 00001F1A E8D9F70000              	call malloc
  2780 00001F1F 488B7D10                	mov rdi, ENV
  2781 00001F23 BE00000000              	mov rsi, 0
  2782 00001F28 BA01000000              	mov rdx, 1
  2783                                  .L_lambda_simple_env_loop_0016:	; ext_env[i + 1] <-- env[i]
  2784 00001F2D 4883FE00                	cmp rsi, 0
  2785 00001F31 7410                    	je .L_lambda_simple_env_end_0016
  2786 00001F33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2787 00001F37 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2788 00001F3B 48FFC6                  	inc rsi
  2789 00001F3E 48FFC2                  	inc rdx
  2790 00001F41 EBEA                    	jmp .L_lambda_simple_env_loop_0016
  2791                                  .L_lambda_simple_env_end_0016:
  2792 00001F43 5B                      	pop rbx
  2793 00001F44 BE00000000              	mov rsi, 0
  2794                                  .L_lambda_simple_params_loop_0016:	; copy params
  2795 00001F49 4883FE00                	cmp rsi, 0
  2796 00001F4D 740E                    	je .L_lambda_simple_params_end_0016
  2797 00001F4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2798 00001F54 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2799 00001F58 48FFC6                  	inc rsi
  2800 00001F5B EBEC                    	jmp .L_lambda_simple_params_loop_0016
  2801                                  .L_lambda_simple_params_end_0016:
  2802 00001F5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2803 00001F60 4889C3                  	mov rbx, rax
  2804 00001F63 58                      	pop rax
  2805 00001F64 C60005                  	mov byte [rax], T_closure
  2806 00001F67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2807 00001F6B 48C74009[781F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0016
  2808 00001F73 E9A4000000              	jmp .L_lambda_simple_end_0016
  2809                                  .L_lambda_simple_code_0016:	; lambda-simple body
  2810 00001F78 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2811 00001F7E 740B                    	je .L_lambda_simple_arity_check_ok_0016
  2812 00001F80 FF742410                	push qword [rsp + 8 * 2]
  2813 00001F84 6A01                    	push 1
  2814 00001F86 E926F70000              	jmp L_error_incorrect_arity_simple
  2815                                  .L_lambda_simple_arity_check_ok_0016:
  2816 00001F8B C8000000                	enter 0, 0
  2817 00001F8F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2818 00001F93 50                      	push rax
  2819 00001F94 6A01                    	push 1
  2820 00001F96 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2821                                  	assert_closure(rax)
    42 00001F9E 803805              <1>  cmp byte [%1], %2
    43 00001FA1 0F85450F0100        <1>  jne L_error_incorrect_type
  2822 00001FA7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2823 00001FAA FF5009                  	call SOB_CLOSURE_CODE(rax)
  2824 00001FAD 50                      	push rax
  2825 00001FAE 6A01                    	push 1
  2826 00001FB0 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2827                                  .L_applic_TC_0016:
  2828 00001FB8 803805                  	cmp byte [rax], T_closure
  2829 00001FBB 0F85EC060100            	jne L_code_ptr_error
  2830 00001FC1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2831 00001FC5 53                      	push rbx
  2832 00001FC6 FF7508                  	push qword [rbp + 8]
  2833 00001FC9 FF7500                  	push qword [rbp]
  2834 00001FCC 488B4D18                	mov rcx, [rbp + 3 * 8]
  2835 00001FD0 488B542418              	mov rdx, [rsp + 3 * 8]
  2836 00001FD5 488D7204                	lea rsi, [rdx + 4]
  2837 00001FD9 4C8D4EFF                	lea r9, [rsi - 1]
  2838 00001FDD 488D7903                	lea rdi, [rcx + 3]
  2839 00001FE1 4D31C0                  	xor r8, r8
  2840                                  .L_tc_recycle_frame_loop_0016:
  2841 00001FE4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2842 00001FE8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2843 00001FED 49FFC9                  	dec r9
  2844 00001FF0 4D31C0                  	xor r8, r8
  2845 00001FF3 48FFCF                  	dec rdi
  2846 00001FF6 48FFCE                  	dec rsi
  2847 00001FF9 4883FE00                	cmp rsi, 0
  2848 00001FFD 75E5                    	jne .L_tc_recycle_frame_loop_0016
  2849                                  .L_tc_recycle_frame_done_0016:
  2850                                  ;this pop rbp in sot to the right place
  2851 00001FFF 4989C9                  	mov r9, rcx
  2852 00002002 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2853 0000200A 4C01CC                  	add rsp, r9
  2854 0000200D 5D                      	pop rbp
  2855 0000200E 488B4D00                	mov rcx, qword [rbp]
  2856 00002012 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2857 00002016 FFE3                    	jmp rbx
  2858 00002018 C9                      	leave
  2859 00002019 C21800                  	ret 8 * (2 + 1)
  2860                                  .L_lambda_simple_end_0016:	; new closure is in rax
  2861 0000201C 48890425[68020000]      	mov qword [free_var_77], rax
  2862 00002024 48B8-                   	mov rax, sob_void
  2862 00002026 [0000000000000000] 
  2863                                  
  2864 0000202E 4889C7                  	mov rdi, rax
  2865 00002031 E8D3F60000              	call print_sexpr_if_not_void
  2866                                  
  2867 00002036 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2868 0000203B E8B8F60000              	call malloc
  2869 00002040 50                      	push rax
  2870 00002041 BF00000000              	mov rdi, 8 * 0	; new rib
  2871 00002046 E8ADF60000              	call malloc
  2872 0000204B 50                      	push rax
  2873 0000204C BF08000000              	mov rdi, 8 * 1	; extended env
  2874 00002051 E8A2F60000              	call malloc
  2875 00002056 488B7D10                	mov rdi, ENV
  2876 0000205A BE00000000              	mov rsi, 0
  2877 0000205F BA01000000              	mov rdx, 1
  2878                                  .L_lambda_simple_env_loop_0017:	; ext_env[i + 1] <-- env[i]
  2879 00002064 4883FE00                	cmp rsi, 0
  2880 00002068 7410                    	je .L_lambda_simple_env_end_0017
  2881 0000206A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2882 0000206E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2883 00002072 48FFC6                  	inc rsi
  2884 00002075 48FFC2                  	inc rdx
  2885 00002078 EBEA                    	jmp .L_lambda_simple_env_loop_0017
  2886                                  .L_lambda_simple_env_end_0017:
  2887 0000207A 5B                      	pop rbx
  2888 0000207B BE00000000              	mov rsi, 0
  2889                                  .L_lambda_simple_params_loop_0017:	; copy params
  2890 00002080 4883FE00                	cmp rsi, 0
  2891 00002084 740E                    	je .L_lambda_simple_params_end_0017
  2892 00002086 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2893 0000208B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2894 0000208F 48FFC6                  	inc rsi
  2895 00002092 EBEC                    	jmp .L_lambda_simple_params_loop_0017
  2896                                  .L_lambda_simple_params_end_0017:
  2897 00002094 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2898 00002097 4889C3                  	mov rbx, rax
  2899 0000209A 58                      	pop rax
  2900 0000209B C60005                  	mov byte [rax], T_closure
  2901 0000209E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2902 000020A2 48C74009[AF200000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0017
  2903 000020AA E9A4000000              	jmp .L_lambda_simple_end_0017
  2904                                  .L_lambda_simple_code_0017:	; lambda-simple body
  2905 000020AF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2906 000020B5 740B                    	je .L_lambda_simple_arity_check_ok_0017
  2907 000020B7 FF742410                	push qword [rsp + 8 * 2]
  2908 000020BB 6A01                    	push 1
  2909 000020BD E9EFF50000              	jmp L_error_incorrect_arity_simple
  2910                                  .L_lambda_simple_arity_check_ok_0017:
  2911 000020C2 C8000000                	enter 0, 0
  2912 000020C6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  2913 000020CA 50                      	push rax
  2914 000020CB 6A01                    	push 1
  2915 000020CD 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2916                                  	assert_closure(rax)
    42 000020D5 803805              <1>  cmp byte [%1], %2
    43 000020D8 0F850E0E0100        <1>  jne L_error_incorrect_type
  2917 000020DE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  2918 000020E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2919 000020E4 50                      	push rax
  2920 000020E5 6A01                    	push 1
  2921 000020E7 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2922                                  .L_applic_TC_0017:
  2923 000020EF 803805                  	cmp byte [rax], T_closure
  2924 000020F2 0F85B5050100            	jne L_code_ptr_error
  2925 000020F8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  2926 000020FC 53                      	push rbx
  2927 000020FD FF7508                  	push qword [rbp + 8]
  2928 00002100 FF7500                  	push qword [rbp]
  2929 00002103 488B4D18                	mov rcx, [rbp + 3 * 8]
  2930 00002107 488B542418              	mov rdx, [rsp + 3 * 8]
  2931 0000210C 488D7204                	lea rsi, [rdx + 4]
  2932 00002110 4C8D4EFF                	lea r9, [rsi - 1]
  2933 00002114 488D7903                	lea rdi, [rcx + 3]
  2934 00002118 4D31C0                  	xor r8, r8
  2935                                  .L_tc_recycle_frame_loop_0017:
  2936 0000211B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  2937 0000211F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  2938 00002124 49FFC9                  	dec r9
  2939 00002127 4D31C0                  	xor r8, r8
  2940 0000212A 48FFCF                  	dec rdi
  2941 0000212D 48FFCE                  	dec rsi
  2942 00002130 4883FE00                	cmp rsi, 0
  2943 00002134 75E5                    	jne .L_tc_recycle_frame_loop_0017
  2944                                  .L_tc_recycle_frame_done_0017:
  2945                                  ;this pop rbp in sot to the right place
  2946 00002136 4989C9                  	mov r9, rcx
  2947 00002139 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  2948 00002141 4C01CC                  	add rsp, r9
  2949 00002144 5D                      	pop rbp
  2950 00002145 488B4D00                	mov rcx, qword [rbp]
  2951 00002149 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  2952 0000214D FFE3                    	jmp rbx
  2953 0000214F C9                      	leave
  2954 00002150 C21800                  	ret 8 * (2 + 1)
  2955                                  .L_lambda_simple_end_0017:	; new closure is in rax
  2956 00002153 48890425[70020000]      	mov qword [free_var_78], rax
  2957 0000215B 48B8-                   	mov rax, sob_void
  2957 0000215D [0000000000000000] 
  2958                                  
  2959 00002165 4889C7                  	mov rdi, rax
  2960 00002168 E89CF50000              	call print_sexpr_if_not_void
  2961                                  
  2962 0000216D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2963 00002172 E881F50000              	call malloc
  2964 00002177 50                      	push rax
  2965 00002178 BF00000000              	mov rdi, 8 * 0	; new rib
  2966 0000217D E876F50000              	call malloc
  2967 00002182 50                      	push rax
  2968 00002183 BF08000000              	mov rdi, 8 * 1	; extended env
  2969 00002188 E86BF50000              	call malloc
  2970 0000218D 488B7D10                	mov rdi, ENV
  2971 00002191 BE00000000              	mov rsi, 0
  2972 00002196 BA01000000              	mov rdx, 1
  2973                                  .L_lambda_simple_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  2974 0000219B 4883FE00                	cmp rsi, 0
  2975 0000219F 7410                    	je .L_lambda_simple_env_end_0018
  2976 000021A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2977 000021A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2978 000021A9 48FFC6                  	inc rsi
  2979 000021AC 48FFC2                  	inc rdx
  2980 000021AF EBEA                    	jmp .L_lambda_simple_env_loop_0018
  2981                                  .L_lambda_simple_env_end_0018:
  2982 000021B1 5B                      	pop rbx
  2983 000021B2 BE00000000              	mov rsi, 0
  2984                                  .L_lambda_simple_params_loop_0018:	; copy params
  2985 000021B7 4883FE00                	cmp rsi, 0
  2986 000021BB 740E                    	je .L_lambda_simple_params_end_0018
  2987 000021BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2988 000021C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2989 000021C6 48FFC6                  	inc rsi
  2990 000021C9 EBEC                    	jmp .L_lambda_simple_params_loop_0018
  2991                                  .L_lambda_simple_params_end_0018:
  2992 000021CB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2993 000021CE 4889C3                  	mov rbx, rax
  2994 000021D1 58                      	pop rax
  2995 000021D2 C60005                  	mov byte [rax], T_closure
  2996 000021D5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2997 000021D9 48C74009[E6210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0018
  2998 000021E1 E9A4000000              	jmp .L_lambda_simple_end_0018
  2999                                  .L_lambda_simple_code_0018:	; lambda-simple body
  3000 000021E6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3001 000021EC 740B                    	je .L_lambda_simple_arity_check_ok_0018
  3002 000021EE FF742410                	push qword [rsp + 8 * 2]
  3003 000021F2 6A01                    	push 1
  3004 000021F4 E9B8F40000              	jmp L_error_incorrect_arity_simple
  3005                                  .L_lambda_simple_arity_check_ok_0018:
  3006 000021F9 C8000000                	enter 0, 0
  3007 000021FD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3008 00002201 50                      	push rax
  3009 00002202 6A01                    	push 1
  3010 00002204 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3011                                  	assert_closure(rax)
    42 0000220C 803805              <1>  cmp byte [%1], %2
    43 0000220F 0F85D70C0100        <1>  jne L_error_incorrect_type
  3012 00002215 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3013 00002218 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3014 0000221B 50                      	push rax
  3015 0000221C 6A01                    	push 1
  3016 0000221E 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3017                                  .L_applic_TC_0018:
  3018 00002226 803805                  	cmp byte [rax], T_closure
  3019 00002229 0F857E040100            	jne L_code_ptr_error
  3020 0000222F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3021 00002233 53                      	push rbx
  3022 00002234 FF7508                  	push qword [rbp + 8]
  3023 00002237 FF7500                  	push qword [rbp]
  3024 0000223A 488B4D18                	mov rcx, [rbp + 3 * 8]
  3025 0000223E 488B542418              	mov rdx, [rsp + 3 * 8]
  3026 00002243 488D7204                	lea rsi, [rdx + 4]
  3027 00002247 4C8D4EFF                	lea r9, [rsi - 1]
  3028 0000224B 488D7903                	lea rdi, [rcx + 3]
  3029 0000224F 4D31C0                  	xor r8, r8
  3030                                  .L_tc_recycle_frame_loop_0018:
  3031 00002252 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3032 00002256 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3033 0000225B 49FFC9                  	dec r9
  3034 0000225E 4D31C0                  	xor r8, r8
  3035 00002261 48FFCF                  	dec rdi
  3036 00002264 48FFCE                  	dec rsi
  3037 00002267 4883FE00                	cmp rsi, 0
  3038 0000226B 75E5                    	jne .L_tc_recycle_frame_loop_0018
  3039                                  .L_tc_recycle_frame_done_0018:
  3040                                  ;this pop rbp in sot to the right place
  3041 0000226D 4989C9                  	mov r9, rcx
  3042 00002270 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3043 00002278 4C01CC                  	add rsp, r9
  3044 0000227B 5D                      	pop rbp
  3045 0000227C 488B4D00                	mov rcx, qword [rbp]
  3046 00002280 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3047 00002284 FFE3                    	jmp rbx
  3048 00002286 C9                      	leave
  3049 00002287 C21800                  	ret 8 * (2 + 1)
  3050                                  .L_lambda_simple_end_0018:	; new closure is in rax
  3051 0000228A 48890425[78020000]      	mov qword [free_var_79], rax
  3052 00002292 48B8-                   	mov rax, sob_void
  3052 00002294 [0000000000000000] 
  3053                                  
  3054 0000229C 4889C7                  	mov rdi, rax
  3055 0000229F E865F40000              	call print_sexpr_if_not_void
  3056                                  
  3057 000022A4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3058 000022A9 E84AF40000              	call malloc
  3059 000022AE 50                      	push rax
  3060 000022AF BF00000000              	mov rdi, 8 * 0	; new rib
  3061 000022B4 E83FF40000              	call malloc
  3062 000022B9 50                      	push rax
  3063 000022BA BF08000000              	mov rdi, 8 * 1	; extended env
  3064 000022BF E834F40000              	call malloc
  3065 000022C4 488B7D10                	mov rdi, ENV
  3066 000022C8 BE00000000              	mov rsi, 0
  3067 000022CD BA01000000              	mov rdx, 1
  3068                                  .L_lambda_simple_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  3069 000022D2 4883FE00                	cmp rsi, 0
  3070 000022D6 7410                    	je .L_lambda_simple_env_end_0019
  3071 000022D8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3072 000022DC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3073 000022E0 48FFC6                  	inc rsi
  3074 000022E3 48FFC2                  	inc rdx
  3075 000022E6 EBEA                    	jmp .L_lambda_simple_env_loop_0019
  3076                                  .L_lambda_simple_env_end_0019:
  3077 000022E8 5B                      	pop rbx
  3078 000022E9 BE00000000              	mov rsi, 0
  3079                                  .L_lambda_simple_params_loop_0019:	; copy params
  3080 000022EE 4883FE00                	cmp rsi, 0
  3081 000022F2 740E                    	je .L_lambda_simple_params_end_0019
  3082 000022F4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3083 000022F9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3084 000022FD 48FFC6                  	inc rsi
  3085 00002300 EBEC                    	jmp .L_lambda_simple_params_loop_0019
  3086                                  .L_lambda_simple_params_end_0019:
  3087 00002302 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3088 00002305 4889C3                  	mov rbx, rax
  3089 00002308 58                      	pop rax
  3090 00002309 C60005                  	mov byte [rax], T_closure
  3091 0000230C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3092 00002310 48C74009[1D230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0019
  3093 00002318 E9A4000000              	jmp .L_lambda_simple_end_0019
  3094                                  .L_lambda_simple_code_0019:	; lambda-simple body
  3095 0000231D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3096 00002323 740B                    	je .L_lambda_simple_arity_check_ok_0019
  3097 00002325 FF742410                	push qword [rsp + 8 * 2]
  3098 00002329 6A01                    	push 1
  3099 0000232B E981F30000              	jmp L_error_incorrect_arity_simple
  3100                                  .L_lambda_simple_arity_check_ok_0019:
  3101 00002330 C8000000                	enter 0, 0
  3102 00002334 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3103 00002338 50                      	push rax
  3104 00002339 6A01                    	push 1
  3105 0000233B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  3106                                  	assert_closure(rax)
    42 00002343 803805              <1>  cmp byte [%1], %2
    43 00002346 0F85A00B0100        <1>  jne L_error_incorrect_type
  3107 0000234C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3108 0000234F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3109 00002352 50                      	push rax
  3110 00002353 6A01                    	push 1
  3111 00002355 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3112                                  .L_applic_TC_0019:
  3113 0000235D 803805                  	cmp byte [rax], T_closure
  3114 00002360 0F8547030100            	jne L_code_ptr_error
  3115 00002366 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3116 0000236A 53                      	push rbx
  3117 0000236B FF7508                  	push qword [rbp + 8]
  3118 0000236E FF7500                  	push qword [rbp]
  3119 00002371 488B4D18                	mov rcx, [rbp + 3 * 8]
  3120 00002375 488B542418              	mov rdx, [rsp + 3 * 8]
  3121 0000237A 488D7204                	lea rsi, [rdx + 4]
  3122 0000237E 4C8D4EFF                	lea r9, [rsi - 1]
  3123 00002382 488D7903                	lea rdi, [rcx + 3]
  3124 00002386 4D31C0                  	xor r8, r8
  3125                                  .L_tc_recycle_frame_loop_0019:
  3126 00002389 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3127 0000238D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3128 00002392 49FFC9                  	dec r9
  3129 00002395 4D31C0                  	xor r8, r8
  3130 00002398 48FFCF                  	dec rdi
  3131 0000239B 48FFCE                  	dec rsi
  3132 0000239E 4883FE00                	cmp rsi, 0
  3133 000023A2 75E5                    	jne .L_tc_recycle_frame_loop_0019
  3134                                  .L_tc_recycle_frame_done_0019:
  3135                                  ;this pop rbp in sot to the right place
  3136 000023A4 4989C9                  	mov r9, rcx
  3137 000023A7 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3138 000023AF 4C01CC                  	add rsp, r9
  3139 000023B2 5D                      	pop rbp
  3140 000023B3 488B4D00                	mov rcx, qword [rbp]
  3141 000023B7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3142 000023BB FFE3                    	jmp rbx
  3143 000023BD C9                      	leave
  3144 000023BE C21800                  	ret 8 * (2 + 1)
  3145                                  .L_lambda_simple_end_0019:	; new closure is in rax
  3146 000023C1 48890425[80020000]      	mov qword [free_var_80], rax
  3147 000023C9 48B8-                   	mov rax, sob_void
  3147 000023CB [0000000000000000] 
  3148                                  
  3149 000023D3 4889C7                  	mov rdi, rax
  3150 000023D6 E82EF30000              	call print_sexpr_if_not_void
  3151                                  
  3152 000023DB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3153 000023E0 E813F30000              	call malloc
  3154 000023E5 50                      	push rax
  3155 000023E6 BF00000000              	mov rdi, 8 * 0	; new rib
  3156 000023EB E808F30000              	call malloc
  3157 000023F0 50                      	push rax
  3158 000023F1 BF08000000              	mov rdi, 8 * 1	; extended env
  3159 000023F6 E8FDF20000              	call malloc
  3160 000023FB 488B7D10                	mov rdi, ENV
  3161 000023FF BE00000000              	mov rsi, 0
  3162 00002404 BA01000000              	mov rdx, 1
  3163                                  .L_lambda_simple_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  3164 00002409 4883FE00                	cmp rsi, 0
  3165 0000240D 7410                    	je .L_lambda_simple_env_end_001a
  3166 0000240F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3167 00002413 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3168 00002417 48FFC6                  	inc rsi
  3169 0000241A 48FFC2                  	inc rdx
  3170 0000241D EBEA                    	jmp .L_lambda_simple_env_loop_001a
  3171                                  .L_lambda_simple_env_end_001a:
  3172 0000241F 5B                      	pop rbx
  3173 00002420 BE00000000              	mov rsi, 0
  3174                                  .L_lambda_simple_params_loop_001a:	; copy params
  3175 00002425 4883FE00                	cmp rsi, 0
  3176 00002429 740E                    	je .L_lambda_simple_params_end_001a
  3177 0000242B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3178 00002430 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3179 00002434 48FFC6                  	inc rsi
  3180 00002437 EBEC                    	jmp .L_lambda_simple_params_loop_001a
  3181                                  .L_lambda_simple_params_end_001a:
  3182 00002439 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3183 0000243C 4889C3                  	mov rbx, rax
  3184 0000243F 58                      	pop rax
  3185 00002440 C60005                  	mov byte [rax], T_closure
  3186 00002443 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3187 00002447 48C74009[54240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001a
  3188 0000244F E9A4000000              	jmp .L_lambda_simple_end_001a
  3189                                  .L_lambda_simple_code_001a:	; lambda-simple body
  3190 00002454 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3191 0000245A 740B                    	je .L_lambda_simple_arity_check_ok_001a
  3192 0000245C FF742410                	push qword [rsp + 8 * 2]
  3193 00002460 6A01                    	push 1
  3194 00002462 E94AF20000              	jmp L_error_incorrect_arity_simple
  3195                                  .L_lambda_simple_arity_check_ok_001a:
  3196 00002467 C8000000                	enter 0, 0
  3197 0000246B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3198 0000246F 50                      	push rax
  3199 00002470 6A01                    	push 1
  3200 00002472 488B0425[C8010000]      	mov rax, qword [free_var_57]
  3201                                  	assert_closure(rax)
    42 0000247A 803805              <1>  cmp byte [%1], %2
    43 0000247D 0F85690A0100        <1>  jne L_error_incorrect_type
  3202 00002483 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3203 00002486 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3204 00002489 50                      	push rax
  3205 0000248A 6A01                    	push 1
  3206 0000248C 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3207                                  .L_applic_TC_001a:
  3208 00002494 803805                  	cmp byte [rax], T_closure
  3209 00002497 0F8510020100            	jne L_code_ptr_error
  3210 0000249D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3211 000024A1 53                      	push rbx
  3212 000024A2 FF7508                  	push qword [rbp + 8]
  3213 000024A5 FF7500                  	push qword [rbp]
  3214 000024A8 488B4D18                	mov rcx, [rbp + 3 * 8]
  3215 000024AC 488B542418              	mov rdx, [rsp + 3 * 8]
  3216 000024B1 488D7204                	lea rsi, [rdx + 4]
  3217 000024B5 4C8D4EFF                	lea r9, [rsi - 1]
  3218 000024B9 488D7903                	lea rdi, [rcx + 3]
  3219 000024BD 4D31C0                  	xor r8, r8
  3220                                  .L_tc_recycle_frame_loop_001a:
  3221 000024C0 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3222 000024C4 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3223 000024C9 49FFC9                  	dec r9
  3224 000024CC 4D31C0                  	xor r8, r8
  3225 000024CF 48FFCF                  	dec rdi
  3226 000024D2 48FFCE                  	dec rsi
  3227 000024D5 4883FE00                	cmp rsi, 0
  3228 000024D9 75E5                    	jne .L_tc_recycle_frame_loop_001a
  3229                                  .L_tc_recycle_frame_done_001a:
  3230                                  ;this pop rbp in sot to the right place
  3231 000024DB 4989C9                  	mov r9, rcx
  3232 000024DE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3233 000024E6 4C01CC                  	add rsp, r9
  3234 000024E9 5D                      	pop rbp
  3235 000024EA 488B4D00                	mov rcx, qword [rbp]
  3236 000024EE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3237 000024F2 FFE3                    	jmp rbx
  3238 000024F4 C9                      	leave
  3239 000024F5 C21800                  	ret 8 * (2 + 1)
  3240                                  .L_lambda_simple_end_001a:	; new closure is in rax
  3241 000024F8 48890425[88020000]      	mov qword [free_var_81], rax
  3242 00002500 48B8-                   	mov rax, sob_void
  3242 00002502 [0000000000000000] 
  3243                                  
  3244 0000250A 4889C7                  	mov rdi, rax
  3245 0000250D E8F7F10000              	call print_sexpr_if_not_void
  3246                                  
  3247 00002512 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3248 00002517 E8DCF10000              	call malloc
  3249 0000251C 50                      	push rax
  3250 0000251D BF00000000              	mov rdi, 8 * 0	; new rib
  3251 00002522 E8D1F10000              	call malloc
  3252 00002527 50                      	push rax
  3253 00002528 BF08000000              	mov rdi, 8 * 1	; extended env
  3254 0000252D E8C6F10000              	call malloc
  3255 00002532 488B7D10                	mov rdi, ENV
  3256 00002536 BE00000000              	mov rsi, 0
  3257 0000253B BA01000000              	mov rdx, 1
  3258                                  .L_lambda_simple_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  3259 00002540 4883FE00                	cmp rsi, 0
  3260 00002544 7410                    	je .L_lambda_simple_env_end_001b
  3261 00002546 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3262 0000254A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3263 0000254E 48FFC6                  	inc rsi
  3264 00002551 48FFC2                  	inc rdx
  3265 00002554 EBEA                    	jmp .L_lambda_simple_env_loop_001b
  3266                                  .L_lambda_simple_env_end_001b:
  3267 00002556 5B                      	pop rbx
  3268 00002557 BE00000000              	mov rsi, 0
  3269                                  .L_lambda_simple_params_loop_001b:	; copy params
  3270 0000255C 4883FE00                	cmp rsi, 0
  3271 00002560 740E                    	je .L_lambda_simple_params_end_001b
  3272 00002562 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3273 00002567 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3274 0000256B 48FFC6                  	inc rsi
  3275 0000256E EBEC                    	jmp .L_lambda_simple_params_loop_001b
  3276                                  .L_lambda_simple_params_end_001b:
  3277 00002570 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3278 00002573 4889C3                  	mov rbx, rax
  3279 00002576 58                      	pop rax
  3280 00002577 C60005                  	mov byte [rax], T_closure
  3281 0000257A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3282 0000257E 48C74009[8B250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001b
  3283 00002586 E9A4000000              	jmp .L_lambda_simple_end_001b
  3284                                  .L_lambda_simple_code_001b:	; lambda-simple body
  3285 0000258B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3286 00002591 740B                    	je .L_lambda_simple_arity_check_ok_001b
  3287 00002593 FF742410                	push qword [rsp + 8 * 2]
  3288 00002597 6A01                    	push 1
  3289 00002599 E913F10000              	jmp L_error_incorrect_arity_simple
  3290                                  .L_lambda_simple_arity_check_ok_001b:
  3291 0000259E C8000000                	enter 0, 0
  3292 000025A2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3293 000025A6 50                      	push rax
  3294 000025A7 6A01                    	push 1
  3295 000025A9 488B0425[D0010000]      	mov rax, qword [free_var_58]
  3296                                  	assert_closure(rax)
    42 000025B1 803805              <1>  cmp byte [%1], %2
    43 000025B4 0F8532090100        <1>  jne L_error_incorrect_type
  3297 000025BA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3298 000025BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  3299 000025C0 50                      	push rax
  3300 000025C1 6A01                    	push 1
  3301 000025C3 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3302                                  .L_applic_TC_001b:
  3303 000025CB 803805                  	cmp byte [rax], T_closure
  3304 000025CE 0F85D9000100            	jne L_code_ptr_error
  3305 000025D4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3306 000025D8 53                      	push rbx
  3307 000025D9 FF7508                  	push qword [rbp + 8]
  3308 000025DC FF7500                  	push qword [rbp]
  3309 000025DF 488B4D18                	mov rcx, [rbp + 3 * 8]
  3310 000025E3 488B542418              	mov rdx, [rsp + 3 * 8]
  3311 000025E8 488D7204                	lea rsi, [rdx + 4]
  3312 000025EC 4C8D4EFF                	lea r9, [rsi - 1]
  3313 000025F0 488D7903                	lea rdi, [rcx + 3]
  3314 000025F4 4D31C0                  	xor r8, r8
  3315                                  .L_tc_recycle_frame_loop_001b:
  3316 000025F7 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3317 000025FB 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3318 00002600 49FFC9                  	dec r9
  3319 00002603 4D31C0                  	xor r8, r8
  3320 00002606 48FFCF                  	dec rdi
  3321 00002609 48FFCE                  	dec rsi
  3322 0000260C 4883FE00                	cmp rsi, 0
  3323 00002610 75E5                    	jne .L_tc_recycle_frame_loop_001b
  3324                                  .L_tc_recycle_frame_done_001b:
  3325                                  ;this pop rbp in sot to the right place
  3326 00002612 4989C9                  	mov r9, rcx
  3327 00002615 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3328 0000261D 4C01CC                  	add rsp, r9
  3329 00002620 5D                      	pop rbp
  3330 00002621 488B4D00                	mov rcx, qword [rbp]
  3331 00002625 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3332 00002629 FFE3                    	jmp rbx
  3333 0000262B C9                      	leave
  3334 0000262C C21800                  	ret 8 * (2 + 1)
  3335                                  .L_lambda_simple_end_001b:	; new closure is in rax
  3336 0000262F 48890425[90020000]      	mov qword [free_var_82], rax
  3337 00002637 48B8-                   	mov rax, sob_void
  3337 00002639 [0000000000000000] 
  3338                                  
  3339 00002641 4889C7                  	mov rdi, rax
  3340 00002644 E8C0F00000              	call print_sexpr_if_not_void
  3341                                  
  3342 00002649 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3343 0000264E E8A5F00000              	call malloc
  3344 00002653 50                      	push rax
  3345 00002654 BF00000000              	mov rdi, 8 * 0	; new rib
  3346 00002659 E89AF00000              	call malloc
  3347 0000265E 50                      	push rax
  3348 0000265F BF08000000              	mov rdi, 8 * 1	; extended env
  3349 00002664 E88FF00000              	call malloc
  3350 00002669 488B7D10                	mov rdi, ENV
  3351 0000266D BE00000000              	mov rsi, 0
  3352 00002672 BA01000000              	mov rdx, 1
  3353                                  .L_lambda_simple_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  3354 00002677 4883FE00                	cmp rsi, 0
  3355 0000267B 7410                    	je .L_lambda_simple_env_end_001c
  3356 0000267D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3357 00002681 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3358 00002685 48FFC6                  	inc rsi
  3359 00002688 48FFC2                  	inc rdx
  3360 0000268B EBEA                    	jmp .L_lambda_simple_env_loop_001c
  3361                                  .L_lambda_simple_env_end_001c:
  3362 0000268D 5B                      	pop rbx
  3363 0000268E BE00000000              	mov rsi, 0
  3364                                  .L_lambda_simple_params_loop_001c:	; copy params
  3365 00002693 4883FE00                	cmp rsi, 0
  3366 00002697 740E                    	je .L_lambda_simple_params_end_001c
  3367 00002699 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3368 0000269E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3369 000026A2 48FFC6                  	inc rsi
  3370 000026A5 EBEC                    	jmp .L_lambda_simple_params_loop_001c
  3371                                  .L_lambda_simple_params_end_001c:
  3372 000026A7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3373 000026AA 4889C3                  	mov rbx, rax
  3374 000026AD 58                      	pop rax
  3375 000026AE C60005                  	mov byte [rax], T_closure
  3376 000026B1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3377 000026B5 48C74009[C2260000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001c
  3378 000026BD E9A4000000              	jmp .L_lambda_simple_end_001c
  3379                                  .L_lambda_simple_code_001c:	; lambda-simple body
  3380 000026C2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3381 000026C8 740B                    	je .L_lambda_simple_arity_check_ok_001c
  3382 000026CA FF742410                	push qword [rsp + 8 * 2]
  3383 000026CE 6A01                    	push 1
  3384 000026D0 E9DCEF0000              	jmp L_error_incorrect_arity_simple
  3385                                  .L_lambda_simple_arity_check_ok_001c:
  3386 000026D5 C8000000                	enter 0, 0
  3387 000026D9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3388 000026DD 50                      	push rax
  3389 000026DE 6A01                    	push 1
  3390 000026E0 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3391                                  	assert_closure(rax)
    42 000026E8 803805              <1>  cmp byte [%1], %2
    43 000026EB 0F85FB070100        <1>  jne L_error_incorrect_type
  3392 000026F1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3393 000026F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3394 000026F7 50                      	push rax
  3395 000026F8 6A01                    	push 1
  3396 000026FA 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3397                                  .L_applic_TC_001c:
  3398 00002702 803805                  	cmp byte [rax], T_closure
  3399 00002705 0F85A2FF0000            	jne L_code_ptr_error
  3400 0000270B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3401 0000270F 53                      	push rbx
  3402 00002710 FF7508                  	push qword [rbp + 8]
  3403 00002713 FF7500                  	push qword [rbp]
  3404 00002716 488B4D18                	mov rcx, [rbp + 3 * 8]
  3405 0000271A 488B542418              	mov rdx, [rsp + 3 * 8]
  3406 0000271F 488D7204                	lea rsi, [rdx + 4]
  3407 00002723 4C8D4EFF                	lea r9, [rsi - 1]
  3408 00002727 488D7903                	lea rdi, [rcx + 3]
  3409 0000272B 4D31C0                  	xor r8, r8
  3410                                  .L_tc_recycle_frame_loop_001c:
  3411 0000272E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3412 00002732 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3413 00002737 49FFC9                  	dec r9
  3414 0000273A 4D31C0                  	xor r8, r8
  3415 0000273D 48FFCF                  	dec rdi
  3416 00002740 48FFCE                  	dec rsi
  3417 00002743 4883FE00                	cmp rsi, 0
  3418 00002747 75E5                    	jne .L_tc_recycle_frame_loop_001c
  3419                                  .L_tc_recycle_frame_done_001c:
  3420                                  ;this pop rbp in sot to the right place
  3421 00002749 4989C9                  	mov r9, rcx
  3422 0000274C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3423 00002754 4C01CC                  	add rsp, r9
  3424 00002757 5D                      	pop rbp
  3425 00002758 488B4D00                	mov rcx, qword [rbp]
  3426 0000275C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3427 00002760 FFE3                    	jmp rbx
  3428 00002762 C9                      	leave
  3429 00002763 C21800                  	ret 8 * (2 + 1)
  3430                                  .L_lambda_simple_end_001c:	; new closure is in rax
  3431 00002766 48890425[98020000]      	mov qword [free_var_83], rax
  3432 0000276E 48B8-                   	mov rax, sob_void
  3432 00002770 [0000000000000000] 
  3433                                  
  3434 00002778 4889C7                  	mov rdi, rax
  3435 0000277B E889EF0000              	call print_sexpr_if_not_void
  3436                                  
  3437 00002780 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3438 00002785 E86EEF0000              	call malloc
  3439 0000278A 50                      	push rax
  3440 0000278B BF00000000              	mov rdi, 8 * 0	; new rib
  3441 00002790 E863EF0000              	call malloc
  3442 00002795 50                      	push rax
  3443 00002796 BF08000000              	mov rdi, 8 * 1	; extended env
  3444 0000279B E858EF0000              	call malloc
  3445 000027A0 488B7D10                	mov rdi, ENV
  3446 000027A4 BE00000000              	mov rsi, 0
  3447 000027A9 BA01000000              	mov rdx, 1
  3448                                  .L_lambda_simple_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  3449 000027AE 4883FE00                	cmp rsi, 0
  3450 000027B2 7410                    	je .L_lambda_simple_env_end_001d
  3451 000027B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3452 000027B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3453 000027BC 48FFC6                  	inc rsi
  3454 000027BF 48FFC2                  	inc rdx
  3455 000027C2 EBEA                    	jmp .L_lambda_simple_env_loop_001d
  3456                                  .L_lambda_simple_env_end_001d:
  3457 000027C4 5B                      	pop rbx
  3458 000027C5 BE00000000              	mov rsi, 0
  3459                                  .L_lambda_simple_params_loop_001d:	; copy params
  3460 000027CA 4883FE00                	cmp rsi, 0
  3461 000027CE 740E                    	je .L_lambda_simple_params_end_001d
  3462 000027D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3463 000027D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3464 000027D9 48FFC6                  	inc rsi
  3465 000027DC EBEC                    	jmp .L_lambda_simple_params_loop_001d
  3466                                  .L_lambda_simple_params_end_001d:
  3467 000027DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3468 000027E1 4889C3                  	mov rbx, rax
  3469 000027E4 58                      	pop rax
  3470 000027E5 C60005                  	mov byte [rax], T_closure
  3471 000027E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3472 000027EC 48C74009[F9270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001d
  3473 000027F4 E904010000              	jmp .L_lambda_simple_end_001d
  3474                                  .L_lambda_simple_code_001d:	; lambda-simple body
  3475 000027F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3476 000027FF 740B                    	je .L_lambda_simple_arity_check_ok_001d
  3477 00002801 FF742410                	push qword [rsp + 8 * 2]
  3478 00002805 6A01                    	push 1
  3479 00002807 E9A5EE0000              	jmp L_error_incorrect_arity_simple
  3480                                  .L_lambda_simple_arity_check_ok_001d:
  3481 0000280C C8000000                	enter 0, 0
  3482 00002810 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3483 00002814 50                      	push rax
  3484 00002815 6A01                    	push 1
  3485 00002817 488B0425[00000000]      	mov rax, qword [free_var_0]
  3486                                  	assert_closure(rax)
    42 0000281F 803805              <1>  cmp byte [%1], %2
    43 00002822 0F85C4060100        <1>  jne L_error_incorrect_type
  3487 00002828 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3488 0000282B FF5009                  	call SOB_CLOSURE_CODE(rax)
  3489 0000282E 483D[02000000]          	cmp rax, sob_boolean_false
  3490 00002834 0F85BF000000            	jne .L_or_end_0001
  3491 0000283A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3492 0000283E 50                      	push rax
  3493 0000283F 6A01                    	push 1
  3494 00002841 488B0425[08000000]      	mov rax, qword [free_var_1]
  3495                                  	assert_closure(rax)
    42 00002849 803805              <1>  cmp byte [%1], %2
    43 0000284C 0F859A060100        <1>  jne L_error_incorrect_type
  3496 00002852 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3497 00002855 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3498                                  
  3499 00002858 483D[02000000]                  	cmp rax, sob_boolean_false
  3500                                  
  3501 0000285E 0F848B000000                    	je .L_if_else_0001
  3502 00002864 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3503 00002868 50                      	push rax
  3504 00002869 6A01                    	push 1
  3505 0000286B 488B0425[88000000]      	mov rax, qword [free_var_17]
  3506                                  	assert_closure(rax)
    42 00002873 803805              <1>  cmp byte [%1], %2
    43 00002876 0F8570060100        <1>  jne L_error_incorrect_type
  3507 0000287C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3508 0000287F FF5009                  	call SOB_CLOSURE_CODE(rax)
  3509 00002882 50                      	push rax
  3510 00002883 6A01                    	push 1
  3511 00002885 488B0425[A0020000]      	mov rax, qword [free_var_84]
  3512                                  .L_applic_TC_001d:
  3513 0000288D 803805                  	cmp byte [rax], T_closure
  3514 00002890 0F8517FE0000            	jne L_code_ptr_error
  3515 00002896 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3516 0000289A 53                      	push rbx
  3517 0000289B FF7508                  	push qword [rbp + 8]
  3518 0000289E FF7500                  	push qword [rbp]
  3519 000028A1 488B4D18                	mov rcx, [rbp + 3 * 8]
  3520 000028A5 488B542418              	mov rdx, [rsp + 3 * 8]
  3521 000028AA 488D7204                	lea rsi, [rdx + 4]
  3522 000028AE 4C8D4EFF                	lea r9, [rsi - 1]
  3523 000028B2 488D7903                	lea rdi, [rcx + 3]
  3524 000028B6 4D31C0                  	xor r8, r8
  3525                                  .L_tc_recycle_frame_loop_001d:
  3526 000028B9 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3527 000028BD 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3528 000028C2 49FFC9                  	dec r9
  3529 000028C5 4D31C0                  	xor r8, r8
  3530 000028C8 48FFCF                  	dec rdi
  3531 000028CB 48FFCE                  	dec rsi
  3532 000028CE 4883FE00                	cmp rsi, 0
  3533 000028D2 75E5                    	jne .L_tc_recycle_frame_loop_001d
  3534                                  .L_tc_recycle_frame_done_001d:
  3535                                  ;this pop rbp in sot to the right place
  3536 000028D4 4989C9                  	mov r9, rcx
  3537 000028D7 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3538 000028DF 4C01CC                  	add rsp, r9
  3539 000028E2 5D                      	pop rbp
  3540 000028E3 488B4D00                	mov rcx, qword [rbp]
  3541 000028E7 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3542 000028EB FFE3                    	jmp rbx
  3543                                  
  3544 000028ED EB0A                            	jmp .L_if_end_0001
  3545                                  
  3546                                          	.L_if_else_0001:
  3547 000028EF 48B8-                   	mov rax,L_constants + 2
  3547 000028F1 [0200000000000000] 
  3548                                  
  3549                                          	.L_if_end_0001:
  3550                                  .L_or_end_0001:
  3551 000028F9 C9                      	leave
  3552 000028FA C21800                  	ret 8 * (2 + 1)
  3553                                  .L_lambda_simple_end_001d:	; new closure is in rax
  3554 000028FD 48890425[A0020000]      	mov qword [free_var_84], rax
  3555 00002905 48B8-                   	mov rax, sob_void
  3555 00002907 [0000000000000000] 
  3556                                  
  3557 0000290F 4889C7                  	mov rdi, rax
  3558 00002912 E8F2ED0000              	call print_sexpr_if_not_void
  3559                                  
  3560 00002917 BF11000000              	mov rdi, (1 + 8 + 8)
  3561 0000291C E8D7ED0000              	call malloc
  3562 00002921 50                      	push rax
  3563 00002922 BF00000000              	mov rdi, 8 * 0
  3564 00002927 E8CCED0000              	call malloc
  3565 0000292C 50                      	push rax
  3566 0000292D BF08000000              	mov rdi, 8 * 1
  3567 00002932 E8C1ED0000              	call malloc
  3568 00002937 488B7D10                	mov rdi, ENV
  3569 0000293B 4831F6                  	xor rsi, rsi
  3570 0000293E 4831D2                  	xor rdx, rdx
  3571 00002941 48FFC2                  	inc rdx
  3572                                  	.L_lambda_opt_env_loop_0001:
  3573                                  
  3574 00002944 4883FE00                        	cmp rsi, 0
  3575                                  
  3576 00002948 7412                            	je .L_lambda_opt_env_end_0001
  3577 0000294A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3578 0000294E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3579 00002952 4883C201                	add rdx, 1
  3580 00002956 4883C601                	add rsi, 1
  3581 0000295A EBE8                    	jmp .L_lambda_opt_env_loop_0001
  3582                                  
  3583                                          	.L_lambda_opt_env_end_0001:
  3584 0000295C 5B                      	pop rbx
  3585 0000295D 4831F6                  	xor rsi, rsi
  3586                                  	.L_lambda_opt_params_loop_0001:
  3587                                  
  3588 00002960 4883FE00                        	cmp rsi, 0
  3589                                  
  3590 00002964 740F                            	je .L_lambda_opt_params_end_0001
  3591 00002966 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3592 0000296B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3593 0000296F 4883C601                	add rsi, 1
  3594 00002973 EBEB                    	jmp .L_lambda_opt_params_loop_0001
  3595                                  
  3596                                          	.L_lambda_opt_params_end_0001:
  3597 00002975 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  3598 00002978 4889C3                  	mov rbx, rax
  3599 0000297B 58                      	pop rax
  3600 0000297C C60005                  	mov byte [rax], T_closure
  3601 0000297F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3602 00002983 48C74009[90290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0001
  3603                                  
  3604 0000298B E911010000                      	jmp .L_lambda_opt_end_0001
  3605                                  
  3606                                          	.L_lambda_opt_code_0001:
  3607                                  
  3608 00002990 48837C241000                    	cmp qword [rsp + 8 * 2], 0
  3609                                  
  3610 00002996 740D                            	je .L_lambda_opt_arity_check_exact_0001  ;same num_of_args
  3611                                  
  3612 00002998 7F65                            	jg .L_lambda_opt_arity_check_more_0001  ;greater num_of_args
  3613 0000299A FF742410                	push qword [rsp + 8 * 2]
  3614 0000299E 6A00                    	push 0
  3615 000029A0 E920ED0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  3616                                  .L_lambda_opt_arity_check_exact_0001:
  3617 000029A5 4883EC08                	sub rsp, 8 * 1
  3618 000029A9 488D7F10                	lea rdi, [rdi + (8 * 2)]
  3619 000029AD 4889E7                  	mov rdi, rsp 
  3620 000029B0 488B4708                	mov rax, qword [rdi + 8]
  3621 000029B4 488907                  	mov qword [rdi], rax
  3622 000029B7 488D7F08                	lea rdi, [rdi + 8]
  3623 000029BB 488B4708                	mov rax, qword [rdi + 8]
  3624 000029BF 488907                  	mov qword [rdi], rax
  3625 000029C2 488D7F08                	lea rdi, [rdi + 8]
  3626 000029C6 488B4708                	mov rax, qword [rdi + 8]
  3627 000029CA 4889C1                  	mov rcx, rax
  3628 000029CD 4883C001                	add rax, 1
  3629 000029D1 488907                  	mov qword [rdi], rax
  3630 000029D4 488D7F08                	lea rdi, [rdi + 8]
  3631                                  	.L_lambda_opt_stack_shrink_loop_0001:
  3632 000029D8 4883F900                	cmp rcx, 0
  3633 000029DC 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0001
  3634 000029DE 4883E901                	sub rcx, 1
  3635 000029E2 488D4010                	lea rax, [rax + (8 * 2)]
  3636 000029E6 488B4708                	mov rax, qword [rdi + 8]
  3637 000029EA 488907                  	mov qword [rdi], rax
  3638 000029ED 488D7F08                	lea rdi, [rdi + 8]
  3639 000029F1 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0001
  3640                                  
  3641                                          	.L_lambda_opt_stack_shrink_loop_exit_0001:
  3642 000029F3 48C707[01000000]        	mov qword [rdi], sob_nil
  3643 000029FA E996000000              	jmp .L_lambda_opt_stack_adjusted_0001
  3644                                  
  3645                                          	.L_lambda_opt_arity_check_more_0001:
  3646 000029FF 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  3647 00002A04 488D0E                  	lea rcx, [rsi - 0]
  3648 00002A07 49B8-                   	mov r8, sob_nil
  3648 00002A09 [0100000000000000] 
  3649 00002A11 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  3650 00002A16 4889F2                  	mov rdx, rsi
  3651                                  	.L_lambda_opt_stack_shrink_loop_0002:
  3652 00002A19 4883F900                	cmp rcx, 0
  3653 00002A1D 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0002
  3654 00002A1F BF11000000              	mov rdi, 1 + (8 * 2)
  3655 00002A24 E8CFEC0000              	call malloc
  3656 00002A29 C60021                  	mov byte [rax], T_pair
  3657 00002A2C 488B1E                  	mov rbx, qword [rsi]
  3658 00002A2F 48895801                	mov SOB_PAIR_CAR(rax), rbx
  3659 00002A33 4C894009                	mov SOB_PAIR_CDR(rax), r8
  3660 00002A37 4883C6F8                	add rsi, -8
  3661 00002A3B 4883E901                	sub rcx, 1
  3662 00002A3F 4989C0                  	mov r8, rax
  3663 00002A42 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0002
  3664                                  
  3665                                          	.L_lambda_opt_stack_shrink_loop_exit_0002:
  3666 00002A44 4C8902                  	mov qword [rdx], r8
  3667 00002A47 4883EA08                	sub rdx, 8 * 1
  3668 00002A4B 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
  3669                                  
  3670 00002A50 B900000000                      	mov rcx, 0 
  3671                                  
  3672                                          	.L_lambda_opt_stack_shrink_loop_0003:
  3673 00002A55 4883F900                	cmp rcx, 0
  3674 00002A59 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0003
  3675 00002A5B 488B06                  	mov rax, qword [rsi]
  3676 00002A5E 488902                  	mov qword [rdx], rax
  3677 00002A61 488D76F8                	lea rsi, [rsi - 8]
  3678 00002A65 4883C2F8                	add rdx, -8
  3679 00002A69 4883C1FF                	add rcx, -1
  3680 00002A6D EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0003
  3681                                  
  3682                                          	.L_lambda_opt_stack_shrink_loop_exit_0003:
  3683                                  
  3684 00002A6F 48C70201000000                  	mov qword [rdx], 1 + 0
  3685 00002A76 4883C6F8                	add rsi, -8
  3686 00002A7A 4883C2F8                	add rdx, -8
  3687 00002A7E 488B06                  	mov rax, qword [rsi]
  3688 00002A81 488902                  	mov qword [rdx], rax
  3689 00002A84 4883C2F8                	add rdx, -8
  3690 00002A88 488D76F8                	lea rsi, [rsi - 8]
  3691 00002A8C 488B06                  	mov rax, qword [rsi]
  3692 00002A8F 488902                  	mov qword [rdx], rax
  3693 00002A92 4889D4                  	mov rsp, rdx
  3694                                  	.L_lambda_opt_stack_adjusted_0001:
  3695 00002A95 C8000000                	enter 0, 0
  3696 00002A99 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3697 00002A9D C9                      	leave
  3698 00002A9E C21800                  	ret 8 * (2 + 1)
  3699                                  .L_lambda_opt_end_0001:	; new closure is in rax
  3700 00002AA1 48890425[A8020000]      	mov qword [free_var_85], rax
  3701 00002AA9 48B8-                   	mov rax, sob_void
  3701 00002AAB [0000000000000000] 
  3702                                  
  3703 00002AB3 4889C7                  	mov rdi, rax
  3704 00002AB6 E84EEC0000              	call print_sexpr_if_not_void
  3705                                  
  3706 00002ABB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3707 00002AC0 E833EC0000              	call malloc
  3708 00002AC5 50                      	push rax
  3709 00002AC6 BF00000000              	mov rdi, 8 * 0	; new rib
  3710 00002ACB E828EC0000              	call malloc
  3711 00002AD0 50                      	push rax
  3712 00002AD1 BF08000000              	mov rdi, 8 * 1	; extended env
  3713 00002AD6 E81DEC0000              	call malloc
  3714 00002ADB 488B7D10                	mov rdi, ENV
  3715 00002ADF BE00000000              	mov rsi, 0
  3716 00002AE4 BA01000000              	mov rdx, 1
  3717                                  .L_lambda_simple_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  3718 00002AE9 4883FE00                	cmp rsi, 0
  3719 00002AED 7410                    	je .L_lambda_simple_env_end_001e
  3720 00002AEF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3721 00002AF3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3722 00002AF7 48FFC6                  	inc rsi
  3723 00002AFA 48FFC2                  	inc rdx
  3724 00002AFD EBEA                    	jmp .L_lambda_simple_env_loop_001e
  3725                                  .L_lambda_simple_env_end_001e:
  3726 00002AFF 5B                      	pop rbx
  3727 00002B00 BE00000000              	mov rsi, 0
  3728                                  .L_lambda_simple_params_loop_001e:	; copy params
  3729 00002B05 4883FE00                	cmp rsi, 0
  3730 00002B09 740E                    	je .L_lambda_simple_params_end_001e
  3731 00002B0B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3732 00002B10 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3733 00002B14 48FFC6                  	inc rsi
  3734 00002B17 EBEC                    	jmp .L_lambda_simple_params_loop_001e
  3735                                  .L_lambda_simple_params_end_001e:
  3736 00002B19 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3737 00002B1C 4889C3                  	mov rbx, rax
  3738 00002B1F 58                      	pop rax
  3739 00002B20 C60005                  	mov byte [rax], T_closure
  3740 00002B23 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3741 00002B27 48C74009[312B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001e
  3742 00002B2F EB3D                    	jmp .L_lambda_simple_end_001e
  3743                                  .L_lambda_simple_code_001e:	; lambda-simple body
  3744 00002B31 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3745 00002B37 740B                    	je .L_lambda_simple_arity_check_ok_001e
  3746 00002B39 FF742410                	push qword [rsp + 8 * 2]
  3747 00002B3D 6A01                    	push 1
  3748 00002B3F E96DEB0000              	jmp L_error_incorrect_arity_simple
  3749                                  .L_lambda_simple_arity_check_ok_001e:
  3750 00002B44 C8000000                	enter 0, 0
  3751 00002B48 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3752                                  
  3753 00002B4C 483D[02000000]                  	cmp rax, sob_boolean_false
  3754                                  
  3755 00002B52 740C                            	je .L_if_else_0002
  3756 00002B54 48B8-                   	mov rax,L_constants + 2
  3756 00002B56 [0200000000000000] 
  3757                                  
  3758 00002B5E EB0A                            	jmp .L_if_end_0002
  3759                                  
  3760                                          	.L_if_else_0002:
  3761 00002B60 48B8-                   	mov rax,L_constants + 3
  3761 00002B62 [0300000000000000] 
  3762                                  
  3763                                          	.L_if_end_0002:
  3764 00002B6A C9                      	leave
  3765 00002B6B C21800                  	ret 8 * (2 + 1)
  3766                                  .L_lambda_simple_end_001e:	; new closure is in rax
  3767 00002B6E 48890425[B0020000]      	mov qword [free_var_86], rax
  3768 00002B76 48B8-                   	mov rax, sob_void
  3768 00002B78 [0000000000000000] 
  3769                                  
  3770 00002B80 4889C7                  	mov rdi, rax
  3771 00002B83 E881EB0000              	call print_sexpr_if_not_void
  3772                                  
  3773 00002B88 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3774 00002B8D E866EB0000              	call malloc
  3775 00002B92 50                      	push rax
  3776 00002B93 BF00000000              	mov rdi, 8 * 0	; new rib
  3777 00002B98 E85BEB0000              	call malloc
  3778 00002B9D 50                      	push rax
  3779 00002B9E BF08000000              	mov rdi, 8 * 1	; extended env
  3780 00002BA3 E850EB0000              	call malloc
  3781 00002BA8 488B7D10                	mov rdi, ENV
  3782 00002BAC BE00000000              	mov rsi, 0
  3783 00002BB1 BA01000000              	mov rdx, 1
  3784                                  .L_lambda_simple_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  3785 00002BB6 4883FE00                	cmp rsi, 0
  3786 00002BBA 7410                    	je .L_lambda_simple_env_end_001f
  3787 00002BBC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3788 00002BC0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3789 00002BC4 48FFC6                  	inc rsi
  3790 00002BC7 48FFC2                  	inc rdx
  3791 00002BCA EBEA                    	jmp .L_lambda_simple_env_loop_001f
  3792                                  .L_lambda_simple_env_end_001f:
  3793 00002BCC 5B                      	pop rbx
  3794 00002BCD BE00000000              	mov rsi, 0
  3795                                  .L_lambda_simple_params_loop_001f:	; copy params
  3796 00002BD2 4883FE00                	cmp rsi, 0
  3797 00002BD6 740E                    	je .L_lambda_simple_params_end_001f
  3798 00002BD8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3799 00002BDD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3800 00002BE1 48FFC6                  	inc rsi
  3801 00002BE4 EBEC                    	jmp .L_lambda_simple_params_loop_001f
  3802                                  .L_lambda_simple_params_end_001f:
  3803 00002BE6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3804 00002BE9 4889C3                  	mov rbx, rax
  3805 00002BEC 58                      	pop rax
  3806 00002BED C60005                  	mov byte [rax], T_closure
  3807 00002BF0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3808 00002BF4 48C74009[012C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_001f
  3809 00002BFC E9DA000000              	jmp .L_lambda_simple_end_001f
  3810                                  .L_lambda_simple_code_001f:	; lambda-simple body
  3811 00002C01 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3812 00002C07 740B                    	je .L_lambda_simple_arity_check_ok_001f
  3813 00002C09 FF742410                	push qword [rsp + 8 * 2]
  3814 00002C0D 6A01                    	push 1
  3815 00002C0F E99DEA0000              	jmp L_error_incorrect_arity_simple
  3816                                  .L_lambda_simple_arity_check_ok_001f:
  3817 00002C14 C8000000                	enter 0, 0
  3818 00002C18 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3819 00002C1C 50                      	push rax
  3820 00002C1D 6A01                    	push 1
  3821 00002C1F 488B0425[48000000]      	mov rax, qword [free_var_9]
  3822                                  	assert_closure(rax)
    42 00002C27 803805              <1>  cmp byte [%1], %2
    43 00002C2A 0F85BC020100        <1>  jne L_error_incorrect_type
  3823 00002C30 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3824 00002C33 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3825                                  
  3826 00002C36 483D[02000000]                  	cmp rax, sob_boolean_false
  3827                                  
  3828 00002C3C 0F848B000000                    	je .L_if_else_0003
  3829 00002C42 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3830 00002C46 50                      	push rax
  3831 00002C47 6A01                    	push 1
  3832 00002C49 488B0425[E0000000]      	mov rax, qword [free_var_28]
  3833                                  	assert_closure(rax)
    42 00002C51 803805              <1>  cmp byte [%1], %2
    43 00002C54 0F8592020100        <1>  jne L_error_incorrect_type
  3834 00002C5A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3835 00002C5D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3836 00002C60 50                      	push rax
  3837 00002C61 6A01                    	push 1
  3838 00002C63 488B0425[B0020000]      	mov rax, qword [free_var_86]
  3839                                  .L_applic_TC_001e:
  3840 00002C6B 803805                  	cmp byte [rax], T_closure
  3841 00002C6E 0F8539FA0000            	jne L_code_ptr_error
  3842 00002C74 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  3843 00002C78 53                      	push rbx
  3844 00002C79 FF7508                  	push qword [rbp + 8]
  3845 00002C7C FF7500                  	push qword [rbp]
  3846 00002C7F 488B4D18                	mov rcx, [rbp + 3 * 8]
  3847 00002C83 488B542418              	mov rdx, [rsp + 3 * 8]
  3848 00002C88 488D7204                	lea rsi, [rdx + 4]
  3849 00002C8C 4C8D4EFF                	lea r9, [rsi - 1]
  3850 00002C90 488D7903                	lea rdi, [rcx + 3]
  3851 00002C94 4D31C0                  	xor r8, r8
  3852                                  .L_tc_recycle_frame_loop_001e:
  3853 00002C97 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  3854 00002C9B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  3855 00002CA0 49FFC9                  	dec r9
  3856 00002CA3 4D31C0                  	xor r8, r8
  3857 00002CA6 48FFCF                  	dec rdi
  3858 00002CA9 48FFCE                  	dec rsi
  3859 00002CAC 4883FE00                	cmp rsi, 0
  3860 00002CB0 75E5                    	jne .L_tc_recycle_frame_loop_001e
  3861                                  .L_tc_recycle_frame_done_001e:
  3862                                  ;this pop rbp in sot to the right place
  3863 00002CB2 4989C9                  	mov r9, rcx
  3864 00002CB5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  3865 00002CBD 4C01CC                  	add rsp, r9
  3866 00002CC0 5D                      	pop rbp
  3867 00002CC1 488B4D00                	mov rcx, qword [rbp]
  3868 00002CC5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  3869 00002CC9 FFE3                    	jmp rbx
  3870                                  
  3871 00002CCB EB0A                            	jmp .L_if_end_0003
  3872                                  
  3873                                          	.L_if_else_0003:
  3874 00002CCD 48B8-                   	mov rax,L_constants + 2
  3874 00002CCF [0200000000000000] 
  3875                                  
  3876                                          	.L_if_end_0003:
  3877 00002CD7 C9                      	leave
  3878 00002CD8 C21800                  	ret 8 * (2 + 1)
  3879                                  .L_lambda_simple_end_001f:	; new closure is in rax
  3880 00002CDB 48890425[B8020000]      	mov qword [free_var_87], rax
  3881 00002CE3 48B8-                   	mov rax, sob_void
  3881 00002CE5 [0000000000000000] 
  3882                                  
  3883 00002CED 4889C7                  	mov rdi, rax
  3884 00002CF0 E814EA0000              	call print_sexpr_if_not_void
  3885                                  
  3886 00002CF5 48B8-                   	mov rax,L_constants + 23
  3886 00002CF7 [1700000000000000] 
  3887 00002CFF 50                      	push rax
  3888 00002D00 6A01                    	push 1
  3889 00002D02 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3890 00002D07 E8ECE90000              	call malloc
  3891 00002D0C 50                      	push rax
  3892 00002D0D BF00000000              	mov rdi, 8 * 0	; new rib
  3893 00002D12 E8E1E90000              	call malloc
  3894 00002D17 50                      	push rax
  3895 00002D18 BF08000000              	mov rdi, 8 * 1	; extended env
  3896 00002D1D E8D6E90000              	call malloc
  3897 00002D22 488B7D10                	mov rdi, ENV
  3898 00002D26 BE00000000              	mov rsi, 0
  3899 00002D2B BA01000000              	mov rdx, 1
  3900                                  .L_lambda_simple_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  3901 00002D30 4883FE00                	cmp rsi, 0
  3902 00002D34 7410                    	je .L_lambda_simple_env_end_0020
  3903 00002D36 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3904 00002D3A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3905 00002D3E 48FFC6                  	inc rsi
  3906 00002D41 48FFC2                  	inc rdx
  3907 00002D44 EBEA                    	jmp .L_lambda_simple_env_loop_0020
  3908                                  .L_lambda_simple_env_end_0020:
  3909 00002D46 5B                      	pop rbx
  3910 00002D47 BE00000000              	mov rsi, 0
  3911                                  .L_lambda_simple_params_loop_0020:	; copy params
  3912 00002D4C 4883FE00                	cmp rsi, 0
  3913 00002D50 740E                    	je .L_lambda_simple_params_end_0020
  3914 00002D52 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3915 00002D57 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3916 00002D5B 48FFC6                  	inc rsi
  3917 00002D5E EBEC                    	jmp .L_lambda_simple_params_loop_0020
  3918                                  .L_lambda_simple_params_end_0020:
  3919 00002D60 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3920 00002D63 4889C3                  	mov rbx, rax
  3921 00002D66 58                      	pop rax
  3922 00002D67 C60005                  	mov byte [rax], T_closure
  3923 00002D6A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3924 00002D6E 48C74009[7B2D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0020
  3925 00002D76 E9DA030000              	jmp .L_lambda_simple_end_0020
  3926                                  .L_lambda_simple_code_0020:	; lambda-simple body
  3927 00002D7B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3928 00002D81 740B                    	je .L_lambda_simple_arity_check_ok_0020
  3929 00002D83 FF742410                	push qword [rsp + 8 * 2]
  3930 00002D87 6A01                    	push 1
  3931 00002D89 E923E90000              	jmp L_error_incorrect_arity_simple
  3932                                  .L_lambda_simple_arity_check_ok_0020:
  3933 00002D8E C8000000                	enter 0, 0
  3934 00002D92 BF08000000              	mov rdi, 8
  3935 00002D97 E85CE90000              	call malloc
  3936 00002D9C 488B5D20                	mov rbx, PARAM(0)
  3937 00002DA0 488918                  	mov qword [rax], rbx
  3938 00002DA3 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  3939                                  
  3940 00002DA7 48B8-                            	mov rax, sob_void
  3940 00002DA9 [0000000000000000] 
  3941                                  
  3942 00002DB1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3943 00002DB6 E83DE90000              	call malloc
  3944 00002DBB 50                      	push rax
  3945 00002DBC BF08000000              	mov rdi, 8 * 1	; new rib
  3946 00002DC1 E832E90000              	call malloc
  3947 00002DC6 50                      	push rax
  3948 00002DC7 BF10000000              	mov rdi, 8 * 2	; extended env
  3949 00002DCC E827E90000              	call malloc
  3950 00002DD1 488B7D10                	mov rdi, ENV
  3951 00002DD5 BE00000000              	mov rsi, 0
  3952 00002DDA BA01000000              	mov rdx, 1
  3953                                  .L_lambda_simple_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  3954 00002DDF 4883FE01                	cmp rsi, 1
  3955 00002DE3 7410                    	je .L_lambda_simple_env_end_0021
  3956 00002DE5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3957 00002DE9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3958 00002DED 48FFC6                  	inc rsi
  3959 00002DF0 48FFC2                  	inc rdx
  3960 00002DF3 EBEA                    	jmp .L_lambda_simple_env_loop_0021
  3961                                  .L_lambda_simple_env_end_0021:
  3962 00002DF5 5B                      	pop rbx
  3963 00002DF6 BE00000000              	mov rsi, 0
  3964                                  .L_lambda_simple_params_loop_0021:	; copy params
  3965 00002DFB 4883FE01                	cmp rsi, 1
  3966 00002DFF 740E                    	je .L_lambda_simple_params_end_0021
  3967 00002E01 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3968 00002E06 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3969 00002E0A 48FFC6                  	inc rsi
  3970 00002E0D EBEC                    	jmp .L_lambda_simple_params_loop_0021
  3971                                  .L_lambda_simple_params_end_0021:
  3972 00002E0F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3973 00002E12 4889C3                  	mov rbx, rax
  3974 00002E15 58                      	pop rax
  3975 00002E16 C60005                  	mov byte [rax], T_closure
  3976 00002E19 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3977 00002E1D 48C74009[2A2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0021
  3978 00002E25 E916010000              	jmp .L_lambda_simple_end_0021
  3979                                  .L_lambda_simple_code_0021:	; lambda-simple body
  3980 00002E2A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3981 00002E30 740B                    	je .L_lambda_simple_arity_check_ok_0021
  3982 00002E32 FF742410                	push qword [rsp + 8 * 2]
  3983 00002E36 6A02                    	push 2
  3984 00002E38 E974E80000              	jmp L_error_incorrect_arity_simple
  3985                                  .L_lambda_simple_arity_check_ok_0021:
  3986 00002E3D C8000000                	enter 0, 0
  3987 00002E41 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  3988 00002E45 50                      	push rax
  3989 00002E46 6A01                    	push 1
  3990 00002E48 488B0425[00000000]      	mov rax, qword [free_var_0]
  3991                                  	assert_closure(rax)
    42 00002E50 803805              <1>  cmp byte [%1], %2
    43 00002E53 0F8593000100        <1>  jne L_error_incorrect_type
  3992 00002E59 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  3993 00002E5C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3994                                  
  3995 00002E5F 483D[02000000]                  	cmp rax, sob_boolean_false
  3996                                  
  3997 00002E65 7409                            	je .L_if_else_0004
  3998 00002E67 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  3999                                  
  4000 00002E6B E9CC000000                      	jmp .L_if_end_0004
  4001                                  
  4002                                          	.L_if_else_0004:
  4003 00002E70 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4004 00002E74 50                      	push rax
  4005 00002E75 6A01                    	push 1
  4006 00002E77 488B0425[88000000]      	mov rax, qword [free_var_17]
  4007                                  	assert_closure(rax)
    42 00002E7F 803805              <1>  cmp byte [%1], %2
    43 00002E82 0F8564000100        <1>  jne L_error_incorrect_type
  4008 00002E88 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4009 00002E8B FF5009                  	call SOB_CLOSURE_CODE(rax)
  4010 00002E8E 50                      	push rax
  4011 00002E8F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4012 00002E93 50                      	push rax
  4013 00002E94 6A01                    	push 1
  4014 00002E96 488B0425[80000000]      	mov rax, qword [free_var_16]
  4015                                  	assert_closure(rax)
    42 00002E9E 803805              <1>  cmp byte [%1], %2
    43 00002EA1 0F8545000100        <1>  jne L_error_incorrect_type
  4016 00002EA7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4017 00002EAA FF5009                  	call SOB_CLOSURE_CODE(rax)
  4018 00002EAD 50                      	push rax
  4019 00002EAE 6A02                    	push 2
  4020 00002EB0 488B4510                	mov rax, qword [rbp + 8 * 2]
  4021                                  
  4022 00002EB4 488B00                                            	mov rax, qword[rax + 8 * 0]
  4023                                  
  4024 00002EB7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4025 00002EBA 488B00                  	mov rax, qword [rax]
  4026                                  	assert_closure(rax)
    42 00002EBD 803805              <1>  cmp byte [%1], %2
    43 00002EC0 0F8526000100        <1>  jne L_error_incorrect_type
  4027 00002EC6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4028 00002EC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4029 00002ECC 50                      	push rax
  4030 00002ECD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4031 00002ED1 50                      	push rax
  4032 00002ED2 6A02                    	push 2
  4033 00002ED4 488B0425[68000000]      	mov rax, qword [free_var_13]
  4034                                  .L_applic_TC_001f:
  4035 00002EDC 803805                  	cmp byte [rax], T_closure
  4036 00002EDF 0F85C8F70000            	jne L_code_ptr_error
  4037 00002EE5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4038 00002EE9 53                      	push rbx
  4039 00002EEA FF7508                  	push qword [rbp + 8]
  4040 00002EED FF7500                  	push qword [rbp]
  4041 00002EF0 488B4D18                	mov rcx, [rbp + 3 * 8]
  4042 00002EF4 488B542418              	mov rdx, [rsp + 3 * 8]
  4043 00002EF9 488D7204                	lea rsi, [rdx + 4]
  4044 00002EFD 4C8D4EFF                	lea r9, [rsi - 1]
  4045 00002F01 488D7903                	lea rdi, [rcx + 3]
  4046 00002F05 4D31C0                  	xor r8, r8
  4047                                  .L_tc_recycle_frame_loop_001f:
  4048 00002F08 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4049 00002F0C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4050 00002F11 49FFC9                  	dec r9
  4051 00002F14 4D31C0                  	xor r8, r8
  4052 00002F17 48FFCF                  	dec rdi
  4053 00002F1A 48FFCE                  	dec rsi
  4054 00002F1D 4883FE00                	cmp rsi, 0
  4055 00002F21 75E5                    	jne .L_tc_recycle_frame_loop_001f
  4056                                  .L_tc_recycle_frame_done_001f:
  4057                                  ;this pop rbp in sot to the right place
  4058 00002F23 4989C9                  	mov r9, rcx
  4059 00002F26 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4060 00002F2E 4C01CC                  	add rsp, r9
  4061 00002F31 5D                      	pop rbp
  4062 00002F32 488B4D00                	mov rcx, qword [rbp]
  4063 00002F36 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4064 00002F3A FFE3                    	jmp rbx
  4065                                  
  4066                                          	.L_if_end_0004:
  4067 00002F3C C9                      	leave
  4068 00002F3D C22000                  	ret 8 * (2 + 2)
  4069                                  .L_lambda_simple_end_0021:	; new closure is in rax
  4070 00002F40 50                      	push rax
  4071 00002F41 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4072 00002F45 8F00                    	pop qword [rax]
  4073 00002F47 48B8-                   	mov rax, sob_void
  4073 00002F49 [0000000000000000] 
  4074                                  
  4075 00002F51 BF11000000              	mov rdi, (1 + 8 + 8)
  4076 00002F56 E89DE70000              	call malloc
  4077 00002F5B 50                      	push rax
  4078 00002F5C BF08000000              	mov rdi, 8 * 1
  4079 00002F61 E892E70000              	call malloc
  4080 00002F66 50                      	push rax
  4081 00002F67 BF10000000              	mov rdi, 8 * 2
  4082 00002F6C E887E70000              	call malloc
  4083 00002F71 488B7D10                	mov rdi, ENV
  4084 00002F75 4831F6                  	xor rsi, rsi
  4085 00002F78 4831D2                  	xor rdx, rdx
  4086 00002F7B 48FFC2                  	inc rdx
  4087                                  	.L_lambda_opt_env_loop_0002:
  4088                                  
  4089 00002F7E 4883FE01                        	cmp rsi, 1
  4090                                  
  4091 00002F82 7412                            	je .L_lambda_opt_env_end_0002
  4092 00002F84 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4093 00002F88 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4094 00002F8C 4883C201                	add rdx, 1
  4095 00002F90 4883C601                	add rsi, 1
  4096 00002F94 EBE8                    	jmp .L_lambda_opt_env_loop_0002
  4097                                  
  4098                                          	.L_lambda_opt_env_end_0002:
  4099 00002F96 5B                      	pop rbx
  4100 00002F97 4831F6                  	xor rsi, rsi
  4101                                  	.L_lambda_opt_params_loop_0002:
  4102                                  
  4103 00002F9A 4883FE01                        	cmp rsi, 1
  4104                                  
  4105 00002F9E 740F                            	je .L_lambda_opt_params_end_0002
  4106 00002FA0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4107 00002FA5 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4108 00002FA9 4883C601                	add rsi, 1
  4109 00002FAD EBEB                    	jmp .L_lambda_opt_params_loop_0002
  4110                                  
  4111                                          	.L_lambda_opt_params_end_0002:
  4112 00002FAF 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4113 00002FB2 4889C3                  	mov rbx, rax
  4114 00002FB5 58                      	pop rax
  4115 00002FB6 C60005                  	mov byte [rax], T_closure
  4116 00002FB9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4117 00002FBD 48C74009[CA2F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0002
  4118                                  
  4119 00002FC5 E987010000                      	jmp .L_lambda_opt_end_0002
  4120                                  
  4121                                          	.L_lambda_opt_code_0002:
  4122                                  
  4123 00002FCA 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  4124                                  
  4125 00002FD0 740D                            	je .L_lambda_opt_arity_check_exact_0002  ;same num_of_args
  4126                                  
  4127 00002FD2 7F65                            	jg .L_lambda_opt_arity_check_more_0002  ;greater num_of_args
  4128 00002FD4 FF742410                	push qword [rsp + 8 * 2]
  4129 00002FD8 6A01                    	push 1
  4130 00002FDA E9E6E60000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4131                                  .L_lambda_opt_arity_check_exact_0002:
  4132 00002FDF 4883EC08                	sub rsp, 8 * 1
  4133 00002FE3 488D7F10                	lea rdi, [rdi + (8 * 2)]
  4134 00002FE7 4889E7                  	mov rdi, rsp 
  4135 00002FEA 488B4708                	mov rax, qword [rdi + 8]
  4136 00002FEE 488907                  	mov qword [rdi], rax
  4137 00002FF1 488D7F08                	lea rdi, [rdi + 8]
  4138 00002FF5 488B4708                	mov rax, qword [rdi + 8]
  4139 00002FF9 488907                  	mov qword [rdi], rax
  4140 00002FFC 488D7F08                	lea rdi, [rdi + 8]
  4141 00003000 488B4708                	mov rax, qword [rdi + 8]
  4142 00003004 4889C1                  	mov rcx, rax
  4143 00003007 4883C001                	add rax, 1
  4144 0000300B 488907                  	mov qword [rdi], rax
  4145 0000300E 488D7F08                	lea rdi, [rdi + 8]
  4146                                  	.L_lambda_opt_stack_shrink_loop_0004:
  4147 00003012 4883F900                	cmp rcx, 0
  4148 00003016 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0004
  4149 00003018 4883E901                	sub rcx, 1
  4150 0000301C 488D4010                	lea rax, [rax + (8 * 2)]
  4151 00003020 488B4708                	mov rax, qword [rdi + 8]
  4152 00003024 488907                  	mov qword [rdi], rax
  4153 00003027 488D7F08                	lea rdi, [rdi + 8]
  4154 0000302B EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0004
  4155                                  
  4156                                          	.L_lambda_opt_stack_shrink_loop_exit_0004:
  4157 0000302D 48C707[01000000]        	mov qword [rdi], sob_nil
  4158 00003034 E997000000              	jmp .L_lambda_opt_stack_adjusted_0002
  4159                                  
  4160                                          	.L_lambda_opt_arity_check_more_0002:
  4161 00003039 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4162 0000303E 488D4EFF                	lea rcx, [rsi - 1]
  4163 00003042 49B8-                   	mov r8, sob_nil
  4163 00003044 [0100000000000000] 
  4164 0000304C 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4165 00003051 4889F2                  	mov rdx, rsi
  4166                                  	.L_lambda_opt_stack_shrink_loop_0005:
  4167 00003054 4883F900                	cmp rcx, 0
  4168 00003058 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0005
  4169 0000305A BF11000000              	mov rdi, 1 + (8 * 2)
  4170 0000305F E894E60000              	call malloc
  4171 00003064 C60021                  	mov byte [rax], T_pair
  4172 00003067 488B1E                  	mov rbx, qword [rsi]
  4173 0000306A 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4174 0000306E 4C894009                	mov SOB_PAIR_CDR(rax), r8
  4175 00003072 4883C6F8                	add rsi, -8
  4176 00003076 4883E901                	sub rcx, 1
  4177 0000307A 4989C0                  	mov r8, rax
  4178 0000307D EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0005
  4179                                  
  4180                                          	.L_lambda_opt_stack_shrink_loop_exit_0005:
  4181 0000307F 4C8902                  	mov qword [rdx], r8
  4182 00003082 4883EA08                	sub rdx, 8 * 1
  4183 00003086 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  4184                                  
  4185 0000308B B901000000                      	mov rcx, 1 
  4186                                  
  4187                                          	.L_lambda_opt_stack_shrink_loop_0006:
  4188 00003090 4883F900                	cmp rcx, 0
  4189 00003094 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0006
  4190 00003096 488B06                  	mov rax, qword [rsi]
  4191 00003099 488902                  	mov qword [rdx], rax
  4192 0000309C 488D76F8                	lea rsi, [rsi - 8]
  4193 000030A0 4883C2F8                	add rdx, -8
  4194 000030A4 4883C1FF                	add rcx, -1
  4195 000030A8 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0006
  4196                                  
  4197                                          	.L_lambda_opt_stack_shrink_loop_exit_0006:
  4198                                  
  4199 000030AA 48C70202000000                  	mov qword [rdx], 1 + 1
  4200 000030B1 4883C6F8                	add rsi, -8
  4201 000030B5 4883C2F8                	add rdx, -8
  4202 000030B9 488B06                  	mov rax, qword [rsi]
  4203 000030BC 488902                  	mov qword [rdx], rax
  4204 000030BF 4883C2F8                	add rdx, -8
  4205 000030C3 488D76F8                	lea rsi, [rsi - 8]
  4206 000030C7 488B06                  	mov rax, qword [rsi]
  4207 000030CA 488902                  	mov qword [rdx], rax
  4208 000030CD 4889D4                  	mov rsp, rdx
  4209                                  	.L_lambda_opt_stack_adjusted_0002:
  4210 000030D0 C8000000                	enter 0, 0
  4211 000030D4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4212 000030D8 50                      	push rax
  4213 000030D9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4214 000030DD 50                      	push rax
  4215 000030DE 6A02                    	push 2
  4216 000030E0 488B4510                	mov rax, qword [rbp + 8 * 2]
  4217                                  
  4218 000030E4 488B00                                            	mov rax, qword[rax + 8 * 0]
  4219                                  
  4220 000030E7 488B00                                            	mov rax, qword[rax + 8 * 0]
  4221 000030EA 488B00                  	mov rax, qword [rax]
  4222                                  .L_applic_TC_0020:
  4223 000030ED 803805                  	cmp byte [rax], T_closure
  4224 000030F0 0F85B7F50000            	jne L_code_ptr_error
  4225 000030F6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4226 000030FA 53                      	push rbx
  4227 000030FB FF7508                  	push qword [rbp + 8]
  4228 000030FE FF7500                  	push qword [rbp]
  4229 00003101 488B4D18                	mov rcx, [rbp + 3 * 8]
  4230 00003105 488B542418              	mov rdx, [rsp + 3 * 8]
  4231 0000310A 488D7204                	lea rsi, [rdx + 4]
  4232 0000310E 4C8D4EFF                	lea r9, [rsi - 1]
  4233 00003112 488D7903                	lea rdi, [rcx + 3]
  4234 00003116 4D31C0                  	xor r8, r8
  4235                                  .L_tc_recycle_frame_loop_0020:
  4236 00003119 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4237 0000311D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4238 00003122 49FFC9                  	dec r9
  4239 00003125 4D31C0                  	xor r8, r8
  4240 00003128 48FFCF                  	dec rdi
  4241 0000312B 48FFCE                  	dec rsi
  4242 0000312E 4883FE00                	cmp rsi, 0
  4243 00003132 75E5                    	jne .L_tc_recycle_frame_loop_0020
  4244                                  .L_tc_recycle_frame_done_0020:
  4245                                  ;this pop rbp in sot to the right place
  4246 00003134 4989C9                  	mov r9, rcx
  4247 00003137 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4248 0000313F 4C01CC                  	add rsp, r9
  4249 00003142 5D                      	pop rbp
  4250 00003143 488B4D00                	mov rcx, qword [rbp]
  4251 00003147 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4252 0000314B FFE3                    	jmp rbx
  4253 0000314D C9                      	leave
  4254 0000314E C22000                  	ret 8 * (2 + 2)
  4255                                  .L_lambda_opt_end_0002:	; new closure is in rax
  4256 00003151 C9                      	leave
  4257 00003152 C21800                  	ret 8 * (2 + 1)
  4258                                  .L_lambda_simple_end_0020:	; new closure is in rax
  4259                                  	assert_closure(rax)
    42 00003155 803805              <1>  cmp byte [%1], %2
    43 00003158 0F858EFD0000        <1>  jne L_error_incorrect_type
  4260 0000315E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4261 00003161 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4262 00003164 48890425[C0020000]      	mov qword [free_var_88], rax
  4263 0000316C 48B8-                   	mov rax, sob_void
  4263 0000316E [0000000000000000] 
  4264                                  
  4265 00003176 4889C7                  	mov rdi, rax
  4266 00003179 E88BE50000              	call print_sexpr_if_not_void
  4267                                  
  4268 0000317E 48B8-                   	mov rax,L_constants + 23
  4268 00003180 [1700000000000000] 
  4269 00003188 50                      	push rax
  4270 00003189 6A01                    	push 1
  4271 0000318B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4272 00003190 E863E50000              	call malloc
  4273 00003195 50                      	push rax
  4274 00003196 BF00000000              	mov rdi, 8 * 0	; new rib
  4275 0000319B E858E50000              	call malloc
  4276 000031A0 50                      	push rax
  4277 000031A1 BF08000000              	mov rdi, 8 * 1	; extended env
  4278 000031A6 E84DE50000              	call malloc
  4279 000031AB 488B7D10                	mov rdi, ENV
  4280 000031AF BE00000000              	mov rsi, 0
  4281 000031B4 BA01000000              	mov rdx, 1
  4282                                  .L_lambda_simple_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  4283 000031B9 4883FE00                	cmp rsi, 0
  4284 000031BD 7410                    	je .L_lambda_simple_env_end_0022
  4285 000031BF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4286 000031C3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4287 000031C7 48FFC6                  	inc rsi
  4288 000031CA 48FFC2                  	inc rdx
  4289 000031CD EBEA                    	jmp .L_lambda_simple_env_loop_0022
  4290                                  .L_lambda_simple_env_end_0022:
  4291 000031CF 5B                      	pop rbx
  4292 000031D0 BE00000000              	mov rsi, 0
  4293                                  .L_lambda_simple_params_loop_0022:	; copy params
  4294 000031D5 4883FE00                	cmp rsi, 0
  4295 000031D9 740E                    	je .L_lambda_simple_params_end_0022
  4296 000031DB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4297 000031E0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4298 000031E4 48FFC6                  	inc rsi
  4299 000031E7 EBEC                    	jmp .L_lambda_simple_params_loop_0022
  4300                                  .L_lambda_simple_params_end_0022:
  4301 000031E9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4302 000031EC 4889C3                  	mov rbx, rax
  4303 000031EF 58                      	pop rax
  4304 000031F0 C60005                  	mov byte [rax], T_closure
  4305 000031F3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4306 000031F7 48C74009[04320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0022
  4307 000031FF E92E040000              	jmp .L_lambda_simple_end_0022
  4308                                  .L_lambda_simple_code_0022:	; lambda-simple body
  4309 00003204 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4310 0000320A 740B                    	je .L_lambda_simple_arity_check_ok_0022
  4311 0000320C FF742410                	push qword [rsp + 8 * 2]
  4312 00003210 6A01                    	push 1
  4313 00003212 E99AE40000              	jmp L_error_incorrect_arity_simple
  4314                                  .L_lambda_simple_arity_check_ok_0022:
  4315 00003217 C8000000                	enter 0, 0
  4316 0000321B BF08000000              	mov rdi, 8
  4317 00003220 E8D3E40000              	call malloc
  4318 00003225 488B5D20                	mov rbx, PARAM(0)
  4319 00003229 488918                  	mov qword [rax], rbx
  4320 0000322C 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4321                                  
  4322 00003230 48B8-                            	mov rax, sob_void
  4322 00003232 [0000000000000000] 
  4323                                  
  4324 0000323A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4325 0000323F E8B4E40000              	call malloc
  4326 00003244 50                      	push rax
  4327 00003245 BF08000000              	mov rdi, 8 * 1	; new rib
  4328 0000324A E8A9E40000              	call malloc
  4329 0000324F 50                      	push rax
  4330 00003250 BF10000000              	mov rdi, 8 * 2	; extended env
  4331 00003255 E89EE40000              	call malloc
  4332 0000325A 488B7D10                	mov rdi, ENV
  4333 0000325E BE00000000              	mov rsi, 0
  4334 00003263 BA01000000              	mov rdx, 1
  4335                                  .L_lambda_simple_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  4336 00003268 4883FE01                	cmp rsi, 1
  4337 0000326C 7410                    	je .L_lambda_simple_env_end_0023
  4338 0000326E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4339 00003272 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4340 00003276 48FFC6                  	inc rsi
  4341 00003279 48FFC2                  	inc rdx
  4342 0000327C EBEA                    	jmp .L_lambda_simple_env_loop_0023
  4343                                  .L_lambda_simple_env_end_0023:
  4344 0000327E 5B                      	pop rbx
  4345 0000327F BE00000000              	mov rsi, 0
  4346                                  .L_lambda_simple_params_loop_0023:	; copy params
  4347 00003284 4883FE01                	cmp rsi, 1
  4348 00003288 740E                    	je .L_lambda_simple_params_end_0023
  4349 0000328A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4350 0000328F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4351 00003293 48FFC6                  	inc rsi
  4352 00003296 EBEC                    	jmp .L_lambda_simple_params_loop_0023
  4353                                  .L_lambda_simple_params_end_0023:
  4354 00003298 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4355 0000329B 4889C3                  	mov rbx, rax
  4356 0000329E 58                      	pop rax
  4357 0000329F C60005                  	mov byte [rax], T_closure
  4358 000032A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4359 000032A6 48C74009[B3320000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0023
  4360 000032AE E917010000              	jmp .L_lambda_simple_end_0023
  4361                                  .L_lambda_simple_code_0023:	; lambda-simple body
  4362 000032B3 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4363 000032B9 740B                    	je .L_lambda_simple_arity_check_ok_0023
  4364 000032BB FF742410                	push qword [rsp + 8 * 2]
  4365 000032BF 6A02                    	push 2
  4366 000032C1 E9EBE30000              	jmp L_error_incorrect_arity_simple
  4367                                  .L_lambda_simple_arity_check_ok_0023:
  4368 000032C6 C8000000                	enter 0, 0
  4369 000032CA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4370 000032CE 50                      	push rax
  4371 000032CF 6A01                    	push 1
  4372 000032D1 488B0425[08000000]      	mov rax, qword [free_var_1]
  4373                                  	assert_closure(rax)
    42 000032D9 803805              <1>  cmp byte [%1], %2
    43 000032DC 0F850AFC0000        <1>  jne L_error_incorrect_type
  4374 000032E2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4375 000032E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4376                                  
  4377 000032E8 483D[02000000]                  	cmp rax, sob_boolean_false
  4378                                  
  4379 000032EE 0F84CE000000                    	je .L_if_else_0005
  4380 000032F4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4381 000032F8 50                      	push rax
  4382 000032F9 6A01                    	push 1
  4383 000032FB 488B0425[88000000]      	mov rax, qword [free_var_17]
  4384                                  	assert_closure(rax)
    42 00003303 803805              <1>  cmp byte [%1], %2
    43 00003306 0F85E0FB0000        <1>  jne L_error_incorrect_type
  4385 0000330C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4386 0000330F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4387 00003312 50                      	push rax
  4388 00003313 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4389 00003317 50                      	push rax
  4390 00003318 6A01                    	push 1
  4391 0000331A 488B0425[80000000]      	mov rax, qword [free_var_16]
  4392                                  	assert_closure(rax)
    42 00003322 803805              <1>  cmp byte [%1], %2
    43 00003325 0F85C1FB0000        <1>  jne L_error_incorrect_type
  4393 0000332B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4394 0000332E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4395 00003331 50                      	push rax
  4396 00003332 6A02                    	push 2
  4397 00003334 488B4510                	mov rax, qword [rbp + 8 * 2]
  4398                                  
  4399 00003338 488B00                                            	mov rax, qword[rax + 8 * 0]
  4400                                  
  4401 0000333B 488B00                                            	mov rax, qword[rax + 8 * 0]
  4402 0000333E 488B00                  	mov rax, qword [rax]
  4403                                  	assert_closure(rax)
    42 00003341 803805              <1>  cmp byte [%1], %2
    43 00003344 0F85A2FB0000        <1>  jne L_error_incorrect_type
  4404 0000334A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4405 0000334D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4406 00003350 50                      	push rax
  4407 00003351 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4408 00003355 50                      	push rax
  4409 00003356 6A02                    	push 2
  4410 00003358 488B0425[68000000]      	mov rax, qword [free_var_13]
  4411                                  .L_applic_TC_0021:
  4412 00003360 803805                  	cmp byte [rax], T_closure
  4413 00003363 0F8544F30000            	jne L_code_ptr_error
  4414 00003369 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4415 0000336D 53                      	push rbx
  4416 0000336E FF7508                  	push qword [rbp + 8]
  4417 00003371 FF7500                  	push qword [rbp]
  4418 00003374 488B4D18                	mov rcx, [rbp + 3 * 8]
  4419 00003378 488B542418              	mov rdx, [rsp + 3 * 8]
  4420 0000337D 488D7204                	lea rsi, [rdx + 4]
  4421 00003381 4C8D4EFF                	lea r9, [rsi - 1]
  4422 00003385 488D7903                	lea rdi, [rcx + 3]
  4423 00003389 4D31C0                  	xor r8, r8
  4424                                  .L_tc_recycle_frame_loop_0021:
  4425 0000338C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4426 00003390 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4427 00003395 49FFC9                  	dec r9
  4428 00003398 4D31C0                  	xor r8, r8
  4429 0000339B 48FFCF                  	dec rdi
  4430 0000339E 48FFCE                  	dec rsi
  4431 000033A1 4883FE00                	cmp rsi, 0
  4432 000033A5 75E5                    	jne .L_tc_recycle_frame_loop_0021
  4433                                  .L_tc_recycle_frame_done_0021:
  4434                                  ;this pop rbp in sot to the right place
  4435 000033A7 4989C9                  	mov r9, rcx
  4436 000033AA 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4437 000033B2 4C01CC                  	add rsp, r9
  4438 000033B5 5D                      	pop rbp
  4439 000033B6 488B4D00                	mov rcx, qword [rbp]
  4440 000033BA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4441 000033BE FFE3                    	jmp rbx
  4442                                  
  4443 000033C0 EB04                            	jmp .L_if_end_0005
  4444                                  
  4445                                          	.L_if_else_0005:
  4446 000033C2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4447                                  
  4448                                          	.L_if_end_0005:
  4449 000033C6 C9                      	leave
  4450 000033C7 C22000                  	ret 8 * (2 + 2)
  4451                                  .L_lambda_simple_end_0023:	; new closure is in rax
  4452 000033CA 50                      	push rax
  4453 000033CB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4454 000033CF 8F00                    	pop qword [rax]
  4455 000033D1 48B8-                   	mov rax, sob_void
  4455 000033D3 [0000000000000000] 
  4456                                  
  4457 000033DB BF11000000              	mov rdi, (1 + 8 + 8)
  4458 000033E0 E813E30000              	call malloc
  4459 000033E5 50                      	push rax
  4460 000033E6 BF08000000              	mov rdi, 8 * 1
  4461 000033EB E808E30000              	call malloc
  4462 000033F0 50                      	push rax
  4463 000033F1 BF10000000              	mov rdi, 8 * 2
  4464 000033F6 E8FDE20000              	call malloc
  4465 000033FB 488B7D10                	mov rdi, ENV
  4466 000033FF 4831F6                  	xor rsi, rsi
  4467 00003402 4831D2                  	xor rdx, rdx
  4468 00003405 48FFC2                  	inc rdx
  4469                                  	.L_lambda_opt_env_loop_0003:
  4470                                  
  4471 00003408 4883FE01                        	cmp rsi, 1
  4472                                  
  4473 0000340C 7412                            	je .L_lambda_opt_env_end_0003
  4474 0000340E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4475 00003412 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4476 00003416 4883C201                	add rdx, 1
  4477 0000341A 4883C601                	add rsi, 1
  4478 0000341E EBE8                    	jmp .L_lambda_opt_env_loop_0003
  4479                                  
  4480                                          	.L_lambda_opt_env_end_0003:
  4481 00003420 5B                      	pop rbx
  4482 00003421 4831F6                  	xor rsi, rsi
  4483                                  	.L_lambda_opt_params_loop_0003:
  4484                                  
  4485 00003424 4883FE01                        	cmp rsi, 1
  4486                                  
  4487 00003428 740F                            	je .L_lambda_opt_params_end_0003
  4488 0000342A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4489 0000342F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4490 00003433 4883C601                	add rsi, 1
  4491 00003437 EBEB                    	jmp .L_lambda_opt_params_loop_0003
  4492                                  
  4493                                          	.L_lambda_opt_params_end_0003:
  4494 00003439 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4495 0000343C 4889C3                  	mov rbx, rax
  4496 0000343F 58                      	pop rax
  4497 00003440 C60005                  	mov byte [rax], T_closure
  4498 00003443 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4499 00003447 48C74009[54340000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0003
  4500                                  
  4501 0000344F E9DA010000                      	jmp .L_lambda_opt_end_0003
  4502                                  
  4503                                          	.L_lambda_opt_code_0003:
  4504                                  
  4505 00003454 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  4506                                  
  4507 0000345A 740D                            	je .L_lambda_opt_arity_check_exact_0003  ;same num_of_args
  4508                                  
  4509 0000345C 7F65                            	jg .L_lambda_opt_arity_check_more_0003  ;greater num_of_args
  4510 0000345E FF742410                	push qword [rsp + 8 * 2]
  4511 00003462 6A01                    	push 1
  4512 00003464 E95CE20000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4513                                  .L_lambda_opt_arity_check_exact_0003:
  4514 00003469 4883EC08                	sub rsp, 8 * 1
  4515 0000346D 488D7F10                	lea rdi, [rdi + (8 * 2)]
  4516 00003471 4889E7                  	mov rdi, rsp 
  4517 00003474 488B4708                	mov rax, qword [rdi + 8]
  4518 00003478 488907                  	mov qword [rdi], rax
  4519 0000347B 488D7F08                	lea rdi, [rdi + 8]
  4520 0000347F 488B4708                	mov rax, qword [rdi + 8]
  4521 00003483 488907                  	mov qword [rdi], rax
  4522 00003486 488D7F08                	lea rdi, [rdi + 8]
  4523 0000348A 488B4708                	mov rax, qword [rdi + 8]
  4524 0000348E 4889C1                  	mov rcx, rax
  4525 00003491 4883C001                	add rax, 1
  4526 00003495 488907                  	mov qword [rdi], rax
  4527 00003498 488D7F08                	lea rdi, [rdi + 8]
  4528                                  	.L_lambda_opt_stack_shrink_loop_0007:
  4529 0000349C 4883F900                	cmp rcx, 0
  4530 000034A0 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0007
  4531 000034A2 4883E901                	sub rcx, 1
  4532 000034A6 488D4010                	lea rax, [rax + (8 * 2)]
  4533 000034AA 488B4708                	mov rax, qword [rdi + 8]
  4534 000034AE 488907                  	mov qword [rdi], rax
  4535 000034B1 488D7F08                	lea rdi, [rdi + 8]
  4536 000034B5 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0007
  4537                                  
  4538                                          	.L_lambda_opt_stack_shrink_loop_exit_0007:
  4539 000034B7 48C707[01000000]        	mov qword [rdi], sob_nil
  4540 000034BE E997000000              	jmp .L_lambda_opt_stack_adjusted_0003
  4541                                  
  4542                                          	.L_lambda_opt_arity_check_more_0003:
  4543 000034C3 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4544 000034C8 488D4EFF                	lea rcx, [rsi - 1]
  4545 000034CC 49B8-                   	mov r8, sob_nil
  4545 000034CE [0100000000000000] 
  4546 000034D6 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4547 000034DB 4889F2                  	mov rdx, rsi
  4548                                  	.L_lambda_opt_stack_shrink_loop_0008:
  4549 000034DE 4883F900                	cmp rcx, 0
  4550 000034E2 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0008
  4551 000034E4 BF11000000              	mov rdi, 1 + (8 * 2)
  4552 000034E9 E80AE20000              	call malloc
  4553 000034EE C60021                  	mov byte [rax], T_pair
  4554 000034F1 488B1E                  	mov rbx, qword [rsi]
  4555 000034F4 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4556 000034F8 4C894009                	mov SOB_PAIR_CDR(rax), r8
  4557 000034FC 4883C6F8                	add rsi, -8
  4558 00003500 4883E901                	sub rcx, 1
  4559 00003504 4989C0                  	mov r8, rax
  4560 00003507 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0008
  4561                                  
  4562                                          	.L_lambda_opt_stack_shrink_loop_exit_0008:
  4563 00003509 4C8902                  	mov qword [rdx], r8
  4564 0000350C 4883EA08                	sub rdx, 8 * 1
  4565 00003510 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  4566                                  
  4567 00003515 B901000000                      	mov rcx, 1 
  4568                                  
  4569                                          	.L_lambda_opt_stack_shrink_loop_0009:
  4570 0000351A 4883F900                	cmp rcx, 0
  4571 0000351E 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0009
  4572 00003520 488B06                  	mov rax, qword [rsi]
  4573 00003523 488902                  	mov qword [rdx], rax
  4574 00003526 488D76F8                	lea rsi, [rsi - 8]
  4575 0000352A 4883C2F8                	add rdx, -8
  4576 0000352E 4883C1FF                	add rcx, -1
  4577 00003532 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0009
  4578                                  
  4579                                          	.L_lambda_opt_stack_shrink_loop_exit_0009:
  4580                                  
  4581 00003534 48C70202000000                  	mov qword [rdx], 1 + 1
  4582 0000353B 4883C6F8                	add rsi, -8
  4583 0000353F 4883C2F8                	add rdx, -8
  4584 00003543 488B06                  	mov rax, qword [rsi]
  4585 00003546 488902                  	mov qword [rdx], rax
  4586 00003549 4883C2F8                	add rdx, -8
  4587 0000354D 488D76F8                	lea rsi, [rsi - 8]
  4588 00003551 488B06                  	mov rax, qword [rsi]
  4589 00003554 488902                  	mov qword [rdx], rax
  4590 00003557 4889D4                  	mov rsp, rdx
  4591                                  	.L_lambda_opt_stack_adjusted_0003:
  4592 0000355A C8000000                	enter 0, 0
  4593 0000355E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4594 00003562 50                      	push rax
  4595 00003563 6A01                    	push 1
  4596 00003565 488B0425[88000000]      	mov rax, qword [free_var_17]
  4597                                  	assert_closure(rax)
    42 0000356D 803805              <1>  cmp byte [%1], %2
    43 00003570 0F8576F90000        <1>  jne L_error_incorrect_type
  4598 00003576 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4599 00003579 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4600 0000357C 50                      	push rax
  4601 0000357D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  4602 00003581 50                      	push rax
  4603 00003582 6A01                    	push 1
  4604 00003584 488B0425[80000000]      	mov rax, qword [free_var_16]
  4605                                  	assert_closure(rax)
    42 0000358C 803805              <1>  cmp byte [%1], %2
    43 0000358F 0F8557F90000        <1>  jne L_error_incorrect_type
  4606 00003595 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4607 00003598 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4608 0000359B 50                      	push rax
  4609 0000359C 6A02                    	push 2
  4610 0000359E 488B4510                	mov rax, qword [rbp + 8 * 2]
  4611                                  
  4612 000035A2 488B00                                            	mov rax, qword[rax + 8 * 0]
  4613                                  
  4614 000035A5 488B00                                            	mov rax, qword[rax + 8 * 0]
  4615 000035A8 488B00                  	mov rax, qword [rax]
  4616                                  	assert_closure(rax)
    42 000035AB 803805              <1>  cmp byte [%1], %2
    43 000035AE 0F8538F90000        <1>  jne L_error_incorrect_type
  4617 000035B4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4618 000035B7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4619 000035BA 50                      	push rax
  4620 000035BB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4621 000035BF 50                      	push rax
  4622 000035C0 6A02                    	push 2
  4623 000035C2 488B0425[E8000000]      	mov rax, qword [free_var_29]
  4624                                  .L_applic_TC_0022:
  4625 000035CA 803805                  	cmp byte [rax], T_closure
  4626 000035CD 0F85DAF00000            	jne L_code_ptr_error
  4627 000035D3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4628 000035D7 53                      	push rbx
  4629 000035D8 FF7508                  	push qword [rbp + 8]
  4630 000035DB FF7500                  	push qword [rbp]
  4631 000035DE 488B4D18                	mov rcx, [rbp + 3 * 8]
  4632 000035E2 488B542418              	mov rdx, [rsp + 3 * 8]
  4633 000035E7 488D7204                	lea rsi, [rdx + 4]
  4634 000035EB 4C8D4EFF                	lea r9, [rsi - 1]
  4635 000035EF 488D7903                	lea rdi, [rcx + 3]
  4636 000035F3 4D31C0                  	xor r8, r8
  4637                                  .L_tc_recycle_frame_loop_0022:
  4638 000035F6 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4639 000035FA 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4640 000035FF 49FFC9                  	dec r9
  4641 00003602 4D31C0                  	xor r8, r8
  4642 00003605 48FFCF                  	dec rdi
  4643 00003608 48FFCE                  	dec rsi
  4644 0000360B 4883FE00                	cmp rsi, 0
  4645 0000360F 75E5                    	jne .L_tc_recycle_frame_loop_0022
  4646                                  .L_tc_recycle_frame_done_0022:
  4647                                  ;this pop rbp in sot to the right place
  4648 00003611 4989C9                  	mov r9, rcx
  4649 00003614 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4650 0000361C 4C01CC                  	add rsp, r9
  4651 0000361F 5D                      	pop rbp
  4652 00003620 488B4D00                	mov rcx, qword [rbp]
  4653 00003624 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4654 00003628 FFE3                    	jmp rbx
  4655 0000362A C9                      	leave
  4656 0000362B C22000                  	ret 8 * (2 + 2)
  4657                                  .L_lambda_opt_end_0003:	; new closure is in rax
  4658 0000362E C9                      	leave
  4659 0000362F C21800                  	ret 8 * (2 + 1)
  4660                                  .L_lambda_simple_end_0022:	; new closure is in rax
  4661                                  	assert_closure(rax)
    42 00003632 803805              <1>  cmp byte [%1], %2
    43 00003635 0F85B1F80000        <1>  jne L_error_incorrect_type
  4662 0000363B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4663 0000363E FF5009                  	call SOB_CLOSURE_CODE(rax)
  4664 00003641 48890425[C8020000]      	mov qword [free_var_89], rax
  4665 00003649 48B8-                   	mov rax, sob_void
  4665 0000364B [0000000000000000] 
  4666                                  
  4667 00003653 4889C7                  	mov rdi, rax
  4668 00003656 E8AEE00000              	call print_sexpr_if_not_void
  4669                                  
  4670 0000365B BF11000000              	mov rdi, (1 + 8 + 8)
  4671 00003660 E893E00000              	call malloc
  4672 00003665 50                      	push rax
  4673 00003666 BF00000000              	mov rdi, 8 * 0
  4674 0000366B E888E00000              	call malloc
  4675 00003670 50                      	push rax
  4676 00003671 BF08000000              	mov rdi, 8 * 1
  4677 00003676 E87DE00000              	call malloc
  4678 0000367B 488B7D10                	mov rdi, ENV
  4679 0000367F 4831F6                  	xor rsi, rsi
  4680 00003682 4831D2                  	xor rdx, rdx
  4681 00003685 48FFC2                  	inc rdx
  4682                                  	.L_lambda_opt_env_loop_0004:
  4683                                  
  4684 00003688 4883FE00                        	cmp rsi, 0
  4685                                  
  4686 0000368C 7412                            	je .L_lambda_opt_env_end_0004
  4687 0000368E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4688 00003692 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4689 00003696 4883C201                	add rdx, 1
  4690 0000369A 4883C601                	add rsi, 1
  4691 0000369E EBE8                    	jmp .L_lambda_opt_env_loop_0004
  4692                                  
  4693                                          	.L_lambda_opt_env_end_0004:
  4694 000036A0 5B                      	pop rbx
  4695 000036A1 4831F6                  	xor rsi, rsi
  4696                                  	.L_lambda_opt_params_loop_0004:
  4697                                  
  4698 000036A4 4883FE00                        	cmp rsi, 0
  4699                                  
  4700 000036A8 740F                            	je .L_lambda_opt_params_end_0004
  4701 000036AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4702 000036AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4703 000036B3 4883C601                	add rsi, 1
  4704 000036B7 EBEB                    	jmp .L_lambda_opt_params_loop_0004
  4705                                  
  4706                                          	.L_lambda_opt_params_end_0004:
  4707 000036B9 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  4708 000036BC 4889C3                  	mov rbx, rax
  4709 000036BF 58                      	pop rax
  4710 000036C0 C60005                  	mov byte [rax], T_closure
  4711 000036C3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4712 000036C7 48C74009[D4360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
  4713                                  
  4714 000036CF E988040000                      	jmp .L_lambda_opt_end_0004
  4715                                  
  4716                                          	.L_lambda_opt_code_0004:
  4717                                  
  4718 000036D4 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  4719                                  
  4720 000036DA 740D                            	je .L_lambda_opt_arity_check_exact_0004  ;same num_of_args
  4721                                  
  4722 000036DC 7F65                            	jg .L_lambda_opt_arity_check_more_0004  ;greater num_of_args
  4723 000036DE FF742410                	push qword [rsp + 8 * 2]
  4724 000036E2 6A01                    	push 1
  4725 000036E4 E9DCDF0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  4726                                  .L_lambda_opt_arity_check_exact_0004:
  4727 000036E9 4883EC08                	sub rsp, 8 * 1
  4728 000036ED 488D7F10                	lea rdi, [rdi + (8 * 2)]
  4729 000036F1 4889E7                  	mov rdi, rsp 
  4730 000036F4 488B4708                	mov rax, qword [rdi + 8]
  4731 000036F8 488907                  	mov qword [rdi], rax
  4732 000036FB 488D7F08                	lea rdi, [rdi + 8]
  4733 000036FF 488B4708                	mov rax, qword [rdi + 8]
  4734 00003703 488907                  	mov qword [rdi], rax
  4735 00003706 488D7F08                	lea rdi, [rdi + 8]
  4736 0000370A 488B4708                	mov rax, qword [rdi + 8]
  4737 0000370E 4889C1                  	mov rcx, rax
  4738 00003711 4883C001                	add rax, 1
  4739 00003715 488907                  	mov qword [rdi], rax
  4740 00003718 488D7F08                	lea rdi, [rdi + 8]
  4741                                  	.L_lambda_opt_stack_shrink_loop_000a:
  4742 0000371C 4883F900                	cmp rcx, 0
  4743 00003720 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_000a
  4744 00003722 4883E901                	sub rcx, 1
  4745 00003726 488D4010                	lea rax, [rax + (8 * 2)]
  4746 0000372A 488B4708                	mov rax, qword [rdi + 8]
  4747 0000372E 488907                  	mov qword [rdi], rax
  4748 00003731 488D7F08                	lea rdi, [rdi + 8]
  4749 00003735 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_000a
  4750                                  
  4751                                          	.L_lambda_opt_stack_shrink_loop_exit_000a:
  4752 00003737 48C707[01000000]        	mov qword [rdi], sob_nil
  4753 0000373E E997000000              	jmp .L_lambda_opt_stack_adjusted_0004
  4754                                  
  4755                                          	.L_lambda_opt_arity_check_more_0004:
  4756 00003743 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  4757 00003748 488D4EFF                	lea rcx, [rsi - 1]
  4758 0000374C 49B8-                   	mov r8, sob_nil
  4758 0000374E [0100000000000000] 
  4759 00003756 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  4760 0000375B 4889F2                  	mov rdx, rsi
  4761                                  	.L_lambda_opt_stack_shrink_loop_000b:
  4762 0000375E 4883F900                	cmp rcx, 0
  4763 00003762 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_000b
  4764 00003764 BF11000000              	mov rdi, 1 + (8 * 2)
  4765 00003769 E88ADF0000              	call malloc
  4766 0000376E C60021                  	mov byte [rax], T_pair
  4767 00003771 488B1E                  	mov rbx, qword [rsi]
  4768 00003774 48895801                	mov SOB_PAIR_CAR(rax), rbx
  4769 00003778 4C894009                	mov SOB_PAIR_CDR(rax), r8
  4770 0000377C 4883C6F8                	add rsi, -8
  4771 00003780 4883E901                	sub rcx, 1
  4772 00003784 4989C0                  	mov r8, rax
  4773 00003787 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_000b
  4774                                  
  4775                                          	.L_lambda_opt_stack_shrink_loop_exit_000b:
  4776 00003789 4C8902                  	mov qword [rdx], r8
  4777 0000378C 4883EA08                	sub rdx, 8 * 1
  4778 00003790 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  4779                                  
  4780 00003795 B901000000                      	mov rcx, 1 
  4781                                  
  4782                                          	.L_lambda_opt_stack_shrink_loop_000c:
  4783 0000379A 4883F900                	cmp rcx, 0
  4784 0000379E 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_000c
  4785 000037A0 488B06                  	mov rax, qword [rsi]
  4786 000037A3 488902                  	mov qword [rdx], rax
  4787 000037A6 488D76F8                	lea rsi, [rsi - 8]
  4788 000037AA 4883C2F8                	add rdx, -8
  4789 000037AE 4883C1FF                	add rcx, -1
  4790 000037B2 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_000c
  4791                                  
  4792                                          	.L_lambda_opt_stack_shrink_loop_exit_000c:
  4793                                  
  4794 000037B4 48C70202000000                  	mov qword [rdx], 1 + 1
  4795 000037BB 4883C6F8                	add rsi, -8
  4796 000037BF 4883C2F8                	add rdx, -8
  4797 000037C3 488B06                  	mov rax, qword [rsi]
  4798 000037C6 488902                  	mov qword [rdx], rax
  4799 000037C9 4883C2F8                	add rdx, -8
  4800 000037CD 488D76F8                	lea rsi, [rsi - 8]
  4801 000037D1 488B06                  	mov rax, qword [rsi]
  4802 000037D4 488902                  	mov qword [rdx], rax
  4803 000037D7 4889D4                  	mov rsp, rdx
  4804                                  	.L_lambda_opt_stack_adjusted_0004:
  4805 000037DA C8000000                	enter 0, 0
  4806 000037DE 48B8-                   	mov rax,L_constants + 23
  4806 000037E0 [1700000000000000] 
  4807 000037E8 50                      	push rax
  4808 000037E9 6A01                    	push 1
  4809 000037EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4810 000037F0 E803DF0000              	call malloc
  4811 000037F5 50                      	push rax
  4812 000037F6 BF10000000              	mov rdi, 8 * 2	; new rib
  4813 000037FB E8F8DE0000              	call malloc
  4814 00003800 50                      	push rax
  4815 00003801 BF10000000              	mov rdi, 8 * 2	; extended env
  4816 00003806 E8EDDE0000              	call malloc
  4817 0000380B 488B7D10                	mov rdi, ENV
  4818 0000380F BE00000000              	mov rsi, 0
  4819 00003814 BA01000000              	mov rdx, 1
  4820                                  .L_lambda_simple_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  4821 00003819 4883FE01                	cmp rsi, 1
  4822 0000381D 7410                    	je .L_lambda_simple_env_end_0024
  4823 0000381F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4824 00003823 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4825 00003827 48FFC6                  	inc rsi
  4826 0000382A 48FFC2                  	inc rdx
  4827 0000382D EBEA                    	jmp .L_lambda_simple_env_loop_0024
  4828                                  .L_lambda_simple_env_end_0024:
  4829 0000382F 5B                      	pop rbx
  4830 00003830 BE00000000              	mov rsi, 0
  4831                                  .L_lambda_simple_params_loop_0024:	; copy params
  4832 00003835 4883FE02                	cmp rsi, 2
  4833 00003839 740E                    	je .L_lambda_simple_params_end_0024
  4834 0000383B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4835 00003840 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4836 00003844 48FFC6                  	inc rsi
  4837 00003847 EBEC                    	jmp .L_lambda_simple_params_loop_0024
  4838                                  .L_lambda_simple_params_end_0024:
  4839 00003849 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4840 0000384C 4889C3                  	mov rbx, rax
  4841 0000384F 58                      	pop rax
  4842 00003850 C60005                  	mov byte [rax], T_closure
  4843 00003853 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4844 00003857 48C74009[64380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0024
  4845 0000385F E994020000              	jmp .L_lambda_simple_end_0024
  4846                                  .L_lambda_simple_code_0024:	; lambda-simple body
  4847 00003864 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4848 0000386A 740B                    	je .L_lambda_simple_arity_check_ok_0024
  4849 0000386C FF742410                	push qword [rsp + 8 * 2]
  4850 00003870 6A01                    	push 1
  4851 00003872 E93ADE0000              	jmp L_error_incorrect_arity_simple
  4852                                  .L_lambda_simple_arity_check_ok_0024:
  4853 00003877 C8000000                	enter 0, 0
  4854 0000387B BF08000000              	mov rdi, 8
  4855 00003880 E873DE0000              	call malloc
  4856 00003885 488B5D20                	mov rbx, PARAM(0)
  4857 00003889 488918                  	mov qword [rax], rbx
  4858 0000388C 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4859                                  
  4860 00003890 48B8-                            	mov rax, sob_void
  4860 00003892 [0000000000000000] 
  4861                                  
  4862 0000389A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4863 0000389F E854DE0000              	call malloc
  4864 000038A4 50                      	push rax
  4865 000038A5 BF08000000              	mov rdi, 8 * 1	; new rib
  4866 000038AA E849DE0000              	call malloc
  4867 000038AF 50                      	push rax
  4868 000038B0 BF18000000              	mov rdi, 8 * 3	; extended env
  4869 000038B5 E83EDE0000              	call malloc
  4870 000038BA 488B7D10                	mov rdi, ENV
  4871 000038BE BE00000000              	mov rsi, 0
  4872 000038C3 BA01000000              	mov rdx, 1
  4873                                  .L_lambda_simple_env_loop_0025:	; ext_env[i + 1] <-- env[i]
  4874 000038C8 4883FE02                	cmp rsi, 2
  4875 000038CC 7410                    	je .L_lambda_simple_env_end_0025
  4876 000038CE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4877 000038D2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4878 000038D6 48FFC6                  	inc rsi
  4879 000038D9 48FFC2                  	inc rdx
  4880 000038DC EBEA                    	jmp .L_lambda_simple_env_loop_0025
  4881                                  .L_lambda_simple_env_end_0025:
  4882 000038DE 5B                      	pop rbx
  4883 000038DF BE00000000              	mov rsi, 0
  4884                                  .L_lambda_simple_params_loop_0025:	; copy params
  4885 000038E4 4883FE01                	cmp rsi, 1
  4886 000038E8 740E                    	je .L_lambda_simple_params_end_0025
  4887 000038EA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4888 000038EF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4889 000038F3 48FFC6                  	inc rsi
  4890 000038F6 EBEC                    	jmp .L_lambda_simple_params_loop_0025
  4891                                  .L_lambda_simple_params_end_0025:
  4892 000038F8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4893 000038FB 4889C3                  	mov rbx, rax
  4894 000038FE 58                      	pop rax
  4895 000038FF C60005                  	mov byte [rax], T_closure
  4896 00003902 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4897 00003906 48C74009[13390000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0025
  4898 0000390E E95B010000              	jmp .L_lambda_simple_end_0025
  4899                                  .L_lambda_simple_code_0025:	; lambda-simple body
  4900 00003913 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4901 00003919 740B                    	je .L_lambda_simple_arity_check_ok_0025
  4902 0000391B FF742410                	push qword [rsp + 8 * 2]
  4903 0000391F 6A01                    	push 1
  4904 00003921 E98BDD0000              	jmp L_error_incorrect_arity_simple
  4905                                  .L_lambda_simple_arity_check_ok_0025:
  4906 00003926 C8000000                	enter 0, 0
  4907 0000392A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4908 0000392E 50                      	push rax
  4909 0000392F 6A01                    	push 1
  4910 00003931 488B0425[80000000]      	mov rax, qword [free_var_16]
  4911                                  	assert_closure(rax)
    42 00003939 803805              <1>  cmp byte [%1], %2
    43 0000393C 0F85AAF50000        <1>  jne L_error_incorrect_type
  4912 00003942 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4913 00003945 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4914 00003948 50                      	push rax
  4915 00003949 6A01                    	push 1
  4916 0000394B 488B0425[08000000]      	mov rax, qword [free_var_1]
  4917                                  	assert_closure(rax)
    42 00003953 803805              <1>  cmp byte [%1], %2
    43 00003956 0F8590F50000        <1>  jne L_error_incorrect_type
  4918 0000395C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4919 0000395F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4920                                  
  4921 00003962 483D[02000000]                  	cmp rax, sob_boolean_false
  4922                                  
  4923 00003968 0F84F2000000                    	je .L_if_else_0006
  4924 0000396E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4925 00003972 50                      	push rax
  4926 00003973 488B0425[80000000]      	mov rax, qword [free_var_16]
  4927 0000397B 50                      	push rax
  4928 0000397C 6A02                    	push 2
  4929 0000397E 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4930                                  	assert_closure(rax)
    42 00003986 803805              <1>  cmp byte [%1], %2
    43 00003989 0F855DF50000        <1>  jne L_error_incorrect_type
  4931 0000398F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4932 00003992 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4933 00003995 50                      	push rax
  4934 00003996 488B4510                	mov rax, qword [rbp + 8 * 2]
  4935                                  
  4936 0000399A 488B4008                                          	mov rax, qword[rax + 8 * 1]
  4937                                  
  4938 0000399E 488B00                                            	mov rax, qword[rax + 8 * 0]
  4939 000039A1 50                      	push rax
  4940 000039A2 6A02                    	push 2
  4941 000039A4 488B0425[C8020000]      	mov rax, qword [free_var_89]
  4942                                  	assert_closure(rax)
    42 000039AC 803805              <1>  cmp byte [%1], %2
    43 000039AF 0F8537F50000        <1>  jne L_error_incorrect_type
  4943 000039B5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4944 000039B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4945 000039BB 483D[02000000]          	cmp rax, sob_boolean_false
  4946 000039C1 0F8597000000            	jne .L_or_end_0002
  4947 000039C7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  4948 000039CB 50                      	push rax
  4949 000039CC 488B0425[88000000]      	mov rax, qword [free_var_17]
  4950 000039D4 50                      	push rax
  4951 000039D5 6A02                    	push 2
  4952 000039D7 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4953                                  	assert_closure(rax)
    42 000039DF 803805              <1>  cmp byte [%1], %2
    43 000039E2 0F8504F50000        <1>  jne L_error_incorrect_type
  4954 000039E8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  4955 000039EB FF5009                  	call SOB_CLOSURE_CODE(rax)
  4956 000039EE 50                      	push rax
  4957 000039EF 6A01                    	push 1
  4958 000039F1 488B4510                	mov rax, qword [rbp + 8 * 2]
  4959                                  
  4960 000039F5 488B00                                            	mov rax, qword[rax + 8 * 0]
  4961                                  
  4962 000039F8 488B00                                            	mov rax, qword[rax + 8 * 0]
  4963 000039FB 488B00                  	mov rax, qword [rax]
  4964                                  .L_applic_TC_0023:
  4965 000039FE 803805                  	cmp byte [rax], T_closure
  4966 00003A01 0F85A6EC0000            	jne L_code_ptr_error
  4967 00003A07 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  4968 00003A0B 53                      	push rbx
  4969 00003A0C FF7508                  	push qword [rbp + 8]
  4970 00003A0F FF7500                  	push qword [rbp]
  4971 00003A12 488B4D18                	mov rcx, [rbp + 3 * 8]
  4972 00003A16 488B542418              	mov rdx, [rsp + 3 * 8]
  4973 00003A1B 488D7204                	lea rsi, [rdx + 4]
  4974 00003A1F 4C8D4EFF                	lea r9, [rsi - 1]
  4975 00003A23 488D7903                	lea rdi, [rcx + 3]
  4976 00003A27 4D31C0                  	xor r8, r8
  4977                                  .L_tc_recycle_frame_loop_0023:
  4978 00003A2A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  4979 00003A2E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  4980 00003A33 49FFC9                  	dec r9
  4981 00003A36 4D31C0                  	xor r8, r8
  4982 00003A39 48FFCF                  	dec rdi
  4983 00003A3C 48FFCE                  	dec rsi
  4984 00003A3F 4883FE00                	cmp rsi, 0
  4985 00003A43 75E5                    	jne .L_tc_recycle_frame_loop_0023
  4986                                  .L_tc_recycle_frame_done_0023:
  4987                                  ;this pop rbp in sot to the right place
  4988 00003A45 4989C9                  	mov r9, rcx
  4989 00003A48 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  4990 00003A50 4C01CC                  	add rsp, r9
  4991 00003A53 5D                      	pop rbp
  4992 00003A54 488B4D00                	mov rcx, qword [rbp]
  4993 00003A58 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  4994 00003A5C FFE3                    	jmp rbx
  4995                                  .L_or_end_0002:
  4996                                  
  4997 00003A5E EB0A                            	jmp .L_if_end_0006
  4998                                  
  4999                                          	.L_if_else_0006:
  5000 00003A60 48B8-                   	mov rax,L_constants + 2
  5000 00003A62 [0200000000000000] 
  5001                                  
  5002                                          	.L_if_end_0006:
  5003 00003A6A C9                      	leave
  5004 00003A6B C21800                  	ret 8 * (2 + 1)
  5005                                  .L_lambda_simple_end_0025:	; new closure is in rax
  5006 00003A6E 50                      	push rax
  5007 00003A6F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5008 00003A73 8F00                    	pop qword [rax]
  5009 00003A75 48B8-                   	mov rax, sob_void
  5009 00003A77 [0000000000000000] 
  5010                                  
  5011 00003A7F 488B4510                	mov rax, qword [rbp + 8 * 2]
  5012                                  
  5013 00003A83 488B00                                            	mov rax, qword[rax + 8 * 0]
  5014                                  
  5015 00003A86 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5016 00003A8A 50                      	push rax
  5017 00003A8B 6A01                    	push 1
  5018 00003A8D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5019 00003A91 488B00                  	mov rax, qword [rax]
  5020                                  .L_applic_TC_0024:
  5021 00003A94 803805                  	cmp byte [rax], T_closure
  5022 00003A97 0F8510EC0000            	jne L_code_ptr_error
  5023 00003A9D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5024 00003AA1 53                      	push rbx
  5025 00003AA2 FF7508                  	push qword [rbp + 8]
  5026 00003AA5 FF7500                  	push qword [rbp]
  5027 00003AA8 488B4D18                	mov rcx, [rbp + 3 * 8]
  5028 00003AAC 488B542418              	mov rdx, [rsp + 3 * 8]
  5029 00003AB1 488D7204                	lea rsi, [rdx + 4]
  5030 00003AB5 4C8D4EFF                	lea r9, [rsi - 1]
  5031 00003AB9 488D7903                	lea rdi, [rcx + 3]
  5032 00003ABD 4D31C0                  	xor r8, r8
  5033                                  .L_tc_recycle_frame_loop_0024:
  5034 00003AC0 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5035 00003AC4 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5036 00003AC9 49FFC9                  	dec r9
  5037 00003ACC 4D31C0                  	xor r8, r8
  5038 00003ACF 48FFCF                  	dec rdi
  5039 00003AD2 48FFCE                  	dec rsi
  5040 00003AD5 4883FE00                	cmp rsi, 0
  5041 00003AD9 75E5                    	jne .L_tc_recycle_frame_loop_0024
  5042                                  .L_tc_recycle_frame_done_0024:
  5043                                  ;this pop rbp in sot to the right place
  5044 00003ADB 4989C9                  	mov r9, rcx
  5045 00003ADE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5046 00003AE6 4C01CC                  	add rsp, r9
  5047 00003AE9 5D                      	pop rbp
  5048 00003AEA 488B4D00                	mov rcx, qword [rbp]
  5049 00003AEE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5050 00003AF2 FFE3                    	jmp rbx
  5051 00003AF4 C9                      	leave
  5052 00003AF5 C21800                  	ret 8 * (2 + 1)
  5053                                  .L_lambda_simple_end_0024:	; new closure is in rax
  5054                                  .L_applic_TC_0025:
  5055 00003AF8 803805                  	cmp byte [rax], T_closure
  5056 00003AFB 0F85ACEB0000            	jne L_code_ptr_error
  5057 00003B01 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5058 00003B05 53                      	push rbx
  5059 00003B06 FF7508                  	push qword [rbp + 8]
  5060 00003B09 FF7500                  	push qword [rbp]
  5061 00003B0C 488B4D18                	mov rcx, [rbp + 3 * 8]
  5062 00003B10 488B542418              	mov rdx, [rsp + 3 * 8]
  5063 00003B15 488D7204                	lea rsi, [rdx + 4]
  5064 00003B19 4C8D4EFF                	lea r9, [rsi - 1]
  5065 00003B1D 488D7903                	lea rdi, [rcx + 3]
  5066 00003B21 4D31C0                  	xor r8, r8
  5067                                  .L_tc_recycle_frame_loop_0025:
  5068 00003B24 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5069 00003B28 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5070 00003B2D 49FFC9                  	dec r9
  5071 00003B30 4D31C0                  	xor r8, r8
  5072 00003B33 48FFCF                  	dec rdi
  5073 00003B36 48FFCE                  	dec rsi
  5074 00003B39 4883FE00                	cmp rsi, 0
  5075 00003B3D 75E5                    	jne .L_tc_recycle_frame_loop_0025
  5076                                  .L_tc_recycle_frame_done_0025:
  5077                                  ;this pop rbp in sot to the right place
  5078 00003B3F 4989C9                  	mov r9, rcx
  5079 00003B42 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5080 00003B4A 4C01CC                  	add rsp, r9
  5081 00003B4D 5D                      	pop rbp
  5082 00003B4E 488B4D00                	mov rcx, qword [rbp]
  5083 00003B52 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5084 00003B56 FFE3                    	jmp rbx
  5085 00003B58 C9                      	leave
  5086 00003B59 C22000                  	ret 8 * (2 + 2)
  5087                                  .L_lambda_opt_end_0004:	; new closure is in rax
  5088 00003B5C 48890425[D0020000]      	mov qword [free_var_90], rax
  5089 00003B64 48B8-                   	mov rax, sob_void
  5089 00003B66 [0000000000000000] 
  5090                                  
  5091 00003B6E 4889C7                  	mov rdi, rax
  5092 00003B71 E893DB0000              	call print_sexpr_if_not_void
  5093                                  
  5094 00003B76 BF11000000              	mov rdi, (1 + 8 + 8)
  5095 00003B7B E878DB0000              	call malloc
  5096 00003B80 50                      	push rax
  5097 00003B81 BF00000000              	mov rdi, 8 * 0
  5098 00003B86 E86DDB0000              	call malloc
  5099 00003B8B 50                      	push rax
  5100 00003B8C BF08000000              	mov rdi, 8 * 1
  5101 00003B91 E862DB0000              	call malloc
  5102 00003B96 488B7D10                	mov rdi, ENV
  5103 00003B9A 4831F6                  	xor rsi, rsi
  5104 00003B9D 4831D2                  	xor rdx, rdx
  5105 00003BA0 48FFC2                  	inc rdx
  5106                                  	.L_lambda_opt_env_loop_0005:
  5107                                  
  5108 00003BA3 4883FE00                        	cmp rsi, 0
  5109                                  
  5110 00003BA7 7412                            	je .L_lambda_opt_env_end_0005
  5111 00003BA9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5112 00003BAD 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5113 00003BB1 4883C201                	add rdx, 1
  5114 00003BB5 4883C601                	add rsi, 1
  5115 00003BB9 EBE8                    	jmp .L_lambda_opt_env_loop_0005
  5116                                  
  5117                                          	.L_lambda_opt_env_end_0005:
  5118 00003BBB 5B                      	pop rbx
  5119 00003BBC 4831F6                  	xor rsi, rsi
  5120                                  	.L_lambda_opt_params_loop_0005:
  5121                                  
  5122 00003BBF 4883FE00                        	cmp rsi, 0
  5123                                  
  5124 00003BC3 740F                            	je .L_lambda_opt_params_end_0005
  5125 00003BC5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5126 00003BCA 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5127 00003BCE 4883C601                	add rsi, 1
  5128 00003BD2 EBEB                    	jmp .L_lambda_opt_params_loop_0005
  5129                                  
  5130                                          	.L_lambda_opt_params_end_0005:
  5131 00003BD4 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  5132 00003BD7 4889C3                  	mov rbx, rax
  5133 00003BDA 58                      	pop rax
  5134 00003BDB C60005                  	mov byte [rax], T_closure
  5135 00003BDE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5136 00003BE2 48C74009[EF3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
  5137                                  
  5138 00003BEA E988040000                      	jmp .L_lambda_opt_end_0005
  5139                                  
  5140                                          	.L_lambda_opt_code_0005:
  5141                                  
  5142 00003BEF 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  5143                                  
  5144 00003BF5 740D                            	je .L_lambda_opt_arity_check_exact_0005  ;same num_of_args
  5145                                  
  5146 00003BF7 7F65                            	jg .L_lambda_opt_arity_check_more_0005  ;greater num_of_args
  5147 00003BF9 FF742410                	push qword [rsp + 8 * 2]
  5148 00003BFD 6A01                    	push 1
  5149 00003BFF E9C1DA0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  5150                                  .L_lambda_opt_arity_check_exact_0005:
  5151 00003C04 4883EC08                	sub rsp, 8 * 1
  5152 00003C08 488D7F10                	lea rdi, [rdi + (8 * 2)]
  5153 00003C0C 4889E7                  	mov rdi, rsp 
  5154 00003C0F 488B4708                	mov rax, qword [rdi + 8]
  5155 00003C13 488907                  	mov qword [rdi], rax
  5156 00003C16 488D7F08                	lea rdi, [rdi + 8]
  5157 00003C1A 488B4708                	mov rax, qword [rdi + 8]
  5158 00003C1E 488907                  	mov qword [rdi], rax
  5159 00003C21 488D7F08                	lea rdi, [rdi + 8]
  5160 00003C25 488B4708                	mov rax, qword [rdi + 8]
  5161 00003C29 4889C1                  	mov rcx, rax
  5162 00003C2C 4883C001                	add rax, 1
  5163 00003C30 488907                  	mov qword [rdi], rax
  5164 00003C33 488D7F08                	lea rdi, [rdi + 8]
  5165                                  	.L_lambda_opt_stack_shrink_loop_000d:
  5166 00003C37 4883F900                	cmp rcx, 0
  5167 00003C3B 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_000d
  5168 00003C3D 4883E901                	sub rcx, 1
  5169 00003C41 488D4010                	lea rax, [rax + (8 * 2)]
  5170 00003C45 488B4708                	mov rax, qword [rdi + 8]
  5171 00003C49 488907                  	mov qword [rdi], rax
  5172 00003C4C 488D7F08                	lea rdi, [rdi + 8]
  5173 00003C50 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_000d
  5174                                  
  5175                                          	.L_lambda_opt_stack_shrink_loop_exit_000d:
  5176 00003C52 48C707[01000000]        	mov qword [rdi], sob_nil
  5177 00003C59 E997000000              	jmp .L_lambda_opt_stack_adjusted_0005
  5178                                  
  5179                                          	.L_lambda_opt_arity_check_more_0005:
  5180 00003C5E 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  5181 00003C63 488D4EFF                	lea rcx, [rsi - 1]
  5182 00003C67 49B8-                   	mov r8, sob_nil
  5182 00003C69 [0100000000000000] 
  5183 00003C71 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  5184 00003C76 4889F2                  	mov rdx, rsi
  5185                                  	.L_lambda_opt_stack_shrink_loop_000e:
  5186 00003C79 4883F900                	cmp rcx, 0
  5187 00003C7D 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_000e
  5188 00003C7F BF11000000              	mov rdi, 1 + (8 * 2)
  5189 00003C84 E86FDA0000              	call malloc
  5190 00003C89 C60021                  	mov byte [rax], T_pair
  5191 00003C8C 488B1E                  	mov rbx, qword [rsi]
  5192 00003C8F 48895801                	mov SOB_PAIR_CAR(rax), rbx
  5193 00003C93 4C894009                	mov SOB_PAIR_CDR(rax), r8
  5194 00003C97 4883C6F8                	add rsi, -8
  5195 00003C9B 4883E901                	sub rcx, 1
  5196 00003C9F 4989C0                  	mov r8, rax
  5197 00003CA2 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_000e
  5198                                  
  5199                                          	.L_lambda_opt_stack_shrink_loop_exit_000e:
  5200 00003CA4 4C8902                  	mov qword [rdx], r8
  5201 00003CA7 4883EA08                	sub rdx, 8 * 1
  5202 00003CAB 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  5203                                  
  5204 00003CB0 B901000000                      	mov rcx, 1 
  5205                                  
  5206                                          	.L_lambda_opt_stack_shrink_loop_000f:
  5207 00003CB5 4883F900                	cmp rcx, 0
  5208 00003CB9 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_000f
  5209 00003CBB 488B06                  	mov rax, qword [rsi]
  5210 00003CBE 488902                  	mov qword [rdx], rax
  5211 00003CC1 488D76F8                	lea rsi, [rsi - 8]
  5212 00003CC5 4883C2F8                	add rdx, -8
  5213 00003CC9 4883C1FF                	add rcx, -1
  5214 00003CCD EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_000f
  5215                                  
  5216                                          	.L_lambda_opt_stack_shrink_loop_exit_000f:
  5217                                  
  5218 00003CCF 48C70202000000                  	mov qword [rdx], 1 + 1
  5219 00003CD6 4883C6F8                	add rsi, -8
  5220 00003CDA 4883C2F8                	add rdx, -8
  5221 00003CDE 488B06                  	mov rax, qword [rsi]
  5222 00003CE1 488902                  	mov qword [rdx], rax
  5223 00003CE4 4883C2F8                	add rdx, -8
  5224 00003CE8 488D76F8                	lea rsi, [rsi - 8]
  5225 00003CEC 488B06                  	mov rax, qword [rsi]
  5226 00003CEF 488902                  	mov qword [rdx], rax
  5227 00003CF2 4889D4                  	mov rsp, rdx
  5228                                  	.L_lambda_opt_stack_adjusted_0005:
  5229 00003CF5 C8000000                	enter 0, 0
  5230 00003CF9 48B8-                   	mov rax,L_constants + 23
  5230 00003CFB [1700000000000000] 
  5231 00003D03 50                      	push rax
  5232 00003D04 6A01                    	push 1
  5233 00003D06 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5234 00003D0B E8E8D90000              	call malloc
  5235 00003D10 50                      	push rax
  5236 00003D11 BF10000000              	mov rdi, 8 * 2	; new rib
  5237 00003D16 E8DDD90000              	call malloc
  5238 00003D1B 50                      	push rax
  5239 00003D1C BF10000000              	mov rdi, 8 * 2	; extended env
  5240 00003D21 E8D2D90000              	call malloc
  5241 00003D26 488B7D10                	mov rdi, ENV
  5242 00003D2A BE00000000              	mov rsi, 0
  5243 00003D2F BA01000000              	mov rdx, 1
  5244                                  .L_lambda_simple_env_loop_0026:	; ext_env[i + 1] <-- env[i]
  5245 00003D34 4883FE01                	cmp rsi, 1
  5246 00003D38 7410                    	je .L_lambda_simple_env_end_0026
  5247 00003D3A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5248 00003D3E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5249 00003D42 48FFC6                  	inc rsi
  5250 00003D45 48FFC2                  	inc rdx
  5251 00003D48 EBEA                    	jmp .L_lambda_simple_env_loop_0026
  5252                                  .L_lambda_simple_env_end_0026:
  5253 00003D4A 5B                      	pop rbx
  5254 00003D4B BE00000000              	mov rsi, 0
  5255                                  .L_lambda_simple_params_loop_0026:	; copy params
  5256 00003D50 4883FE02                	cmp rsi, 2
  5257 00003D54 740E                    	je .L_lambda_simple_params_end_0026
  5258 00003D56 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5259 00003D5B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5260 00003D5F 48FFC6                  	inc rsi
  5261 00003D62 EBEC                    	jmp .L_lambda_simple_params_loop_0026
  5262                                  .L_lambda_simple_params_end_0026:
  5263 00003D64 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5264 00003D67 4889C3                  	mov rbx, rax
  5265 00003D6A 58                      	pop rax
  5266 00003D6B C60005                  	mov byte [rax], T_closure
  5267 00003D6E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5268 00003D72 48C74009[7F3D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0026
  5269 00003D7A E994020000              	jmp .L_lambda_simple_end_0026
  5270                                  .L_lambda_simple_code_0026:	; lambda-simple body
  5271 00003D7F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5272 00003D85 740B                    	je .L_lambda_simple_arity_check_ok_0026
  5273 00003D87 FF742410                	push qword [rsp + 8 * 2]
  5274 00003D8B 6A01                    	push 1
  5275 00003D8D E91FD90000              	jmp L_error_incorrect_arity_simple
  5276                                  .L_lambda_simple_arity_check_ok_0026:
  5277 00003D92 C8000000                	enter 0, 0
  5278 00003D96 BF08000000              	mov rdi, 8
  5279 00003D9B E858D90000              	call malloc
  5280 00003DA0 488B5D20                	mov rbx, PARAM(0)
  5281 00003DA4 488918                  	mov qword [rax], rbx
  5282 00003DA7 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5283                                  
  5284 00003DAB 48B8-                            	mov rax, sob_void
  5284 00003DAD [0000000000000000] 
  5285                                  
  5286 00003DB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5287 00003DBA E839D90000              	call malloc
  5288 00003DBF 50                      	push rax
  5289 00003DC0 BF08000000              	mov rdi, 8 * 1	; new rib
  5290 00003DC5 E82ED90000              	call malloc
  5291 00003DCA 50                      	push rax
  5292 00003DCB BF18000000              	mov rdi, 8 * 3	; extended env
  5293 00003DD0 E823D90000              	call malloc
  5294 00003DD5 488B7D10                	mov rdi, ENV
  5295 00003DD9 BE00000000              	mov rsi, 0
  5296 00003DDE BA01000000              	mov rdx, 1
  5297                                  .L_lambda_simple_env_loop_0027:	; ext_env[i + 1] <-- env[i]
  5298 00003DE3 4883FE02                	cmp rsi, 2
  5299 00003DE7 7410                    	je .L_lambda_simple_env_end_0027
  5300 00003DE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5301 00003DED 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5302 00003DF1 48FFC6                  	inc rsi
  5303 00003DF4 48FFC2                  	inc rdx
  5304 00003DF7 EBEA                    	jmp .L_lambda_simple_env_loop_0027
  5305                                  .L_lambda_simple_env_end_0027:
  5306 00003DF9 5B                      	pop rbx
  5307 00003DFA BE00000000              	mov rsi, 0
  5308                                  .L_lambda_simple_params_loop_0027:	; copy params
  5309 00003DFF 4883FE01                	cmp rsi, 1
  5310 00003E03 740E                    	je .L_lambda_simple_params_end_0027
  5311 00003E05 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5312 00003E0A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5313 00003E0E 48FFC6                  	inc rsi
  5314 00003E11 EBEC                    	jmp .L_lambda_simple_params_loop_0027
  5315                                  .L_lambda_simple_params_end_0027:
  5316 00003E13 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5317 00003E16 4889C3                  	mov rbx, rax
  5318 00003E19 58                      	pop rax
  5319 00003E1A C60005                  	mov byte [rax], T_closure
  5320 00003E1D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5321 00003E21 48C74009[2E3E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0027
  5322 00003E29 E95B010000              	jmp .L_lambda_simple_end_0027
  5323                                  .L_lambda_simple_code_0027:	; lambda-simple body
  5324 00003E2E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5325 00003E34 740B                    	je .L_lambda_simple_arity_check_ok_0027
  5326 00003E36 FF742410                	push qword [rsp + 8 * 2]
  5327 00003E3A 6A01                    	push 1
  5328 00003E3C E970D80000              	jmp L_error_incorrect_arity_simple
  5329                                  .L_lambda_simple_arity_check_ok_0027:
  5330 00003E41 C8000000                	enter 0, 0
  5331 00003E45 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5332 00003E49 50                      	push rax
  5333 00003E4A 6A01                    	push 1
  5334 00003E4C 488B0425[80000000]      	mov rax, qword [free_var_16]
  5335                                  	assert_closure(rax)
    42 00003E54 803805              <1>  cmp byte [%1], %2
    43 00003E57 0F858FF00000        <1>  jne L_error_incorrect_type
  5336 00003E5D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5337 00003E60 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5338 00003E63 50                      	push rax
  5339 00003E64 6A01                    	push 1
  5340 00003E66 488B0425[00000000]      	mov rax, qword [free_var_0]
  5341                                  	assert_closure(rax)
    42 00003E6E 803805              <1>  cmp byte [%1], %2
    43 00003E71 0F8575F00000        <1>  jne L_error_incorrect_type
  5342 00003E77 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5343 00003E7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5344 00003E7D 483D[02000000]          	cmp rax, sob_boolean_false
  5345 00003E83 0F85FC000000            	jne .L_or_end_0003
  5346 00003E89 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5347 00003E8D 50                      	push rax
  5348 00003E8E 488B0425[80000000]      	mov rax, qword [free_var_16]
  5349 00003E96 50                      	push rax
  5350 00003E97 6A02                    	push 2
  5351 00003E99 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5352                                  	assert_closure(rax)
    42 00003EA1 803805              <1>  cmp byte [%1], %2
    43 00003EA4 0F8542F00000        <1>  jne L_error_incorrect_type
  5353 00003EAA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5354 00003EAD FF5009                  	call SOB_CLOSURE_CODE(rax)
  5355 00003EB0 50                      	push rax
  5356 00003EB1 488B4510                	mov rax, qword [rbp + 8 * 2]
  5357                                  
  5358 00003EB5 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5359                                  
  5360 00003EB9 488B00                                            	mov rax, qword[rax + 8 * 0]
  5361 00003EBC 50                      	push rax
  5362 00003EBD 6A02                    	push 2
  5363 00003EBF 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5364                                  	assert_closure(rax)
    42 00003EC7 803805              <1>  cmp byte [%1], %2
    43 00003ECA 0F851CF00000        <1>  jne L_error_incorrect_type
  5365 00003ED0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5366 00003ED3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5367                                  
  5368 00003ED6 483D[02000000]                  	cmp rax, sob_boolean_false
  5369                                  
  5370 00003EDC 0F8499000000                    	je .L_if_else_0007
  5371 00003EE2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5372 00003EE6 50                      	push rax
  5373 00003EE7 488B0425[88000000]      	mov rax, qword [free_var_17]
  5374 00003EEF 50                      	push rax
  5375 00003EF0 6A02                    	push 2
  5376 00003EF2 488B0425[D8020000]      	mov rax, qword [free_var_91]
  5377                                  	assert_closure(rax)
    42 00003EFA 803805              <1>  cmp byte [%1], %2
    43 00003EFD 0F85E9EF0000        <1>  jne L_error_incorrect_type
  5378 00003F03 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5379 00003F06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5380 00003F09 50                      	push rax
  5381 00003F0A 6A01                    	push 1
  5382 00003F0C 488B4510                	mov rax, qword [rbp + 8 * 2]
  5383                                  
  5384 00003F10 488B00                                            	mov rax, qword[rax + 8 * 0]
  5385                                  
  5386 00003F13 488B00                                            	mov rax, qword[rax + 8 * 0]
  5387 00003F16 488B00                  	mov rax, qword [rax]
  5388                                  .L_applic_TC_0026:
  5389 00003F19 803805                  	cmp byte [rax], T_closure
  5390 00003F1C 0F858BE70000            	jne L_code_ptr_error
  5391 00003F22 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5392 00003F26 53                      	push rbx
  5393 00003F27 FF7508                  	push qword [rbp + 8]
  5394 00003F2A FF7500                  	push qword [rbp]
  5395 00003F2D 488B4D18                	mov rcx, [rbp + 3 * 8]
  5396 00003F31 488B542418              	mov rdx, [rsp + 3 * 8]
  5397 00003F36 488D7204                	lea rsi, [rdx + 4]
  5398 00003F3A 4C8D4EFF                	lea r9, [rsi - 1]
  5399 00003F3E 488D7903                	lea rdi, [rcx + 3]
  5400 00003F42 4D31C0                  	xor r8, r8
  5401                                  .L_tc_recycle_frame_loop_0026:
  5402 00003F45 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5403 00003F49 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5404 00003F4E 49FFC9                  	dec r9
  5405 00003F51 4D31C0                  	xor r8, r8
  5406 00003F54 48FFCF                  	dec rdi
  5407 00003F57 48FFCE                  	dec rsi
  5408 00003F5A 4883FE00                	cmp rsi, 0
  5409 00003F5E 75E5                    	jne .L_tc_recycle_frame_loop_0026
  5410                                  .L_tc_recycle_frame_done_0026:
  5411                                  ;this pop rbp in sot to the right place
  5412 00003F60 4989C9                  	mov r9, rcx
  5413 00003F63 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5414 00003F6B 4C01CC                  	add rsp, r9
  5415 00003F6E 5D                      	pop rbp
  5416 00003F6F 488B4D00                	mov rcx, qword [rbp]
  5417 00003F73 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5418 00003F77 FFE3                    	jmp rbx
  5419                                  
  5420 00003F79 EB0A                            	jmp .L_if_end_0007
  5421                                  
  5422                                          	.L_if_else_0007:
  5423 00003F7B 48B8-                   	mov rax,L_constants + 2
  5423 00003F7D [0200000000000000] 
  5424                                  
  5425                                          	.L_if_end_0007:
  5426                                  .L_or_end_0003:
  5427 00003F85 C9                      	leave
  5428 00003F86 C21800                  	ret 8 * (2 + 1)
  5429                                  .L_lambda_simple_end_0027:	; new closure is in rax
  5430 00003F89 50                      	push rax
  5431 00003F8A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5432 00003F8E 8F00                    	pop qword [rax]
  5433 00003F90 48B8-                   	mov rax, sob_void
  5433 00003F92 [0000000000000000] 
  5434                                  
  5435 00003F9A 488B4510                	mov rax, qword [rbp + 8 * 2]
  5436                                  
  5437 00003F9E 488B00                                            	mov rax, qword[rax + 8 * 0]
  5438                                  
  5439 00003FA1 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5440 00003FA5 50                      	push rax
  5441 00003FA6 6A01                    	push 1
  5442 00003FA8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5443 00003FAC 488B00                  	mov rax, qword [rax]
  5444                                  .L_applic_TC_0027:
  5445 00003FAF 803805                  	cmp byte [rax], T_closure
  5446 00003FB2 0F85F5E60000            	jne L_code_ptr_error
  5447 00003FB8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5448 00003FBC 53                      	push rbx
  5449 00003FBD FF7508                  	push qword [rbp + 8]
  5450 00003FC0 FF7500                  	push qword [rbp]
  5451 00003FC3 488B4D18                	mov rcx, [rbp + 3 * 8]
  5452 00003FC7 488B542418              	mov rdx, [rsp + 3 * 8]
  5453 00003FCC 488D7204                	lea rsi, [rdx + 4]
  5454 00003FD0 4C8D4EFF                	lea r9, [rsi - 1]
  5455 00003FD4 488D7903                	lea rdi, [rcx + 3]
  5456 00003FD8 4D31C0                  	xor r8, r8
  5457                                  .L_tc_recycle_frame_loop_0027:
  5458 00003FDB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5459 00003FDF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5460 00003FE4 49FFC9                  	dec r9
  5461 00003FE7 4D31C0                  	xor r8, r8
  5462 00003FEA 48FFCF                  	dec rdi
  5463 00003FED 48FFCE                  	dec rsi
  5464 00003FF0 4883FE00                	cmp rsi, 0
  5465 00003FF4 75E5                    	jne .L_tc_recycle_frame_loop_0027
  5466                                  .L_tc_recycle_frame_done_0027:
  5467                                  ;this pop rbp in sot to the right place
  5468 00003FF6 4989C9                  	mov r9, rcx
  5469 00003FF9 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5470 00004001 4C01CC                  	add rsp, r9
  5471 00004004 5D                      	pop rbp
  5472 00004005 488B4D00                	mov rcx, qword [rbp]
  5473 00004009 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5474 0000400D FFE3                    	jmp rbx
  5475 0000400F C9                      	leave
  5476 00004010 C21800                  	ret 8 * (2 + 1)
  5477                                  .L_lambda_simple_end_0026:	; new closure is in rax
  5478                                  .L_applic_TC_0028:
  5479 00004013 803805                  	cmp byte [rax], T_closure
  5480 00004016 0F8591E60000            	jne L_code_ptr_error
  5481 0000401C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5482 00004020 53                      	push rbx
  5483 00004021 FF7508                  	push qword [rbp + 8]
  5484 00004024 FF7500                  	push qword [rbp]
  5485 00004027 488B4D18                	mov rcx, [rbp + 3 * 8]
  5486 0000402B 488B542418              	mov rdx, [rsp + 3 * 8]
  5487 00004030 488D7204                	lea rsi, [rdx + 4]
  5488 00004034 4C8D4EFF                	lea r9, [rsi - 1]
  5489 00004038 488D7903                	lea rdi, [rcx + 3]
  5490 0000403C 4D31C0                  	xor r8, r8
  5491                                  .L_tc_recycle_frame_loop_0028:
  5492 0000403F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5493 00004043 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5494 00004048 49FFC9                  	dec r9
  5495 0000404B 4D31C0                  	xor r8, r8
  5496 0000404E 48FFCF                  	dec rdi
  5497 00004051 48FFCE                  	dec rsi
  5498 00004054 4883FE00                	cmp rsi, 0
  5499 00004058 75E5                    	jne .L_tc_recycle_frame_loop_0028
  5500                                  .L_tc_recycle_frame_done_0028:
  5501                                  ;this pop rbp in sot to the right place
  5502 0000405A 4989C9                  	mov r9, rcx
  5503 0000405D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5504 00004065 4C01CC                  	add rsp, r9
  5505 00004068 5D                      	pop rbp
  5506 00004069 488B4D00                	mov rcx, qword [rbp]
  5507 0000406D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5508 00004071 FFE3                    	jmp rbx
  5509 00004073 C9                      	leave
  5510 00004074 C22000                  	ret 8 * (2 + 2)
  5511                                  .L_lambda_opt_end_0005:	; new closure is in rax
  5512 00004077 48890425[E0020000]      	mov qword [free_var_92], rax
  5513 0000407F 48B8-                   	mov rax, sob_void
  5513 00004081 [0000000000000000] 
  5514                                  
  5515 00004089 4889C7                  	mov rdi, rax
  5516 0000408C E878D60000              	call print_sexpr_if_not_void
  5517                                  
  5518 00004091 48B8-                   	mov rax,L_constants + 23
  5518 00004093 [1700000000000000] 
  5519 0000409B 50                      	push rax
  5520 0000409C 48B8-                   	mov rax,L_constants + 23
  5520 0000409E [1700000000000000] 
  5521 000040A6 50                      	push rax
  5522 000040A7 6A02                    	push 2
  5523 000040A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5524 000040AE E845D60000              	call malloc
  5525 000040B3 50                      	push rax
  5526 000040B4 BF00000000              	mov rdi, 8 * 0	; new rib
  5527 000040B9 E83AD60000              	call malloc
  5528 000040BE 50                      	push rax
  5529 000040BF BF08000000              	mov rdi, 8 * 1	; extended env
  5530 000040C4 E82FD60000              	call malloc
  5531 000040C9 488B7D10                	mov rdi, ENV
  5532 000040CD BE00000000              	mov rsi, 0
  5533 000040D2 BA01000000              	mov rdx, 1
  5534                                  .L_lambda_simple_env_loop_0028:	; ext_env[i + 1] <-- env[i]
  5535 000040D7 4883FE00                	cmp rsi, 0
  5536 000040DB 7410                    	je .L_lambda_simple_env_end_0028
  5537 000040DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5538 000040E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5539 000040E5 48FFC6                  	inc rsi
  5540 000040E8 48FFC2                  	inc rdx
  5541 000040EB EBEA                    	jmp .L_lambda_simple_env_loop_0028
  5542                                  .L_lambda_simple_env_end_0028:
  5543 000040ED 5B                      	pop rbx
  5544 000040EE BE00000000              	mov rsi, 0
  5545                                  .L_lambda_simple_params_loop_0028:	; copy params
  5546 000040F3 4883FE00                	cmp rsi, 0
  5547 000040F7 740E                    	je .L_lambda_simple_params_end_0028
  5548 000040F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5549 000040FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5550 00004102 48FFC6                  	inc rsi
  5551 00004105 EBEC                    	jmp .L_lambda_simple_params_loop_0028
  5552                                  .L_lambda_simple_params_end_0028:
  5553 00004107 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5554 0000410A 4889C3                  	mov rbx, rax
  5555 0000410D 58                      	pop rax
  5556 0000410E C60005                  	mov byte [rax], T_closure
  5557 00004111 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5558 00004115 48C74009[22410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0028
  5559 0000411D E944060000              	jmp .L_lambda_simple_end_0028
  5560                                  .L_lambda_simple_code_0028:	; lambda-simple body
  5561 00004122 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5562 00004128 740B                    	je .L_lambda_simple_arity_check_ok_0028
  5563 0000412A FF742410                	push qword [rsp + 8 * 2]
  5564 0000412E 6A02                    	push 2
  5565 00004130 E97CD50000              	jmp L_error_incorrect_arity_simple
  5566                                  .L_lambda_simple_arity_check_ok_0028:
  5567 00004135 C8000000                	enter 0, 0
  5568 00004139 BF08000000              	mov rdi, 8
  5569 0000413E E8B5D50000              	call malloc
  5570 00004143 488B5D20                	mov rbx, PARAM(0)
  5571 00004147 488918                  	mov qword [rax], rbx
  5572 0000414A 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5573                                  
  5574 0000414E 48B8-                            	mov rax, sob_void
  5574 00004150 [0000000000000000] 
  5575                                  
  5576 00004158 BF08000000              	mov rdi, 8
  5577 0000415D E896D50000              	call malloc
  5578 00004162 488B5D28                	mov rbx, PARAM(1)
  5579 00004166 488918                  	mov qword [rax], rbx
  5580 00004169 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  5581                                  
  5582 0000416D 48B8-                            	mov rax, sob_void
  5582 0000416F [0000000000000000] 
  5583                                  
  5584 00004177 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5585 0000417C E877D50000              	call malloc
  5586 00004181 50                      	push rax
  5587 00004182 BF10000000              	mov rdi, 8 * 2	; new rib
  5588 00004187 E86CD50000              	call malloc
  5589 0000418C 50                      	push rax
  5590 0000418D BF10000000              	mov rdi, 8 * 2	; extended env
  5591 00004192 E861D50000              	call malloc
  5592 00004197 488B7D10                	mov rdi, ENV
  5593 0000419B BE00000000              	mov rsi, 0
  5594 000041A0 BA01000000              	mov rdx, 1
  5595                                  .L_lambda_simple_env_loop_0029:	; ext_env[i + 1] <-- env[i]
  5596 000041A5 4883FE01                	cmp rsi, 1
  5597 000041A9 7410                    	je .L_lambda_simple_env_end_0029
  5598 000041AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5599 000041AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5600 000041B3 48FFC6                  	inc rsi
  5601 000041B6 48FFC2                  	inc rdx
  5602 000041B9 EBEA                    	jmp .L_lambda_simple_env_loop_0029
  5603                                  .L_lambda_simple_env_end_0029:
  5604 000041BB 5B                      	pop rbx
  5605 000041BC BE00000000              	mov rsi, 0
  5606                                  .L_lambda_simple_params_loop_0029:	; copy params
  5607 000041C1 4883FE02                	cmp rsi, 2
  5608 000041C5 740E                    	je .L_lambda_simple_params_end_0029
  5609 000041C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5610 000041CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5611 000041D0 48FFC6                  	inc rsi
  5612 000041D3 EBEC                    	jmp .L_lambda_simple_params_loop_0029
  5613                                  .L_lambda_simple_params_end_0029:
  5614 000041D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5615 000041D8 4889C3                  	mov rbx, rax
  5616 000041DB 58                      	pop rax
  5617 000041DC C60005                  	mov byte [rax], T_closure
  5618 000041DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5619 000041E3 48C74009[F0410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0029
  5620 000041EB E932010000              	jmp .L_lambda_simple_end_0029
  5621                                  .L_lambda_simple_code_0029:	; lambda-simple body
  5622 000041F0 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5623 000041F6 740B                    	je .L_lambda_simple_arity_check_ok_0029
  5624 000041F8 FF742410                	push qword [rsp + 8 * 2]
  5625 000041FC 6A02                    	push 2
  5626 000041FE E9AED40000              	jmp L_error_incorrect_arity_simple
  5627                                  .L_lambda_simple_arity_check_ok_0029:
  5628 00004203 C8000000                	enter 0, 0
  5629 00004207 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5630 0000420B 50                      	push rax
  5631 0000420C 6A01                    	push 1
  5632 0000420E 488B0425[00000000]      	mov rax, qword [free_var_0]
  5633                                  	assert_closure(rax)
    42 00004216 803805              <1>  cmp byte [%1], %2
    43 00004219 0F85CDEC0000        <1>  jne L_error_incorrect_type
  5634 0000421F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5635 00004222 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5636                                  
  5637 00004225 483D[02000000]                  	cmp rax, sob_boolean_false
  5638                                  
  5639 0000422B 740F                            	je .L_if_else_0008
  5640 0000422D 48B8-                   	mov rax,L_constants + 1
  5640 0000422F [0100000000000000] 
  5641                                  
  5642 00004237 E9E2000000                      	jmp .L_if_end_0008
  5643                                  
  5644                                          	.L_if_else_0008:
  5645 0000423C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5646 00004240 50                      	push rax
  5647 00004241 6A01                    	push 1
  5648 00004243 488B0425[88000000]      	mov rax, qword [free_var_17]
  5649                                  	assert_closure(rax)
    42 0000424B 803805              <1>  cmp byte [%1], %2
    43 0000424E 0F8598EC0000        <1>  jne L_error_incorrect_type
  5650 00004254 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5651 00004257 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5652 0000425A 50                      	push rax
  5653 0000425B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5654 0000425F 50                      	push rax
  5655 00004260 6A02                    	push 2
  5656 00004262 488B4510                	mov rax, qword [rbp + 8 * 2]
  5657                                  
  5658 00004266 488B00                                            	mov rax, qword[rax + 8 * 0]
  5659                                  
  5660 00004269 488B00                                            	mov rax, qword[rax + 8 * 0]
  5661 0000426C 488B00                  	mov rax, qword [rax]
  5662                                  	assert_closure(rax)
    42 0000426F 803805              <1>  cmp byte [%1], %2
    43 00004272 0F8574EC0000        <1>  jne L_error_incorrect_type
  5663 00004278 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5664 0000427B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5665 0000427E 50                      	push rax
  5666 0000427F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5667 00004283 50                      	push rax
  5668 00004284 6A01                    	push 1
  5669 00004286 488B0425[80000000]      	mov rax, qword [free_var_16]
  5670                                  	assert_closure(rax)
    42 0000428E 803805              <1>  cmp byte [%1], %2
    43 00004291 0F8555EC0000        <1>  jne L_error_incorrect_type
  5671 00004297 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5672 0000429A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5673 0000429D 50                      	push rax
  5674 0000429E 6A01                    	push 1
  5675 000042A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5676                                  	assert_closure(rax)
    42 000042A4 803805              <1>  cmp byte [%1], %2
    43 000042A7 0F853FEC0000        <1>  jne L_error_incorrect_type
  5677 000042AD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5678 000042B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5679 000042B3 50                      	push rax
  5680 000042B4 6A02                    	push 2
  5681 000042B6 488B0425[68000000]      	mov rax, qword [free_var_13]
  5682                                  .L_applic_TC_0029:
  5683 000042BE 803805                  	cmp byte [rax], T_closure
  5684 000042C1 0F85E6E30000            	jne L_code_ptr_error
  5685 000042C7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5686 000042CB 53                      	push rbx
  5687 000042CC FF7508                  	push qword [rbp + 8]
  5688 000042CF FF7500                  	push qword [rbp]
  5689 000042D2 488B4D18                	mov rcx, [rbp + 3 * 8]
  5690 000042D6 488B542418              	mov rdx, [rsp + 3 * 8]
  5691 000042DB 488D7204                	lea rsi, [rdx + 4]
  5692 000042DF 4C8D4EFF                	lea r9, [rsi - 1]
  5693 000042E3 488D7903                	lea rdi, [rcx + 3]
  5694 000042E7 4D31C0                  	xor r8, r8
  5695                                  .L_tc_recycle_frame_loop_0029:
  5696 000042EA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5697 000042EE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5698 000042F3 49FFC9                  	dec r9
  5699 000042F6 4D31C0                  	xor r8, r8
  5700 000042F9 48FFCF                  	dec rdi
  5701 000042FC 48FFCE                  	dec rsi
  5702 000042FF 4883FE00                	cmp rsi, 0
  5703 00004303 75E5                    	jne .L_tc_recycle_frame_loop_0029
  5704                                  .L_tc_recycle_frame_done_0029:
  5705                                  ;this pop rbp in sot to the right place
  5706 00004305 4989C9                  	mov r9, rcx
  5707 00004308 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5708 00004310 4C01CC                  	add rsp, r9
  5709 00004313 5D                      	pop rbp
  5710 00004314 488B4D00                	mov rcx, qword [rbp]
  5711 00004318 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5712 0000431C FFE3                    	jmp rbx
  5713                                  
  5714                                          	.L_if_end_0008:
  5715 0000431E C9                      	leave
  5716 0000431F C22000                  	ret 8 * (2 + 2)
  5717                                  .L_lambda_simple_end_0029:	; new closure is in rax
  5718 00004322 50                      	push rax
  5719 00004323 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5720 00004327 8F00                    	pop qword [rax]
  5721 00004329 48B8-                   	mov rax, sob_void
  5721 0000432B [0000000000000000] 
  5722                                  
  5723 00004333 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5724 00004338 E8BBD30000              	call malloc
  5725 0000433D 50                      	push rax
  5726 0000433E BF10000000              	mov rdi, 8 * 2	; new rib
  5727 00004343 E8B0D30000              	call malloc
  5728 00004348 50                      	push rax
  5729 00004349 BF10000000              	mov rdi, 8 * 2	; extended env
  5730 0000434E E8A5D30000              	call malloc
  5731 00004353 488B7D10                	mov rdi, ENV
  5732 00004357 BE00000000              	mov rsi, 0
  5733 0000435C BA01000000              	mov rdx, 1
  5734                                  .L_lambda_simple_env_loop_002a:	; ext_env[i + 1] <-- env[i]
  5735 00004361 4883FE01                	cmp rsi, 1
  5736 00004365 7410                    	je .L_lambda_simple_env_end_002a
  5737 00004367 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5738 0000436B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5739 0000436F 48FFC6                  	inc rsi
  5740 00004372 48FFC2                  	inc rdx
  5741 00004375 EBEA                    	jmp .L_lambda_simple_env_loop_002a
  5742                                  .L_lambda_simple_env_end_002a:
  5743 00004377 5B                      	pop rbx
  5744 00004378 BE00000000              	mov rsi, 0
  5745                                  .L_lambda_simple_params_loop_002a:	; copy params
  5746 0000437D 4883FE02                	cmp rsi, 2
  5747 00004381 740E                    	je .L_lambda_simple_params_end_002a
  5748 00004383 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5749 00004388 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5750 0000438C 48FFC6                  	inc rsi
  5751 0000438F EBEC                    	jmp .L_lambda_simple_params_loop_002a
  5752                                  .L_lambda_simple_params_end_002a:
  5753 00004391 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5754 00004394 4889C3                  	mov rbx, rax
  5755 00004397 58                      	pop rax
  5756 00004398 C60005                  	mov byte [rax], T_closure
  5757 0000439B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5758 0000439F 48C74009[AC430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002a
  5759 000043A7 E972010000              	jmp .L_lambda_simple_end_002a
  5760                                  .L_lambda_simple_code_002a:	; lambda-simple body
  5761 000043AC 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5762 000043B2 740B                    	je .L_lambda_simple_arity_check_ok_002a
  5763 000043B4 FF742410                	push qword [rsp + 8 * 2]
  5764 000043B8 6A02                    	push 2
  5765 000043BA E9F2D20000              	jmp L_error_incorrect_arity_simple
  5766                                  .L_lambda_simple_arity_check_ok_002a:
  5767 000043BF C8000000                	enter 0, 0
  5768 000043C3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5769 000043C7 50                      	push rax
  5770 000043C8 6A01                    	push 1
  5771 000043CA 488B0425[80000000]      	mov rax, qword [free_var_16]
  5772                                  	assert_closure(rax)
    42 000043D2 803805              <1>  cmp byte [%1], %2
    43 000043D5 0F8511EB0000        <1>  jne L_error_incorrect_type
  5773 000043DB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5774 000043DE FF5009                  	call SOB_CLOSURE_CODE(rax)
  5775 000043E1 50                      	push rax
  5776 000043E2 6A01                    	push 1
  5777 000043E4 488B0425[00000000]      	mov rax, qword [free_var_0]
  5778                                  	assert_closure(rax)
    42 000043EC 803805              <1>  cmp byte [%1], %2
    43 000043EF 0F85F7EA0000        <1>  jne L_error_incorrect_type
  5779 000043F5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5780 000043F8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5781                                  
  5782 000043FB 483D[02000000]                  	cmp rax, sob_boolean_false
  5783                                  
  5784 00004401 740F                            	je .L_if_else_0009
  5785 00004403 48B8-                   	mov rax,L_constants + 1
  5785 00004405 [0100000000000000] 
  5786                                  
  5787 0000440D E908010000                      	jmp .L_if_end_0009
  5788                                  
  5789                                          	.L_if_else_0009:
  5790 00004412 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5791 00004416 50                      	push rax
  5792 00004417 488B0425[88000000]      	mov rax, qword [free_var_17]
  5793 0000441F 50                      	push rax
  5794 00004420 6A02                    	push 2
  5795 00004422 488B4510                	mov rax, qword [rbp + 8 * 2]
  5796                                  
  5797 00004426 488B00                                            	mov rax, qword[rax + 8 * 0]
  5798                                  
  5799 00004429 488B00                                            	mov rax, qword[rax + 8 * 0]
  5800 0000442C 488B00                  	mov rax, qword [rax]
  5801                                  	assert_closure(rax)
    42 0000442F 803805              <1>  cmp byte [%1], %2
    43 00004432 0F85B4EA0000        <1>  jne L_error_incorrect_type
  5802 00004438 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5803 0000443B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5804 0000443E 50                      	push rax
  5805 0000443F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5806 00004443 50                      	push rax
  5807 00004444 6A02                    	push 2
  5808 00004446 488B4510                	mov rax, qword [rbp + 8 * 2]
  5809                                  
  5810 0000444A 488B00                                            	mov rax, qword[rax + 8 * 0]
  5811                                  
  5812 0000444D 488B4008                                          	mov rax, qword[rax + 8 * 1]
  5813 00004451 488B00                  	mov rax, qword [rax]
  5814                                  	assert_closure(rax)
    42 00004454 803805              <1>  cmp byte [%1], %2
    43 00004457 0F858FEA0000        <1>  jne L_error_incorrect_type
  5815 0000445D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5816 00004460 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5817 00004463 50                      	push rax
  5818 00004464 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5819 00004468 50                      	push rax
  5820 00004469 488B0425[80000000]      	mov rax, qword [free_var_16]
  5821 00004471 50                      	push rax
  5822 00004472 6A02                    	push 2
  5823 00004474 488B4510                	mov rax, qword [rbp + 8 * 2]
  5824                                  
  5825 00004478 488B00                                            	mov rax, qword[rax + 8 * 0]
  5826                                  
  5827 0000447B 488B00                                            	mov rax, qword[rax + 8 * 0]
  5828 0000447E 488B00                  	mov rax, qword [rax]
  5829                                  	assert_closure(rax)
    42 00004481 803805              <1>  cmp byte [%1], %2
    43 00004484 0F8562EA0000        <1>  jne L_error_incorrect_type
  5830 0000448A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5831 0000448D FF5009                  	call SOB_CLOSURE_CODE(rax)
  5832 00004490 50                      	push rax
  5833 00004491 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  5834 00004495 50                      	push rax
  5835 00004496 6A02                    	push 2
  5836 00004498 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5837                                  	assert_closure(rax)
    42 000044A0 803805              <1>  cmp byte [%1], %2
    43 000044A3 0F8543EA0000        <1>  jne L_error_incorrect_type
  5838 000044A9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  5839 000044AC FF5009                  	call SOB_CLOSURE_CODE(rax)
  5840 000044AF 50                      	push rax
  5841 000044B0 6A02                    	push 2
  5842 000044B2 488B0425[68000000]      	mov rax, qword [free_var_13]
  5843                                  .L_applic_TC_002a:
  5844 000044BA 803805                  	cmp byte [rax], T_closure
  5845 000044BD 0F85EAE10000            	jne L_code_ptr_error
  5846 000044C3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  5847 000044C7 53                      	push rbx
  5848 000044C8 FF7508                  	push qword [rbp + 8]
  5849 000044CB FF7500                  	push qword [rbp]
  5850 000044CE 488B4D18                	mov rcx, [rbp + 3 * 8]
  5851 000044D2 488B542418              	mov rdx, [rsp + 3 * 8]
  5852 000044D7 488D7204                	lea rsi, [rdx + 4]
  5853 000044DB 4C8D4EFF                	lea r9, [rsi - 1]
  5854 000044DF 488D7903                	lea rdi, [rcx + 3]
  5855 000044E3 4D31C0                  	xor r8, r8
  5856                                  .L_tc_recycle_frame_loop_002a:
  5857 000044E6 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  5858 000044EA 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  5859 000044EF 49FFC9                  	dec r9
  5860 000044F2 4D31C0                  	xor r8, r8
  5861 000044F5 48FFCF                  	dec rdi
  5862 000044F8 48FFCE                  	dec rsi
  5863 000044FB 4883FE00                	cmp rsi, 0
  5864 000044FF 75E5                    	jne .L_tc_recycle_frame_loop_002a
  5865                                  .L_tc_recycle_frame_done_002a:
  5866                                  ;this pop rbp in sot to the right place
  5867 00004501 4989C9                  	mov r9, rcx
  5868 00004504 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  5869 0000450C 4C01CC                  	add rsp, r9
  5870 0000450F 5D                      	pop rbp
  5871 00004510 488B4D00                	mov rcx, qword [rbp]
  5872 00004514 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  5873 00004518 FFE3                    	jmp rbx
  5874                                  
  5875                                          	.L_if_end_0009:
  5876 0000451A C9                      	leave
  5877 0000451B C22000                  	ret 8 * (2 + 2)
  5878                                  .L_lambda_simple_end_002a:	; new closure is in rax
  5879 0000451E 50                      	push rax
  5880 0000451F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  5881 00004523 8F00                    	pop qword [rax]
  5882 00004525 48B8-                   	mov rax, sob_void
  5882 00004527 [0000000000000000] 
  5883                                  
  5884 0000452F BF11000000              	mov rdi, (1 + 8 + 8)
  5885 00004534 E8BFD10000              	call malloc
  5886 00004539 50                      	push rax
  5887 0000453A BF10000000              	mov rdi, 8 * 2
  5888 0000453F E8B4D10000              	call malloc
  5889 00004544 50                      	push rax
  5890 00004545 BF10000000              	mov rdi, 8 * 2
  5891 0000454A E8A9D10000              	call malloc
  5892 0000454F 488B7D10                	mov rdi, ENV
  5893 00004553 4831F6                  	xor rsi, rsi
  5894 00004556 4831D2                  	xor rdx, rdx
  5895 00004559 48FFC2                  	inc rdx
  5896                                  	.L_lambda_opt_env_loop_0006:
  5897                                  
  5898 0000455C 4883FE01                        	cmp rsi, 1
  5899                                  
  5900 00004560 7412                            	je .L_lambda_opt_env_end_0006
  5901 00004562 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5902 00004566 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5903 0000456A 4883C201                	add rdx, 1
  5904 0000456E 4883C601                	add rsi, 1
  5905 00004572 EBE8                    	jmp .L_lambda_opt_env_loop_0006
  5906                                  
  5907                                          	.L_lambda_opt_env_end_0006:
  5908 00004574 5B                      	pop rbx
  5909 00004575 4831F6                  	xor rsi, rsi
  5910                                  	.L_lambda_opt_params_loop_0006:
  5911                                  
  5912 00004578 4883FE02                        	cmp rsi, 2
  5913                                  
  5914 0000457C 740F                            	je .L_lambda_opt_params_end_0006
  5915 0000457E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5916 00004583 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5917 00004587 4883C601                	add rsi, 1
  5918 0000458B EBEB                    	jmp .L_lambda_opt_params_loop_0006
  5919                                  
  5920                                          	.L_lambda_opt_params_end_0006:
  5921 0000458D 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  5922 00004590 4889C3                  	mov rbx, rax
  5923 00004593 58                      	pop rax
  5924 00004594 C60005                  	mov byte [rax], T_closure
  5925 00004597 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5926 0000459B 48C74009[A8450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
  5927                                  
  5928 000045A3 E9BA010000                      	jmp .L_lambda_opt_end_0006
  5929                                  
  5930                                          	.L_lambda_opt_code_0006:
  5931                                  
  5932 000045A8 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  5933                                  
  5934 000045AE 740D                            	je .L_lambda_opt_arity_check_exact_0006  ;same num_of_args
  5935                                  
  5936 000045B0 7F65                            	jg .L_lambda_opt_arity_check_more_0006  ;greater num_of_args
  5937 000045B2 FF742410                	push qword [rsp + 8 * 2]
  5938 000045B6 6A01                    	push 1
  5939 000045B8 E908D10000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  5940                                  .L_lambda_opt_arity_check_exact_0006:
  5941 000045BD 4883EC08                	sub rsp, 8 * 1
  5942 000045C1 488D7F10                	lea rdi, [rdi + (8 * 2)]
  5943 000045C5 4889E7                  	mov rdi, rsp 
  5944 000045C8 488B4708                	mov rax, qword [rdi + 8]
  5945 000045CC 488907                  	mov qword [rdi], rax
  5946 000045CF 488D7F08                	lea rdi, [rdi + 8]
  5947 000045D3 488B4708                	mov rax, qword [rdi + 8]
  5948 000045D7 488907                  	mov qword [rdi], rax
  5949 000045DA 488D7F08                	lea rdi, [rdi + 8]
  5950 000045DE 488B4708                	mov rax, qword [rdi + 8]
  5951 000045E2 4889C1                  	mov rcx, rax
  5952 000045E5 4883C001                	add rax, 1
  5953 000045E9 488907                  	mov qword [rdi], rax
  5954 000045EC 488D7F08                	lea rdi, [rdi + 8]
  5955                                  	.L_lambda_opt_stack_shrink_loop_0010:
  5956 000045F0 4883F900                	cmp rcx, 0
  5957 000045F4 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0010
  5958 000045F6 4883E901                	sub rcx, 1
  5959 000045FA 488D4010                	lea rax, [rax + (8 * 2)]
  5960 000045FE 488B4708                	mov rax, qword [rdi + 8]
  5961 00004602 488907                  	mov qword [rdi], rax
  5962 00004605 488D7F08                	lea rdi, [rdi + 8]
  5963 00004609 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0010
  5964                                  
  5965                                          	.L_lambda_opt_stack_shrink_loop_exit_0010:
  5966 0000460B 48C707[01000000]        	mov qword [rdi], sob_nil
  5967 00004612 E997000000              	jmp .L_lambda_opt_stack_adjusted_0006
  5968                                  
  5969                                          	.L_lambda_opt_arity_check_more_0006:
  5970 00004617 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  5971 0000461C 488D4EFF                	lea rcx, [rsi - 1]
  5972 00004620 49B8-                   	mov r8, sob_nil
  5972 00004622 [0100000000000000] 
  5973 0000462A 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  5974 0000462F 4889F2                  	mov rdx, rsi
  5975                                  	.L_lambda_opt_stack_shrink_loop_0011:
  5976 00004632 4883F900                	cmp rcx, 0
  5977 00004636 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0011
  5978 00004638 BF11000000              	mov rdi, 1 + (8 * 2)
  5979 0000463D E8B6D00000              	call malloc
  5980 00004642 C60021                  	mov byte [rax], T_pair
  5981 00004645 488B1E                  	mov rbx, qword [rsi]
  5982 00004648 48895801                	mov SOB_PAIR_CAR(rax), rbx
  5983 0000464C 4C894009                	mov SOB_PAIR_CDR(rax), r8
  5984 00004650 4883C6F8                	add rsi, -8
  5985 00004654 4883E901                	sub rcx, 1
  5986 00004658 4989C0                  	mov r8, rax
  5987 0000465B EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0011
  5988                                  
  5989                                          	.L_lambda_opt_stack_shrink_loop_exit_0011:
  5990 0000465D 4C8902                  	mov qword [rdx], r8
  5991 00004660 4883EA08                	sub rdx, 8 * 1
  5992 00004664 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  5993                                  
  5994 00004669 B901000000                      	mov rcx, 1 
  5995                                  
  5996                                          	.L_lambda_opt_stack_shrink_loop_0012:
  5997 0000466E 4883F900                	cmp rcx, 0
  5998 00004672 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0012
  5999 00004674 488B06                  	mov rax, qword [rsi]
  6000 00004677 488902                  	mov qword [rdx], rax
  6001 0000467A 488D76F8                	lea rsi, [rsi - 8]
  6002 0000467E 4883C2F8                	add rdx, -8
  6003 00004682 4883C1FF                	add rcx, -1
  6004 00004686 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0012
  6005                                  
  6006                                          	.L_lambda_opt_stack_shrink_loop_exit_0012:
  6007                                  
  6008 00004688 48C70202000000                  	mov qword [rdx], 1 + 1
  6009 0000468F 4883C6F8                	add rsi, -8
  6010 00004693 4883C2F8                	add rdx, -8
  6011 00004697 488B06                  	mov rax, qword [rsi]
  6012 0000469A 488902                  	mov qword [rdx], rax
  6013 0000469D 4883C2F8                	add rdx, -8
  6014 000046A1 488D76F8                	lea rsi, [rsi - 8]
  6015 000046A5 488B06                  	mov rax, qword [rsi]
  6016 000046A8 488902                  	mov qword [rdx], rax
  6017 000046AB 4889D4                  	mov rsp, rdx
  6018                                  	.L_lambda_opt_stack_adjusted_0006:
  6019 000046AE C8000000                	enter 0, 0
  6020 000046B2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6021 000046B6 50                      	push rax
  6022 000046B7 6A01                    	push 1
  6023 000046B9 488B0425[00000000]      	mov rax, qword [free_var_0]
  6024                                  	assert_closure(rax)
    42 000046C1 803805              <1>  cmp byte [%1], %2
    43 000046C4 0F8522E80000        <1>  jne L_error_incorrect_type
  6025 000046CA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6026 000046CD FF5009                  	call SOB_CLOSURE_CODE(rax)
  6027                                  
  6028 000046D0 483D[02000000]                  	cmp rax, sob_boolean_false
  6029                                  
  6030 000046D6 740C                            	je .L_if_else_000a
  6031 000046D8 48B8-                   	mov rax,L_constants + 1
  6031 000046DA [0100000000000000] 
  6032                                  
  6033 000046E2 EB7A                            	jmp .L_if_end_000a
  6034                                  
  6035                                          	.L_if_else_000a:
  6036 000046E4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6037 000046E8 50                      	push rax
  6038 000046E9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6039 000046ED 50                      	push rax
  6040 000046EE 6A02                    	push 2
  6041 000046F0 488B4510                	mov rax, qword [rbp + 8 * 2]
  6042                                  
  6043 000046F4 488B00                                            	mov rax, qword[rax + 8 * 0]
  6044                                  
  6045 000046F7 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6046 000046FB 488B00                  	mov rax, qword [rax]
  6047                                  .L_applic_TC_002b:
  6048 000046FE 803805                  	cmp byte [rax], T_closure
  6049 00004701 0F85A6DF0000            	jne L_code_ptr_error
  6050 00004707 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6051 0000470B 53                      	push rbx
  6052 0000470C FF7508                  	push qword [rbp + 8]
  6053 0000470F FF7500                  	push qword [rbp]
  6054 00004712 488B4D18                	mov rcx, [rbp + 3 * 8]
  6055 00004716 488B542418              	mov rdx, [rsp + 3 * 8]
  6056 0000471B 488D7204                	lea rsi, [rdx + 4]
  6057 0000471F 4C8D4EFF                	lea r9, [rsi - 1]
  6058 00004723 488D7903                	lea rdi, [rcx + 3]
  6059 00004727 4D31C0                  	xor r8, r8
  6060                                  .L_tc_recycle_frame_loop_002b:
  6061 0000472A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6062 0000472E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6063 00004733 49FFC9                  	dec r9
  6064 00004736 4D31C0                  	xor r8, r8
  6065 00004739 48FFCF                  	dec rdi
  6066 0000473C 48FFCE                  	dec rsi
  6067 0000473F 4883FE00                	cmp rsi, 0
  6068 00004743 75E5                    	jne .L_tc_recycle_frame_loop_002b
  6069                                  .L_tc_recycle_frame_done_002b:
  6070                                  ;this pop rbp in sot to the right place
  6071 00004745 4989C9                  	mov r9, rcx
  6072 00004748 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6073 00004750 4C01CC                  	add rsp, r9
  6074 00004753 5D                      	pop rbp
  6075 00004754 488B4D00                	mov rcx, qword [rbp]
  6076 00004758 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6077 0000475C FFE3                    	jmp rbx
  6078                                  
  6079                                          	.L_if_end_000a:
  6080 0000475E C9                      	leave
  6081 0000475F C22000                  	ret 8 * (2 + 2)
  6082                                  .L_lambda_opt_end_0006:	; new closure is in rax
  6083 00004762 C9                      	leave
  6084 00004763 C22000                  	ret 8 * (2 + 2)
  6085                                  .L_lambda_simple_end_0028:	; new closure is in rax
  6086                                  	assert_closure(rax)
    42 00004766 803805              <1>  cmp byte [%1], %2
    43 00004769 0F857DE70000        <1>  jne L_error_incorrect_type
  6087 0000476F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6088 00004772 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6089 00004775 48890425[D8020000]      	mov qword [free_var_91], rax
  6090 0000477D 48B8-                   	mov rax, sob_void
  6090 0000477F [0000000000000000] 
  6091                                  
  6092 00004787 4889C7                  	mov rdi, rax
  6093 0000478A E87ACF0000              	call print_sexpr_if_not_void
  6094                                  
  6095 0000478F 48B8-                   	mov rax,L_constants + 23
  6095 00004791 [1700000000000000] 
  6096 00004799 50                      	push rax
  6097 0000479A 6A01                    	push 1
  6098 0000479C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6099 000047A1 E852CF0000              	call malloc
  6100 000047A6 50                      	push rax
  6101 000047A7 BF00000000              	mov rdi, 8 * 0	; new rib
  6102 000047AC E847CF0000              	call malloc
  6103 000047B1 50                      	push rax
  6104 000047B2 BF08000000              	mov rdi, 8 * 1	; extended env
  6105 000047B7 E83CCF0000              	call malloc
  6106 000047BC 488B7D10                	mov rdi, ENV
  6107 000047C0 BE00000000              	mov rsi, 0
  6108 000047C5 BA01000000              	mov rdx, 1
  6109                                  .L_lambda_simple_env_loop_002b:	; ext_env[i + 1] <-- env[i]
  6110 000047CA 4883FE00                	cmp rsi, 0
  6111 000047CE 7410                    	je .L_lambda_simple_env_end_002b
  6112 000047D0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6113 000047D4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6114 000047D8 48FFC6                  	inc rsi
  6115 000047DB 48FFC2                  	inc rdx
  6116 000047DE EBEA                    	jmp .L_lambda_simple_env_loop_002b
  6117                                  .L_lambda_simple_env_end_002b:
  6118 000047E0 5B                      	pop rbx
  6119 000047E1 BE00000000              	mov rsi, 0
  6120                                  .L_lambda_simple_params_loop_002b:	; copy params
  6121 000047E6 4883FE00                	cmp rsi, 0
  6122 000047EA 740E                    	je .L_lambda_simple_params_end_002b
  6123 000047EC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6124 000047F1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6125 000047F5 48FFC6                  	inc rsi
  6126 000047F8 EBEC                    	jmp .L_lambda_simple_params_loop_002b
  6127                                  .L_lambda_simple_params_end_002b:
  6128 000047FA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6129 000047FD 4889C3                  	mov rbx, rax
  6130 00004800 58                      	pop rax
  6131 00004801 C60005                  	mov byte [rax], T_closure
  6132 00004804 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6133 00004808 48C74009[15480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002b
  6134 00004810 E9ED020000              	jmp .L_lambda_simple_end_002b
  6135                                  .L_lambda_simple_code_002b:	; lambda-simple body
  6136 00004815 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6137 0000481B 740B                    	je .L_lambda_simple_arity_check_ok_002b
  6138 0000481D FF742410                	push qword [rsp + 8 * 2]
  6139 00004821 6A01                    	push 1
  6140 00004823 E989CE0000              	jmp L_error_incorrect_arity_simple
  6141                                  .L_lambda_simple_arity_check_ok_002b:
  6142 00004828 C8000000                	enter 0, 0
  6143 0000482C BF08000000              	mov rdi, 8
  6144 00004831 E8C2CE0000              	call malloc
  6145 00004836 488B5D20                	mov rbx, PARAM(0)
  6146 0000483A 488918                  	mov qword [rax], rbx
  6147 0000483D 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6148                                  
  6149 00004841 48B8-                            	mov rax, sob_void
  6149 00004843 [0000000000000000] 
  6150                                  
  6151 0000484B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6152 00004850 E8A3CE0000              	call malloc
  6153 00004855 50                      	push rax
  6154 00004856 BF08000000              	mov rdi, 8 * 1	; new rib
  6155 0000485B E898CE0000              	call malloc
  6156 00004860 50                      	push rax
  6157 00004861 BF10000000              	mov rdi, 8 * 2	; extended env
  6158 00004866 E88DCE0000              	call malloc
  6159 0000486B 488B7D10                	mov rdi, ENV
  6160 0000486F BE00000000              	mov rsi, 0
  6161 00004874 BA01000000              	mov rdx, 1
  6162                                  .L_lambda_simple_env_loop_002c:	; ext_env[i + 1] <-- env[i]
  6163 00004879 4883FE01                	cmp rsi, 1
  6164 0000487D 7410                    	je .L_lambda_simple_env_end_002c
  6165 0000487F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6166 00004883 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6167 00004887 48FFC6                  	inc rsi
  6168 0000488A 48FFC2                  	inc rdx
  6169 0000488D EBEA                    	jmp .L_lambda_simple_env_loop_002c
  6170                                  .L_lambda_simple_env_end_002c:
  6171 0000488F 5B                      	pop rbx
  6172 00004890 BE00000000              	mov rsi, 0
  6173                                  .L_lambda_simple_params_loop_002c:	; copy params
  6174 00004895 4883FE01                	cmp rsi, 1
  6175 00004899 740E                    	je .L_lambda_simple_params_end_002c
  6176 0000489B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6177 000048A0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6178 000048A4 48FFC6                  	inc rsi
  6179 000048A7 EBEC                    	jmp .L_lambda_simple_params_loop_002c
  6180                                  .L_lambda_simple_params_end_002c:
  6181 000048A9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6182 000048AC 4889C3                  	mov rbx, rax
  6183 000048AF 58                      	pop rax
  6184 000048B0 C60005                  	mov byte [rax], T_closure
  6185 000048B3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6186 000048B7 48C74009[C4480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002c
  6187 000048BF E916010000              	jmp .L_lambda_simple_end_002c
  6188                                  .L_lambda_simple_code_002c:	; lambda-simple body
  6189 000048C4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6190 000048CA 740B                    	je .L_lambda_simple_arity_check_ok_002c
  6191 000048CC FF742410                	push qword [rsp + 8 * 2]
  6192 000048D0 6A02                    	push 2
  6193 000048D2 E9DACD0000              	jmp L_error_incorrect_arity_simple
  6194                                  .L_lambda_simple_arity_check_ok_002c:
  6195 000048D7 C8000000                	enter 0, 0
  6196 000048DB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6197 000048DF 50                      	push rax
  6198 000048E0 6A01                    	push 1
  6199 000048E2 488B0425[00000000]      	mov rax, qword [free_var_0]
  6200                                  	assert_closure(rax)
    42 000048EA 803805              <1>  cmp byte [%1], %2
    43 000048ED 0F85F9E50000        <1>  jne L_error_incorrect_type
  6201 000048F3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6202 000048F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6203                                  
  6204 000048F9 483D[02000000]                  	cmp rax, sob_boolean_false
  6205                                  
  6206 000048FF 7409                            	je .L_if_else_000b
  6207 00004901 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6208                                  
  6209 00004905 E9CC000000                      	jmp .L_if_end_000b
  6210                                  
  6211                                          	.L_if_else_000b:
  6212 0000490A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6213 0000490E 50                      	push rax
  6214 0000490F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6215 00004913 50                      	push rax
  6216 00004914 6A01                    	push 1
  6217 00004916 488B0425[80000000]      	mov rax, qword [free_var_16]
  6218                                  	assert_closure(rax)
    42 0000491E 803805              <1>  cmp byte [%1], %2
    43 00004921 0F85C5E50000        <1>  jne L_error_incorrect_type
  6219 00004927 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6220 0000492A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6221 0000492D 50                      	push rax
  6222 0000492E 6A02                    	push 2
  6223 00004930 488B0425[68000000]      	mov rax, qword [free_var_13]
  6224                                  	assert_closure(rax)
    42 00004938 803805              <1>  cmp byte [%1], %2
    43 0000493B 0F85ABE50000        <1>  jne L_error_incorrect_type
  6225 00004941 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6226 00004944 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6227 00004947 50                      	push rax
  6228 00004948 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6229 0000494C 50                      	push rax
  6230 0000494D 6A01                    	push 1
  6231 0000494F 488B0425[88000000]      	mov rax, qword [free_var_17]
  6232                                  	assert_closure(rax)
    42 00004957 803805              <1>  cmp byte [%1], %2
    43 0000495A 0F858CE50000        <1>  jne L_error_incorrect_type
  6233 00004960 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6234 00004963 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6235 00004966 50                      	push rax
  6236 00004967 6A02                    	push 2
  6237 00004969 488B4510                	mov rax, qword [rbp + 8 * 2]
  6238                                  
  6239 0000496D 488B00                                            	mov rax, qword[rax + 8 * 0]
  6240                                  
  6241 00004970 488B00                                            	mov rax, qword[rax + 8 * 0]
  6242 00004973 488B00                  	mov rax, qword [rax]
  6243                                  .L_applic_TC_002c:
  6244 00004976 803805                  	cmp byte [rax], T_closure
  6245 00004979 0F852EDD0000            	jne L_code_ptr_error
  6246 0000497F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6247 00004983 53                      	push rbx
  6248 00004984 FF7508                  	push qword [rbp + 8]
  6249 00004987 FF7500                  	push qword [rbp]
  6250 0000498A 488B4D18                	mov rcx, [rbp + 3 * 8]
  6251 0000498E 488B542418              	mov rdx, [rsp + 3 * 8]
  6252 00004993 488D7204                	lea rsi, [rdx + 4]
  6253 00004997 4C8D4EFF                	lea r9, [rsi - 1]
  6254 0000499B 488D7903                	lea rdi, [rcx + 3]
  6255 0000499F 4D31C0                  	xor r8, r8
  6256                                  .L_tc_recycle_frame_loop_002c:
  6257 000049A2 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6258 000049A6 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6259 000049AB 49FFC9                  	dec r9
  6260 000049AE 4D31C0                  	xor r8, r8
  6261 000049B1 48FFCF                  	dec rdi
  6262 000049B4 48FFCE                  	dec rsi
  6263 000049B7 4883FE00                	cmp rsi, 0
  6264 000049BB 75E5                    	jne .L_tc_recycle_frame_loop_002c
  6265                                  .L_tc_recycle_frame_done_002c:
  6266                                  ;this pop rbp in sot to the right place
  6267 000049BD 4989C9                  	mov r9, rcx
  6268 000049C0 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6269 000049C8 4C01CC                  	add rsp, r9
  6270 000049CB 5D                      	pop rbp
  6271 000049CC 488B4D00                	mov rcx, qword [rbp]
  6272 000049D0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6273 000049D4 FFE3                    	jmp rbx
  6274                                  
  6275                                          	.L_if_end_000b:
  6276 000049D6 C9                      	leave
  6277 000049D7 C22000                  	ret 8 * (2 + 2)
  6278                                  .L_lambda_simple_end_002c:	; new closure is in rax
  6279 000049DA 50                      	push rax
  6280 000049DB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6281 000049DF 8F00                    	pop qword [rax]
  6282 000049E1 48B8-                   	mov rax, sob_void
  6282 000049E3 [0000000000000000] 
  6283                                  
  6284 000049EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6285 000049F0 E803CD0000              	call malloc
  6286 000049F5 50                      	push rax
  6287 000049F6 BF08000000              	mov rdi, 8 * 1	; new rib
  6288 000049FB E8F8CC0000              	call malloc
  6289 00004A00 50                      	push rax
  6290 00004A01 BF10000000              	mov rdi, 8 * 2	; extended env
  6291 00004A06 E8EDCC0000              	call malloc
  6292 00004A0B 488B7D10                	mov rdi, ENV
  6293 00004A0F BE00000000              	mov rsi, 0
  6294 00004A14 BA01000000              	mov rdx, 1
  6295                                  .L_lambda_simple_env_loop_002d:	; ext_env[i + 1] <-- env[i]
  6296 00004A19 4883FE01                	cmp rsi, 1
  6297 00004A1D 7410                    	je .L_lambda_simple_env_end_002d
  6298 00004A1F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6299 00004A23 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6300 00004A27 48FFC6                  	inc rsi
  6301 00004A2A 48FFC2                  	inc rdx
  6302 00004A2D EBEA                    	jmp .L_lambda_simple_env_loop_002d
  6303                                  .L_lambda_simple_env_end_002d:
  6304 00004A2F 5B                      	pop rbx
  6305 00004A30 BE00000000              	mov rsi, 0
  6306                                  .L_lambda_simple_params_loop_002d:	; copy params
  6307 00004A35 4883FE01                	cmp rsi, 1
  6308 00004A39 740E                    	je .L_lambda_simple_params_end_002d
  6309 00004A3B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6310 00004A40 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6311 00004A44 48FFC6                  	inc rsi
  6312 00004A47 EBEC                    	jmp .L_lambda_simple_params_loop_002d
  6313                                  .L_lambda_simple_params_end_002d:
  6314 00004A49 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6315 00004A4C 4889C3                  	mov rbx, rax
  6316 00004A4F 58                      	pop rax
  6317 00004A50 C60005                  	mov byte [rax], T_closure
  6318 00004A53 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6319 00004A57 48C74009[644A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002d
  6320 00004A5F E99A000000              	jmp .L_lambda_simple_end_002d
  6321                                  .L_lambda_simple_code_002d:	; lambda-simple body
  6322 00004A64 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6323 00004A6A 740B                    	je .L_lambda_simple_arity_check_ok_002d
  6324 00004A6C FF742410                	push qword [rsp + 8 * 2]
  6325 00004A70 6A01                    	push 1
  6326 00004A72 E93ACC0000              	jmp L_error_incorrect_arity_simple
  6327                                  .L_lambda_simple_arity_check_ok_002d:
  6328 00004A77 C8000000                	enter 0, 0
  6329 00004A7B 48B8-                   	mov rax,L_constants + 1
  6329 00004A7D [0100000000000000] 
  6330 00004A85 50                      	push rax
  6331 00004A86 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6332 00004A8A 50                      	push rax
  6333 00004A8B 6A02                    	push 2
  6334 00004A8D 488B4510                	mov rax, qword [rbp + 8 * 2]
  6335                                  
  6336 00004A91 488B00                                            	mov rax, qword[rax + 8 * 0]
  6337                                  
  6338 00004A94 488B00                                            	mov rax, qword[rax + 8 * 0]
  6339 00004A97 488B00                  	mov rax, qword [rax]
  6340                                  .L_applic_TC_002d:
  6341 00004A9A 803805                  	cmp byte [rax], T_closure
  6342 00004A9D 0F850ADC0000            	jne L_code_ptr_error
  6343 00004AA3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6344 00004AA7 53                      	push rbx
  6345 00004AA8 FF7508                  	push qword [rbp + 8]
  6346 00004AAB FF7500                  	push qword [rbp]
  6347 00004AAE 488B4D18                	mov rcx, [rbp + 3 * 8]
  6348 00004AB2 488B542418              	mov rdx, [rsp + 3 * 8]
  6349 00004AB7 488D7204                	lea rsi, [rdx + 4]
  6350 00004ABB 4C8D4EFF                	lea r9, [rsi - 1]
  6351 00004ABF 488D7903                	lea rdi, [rcx + 3]
  6352 00004AC3 4D31C0                  	xor r8, r8
  6353                                  .L_tc_recycle_frame_loop_002d:
  6354 00004AC6 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6355 00004ACA 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6356 00004ACF 49FFC9                  	dec r9
  6357 00004AD2 4D31C0                  	xor r8, r8
  6358 00004AD5 48FFCF                  	dec rdi
  6359 00004AD8 48FFCE                  	dec rsi
  6360 00004ADB 4883FE00                	cmp rsi, 0
  6361 00004ADF 75E5                    	jne .L_tc_recycle_frame_loop_002d
  6362                                  .L_tc_recycle_frame_done_002d:
  6363                                  ;this pop rbp in sot to the right place
  6364 00004AE1 4989C9                  	mov r9, rcx
  6365 00004AE4 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6366 00004AEC 4C01CC                  	add rsp, r9
  6367 00004AEF 5D                      	pop rbp
  6368 00004AF0 488B4D00                	mov rcx, qword [rbp]
  6369 00004AF4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6370 00004AF8 FFE3                    	jmp rbx
  6371 00004AFA C9                      	leave
  6372 00004AFB C21800                  	ret 8 * (2 + 1)
  6373                                  .L_lambda_simple_end_002d:	; new closure is in rax
  6374 00004AFE C9                      	leave
  6375 00004AFF C21800                  	ret 8 * (2 + 1)
  6376                                  .L_lambda_simple_end_002b:	; new closure is in rax
  6377                                  	assert_closure(rax)
    42 00004B02 803805              <1>  cmp byte [%1], %2
    43 00004B05 0F85E1E30000        <1>  jne L_error_incorrect_type
  6378 00004B0B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6379 00004B0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6380 00004B11 48890425[E8020000]      	mov qword [free_var_93], rax
  6381 00004B19 48B8-                   	mov rax, sob_void
  6381 00004B1B [0000000000000000] 
  6382                                  
  6383 00004B23 4889C7                  	mov rdi, rax
  6384 00004B26 E8DECB0000              	call print_sexpr_if_not_void
  6385                                  
  6386 00004B2B 48B8-                   	mov rax,L_constants + 23
  6386 00004B2D [1700000000000000] 
  6387 00004B35 50                      	push rax
  6388 00004B36 48B8-                   	mov rax,L_constants + 23
  6388 00004B38 [1700000000000000] 
  6389 00004B40 50                      	push rax
  6390 00004B41 6A02                    	push 2
  6391 00004B43 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6392 00004B48 E8ABCB0000              	call malloc
  6393 00004B4D 50                      	push rax
  6394 00004B4E BF00000000              	mov rdi, 8 * 0	; new rib
  6395 00004B53 E8A0CB0000              	call malloc
  6396 00004B58 50                      	push rax
  6397 00004B59 BF08000000              	mov rdi, 8 * 1	; extended env
  6398 00004B5E E895CB0000              	call malloc
  6399 00004B63 488B7D10                	mov rdi, ENV
  6400 00004B67 BE00000000              	mov rsi, 0
  6401 00004B6C BA01000000              	mov rdx, 1
  6402                                  .L_lambda_simple_env_loop_002e:	; ext_env[i + 1] <-- env[i]
  6403 00004B71 4883FE00                	cmp rsi, 0
  6404 00004B75 7410                    	je .L_lambda_simple_env_end_002e
  6405 00004B77 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6406 00004B7B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6407 00004B7F 48FFC6                  	inc rsi
  6408 00004B82 48FFC2                  	inc rdx
  6409 00004B85 EBEA                    	jmp .L_lambda_simple_env_loop_002e
  6410                                  .L_lambda_simple_env_end_002e:
  6411 00004B87 5B                      	pop rbx
  6412 00004B88 BE00000000              	mov rsi, 0
  6413                                  .L_lambda_simple_params_loop_002e:	; copy params
  6414 00004B8D 4883FE00                	cmp rsi, 0
  6415 00004B91 740E                    	je .L_lambda_simple_params_end_002e
  6416 00004B93 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6417 00004B98 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6418 00004B9C 48FFC6                  	inc rsi
  6419 00004B9F EBEC                    	jmp .L_lambda_simple_params_loop_002e
  6420                                  .L_lambda_simple_params_end_002e:
  6421 00004BA1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6422 00004BA4 4889C3                  	mov rbx, rax
  6423 00004BA7 58                      	pop rax
  6424 00004BA8 C60005                  	mov byte [rax], T_closure
  6425 00004BAB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6426 00004BAF 48C74009[BC4B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002e
  6427 00004BB7 E908060000              	jmp .L_lambda_simple_end_002e
  6428                                  .L_lambda_simple_code_002e:	; lambda-simple body
  6429 00004BBC 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6430 00004BC2 740B                    	je .L_lambda_simple_arity_check_ok_002e
  6431 00004BC4 FF742410                	push qword [rsp + 8 * 2]
  6432 00004BC8 6A02                    	push 2
  6433 00004BCA E9E2CA0000              	jmp L_error_incorrect_arity_simple
  6434                                  .L_lambda_simple_arity_check_ok_002e:
  6435 00004BCF C8000000                	enter 0, 0
  6436 00004BD3 BF08000000              	mov rdi, 8
  6437 00004BD8 E81BCB0000              	call malloc
  6438 00004BDD 488B5D20                	mov rbx, PARAM(0)
  6439 00004BE1 488918                  	mov qword [rax], rbx
  6440 00004BE4 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6441                                  
  6442 00004BE8 48B8-                            	mov rax, sob_void
  6442 00004BEA [0000000000000000] 
  6443                                  
  6444 00004BF2 BF08000000              	mov rdi, 8
  6445 00004BF7 E8FCCA0000              	call malloc
  6446 00004BFC 488B5D28                	mov rbx, PARAM(1)
  6447 00004C00 488918                  	mov qword [rax], rbx
  6448 00004C03 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  6449                                  
  6450 00004C07 48B8-                            	mov rax, sob_void
  6450 00004C09 [0000000000000000] 
  6451                                  
  6452 00004C11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6453 00004C16 E8DDCA0000              	call malloc
  6454 00004C1B 50                      	push rax
  6455 00004C1C BF10000000              	mov rdi, 8 * 2	; new rib
  6456 00004C21 E8D2CA0000              	call malloc
  6457 00004C26 50                      	push rax
  6458 00004C27 BF10000000              	mov rdi, 8 * 2	; extended env
  6459 00004C2C E8C7CA0000              	call malloc
  6460 00004C31 488B7D10                	mov rdi, ENV
  6461 00004C35 BE00000000              	mov rsi, 0
  6462 00004C3A BA01000000              	mov rdx, 1
  6463                                  .L_lambda_simple_env_loop_002f:	; ext_env[i + 1] <-- env[i]
  6464 00004C3F 4883FE01                	cmp rsi, 1
  6465 00004C43 7410                    	je .L_lambda_simple_env_end_002f
  6466 00004C45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6467 00004C49 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6468 00004C4D 48FFC6                  	inc rsi
  6469 00004C50 48FFC2                  	inc rdx
  6470 00004C53 EBEA                    	jmp .L_lambda_simple_env_loop_002f
  6471                                  .L_lambda_simple_env_end_002f:
  6472 00004C55 5B                      	pop rbx
  6473 00004C56 BE00000000              	mov rsi, 0
  6474                                  .L_lambda_simple_params_loop_002f:	; copy params
  6475 00004C5B 4883FE02                	cmp rsi, 2
  6476 00004C5F 740E                    	je .L_lambda_simple_params_end_002f
  6477 00004C61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6478 00004C66 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6479 00004C6A 48FFC6                  	inc rsi
  6480 00004C6D EBEC                    	jmp .L_lambda_simple_params_loop_002f
  6481                                  .L_lambda_simple_params_end_002f:
  6482 00004C6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6483 00004C72 4889C3                  	mov rbx, rax
  6484 00004C75 58                      	pop rax
  6485 00004C76 C60005                  	mov byte [rax], T_closure
  6486 00004C79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6487 00004C7D 48C74009[8A4C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_002f
  6488 00004C85 E91C010000              	jmp .L_lambda_simple_end_002f
  6489                                  .L_lambda_simple_code_002f:	; lambda-simple body
  6490 00004C8A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6491 00004C90 740B                    	je .L_lambda_simple_arity_check_ok_002f
  6492 00004C92 FF742410                	push qword [rsp + 8 * 2]
  6493 00004C96 6A02                    	push 2
  6494 00004C98 E914CA0000              	jmp L_error_incorrect_arity_simple
  6495                                  .L_lambda_simple_arity_check_ok_002f:
  6496 00004C9D C8000000                	enter 0, 0
  6497 00004CA1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6498 00004CA5 50                      	push rax
  6499 00004CA6 6A01                    	push 1
  6500 00004CA8 488B0425[00000000]      	mov rax, qword [free_var_0]
  6501                                  	assert_closure(rax)
    42 00004CB0 803805              <1>  cmp byte [%1], %2
    43 00004CB3 0F8533E20000        <1>  jne L_error_incorrect_type
  6502 00004CB9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6503 00004CBC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6504                                  
  6505 00004CBF 483D[02000000]                  	cmp rax, sob_boolean_false
  6506                                  
  6507 00004CC5 7409                            	je .L_if_else_000c
  6508 00004CC7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6509                                  
  6510 00004CCB E9D2000000                      	jmp .L_if_end_000c
  6511                                  
  6512                                          	.L_if_else_000c:
  6513 00004CD0 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6514 00004CD4 50                      	push rax
  6515 00004CD5 6A01                    	push 1
  6516 00004CD7 488B0425[88000000]      	mov rax, qword [free_var_17]
  6517                                  	assert_closure(rax)
    42 00004CDF 803805              <1>  cmp byte [%1], %2
    43 00004CE2 0F8504E20000        <1>  jne L_error_incorrect_type
  6518 00004CE8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6519 00004CEB FF5009                  	call SOB_CLOSURE_CODE(rax)
  6520 00004CEE 50                      	push rax
  6521 00004CEF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6522 00004CF3 50                      	push rax
  6523 00004CF4 6A01                    	push 1
  6524 00004CF6 488B0425[80000000]      	mov rax, qword [free_var_16]
  6525                                  	assert_closure(rax)
    42 00004CFE 803805              <1>  cmp byte [%1], %2
    43 00004D01 0F85E5E10000        <1>  jne L_error_incorrect_type
  6526 00004D07 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6527 00004D0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6528 00004D0D 50                      	push rax
  6529 00004D0E 6A02                    	push 2
  6530 00004D10 488B4510                	mov rax, qword [rbp + 8 * 2]
  6531                                  
  6532 00004D14 488B00                                            	mov rax, qword[rax + 8 * 0]
  6533                                  
  6534 00004D17 488B00                                            	mov rax, qword[rax + 8 * 0]
  6535 00004D1A 488B00                  	mov rax, qword [rax]
  6536                                  	assert_closure(rax)
    42 00004D1D 803805              <1>  cmp byte [%1], %2
    43 00004D20 0F85C6E10000        <1>  jne L_error_incorrect_type
  6537 00004D26 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6538 00004D29 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6539 00004D2C 50                      	push rax
  6540 00004D2D 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6541 00004D31 50                      	push rax
  6542 00004D32 6A02                    	push 2
  6543 00004D34 488B4510                	mov rax, qword [rbp + 8 * 2]
  6544                                  
  6545 00004D38 488B00                                            	mov rax, qword[rax + 8 * 0]
  6546                                  
  6547 00004D3B 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6548 00004D3F 488B00                  	mov rax, qword [rax]
  6549                                  .L_applic_TC_002e:
  6550 00004D42 803805                  	cmp byte [rax], T_closure
  6551 00004D45 0F8562D90000            	jne L_code_ptr_error
  6552 00004D4B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6553 00004D4F 53                      	push rbx
  6554 00004D50 FF7508                  	push qword [rbp + 8]
  6555 00004D53 FF7500                  	push qword [rbp]
  6556 00004D56 488B4D18                	mov rcx, [rbp + 3 * 8]
  6557 00004D5A 488B542418              	mov rdx, [rsp + 3 * 8]
  6558 00004D5F 488D7204                	lea rsi, [rdx + 4]
  6559 00004D63 4C8D4EFF                	lea r9, [rsi - 1]
  6560 00004D67 488D7903                	lea rdi, [rcx + 3]
  6561 00004D6B 4D31C0                  	xor r8, r8
  6562                                  .L_tc_recycle_frame_loop_002e:
  6563 00004D6E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6564 00004D72 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6565 00004D77 49FFC9                  	dec r9
  6566 00004D7A 4D31C0                  	xor r8, r8
  6567 00004D7D 48FFCF                  	dec rdi
  6568 00004D80 48FFCE                  	dec rsi
  6569 00004D83 4883FE00                	cmp rsi, 0
  6570 00004D87 75E5                    	jne .L_tc_recycle_frame_loop_002e
  6571                                  .L_tc_recycle_frame_done_002e:
  6572                                  ;this pop rbp in sot to the right place
  6573 00004D89 4989C9                  	mov r9, rcx
  6574 00004D8C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6575 00004D94 4C01CC                  	add rsp, r9
  6576 00004D97 5D                      	pop rbp
  6577 00004D98 488B4D00                	mov rcx, qword [rbp]
  6578 00004D9C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6579 00004DA0 FFE3                    	jmp rbx
  6580                                  
  6581                                          	.L_if_end_000c:
  6582 00004DA2 C9                      	leave
  6583 00004DA3 C22000                  	ret 8 * (2 + 2)
  6584                                  .L_lambda_simple_end_002f:	; new closure is in rax
  6585 00004DA6 50                      	push rax
  6586 00004DA7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6587 00004DAB 8F00                    	pop qword [rax]
  6588 00004DAD 48B8-                   	mov rax, sob_void
  6588 00004DAF [0000000000000000] 
  6589                                  
  6590 00004DB7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6591 00004DBC E837C90000              	call malloc
  6592 00004DC1 50                      	push rax
  6593 00004DC2 BF10000000              	mov rdi, 8 * 2	; new rib
  6594 00004DC7 E82CC90000              	call malloc
  6595 00004DCC 50                      	push rax
  6596 00004DCD BF10000000              	mov rdi, 8 * 2	; extended env
  6597 00004DD2 E821C90000              	call malloc
  6598 00004DD7 488B7D10                	mov rdi, ENV
  6599 00004DDB BE00000000              	mov rsi, 0
  6600 00004DE0 BA01000000              	mov rdx, 1
  6601                                  .L_lambda_simple_env_loop_0030:	; ext_env[i + 1] <-- env[i]
  6602 00004DE5 4883FE01                	cmp rsi, 1
  6603 00004DE9 7410                    	je .L_lambda_simple_env_end_0030
  6604 00004DEB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6605 00004DEF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6606 00004DF3 48FFC6                  	inc rsi
  6607 00004DF6 48FFC2                  	inc rdx
  6608 00004DF9 EBEA                    	jmp .L_lambda_simple_env_loop_0030
  6609                                  .L_lambda_simple_env_end_0030:
  6610 00004DFB 5B                      	pop rbx
  6611 00004DFC BE00000000              	mov rsi, 0
  6612                                  .L_lambda_simple_params_loop_0030:	; copy params
  6613 00004E01 4883FE02                	cmp rsi, 2
  6614 00004E05 740E                    	je .L_lambda_simple_params_end_0030
  6615 00004E07 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6616 00004E0C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6617 00004E10 48FFC6                  	inc rsi
  6618 00004E13 EBEC                    	jmp .L_lambda_simple_params_loop_0030
  6619                                  .L_lambda_simple_params_end_0030:
  6620 00004E15 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6621 00004E18 4889C3                  	mov rbx, rax
  6622 00004E1B 58                      	pop rax
  6623 00004E1C C60005                  	mov byte [rax], T_closure
  6624 00004E1F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6625 00004E23 48C74009[304E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0030
  6626 00004E2B E917010000              	jmp .L_lambda_simple_end_0030
  6627                                  .L_lambda_simple_code_0030:	; lambda-simple body
  6628 00004E30 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6629 00004E36 740B                    	je .L_lambda_simple_arity_check_ok_0030
  6630 00004E38 FF742410                	push qword [rsp + 8 * 2]
  6631 00004E3C 6A02                    	push 2
  6632 00004E3E E96EC80000              	jmp L_error_incorrect_arity_simple
  6633                                  .L_lambda_simple_arity_check_ok_0030:
  6634 00004E43 C8000000                	enter 0, 0
  6635 00004E47 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6636 00004E4B 50                      	push rax
  6637 00004E4C 6A01                    	push 1
  6638 00004E4E 488B0425[00000000]      	mov rax, qword [free_var_0]
  6639                                  	assert_closure(rax)
    42 00004E56 803805              <1>  cmp byte [%1], %2
    43 00004E59 0F858DE00000        <1>  jne L_error_incorrect_type
  6640 00004E5F FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6641 00004E62 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6642                                  
  6643 00004E65 483D[02000000]                  	cmp rax, sob_boolean_false
  6644                                  
  6645 00004E6B 7409                            	je .L_if_else_000d
  6646 00004E6D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6647                                  
  6648 00004E71 E9CD000000                      	jmp .L_if_end_000d
  6649                                  
  6650                                          	.L_if_else_000d:
  6651 00004E76 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6652 00004E7A 50                      	push rax
  6653 00004E7B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6654 00004E7F 50                      	push rax
  6655 00004E80 6A01                    	push 1
  6656 00004E82 488B0425[88000000]      	mov rax, qword [free_var_17]
  6657                                  	assert_closure(rax)
    42 00004E8A 803805              <1>  cmp byte [%1], %2
    43 00004E8D 0F8559E00000        <1>  jne L_error_incorrect_type
  6658 00004E93 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6659 00004E96 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6660 00004E99 50                      	push rax
  6661 00004E9A 6A02                    	push 2
  6662 00004E9C 488B4510                	mov rax, qword [rbp + 8 * 2]
  6663                                  
  6664 00004EA0 488B00                                            	mov rax, qword[rax + 8 * 0]
  6665                                  
  6666 00004EA3 488B4008                                          	mov rax, qword[rax + 8 * 1]
  6667 00004EA7 488B00                  	mov rax, qword [rax]
  6668                                  	assert_closure(rax)
    42 00004EAA 803805              <1>  cmp byte [%1], %2
    43 00004EAD 0F8539E00000        <1>  jne L_error_incorrect_type
  6669 00004EB3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6670 00004EB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6671 00004EB9 50                      	push rax
  6672 00004EBA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6673 00004EBE 50                      	push rax
  6674 00004EBF 6A01                    	push 1
  6675 00004EC1 488B0425[80000000]      	mov rax, qword [free_var_16]
  6676                                  	assert_closure(rax)
    42 00004EC9 803805              <1>  cmp byte [%1], %2
    43 00004ECC 0F851AE00000        <1>  jne L_error_incorrect_type
  6677 00004ED2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6678 00004ED5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6679 00004ED8 50                      	push rax
  6680 00004ED9 6A02                    	push 2
  6681 00004EDB 488B0425[68000000]      	mov rax, qword [free_var_13]
  6682                                  .L_applic_TC_002f:
  6683 00004EE3 803805                  	cmp byte [rax], T_closure
  6684 00004EE6 0F85C1D70000            	jne L_code_ptr_error
  6685 00004EEC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6686 00004EF0 53                      	push rbx
  6687 00004EF1 FF7508                  	push qword [rbp + 8]
  6688 00004EF4 FF7500                  	push qword [rbp]
  6689 00004EF7 488B4D18                	mov rcx, [rbp + 3 * 8]
  6690 00004EFB 488B542418              	mov rdx, [rsp + 3 * 8]
  6691 00004F00 488D7204                	lea rsi, [rdx + 4]
  6692 00004F04 4C8D4EFF                	lea r9, [rsi - 1]
  6693 00004F08 488D7903                	lea rdi, [rcx + 3]
  6694 00004F0C 4D31C0                  	xor r8, r8
  6695                                  .L_tc_recycle_frame_loop_002f:
  6696 00004F0F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6697 00004F13 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6698 00004F18 49FFC9                  	dec r9
  6699 00004F1B 4D31C0                  	xor r8, r8
  6700 00004F1E 48FFCF                  	dec rdi
  6701 00004F21 48FFCE                  	dec rsi
  6702 00004F24 4883FE00                	cmp rsi, 0
  6703 00004F28 75E5                    	jne .L_tc_recycle_frame_loop_002f
  6704                                  .L_tc_recycle_frame_done_002f:
  6705                                  ;this pop rbp in sot to the right place
  6706 00004F2A 4989C9                  	mov r9, rcx
  6707 00004F2D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6708 00004F35 4C01CC                  	add rsp, r9
  6709 00004F38 5D                      	pop rbp
  6710 00004F39 488B4D00                	mov rcx, qword [rbp]
  6711 00004F3D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6712 00004F41 FFE3                    	jmp rbx
  6713                                  
  6714                                          	.L_if_end_000d:
  6715 00004F43 C9                      	leave
  6716 00004F44 C22000                  	ret 8 * (2 + 2)
  6717                                  .L_lambda_simple_end_0030:	; new closure is in rax
  6718 00004F47 50                      	push rax
  6719 00004F48 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  6720 00004F4C 8F00                    	pop qword [rax]
  6721 00004F4E 48B8-                   	mov rax, sob_void
  6721 00004F50 [0000000000000000] 
  6722                                  
  6723 00004F58 BF11000000              	mov rdi, (1 + 8 + 8)
  6724 00004F5D E896C70000              	call malloc
  6725 00004F62 50                      	push rax
  6726 00004F63 BF10000000              	mov rdi, 8 * 2
  6727 00004F68 E88BC70000              	call malloc
  6728 00004F6D 50                      	push rax
  6729 00004F6E BF10000000              	mov rdi, 8 * 2
  6730 00004F73 E880C70000              	call malloc
  6731 00004F78 488B7D10                	mov rdi, ENV
  6732 00004F7C 4831F6                  	xor rsi, rsi
  6733 00004F7F 4831D2                  	xor rdx, rdx
  6734 00004F82 48FFC2                  	inc rdx
  6735                                  	.L_lambda_opt_env_loop_0007:
  6736                                  
  6737 00004F85 4883FE01                        	cmp rsi, 1
  6738                                  
  6739 00004F89 7412                            	je .L_lambda_opt_env_end_0007
  6740 00004F8B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6741 00004F8F 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6742 00004F93 4883C201                	add rdx, 1
  6743 00004F97 4883C601                	add rsi, 1
  6744 00004F9B EBE8                    	jmp .L_lambda_opt_env_loop_0007
  6745                                  
  6746                                          	.L_lambda_opt_env_end_0007:
  6747 00004F9D 5B                      	pop rbx
  6748 00004F9E 4831F6                  	xor rsi, rsi
  6749                                  	.L_lambda_opt_params_loop_0007:
  6750                                  
  6751 00004FA1 4883FE02                        	cmp rsi, 2
  6752                                  
  6753 00004FA5 740F                            	je .L_lambda_opt_params_end_0007
  6754 00004FA7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6755 00004FAC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6756 00004FB0 4883C601                	add rsi, 1
  6757 00004FB4 EBEB                    	jmp .L_lambda_opt_params_loop_0007
  6758                                  
  6759                                          	.L_lambda_opt_params_end_0007:
  6760 00004FB6 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  6761 00004FB9 4889C3                  	mov rbx, rax
  6762 00004FBC 58                      	pop rax
  6763 00004FBD C60005                  	mov byte [rax], T_closure
  6764 00004FC0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6765 00004FC4 48C74009[D14F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
  6766                                  
  6767 00004FCC E9EF010000                      	jmp .L_lambda_opt_end_0007
  6768                                  
  6769                                          	.L_lambda_opt_code_0007:
  6770                                  
  6771 00004FD1 48837C241000                    	cmp qword [rsp + 8 * 2], 0
  6772                                  
  6773 00004FD7 740D                            	je .L_lambda_opt_arity_check_exact_0007  ;same num_of_args
  6774                                  
  6775 00004FD9 7F65                            	jg .L_lambda_opt_arity_check_more_0007  ;greater num_of_args
  6776 00004FDB FF742410                	push qword [rsp + 8 * 2]
  6777 00004FDF 6A00                    	push 0
  6778 00004FE1 E9DFC60000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  6779                                  .L_lambda_opt_arity_check_exact_0007:
  6780 00004FE6 4883EC08                	sub rsp, 8 * 1
  6781 00004FEA 488D7F10                	lea rdi, [rdi + (8 * 2)]
  6782 00004FEE 4889E7                  	mov rdi, rsp 
  6783 00004FF1 488B4708                	mov rax, qword [rdi + 8]
  6784 00004FF5 488907                  	mov qword [rdi], rax
  6785 00004FF8 488D7F08                	lea rdi, [rdi + 8]
  6786 00004FFC 488B4708                	mov rax, qword [rdi + 8]
  6787 00005000 488907                  	mov qword [rdi], rax
  6788 00005003 488D7F08                	lea rdi, [rdi + 8]
  6789 00005007 488B4708                	mov rax, qword [rdi + 8]
  6790 0000500B 4889C1                  	mov rcx, rax
  6791 0000500E 4883C001                	add rax, 1
  6792 00005012 488907                  	mov qword [rdi], rax
  6793 00005015 488D7F08                	lea rdi, [rdi + 8]
  6794                                  	.L_lambda_opt_stack_shrink_loop_0013:
  6795 00005019 4883F900                	cmp rcx, 0
  6796 0000501D 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0013
  6797 0000501F 4883E901                	sub rcx, 1
  6798 00005023 488D4010                	lea rax, [rax + (8 * 2)]
  6799 00005027 488B4708                	mov rax, qword [rdi + 8]
  6800 0000502B 488907                  	mov qword [rdi], rax
  6801 0000502E 488D7F08                	lea rdi, [rdi + 8]
  6802 00005032 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0013
  6803                                  
  6804                                          	.L_lambda_opt_stack_shrink_loop_exit_0013:
  6805 00005034 48C707[01000000]        	mov qword [rdi], sob_nil
  6806 0000503B E996000000              	jmp .L_lambda_opt_stack_adjusted_0007
  6807                                  
  6808                                          	.L_lambda_opt_arity_check_more_0007:
  6809 00005040 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  6810 00005045 488D0E                  	lea rcx, [rsi - 0]
  6811 00005048 49B8-                   	mov r8, sob_nil
  6811 0000504A [0100000000000000] 
  6812 00005052 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  6813 00005057 4889F2                  	mov rdx, rsi
  6814                                  	.L_lambda_opt_stack_shrink_loop_0014:
  6815 0000505A 4883F900                	cmp rcx, 0
  6816 0000505E 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0014
  6817 00005060 BF11000000              	mov rdi, 1 + (8 * 2)
  6818 00005065 E88EC60000              	call malloc
  6819 0000506A C60021                  	mov byte [rax], T_pair
  6820 0000506D 488B1E                  	mov rbx, qword [rsi]
  6821 00005070 48895801                	mov SOB_PAIR_CAR(rax), rbx
  6822 00005074 4C894009                	mov SOB_PAIR_CDR(rax), r8
  6823 00005078 4883C6F8                	add rsi, -8
  6824 0000507C 4883E901                	sub rcx, 1
  6825 00005080 4989C0                  	mov r8, rax
  6826 00005083 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0014
  6827                                  
  6828                                          	.L_lambda_opt_stack_shrink_loop_exit_0014:
  6829 00005085 4C8902                  	mov qword [rdx], r8
  6830 00005088 4883EA08                	sub rdx, 8 * 1
  6831 0000508C 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
  6832                                  
  6833 00005091 B900000000                      	mov rcx, 0 
  6834                                  
  6835                                          	.L_lambda_opt_stack_shrink_loop_0015:
  6836 00005096 4883F900                	cmp rcx, 0
  6837 0000509A 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0015
  6838 0000509C 488B06                  	mov rax, qword [rsi]
  6839 0000509F 488902                  	mov qword [rdx], rax
  6840 000050A2 488D76F8                	lea rsi, [rsi - 8]
  6841 000050A6 4883C2F8                	add rdx, -8
  6842 000050AA 4883C1FF                	add rcx, -1
  6843 000050AE EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0015
  6844                                  
  6845                                          	.L_lambda_opt_stack_shrink_loop_exit_0015:
  6846                                  
  6847 000050B0 48C70201000000                  	mov qword [rdx], 1 + 0
  6848 000050B7 4883C6F8                	add rsi, -8
  6849 000050BB 4883C2F8                	add rdx, -8
  6850 000050BF 488B06                  	mov rax, qword [rsi]
  6851 000050C2 488902                  	mov qword [rdx], rax
  6852 000050C5 4883C2F8                	add rdx, -8
  6853 000050C9 488D76F8                	lea rsi, [rsi - 8]
  6854 000050CD 488B06                  	mov rax, qword [rsi]
  6855 000050D0 488902                  	mov qword [rdx], rax
  6856 000050D3 4889D4                  	mov rsp, rdx
  6857                                  	.L_lambda_opt_stack_adjusted_0007:
  6858 000050D6 C8000000                	enter 0, 0
  6859 000050DA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6860 000050DE 50                      	push rax
  6861 000050DF 6A01                    	push 1
  6862 000050E1 488B0425[00000000]      	mov rax, qword [free_var_0]
  6863                                  	assert_closure(rax)
    42 000050E9 803805              <1>  cmp byte [%1], %2
    43 000050EC 0F85FADD0000        <1>  jne L_error_incorrect_type
  6864 000050F2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6865 000050F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6866                                  
  6867 000050F8 483D[02000000]                  	cmp rax, sob_boolean_false
  6868                                  
  6869 000050FE 740F                            	je .L_if_else_000e
  6870 00005100 48B8-                   	mov rax,L_constants + 1
  6870 00005102 [0100000000000000] 
  6871                                  
  6872 0000510A E9AD000000                      	jmp .L_if_end_000e
  6873                                  
  6874                                          	.L_if_else_000e:
  6875 0000510F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6876 00005113 50                      	push rax
  6877 00005114 6A01                    	push 1
  6878 00005116 488B0425[88000000]      	mov rax, qword [free_var_17]
  6879                                  	assert_closure(rax)
    42 0000511E 803805              <1>  cmp byte [%1], %2
    43 00005121 0F85C5DD0000        <1>  jne L_error_incorrect_type
  6880 00005127 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6881 0000512A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6882 0000512D 50                      	push rax
  6883 0000512E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  6884 00005132 50                      	push rax
  6885 00005133 6A01                    	push 1
  6886 00005135 488B0425[80000000]      	mov rax, qword [free_var_16]
  6887                                  	assert_closure(rax)
    42 0000513D 803805              <1>  cmp byte [%1], %2
    43 00005140 0F85A6DD0000        <1>  jne L_error_incorrect_type
  6888 00005146 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6889 00005149 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6890 0000514C 50                      	push rax
  6891 0000514D 6A02                    	push 2
  6892 0000514F 488B4510                	mov rax, qword [rbp + 8 * 2]
  6893                                  
  6894 00005153 488B00                                            	mov rax, qword[rax + 8 * 0]
  6895                                  
  6896 00005156 488B00                                            	mov rax, qword[rax + 8 * 0]
  6897 00005159 488B00                  	mov rax, qword [rax]
  6898                                  .L_applic_TC_0030:
  6899 0000515C 803805                  	cmp byte [rax], T_closure
  6900 0000515F 0F8548D50000            	jne L_code_ptr_error
  6901 00005165 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  6902 00005169 53                      	push rbx
  6903 0000516A FF7508                  	push qword [rbp + 8]
  6904 0000516D FF7500                  	push qword [rbp]
  6905 00005170 488B4D18                	mov rcx, [rbp + 3 * 8]
  6906 00005174 488B542418              	mov rdx, [rsp + 3 * 8]
  6907 00005179 488D7204                	lea rsi, [rdx + 4]
  6908 0000517D 4C8D4EFF                	lea r9, [rsi - 1]
  6909 00005181 488D7903                	lea rdi, [rcx + 3]
  6910 00005185 4D31C0                  	xor r8, r8
  6911                                  .L_tc_recycle_frame_loop_0030:
  6912 00005188 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  6913 0000518C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  6914 00005191 49FFC9                  	dec r9
  6915 00005194 4D31C0                  	xor r8, r8
  6916 00005197 48FFCF                  	dec rdi
  6917 0000519A 48FFCE                  	dec rsi
  6918 0000519D 4883FE00                	cmp rsi, 0
  6919 000051A1 75E5                    	jne .L_tc_recycle_frame_loop_0030
  6920                                  .L_tc_recycle_frame_done_0030:
  6921                                  ;this pop rbp in sot to the right place
  6922 000051A3 4989C9                  	mov r9, rcx
  6923 000051A6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  6924 000051AE 4C01CC                  	add rsp, r9
  6925 000051B1 5D                      	pop rbp
  6926 000051B2 488B4D00                	mov rcx, qword [rbp]
  6927 000051B6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  6928 000051BA FFE3                    	jmp rbx
  6929                                  
  6930                                          	.L_if_end_000e:
  6931 000051BC C9                      	leave
  6932 000051BD C21800                  	ret 8 * (2 + 1)
  6933                                  .L_lambda_opt_end_0007:	; new closure is in rax
  6934 000051C0 C9                      	leave
  6935 000051C1 C22000                  	ret 8 * (2 + 2)
  6936                                  .L_lambda_simple_end_002e:	; new closure is in rax
  6937                                  	assert_closure(rax)
    42 000051C4 803805              <1>  cmp byte [%1], %2
    43 000051C7 0F851FDD0000        <1>  jne L_error_incorrect_type
  6938 000051CD FF7001                  	push SOB_CLOSURE_ENV(rax) 
  6939 000051D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6940 000051D3 48890425[F0020000]      	mov qword [free_var_94], rax
  6941 000051DB 48B8-                   	mov rax, sob_void
  6941 000051DD [0000000000000000] 
  6942                                  
  6943 000051E5 4889C7                  	mov rdi, rax
  6944 000051E8 E81CC50000              	call print_sexpr_if_not_void
  6945                                  
  6946 000051ED 48B8-                   	mov rax,L_constants + 23
  6946 000051EF [1700000000000000] 
  6947 000051F7 50                      	push rax
  6948 000051F8 6A01                    	push 1
  6949 000051FA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6950 000051FF E8F4C40000              	call malloc
  6951 00005204 50                      	push rax
  6952 00005205 BF00000000              	mov rdi, 8 * 0	; new rib
  6953 0000520A E8E9C40000              	call malloc
  6954 0000520F 50                      	push rax
  6955 00005210 BF08000000              	mov rdi, 8 * 1	; extended env
  6956 00005215 E8DEC40000              	call malloc
  6957 0000521A 488B7D10                	mov rdi, ENV
  6958 0000521E BE00000000              	mov rsi, 0
  6959 00005223 BA01000000              	mov rdx, 1
  6960                                  .L_lambda_simple_env_loop_0031:	; ext_env[i + 1] <-- env[i]
  6961 00005228 4883FE00                	cmp rsi, 0
  6962 0000522C 7410                    	je .L_lambda_simple_env_end_0031
  6963 0000522E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6964 00005232 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6965 00005236 48FFC6                  	inc rsi
  6966 00005239 48FFC2                  	inc rdx
  6967 0000523C EBEA                    	jmp .L_lambda_simple_env_loop_0031
  6968                                  .L_lambda_simple_env_end_0031:
  6969 0000523E 5B                      	pop rbx
  6970 0000523F BE00000000              	mov rsi, 0
  6971                                  .L_lambda_simple_params_loop_0031:	; copy params
  6972 00005244 4883FE00                	cmp rsi, 0
  6973 00005248 740E                    	je .L_lambda_simple_params_end_0031
  6974 0000524A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6975 0000524F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6976 00005253 48FFC6                  	inc rsi
  6977 00005256 EBEC                    	jmp .L_lambda_simple_params_loop_0031
  6978                                  .L_lambda_simple_params_end_0031:
  6979 00005258 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6980 0000525B 4889C3                  	mov rbx, rax
  6981 0000525E 58                      	pop rax
  6982 0000525F C60005                  	mov byte [rax], T_closure
  6983 00005262 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6984 00005266 48C74009[73520000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0031
  6985 0000526E E904040000              	jmp .L_lambda_simple_end_0031
  6986                                  .L_lambda_simple_code_0031:	; lambda-simple body
  6987 00005273 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6988 00005279 740B                    	je .L_lambda_simple_arity_check_ok_0031
  6989 0000527B FF742410                	push qword [rsp + 8 * 2]
  6990 0000527F 6A01                    	push 1
  6991 00005281 E92BC40000              	jmp L_error_incorrect_arity_simple
  6992                                  .L_lambda_simple_arity_check_ok_0031:
  6993 00005286 C8000000                	enter 0, 0
  6994 0000528A BF08000000              	mov rdi, 8
  6995 0000528F E864C40000              	call malloc
  6996 00005294 488B5D20                	mov rbx, PARAM(0)
  6997 00005298 488918                  	mov qword [rax], rbx
  6998 0000529B 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6999                                  
  7000 0000529F 48B8-                            	mov rax, sob_void
  7000 000052A1 [0000000000000000] 
  7001                                  
  7002 000052A9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7003 000052AE E845C40000              	call malloc
  7004 000052B3 50                      	push rax
  7005 000052B4 BF08000000              	mov rdi, 8 * 1	; new rib
  7006 000052B9 E83AC40000              	call malloc
  7007 000052BE 50                      	push rax
  7008 000052BF BF10000000              	mov rdi, 8 * 2	; extended env
  7009 000052C4 E82FC40000              	call malloc
  7010 000052C9 488B7D10                	mov rdi, ENV
  7011 000052CD BE00000000              	mov rsi, 0
  7012 000052D2 BA01000000              	mov rdx, 1
  7013                                  .L_lambda_simple_env_loop_0032:	; ext_env[i + 1] <-- env[i]
  7014 000052D7 4883FE01                	cmp rsi, 1
  7015 000052DB 7410                    	je .L_lambda_simple_env_end_0032
  7016 000052DD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7017 000052E1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7018 000052E5 48FFC6                  	inc rsi
  7019 000052E8 48FFC2                  	inc rdx
  7020 000052EB EBEA                    	jmp .L_lambda_simple_env_loop_0032
  7021                                  .L_lambda_simple_env_end_0032:
  7022 000052ED 5B                      	pop rbx
  7023 000052EE BE00000000              	mov rsi, 0
  7024                                  .L_lambda_simple_params_loop_0032:	; copy params
  7025 000052F3 4883FE01                	cmp rsi, 1
  7026 000052F7 740E                    	je .L_lambda_simple_params_end_0032
  7027 000052F9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7028 000052FE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7029 00005302 48FFC6                  	inc rsi
  7030 00005305 EBEC                    	jmp .L_lambda_simple_params_loop_0032
  7031                                  .L_lambda_simple_params_end_0032:
  7032 00005307 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7033 0000530A 4889C3                  	mov rbx, rax
  7034 0000530D 58                      	pop rax
  7035 0000530E C60005                  	mov byte [rax], T_closure
  7036 00005311 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7037 00005315 48C74009[22530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0032
  7038 0000531D E93B010000              	jmp .L_lambda_simple_end_0032
  7039                                  .L_lambda_simple_code_0032:	; lambda-simple body
  7040 00005322 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7041 00005328 740B                    	je .L_lambda_simple_arity_check_ok_0032
  7042 0000532A FF742410                	push qword [rsp + 8 * 2]
  7043 0000532E 6A03                    	push 3
  7044 00005330 E97CC30000              	jmp L_error_incorrect_arity_simple
  7045                                  .L_lambda_simple_arity_check_ok_0032:
  7046 00005335 C8000000                	enter 0, 0
  7047 00005339 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7048 0000533D 50                      	push rax
  7049 0000533E 488B0425[00000000]      	mov rax, qword [free_var_0]
  7050 00005346 50                      	push rax
  7051 00005347 6A02                    	push 2
  7052 00005349 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7053                                  	assert_closure(rax)
    42 00005351 803805              <1>  cmp byte [%1], %2
    43 00005354 0F8592DB0000        <1>  jne L_error_incorrect_type
  7054 0000535A FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7055 0000535D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7056                                  
  7057 00005360 483D[02000000]                  	cmp rax, sob_boolean_false
  7058                                  
  7059 00005366 7409                            	je .L_if_else_000f
  7060 00005368 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7061                                  
  7062 0000536C E9E8000000                      	jmp .L_if_end_000f
  7063                                  
  7064                                          	.L_if_else_000f:
  7065 00005371 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7066 00005375 50                      	push rax
  7067 00005376 488B0425[88000000]      	mov rax, qword [free_var_17]
  7068 0000537E 50                      	push rax
  7069 0000537F 6A02                    	push 2
  7070 00005381 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7071                                  	assert_closure(rax)
    42 00005389 803805              <1>  cmp byte [%1], %2
    43 0000538C 0F855ADB0000        <1>  jne L_error_incorrect_type
  7072 00005392 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7073 00005395 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7074 00005398 50                      	push rax
  7075 00005399 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7076 0000539D 50                      	push rax
  7077 0000539E 488B0425[80000000]      	mov rax, qword [free_var_16]
  7078 000053A6 50                      	push rax
  7079 000053A7 6A02                    	push 2
  7080 000053A9 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7081                                  	assert_closure(rax)
    42 000053B1 803805              <1>  cmp byte [%1], %2
    43 000053B4 0F8532DB0000        <1>  jne L_error_incorrect_type
  7082 000053BA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7083 000053BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7084 000053C0 50                      	push rax
  7085 000053C1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7086 000053C5 50                      	push rax
  7087 000053C6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7088 000053CA 50                      	push rax
  7089 000053CB 6A03                    	push 3
  7090 000053CD 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7091                                  	assert_closure(rax)
    42 000053D5 803805              <1>  cmp byte [%1], %2
    43 000053D8 0F850EDB0000        <1>  jne L_error_incorrect_type
  7092 000053DE FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7093 000053E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7094 000053E4 50                      	push rax
  7095 000053E5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7096 000053E9 50                      	push rax
  7097 000053EA 6A03                    	push 3
  7098 000053EC 488B4510                	mov rax, qword [rbp + 8 * 2]
  7099                                  
  7100 000053F0 488B00                                            	mov rax, qword[rax + 8 * 0]
  7101                                  
  7102 000053F3 488B00                                            	mov rax, qword[rax + 8 * 0]
  7103 000053F6 488B00                  	mov rax, qword [rax]
  7104                                  .L_applic_TC_0031:
  7105 000053F9 803805                  	cmp byte [rax], T_closure
  7106 000053FC 0F85ABD20000            	jne L_code_ptr_error
  7107 00005402 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7108 00005406 53                      	push rbx
  7109 00005407 FF7508                  	push qword [rbp + 8]
  7110 0000540A FF7500                  	push qword [rbp]
  7111 0000540D 488B4D18                	mov rcx, [rbp + 3 * 8]
  7112 00005411 488B542418              	mov rdx, [rsp + 3 * 8]
  7113 00005416 488D7204                	lea rsi, [rdx + 4]
  7114 0000541A 4C8D4EFF                	lea r9, [rsi - 1]
  7115 0000541E 488D7903                	lea rdi, [rcx + 3]
  7116 00005422 4D31C0                  	xor r8, r8
  7117                                  .L_tc_recycle_frame_loop_0031:
  7118 00005425 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7119 00005429 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7120 0000542E 49FFC9                  	dec r9
  7121 00005431 4D31C0                  	xor r8, r8
  7122 00005434 48FFCF                  	dec rdi
  7123 00005437 48FFCE                  	dec rsi
  7124 0000543A 4883FE00                	cmp rsi, 0
  7125 0000543E 75E5                    	jne .L_tc_recycle_frame_loop_0031
  7126                                  .L_tc_recycle_frame_done_0031:
  7127                                  ;this pop rbp in sot to the right place
  7128 00005440 4989C9                  	mov r9, rcx
  7129 00005443 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7130 0000544B 4C01CC                  	add rsp, r9
  7131 0000544E 5D                      	pop rbp
  7132 0000544F 488B4D00                	mov rcx, qword [rbp]
  7133 00005453 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7134 00005457 FFE3                    	jmp rbx
  7135                                  
  7136                                          	.L_if_end_000f:
  7137 00005459 C9                      	leave
  7138 0000545A C22800                  	ret 8 * (2 + 3)
  7139                                  .L_lambda_simple_end_0032:	; new closure is in rax
  7140 0000545D 50                      	push rax
  7141 0000545E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7142 00005462 8F00                    	pop qword [rax]
  7143 00005464 48B8-                   	mov rax, sob_void
  7143 00005466 [0000000000000000] 
  7144                                  
  7145 0000546E BF11000000              	mov rdi, (1 + 8 + 8)
  7146 00005473 E880C20000              	call malloc
  7147 00005478 50                      	push rax
  7148 00005479 BF08000000              	mov rdi, 8 * 1
  7149 0000547E E875C20000              	call malloc
  7150 00005483 50                      	push rax
  7151 00005484 BF10000000              	mov rdi, 8 * 2
  7152 00005489 E86AC20000              	call malloc
  7153 0000548E 488B7D10                	mov rdi, ENV
  7154 00005492 4831F6                  	xor rsi, rsi
  7155 00005495 4831D2                  	xor rdx, rdx
  7156 00005498 48FFC2                  	inc rdx
  7157                                  	.L_lambda_opt_env_loop_0008:
  7158                                  
  7159 0000549B 4883FE01                        	cmp rsi, 1
  7160                                  
  7161 0000549F 7412                            	je .L_lambda_opt_env_end_0008
  7162 000054A1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7163 000054A5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7164 000054A9 4883C201                	add rdx, 1
  7165 000054AD 4883C601                	add rsi, 1
  7166 000054B1 EBE8                    	jmp .L_lambda_opt_env_loop_0008
  7167                                  
  7168                                          	.L_lambda_opt_env_end_0008:
  7169 000054B3 5B                      	pop rbx
  7170 000054B4 4831F6                  	xor rsi, rsi
  7171                                  	.L_lambda_opt_params_loop_0008:
  7172                                  
  7173 000054B7 4883FE01                        	cmp rsi, 1
  7174                                  
  7175 000054BB 740F                            	je .L_lambda_opt_params_end_0008
  7176 000054BD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7177 000054C2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7178 000054C6 4883C601                	add rsi, 1
  7179 000054CA EBEB                    	jmp .L_lambda_opt_params_loop_0008
  7180                                  
  7181                                          	.L_lambda_opt_params_end_0008:
  7182 000054CC 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  7183 000054CF 4889C3                  	mov rbx, rax
  7184 000054D2 58                      	pop rax
  7185 000054D3 C60005                  	mov byte [rax], T_closure
  7186 000054D6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7187 000054DA 48C74009[E7540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  7188                                  
  7189 000054E2 E98C010000                      	jmp .L_lambda_opt_end_0008
  7190                                  
  7191                                          	.L_lambda_opt_code_0008:
  7192                                  
  7193 000054E7 48837C241002                    	cmp qword [rsp + 8 * 2], 2
  7194                                  
  7195 000054ED 740D                            	je .L_lambda_opt_arity_check_exact_0008  ;same num_of_args
  7196                                  
  7197 000054EF 7F65                            	jg .L_lambda_opt_arity_check_more_0008  ;greater num_of_args
  7198 000054F1 FF742410                	push qword [rsp + 8 * 2]
  7199 000054F5 6A02                    	push 2
  7200 000054F7 E9C9C10000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  7201                                  .L_lambda_opt_arity_check_exact_0008:
  7202 000054FC 4883EC08                	sub rsp, 8 * 1
  7203 00005500 488D7F10                	lea rdi, [rdi + (8 * 2)]
  7204 00005504 4889E7                  	mov rdi, rsp 
  7205 00005507 488B4708                	mov rax, qword [rdi + 8]
  7206 0000550B 488907                  	mov qword [rdi], rax
  7207 0000550E 488D7F08                	lea rdi, [rdi + 8]
  7208 00005512 488B4708                	mov rax, qword [rdi + 8]
  7209 00005516 488907                  	mov qword [rdi], rax
  7210 00005519 488D7F08                	lea rdi, [rdi + 8]
  7211 0000551D 488B4708                	mov rax, qword [rdi + 8]
  7212 00005521 4889C1                  	mov rcx, rax
  7213 00005524 4883C001                	add rax, 1
  7214 00005528 488907                  	mov qword [rdi], rax
  7215 0000552B 488D7F08                	lea rdi, [rdi + 8]
  7216                                  	.L_lambda_opt_stack_shrink_loop_0016:
  7217 0000552F 4883F900                	cmp rcx, 0
  7218 00005533 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0016
  7219 00005535 4883E901                	sub rcx, 1
  7220 00005539 488D4010                	lea rax, [rax + (8 * 2)]
  7221 0000553D 488B4708                	mov rax, qword [rdi + 8]
  7222 00005541 488907                  	mov qword [rdi], rax
  7223 00005544 488D7F08                	lea rdi, [rdi + 8]
  7224 00005548 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0016
  7225                                  
  7226                                          	.L_lambda_opt_stack_shrink_loop_exit_0016:
  7227 0000554A 48C707[01000000]        	mov qword [rdi], sob_nil
  7228 00005551 E997000000              	jmp .L_lambda_opt_stack_adjusted_0008
  7229                                  
  7230                                          	.L_lambda_opt_arity_check_more_0008:
  7231 00005556 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  7232 0000555B 488D4EFE                	lea rcx, [rsi - 2]
  7233 0000555F 49B8-                   	mov r8, sob_nil
  7233 00005561 [0100000000000000] 
  7234 00005569 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  7235 0000556E 4889F2                  	mov rdx, rsi
  7236                                  	.L_lambda_opt_stack_shrink_loop_0017:
  7237 00005571 4883F900                	cmp rcx, 0
  7238 00005575 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0017
  7239 00005577 BF11000000              	mov rdi, 1 + (8 * 2)
  7240 0000557C E877C10000              	call malloc
  7241 00005581 C60021                  	mov byte [rax], T_pair
  7242 00005584 488B1E                  	mov rbx, qword [rsi]
  7243 00005587 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7244 0000558B 4C894009                	mov SOB_PAIR_CDR(rax), r8
  7245 0000558F 4883C6F8                	add rsi, -8
  7246 00005593 4883E901                	sub rcx, 1
  7247 00005597 4989C0                  	mov r8, rax
  7248 0000559A EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0017
  7249                                  
  7250                                          	.L_lambda_opt_stack_shrink_loop_exit_0017:
  7251 0000559C 4C8902                  	mov qword [rdx], r8
  7252 0000559F 4883EA08                	sub rdx, 8 * 1
  7253 000055A3 488D742420              	lea rsi, [rsp + (8 * (2 + 2))]
  7254                                  
  7255 000055A8 B902000000                      	mov rcx, 2 
  7256                                  
  7257                                          	.L_lambda_opt_stack_shrink_loop_0018:
  7258 000055AD 4883F900                	cmp rcx, 0
  7259 000055B1 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0018
  7260 000055B3 488B06                  	mov rax, qword [rsi]
  7261 000055B6 488902                  	mov qword [rdx], rax
  7262 000055B9 488D76F8                	lea rsi, [rsi - 8]
  7263 000055BD 4883C2F8                	add rdx, -8
  7264 000055C1 4883C1FF                	add rcx, -1
  7265 000055C5 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0018
  7266                                  
  7267                                          	.L_lambda_opt_stack_shrink_loop_exit_0018:
  7268                                  
  7269 000055C7 48C70203000000                  	mov qword [rdx], 1 + 2
  7270 000055CE 4883C6F8                	add rsi, -8
  7271 000055D2 4883C2F8                	add rdx, -8
  7272 000055D6 488B06                  	mov rax, qword [rsi]
  7273 000055D9 488902                  	mov qword [rdx], rax
  7274 000055DC 4883C2F8                	add rdx, -8
  7275 000055E0 488D76F8                	lea rsi, [rsi - 8]
  7276 000055E4 488B06                  	mov rax, qword [rsi]
  7277 000055E7 488902                  	mov qword [rdx], rax
  7278 000055EA 4889D4                  	mov rsp, rdx
  7279                                  	.L_lambda_opt_stack_adjusted_0008:
  7280 000055ED C8000000                	enter 0, 0
  7281 000055F1 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7282 000055F5 50                      	push rax
  7283 000055F6 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7284 000055FA 50                      	push rax
  7285 000055FB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7286 000055FF 50                      	push rax
  7287 00005600 6A03                    	push 3
  7288 00005602 488B4510                	mov rax, qword [rbp + 8 * 2]
  7289                                  
  7290 00005606 488B00                                            	mov rax, qword[rax + 8 * 0]
  7291                                  
  7292 00005609 488B00                                            	mov rax, qword[rax + 8 * 0]
  7293 0000560C 488B00                  	mov rax, qword [rax]
  7294                                  .L_applic_TC_0032:
  7295 0000560F 803805                  	cmp byte [rax], T_closure
  7296 00005612 0F8595D00000            	jne L_code_ptr_error
  7297 00005618 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7298 0000561C 53                      	push rbx
  7299 0000561D FF7508                  	push qword [rbp + 8]
  7300 00005620 FF7500                  	push qword [rbp]
  7301 00005623 488B4D18                	mov rcx, [rbp + 3 * 8]
  7302 00005627 488B542418              	mov rdx, [rsp + 3 * 8]
  7303 0000562C 488D7204                	lea rsi, [rdx + 4]
  7304 00005630 4C8D4EFF                	lea r9, [rsi - 1]
  7305 00005634 488D7903                	lea rdi, [rcx + 3]
  7306 00005638 4D31C0                  	xor r8, r8
  7307                                  .L_tc_recycle_frame_loop_0032:
  7308 0000563B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7309 0000563F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7310 00005644 49FFC9                  	dec r9
  7311 00005647 4D31C0                  	xor r8, r8
  7312 0000564A 48FFCF                  	dec rdi
  7313 0000564D 48FFCE                  	dec rsi
  7314 00005650 4883FE00                	cmp rsi, 0
  7315 00005654 75E5                    	jne .L_tc_recycle_frame_loop_0032
  7316                                  .L_tc_recycle_frame_done_0032:
  7317                                  ;this pop rbp in sot to the right place
  7318 00005656 4989C9                  	mov r9, rcx
  7319 00005659 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7320 00005661 4C01CC                  	add rsp, r9
  7321 00005664 5D                      	pop rbp
  7322 00005665 488B4D00                	mov rcx, qword [rbp]
  7323 00005669 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7324 0000566D FFE3                    	jmp rbx
  7325 0000566F C9                      	leave
  7326 00005670 C22800                  	ret 8 * (2 + 3)
  7327                                  .L_lambda_opt_end_0008:	; new closure is in rax
  7328 00005673 C9                      	leave
  7329 00005674 C21800                  	ret 8 * (2 + 1)
  7330                                  .L_lambda_simple_end_0031:	; new closure is in rax
  7331                                  	assert_closure(rax)
    42 00005677 803805              <1>  cmp byte [%1], %2
    43 0000567A 0F856CD80000        <1>  jne L_error_incorrect_type
  7332 00005680 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7333 00005683 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7334 00005686 48890425[F8020000]      	mov qword [free_var_95], rax
  7335 0000568E 48B8-                   	mov rax, sob_void
  7335 00005690 [0000000000000000] 
  7336                                  
  7337 00005698 4889C7                  	mov rdi, rax
  7338 0000569B E869C00000              	call print_sexpr_if_not_void
  7339                                  
  7340 000056A0 48B8-                   	mov rax,L_constants + 23
  7340 000056A2 [1700000000000000] 
  7341 000056AA 50                      	push rax
  7342 000056AB 6A01                    	push 1
  7343 000056AD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7344 000056B2 E841C00000              	call malloc
  7345 000056B7 50                      	push rax
  7346 000056B8 BF00000000              	mov rdi, 8 * 0	; new rib
  7347 000056BD E836C00000              	call malloc
  7348 000056C2 50                      	push rax
  7349 000056C3 BF08000000              	mov rdi, 8 * 1	; extended env
  7350 000056C8 E82BC00000              	call malloc
  7351 000056CD 488B7D10                	mov rdi, ENV
  7352 000056D1 BE00000000              	mov rsi, 0
  7353 000056D6 BA01000000              	mov rdx, 1
  7354                                  .L_lambda_simple_env_loop_0033:	; ext_env[i + 1] <-- env[i]
  7355 000056DB 4883FE00                	cmp rsi, 0
  7356 000056DF 7410                    	je .L_lambda_simple_env_end_0033
  7357 000056E1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7358 000056E5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7359 000056E9 48FFC6                  	inc rsi
  7360 000056EC 48FFC2                  	inc rdx
  7361 000056EF EBEA                    	jmp .L_lambda_simple_env_loop_0033
  7362                                  .L_lambda_simple_env_end_0033:
  7363 000056F1 5B                      	pop rbx
  7364 000056F2 BE00000000              	mov rsi, 0
  7365                                  .L_lambda_simple_params_loop_0033:	; copy params
  7366 000056F7 4883FE00                	cmp rsi, 0
  7367 000056FB 740E                    	je .L_lambda_simple_params_end_0033
  7368 000056FD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7369 00005702 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7370 00005706 48FFC6                  	inc rsi
  7371 00005709 EBEC                    	jmp .L_lambda_simple_params_loop_0033
  7372                                  .L_lambda_simple_params_end_0033:
  7373 0000570B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7374 0000570E 4889C3                  	mov rbx, rax
  7375 00005711 58                      	pop rax
  7376 00005712 C60005                  	mov byte [rax], T_closure
  7377 00005715 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7378 00005719 48C74009[26570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0033
  7379 00005721 E943040000              	jmp .L_lambda_simple_end_0033
  7380                                  .L_lambda_simple_code_0033:	; lambda-simple body
  7381 00005726 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7382 0000572C 740B                    	je .L_lambda_simple_arity_check_ok_0033
  7383 0000572E FF742410                	push qword [rsp + 8 * 2]
  7384 00005732 6A01                    	push 1
  7385 00005734 E978BF0000              	jmp L_error_incorrect_arity_simple
  7386                                  .L_lambda_simple_arity_check_ok_0033:
  7387 00005739 C8000000                	enter 0, 0
  7388 0000573D BF08000000              	mov rdi, 8
  7389 00005742 E8B1BF0000              	call malloc
  7390 00005747 488B5D20                	mov rbx, PARAM(0)
  7391 0000574B 488918                  	mov qword [rax], rbx
  7392 0000574E 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  7393                                  
  7394 00005752 48B8-                            	mov rax, sob_void
  7394 00005754 [0000000000000000] 
  7395                                  
  7396 0000575C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7397 00005761 E892BF0000              	call malloc
  7398 00005766 50                      	push rax
  7399 00005767 BF08000000              	mov rdi, 8 * 1	; new rib
  7400 0000576C E887BF0000              	call malloc
  7401 00005771 50                      	push rax
  7402 00005772 BF10000000              	mov rdi, 8 * 2	; extended env
  7403 00005777 E87CBF0000              	call malloc
  7404 0000577C 488B7D10                	mov rdi, ENV
  7405 00005780 BE00000000              	mov rsi, 0
  7406 00005785 BA01000000              	mov rdx, 1
  7407                                  .L_lambda_simple_env_loop_0034:	; ext_env[i + 1] <-- env[i]
  7408 0000578A 4883FE01                	cmp rsi, 1
  7409 0000578E 7410                    	je .L_lambda_simple_env_end_0034
  7410 00005790 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7411 00005794 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7412 00005798 48FFC6                  	inc rsi
  7413 0000579B 48FFC2                  	inc rdx
  7414 0000579E EBEA                    	jmp .L_lambda_simple_env_loop_0034
  7415                                  .L_lambda_simple_env_end_0034:
  7416 000057A0 5B                      	pop rbx
  7417 000057A1 BE00000000              	mov rsi, 0
  7418                                  .L_lambda_simple_params_loop_0034:	; copy params
  7419 000057A6 4883FE01                	cmp rsi, 1
  7420 000057AA 740E                    	je .L_lambda_simple_params_end_0034
  7421 000057AC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7422 000057B1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7423 000057B5 48FFC6                  	inc rsi
  7424 000057B8 EBEC                    	jmp .L_lambda_simple_params_loop_0034
  7425                                  .L_lambda_simple_params_end_0034:
  7426 000057BA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7427 000057BD 4889C3                  	mov rbx, rax
  7428 000057C0 58                      	pop rax
  7429 000057C1 C60005                  	mov byte [rax], T_closure
  7430 000057C4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7431 000057C8 48C74009[D5570000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0034
  7432 000057D0 E97A010000              	jmp .L_lambda_simple_end_0034
  7433                                  .L_lambda_simple_code_0034:	; lambda-simple body
  7434 000057D5 48837C241003            	cmp qword [rsp + 8 * 2], 3
  7435 000057DB 740B                    	je .L_lambda_simple_arity_check_ok_0034
  7436 000057DD FF742410                	push qword [rsp + 8 * 2]
  7437 000057E1 6A03                    	push 3
  7438 000057E3 E9C9BE0000              	jmp L_error_incorrect_arity_simple
  7439                                  .L_lambda_simple_arity_check_ok_0034:
  7440 000057E8 C8000000                	enter 0, 0
  7441 000057EC 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7442 000057F0 50                      	push rax
  7443 000057F1 488B0425[00000000]      	mov rax, qword [free_var_0]
  7444 000057F9 50                      	push rax
  7445 000057FA 6A02                    	push 2
  7446 000057FC 488B0425[D0020000]      	mov rax, qword [free_var_90]
  7447                                  	assert_closure(rax)
    42 00005804 803805              <1>  cmp byte [%1], %2
    43 00005807 0F85DFD60000        <1>  jne L_error_incorrect_type
  7448 0000580D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7449 00005810 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7450                                  
  7451 00005813 483D[02000000]                  	cmp rax, sob_boolean_false
  7452                                  
  7453 00005819 7409                            	je .L_if_else_0010
  7454 0000581B 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7455                                  
  7456 0000581F E927010000                      	jmp .L_if_end_0010
  7457                                  
  7458                                          	.L_if_else_0010:
  7459 00005824 48B8-                   	mov rax,L_constants + 1
  7459 00005826 [0100000000000000] 
  7460 0000582E 50                      	push rax
  7461 0000582F 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7462 00005833 50                      	push rax
  7463 00005834 488B0425[88000000]      	mov rax, qword [free_var_17]
  7464 0000583C 50                      	push rax
  7465 0000583D 6A02                    	push 2
  7466 0000583F 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7467                                  	assert_closure(rax)
    42 00005847 803805              <1>  cmp byte [%1], %2
    43 0000584A 0F859CD60000        <1>  jne L_error_incorrect_type
  7468 00005850 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7469 00005853 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7470 00005856 50                      	push rax
  7471 00005857 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7472 0000585B 50                      	push rax
  7473 0000585C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7474 00005860 50                      	push rax
  7475 00005861 6A03                    	push 3
  7476 00005863 488B4510                	mov rax, qword [rbp + 8 * 2]
  7477                                  
  7478 00005867 488B00                                            	mov rax, qword[rax + 8 * 0]
  7479                                  
  7480 0000586A 488B00                                            	mov rax, qword[rax + 8 * 0]
  7481 0000586D 488B00                  	mov rax, qword [rax]
  7482                                  	assert_closure(rax)
    42 00005870 803805              <1>  cmp byte [%1], %2
    43 00005873 0F8573D60000        <1>  jne L_error_incorrect_type
  7483 00005879 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7484 0000587C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7485 0000587F 50                      	push rax
  7486 00005880 6A02                    	push 2
  7487 00005882 488B0425[68000000]      	mov rax, qword [free_var_13]
  7488                                  	assert_closure(rax)
    42 0000588A 803805              <1>  cmp byte [%1], %2
    43 0000588D 0F8559D60000        <1>  jne L_error_incorrect_type
  7489 00005893 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7490 00005896 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7491 00005899 50                      	push rax
  7492 0000589A 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7493 0000589E 50                      	push rax
  7494 0000589F 488B0425[80000000]      	mov rax, qword [free_var_16]
  7495 000058A7 50                      	push rax
  7496 000058A8 6A02                    	push 2
  7497 000058AA 488B0425[D8020000]      	mov rax, qword [free_var_91]
  7498                                  	assert_closure(rax)
    42 000058B2 803805              <1>  cmp byte [%1], %2
    43 000058B5 0F8531D60000        <1>  jne L_error_incorrect_type
  7499 000058BB FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7500 000058BE FF5009                  	call SOB_CLOSURE_CODE(rax)
  7501 000058C1 50                      	push rax
  7502 000058C2 6A02                    	push 2
  7503 000058C4 488B0425[F0020000]      	mov rax, qword [free_var_94]
  7504                                  	assert_closure(rax)
    42 000058CC 803805              <1>  cmp byte [%1], %2
    43 000058CF 0F8517D60000        <1>  jne L_error_incorrect_type
  7505 000058D5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7506 000058D8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7507 000058DB 50                      	push rax
  7508 000058DC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7509 000058E0 50                      	push rax
  7510 000058E1 6A02                    	push 2
  7511 000058E3 488B0425[C8020000]      	mov rax, qword [free_var_89]
  7512                                  .L_applic_TC_0033:
  7513 000058EB 803805                  	cmp byte [rax], T_closure
  7514 000058EE 0F85B9CD0000            	jne L_code_ptr_error
  7515 000058F4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7516 000058F8 53                      	push rbx
  7517 000058F9 FF7508                  	push qword [rbp + 8]
  7518 000058FC FF7500                  	push qword [rbp]
  7519 000058FF 488B4D18                	mov rcx, [rbp + 3 * 8]
  7520 00005903 488B542418              	mov rdx, [rsp + 3 * 8]
  7521 00005908 488D7204                	lea rsi, [rdx + 4]
  7522 0000590C 4C8D4EFF                	lea r9, [rsi - 1]
  7523 00005910 488D7903                	lea rdi, [rcx + 3]
  7524 00005914 4D31C0                  	xor r8, r8
  7525                                  .L_tc_recycle_frame_loop_0033:
  7526 00005917 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7527 0000591B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7528 00005920 49FFC9                  	dec r9
  7529 00005923 4D31C0                  	xor r8, r8
  7530 00005926 48FFCF                  	dec rdi
  7531 00005929 48FFCE                  	dec rsi
  7532 0000592C 4883FE00                	cmp rsi, 0
  7533 00005930 75E5                    	jne .L_tc_recycle_frame_loop_0033
  7534                                  .L_tc_recycle_frame_done_0033:
  7535                                  ;this pop rbp in sot to the right place
  7536 00005932 4989C9                  	mov r9, rcx
  7537 00005935 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7538 0000593D 4C01CC                  	add rsp, r9
  7539 00005940 5D                      	pop rbp
  7540 00005941 488B4D00                	mov rcx, qword [rbp]
  7541 00005945 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7542 00005949 FFE3                    	jmp rbx
  7543                                  
  7544                                          	.L_if_end_0010:
  7545 0000594B C9                      	leave
  7546 0000594C C22800                  	ret 8 * (2 + 3)
  7547                                  .L_lambda_simple_end_0034:	; new closure is in rax
  7548 0000594F 50                      	push rax
  7549 00005950 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7550 00005954 8F00                    	pop qword [rax]
  7551 00005956 48B8-                   	mov rax, sob_void
  7551 00005958 [0000000000000000] 
  7552                                  
  7553 00005960 BF11000000              	mov rdi, (1 + 8 + 8)
  7554 00005965 E88EBD0000              	call malloc
  7555 0000596A 50                      	push rax
  7556 0000596B BF08000000              	mov rdi, 8 * 1
  7557 00005970 E883BD0000              	call malloc
  7558 00005975 50                      	push rax
  7559 00005976 BF10000000              	mov rdi, 8 * 2
  7560 0000597B E878BD0000              	call malloc
  7561 00005980 488B7D10                	mov rdi, ENV
  7562 00005984 4831F6                  	xor rsi, rsi
  7563 00005987 4831D2                  	xor rdx, rdx
  7564 0000598A 48FFC2                  	inc rdx
  7565                                  	.L_lambda_opt_env_loop_0009:
  7566                                  
  7567 0000598D 4883FE01                        	cmp rsi, 1
  7568                                  
  7569 00005991 7412                            	je .L_lambda_opt_env_end_0009
  7570 00005993 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7571 00005997 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7572 0000599B 4883C201                	add rdx, 1
  7573 0000599F 4883C601                	add rsi, 1
  7574 000059A3 EBE8                    	jmp .L_lambda_opt_env_loop_0009
  7575                                  
  7576                                          	.L_lambda_opt_env_end_0009:
  7577 000059A5 5B                      	pop rbx
  7578 000059A6 4831F6                  	xor rsi, rsi
  7579                                  	.L_lambda_opt_params_loop_0009:
  7580                                  
  7581 000059A9 4883FE01                        	cmp rsi, 1
  7582                                  
  7583 000059AD 740F                            	je .L_lambda_opt_params_end_0009
  7584 000059AF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7585 000059B4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7586 000059B8 4883C601                	add rsi, 1
  7587 000059BC EBEB                    	jmp .L_lambda_opt_params_loop_0009
  7588                                  
  7589                                          	.L_lambda_opt_params_end_0009:
  7590 000059BE 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  7591 000059C1 4889C3                  	mov rbx, rax
  7592 000059C4 58                      	pop rax
  7593 000059C5 C60005                  	mov byte [rax], T_closure
  7594 000059C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7595 000059CC 48C74009[D9590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0009
  7596                                  
  7597 000059D4 E98C010000                      	jmp .L_lambda_opt_end_0009
  7598                                  
  7599                                          	.L_lambda_opt_code_0009:
  7600                                  
  7601 000059D9 48837C241002                    	cmp qword [rsp + 8 * 2], 2
  7602                                  
  7603 000059DF 740D                            	je .L_lambda_opt_arity_check_exact_0009  ;same num_of_args
  7604                                  
  7605 000059E1 7F65                            	jg .L_lambda_opt_arity_check_more_0009  ;greater num_of_args
  7606 000059E3 FF742410                	push qword [rsp + 8 * 2]
  7607 000059E7 6A02                    	push 2
  7608 000059E9 E9D7BC0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  7609                                  .L_lambda_opt_arity_check_exact_0009:
  7610 000059EE 4883EC08                	sub rsp, 8 * 1
  7611 000059F2 488D7F10                	lea rdi, [rdi + (8 * 2)]
  7612 000059F6 4889E7                  	mov rdi, rsp 
  7613 000059F9 488B4708                	mov rax, qword [rdi + 8]
  7614 000059FD 488907                  	mov qword [rdi], rax
  7615 00005A00 488D7F08                	lea rdi, [rdi + 8]
  7616 00005A04 488B4708                	mov rax, qword [rdi + 8]
  7617 00005A08 488907                  	mov qword [rdi], rax
  7618 00005A0B 488D7F08                	lea rdi, [rdi + 8]
  7619 00005A0F 488B4708                	mov rax, qword [rdi + 8]
  7620 00005A13 4889C1                  	mov rcx, rax
  7621 00005A16 4883C001                	add rax, 1
  7622 00005A1A 488907                  	mov qword [rdi], rax
  7623 00005A1D 488D7F08                	lea rdi, [rdi + 8]
  7624                                  	.L_lambda_opt_stack_shrink_loop_0019:
  7625 00005A21 4883F900                	cmp rcx, 0
  7626 00005A25 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0019
  7627 00005A27 4883E901                	sub rcx, 1
  7628 00005A2B 488D4010                	lea rax, [rax + (8 * 2)]
  7629 00005A2F 488B4708                	mov rax, qword [rdi + 8]
  7630 00005A33 488907                  	mov qword [rdi], rax
  7631 00005A36 488D7F08                	lea rdi, [rdi + 8]
  7632 00005A3A EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0019
  7633                                  
  7634                                          	.L_lambda_opt_stack_shrink_loop_exit_0019:
  7635 00005A3C 48C707[01000000]        	mov qword [rdi], sob_nil
  7636 00005A43 E997000000              	jmp .L_lambda_opt_stack_adjusted_0009
  7637                                  
  7638                                          	.L_lambda_opt_arity_check_more_0009:
  7639 00005A48 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  7640 00005A4D 488D4EFE                	lea rcx, [rsi - 2]
  7641 00005A51 49B8-                   	mov r8, sob_nil
  7641 00005A53 [0100000000000000] 
  7642 00005A5B 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  7643 00005A60 4889F2                  	mov rdx, rsi
  7644                                  	.L_lambda_opt_stack_shrink_loop_001a:
  7645 00005A63 4883F900                	cmp rcx, 0
  7646 00005A67 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_001a
  7647 00005A69 BF11000000              	mov rdi, 1 + (8 * 2)
  7648 00005A6E E885BC0000              	call malloc
  7649 00005A73 C60021                  	mov byte [rax], T_pair
  7650 00005A76 488B1E                  	mov rbx, qword [rsi]
  7651 00005A79 48895801                	mov SOB_PAIR_CAR(rax), rbx
  7652 00005A7D 4C894009                	mov SOB_PAIR_CDR(rax), r8
  7653 00005A81 4883C6F8                	add rsi, -8
  7654 00005A85 4883E901                	sub rcx, 1
  7655 00005A89 4989C0                  	mov r8, rax
  7656 00005A8C EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_001a
  7657                                  
  7658                                          	.L_lambda_opt_stack_shrink_loop_exit_001a:
  7659 00005A8E 4C8902                  	mov qword [rdx], r8
  7660 00005A91 4883EA08                	sub rdx, 8 * 1
  7661 00005A95 488D742420              	lea rsi, [rsp + (8 * (2 + 2))]
  7662                                  
  7663 00005A9A B902000000                      	mov rcx, 2 
  7664                                  
  7665                                          	.L_lambda_opt_stack_shrink_loop_001b:
  7666 00005A9F 4883F900                	cmp rcx, 0
  7667 00005AA3 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_001b
  7668 00005AA5 488B06                  	mov rax, qword [rsi]
  7669 00005AA8 488902                  	mov qword [rdx], rax
  7670 00005AAB 488D76F8                	lea rsi, [rsi - 8]
  7671 00005AAF 4883C2F8                	add rdx, -8
  7672 00005AB3 4883C1FF                	add rcx, -1
  7673 00005AB7 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_001b
  7674                                  
  7675                                          	.L_lambda_opt_stack_shrink_loop_exit_001b:
  7676                                  
  7677 00005AB9 48C70203000000                  	mov qword [rdx], 1 + 2
  7678 00005AC0 4883C6F8                	add rsi, -8
  7679 00005AC4 4883C2F8                	add rdx, -8
  7680 00005AC8 488B06                  	mov rax, qword [rsi]
  7681 00005ACB 488902                  	mov qword [rdx], rax
  7682 00005ACE 4883C2F8                	add rdx, -8
  7683 00005AD2 488D76F8                	lea rsi, [rsi - 8]
  7684 00005AD6 488B06                  	mov rax, qword [rsi]
  7685 00005AD9 488902                  	mov qword [rdx], rax
  7686 00005ADC 4889D4                  	mov rsp, rdx
  7687                                  	.L_lambda_opt_stack_adjusted_0009:
  7688 00005ADF C8000000                	enter 0, 0
  7689 00005AE3 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  7690 00005AE7 50                      	push rax
  7691 00005AE8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7692 00005AEC 50                      	push rax
  7693 00005AED 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7694 00005AF1 50                      	push rax
  7695 00005AF2 6A03                    	push 3
  7696 00005AF4 488B4510                	mov rax, qword [rbp + 8 * 2]
  7697                                  
  7698 00005AF8 488B00                                            	mov rax, qword[rax + 8 * 0]
  7699                                  
  7700 00005AFB 488B00                                            	mov rax, qword[rax + 8 * 0]
  7701 00005AFE 488B00                  	mov rax, qword [rax]
  7702                                  .L_applic_TC_0034:
  7703 00005B01 803805                  	cmp byte [rax], T_closure
  7704 00005B04 0F85A3CB0000            	jne L_code_ptr_error
  7705 00005B0A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7706 00005B0E 53                      	push rbx
  7707 00005B0F FF7508                  	push qword [rbp + 8]
  7708 00005B12 FF7500                  	push qword [rbp]
  7709 00005B15 488B4D18                	mov rcx, [rbp + 3 * 8]
  7710 00005B19 488B542418              	mov rdx, [rsp + 3 * 8]
  7711 00005B1E 488D7204                	lea rsi, [rdx + 4]
  7712 00005B22 4C8D4EFF                	lea r9, [rsi - 1]
  7713 00005B26 488D7903                	lea rdi, [rcx + 3]
  7714 00005B2A 4D31C0                  	xor r8, r8
  7715                                  .L_tc_recycle_frame_loop_0034:
  7716 00005B2D 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7717 00005B31 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7718 00005B36 49FFC9                  	dec r9
  7719 00005B39 4D31C0                  	xor r8, r8
  7720 00005B3C 48FFCF                  	dec rdi
  7721 00005B3F 48FFCE                  	dec rsi
  7722 00005B42 4883FE00                	cmp rsi, 0
  7723 00005B46 75E5                    	jne .L_tc_recycle_frame_loop_0034
  7724                                  .L_tc_recycle_frame_done_0034:
  7725                                  ;this pop rbp in sot to the right place
  7726 00005B48 4989C9                  	mov r9, rcx
  7727 00005B4B 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7728 00005B53 4C01CC                  	add rsp, r9
  7729 00005B56 5D                      	pop rbp
  7730 00005B57 488B4D00                	mov rcx, qword [rbp]
  7731 00005B5B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7732 00005B5F FFE3                    	jmp rbx
  7733 00005B61 C9                      	leave
  7734 00005B62 C22800                  	ret 8 * (2 + 3)
  7735                                  .L_lambda_opt_end_0009:	; new closure is in rax
  7736 00005B65 C9                      	leave
  7737 00005B66 C21800                  	ret 8 * (2 + 1)
  7738                                  .L_lambda_simple_end_0033:	; new closure is in rax
  7739                                  	assert_closure(rax)
    42 00005B69 803805              <1>  cmp byte [%1], %2
    43 00005B6C 0F857AD30000        <1>  jne L_error_incorrect_type
  7740 00005B72 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7741 00005B75 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7742 00005B78 48890425[00030000]      	mov qword [free_var_96], rax
  7743 00005B80 48B8-                   	mov rax, sob_void
  7743 00005B82 [0000000000000000] 
  7744                                  
  7745 00005B8A 4889C7                  	mov rdi, rax
  7746 00005B8D E877BB0000              	call print_sexpr_if_not_void
  7747                                  
  7748 00005B92 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7749 00005B97 E85CBB0000              	call malloc
  7750 00005B9C 50                      	push rax
  7751 00005B9D BF00000000              	mov rdi, 8 * 0	; new rib
  7752 00005BA2 E851BB0000              	call malloc
  7753 00005BA7 50                      	push rax
  7754 00005BA8 BF08000000              	mov rdi, 8 * 1	; extended env
  7755 00005BAD E846BB0000              	call malloc
  7756 00005BB2 488B7D10                	mov rdi, ENV
  7757 00005BB6 BE00000000              	mov rsi, 0
  7758 00005BBB BA01000000              	mov rdx, 1
  7759                                  .L_lambda_simple_env_loop_0035:	; ext_env[i + 1] <-- env[i]
  7760 00005BC0 4883FE00                	cmp rsi, 0
  7761 00005BC4 7410                    	je .L_lambda_simple_env_end_0035
  7762 00005BC6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7763 00005BCA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7764 00005BCE 48FFC6                  	inc rsi
  7765 00005BD1 48FFC2                  	inc rdx
  7766 00005BD4 EBEA                    	jmp .L_lambda_simple_env_loop_0035
  7767                                  .L_lambda_simple_env_end_0035:
  7768 00005BD6 5B                      	pop rbx
  7769 00005BD7 BE00000000              	mov rsi, 0
  7770                                  .L_lambda_simple_params_loop_0035:	; copy params
  7771 00005BDC 4883FE00                	cmp rsi, 0
  7772 00005BE0 740E                    	je .L_lambda_simple_params_end_0035
  7773 00005BE2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7774 00005BE7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7775 00005BEB 48FFC6                  	inc rsi
  7776 00005BEE EBEC                    	jmp .L_lambda_simple_params_loop_0035
  7777                                  .L_lambda_simple_params_end_0035:
  7778 00005BF0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7779 00005BF3 4889C3                  	mov rbx, rax
  7780 00005BF6 58                      	pop rax
  7781 00005BF7 C60005                  	mov byte [rax], T_closure
  7782 00005BFA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7783 00005BFE 48C74009[0B5C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0035
  7784 00005C06 E99B000000              	jmp .L_lambda_simple_end_0035
  7785                                  .L_lambda_simple_code_0035:	; lambda-simple body
  7786 00005C0B 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7787 00005C11 740B                    	je .L_lambda_simple_arity_check_ok_0035
  7788 00005C13 FF742410                	push qword [rsp + 8 * 2]
  7789 00005C17 6A00                    	push 0
  7790 00005C19 E993BA0000              	jmp L_error_incorrect_arity_simple
  7791                                  .L_lambda_simple_arity_check_ok_0035:
  7792 00005C1E C8000000                	enter 0, 0
  7793 00005C22 48B8-                   	mov rax,L_constants + 68
  7793 00005C24 [4400000000000000] 
  7794 00005C2C 50                      	push rax
  7795 00005C2D 48B8-                   	mov rax,L_constants + 59
  7795 00005C2F [3B00000000000000] 
  7796 00005C37 50                      	push rax
  7797 00005C38 6A02                    	push 2
  7798 00005C3A 488B0425[30010000]      	mov rax, qword [free_var_38]
  7799                                  .L_applic_TC_0035:
  7800 00005C42 803805                  	cmp byte [rax], T_closure
  7801 00005C45 0F8562CA0000            	jne L_code_ptr_error
  7802 00005C4B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7803 00005C4F 53                      	push rbx
  7804 00005C50 FF7508                  	push qword [rbp + 8]
  7805 00005C53 FF7500                  	push qword [rbp]
  7806 00005C56 488B4D18                	mov rcx, [rbp + 3 * 8]
  7807 00005C5A 488B542418              	mov rdx, [rsp + 3 * 8]
  7808 00005C5F 488D7204                	lea rsi, [rdx + 4]
  7809 00005C63 4C8D4EFF                	lea r9, [rsi - 1]
  7810 00005C67 488D7903                	lea rdi, [rcx + 3]
  7811 00005C6B 4D31C0                  	xor r8, r8
  7812                                  .L_tc_recycle_frame_loop_0035:
  7813 00005C6E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7814 00005C72 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7815 00005C77 49FFC9                  	dec r9
  7816 00005C7A 4D31C0                  	xor r8, r8
  7817 00005C7D 48FFCF                  	dec rdi
  7818 00005C80 48FFCE                  	dec rsi
  7819 00005C83 4883FE00                	cmp rsi, 0
  7820 00005C87 75E5                    	jne .L_tc_recycle_frame_loop_0035
  7821                                  .L_tc_recycle_frame_done_0035:
  7822                                  ;this pop rbp in sot to the right place
  7823 00005C89 4989C9                  	mov r9, rcx
  7824 00005C8C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7825 00005C94 4C01CC                  	add rsp, r9
  7826 00005C97 5D                      	pop rbp
  7827 00005C98 488B4D00                	mov rcx, qword [rbp]
  7828 00005C9C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7829 00005CA0 FFE3                    	jmp rbx
  7830 00005CA2 C9                      	leave
  7831 00005CA3 C21000                  	ret 8 * (2 + 0)
  7832                                  .L_lambda_simple_end_0035:	; new closure is in rax
  7833 00005CA6 50                      	push rax
  7834 00005CA7 6A01                    	push 1
  7835 00005CA9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7836 00005CAE E845BA0000              	call malloc
  7837 00005CB3 50                      	push rax
  7838 00005CB4 BF00000000              	mov rdi, 8 * 0	; new rib
  7839 00005CB9 E83ABA0000              	call malloc
  7840 00005CBE 50                      	push rax
  7841 00005CBF BF08000000              	mov rdi, 8 * 1	; extended env
  7842 00005CC4 E82FBA0000              	call malloc
  7843 00005CC9 488B7D10                	mov rdi, ENV
  7844 00005CCD BE00000000              	mov rsi, 0
  7845 00005CD2 BA01000000              	mov rdx, 1
  7846                                  .L_lambda_simple_env_loop_0036:	; ext_env[i + 1] <-- env[i]
  7847 00005CD7 4883FE00                	cmp rsi, 0
  7848 00005CDB 7410                    	je .L_lambda_simple_env_end_0036
  7849 00005CDD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7850 00005CE1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7851 00005CE5 48FFC6                  	inc rsi
  7852 00005CE8 48FFC2                  	inc rdx
  7853 00005CEB EBEA                    	jmp .L_lambda_simple_env_loop_0036
  7854                                  .L_lambda_simple_env_end_0036:
  7855 00005CED 5B                      	pop rbx
  7856 00005CEE BE00000000              	mov rsi, 0
  7857                                  .L_lambda_simple_params_loop_0036:	; copy params
  7858 00005CF3 4883FE00                	cmp rsi, 0
  7859 00005CF7 740E                    	je .L_lambda_simple_params_end_0036
  7860 00005CF9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7861 00005CFE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7862 00005D02 48FFC6                  	inc rsi
  7863 00005D05 EBEC                    	jmp .L_lambda_simple_params_loop_0036
  7864                                  .L_lambda_simple_params_end_0036:
  7865 00005D07 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7866 00005D0A 4889C3                  	mov rbx, rax
  7867 00005D0D 58                      	pop rax
  7868 00005D0E C60005                  	mov byte [rax], T_closure
  7869 00005D11 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7870 00005D15 48C74009[225D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0036
  7871 00005D1D E902080000              	jmp .L_lambda_simple_end_0036
  7872                                  .L_lambda_simple_code_0036:	; lambda-simple body
  7873 00005D22 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7874 00005D28 740B                    	je .L_lambda_simple_arity_check_ok_0036
  7875 00005D2A FF742410                	push qword [rsp + 8 * 2]
  7876 00005D2E 6A01                    	push 1
  7877 00005D30 E97CB90000              	jmp L_error_incorrect_arity_simple
  7878                                  .L_lambda_simple_arity_check_ok_0036:
  7879 00005D35 C8000000                	enter 0, 0
  7880 00005D39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7881 00005D3E E8B5B90000              	call malloc
  7882 00005D43 50                      	push rax
  7883 00005D44 BF08000000              	mov rdi, 8 * 1	; new rib
  7884 00005D49 E8AAB90000              	call malloc
  7885 00005D4E 50                      	push rax
  7886 00005D4F BF10000000              	mov rdi, 8 * 2	; extended env
  7887 00005D54 E89FB90000              	call malloc
  7888 00005D59 488B7D10                	mov rdi, ENV
  7889 00005D5D BE00000000              	mov rsi, 0
  7890 00005D62 BA01000000              	mov rdx, 1
  7891                                  .L_lambda_simple_env_loop_0037:	; ext_env[i + 1] <-- env[i]
  7892 00005D67 4883FE01                	cmp rsi, 1
  7893 00005D6B 7410                    	je .L_lambda_simple_env_end_0037
  7894 00005D6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7895 00005D71 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7896 00005D75 48FFC6                  	inc rsi
  7897 00005D78 48FFC2                  	inc rdx
  7898 00005D7B EBEA                    	jmp .L_lambda_simple_env_loop_0037
  7899                                  .L_lambda_simple_env_end_0037:
  7900 00005D7D 5B                      	pop rbx
  7901 00005D7E BE00000000              	mov rsi, 0
  7902                                  .L_lambda_simple_params_loop_0037:	; copy params
  7903 00005D83 4883FE01                	cmp rsi, 1
  7904 00005D87 740E                    	je .L_lambda_simple_params_end_0037
  7905 00005D89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7906 00005D8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7907 00005D92 48FFC6                  	inc rsi
  7908 00005D95 EBEC                    	jmp .L_lambda_simple_params_loop_0037
  7909                                  .L_lambda_simple_params_end_0037:
  7910 00005D97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7911 00005D9A 4889C3                  	mov rbx, rax
  7912 00005D9D 58                      	pop rax
  7913 00005D9E C60005                  	mov byte [rax], T_closure
  7914 00005DA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7915 00005DA5 48C74009[B25D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0037
  7916 00005DAD E96C040000              	jmp .L_lambda_simple_end_0037
  7917                                  .L_lambda_simple_code_0037:	; lambda-simple body
  7918 00005DB2 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7919 00005DB8 740B                    	je .L_lambda_simple_arity_check_ok_0037
  7920 00005DBA FF742410                	push qword [rsp + 8 * 2]
  7921 00005DBE 6A02                    	push 2
  7922 00005DC0 E9ECB80000              	jmp L_error_incorrect_arity_simple
  7923                                  .L_lambda_simple_arity_check_ok_0037:
  7924 00005DC5 C8000000                	enter 0, 0
  7925 00005DC9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7926 00005DCD 50                      	push rax
  7927 00005DCE 6A01                    	push 1
  7928 00005DD0 488B0425[48000000]      	mov rax, qword [free_var_9]
  7929                                  	assert_closure(rax)
    42 00005DD8 803805              <1>  cmp byte [%1], %2
    43 00005DDB 0F850BD10000        <1>  jne L_error_incorrect_type
  7930 00005DE1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7931 00005DE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7932                                  
  7933 00005DE7 483D[02000000]                  	cmp rax, sob_boolean_false
  7934                                  
  7935 00005DED 0F84CA010000                    	je .L_if_else_0011
  7936 00005DF3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7937 00005DF7 50                      	push rax
  7938 00005DF8 6A01                    	push 1
  7939 00005DFA 488B0425[48000000]      	mov rax, qword [free_var_9]
  7940                                  	assert_closure(rax)
    42 00005E02 803805              <1>  cmp byte [%1], %2
    43 00005E05 0F85E1D00000        <1>  jne L_error_incorrect_type
  7941 00005E0B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7942 00005E0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7943                                  
  7944 00005E11 483D[02000000]                  	cmp rax, sob_boolean_false
  7945                                  
  7946 00005E17 7479                            	je .L_if_else_0015
  7947 00005E19 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7948 00005E1D 50                      	push rax
  7949 00005E1E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  7950 00005E22 50                      	push rax
  7951 00005E23 6A02                    	push 2
  7952 00005E25 488B0425[10010000]      	mov rax, qword [free_var_34]
  7953                                  .L_applic_TC_003c:
  7954 00005E2D 803805                  	cmp byte [rax], T_closure
  7955 00005E30 0F8577C80000            	jne L_code_ptr_error
  7956 00005E36 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  7957 00005E3A 53                      	push rbx
  7958 00005E3B FF7508                  	push qword [rbp + 8]
  7959 00005E3E FF7500                  	push qword [rbp]
  7960 00005E41 488B4D18                	mov rcx, [rbp + 3 * 8]
  7961 00005E45 488B542418              	mov rdx, [rsp + 3 * 8]
  7962 00005E4A 488D7204                	lea rsi, [rdx + 4]
  7963 00005E4E 4C8D4EFF                	lea r9, [rsi - 1]
  7964 00005E52 488D7903                	lea rdi, [rcx + 3]
  7965 00005E56 4D31C0                  	xor r8, r8
  7966                                  .L_tc_recycle_frame_loop_003c:
  7967 00005E59 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  7968 00005E5D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  7969 00005E62 49FFC9                  	dec r9
  7970 00005E65 4D31C0                  	xor r8, r8
  7971 00005E68 48FFCF                  	dec rdi
  7972 00005E6B 48FFCE                  	dec rsi
  7973 00005E6E 4883FE00                	cmp rsi, 0
  7974 00005E72 75E5                    	jne .L_tc_recycle_frame_loop_003c
  7975                                  .L_tc_recycle_frame_done_003c:
  7976                                  ;this pop rbp in sot to the right place
  7977 00005E74 4989C9                  	mov r9, rcx
  7978 00005E77 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  7979 00005E7F 4C01CC                  	add rsp, r9
  7980 00005E82 5D                      	pop rbp
  7981 00005E83 488B4D00                	mov rcx, qword [rbp]
  7982 00005E87 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  7983 00005E8B FFE3                    	jmp rbx
  7984                                  
  7985 00005E8D E926010000                      	jmp .L_if_end_0015
  7986                                  
  7987                                          	.L_if_else_0015:
  7988 00005E92 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  7989 00005E96 50                      	push rax
  7990 00005E97 6A01                    	push 1
  7991 00005E99 488B0425[40000000]      	mov rax, qword [free_var_8]
  7992                                  	assert_closure(rax)
    42 00005EA1 803805              <1>  cmp byte [%1], %2
    43 00005EA4 0F8542D00000        <1>  jne L_error_incorrect_type
  7993 00005EAA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  7994 00005EAD FF5009                  	call SOB_CLOSURE_CODE(rax)
  7995                                  
  7996 00005EB0 483D[02000000]                  	cmp rax, sob_boolean_false
  7997                                  
  7998 00005EB6 0F8490000000                    	je .L_if_else_0016
  7999 00005EBC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8000 00005EC0 50                      	push rax
  8001 00005EC1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8002 00005EC5 50                      	push rax
  8003 00005EC6 6A01                    	push 1
  8004 00005EC8 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8005                                  	assert_closure(rax)
    42 00005ED0 803805              <1>  cmp byte [%1], %2
    43 00005ED3 0F8513D00000        <1>  jne L_error_incorrect_type
  8006 00005ED9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8007 00005EDC FF5009                  	call SOB_CLOSURE_CODE(rax)
  8008 00005EDF 50                      	push rax
  8009 00005EE0 6A02                    	push 2
  8010 00005EE2 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8011                                  .L_applic_TC_003b:
  8012 00005EEA 803805                  	cmp byte [rax], T_closure
  8013 00005EED 0F85BAC70000            	jne L_code_ptr_error
  8014 00005EF3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8015 00005EF7 53                      	push rbx
  8016 00005EF8 FF7508                  	push qword [rbp + 8]
  8017 00005EFB FF7500                  	push qword [rbp]
  8018 00005EFE 488B4D18                	mov rcx, [rbp + 3 * 8]
  8019 00005F02 488B542418              	mov rdx, [rsp + 3 * 8]
  8020 00005F07 488D7204                	lea rsi, [rdx + 4]
  8021 00005F0B 4C8D4EFF                	lea r9, [rsi - 1]
  8022 00005F0F 488D7903                	lea rdi, [rcx + 3]
  8023 00005F13 4D31C0                  	xor r8, r8
  8024                                  .L_tc_recycle_frame_loop_003b:
  8025 00005F16 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8026 00005F1A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8027 00005F1F 49FFC9                  	dec r9
  8028 00005F22 4D31C0                  	xor r8, r8
  8029 00005F25 48FFCF                  	dec rdi
  8030 00005F28 48FFCE                  	dec rsi
  8031 00005F2B 4883FE00                	cmp rsi, 0
  8032 00005F2F 75E5                    	jne .L_tc_recycle_frame_loop_003b
  8033                                  .L_tc_recycle_frame_done_003b:
  8034                                  ;this pop rbp in sot to the right place
  8035 00005F31 4989C9                  	mov r9, rcx
  8036 00005F34 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8037 00005F3C 4C01CC                  	add rsp, r9
  8038 00005F3F 5D                      	pop rbp
  8039 00005F40 488B4D00                	mov rcx, qword [rbp]
  8040 00005F44 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8041 00005F48 FFE3                    	jmp rbx
  8042                                  
  8043 00005F4A EB6C                            	jmp .L_if_end_0016
  8044                                  
  8045                                          	.L_if_else_0016:
  8046 00005F4C 6A00                    	push 0
  8047 00005F4E 488B4510                	mov rax, qword [rbp + 8 * 2]
  8048                                  
  8049 00005F52 488B00                                            	mov rax, qword[rax + 8 * 0]
  8050                                  
  8051 00005F55 488B00                                            	mov rax, qword[rax + 8 * 0]
  8052                                  .L_applic_TC_003a:
  8053 00005F58 803805                  	cmp byte [rax], T_closure
  8054 00005F5B 0F854CC70000            	jne L_code_ptr_error
  8055 00005F61 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8056 00005F65 53                      	push rbx
  8057 00005F66 FF7508                  	push qword [rbp + 8]
  8058 00005F69 FF7500                  	push qword [rbp]
  8059 00005F6C 488B4D18                	mov rcx, [rbp + 3 * 8]
  8060 00005F70 488B542418              	mov rdx, [rsp + 3 * 8]
  8061 00005F75 488D7204                	lea rsi, [rdx + 4]
  8062 00005F79 4C8D4EFF                	lea r9, [rsi - 1]
  8063 00005F7D 488D7903                	lea rdi, [rcx + 3]
  8064 00005F81 4D31C0                  	xor r8, r8
  8065                                  .L_tc_recycle_frame_loop_003a:
  8066 00005F84 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8067 00005F88 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8068 00005F8D 49FFC9                  	dec r9
  8069 00005F90 4D31C0                  	xor r8, r8
  8070 00005F93 48FFCF                  	dec rdi
  8071 00005F96 48FFCE                  	dec rsi
  8072 00005F99 4883FE00                	cmp rsi, 0
  8073 00005F9D 75E5                    	jne .L_tc_recycle_frame_loop_003a
  8074                                  .L_tc_recycle_frame_done_003a:
  8075                                  ;this pop rbp in sot to the right place
  8076 00005F9F 4989C9                  	mov r9, rcx
  8077 00005FA2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8078 00005FAA 4C01CC                  	add rsp, r9
  8079 00005FAD 5D                      	pop rbp
  8080 00005FAE 488B4D00                	mov rcx, qword [rbp]
  8081 00005FB2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8082 00005FB6 FFE3                    	jmp rbx
  8083                                  
  8084                                          	.L_if_end_0016:
  8085                                  
  8086                                          	.L_if_end_0015:
  8087                                  
  8088 00005FB8 E95D020000                      	jmp .L_if_end_0011
  8089                                  
  8090                                          	.L_if_else_0011:
  8091 00005FBD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8092 00005FC1 50                      	push rax
  8093 00005FC2 6A01                    	push 1
  8094 00005FC4 488B0425[40000000]      	mov rax, qword [free_var_8]
  8095                                  	assert_closure(rax)
    42 00005FCC 803805              <1>  cmp byte [%1], %2
    43 00005FCF 0F8517CF0000        <1>  jne L_error_incorrect_type
  8096 00005FD5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8097 00005FD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8098                                  
  8099 00005FDB 483D[02000000]                  	cmp rax, sob_boolean_false
  8100                                  
  8101 00005FE1 0F84C7010000                    	je .L_if_else_0012
  8102 00005FE7 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8103 00005FEB 50                      	push rax
  8104 00005FEC 6A01                    	push 1
  8105 00005FEE 488B0425[48000000]      	mov rax, qword [free_var_9]
  8106                                  	assert_closure(rax)
    42 00005FF6 803805              <1>  cmp byte [%1], %2
    43 00005FF9 0F85EDCE0000        <1>  jne L_error_incorrect_type
  8107 00005FFF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8108 00006002 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8109                                  
  8110 00006005 483D[02000000]                  	cmp rax, sob_boolean_false
  8111                                  
  8112 0000600B 0F8493000000                    	je .L_if_else_0013
  8113 00006011 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8114 00006015 50                      	push rax
  8115 00006016 6A01                    	push 1
  8116 00006018 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8117                                  	assert_closure(rax)
    42 00006020 803805              <1>  cmp byte [%1], %2
    43 00006023 0F85C3CE0000        <1>  jne L_error_incorrect_type
  8118 00006029 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8119 0000602C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8120 0000602F 50                      	push rax
  8121 00006030 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8122 00006034 50                      	push rax
  8123 00006035 6A02                    	push 2
  8124 00006037 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8125                                  .L_applic_TC_0039:
  8126 0000603F 803805                  	cmp byte [rax], T_closure
  8127 00006042 0F8565C60000            	jne L_code_ptr_error
  8128 00006048 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8129 0000604C 53                      	push rbx
  8130 0000604D FF7508                  	push qword [rbp + 8]
  8131 00006050 FF7500                  	push qword [rbp]
  8132 00006053 488B4D18                	mov rcx, [rbp + 3 * 8]
  8133 00006057 488B542418              	mov rdx, [rsp + 3 * 8]
  8134 0000605C 488D7204                	lea rsi, [rdx + 4]
  8135 00006060 4C8D4EFF                	lea r9, [rsi - 1]
  8136 00006064 488D7903                	lea rdi, [rcx + 3]
  8137 00006068 4D31C0                  	xor r8, r8
  8138                                  .L_tc_recycle_frame_loop_0039:
  8139 0000606B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8140 0000606F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8141 00006074 49FFC9                  	dec r9
  8142 00006077 4D31C0                  	xor r8, r8
  8143 0000607A 48FFCF                  	dec rdi
  8144 0000607D 48FFCE                  	dec rsi
  8145 00006080 4883FE00                	cmp rsi, 0
  8146 00006084 75E5                    	jne .L_tc_recycle_frame_loop_0039
  8147                                  .L_tc_recycle_frame_done_0039:
  8148                                  ;this pop rbp in sot to the right place
  8149 00006086 4989C9                  	mov r9, rcx
  8150 00006089 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8151 00006091 4C01CC                  	add rsp, r9
  8152 00006094 5D                      	pop rbp
  8153 00006095 488B4D00                	mov rcx, qword [rbp]
  8154 00006099 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8155 0000609D FFE3                    	jmp rbx
  8156                                  
  8157 0000609F E908010000                      	jmp .L_if_end_0013
  8158                                  
  8159                                          	.L_if_else_0013:
  8160 000060A4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8161 000060A8 50                      	push rax
  8162 000060A9 6A01                    	push 1
  8163 000060AB 488B0425[40000000]      	mov rax, qword [free_var_8]
  8164                                  	assert_closure(rax)
    42 000060B3 803805              <1>  cmp byte [%1], %2
    43 000060B6 0F8530CE0000        <1>  jne L_error_incorrect_type
  8165 000060BC FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8166 000060BF FF5009                  	call SOB_CLOSURE_CODE(rax)
  8167                                  
  8168 000060C2 483D[02000000]                  	cmp rax, sob_boolean_false
  8169                                  
  8170 000060C8 7476                            	je .L_if_else_0014
  8171 000060CA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8172 000060CE 50                      	push rax
  8173 000060CF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8174 000060D3 50                      	push rax
  8175 000060D4 6A02                    	push 2
  8176 000060D6 488B0425[F0000000]      	mov rax, qword [free_var_30]
  8177                                  .L_applic_TC_0038:
  8178 000060DE 803805                  	cmp byte [rax], T_closure
  8179 000060E1 0F85C6C50000            	jne L_code_ptr_error
  8180 000060E7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8181 000060EB 53                      	push rbx
  8182 000060EC FF7508                  	push qword [rbp + 8]
  8183 000060EF FF7500                  	push qword [rbp]
  8184 000060F2 488B4D18                	mov rcx, [rbp + 3 * 8]
  8185 000060F6 488B542418              	mov rdx, [rsp + 3 * 8]
  8186 000060FB 488D7204                	lea rsi, [rdx + 4]
  8187 000060FF 4C8D4EFF                	lea r9, [rsi - 1]
  8188 00006103 488D7903                	lea rdi, [rcx + 3]
  8189 00006107 4D31C0                  	xor r8, r8
  8190                                  .L_tc_recycle_frame_loop_0038:
  8191 0000610A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8192 0000610E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8193 00006113 49FFC9                  	dec r9
  8194 00006116 4D31C0                  	xor r8, r8
  8195 00006119 48FFCF                  	dec rdi
  8196 0000611C 48FFCE                  	dec rsi
  8197 0000611F 4883FE00                	cmp rsi, 0
  8198 00006123 75E5                    	jne .L_tc_recycle_frame_loop_0038
  8199                                  .L_tc_recycle_frame_done_0038:
  8200                                  ;this pop rbp in sot to the right place
  8201 00006125 4989C9                  	mov r9, rcx
  8202 00006128 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8203 00006130 4C01CC                  	add rsp, r9
  8204 00006133 5D                      	pop rbp
  8205 00006134 488B4D00                	mov rcx, qword [rbp]
  8206 00006138 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8207 0000613C FFE3                    	jmp rbx
  8208                                  
  8209 0000613E EB6C                            	jmp .L_if_end_0014
  8210                                  
  8211                                          	.L_if_else_0014:
  8212 00006140 6A00                    	push 0
  8213 00006142 488B4510                	mov rax, qword [rbp + 8 * 2]
  8214                                  
  8215 00006146 488B00                                            	mov rax, qword[rax + 8 * 0]
  8216                                  
  8217 00006149 488B00                                            	mov rax, qword[rax + 8 * 0]
  8218                                  .L_applic_TC_0037:
  8219 0000614C 803805                  	cmp byte [rax], T_closure
  8220 0000614F 0F8558C50000            	jne L_code_ptr_error
  8221 00006155 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8222 00006159 53                      	push rbx
  8223 0000615A FF7508                  	push qword [rbp + 8]
  8224 0000615D FF7500                  	push qword [rbp]
  8225 00006160 488B4D18                	mov rcx, [rbp + 3 * 8]
  8226 00006164 488B542418              	mov rdx, [rsp + 3 * 8]
  8227 00006169 488D7204                	lea rsi, [rdx + 4]
  8228 0000616D 4C8D4EFF                	lea r9, [rsi - 1]
  8229 00006171 488D7903                	lea rdi, [rcx + 3]
  8230 00006175 4D31C0                  	xor r8, r8
  8231                                  .L_tc_recycle_frame_loop_0037:
  8232 00006178 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8233 0000617C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8234 00006181 49FFC9                  	dec r9
  8235 00006184 4D31C0                  	xor r8, r8
  8236 00006187 48FFCF                  	dec rdi
  8237 0000618A 48FFCE                  	dec rsi
  8238 0000618D 4883FE00                	cmp rsi, 0
  8239 00006191 75E5                    	jne .L_tc_recycle_frame_loop_0037
  8240                                  .L_tc_recycle_frame_done_0037:
  8241                                  ;this pop rbp in sot to the right place
  8242 00006193 4989C9                  	mov r9, rcx
  8243 00006196 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8244 0000619E 4C01CC                  	add rsp, r9
  8245 000061A1 5D                      	pop rbp
  8246 000061A2 488B4D00                	mov rcx, qword [rbp]
  8247 000061A6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8248 000061AA FFE3                    	jmp rbx
  8249                                  
  8250                                          	.L_if_end_0014:
  8251                                  
  8252                                          	.L_if_end_0013:
  8253                                  
  8254 000061AC EB6C                            	jmp .L_if_end_0012
  8255                                  
  8256                                          	.L_if_else_0012:
  8257 000061AE 6A00                    	push 0
  8258 000061B0 488B4510                	mov rax, qword [rbp + 8 * 2]
  8259                                  
  8260 000061B4 488B00                                            	mov rax, qword[rax + 8 * 0]
  8261                                  
  8262 000061B7 488B00                                            	mov rax, qword[rax + 8 * 0]
  8263                                  .L_applic_TC_0036:
  8264 000061BA 803805                  	cmp byte [rax], T_closure
  8265 000061BD 0F85EAC40000            	jne L_code_ptr_error
  8266 000061C3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8267 000061C7 53                      	push rbx
  8268 000061C8 FF7508                  	push qword [rbp + 8]
  8269 000061CB FF7500                  	push qword [rbp]
  8270 000061CE 488B4D18                	mov rcx, [rbp + 3 * 8]
  8271 000061D2 488B542418              	mov rdx, [rsp + 3 * 8]
  8272 000061D7 488D7204                	lea rsi, [rdx + 4]
  8273 000061DB 4C8D4EFF                	lea r9, [rsi - 1]
  8274 000061DF 488D7903                	lea rdi, [rcx + 3]
  8275 000061E3 4D31C0                  	xor r8, r8
  8276                                  .L_tc_recycle_frame_loop_0036:
  8277 000061E6 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8278 000061EA 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8279 000061EF 49FFC9                  	dec r9
  8280 000061F2 4D31C0                  	xor r8, r8
  8281 000061F5 48FFCF                  	dec rdi
  8282 000061F8 48FFCE                  	dec rsi
  8283 000061FB 4883FE00                	cmp rsi, 0
  8284 000061FF 75E5                    	jne .L_tc_recycle_frame_loop_0036
  8285                                  .L_tc_recycle_frame_done_0036:
  8286                                  ;this pop rbp in sot to the right place
  8287 00006201 4989C9                  	mov r9, rcx
  8288 00006204 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8289 0000620C 4C01CC                  	add rsp, r9
  8290 0000620F 5D                      	pop rbp
  8291 00006210 488B4D00                	mov rcx, qword [rbp]
  8292 00006214 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8293 00006218 FFE3                    	jmp rbx
  8294                                  
  8295                                          	.L_if_end_0012:
  8296                                  
  8297                                          	.L_if_end_0011:
  8298 0000621A C9                      	leave
  8299 0000621B C22000                  	ret 8 * (2 + 2)
  8300                                  .L_lambda_simple_end_0037:	; new closure is in rax
  8301 0000621E 50                      	push rax
  8302 0000621F 6A01                    	push 1
  8303 00006221 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8304 00006226 E8CDB40000              	call malloc
  8305 0000622B 50                      	push rax
  8306 0000622C BF08000000              	mov rdi, 8 * 1	; new rib
  8307 00006231 E8C2B40000              	call malloc
  8308 00006236 50                      	push rax
  8309 00006237 BF10000000              	mov rdi, 8 * 2	; extended env
  8310 0000623C E8B7B40000              	call malloc
  8311 00006241 488B7D10                	mov rdi, ENV
  8312 00006245 BE00000000              	mov rsi, 0
  8313 0000624A BA01000000              	mov rdx, 1
  8314                                  .L_lambda_simple_env_loop_0038:	; ext_env[i + 1] <-- env[i]
  8315 0000624F 4883FE01                	cmp rsi, 1
  8316 00006253 7410                    	je .L_lambda_simple_env_end_0038
  8317 00006255 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8318 00006259 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8319 0000625D 48FFC6                  	inc rsi
  8320 00006260 48FFC2                  	inc rdx
  8321 00006263 EBEA                    	jmp .L_lambda_simple_env_loop_0038
  8322                                  .L_lambda_simple_env_end_0038:
  8323 00006265 5B                      	pop rbx
  8324 00006266 BE00000000              	mov rsi, 0
  8325                                  .L_lambda_simple_params_loop_0038:	; copy params
  8326 0000626B 4883FE01                	cmp rsi, 1
  8327 0000626F 740E                    	je .L_lambda_simple_params_end_0038
  8328 00006271 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8329 00006276 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8330 0000627A 48FFC6                  	inc rsi
  8331 0000627D EBEC                    	jmp .L_lambda_simple_params_loop_0038
  8332                                  .L_lambda_simple_params_end_0038:
  8333 0000627F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8334 00006282 4889C3                  	mov rbx, rax
  8335 00006285 58                      	pop rax
  8336 00006286 C60005                  	mov byte [rax], T_closure
  8337 00006289 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8338 0000628D 48C74009[9A620000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0038
  8339 00006295 E926020000              	jmp .L_lambda_simple_end_0038
  8340                                  .L_lambda_simple_code_0038:	; lambda-simple body
  8341 0000629A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8342 000062A0 740B                    	je .L_lambda_simple_arity_check_ok_0038
  8343 000062A2 FF742410                	push qword [rsp + 8 * 2]
  8344 000062A6 6A01                    	push 1
  8345 000062A8 E904B40000              	jmp L_error_incorrect_arity_simple
  8346                                  .L_lambda_simple_arity_check_ok_0038:
  8347 000062AD C8000000                	enter 0, 0
  8348 000062B1 BF11000000              	mov rdi, (1 + 8 + 8)
  8349 000062B6 E83DB40000              	call malloc
  8350 000062BB 50                      	push rax
  8351 000062BC BF08000000              	mov rdi, 8 * 1
  8352 000062C1 E832B40000              	call malloc
  8353 000062C6 50                      	push rax
  8354 000062C7 BF18000000              	mov rdi, 8 * 3
  8355 000062CC E827B40000              	call malloc
  8356 000062D1 488B7D10                	mov rdi, ENV
  8357 000062D5 4831F6                  	xor rsi, rsi
  8358 000062D8 4831D2                  	xor rdx, rdx
  8359 000062DB 48FFC2                  	inc rdx
  8360                                  	.L_lambda_opt_env_loop_000a:
  8361                                  
  8362 000062DE 4883FE02                        	cmp rsi, 2
  8363                                  
  8364 000062E2 7412                            	je .L_lambda_opt_env_end_000a
  8365 000062E4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8366 000062E8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8367 000062EC 4883C201                	add rdx, 1
  8368 000062F0 4883C601                	add rsi, 1
  8369 000062F4 EBE8                    	jmp .L_lambda_opt_env_loop_000a
  8370                                  
  8371                                          	.L_lambda_opt_env_end_000a:
  8372 000062F6 5B                      	pop rbx
  8373 000062F7 4831F6                  	xor rsi, rsi
  8374                                  	.L_lambda_opt_params_loop_000a:
  8375                                  
  8376 000062FA 4883FE01                        	cmp rsi, 1
  8377                                  
  8378 000062FE 740F                            	je .L_lambda_opt_params_end_000a
  8379 00006300 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8380 00006305 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8381 00006309 4883C601                	add rsi, 1
  8382 0000630D EBEB                    	jmp .L_lambda_opt_params_loop_000a
  8383                                  
  8384                                          	.L_lambda_opt_params_end_000a:
  8385 0000630F 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  8386 00006312 4889C3                  	mov rbx, rax
  8387 00006315 58                      	pop rax
  8388 00006316 C60005                  	mov byte [rax], T_closure
  8389 00006319 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8390 0000631D 48C74009[2A630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000a
  8391                                  
  8392 00006325 E992010000                      	jmp .L_lambda_opt_end_000a
  8393                                  
  8394                                          	.L_lambda_opt_code_000a:
  8395                                  
  8396 0000632A 48837C241000                    	cmp qword [rsp + 8 * 2], 0
  8397                                  
  8398 00006330 740D                            	je .L_lambda_opt_arity_check_exact_000a  ;same num_of_args
  8399                                  
  8400 00006332 7F65                            	jg .L_lambda_opt_arity_check_more_000a  ;greater num_of_args
  8401 00006334 FF742410                	push qword [rsp + 8 * 2]
  8402 00006338 6A00                    	push 0
  8403 0000633A E986B30000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  8404                                  .L_lambda_opt_arity_check_exact_000a:
  8405 0000633F 4883EC08                	sub rsp, 8 * 1
  8406 00006343 488D7F10                	lea rdi, [rdi + (8 * 2)]
  8407 00006347 4889E7                  	mov rdi, rsp 
  8408 0000634A 488B4708                	mov rax, qword [rdi + 8]
  8409 0000634E 488907                  	mov qword [rdi], rax
  8410 00006351 488D7F08                	lea rdi, [rdi + 8]
  8411 00006355 488B4708                	mov rax, qword [rdi + 8]
  8412 00006359 488907                  	mov qword [rdi], rax
  8413 0000635C 488D7F08                	lea rdi, [rdi + 8]
  8414 00006360 488B4708                	mov rax, qword [rdi + 8]
  8415 00006364 4889C1                  	mov rcx, rax
  8416 00006367 4883C001                	add rax, 1
  8417 0000636B 488907                  	mov qword [rdi], rax
  8418 0000636E 488D7F08                	lea rdi, [rdi + 8]
  8419                                  	.L_lambda_opt_stack_shrink_loop_001c:
  8420 00006372 4883F900                	cmp rcx, 0
  8421 00006376 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_001c
  8422 00006378 4883E901                	sub rcx, 1
  8423 0000637C 488D4010                	lea rax, [rax + (8 * 2)]
  8424 00006380 488B4708                	mov rax, qword [rdi + 8]
  8425 00006384 488907                  	mov qword [rdi], rax
  8426 00006387 488D7F08                	lea rdi, [rdi + 8]
  8427 0000638B EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_001c
  8428                                  
  8429                                          	.L_lambda_opt_stack_shrink_loop_exit_001c:
  8430 0000638D 48C707[01000000]        	mov qword [rdi], sob_nil
  8431 00006394 E996000000              	jmp .L_lambda_opt_stack_adjusted_000a
  8432                                  
  8433                                          	.L_lambda_opt_arity_check_more_000a:
  8434 00006399 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  8435 0000639E 488D0E                  	lea rcx, [rsi - 0]
  8436 000063A1 49B8-                   	mov r8, sob_nil
  8436 000063A3 [0100000000000000] 
  8437 000063AB 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  8438 000063B0 4889F2                  	mov rdx, rsi
  8439                                  	.L_lambda_opt_stack_shrink_loop_001d:
  8440 000063B3 4883F900                	cmp rcx, 0
  8441 000063B7 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_001d
  8442 000063B9 BF11000000              	mov rdi, 1 + (8 * 2)
  8443 000063BE E835B30000              	call malloc
  8444 000063C3 C60021                  	mov byte [rax], T_pair
  8445 000063C6 488B1E                  	mov rbx, qword [rsi]
  8446 000063C9 48895801                	mov SOB_PAIR_CAR(rax), rbx
  8447 000063CD 4C894009                	mov SOB_PAIR_CDR(rax), r8
  8448 000063D1 4883C6F8                	add rsi, -8
  8449 000063D5 4883E901                	sub rcx, 1
  8450 000063D9 4989C0                  	mov r8, rax
  8451 000063DC EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_001d
  8452                                  
  8453                                          	.L_lambda_opt_stack_shrink_loop_exit_001d:
  8454 000063DE 4C8902                  	mov qword [rdx], r8
  8455 000063E1 4883EA08                	sub rdx, 8 * 1
  8456 000063E5 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
  8457                                  
  8458 000063EA B900000000                      	mov rcx, 0 
  8459                                  
  8460                                          	.L_lambda_opt_stack_shrink_loop_001e:
  8461 000063EF 4883F900                	cmp rcx, 0
  8462 000063F3 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_001e
  8463 000063F5 488B06                  	mov rax, qword [rsi]
  8464 000063F8 488902                  	mov qword [rdx], rax
  8465 000063FB 488D76F8                	lea rsi, [rsi - 8]
  8466 000063FF 4883C2F8                	add rdx, -8
  8467 00006403 4883C1FF                	add rcx, -1
  8468 00006407 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_001e
  8469                                  
  8470                                          	.L_lambda_opt_stack_shrink_loop_exit_001e:
  8471                                  
  8472 00006409 48C70201000000                  	mov qword [rdx], 1 + 0
  8473 00006410 4883C6F8                	add rsi, -8
  8474 00006414 4883C2F8                	add rdx, -8
  8475 00006418 488B06                  	mov rax, qword [rsi]
  8476 0000641B 488902                  	mov qword [rdx], rax
  8477 0000641E 4883C2F8                	add rdx, -8
  8478 00006422 488D76F8                	lea rsi, [rsi - 8]
  8479 00006426 488B06                  	mov rax, qword [rsi]
  8480 00006429 488902                  	mov qword [rdx], rax
  8481 0000642C 4889D4                  	mov rsp, rdx
  8482                                  	.L_lambda_opt_stack_adjusted_000a:
  8483 0000642F C8000000                	enter 0, 0
  8484 00006433 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8485 00006437 50                      	push rax
  8486 00006438 48B8-                   	mov rax,L_constants + 32
  8486 0000643A [2000000000000000] 
  8487 00006442 50                      	push rax
  8488 00006443 488B4510                	mov rax, qword [rbp + 8 * 2]
  8489                                  
  8490 00006447 488B00                                            	mov rax, qword[rax + 8 * 0]
  8491                                  
  8492 0000644A 488B00                                            	mov rax, qword[rax + 8 * 0]
  8493 0000644D 50                      	push rax
  8494 0000644E 6A03                    	push 3
  8495 00006450 488B0425[F8020000]      	mov rax, qword [free_var_95]
  8496                                  .L_applic_TC_003d:
  8497 00006458 803805                  	cmp byte [rax], T_closure
  8498 0000645B 0F854CC20000            	jne L_code_ptr_error
  8499 00006461 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8500 00006465 53                      	push rbx
  8501 00006466 FF7508                  	push qword [rbp + 8]
  8502 00006469 FF7500                  	push qword [rbp]
  8503 0000646C 488B4D18                	mov rcx, [rbp + 3 * 8]
  8504 00006470 488B542418              	mov rdx, [rsp + 3 * 8]
  8505 00006475 488D7204                	lea rsi, [rdx + 4]
  8506 00006479 4C8D4EFF                	lea r9, [rsi - 1]
  8507 0000647D 488D7903                	lea rdi, [rcx + 3]
  8508 00006481 4D31C0                  	xor r8, r8
  8509                                  .L_tc_recycle_frame_loop_003d:
  8510 00006484 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8511 00006488 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8512 0000648D 49FFC9                  	dec r9
  8513 00006490 4D31C0                  	xor r8, r8
  8514 00006493 48FFCF                  	dec rdi
  8515 00006496 48FFCE                  	dec rsi
  8516 00006499 4883FE00                	cmp rsi, 0
  8517 0000649D 75E5                    	jne .L_tc_recycle_frame_loop_003d
  8518                                  .L_tc_recycle_frame_done_003d:
  8519                                  ;this pop rbp in sot to the right place
  8520 0000649F 4989C9                  	mov r9, rcx
  8521 000064A2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8522 000064AA 4C01CC                  	add rsp, r9
  8523 000064AD 5D                      	pop rbp
  8524 000064AE 488B4D00                	mov rcx, qword [rbp]
  8525 000064B2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8526 000064B6 FFE3                    	jmp rbx
  8527 000064B8 C9                      	leave
  8528 000064B9 C21800                  	ret 8 * (2 + 1)
  8529                                  .L_lambda_opt_end_000a:	; new closure is in rax
  8530 000064BC C9                      	leave
  8531 000064BD C21800                  	ret 8 * (2 + 1)
  8532                                  .L_lambda_simple_end_0038:	; new closure is in rax
  8533                                  .L_applic_TC_003e:
  8534 000064C0 803805                  	cmp byte [rax], T_closure
  8535 000064C3 0F85E4C10000            	jne L_code_ptr_error
  8536 000064C9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8537 000064CD 53                      	push rbx
  8538 000064CE FF7508                  	push qword [rbp + 8]
  8539 000064D1 FF7500                  	push qword [rbp]
  8540 000064D4 488B4D18                	mov rcx, [rbp + 3 * 8]
  8541 000064D8 488B542418              	mov rdx, [rsp + 3 * 8]
  8542 000064DD 488D7204                	lea rsi, [rdx + 4]
  8543 000064E1 4C8D4EFF                	lea r9, [rsi - 1]
  8544 000064E5 488D7903                	lea rdi, [rcx + 3]
  8545 000064E9 4D31C0                  	xor r8, r8
  8546                                  .L_tc_recycle_frame_loop_003e:
  8547 000064EC 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8548 000064F0 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8549 000064F5 49FFC9                  	dec r9
  8550 000064F8 4D31C0                  	xor r8, r8
  8551 000064FB 48FFCF                  	dec rdi
  8552 000064FE 48FFCE                  	dec rsi
  8553 00006501 4883FE00                	cmp rsi, 0
  8554 00006505 75E5                    	jne .L_tc_recycle_frame_loop_003e
  8555                                  .L_tc_recycle_frame_done_003e:
  8556                                  ;this pop rbp in sot to the right place
  8557 00006507 4989C9                  	mov r9, rcx
  8558 0000650A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8559 00006512 4C01CC                  	add rsp, r9
  8560 00006515 5D                      	pop rbp
  8561 00006516 488B4D00                	mov rcx, qword [rbp]
  8562 0000651A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8563 0000651E FFE3                    	jmp rbx
  8564 00006520 C9                      	leave
  8565 00006521 C21800                  	ret 8 * (2 + 1)
  8566                                  .L_lambda_simple_end_0036:	; new closure is in rax
  8567                                  	assert_closure(rax)
    42 00006524 803805              <1>  cmp byte [%1], %2
    43 00006527 0F85BFC90000        <1>  jne L_error_incorrect_type
  8568 0000652D FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8569 00006530 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8570 00006533 48890425[08030000]      	mov qword [free_var_97], rax
  8571 0000653B 48B8-                   	mov rax, sob_void
  8571 0000653D [0000000000000000] 
  8572                                  
  8573 00006545 4889C7                  	mov rdi, rax
  8574 00006548 E8BCB10000              	call print_sexpr_if_not_void
  8575                                  
  8576 0000654D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8577 00006552 E8A1B10000              	call malloc
  8578 00006557 50                      	push rax
  8579 00006558 BF00000000              	mov rdi, 8 * 0	; new rib
  8580 0000655D E896B10000              	call malloc
  8581 00006562 50                      	push rax
  8582 00006563 BF08000000              	mov rdi, 8 * 1	; extended env
  8583 00006568 E88BB10000              	call malloc
  8584 0000656D 488B7D10                	mov rdi, ENV
  8585 00006571 BE00000000              	mov rsi, 0
  8586 00006576 BA01000000              	mov rdx, 1
  8587                                  .L_lambda_simple_env_loop_0039:	; ext_env[i + 1] <-- env[i]
  8588 0000657B 4883FE00                	cmp rsi, 0
  8589 0000657F 7410                    	je .L_lambda_simple_env_end_0039
  8590 00006581 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8591 00006585 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8592 00006589 48FFC6                  	inc rsi
  8593 0000658C 48FFC2                  	inc rdx
  8594 0000658F EBEA                    	jmp .L_lambda_simple_env_loop_0039
  8595                                  .L_lambda_simple_env_end_0039:
  8596 00006591 5B                      	pop rbx
  8597 00006592 BE00000000              	mov rsi, 0
  8598                                  .L_lambda_simple_params_loop_0039:	; copy params
  8599 00006597 4883FE00                	cmp rsi, 0
  8600 0000659B 740E                    	je .L_lambda_simple_params_end_0039
  8601 0000659D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8602 000065A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8603 000065A6 48FFC6                  	inc rsi
  8604 000065A9 EBEC                    	jmp .L_lambda_simple_params_loop_0039
  8605                                  .L_lambda_simple_params_end_0039:
  8606 000065AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8607 000065AE 4889C3                  	mov rbx, rax
  8608 000065B1 58                      	pop rax
  8609 000065B2 C60005                  	mov byte [rax], T_closure
  8610 000065B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8611 000065B9 48C74009[C6650000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0039
  8612 000065C1 E99B000000              	jmp .L_lambda_simple_end_0039
  8613                                  .L_lambda_simple_code_0039:	; lambda-simple body
  8614 000065C6 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8615 000065CC 740B                    	je .L_lambda_simple_arity_check_ok_0039
  8616 000065CE FF742410                	push qword [rsp + 8 * 2]
  8617 000065D2 6A00                    	push 0
  8618 000065D4 E9D8B00000              	jmp L_error_incorrect_arity_simple
  8619                                  .L_lambda_simple_arity_check_ok_0039:
  8620 000065D9 C8000000                	enter 0, 0
  8621 000065DD 48B8-                   	mov rax,L_constants + 68
  8621 000065DF [4400000000000000] 
  8622 000065E7 50                      	push rax
  8623 000065E8 48B8-                   	mov rax,L_constants + 119
  8623 000065EA [7700000000000000] 
  8624 000065F2 50                      	push rax
  8625 000065F3 6A02                    	push 2
  8626 000065F5 488B0425[30010000]      	mov rax, qword [free_var_38]
  8627                                  .L_applic_TC_003f:
  8628 000065FD 803805                  	cmp byte [rax], T_closure
  8629 00006600 0F85A7C00000            	jne L_code_ptr_error
  8630 00006606 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8631 0000660A 53                      	push rbx
  8632 0000660B FF7508                  	push qword [rbp + 8]
  8633 0000660E FF7500                  	push qword [rbp]
  8634 00006611 488B4D18                	mov rcx, [rbp + 3 * 8]
  8635 00006615 488B542418              	mov rdx, [rsp + 3 * 8]
  8636 0000661A 488D7204                	lea rsi, [rdx + 4]
  8637 0000661E 4C8D4EFF                	lea r9, [rsi - 1]
  8638 00006622 488D7903                	lea rdi, [rcx + 3]
  8639 00006626 4D31C0                  	xor r8, r8
  8640                                  .L_tc_recycle_frame_loop_003f:
  8641 00006629 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8642 0000662D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8643 00006632 49FFC9                  	dec r9
  8644 00006635 4D31C0                  	xor r8, r8
  8645 00006638 48FFCF                  	dec rdi
  8646 0000663B 48FFCE                  	dec rsi
  8647 0000663E 4883FE00                	cmp rsi, 0
  8648 00006642 75E5                    	jne .L_tc_recycle_frame_loop_003f
  8649                                  .L_tc_recycle_frame_done_003f:
  8650                                  ;this pop rbp in sot to the right place
  8651 00006644 4989C9                  	mov r9, rcx
  8652 00006647 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8653 0000664F 4C01CC                  	add rsp, r9
  8654 00006652 5D                      	pop rbp
  8655 00006653 488B4D00                	mov rcx, qword [rbp]
  8656 00006657 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8657 0000665B FFE3                    	jmp rbx
  8658 0000665D C9                      	leave
  8659 0000665E C21000                  	ret 8 * (2 + 0)
  8660                                  .L_lambda_simple_end_0039:	; new closure is in rax
  8661 00006661 50                      	push rax
  8662 00006662 6A01                    	push 1
  8663 00006664 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8664 00006669 E88AB00000              	call malloc
  8665 0000666E 50                      	push rax
  8666 0000666F BF00000000              	mov rdi, 8 * 0	; new rib
  8667 00006674 E87FB00000              	call malloc
  8668 00006679 50                      	push rax
  8669 0000667A BF08000000              	mov rdi, 8 * 1	; extended env
  8670 0000667F E874B00000              	call malloc
  8671 00006684 488B7D10                	mov rdi, ENV
  8672 00006688 BE00000000              	mov rsi, 0
  8673 0000668D BA01000000              	mov rdx, 1
  8674                                  .L_lambda_simple_env_loop_003a:	; ext_env[i + 1] <-- env[i]
  8675 00006692 4883FE00                	cmp rsi, 0
  8676 00006696 7410                    	je .L_lambda_simple_env_end_003a
  8677 00006698 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8678 0000669C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8679 000066A0 48FFC6                  	inc rsi
  8680 000066A3 48FFC2                  	inc rdx
  8681 000066A6 EBEA                    	jmp .L_lambda_simple_env_loop_003a
  8682                                  .L_lambda_simple_env_end_003a:
  8683 000066A8 5B                      	pop rbx
  8684 000066A9 BE00000000              	mov rsi, 0
  8685                                  .L_lambda_simple_params_loop_003a:	; copy params
  8686 000066AE 4883FE00                	cmp rsi, 0
  8687 000066B2 740E                    	je .L_lambda_simple_params_end_003a
  8688 000066B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8689 000066B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8690 000066BD 48FFC6                  	inc rsi
  8691 000066C0 EBEC                    	jmp .L_lambda_simple_params_loop_003a
  8692                                  .L_lambda_simple_params_end_003a:
  8693 000066C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8694 000066C5 4889C3                  	mov rbx, rax
  8695 000066C8 58                      	pop rax
  8696 000066C9 C60005                  	mov byte [rax], T_closure
  8697 000066CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8698 000066D0 48C74009[DD660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003a
  8699 000066D8 E9CF090000              	jmp .L_lambda_simple_end_003a
  8700                                  .L_lambda_simple_code_003a:	; lambda-simple body
  8701 000066DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8702 000066E3 740B                    	je .L_lambda_simple_arity_check_ok_003a
  8703 000066E5 FF742410                	push qword [rsp + 8 * 2]
  8704 000066E9 6A01                    	push 1
  8705 000066EB E9C1AF0000              	jmp L_error_incorrect_arity_simple
  8706                                  .L_lambda_simple_arity_check_ok_003a:
  8707 000066F0 C8000000                	enter 0, 0
  8708 000066F4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8709 000066F9 E8FAAF0000              	call malloc
  8710 000066FE 50                      	push rax
  8711 000066FF BF08000000              	mov rdi, 8 * 1	; new rib
  8712 00006704 E8EFAF0000              	call malloc
  8713 00006709 50                      	push rax
  8714 0000670A BF10000000              	mov rdi, 8 * 2	; extended env
  8715 0000670F E8E4AF0000              	call malloc
  8716 00006714 488B7D10                	mov rdi, ENV
  8717 00006718 BE00000000              	mov rsi, 0
  8718 0000671D BA01000000              	mov rdx, 1
  8719                                  .L_lambda_simple_env_loop_003b:	; ext_env[i + 1] <-- env[i]
  8720 00006722 4883FE01                	cmp rsi, 1
  8721 00006726 7410                    	je .L_lambda_simple_env_end_003b
  8722 00006728 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8723 0000672C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8724 00006730 48FFC6                  	inc rsi
  8725 00006733 48FFC2                  	inc rdx
  8726 00006736 EBEA                    	jmp .L_lambda_simple_env_loop_003b
  8727                                  .L_lambda_simple_env_end_003b:
  8728 00006738 5B                      	pop rbx
  8729 00006739 BE00000000              	mov rsi, 0
  8730                                  .L_lambda_simple_params_loop_003b:	; copy params
  8731 0000673E 4883FE01                	cmp rsi, 1
  8732 00006742 740E                    	je .L_lambda_simple_params_end_003b
  8733 00006744 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8734 00006749 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8735 0000674D 48FFC6                  	inc rsi
  8736 00006750 EBEC                    	jmp .L_lambda_simple_params_loop_003b
  8737                                  .L_lambda_simple_params_end_003b:
  8738 00006752 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8739 00006755 4889C3                  	mov rbx, rax
  8740 00006758 58                      	pop rax
  8741 00006759 C60005                  	mov byte [rax], T_closure
  8742 0000675C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8743 00006760 48C74009[6D670000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003b
  8744 00006768 E96C040000              	jmp .L_lambda_simple_end_003b
  8745                                  .L_lambda_simple_code_003b:	; lambda-simple body
  8746 0000676D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8747 00006773 740B                    	je .L_lambda_simple_arity_check_ok_003b
  8748 00006775 FF742410                	push qword [rsp + 8 * 2]
  8749 00006779 6A02                    	push 2
  8750 0000677B E931AF0000              	jmp L_error_incorrect_arity_simple
  8751                                  .L_lambda_simple_arity_check_ok_003b:
  8752 00006780 C8000000                	enter 0, 0
  8753 00006784 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8754 00006788 50                      	push rax
  8755 00006789 6A01                    	push 1
  8756 0000678B 488B0425[48000000]      	mov rax, qword [free_var_9]
  8757                                  	assert_closure(rax)
    42 00006793 803805              <1>  cmp byte [%1], %2
    43 00006796 0F8550C70000        <1>  jne L_error_incorrect_type
  8758 0000679C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8759 0000679F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8760                                  
  8761 000067A2 483D[02000000]                  	cmp rax, sob_boolean_false
  8762                                  
  8763 000067A8 0F84CA010000                    	je .L_if_else_0017
  8764 000067AE 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8765 000067B2 50                      	push rax
  8766 000067B3 6A01                    	push 1
  8767 000067B5 488B0425[48000000]      	mov rax, qword [free_var_9]
  8768                                  	assert_closure(rax)
    42 000067BD 803805              <1>  cmp byte [%1], %2
    43 000067C0 0F8526C70000        <1>  jne L_error_incorrect_type
  8769 000067C6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8770 000067C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8771                                  
  8772 000067CC 483D[02000000]                  	cmp rax, sob_boolean_false
  8773                                  
  8774 000067D2 7479                            	je .L_if_else_001b
  8775 000067D4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8776 000067D8 50                      	push rax
  8777 000067D9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8778 000067DD 50                      	push rax
  8779 000067DE 6A02                    	push 2
  8780 000067E0 488B0425[18010000]      	mov rax, qword [free_var_35]
  8781                                  .L_applic_TC_0046:
  8782 000067E8 803805                  	cmp byte [rax], T_closure
  8783 000067EB 0F85BCBE0000            	jne L_code_ptr_error
  8784 000067F1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8785 000067F5 53                      	push rbx
  8786 000067F6 FF7508                  	push qword [rbp + 8]
  8787 000067F9 FF7500                  	push qword [rbp]
  8788 000067FC 488B4D18                	mov rcx, [rbp + 3 * 8]
  8789 00006800 488B542418              	mov rdx, [rsp + 3 * 8]
  8790 00006805 488D7204                	lea rsi, [rdx + 4]
  8791 00006809 4C8D4EFF                	lea r9, [rsi - 1]
  8792 0000680D 488D7903                	lea rdi, [rcx + 3]
  8793 00006811 4D31C0                  	xor r8, r8
  8794                                  .L_tc_recycle_frame_loop_0046:
  8795 00006814 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8796 00006818 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8797 0000681D 49FFC9                  	dec r9
  8798 00006820 4D31C0                  	xor r8, r8
  8799 00006823 48FFCF                  	dec rdi
  8800 00006826 48FFCE                  	dec rsi
  8801 00006829 4883FE00                	cmp rsi, 0
  8802 0000682D 75E5                    	jne .L_tc_recycle_frame_loop_0046
  8803                                  .L_tc_recycle_frame_done_0046:
  8804                                  ;this pop rbp in sot to the right place
  8805 0000682F 4989C9                  	mov r9, rcx
  8806 00006832 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8807 0000683A 4C01CC                  	add rsp, r9
  8808 0000683D 5D                      	pop rbp
  8809 0000683E 488B4D00                	mov rcx, qword [rbp]
  8810 00006842 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8811 00006846 FFE3                    	jmp rbx
  8812                                  
  8813 00006848 E926010000                      	jmp .L_if_end_001b
  8814                                  
  8815                                          	.L_if_else_001b:
  8816 0000684D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8817 00006851 50                      	push rax
  8818 00006852 6A01                    	push 1
  8819 00006854 488B0425[40000000]      	mov rax, qword [free_var_8]
  8820                                  	assert_closure(rax)
    42 0000685C 803805              <1>  cmp byte [%1], %2
    43 0000685F 0F8587C60000        <1>  jne L_error_incorrect_type
  8821 00006865 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8822 00006868 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8823                                  
  8824 0000686B 483D[02000000]                  	cmp rax, sob_boolean_false
  8825                                  
  8826 00006871 0F8490000000                    	je .L_if_else_001c
  8827 00006877 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8828 0000687B 50                      	push rax
  8829 0000687C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8830 00006880 50                      	push rax
  8831 00006881 6A01                    	push 1
  8832 00006883 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8833                                  	assert_closure(rax)
    42 0000688B 803805              <1>  cmp byte [%1], %2
    43 0000688E 0F8558C60000        <1>  jne L_error_incorrect_type
  8834 00006894 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8835 00006897 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8836 0000689A 50                      	push rax
  8837 0000689B 6A02                    	push 2
  8838 0000689D 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8839                                  .L_applic_TC_0045:
  8840 000068A5 803805                  	cmp byte [rax], T_closure
  8841 000068A8 0F85FFBD0000            	jne L_code_ptr_error
  8842 000068AE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8843 000068B2 53                      	push rbx
  8844 000068B3 FF7508                  	push qword [rbp + 8]
  8845 000068B6 FF7500                  	push qword [rbp]
  8846 000068B9 488B4D18                	mov rcx, [rbp + 3 * 8]
  8847 000068BD 488B542418              	mov rdx, [rsp + 3 * 8]
  8848 000068C2 488D7204                	lea rsi, [rdx + 4]
  8849 000068C6 4C8D4EFF                	lea r9, [rsi - 1]
  8850 000068CA 488D7903                	lea rdi, [rcx + 3]
  8851 000068CE 4D31C0                  	xor r8, r8
  8852                                  .L_tc_recycle_frame_loop_0045:
  8853 000068D1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8854 000068D5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8855 000068DA 49FFC9                  	dec r9
  8856 000068DD 4D31C0                  	xor r8, r8
  8857 000068E0 48FFCF                  	dec rdi
  8858 000068E3 48FFCE                  	dec rsi
  8859 000068E6 4883FE00                	cmp rsi, 0
  8860 000068EA 75E5                    	jne .L_tc_recycle_frame_loop_0045
  8861                                  .L_tc_recycle_frame_done_0045:
  8862                                  ;this pop rbp in sot to the right place
  8863 000068EC 4989C9                  	mov r9, rcx
  8864 000068EF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8865 000068F7 4C01CC                  	add rsp, r9
  8866 000068FA 5D                      	pop rbp
  8867 000068FB 488B4D00                	mov rcx, qword [rbp]
  8868 000068FF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8869 00006903 FFE3                    	jmp rbx
  8870                                  
  8871 00006905 EB6C                            	jmp .L_if_end_001c
  8872                                  
  8873                                          	.L_if_else_001c:
  8874 00006907 6A00                    	push 0
  8875 00006909 488B4510                	mov rax, qword [rbp + 8 * 2]
  8876                                  
  8877 0000690D 488B00                                            	mov rax, qword[rax + 8 * 0]
  8878                                  
  8879 00006910 488B00                                            	mov rax, qword[rax + 8 * 0]
  8880                                  .L_applic_TC_0044:
  8881 00006913 803805                  	cmp byte [rax], T_closure
  8882 00006916 0F8591BD0000            	jne L_code_ptr_error
  8883 0000691C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8884 00006920 53                      	push rbx
  8885 00006921 FF7508                  	push qword [rbp + 8]
  8886 00006924 FF7500                  	push qword [rbp]
  8887 00006927 488B4D18                	mov rcx, [rbp + 3 * 8]
  8888 0000692B 488B542418              	mov rdx, [rsp + 3 * 8]
  8889 00006930 488D7204                	lea rsi, [rdx + 4]
  8890 00006934 4C8D4EFF                	lea r9, [rsi - 1]
  8891 00006938 488D7903                	lea rdi, [rcx + 3]
  8892 0000693C 4D31C0                  	xor r8, r8
  8893                                  .L_tc_recycle_frame_loop_0044:
  8894 0000693F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8895 00006943 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8896 00006948 49FFC9                  	dec r9
  8897 0000694B 4D31C0                  	xor r8, r8
  8898 0000694E 48FFCF                  	dec rdi
  8899 00006951 48FFCE                  	dec rsi
  8900 00006954 4883FE00                	cmp rsi, 0
  8901 00006958 75E5                    	jne .L_tc_recycle_frame_loop_0044
  8902                                  .L_tc_recycle_frame_done_0044:
  8903                                  ;this pop rbp in sot to the right place
  8904 0000695A 4989C9                  	mov r9, rcx
  8905 0000695D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8906 00006965 4C01CC                  	add rsp, r9
  8907 00006968 5D                      	pop rbp
  8908 00006969 488B4D00                	mov rcx, qword [rbp]
  8909 0000696D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8910 00006971 FFE3                    	jmp rbx
  8911                                  
  8912                                          	.L_if_end_001c:
  8913                                  
  8914                                          	.L_if_end_001b:
  8915                                  
  8916 00006973 E95D020000                      	jmp .L_if_end_0017
  8917                                  
  8918                                          	.L_if_else_0017:
  8919 00006978 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8920 0000697C 50                      	push rax
  8921 0000697D 6A01                    	push 1
  8922 0000697F 488B0425[40000000]      	mov rax, qword [free_var_8]
  8923                                  	assert_closure(rax)
    42 00006987 803805              <1>  cmp byte [%1], %2
    43 0000698A 0F855CC50000        <1>  jne L_error_incorrect_type
  8924 00006990 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8925 00006993 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8926                                  
  8927 00006996 483D[02000000]                  	cmp rax, sob_boolean_false
  8928                                  
  8929 0000699C 0F84C7010000                    	je .L_if_else_0018
  8930 000069A2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8931 000069A6 50                      	push rax
  8932 000069A7 6A01                    	push 1
  8933 000069A9 488B0425[48000000]      	mov rax, qword [free_var_9]
  8934                                  	assert_closure(rax)
    42 000069B1 803805              <1>  cmp byte [%1], %2
    43 000069B4 0F8532C50000        <1>  jne L_error_incorrect_type
  8935 000069BA FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8936 000069BD FF5009                  	call SOB_CLOSURE_CODE(rax)
  8937                                  
  8938 000069C0 483D[02000000]                  	cmp rax, sob_boolean_false
  8939                                  
  8940 000069C6 0F8493000000                    	je .L_if_else_0019
  8941 000069CC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8942 000069D0 50                      	push rax
  8943 000069D1 6A01                    	push 1
  8944 000069D3 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8945                                  	assert_closure(rax)
    42 000069DB 803805              <1>  cmp byte [%1], %2
    43 000069DE 0F8508C50000        <1>  jne L_error_incorrect_type
  8946 000069E4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8947 000069E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8948 000069EA 50                      	push rax
  8949 000069EB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  8950 000069EF 50                      	push rax
  8951 000069F0 6A02                    	push 2
  8952 000069F2 488B0425[F8000000]      	mov rax, qword [free_var_31]
  8953                                  .L_applic_TC_0043:
  8954 000069FA 803805                  	cmp byte [rax], T_closure
  8955 000069FD 0F85AABC0000            	jne L_code_ptr_error
  8956 00006A03 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  8957 00006A07 53                      	push rbx
  8958 00006A08 FF7508                  	push qword [rbp + 8]
  8959 00006A0B FF7500                  	push qword [rbp]
  8960 00006A0E 488B4D18                	mov rcx, [rbp + 3 * 8]
  8961 00006A12 488B542418              	mov rdx, [rsp + 3 * 8]
  8962 00006A17 488D7204                	lea rsi, [rdx + 4]
  8963 00006A1B 4C8D4EFF                	lea r9, [rsi - 1]
  8964 00006A1F 488D7903                	lea rdi, [rcx + 3]
  8965 00006A23 4D31C0                  	xor r8, r8
  8966                                  .L_tc_recycle_frame_loop_0043:
  8967 00006A26 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  8968 00006A2A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  8969 00006A2F 49FFC9                  	dec r9
  8970 00006A32 4D31C0                  	xor r8, r8
  8971 00006A35 48FFCF                  	dec rdi
  8972 00006A38 48FFCE                  	dec rsi
  8973 00006A3B 4883FE00                	cmp rsi, 0
  8974 00006A3F 75E5                    	jne .L_tc_recycle_frame_loop_0043
  8975                                  .L_tc_recycle_frame_done_0043:
  8976                                  ;this pop rbp in sot to the right place
  8977 00006A41 4989C9                  	mov r9, rcx
  8978 00006A44 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  8979 00006A4C 4C01CC                  	add rsp, r9
  8980 00006A4F 5D                      	pop rbp
  8981 00006A50 488B4D00                	mov rcx, qword [rbp]
  8982 00006A54 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  8983 00006A58 FFE3                    	jmp rbx
  8984                                  
  8985 00006A5A E908010000                      	jmp .L_if_end_0019
  8986                                  
  8987                                          	.L_if_else_0019:
  8988 00006A5F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  8989 00006A63 50                      	push rax
  8990 00006A64 6A01                    	push 1
  8991 00006A66 488B0425[40000000]      	mov rax, qword [free_var_8]
  8992                                  	assert_closure(rax)
    42 00006A6E 803805              <1>  cmp byte [%1], %2
    43 00006A71 0F8575C40000        <1>  jne L_error_incorrect_type
  8993 00006A77 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  8994 00006A7A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8995                                  
  8996 00006A7D 483D[02000000]                  	cmp rax, sob_boolean_false
  8997                                  
  8998 00006A83 7476                            	je .L_if_else_001a
  8999 00006A85 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9000 00006A89 50                      	push rax
  9001 00006A8A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9002 00006A8E 50                      	push rax
  9003 00006A8F 6A02                    	push 2
  9004 00006A91 488B0425[F8000000]      	mov rax, qword [free_var_31]
  9005                                  .L_applic_TC_0042:
  9006 00006A99 803805                  	cmp byte [rax], T_closure
  9007 00006A9C 0F850BBC0000            	jne L_code_ptr_error
  9008 00006AA2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9009 00006AA6 53                      	push rbx
  9010 00006AA7 FF7508                  	push qword [rbp + 8]
  9011 00006AAA FF7500                  	push qword [rbp]
  9012 00006AAD 488B4D18                	mov rcx, [rbp + 3 * 8]
  9013 00006AB1 488B542418              	mov rdx, [rsp + 3 * 8]
  9014 00006AB6 488D7204                	lea rsi, [rdx + 4]
  9015 00006ABA 4C8D4EFF                	lea r9, [rsi - 1]
  9016 00006ABE 488D7903                	lea rdi, [rcx + 3]
  9017 00006AC2 4D31C0                  	xor r8, r8
  9018                                  .L_tc_recycle_frame_loop_0042:
  9019 00006AC5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9020 00006AC9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9021 00006ACE 49FFC9                  	dec r9
  9022 00006AD1 4D31C0                  	xor r8, r8
  9023 00006AD4 48FFCF                  	dec rdi
  9024 00006AD7 48FFCE                  	dec rsi
  9025 00006ADA 4883FE00                	cmp rsi, 0
  9026 00006ADE 75E5                    	jne .L_tc_recycle_frame_loop_0042
  9027                                  .L_tc_recycle_frame_done_0042:
  9028                                  ;this pop rbp in sot to the right place
  9029 00006AE0 4989C9                  	mov r9, rcx
  9030 00006AE3 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9031 00006AEB 4C01CC                  	add rsp, r9
  9032 00006AEE 5D                      	pop rbp
  9033 00006AEF 488B4D00                	mov rcx, qword [rbp]
  9034 00006AF3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9035 00006AF7 FFE3                    	jmp rbx
  9036                                  
  9037 00006AF9 EB6C                            	jmp .L_if_end_001a
  9038                                  
  9039                                          	.L_if_else_001a:
  9040 00006AFB 6A00                    	push 0
  9041 00006AFD 488B4510                	mov rax, qword [rbp + 8 * 2]
  9042                                  
  9043 00006B01 488B00                                            	mov rax, qword[rax + 8 * 0]
  9044                                  
  9045 00006B04 488B00                                            	mov rax, qword[rax + 8 * 0]
  9046                                  .L_applic_TC_0041:
  9047 00006B07 803805                  	cmp byte [rax], T_closure
  9048 00006B0A 0F859DBB0000            	jne L_code_ptr_error
  9049 00006B10 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9050 00006B14 53                      	push rbx
  9051 00006B15 FF7508                  	push qword [rbp + 8]
  9052 00006B18 FF7500                  	push qword [rbp]
  9053 00006B1B 488B4D18                	mov rcx, [rbp + 3 * 8]
  9054 00006B1F 488B542418              	mov rdx, [rsp + 3 * 8]
  9055 00006B24 488D7204                	lea rsi, [rdx + 4]
  9056 00006B28 4C8D4EFF                	lea r9, [rsi - 1]
  9057 00006B2C 488D7903                	lea rdi, [rcx + 3]
  9058 00006B30 4D31C0                  	xor r8, r8
  9059                                  .L_tc_recycle_frame_loop_0041:
  9060 00006B33 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9061 00006B37 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9062 00006B3C 49FFC9                  	dec r9
  9063 00006B3F 4D31C0                  	xor r8, r8
  9064 00006B42 48FFCF                  	dec rdi
  9065 00006B45 48FFCE                  	dec rsi
  9066 00006B48 4883FE00                	cmp rsi, 0
  9067 00006B4C 75E5                    	jne .L_tc_recycle_frame_loop_0041
  9068                                  .L_tc_recycle_frame_done_0041:
  9069                                  ;this pop rbp in sot to the right place
  9070 00006B4E 4989C9                  	mov r9, rcx
  9071 00006B51 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9072 00006B59 4C01CC                  	add rsp, r9
  9073 00006B5C 5D                      	pop rbp
  9074 00006B5D 488B4D00                	mov rcx, qword [rbp]
  9075 00006B61 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9076 00006B65 FFE3                    	jmp rbx
  9077                                  
  9078                                          	.L_if_end_001a:
  9079                                  
  9080                                          	.L_if_end_0019:
  9081                                  
  9082 00006B67 EB6C                            	jmp .L_if_end_0018
  9083                                  
  9084                                          	.L_if_else_0018:
  9085 00006B69 6A00                    	push 0
  9086 00006B6B 488B4510                	mov rax, qword [rbp + 8 * 2]
  9087                                  
  9088 00006B6F 488B00                                            	mov rax, qword[rax + 8 * 0]
  9089                                  
  9090 00006B72 488B00                                            	mov rax, qword[rax + 8 * 0]
  9091                                  .L_applic_TC_0040:
  9092 00006B75 803805                  	cmp byte [rax], T_closure
  9093 00006B78 0F852FBB0000            	jne L_code_ptr_error
  9094 00006B7E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9095 00006B82 53                      	push rbx
  9096 00006B83 FF7508                  	push qword [rbp + 8]
  9097 00006B86 FF7500                  	push qword [rbp]
  9098 00006B89 488B4D18                	mov rcx, [rbp + 3 * 8]
  9099 00006B8D 488B542418              	mov rdx, [rsp + 3 * 8]
  9100 00006B92 488D7204                	lea rsi, [rdx + 4]
  9101 00006B96 4C8D4EFF                	lea r9, [rsi - 1]
  9102 00006B9A 488D7903                	lea rdi, [rcx + 3]
  9103 00006B9E 4D31C0                  	xor r8, r8
  9104                                  .L_tc_recycle_frame_loop_0040:
  9105 00006BA1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9106 00006BA5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9107 00006BAA 49FFC9                  	dec r9
  9108 00006BAD 4D31C0                  	xor r8, r8
  9109 00006BB0 48FFCF                  	dec rdi
  9110 00006BB3 48FFCE                  	dec rsi
  9111 00006BB6 4883FE00                	cmp rsi, 0
  9112 00006BBA 75E5                    	jne .L_tc_recycle_frame_loop_0040
  9113                                  .L_tc_recycle_frame_done_0040:
  9114                                  ;this pop rbp in sot to the right place
  9115 00006BBC 4989C9                  	mov r9, rcx
  9116 00006BBF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9117 00006BC7 4C01CC                  	add rsp, r9
  9118 00006BCA 5D                      	pop rbp
  9119 00006BCB 488B4D00                	mov rcx, qword [rbp]
  9120 00006BCF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9121 00006BD3 FFE3                    	jmp rbx
  9122                                  
  9123                                          	.L_if_end_0018:
  9124                                  
  9125                                          	.L_if_end_0017:
  9126 00006BD5 C9                      	leave
  9127 00006BD6 C22000                  	ret 8 * (2 + 2)
  9128                                  .L_lambda_simple_end_003b:	; new closure is in rax
  9129 00006BD9 50                      	push rax
  9130 00006BDA 6A01                    	push 1
  9131 00006BDC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9132 00006BE1 E812AB0000              	call malloc
  9133 00006BE6 50                      	push rax
  9134 00006BE7 BF08000000              	mov rdi, 8 * 1	; new rib
  9135 00006BEC E807AB0000              	call malloc
  9136 00006BF1 50                      	push rax
  9137 00006BF2 BF10000000              	mov rdi, 8 * 2	; extended env
  9138 00006BF7 E8FCAA0000              	call malloc
  9139 00006BFC 488B7D10                	mov rdi, ENV
  9140 00006C00 BE00000000              	mov rsi, 0
  9141 00006C05 BA01000000              	mov rdx, 1
  9142                                  .L_lambda_simple_env_loop_003c:	; ext_env[i + 1] <-- env[i]
  9143 00006C0A 4883FE01                	cmp rsi, 1
  9144 00006C0E 7410                    	je .L_lambda_simple_env_end_003c
  9145 00006C10 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9146 00006C14 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9147 00006C18 48FFC6                  	inc rsi
  9148 00006C1B 48FFC2                  	inc rdx
  9149 00006C1E EBEA                    	jmp .L_lambda_simple_env_loop_003c
  9150                                  .L_lambda_simple_env_end_003c:
  9151 00006C20 5B                      	pop rbx
  9152 00006C21 BE00000000              	mov rsi, 0
  9153                                  .L_lambda_simple_params_loop_003c:	; copy params
  9154 00006C26 4883FE01                	cmp rsi, 1
  9155 00006C2A 740E                    	je .L_lambda_simple_params_end_003c
  9156 00006C2C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9157 00006C31 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9158 00006C35 48FFC6                  	inc rsi
  9159 00006C38 EBEC                    	jmp .L_lambda_simple_params_loop_003c
  9160                                  .L_lambda_simple_params_end_003c:
  9161 00006C3A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9162 00006C3D 4889C3                  	mov rbx, rax
  9163 00006C40 58                      	pop rax
  9164 00006C41 C60005                  	mov byte [rax], T_closure
  9165 00006C44 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9166 00006C48 48C74009[556C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003c
  9167 00006C50 E9F3030000              	jmp .L_lambda_simple_end_003c
  9168                                  .L_lambda_simple_code_003c:	; lambda-simple body
  9169 00006C55 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9170 00006C5B 740B                    	je .L_lambda_simple_arity_check_ok_003c
  9171 00006C5D FF742410                	push qword [rsp + 8 * 2]
  9172 00006C61 6A01                    	push 1
  9173 00006C63 E949AA0000              	jmp L_error_incorrect_arity_simple
  9174                                  .L_lambda_simple_arity_check_ok_003c:
  9175 00006C68 C8000000                	enter 0, 0
  9176 00006C6C BF11000000              	mov rdi, (1 + 8 + 8)
  9177 00006C71 E882AA0000              	call malloc
  9178 00006C76 50                      	push rax
  9179 00006C77 BF08000000              	mov rdi, 8 * 1
  9180 00006C7C E877AA0000              	call malloc
  9181 00006C81 50                      	push rax
  9182 00006C82 BF18000000              	mov rdi, 8 * 3
  9183 00006C87 E86CAA0000              	call malloc
  9184 00006C8C 488B7D10                	mov rdi, ENV
  9185 00006C90 4831F6                  	xor rsi, rsi
  9186 00006C93 4831D2                  	xor rdx, rdx
  9187 00006C96 48FFC2                  	inc rdx
  9188                                  	.L_lambda_opt_env_loop_000b:
  9189                                  
  9190 00006C99 4883FE02                        	cmp rsi, 2
  9191                                  
  9192 00006C9D 7412                            	je .L_lambda_opt_env_end_000b
  9193 00006C9F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9194 00006CA3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9195 00006CA7 4883C201                	add rdx, 1
  9196 00006CAB 4883C601                	add rsi, 1
  9197 00006CAF EBE8                    	jmp .L_lambda_opt_env_loop_000b
  9198                                  
  9199                                          	.L_lambda_opt_env_end_000b:
  9200 00006CB1 5B                      	pop rbx
  9201 00006CB2 4831F6                  	xor rsi, rsi
  9202                                  	.L_lambda_opt_params_loop_000b:
  9203                                  
  9204 00006CB5 4883FE01                        	cmp rsi, 1
  9205                                  
  9206 00006CB9 740F                            	je .L_lambda_opt_params_end_000b
  9207 00006CBB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9208 00006CC0 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9209 00006CC4 4883C601                	add rsi, 1
  9210 00006CC8 EBEB                    	jmp .L_lambda_opt_params_loop_000b
  9211                                  
  9212                                          	.L_lambda_opt_params_end_000b:
  9213 00006CCA 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
  9214 00006CCD 4889C3                  	mov rbx, rax
  9215 00006CD0 58                      	pop rax
  9216 00006CD1 C60005                  	mov byte [rax], T_closure
  9217 00006CD4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9218 00006CD8 48C74009[E56C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000b
  9219                                  
  9220 00006CE0 E95F030000                      	jmp .L_lambda_opt_end_000b
  9221                                  
  9222                                          	.L_lambda_opt_code_000b:
  9223                                  
  9224 00006CE5 48837C241001                    	cmp qword [rsp + 8 * 2], 1
  9225                                  
  9226 00006CEB 740D                            	je .L_lambda_opt_arity_check_exact_000b  ;same num_of_args
  9227                                  
  9228 00006CED 7F65                            	jg .L_lambda_opt_arity_check_more_000b  ;greater num_of_args
  9229 00006CEF FF742410                	push qword [rsp + 8 * 2]
  9230 00006CF3 6A01                    	push 1
  9231 00006CF5 E9CBA90000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
  9232                                  .L_lambda_opt_arity_check_exact_000b:
  9233 00006CFA 4883EC08                	sub rsp, 8 * 1
  9234 00006CFE 488D7F10                	lea rdi, [rdi + (8 * 2)]
  9235 00006D02 4889E7                  	mov rdi, rsp 
  9236 00006D05 488B4708                	mov rax, qword [rdi + 8]
  9237 00006D09 488907                  	mov qword [rdi], rax
  9238 00006D0C 488D7F08                	lea rdi, [rdi + 8]
  9239 00006D10 488B4708                	mov rax, qword [rdi + 8]
  9240 00006D14 488907                  	mov qword [rdi], rax
  9241 00006D17 488D7F08                	lea rdi, [rdi + 8]
  9242 00006D1B 488B4708                	mov rax, qword [rdi + 8]
  9243 00006D1F 4889C1                  	mov rcx, rax
  9244 00006D22 4883C001                	add rax, 1
  9245 00006D26 488907                  	mov qword [rdi], rax
  9246 00006D29 488D7F08                	lea rdi, [rdi + 8]
  9247                                  	.L_lambda_opt_stack_shrink_loop_001f:
  9248 00006D2D 4883F900                	cmp rcx, 0
  9249 00006D31 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_001f
  9250 00006D33 4883E901                	sub rcx, 1
  9251 00006D37 488D4010                	lea rax, [rax + (8 * 2)]
  9252 00006D3B 488B4708                	mov rax, qword [rdi + 8]
  9253 00006D3F 488907                  	mov qword [rdi], rax
  9254 00006D42 488D7F08                	lea rdi, [rdi + 8]
  9255 00006D46 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_001f
  9256                                  
  9257                                          	.L_lambda_opt_stack_shrink_loop_exit_001f:
  9258 00006D48 48C707[01000000]        	mov qword [rdi], sob_nil
  9259 00006D4F E997000000              	jmp .L_lambda_opt_stack_adjusted_000b
  9260                                  
  9261                                          	.L_lambda_opt_arity_check_more_000b:
  9262 00006D54 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  9263 00006D59 488D4EFF                	lea rcx, [rsi - 1]
  9264 00006D5D 49B8-                   	mov r8, sob_nil
  9264 00006D5F [0100000000000000] 
  9265 00006D67 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  9266 00006D6C 4889F2                  	mov rdx, rsi
  9267                                  	.L_lambda_opt_stack_shrink_loop_0020:
  9268 00006D6F 4883F900                	cmp rcx, 0
  9269 00006D73 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0020
  9270 00006D75 BF11000000              	mov rdi, 1 + (8 * 2)
  9271 00006D7A E879A90000              	call malloc
  9272 00006D7F C60021                  	mov byte [rax], T_pair
  9273 00006D82 488B1E                  	mov rbx, qword [rsi]
  9274 00006D85 48895801                	mov SOB_PAIR_CAR(rax), rbx
  9275 00006D89 4C894009                	mov SOB_PAIR_CDR(rax), r8
  9276 00006D8D 4883C6F8                	add rsi, -8
  9277 00006D91 4883E901                	sub rcx, 1
  9278 00006D95 4989C0                  	mov r8, rax
  9279 00006D98 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0020
  9280                                  
  9281                                          	.L_lambda_opt_stack_shrink_loop_exit_0020:
  9282 00006D9A 4C8902                  	mov qword [rdx], r8
  9283 00006D9D 4883EA08                	sub rdx, 8 * 1
  9284 00006DA1 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
  9285                                  
  9286 00006DA6 B901000000                      	mov rcx, 1 
  9287                                  
  9288                                          	.L_lambda_opt_stack_shrink_loop_0021:
  9289 00006DAB 4883F900                	cmp rcx, 0
  9290 00006DAF 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0021
  9291 00006DB1 488B06                  	mov rax, qword [rsi]
  9292 00006DB4 488902                  	mov qword [rdx], rax
  9293 00006DB7 488D76F8                	lea rsi, [rsi - 8]
  9294 00006DBB 4883C2F8                	add rdx, -8
  9295 00006DBF 4883C1FF                	add rcx, -1
  9296 00006DC3 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0021
  9297                                  
  9298                                          	.L_lambda_opt_stack_shrink_loop_exit_0021:
  9299                                  
  9300 00006DC5 48C70202000000                  	mov qword [rdx], 1 + 1
  9301 00006DCC 4883C6F8                	add rsi, -8
  9302 00006DD0 4883C2F8                	add rdx, -8
  9303 00006DD4 488B06                  	mov rax, qword [rsi]
  9304 00006DD7 488902                  	mov qword [rdx], rax
  9305 00006DDA 4883C2F8                	add rdx, -8
  9306 00006DDE 488D76F8                	lea rsi, [rsi - 8]
  9307 00006DE2 488B06                  	mov rax, qword [rsi]
  9308 00006DE5 488902                  	mov qword [rdx], rax
  9309 00006DE8 4889D4                  	mov rsp, rdx
  9310                                  	.L_lambda_opt_stack_adjusted_000b:
  9311 00006DEB C8000000                	enter 0, 0
  9312 00006DEF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9313 00006DF3 50                      	push rax
  9314 00006DF4 6A01                    	push 1
  9315 00006DF6 488B0425[00000000]      	mov rax, qword [free_var_0]
  9316                                  	assert_closure(rax)
    42 00006DFE 803805              <1>  cmp byte [%1], %2
    43 00006E01 0F85E5C00000        <1>  jne L_error_incorrect_type
  9317 00006E07 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9318 00006E0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9319                                  
  9320 00006E0D 483D[02000000]                  	cmp rax, sob_boolean_false
  9321                                  
  9322 00006E13 0F8481000000                    	je .L_if_else_001d
  9323 00006E19 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9324 00006E1D 50                      	push rax
  9325 00006E1E 48B8-                   	mov rax,L_constants + 32
  9325 00006E20 [2000000000000000] 
  9326 00006E28 50                      	push rax
  9327 00006E29 6A02                    	push 2
  9328 00006E2B 488B4510                	mov rax, qword [rbp + 8 * 2]
  9329                                  
  9330 00006E2F 488B00                                            	mov rax, qword[rax + 8 * 0]
  9331                                  
  9332 00006E32 488B00                                            	mov rax, qword[rax + 8 * 0]
  9333                                  .L_applic_TC_0049:
  9334 00006E35 803805                  	cmp byte [rax], T_closure
  9335 00006E38 0F856FB80000            	jne L_code_ptr_error
  9336 00006E3E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9337 00006E42 53                      	push rbx
  9338 00006E43 FF7508                  	push qword [rbp + 8]
  9339 00006E46 FF7500                  	push qword [rbp]
  9340 00006E49 488B4D18                	mov rcx, [rbp + 3 * 8]
  9341 00006E4D 488B542418              	mov rdx, [rsp + 3 * 8]
  9342 00006E52 488D7204                	lea rsi, [rdx + 4]
  9343 00006E56 4C8D4EFF                	lea r9, [rsi - 1]
  9344 00006E5A 488D7903                	lea rdi, [rcx + 3]
  9345 00006E5E 4D31C0                  	xor r8, r8
  9346                                  .L_tc_recycle_frame_loop_0049:
  9347 00006E61 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9348 00006E65 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9349 00006E6A 49FFC9                  	dec r9
  9350 00006E6D 4D31C0                  	xor r8, r8
  9351 00006E70 48FFCF                  	dec rdi
  9352 00006E73 48FFCE                  	dec rsi
  9353 00006E76 4883FE00                	cmp rsi, 0
  9354 00006E7A 75E5                    	jne .L_tc_recycle_frame_loop_0049
  9355                                  .L_tc_recycle_frame_done_0049:
  9356                                  ;this pop rbp in sot to the right place
  9357 00006E7C 4989C9                  	mov r9, rcx
  9358 00006E7F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9359 00006E87 4C01CC                  	add rsp, r9
  9360 00006E8A 5D                      	pop rbp
  9361 00006E8B 488B4D00                	mov rcx, qword [rbp]
  9362 00006E8F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9363 00006E93 FFE3                    	jmp rbx
  9364                                  
  9365 00006E95 E9A6010000                      	jmp .L_if_end_001d
  9366                                  
  9367                                          	.L_if_else_001d:
  9368 00006E9A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9369 00006E9E 50                      	push rax
  9370 00006E9F 48B8-                   	mov rax,L_constants + 32
  9370 00006EA1 [2000000000000000] 
  9371 00006EA9 50                      	push rax
  9372 00006EAA 488B0425[08030000]      	mov rax, qword [free_var_97]
  9373 00006EB2 50                      	push rax
  9374 00006EB3 6A03                    	push 3
  9375 00006EB5 488B0425[F8020000]      	mov rax, qword [free_var_95]
  9376                                  	assert_closure(rax)
    42 00006EBD 803805              <1>  cmp byte [%1], %2
    43 00006EC0 0F8526C00000        <1>  jne L_error_incorrect_type
  9377 00006EC6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9378 00006EC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9379 00006ECC 50                      	push rax
  9380 00006ECD 6A01                    	push 1
  9381 00006ECF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9382 00006ED4 E81FA80000              	call malloc
  9383 00006ED9 50                      	push rax
  9384 00006EDA BF10000000              	mov rdi, 8 * 2	; new rib
  9385 00006EDF E814A80000              	call malloc
  9386 00006EE4 50                      	push rax
  9387 00006EE5 BF20000000              	mov rdi, 8 * 4	; extended env
  9388 00006EEA E809A80000              	call malloc
  9389 00006EEF 488B7D10                	mov rdi, ENV
  9390 00006EF3 BE00000000              	mov rsi, 0
  9391 00006EF8 BA01000000              	mov rdx, 1
  9392                                  .L_lambda_simple_env_loop_003d:	; ext_env[i + 1] <-- env[i]
  9393 00006EFD 4883FE03                	cmp rsi, 3
  9394 00006F01 7410                    	je .L_lambda_simple_env_end_003d
  9395 00006F03 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9396 00006F07 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9397 00006F0B 48FFC6                  	inc rsi
  9398 00006F0E 48FFC2                  	inc rdx
  9399 00006F11 EBEA                    	jmp .L_lambda_simple_env_loop_003d
  9400                                  .L_lambda_simple_env_end_003d:
  9401 00006F13 5B                      	pop rbx
  9402 00006F14 BE00000000              	mov rsi, 0
  9403                                  .L_lambda_simple_params_loop_003d:	; copy params
  9404 00006F19 4883FE02                	cmp rsi, 2
  9405 00006F1D 740E                    	je .L_lambda_simple_params_end_003d
  9406 00006F1F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9407 00006F24 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9408 00006F28 48FFC6                  	inc rsi
  9409 00006F2B EBEC                    	jmp .L_lambda_simple_params_loop_003d
  9410                                  .L_lambda_simple_params_end_003d:
  9411 00006F2D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9412 00006F30 4889C3                  	mov rbx, rax
  9413 00006F33 58                      	pop rax
  9414 00006F34 C60005                  	mov byte [rax], T_closure
  9415 00006F37 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9416 00006F3B 48C74009[486F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003d
  9417 00006F43 E998000000              	jmp .L_lambda_simple_end_003d
  9418                                  .L_lambda_simple_code_003d:	; lambda-simple body
  9419 00006F48 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9420 00006F4E 740B                    	je .L_lambda_simple_arity_check_ok_003d
  9421 00006F50 FF742410                	push qword [rsp + 8 * 2]
  9422 00006F54 6A01                    	push 1
  9423 00006F56 E956A70000              	jmp L_error_incorrect_arity_simple
  9424                                  .L_lambda_simple_arity_check_ok_003d:
  9425 00006F5B C8000000                	enter 0, 0
  9426 00006F5F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9427 00006F63 50                      	push rax
  9428 00006F64 488B4510                	mov rax, qword [rbp + 8 * 2]
  9429                                  
  9430 00006F68 488B00                                            	mov rax, qword[rax + 8 * 0]
  9431                                  
  9432 00006F6B 488B00                                            	mov rax, qword[rax + 8 * 0]
  9433 00006F6E 50                      	push rax
  9434 00006F6F 6A02                    	push 2
  9435 00006F71 488B4510                	mov rax, qword [rbp + 8 * 2]
  9436                                  
  9437 00006F75 488B4008                                          	mov rax, qword[rax + 8 * 1]
  9438                                  
  9439 00006F79 488B00                                            	mov rax, qword[rax + 8 * 0]
  9440                                  .L_applic_TC_0047:
  9441 00006F7C 803805                  	cmp byte [rax], T_closure
  9442 00006F7F 0F8528B70000            	jne L_code_ptr_error
  9443 00006F85 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9444 00006F89 53                      	push rbx
  9445 00006F8A FF7508                  	push qword [rbp + 8]
  9446 00006F8D FF7500                  	push qword [rbp]
  9447 00006F90 488B4D18                	mov rcx, [rbp + 3 * 8]
  9448 00006F94 488B542418              	mov rdx, [rsp + 3 * 8]
  9449 00006F99 488D7204                	lea rsi, [rdx + 4]
  9450 00006F9D 4C8D4EFF                	lea r9, [rsi - 1]
  9451 00006FA1 488D7903                	lea rdi, [rcx + 3]
  9452 00006FA5 4D31C0                  	xor r8, r8
  9453                                  .L_tc_recycle_frame_loop_0047:
  9454 00006FA8 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9455 00006FAC 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9456 00006FB1 49FFC9                  	dec r9
  9457 00006FB4 4D31C0                  	xor r8, r8
  9458 00006FB7 48FFCF                  	dec rdi
  9459 00006FBA 48FFCE                  	dec rsi
  9460 00006FBD 4883FE00                	cmp rsi, 0
  9461 00006FC1 75E5                    	jne .L_tc_recycle_frame_loop_0047
  9462                                  .L_tc_recycle_frame_done_0047:
  9463                                  ;this pop rbp in sot to the right place
  9464 00006FC3 4989C9                  	mov r9, rcx
  9465 00006FC6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9466 00006FCE 4C01CC                  	add rsp, r9
  9467 00006FD1 5D                      	pop rbp
  9468 00006FD2 488B4D00                	mov rcx, qword [rbp]
  9469 00006FD6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9470 00006FDA FFE3                    	jmp rbx
  9471 00006FDC C9                      	leave
  9472 00006FDD C21800                  	ret 8 * (2 + 1)
  9473                                  .L_lambda_simple_end_003d:	; new closure is in rax
  9474                                  .L_applic_TC_0048:
  9475 00006FE0 803805                  	cmp byte [rax], T_closure
  9476 00006FE3 0F85C4B60000            	jne L_code_ptr_error
  9477 00006FE9 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9478 00006FED 53                      	push rbx
  9479 00006FEE FF7508                  	push qword [rbp + 8]
  9480 00006FF1 FF7500                  	push qword [rbp]
  9481 00006FF4 488B4D18                	mov rcx, [rbp + 3 * 8]
  9482 00006FF8 488B542418              	mov rdx, [rsp + 3 * 8]
  9483 00006FFD 488D7204                	lea rsi, [rdx + 4]
  9484 00007001 4C8D4EFF                	lea r9, [rsi - 1]
  9485 00007005 488D7903                	lea rdi, [rcx + 3]
  9486 00007009 4D31C0                  	xor r8, r8
  9487                                  .L_tc_recycle_frame_loop_0048:
  9488 0000700C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9489 00007010 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9490 00007015 49FFC9                  	dec r9
  9491 00007018 4D31C0                  	xor r8, r8
  9492 0000701B 48FFCF                  	dec rdi
  9493 0000701E 48FFCE                  	dec rsi
  9494 00007021 4883FE00                	cmp rsi, 0
  9495 00007025 75E5                    	jne .L_tc_recycle_frame_loop_0048
  9496                                  .L_tc_recycle_frame_done_0048:
  9497                                  ;this pop rbp in sot to the right place
  9498 00007027 4989C9                  	mov r9, rcx
  9499 0000702A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9500 00007032 4C01CC                  	add rsp, r9
  9501 00007035 5D                      	pop rbp
  9502 00007036 488B4D00                	mov rcx, qword [rbp]
  9503 0000703A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9504 0000703E FFE3                    	jmp rbx
  9505                                  
  9506                                          	.L_if_end_001d:
  9507 00007040 C9                      	leave
  9508 00007041 C22000                  	ret 8 * (2 + 2)
  9509                                  .L_lambda_opt_end_000b:	; new closure is in rax
  9510 00007044 C9                      	leave
  9511 00007045 C21800                  	ret 8 * (2 + 1)
  9512                                  .L_lambda_simple_end_003c:	; new closure is in rax
  9513                                  .L_applic_TC_004a:
  9514 00007048 803805                  	cmp byte [rax], T_closure
  9515 0000704B 0F855CB60000            	jne L_code_ptr_error
  9516 00007051 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9517 00007055 53                      	push rbx
  9518 00007056 FF7508                  	push qword [rbp + 8]
  9519 00007059 FF7500                  	push qword [rbp]
  9520 0000705C 488B4D18                	mov rcx, [rbp + 3 * 8]
  9521 00007060 488B542418              	mov rdx, [rsp + 3 * 8]
  9522 00007065 488D7204                	lea rsi, [rdx + 4]
  9523 00007069 4C8D4EFF                	lea r9, [rsi - 1]
  9524 0000706D 488D7903                	lea rdi, [rcx + 3]
  9525 00007071 4D31C0                  	xor r8, r8
  9526                                  .L_tc_recycle_frame_loop_004a:
  9527 00007074 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9528 00007078 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9529 0000707D 49FFC9                  	dec r9
  9530 00007080 4D31C0                  	xor r8, r8
  9531 00007083 48FFCF                  	dec rdi
  9532 00007086 48FFCE                  	dec rsi
  9533 00007089 4883FE00                	cmp rsi, 0
  9534 0000708D 75E5                    	jne .L_tc_recycle_frame_loop_004a
  9535                                  .L_tc_recycle_frame_done_004a:
  9536                                  ;this pop rbp in sot to the right place
  9537 0000708F 4989C9                  	mov r9, rcx
  9538 00007092 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9539 0000709A 4C01CC                  	add rsp, r9
  9540 0000709D 5D                      	pop rbp
  9541 0000709E 488B4D00                	mov rcx, qword [rbp]
  9542 000070A2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9543 000070A6 FFE3                    	jmp rbx
  9544 000070A8 C9                      	leave
  9545 000070A9 C21800                  	ret 8 * (2 + 1)
  9546                                  .L_lambda_simple_end_003a:	; new closure is in rax
  9547                                  	assert_closure(rax)
    42 000070AC 803805              <1>  cmp byte [%1], %2
    43 000070AF 0F8537BE0000        <1>  jne L_error_incorrect_type
  9548 000070B5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9549 000070B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9550 000070BB 48890425[10030000]      	mov qword [free_var_98], rax
  9551 000070C3 48B8-                   	mov rax, sob_void
  9551 000070C5 [0000000000000000] 
  9552                                  
  9553 000070CD 4889C7                  	mov rdi, rax
  9554 000070D0 E834A60000              	call print_sexpr_if_not_void
  9555                                  
  9556 000070D5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9557 000070DA E819A60000              	call malloc
  9558 000070DF 50                      	push rax
  9559 000070E0 BF00000000              	mov rdi, 8 * 0	; new rib
  9560 000070E5 E80EA60000              	call malloc
  9561 000070EA 50                      	push rax
  9562 000070EB BF08000000              	mov rdi, 8 * 1	; extended env
  9563 000070F0 E803A60000              	call malloc
  9564 000070F5 488B7D10                	mov rdi, ENV
  9565 000070F9 BE00000000              	mov rsi, 0
  9566 000070FE BA01000000              	mov rdx, 1
  9567                                  .L_lambda_simple_env_loop_003e:	; ext_env[i + 1] <-- env[i]
  9568 00007103 4883FE00                	cmp rsi, 0
  9569 00007107 7410                    	je .L_lambda_simple_env_end_003e
  9570 00007109 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9571 0000710D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9572 00007111 48FFC6                  	inc rsi
  9573 00007114 48FFC2                  	inc rdx
  9574 00007117 EBEA                    	jmp .L_lambda_simple_env_loop_003e
  9575                                  .L_lambda_simple_env_end_003e:
  9576 00007119 5B                      	pop rbx
  9577 0000711A BE00000000              	mov rsi, 0
  9578                                  .L_lambda_simple_params_loop_003e:	; copy params
  9579 0000711F 4883FE00                	cmp rsi, 0
  9580 00007123 740E                    	je .L_lambda_simple_params_end_003e
  9581 00007125 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9582 0000712A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9583 0000712E 48FFC6                  	inc rsi
  9584 00007131 EBEC                    	jmp .L_lambda_simple_params_loop_003e
  9585                                  .L_lambda_simple_params_end_003e:
  9586 00007133 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9587 00007136 4889C3                  	mov rbx, rax
  9588 00007139 58                      	pop rax
  9589 0000713A C60005                  	mov byte [rax], T_closure
  9590 0000713D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9591 00007141 48C74009[4E710000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003e
  9592 00007149 E99B000000              	jmp .L_lambda_simple_end_003e
  9593                                  .L_lambda_simple_code_003e:	; lambda-simple body
  9594 0000714E 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9595 00007154 740B                    	je .L_lambda_simple_arity_check_ok_003e
  9596 00007156 FF742410                	push qword [rsp + 8 * 2]
  9597 0000715A 6A00                    	push 0
  9598 0000715C E950A50000              	jmp L_error_incorrect_arity_simple
  9599                                  .L_lambda_simple_arity_check_ok_003e:
  9600 00007161 C8000000                	enter 0, 0
  9601 00007165 48B8-                   	mov rax,L_constants + 68
  9601 00007167 [4400000000000000] 
  9602 0000716F 50                      	push rax
  9603 00007170 48B8-                   	mov rax,L_constants + 155
  9603 00007172 [9B00000000000000] 
  9604 0000717A 50                      	push rax
  9605 0000717B 6A02                    	push 2
  9606 0000717D 488B0425[30010000]      	mov rax, qword [free_var_38]
  9607                                  .L_applic_TC_004b:
  9608 00007185 803805                  	cmp byte [rax], T_closure
  9609 00007188 0F851FB50000            	jne L_code_ptr_error
  9610 0000718E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9611 00007192 53                      	push rbx
  9612 00007193 FF7508                  	push qword [rbp + 8]
  9613 00007196 FF7500                  	push qword [rbp]
  9614 00007199 488B4D18                	mov rcx, [rbp + 3 * 8]
  9615 0000719D 488B542418              	mov rdx, [rsp + 3 * 8]
  9616 000071A2 488D7204                	lea rsi, [rdx + 4]
  9617 000071A6 4C8D4EFF                	lea r9, [rsi - 1]
  9618 000071AA 488D7903                	lea rdi, [rcx + 3]
  9619 000071AE 4D31C0                  	xor r8, r8
  9620                                  .L_tc_recycle_frame_loop_004b:
  9621 000071B1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9622 000071B5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9623 000071BA 49FFC9                  	dec r9
  9624 000071BD 4D31C0                  	xor r8, r8
  9625 000071C0 48FFCF                  	dec rdi
  9626 000071C3 48FFCE                  	dec rsi
  9627 000071C6 4883FE00                	cmp rsi, 0
  9628 000071CA 75E5                    	jne .L_tc_recycle_frame_loop_004b
  9629                                  .L_tc_recycle_frame_done_004b:
  9630                                  ;this pop rbp in sot to the right place
  9631 000071CC 4989C9                  	mov r9, rcx
  9632 000071CF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9633 000071D7 4C01CC                  	add rsp, r9
  9634 000071DA 5D                      	pop rbp
  9635 000071DB 488B4D00                	mov rcx, qword [rbp]
  9636 000071DF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9637 000071E3 FFE3                    	jmp rbx
  9638 000071E5 C9                      	leave
  9639 000071E6 C21000                  	ret 8 * (2 + 0)
  9640                                  .L_lambda_simple_end_003e:	; new closure is in rax
  9641 000071E9 50                      	push rax
  9642 000071EA 6A01                    	push 1
  9643 000071EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9644 000071F1 E802A50000              	call malloc
  9645 000071F6 50                      	push rax
  9646 000071F7 BF00000000              	mov rdi, 8 * 0	; new rib
  9647 000071FC E8F7A40000              	call malloc
  9648 00007201 50                      	push rax
  9649 00007202 BF08000000              	mov rdi, 8 * 1	; extended env
  9650 00007207 E8ECA40000              	call malloc
  9651 0000720C 488B7D10                	mov rdi, ENV
  9652 00007210 BE00000000              	mov rsi, 0
  9653 00007215 BA01000000              	mov rdx, 1
  9654                                  .L_lambda_simple_env_loop_003f:	; ext_env[i + 1] <-- env[i]
  9655 0000721A 4883FE00                	cmp rsi, 0
  9656 0000721E 7410                    	je .L_lambda_simple_env_end_003f
  9657 00007220 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9658 00007224 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9659 00007228 48FFC6                  	inc rsi
  9660 0000722B 48FFC2                  	inc rdx
  9661 0000722E EBEA                    	jmp .L_lambda_simple_env_loop_003f
  9662                                  .L_lambda_simple_env_end_003f:
  9663 00007230 5B                      	pop rbx
  9664 00007231 BE00000000              	mov rsi, 0
  9665                                  .L_lambda_simple_params_loop_003f:	; copy params
  9666 00007236 4883FE00                	cmp rsi, 0
  9667 0000723A 740E                    	je .L_lambda_simple_params_end_003f
  9668 0000723C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9669 00007241 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9670 00007245 48FFC6                  	inc rsi
  9671 00007248 EBEC                    	jmp .L_lambda_simple_params_loop_003f
  9672                                  .L_lambda_simple_params_end_003f:
  9673 0000724A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9674 0000724D 4889C3                  	mov rbx, rax
  9675 00007250 58                      	pop rax
  9676 00007251 C60005                  	mov byte [rax], T_closure
  9677 00007254 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9678 00007258 48C74009[65720000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_003f
  9679 00007260 E902080000              	jmp .L_lambda_simple_end_003f
  9680                                  .L_lambda_simple_code_003f:	; lambda-simple body
  9681 00007265 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9682 0000726B 740B                    	je .L_lambda_simple_arity_check_ok_003f
  9683 0000726D FF742410                	push qword [rsp + 8 * 2]
  9684 00007271 6A01                    	push 1
  9685 00007273 E939A40000              	jmp L_error_incorrect_arity_simple
  9686                                  .L_lambda_simple_arity_check_ok_003f:
  9687 00007278 C8000000                	enter 0, 0
  9688 0000727C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9689 00007281 E872A40000              	call malloc
  9690 00007286 50                      	push rax
  9691 00007287 BF08000000              	mov rdi, 8 * 1	; new rib
  9692 0000728C E867A40000              	call malloc
  9693 00007291 50                      	push rax
  9694 00007292 BF10000000              	mov rdi, 8 * 2	; extended env
  9695 00007297 E85CA40000              	call malloc
  9696 0000729C 488B7D10                	mov rdi, ENV
  9697 000072A0 BE00000000              	mov rsi, 0
  9698 000072A5 BA01000000              	mov rdx, 1
  9699                                  .L_lambda_simple_env_loop_0040:	; ext_env[i + 1] <-- env[i]
  9700 000072AA 4883FE01                	cmp rsi, 1
  9701 000072AE 7410                    	je .L_lambda_simple_env_end_0040
  9702 000072B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9703 000072B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9704 000072B8 48FFC6                  	inc rsi
  9705 000072BB 48FFC2                  	inc rdx
  9706 000072BE EBEA                    	jmp .L_lambda_simple_env_loop_0040
  9707                                  .L_lambda_simple_env_end_0040:
  9708 000072C0 5B                      	pop rbx
  9709 000072C1 BE00000000              	mov rsi, 0
  9710                                  .L_lambda_simple_params_loop_0040:	; copy params
  9711 000072C6 4883FE01                	cmp rsi, 1
  9712 000072CA 740E                    	je .L_lambda_simple_params_end_0040
  9713 000072CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9714 000072D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9715 000072D5 48FFC6                  	inc rsi
  9716 000072D8 EBEC                    	jmp .L_lambda_simple_params_loop_0040
  9717                                  .L_lambda_simple_params_end_0040:
  9718 000072DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9719 000072DD 4889C3                  	mov rbx, rax
  9720 000072E0 58                      	pop rax
  9721 000072E1 C60005                  	mov byte [rax], T_closure
  9722 000072E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9723 000072E8 48C74009[F5720000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0040
  9724 000072F0 E96C040000              	jmp .L_lambda_simple_end_0040
  9725                                  .L_lambda_simple_code_0040:	; lambda-simple body
  9726 000072F5 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9727 000072FB 740B                    	je .L_lambda_simple_arity_check_ok_0040
  9728 000072FD FF742410                	push qword [rsp + 8 * 2]
  9729 00007301 6A02                    	push 2
  9730 00007303 E9A9A30000              	jmp L_error_incorrect_arity_simple
  9731                                  .L_lambda_simple_arity_check_ok_0040:
  9732 00007308 C8000000                	enter 0, 0
  9733 0000730C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9734 00007310 50                      	push rax
  9735 00007311 6A01                    	push 1
  9736 00007313 488B0425[48000000]      	mov rax, qword [free_var_9]
  9737                                  	assert_closure(rax)
    42 0000731B 803805              <1>  cmp byte [%1], %2
    43 0000731E 0F85C8BB0000        <1>  jne L_error_incorrect_type
  9738 00007324 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9739 00007327 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9740                                  
  9741 0000732A 483D[02000000]                  	cmp rax, sob_boolean_false
  9742                                  
  9743 00007330 0F84CA010000                    	je .L_if_else_001e
  9744 00007336 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9745 0000733A 50                      	push rax
  9746 0000733B 6A01                    	push 1
  9747 0000733D 488B0425[48000000]      	mov rax, qword [free_var_9]
  9748                                  	assert_closure(rax)
    42 00007345 803805              <1>  cmp byte [%1], %2
    43 00007348 0F859EBB0000        <1>  jne L_error_incorrect_type
  9749 0000734E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9750 00007351 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9751                                  
  9752 00007354 483D[02000000]                  	cmp rax, sob_boolean_false
  9753                                  
  9754 0000735A 7479                            	je .L_if_else_0022
  9755 0000735C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9756 00007360 50                      	push rax
  9757 00007361 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9758 00007365 50                      	push rax
  9759 00007366 6A02                    	push 2
  9760 00007368 488B0425[20010000]      	mov rax, qword [free_var_36]
  9761                                  .L_applic_TC_0052:
  9762 00007370 803805                  	cmp byte [rax], T_closure
  9763 00007373 0F8534B30000            	jne L_code_ptr_error
  9764 00007379 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9765 0000737D 53                      	push rbx
  9766 0000737E FF7508                  	push qword [rbp + 8]
  9767 00007381 FF7500                  	push qword [rbp]
  9768 00007384 488B4D18                	mov rcx, [rbp + 3 * 8]
  9769 00007388 488B542418              	mov rdx, [rsp + 3 * 8]
  9770 0000738D 488D7204                	lea rsi, [rdx + 4]
  9771 00007391 4C8D4EFF                	lea r9, [rsi - 1]
  9772 00007395 488D7903                	lea rdi, [rcx + 3]
  9773 00007399 4D31C0                  	xor r8, r8
  9774                                  .L_tc_recycle_frame_loop_0052:
  9775 0000739C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9776 000073A0 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9777 000073A5 49FFC9                  	dec r9
  9778 000073A8 4D31C0                  	xor r8, r8
  9779 000073AB 48FFCF                  	dec rdi
  9780 000073AE 48FFCE                  	dec rsi
  9781 000073B1 4883FE00                	cmp rsi, 0
  9782 000073B5 75E5                    	jne .L_tc_recycle_frame_loop_0052
  9783                                  .L_tc_recycle_frame_done_0052:
  9784                                  ;this pop rbp in sot to the right place
  9785 000073B7 4989C9                  	mov r9, rcx
  9786 000073BA 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9787 000073C2 4C01CC                  	add rsp, r9
  9788 000073C5 5D                      	pop rbp
  9789 000073C6 488B4D00                	mov rcx, qword [rbp]
  9790 000073CA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9791 000073CE FFE3                    	jmp rbx
  9792                                  
  9793 000073D0 E926010000                      	jmp .L_if_end_0022
  9794                                  
  9795                                          	.L_if_else_0022:
  9796 000073D5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9797 000073D9 50                      	push rax
  9798 000073DA 6A01                    	push 1
  9799 000073DC 488B0425[40000000]      	mov rax, qword [free_var_8]
  9800                                  	assert_closure(rax)
    42 000073E4 803805              <1>  cmp byte [%1], %2
    43 000073E7 0F85FFBA0000        <1>  jne L_error_incorrect_type
  9801 000073ED FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9802 000073F0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9803                                  
  9804 000073F3 483D[02000000]                  	cmp rax, sob_boolean_false
  9805                                  
  9806 000073F9 0F8490000000                    	je .L_if_else_0023
  9807 000073FF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9808 00007403 50                      	push rax
  9809 00007404 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9810 00007408 50                      	push rax
  9811 00007409 6A01                    	push 1
  9812 0000740B 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9813                                  	assert_closure(rax)
    42 00007413 803805              <1>  cmp byte [%1], %2
    43 00007416 0F85D0BA0000        <1>  jne L_error_incorrect_type
  9814 0000741C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9815 0000741F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9816 00007422 50                      	push rax
  9817 00007423 6A02                    	push 2
  9818 00007425 488B0425[00010000]      	mov rax, qword [free_var_32]
  9819                                  .L_applic_TC_0051:
  9820 0000742D 803805                  	cmp byte [rax], T_closure
  9821 00007430 0F8577B20000            	jne L_code_ptr_error
  9822 00007436 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9823 0000743A 53                      	push rbx
  9824 0000743B FF7508                  	push qword [rbp + 8]
  9825 0000743E FF7500                  	push qword [rbp]
  9826 00007441 488B4D18                	mov rcx, [rbp + 3 * 8]
  9827 00007445 488B542418              	mov rdx, [rsp + 3 * 8]
  9828 0000744A 488D7204                	lea rsi, [rdx + 4]
  9829 0000744E 4C8D4EFF                	lea r9, [rsi - 1]
  9830 00007452 488D7903                	lea rdi, [rcx + 3]
  9831 00007456 4D31C0                  	xor r8, r8
  9832                                  .L_tc_recycle_frame_loop_0051:
  9833 00007459 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9834 0000745D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9835 00007462 49FFC9                  	dec r9
  9836 00007465 4D31C0                  	xor r8, r8
  9837 00007468 48FFCF                  	dec rdi
  9838 0000746B 48FFCE                  	dec rsi
  9839 0000746E 4883FE00                	cmp rsi, 0
  9840 00007472 75E5                    	jne .L_tc_recycle_frame_loop_0051
  9841                                  .L_tc_recycle_frame_done_0051:
  9842                                  ;this pop rbp in sot to the right place
  9843 00007474 4989C9                  	mov r9, rcx
  9844 00007477 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9845 0000747F 4C01CC                  	add rsp, r9
  9846 00007482 5D                      	pop rbp
  9847 00007483 488B4D00                	mov rcx, qword [rbp]
  9848 00007487 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9849 0000748B FFE3                    	jmp rbx
  9850                                  
  9851 0000748D EB6C                            	jmp .L_if_end_0023
  9852                                  
  9853                                          	.L_if_else_0023:
  9854 0000748F 6A00                    	push 0
  9855 00007491 488B4510                	mov rax, qword [rbp + 8 * 2]
  9856                                  
  9857 00007495 488B00                                            	mov rax, qword[rax + 8 * 0]
  9858                                  
  9859 00007498 488B00                                            	mov rax, qword[rax + 8 * 0]
  9860                                  .L_applic_TC_0050:
  9861 0000749B 803805                  	cmp byte [rax], T_closure
  9862 0000749E 0F8509B20000            	jne L_code_ptr_error
  9863 000074A4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9864 000074A8 53                      	push rbx
  9865 000074A9 FF7508                  	push qword [rbp + 8]
  9866 000074AC FF7500                  	push qword [rbp]
  9867 000074AF 488B4D18                	mov rcx, [rbp + 3 * 8]
  9868 000074B3 488B542418              	mov rdx, [rsp + 3 * 8]
  9869 000074B8 488D7204                	lea rsi, [rdx + 4]
  9870 000074BC 4C8D4EFF                	lea r9, [rsi - 1]
  9871 000074C0 488D7903                	lea rdi, [rcx + 3]
  9872 000074C4 4D31C0                  	xor r8, r8
  9873                                  .L_tc_recycle_frame_loop_0050:
  9874 000074C7 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9875 000074CB 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9876 000074D0 49FFC9                  	dec r9
  9877 000074D3 4D31C0                  	xor r8, r8
  9878 000074D6 48FFCF                  	dec rdi
  9879 000074D9 48FFCE                  	dec rsi
  9880 000074DC 4883FE00                	cmp rsi, 0
  9881 000074E0 75E5                    	jne .L_tc_recycle_frame_loop_0050
  9882                                  .L_tc_recycle_frame_done_0050:
  9883                                  ;this pop rbp in sot to the right place
  9884 000074E2 4989C9                  	mov r9, rcx
  9885 000074E5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9886 000074ED 4C01CC                  	add rsp, r9
  9887 000074F0 5D                      	pop rbp
  9888 000074F1 488B4D00                	mov rcx, qword [rbp]
  9889 000074F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9890 000074F9 FFE3                    	jmp rbx
  9891                                  
  9892                                          	.L_if_end_0023:
  9893                                  
  9894                                          	.L_if_end_0022:
  9895                                  
  9896 000074FB E95D020000                      	jmp .L_if_end_001e
  9897                                  
  9898                                          	.L_if_else_001e:
  9899 00007500 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9900 00007504 50                      	push rax
  9901 00007505 6A01                    	push 1
  9902 00007507 488B0425[40000000]      	mov rax, qword [free_var_8]
  9903                                  	assert_closure(rax)
    42 0000750F 803805              <1>  cmp byte [%1], %2
    43 00007512 0F85D4B90000        <1>  jne L_error_incorrect_type
  9904 00007518 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9905 0000751B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9906                                  
  9907 0000751E 483D[02000000]                  	cmp rax, sob_boolean_false
  9908                                  
  9909 00007524 0F84C7010000                    	je .L_if_else_001f
  9910 0000752A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9911 0000752E 50                      	push rax
  9912 0000752F 6A01                    	push 1
  9913 00007531 488B0425[48000000]      	mov rax, qword [free_var_9]
  9914                                  	assert_closure(rax)
    42 00007539 803805              <1>  cmp byte [%1], %2
    43 0000753C 0F85AAB90000        <1>  jne L_error_incorrect_type
  9915 00007542 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9916 00007545 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9917                                  
  9918 00007548 483D[02000000]                  	cmp rax, sob_boolean_false
  9919                                  
  9920 0000754E 0F8493000000                    	je .L_if_else_0020
  9921 00007554 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9922 00007558 50                      	push rax
  9923 00007559 6A01                    	push 1
  9924 0000755B 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9925                                  	assert_closure(rax)
    42 00007563 803805              <1>  cmp byte [%1], %2
    43 00007566 0F8580B90000        <1>  jne L_error_incorrect_type
  9926 0000756C FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9927 0000756F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9928 00007572 50                      	push rax
  9929 00007573 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9930 00007577 50                      	push rax
  9931 00007578 6A02                    	push 2
  9932 0000757A 488B0425[00010000]      	mov rax, qword [free_var_32]
  9933                                  .L_applic_TC_004f:
  9934 00007582 803805                  	cmp byte [rax], T_closure
  9935 00007585 0F8522B10000            	jne L_code_ptr_error
  9936 0000758B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9937 0000758F 53                      	push rbx
  9938 00007590 FF7508                  	push qword [rbp + 8]
  9939 00007593 FF7500                  	push qword [rbp]
  9940 00007596 488B4D18                	mov rcx, [rbp + 3 * 8]
  9941 0000759A 488B542418              	mov rdx, [rsp + 3 * 8]
  9942 0000759F 488D7204                	lea rsi, [rdx + 4]
  9943 000075A3 4C8D4EFF                	lea r9, [rsi - 1]
  9944 000075A7 488D7903                	lea rdi, [rcx + 3]
  9945 000075AB 4D31C0                  	xor r8, r8
  9946                                  .L_tc_recycle_frame_loop_004f:
  9947 000075AE 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
  9948 000075B2 4C8944FD00              	mov [rbp + (rdi * 8)], r8
  9949 000075B7 49FFC9                  	dec r9
  9950 000075BA 4D31C0                  	xor r8, r8
  9951 000075BD 48FFCF                  	dec rdi
  9952 000075C0 48FFCE                  	dec rsi
  9953 000075C3 4883FE00                	cmp rsi, 0
  9954 000075C7 75E5                    	jne .L_tc_recycle_frame_loop_004f
  9955                                  .L_tc_recycle_frame_done_004f:
  9956                                  ;this pop rbp in sot to the right place
  9957 000075C9 4989C9                  	mov r9, rcx
  9958 000075CC 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
  9959 000075D4 4C01CC                  	add rsp, r9
  9960 000075D7 5D                      	pop rbp
  9961 000075D8 488B4D00                	mov rcx, qword [rbp]
  9962 000075DC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
  9963 000075E0 FFE3                    	jmp rbx
  9964                                  
  9965 000075E2 E908010000                      	jmp .L_if_end_0020
  9966                                  
  9967                                          	.L_if_else_0020:
  9968 000075E7 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9969 000075EB 50                      	push rax
  9970 000075EC 6A01                    	push 1
  9971 000075EE 488B0425[40000000]      	mov rax, qword [free_var_8]
  9972                                  	assert_closure(rax)
    42 000075F6 803805              <1>  cmp byte [%1], %2
    43 000075F9 0F85EDB80000        <1>  jne L_error_incorrect_type
  9973 000075FF FF7001                  	push SOB_CLOSURE_ENV(rax) 
  9974 00007602 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9975                                  
  9976 00007605 483D[02000000]                  	cmp rax, sob_boolean_false
  9977                                  
  9978 0000760B 7476                            	je .L_if_else_0021
  9979 0000760D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  9980 00007611 50                      	push rax
  9981 00007612 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  9982 00007616 50                      	push rax
  9983 00007617 6A02                    	push 2
  9984 00007619 488B0425[00010000]      	mov rax, qword [free_var_32]
  9985                                  .L_applic_TC_004e:
  9986 00007621 803805                  	cmp byte [rax], T_closure
  9987 00007624 0F8583B00000            	jne L_code_ptr_error
  9988 0000762A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
  9989 0000762E 53                      	push rbx
  9990 0000762F FF7508                  	push qword [rbp + 8]
  9991 00007632 FF7500                  	push qword [rbp]
  9992 00007635 488B4D18                	mov rcx, [rbp + 3 * 8]
  9993 00007639 488B542418              	mov rdx, [rsp + 3 * 8]
  9994 0000763E 488D7204                	lea rsi, [rdx + 4]
  9995 00007642 4C8D4EFF                	lea r9, [rsi - 1]
  9996 00007646 488D7903                	lea rdi, [rcx + 3]
  9997 0000764A 4D31C0                  	xor r8, r8
  9998                                  .L_tc_recycle_frame_loop_004e:
  9999 0000764D 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10000 00007651 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10001 00007656 49FFC9                  	dec r9
 10002 00007659 4D31C0                  	xor r8, r8
 10003 0000765C 48FFCF                  	dec rdi
 10004 0000765F 48FFCE                  	dec rsi
 10005 00007662 4883FE00                	cmp rsi, 0
 10006 00007666 75E5                    	jne .L_tc_recycle_frame_loop_004e
 10007                                  .L_tc_recycle_frame_done_004e:
 10008                                  ;this pop rbp in sot to the right place
 10009 00007668 4989C9                  	mov r9, rcx
 10010 0000766B 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10011 00007673 4C01CC                  	add rsp, r9
 10012 00007676 5D                      	pop rbp
 10013 00007677 488B4D00                	mov rcx, qword [rbp]
 10014 0000767B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10015 0000767F FFE3                    	jmp rbx
 10016                                  
 10017 00007681 EB6C                            	jmp .L_if_end_0021
 10018                                  
 10019                                          	.L_if_else_0021:
 10020 00007683 6A00                    	push 0
 10021 00007685 488B4510                	mov rax, qword [rbp + 8 * 2]
 10022                                  
 10023 00007689 488B00                                            	mov rax, qword[rax + 8 * 0]
 10024                                  
 10025 0000768C 488B00                                            	mov rax, qword[rax + 8 * 0]
 10026                                  .L_applic_TC_004d:
 10027 0000768F 803805                  	cmp byte [rax], T_closure
 10028 00007692 0F8515B00000            	jne L_code_ptr_error
 10029 00007698 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10030 0000769C 53                      	push rbx
 10031 0000769D FF7508                  	push qword [rbp + 8]
 10032 000076A0 FF7500                  	push qword [rbp]
 10033 000076A3 488B4D18                	mov rcx, [rbp + 3 * 8]
 10034 000076A7 488B542418              	mov rdx, [rsp + 3 * 8]
 10035 000076AC 488D7204                	lea rsi, [rdx + 4]
 10036 000076B0 4C8D4EFF                	lea r9, [rsi - 1]
 10037 000076B4 488D7903                	lea rdi, [rcx + 3]
 10038 000076B8 4D31C0                  	xor r8, r8
 10039                                  .L_tc_recycle_frame_loop_004d:
 10040 000076BB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10041 000076BF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10042 000076C4 49FFC9                  	dec r9
 10043 000076C7 4D31C0                  	xor r8, r8
 10044 000076CA 48FFCF                  	dec rdi
 10045 000076CD 48FFCE                  	dec rsi
 10046 000076D0 4883FE00                	cmp rsi, 0
 10047 000076D4 75E5                    	jne .L_tc_recycle_frame_loop_004d
 10048                                  .L_tc_recycle_frame_done_004d:
 10049                                  ;this pop rbp in sot to the right place
 10050 000076D6 4989C9                  	mov r9, rcx
 10051 000076D9 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10052 000076E1 4C01CC                  	add rsp, r9
 10053 000076E4 5D                      	pop rbp
 10054 000076E5 488B4D00                	mov rcx, qword [rbp]
 10055 000076E9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10056 000076ED FFE3                    	jmp rbx
 10057                                  
 10058                                          	.L_if_end_0021:
 10059                                  
 10060                                          	.L_if_end_0020:
 10061                                  
 10062 000076EF EB6C                            	jmp .L_if_end_001f
 10063                                  
 10064                                          	.L_if_else_001f:
 10065 000076F1 6A00                    	push 0
 10066 000076F3 488B4510                	mov rax, qword [rbp + 8 * 2]
 10067                                  
 10068 000076F7 488B00                                            	mov rax, qword[rax + 8 * 0]
 10069                                  
 10070 000076FA 488B00                                            	mov rax, qword[rax + 8 * 0]
 10071                                  .L_applic_TC_004c:
 10072 000076FD 803805                  	cmp byte [rax], T_closure
 10073 00007700 0F85A7AF0000            	jne L_code_ptr_error
 10074 00007706 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10075 0000770A 53                      	push rbx
 10076 0000770B FF7508                  	push qword [rbp + 8]
 10077 0000770E FF7500                  	push qword [rbp]
 10078 00007711 488B4D18                	mov rcx, [rbp + 3 * 8]
 10079 00007715 488B542418              	mov rdx, [rsp + 3 * 8]
 10080 0000771A 488D7204                	lea rsi, [rdx + 4]
 10081 0000771E 4C8D4EFF                	lea r9, [rsi - 1]
 10082 00007722 488D7903                	lea rdi, [rcx + 3]
 10083 00007726 4D31C0                  	xor r8, r8
 10084                                  .L_tc_recycle_frame_loop_004c:
 10085 00007729 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10086 0000772D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10087 00007732 49FFC9                  	dec r9
 10088 00007735 4D31C0                  	xor r8, r8
 10089 00007738 48FFCF                  	dec rdi
 10090 0000773B 48FFCE                  	dec rsi
 10091 0000773E 4883FE00                	cmp rsi, 0
 10092 00007742 75E5                    	jne .L_tc_recycle_frame_loop_004c
 10093                                  .L_tc_recycle_frame_done_004c:
 10094                                  ;this pop rbp in sot to the right place
 10095 00007744 4989C9                  	mov r9, rcx
 10096 00007747 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10097 0000774F 4C01CC                  	add rsp, r9
 10098 00007752 5D                      	pop rbp
 10099 00007753 488B4D00                	mov rcx, qword [rbp]
 10100 00007757 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10101 0000775B FFE3                    	jmp rbx
 10102                                  
 10103                                          	.L_if_end_001f:
 10104                                  
 10105                                          	.L_if_end_001e:
 10106 0000775D C9                      	leave
 10107 0000775E C22000                  	ret 8 * (2 + 2)
 10108                                  .L_lambda_simple_end_0040:	; new closure is in rax
 10109 00007761 50                      	push rax
 10110 00007762 6A01                    	push 1
 10111 00007764 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10112 00007769 E88A9F0000              	call malloc
 10113 0000776E 50                      	push rax
 10114 0000776F BF08000000              	mov rdi, 8 * 1	; new rib
 10115 00007774 E87F9F0000              	call malloc
 10116 00007779 50                      	push rax
 10117 0000777A BF10000000              	mov rdi, 8 * 2	; extended env
 10118 0000777F E8749F0000              	call malloc
 10119 00007784 488B7D10                	mov rdi, ENV
 10120 00007788 BE00000000              	mov rsi, 0
 10121 0000778D BA01000000              	mov rdx, 1
 10122                                  .L_lambda_simple_env_loop_0041:	; ext_env[i + 1] <-- env[i]
 10123 00007792 4883FE01                	cmp rsi, 1
 10124 00007796 7410                    	je .L_lambda_simple_env_end_0041
 10125 00007798 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10126 0000779C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10127 000077A0 48FFC6                  	inc rsi
 10128 000077A3 48FFC2                  	inc rdx
 10129 000077A6 EBEA                    	jmp .L_lambda_simple_env_loop_0041
 10130                                  .L_lambda_simple_env_end_0041:
 10131 000077A8 5B                      	pop rbx
 10132 000077A9 BE00000000              	mov rsi, 0
 10133                                  .L_lambda_simple_params_loop_0041:	; copy params
 10134 000077AE 4883FE01                	cmp rsi, 1
 10135 000077B2 740E                    	je .L_lambda_simple_params_end_0041
 10136 000077B4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10137 000077B9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10138 000077BD 48FFC6                  	inc rsi
 10139 000077C0 EBEC                    	jmp .L_lambda_simple_params_loop_0041
 10140                                  .L_lambda_simple_params_end_0041:
 10141 000077C2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10142 000077C5 4889C3                  	mov rbx, rax
 10143 000077C8 58                      	pop rax
 10144 000077C9 C60005                  	mov byte [rax], T_closure
 10145 000077CC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10146 000077D0 48C74009[DD770000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0041
 10147 000077D8 E926020000              	jmp .L_lambda_simple_end_0041
 10148                                  .L_lambda_simple_code_0041:	; lambda-simple body
 10149 000077DD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10150 000077E3 740B                    	je .L_lambda_simple_arity_check_ok_0041
 10151 000077E5 FF742410                	push qword [rsp + 8 * 2]
 10152 000077E9 6A01                    	push 1
 10153 000077EB E9C19E0000              	jmp L_error_incorrect_arity_simple
 10154                                  .L_lambda_simple_arity_check_ok_0041:
 10155 000077F0 C8000000                	enter 0, 0
 10156 000077F4 BF11000000              	mov rdi, (1 + 8 + 8)
 10157 000077F9 E8FA9E0000              	call malloc
 10158 000077FE 50                      	push rax
 10159 000077FF BF08000000              	mov rdi, 8 * 1
 10160 00007804 E8EF9E0000              	call malloc
 10161 00007809 50                      	push rax
 10162 0000780A BF18000000              	mov rdi, 8 * 3
 10163 0000780F E8E49E0000              	call malloc
 10164 00007814 488B7D10                	mov rdi, ENV
 10165 00007818 4831F6                  	xor rsi, rsi
 10166 0000781B 4831D2                  	xor rdx, rdx
 10167 0000781E 48FFC2                  	inc rdx
 10168                                  	.L_lambda_opt_env_loop_000c:
 10169                                  
 10170 00007821 4883FE02                        	cmp rsi, 2
 10171                                  
 10172 00007825 7412                            	je .L_lambda_opt_env_end_000c
 10173 00007827 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10174 0000782B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10175 0000782F 4883C201                	add rdx, 1
 10176 00007833 4883C601                	add rsi, 1
 10177 00007837 EBE8                    	jmp .L_lambda_opt_env_loop_000c
 10178                                  
 10179                                          	.L_lambda_opt_env_end_000c:
 10180 00007839 5B                      	pop rbx
 10181 0000783A 4831F6                  	xor rsi, rsi
 10182                                  	.L_lambda_opt_params_loop_000c:
 10183                                  
 10184 0000783D 4883FE01                        	cmp rsi, 1
 10185                                  
 10186 00007841 740F                            	je .L_lambda_opt_params_end_000c
 10187 00007843 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10188 00007848 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10189 0000784C 4883C601                	add rsi, 1
 10190 00007850 EBEB                    	jmp .L_lambda_opt_params_loop_000c
 10191                                  
 10192                                          	.L_lambda_opt_params_end_000c:
 10193 00007852 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 10194 00007855 4889C3                  	mov rbx, rax
 10195 00007858 58                      	pop rax
 10196 00007859 C60005                  	mov byte [rax], T_closure
 10197 0000785C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10198 00007860 48C74009[6D780000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000c
 10199                                  
 10200 00007868 E992010000                      	jmp .L_lambda_opt_end_000c
 10201                                  
 10202                                          	.L_lambda_opt_code_000c:
 10203                                  
 10204 0000786D 48837C241000                    	cmp qword [rsp + 8 * 2], 0
 10205                                  
 10206 00007873 740D                            	je .L_lambda_opt_arity_check_exact_000c  ;same num_of_args
 10207                                  
 10208 00007875 7F65                            	jg .L_lambda_opt_arity_check_more_000c  ;greater num_of_args
 10209 00007877 FF742410                	push qword [rsp + 8 * 2]
 10210 0000787B 6A00                    	push 0
 10211 0000787D E9439E0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 10212                                  .L_lambda_opt_arity_check_exact_000c:
 10213 00007882 4883EC08                	sub rsp, 8 * 1
 10214 00007886 488D7F10                	lea rdi, [rdi + (8 * 2)]
 10215 0000788A 4889E7                  	mov rdi, rsp 
 10216 0000788D 488B4708                	mov rax, qword [rdi + 8]
 10217 00007891 488907                  	mov qword [rdi], rax
 10218 00007894 488D7F08                	lea rdi, [rdi + 8]
 10219 00007898 488B4708                	mov rax, qword [rdi + 8]
 10220 0000789C 488907                  	mov qword [rdi], rax
 10221 0000789F 488D7F08                	lea rdi, [rdi + 8]
 10222 000078A3 488B4708                	mov rax, qword [rdi + 8]
 10223 000078A7 4889C1                  	mov rcx, rax
 10224 000078AA 4883C001                	add rax, 1
 10225 000078AE 488907                  	mov qword [rdi], rax
 10226 000078B1 488D7F08                	lea rdi, [rdi + 8]
 10227                                  	.L_lambda_opt_stack_shrink_loop_0022:
 10228 000078B5 4883F900                	cmp rcx, 0
 10229 000078B9 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0022
 10230 000078BB 4883E901                	sub rcx, 1
 10231 000078BF 488D4010                	lea rax, [rax + (8 * 2)]
 10232 000078C3 488B4708                	mov rax, qword [rdi + 8]
 10233 000078C7 488907                  	mov qword [rdi], rax
 10234 000078CA 488D7F08                	lea rdi, [rdi + 8]
 10235 000078CE EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0022
 10236                                  
 10237                                          	.L_lambda_opt_stack_shrink_loop_exit_0022:
 10238 000078D0 48C707[01000000]        	mov qword [rdi], sob_nil
 10239 000078D7 E996000000              	jmp .L_lambda_opt_stack_adjusted_000c
 10240                                  
 10241                                          	.L_lambda_opt_arity_check_more_000c:
 10242 000078DC 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 10243 000078E1 488D0E                  	lea rcx, [rsi - 0]
 10244 000078E4 49B8-                   	mov r8, sob_nil
 10244 000078E6 [0100000000000000] 
 10245 000078EE 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 10246 000078F3 4889F2                  	mov rdx, rsi
 10247                                  	.L_lambda_opt_stack_shrink_loop_0023:
 10248 000078F6 4883F900                	cmp rcx, 0
 10249 000078FA 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0023
 10250 000078FC BF11000000              	mov rdi, 1 + (8 * 2)
 10251 00007901 E8F29D0000              	call malloc
 10252 00007906 C60021                  	mov byte [rax], T_pair
 10253 00007909 488B1E                  	mov rbx, qword [rsi]
 10254 0000790C 48895801                	mov SOB_PAIR_CAR(rax), rbx
 10255 00007910 4C894009                	mov SOB_PAIR_CDR(rax), r8
 10256 00007914 4883C6F8                	add rsi, -8
 10257 00007918 4883E901                	sub rcx, 1
 10258 0000791C 4989C0                  	mov r8, rax
 10259 0000791F EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0023
 10260                                  
 10261                                          	.L_lambda_opt_stack_shrink_loop_exit_0023:
 10262 00007921 4C8902                  	mov qword [rdx], r8
 10263 00007924 4883EA08                	sub rdx, 8 * 1
 10264 00007928 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
 10265                                  
 10266 0000792D B900000000                      	mov rcx, 0 
 10267                                  
 10268                                          	.L_lambda_opt_stack_shrink_loop_0024:
 10269 00007932 4883F900                	cmp rcx, 0
 10270 00007936 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0024
 10271 00007938 488B06                  	mov rax, qword [rsi]
 10272 0000793B 488902                  	mov qword [rdx], rax
 10273 0000793E 488D76F8                	lea rsi, [rsi - 8]
 10274 00007942 4883C2F8                	add rdx, -8
 10275 00007946 4883C1FF                	add rcx, -1
 10276 0000794A EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0024
 10277                                  
 10278                                          	.L_lambda_opt_stack_shrink_loop_exit_0024:
 10279                                  
 10280 0000794C 48C70201000000                  	mov qword [rdx], 1 + 0
 10281 00007953 4883C6F8                	add rsi, -8
 10282 00007957 4883C2F8                	add rdx, -8
 10283 0000795B 488B06                  	mov rax, qword [rsi]
 10284 0000795E 488902                  	mov qword [rdx], rax
 10285 00007961 4883C2F8                	add rdx, -8
 10286 00007965 488D76F8                	lea rsi, [rsi - 8]
 10287 00007969 488B06                  	mov rax, qword [rsi]
 10288 0000796C 488902                  	mov qword [rdx], rax
 10289 0000796F 4889D4                  	mov rsp, rdx
 10290                                  	.L_lambda_opt_stack_adjusted_000c:
 10291 00007972 C8000000                	enter 0, 0
 10292 00007976 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10293 0000797A 50                      	push rax
 10294 0000797B 48B8-                   	mov rax,L_constants + 128
 10294 0000797D [8000000000000000] 
 10295 00007985 50                      	push rax
 10296 00007986 488B4510                	mov rax, qword [rbp + 8 * 2]
 10297                                  
 10298 0000798A 488B00                                            	mov rax, qword[rax + 8 * 0]
 10299                                  
 10300 0000798D 488B00                                            	mov rax, qword[rax + 8 * 0]
 10301 00007990 50                      	push rax
 10302 00007991 6A03                    	push 3
 10303 00007993 488B0425[F8020000]      	mov rax, qword [free_var_95]
 10304                                  .L_applic_TC_0053:
 10305 0000799B 803805                  	cmp byte [rax], T_closure
 10306 0000799E 0F8509AD0000            	jne L_code_ptr_error
 10307 000079A4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10308 000079A8 53                      	push rbx
 10309 000079A9 FF7508                  	push qword [rbp + 8]
 10310 000079AC FF7500                  	push qword [rbp]
 10311 000079AF 488B4D18                	mov rcx, [rbp + 3 * 8]
 10312 000079B3 488B542418              	mov rdx, [rsp + 3 * 8]
 10313 000079B8 488D7204                	lea rsi, [rdx + 4]
 10314 000079BC 4C8D4EFF                	lea r9, [rsi - 1]
 10315 000079C0 488D7903                	lea rdi, [rcx + 3]
 10316 000079C4 4D31C0                  	xor r8, r8
 10317                                  .L_tc_recycle_frame_loop_0053:
 10318 000079C7 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10319 000079CB 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10320 000079D0 49FFC9                  	dec r9
 10321 000079D3 4D31C0                  	xor r8, r8
 10322 000079D6 48FFCF                  	dec rdi
 10323 000079D9 48FFCE                  	dec rsi
 10324 000079DC 4883FE00                	cmp rsi, 0
 10325 000079E0 75E5                    	jne .L_tc_recycle_frame_loop_0053
 10326                                  .L_tc_recycle_frame_done_0053:
 10327                                  ;this pop rbp in sot to the right place
 10328 000079E2 4989C9                  	mov r9, rcx
 10329 000079E5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10330 000079ED 4C01CC                  	add rsp, r9
 10331 000079F0 5D                      	pop rbp
 10332 000079F1 488B4D00                	mov rcx, qword [rbp]
 10333 000079F5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10334 000079F9 FFE3                    	jmp rbx
 10335 000079FB C9                      	leave
 10336 000079FC C21800                  	ret 8 * (2 + 1)
 10337                                  .L_lambda_opt_end_000c:	; new closure is in rax
 10338 000079FF C9                      	leave
 10339 00007A00 C21800                  	ret 8 * (2 + 1)
 10340                                  .L_lambda_simple_end_0041:	; new closure is in rax
 10341                                  .L_applic_TC_0054:
 10342 00007A03 803805                  	cmp byte [rax], T_closure
 10343 00007A06 0F85A1AC0000            	jne L_code_ptr_error
 10344 00007A0C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10345 00007A10 53                      	push rbx
 10346 00007A11 FF7508                  	push qword [rbp + 8]
 10347 00007A14 FF7500                  	push qword [rbp]
 10348 00007A17 488B4D18                	mov rcx, [rbp + 3 * 8]
 10349 00007A1B 488B542418              	mov rdx, [rsp + 3 * 8]
 10350 00007A20 488D7204                	lea rsi, [rdx + 4]
 10351 00007A24 4C8D4EFF                	lea r9, [rsi - 1]
 10352 00007A28 488D7903                	lea rdi, [rcx + 3]
 10353 00007A2C 4D31C0                  	xor r8, r8
 10354                                  .L_tc_recycle_frame_loop_0054:
 10355 00007A2F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10356 00007A33 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10357 00007A38 49FFC9                  	dec r9
 10358 00007A3B 4D31C0                  	xor r8, r8
 10359 00007A3E 48FFCF                  	dec rdi
 10360 00007A41 48FFCE                  	dec rsi
 10361 00007A44 4883FE00                	cmp rsi, 0
 10362 00007A48 75E5                    	jne .L_tc_recycle_frame_loop_0054
 10363                                  .L_tc_recycle_frame_done_0054:
 10364                                  ;this pop rbp in sot to the right place
 10365 00007A4A 4989C9                  	mov r9, rcx
 10366 00007A4D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10367 00007A55 4C01CC                  	add rsp, r9
 10368 00007A58 5D                      	pop rbp
 10369 00007A59 488B4D00                	mov rcx, qword [rbp]
 10370 00007A5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10371 00007A61 FFE3                    	jmp rbx
 10372 00007A63 C9                      	leave
 10373 00007A64 C21800                  	ret 8 * (2 + 1)
 10374                                  .L_lambda_simple_end_003f:	; new closure is in rax
 10375                                  	assert_closure(rax)
    42 00007A67 803805              <1>  cmp byte [%1], %2
    43 00007A6A 0F857CB40000        <1>  jne L_error_incorrect_type
 10376 00007A70 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10377 00007A73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10378 00007A76 48890425[18030000]      	mov qword [free_var_99], rax
 10379 00007A7E 48B8-                   	mov rax, sob_void
 10379 00007A80 [0000000000000000] 
 10380                                  
 10381 00007A88 4889C7                  	mov rdi, rax
 10382 00007A8B E8799C0000              	call print_sexpr_if_not_void
 10383                                  
 10384 00007A90 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10385 00007A95 E85E9C0000              	call malloc
 10386 00007A9A 50                      	push rax
 10387 00007A9B BF00000000              	mov rdi, 8 * 0	; new rib
 10388 00007AA0 E8539C0000              	call malloc
 10389 00007AA5 50                      	push rax
 10390 00007AA6 BF08000000              	mov rdi, 8 * 1	; extended env
 10391 00007AAB E8489C0000              	call malloc
 10392 00007AB0 488B7D10                	mov rdi, ENV
 10393 00007AB4 BE00000000              	mov rsi, 0
 10394 00007AB9 BA01000000              	mov rdx, 1
 10395                                  .L_lambda_simple_env_loop_0042:	; ext_env[i + 1] <-- env[i]
 10396 00007ABE 4883FE00                	cmp rsi, 0
 10397 00007AC2 7410                    	je .L_lambda_simple_env_end_0042
 10398 00007AC4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10399 00007AC8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10400 00007ACC 48FFC6                  	inc rsi
 10401 00007ACF 48FFC2                  	inc rdx
 10402 00007AD2 EBEA                    	jmp .L_lambda_simple_env_loop_0042
 10403                                  .L_lambda_simple_env_end_0042:
 10404 00007AD4 5B                      	pop rbx
 10405 00007AD5 BE00000000              	mov rsi, 0
 10406                                  .L_lambda_simple_params_loop_0042:	; copy params
 10407 00007ADA 4883FE00                	cmp rsi, 0
 10408 00007ADE 740E                    	je .L_lambda_simple_params_end_0042
 10409 00007AE0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10410 00007AE5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10411 00007AE9 48FFC6                  	inc rsi
 10412 00007AEC EBEC                    	jmp .L_lambda_simple_params_loop_0042
 10413                                  .L_lambda_simple_params_end_0042:
 10414 00007AEE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10415 00007AF1 4889C3                  	mov rbx, rax
 10416 00007AF4 58                      	pop rax
 10417 00007AF5 C60005                  	mov byte [rax], T_closure
 10418 00007AF8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10419 00007AFC 48C74009[097B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0042
 10420 00007B04 E99B000000              	jmp .L_lambda_simple_end_0042
 10421                                  .L_lambda_simple_code_0042:	; lambda-simple body
 10422 00007B09 48837C241000            	cmp qword [rsp + 8 * 2], 0
 10423 00007B0F 740B                    	je .L_lambda_simple_arity_check_ok_0042
 10424 00007B11 FF742410                	push qword [rsp + 8 * 2]
 10425 00007B15 6A00                    	push 0
 10426 00007B17 E9959B0000              	jmp L_error_incorrect_arity_simple
 10427                                  .L_lambda_simple_arity_check_ok_0042:
 10428 00007B1C C8000000                	enter 0, 0
 10429 00007B20 48B8-                   	mov rax,L_constants + 68
 10429 00007B22 [4400000000000000] 
 10430 00007B2A 50                      	push rax
 10431 00007B2B 48B8-                   	mov rax,L_constants + 174
 10431 00007B2D [AE00000000000000] 
 10432 00007B35 50                      	push rax
 10433 00007B36 6A02                    	push 2
 10434 00007B38 488B0425[30010000]      	mov rax, qword [free_var_38]
 10435                                  .L_applic_TC_0055:
 10436 00007B40 803805                  	cmp byte [rax], T_closure
 10437 00007B43 0F8564AB0000            	jne L_code_ptr_error
 10438 00007B49 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10439 00007B4D 53                      	push rbx
 10440 00007B4E FF7508                  	push qword [rbp + 8]
 10441 00007B51 FF7500                  	push qword [rbp]
 10442 00007B54 488B4D18                	mov rcx, [rbp + 3 * 8]
 10443 00007B58 488B542418              	mov rdx, [rsp + 3 * 8]
 10444 00007B5D 488D7204                	lea rsi, [rdx + 4]
 10445 00007B61 4C8D4EFF                	lea r9, [rsi - 1]
 10446 00007B65 488D7903                	lea rdi, [rcx + 3]
 10447 00007B69 4D31C0                  	xor r8, r8
 10448                                  .L_tc_recycle_frame_loop_0055:
 10449 00007B6C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10450 00007B70 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10451 00007B75 49FFC9                  	dec r9
 10452 00007B78 4D31C0                  	xor r8, r8
 10453 00007B7B 48FFCF                  	dec rdi
 10454 00007B7E 48FFCE                  	dec rsi
 10455 00007B81 4883FE00                	cmp rsi, 0
 10456 00007B85 75E5                    	jne .L_tc_recycle_frame_loop_0055
 10457                                  .L_tc_recycle_frame_done_0055:
 10458                                  ;this pop rbp in sot to the right place
 10459 00007B87 4989C9                  	mov r9, rcx
 10460 00007B8A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10461 00007B92 4C01CC                  	add rsp, r9
 10462 00007B95 5D                      	pop rbp
 10463 00007B96 488B4D00                	mov rcx, qword [rbp]
 10464 00007B9A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10465 00007B9E FFE3                    	jmp rbx
 10466 00007BA0 C9                      	leave
 10467 00007BA1 C21000                  	ret 8 * (2 + 0)
 10468                                  .L_lambda_simple_end_0042:	; new closure is in rax
 10469 00007BA4 50                      	push rax
 10470 00007BA5 6A01                    	push 1
 10471 00007BA7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10472 00007BAC E8479B0000              	call malloc
 10473 00007BB1 50                      	push rax
 10474 00007BB2 BF00000000              	mov rdi, 8 * 0	; new rib
 10475 00007BB7 E83C9B0000              	call malloc
 10476 00007BBC 50                      	push rax
 10477 00007BBD BF08000000              	mov rdi, 8 * 1	; extended env
 10478 00007BC2 E8319B0000              	call malloc
 10479 00007BC7 488B7D10                	mov rdi, ENV
 10480 00007BCB BE00000000              	mov rsi, 0
 10481 00007BD0 BA01000000              	mov rdx, 1
 10482                                  .L_lambda_simple_env_loop_0043:	; ext_env[i + 1] <-- env[i]
 10483 00007BD5 4883FE00                	cmp rsi, 0
 10484 00007BD9 7410                    	je .L_lambda_simple_env_end_0043
 10485 00007BDB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10486 00007BDF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10487 00007BE3 48FFC6                  	inc rsi
 10488 00007BE6 48FFC2                  	inc rdx
 10489 00007BE9 EBEA                    	jmp .L_lambda_simple_env_loop_0043
 10490                                  .L_lambda_simple_env_end_0043:
 10491 00007BEB 5B                      	pop rbx
 10492 00007BEC BE00000000              	mov rsi, 0
 10493                                  .L_lambda_simple_params_loop_0043:	; copy params
 10494 00007BF1 4883FE00                	cmp rsi, 0
 10495 00007BF5 740E                    	je .L_lambda_simple_params_end_0043
 10496 00007BF7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10497 00007BFC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10498 00007C00 48FFC6                  	inc rsi
 10499 00007C03 EBEC                    	jmp .L_lambda_simple_params_loop_0043
 10500                                  .L_lambda_simple_params_end_0043:
 10501 00007C05 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10502 00007C08 4889C3                  	mov rbx, rax
 10503 00007C0B 58                      	pop rax
 10504 00007C0C C60005                  	mov byte [rax], T_closure
 10505 00007C0F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10506 00007C13 48C74009[207C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0043
 10507 00007C1B E9CF090000              	jmp .L_lambda_simple_end_0043
 10508                                  .L_lambda_simple_code_0043:	; lambda-simple body
 10509 00007C20 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10510 00007C26 740B                    	je .L_lambda_simple_arity_check_ok_0043
 10511 00007C28 FF742410                	push qword [rsp + 8 * 2]
 10512 00007C2C 6A01                    	push 1
 10513 00007C2E E97E9A0000              	jmp L_error_incorrect_arity_simple
 10514                                  .L_lambda_simple_arity_check_ok_0043:
 10515 00007C33 C8000000                	enter 0, 0
 10516 00007C37 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10517 00007C3C E8B79A0000              	call malloc
 10518 00007C41 50                      	push rax
 10519 00007C42 BF08000000              	mov rdi, 8 * 1	; new rib
 10520 00007C47 E8AC9A0000              	call malloc
 10521 00007C4C 50                      	push rax
 10522 00007C4D BF10000000              	mov rdi, 8 * 2	; extended env
 10523 00007C52 E8A19A0000              	call malloc
 10524 00007C57 488B7D10                	mov rdi, ENV
 10525 00007C5B BE00000000              	mov rsi, 0
 10526 00007C60 BA01000000              	mov rdx, 1
 10527                                  .L_lambda_simple_env_loop_0044:	; ext_env[i + 1] <-- env[i]
 10528 00007C65 4883FE01                	cmp rsi, 1
 10529 00007C69 7410                    	je .L_lambda_simple_env_end_0044
 10530 00007C6B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10531 00007C6F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10532 00007C73 48FFC6                  	inc rsi
 10533 00007C76 48FFC2                  	inc rdx
 10534 00007C79 EBEA                    	jmp .L_lambda_simple_env_loop_0044
 10535                                  .L_lambda_simple_env_end_0044:
 10536 00007C7B 5B                      	pop rbx
 10537 00007C7C BE00000000              	mov rsi, 0
 10538                                  .L_lambda_simple_params_loop_0044:	; copy params
 10539 00007C81 4883FE01                	cmp rsi, 1
 10540 00007C85 740E                    	je .L_lambda_simple_params_end_0044
 10541 00007C87 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10542 00007C8C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10543 00007C90 48FFC6                  	inc rsi
 10544 00007C93 EBEC                    	jmp .L_lambda_simple_params_loop_0044
 10545                                  .L_lambda_simple_params_end_0044:
 10546 00007C95 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10547 00007C98 4889C3                  	mov rbx, rax
 10548 00007C9B 58                      	pop rax
 10549 00007C9C C60005                  	mov byte [rax], T_closure
 10550 00007C9F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10551 00007CA3 48C74009[B07C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0044
 10552 00007CAB E96C040000              	jmp .L_lambda_simple_end_0044
 10553                                  .L_lambda_simple_code_0044:	; lambda-simple body
 10554 00007CB0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10555 00007CB6 740B                    	je .L_lambda_simple_arity_check_ok_0044
 10556 00007CB8 FF742410                	push qword [rsp + 8 * 2]
 10557 00007CBC 6A02                    	push 2
 10558 00007CBE E9EE990000              	jmp L_error_incorrect_arity_simple
 10559                                  .L_lambda_simple_arity_check_ok_0044:
 10560 00007CC3 C8000000                	enter 0, 0
 10561 00007CC7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10562 00007CCB 50                      	push rax
 10563 00007CCC 6A01                    	push 1
 10564 00007CCE 488B0425[48000000]      	mov rax, qword [free_var_9]
 10565                                  	assert_closure(rax)
    42 00007CD6 803805              <1>  cmp byte [%1], %2
    43 00007CD9 0F850DB20000        <1>  jne L_error_incorrect_type
 10566 00007CDF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10567 00007CE2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10568                                  
 10569 00007CE5 483D[02000000]                  	cmp rax, sob_boolean_false
 10570                                  
 10571 00007CEB 0F84CA010000                    	je .L_if_else_0024
 10572 00007CF1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10573 00007CF5 50                      	push rax
 10574 00007CF6 6A01                    	push 1
 10575 00007CF8 488B0425[48000000]      	mov rax, qword [free_var_9]
 10576                                  	assert_closure(rax)
    42 00007D00 803805              <1>  cmp byte [%1], %2
    43 00007D03 0F85E3B10000        <1>  jne L_error_incorrect_type
 10577 00007D09 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10578 00007D0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 10579                                  
 10580 00007D0F 483D[02000000]                  	cmp rax, sob_boolean_false
 10581                                  
 10582 00007D15 7479                            	je .L_if_else_0028
 10583 00007D17 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10584 00007D1B 50                      	push rax
 10585 00007D1C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10586 00007D20 50                      	push rax
 10587 00007D21 6A02                    	push 2
 10588 00007D23 488B0425[28010000]      	mov rax, qword [free_var_37]
 10589                                  .L_applic_TC_005c:
 10590 00007D2B 803805                  	cmp byte [rax], T_closure
 10591 00007D2E 0F8579A90000            	jne L_code_ptr_error
 10592 00007D34 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10593 00007D38 53                      	push rbx
 10594 00007D39 FF7508                  	push qword [rbp + 8]
 10595 00007D3C FF7500                  	push qword [rbp]
 10596 00007D3F 488B4D18                	mov rcx, [rbp + 3 * 8]
 10597 00007D43 488B542418              	mov rdx, [rsp + 3 * 8]
 10598 00007D48 488D7204                	lea rsi, [rdx + 4]
 10599 00007D4C 4C8D4EFF                	lea r9, [rsi - 1]
 10600 00007D50 488D7903                	lea rdi, [rcx + 3]
 10601 00007D54 4D31C0                  	xor r8, r8
 10602                                  .L_tc_recycle_frame_loop_005c:
 10603 00007D57 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10604 00007D5B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10605 00007D60 49FFC9                  	dec r9
 10606 00007D63 4D31C0                  	xor r8, r8
 10607 00007D66 48FFCF                  	dec rdi
 10608 00007D69 48FFCE                  	dec rsi
 10609 00007D6C 4883FE00                	cmp rsi, 0
 10610 00007D70 75E5                    	jne .L_tc_recycle_frame_loop_005c
 10611                                  .L_tc_recycle_frame_done_005c:
 10612                                  ;this pop rbp in sot to the right place
 10613 00007D72 4989C9                  	mov r9, rcx
 10614 00007D75 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10615 00007D7D 4C01CC                  	add rsp, r9
 10616 00007D80 5D                      	pop rbp
 10617 00007D81 488B4D00                	mov rcx, qword [rbp]
 10618 00007D85 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10619 00007D89 FFE3                    	jmp rbx
 10620                                  
 10621 00007D8B E926010000                      	jmp .L_if_end_0028
 10622                                  
 10623                                          	.L_if_else_0028:
 10624 00007D90 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10625 00007D94 50                      	push rax
 10626 00007D95 6A01                    	push 1
 10627 00007D97 488B0425[40000000]      	mov rax, qword [free_var_8]
 10628                                  	assert_closure(rax)
    42 00007D9F 803805              <1>  cmp byte [%1], %2
    43 00007DA2 0F8544B10000        <1>  jne L_error_incorrect_type
 10629 00007DA8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10630 00007DAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 10631                                  
 10632 00007DAE 483D[02000000]                  	cmp rax, sob_boolean_false
 10633                                  
 10634 00007DB4 0F8490000000                    	je .L_if_else_0029
 10635 00007DBA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10636 00007DBE 50                      	push rax
 10637 00007DBF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10638 00007DC3 50                      	push rax
 10639 00007DC4 6A01                    	push 1
 10640 00007DC6 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10641                                  	assert_closure(rax)
    42 00007DCE 803805              <1>  cmp byte [%1], %2
    43 00007DD1 0F8515B10000        <1>  jne L_error_incorrect_type
 10642 00007DD7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10643 00007DDA FF5009                  	call SOB_CLOSURE_CODE(rax)
 10644 00007DDD 50                      	push rax
 10645 00007DDE 6A02                    	push 2
 10646 00007DE0 488B0425[08010000]      	mov rax, qword [free_var_33]
 10647                                  .L_applic_TC_005b:
 10648 00007DE8 803805                  	cmp byte [rax], T_closure
 10649 00007DEB 0F85BCA80000            	jne L_code_ptr_error
 10650 00007DF1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10651 00007DF5 53                      	push rbx
 10652 00007DF6 FF7508                  	push qword [rbp + 8]
 10653 00007DF9 FF7500                  	push qword [rbp]
 10654 00007DFC 488B4D18                	mov rcx, [rbp + 3 * 8]
 10655 00007E00 488B542418              	mov rdx, [rsp + 3 * 8]
 10656 00007E05 488D7204                	lea rsi, [rdx + 4]
 10657 00007E09 4C8D4EFF                	lea r9, [rsi - 1]
 10658 00007E0D 488D7903                	lea rdi, [rcx + 3]
 10659 00007E11 4D31C0                  	xor r8, r8
 10660                                  .L_tc_recycle_frame_loop_005b:
 10661 00007E14 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10662 00007E18 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10663 00007E1D 49FFC9                  	dec r9
 10664 00007E20 4D31C0                  	xor r8, r8
 10665 00007E23 48FFCF                  	dec rdi
 10666 00007E26 48FFCE                  	dec rsi
 10667 00007E29 4883FE00                	cmp rsi, 0
 10668 00007E2D 75E5                    	jne .L_tc_recycle_frame_loop_005b
 10669                                  .L_tc_recycle_frame_done_005b:
 10670                                  ;this pop rbp in sot to the right place
 10671 00007E2F 4989C9                  	mov r9, rcx
 10672 00007E32 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10673 00007E3A 4C01CC                  	add rsp, r9
 10674 00007E3D 5D                      	pop rbp
 10675 00007E3E 488B4D00                	mov rcx, qword [rbp]
 10676 00007E42 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10677 00007E46 FFE3                    	jmp rbx
 10678                                  
 10679 00007E48 EB6C                            	jmp .L_if_end_0029
 10680                                  
 10681                                          	.L_if_else_0029:
 10682 00007E4A 6A00                    	push 0
 10683 00007E4C 488B4510                	mov rax, qword [rbp + 8 * 2]
 10684                                  
 10685 00007E50 488B00                                            	mov rax, qword[rax + 8 * 0]
 10686                                  
 10687 00007E53 488B00                                            	mov rax, qword[rax + 8 * 0]
 10688                                  .L_applic_TC_005a:
 10689 00007E56 803805                  	cmp byte [rax], T_closure
 10690 00007E59 0F854EA80000            	jne L_code_ptr_error
 10691 00007E5F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10692 00007E63 53                      	push rbx
 10693 00007E64 FF7508                  	push qword [rbp + 8]
 10694 00007E67 FF7500                  	push qword [rbp]
 10695 00007E6A 488B4D18                	mov rcx, [rbp + 3 * 8]
 10696 00007E6E 488B542418              	mov rdx, [rsp + 3 * 8]
 10697 00007E73 488D7204                	lea rsi, [rdx + 4]
 10698 00007E77 4C8D4EFF                	lea r9, [rsi - 1]
 10699 00007E7B 488D7903                	lea rdi, [rcx + 3]
 10700 00007E7F 4D31C0                  	xor r8, r8
 10701                                  .L_tc_recycle_frame_loop_005a:
 10702 00007E82 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10703 00007E86 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10704 00007E8B 49FFC9                  	dec r9
 10705 00007E8E 4D31C0                  	xor r8, r8
 10706 00007E91 48FFCF                  	dec rdi
 10707 00007E94 48FFCE                  	dec rsi
 10708 00007E97 4883FE00                	cmp rsi, 0
 10709 00007E9B 75E5                    	jne .L_tc_recycle_frame_loop_005a
 10710                                  .L_tc_recycle_frame_done_005a:
 10711                                  ;this pop rbp in sot to the right place
 10712 00007E9D 4989C9                  	mov r9, rcx
 10713 00007EA0 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10714 00007EA8 4C01CC                  	add rsp, r9
 10715 00007EAB 5D                      	pop rbp
 10716 00007EAC 488B4D00                	mov rcx, qword [rbp]
 10717 00007EB0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10718 00007EB4 FFE3                    	jmp rbx
 10719                                  
 10720                                          	.L_if_end_0029:
 10721                                  
 10722                                          	.L_if_end_0028:
 10723                                  
 10724 00007EB6 E95D020000                      	jmp .L_if_end_0024
 10725                                  
 10726                                          	.L_if_else_0024:
 10727 00007EBB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10728 00007EBF 50                      	push rax
 10729 00007EC0 6A01                    	push 1
 10730 00007EC2 488B0425[40000000]      	mov rax, qword [free_var_8]
 10731                                  	assert_closure(rax)
    42 00007ECA 803805              <1>  cmp byte [%1], %2
    43 00007ECD 0F8519B00000        <1>  jne L_error_incorrect_type
 10732 00007ED3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10733 00007ED6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10734                                  
 10735 00007ED9 483D[02000000]                  	cmp rax, sob_boolean_false
 10736                                  
 10737 00007EDF 0F84C7010000                    	je .L_if_else_0025
 10738 00007EE5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10739 00007EE9 50                      	push rax
 10740 00007EEA 6A01                    	push 1
 10741 00007EEC 488B0425[48000000]      	mov rax, qword [free_var_9]
 10742                                  	assert_closure(rax)
    42 00007EF4 803805              <1>  cmp byte [%1], %2
    43 00007EF7 0F85EFAF0000        <1>  jne L_error_incorrect_type
 10743 00007EFD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10744 00007F00 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10745                                  
 10746 00007F03 483D[02000000]                  	cmp rax, sob_boolean_false
 10747                                  
 10748 00007F09 0F8493000000                    	je .L_if_else_0026
 10749 00007F0F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10750 00007F13 50                      	push rax
 10751 00007F14 6A01                    	push 1
 10752 00007F16 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10753                                  	assert_closure(rax)
    42 00007F1E 803805              <1>  cmp byte [%1], %2
    43 00007F21 0F85C5AF0000        <1>  jne L_error_incorrect_type
 10754 00007F27 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10755 00007F2A FF5009                  	call SOB_CLOSURE_CODE(rax)
 10756 00007F2D 50                      	push rax
 10757 00007F2E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10758 00007F32 50                      	push rax
 10759 00007F33 6A02                    	push 2
 10760 00007F35 488B0425[08010000]      	mov rax, qword [free_var_33]
 10761                                  .L_applic_TC_0059:
 10762 00007F3D 803805                  	cmp byte [rax], T_closure
 10763 00007F40 0F8567A70000            	jne L_code_ptr_error
 10764 00007F46 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10765 00007F4A 53                      	push rbx
 10766 00007F4B FF7508                  	push qword [rbp + 8]
 10767 00007F4E FF7500                  	push qword [rbp]
 10768 00007F51 488B4D18                	mov rcx, [rbp + 3 * 8]
 10769 00007F55 488B542418              	mov rdx, [rsp + 3 * 8]
 10770 00007F5A 488D7204                	lea rsi, [rdx + 4]
 10771 00007F5E 4C8D4EFF                	lea r9, [rsi - 1]
 10772 00007F62 488D7903                	lea rdi, [rcx + 3]
 10773 00007F66 4D31C0                  	xor r8, r8
 10774                                  .L_tc_recycle_frame_loop_0059:
 10775 00007F69 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10776 00007F6D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10777 00007F72 49FFC9                  	dec r9
 10778 00007F75 4D31C0                  	xor r8, r8
 10779 00007F78 48FFCF                  	dec rdi
 10780 00007F7B 48FFCE                  	dec rsi
 10781 00007F7E 4883FE00                	cmp rsi, 0
 10782 00007F82 75E5                    	jne .L_tc_recycle_frame_loop_0059
 10783                                  .L_tc_recycle_frame_done_0059:
 10784                                  ;this pop rbp in sot to the right place
 10785 00007F84 4989C9                  	mov r9, rcx
 10786 00007F87 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10787 00007F8F 4C01CC                  	add rsp, r9
 10788 00007F92 5D                      	pop rbp
 10789 00007F93 488B4D00                	mov rcx, qword [rbp]
 10790 00007F97 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10791 00007F9B FFE3                    	jmp rbx
 10792                                  
 10793 00007F9D E908010000                      	jmp .L_if_end_0026
 10794                                  
 10795                                          	.L_if_else_0026:
 10796 00007FA2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10797 00007FA6 50                      	push rax
 10798 00007FA7 6A01                    	push 1
 10799 00007FA9 488B0425[40000000]      	mov rax, qword [free_var_8]
 10800                                  	assert_closure(rax)
    42 00007FB1 803805              <1>  cmp byte [%1], %2
    43 00007FB4 0F8532AF0000        <1>  jne L_error_incorrect_type
 10801 00007FBA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 10802 00007FBD FF5009                  	call SOB_CLOSURE_CODE(rax)
 10803                                  
 10804 00007FC0 483D[02000000]                  	cmp rax, sob_boolean_false
 10805                                  
 10806 00007FC6 7476                            	je .L_if_else_0027
 10807 00007FC8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 10808 00007FCC 50                      	push rax
 10809 00007FCD 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 10810 00007FD1 50                      	push rax
 10811 00007FD2 6A02                    	push 2
 10812 00007FD4 488B0425[08010000]      	mov rax, qword [free_var_33]
 10813                                  .L_applic_TC_0058:
 10814 00007FDC 803805                  	cmp byte [rax], T_closure
 10815 00007FDF 0F85C8A60000            	jne L_code_ptr_error
 10816 00007FE5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10817 00007FE9 53                      	push rbx
 10818 00007FEA FF7508                  	push qword [rbp + 8]
 10819 00007FED FF7500                  	push qword [rbp]
 10820 00007FF0 488B4D18                	mov rcx, [rbp + 3 * 8]
 10821 00007FF4 488B542418              	mov rdx, [rsp + 3 * 8]
 10822 00007FF9 488D7204                	lea rsi, [rdx + 4]
 10823 00007FFD 4C8D4EFF                	lea r9, [rsi - 1]
 10824 00008001 488D7903                	lea rdi, [rcx + 3]
 10825 00008005 4D31C0                  	xor r8, r8
 10826                                  .L_tc_recycle_frame_loop_0058:
 10827 00008008 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10828 0000800C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10829 00008011 49FFC9                  	dec r9
 10830 00008014 4D31C0                  	xor r8, r8
 10831 00008017 48FFCF                  	dec rdi
 10832 0000801A 48FFCE                  	dec rsi
 10833 0000801D 4883FE00                	cmp rsi, 0
 10834 00008021 75E5                    	jne .L_tc_recycle_frame_loop_0058
 10835                                  .L_tc_recycle_frame_done_0058:
 10836                                  ;this pop rbp in sot to the right place
 10837 00008023 4989C9                  	mov r9, rcx
 10838 00008026 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10839 0000802E 4C01CC                  	add rsp, r9
 10840 00008031 5D                      	pop rbp
 10841 00008032 488B4D00                	mov rcx, qword [rbp]
 10842 00008036 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10843 0000803A FFE3                    	jmp rbx
 10844                                  
 10845 0000803C EB6C                            	jmp .L_if_end_0027
 10846                                  
 10847                                          	.L_if_else_0027:
 10848 0000803E 6A00                    	push 0
 10849 00008040 488B4510                	mov rax, qword [rbp + 8 * 2]
 10850                                  
 10851 00008044 488B00                                            	mov rax, qword[rax + 8 * 0]
 10852                                  
 10853 00008047 488B00                                            	mov rax, qword[rax + 8 * 0]
 10854                                  .L_applic_TC_0057:
 10855 0000804A 803805                  	cmp byte [rax], T_closure
 10856 0000804D 0F855AA60000            	jne L_code_ptr_error
 10857 00008053 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10858 00008057 53                      	push rbx
 10859 00008058 FF7508                  	push qword [rbp + 8]
 10860 0000805B FF7500                  	push qword [rbp]
 10861 0000805E 488B4D18                	mov rcx, [rbp + 3 * 8]
 10862 00008062 488B542418              	mov rdx, [rsp + 3 * 8]
 10863 00008067 488D7204                	lea rsi, [rdx + 4]
 10864 0000806B 4C8D4EFF                	lea r9, [rsi - 1]
 10865 0000806F 488D7903                	lea rdi, [rcx + 3]
 10866 00008073 4D31C0                  	xor r8, r8
 10867                                  .L_tc_recycle_frame_loop_0057:
 10868 00008076 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10869 0000807A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10870 0000807F 49FFC9                  	dec r9
 10871 00008082 4D31C0                  	xor r8, r8
 10872 00008085 48FFCF                  	dec rdi
 10873 00008088 48FFCE                  	dec rsi
 10874 0000808B 4883FE00                	cmp rsi, 0
 10875 0000808F 75E5                    	jne .L_tc_recycle_frame_loop_0057
 10876                                  .L_tc_recycle_frame_done_0057:
 10877                                  ;this pop rbp in sot to the right place
 10878 00008091 4989C9                  	mov r9, rcx
 10879 00008094 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10880 0000809C 4C01CC                  	add rsp, r9
 10881 0000809F 5D                      	pop rbp
 10882 000080A0 488B4D00                	mov rcx, qword [rbp]
 10883 000080A4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10884 000080A8 FFE3                    	jmp rbx
 10885                                  
 10886                                          	.L_if_end_0027:
 10887                                  
 10888                                          	.L_if_end_0026:
 10889                                  
 10890 000080AA EB6C                            	jmp .L_if_end_0025
 10891                                  
 10892                                          	.L_if_else_0025:
 10893 000080AC 6A00                    	push 0
 10894 000080AE 488B4510                	mov rax, qword [rbp + 8 * 2]
 10895                                  
 10896 000080B2 488B00                                            	mov rax, qword[rax + 8 * 0]
 10897                                  
 10898 000080B5 488B00                                            	mov rax, qword[rax + 8 * 0]
 10899                                  .L_applic_TC_0056:
 10900 000080B8 803805                  	cmp byte [rax], T_closure
 10901 000080BB 0F85ECA50000            	jne L_code_ptr_error
 10902 000080C1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 10903 000080C5 53                      	push rbx
 10904 000080C6 FF7508                  	push qword [rbp + 8]
 10905 000080C9 FF7500                  	push qword [rbp]
 10906 000080CC 488B4D18                	mov rcx, [rbp + 3 * 8]
 10907 000080D0 488B542418              	mov rdx, [rsp + 3 * 8]
 10908 000080D5 488D7204                	lea rsi, [rdx + 4]
 10909 000080D9 4C8D4EFF                	lea r9, [rsi - 1]
 10910 000080DD 488D7903                	lea rdi, [rcx + 3]
 10911 000080E1 4D31C0                  	xor r8, r8
 10912                                  .L_tc_recycle_frame_loop_0056:
 10913 000080E4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 10914 000080E8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 10915 000080ED 49FFC9                  	dec r9
 10916 000080F0 4D31C0                  	xor r8, r8
 10917 000080F3 48FFCF                  	dec rdi
 10918 000080F6 48FFCE                  	dec rsi
 10919 000080F9 4883FE00                	cmp rsi, 0
 10920 000080FD 75E5                    	jne .L_tc_recycle_frame_loop_0056
 10921                                  .L_tc_recycle_frame_done_0056:
 10922                                  ;this pop rbp in sot to the right place
 10923 000080FF 4989C9                  	mov r9, rcx
 10924 00008102 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 10925 0000810A 4C01CC                  	add rsp, r9
 10926 0000810D 5D                      	pop rbp
 10927 0000810E 488B4D00                	mov rcx, qword [rbp]
 10928 00008112 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 10929 00008116 FFE3                    	jmp rbx
 10930                                  
 10931                                          	.L_if_end_0025:
 10932                                  
 10933                                          	.L_if_end_0024:
 10934 00008118 C9                      	leave
 10935 00008119 C22000                  	ret 8 * (2 + 2)
 10936                                  .L_lambda_simple_end_0044:	; new closure is in rax
 10937 0000811C 50                      	push rax
 10938 0000811D 6A01                    	push 1
 10939 0000811F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10940 00008124 E8CF950000              	call malloc
 10941 00008129 50                      	push rax
 10942 0000812A BF08000000              	mov rdi, 8 * 1	; new rib
 10943 0000812F E8C4950000              	call malloc
 10944 00008134 50                      	push rax
 10945 00008135 BF10000000              	mov rdi, 8 * 2	; extended env
 10946 0000813A E8B9950000              	call malloc
 10947 0000813F 488B7D10                	mov rdi, ENV
 10948 00008143 BE00000000              	mov rsi, 0
 10949 00008148 BA01000000              	mov rdx, 1
 10950                                  .L_lambda_simple_env_loop_0045:	; ext_env[i + 1] <-- env[i]
 10951 0000814D 4883FE01                	cmp rsi, 1
 10952 00008151 7410                    	je .L_lambda_simple_env_end_0045
 10953 00008153 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10954 00008157 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10955 0000815B 48FFC6                  	inc rsi
 10956 0000815E 48FFC2                  	inc rdx
 10957 00008161 EBEA                    	jmp .L_lambda_simple_env_loop_0045
 10958                                  .L_lambda_simple_env_end_0045:
 10959 00008163 5B                      	pop rbx
 10960 00008164 BE00000000              	mov rsi, 0
 10961                                  .L_lambda_simple_params_loop_0045:	; copy params
 10962 00008169 4883FE01                	cmp rsi, 1
 10963 0000816D 740E                    	je .L_lambda_simple_params_end_0045
 10964 0000816F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10965 00008174 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10966 00008178 48FFC6                  	inc rsi
 10967 0000817B EBEC                    	jmp .L_lambda_simple_params_loop_0045
 10968                                  .L_lambda_simple_params_end_0045:
 10969 0000817D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10970 00008180 4889C3                  	mov rbx, rax
 10971 00008183 58                      	pop rax
 10972 00008184 C60005                  	mov byte [rax], T_closure
 10973 00008187 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10974 0000818B 48C74009[98810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0045
 10975 00008193 E9F3030000              	jmp .L_lambda_simple_end_0045
 10976                                  .L_lambda_simple_code_0045:	; lambda-simple body
 10977 00008198 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10978 0000819E 740B                    	je .L_lambda_simple_arity_check_ok_0045
 10979 000081A0 FF742410                	push qword [rsp + 8 * 2]
 10980 000081A4 6A01                    	push 1
 10981 000081A6 E906950000              	jmp L_error_incorrect_arity_simple
 10982                                  .L_lambda_simple_arity_check_ok_0045:
 10983 000081AB C8000000                	enter 0, 0
 10984 000081AF BF11000000              	mov rdi, (1 + 8 + 8)
 10985 000081B4 E83F950000              	call malloc
 10986 000081B9 50                      	push rax
 10987 000081BA BF08000000              	mov rdi, 8 * 1
 10988 000081BF E834950000              	call malloc
 10989 000081C4 50                      	push rax
 10990 000081C5 BF18000000              	mov rdi, 8 * 3
 10991 000081CA E829950000              	call malloc
 10992 000081CF 488B7D10                	mov rdi, ENV
 10993 000081D3 4831F6                  	xor rsi, rsi
 10994 000081D6 4831D2                  	xor rdx, rdx
 10995 000081D9 48FFC2                  	inc rdx
 10996                                  	.L_lambda_opt_env_loop_000d:
 10997                                  
 10998 000081DC 4883FE02                        	cmp rsi, 2
 10999                                  
 11000 000081E0 7412                            	je .L_lambda_opt_env_end_000d
 11001 000081E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11002 000081E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11003 000081EA 4883C201                	add rdx, 1
 11004 000081EE 4883C601                	add rsi, 1
 11005 000081F2 EBE8                    	jmp .L_lambda_opt_env_loop_000d
 11006                                  
 11007                                          	.L_lambda_opt_env_end_000d:
 11008 000081F4 5B                      	pop rbx
 11009 000081F5 4831F6                  	xor rsi, rsi
 11010                                  	.L_lambda_opt_params_loop_000d:
 11011                                  
 11012 000081F8 4883FE01                        	cmp rsi, 1
 11013                                  
 11014 000081FC 740F                            	je .L_lambda_opt_params_end_000d
 11015 000081FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11016 00008203 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11017 00008207 4883C601                	add rsi, 1
 11018 0000820B EBEB                    	jmp .L_lambda_opt_params_loop_000d
 11019                                  
 11020                                          	.L_lambda_opt_params_end_000d:
 11021 0000820D 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 11022 00008210 4889C3                  	mov rbx, rax
 11023 00008213 58                      	pop rax
 11024 00008214 C60005                  	mov byte [rax], T_closure
 11025 00008217 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11026 0000821B 48C74009[28820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000d
 11027                                  
 11028 00008223 E95F030000                      	jmp .L_lambda_opt_end_000d
 11029                                  
 11030                                          	.L_lambda_opt_code_000d:
 11031                                  
 11032 00008228 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 11033                                  
 11034 0000822E 740D                            	je .L_lambda_opt_arity_check_exact_000d  ;same num_of_args
 11035                                  
 11036 00008230 7F65                            	jg .L_lambda_opt_arity_check_more_000d  ;greater num_of_args
 11037 00008232 FF742410                	push qword [rsp + 8 * 2]
 11038 00008236 6A01                    	push 1
 11039 00008238 E988940000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 11040                                  .L_lambda_opt_arity_check_exact_000d:
 11041 0000823D 4883EC08                	sub rsp, 8 * 1
 11042 00008241 488D7F10                	lea rdi, [rdi + (8 * 2)]
 11043 00008245 4889E7                  	mov rdi, rsp 
 11044 00008248 488B4708                	mov rax, qword [rdi + 8]
 11045 0000824C 488907                  	mov qword [rdi], rax
 11046 0000824F 488D7F08                	lea rdi, [rdi + 8]
 11047 00008253 488B4708                	mov rax, qword [rdi + 8]
 11048 00008257 488907                  	mov qword [rdi], rax
 11049 0000825A 488D7F08                	lea rdi, [rdi + 8]
 11050 0000825E 488B4708                	mov rax, qword [rdi + 8]
 11051 00008262 4889C1                  	mov rcx, rax
 11052 00008265 4883C001                	add rax, 1
 11053 00008269 488907                  	mov qword [rdi], rax
 11054 0000826C 488D7F08                	lea rdi, [rdi + 8]
 11055                                  	.L_lambda_opt_stack_shrink_loop_0025:
 11056 00008270 4883F900                	cmp rcx, 0
 11057 00008274 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0025
 11058 00008276 4883E901                	sub rcx, 1
 11059 0000827A 488D4010                	lea rax, [rax + (8 * 2)]
 11060 0000827E 488B4708                	mov rax, qword [rdi + 8]
 11061 00008282 488907                  	mov qword [rdi], rax
 11062 00008285 488D7F08                	lea rdi, [rdi + 8]
 11063 00008289 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0025
 11064                                  
 11065                                          	.L_lambda_opt_stack_shrink_loop_exit_0025:
 11066 0000828B 48C707[01000000]        	mov qword [rdi], sob_nil
 11067 00008292 E997000000              	jmp .L_lambda_opt_stack_adjusted_000d
 11068                                  
 11069                                          	.L_lambda_opt_arity_check_more_000d:
 11070 00008297 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 11071 0000829C 488D4EFF                	lea rcx, [rsi - 1]
 11072 000082A0 49B8-                   	mov r8, sob_nil
 11072 000082A2 [0100000000000000] 
 11073 000082AA 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 11074 000082AF 4889F2                  	mov rdx, rsi
 11075                                  	.L_lambda_opt_stack_shrink_loop_0026:
 11076 000082B2 4883F900                	cmp rcx, 0
 11077 000082B6 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0026
 11078 000082B8 BF11000000              	mov rdi, 1 + (8 * 2)
 11079 000082BD E836940000              	call malloc
 11080 000082C2 C60021                  	mov byte [rax], T_pair
 11081 000082C5 488B1E                  	mov rbx, qword [rsi]
 11082 000082C8 48895801                	mov SOB_PAIR_CAR(rax), rbx
 11083 000082CC 4C894009                	mov SOB_PAIR_CDR(rax), r8
 11084 000082D0 4883C6F8                	add rsi, -8
 11085 000082D4 4883E901                	sub rcx, 1
 11086 000082D8 4989C0                  	mov r8, rax
 11087 000082DB EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0026
 11088                                  
 11089                                          	.L_lambda_opt_stack_shrink_loop_exit_0026:
 11090 000082DD 4C8902                  	mov qword [rdx], r8
 11091 000082E0 4883EA08                	sub rdx, 8 * 1
 11092 000082E4 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 11093                                  
 11094 000082E9 B901000000                      	mov rcx, 1 
 11095                                  
 11096                                          	.L_lambda_opt_stack_shrink_loop_0027:
 11097 000082EE 4883F900                	cmp rcx, 0
 11098 000082F2 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0027
 11099 000082F4 488B06                  	mov rax, qword [rsi]
 11100 000082F7 488902                  	mov qword [rdx], rax
 11101 000082FA 488D76F8                	lea rsi, [rsi - 8]
 11102 000082FE 4883C2F8                	add rdx, -8
 11103 00008302 4883C1FF                	add rcx, -1
 11104 00008306 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0027
 11105                                  
 11106                                          	.L_lambda_opt_stack_shrink_loop_exit_0027:
 11107                                  
 11108 00008308 48C70202000000                  	mov qword [rdx], 1 + 1
 11109 0000830F 4883C6F8                	add rsi, -8
 11110 00008313 4883C2F8                	add rdx, -8
 11111 00008317 488B06                  	mov rax, qword [rsi]
 11112 0000831A 488902                  	mov qword [rdx], rax
 11113 0000831D 4883C2F8                	add rdx, -8
 11114 00008321 488D76F8                	lea rsi, [rsi - 8]
 11115 00008325 488B06                  	mov rax, qword [rsi]
 11116 00008328 488902                  	mov qword [rdx], rax
 11117 0000832B 4889D4                  	mov rsp, rdx
 11118                                  	.L_lambda_opt_stack_adjusted_000d:
 11119 0000832E C8000000                	enter 0, 0
 11120 00008332 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11121 00008336 50                      	push rax
 11122 00008337 6A01                    	push 1
 11123 00008339 488B0425[00000000]      	mov rax, qword [free_var_0]
 11124                                  	assert_closure(rax)
    42 00008341 803805              <1>  cmp byte [%1], %2
    43 00008344 0F85A2AB0000        <1>  jne L_error_incorrect_type
 11125 0000834A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11126 0000834D FF5009                  	call SOB_CLOSURE_CODE(rax)
 11127                                  
 11128 00008350 483D[02000000]                  	cmp rax, sob_boolean_false
 11129                                  
 11130 00008356 0F8481000000                    	je .L_if_else_002a
 11131 0000835C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11132 00008360 50                      	push rax
 11133 00008361 48B8-                   	mov rax,L_constants + 128
 11133 00008363 [8000000000000000] 
 11134 0000836B 50                      	push rax
 11135 0000836C 6A02                    	push 2
 11136 0000836E 488B4510                	mov rax, qword [rbp + 8 * 2]
 11137                                  
 11138 00008372 488B00                                            	mov rax, qword[rax + 8 * 0]
 11139                                  
 11140 00008375 488B00                                            	mov rax, qword[rax + 8 * 0]
 11141                                  .L_applic_TC_005f:
 11142 00008378 803805                  	cmp byte [rax], T_closure
 11143 0000837B 0F852CA30000            	jne L_code_ptr_error
 11144 00008381 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11145 00008385 53                      	push rbx
 11146 00008386 FF7508                  	push qword [rbp + 8]
 11147 00008389 FF7500                  	push qword [rbp]
 11148 0000838C 488B4D18                	mov rcx, [rbp + 3 * 8]
 11149 00008390 488B542418              	mov rdx, [rsp + 3 * 8]
 11150 00008395 488D7204                	lea rsi, [rdx + 4]
 11151 00008399 4C8D4EFF                	lea r9, [rsi - 1]
 11152 0000839D 488D7903                	lea rdi, [rcx + 3]
 11153 000083A1 4D31C0                  	xor r8, r8
 11154                                  .L_tc_recycle_frame_loop_005f:
 11155 000083A4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11156 000083A8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11157 000083AD 49FFC9                  	dec r9
 11158 000083B0 4D31C0                  	xor r8, r8
 11159 000083B3 48FFCF                  	dec rdi
 11160 000083B6 48FFCE                  	dec rsi
 11161 000083B9 4883FE00                	cmp rsi, 0
 11162 000083BD 75E5                    	jne .L_tc_recycle_frame_loop_005f
 11163                                  .L_tc_recycle_frame_done_005f:
 11164                                  ;this pop rbp in sot to the right place
 11165 000083BF 4989C9                  	mov r9, rcx
 11166 000083C2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11167 000083CA 4C01CC                  	add rsp, r9
 11168 000083CD 5D                      	pop rbp
 11169 000083CE 488B4D00                	mov rcx, qword [rbp]
 11170 000083D2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11171 000083D6 FFE3                    	jmp rbx
 11172                                  
 11173 000083D8 E9A6010000                      	jmp .L_if_end_002a
 11174                                  
 11175                                          	.L_if_else_002a:
 11176 000083DD 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11177 000083E1 50                      	push rax
 11178 000083E2 48B8-                   	mov rax,L_constants + 128
 11178 000083E4 [8000000000000000] 
 11179 000083EC 50                      	push rax
 11180 000083ED 488B0425[18030000]      	mov rax, qword [free_var_99]
 11181 000083F5 50                      	push rax
 11182 000083F6 6A03                    	push 3
 11183 000083F8 488B0425[F8020000]      	mov rax, qword [free_var_95]
 11184                                  	assert_closure(rax)
    42 00008400 803805              <1>  cmp byte [%1], %2
    43 00008403 0F85E3AA0000        <1>  jne L_error_incorrect_type
 11185 00008409 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11186 0000840C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11187 0000840F 50                      	push rax
 11188 00008410 6A01                    	push 1
 11189 00008412 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11190 00008417 E8DC920000              	call malloc
 11191 0000841C 50                      	push rax
 11192 0000841D BF10000000              	mov rdi, 8 * 2	; new rib
 11193 00008422 E8D1920000              	call malloc
 11194 00008427 50                      	push rax
 11195 00008428 BF20000000              	mov rdi, 8 * 4	; extended env
 11196 0000842D E8C6920000              	call malloc
 11197 00008432 488B7D10                	mov rdi, ENV
 11198 00008436 BE00000000              	mov rsi, 0
 11199 0000843B BA01000000              	mov rdx, 1
 11200                                  .L_lambda_simple_env_loop_0046:	; ext_env[i + 1] <-- env[i]
 11201 00008440 4883FE03                	cmp rsi, 3
 11202 00008444 7410                    	je .L_lambda_simple_env_end_0046
 11203 00008446 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11204 0000844A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11205 0000844E 48FFC6                  	inc rsi
 11206 00008451 48FFC2                  	inc rdx
 11207 00008454 EBEA                    	jmp .L_lambda_simple_env_loop_0046
 11208                                  .L_lambda_simple_env_end_0046:
 11209 00008456 5B                      	pop rbx
 11210 00008457 BE00000000              	mov rsi, 0
 11211                                  .L_lambda_simple_params_loop_0046:	; copy params
 11212 0000845C 4883FE02                	cmp rsi, 2
 11213 00008460 740E                    	je .L_lambda_simple_params_end_0046
 11214 00008462 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11215 00008467 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11216 0000846B 48FFC6                  	inc rsi
 11217 0000846E EBEC                    	jmp .L_lambda_simple_params_loop_0046
 11218                                  .L_lambda_simple_params_end_0046:
 11219 00008470 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11220 00008473 4889C3                  	mov rbx, rax
 11221 00008476 58                      	pop rax
 11222 00008477 C60005                  	mov byte [rax], T_closure
 11223 0000847A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11224 0000847E 48C74009[8B840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0046
 11225 00008486 E998000000              	jmp .L_lambda_simple_end_0046
 11226                                  .L_lambda_simple_code_0046:	; lambda-simple body
 11227 0000848B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11228 00008491 740B                    	je .L_lambda_simple_arity_check_ok_0046
 11229 00008493 FF742410                	push qword [rsp + 8 * 2]
 11230 00008497 6A01                    	push 1
 11231 00008499 E913920000              	jmp L_error_incorrect_arity_simple
 11232                                  .L_lambda_simple_arity_check_ok_0046:
 11233 0000849E C8000000                	enter 0, 0
 11234 000084A2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11235 000084A6 50                      	push rax
 11236 000084A7 488B4510                	mov rax, qword [rbp + 8 * 2]
 11237                                  
 11238 000084AB 488B00                                            	mov rax, qword[rax + 8 * 0]
 11239                                  
 11240 000084AE 488B00                                            	mov rax, qword[rax + 8 * 0]
 11241 000084B1 50                      	push rax
 11242 000084B2 6A02                    	push 2
 11243 000084B4 488B4510                	mov rax, qword [rbp + 8 * 2]
 11244                                  
 11245 000084B8 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11246                                  
 11247 000084BC 488B00                                            	mov rax, qword[rax + 8 * 0]
 11248                                  .L_applic_TC_005d:
 11249 000084BF 803805                  	cmp byte [rax], T_closure
 11250 000084C2 0F85E5A10000            	jne L_code_ptr_error
 11251 000084C8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11252 000084CC 53                      	push rbx
 11253 000084CD FF7508                  	push qword [rbp + 8]
 11254 000084D0 FF7500                  	push qword [rbp]
 11255 000084D3 488B4D18                	mov rcx, [rbp + 3 * 8]
 11256 000084D7 488B542418              	mov rdx, [rsp + 3 * 8]
 11257 000084DC 488D7204                	lea rsi, [rdx + 4]
 11258 000084E0 4C8D4EFF                	lea r9, [rsi - 1]
 11259 000084E4 488D7903                	lea rdi, [rcx + 3]
 11260 000084E8 4D31C0                  	xor r8, r8
 11261                                  .L_tc_recycle_frame_loop_005d:
 11262 000084EB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11263 000084EF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11264 000084F4 49FFC9                  	dec r9
 11265 000084F7 4D31C0                  	xor r8, r8
 11266 000084FA 48FFCF                  	dec rdi
 11267 000084FD 48FFCE                  	dec rsi
 11268 00008500 4883FE00                	cmp rsi, 0
 11269 00008504 75E5                    	jne .L_tc_recycle_frame_loop_005d
 11270                                  .L_tc_recycle_frame_done_005d:
 11271                                  ;this pop rbp in sot to the right place
 11272 00008506 4989C9                  	mov r9, rcx
 11273 00008509 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11274 00008511 4C01CC                  	add rsp, r9
 11275 00008514 5D                      	pop rbp
 11276 00008515 488B4D00                	mov rcx, qword [rbp]
 11277 00008519 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11278 0000851D FFE3                    	jmp rbx
 11279 0000851F C9                      	leave
 11280 00008520 C21800                  	ret 8 * (2 + 1)
 11281                                  .L_lambda_simple_end_0046:	; new closure is in rax
 11282                                  .L_applic_TC_005e:
 11283 00008523 803805                  	cmp byte [rax], T_closure
 11284 00008526 0F8581A10000            	jne L_code_ptr_error
 11285 0000852C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11286 00008530 53                      	push rbx
 11287 00008531 FF7508                  	push qword [rbp + 8]
 11288 00008534 FF7500                  	push qword [rbp]
 11289 00008537 488B4D18                	mov rcx, [rbp + 3 * 8]
 11290 0000853B 488B542418              	mov rdx, [rsp + 3 * 8]
 11291 00008540 488D7204                	lea rsi, [rdx + 4]
 11292 00008544 4C8D4EFF                	lea r9, [rsi - 1]
 11293 00008548 488D7903                	lea rdi, [rcx + 3]
 11294 0000854C 4D31C0                  	xor r8, r8
 11295                                  .L_tc_recycle_frame_loop_005e:
 11296 0000854F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11297 00008553 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11298 00008558 49FFC9                  	dec r9
 11299 0000855B 4D31C0                  	xor r8, r8
 11300 0000855E 48FFCF                  	dec rdi
 11301 00008561 48FFCE                  	dec rsi
 11302 00008564 4883FE00                	cmp rsi, 0
 11303 00008568 75E5                    	jne .L_tc_recycle_frame_loop_005e
 11304                                  .L_tc_recycle_frame_done_005e:
 11305                                  ;this pop rbp in sot to the right place
 11306 0000856A 4989C9                  	mov r9, rcx
 11307 0000856D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11308 00008575 4C01CC                  	add rsp, r9
 11309 00008578 5D                      	pop rbp
 11310 00008579 488B4D00                	mov rcx, qword [rbp]
 11311 0000857D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11312 00008581 FFE3                    	jmp rbx
 11313                                  
 11314                                          	.L_if_end_002a:
 11315 00008583 C9                      	leave
 11316 00008584 C22000                  	ret 8 * (2 + 2)
 11317                                  .L_lambda_opt_end_000d:	; new closure is in rax
 11318 00008587 C9                      	leave
 11319 00008588 C21800                  	ret 8 * (2 + 1)
 11320                                  .L_lambda_simple_end_0045:	; new closure is in rax
 11321                                  .L_applic_TC_0060:
 11322 0000858B 803805                  	cmp byte [rax], T_closure
 11323 0000858E 0F8519A10000            	jne L_code_ptr_error
 11324 00008594 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11325 00008598 53                      	push rbx
 11326 00008599 FF7508                  	push qword [rbp + 8]
 11327 0000859C FF7500                  	push qword [rbp]
 11328 0000859F 488B4D18                	mov rcx, [rbp + 3 * 8]
 11329 000085A3 488B542418              	mov rdx, [rsp + 3 * 8]
 11330 000085A8 488D7204                	lea rsi, [rdx + 4]
 11331 000085AC 4C8D4EFF                	lea r9, [rsi - 1]
 11332 000085B0 488D7903                	lea rdi, [rcx + 3]
 11333 000085B4 4D31C0                  	xor r8, r8
 11334                                  .L_tc_recycle_frame_loop_0060:
 11335 000085B7 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11336 000085BB 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11337 000085C0 49FFC9                  	dec r9
 11338 000085C3 4D31C0                  	xor r8, r8
 11339 000085C6 48FFCF                  	dec rdi
 11340 000085C9 48FFCE                  	dec rsi
 11341 000085CC 4883FE00                	cmp rsi, 0
 11342 000085D0 75E5                    	jne .L_tc_recycle_frame_loop_0060
 11343                                  .L_tc_recycle_frame_done_0060:
 11344                                  ;this pop rbp in sot to the right place
 11345 000085D2 4989C9                  	mov r9, rcx
 11346 000085D5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11347 000085DD 4C01CC                  	add rsp, r9
 11348 000085E0 5D                      	pop rbp
 11349 000085E1 488B4D00                	mov rcx, qword [rbp]
 11350 000085E5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11351 000085E9 FFE3                    	jmp rbx
 11352 000085EB C9                      	leave
 11353 000085EC C21800                  	ret 8 * (2 + 1)
 11354                                  .L_lambda_simple_end_0043:	; new closure is in rax
 11355                                  	assert_closure(rax)
    42 000085EF 803805              <1>  cmp byte [%1], %2
    43 000085F2 0F85F4A80000        <1>  jne L_error_incorrect_type
 11356 000085F8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11357 000085FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 11358 000085FE 48890425[20030000]      	mov qword [free_var_100], rax
 11359 00008606 48B8-                   	mov rax, sob_void
 11359 00008608 [0000000000000000] 
 11360                                  
 11361 00008610 4889C7                  	mov rdi, rax
 11362 00008613 E8F1900000              	call print_sexpr_if_not_void
 11363                                  
 11364 00008618 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11365 0000861D E8D6900000              	call malloc
 11366 00008622 50                      	push rax
 11367 00008623 BF00000000              	mov rdi, 8 * 0	; new rib
 11368 00008628 E8CB900000              	call malloc
 11369 0000862D 50                      	push rax
 11370 0000862E BF08000000              	mov rdi, 8 * 1	; extended env
 11371 00008633 E8C0900000              	call malloc
 11372 00008638 488B7D10                	mov rdi, ENV
 11373 0000863C BE00000000              	mov rsi, 0
 11374 00008641 BA01000000              	mov rdx, 1
 11375                                  .L_lambda_simple_env_loop_0047:	; ext_env[i + 1] <-- env[i]
 11376 00008646 4883FE00                	cmp rsi, 0
 11377 0000864A 7410                    	je .L_lambda_simple_env_end_0047
 11378 0000864C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11379 00008650 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11380 00008654 48FFC6                  	inc rsi
 11381 00008657 48FFC2                  	inc rdx
 11382 0000865A EBEA                    	jmp .L_lambda_simple_env_loop_0047
 11383                                  .L_lambda_simple_env_end_0047:
 11384 0000865C 5B                      	pop rbx
 11385 0000865D BE00000000              	mov rsi, 0
 11386                                  .L_lambda_simple_params_loop_0047:	; copy params
 11387 00008662 4883FE00                	cmp rsi, 0
 11388 00008666 740E                    	je .L_lambda_simple_params_end_0047
 11389 00008668 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11390 0000866D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11391 00008671 48FFC6                  	inc rsi
 11392 00008674 EBEC                    	jmp .L_lambda_simple_params_loop_0047
 11393                                  .L_lambda_simple_params_end_0047:
 11394 00008676 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11395 00008679 4889C3                  	mov rbx, rax
 11396 0000867C 58                      	pop rax
 11397 0000867D C60005                  	mov byte [rax], T_closure
 11398 00008680 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11399 00008684 48C74009[91860000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0047
 11400 0000868C E903010000              	jmp .L_lambda_simple_end_0047
 11401                                  .L_lambda_simple_code_0047:	; lambda-simple body
 11402 00008691 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11403 00008697 740B                    	je .L_lambda_simple_arity_check_ok_0047
 11404 00008699 FF742410                	push qword [rsp + 8 * 2]
 11405 0000869D 6A01                    	push 1
 11406 0000869F E90D900000              	jmp L_error_incorrect_arity_simple
 11407                                  .L_lambda_simple_arity_check_ok_0047:
 11408 000086A4 C8000000                	enter 0, 0
 11409 000086A8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11410 000086AC 50                      	push rax
 11411 000086AD 6A01                    	push 1
 11412 000086AF 488B0425[D8000000]      	mov rax, qword [free_var_27]
 11413                                  	assert_closure(rax)
    42 000086B7 803805              <1>  cmp byte [%1], %2
    43 000086BA 0F852CA80000        <1>  jne L_error_incorrect_type
 11414 000086C0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11415 000086C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11416                                  
 11417 000086C6 483D[02000000]                  	cmp rax, sob_boolean_false
 11418                                  
 11419 000086CC 740F                            	je .L_if_else_002b
 11420 000086CE 48B8-                   	mov rax,L_constants + 128
 11420 000086D0 [8000000000000000] 
 11421                                  
 11422 000086D8 E9B3000000                      	jmp .L_if_end_002b
 11423                                  
 11424                                          	.L_if_else_002b:
 11425 000086DD 48B8-                   	mov rax,L_constants + 128
 11425 000086DF [8000000000000000] 
 11426 000086E7 50                      	push rax
 11427 000086E8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11428 000086EC 50                      	push rax
 11429 000086ED 6A02                    	push 2
 11430 000086EF 488B0425[10030000]      	mov rax, qword [free_var_98]
 11431                                  	assert_closure(rax)
    42 000086F7 803805              <1>  cmp byte [%1], %2
    43 000086FA 0F85ECA70000        <1>  jne L_error_incorrect_type
 11432 00008700 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11433 00008703 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11434 00008706 50                      	push rax
 11435 00008707 6A01                    	push 1
 11436 00008709 488B0425[28030000]      	mov rax, qword [free_var_101]
 11437                                  	assert_closure(rax)
    42 00008711 803805              <1>  cmp byte [%1], %2
    43 00008714 0F85D2A70000        <1>  jne L_error_incorrect_type
 11438 0000871A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11439 0000871D FF5009                  	call SOB_CLOSURE_CODE(rax)
 11440 00008720 50                      	push rax
 11441 00008721 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11442 00008725 50                      	push rax
 11443 00008726 6A02                    	push 2
 11444 00008728 488B0425[18030000]      	mov rax, qword [free_var_99]
 11445                                  .L_applic_TC_0061:
 11446 00008730 803805                  	cmp byte [rax], T_closure
 11447 00008733 0F85749F0000            	jne L_code_ptr_error
 11448 00008739 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11449 0000873D 53                      	push rbx
 11450 0000873E FF7508                  	push qword [rbp + 8]
 11451 00008741 FF7500                  	push qword [rbp]
 11452 00008744 488B4D18                	mov rcx, [rbp + 3 * 8]
 11453 00008748 488B542418              	mov rdx, [rsp + 3 * 8]
 11454 0000874D 488D7204                	lea rsi, [rdx + 4]
 11455 00008751 4C8D4EFF                	lea r9, [rsi - 1]
 11456 00008755 488D7903                	lea rdi, [rcx + 3]
 11457 00008759 4D31C0                  	xor r8, r8
 11458                                  .L_tc_recycle_frame_loop_0061:
 11459 0000875C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11460 00008760 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11461 00008765 49FFC9                  	dec r9
 11462 00008768 4D31C0                  	xor r8, r8
 11463 0000876B 48FFCF                  	dec rdi
 11464 0000876E 48FFCE                  	dec rsi
 11465 00008771 4883FE00                	cmp rsi, 0
 11466 00008775 75E5                    	jne .L_tc_recycle_frame_loop_0061
 11467                                  .L_tc_recycle_frame_done_0061:
 11468                                  ;this pop rbp in sot to the right place
 11469 00008777 4989C9                  	mov r9, rcx
 11470 0000877A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11471 00008782 4C01CC                  	add rsp, r9
 11472 00008785 5D                      	pop rbp
 11473 00008786 488B4D00                	mov rcx, qword [rbp]
 11474 0000878A 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11475 0000878E FFE3                    	jmp rbx
 11476                                  
 11477                                          	.L_if_end_002b:
 11478 00008790 C9                      	leave
 11479 00008791 C21800                  	ret 8 * (2 + 1)
 11480                                  .L_lambda_simple_end_0047:	; new closure is in rax
 11481 00008794 48890425[28030000]      	mov qword [free_var_101], rax
 11482 0000879C 48B8-                   	mov rax, sob_void
 11482 0000879E [0000000000000000] 
 11483                                  
 11484 000087A6 4889C7                  	mov rdi, rax
 11485 000087A9 E85B8F0000              	call print_sexpr_if_not_void
 11486                                  
 11487 000087AE 48B8-                   	mov rax,L_constants + 0
 11487 000087B0 [0000000000000000] 
 11488 000087B8 48890425[30030000]      	mov qword [free_var_102], rax
 11489 000087C0 48B8-                   	mov rax, sob_void
 11489 000087C2 [0000000000000000] 
 11490                                  
 11491 000087CA 4889C7                  	mov rdi, rax
 11492 000087CD E8378F0000              	call print_sexpr_if_not_void
 11493                                  
 11494 000087D2 48B8-                   	mov rax,L_constants + 0
 11494 000087D4 [0000000000000000] 
 11495 000087DC 48890425[38030000]      	mov qword [free_var_103], rax
 11496 000087E4 48B8-                   	mov rax, sob_void
 11496 000087E6 [0000000000000000] 
 11497                                  
 11498 000087EE 4889C7                  	mov rdi, rax
 11499 000087F1 E8138F0000              	call print_sexpr_if_not_void
 11500                                  
 11501 000087F6 48B8-                   	mov rax,L_constants + 0
 11501 000087F8 [0000000000000000] 
 11502 00008800 48890425[40030000]      	mov qword [free_var_104], rax
 11503 00008808 48B8-                   	mov rax, sob_void
 11503 0000880A [0000000000000000] 
 11504                                  
 11505 00008812 4889C7                  	mov rdi, rax
 11506 00008815 E8EF8E0000              	call print_sexpr_if_not_void
 11507                                  
 11508 0000881A 48B8-                   	mov rax,L_constants + 0
 11508 0000881C [0000000000000000] 
 11509 00008824 48890425[48030000]      	mov qword [free_var_105], rax
 11510 0000882C 48B8-                   	mov rax, sob_void
 11510 0000882E [0000000000000000] 
 11511                                  
 11512 00008836 4889C7                  	mov rdi, rax
 11513 00008839 E8CB8E0000              	call print_sexpr_if_not_void
 11514                                  
 11515 0000883E 48B8-                   	mov rax,L_constants + 0
 11515 00008840 [0000000000000000] 
 11516 00008848 48890425[50030000]      	mov qword [free_var_106], rax
 11517 00008850 48B8-                   	mov rax, sob_void
 11517 00008852 [0000000000000000] 
 11518                                  
 11519 0000885A 4889C7                  	mov rdi, rax
 11520 0000885D E8A78E0000              	call print_sexpr_if_not_void
 11521                                  
 11522 00008862 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11523 00008867 E88C8E0000              	call malloc
 11524 0000886C 50                      	push rax
 11525 0000886D BF00000000              	mov rdi, 8 * 0	; new rib
 11526 00008872 E8818E0000              	call malloc
 11527 00008877 50                      	push rax
 11528 00008878 BF08000000              	mov rdi, 8 * 1	; extended env
 11529 0000887D E8768E0000              	call malloc
 11530 00008882 488B7D10                	mov rdi, ENV
 11531 00008886 BE00000000              	mov rsi, 0
 11532 0000888B BA01000000              	mov rdx, 1
 11533                                  .L_lambda_simple_env_loop_0048:	; ext_env[i + 1] <-- env[i]
 11534 00008890 4883FE00                	cmp rsi, 0
 11535 00008894 7410                    	je .L_lambda_simple_env_end_0048
 11536 00008896 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11537 0000889A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11538 0000889E 48FFC6                  	inc rsi
 11539 000088A1 48FFC2                  	inc rdx
 11540 000088A4 EBEA                    	jmp .L_lambda_simple_env_loop_0048
 11541                                  .L_lambda_simple_env_end_0048:
 11542 000088A6 5B                      	pop rbx
 11543 000088A7 BE00000000              	mov rsi, 0
 11544                                  .L_lambda_simple_params_loop_0048:	; copy params
 11545 000088AC 4883FE00                	cmp rsi, 0
 11546 000088B0 740E                    	je .L_lambda_simple_params_end_0048
 11547 000088B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11548 000088B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11549 000088BB 48FFC6                  	inc rsi
 11550 000088BE EBEC                    	jmp .L_lambda_simple_params_loop_0048
 11551                                  .L_lambda_simple_params_end_0048:
 11552 000088C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11553 000088C3 4889C3                  	mov rbx, rax
 11554 000088C6 58                      	pop rax
 11555 000088C7 C60005                  	mov byte [rax], T_closure
 11556 000088CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11557 000088CE 48C74009[DB880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0048
 11558 000088D6 E99B000000              	jmp .L_lambda_simple_end_0048
 11559                                  .L_lambda_simple_code_0048:	; lambda-simple body
 11560 000088DB 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11561 000088E1 740B                    	je .L_lambda_simple_arity_check_ok_0048
 11562 000088E3 FF742410                	push qword [rsp + 8 * 2]
 11563 000088E7 6A00                    	push 0
 11564 000088E9 E9C38D0000              	jmp L_error_incorrect_arity_simple
 11565                                  .L_lambda_simple_arity_check_ok_0048:
 11566 000088EE C8000000                	enter 0, 0
 11567 000088F2 48B8-                   	mov rax,L_constants + 219
 11567 000088F4 [DB00000000000000] 
 11568 000088FC 50                      	push rax
 11569 000088FD 48B8-                   	mov rax,L_constants + 210
 11569 000088FF [D200000000000000] 
 11570 00008907 50                      	push rax
 11571 00008908 6A02                    	push 2
 11572 0000890A 488B0425[30010000]      	mov rax, qword [free_var_38]
 11573                                  .L_applic_TC_0062:
 11574 00008912 803805                  	cmp byte [rax], T_closure
 11575 00008915 0F85929D0000            	jne L_code_ptr_error
 11576 0000891B 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11577 0000891F 53                      	push rbx
 11578 00008920 FF7508                  	push qword [rbp + 8]
 11579 00008923 FF7500                  	push qword [rbp]
 11580 00008926 488B4D18                	mov rcx, [rbp + 3 * 8]
 11581 0000892A 488B542418              	mov rdx, [rsp + 3 * 8]
 11582 0000892F 488D7204                	lea rsi, [rdx + 4]
 11583 00008933 4C8D4EFF                	lea r9, [rsi - 1]
 11584 00008937 488D7903                	lea rdi, [rcx + 3]
 11585 0000893B 4D31C0                  	xor r8, r8
 11586                                  .L_tc_recycle_frame_loop_0062:
 11587 0000893E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11588 00008942 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11589 00008947 49FFC9                  	dec r9
 11590 0000894A 4D31C0                  	xor r8, r8
 11591 0000894D 48FFCF                  	dec rdi
 11592 00008950 48FFCE                  	dec rsi
 11593 00008953 4883FE00                	cmp rsi, 0
 11594 00008957 75E5                    	jne .L_tc_recycle_frame_loop_0062
 11595                                  .L_tc_recycle_frame_done_0062:
 11596                                  ;this pop rbp in sot to the right place
 11597 00008959 4989C9                  	mov r9, rcx
 11598 0000895C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11599 00008964 4C01CC                  	add rsp, r9
 11600 00008967 5D                      	pop rbp
 11601 00008968 488B4D00                	mov rcx, qword [rbp]
 11602 0000896C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11603 00008970 FFE3                    	jmp rbx
 11604 00008972 C9                      	leave
 11605 00008973 C21000                  	ret 8 * (2 + 0)
 11606                                  .L_lambda_simple_end_0048:	; new closure is in rax
 11607 00008976 50                      	push rax
 11608 00008977 6A01                    	push 1
 11609 00008979 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11610 0000897E E8758D0000              	call malloc
 11611 00008983 50                      	push rax
 11612 00008984 BF00000000              	mov rdi, 8 * 0	; new rib
 11613 00008989 E86A8D0000              	call malloc
 11614 0000898E 50                      	push rax
 11615 0000898F BF08000000              	mov rdi, 8 * 1	; extended env
 11616 00008994 E85F8D0000              	call malloc
 11617 00008999 488B7D10                	mov rdi, ENV
 11618 0000899D BE00000000              	mov rsi, 0
 11619 000089A2 BA01000000              	mov rdx, 1
 11620                                  .L_lambda_simple_env_loop_0049:	; ext_env[i + 1] <-- env[i]
 11621 000089A7 4883FE00                	cmp rsi, 0
 11622 000089AB 7410                    	je .L_lambda_simple_env_end_0049
 11623 000089AD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11624 000089B1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11625 000089B5 48FFC6                  	inc rsi
 11626 000089B8 48FFC2                  	inc rdx
 11627 000089BB EBEA                    	jmp .L_lambda_simple_env_loop_0049
 11628                                  .L_lambda_simple_env_end_0049:
 11629 000089BD 5B                      	pop rbx
 11630 000089BE BE00000000              	mov rsi, 0
 11631                                  .L_lambda_simple_params_loop_0049:	; copy params
 11632 000089C3 4883FE00                	cmp rsi, 0
 11633 000089C7 740E                    	je .L_lambda_simple_params_end_0049
 11634 000089C9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11635 000089CE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11636 000089D2 48FFC6                  	inc rsi
 11637 000089D5 EBEC                    	jmp .L_lambda_simple_params_loop_0049
 11638                                  .L_lambda_simple_params_end_0049:
 11639 000089D7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11640 000089DA 4889C3                  	mov rbx, rax
 11641 000089DD 58                      	pop rax
 11642 000089DE C60005                  	mov byte [rax], T_closure
 11643 000089E1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11644 000089E5 48C74009[F2890000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0049
 11645 000089ED E92E160000              	jmp .L_lambda_simple_end_0049
 11646                                  .L_lambda_simple_code_0049:	; lambda-simple body
 11647 000089F2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11648 000089F8 740B                    	je .L_lambda_simple_arity_check_ok_0049
 11649 000089FA FF742410                	push qword [rsp + 8 * 2]
 11650 000089FE 6A01                    	push 1
 11651 00008A00 E9AC8C0000              	jmp L_error_incorrect_arity_simple
 11652                                  .L_lambda_simple_arity_check_ok_0049:
 11653 00008A05 C8000000                	enter 0, 0
 11654 00008A09 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11655 00008A0E E8E58C0000              	call malloc
 11656 00008A13 50                      	push rax
 11657 00008A14 BF08000000              	mov rdi, 8 * 1	; new rib
 11658 00008A19 E8DA8C0000              	call malloc
 11659 00008A1E 50                      	push rax
 11660 00008A1F BF10000000              	mov rdi, 8 * 2	; extended env
 11661 00008A24 E8CF8C0000              	call malloc
 11662 00008A29 488B7D10                	mov rdi, ENV
 11663 00008A2D BE00000000              	mov rsi, 0
 11664 00008A32 BA01000000              	mov rdx, 1
 11665                                  .L_lambda_simple_env_loop_004a:	; ext_env[i + 1] <-- env[i]
 11666 00008A37 4883FE01                	cmp rsi, 1
 11667 00008A3B 7410                    	je .L_lambda_simple_env_end_004a
 11668 00008A3D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11669 00008A41 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11670 00008A45 48FFC6                  	inc rsi
 11671 00008A48 48FFC2                  	inc rdx
 11672 00008A4B EBEA                    	jmp .L_lambda_simple_env_loop_004a
 11673                                  .L_lambda_simple_env_end_004a:
 11674 00008A4D 5B                      	pop rbx
 11675 00008A4E BE00000000              	mov rsi, 0
 11676                                  .L_lambda_simple_params_loop_004a:	; copy params
 11677 00008A53 4883FE01                	cmp rsi, 1
 11678 00008A57 740E                    	je .L_lambda_simple_params_end_004a
 11679 00008A59 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11680 00008A5E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11681 00008A62 48FFC6                  	inc rsi
 11682 00008A65 EBEC                    	jmp .L_lambda_simple_params_loop_004a
 11683                                  .L_lambda_simple_params_end_004a:
 11684 00008A67 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11685 00008A6A 4889C3                  	mov rbx, rax
 11686 00008A6D 58                      	pop rax
 11687 00008A6E C60005                  	mov byte [rax], T_closure
 11688 00008A71 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11689 00008A75 48C74009[828A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004a
 11690 00008A7D E9AB040000              	jmp .L_lambda_simple_end_004a
 11691                                  .L_lambda_simple_code_004a:	; lambda-simple body
 11692 00008A82 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11693 00008A88 740B                    	je .L_lambda_simple_arity_check_ok_004a
 11694 00008A8A FF742410                	push qword [rsp + 8 * 2]
 11695 00008A8E 6A02                    	push 2
 11696 00008A90 E91C8C0000              	jmp L_error_incorrect_arity_simple
 11697                                  .L_lambda_simple_arity_check_ok_004a:
 11698 00008A95 C8000000                	enter 0, 0
 11699 00008A99 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11700 00008A9E E8558C0000              	call malloc
 11701 00008AA3 50                      	push rax
 11702 00008AA4 BF10000000              	mov rdi, 8 * 2	; new rib
 11703 00008AA9 E84A8C0000              	call malloc
 11704 00008AAE 50                      	push rax
 11705 00008AAF BF18000000              	mov rdi, 8 * 3	; extended env
 11706 00008AB4 E83F8C0000              	call malloc
 11707 00008AB9 488B7D10                	mov rdi, ENV
 11708 00008ABD BE00000000              	mov rsi, 0
 11709 00008AC2 BA01000000              	mov rdx, 1
 11710                                  .L_lambda_simple_env_loop_004b:	; ext_env[i + 1] <-- env[i]
 11711 00008AC7 4883FE02                	cmp rsi, 2
 11712 00008ACB 7410                    	je .L_lambda_simple_env_end_004b
 11713 00008ACD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11714 00008AD1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11715 00008AD5 48FFC6                  	inc rsi
 11716 00008AD8 48FFC2                  	inc rdx
 11717 00008ADB EBEA                    	jmp .L_lambda_simple_env_loop_004b
 11718                                  .L_lambda_simple_env_end_004b:
 11719 00008ADD 5B                      	pop rbx
 11720 00008ADE BE00000000              	mov rsi, 0
 11721                                  .L_lambda_simple_params_loop_004b:	; copy params
 11722 00008AE3 4883FE02                	cmp rsi, 2
 11723 00008AE7 740E                    	je .L_lambda_simple_params_end_004b
 11724 00008AE9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11725 00008AEE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11726 00008AF2 48FFC6                  	inc rsi
 11727 00008AF5 EBEC                    	jmp .L_lambda_simple_params_loop_004b
 11728                                  .L_lambda_simple_params_end_004b:
 11729 00008AF7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11730 00008AFA 4889C3                  	mov rbx, rax
 11731 00008AFD 58                      	pop rax
 11732 00008AFE C60005                  	mov byte [rax], T_closure
 11733 00008B01 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11734 00008B05 48C74009[128B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004b
 11735 00008B0D E917040000              	jmp .L_lambda_simple_end_004b
 11736                                  .L_lambda_simple_code_004b:	; lambda-simple body
 11737 00008B12 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11738 00008B18 740B                    	je .L_lambda_simple_arity_check_ok_004b
 11739 00008B1A FF742410                	push qword [rsp + 8 * 2]
 11740 00008B1E 6A02                    	push 2
 11741 00008B20 E98C8B0000              	jmp L_error_incorrect_arity_simple
 11742                                  .L_lambda_simple_arity_check_ok_004b:
 11743 00008B25 C8000000                	enter 0, 0
 11744 00008B29 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11745 00008B2D 50                      	push rax
 11746 00008B2E 6A01                    	push 1
 11747 00008B30 488B0425[48000000]      	mov rax, qword [free_var_9]
 11748                                  	assert_closure(rax)
    42 00008B38 803805              <1>  cmp byte [%1], %2
    43 00008B3B 0F85ABA30000        <1>  jne L_error_incorrect_type
 11749 00008B41 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11750 00008B44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11751                                  
 11752 00008B47 483D[02000000]                  	cmp rax, sob_boolean_false
 11753                                  
 11754 00008B4D 0F84D0010000                    	je .L_if_else_002c
 11755 00008B53 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11756 00008B57 50                      	push rax
 11757 00008B58 6A01                    	push 1
 11758 00008B5A 488B0425[48000000]      	mov rax, qword [free_var_9]
 11759                                  	assert_closure(rax)
    42 00008B62 803805              <1>  cmp byte [%1], %2
    43 00008B65 0F8581A30000        <1>  jne L_error_incorrect_type
 11760 00008B6B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11761 00008B6E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11762                                  
 11763 00008B71 483D[02000000]                  	cmp rax, sob_boolean_false
 11764                                  
 11765 00008B77 747B                            	je .L_if_else_0030
 11766 00008B79 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11767 00008B7D 50                      	push rax
 11768 00008B7E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11769 00008B82 50                      	push rax
 11770 00008B83 6A02                    	push 2
 11771 00008B85 488B4510                	mov rax, qword [rbp + 8 * 2]
 11772                                  
 11773 00008B89 488B00                                            	mov rax, qword[rax + 8 * 0]
 11774                                  
 11775 00008B8C 488B00                                            	mov rax, qword[rax + 8 * 0]
 11776                                  .L_applic_TC_0068:
 11777 00008B8F 803805                  	cmp byte [rax], T_closure
 11778 00008B92 0F85159B0000            	jne L_code_ptr_error
 11779 00008B98 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11780 00008B9C 53                      	push rbx
 11781 00008B9D FF7508                  	push qword [rbp + 8]
 11782 00008BA0 FF7500                  	push qword [rbp]
 11783 00008BA3 488B4D18                	mov rcx, [rbp + 3 * 8]
 11784 00008BA7 488B542418              	mov rdx, [rsp + 3 * 8]
 11785 00008BAC 488D7204                	lea rsi, [rdx + 4]
 11786 00008BB0 4C8D4EFF                	lea r9, [rsi - 1]
 11787 00008BB4 488D7903                	lea rdi, [rcx + 3]
 11788 00008BB8 4D31C0                  	xor r8, r8
 11789                                  .L_tc_recycle_frame_loop_0068:
 11790 00008BBB 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11791 00008BBF 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11792 00008BC4 49FFC9                  	dec r9
 11793 00008BC7 4D31C0                  	xor r8, r8
 11794 00008BCA 48FFCF                  	dec rdi
 11795 00008BCD 48FFCE                  	dec rsi
 11796 00008BD0 4883FE00                	cmp rsi, 0
 11797 00008BD4 75E5                    	jne .L_tc_recycle_frame_loop_0068
 11798                                  .L_tc_recycle_frame_done_0068:
 11799                                  ;this pop rbp in sot to the right place
 11800 00008BD6 4989C9                  	mov r9, rcx
 11801 00008BD9 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11802 00008BE1 4C01CC                  	add rsp, r9
 11803 00008BE4 5D                      	pop rbp
 11804 00008BE5 488B4D00                	mov rcx, qword [rbp]
 11805 00008BE9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11806 00008BED FFE3                    	jmp rbx
 11807                                  
 11808 00008BEF E92A010000                      	jmp .L_if_end_0030
 11809                                  
 11810                                          	.L_if_else_0030:
 11811 00008BF4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11812 00008BF8 50                      	push rax
 11813 00008BF9 6A01                    	push 1
 11814 00008BFB 488B0425[40000000]      	mov rax, qword [free_var_8]
 11815                                  	assert_closure(rax)
    42 00008C03 803805              <1>  cmp byte [%1], %2
    43 00008C06 0F85E0A20000        <1>  jne L_error_incorrect_type
 11816 00008C0C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11817 00008C0F FF5009                  	call SOB_CLOSURE_CODE(rax)
 11818                                  
 11819 00008C12 483D[02000000]                  	cmp rax, sob_boolean_false
 11820                                  
 11821 00008C18 0F8493000000                    	je .L_if_else_0031
 11822 00008C1E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11823 00008C22 50                      	push rax
 11824 00008C23 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11825 00008C27 50                      	push rax
 11826 00008C28 6A01                    	push 1
 11827 00008C2A 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11828                                  	assert_closure(rax)
    42 00008C32 803805              <1>  cmp byte [%1], %2
    43 00008C35 0F85B1A20000        <1>  jne L_error_incorrect_type
 11829 00008C3B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11830 00008C3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11831 00008C41 50                      	push rax
 11832 00008C42 6A02                    	push 2
 11833 00008C44 488B4510                	mov rax, qword [rbp + 8 * 2]
 11834                                  
 11835 00008C48 488B00                                            	mov rax, qword[rax + 8 * 0]
 11836                                  
 11837 00008C4B 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11838                                  .L_applic_TC_0067:
 11839 00008C4F 803805                  	cmp byte [rax], T_closure
 11840 00008C52 0F85559A0000            	jne L_code_ptr_error
 11841 00008C58 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11842 00008C5C 53                      	push rbx
 11843 00008C5D FF7508                  	push qword [rbp + 8]
 11844 00008C60 FF7500                  	push qword [rbp]
 11845 00008C63 488B4D18                	mov rcx, [rbp + 3 * 8]
 11846 00008C67 488B542418              	mov rdx, [rsp + 3 * 8]
 11847 00008C6C 488D7204                	lea rsi, [rdx + 4]
 11848 00008C70 4C8D4EFF                	lea r9, [rsi - 1]
 11849 00008C74 488D7903                	lea rdi, [rcx + 3]
 11850 00008C78 4D31C0                  	xor r8, r8
 11851                                  .L_tc_recycle_frame_loop_0067:
 11852 00008C7B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11853 00008C7F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11854 00008C84 49FFC9                  	dec r9
 11855 00008C87 4D31C0                  	xor r8, r8
 11856 00008C8A 48FFCF                  	dec rdi
 11857 00008C8D 48FFCE                  	dec rsi
 11858 00008C90 4883FE00                	cmp rsi, 0
 11859 00008C94 75E5                    	jne .L_tc_recycle_frame_loop_0067
 11860                                  .L_tc_recycle_frame_done_0067:
 11861                                  ;this pop rbp in sot to the right place
 11862 00008C96 4989C9                  	mov r9, rcx
 11863 00008C99 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11864 00008CA1 4C01CC                  	add rsp, r9
 11865 00008CA4 5D                      	pop rbp
 11866 00008CA5 488B4D00                	mov rcx, qword [rbp]
 11867 00008CA9 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11868 00008CAD FFE3                    	jmp rbx
 11869                                  
 11870 00008CAF EB6D                            	jmp .L_if_end_0031
 11871                                  
 11872                                          	.L_if_else_0031:
 11873 00008CB1 6A00                    	push 0
 11874 00008CB3 488B4510                	mov rax, qword [rbp + 8 * 2]
 11875                                  
 11876 00008CB7 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11877                                  
 11878 00008CBB 488B00                                            	mov rax, qword[rax + 8 * 0]
 11879                                  .L_applic_TC_0066:
 11880 00008CBE 803805                  	cmp byte [rax], T_closure
 11881 00008CC1 0F85E6990000            	jne L_code_ptr_error
 11882 00008CC7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11883 00008CCB 53                      	push rbx
 11884 00008CCC FF7508                  	push qword [rbp + 8]
 11885 00008CCF FF7500                  	push qword [rbp]
 11886 00008CD2 488B4D18                	mov rcx, [rbp + 3 * 8]
 11887 00008CD6 488B542418              	mov rdx, [rsp + 3 * 8]
 11888 00008CDB 488D7204                	lea rsi, [rdx + 4]
 11889 00008CDF 4C8D4EFF                	lea r9, [rsi - 1]
 11890 00008CE3 488D7903                	lea rdi, [rcx + 3]
 11891 00008CE7 4D31C0                  	xor r8, r8
 11892                                  .L_tc_recycle_frame_loop_0066:
 11893 00008CEA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11894 00008CEE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11895 00008CF3 49FFC9                  	dec r9
 11896 00008CF6 4D31C0                  	xor r8, r8
 11897 00008CF9 48FFCF                  	dec rdi
 11898 00008CFC 48FFCE                  	dec rsi
 11899 00008CFF 4883FE00                	cmp rsi, 0
 11900 00008D03 75E5                    	jne .L_tc_recycle_frame_loop_0066
 11901                                  .L_tc_recycle_frame_done_0066:
 11902                                  ;this pop rbp in sot to the right place
 11903 00008D05 4989C9                  	mov r9, rcx
 11904 00008D08 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11905 00008D10 4C01CC                  	add rsp, r9
 11906 00008D13 5D                      	pop rbp
 11907 00008D14 488B4D00                	mov rcx, qword [rbp]
 11908 00008D18 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11909 00008D1C FFE3                    	jmp rbx
 11910                                  
 11911                                          	.L_if_end_0031:
 11912                                  
 11913                                          	.L_if_end_0030:
 11914                                  
 11915 00008D1E E902020000                      	jmp .L_if_end_002c
 11916                                  
 11917                                          	.L_if_else_002c:
 11918 00008D23 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11919 00008D27 50                      	push rax
 11920 00008D28 6A01                    	push 1
 11921 00008D2A 488B0425[40000000]      	mov rax, qword [free_var_8]
 11922                                  	assert_closure(rax)
    42 00008D32 803805              <1>  cmp byte [%1], %2
    43 00008D35 0F85B1A10000        <1>  jne L_error_incorrect_type
 11923 00008D3B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11924 00008D3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11925                                  
 11926 00008D41 483D[02000000]                  	cmp rax, sob_boolean_false
 11927                                  
 11928 00008D47 0F84CE010000                    	je .L_if_else_002d
 11929 00008D4D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11930 00008D51 50                      	push rax
 11931 00008D52 6A01                    	push 1
 11932 00008D54 488B0425[48000000]      	mov rax, qword [free_var_9]
 11933                                  	assert_closure(rax)
    42 00008D5C 803805              <1>  cmp byte [%1], %2
    43 00008D5F 0F8587A10000        <1>  jne L_error_incorrect_type
 11934 00008D65 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11935 00008D68 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11936                                  
 11937 00008D6B 483D[02000000]                  	cmp rax, sob_boolean_false
 11938                                  
 11939 00008D71 0F8496000000                    	je .L_if_else_002e
 11940 00008D77 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11941 00008D7B 50                      	push rax
 11942 00008D7C 6A01                    	push 1
 11943 00008D7E 488B0425[B8000000]      	mov rax, qword [free_var_23]
 11944                                  	assert_closure(rax)
    42 00008D86 803805              <1>  cmp byte [%1], %2
    43 00008D89 0F855DA10000        <1>  jne L_error_incorrect_type
 11945 00008D8F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11946 00008D92 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11947 00008D95 50                      	push rax
 11948 00008D96 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 11949 00008D9A 50                      	push rax
 11950 00008D9B 6A02                    	push 2
 11951 00008D9D 488B4510                	mov rax, qword [rbp + 8 * 2]
 11952                                  
 11953 00008DA1 488B00                                            	mov rax, qword[rax + 8 * 0]
 11954                                  
 11955 00008DA4 488B4008                                          	mov rax, qword[rax + 8 * 1]
 11956                                  .L_applic_TC_0065:
 11957 00008DA8 803805                  	cmp byte [rax], T_closure
 11958 00008DAB 0F85FC980000            	jne L_code_ptr_error
 11959 00008DB1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 11960 00008DB5 53                      	push rbx
 11961 00008DB6 FF7508                  	push qword [rbp + 8]
 11962 00008DB9 FF7500                  	push qword [rbp]
 11963 00008DBC 488B4D18                	mov rcx, [rbp + 3 * 8]
 11964 00008DC0 488B542418              	mov rdx, [rsp + 3 * 8]
 11965 00008DC5 488D7204                	lea rsi, [rdx + 4]
 11966 00008DC9 4C8D4EFF                	lea r9, [rsi - 1]
 11967 00008DCD 488D7903                	lea rdi, [rcx + 3]
 11968 00008DD1 4D31C0                  	xor r8, r8
 11969                                  .L_tc_recycle_frame_loop_0065:
 11970 00008DD4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 11971 00008DD8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 11972 00008DDD 49FFC9                  	dec r9
 11973 00008DE0 4D31C0                  	xor r8, r8
 11974 00008DE3 48FFCF                  	dec rdi
 11975 00008DE6 48FFCE                  	dec rsi
 11976 00008DE9 4883FE00                	cmp rsi, 0
 11977 00008DED 75E5                    	jne .L_tc_recycle_frame_loop_0065
 11978                                  .L_tc_recycle_frame_done_0065:
 11979                                  ;this pop rbp in sot to the right place
 11980 00008DEF 4989C9                  	mov r9, rcx
 11981 00008DF2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 11982 00008DFA 4C01CC                  	add rsp, r9
 11983 00008DFD 5D                      	pop rbp
 11984 00008DFE 488B4D00                	mov rcx, qword [rbp]
 11985 00008E02 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 11986 00008E06 FFE3                    	jmp rbx
 11987                                  
 11988 00008E08 E90C010000                      	jmp .L_if_end_002e
 11989                                  
 11990                                          	.L_if_else_002e:
 11991 00008E0D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 11992 00008E11 50                      	push rax
 11993 00008E12 6A01                    	push 1
 11994 00008E14 488B0425[40000000]      	mov rax, qword [free_var_8]
 11995                                  	assert_closure(rax)
    42 00008E1C 803805              <1>  cmp byte [%1], %2
    43 00008E1F 0F85C7A00000        <1>  jne L_error_incorrect_type
 11996 00008E25 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 11997 00008E28 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11998                                  
 11999 00008E2B 483D[02000000]                  	cmp rax, sob_boolean_false
 12000                                  
 12001 00008E31 7479                            	je .L_if_else_002f
 12002 00008E33 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12003 00008E37 50                      	push rax
 12004 00008E38 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12005 00008E3C 50                      	push rax
 12006 00008E3D 6A02                    	push 2
 12007 00008E3F 488B4510                	mov rax, qword [rbp + 8 * 2]
 12008                                  
 12009 00008E43 488B00                                            	mov rax, qword[rax + 8 * 0]
 12010                                  
 12011 00008E46 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12012                                  .L_applic_TC_0064:
 12013 00008E4A 803805                  	cmp byte [rax], T_closure
 12014 00008E4D 0F855A980000            	jne L_code_ptr_error
 12015 00008E53 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12016 00008E57 53                      	push rbx
 12017 00008E58 FF7508                  	push qword [rbp + 8]
 12018 00008E5B FF7500                  	push qword [rbp]
 12019 00008E5E 488B4D18                	mov rcx, [rbp + 3 * 8]
 12020 00008E62 488B542418              	mov rdx, [rsp + 3 * 8]
 12021 00008E67 488D7204                	lea rsi, [rdx + 4]
 12022 00008E6B 4C8D4EFF                	lea r9, [rsi - 1]
 12023 00008E6F 488D7903                	lea rdi, [rcx + 3]
 12024 00008E73 4D31C0                  	xor r8, r8
 12025                                  .L_tc_recycle_frame_loop_0064:
 12026 00008E76 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12027 00008E7A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12028 00008E7F 49FFC9                  	dec r9
 12029 00008E82 4D31C0                  	xor r8, r8
 12030 00008E85 48FFCF                  	dec rdi
 12031 00008E88 48FFCE                  	dec rsi
 12032 00008E8B 4883FE00                	cmp rsi, 0
 12033 00008E8F 75E5                    	jne .L_tc_recycle_frame_loop_0064
 12034                                  .L_tc_recycle_frame_done_0064:
 12035                                  ;this pop rbp in sot to the right place
 12036 00008E91 4989C9                  	mov r9, rcx
 12037 00008E94 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12038 00008E9C 4C01CC                  	add rsp, r9
 12039 00008E9F 5D                      	pop rbp
 12040 00008EA0 488B4D00                	mov rcx, qword [rbp]
 12041 00008EA4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12042 00008EA8 FFE3                    	jmp rbx
 12043                                  
 12044 00008EAA EB6D                            	jmp .L_if_end_002f
 12045                                  
 12046                                          	.L_if_else_002f:
 12047 00008EAC 6A00                    	push 0
 12048 00008EAE 488B4510                	mov rax, qword [rbp + 8 * 2]
 12049                                  
 12050 00008EB2 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12051                                  
 12052 00008EB6 488B00                                            	mov rax, qword[rax + 8 * 0]
 12053                                  .L_applic_TC_0063:
 12054 00008EB9 803805                  	cmp byte [rax], T_closure
 12055 00008EBC 0F85EB970000            	jne L_code_ptr_error
 12056 00008EC2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12057 00008EC6 53                      	push rbx
 12058 00008EC7 FF7508                  	push qword [rbp + 8]
 12059 00008ECA FF7500                  	push qword [rbp]
 12060 00008ECD 488B4D18                	mov rcx, [rbp + 3 * 8]
 12061 00008ED1 488B542418              	mov rdx, [rsp + 3 * 8]
 12062 00008ED6 488D7204                	lea rsi, [rdx + 4]
 12063 00008EDA 4C8D4EFF                	lea r9, [rsi - 1]
 12064 00008EDE 488D7903                	lea rdi, [rcx + 3]
 12065 00008EE2 4D31C0                  	xor r8, r8
 12066                                  .L_tc_recycle_frame_loop_0063:
 12067 00008EE5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12068 00008EE9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12069 00008EEE 49FFC9                  	dec r9
 12070 00008EF1 4D31C0                  	xor r8, r8
 12071 00008EF4 48FFCF                  	dec rdi
 12072 00008EF7 48FFCE                  	dec rsi
 12073 00008EFA 4883FE00                	cmp rsi, 0
 12074 00008EFE 75E5                    	jne .L_tc_recycle_frame_loop_0063
 12075                                  .L_tc_recycle_frame_done_0063:
 12076                                  ;this pop rbp in sot to the right place
 12077 00008F00 4989C9                  	mov r9, rcx
 12078 00008F03 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12079 00008F0B 4C01CC                  	add rsp, r9
 12080 00008F0E 5D                      	pop rbp
 12081 00008F0F 488B4D00                	mov rcx, qword [rbp]
 12082 00008F13 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12083 00008F17 FFE3                    	jmp rbx
 12084                                  
 12085                                          	.L_if_end_002f:
 12086                                  
 12087                                          	.L_if_end_002e:
 12088                                  
 12089 00008F19 EB0A                            	jmp .L_if_end_002d
 12090                                  
 12091                                          	.L_if_else_002d:
 12092 00008F1B 48B8-                   	mov rax,L_constants + 0
 12092 00008F1D [0000000000000000] 
 12093                                  
 12094                                          	.L_if_end_002d:
 12095                                  
 12096                                          	.L_if_end_002c:
 12097 00008F25 C9                      	leave
 12098 00008F26 C22000                  	ret 8 * (2 + 2)
 12099                                  .L_lambda_simple_end_004b:	; new closure is in rax
 12100 00008F29 C9                      	leave
 12101 00008F2A C22000                  	ret 8 * (2 + 2)
 12102                                  .L_lambda_simple_end_004a:	; new closure is in rax
 12103 00008F2D 50                      	push rax
 12104 00008F2E 6A01                    	push 1
 12105 00008F30 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12106 00008F35 E8BE870000              	call malloc
 12107 00008F3A 50                      	push rax
 12108 00008F3B BF08000000              	mov rdi, 8 * 1	; new rib
 12109 00008F40 E8B3870000              	call malloc
 12110 00008F45 50                      	push rax
 12111 00008F46 BF10000000              	mov rdi, 8 * 2	; extended env
 12112 00008F4B E8A8870000              	call malloc
 12113 00008F50 488B7D10                	mov rdi, ENV
 12114 00008F54 BE00000000              	mov rsi, 0
 12115 00008F59 BA01000000              	mov rdx, 1
 12116                                  .L_lambda_simple_env_loop_004c:	; ext_env[i + 1] <-- env[i]
 12117 00008F5E 4883FE01                	cmp rsi, 1
 12118 00008F62 7410                    	je .L_lambda_simple_env_end_004c
 12119 00008F64 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12120 00008F68 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12121 00008F6C 48FFC6                  	inc rsi
 12122 00008F6F 48FFC2                  	inc rdx
 12123 00008F72 EBEA                    	jmp .L_lambda_simple_env_loop_004c
 12124                                  .L_lambda_simple_env_end_004c:
 12125 00008F74 5B                      	pop rbx
 12126 00008F75 BE00000000              	mov rsi, 0
 12127                                  .L_lambda_simple_params_loop_004c:	; copy params
 12128 00008F7A 4883FE01                	cmp rsi, 1
 12129 00008F7E 740E                    	je .L_lambda_simple_params_end_004c
 12130 00008F80 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12131 00008F85 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12132 00008F89 48FFC6                  	inc rsi
 12133 00008F8C EBEC                    	jmp .L_lambda_simple_params_loop_004c
 12134                                  .L_lambda_simple_params_end_004c:
 12135 00008F8E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12136 00008F91 4889C3                  	mov rbx, rax
 12137 00008F94 58                      	pop rax
 12138 00008F95 C60005                  	mov byte [rax], T_closure
 12139 00008F98 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12140 00008F9C 48C74009[A98F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004c
 12141 00008FA4 E913100000              	jmp .L_lambda_simple_end_004c
 12142                                  .L_lambda_simple_code_004c:	; lambda-simple body
 12143 00008FA9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12144 00008FAF 740B                    	je .L_lambda_simple_arity_check_ok_004c
 12145 00008FB1 FF742410                	push qword [rsp + 8 * 2]
 12146 00008FB5 6A01                    	push 1
 12147 00008FB7 E9F5860000              	jmp L_error_incorrect_arity_simple
 12148                                  .L_lambda_simple_arity_check_ok_004c:
 12149 00008FBC C8000000                	enter 0, 0
 12150 00008FC0 488B0425[38010000]      	mov rax, qword [free_var_39]
 12151 00008FC8 50                      	push rax
 12152 00008FC9 488B0425[40010000]      	mov rax, qword [free_var_40]
 12153 00008FD1 50                      	push rax
 12154 00008FD2 6A02                    	push 2
 12155 00008FD4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12156                                  	assert_closure(rax)
    42 00008FD8 803805              <1>  cmp byte [%1], %2
    43 00008FDB 0F850B9F0000        <1>  jne L_error_incorrect_type
 12157 00008FE1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12158 00008FE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12159 00008FE7 50                      	push rax
 12160 00008FE8 6A01                    	push 1
 12161 00008FEA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12162 00008FEF E804870000              	call malloc
 12163 00008FF4 50                      	push rax
 12164 00008FF5 BF08000000              	mov rdi, 8 * 1	; new rib
 12165 00008FFA E8F9860000              	call malloc
 12166 00008FFF 50                      	push rax
 12167 00009000 BF18000000              	mov rdi, 8 * 3	; extended env
 12168 00009005 E8EE860000              	call malloc
 12169 0000900A 488B7D10                	mov rdi, ENV
 12170 0000900E BE00000000              	mov rsi, 0
 12171 00009013 BA01000000              	mov rdx, 1
 12172                                  .L_lambda_simple_env_loop_004d:	; ext_env[i + 1] <-- env[i]
 12173 00009018 4883FE02                	cmp rsi, 2
 12174 0000901C 7410                    	je .L_lambda_simple_env_end_004d
 12175 0000901E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12176 00009022 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12177 00009026 48FFC6                  	inc rsi
 12178 00009029 48FFC2                  	inc rdx
 12179 0000902C EBEA                    	jmp .L_lambda_simple_env_loop_004d
 12180                                  .L_lambda_simple_env_end_004d:
 12181 0000902E 5B                      	pop rbx
 12182 0000902F BE00000000              	mov rsi, 0
 12183                                  .L_lambda_simple_params_loop_004d:	; copy params
 12184 00009034 4883FE01                	cmp rsi, 1
 12185 00009038 740E                    	je .L_lambda_simple_params_end_004d
 12186 0000903A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12187 0000903F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12188 00009043 48FFC6                  	inc rsi
 12189 00009046 EBEC                    	jmp .L_lambda_simple_params_loop_004d
 12190                                  .L_lambda_simple_params_end_004d:
 12191 00009048 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12192 0000904B 4889C3                  	mov rbx, rax
 12193 0000904E 58                      	pop rax
 12194 0000904F C60005                  	mov byte [rax], T_closure
 12195 00009052 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12196 00009056 48C74009[63900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004d
 12197 0000905E E9F50E0000              	jmp .L_lambda_simple_end_004d
 12198                                  .L_lambda_simple_code_004d:	; lambda-simple body
 12199 00009063 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12200 00009069 740B                    	je .L_lambda_simple_arity_check_ok_004d
 12201 0000906B FF742410                	push qword [rsp + 8 * 2]
 12202 0000906F 6A01                    	push 1
 12203 00009071 E93B860000              	jmp L_error_incorrect_arity_simple
 12204                                  .L_lambda_simple_arity_check_ok_004d:
 12205 00009076 C8000000                	enter 0, 0
 12206 0000907A 488B0425[48010000]      	mov rax, qword [free_var_41]
 12207 00009082 50                      	push rax
 12208 00009083 488B0425[50010000]      	mov rax, qword [free_var_42]
 12209 0000908B 50                      	push rax
 12210 0000908C 6A02                    	push 2
 12211 0000908E 488B4510                	mov rax, qword [rbp + 8 * 2]
 12212                                  
 12213 00009092 488B00                                            	mov rax, qword[rax + 8 * 0]
 12214                                  
 12215 00009095 488B00                                            	mov rax, qword[rax + 8 * 0]
 12216                                  	assert_closure(rax)
    42 00009098 803805              <1>  cmp byte [%1], %2
    43 0000909B 0F854B9E0000        <1>  jne L_error_incorrect_type
 12217 000090A1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12218 000090A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12219 000090A7 50                      	push rax
 12220 000090A8 6A01                    	push 1
 12221 000090AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12222 000090AF E844860000              	call malloc
 12223 000090B4 50                      	push rax
 12224 000090B5 BF08000000              	mov rdi, 8 * 1	; new rib
 12225 000090BA E839860000              	call malloc
 12226 000090BF 50                      	push rax
 12227 000090C0 BF20000000              	mov rdi, 8 * 4	; extended env
 12228 000090C5 E82E860000              	call malloc
 12229 000090CA 488B7D10                	mov rdi, ENV
 12230 000090CE BE00000000              	mov rsi, 0
 12231 000090D3 BA01000000              	mov rdx, 1
 12232                                  .L_lambda_simple_env_loop_004e:	; ext_env[i + 1] <-- env[i]
 12233 000090D8 4883FE03                	cmp rsi, 3
 12234 000090DC 7410                    	je .L_lambda_simple_env_end_004e
 12235 000090DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12236 000090E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12237 000090E6 48FFC6                  	inc rsi
 12238 000090E9 48FFC2                  	inc rdx
 12239 000090EC EBEA                    	jmp .L_lambda_simple_env_loop_004e
 12240                                  .L_lambda_simple_env_end_004e:
 12241 000090EE 5B                      	pop rbx
 12242 000090EF BE00000000              	mov rsi, 0
 12243                                  .L_lambda_simple_params_loop_004e:	; copy params
 12244 000090F4 4883FE01                	cmp rsi, 1
 12245 000090F8 740E                    	je .L_lambda_simple_params_end_004e
 12246 000090FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12247 000090FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12248 00009103 48FFC6                  	inc rsi
 12249 00009106 EBEC                    	jmp .L_lambda_simple_params_loop_004e
 12250                                  .L_lambda_simple_params_end_004e:
 12251 00009108 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12252 0000910B 4889C3                  	mov rbx, rax
 12253 0000910E 58                      	pop rax
 12254 0000910F C60005                  	mov byte [rax], T_closure
 12255 00009112 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12256 00009116 48C74009[23910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004e
 12257 0000911E E9D10D0000              	jmp .L_lambda_simple_end_004e
 12258                                  .L_lambda_simple_code_004e:	; lambda-simple body
 12259 00009123 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12260 00009129 740B                    	je .L_lambda_simple_arity_check_ok_004e
 12261 0000912B FF742410                	push qword [rsp + 8 * 2]
 12262 0000912F 6A01                    	push 1
 12263 00009131 E97B850000              	jmp L_error_incorrect_arity_simple
 12264                                  .L_lambda_simple_arity_check_ok_004e:
 12265 00009136 C8000000                	enter 0, 0
 12266 0000913A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12267 0000913F E8B4850000              	call malloc
 12268 00009144 50                      	push rax
 12269 00009145 BF08000000              	mov rdi, 8 * 1	; new rib
 12270 0000914A E8A9850000              	call malloc
 12271 0000914F 50                      	push rax
 12272 00009150 BF28000000              	mov rdi, 8 * 5	; extended env
 12273 00009155 E89E850000              	call malloc
 12274 0000915A 488B7D10                	mov rdi, ENV
 12275 0000915E BE00000000              	mov rsi, 0
 12276 00009163 BA01000000              	mov rdx, 1
 12277                                  .L_lambda_simple_env_loop_004f:	; ext_env[i + 1] <-- env[i]
 12278 00009168 4883FE04                	cmp rsi, 4
 12279 0000916C 7410                    	je .L_lambda_simple_env_end_004f
 12280 0000916E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12281 00009172 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12282 00009176 48FFC6                  	inc rsi
 12283 00009179 48FFC2                  	inc rdx
 12284 0000917C EBEA                    	jmp .L_lambda_simple_env_loop_004f
 12285                                  .L_lambda_simple_env_end_004f:
 12286 0000917E 5B                      	pop rbx
 12287 0000917F BE00000000              	mov rsi, 0
 12288                                  .L_lambda_simple_params_loop_004f:	; copy params
 12289 00009184 4883FE01                	cmp rsi, 1
 12290 00009188 740E                    	je .L_lambda_simple_params_end_004f
 12291 0000918A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12292 0000918F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12293 00009193 48FFC6                  	inc rsi
 12294 00009196 EBEC                    	jmp .L_lambda_simple_params_loop_004f
 12295                                  .L_lambda_simple_params_end_004f:
 12296 00009198 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12297 0000919B 4889C3                  	mov rbx, rax
 12298 0000919E 58                      	pop rax
 12299 0000919F C60005                  	mov byte [rax], T_closure
 12300 000091A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12301 000091A6 48C74009[B3910000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_004f
 12302 000091AE E9AC000000              	jmp .L_lambda_simple_end_004f
 12303                                  .L_lambda_simple_code_004f:	; lambda-simple body
 12304 000091B3 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12305 000091B9 740B                    	je .L_lambda_simple_arity_check_ok_004f
 12306 000091BB FF742410                	push qword [rsp + 8 * 2]
 12307 000091BF 6A02                    	push 2
 12308 000091C1 E9EB840000              	jmp L_error_incorrect_arity_simple
 12309                                  .L_lambda_simple_arity_check_ok_004f:
 12310 000091C6 C8000000                	enter 0, 0
 12311 000091CA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12312 000091CE 50                      	push rax
 12313 000091CF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12314 000091D3 50                      	push rax
 12315 000091D4 6A02                    	push 2
 12316 000091D6 488B4510                	mov rax, qword [rbp + 8 * 2]
 12317                                  
 12318 000091DA 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12319                                  
 12320 000091DE 488B00                                            	mov rax, qword[rax + 8 * 0]
 12321                                  	assert_closure(rax)
    42 000091E1 803805              <1>  cmp byte [%1], %2
    43 000091E4 0F85029D0000        <1>  jne L_error_incorrect_type
 12322 000091EA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12323 000091ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 12324 000091F0 50                      	push rax
 12325 000091F1 6A01                    	push 1
 12326 000091F3 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12327                                  .L_applic_TC_0069:
 12328 000091FB 803805                  	cmp byte [rax], T_closure
 12329 000091FE 0F85A9940000            	jne L_code_ptr_error
 12330 00009204 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12331 00009208 53                      	push rbx
 12332 00009209 FF7508                  	push qword [rbp + 8]
 12333 0000920C FF7500                  	push qword [rbp]
 12334 0000920F 488B4D18                	mov rcx, [rbp + 3 * 8]
 12335 00009213 488B542418              	mov rdx, [rsp + 3 * 8]
 12336 00009218 488D7204                	lea rsi, [rdx + 4]
 12337 0000921C 4C8D4EFF                	lea r9, [rsi - 1]
 12338 00009220 488D7903                	lea rdi, [rcx + 3]
 12339 00009224 4D31C0                  	xor r8, r8
 12340                                  .L_tc_recycle_frame_loop_0069:
 12341 00009227 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12342 0000922B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12343 00009230 49FFC9                  	dec r9
 12344 00009233 4D31C0                  	xor r8, r8
 12345 00009236 48FFCF                  	dec rdi
 12346 00009239 48FFCE                  	dec rsi
 12347 0000923C 4883FE00                	cmp rsi, 0
 12348 00009240 75E5                    	jne .L_tc_recycle_frame_loop_0069
 12349                                  .L_tc_recycle_frame_done_0069:
 12350                                  ;this pop rbp in sot to the right place
 12351 00009242 4989C9                  	mov r9, rcx
 12352 00009245 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12353 0000924D 4C01CC                  	add rsp, r9
 12354 00009250 5D                      	pop rbp
 12355 00009251 488B4D00                	mov rcx, qword [rbp]
 12356 00009255 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12357 00009259 FFE3                    	jmp rbx
 12358 0000925B C9                      	leave
 12359 0000925C C22000                  	ret 8 * (2 + 2)
 12360                                  .L_lambda_simple_end_004f:	; new closure is in rax
 12361 0000925F 50                      	push rax
 12362 00009260 6A01                    	push 1
 12363 00009262 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12364 00009267 E88C840000              	call malloc
 12365 0000926C 50                      	push rax
 12366 0000926D BF08000000              	mov rdi, 8 * 1	; new rib
 12367 00009272 E881840000              	call malloc
 12368 00009277 50                      	push rax
 12369 00009278 BF28000000              	mov rdi, 8 * 5	; extended env
 12370 0000927D E876840000              	call malloc
 12371 00009282 488B7D10                	mov rdi, ENV
 12372 00009286 BE00000000              	mov rsi, 0
 12373 0000928B BA01000000              	mov rdx, 1
 12374                                  .L_lambda_simple_env_loop_0050:	; ext_env[i + 1] <-- env[i]
 12375 00009290 4883FE04                	cmp rsi, 4
 12376 00009294 7410                    	je .L_lambda_simple_env_end_0050
 12377 00009296 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12378 0000929A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12379 0000929E 48FFC6                  	inc rsi
 12380 000092A1 48FFC2                  	inc rdx
 12381 000092A4 EBEA                    	jmp .L_lambda_simple_env_loop_0050
 12382                                  .L_lambda_simple_env_end_0050:
 12383 000092A6 5B                      	pop rbx
 12384 000092A7 BE00000000              	mov rsi, 0
 12385                                  .L_lambda_simple_params_loop_0050:	; copy params
 12386 000092AC 4883FE01                	cmp rsi, 1
 12387 000092B0 740E                    	je .L_lambda_simple_params_end_0050
 12388 000092B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12389 000092B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12390 000092BB 48FFC6                  	inc rsi
 12391 000092BE EBEC                    	jmp .L_lambda_simple_params_loop_0050
 12392                                  .L_lambda_simple_params_end_0050:
 12393 000092C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12394 000092C3 4889C3                  	mov rbx, rax
 12395 000092C6 58                      	pop rax
 12396 000092C7 C60005                  	mov byte [rax], T_closure
 12397 000092CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12398 000092CE 48C74009[DB920000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0050
 12399 000092D6 E9B50B0000              	jmp .L_lambda_simple_end_0050
 12400                                  .L_lambda_simple_code_0050:	; lambda-simple body
 12401 000092DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12402 000092E1 740B                    	je .L_lambda_simple_arity_check_ok_0050
 12403 000092E3 FF742410                	push qword [rsp + 8 * 2]
 12404 000092E7 6A01                    	push 1
 12405 000092E9 E9C3830000              	jmp L_error_incorrect_arity_simple
 12406                                  .L_lambda_simple_arity_check_ok_0050:
 12407 000092EE C8000000                	enter 0, 0
 12408 000092F2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12409 000092F7 E8FC830000              	call malloc
 12410 000092FC 50                      	push rax
 12411 000092FD BF08000000              	mov rdi, 8 * 1	; new rib
 12412 00009302 E8F1830000              	call malloc
 12413 00009307 50                      	push rax
 12414 00009308 BF30000000              	mov rdi, 8 * 6	; extended env
 12415 0000930D E8E6830000              	call malloc
 12416 00009312 488B7D10                	mov rdi, ENV
 12417 00009316 BE00000000              	mov rsi, 0
 12418 0000931B BA01000000              	mov rdx, 1
 12419                                  .L_lambda_simple_env_loop_0051:	; ext_env[i + 1] <-- env[i]
 12420 00009320 4883FE05                	cmp rsi, 5
 12421 00009324 7410                    	je .L_lambda_simple_env_end_0051
 12422 00009326 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12423 0000932A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12424 0000932E 48FFC6                  	inc rsi
 12425 00009331 48FFC2                  	inc rdx
 12426 00009334 EBEA                    	jmp .L_lambda_simple_env_loop_0051
 12427                                  .L_lambda_simple_env_end_0051:
 12428 00009336 5B                      	pop rbx
 12429 00009337 BE00000000              	mov rsi, 0
 12430                                  .L_lambda_simple_params_loop_0051:	; copy params
 12431 0000933C 4883FE01                	cmp rsi, 1
 12432 00009340 740E                    	je .L_lambda_simple_params_end_0051
 12433 00009342 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12434 00009347 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12435 0000934B 48FFC6                  	inc rsi
 12436 0000934E EBEC                    	jmp .L_lambda_simple_params_loop_0051
 12437                                  .L_lambda_simple_params_end_0051:
 12438 00009350 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12439 00009353 4889C3                  	mov rbx, rax
 12440 00009356 58                      	pop rax
 12441 00009357 C60005                  	mov byte [rax], T_closure
 12442 0000935A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12443 0000935E 48C74009[6B930000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0051
 12444 00009366 E992000000              	jmp .L_lambda_simple_end_0051
 12445                                  .L_lambda_simple_code_0051:	; lambda-simple body
 12446 0000936B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12447 00009371 740B                    	je .L_lambda_simple_arity_check_ok_0051
 12448 00009373 FF742410                	push qword [rsp + 8 * 2]
 12449 00009377 6A02                    	push 2
 12450 00009379 E933830000              	jmp L_error_incorrect_arity_simple
 12451                                  .L_lambda_simple_arity_check_ok_0051:
 12452 0000937E C8000000                	enter 0, 0
 12453 00009382 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12454 00009386 50                      	push rax
 12455 00009387 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12456 0000938B 50                      	push rax
 12457 0000938C 6A02                    	push 2
 12458 0000938E 488B4510                	mov rax, qword [rbp + 8 * 2]
 12459                                  
 12460 00009392 488B4010                                          	mov rax, qword[rax + 8 * 2]
 12461                                  
 12462 00009396 488B00                                            	mov rax, qword[rax + 8 * 0]
 12463                                  .L_applic_TC_006a:
 12464 00009399 803805                  	cmp byte [rax], T_closure
 12465 0000939C 0F850B930000            	jne L_code_ptr_error
 12466 000093A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12467 000093A6 53                      	push rbx
 12468 000093A7 FF7508                  	push qword [rbp + 8]
 12469 000093AA FF7500                  	push qword [rbp]
 12470 000093AD 488B4D18                	mov rcx, [rbp + 3 * 8]
 12471 000093B1 488B542418              	mov rdx, [rsp + 3 * 8]
 12472 000093B6 488D7204                	lea rsi, [rdx + 4]
 12473 000093BA 4C8D4EFF                	lea r9, [rsi - 1]
 12474 000093BE 488D7903                	lea rdi, [rcx + 3]
 12475 000093C2 4D31C0                  	xor r8, r8
 12476                                  .L_tc_recycle_frame_loop_006a:
 12477 000093C5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12478 000093C9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12479 000093CE 49FFC9                  	dec r9
 12480 000093D1 4D31C0                  	xor r8, r8
 12481 000093D4 48FFCF                  	dec rdi
 12482 000093D7 48FFCE                  	dec rsi
 12483 000093DA 4883FE00                	cmp rsi, 0
 12484 000093DE 75E5                    	jne .L_tc_recycle_frame_loop_006a
 12485                                  .L_tc_recycle_frame_done_006a:
 12486                                  ;this pop rbp in sot to the right place
 12487 000093E0 4989C9                  	mov r9, rcx
 12488 000093E3 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12489 000093EB 4C01CC                  	add rsp, r9
 12490 000093EE 5D                      	pop rbp
 12491 000093EF 488B4D00                	mov rcx, qword [rbp]
 12492 000093F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12493 000093F7 FFE3                    	jmp rbx
 12494 000093F9 C9                      	leave
 12495 000093FA C22000                  	ret 8 * (2 + 2)
 12496                                  .L_lambda_simple_end_0051:	; new closure is in rax
 12497 000093FD 50                      	push rax
 12498 000093FE 6A01                    	push 1
 12499 00009400 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12500 00009405 E8EE820000              	call malloc
 12501 0000940A 50                      	push rax
 12502 0000940B BF08000000              	mov rdi, 8 * 1	; new rib
 12503 00009410 E8E3820000              	call malloc
 12504 00009415 50                      	push rax
 12505 00009416 BF30000000              	mov rdi, 8 * 6	; extended env
 12506 0000941B E8D8820000              	call malloc
 12507 00009420 488B7D10                	mov rdi, ENV
 12508 00009424 BE00000000              	mov rsi, 0
 12509 00009429 BA01000000              	mov rdx, 1
 12510                                  .L_lambda_simple_env_loop_0052:	; ext_env[i + 1] <-- env[i]
 12511 0000942E 4883FE05                	cmp rsi, 5
 12512 00009432 7410                    	je .L_lambda_simple_env_end_0052
 12513 00009434 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12514 00009438 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12515 0000943C 48FFC6                  	inc rsi
 12516 0000943F 48FFC2                  	inc rdx
 12517 00009442 EBEA                    	jmp .L_lambda_simple_env_loop_0052
 12518                                  .L_lambda_simple_env_end_0052:
 12519 00009444 5B                      	pop rbx
 12520 00009445 BE00000000              	mov rsi, 0
 12521                                  .L_lambda_simple_params_loop_0052:	; copy params
 12522 0000944A 4883FE01                	cmp rsi, 1
 12523 0000944E 740E                    	je .L_lambda_simple_params_end_0052
 12524 00009450 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12525 00009455 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12526 00009459 48FFC6                  	inc rsi
 12527 0000945C EBEC                    	jmp .L_lambda_simple_params_loop_0052
 12528                                  .L_lambda_simple_params_end_0052:
 12529 0000945E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12530 00009461 4889C3                  	mov rbx, rax
 12531 00009464 58                      	pop rax
 12532 00009465 C60005                  	mov byte [rax], T_closure
 12533 00009468 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12534 0000946C 48C74009[79940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0052
 12535 00009474 E9B3090000              	jmp .L_lambda_simple_end_0052
 12536                                  .L_lambda_simple_code_0052:	; lambda-simple body
 12537 00009479 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12538 0000947F 740B                    	je .L_lambda_simple_arity_check_ok_0052
 12539 00009481 FF742410                	push qword [rsp + 8 * 2]
 12540 00009485 6A01                    	push 1
 12541 00009487 E925820000              	jmp L_error_incorrect_arity_simple
 12542                                  .L_lambda_simple_arity_check_ok_0052:
 12543 0000948C C8000000                	enter 0, 0
 12544 00009490 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12545 00009495 E85E820000              	call malloc
 12546 0000949A 50                      	push rax
 12547 0000949B BF08000000              	mov rdi, 8 * 1	; new rib
 12548 000094A0 E853820000              	call malloc
 12549 000094A5 50                      	push rax
 12550 000094A6 BF38000000              	mov rdi, 8 * 7	; extended env
 12551 000094AB E848820000              	call malloc
 12552 000094B0 488B7D10                	mov rdi, ENV
 12553 000094B4 BE00000000              	mov rsi, 0
 12554 000094B9 BA01000000              	mov rdx, 1
 12555                                  .L_lambda_simple_env_loop_0053:	; ext_env[i + 1] <-- env[i]
 12556 000094BE 4883FE06                	cmp rsi, 6
 12557 000094C2 7410                    	je .L_lambda_simple_env_end_0053
 12558 000094C4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12559 000094C8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12560 000094CC 48FFC6                  	inc rsi
 12561 000094CF 48FFC2                  	inc rdx
 12562 000094D2 EBEA                    	jmp .L_lambda_simple_env_loop_0053
 12563                                  .L_lambda_simple_env_end_0053:
 12564 000094D4 5B                      	pop rbx
 12565 000094D5 BE00000000              	mov rsi, 0
 12566                                  .L_lambda_simple_params_loop_0053:	; copy params
 12567 000094DA 4883FE01                	cmp rsi, 1
 12568 000094DE 740E                    	je .L_lambda_simple_params_end_0053
 12569 000094E0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12570 000094E5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12571 000094E9 48FFC6                  	inc rsi
 12572 000094EC EBEC                    	jmp .L_lambda_simple_params_loop_0053
 12573                                  .L_lambda_simple_params_end_0053:
 12574 000094EE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12575 000094F1 4889C3                  	mov rbx, rax
 12576 000094F4 58                      	pop rax
 12577 000094F5 C60005                  	mov byte [rax], T_closure
 12578 000094F8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12579 000094FC 48C74009[09950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0053
 12580 00009504 E9AB000000              	jmp .L_lambda_simple_end_0053
 12581                                  .L_lambda_simple_code_0053:	; lambda-simple body
 12582 00009509 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12583 0000950F 740B                    	je .L_lambda_simple_arity_check_ok_0053
 12584 00009511 FF742410                	push qword [rsp + 8 * 2]
 12585 00009515 6A02                    	push 2
 12586 00009517 E995810000              	jmp L_error_incorrect_arity_simple
 12587                                  .L_lambda_simple_arity_check_ok_0053:
 12588 0000951C C8000000                	enter 0, 0
 12589 00009520 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12590 00009524 50                      	push rax
 12591 00009525 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12592 00009529 50                      	push rax
 12593 0000952A 6A02                    	push 2
 12594 0000952C 488B4510                	mov rax, qword [rbp + 8 * 2]
 12595                                  
 12596 00009530 488B00                                            	mov rax, qword[rax + 8 * 0]
 12597                                  
 12598 00009533 488B00                                            	mov rax, qword[rax + 8 * 0]
 12599                                  	assert_closure(rax)
    42 00009536 803805              <1>  cmp byte [%1], %2
    43 00009539 0F85AD990000        <1>  jne L_error_incorrect_type
 12600 0000953F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12601 00009542 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12602 00009545 50                      	push rax
 12603 00009546 6A01                    	push 1
 12604 00009548 488B0425[B0020000]      	mov rax, qword [free_var_86]
 12605                                  .L_applic_TC_006b:
 12606 00009550 803805                  	cmp byte [rax], T_closure
 12607 00009553 0F8554910000            	jne L_code_ptr_error
 12608 00009559 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12609 0000955D 53                      	push rbx
 12610 0000955E FF7508                  	push qword [rbp + 8]
 12611 00009561 FF7500                  	push qword [rbp]
 12612 00009564 488B4D18                	mov rcx, [rbp + 3 * 8]
 12613 00009568 488B542418              	mov rdx, [rsp + 3 * 8]
 12614 0000956D 488D7204                	lea rsi, [rdx + 4]
 12615 00009571 4C8D4EFF                	lea r9, [rsi - 1]
 12616 00009575 488D7903                	lea rdi, [rcx + 3]
 12617 00009579 4D31C0                  	xor r8, r8
 12618                                  .L_tc_recycle_frame_loop_006b:
 12619 0000957C 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12620 00009580 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12621 00009585 49FFC9                  	dec r9
 12622 00009588 4D31C0                  	xor r8, r8
 12623 0000958B 48FFCF                  	dec rdi
 12624 0000958E 48FFCE                  	dec rsi
 12625 00009591 4883FE00                	cmp rsi, 0
 12626 00009595 75E5                    	jne .L_tc_recycle_frame_loop_006b
 12627                                  .L_tc_recycle_frame_done_006b:
 12628                                  ;this pop rbp in sot to the right place
 12629 00009597 4989C9                  	mov r9, rcx
 12630 0000959A 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12631 000095A2 4C01CC                  	add rsp, r9
 12632 000095A5 5D                      	pop rbp
 12633 000095A6 488B4D00                	mov rcx, qword [rbp]
 12634 000095AA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12635 000095AE FFE3                    	jmp rbx
 12636 000095B0 C9                      	leave
 12637 000095B1 C22000                  	ret 8 * (2 + 2)
 12638                                  .L_lambda_simple_end_0053:	; new closure is in rax
 12639 000095B4 50                      	push rax
 12640 000095B5 6A01                    	push 1
 12641 000095B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12642 000095BC E837810000              	call malloc
 12643 000095C1 50                      	push rax
 12644 000095C2 BF08000000              	mov rdi, 8 * 1	; new rib
 12645 000095C7 E82C810000              	call malloc
 12646 000095CC 50                      	push rax
 12647 000095CD BF38000000              	mov rdi, 8 * 7	; extended env
 12648 000095D2 E821810000              	call malloc
 12649 000095D7 488B7D10                	mov rdi, ENV
 12650 000095DB BE00000000              	mov rsi, 0
 12651 000095E0 BA01000000              	mov rdx, 1
 12652                                  .L_lambda_simple_env_loop_0054:	; ext_env[i + 1] <-- env[i]
 12653 000095E5 4883FE06                	cmp rsi, 6
 12654 000095E9 7410                    	je .L_lambda_simple_env_end_0054
 12655 000095EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12656 000095EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12657 000095F3 48FFC6                  	inc rsi
 12658 000095F6 48FFC2                  	inc rdx
 12659 000095F9 EBEA                    	jmp .L_lambda_simple_env_loop_0054
 12660                                  .L_lambda_simple_env_end_0054:
 12661 000095FB 5B                      	pop rbx
 12662 000095FC BE00000000              	mov rsi, 0
 12663                                  .L_lambda_simple_params_loop_0054:	; copy params
 12664 00009601 4883FE01                	cmp rsi, 1
 12665 00009605 740E                    	je .L_lambda_simple_params_end_0054
 12666 00009607 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12667 0000960C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12668 00009610 48FFC6                  	inc rsi
 12669 00009613 EBEC                    	jmp .L_lambda_simple_params_loop_0054
 12670                                  .L_lambda_simple_params_end_0054:
 12671 00009615 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12672 00009618 4889C3                  	mov rbx, rax
 12673 0000961B 58                      	pop rax
 12674 0000961C C60005                  	mov byte [rax], T_closure
 12675 0000961F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12676 00009623 48C74009[30960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0054
 12677 0000962B E998070000              	jmp .L_lambda_simple_end_0054
 12678                                  .L_lambda_simple_code_0054:	; lambda-simple body
 12679 00009630 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12680 00009636 740B                    	je .L_lambda_simple_arity_check_ok_0054
 12681 00009638 FF742410                	push qword [rsp + 8 * 2]
 12682 0000963C 6A01                    	push 1
 12683 0000963E E96E800000              	jmp L_error_incorrect_arity_simple
 12684                                  .L_lambda_simple_arity_check_ok_0054:
 12685 00009643 C8000000                	enter 0, 0
 12686 00009647 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12687 0000964C E8A7800000              	call malloc
 12688 00009651 50                      	push rax
 12689 00009652 BF08000000              	mov rdi, 8 * 1	; new rib
 12690 00009657 E89C800000              	call malloc
 12691 0000965C 50                      	push rax
 12692 0000965D BF40000000              	mov rdi, 8 * 8	; extended env
 12693 00009662 E891800000              	call malloc
 12694 00009667 488B7D10                	mov rdi, ENV
 12695 0000966B BE00000000              	mov rsi, 0
 12696 00009670 BA01000000              	mov rdx, 1
 12697                                  .L_lambda_simple_env_loop_0055:	; ext_env[i + 1] <-- env[i]
 12698 00009675 4883FE07                	cmp rsi, 7
 12699 00009679 7410                    	je .L_lambda_simple_env_end_0055
 12700 0000967B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12701 0000967F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12702 00009683 48FFC6                  	inc rsi
 12703 00009686 48FFC2                  	inc rdx
 12704 00009689 EBEA                    	jmp .L_lambda_simple_env_loop_0055
 12705                                  .L_lambda_simple_env_end_0055:
 12706 0000968B 5B                      	pop rbx
 12707 0000968C BE00000000              	mov rsi, 0
 12708                                  .L_lambda_simple_params_loop_0055:	; copy params
 12709 00009691 4883FE01                	cmp rsi, 1
 12710 00009695 740E                    	je .L_lambda_simple_params_end_0055
 12711 00009697 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12712 0000969C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12713 000096A0 48FFC6                  	inc rsi
 12714 000096A3 EBEC                    	jmp .L_lambda_simple_params_loop_0055
 12715                                  .L_lambda_simple_params_end_0055:
 12716 000096A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12717 000096A8 4889C3                  	mov rbx, rax
 12718 000096AB 58                      	pop rax
 12719 000096AC C60005                  	mov byte [rax], T_closure
 12720 000096AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12721 000096B3 48C74009[C0960000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0055
 12722 000096BB E90F050000              	jmp .L_lambda_simple_end_0055
 12723                                  .L_lambda_simple_code_0055:	; lambda-simple body
 12724 000096C0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12725 000096C6 740B                    	je .L_lambda_simple_arity_check_ok_0055
 12726 000096C8 FF742410                	push qword [rsp + 8 * 2]
 12727 000096CC 6A01                    	push 1
 12728 000096CE E9DE7F0000              	jmp L_error_incorrect_arity_simple
 12729                                  .L_lambda_simple_arity_check_ok_0055:
 12730 000096D3 C8000000                	enter 0, 0
 12731 000096D7 48B8-                   	mov rax,L_constants + 23
 12731 000096D9 [1700000000000000] 
 12732 000096E1 50                      	push rax
 12733 000096E2 6A01                    	push 1
 12734 000096E4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12735 000096E9 E80A800000              	call malloc
 12736 000096EE 50                      	push rax
 12737 000096EF BF08000000              	mov rdi, 8 * 1	; new rib
 12738 000096F4 E8FF7F0000              	call malloc
 12739 000096F9 50                      	push rax
 12740 000096FA BF48000000              	mov rdi, 8 * 9	; extended env
 12741 000096FF E8F47F0000              	call malloc
 12742 00009704 488B7D10                	mov rdi, ENV
 12743 00009708 BE00000000              	mov rsi, 0
 12744 0000970D BA01000000              	mov rdx, 1
 12745                                  .L_lambda_simple_env_loop_0056:	; ext_env[i + 1] <-- env[i]
 12746 00009712 4883FE08                	cmp rsi, 8
 12747 00009716 7410                    	je .L_lambda_simple_env_end_0056
 12748 00009718 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12749 0000971C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12750 00009720 48FFC6                  	inc rsi
 12751 00009723 48FFC2                  	inc rdx
 12752 00009726 EBEA                    	jmp .L_lambda_simple_env_loop_0056
 12753                                  .L_lambda_simple_env_end_0056:
 12754 00009728 5B                      	pop rbx
 12755 00009729 BE00000000              	mov rsi, 0
 12756                                  .L_lambda_simple_params_loop_0056:	; copy params
 12757 0000972E 4883FE01                	cmp rsi, 1
 12758 00009732 740E                    	je .L_lambda_simple_params_end_0056
 12759 00009734 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12760 00009739 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12761 0000973D 48FFC6                  	inc rsi
 12762 00009740 EBEC                    	jmp .L_lambda_simple_params_loop_0056
 12763                                  .L_lambda_simple_params_end_0056:
 12764 00009742 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12765 00009745 4889C3                  	mov rbx, rax
 12766 00009748 58                      	pop rax
 12767 00009749 C60005                  	mov byte [rax], T_closure
 12768 0000974C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12769 00009750 48C74009[5D970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0056
 12770 00009758 E90E040000              	jmp .L_lambda_simple_end_0056
 12771                                  .L_lambda_simple_code_0056:	; lambda-simple body
 12772 0000975D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12773 00009763 740B                    	je .L_lambda_simple_arity_check_ok_0056
 12774 00009765 FF742410                	push qword [rsp + 8 * 2]
 12775 00009769 6A01                    	push 1
 12776 0000976B E9417F0000              	jmp L_error_incorrect_arity_simple
 12777                                  .L_lambda_simple_arity_check_ok_0056:
 12778 00009770 C8000000                	enter 0, 0
 12779 00009774 BF08000000              	mov rdi, 8
 12780 00009779 E87A7F0000              	call malloc
 12781 0000977E 488B5D20                	mov rbx, PARAM(0)
 12782 00009782 488918                  	mov qword [rax], rbx
 12783 00009785 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 12784                                  
 12785 00009789 48B8-                            	mov rax, sob_void
 12785 0000978B [0000000000000000] 
 12786                                  
 12787 00009793 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12788 00009798 E85B7F0000              	call malloc
 12789 0000979D 50                      	push rax
 12790 0000979E BF08000000              	mov rdi, 8 * 1	; new rib
 12791 000097A3 E8507F0000              	call malloc
 12792 000097A8 50                      	push rax
 12793 000097A9 BF50000000              	mov rdi, 8 * 10	; extended env
 12794 000097AE E8457F0000              	call malloc
 12795 000097B3 488B7D10                	mov rdi, ENV
 12796 000097B7 BE00000000              	mov rsi, 0
 12797 000097BC BA01000000              	mov rdx, 1
 12798                                  .L_lambda_simple_env_loop_0057:	; ext_env[i + 1] <-- env[i]
 12799 000097C1 4883FE09                	cmp rsi, 9
 12800 000097C5 7410                    	je .L_lambda_simple_env_end_0057
 12801 000097C7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12802 000097CB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12803 000097CF 48FFC6                  	inc rsi
 12804 000097D2 48FFC2                  	inc rdx
 12805 000097D5 EBEA                    	jmp .L_lambda_simple_env_loop_0057
 12806                                  .L_lambda_simple_env_end_0057:
 12807 000097D7 5B                      	pop rbx
 12808 000097D8 BE00000000              	mov rsi, 0
 12809                                  .L_lambda_simple_params_loop_0057:	; copy params
 12810 000097DD 4883FE01                	cmp rsi, 1
 12811 000097E1 740E                    	je .L_lambda_simple_params_end_0057
 12812 000097E3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12813 000097E8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12814 000097EC 48FFC6                  	inc rsi
 12815 000097EF EBEC                    	jmp .L_lambda_simple_params_loop_0057
 12816                                  .L_lambda_simple_params_end_0057:
 12817 000097F1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12818 000097F4 4889C3                  	mov rbx, rax
 12819 000097F7 58                      	pop rax
 12820 000097F8 C60005                  	mov byte [rax], T_closure
 12821 000097FB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12822 000097FF 48C74009[0C980000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0057
 12823 00009807 E94A010000              	jmp .L_lambda_simple_end_0057
 12824                                  .L_lambda_simple_code_0057:	; lambda-simple body
 12825 0000980C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 12826 00009812 740B                    	je .L_lambda_simple_arity_check_ok_0057
 12827 00009814 FF742410                	push qword [rsp + 8 * 2]
 12828 00009818 6A02                    	push 2
 12829 0000981A E9927E0000              	jmp L_error_incorrect_arity_simple
 12830                                  .L_lambda_simple_arity_check_ok_0057:
 12831 0000981F C8000000                	enter 0, 0
 12832 00009823 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12833 00009827 50                      	push rax
 12834 00009828 6A01                    	push 1
 12835 0000982A 488B0425[00000000]      	mov rax, qword [free_var_0]
 12836                                  	assert_closure(rax)
    42 00009832 803805              <1>  cmp byte [%1], %2
    43 00009835 0F85B1960000        <1>  jne L_error_incorrect_type
 12837 0000983B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12838 0000983E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12839 00009841 483D[02000000]          	cmp rax, sob_boolean_false
 12840 00009847 0F8505010000            	jne .L_or_end_0004
 12841 0000984D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12842 00009851 50                      	push rax
 12843 00009852 6A01                    	push 1
 12844 00009854 488B0425[80000000]      	mov rax, qword [free_var_16]
 12845                                  	assert_closure(rax)
    42 0000985C 803805              <1>  cmp byte [%1], %2
    43 0000985F 0F8587960000        <1>  jne L_error_incorrect_type
 12846 00009865 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12847 00009868 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12848 0000986B 50                      	push rax
 12849 0000986C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12850 00009870 50                      	push rax
 12851 00009871 6A02                    	push 2
 12852 00009873 488B4510                	mov rax, qword [rbp + 8 * 2]
 12853                                  
 12854 00009877 488B4008                                          	mov rax, qword[rax + 8 * 1]
 12855                                  
 12856 0000987B 488B00                                            	mov rax, qword[rax + 8 * 0]
 12857                                  	assert_closure(rax)
    42 0000987E 803805              <1>  cmp byte [%1], %2
    43 00009881 0F8565960000        <1>  jne L_error_incorrect_type
 12858 00009887 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12859 0000988A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12860                                  
 12861 0000988D 483D[02000000]                  	cmp rax, sob_boolean_false
 12862                                  
 12863 00009893 0F84AF000000                    	je .L_if_else_0032
 12864 00009899 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12865 0000989D 50                      	push rax
 12866 0000989E 6A01                    	push 1
 12867 000098A0 488B0425[88000000]      	mov rax, qword [free_var_17]
 12868                                  	assert_closure(rax)
    42 000098A8 803805              <1>  cmp byte [%1], %2
    43 000098AB 0F853B960000        <1>  jne L_error_incorrect_type
 12869 000098B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12870 000098B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12871 000098B7 50                      	push rax
 12872 000098B8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 12873 000098BC 50                      	push rax
 12874 000098BD 6A01                    	push 1
 12875 000098BF 488B0425[80000000]      	mov rax, qword [free_var_16]
 12876                                  	assert_closure(rax)
    42 000098C7 803805              <1>  cmp byte [%1], %2
    43 000098CA 0F851C960000        <1>  jne L_error_incorrect_type
 12877 000098D0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 12878 000098D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12879 000098D6 50                      	push rax
 12880 000098D7 6A02                    	push 2
 12881 000098D9 488B4510                	mov rax, qword [rbp + 8 * 2]
 12882                                  
 12883 000098DD 488B00                                            	mov rax, qword[rax + 8 * 0]
 12884                                  
 12885 000098E0 488B00                                            	mov rax, qword[rax + 8 * 0]
 12886 000098E3 488B00                  	mov rax, qword [rax]
 12887                                  .L_applic_TC_006c:
 12888 000098E6 803805                  	cmp byte [rax], T_closure
 12889 000098E9 0F85BE8D0000            	jne L_code_ptr_error
 12890 000098EF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 12891 000098F3 53                      	push rbx
 12892 000098F4 FF7508                  	push qword [rbp + 8]
 12893 000098F7 FF7500                  	push qword [rbp]
 12894 000098FA 488B4D18                	mov rcx, [rbp + 3 * 8]
 12895 000098FE 488B542418              	mov rdx, [rsp + 3 * 8]
 12896 00009903 488D7204                	lea rsi, [rdx + 4]
 12897 00009907 4C8D4EFF                	lea r9, [rsi - 1]
 12898 0000990B 488D7903                	lea rdi, [rcx + 3]
 12899 0000990F 4D31C0                  	xor r8, r8
 12900                                  .L_tc_recycle_frame_loop_006c:
 12901 00009912 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 12902 00009916 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 12903 0000991B 49FFC9                  	dec r9
 12904 0000991E 4D31C0                  	xor r8, r8
 12905 00009921 48FFCF                  	dec rdi
 12906 00009924 48FFCE                  	dec rsi
 12907 00009927 4883FE00                	cmp rsi, 0
 12908 0000992B 75E5                    	jne .L_tc_recycle_frame_loop_006c
 12909                                  .L_tc_recycle_frame_done_006c:
 12910                                  ;this pop rbp in sot to the right place
 12911 0000992D 4989C9                  	mov r9, rcx
 12912 00009930 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 12913 00009938 4C01CC                  	add rsp, r9
 12914 0000993B 5D                      	pop rbp
 12915 0000993C 488B4D00                	mov rcx, qword [rbp]
 12916 00009940 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 12917 00009944 FFE3                    	jmp rbx
 12918                                  
 12919 00009946 EB0A                            	jmp .L_if_end_0032
 12920                                  
 12921                                          	.L_if_else_0032:
 12922 00009948 48B8-                   	mov rax,L_constants + 2
 12922 0000994A [0200000000000000] 
 12923                                  
 12924                                          	.L_if_end_0032:
 12925                                  .L_or_end_0004:
 12926 00009952 C9                      	leave
 12927 00009953 C22000                  	ret 8 * (2 + 2)
 12928                                  .L_lambda_simple_end_0057:	; new closure is in rax
 12929 00009956 50                      	push rax
 12930 00009957 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 12931 0000995B 8F00                    	pop qword [rax]
 12932 0000995D 48B8-                   	mov rax, sob_void
 12932 0000995F [0000000000000000] 
 12933                                  
 12934 00009967 BF11000000              	mov rdi, (1 + 8 + 8)
 12935 0000996C E8877D0000              	call malloc
 12936 00009971 50                      	push rax
 12937 00009972 BF08000000              	mov rdi, 8 * 1
 12938 00009977 E87C7D0000              	call malloc
 12939 0000997C 50                      	push rax
 12940 0000997D BF50000000              	mov rdi, 8 * 10
 12941 00009982 E8717D0000              	call malloc
 12942 00009987 488B7D10                	mov rdi, ENV
 12943 0000998B 4831F6                  	xor rsi, rsi
 12944 0000998E 4831D2                  	xor rdx, rdx
 12945 00009991 48FFC2                  	inc rdx
 12946                                  	.L_lambda_opt_env_loop_000e:
 12947                                  
 12948 00009994 4883FE09                        	cmp rsi, 9
 12949                                  
 12950 00009998 7412                            	je .L_lambda_opt_env_end_000e
 12951 0000999A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12952 0000999E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12953 000099A2 4883C201                	add rdx, 1
 12954 000099A6 4883C601                	add rsi, 1
 12955 000099AA EBE8                    	jmp .L_lambda_opt_env_loop_000e
 12956                                  
 12957                                          	.L_lambda_opt_env_end_000e:
 12958 000099AC 5B                      	pop rbx
 12959 000099AD 4831F6                  	xor rsi, rsi
 12960                                  	.L_lambda_opt_params_loop_000e:
 12961                                  
 12962 000099B0 4883FE01                        	cmp rsi, 1
 12963                                  
 12964 000099B4 740F                            	je .L_lambda_opt_params_end_000e
 12965 000099B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12966 000099BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12967 000099BF 4883C601                	add rsi, 1
 12968 000099C3 EBEB                    	jmp .L_lambda_opt_params_loop_000e
 12969                                  
 12970                                          	.L_lambda_opt_params_end_000e:
 12971 000099C5 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 12972 000099C8 4889C3                  	mov rbx, rax
 12973 000099CB 58                      	pop rax
 12974 000099CC C60005                  	mov byte [rax], T_closure
 12975 000099CF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12976 000099D3 48C74009[E0990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000e
 12977                                  
 12978 000099DB E987010000                      	jmp .L_lambda_opt_end_000e
 12979                                  
 12980                                          	.L_lambda_opt_code_000e:
 12981                                  
 12982 000099E0 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 12983                                  
 12984 000099E6 740D                            	je .L_lambda_opt_arity_check_exact_000e  ;same num_of_args
 12985                                  
 12986 000099E8 7F65                            	jg .L_lambda_opt_arity_check_more_000e  ;greater num_of_args
 12987 000099EA FF742410                	push qword [rsp + 8 * 2]
 12988 000099EE 6A01                    	push 1
 12989 000099F0 E9D07C0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 12990                                  .L_lambda_opt_arity_check_exact_000e:
 12991 000099F5 4883EC08                	sub rsp, 8 * 1
 12992 000099F9 488D7F10                	lea rdi, [rdi + (8 * 2)]
 12993 000099FD 4889E7                  	mov rdi, rsp 
 12994 00009A00 488B4708                	mov rax, qword [rdi + 8]
 12995 00009A04 488907                  	mov qword [rdi], rax
 12996 00009A07 488D7F08                	lea rdi, [rdi + 8]
 12997 00009A0B 488B4708                	mov rax, qword [rdi + 8]
 12998 00009A0F 488907                  	mov qword [rdi], rax
 12999 00009A12 488D7F08                	lea rdi, [rdi + 8]
 13000 00009A16 488B4708                	mov rax, qword [rdi + 8]
 13001 00009A1A 4889C1                  	mov rcx, rax
 13002 00009A1D 4883C001                	add rax, 1
 13003 00009A21 488907                  	mov qword [rdi], rax
 13004 00009A24 488D7F08                	lea rdi, [rdi + 8]
 13005                                  	.L_lambda_opt_stack_shrink_loop_0028:
 13006 00009A28 4883F900                	cmp rcx, 0
 13007 00009A2C 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0028
 13008 00009A2E 4883E901                	sub rcx, 1
 13009 00009A32 488D4010                	lea rax, [rax + (8 * 2)]
 13010 00009A36 488B4708                	mov rax, qword [rdi + 8]
 13011 00009A3A 488907                  	mov qword [rdi], rax
 13012 00009A3D 488D7F08                	lea rdi, [rdi + 8]
 13013 00009A41 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0028
 13014                                  
 13015                                          	.L_lambda_opt_stack_shrink_loop_exit_0028:
 13016 00009A43 48C707[01000000]        	mov qword [rdi], sob_nil
 13017 00009A4A E997000000              	jmp .L_lambda_opt_stack_adjusted_000e
 13018                                  
 13019                                          	.L_lambda_opt_arity_check_more_000e:
 13020 00009A4F 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 13021 00009A54 488D4EFF                	lea rcx, [rsi - 1]
 13022 00009A58 49B8-                   	mov r8, sob_nil
 13022 00009A5A [0100000000000000] 
 13023 00009A62 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 13024 00009A67 4889F2                  	mov rdx, rsi
 13025                                  	.L_lambda_opt_stack_shrink_loop_0029:
 13026 00009A6A 4883F900                	cmp rcx, 0
 13027 00009A6E 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0029
 13028 00009A70 BF11000000              	mov rdi, 1 + (8 * 2)
 13029 00009A75 E87E7C0000              	call malloc
 13030 00009A7A C60021                  	mov byte [rax], T_pair
 13031 00009A7D 488B1E                  	mov rbx, qword [rsi]
 13032 00009A80 48895801                	mov SOB_PAIR_CAR(rax), rbx
 13033 00009A84 4C894009                	mov SOB_PAIR_CDR(rax), r8
 13034 00009A88 4883C6F8                	add rsi, -8
 13035 00009A8C 4883E901                	sub rcx, 1
 13036 00009A90 4989C0                  	mov r8, rax
 13037 00009A93 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0029
 13038                                  
 13039                                          	.L_lambda_opt_stack_shrink_loop_exit_0029:
 13040 00009A95 4C8902                  	mov qword [rdx], r8
 13041 00009A98 4883EA08                	sub rdx, 8 * 1
 13042 00009A9C 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 13043                                  
 13044 00009AA1 B901000000                      	mov rcx, 1 
 13045                                  
 13046                                          	.L_lambda_opt_stack_shrink_loop_002a:
 13047 00009AA6 4883F900                	cmp rcx, 0
 13048 00009AAA 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_002a
 13049 00009AAC 488B06                  	mov rax, qword [rsi]
 13050 00009AAF 488902                  	mov qword [rdx], rax
 13051 00009AB2 488D76F8                	lea rsi, [rsi - 8]
 13052 00009AB6 4883C2F8                	add rdx, -8
 13053 00009ABA 4883C1FF                	add rcx, -1
 13054 00009ABE EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_002a
 13055                                  
 13056                                          	.L_lambda_opt_stack_shrink_loop_exit_002a:
 13057                                  
 13058 00009AC0 48C70202000000                  	mov qword [rdx], 1 + 1
 13059 00009AC7 4883C6F8                	add rsi, -8
 13060 00009ACB 4883C2F8                	add rdx, -8
 13061 00009ACF 488B06                  	mov rax, qword [rsi]
 13062 00009AD2 488902                  	mov qword [rdx], rax
 13063 00009AD5 4883C2F8                	add rdx, -8
 13064 00009AD9 488D76F8                	lea rsi, [rsi - 8]
 13065 00009ADD 488B06                  	mov rax, qword [rsi]
 13066 00009AE0 488902                  	mov qword [rdx], rax
 13067 00009AE3 4889D4                  	mov rsp, rdx
 13068                                  	.L_lambda_opt_stack_adjusted_000e:
 13069 00009AE6 C8000000                	enter 0, 0
 13070 00009AEA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13071 00009AEE 50                      	push rax
 13072 00009AEF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13073 00009AF3 50                      	push rax
 13074 00009AF4 6A02                    	push 2
 13075 00009AF6 488B4510                	mov rax, qword [rbp + 8 * 2]
 13076                                  
 13077 00009AFA 488B00                                            	mov rax, qword[rax + 8 * 0]
 13078                                  
 13079 00009AFD 488B00                                            	mov rax, qword[rax + 8 * 0]
 13080 00009B00 488B00                  	mov rax, qword [rax]
 13081                                  .L_applic_TC_006d:
 13082 00009B03 803805                  	cmp byte [rax], T_closure
 13083 00009B06 0F85A18B0000            	jne L_code_ptr_error
 13084 00009B0C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13085 00009B10 53                      	push rbx
 13086 00009B11 FF7508                  	push qword [rbp + 8]
 13087 00009B14 FF7500                  	push qword [rbp]
 13088 00009B17 488B4D18                	mov rcx, [rbp + 3 * 8]
 13089 00009B1B 488B542418              	mov rdx, [rsp + 3 * 8]
 13090 00009B20 488D7204                	lea rsi, [rdx + 4]
 13091 00009B24 4C8D4EFF                	lea r9, [rsi - 1]
 13092 00009B28 488D7903                	lea rdi, [rcx + 3]
 13093 00009B2C 4D31C0                  	xor r8, r8
 13094                                  .L_tc_recycle_frame_loop_006d:
 13095 00009B2F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13096 00009B33 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13097 00009B38 49FFC9                  	dec r9
 13098 00009B3B 4D31C0                  	xor r8, r8
 13099 00009B3E 48FFCF                  	dec rdi
 13100 00009B41 48FFCE                  	dec rsi
 13101 00009B44 4883FE00                	cmp rsi, 0
 13102 00009B48 75E5                    	jne .L_tc_recycle_frame_loop_006d
 13103                                  .L_tc_recycle_frame_done_006d:
 13104                                  ;this pop rbp in sot to the right place
 13105 00009B4A 4989C9                  	mov r9, rcx
 13106 00009B4D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13107 00009B55 4C01CC                  	add rsp, r9
 13108 00009B58 5D                      	pop rbp
 13109 00009B59 488B4D00                	mov rcx, qword [rbp]
 13110 00009B5D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13111 00009B61 FFE3                    	jmp rbx
 13112 00009B63 C9                      	leave
 13113 00009B64 C22000                  	ret 8 * (2 + 2)
 13114                                  .L_lambda_opt_end_000e:	; new closure is in rax
 13115 00009B67 C9                      	leave
 13116 00009B68 C21800                  	ret 8 * (2 + 1)
 13117                                  .L_lambda_simple_end_0056:	; new closure is in rax
 13118                                  .L_applic_TC_006e:
 13119 00009B6B 803805                  	cmp byte [rax], T_closure
 13120 00009B6E 0F85398B0000            	jne L_code_ptr_error
 13121 00009B74 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13122 00009B78 53                      	push rbx
 13123 00009B79 FF7508                  	push qword [rbp + 8]
 13124 00009B7C FF7500                  	push qword [rbp]
 13125 00009B7F 488B4D18                	mov rcx, [rbp + 3 * 8]
 13126 00009B83 488B542418              	mov rdx, [rsp + 3 * 8]
 13127 00009B88 488D7204                	lea rsi, [rdx + 4]
 13128 00009B8C 4C8D4EFF                	lea r9, [rsi - 1]
 13129 00009B90 488D7903                	lea rdi, [rcx + 3]
 13130 00009B94 4D31C0                  	xor r8, r8
 13131                                  .L_tc_recycle_frame_loop_006e:
 13132 00009B97 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13133 00009B9B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13134 00009BA0 49FFC9                  	dec r9
 13135 00009BA3 4D31C0                  	xor r8, r8
 13136 00009BA6 48FFCF                  	dec rdi
 13137 00009BA9 48FFCE                  	dec rsi
 13138 00009BAC 4883FE00                	cmp rsi, 0
 13139 00009BB0 75E5                    	jne .L_tc_recycle_frame_loop_006e
 13140                                  .L_tc_recycle_frame_done_006e:
 13141                                  ;this pop rbp in sot to the right place
 13142 00009BB2 4989C9                  	mov r9, rcx
 13143 00009BB5 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13144 00009BBD 4C01CC                  	add rsp, r9
 13145 00009BC0 5D                      	pop rbp
 13146 00009BC1 488B4D00                	mov rcx, qword [rbp]
 13147 00009BC5 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13148 00009BC9 FFE3                    	jmp rbx
 13149 00009BCB C9                      	leave
 13150 00009BCC C21800                  	ret 8 * (2 + 1)
 13151                                  .L_lambda_simple_end_0055:	; new closure is in rax
 13152 00009BCF 50                      	push rax
 13153 00009BD0 6A01                    	push 1
 13154 00009BD2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13155 00009BD7 E81C7B0000              	call malloc
 13156 00009BDC 50                      	push rax
 13157 00009BDD BF08000000              	mov rdi, 8 * 1	; new rib
 13158 00009BE2 E8117B0000              	call malloc
 13159 00009BE7 50                      	push rax
 13160 00009BE8 BF40000000              	mov rdi, 8 * 8	; extended env
 13161 00009BED E8067B0000              	call malloc
 13162 00009BF2 488B7D10                	mov rdi, ENV
 13163 00009BF6 BE00000000              	mov rsi, 0
 13164 00009BFB BA01000000              	mov rdx, 1
 13165                                  .L_lambda_simple_env_loop_0058:	; ext_env[i + 1] <-- env[i]
 13166 00009C00 4883FE07                	cmp rsi, 7
 13167 00009C04 7410                    	je .L_lambda_simple_env_end_0058
 13168 00009C06 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13169 00009C0A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13170 00009C0E 48FFC6                  	inc rsi
 13171 00009C11 48FFC2                  	inc rdx
 13172 00009C14 EBEA                    	jmp .L_lambda_simple_env_loop_0058
 13173                                  .L_lambda_simple_env_end_0058:
 13174 00009C16 5B                      	pop rbx
 13175 00009C17 BE00000000              	mov rsi, 0
 13176                                  .L_lambda_simple_params_loop_0058:	; copy params
 13177 00009C1C 4883FE01                	cmp rsi, 1
 13178 00009C20 740E                    	je .L_lambda_simple_params_end_0058
 13179 00009C22 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13180 00009C27 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13181 00009C2B 48FFC6                  	inc rsi
 13182 00009C2E EBEC                    	jmp .L_lambda_simple_params_loop_0058
 13183                                  .L_lambda_simple_params_end_0058:
 13184 00009C30 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13185 00009C33 4889C3                  	mov rbx, rax
 13186 00009C36 58                      	pop rax
 13187 00009C37 C60005                  	mov byte [rax], T_closure
 13188 00009C3A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13189 00009C3E 48C74009[4B9C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0058
 13190 00009C46 E919010000              	jmp .L_lambda_simple_end_0058
 13191                                  .L_lambda_simple_code_0058:	; lambda-simple body
 13192 00009C4B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13193 00009C51 740B                    	je .L_lambda_simple_arity_check_ok_0058
 13194 00009C53 FF742410                	push qword [rsp + 8 * 2]
 13195 00009C57 6A01                    	push 1
 13196 00009C59 E9537A0000              	jmp L_error_incorrect_arity_simple
 13197                                  .L_lambda_simple_arity_check_ok_0058:
 13198 00009C5E C8000000                	enter 0, 0
 13199 00009C62 488B4510                	mov rax, qword [rbp + 8 * 2]
 13200                                  
 13201 00009C66 488B4020                                          	mov rax, qword[rax + 8 * 4]
 13202                                  
 13203 00009C6A 488B00                                            	mov rax, qword[rax + 8 * 0]
 13204 00009C6D 50                      	push rax
 13205 00009C6E 6A01                    	push 1
 13206 00009C70 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13207                                  	assert_closure(rax)
    42 00009C74 803805              <1>  cmp byte [%1], %2
    43 00009C77 0F856F920000        <1>  jne L_error_incorrect_type
 13208 00009C7D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13209 00009C80 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13210 00009C83 48890425[30030000]      	mov qword [free_var_102], rax
 13211                                  
 13212 00009C8B 48B8-                           	mov rax, sob_void
 13212 00009C8D [0000000000000000] 
 13213                                  
 13214 00009C95 488B4510                	mov rax, qword [rbp + 8 * 2]
 13215                                  
 13216 00009C99 488B00                                            	mov rax, qword[rax + 8 * 0]
 13217                                  
 13218 00009C9C 488B00                                            	mov rax, qword[rax + 8 * 0]
 13219 00009C9F 50                      	push rax
 13220 00009CA0 6A01                    	push 1
 13221 00009CA2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13222                                  	assert_closure(rax)
    42 00009CA6 803805              <1>  cmp byte [%1], %2
    43 00009CA9 0F853D920000        <1>  jne L_error_incorrect_type
 13223 00009CAF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13224 00009CB2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13225 00009CB5 48890425[38030000]      	mov qword [free_var_103], rax
 13226                                  
 13227 00009CBD 48B8-                           	mov rax, sob_void
 13227 00009CBF [0000000000000000] 
 13228                                  
 13229 00009CC7 488B4510                	mov rax, qword [rbp + 8 * 2]
 13230                                  
 13231 00009CCB 488B4008                                          	mov rax, qword[rax + 8 * 1]
 13232                                  
 13233 00009CCF 488B00                                            	mov rax, qword[rax + 8 * 0]
 13234 00009CD2 50                      	push rax
 13235 00009CD3 6A01                    	push 1
 13236 00009CD5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13237                                  	assert_closure(rax)
    42 00009CD9 803805              <1>  cmp byte [%1], %2
    43 00009CDC 0F850A920000        <1>  jne L_error_incorrect_type
 13238 00009CE2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13239 00009CE5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13240 00009CE8 48890425[40030000]      	mov qword [free_var_104], rax
 13241                                  
 13242 00009CF0 48B8-                           	mov rax, sob_void
 13242 00009CF2 [0000000000000000] 
 13243                                  
 13244 00009CFA 488B4510                	mov rax, qword [rbp + 8 * 2]
 13245                                  
 13246 00009CFE 488B4010                                          	mov rax, qword[rax + 8 * 2]
 13247                                  
 13248 00009D02 488B00                                            	mov rax, qword[rax + 8 * 0]
 13249 00009D05 50                      	push rax
 13250 00009D06 6A01                    	push 1
 13251 00009D08 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13252                                  	assert_closure(rax)
    42 00009D0C 803805              <1>  cmp byte [%1], %2
    43 00009D0F 0F85D7910000        <1>  jne L_error_incorrect_type
 13253 00009D15 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13254 00009D18 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13255 00009D1B 48890425[48030000]      	mov qword [free_var_105], rax
 13256                                  
 13257 00009D23 48B8-                           	mov rax, sob_void
 13257 00009D25 [0000000000000000] 
 13258                                  
 13259 00009D2D 488B4510                	mov rax, qword [rbp + 8 * 2]
 13260                                  
 13261 00009D31 488B4018                                          	mov rax, qword[rax + 8 * 3]
 13262                                  
 13263 00009D35 488B00                                            	mov rax, qword[rax + 8 * 0]
 13264 00009D38 50                      	push rax
 13265 00009D39 6A01                    	push 1
 13266 00009D3B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13267                                  	assert_closure(rax)
    42 00009D3F 803805              <1>  cmp byte [%1], %2
    43 00009D42 0F85A4910000        <1>  jne L_error_incorrect_type
 13268 00009D48 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13269 00009D4B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13270 00009D4E 48890425[50030000]      	mov qword [free_var_106], rax
 13271                                  
 13272 00009D56 48B8-                           	mov rax, sob_void
 13272 00009D58 [0000000000000000] 
 13273 00009D60 C9                      	leave
 13274 00009D61 C21800                  	ret 8 * (2 + 1)
 13275                                  .L_lambda_simple_end_0058:	; new closure is in rax
 13276                                  .L_applic_TC_006f:
 13277 00009D64 803805                  	cmp byte [rax], T_closure
 13278 00009D67 0F8540890000            	jne L_code_ptr_error
 13279 00009D6D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13280 00009D71 53                      	push rbx
 13281 00009D72 FF7508                  	push qword [rbp + 8]
 13282 00009D75 FF7500                  	push qword [rbp]
 13283 00009D78 488B4D18                	mov rcx, [rbp + 3 * 8]
 13284 00009D7C 488B542418              	mov rdx, [rsp + 3 * 8]
 13285 00009D81 488D7204                	lea rsi, [rdx + 4]
 13286 00009D85 4C8D4EFF                	lea r9, [rsi - 1]
 13287 00009D89 488D7903                	lea rdi, [rcx + 3]
 13288 00009D8D 4D31C0                  	xor r8, r8
 13289                                  .L_tc_recycle_frame_loop_006f:
 13290 00009D90 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13291 00009D94 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13292 00009D99 49FFC9                  	dec r9
 13293 00009D9C 4D31C0                  	xor r8, r8
 13294 00009D9F 48FFCF                  	dec rdi
 13295 00009DA2 48FFCE                  	dec rsi
 13296 00009DA5 4883FE00                	cmp rsi, 0
 13297 00009DA9 75E5                    	jne .L_tc_recycle_frame_loop_006f
 13298                                  .L_tc_recycle_frame_done_006f:
 13299                                  ;this pop rbp in sot to the right place
 13300 00009DAB 4989C9                  	mov r9, rcx
 13301 00009DAE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13302 00009DB6 4C01CC                  	add rsp, r9
 13303 00009DB9 5D                      	pop rbp
 13304 00009DBA 488B4D00                	mov rcx, qword [rbp]
 13305 00009DBE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13306 00009DC2 FFE3                    	jmp rbx
 13307 00009DC4 C9                      	leave
 13308 00009DC5 C21800                  	ret 8 * (2 + 1)
 13309                                  .L_lambda_simple_end_0054:	; new closure is in rax
 13310                                  .L_applic_TC_0070:
 13311 00009DC8 803805                  	cmp byte [rax], T_closure
 13312 00009DCB 0F85DC880000            	jne L_code_ptr_error
 13313 00009DD1 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13314 00009DD5 53                      	push rbx
 13315 00009DD6 FF7508                  	push qword [rbp + 8]
 13316 00009DD9 FF7500                  	push qword [rbp]
 13317 00009DDC 488B4D18                	mov rcx, [rbp + 3 * 8]
 13318 00009DE0 488B542418              	mov rdx, [rsp + 3 * 8]
 13319 00009DE5 488D7204                	lea rsi, [rdx + 4]
 13320 00009DE9 4C8D4EFF                	lea r9, [rsi - 1]
 13321 00009DED 488D7903                	lea rdi, [rcx + 3]
 13322 00009DF1 4D31C0                  	xor r8, r8
 13323                                  .L_tc_recycle_frame_loop_0070:
 13324 00009DF4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13325 00009DF8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13326 00009DFD 49FFC9                  	dec r9
 13327 00009E00 4D31C0                  	xor r8, r8
 13328 00009E03 48FFCF                  	dec rdi
 13329 00009E06 48FFCE                  	dec rsi
 13330 00009E09 4883FE00                	cmp rsi, 0
 13331 00009E0D 75E5                    	jne .L_tc_recycle_frame_loop_0070
 13332                                  .L_tc_recycle_frame_done_0070:
 13333                                  ;this pop rbp in sot to the right place
 13334 00009E0F 4989C9                  	mov r9, rcx
 13335 00009E12 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13336 00009E1A 4C01CC                  	add rsp, r9
 13337 00009E1D 5D                      	pop rbp
 13338 00009E1E 488B4D00                	mov rcx, qword [rbp]
 13339 00009E22 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13340 00009E26 FFE3                    	jmp rbx
 13341 00009E28 C9                      	leave
 13342 00009E29 C21800                  	ret 8 * (2 + 1)
 13343                                  .L_lambda_simple_end_0052:	; new closure is in rax
 13344                                  .L_applic_TC_0071:
 13345 00009E2C 803805                  	cmp byte [rax], T_closure
 13346 00009E2F 0F8578880000            	jne L_code_ptr_error
 13347 00009E35 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13348 00009E39 53                      	push rbx
 13349 00009E3A FF7508                  	push qword [rbp + 8]
 13350 00009E3D FF7500                  	push qword [rbp]
 13351 00009E40 488B4D18                	mov rcx, [rbp + 3 * 8]
 13352 00009E44 488B542418              	mov rdx, [rsp + 3 * 8]
 13353 00009E49 488D7204                	lea rsi, [rdx + 4]
 13354 00009E4D 4C8D4EFF                	lea r9, [rsi - 1]
 13355 00009E51 488D7903                	lea rdi, [rcx + 3]
 13356 00009E55 4D31C0                  	xor r8, r8
 13357                                  .L_tc_recycle_frame_loop_0071:
 13358 00009E58 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13359 00009E5C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13360 00009E61 49FFC9                  	dec r9
 13361 00009E64 4D31C0                  	xor r8, r8
 13362 00009E67 48FFCF                  	dec rdi
 13363 00009E6A 48FFCE                  	dec rsi
 13364 00009E6D 4883FE00                	cmp rsi, 0
 13365 00009E71 75E5                    	jne .L_tc_recycle_frame_loop_0071
 13366                                  .L_tc_recycle_frame_done_0071:
 13367                                  ;this pop rbp in sot to the right place
 13368 00009E73 4989C9                  	mov r9, rcx
 13369 00009E76 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13370 00009E7E 4C01CC                  	add rsp, r9
 13371 00009E81 5D                      	pop rbp
 13372 00009E82 488B4D00                	mov rcx, qword [rbp]
 13373 00009E86 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13374 00009E8A FFE3                    	jmp rbx
 13375 00009E8C C9                      	leave
 13376 00009E8D C21800                  	ret 8 * (2 + 1)
 13377                                  .L_lambda_simple_end_0050:	; new closure is in rax
 13378                                  .L_applic_TC_0072:
 13379 00009E90 803805                  	cmp byte [rax], T_closure
 13380 00009E93 0F8514880000            	jne L_code_ptr_error
 13381 00009E99 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13382 00009E9D 53                      	push rbx
 13383 00009E9E FF7508                  	push qword [rbp + 8]
 13384 00009EA1 FF7500                  	push qword [rbp]
 13385 00009EA4 488B4D18                	mov rcx, [rbp + 3 * 8]
 13386 00009EA8 488B542418              	mov rdx, [rsp + 3 * 8]
 13387 00009EAD 488D7204                	lea rsi, [rdx + 4]
 13388 00009EB1 4C8D4EFF                	lea r9, [rsi - 1]
 13389 00009EB5 488D7903                	lea rdi, [rcx + 3]
 13390 00009EB9 4D31C0                  	xor r8, r8
 13391                                  .L_tc_recycle_frame_loop_0072:
 13392 00009EBC 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13393 00009EC0 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13394 00009EC5 49FFC9                  	dec r9
 13395 00009EC8 4D31C0                  	xor r8, r8
 13396 00009ECB 48FFCF                  	dec rdi
 13397 00009ECE 48FFCE                  	dec rsi
 13398 00009ED1 4883FE00                	cmp rsi, 0
 13399 00009ED5 75E5                    	jne .L_tc_recycle_frame_loop_0072
 13400                                  .L_tc_recycle_frame_done_0072:
 13401                                  ;this pop rbp in sot to the right place
 13402 00009ED7 4989C9                  	mov r9, rcx
 13403 00009EDA 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13404 00009EE2 4C01CC                  	add rsp, r9
 13405 00009EE5 5D                      	pop rbp
 13406 00009EE6 488B4D00                	mov rcx, qword [rbp]
 13407 00009EEA 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13408 00009EEE FFE3                    	jmp rbx
 13409 00009EF0 C9                      	leave
 13410 00009EF1 C21800                  	ret 8 * (2 + 1)
 13411                                  .L_lambda_simple_end_004e:	; new closure is in rax
 13412                                  .L_applic_TC_0073:
 13413 00009EF4 803805                  	cmp byte [rax], T_closure
 13414 00009EF7 0F85B0870000            	jne L_code_ptr_error
 13415 00009EFD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13416 00009F01 53                      	push rbx
 13417 00009F02 FF7508                  	push qword [rbp + 8]
 13418 00009F05 FF7500                  	push qword [rbp]
 13419 00009F08 488B4D18                	mov rcx, [rbp + 3 * 8]
 13420 00009F0C 488B542418              	mov rdx, [rsp + 3 * 8]
 13421 00009F11 488D7204                	lea rsi, [rdx + 4]
 13422 00009F15 4C8D4EFF                	lea r9, [rsi - 1]
 13423 00009F19 488D7903                	lea rdi, [rcx + 3]
 13424 00009F1D 4D31C0                  	xor r8, r8
 13425                                  .L_tc_recycle_frame_loop_0073:
 13426 00009F20 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13427 00009F24 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13428 00009F29 49FFC9                  	dec r9
 13429 00009F2C 4D31C0                  	xor r8, r8
 13430 00009F2F 48FFCF                  	dec rdi
 13431 00009F32 48FFCE                  	dec rsi
 13432 00009F35 4883FE00                	cmp rsi, 0
 13433 00009F39 75E5                    	jne .L_tc_recycle_frame_loop_0073
 13434                                  .L_tc_recycle_frame_done_0073:
 13435                                  ;this pop rbp in sot to the right place
 13436 00009F3B 4989C9                  	mov r9, rcx
 13437 00009F3E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13438 00009F46 4C01CC                  	add rsp, r9
 13439 00009F49 5D                      	pop rbp
 13440 00009F4A 488B4D00                	mov rcx, qword [rbp]
 13441 00009F4E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13442 00009F52 FFE3                    	jmp rbx
 13443 00009F54 C9                      	leave
 13444 00009F55 C21800                  	ret 8 * (2 + 1)
 13445                                  .L_lambda_simple_end_004d:	; new closure is in rax
 13446                                  .L_applic_TC_0074:
 13447 00009F58 803805                  	cmp byte [rax], T_closure
 13448 00009F5B 0F854C870000            	jne L_code_ptr_error
 13449 00009F61 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13450 00009F65 53                      	push rbx
 13451 00009F66 FF7508                  	push qword [rbp + 8]
 13452 00009F69 FF7500                  	push qword [rbp]
 13453 00009F6C 488B4D18                	mov rcx, [rbp + 3 * 8]
 13454 00009F70 488B542418              	mov rdx, [rsp + 3 * 8]
 13455 00009F75 488D7204                	lea rsi, [rdx + 4]
 13456 00009F79 4C8D4EFF                	lea r9, [rsi - 1]
 13457 00009F7D 488D7903                	lea rdi, [rcx + 3]
 13458 00009F81 4D31C0                  	xor r8, r8
 13459                                  .L_tc_recycle_frame_loop_0074:
 13460 00009F84 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13461 00009F88 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13462 00009F8D 49FFC9                  	dec r9
 13463 00009F90 4D31C0                  	xor r8, r8
 13464 00009F93 48FFCF                  	dec rdi
 13465 00009F96 48FFCE                  	dec rsi
 13466 00009F99 4883FE00                	cmp rsi, 0
 13467 00009F9D 75E5                    	jne .L_tc_recycle_frame_loop_0074
 13468                                  .L_tc_recycle_frame_done_0074:
 13469                                  ;this pop rbp in sot to the right place
 13470 00009F9F 4989C9                  	mov r9, rcx
 13471 00009FA2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13472 00009FAA 4C01CC                  	add rsp, r9
 13473 00009FAD 5D                      	pop rbp
 13474 00009FAE 488B4D00                	mov rcx, qword [rbp]
 13475 00009FB2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13476 00009FB6 FFE3                    	jmp rbx
 13477 00009FB8 C9                      	leave
 13478 00009FB9 C21800                  	ret 8 * (2 + 1)
 13479                                  .L_lambda_simple_end_004c:	; new closure is in rax
 13480                                  .L_applic_TC_0075:
 13481 00009FBC 803805                  	cmp byte [rax], T_closure
 13482 00009FBF 0F85E8860000            	jne L_code_ptr_error
 13483 00009FC5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13484 00009FC9 53                      	push rbx
 13485 00009FCA FF7508                  	push qword [rbp + 8]
 13486 00009FCD FF7500                  	push qword [rbp]
 13487 00009FD0 488B4D18                	mov rcx, [rbp + 3 * 8]
 13488 00009FD4 488B542418              	mov rdx, [rsp + 3 * 8]
 13489 00009FD9 488D7204                	lea rsi, [rdx + 4]
 13490 00009FDD 4C8D4EFF                	lea r9, [rsi - 1]
 13491 00009FE1 488D7903                	lea rdi, [rcx + 3]
 13492 00009FE5 4D31C0                  	xor r8, r8
 13493                                  .L_tc_recycle_frame_loop_0075:
 13494 00009FE8 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13495 00009FEC 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13496 00009FF1 49FFC9                  	dec r9
 13497 00009FF4 4D31C0                  	xor r8, r8
 13498 00009FF7 48FFCF                  	dec rdi
 13499 00009FFA 48FFCE                  	dec rsi
 13500 00009FFD 4883FE00                	cmp rsi, 0
 13501 0000A001 75E5                    	jne .L_tc_recycle_frame_loop_0075
 13502                                  .L_tc_recycle_frame_done_0075:
 13503                                  ;this pop rbp in sot to the right place
 13504 0000A003 4989C9                  	mov r9, rcx
 13505 0000A006 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13506 0000A00E 4C01CC                  	add rsp, r9
 13507 0000A011 5D                      	pop rbp
 13508 0000A012 488B4D00                	mov rcx, qword [rbp]
 13509 0000A016 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13510 0000A01A FFE3                    	jmp rbx
 13511 0000A01C C9                      	leave
 13512 0000A01D C21800                  	ret 8 * (2 + 1)
 13513                                  .L_lambda_simple_end_0049:	; new closure is in rax
 13514                                  	assert_closure(rax)
    42 0000A020 803805              <1>  cmp byte [%1], %2
    43 0000A023 0F85C38E0000        <1>  jne L_error_incorrect_type
 13515 0000A029 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13516 0000A02C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13517                                  
 13518 0000A02F 4889C7                  	mov rdi, rax
 13519 0000A032 E8D2760000              	call print_sexpr_if_not_void
 13520                                  
 13521 0000A037 48B8-                   	mov rax,L_constants + 23
 13521 0000A039 [1700000000000000] 
 13522 0000A041 50                      	push rax
 13523 0000A042 6A01                    	push 1
 13524 0000A044 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13525 0000A049 E8AA760000              	call malloc
 13526 0000A04E 50                      	push rax
 13527 0000A04F BF00000000              	mov rdi, 8 * 0	; new rib
 13528 0000A054 E89F760000              	call malloc
 13529 0000A059 50                      	push rax
 13530 0000A05A BF08000000              	mov rdi, 8 * 1	; extended env
 13531 0000A05F E894760000              	call malloc
 13532 0000A064 488B7D10                	mov rdi, ENV
 13533 0000A068 BE00000000              	mov rsi, 0
 13534 0000A06D BA01000000              	mov rdx, 1
 13535                                  .L_lambda_simple_env_loop_0059:	; ext_env[i + 1] <-- env[i]
 13536 0000A072 4883FE00                	cmp rsi, 0
 13537 0000A076 7410                    	je .L_lambda_simple_env_end_0059
 13538 0000A078 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13539 0000A07C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13540 0000A080 48FFC6                  	inc rsi
 13541 0000A083 48FFC2                  	inc rdx
 13542 0000A086 EBEA                    	jmp .L_lambda_simple_env_loop_0059
 13543                                  .L_lambda_simple_env_end_0059:
 13544 0000A088 5B                      	pop rbx
 13545 0000A089 BE00000000              	mov rsi, 0
 13546                                  .L_lambda_simple_params_loop_0059:	; copy params
 13547 0000A08E 4883FE00                	cmp rsi, 0
 13548 0000A092 740E                    	je .L_lambda_simple_params_end_0059
 13549 0000A094 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13550 0000A099 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13551 0000A09D 48FFC6                  	inc rsi
 13552 0000A0A0 EBEC                    	jmp .L_lambda_simple_params_loop_0059
 13553                                  .L_lambda_simple_params_end_0059:
 13554 0000A0A2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13555 0000A0A5 4889C3                  	mov rbx, rax
 13556 0000A0A8 58                      	pop rax
 13557 0000A0A9 C60005                  	mov byte [rax], T_closure
 13558 0000A0AC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13559 0000A0B0 48C74009[BDA00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0059
 13560 0000A0B8 E9E4050000              	jmp .L_lambda_simple_end_0059
 13561                                  .L_lambda_simple_code_0059:	; lambda-simple body
 13562 0000A0BD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13563 0000A0C3 740B                    	je .L_lambda_simple_arity_check_ok_0059
 13564 0000A0C5 FF742410                	push qword [rsp + 8 * 2]
 13565 0000A0C9 6A01                    	push 1
 13566 0000A0CB E9E1750000              	jmp L_error_incorrect_arity_simple
 13567                                  .L_lambda_simple_arity_check_ok_0059:
 13568 0000A0D0 C8000000                	enter 0, 0
 13569 0000A0D4 BF08000000              	mov rdi, 8
 13570 0000A0D9 E81A760000              	call malloc
 13571 0000A0DE 488B5D20                	mov rbx, PARAM(0)
 13572 0000A0E2 488918                  	mov qword [rax], rbx
 13573 0000A0E5 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 13574                                  
 13575 0000A0E9 48B8-                            	mov rax, sob_void
 13575 0000A0EB [0000000000000000] 
 13576                                  
 13577 0000A0F3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13578 0000A0F8 E8FB750000              	call malloc
 13579 0000A0FD 50                      	push rax
 13580 0000A0FE BF08000000              	mov rdi, 8 * 1	; new rib
 13581 0000A103 E8F0750000              	call malloc
 13582 0000A108 50                      	push rax
 13583 0000A109 BF10000000              	mov rdi, 8 * 2	; extended env
 13584 0000A10E E8E5750000              	call malloc
 13585 0000A113 488B7D10                	mov rdi, ENV
 13586 0000A117 BE00000000              	mov rsi, 0
 13587 0000A11C BA01000000              	mov rdx, 1
 13588                                  .L_lambda_simple_env_loop_005a:	; ext_env[i + 1] <-- env[i]
 13589 0000A121 4883FE01                	cmp rsi, 1
 13590 0000A125 7410                    	je .L_lambda_simple_env_end_005a
 13591 0000A127 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13592 0000A12B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13593 0000A12F 48FFC6                  	inc rsi
 13594 0000A132 48FFC2                  	inc rdx
 13595 0000A135 EBEA                    	jmp .L_lambda_simple_env_loop_005a
 13596                                  .L_lambda_simple_env_end_005a:
 13597 0000A137 5B                      	pop rbx
 13598 0000A138 BE00000000              	mov rsi, 0
 13599                                  .L_lambda_simple_params_loop_005a:	; copy params
 13600 0000A13D 4883FE01                	cmp rsi, 1
 13601 0000A141 740E                    	je .L_lambda_simple_params_end_005a
 13602 0000A143 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13603 0000A148 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13604 0000A14C 48FFC6                  	inc rsi
 13605 0000A14F EBEC                    	jmp .L_lambda_simple_params_loop_005a
 13606                                  .L_lambda_simple_params_end_005a:
 13607 0000A151 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13608 0000A154 4889C3                  	mov rbx, rax
 13609 0000A157 58                      	pop rax
 13610 0000A158 C60005                  	mov byte [rax], T_closure
 13611 0000A15B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13612 0000A15F 48C74009[6CA10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005a
 13613 0000A167 E90D010000              	jmp .L_lambda_simple_end_005a
 13614                                  .L_lambda_simple_code_005a:	; lambda-simple body
 13615 0000A16C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13616 0000A172 740B                    	je .L_lambda_simple_arity_check_ok_005a
 13617 0000A174 FF742410                	push qword [rsp + 8 * 2]
 13618 0000A178 6A02                    	push 2
 13619 0000A17A E932750000              	jmp L_error_incorrect_arity_simple
 13620                                  .L_lambda_simple_arity_check_ok_005a:
 13621 0000A17F C8000000                	enter 0, 0
 13622 0000A183 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13623 0000A187 50                      	push rax
 13624 0000A188 6A01                    	push 1
 13625 0000A18A 488B0425[D8000000]      	mov rax, qword [free_var_27]
 13626                                  	assert_closure(rax)
    42 0000A192 803805              <1>  cmp byte [%1], %2
    43 0000A195 0F85518D0000        <1>  jne L_error_incorrect_type
 13627 0000A19B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13628 0000A19E FF5009                  	call SOB_CLOSURE_CODE(rax)
 13629                                  
 13630 0000A1A1 483D[02000000]                  	cmp rax, sob_boolean_false
 13631                                  
 13632 0000A1A7 740F                            	je .L_if_else_0033
 13633 0000A1A9 48B8-                   	mov rax,L_constants + 1
 13633 0000A1AB [0100000000000000] 
 13634                                  
 13635 0000A1B3 E9BD000000                      	jmp .L_if_end_0033
 13636                                  
 13637                                          	.L_if_else_0033:
 13638 0000A1B8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13639 0000A1BC 50                      	push rax
 13640 0000A1BD 48B8-                   	mov rax,L_constants + 128
 13640 0000A1BF [8000000000000000] 
 13641 0000A1C7 50                      	push rax
 13642 0000A1C8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13643 0000A1CC 50                      	push rax
 13644 0000A1CD 6A02                    	push 2
 13645 0000A1CF 488B0425[10030000]      	mov rax, qword [free_var_98]
 13646                                  	assert_closure(rax)
    42 0000A1D7 803805              <1>  cmp byte [%1], %2
    43 0000A1DA 0F850C8D0000        <1>  jne L_error_incorrect_type
 13647 0000A1E0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13648 0000A1E3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13649 0000A1E6 50                      	push rax
 13650 0000A1E7 6A02                    	push 2
 13651 0000A1E9 488B4510                	mov rax, qword [rbp + 8 * 2]
 13652                                  
 13653 0000A1ED 488B00                                            	mov rax, qword[rax + 8 * 0]
 13654                                  
 13655 0000A1F0 488B00                                            	mov rax, qword[rax + 8 * 0]
 13656 0000A1F3 488B00                  	mov rax, qword [rax]
 13657                                  	assert_closure(rax)
    42 0000A1F6 803805              <1>  cmp byte [%1], %2
    43 0000A1F9 0F85ED8C0000        <1>  jne L_error_incorrect_type
 13658 0000A1FF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13659 0000A202 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13660 0000A205 50                      	push rax
 13661 0000A206 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13662 0000A20A 50                      	push rax
 13663 0000A20B 6A02                    	push 2
 13664 0000A20D 488B0425[68000000]      	mov rax, qword [free_var_13]
 13665                                  .L_applic_TC_0076:
 13666 0000A215 803805                  	cmp byte [rax], T_closure
 13667 0000A218 0F858F840000            	jne L_code_ptr_error
 13668 0000A21E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13669 0000A222 53                      	push rbx
 13670 0000A223 FF7508                  	push qword [rbp + 8]
 13671 0000A226 FF7500                  	push qword [rbp]
 13672 0000A229 488B4D18                	mov rcx, [rbp + 3 * 8]
 13673 0000A22D 488B542418              	mov rdx, [rsp + 3 * 8]
 13674 0000A232 488D7204                	lea rsi, [rdx + 4]
 13675 0000A236 4C8D4EFF                	lea r9, [rsi - 1]
 13676 0000A23A 488D7903                	lea rdi, [rcx + 3]
 13677 0000A23E 4D31C0                  	xor r8, r8
 13678                                  .L_tc_recycle_frame_loop_0076:
 13679 0000A241 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13680 0000A245 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13681 0000A24A 49FFC9                  	dec r9
 13682 0000A24D 4D31C0                  	xor r8, r8
 13683 0000A250 48FFCF                  	dec rdi
 13684 0000A253 48FFCE                  	dec rsi
 13685 0000A256 4883FE00                	cmp rsi, 0
 13686 0000A25A 75E5                    	jne .L_tc_recycle_frame_loop_0076
 13687                                  .L_tc_recycle_frame_done_0076:
 13688                                  ;this pop rbp in sot to the right place
 13689 0000A25C 4989C9                  	mov r9, rcx
 13690 0000A25F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13691 0000A267 4C01CC                  	add rsp, r9
 13692 0000A26A 5D                      	pop rbp
 13693 0000A26B 488B4D00                	mov rcx, qword [rbp]
 13694 0000A26F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13695 0000A273 FFE3                    	jmp rbx
 13696                                  
 13697                                          	.L_if_end_0033:
 13698 0000A275 C9                      	leave
 13699 0000A276 C22000                  	ret 8 * (2 + 2)
 13700                                  .L_lambda_simple_end_005a:	; new closure is in rax
 13701 0000A279 50                      	push rax
 13702 0000A27A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13703 0000A27E 8F00                    	pop qword [rax]
 13704 0000A280 48B8-                   	mov rax, sob_void
 13704 0000A282 [0000000000000000] 
 13705                                  
 13706 0000A28A BF11000000              	mov rdi, (1 + 8 + 8)
 13707 0000A28F E864740000              	call malloc
 13708 0000A294 50                      	push rax
 13709 0000A295 BF08000000              	mov rdi, 8 * 1
 13710 0000A29A E859740000              	call malloc
 13711 0000A29F 50                      	push rax
 13712 0000A2A0 BF10000000              	mov rdi, 8 * 2
 13713 0000A2A5 E84E740000              	call malloc
 13714 0000A2AA 488B7D10                	mov rdi, ENV
 13715 0000A2AE 4831F6                  	xor rsi, rsi
 13716 0000A2B1 4831D2                  	xor rdx, rdx
 13717 0000A2B4 48FFC2                  	inc rdx
 13718                                  	.L_lambda_opt_env_loop_000f:
 13719                                  
 13720 0000A2B7 4883FE01                        	cmp rsi, 1
 13721                                  
 13722 0000A2BB 7412                            	je .L_lambda_opt_env_end_000f
 13723 0000A2BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13724 0000A2C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13725 0000A2C5 4883C201                	add rdx, 1
 13726 0000A2C9 4883C601                	add rsi, 1
 13727 0000A2CD EBE8                    	jmp .L_lambda_opt_env_loop_000f
 13728                                  
 13729                                          	.L_lambda_opt_env_end_000f:
 13730 0000A2CF 5B                      	pop rbx
 13731 0000A2D0 4831F6                  	xor rsi, rsi
 13732                                  	.L_lambda_opt_params_loop_000f:
 13733                                  
 13734 0000A2D3 4883FE01                        	cmp rsi, 1
 13735                                  
 13736 0000A2D7 740F                            	je .L_lambda_opt_params_end_000f
 13737 0000A2D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13738 0000A2DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13739 0000A2E2 4883C601                	add rsi, 1
 13740 0000A2E6 EBEB                    	jmp .L_lambda_opt_params_loop_000f
 13741                                  
 13742                                          	.L_lambda_opt_params_end_000f:
 13743 0000A2E8 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 13744 0000A2EB 4889C3                  	mov rbx, rax
 13745 0000A2EE 58                      	pop rax
 13746 0000A2EF C60005                  	mov byte [rax], T_closure
 13747 0000A2F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13748 0000A2F6 48C74009[03A30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_000f
 13749                                  
 13750 0000A2FE E99A030000                      	jmp .L_lambda_opt_end_000f
 13751                                  
 13752                                          	.L_lambda_opt_code_000f:
 13753                                  
 13754 0000A303 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 13755                                  
 13756 0000A309 740D                            	je .L_lambda_opt_arity_check_exact_000f  ;same num_of_args
 13757                                  
 13758 0000A30B 7F65                            	jg .L_lambda_opt_arity_check_more_000f  ;greater num_of_args
 13759 0000A30D FF742410                	push qword [rsp + 8 * 2]
 13760 0000A311 6A01                    	push 1
 13761 0000A313 E9AD730000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 13762                                  .L_lambda_opt_arity_check_exact_000f:
 13763 0000A318 4883EC08                	sub rsp, 8 * 1
 13764 0000A31C 488D7F10                	lea rdi, [rdi + (8 * 2)]
 13765 0000A320 4889E7                  	mov rdi, rsp 
 13766 0000A323 488B4708                	mov rax, qword [rdi + 8]
 13767 0000A327 488907                  	mov qword [rdi], rax
 13768 0000A32A 488D7F08                	lea rdi, [rdi + 8]
 13769 0000A32E 488B4708                	mov rax, qword [rdi + 8]
 13770 0000A332 488907                  	mov qword [rdi], rax
 13771 0000A335 488D7F08                	lea rdi, [rdi + 8]
 13772 0000A339 488B4708                	mov rax, qword [rdi + 8]
 13773 0000A33D 4889C1                  	mov rcx, rax
 13774 0000A340 4883C001                	add rax, 1
 13775 0000A344 488907                  	mov qword [rdi], rax
 13776 0000A347 488D7F08                	lea rdi, [rdi + 8]
 13777                                  	.L_lambda_opt_stack_shrink_loop_002b:
 13778 0000A34B 4883F900                	cmp rcx, 0
 13779 0000A34F 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_002b
 13780 0000A351 4883E901                	sub rcx, 1
 13781 0000A355 488D4010                	lea rax, [rax + (8 * 2)]
 13782 0000A359 488B4708                	mov rax, qword [rdi + 8]
 13783 0000A35D 488907                  	mov qword [rdi], rax
 13784 0000A360 488D7F08                	lea rdi, [rdi + 8]
 13785 0000A364 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_002b
 13786                                  
 13787                                          	.L_lambda_opt_stack_shrink_loop_exit_002b:
 13788 0000A366 48C707[01000000]        	mov qword [rdi], sob_nil
 13789 0000A36D E997000000              	jmp .L_lambda_opt_stack_adjusted_000f
 13790                                  
 13791                                          	.L_lambda_opt_arity_check_more_000f:
 13792 0000A372 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 13793 0000A377 488D4EFF                	lea rcx, [rsi - 1]
 13794 0000A37B 49B8-                   	mov r8, sob_nil
 13794 0000A37D [0100000000000000] 
 13795 0000A385 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 13796 0000A38A 4889F2                  	mov rdx, rsi
 13797                                  	.L_lambda_opt_stack_shrink_loop_002c:
 13798 0000A38D 4883F900                	cmp rcx, 0
 13799 0000A391 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_002c
 13800 0000A393 BF11000000              	mov rdi, 1 + (8 * 2)
 13801 0000A398 E85B730000              	call malloc
 13802 0000A39D C60021                  	mov byte [rax], T_pair
 13803 0000A3A0 488B1E                  	mov rbx, qword [rsi]
 13804 0000A3A3 48895801                	mov SOB_PAIR_CAR(rax), rbx
 13805 0000A3A7 4C894009                	mov SOB_PAIR_CDR(rax), r8
 13806 0000A3AB 4883C6F8                	add rsi, -8
 13807 0000A3AF 4883E901                	sub rcx, 1
 13808 0000A3B3 4989C0                  	mov r8, rax
 13809 0000A3B6 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_002c
 13810                                  
 13811                                          	.L_lambda_opt_stack_shrink_loop_exit_002c:
 13812 0000A3B8 4C8902                  	mov qword [rdx], r8
 13813 0000A3BB 4883EA08                	sub rdx, 8 * 1
 13814 0000A3BF 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 13815                                  
 13816 0000A3C4 B901000000                      	mov rcx, 1 
 13817                                  
 13818                                          	.L_lambda_opt_stack_shrink_loop_002d:
 13819 0000A3C9 4883F900                	cmp rcx, 0
 13820 0000A3CD 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_002d
 13821 0000A3CF 488B06                  	mov rax, qword [rsi]
 13822 0000A3D2 488902                  	mov qword [rdx], rax
 13823 0000A3D5 488D76F8                	lea rsi, [rsi - 8]
 13824 0000A3D9 4883C2F8                	add rdx, -8
 13825 0000A3DD 4883C1FF                	add rcx, -1
 13826 0000A3E1 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_002d
 13827                                  
 13828                                          	.L_lambda_opt_stack_shrink_loop_exit_002d:
 13829                                  
 13830 0000A3E3 48C70202000000                  	mov qword [rdx], 1 + 1
 13831 0000A3EA 4883C6F8                	add rsi, -8
 13832 0000A3EE 4883C2F8                	add rdx, -8
 13833 0000A3F2 488B06                  	mov rax, qword [rsi]
 13834 0000A3F5 488902                  	mov qword [rdx], rax
 13835 0000A3F8 4883C2F8                	add rdx, -8
 13836 0000A3FC 488D76F8                	lea rsi, [rsi - 8]
 13837 0000A400 488B06                  	mov rax, qword [rsi]
 13838 0000A403 488902                  	mov qword [rdx], rax
 13839 0000A406 4889D4                  	mov rsp, rdx
 13840                                  	.L_lambda_opt_stack_adjusted_000f:
 13841 0000A409 C8000000                	enter 0, 0
 13842 0000A40D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13843 0000A411 50                      	push rax
 13844 0000A412 6A01                    	push 1
 13845 0000A414 488B0425[00000000]      	mov rax, qword [free_var_0]
 13846                                  	assert_closure(rax)
    42 0000A41C 803805              <1>  cmp byte [%1], %2
    43 0000A41F 0F85C78A0000        <1>  jne L_error_incorrect_type
 13847 0000A425 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13848 0000A428 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13849                                  
 13850 0000A42B 483D[02000000]                  	cmp rax, sob_boolean_false
 13851                                  
 13852 0000A431 0F8484000000                    	je .L_if_else_0034
 13853 0000A437 48B8-                   	mov rax,L_constants + 4
 13853 0000A439 [0400000000000000] 
 13854 0000A441 50                      	push rax
 13855 0000A442 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13856 0000A446 50                      	push rax
 13857 0000A447 6A02                    	push 2
 13858 0000A449 488B4510                	mov rax, qword [rbp + 8 * 2]
 13859                                  
 13860 0000A44D 488B00                                            	mov rax, qword[rax + 8 * 0]
 13861                                  
 13862 0000A450 488B00                                            	mov rax, qword[rax + 8 * 0]
 13863 0000A453 488B00                  	mov rax, qword [rax]
 13864                                  .L_applic_TC_0079:
 13865 0000A456 803805                  	cmp byte [rax], T_closure
 13866 0000A459 0F854E820000            	jne L_code_ptr_error
 13867 0000A45F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13868 0000A463 53                      	push rbx
 13869 0000A464 FF7508                  	push qword [rbp + 8]
 13870 0000A467 FF7500                  	push qword [rbp]
 13871 0000A46A 488B4D18                	mov rcx, [rbp + 3 * 8]
 13872 0000A46E 488B542418              	mov rdx, [rsp + 3 * 8]
 13873 0000A473 488D7204                	lea rsi, [rdx + 4]
 13874 0000A477 4C8D4EFF                	lea r9, [rsi - 1]
 13875 0000A47B 488D7903                	lea rdi, [rcx + 3]
 13876 0000A47F 4D31C0                  	xor r8, r8
 13877                                  .L_tc_recycle_frame_loop_0079:
 13878 0000A482 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13879 0000A486 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13880 0000A48B 49FFC9                  	dec r9
 13881 0000A48E 4D31C0                  	xor r8, r8
 13882 0000A491 48FFCF                  	dec rdi
 13883 0000A494 48FFCE                  	dec rsi
 13884 0000A497 4883FE00                	cmp rsi, 0
 13885 0000A49B 75E5                    	jne .L_tc_recycle_frame_loop_0079
 13886                                  .L_tc_recycle_frame_done_0079:
 13887                                  ;this pop rbp in sot to the right place
 13888 0000A49D 4989C9                  	mov r9, rcx
 13889 0000A4A0 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 13890 0000A4A8 4C01CC                  	add rsp, r9
 13891 0000A4AB 5D                      	pop rbp
 13892 0000A4AC 488B4D00                	mov rcx, qword [rbp]
 13893 0000A4B0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 13894 0000A4B4 FFE3                    	jmp rbx
 13895                                  
 13896 0000A4B6 E9DE010000                      	jmp .L_if_end_0034
 13897                                  
 13898                                          	.L_if_else_0034:
 13899 0000A4BB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13900 0000A4BF 50                      	push rax
 13901 0000A4C0 6A01                    	push 1
 13902 0000A4C2 488B0425[08000000]      	mov rax, qword [free_var_1]
 13903                                  	assert_closure(rax)
    42 0000A4CA 803805              <1>  cmp byte [%1], %2
    43 0000A4CD 0F85198A0000        <1>  jne L_error_incorrect_type
 13904 0000A4D3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13905 0000A4D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13906                                  
 13907 0000A4D9 483D[02000000]                  	cmp rax, sob_boolean_false
 13908                                  
 13909 0000A4DF 0F8486000000                    	je .L_if_else_0036
 13910 0000A4E5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13911 0000A4E9 50                      	push rax
 13912 0000A4EA 6A01                    	push 1
 13913 0000A4EC 488B0425[88000000]      	mov rax, qword [free_var_17]
 13914                                  	assert_closure(rax)
    42 0000A4F4 803805              <1>  cmp byte [%1], %2
    43 0000A4F7 0F85EF890000        <1>  jne L_error_incorrect_type
 13915 0000A4FD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13916 0000A500 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13917 0000A503 50                      	push rax
 13918 0000A504 6A01                    	push 1
 13919 0000A506 488B0425[00000000]      	mov rax, qword [free_var_0]
 13920                                  	assert_closure(rax)
    42 0000A50E 803805              <1>  cmp byte [%1], %2
    43 0000A511 0F85D5890000        <1>  jne L_error_incorrect_type
 13921 0000A517 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13922 0000A51A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13923                                  
 13924 0000A51D 483D[02000000]                  	cmp rax, sob_boolean_false
 13925                                  
 13926 0000A523 743A                            	je .L_if_else_0037
 13927 0000A525 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13928 0000A529 50                      	push rax
 13929 0000A52A 6A01                    	push 1
 13930 0000A52C 488B0425[80000000]      	mov rax, qword [free_var_16]
 13931                                  	assert_closure(rax)
    42 0000A534 803805              <1>  cmp byte [%1], %2
    43 0000A537 0F85AF890000        <1>  jne L_error_incorrect_type
 13932 0000A53D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13933 0000A540 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13934 0000A543 50                      	push rax
 13935 0000A544 6A01                    	push 1
 13936 0000A546 488B0425[18000000]      	mov rax, qword [free_var_3]
 13937                                  	assert_closure(rax)
    42 0000A54E 803805              <1>  cmp byte [%1], %2
    43 0000A551 0F8595890000        <1>  jne L_error_incorrect_type
 13938 0000A557 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13939 0000A55A FF5009                  	call SOB_CLOSURE_CODE(rax)
 13940                                  
 13941 0000A55D EB0A                            	jmp .L_if_end_0037
 13942                                  
 13943                                          	.L_if_else_0037:
 13944 0000A55F 48B8-                   	mov rax,L_constants + 2
 13944 0000A561 [0200000000000000] 
 13945                                  
 13946                                          	.L_if_end_0037:
 13947                                  
 13948 0000A569 EB0A                            	jmp .L_if_end_0036
 13949                                  
 13950                                          	.L_if_else_0036:
 13951 0000A56B 48B8-                   	mov rax,L_constants + 2
 13951 0000A56D [0200000000000000] 
 13952                                  
 13953                                          	.L_if_end_0036:
 13954                                  
 13955 0000A575 483D[02000000]                  	cmp rax, sob_boolean_false
 13956                                  
 13957 0000A57B 0F8498000000                    	je .L_if_else_0035
 13958 0000A581 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 13959 0000A585 50                      	push rax
 13960 0000A586 6A01                    	push 1
 13961 0000A588 488B0425[80000000]      	mov rax, qword [free_var_16]
 13962                                  	assert_closure(rax)
    42 0000A590 803805              <1>  cmp byte [%1], %2
    43 0000A593 0F8553890000        <1>  jne L_error_incorrect_type
 13963 0000A599 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 13964 0000A59C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13965 0000A59F 50                      	push rax
 13966 0000A5A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 13967 0000A5A4 50                      	push rax
 13968 0000A5A5 6A02                    	push 2
 13969 0000A5A7 488B4510                	mov rax, qword [rbp + 8 * 2]
 13970                                  
 13971 0000A5AB 488B00                                            	mov rax, qword[rax + 8 * 0]
 13972                                  
 13973 0000A5AE 488B00                                            	mov rax, qword[rax + 8 * 0]
 13974 0000A5B1 488B00                  	mov rax, qword [rax]
 13975                                  .L_applic_TC_0078:
 13976 0000A5B4 803805                  	cmp byte [rax], T_closure
 13977 0000A5B7 0F85F0800000            	jne L_code_ptr_error
 13978 0000A5BD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 13979 0000A5C1 53                      	push rbx
 13980 0000A5C2 FF7508                  	push qword [rbp + 8]
 13981 0000A5C5 FF7500                  	push qword [rbp]
 13982 0000A5C8 488B4D18                	mov rcx, [rbp + 3 * 8]
 13983 0000A5CC 488B542418              	mov rdx, [rsp + 3 * 8]
 13984 0000A5D1 488D7204                	lea rsi, [rdx + 4]
 13985 0000A5D5 4C8D4EFF                	lea r9, [rsi - 1]
 13986 0000A5D9 488D7903                	lea rdi, [rcx + 3]
 13987 0000A5DD 4D31C0                  	xor r8, r8
 13988                                  .L_tc_recycle_frame_loop_0078:
 13989 0000A5E0 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 13990 0000A5E4 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 13991 0000A5E9 49FFC9                  	dec r9
 13992 0000A5EC 4D31C0                  	xor r8, r8
 13993 0000A5EF 48FFCF                  	dec rdi
 13994 0000A5F2 48FFCE                  	dec rsi
 13995 0000A5F5 4883FE00                	cmp rsi, 0
 13996 0000A5F9 75E5                    	jne .L_tc_recycle_frame_loop_0078
 13997                                  .L_tc_recycle_frame_done_0078:
 13998                                  ;this pop rbp in sot to the right place
 13999 0000A5FB 4989C9                  	mov r9, rcx
 14000 0000A5FE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14001 0000A606 4C01CC                  	add rsp, r9
 14002 0000A609 5D                      	pop rbp
 14003 0000A60A 488B4D00                	mov rcx, qword [rbp]
 14004 0000A60E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14005 0000A612 FFE3                    	jmp rbx
 14006                                  
 14007 0000A614 E980000000                      	jmp .L_if_end_0035
 14008                                  
 14009                                          	.L_if_else_0035:
 14010 0000A619 48B8-                   	mov rax,L_constants + 288
 14010 0000A61B [2001000000000000] 
 14011 0000A623 50                      	push rax
 14012 0000A624 48B8-                   	mov rax,L_constants + 279
 14012 0000A626 [1701000000000000] 
 14013 0000A62E 50                      	push rax
 14014 0000A62F 6A02                    	push 2
 14015 0000A631 488B0425[30010000]      	mov rax, qword [free_var_38]
 14016                                  .L_applic_TC_0077:
 14017 0000A639 803805                  	cmp byte [rax], T_closure
 14018 0000A63C 0F856B800000            	jne L_code_ptr_error
 14019 0000A642 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14020 0000A646 53                      	push rbx
 14021 0000A647 FF7508                  	push qword [rbp + 8]
 14022 0000A64A FF7500                  	push qword [rbp]
 14023 0000A64D 488B4D18                	mov rcx, [rbp + 3 * 8]
 14024 0000A651 488B542418              	mov rdx, [rsp + 3 * 8]
 14025 0000A656 488D7204                	lea rsi, [rdx + 4]
 14026 0000A65A 4C8D4EFF                	lea r9, [rsi - 1]
 14027 0000A65E 488D7903                	lea rdi, [rcx + 3]
 14028 0000A662 4D31C0                  	xor r8, r8
 14029                                  .L_tc_recycle_frame_loop_0077:
 14030 0000A665 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 14031 0000A669 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 14032 0000A66E 49FFC9                  	dec r9
 14033 0000A671 4D31C0                  	xor r8, r8
 14034 0000A674 48FFCF                  	dec rdi
 14035 0000A677 48FFCE                  	dec rsi
 14036 0000A67A 4883FE00                	cmp rsi, 0
 14037 0000A67E 75E5                    	jne .L_tc_recycle_frame_loop_0077
 14038                                  .L_tc_recycle_frame_done_0077:
 14039                                  ;this pop rbp in sot to the right place
 14040 0000A680 4989C9                  	mov r9, rcx
 14041 0000A683 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14042 0000A68B 4C01CC                  	add rsp, r9
 14043 0000A68E 5D                      	pop rbp
 14044 0000A68F 488B4D00                	mov rcx, qword [rbp]
 14045 0000A693 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14046 0000A697 FFE3                    	jmp rbx
 14047                                  
 14048                                          	.L_if_end_0035:
 14049                                  
 14050                                          	.L_if_end_0034:
 14051 0000A699 C9                      	leave
 14052 0000A69A C22000                  	ret 8 * (2 + 2)
 14053                                  .L_lambda_opt_end_000f:	; new closure is in rax
 14054 0000A69D C9                      	leave
 14055 0000A69E C21800                  	ret 8 * (2 + 1)
 14056                                  .L_lambda_simple_end_0059:	; new closure is in rax
 14057                                  	assert_closure(rax)
    42 0000A6A1 803805              <1>  cmp byte [%1], %2
    43 0000A6A4 0F8542880000        <1>  jne L_error_incorrect_type
 14058 0000A6AA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14059 0000A6AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14060 0000A6B0 48890425[58030000]      	mov qword [free_var_107], rax
 14061 0000A6B8 48B8-                   	mov rax, sob_void
 14061 0000A6BA [0000000000000000] 
 14062                                  
 14063 0000A6C2 4889C7                  	mov rdi, rax
 14064 0000A6C5 E83F700000              	call print_sexpr_if_not_void
 14065                                  
 14066 0000A6CA 48B8-                   	mov rax,L_constants + 0
 14066 0000A6CC [0000000000000000] 
 14067 0000A6D4 48890425[60030000]      	mov qword [free_var_108], rax
 14068 0000A6DC 48B8-                   	mov rax, sob_void
 14068 0000A6DE [0000000000000000] 
 14069                                  
 14070 0000A6E6 4889C7                  	mov rdi, rax
 14071 0000A6E9 E81B700000              	call print_sexpr_if_not_void
 14072                                  
 14073 0000A6EE 48B8-                   	mov rax,L_constants + 0
 14073 0000A6F0 [0000000000000000] 
 14074 0000A6F8 48890425[68030000]      	mov qword [free_var_109], rax
 14075 0000A700 48B8-                   	mov rax, sob_void
 14075 0000A702 [0000000000000000] 
 14076                                  
 14077 0000A70A 4889C7                  	mov rdi, rax
 14078 0000A70D E8F76F0000              	call print_sexpr_if_not_void
 14079                                  
 14080 0000A712 48B8-                   	mov rax,L_constants + 0
 14080 0000A714 [0000000000000000] 
 14081 0000A71C 48890425[70030000]      	mov qword [free_var_110], rax
 14082 0000A724 48B8-                   	mov rax, sob_void
 14082 0000A726 [0000000000000000] 
 14083                                  
 14084 0000A72E 4889C7                  	mov rdi, rax
 14085 0000A731 E8D36F0000              	call print_sexpr_if_not_void
 14086                                  
 14087 0000A736 48B8-                   	mov rax,L_constants + 0
 14087 0000A738 [0000000000000000] 
 14088 0000A740 48890425[78030000]      	mov qword [free_var_111], rax
 14089 0000A748 48B8-                   	mov rax, sob_void
 14089 0000A74A [0000000000000000] 
 14090                                  
 14091 0000A752 4889C7                  	mov rdi, rax
 14092 0000A755 E8AF6F0000              	call print_sexpr_if_not_void
 14093                                  
 14094 0000A75A 48B8-                   	mov rax,L_constants + 0
 14094 0000A75C [0000000000000000] 
 14095 0000A764 48890425[80030000]      	mov qword [free_var_112], rax
 14096 0000A76C 48B8-                   	mov rax, sob_void
 14096 0000A76E [0000000000000000] 
 14097                                  
 14098 0000A776 4889C7                  	mov rdi, rax
 14099 0000A779 E88B6F0000              	call print_sexpr_if_not_void
 14100                                  
 14101 0000A77E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14102 0000A783 E8706F0000              	call malloc
 14103 0000A788 50                      	push rax
 14104 0000A789 BF00000000              	mov rdi, 8 * 0	; new rib
 14105 0000A78E E8656F0000              	call malloc
 14106 0000A793 50                      	push rax
 14107 0000A794 BF08000000              	mov rdi, 8 * 1	; extended env
 14108 0000A799 E85A6F0000              	call malloc
 14109 0000A79E 488B7D10                	mov rdi, ENV
 14110 0000A7A2 BE00000000              	mov rsi, 0
 14111 0000A7A7 BA01000000              	mov rdx, 1
 14112                                  .L_lambda_simple_env_loop_005b:	; ext_env[i + 1] <-- env[i]
 14113 0000A7AC 4883FE00                	cmp rsi, 0
 14114 0000A7B0 7410                    	je .L_lambda_simple_env_end_005b
 14115 0000A7B2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14116 0000A7B6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14117 0000A7BA 48FFC6                  	inc rsi
 14118 0000A7BD 48FFC2                  	inc rdx
 14119 0000A7C0 EBEA                    	jmp .L_lambda_simple_env_loop_005b
 14120                                  .L_lambda_simple_env_end_005b:
 14121 0000A7C2 5B                      	pop rbx
 14122 0000A7C3 BE00000000              	mov rsi, 0
 14123                                  .L_lambda_simple_params_loop_005b:	; copy params
 14124 0000A7C8 4883FE00                	cmp rsi, 0
 14125 0000A7CC 740E                    	je .L_lambda_simple_params_end_005b
 14126 0000A7CE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14127 0000A7D3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14128 0000A7D7 48FFC6                  	inc rsi
 14129 0000A7DA EBEC                    	jmp .L_lambda_simple_params_loop_005b
 14130                                  .L_lambda_simple_params_end_005b:
 14131 0000A7DC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14132 0000A7DF 4889C3                  	mov rbx, rax
 14133 0000A7E2 58                      	pop rax
 14134 0000A7E3 C60005                  	mov byte [rax], T_closure
 14135 0000A7E6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14136 0000A7EA 48C74009[F7A70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005b
 14137 0000A7F2 E93E020000              	jmp .L_lambda_simple_end_005b
 14138                                  .L_lambda_simple_code_005b:	; lambda-simple body
 14139 0000A7F7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14140 0000A7FD 740B                    	je .L_lambda_simple_arity_check_ok_005b
 14141 0000A7FF FF742410                	push qword [rsp + 8 * 2]
 14142 0000A803 6A01                    	push 1
 14143 0000A805 E9A76E0000              	jmp L_error_incorrect_arity_simple
 14144                                  .L_lambda_simple_arity_check_ok_005b:
 14145 0000A80A C8000000                	enter 0, 0
 14146 0000A80E BF11000000              	mov rdi, (1 + 8 + 8)
 14147 0000A813 E8E06E0000              	call malloc
 14148 0000A818 50                      	push rax
 14149 0000A819 BF08000000              	mov rdi, 8 * 1
 14150 0000A81E E8D56E0000              	call malloc
 14151 0000A823 50                      	push rax
 14152 0000A824 BF10000000              	mov rdi, 8 * 2
 14153 0000A829 E8CA6E0000              	call malloc
 14154 0000A82E 488B7D10                	mov rdi, ENV
 14155 0000A832 4831F6                  	xor rsi, rsi
 14156 0000A835 4831D2                  	xor rdx, rdx
 14157 0000A838 48FFC2                  	inc rdx
 14158                                  	.L_lambda_opt_env_loop_0010:
 14159                                  
 14160 0000A83B 4883FE01                        	cmp rsi, 1
 14161                                  
 14162 0000A83F 7412                            	je .L_lambda_opt_env_end_0010
 14163 0000A841 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14164 0000A845 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14165 0000A849 4883C201                	add rdx, 1
 14166 0000A84D 4883C601                	add rsi, 1
 14167 0000A851 EBE8                    	jmp .L_lambda_opt_env_loop_0010
 14168                                  
 14169                                          	.L_lambda_opt_env_end_0010:
 14170 0000A853 5B                      	pop rbx
 14171 0000A854 4831F6                  	xor rsi, rsi
 14172                                  	.L_lambda_opt_params_loop_0010:
 14173                                  
 14174 0000A857 4883FE01                        	cmp rsi, 1
 14175                                  
 14176 0000A85B 740F                            	je .L_lambda_opt_params_end_0010
 14177 0000A85D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14178 0000A862 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14179 0000A866 4883C601                	add rsi, 1
 14180 0000A86A EBEB                    	jmp .L_lambda_opt_params_loop_0010
 14181                                  
 14182                                          	.L_lambda_opt_params_end_0010:
 14183 0000A86C 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 14184 0000A86F 4889C3                  	mov rbx, rax
 14185 0000A872 58                      	pop rax
 14186 0000A873 C60005                  	mov byte [rax], T_closure
 14187 0000A876 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14188 0000A87A 48C74009[87A80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0010
 14189                                  
 14190 0000A882 E9AA010000                      	jmp .L_lambda_opt_end_0010
 14191                                  
 14192                                          	.L_lambda_opt_code_0010:
 14193                                  
 14194 0000A887 48837C241000                    	cmp qword [rsp + 8 * 2], 0
 14195                                  
 14196 0000A88D 740D                            	je .L_lambda_opt_arity_check_exact_0010  ;same num_of_args
 14197                                  
 14198 0000A88F 7F65                            	jg .L_lambda_opt_arity_check_more_0010  ;greater num_of_args
 14199 0000A891 FF742410                	push qword [rsp + 8 * 2]
 14200 0000A895 6A00                    	push 0
 14201 0000A897 E9296E0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 14202                                  .L_lambda_opt_arity_check_exact_0010:
 14203 0000A89C 4883EC08                	sub rsp, 8 * 1
 14204 0000A8A0 488D7F10                	lea rdi, [rdi + (8 * 2)]
 14205 0000A8A4 4889E7                  	mov rdi, rsp 
 14206 0000A8A7 488B4708                	mov rax, qword [rdi + 8]
 14207 0000A8AB 488907                  	mov qword [rdi], rax
 14208 0000A8AE 488D7F08                	lea rdi, [rdi + 8]
 14209 0000A8B2 488B4708                	mov rax, qword [rdi + 8]
 14210 0000A8B6 488907                  	mov qword [rdi], rax
 14211 0000A8B9 488D7F08                	lea rdi, [rdi + 8]
 14212 0000A8BD 488B4708                	mov rax, qword [rdi + 8]
 14213 0000A8C1 4889C1                  	mov rcx, rax
 14214 0000A8C4 4883C001                	add rax, 1
 14215 0000A8C8 488907                  	mov qword [rdi], rax
 14216 0000A8CB 488D7F08                	lea rdi, [rdi + 8]
 14217                                  	.L_lambda_opt_stack_shrink_loop_002e:
 14218 0000A8CF 4883F900                	cmp rcx, 0
 14219 0000A8D3 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_002e
 14220 0000A8D5 4883E901                	sub rcx, 1
 14221 0000A8D9 488D4010                	lea rax, [rax + (8 * 2)]
 14222 0000A8DD 488B4708                	mov rax, qword [rdi + 8]
 14223 0000A8E1 488907                  	mov qword [rdi], rax
 14224 0000A8E4 488D7F08                	lea rdi, [rdi + 8]
 14225 0000A8E8 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_002e
 14226                                  
 14227                                          	.L_lambda_opt_stack_shrink_loop_exit_002e:
 14228 0000A8EA 48C707[01000000]        	mov qword [rdi], sob_nil
 14229 0000A8F1 E996000000              	jmp .L_lambda_opt_stack_adjusted_0010
 14230                                  
 14231                                          	.L_lambda_opt_arity_check_more_0010:
 14232 0000A8F6 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 14233 0000A8FB 488D0E                  	lea rcx, [rsi - 0]
 14234 0000A8FE 49B8-                   	mov r8, sob_nil
 14234 0000A900 [0100000000000000] 
 14235 0000A908 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 14236 0000A90D 4889F2                  	mov rdx, rsi
 14237                                  	.L_lambda_opt_stack_shrink_loop_002f:
 14238 0000A910 4883F900                	cmp rcx, 0
 14239 0000A914 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_002f
 14240 0000A916 BF11000000              	mov rdi, 1 + (8 * 2)
 14241 0000A91B E8D86D0000              	call malloc
 14242 0000A920 C60021                  	mov byte [rax], T_pair
 14243 0000A923 488B1E                  	mov rbx, qword [rsi]
 14244 0000A926 48895801                	mov SOB_PAIR_CAR(rax), rbx
 14245 0000A92A 4C894009                	mov SOB_PAIR_CDR(rax), r8
 14246 0000A92E 4883C6F8                	add rsi, -8
 14247 0000A932 4883E901                	sub rcx, 1
 14248 0000A936 4989C0                  	mov r8, rax
 14249 0000A939 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_002f
 14250                                  
 14251                                          	.L_lambda_opt_stack_shrink_loop_exit_002f:
 14252 0000A93B 4C8902                  	mov qword [rdx], r8
 14253 0000A93E 4883EA08                	sub rdx, 8 * 1
 14254 0000A942 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
 14255                                  
 14256 0000A947 B900000000                      	mov rcx, 0 
 14257                                  
 14258                                          	.L_lambda_opt_stack_shrink_loop_0030:
 14259 0000A94C 4883F900                	cmp rcx, 0
 14260 0000A950 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0030
 14261 0000A952 488B06                  	mov rax, qword [rsi]
 14262 0000A955 488902                  	mov qword [rdx], rax
 14263 0000A958 488D76F8                	lea rsi, [rsi - 8]
 14264 0000A95C 4883C2F8                	add rdx, -8
 14265 0000A960 4883C1FF                	add rcx, -1
 14266 0000A964 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0030
 14267                                  
 14268                                          	.L_lambda_opt_stack_shrink_loop_exit_0030:
 14269                                  
 14270 0000A966 48C70201000000                  	mov qword [rdx], 1 + 0
 14271 0000A96D 4883C6F8                	add rsi, -8
 14272 0000A971 4883C2F8                	add rdx, -8
 14273 0000A975 488B06                  	mov rax, qword [rsi]
 14274 0000A978 488902                  	mov qword [rdx], rax
 14275 0000A97B 4883C2F8                	add rdx, -8
 14276 0000A97F 488D76F8                	lea rsi, [rsi - 8]
 14277 0000A983 488B06                  	mov rax, qword [rsi]
 14278 0000A986 488902                  	mov qword [rdx], rax
 14279 0000A989 4889D4                  	mov rsp, rdx
 14280                                  	.L_lambda_opt_stack_adjusted_0010:
 14281 0000A98C C8000000                	enter 0, 0
 14282 0000A990 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14283 0000A994 50                      	push rax
 14284 0000A995 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14285 0000A99D 50                      	push rax
 14286 0000A99E 6A02                    	push 2
 14287 0000A9A0 488B0425[D8020000]      	mov rax, qword [free_var_91]
 14288                                  	assert_closure(rax)
    42 0000A9A8 803805              <1>  cmp byte [%1], %2
    43 0000A9AB 0F853B850000        <1>  jne L_error_incorrect_type
 14289 0000A9B1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14290 0000A9B4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14291 0000A9B7 50                      	push rax
 14292 0000A9B8 488B4510                	mov rax, qword [rbp + 8 * 2]
 14293                                  
 14294 0000A9BC 488B00                                            	mov rax, qword[rax + 8 * 0]
 14295                                  
 14296 0000A9BF 488B00                                            	mov rax, qword[rax + 8 * 0]
 14297 0000A9C2 50                      	push rax
 14298 0000A9C3 6A02                    	push 2
 14299 0000A9C5 488B0425[C8020000]      	mov rax, qword [free_var_89]
 14300                                  .L_applic_TC_007a:
 14301 0000A9CD 803805                  	cmp byte [rax], T_closure
 14302 0000A9D0 0F85D77C0000            	jne L_code_ptr_error
 14303 0000A9D6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14304 0000A9DA 53                      	push rbx
 14305 0000A9DB FF7508                  	push qword [rbp + 8]
 14306 0000A9DE FF7500                  	push qword [rbp]
 14307 0000A9E1 488B4D18                	mov rcx, [rbp + 3 * 8]
 14308 0000A9E5 488B542418              	mov rdx, [rsp + 3 * 8]
 14309 0000A9EA 488D7204                	lea rsi, [rdx + 4]
 14310 0000A9EE 4C8D4EFF                	lea r9, [rsi - 1]
 14311 0000A9F2 488D7903                	lea rdi, [rcx + 3]
 14312 0000A9F6 4D31C0                  	xor r8, r8
 14313                                  .L_tc_recycle_frame_loop_007a:
 14314 0000A9F9 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 14315 0000A9FD 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 14316 0000AA02 49FFC9                  	dec r9
 14317 0000AA05 4D31C0                  	xor r8, r8
 14318 0000AA08 48FFCF                  	dec rdi
 14319 0000AA0B 48FFCE                  	dec rsi
 14320 0000AA0E 4883FE00                	cmp rsi, 0
 14321 0000AA12 75E5                    	jne .L_tc_recycle_frame_loop_007a
 14322                                  .L_tc_recycle_frame_done_007a:
 14323                                  ;this pop rbp in sot to the right place
 14324 0000AA14 4989C9                  	mov r9, rcx
 14325 0000AA17 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14326 0000AA1F 4C01CC                  	add rsp, r9
 14327 0000AA22 5D                      	pop rbp
 14328 0000AA23 488B4D00                	mov rcx, qword [rbp]
 14329 0000AA27 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14330 0000AA2B FFE3                    	jmp rbx
 14331 0000AA2D C9                      	leave
 14332 0000AA2E C21800                  	ret 8 * (2 + 1)
 14333                                  .L_lambda_opt_end_0010:	; new closure is in rax
 14334 0000AA31 C9                      	leave
 14335 0000AA32 C21800                  	ret 8 * (2 + 1)
 14336                                  .L_lambda_simple_end_005b:	; new closure is in rax
 14337 0000AA35 50                      	push rax
 14338 0000AA36 6A01                    	push 1
 14339 0000AA38 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14340 0000AA3D E8B66C0000              	call malloc
 14341 0000AA42 50                      	push rax
 14342 0000AA43 BF00000000              	mov rdi, 8 * 0	; new rib
 14343 0000AA48 E8AB6C0000              	call malloc
 14344 0000AA4D 50                      	push rax
 14345 0000AA4E BF08000000              	mov rdi, 8 * 1	; extended env
 14346 0000AA53 E8A06C0000              	call malloc
 14347 0000AA58 488B7D10                	mov rdi, ENV
 14348 0000AA5C BE00000000              	mov rsi, 0
 14349 0000AA61 BA01000000              	mov rdx, 1
 14350                                  .L_lambda_simple_env_loop_005c:	; ext_env[i + 1] <-- env[i]
 14351 0000AA66 4883FE00                	cmp rsi, 0
 14352 0000AA6A 7410                    	je .L_lambda_simple_env_end_005c
 14353 0000AA6C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14354 0000AA70 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14355 0000AA74 48FFC6                  	inc rsi
 14356 0000AA77 48FFC2                  	inc rdx
 14357 0000AA7A EBEA                    	jmp .L_lambda_simple_env_loop_005c
 14358                                  .L_lambda_simple_env_end_005c:
 14359 0000AA7C 5B                      	pop rbx
 14360 0000AA7D BE00000000              	mov rsi, 0
 14361                                  .L_lambda_simple_params_loop_005c:	; copy params
 14362 0000AA82 4883FE00                	cmp rsi, 0
 14363 0000AA86 740E                    	je .L_lambda_simple_params_end_005c
 14364 0000AA88 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14365 0000AA8D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14366 0000AA91 48FFC6                  	inc rsi
 14367 0000AA94 EBEC                    	jmp .L_lambda_simple_params_loop_005c
 14368                                  .L_lambda_simple_params_end_005c:
 14369 0000AA96 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14370 0000AA99 4889C3                  	mov rbx, rax
 14371 0000AA9C 58                      	pop rax
 14372 0000AA9D C60005                  	mov byte [rax], T_closure
 14373 0000AAA0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14374 0000AAA4 48C74009[B1AA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005c
 14375 0000AAAC E90B010000              	jmp .L_lambda_simple_end_005c
 14376                                  .L_lambda_simple_code_005c:	; lambda-simple body
 14377 0000AAB1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14378 0000AAB7 740B                    	je .L_lambda_simple_arity_check_ok_005c
 14379 0000AAB9 FF742410                	push qword [rsp + 8 * 2]
 14380 0000AABD 6A01                    	push 1
 14381 0000AABF E9ED6B0000              	jmp L_error_incorrect_arity_simple
 14382                                  .L_lambda_simple_arity_check_ok_005c:
 14383 0000AAC4 C8000000                	enter 0, 0
 14384 0000AAC8 488B0425[30030000]      	mov rax, qword [free_var_102]
 14385 0000AAD0 50                      	push rax
 14386 0000AAD1 6A01                    	push 1
 14387 0000AAD3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14388                                  	assert_closure(rax)
    42 0000AAD7 803805              <1>  cmp byte [%1], %2
    43 0000AADA 0F850C840000        <1>  jne L_error_incorrect_type
 14389 0000AAE0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14390 0000AAE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14391 0000AAE6 48890425[60030000]      	mov qword [free_var_108], rax
 14392                                  
 14393 0000AAEE 48B8-                           	mov rax, sob_void
 14393 0000AAF0 [0000000000000000] 
 14394                                  
 14395 0000AAF8 488B0425[38030000]      	mov rax, qword [free_var_103]
 14396 0000AB00 50                      	push rax
 14397 0000AB01 6A01                    	push 1
 14398 0000AB03 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14399                                  	assert_closure(rax)
    42 0000AB07 803805              <1>  cmp byte [%1], %2
    43 0000AB0A 0F85DC830000        <1>  jne L_error_incorrect_type
 14400 0000AB10 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14401 0000AB13 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14402 0000AB16 48890425[68030000]      	mov qword [free_var_109], rax
 14403                                  
 14404 0000AB1E 48B8-                           	mov rax, sob_void
 14404 0000AB20 [0000000000000000] 
 14405                                  
 14406 0000AB28 488B0425[50030000]      	mov rax, qword [free_var_106]
 14407 0000AB30 50                      	push rax
 14408 0000AB31 6A01                    	push 1
 14409 0000AB33 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14410                                  	assert_closure(rax)
    42 0000AB37 803805              <1>  cmp byte [%1], %2
    43 0000AB3A 0F85AC830000        <1>  jne L_error_incorrect_type
 14411 0000AB40 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14412 0000AB43 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14413 0000AB46 48890425[70030000]      	mov qword [free_var_110], rax
 14414                                  
 14415 0000AB4E 48B8-                           	mov rax, sob_void
 14415 0000AB50 [0000000000000000] 
 14416                                  
 14417 0000AB58 488B0425[40030000]      	mov rax, qword [free_var_104]
 14418 0000AB60 50                      	push rax
 14419 0000AB61 6A01                    	push 1
 14420 0000AB63 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14421                                  	assert_closure(rax)
    42 0000AB67 803805              <1>  cmp byte [%1], %2
    43 0000AB6A 0F857C830000        <1>  jne L_error_incorrect_type
 14422 0000AB70 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14423 0000AB73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14424 0000AB76 48890425[78030000]      	mov qword [free_var_111], rax
 14425                                  
 14426 0000AB7E 48B8-                           	mov rax, sob_void
 14426 0000AB80 [0000000000000000] 
 14427                                  
 14428 0000AB88 488B0425[48030000]      	mov rax, qword [free_var_105]
 14429 0000AB90 50                      	push rax
 14430 0000AB91 6A01                    	push 1
 14431 0000AB93 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14432                                  	assert_closure(rax)
    42 0000AB97 803805              <1>  cmp byte [%1], %2
    43 0000AB9A 0F854C830000        <1>  jne L_error_incorrect_type
 14433 0000ABA0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14434 0000ABA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14435 0000ABA6 48890425[80030000]      	mov qword [free_var_112], rax
 14436                                  
 14437 0000ABAE 48B8-                           	mov rax, sob_void
 14437 0000ABB0 [0000000000000000] 
 14438 0000ABB8 C9                      	leave
 14439 0000ABB9 C21800                  	ret 8 * (2 + 1)
 14440                                  .L_lambda_simple_end_005c:	; new closure is in rax
 14441                                  	assert_closure(rax)
    42 0000ABBC 803805              <1>  cmp byte [%1], %2
    43 0000ABBF 0F8527830000        <1>  jne L_error_incorrect_type
 14442 0000ABC5 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14443 0000ABC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14444                                  
 14445 0000ABCB 4889C7                  	mov rdi, rax
 14446 0000ABCE E8366B0000              	call print_sexpr_if_not_void
 14447                                  
 14448 0000ABD3 48B8-                   	mov rax,L_constants + 0
 14448 0000ABD5 [0000000000000000] 
 14449 0000ABDD 48890425[88030000]      	mov qword [free_var_113], rax
 14450 0000ABE5 48B8-                   	mov rax, sob_void
 14450 0000ABE7 [0000000000000000] 
 14451                                  
 14452 0000ABEF 4889C7                  	mov rdi, rax
 14453 0000ABF2 E8126B0000              	call print_sexpr_if_not_void
 14454                                  
 14455 0000ABF7 48B8-                   	mov rax,L_constants + 0
 14455 0000ABF9 [0000000000000000] 
 14456 0000AC01 48890425[90030000]      	mov qword [free_var_114], rax
 14457 0000AC09 48B8-                   	mov rax, sob_void
 14457 0000AC0B [0000000000000000] 
 14458                                  
 14459 0000AC13 4889C7                  	mov rdi, rax
 14460 0000AC16 E8EE6A0000              	call print_sexpr_if_not_void
 14461                                  
 14462 0000AC1B 48B8-                   	mov rax,L_constants + 342
 14462 0000AC1D [5601000000000000] 
 14463 0000AC25 50                      	push rax
 14464 0000AC26 6A01                    	push 1
 14465 0000AC28 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14466                                  	assert_closure(rax)
    42 0000AC30 803805              <1>  cmp byte [%1], %2
    43 0000AC33 0F85B3820000        <1>  jne L_error_incorrect_type
 14467 0000AC39 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14468 0000AC3C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14469 0000AC3F 50                      	push rax
 14470 0000AC40 48B8-                   	mov rax,L_constants + 346
 14470 0000AC42 [5A01000000000000] 
 14471 0000AC4A 50                      	push rax
 14472 0000AC4B 6A01                    	push 1
 14473 0000AC4D 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14474                                  	assert_closure(rax)
    42 0000AC55 803805              <1>  cmp byte [%1], %2
    43 0000AC58 0F858E820000        <1>  jne L_error_incorrect_type
 14475 0000AC5E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14476 0000AC61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14477 0000AC64 50                      	push rax
 14478 0000AC65 6A02                    	push 2
 14479 0000AC67 488B0425[10030000]      	mov rax, qword [free_var_98]
 14480                                  	assert_closure(rax)
    42 0000AC6F 803805              <1>  cmp byte [%1], %2
    43 0000AC72 0F8574820000        <1>  jne L_error_incorrect_type
 14481 0000AC78 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14482 0000AC7B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14483 0000AC7E 50                      	push rax
 14484 0000AC7F 6A01                    	push 1
 14485 0000AC81 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14486 0000AC86 E86D6A0000              	call malloc
 14487 0000AC8B 50                      	push rax
 14488 0000AC8C BF00000000              	mov rdi, 8 * 0	; new rib
 14489 0000AC91 E8626A0000              	call malloc
 14490 0000AC96 50                      	push rax
 14491 0000AC97 BF08000000              	mov rdi, 8 * 1	; extended env
 14492 0000AC9C E8576A0000              	call malloc
 14493 0000ACA1 488B7D10                	mov rdi, ENV
 14494 0000ACA5 BE00000000              	mov rsi, 0
 14495 0000ACAA BA01000000              	mov rdx, 1
 14496                                  .L_lambda_simple_env_loop_005d:	; ext_env[i + 1] <-- env[i]
 14497 0000ACAF 4883FE00                	cmp rsi, 0
 14498 0000ACB3 7410                    	je .L_lambda_simple_env_end_005d
 14499 0000ACB5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14500 0000ACB9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14501 0000ACBD 48FFC6                  	inc rsi
 14502 0000ACC0 48FFC2                  	inc rdx
 14503 0000ACC3 EBEA                    	jmp .L_lambda_simple_env_loop_005d
 14504                                  .L_lambda_simple_env_end_005d:
 14505 0000ACC5 5B                      	pop rbx
 14506 0000ACC6 BE00000000              	mov rsi, 0
 14507                                  .L_lambda_simple_params_loop_005d:	; copy params
 14508 0000ACCB 4883FE00                	cmp rsi, 0
 14509 0000ACCF 740E                    	je .L_lambda_simple_params_end_005d
 14510 0000ACD1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14511 0000ACD6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14512 0000ACDA 48FFC6                  	inc rsi
 14513 0000ACDD EBEC                    	jmp .L_lambda_simple_params_loop_005d
 14514                                  .L_lambda_simple_params_end_005d:
 14515 0000ACDF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14516 0000ACE2 4889C3                  	mov rbx, rax
 14517 0000ACE5 58                      	pop rax
 14518 0000ACE6 C60005                  	mov byte [rax], T_closure
 14519 0000ACE9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14520 0000ACED 48C74009[FAAC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005d
 14521 0000ACF5 E94F030000              	jmp .L_lambda_simple_end_005d
 14522                                  .L_lambda_simple_code_005d:	; lambda-simple body
 14523 0000ACFA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14524 0000AD00 740B                    	je .L_lambda_simple_arity_check_ok_005d
 14525 0000AD02 FF742410                	push qword [rsp + 8 * 2]
 14526 0000AD06 6A01                    	push 1
 14527 0000AD08 E9A4690000              	jmp L_error_incorrect_arity_simple
 14528                                  .L_lambda_simple_arity_check_ok_005d:
 14529 0000AD0D C8000000                	enter 0, 0
 14530 0000AD11 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14531 0000AD16 E8DD690000              	call malloc
 14532 0000AD1B 50                      	push rax
 14533 0000AD1C BF08000000              	mov rdi, 8 * 1	; new rib
 14534 0000AD21 E8D2690000              	call malloc
 14535 0000AD26 50                      	push rax
 14536 0000AD27 BF10000000              	mov rdi, 8 * 2	; extended env
 14537 0000AD2C E8C7690000              	call malloc
 14538 0000AD31 488B7D10                	mov rdi, ENV
 14539 0000AD35 BE00000000              	mov rsi, 0
 14540 0000AD3A BA01000000              	mov rdx, 1
 14541                                  .L_lambda_simple_env_loop_005e:	; ext_env[i + 1] <-- env[i]
 14542 0000AD3F 4883FE01                	cmp rsi, 1
 14543 0000AD43 7410                    	je .L_lambda_simple_env_end_005e
 14544 0000AD45 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14545 0000AD49 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14546 0000AD4D 48FFC6                  	inc rsi
 14547 0000AD50 48FFC2                  	inc rdx
 14548 0000AD53 EBEA                    	jmp .L_lambda_simple_env_loop_005e
 14549                                  .L_lambda_simple_env_end_005e:
 14550 0000AD55 5B                      	pop rbx
 14551 0000AD56 BE00000000              	mov rsi, 0
 14552                                  .L_lambda_simple_params_loop_005e:	; copy params
 14553 0000AD5B 4883FE01                	cmp rsi, 1
 14554 0000AD5F 740E                    	je .L_lambda_simple_params_end_005e
 14555 0000AD61 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14556 0000AD66 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14557 0000AD6A 48FFC6                  	inc rsi
 14558 0000AD6D EBEC                    	jmp .L_lambda_simple_params_loop_005e
 14559                                  .L_lambda_simple_params_end_005e:
 14560 0000AD6F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14561 0000AD72 4889C3                  	mov rbx, rax
 14562 0000AD75 58                      	pop rax
 14563 0000AD76 C60005                  	mov byte [rax], T_closure
 14564 0000AD79 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14565 0000AD7D 48C74009[8AAD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005e
 14566 0000AD85 E90F010000              	jmp .L_lambda_simple_end_005e
 14567                                  .L_lambda_simple_code_005e:	; lambda-simple body
 14568 0000AD8A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14569 0000AD90 740B                    	je .L_lambda_simple_arity_check_ok_005e
 14570 0000AD92 FF742410                	push qword [rsp + 8 * 2]
 14571 0000AD96 6A01                    	push 1
 14572 0000AD98 E914690000              	jmp L_error_incorrect_arity_simple
 14573                                  .L_lambda_simple_arity_check_ok_005e:
 14574 0000AD9D C8000000                	enter 0, 0
 14575 0000ADA1 48B8-                   	mov rax,L_constants + 344
 14575 0000ADA3 [5801000000000000] 
 14576 0000ADAB 50                      	push rax
 14577 0000ADAC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14578 0000ADB0 50                      	push rax
 14579 0000ADB1 48B8-                   	mov rax,L_constants + 342
 14579 0000ADB3 [5601000000000000] 
 14580 0000ADBB 50                      	push rax
 14581 0000ADBC 6A03                    	push 3
 14582 0000ADBE 488B0425[68030000]      	mov rax, qword [free_var_109]
 14583                                  	assert_closure(rax)
    42 0000ADC6 803805              <1>  cmp byte [%1], %2
    43 0000ADC9 0F851D810000        <1>  jne L_error_incorrect_type
 14584 0000ADCF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14585 0000ADD2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14586                                  
 14587 0000ADD5 483D[02000000]                  	cmp rax, sob_boolean_false
 14588                                  
 14589 0000ADDB 0F84B0000000                    	je .L_if_else_0038
 14590 0000ADE1 488B4510                	mov rax, qword [rbp + 8 * 2]
 14591                                  
 14592 0000ADE5 488B00                                            	mov rax, qword[rax + 8 * 0]
 14593                                  
 14594 0000ADE8 488B00                                            	mov rax, qword[rax + 8 * 0]
 14595 0000ADEB 50                      	push rax
 14596 0000ADEC 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14597 0000ADF0 50                      	push rax
 14598 0000ADF1 6A01                    	push 1
 14599 0000ADF3 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14600                                  	assert_closure(rax)
    42 0000ADFB 803805              <1>  cmp byte [%1], %2
    43 0000ADFE 0F85E8800000        <1>  jne L_error_incorrect_type
 14601 0000AE04 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14602 0000AE07 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14603 0000AE0A 50                      	push rax
 14604 0000AE0B 6A02                    	push 2
 14605 0000AE0D 488B0425[08030000]      	mov rax, qword [free_var_97]
 14606                                  	assert_closure(rax)
    42 0000AE15 803805              <1>  cmp byte [%1], %2
    43 0000AE18 0F85CE800000        <1>  jne L_error_incorrect_type
 14607 0000AE1E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14608 0000AE21 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14609 0000AE24 50                      	push rax
 14610 0000AE25 6A01                    	push 1
 14611 0000AE27 488B0425[C8000000]      	mov rax, qword [free_var_25]
 14612                                  .L_applic_TC_007b:
 14613 0000AE2F 803805                  	cmp byte [rax], T_closure
 14614 0000AE32 0F8575780000            	jne L_code_ptr_error
 14615 0000AE38 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14616 0000AE3C 53                      	push rbx
 14617 0000AE3D FF7508                  	push qword [rbp + 8]
 14618 0000AE40 FF7500                  	push qword [rbp]
 14619 0000AE43 488B4D18                	mov rcx, [rbp + 3 * 8]
 14620 0000AE47 488B542418              	mov rdx, [rsp + 3 * 8]
 14621 0000AE4C 488D7204                	lea rsi, [rdx + 4]
 14622 0000AE50 4C8D4EFF                	lea r9, [rsi - 1]
 14623 0000AE54 488D7903                	lea rdi, [rcx + 3]
 14624 0000AE58 4D31C0                  	xor r8, r8
 14625                                  .L_tc_recycle_frame_loop_007b:
 14626 0000AE5B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 14627 0000AE5F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 14628 0000AE64 49FFC9                  	dec r9
 14629 0000AE67 4D31C0                  	xor r8, r8
 14630 0000AE6A 48FFCF                  	dec rdi
 14631 0000AE6D 48FFCE                  	dec rsi
 14632 0000AE70 4883FE00                	cmp rsi, 0
 14633 0000AE74 75E5                    	jne .L_tc_recycle_frame_loop_007b
 14634                                  .L_tc_recycle_frame_done_007b:
 14635                                  ;this pop rbp in sot to the right place
 14636 0000AE76 4989C9                  	mov r9, rcx
 14637 0000AE79 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14638 0000AE81 4C01CC                  	add rsp, r9
 14639 0000AE84 5D                      	pop rbp
 14640 0000AE85 488B4D00                	mov rcx, qword [rbp]
 14641 0000AE89 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14642 0000AE8D FFE3                    	jmp rbx
 14643                                  
 14644 0000AE8F EB04                            	jmp .L_if_end_0038
 14645                                  
 14646                                          	.L_if_else_0038:
 14647 0000AE91 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14648                                  
 14649                                          	.L_if_end_0038:
 14650 0000AE95 C9                      	leave
 14651 0000AE96 C21800                  	ret 8 * (2 + 1)
 14652                                  .L_lambda_simple_end_005e:	; new closure is in rax
 14653 0000AE99 48890425[88030000]      	mov qword [free_var_113], rax
 14654                                  
 14655 0000AEA1 48B8-                           	mov rax, sob_void
 14655 0000AEA3 [0000000000000000] 
 14656                                  
 14657 0000AEAB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14658 0000AEB0 E843680000              	call malloc
 14659 0000AEB5 50                      	push rax
 14660 0000AEB6 BF08000000              	mov rdi, 8 * 1	; new rib
 14661 0000AEBB E838680000              	call malloc
 14662 0000AEC0 50                      	push rax
 14663 0000AEC1 BF10000000              	mov rdi, 8 * 2	; extended env
 14664 0000AEC6 E82D680000              	call malloc
 14665 0000AECB 488B7D10                	mov rdi, ENV
 14666 0000AECF BE00000000              	mov rsi, 0
 14667 0000AED4 BA01000000              	mov rdx, 1
 14668                                  .L_lambda_simple_env_loop_005f:	; ext_env[i + 1] <-- env[i]
 14669 0000AED9 4883FE01                	cmp rsi, 1
 14670 0000AEDD 7410                    	je .L_lambda_simple_env_end_005f
 14671 0000AEDF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14672 0000AEE3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14673 0000AEE7 48FFC6                  	inc rsi
 14674 0000AEEA 48FFC2                  	inc rdx
 14675 0000AEED EBEA                    	jmp .L_lambda_simple_env_loop_005f
 14676                                  .L_lambda_simple_env_end_005f:
 14677 0000AEEF 5B                      	pop rbx
 14678 0000AEF0 BE00000000              	mov rsi, 0
 14679                                  .L_lambda_simple_params_loop_005f:	; copy params
 14680 0000AEF5 4883FE01                	cmp rsi, 1
 14681 0000AEF9 740E                    	je .L_lambda_simple_params_end_005f
 14682 0000AEFB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14683 0000AF00 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14684 0000AF04 48FFC6                  	inc rsi
 14685 0000AF07 EBEC                    	jmp .L_lambda_simple_params_loop_005f
 14686                                  .L_lambda_simple_params_end_005f:
 14687 0000AF09 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14688 0000AF0C 4889C3                  	mov rbx, rax
 14689 0000AF0F 58                      	pop rax
 14690 0000AF10 C60005                  	mov byte [rax], T_closure
 14691 0000AF13 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14692 0000AF17 48C74009[24AF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_005f
 14693 0000AF1F E90F010000              	jmp .L_lambda_simple_end_005f
 14694                                  .L_lambda_simple_code_005f:	; lambda-simple body
 14695 0000AF24 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14696 0000AF2A 740B                    	je .L_lambda_simple_arity_check_ok_005f
 14697 0000AF2C FF742410                	push qword [rsp + 8 * 2]
 14698 0000AF30 6A01                    	push 1
 14699 0000AF32 E97A670000              	jmp L_error_incorrect_arity_simple
 14700                                  .L_lambda_simple_arity_check_ok_005f:
 14701 0000AF37 C8000000                	enter 0, 0
 14702 0000AF3B 48B8-                   	mov rax,L_constants + 348
 14702 0000AF3D [5C01000000000000] 
 14703 0000AF45 50                      	push rax
 14704 0000AF46 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14705 0000AF4A 50                      	push rax
 14706 0000AF4B 48B8-                   	mov rax,L_constants + 346
 14706 0000AF4D [5A01000000000000] 
 14707 0000AF55 50                      	push rax
 14708 0000AF56 6A03                    	push 3
 14709 0000AF58 488B0425[68030000]      	mov rax, qword [free_var_109]
 14710                                  	assert_closure(rax)
    42 0000AF60 803805              <1>  cmp byte [%1], %2
    43 0000AF63 0F85837F0000        <1>  jne L_error_incorrect_type
 14711 0000AF69 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14712 0000AF6C FF5009                  	call SOB_CLOSURE_CODE(rax)
 14713                                  
 14714 0000AF6F 483D[02000000]                  	cmp rax, sob_boolean_false
 14715                                  
 14716 0000AF75 0F84B0000000                    	je .L_if_else_0039
 14717 0000AF7B 488B4510                	mov rax, qword [rbp + 8 * 2]
 14718                                  
 14719 0000AF7F 488B00                                            	mov rax, qword[rax + 8 * 0]
 14720                                  
 14721 0000AF82 488B00                                            	mov rax, qword[rax + 8 * 0]
 14722 0000AF85 50                      	push rax
 14723 0000AF86 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14724 0000AF8A 50                      	push rax
 14725 0000AF8B 6A01                    	push 1
 14726 0000AF8D 488B0425[C0000000]      	mov rax, qword [free_var_24]
 14727                                  	assert_closure(rax)
    42 0000AF95 803805              <1>  cmp byte [%1], %2
    43 0000AF98 0F854E7F0000        <1>  jne L_error_incorrect_type
 14728 0000AF9E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14729 0000AFA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14730 0000AFA4 50                      	push rax
 14731 0000AFA5 6A02                    	push 2
 14732 0000AFA7 488B0425[10030000]      	mov rax, qword [free_var_98]
 14733                                  	assert_closure(rax)
    42 0000AFAF 803805              <1>  cmp byte [%1], %2
    43 0000AFB2 0F85347F0000        <1>  jne L_error_incorrect_type
 14734 0000AFB8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14735 0000AFBB FF5009                  	call SOB_CLOSURE_CODE(rax)
 14736 0000AFBE 50                      	push rax
 14737 0000AFBF 6A01                    	push 1
 14738 0000AFC1 488B0425[C8000000]      	mov rax, qword [free_var_25]
 14739                                  .L_applic_TC_007c:
 14740 0000AFC9 803805                  	cmp byte [rax], T_closure
 14741 0000AFCC 0F85DB760000            	jne L_code_ptr_error
 14742 0000AFD2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 14743 0000AFD6 53                      	push rbx
 14744 0000AFD7 FF7508                  	push qword [rbp + 8]
 14745 0000AFDA FF7500                  	push qword [rbp]
 14746 0000AFDD 488B4D18                	mov rcx, [rbp + 3 * 8]
 14747 0000AFE1 488B542418              	mov rdx, [rsp + 3 * 8]
 14748 0000AFE6 488D7204                	lea rsi, [rdx + 4]
 14749 0000AFEA 4C8D4EFF                	lea r9, [rsi - 1]
 14750 0000AFEE 488D7903                	lea rdi, [rcx + 3]
 14751 0000AFF2 4D31C0                  	xor r8, r8
 14752                                  .L_tc_recycle_frame_loop_007c:
 14753 0000AFF5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 14754 0000AFF9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 14755 0000AFFE 49FFC9                  	dec r9
 14756 0000B001 4D31C0                  	xor r8, r8
 14757 0000B004 48FFCF                  	dec rdi
 14758 0000B007 48FFCE                  	dec rsi
 14759 0000B00A 4883FE00                	cmp rsi, 0
 14760 0000B00E 75E5                    	jne .L_tc_recycle_frame_loop_007c
 14761                                  .L_tc_recycle_frame_done_007c:
 14762                                  ;this pop rbp in sot to the right place
 14763 0000B010 4989C9                  	mov r9, rcx
 14764 0000B013 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 14765 0000B01B 4C01CC                  	add rsp, r9
 14766 0000B01E 5D                      	pop rbp
 14767 0000B01F 488B4D00                	mov rcx, qword [rbp]
 14768 0000B023 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 14769 0000B027 FFE3                    	jmp rbx
 14770                                  
 14771 0000B029 EB04                            	jmp .L_if_end_0039
 14772                                  
 14773                                          	.L_if_else_0039:
 14774 0000B02B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 14775                                  
 14776                                          	.L_if_end_0039:
 14777 0000B02F C9                      	leave
 14778 0000B030 C21800                  	ret 8 * (2 + 1)
 14779                                  .L_lambda_simple_end_005f:	; new closure is in rax
 14780 0000B033 48890425[90030000]      	mov qword [free_var_114], rax
 14781                                  
 14782 0000B03B 48B8-                           	mov rax, sob_void
 14782 0000B03D [0000000000000000] 
 14783 0000B045 C9                      	leave
 14784 0000B046 C21800                  	ret 8 * (2 + 1)
 14785                                  .L_lambda_simple_end_005d:	; new closure is in rax
 14786                                  	assert_closure(rax)
    42 0000B049 803805              <1>  cmp byte [%1], %2
    43 0000B04C 0F859A7E0000        <1>  jne L_error_incorrect_type
 14787 0000B052 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 14788 0000B055 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14789                                  
 14790 0000B058 4889C7                  	mov rdi, rax
 14791 0000B05B E8A9660000              	call print_sexpr_if_not_void
 14792                                  
 14793 0000B060 48B8-                   	mov rax,L_constants + 0
 14793 0000B062 [0000000000000000] 
 14794 0000B06A 48890425[98030000]      	mov qword [free_var_115], rax
 14795 0000B072 48B8-                   	mov rax, sob_void
 14795 0000B074 [0000000000000000] 
 14796                                  
 14797 0000B07C 4889C7                  	mov rdi, rax
 14798 0000B07F E885660000              	call print_sexpr_if_not_void
 14799                                  
 14800 0000B084 48B8-                   	mov rax,L_constants + 0
 14800 0000B086 [0000000000000000] 
 14801 0000B08E 48890425[A0030000]      	mov qword [free_var_116], rax
 14802 0000B096 48B8-                   	mov rax, sob_void
 14802 0000B098 [0000000000000000] 
 14803                                  
 14804 0000B0A0 4889C7                  	mov rdi, rax
 14805 0000B0A3 E861660000              	call print_sexpr_if_not_void
 14806                                  
 14807 0000B0A8 48B8-                   	mov rax,L_constants + 0
 14807 0000B0AA [0000000000000000] 
 14808 0000B0B2 48890425[A8030000]      	mov qword [free_var_117], rax
 14809 0000B0BA 48B8-                   	mov rax, sob_void
 14809 0000B0BC [0000000000000000] 
 14810                                  
 14811 0000B0C4 4889C7                  	mov rdi, rax
 14812 0000B0C7 E83D660000              	call print_sexpr_if_not_void
 14813                                  
 14814 0000B0CC 48B8-                   	mov rax,L_constants + 0
 14814 0000B0CE [0000000000000000] 
 14815 0000B0D6 48890425[B0030000]      	mov qword [free_var_118], rax
 14816 0000B0DE 48B8-                   	mov rax, sob_void
 14816 0000B0E0 [0000000000000000] 
 14817                                  
 14818 0000B0E8 4889C7                  	mov rdi, rax
 14819 0000B0EB E819660000              	call print_sexpr_if_not_void
 14820                                  
 14821 0000B0F0 48B8-                   	mov rax,L_constants + 0
 14821 0000B0F2 [0000000000000000] 
 14822 0000B0FA 48890425[B8030000]      	mov qword [free_var_119], rax
 14823 0000B102 48B8-                   	mov rax, sob_void
 14823 0000B104 [0000000000000000] 
 14824                                  
 14825 0000B10C 4889C7                  	mov rdi, rax
 14826 0000B10F E8F5650000              	call print_sexpr_if_not_void
 14827                                  
 14828 0000B114 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14829 0000B119 E8DA650000              	call malloc
 14830 0000B11E 50                      	push rax
 14831 0000B11F BF00000000              	mov rdi, 8 * 0	; new rib
 14832 0000B124 E8CF650000              	call malloc
 14833 0000B129 50                      	push rax
 14834 0000B12A BF08000000              	mov rdi, 8 * 1	; extended env
 14835 0000B12F E8C4650000              	call malloc
 14836 0000B134 488B7D10                	mov rdi, ENV
 14837 0000B138 BE00000000              	mov rsi, 0
 14838 0000B13D BA01000000              	mov rdx, 1
 14839                                  .L_lambda_simple_env_loop_0060:	; ext_env[i + 1] <-- env[i]
 14840 0000B142 4883FE00                	cmp rsi, 0
 14841 0000B146 7410                    	je .L_lambda_simple_env_end_0060
 14842 0000B148 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14843 0000B14C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14844 0000B150 48FFC6                  	inc rsi
 14845 0000B153 48FFC2                  	inc rdx
 14846 0000B156 EBEA                    	jmp .L_lambda_simple_env_loop_0060
 14847                                  .L_lambda_simple_env_end_0060:
 14848 0000B158 5B                      	pop rbx
 14849 0000B159 BE00000000              	mov rsi, 0
 14850                                  .L_lambda_simple_params_loop_0060:	; copy params
 14851 0000B15E 4883FE00                	cmp rsi, 0
 14852 0000B162 740E                    	je .L_lambda_simple_params_end_0060
 14853 0000B164 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14854 0000B169 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14855 0000B16D 48FFC6                  	inc rsi
 14856 0000B170 EBEC                    	jmp .L_lambda_simple_params_loop_0060
 14857                                  .L_lambda_simple_params_end_0060:
 14858 0000B172 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14859 0000B175 4889C3                  	mov rbx, rax
 14860 0000B178 58                      	pop rax
 14861 0000B179 C60005                  	mov byte [rax], T_closure
 14862 0000B17C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14863 0000B180 48C74009[8DB10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0060
 14864 0000B188 E953030000              	jmp .L_lambda_simple_end_0060
 14865                                  .L_lambda_simple_code_0060:	; lambda-simple body
 14866 0000B18D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14867 0000B193 740B                    	je .L_lambda_simple_arity_check_ok_0060
 14868 0000B195 FF742410                	push qword [rsp + 8 * 2]
 14869 0000B199 6A01                    	push 1
 14870 0000B19B E911650000              	jmp L_error_incorrect_arity_simple
 14871                                  .L_lambda_simple_arity_check_ok_0060:
 14872 0000B1A0 C8000000                	enter 0, 0
 14873 0000B1A4 BF11000000              	mov rdi, (1 + 8 + 8)
 14874 0000B1A9 E84A650000              	call malloc
 14875 0000B1AE 50                      	push rax
 14876 0000B1AF BF08000000              	mov rdi, 8 * 1
 14877 0000B1B4 E83F650000              	call malloc
 14878 0000B1B9 50                      	push rax
 14879 0000B1BA BF10000000              	mov rdi, 8 * 2
 14880 0000B1BF E834650000              	call malloc
 14881 0000B1C4 488B7D10                	mov rdi, ENV
 14882 0000B1C8 4831F6                  	xor rsi, rsi
 14883 0000B1CB 4831D2                  	xor rdx, rdx
 14884 0000B1CE 48FFC2                  	inc rdx
 14885                                  	.L_lambda_opt_env_loop_0011:
 14886                                  
 14887 0000B1D1 4883FE01                        	cmp rsi, 1
 14888                                  
 14889 0000B1D5 7412                            	je .L_lambda_opt_env_end_0011
 14890 0000B1D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14891 0000B1DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14892 0000B1DF 4883C201                	add rdx, 1
 14893 0000B1E3 4883C601                	add rsi, 1
 14894 0000B1E7 EBE8                    	jmp .L_lambda_opt_env_loop_0011
 14895                                  
 14896                                          	.L_lambda_opt_env_end_0011:
 14897 0000B1E9 5B                      	pop rbx
 14898 0000B1EA 4831F6                  	xor rsi, rsi
 14899                                  	.L_lambda_opt_params_loop_0011:
 14900                                  
 14901 0000B1ED 4883FE01                        	cmp rsi, 1
 14902                                  
 14903 0000B1F1 740F                            	je .L_lambda_opt_params_end_0011
 14904 0000B1F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14905 0000B1F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14906 0000B1FC 4883C601                	add rsi, 1
 14907 0000B200 EBEB                    	jmp .L_lambda_opt_params_loop_0011
 14908                                  
 14909                                          	.L_lambda_opt_params_end_0011:
 14910 0000B202 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 14911 0000B205 4889C3                  	mov rbx, rax
 14912 0000B208 58                      	pop rax
 14913 0000B209 C60005                  	mov byte [rax], T_closure
 14914 0000B20C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14915 0000B210 48C74009[1DB20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0011
 14916                                  
 14917 0000B218 E9BF020000                      	jmp .L_lambda_opt_end_0011
 14918                                  
 14919                                          	.L_lambda_opt_code_0011:
 14920                                  
 14921 0000B21D 48837C241000                    	cmp qword [rsp + 8 * 2], 0
 14922                                  
 14923 0000B223 740D                            	je .L_lambda_opt_arity_check_exact_0011  ;same num_of_args
 14924                                  
 14925 0000B225 7F65                            	jg .L_lambda_opt_arity_check_more_0011  ;greater num_of_args
 14926 0000B227 FF742410                	push qword [rsp + 8 * 2]
 14927 0000B22B 6A00                    	push 0
 14928 0000B22D E993640000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 14929                                  .L_lambda_opt_arity_check_exact_0011:
 14930 0000B232 4883EC08                	sub rsp, 8 * 1
 14931 0000B236 488D7F10                	lea rdi, [rdi + (8 * 2)]
 14932 0000B23A 4889E7                  	mov rdi, rsp 
 14933 0000B23D 488B4708                	mov rax, qword [rdi + 8]
 14934 0000B241 488907                  	mov qword [rdi], rax
 14935 0000B244 488D7F08                	lea rdi, [rdi + 8]
 14936 0000B248 488B4708                	mov rax, qword [rdi + 8]
 14937 0000B24C 488907                  	mov qword [rdi], rax
 14938 0000B24F 488D7F08                	lea rdi, [rdi + 8]
 14939 0000B253 488B4708                	mov rax, qword [rdi + 8]
 14940 0000B257 4889C1                  	mov rcx, rax
 14941 0000B25A 4883C001                	add rax, 1
 14942 0000B25E 488907                  	mov qword [rdi], rax
 14943 0000B261 488D7F08                	lea rdi, [rdi + 8]
 14944                                  	.L_lambda_opt_stack_shrink_loop_0031:
 14945 0000B265 4883F900                	cmp rcx, 0
 14946 0000B269 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0031
 14947 0000B26B 4883E901                	sub rcx, 1
 14948 0000B26F 488D4010                	lea rax, [rax + (8 * 2)]
 14949 0000B273 488B4708                	mov rax, qword [rdi + 8]
 14950 0000B277 488907                  	mov qword [rdi], rax
 14951 0000B27A 488D7F08                	lea rdi, [rdi + 8]
 14952 0000B27E EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0031
 14953                                  
 14954                                          	.L_lambda_opt_stack_shrink_loop_exit_0031:
 14955 0000B280 48C707[01000000]        	mov qword [rdi], sob_nil
 14956 0000B287 E996000000              	jmp .L_lambda_opt_stack_adjusted_0011
 14957                                  
 14958                                          	.L_lambda_opt_arity_check_more_0011:
 14959 0000B28C 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 14960 0000B291 488D0E                  	lea rcx, [rsi - 0]
 14961 0000B294 49B8-                   	mov r8, sob_nil
 14961 0000B296 [0100000000000000] 
 14962 0000B29E 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 14963 0000B2A3 4889F2                  	mov rdx, rsi
 14964                                  	.L_lambda_opt_stack_shrink_loop_0032:
 14965 0000B2A6 4883F900                	cmp rcx, 0
 14966 0000B2AA 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0032
 14967 0000B2AC BF11000000              	mov rdi, 1 + (8 * 2)
 14968 0000B2B1 E842640000              	call malloc
 14969 0000B2B6 C60021                  	mov byte [rax], T_pair
 14970 0000B2B9 488B1E                  	mov rbx, qword [rsi]
 14971 0000B2BC 48895801                	mov SOB_PAIR_CAR(rax), rbx
 14972 0000B2C0 4C894009                	mov SOB_PAIR_CDR(rax), r8
 14973 0000B2C4 4883C6F8                	add rsi, -8
 14974 0000B2C8 4883E901                	sub rcx, 1
 14975 0000B2CC 4989C0                  	mov r8, rax
 14976 0000B2CF EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0032
 14977                                  
 14978                                          	.L_lambda_opt_stack_shrink_loop_exit_0032:
 14979 0000B2D1 4C8902                  	mov qword [rdx], r8
 14980 0000B2D4 4883EA08                	sub rdx, 8 * 1
 14981 0000B2D8 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
 14982                                  
 14983 0000B2DD B900000000                      	mov rcx, 0 
 14984                                  
 14985                                          	.L_lambda_opt_stack_shrink_loop_0033:
 14986 0000B2E2 4883F900                	cmp rcx, 0
 14987 0000B2E6 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0033
 14988 0000B2E8 488B06                  	mov rax, qword [rsi]
 14989 0000B2EB 488902                  	mov qword [rdx], rax
 14990 0000B2EE 488D76F8                	lea rsi, [rsi - 8]
 14991 0000B2F2 4883C2F8                	add rdx, -8
 14992 0000B2F6 4883C1FF                	add rcx, -1
 14993 0000B2FA EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0033
 14994                                  
 14995                                          	.L_lambda_opt_stack_shrink_loop_exit_0033:
 14996                                  
 14997 0000B2FC 48C70201000000                  	mov qword [rdx], 1 + 0
 14998 0000B303 4883C6F8                	add rsi, -8
 14999 0000B307 4883C2F8                	add rdx, -8
 15000 0000B30B 488B06                  	mov rax, qword [rsi]
 15001 0000B30E 488902                  	mov qword [rdx], rax
 15002 0000B311 4883C2F8                	add rdx, -8
 15003 0000B315 488D76F8                	lea rsi, [rsi - 8]
 15004 0000B319 488B06                  	mov rax, qword [rsi]
 15005 0000B31C 488902                  	mov qword [rdx], rax
 15006 0000B31F 4889D4                  	mov rsp, rdx
 15007                                  	.L_lambda_opt_stack_adjusted_0011:
 15008 0000B322 C8000000                	enter 0, 0
 15009 0000B326 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15010 0000B32A 50                      	push rax
 15011 0000B32B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15012 0000B330 E8C3630000              	call malloc
 15013 0000B335 50                      	push rax
 15014 0000B336 BF08000000              	mov rdi, 8 * 1	; new rib
 15015 0000B33B E8B8630000              	call malloc
 15016 0000B340 50                      	push rax
 15017 0000B341 BF18000000              	mov rdi, 8 * 3	; extended env
 15018 0000B346 E8AD630000              	call malloc
 15019 0000B34B 488B7D10                	mov rdi, ENV
 15020 0000B34F BE00000000              	mov rsi, 0
 15021 0000B354 BA01000000              	mov rdx, 1
 15022                                  .L_lambda_simple_env_loop_0061:	; ext_env[i + 1] <-- env[i]
 15023 0000B359 4883FE02                	cmp rsi, 2
 15024 0000B35D 7410                    	je .L_lambda_simple_env_end_0061
 15025 0000B35F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15026 0000B363 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15027 0000B367 48FFC6                  	inc rsi
 15028 0000B36A 48FFC2                  	inc rdx
 15029 0000B36D EBEA                    	jmp .L_lambda_simple_env_loop_0061
 15030                                  .L_lambda_simple_env_end_0061:
 15031 0000B36F 5B                      	pop rbx
 15032 0000B370 BE00000000              	mov rsi, 0
 15033                                  .L_lambda_simple_params_loop_0061:	; copy params
 15034 0000B375 4883FE01                	cmp rsi, 1
 15035 0000B379 740E                    	je .L_lambda_simple_params_end_0061
 15036 0000B37B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15037 0000B380 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15038 0000B384 48FFC6                  	inc rsi
 15039 0000B387 EBEC                    	jmp .L_lambda_simple_params_loop_0061
 15040                                  .L_lambda_simple_params_end_0061:
 15041 0000B389 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15042 0000B38C 4889C3                  	mov rbx, rax
 15043 0000B38F 58                      	pop rax
 15044 0000B390 C60005                  	mov byte [rax], T_closure
 15045 0000B393 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15046 0000B397 48C74009[A4B30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0061
 15047 0000B39F E9A4000000              	jmp .L_lambda_simple_end_0061
 15048                                  .L_lambda_simple_code_0061:	; lambda-simple body
 15049 0000B3A4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15050 0000B3AA 740B                    	je .L_lambda_simple_arity_check_ok_0061
 15051 0000B3AC FF742410                	push qword [rsp + 8 * 2]
 15052 0000B3B0 6A01                    	push 1
 15053 0000B3B2 E9FA620000              	jmp L_error_incorrect_arity_simple
 15054                                  .L_lambda_simple_arity_check_ok_0061:
 15055 0000B3B7 C8000000                	enter 0, 0
 15056 0000B3BB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15057 0000B3BF 50                      	push rax
 15058 0000B3C0 6A01                    	push 1
 15059 0000B3C2 488B0425[88030000]      	mov rax, qword [free_var_113]
 15060                                  	assert_closure(rax)
    42 0000B3CA 803805              <1>  cmp byte [%1], %2
    43 0000B3CD 0F85197B0000        <1>  jne L_error_incorrect_type
 15061 0000B3D3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15062 0000B3D6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15063 0000B3D9 50                      	push rax
 15064 0000B3DA 6A01                    	push 1
 15065 0000B3DC 488B0425[C0000000]      	mov rax, qword [free_var_24]
 15066                                  .L_applic_TC_007d:
 15067 0000B3E4 803805                  	cmp byte [rax], T_closure
 15068 0000B3E7 0F85C0720000            	jne L_code_ptr_error
 15069 0000B3ED 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15070 0000B3F1 53                      	push rbx
 15071 0000B3F2 FF7508                  	push qword [rbp + 8]
 15072 0000B3F5 FF7500                  	push qword [rbp]
 15073 0000B3F8 488B4D18                	mov rcx, [rbp + 3 * 8]
 15074 0000B3FC 488B542418              	mov rdx, [rsp + 3 * 8]
 15075 0000B401 488D7204                	lea rsi, [rdx + 4]
 15076 0000B405 4C8D4EFF                	lea r9, [rsi - 1]
 15077 0000B409 488D7903                	lea rdi, [rcx + 3]
 15078 0000B40D 4D31C0                  	xor r8, r8
 15079                                  .L_tc_recycle_frame_loop_007d:
 15080 0000B410 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 15081 0000B414 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 15082 0000B419 49FFC9                  	dec r9
 15083 0000B41C 4D31C0                  	xor r8, r8
 15084 0000B41F 48FFCF                  	dec rdi
 15085 0000B422 48FFCE                  	dec rsi
 15086 0000B425 4883FE00                	cmp rsi, 0
 15087 0000B429 75E5                    	jne .L_tc_recycle_frame_loop_007d
 15088                                  .L_tc_recycle_frame_done_007d:
 15089                                  ;this pop rbp in sot to the right place
 15090 0000B42B 4989C9                  	mov r9, rcx
 15091 0000B42E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 15092 0000B436 4C01CC                  	add rsp, r9
 15093 0000B439 5D                      	pop rbp
 15094 0000B43A 488B4D00                	mov rcx, qword [rbp]
 15095 0000B43E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15096 0000B442 FFE3                    	jmp rbx
 15097 0000B444 C9                      	leave
 15098 0000B445 C21800                  	ret 8 * (2 + 1)
 15099                                  .L_lambda_simple_end_0061:	; new closure is in rax
 15100 0000B448 50                      	push rax
 15101 0000B449 6A02                    	push 2
 15102 0000B44B 488B0425[D8020000]      	mov rax, qword [free_var_91]
 15103                                  	assert_closure(rax)
    42 0000B453 803805              <1>  cmp byte [%1], %2
    43 0000B456 0F85907A0000        <1>  jne L_error_incorrect_type
 15104 0000B45C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15105 0000B45F FF5009                  	call SOB_CLOSURE_CODE(rax)
 15106 0000B462 50                      	push rax
 15107 0000B463 488B4510                	mov rax, qword [rbp + 8 * 2]
 15108                                  
 15109 0000B467 488B00                                            	mov rax, qword[rax + 8 * 0]
 15110                                  
 15111 0000B46A 488B00                                            	mov rax, qword[rax + 8 * 0]
 15112 0000B46D 50                      	push rax
 15113 0000B46E 6A02                    	push 2
 15114 0000B470 488B0425[C8020000]      	mov rax, qword [free_var_89]
 15115                                  .L_applic_TC_007e:
 15116 0000B478 803805                  	cmp byte [rax], T_closure
 15117 0000B47B 0F852C720000            	jne L_code_ptr_error
 15118 0000B481 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15119 0000B485 53                      	push rbx
 15120 0000B486 FF7508                  	push qword [rbp + 8]
 15121 0000B489 FF7500                  	push qword [rbp]
 15122 0000B48C 488B4D18                	mov rcx, [rbp + 3 * 8]
 15123 0000B490 488B542418              	mov rdx, [rsp + 3 * 8]
 15124 0000B495 488D7204                	lea rsi, [rdx + 4]
 15125 0000B499 4C8D4EFF                	lea r9, [rsi - 1]
 15126 0000B49D 488D7903                	lea rdi, [rcx + 3]
 15127 0000B4A1 4D31C0                  	xor r8, r8
 15128                                  .L_tc_recycle_frame_loop_007e:
 15129 0000B4A4 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 15130 0000B4A8 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 15131 0000B4AD 49FFC9                  	dec r9
 15132 0000B4B0 4D31C0                  	xor r8, r8
 15133 0000B4B3 48FFCF                  	dec rdi
 15134 0000B4B6 48FFCE                  	dec rsi
 15135 0000B4B9 4883FE00                	cmp rsi, 0
 15136 0000B4BD 75E5                    	jne .L_tc_recycle_frame_loop_007e
 15137                                  .L_tc_recycle_frame_done_007e:
 15138                                  ;this pop rbp in sot to the right place
 15139 0000B4BF 4989C9                  	mov r9, rcx
 15140 0000B4C2 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 15141 0000B4CA 4C01CC                  	add rsp, r9
 15142 0000B4CD 5D                      	pop rbp
 15143 0000B4CE 488B4D00                	mov rcx, qword [rbp]
 15144 0000B4D2 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15145 0000B4D6 FFE3                    	jmp rbx
 15146 0000B4D8 C9                      	leave
 15147 0000B4D9 C21800                  	ret 8 * (2 + 1)
 15148                                  .L_lambda_opt_end_0011:	; new closure is in rax
 15149 0000B4DC C9                      	leave
 15150 0000B4DD C21800                  	ret 8 * (2 + 1)
 15151                                  .L_lambda_simple_end_0060:	; new closure is in rax
 15152 0000B4E0 50                      	push rax
 15153 0000B4E1 6A01                    	push 1
 15154 0000B4E3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15155 0000B4E8 E80B620000              	call malloc
 15156 0000B4ED 50                      	push rax
 15157 0000B4EE BF00000000              	mov rdi, 8 * 0	; new rib
 15158 0000B4F3 E800620000              	call malloc
 15159 0000B4F8 50                      	push rax
 15160 0000B4F9 BF08000000              	mov rdi, 8 * 1	; extended env
 15161 0000B4FE E8F5610000              	call malloc
 15162 0000B503 488B7D10                	mov rdi, ENV
 15163 0000B507 BE00000000              	mov rsi, 0
 15164 0000B50C BA01000000              	mov rdx, 1
 15165                                  .L_lambda_simple_env_loop_0062:	; ext_env[i + 1] <-- env[i]
 15166 0000B511 4883FE00                	cmp rsi, 0
 15167 0000B515 7410                    	je .L_lambda_simple_env_end_0062
 15168 0000B517 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15169 0000B51B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15170 0000B51F 48FFC6                  	inc rsi
 15171 0000B522 48FFC2                  	inc rdx
 15172 0000B525 EBEA                    	jmp .L_lambda_simple_env_loop_0062
 15173                                  .L_lambda_simple_env_end_0062:
 15174 0000B527 5B                      	pop rbx
 15175 0000B528 BE00000000              	mov rsi, 0
 15176                                  .L_lambda_simple_params_loop_0062:	; copy params
 15177 0000B52D 4883FE00                	cmp rsi, 0
 15178 0000B531 740E                    	je .L_lambda_simple_params_end_0062
 15179 0000B533 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15180 0000B538 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15181 0000B53C 48FFC6                  	inc rsi
 15182 0000B53F EBEC                    	jmp .L_lambda_simple_params_loop_0062
 15183                                  .L_lambda_simple_params_end_0062:
 15184 0000B541 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15185 0000B544 4889C3                  	mov rbx, rax
 15186 0000B547 58                      	pop rax
 15187 0000B548 C60005                  	mov byte [rax], T_closure
 15188 0000B54B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15189 0000B54F 48C74009[5CB50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0062
 15190 0000B557 E90B010000              	jmp .L_lambda_simple_end_0062
 15191                                  .L_lambda_simple_code_0062:	; lambda-simple body
 15192 0000B55C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15193 0000B562 740B                    	je .L_lambda_simple_arity_check_ok_0062
 15194 0000B564 FF742410                	push qword [rsp + 8 * 2]
 15195 0000B568 6A01                    	push 1
 15196 0000B56A E942610000              	jmp L_error_incorrect_arity_simple
 15197                                  .L_lambda_simple_arity_check_ok_0062:
 15198 0000B56F C8000000                	enter 0, 0
 15199 0000B573 488B0425[30030000]      	mov rax, qword [free_var_102]
 15200 0000B57B 50                      	push rax
 15201 0000B57C 6A01                    	push 1
 15202 0000B57E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15203                                  	assert_closure(rax)
    42 0000B582 803805              <1>  cmp byte [%1], %2
    43 0000B585 0F8561790000        <1>  jne L_error_incorrect_type
 15204 0000B58B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15205 0000B58E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15206 0000B591 48890425[98030000]      	mov qword [free_var_115], rax
 15207                                  
 15208 0000B599 48B8-                           	mov rax, sob_void
 15208 0000B59B [0000000000000000] 
 15209                                  
 15210 0000B5A3 488B0425[38030000]      	mov rax, qword [free_var_103]
 15211 0000B5AB 50                      	push rax
 15212 0000B5AC 6A01                    	push 1
 15213 0000B5AE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15214                                  	assert_closure(rax)
    42 0000B5B2 803805              <1>  cmp byte [%1], %2
    43 0000B5B5 0F8531790000        <1>  jne L_error_incorrect_type
 15215 0000B5BB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15216 0000B5BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 15217 0000B5C1 48890425[A0030000]      	mov qword [free_var_116], rax
 15218                                  
 15219 0000B5C9 48B8-                           	mov rax, sob_void
 15219 0000B5CB [0000000000000000] 
 15220                                  
 15221 0000B5D3 488B0425[50030000]      	mov rax, qword [free_var_106]
 15222 0000B5DB 50                      	push rax
 15223 0000B5DC 6A01                    	push 1
 15224 0000B5DE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15225                                  	assert_closure(rax)
    42 0000B5E2 803805              <1>  cmp byte [%1], %2
    43 0000B5E5 0F8501790000        <1>  jne L_error_incorrect_type
 15226 0000B5EB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15227 0000B5EE FF5009                  	call SOB_CLOSURE_CODE(rax)
 15228 0000B5F1 48890425[A8030000]      	mov qword [free_var_117], rax
 15229                                  
 15230 0000B5F9 48B8-                           	mov rax, sob_void
 15230 0000B5FB [0000000000000000] 
 15231                                  
 15232 0000B603 488B0425[40030000]      	mov rax, qword [free_var_104]
 15233 0000B60B 50                      	push rax
 15234 0000B60C 6A01                    	push 1
 15235 0000B60E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15236                                  	assert_closure(rax)
    42 0000B612 803805              <1>  cmp byte [%1], %2
    43 0000B615 0F85D1780000        <1>  jne L_error_incorrect_type
 15237 0000B61B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15238 0000B61E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15239 0000B621 48890425[B0030000]      	mov qword [free_var_118], rax
 15240                                  
 15241 0000B629 48B8-                           	mov rax, sob_void
 15241 0000B62B [0000000000000000] 
 15242                                  
 15243 0000B633 488B0425[48030000]      	mov rax, qword [free_var_105]
 15244 0000B63B 50                      	push rax
 15245 0000B63C 6A01                    	push 1
 15246 0000B63E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15247                                  	assert_closure(rax)
    42 0000B642 803805              <1>  cmp byte [%1], %2
    43 0000B645 0F85A1780000        <1>  jne L_error_incorrect_type
 15248 0000B64B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15249 0000B64E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15250 0000B651 48890425[B8030000]      	mov qword [free_var_119], rax
 15251                                  
 15252 0000B659 48B8-                           	mov rax, sob_void
 15252 0000B65B [0000000000000000] 
 15253 0000B663 C9                      	leave
 15254 0000B664 C21800                  	ret 8 * (2 + 1)
 15255                                  .L_lambda_simple_end_0062:	; new closure is in rax
 15256                                  	assert_closure(rax)
    42 0000B667 803805              <1>  cmp byte [%1], %2
    43 0000B66A 0F857C780000        <1>  jne L_error_incorrect_type
 15257 0000B670 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15258 0000B673 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15259                                  
 15260 0000B676 4889C7                  	mov rdi, rax
 15261 0000B679 E88B600000              	call print_sexpr_if_not_void
 15262                                  
 15263 0000B67E 48B8-                   	mov rax,L_constants + 0
 15263 0000B680 [0000000000000000] 
 15264 0000B688 48890425[C0030000]      	mov qword [free_var_120], rax
 15265 0000B690 48B8-                   	mov rax, sob_void
 15265 0000B692 [0000000000000000] 
 15266                                  
 15267 0000B69A 4889C7                  	mov rdi, rax
 15268 0000B69D E867600000              	call print_sexpr_if_not_void
 15269                                  
 15270 0000B6A2 48B8-                   	mov rax,L_constants + 0
 15270 0000B6A4 [0000000000000000] 
 15271 0000B6AC 48890425[C8030000]      	mov qword [free_var_121], rax
 15272 0000B6B4 48B8-                   	mov rax, sob_void
 15272 0000B6B6 [0000000000000000] 
 15273                                  
 15274 0000B6BE 4889C7                  	mov rdi, rax
 15275 0000B6C1 E843600000              	call print_sexpr_if_not_void
 15276                                  
 15277 0000B6C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15278 0000B6CB E828600000              	call malloc
 15279 0000B6D0 50                      	push rax
 15280 0000B6D1 BF00000000              	mov rdi, 8 * 0	; new rib
 15281 0000B6D6 E81D600000              	call malloc
 15282 0000B6DB 50                      	push rax
 15283 0000B6DC BF08000000              	mov rdi, 8 * 1	; extended env
 15284 0000B6E1 E812600000              	call malloc
 15285 0000B6E6 488B7D10                	mov rdi, ENV
 15286 0000B6EA BE00000000              	mov rsi, 0
 15287 0000B6EF BA01000000              	mov rdx, 1
 15288                                  .L_lambda_simple_env_loop_0063:	; ext_env[i + 1] <-- env[i]
 15289 0000B6F4 4883FE00                	cmp rsi, 0
 15290 0000B6F8 7410                    	je .L_lambda_simple_env_end_0063
 15291 0000B6FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15292 0000B6FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15293 0000B702 48FFC6                  	inc rsi
 15294 0000B705 48FFC2                  	inc rdx
 15295 0000B708 EBEA                    	jmp .L_lambda_simple_env_loop_0063
 15296                                  .L_lambda_simple_env_end_0063:
 15297 0000B70A 5B                      	pop rbx
 15298 0000B70B BE00000000              	mov rsi, 0
 15299                                  .L_lambda_simple_params_loop_0063:	; copy params
 15300 0000B710 4883FE00                	cmp rsi, 0
 15301 0000B714 740E                    	je .L_lambda_simple_params_end_0063
 15302 0000B716 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15303 0000B71B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15304 0000B71F 48FFC6                  	inc rsi
 15305 0000B722 EBEC                    	jmp .L_lambda_simple_params_loop_0063
 15306                                  .L_lambda_simple_params_end_0063:
 15307 0000B724 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15308 0000B727 4889C3                  	mov rbx, rax
 15309 0000B72A 58                      	pop rax
 15310 0000B72B C60005                  	mov byte [rax], T_closure
 15311 0000B72E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15312 0000B732 48C74009[3FB70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0063
 15313 0000B73A E95D010000              	jmp .L_lambda_simple_end_0063
 15314                                  .L_lambda_simple_code_0063:	; lambda-simple body
 15315 0000B73F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15316 0000B745 740B                    	je .L_lambda_simple_arity_check_ok_0063
 15317 0000B747 FF742410                	push qword [rsp + 8 * 2]
 15318 0000B74B 6A01                    	push 1
 15319 0000B74D E95F5F0000              	jmp L_error_incorrect_arity_simple
 15320                                  .L_lambda_simple_arity_check_ok_0063:
 15321 0000B752 C8000000                	enter 0, 0
 15322 0000B756 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15323 0000B75B E8985F0000              	call malloc
 15324 0000B760 50                      	push rax
 15325 0000B761 BF08000000              	mov rdi, 8 * 1	; new rib
 15326 0000B766 E88D5F0000              	call malloc
 15327 0000B76B 50                      	push rax
 15328 0000B76C BF10000000              	mov rdi, 8 * 2	; extended env
 15329 0000B771 E8825F0000              	call malloc
 15330 0000B776 488B7D10                	mov rdi, ENV
 15331 0000B77A BE00000000              	mov rsi, 0
 15332 0000B77F BA01000000              	mov rdx, 1
 15333                                  .L_lambda_simple_env_loop_0064:	; ext_env[i + 1] <-- env[i]
 15334 0000B784 4883FE01                	cmp rsi, 1
 15335 0000B788 7410                    	je .L_lambda_simple_env_end_0064
 15336 0000B78A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15337 0000B78E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15338 0000B792 48FFC6                  	inc rsi
 15339 0000B795 48FFC2                  	inc rdx
 15340 0000B798 EBEA                    	jmp .L_lambda_simple_env_loop_0064
 15341                                  .L_lambda_simple_env_end_0064:
 15342 0000B79A 5B                      	pop rbx
 15343 0000B79B BE00000000              	mov rsi, 0
 15344                                  .L_lambda_simple_params_loop_0064:	; copy params
 15345 0000B7A0 4883FE01                	cmp rsi, 1
 15346 0000B7A4 740E                    	je .L_lambda_simple_params_end_0064
 15347 0000B7A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15348 0000B7AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15349 0000B7AF 48FFC6                  	inc rsi
 15350 0000B7B2 EBEC                    	jmp .L_lambda_simple_params_loop_0064
 15351                                  .L_lambda_simple_params_end_0064:
 15352 0000B7B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15353 0000B7B7 4889C3                  	mov rbx, rax
 15354 0000B7BA 58                      	pop rax
 15355 0000B7BB C60005                  	mov byte [rax], T_closure
 15356 0000B7BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15357 0000B7C2 48C74009[CFB70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0064
 15358 0000B7CA E9C9000000              	jmp .L_lambda_simple_end_0064
 15359                                  .L_lambda_simple_code_0064:	; lambda-simple body
 15360 0000B7CF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15361 0000B7D5 740B                    	je .L_lambda_simple_arity_check_ok_0064
 15362 0000B7D7 FF742410                	push qword [rsp + 8 * 2]
 15363 0000B7DB 6A01                    	push 1
 15364 0000B7DD E9CF5E0000              	jmp L_error_incorrect_arity_simple
 15365                                  .L_lambda_simple_arity_check_ok_0064:
 15366 0000B7E2 C8000000                	enter 0, 0
 15367 0000B7E6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15368 0000B7EA 50                      	push rax
 15369 0000B7EB 6A01                    	push 1
 15370 0000B7ED 488B0425[D8030000]      	mov rax, qword [free_var_123]
 15371                                  	assert_closure(rax)
    42 0000B7F5 803805              <1>  cmp byte [%1], %2
    43 0000B7F8 0F85EE760000        <1>  jne L_error_incorrect_type
 15372 0000B7FE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15373 0000B801 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15374 0000B804 50                      	push rax
 15375 0000B805 488B4510                	mov rax, qword [rbp + 8 * 2]
 15376                                  
 15377 0000B809 488B00                                            	mov rax, qword[rax + 8 * 0]
 15378                                  
 15379 0000B80C 488B00                                            	mov rax, qword[rax + 8 * 0]
 15380 0000B80F 50                      	push rax
 15381 0000B810 6A02                    	push 2
 15382 0000B812 488B0425[D8020000]      	mov rax, qword [free_var_91]
 15383                                  	assert_closure(rax)
    42 0000B81A 803805              <1>  cmp byte [%1], %2
    43 0000B81D 0F85C9760000        <1>  jne L_error_incorrect_type
 15384 0000B823 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15385 0000B826 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15386 0000B829 50                      	push rax
 15387 0000B82A 6A01                    	push 1
 15388 0000B82C 488B0425[D0030000]      	mov rax, qword [free_var_122]
 15389                                  .L_applic_TC_007f:
 15390 0000B834 803805                  	cmp byte [rax], T_closure
 15391 0000B837 0F85706E0000            	jne L_code_ptr_error
 15392 0000B83D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15393 0000B841 53                      	push rbx
 15394 0000B842 FF7508                  	push qword [rbp + 8]
 15395 0000B845 FF7500                  	push qword [rbp]
 15396 0000B848 488B4D18                	mov rcx, [rbp + 3 * 8]
 15397 0000B84C 488B542418              	mov rdx, [rsp + 3 * 8]
 15398 0000B851 488D7204                	lea rsi, [rdx + 4]
 15399 0000B855 4C8D4EFF                	lea r9, [rsi - 1]
 15400 0000B859 488D7903                	lea rdi, [rcx + 3]
 15401 0000B85D 4D31C0                  	xor r8, r8
 15402                                  .L_tc_recycle_frame_loop_007f:
 15403 0000B860 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 15404 0000B864 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 15405 0000B869 49FFC9                  	dec r9
 15406 0000B86C 4D31C0                  	xor r8, r8
 15407 0000B86F 48FFCF                  	dec rdi
 15408 0000B872 48FFCE                  	dec rsi
 15409 0000B875 4883FE00                	cmp rsi, 0
 15410 0000B879 75E5                    	jne .L_tc_recycle_frame_loop_007f
 15411                                  .L_tc_recycle_frame_done_007f:
 15412                                  ;this pop rbp in sot to the right place
 15413 0000B87B 4989C9                  	mov r9, rcx
 15414 0000B87E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 15415 0000B886 4C01CC                  	add rsp, r9
 15416 0000B889 5D                      	pop rbp
 15417 0000B88A 488B4D00                	mov rcx, qword [rbp]
 15418 0000B88E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15419 0000B892 FFE3                    	jmp rbx
 15420 0000B894 C9                      	leave
 15421 0000B895 C21800                  	ret 8 * (2 + 1)
 15422                                  .L_lambda_simple_end_0064:	; new closure is in rax
 15423 0000B898 C9                      	leave
 15424 0000B899 C21800                  	ret 8 * (2 + 1)
 15425                                  .L_lambda_simple_end_0063:	; new closure is in rax
 15426 0000B89C 50                      	push rax
 15427 0000B89D 6A01                    	push 1
 15428 0000B89F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15429 0000B8A4 E84F5E0000              	call malloc
 15430 0000B8A9 50                      	push rax
 15431 0000B8AA BF00000000              	mov rdi, 8 * 0	; new rib
 15432 0000B8AF E8445E0000              	call malloc
 15433 0000B8B4 50                      	push rax
 15434 0000B8B5 BF08000000              	mov rdi, 8 * 1	; extended env
 15435 0000B8BA E8395E0000              	call malloc
 15436 0000B8BF 488B7D10                	mov rdi, ENV
 15437 0000B8C3 BE00000000              	mov rsi, 0
 15438 0000B8C8 BA01000000              	mov rdx, 1
 15439                                  .L_lambda_simple_env_loop_0065:	; ext_env[i + 1] <-- env[i]
 15440 0000B8CD 4883FE00                	cmp rsi, 0
 15441 0000B8D1 7410                    	je .L_lambda_simple_env_end_0065
 15442 0000B8D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15443 0000B8D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15444 0000B8DB 48FFC6                  	inc rsi
 15445 0000B8DE 48FFC2                  	inc rdx
 15446 0000B8E1 EBEA                    	jmp .L_lambda_simple_env_loop_0065
 15447                                  .L_lambda_simple_env_end_0065:
 15448 0000B8E3 5B                      	pop rbx
 15449 0000B8E4 BE00000000              	mov rsi, 0
 15450                                  .L_lambda_simple_params_loop_0065:	; copy params
 15451 0000B8E9 4883FE00                	cmp rsi, 0
 15452 0000B8ED 740E                    	je .L_lambda_simple_params_end_0065
 15453 0000B8EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15454 0000B8F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15455 0000B8F8 48FFC6                  	inc rsi
 15456 0000B8FB EBEC                    	jmp .L_lambda_simple_params_loop_0065
 15457                                  .L_lambda_simple_params_end_0065:
 15458 0000B8FD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15459 0000B900 4889C3                  	mov rbx, rax
 15460 0000B903 58                      	pop rax
 15461 0000B904 C60005                  	mov byte [rax], T_closure
 15462 0000B907 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15463 0000B90B 48C74009[15B90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0065
 15464 0000B913 EB7B                    	jmp .L_lambda_simple_end_0065
 15465                                  .L_lambda_simple_code_0065:	; lambda-simple body
 15466 0000B915 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15467 0000B91B 740B                    	je .L_lambda_simple_arity_check_ok_0065
 15468 0000B91D FF742410                	push qword [rsp + 8 * 2]
 15469 0000B921 6A01                    	push 1
 15470 0000B923 E9895D0000              	jmp L_error_incorrect_arity_simple
 15471                                  .L_lambda_simple_arity_check_ok_0065:
 15472 0000B928 C8000000                	enter 0, 0
 15473 0000B92C 488B0425[88030000]      	mov rax, qword [free_var_113]
 15474 0000B934 50                      	push rax
 15475 0000B935 6A01                    	push 1
 15476 0000B937 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15477                                  	assert_closure(rax)
    42 0000B93B 803805              <1>  cmp byte [%1], %2
    43 0000B93E 0F85A8750000        <1>  jne L_error_incorrect_type
 15478 0000B944 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15479 0000B947 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15480 0000B94A 48890425[C0030000]      	mov qword [free_var_120], rax
 15481                                  
 15482 0000B952 48B8-                           	mov rax, sob_void
 15482 0000B954 [0000000000000000] 
 15483                                  
 15484 0000B95C 488B0425[90030000]      	mov rax, qword [free_var_114]
 15485 0000B964 50                      	push rax
 15486 0000B965 6A01                    	push 1
 15487 0000B967 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15488                                  	assert_closure(rax)
    42 0000B96B 803805              <1>  cmp byte [%1], %2
    43 0000B96E 0F8578750000        <1>  jne L_error_incorrect_type
 15489 0000B974 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15490 0000B977 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15491 0000B97A 48890425[C8030000]      	mov qword [free_var_121], rax
 15492                                  
 15493 0000B982 48B8-                           	mov rax, sob_void
 15493 0000B984 [0000000000000000] 
 15494 0000B98C C9                      	leave
 15495 0000B98D C21800                  	ret 8 * (2 + 1)
 15496                                  .L_lambda_simple_end_0065:	; new closure is in rax
 15497                                  	assert_closure(rax)
    42 0000B990 803805              <1>  cmp byte [%1], %2
    43 0000B993 0F8553750000        <1>  jne L_error_incorrect_type
 15498 0000B999 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15499 0000B99C FF5009                  	call SOB_CLOSURE_CODE(rax)
 15500                                  
 15501 0000B99F 4889C7                  	mov rdi, rax
 15502 0000B9A2 E8625D0000              	call print_sexpr_if_not_void
 15503                                  
 15504 0000B9A7 48B8-                   	mov rax,L_constants + 0
 15504 0000B9A9 [0000000000000000] 
 15505 0000B9B1 48890425[E0030000]      	mov qword [free_var_124], rax
 15506 0000B9B9 48B8-                   	mov rax, sob_void
 15506 0000B9BB [0000000000000000] 
 15507                                  
 15508 0000B9C3 4889C7                  	mov rdi, rax
 15509 0000B9C6 E83E5D0000              	call print_sexpr_if_not_void
 15510                                  
 15511 0000B9CB 48B8-                   	mov rax,L_constants + 0
 15511 0000B9CD [0000000000000000] 
 15512 0000B9D5 48890425[E8030000]      	mov qword [free_var_125], rax
 15513 0000B9DD 48B8-                   	mov rax, sob_void
 15513 0000B9DF [0000000000000000] 
 15514                                  
 15515 0000B9E7 4889C7                  	mov rdi, rax
 15516 0000B9EA E81A5D0000              	call print_sexpr_if_not_void
 15517                                  
 15518 0000B9EF 48B8-                   	mov rax,L_constants + 0
 15518 0000B9F1 [0000000000000000] 
 15519 0000B9F9 48890425[F0030000]      	mov qword [free_var_126], rax
 15520 0000BA01 48B8-                   	mov rax, sob_void
 15520 0000BA03 [0000000000000000] 
 15521                                  
 15522 0000BA0B 4889C7                  	mov rdi, rax
 15523 0000BA0E E8F65C0000              	call print_sexpr_if_not_void
 15524                                  
 15525 0000BA13 48B8-                   	mov rax,L_constants + 0
 15525 0000BA15 [0000000000000000] 
 15526 0000BA1D 48890425[F8030000]      	mov qword [free_var_127], rax
 15527 0000BA25 48B8-                   	mov rax, sob_void
 15527 0000BA27 [0000000000000000] 
 15528                                  
 15529 0000BA2F 4889C7                  	mov rdi, rax
 15530 0000BA32 E8D25C0000              	call print_sexpr_if_not_void
 15531                                  
 15532 0000BA37 48B8-                   	mov rax,L_constants + 0
 15532 0000BA39 [0000000000000000] 
 15533 0000BA41 48890425[00040000]      	mov qword [free_var_128], rax
 15534 0000BA49 48B8-                   	mov rax, sob_void
 15534 0000BA4B [0000000000000000] 
 15535                                  
 15536 0000BA53 4889C7                  	mov rdi, rax
 15537 0000BA56 E8AE5C0000              	call print_sexpr_if_not_void
 15538                                  
 15539 0000BA5B 48B8-                   	mov rax,L_constants + 0
 15539 0000BA5D [0000000000000000] 
 15540 0000BA65 48890425[08040000]      	mov qword [free_var_129], rax
 15541 0000BA6D 48B8-                   	mov rax, sob_void
 15541 0000BA6F [0000000000000000] 
 15542                                  
 15543 0000BA77 4889C7                  	mov rdi, rax
 15544 0000BA7A E88A5C0000              	call print_sexpr_if_not_void
 15545                                  
 15546 0000BA7F 48B8-                   	mov rax,L_constants + 0
 15546 0000BA81 [0000000000000000] 
 15547 0000BA89 48890425[10040000]      	mov qword [free_var_130], rax
 15548 0000BA91 48B8-                   	mov rax, sob_void
 15548 0000BA93 [0000000000000000] 
 15549                                  
 15550 0000BA9B 4889C7                  	mov rdi, rax
 15551 0000BA9E E8665C0000              	call print_sexpr_if_not_void
 15552                                  
 15553 0000BAA3 48B8-                   	mov rax,L_constants + 0
 15553 0000BAA5 [0000000000000000] 
 15554 0000BAAD 48890425[18040000]      	mov qword [free_var_131], rax
 15555 0000BAB5 48B8-                   	mov rax, sob_void
 15555 0000BAB7 [0000000000000000] 
 15556                                  
 15557 0000BABF 4889C7                  	mov rdi, rax
 15558 0000BAC2 E8425C0000              	call print_sexpr_if_not_void
 15559                                  
 15560 0000BAC7 48B8-                   	mov rax,L_constants + 0
 15560 0000BAC9 [0000000000000000] 
 15561 0000BAD1 48890425[20040000]      	mov qword [free_var_132], rax
 15562 0000BAD9 48B8-                   	mov rax, sob_void
 15562 0000BADB [0000000000000000] 
 15563                                  
 15564 0000BAE3 4889C7                  	mov rdi, rax
 15565 0000BAE6 E81E5C0000              	call print_sexpr_if_not_void
 15566                                  
 15567 0000BAEB 48B8-                   	mov rax,L_constants + 0
 15567 0000BAED [0000000000000000] 
 15568 0000BAF5 48890425[28040000]      	mov qword [free_var_133], rax
 15569 0000BAFD 48B8-                   	mov rax, sob_void
 15569 0000BAFF [0000000000000000] 
 15570                                  
 15571 0000BB07 4889C7                  	mov rdi, rax
 15572 0000BB0A E8FA5B0000              	call print_sexpr_if_not_void
 15573                                  
 15574 0000BB0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15575 0000BB14 E8DF5B0000              	call malloc
 15576 0000BB19 50                      	push rax
 15577 0000BB1A BF00000000              	mov rdi, 8 * 0	; new rib
 15578 0000BB1F E8D45B0000              	call malloc
 15579 0000BB24 50                      	push rax
 15580 0000BB25 BF08000000              	mov rdi, 8 * 1	; extended env
 15581 0000BB2A E8C95B0000              	call malloc
 15582 0000BB2F 488B7D10                	mov rdi, ENV
 15583 0000BB33 BE00000000              	mov rsi, 0
 15584 0000BB38 BA01000000              	mov rdx, 1
 15585                                  .L_lambda_simple_env_loop_0066:	; ext_env[i + 1] <-- env[i]
 15586 0000BB3D 4883FE00                	cmp rsi, 0
 15587 0000BB41 7410                    	je .L_lambda_simple_env_end_0066
 15588 0000BB43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15589 0000BB47 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15590 0000BB4B 48FFC6                  	inc rsi
 15591 0000BB4E 48FFC2                  	inc rdx
 15592 0000BB51 EBEA                    	jmp .L_lambda_simple_env_loop_0066
 15593                                  .L_lambda_simple_env_end_0066:
 15594 0000BB53 5B                      	pop rbx
 15595 0000BB54 BE00000000              	mov rsi, 0
 15596                                  .L_lambda_simple_params_loop_0066:	; copy params
 15597 0000BB59 4883FE00                	cmp rsi, 0
 15598 0000BB5D 740E                    	je .L_lambda_simple_params_end_0066
 15599 0000BB5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15600 0000BB64 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15601 0000BB68 48FFC6                  	inc rsi
 15602 0000BB6B EBEC                    	jmp .L_lambda_simple_params_loop_0066
 15603                                  .L_lambda_simple_params_end_0066:
 15604 0000BB6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15605 0000BB70 4889C3                  	mov rbx, rax
 15606 0000BB73 58                      	pop rax
 15607 0000BB74 C60005                  	mov byte [rax], T_closure
 15608 0000BB77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15609 0000BB7B 48C74009[88BB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0066
 15610 0000BB83 E93A0D0000              	jmp .L_lambda_simple_end_0066
 15611                                  .L_lambda_simple_code_0066:	; lambda-simple body
 15612 0000BB88 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15613 0000BB8E 740B                    	je .L_lambda_simple_arity_check_ok_0066
 15614 0000BB90 FF742410                	push qword [rsp + 8 * 2]
 15615 0000BB94 6A02                    	push 2
 15616 0000BB96 E9165B0000              	jmp L_error_incorrect_arity_simple
 15617                                  .L_lambda_simple_arity_check_ok_0066:
 15618 0000BB9B C8000000                	enter 0, 0
 15619 0000BB9F 48B8-                   	mov rax,L_constants + 23
 15619 0000BBA1 [1700000000000000] 
 15620 0000BBA9 50                      	push rax
 15621 0000BBAA 6A01                    	push 1
 15622 0000BBAC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15623 0000BBB1 E8425B0000              	call malloc
 15624 0000BBB6 50                      	push rax
 15625 0000BBB7 BF10000000              	mov rdi, 8 * 2	; new rib
 15626 0000BBBC E8375B0000              	call malloc
 15627 0000BBC1 50                      	push rax
 15628 0000BBC2 BF10000000              	mov rdi, 8 * 2	; extended env
 15629 0000BBC7 E82C5B0000              	call malloc
 15630 0000BBCC 488B7D10                	mov rdi, ENV
 15631 0000BBD0 BE00000000              	mov rsi, 0
 15632 0000BBD5 BA01000000              	mov rdx, 1
 15633                                  .L_lambda_simple_env_loop_0067:	; ext_env[i + 1] <-- env[i]
 15634 0000BBDA 4883FE01                	cmp rsi, 1
 15635 0000BBDE 7410                    	je .L_lambda_simple_env_end_0067
 15636 0000BBE0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15637 0000BBE4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15638 0000BBE8 48FFC6                  	inc rsi
 15639 0000BBEB 48FFC2                  	inc rdx
 15640 0000BBEE EBEA                    	jmp .L_lambda_simple_env_loop_0067
 15641                                  .L_lambda_simple_env_end_0067:
 15642 0000BBF0 5B                      	pop rbx
 15643 0000BBF1 BE00000000              	mov rsi, 0
 15644                                  .L_lambda_simple_params_loop_0067:	; copy params
 15645 0000BBF6 4883FE02                	cmp rsi, 2
 15646 0000BBFA 740E                    	je .L_lambda_simple_params_end_0067
 15647 0000BBFC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15648 0000BC01 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15649 0000BC05 48FFC6                  	inc rsi
 15650 0000BC08 EBEC                    	jmp .L_lambda_simple_params_loop_0067
 15651                                  .L_lambda_simple_params_end_0067:
 15652 0000BC0A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15653 0000BC0D 4889C3                  	mov rbx, rax
 15654 0000BC10 58                      	pop rax
 15655 0000BC11 C60005                  	mov byte [rax], T_closure
 15656 0000BC14 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15657 0000BC18 48C74009[25BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0067
 15658 0000BC20 E9390C0000              	jmp .L_lambda_simple_end_0067
 15659                                  .L_lambda_simple_code_0067:	; lambda-simple body
 15660 0000BC25 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15661 0000BC2B 740B                    	je .L_lambda_simple_arity_check_ok_0067
 15662 0000BC2D FF742410                	push qword [rsp + 8 * 2]
 15663 0000BC31 6A01                    	push 1
 15664 0000BC33 E9795A0000              	jmp L_error_incorrect_arity_simple
 15665                                  .L_lambda_simple_arity_check_ok_0067:
 15666 0000BC38 C8000000                	enter 0, 0
 15667 0000BC3C BF08000000              	mov rdi, 8
 15668 0000BC41 E8B25A0000              	call malloc
 15669 0000BC46 488B5D20                	mov rbx, PARAM(0)
 15670 0000BC4A 488918                  	mov qword [rax], rbx
 15671 0000BC4D 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 15672                                  
 15673 0000BC51 48B8-                            	mov rax, sob_void
 15673 0000BC53 [0000000000000000] 
 15674                                  
 15675 0000BC5B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15676 0000BC60 E8935A0000              	call malloc
 15677 0000BC65 50                      	push rax
 15678 0000BC66 BF08000000              	mov rdi, 8 * 1	; new rib
 15679 0000BC6B E8885A0000              	call malloc
 15680 0000BC70 50                      	push rax
 15681 0000BC71 BF18000000              	mov rdi, 8 * 3	; extended env
 15682 0000BC76 E87D5A0000              	call malloc
 15683 0000BC7B 488B7D10                	mov rdi, ENV
 15684 0000BC7F BE00000000              	mov rsi, 0
 15685 0000BC84 BA01000000              	mov rdx, 1
 15686                                  .L_lambda_simple_env_loop_0068:	; ext_env[i + 1] <-- env[i]
 15687 0000BC89 4883FE02                	cmp rsi, 2
 15688 0000BC8D 7410                    	je .L_lambda_simple_env_end_0068
 15689 0000BC8F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15690 0000BC93 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15691 0000BC97 48FFC6                  	inc rsi
 15692 0000BC9A 48FFC2                  	inc rdx
 15693 0000BC9D EBEA                    	jmp .L_lambda_simple_env_loop_0068
 15694                                  .L_lambda_simple_env_end_0068:
 15695 0000BC9F 5B                      	pop rbx
 15696 0000BCA0 BE00000000              	mov rsi, 0
 15697                                  .L_lambda_simple_params_loop_0068:	; copy params
 15698 0000BCA5 4883FE01                	cmp rsi, 1
 15699 0000BCA9 740E                    	je .L_lambda_simple_params_end_0068
 15700 0000BCAB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15701 0000BCB0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15702 0000BCB4 48FFC6                  	inc rsi
 15703 0000BCB7 EBEC                    	jmp .L_lambda_simple_params_loop_0068
 15704                                  .L_lambda_simple_params_end_0068:
 15705 0000BCB9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15706 0000BCBC 4889C3                  	mov rbx, rax
 15707 0000BCBF 58                      	pop rax
 15708 0000BCC0 C60005                  	mov byte [rax], T_closure
 15709 0000BCC3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15710 0000BCC7 48C74009[D4BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0068
 15711 0000BCCF E956020000              	jmp .L_lambda_simple_end_0068
 15712                                  .L_lambda_simple_code_0068:	; lambda-simple body
 15713 0000BCD4 48837C241005            	cmp qword [rsp + 8 * 2], 5
 15714 0000BCDA 740B                    	je .L_lambda_simple_arity_check_ok_0068
 15715 0000BCDC FF742410                	push qword [rsp + 8 * 2]
 15716 0000BCE0 6A05                    	push 5
 15717 0000BCE2 E9CA590000              	jmp L_error_incorrect_arity_simple
 15718                                  .L_lambda_simple_arity_check_ok_0068:
 15719 0000BCE7 C8000000                	enter 0, 0
 15720 0000BCEB 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 15721 0000BCEF 50                      	push rax
 15722 0000BCF0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15723 0000BCF4 50                      	push rax
 15724 0000BCF5 6A02                    	push 2
 15725 0000BCF7 488B0425[50030000]      	mov rax, qword [free_var_106]
 15726                                  	assert_closure(rax)
    42 0000BCFF 803805              <1>  cmp byte [%1], %2
    43 0000BD02 0F85E4710000        <1>  jne L_error_incorrect_type
 15727 0000BD08 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15728 0000BD0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15729                                  
 15730 0000BD0E 483D[02000000]                  	cmp rax, sob_boolean_false
 15731                                  
 15732 0000BD14 7425                            	je .L_if_else_003a
 15733 0000BD16 488B4540                	mov rax ,qword[rbp + 8 * (4 + 4)]
 15734 0000BD1A 50                      	push rax
 15735 0000BD1B 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 15736 0000BD1F 50                      	push rax
 15737 0000BD20 6A02                    	push 2
 15738 0000BD22 488B0425[30030000]      	mov rax, qword [free_var_102]
 15739                                  	assert_closure(rax)
    42 0000BD2A 803805              <1>  cmp byte [%1], %2
    43 0000BD2D 0F85B9710000        <1>  jne L_error_incorrect_type
 15740 0000BD33 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15741 0000BD36 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15742                                  
 15743 0000BD39 EB0A                            	jmp .L_if_end_003a
 15744                                  
 15745                                          	.L_if_else_003a:
 15746 0000BD3B 48B8-                   	mov rax,L_constants + 2
 15746 0000BD3D [0200000000000000] 
 15747                                  
 15748                                          	.L_if_end_003a:
 15749 0000BD45 483D[02000000]          	cmp rax, sob_boolean_false
 15750 0000BD4B 0F85D5010000            	jne .L_or_end_0005
 15751 0000BD51 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 15752 0000BD55 50                      	push rax
 15753 0000BD56 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15754 0000BD5A 50                      	push rax
 15755 0000BD5B 6A02                    	push 2
 15756 0000BD5D 488B0425[30030000]      	mov rax, qword [free_var_102]
 15757                                  	assert_closure(rax)
    42 0000BD65 803805              <1>  cmp byte [%1], %2
    43 0000BD68 0F857E710000        <1>  jne L_error_incorrect_type
 15758 0000BD6E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15759 0000BD71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15760                                  
 15761 0000BD74 483D[02000000]                  	cmp rax, sob_boolean_false
 15762                                  
 15763 0000BD7A 0F849C010000                    	je .L_if_else_003b
 15764 0000BD80 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15765 0000BD84 50                      	push rax
 15766 0000BD85 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 15767 0000BD89 50                      	push rax
 15768 0000BD8A 6A02                    	push 2
 15769 0000BD8C 488B0425[78010000]      	mov rax, qword [free_var_47]
 15770                                  	assert_closure(rax)
    42 0000BD94 803805              <1>  cmp byte [%1], %2
    43 0000BD97 0F854F710000        <1>  jne L_error_incorrect_type
 15771 0000BD9D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15772 0000BDA0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15773 0000BDA3 50                      	push rax
 15774 0000BDA4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15775 0000BDA8 50                      	push rax
 15776 0000BDA9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 15777 0000BDAD 50                      	push rax
 15778 0000BDAE 6A02                    	push 2
 15779 0000BDB0 488B0425[78010000]      	mov rax, qword [free_var_47]
 15780                                  	assert_closure(rax)
    42 0000BDB8 803805              <1>  cmp byte [%1], %2
    43 0000BDBB 0F852B710000        <1>  jne L_error_incorrect_type
 15781 0000BDC1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15782 0000BDC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15783 0000BDC7 50                      	push rax
 15784 0000BDC8 6A02                    	push 2
 15785 0000BDCA 488B4510                	mov rax, qword [rbp + 8 * 2]
 15786                                  
 15787 0000BDCE 488B4008                                          	mov rax, qword[rax + 8 * 1]
 15788                                  
 15789 0000BDD2 488B00                                            	mov rax, qword[rax + 8 * 0]
 15790                                  	assert_closure(rax)
    42 0000BDD5 803805              <1>  cmp byte [%1], %2
    43 0000BDD8 0F850E710000        <1>  jne L_error_incorrect_type
 15791 0000BDDE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15792 0000BDE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15793 0000BDE4 483D[02000000]          	cmp rax, sob_boolean_false
 15794 0000BDEA 0F852A010000            	jne .L_or_end_0006
 15795 0000BDF0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15796 0000BDF4 50                      	push rax
 15797 0000BDF5 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 15798 0000BDF9 50                      	push rax
 15799 0000BDFA 6A02                    	push 2
 15800 0000BDFC 488B0425[78010000]      	mov rax, qword [free_var_47]
 15801                                  	assert_closure(rax)
    42 0000BE04 803805              <1>  cmp byte [%1], %2
    43 0000BE07 0F85DF700000        <1>  jne L_error_incorrect_type
 15802 0000BE0D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15803 0000BE10 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15804 0000BE13 50                      	push rax
 15805 0000BE14 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15806 0000BE18 50                      	push rax
 15807 0000BE19 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 15808 0000BE1D 50                      	push rax
 15809 0000BE1E 6A02                    	push 2
 15810 0000BE20 488B0425[78010000]      	mov rax, qword [free_var_47]
 15811                                  	assert_closure(rax)
    42 0000BE28 803805              <1>  cmp byte [%1], %2
    43 0000BE2B 0F85BB700000        <1>  jne L_error_incorrect_type
 15812 0000BE31 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15813 0000BE34 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15814 0000BE37 50                      	push rax
 15815 0000BE38 6A02                    	push 2
 15816 0000BE3A 488B4510                	mov rax, qword [rbp + 8 * 2]
 15817                                  
 15818 0000BE3E 488B4008                                          	mov rax, qword[rax + 8 * 1]
 15819                                  
 15820 0000BE42 488B4008                                          	mov rax, qword[rax + 8 * 1]
 15821                                  	assert_closure(rax)
    42 0000BE46 803805              <1>  cmp byte [%1], %2
    43 0000BE49 0F859D700000        <1>  jne L_error_incorrect_type
 15822 0000BE4F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15823 0000BE52 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15824                                  
 15825 0000BE55 483D[02000000]                  	cmp rax, sob_boolean_false
 15826                                  
 15827 0000BE5B 0F84AF000000                    	je .L_if_else_003c
 15828 0000BE61 488B4540                	mov rax ,qword[rbp + 8 * (4 + 4)]
 15829 0000BE65 50                      	push rax
 15830 0000BE66 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 15831 0000BE6A 50                      	push rax
 15832 0000BE6B 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 15833 0000BE6F 50                      	push rax
 15834 0000BE70 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 15835 0000BE74 50                      	push rax
 15836 0000BE75 48B8-                   	mov rax,L_constants + 128
 15836 0000BE77 [8000000000000000] 
 15837 0000BE7F 50                      	push rax
 15838 0000BE80 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15839 0000BE84 50                      	push rax
 15840 0000BE85 6A02                    	push 2
 15841 0000BE87 488B0425[08030000]      	mov rax, qword [free_var_97]
 15842                                  	assert_closure(rax)
    42 0000BE8F 803805              <1>  cmp byte [%1], %2
    43 0000BE92 0F8554700000        <1>  jne L_error_incorrect_type
 15843 0000BE98 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15844 0000BE9B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15845 0000BE9E 50                      	push rax
 15846 0000BE9F 6A05                    	push 5
 15847 0000BEA1 488B4510                	mov rax, qword [rbp + 8 * 2]
 15848                                  
 15849 0000BEA5 488B00                                            	mov rax, qword[rax + 8 * 0]
 15850                                  
 15851 0000BEA8 488B00                                            	mov rax, qword[rax + 8 * 0]
 15852 0000BEAB 488B00                  	mov rax, qword [rax]
 15853                                  .L_applic_TC_0080:
 15854 0000BEAE 803805                  	cmp byte [rax], T_closure
 15855 0000BEB1 0F85F6670000            	jne L_code_ptr_error
 15856 0000BEB7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 15857 0000BEBB 53                      	push rbx
 15858 0000BEBC FF7508                  	push qword [rbp + 8]
 15859 0000BEBF FF7500                  	push qword [rbp]
 15860 0000BEC2 488B4D18                	mov rcx, [rbp + 3 * 8]
 15861 0000BEC6 488B542418              	mov rdx, [rsp + 3 * 8]
 15862 0000BECB 488D7204                	lea rsi, [rdx + 4]
 15863 0000BECF 4C8D4EFF                	lea r9, [rsi - 1]
 15864 0000BED3 488D7903                	lea rdi, [rcx + 3]
 15865 0000BED7 4D31C0                  	xor r8, r8
 15866                                  .L_tc_recycle_frame_loop_0080:
 15867 0000BEDA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 15868 0000BEDE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 15869 0000BEE3 49FFC9                  	dec r9
 15870 0000BEE6 4D31C0                  	xor r8, r8
 15871 0000BEE9 48FFCF                  	dec rdi
 15872 0000BEEC 48FFCE                  	dec rsi
 15873 0000BEEF 4883FE00                	cmp rsi, 0
 15874 0000BEF3 75E5                    	jne .L_tc_recycle_frame_loop_0080
 15875                                  .L_tc_recycle_frame_done_0080:
 15876                                  ;this pop rbp in sot to the right place
 15877 0000BEF5 4989C9                  	mov r9, rcx
 15878 0000BEF8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 15879 0000BF00 4C01CC                  	add rsp, r9
 15880 0000BF03 5D                      	pop rbp
 15881 0000BF04 488B4D00                	mov rcx, qword [rbp]
 15882 0000BF08 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 15883 0000BF0C FFE3                    	jmp rbx
 15884                                  
 15885 0000BF0E EB0A                            	jmp .L_if_end_003c
 15886                                  
 15887                                          	.L_if_else_003c:
 15888 0000BF10 48B8-                   	mov rax,L_constants + 2
 15888 0000BF12 [0200000000000000] 
 15889                                  
 15890                                          	.L_if_end_003c:
 15891                                  .L_or_end_0006:
 15892                                  
 15893 0000BF1A EB0A                            	jmp .L_if_end_003b
 15894                                  
 15895                                          	.L_if_else_003b:
 15896 0000BF1C 48B8-                   	mov rax,L_constants + 2
 15896 0000BF1E [0200000000000000] 
 15897                                  
 15898                                          	.L_if_end_003b:
 15899                                  .L_or_end_0005:
 15900 0000BF26 C9                      	leave
 15901 0000BF27 C23800                  	ret 8 * (2 + 5)
 15902                                  .L_lambda_simple_end_0068:	; new closure is in rax
 15903 0000BF2A 50                      	push rax
 15904 0000BF2B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15905 0000BF2F 8F00                    	pop qword [rax]
 15906 0000BF31 48B8-                   	mov rax, sob_void
 15906 0000BF33 [0000000000000000] 
 15907                                  
 15908 0000BF3B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15909 0000BF40 E8B3570000              	call malloc
 15910 0000BF45 50                      	push rax
 15911 0000BF46 BF08000000              	mov rdi, 8 * 1	; new rib
 15912 0000BF4B E8A8570000              	call malloc
 15913 0000BF50 50                      	push rax
 15914 0000BF51 BF18000000              	mov rdi, 8 * 3	; extended env
 15915 0000BF56 E89D570000              	call malloc
 15916 0000BF5B 488B7D10                	mov rdi, ENV
 15917 0000BF5F BE00000000              	mov rsi, 0
 15918 0000BF64 BA01000000              	mov rdx, 1
 15919                                  .L_lambda_simple_env_loop_0069:	; ext_env[i + 1] <-- env[i]
 15920 0000BF69 4883FE02                	cmp rsi, 2
 15921 0000BF6D 7410                    	je .L_lambda_simple_env_end_0069
 15922 0000BF6F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15923 0000BF73 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15924 0000BF77 48FFC6                  	inc rsi
 15925 0000BF7A 48FFC2                  	inc rdx
 15926 0000BF7D EBEA                    	jmp .L_lambda_simple_env_loop_0069
 15927                                  .L_lambda_simple_env_end_0069:
 15928 0000BF7F 5B                      	pop rbx
 15929 0000BF80 BE00000000              	mov rsi, 0
 15930                                  .L_lambda_simple_params_loop_0069:	; copy params
 15931 0000BF85 4883FE01                	cmp rsi, 1
 15932 0000BF89 740E                    	je .L_lambda_simple_params_end_0069
 15933 0000BF8B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15934 0000BF90 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15935 0000BF94 48FFC6                  	inc rsi
 15936 0000BF97 EBEC                    	jmp .L_lambda_simple_params_loop_0069
 15937                                  .L_lambda_simple_params_end_0069:
 15938 0000BF99 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15939 0000BF9C 4889C3                  	mov rbx, rax
 15940 0000BF9F 58                      	pop rax
 15941 0000BFA0 C60005                  	mov byte [rax], T_closure
 15942 0000BFA3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15943 0000BFA7 48C74009[B4BF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0069
 15944 0000BFAF E9BB020000              	jmp .L_lambda_simple_end_0069
 15945                                  .L_lambda_simple_code_0069:	; lambda-simple body
 15946 0000BFB4 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15947 0000BFBA 740B                    	je .L_lambda_simple_arity_check_ok_0069
 15948 0000BFBC FF742410                	push qword [rsp + 8 * 2]
 15949 0000BFC0 6A02                    	push 2
 15950 0000BFC2 E9EA560000              	jmp L_error_incorrect_arity_simple
 15951                                  .L_lambda_simple_arity_check_ok_0069:
 15952 0000BFC7 C8000000                	enter 0, 0
 15953 0000BFCB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 15954 0000BFCF 50                      	push rax
 15955 0000BFD0 6A01                    	push 1
 15956 0000BFD2 488B0425[90000000]      	mov rax, qword [free_var_18]
 15957                                  	assert_closure(rax)
    42 0000BFDA 803805              <1>  cmp byte [%1], %2
    43 0000BFDD 0F85096F0000        <1>  jne L_error_incorrect_type
 15958 0000BFE3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15959 0000BFE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15960 0000BFE9 50                      	push rax
 15961 0000BFEA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 15962 0000BFEE 50                      	push rax
 15963 0000BFEF 6A01                    	push 1
 15964 0000BFF1 488B0425[90000000]      	mov rax, qword [free_var_18]
 15965                                  	assert_closure(rax)
    42 0000BFF9 803805              <1>  cmp byte [%1], %2
    43 0000BFFC 0F85EA6E0000        <1>  jne L_error_incorrect_type
 15966 0000C002 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 15967 0000C005 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15968 0000C008 50                      	push rax
 15969 0000C009 6A02                    	push 2
 15970 0000C00B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15971 0000C010 E8E3560000              	call malloc
 15972 0000C015 50                      	push rax
 15973 0000C016 BF10000000              	mov rdi, 8 * 2	; new rib
 15974 0000C01B E8D8560000              	call malloc
 15975 0000C020 50                      	push rax
 15976 0000C021 BF20000000              	mov rdi, 8 * 4	; extended env
 15977 0000C026 E8CD560000              	call malloc
 15978 0000C02B 488B7D10                	mov rdi, ENV
 15979 0000C02F BE00000000              	mov rsi, 0
 15980 0000C034 BA01000000              	mov rdx, 1
 15981                                  .L_lambda_simple_env_loop_006a:	; ext_env[i + 1] <-- env[i]
 15982 0000C039 4883FE03                	cmp rsi, 3
 15983 0000C03D 7410                    	je .L_lambda_simple_env_end_006a
 15984 0000C03F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15985 0000C043 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15986 0000C047 48FFC6                  	inc rsi
 15987 0000C04A 48FFC2                  	inc rdx
 15988 0000C04D EBEA                    	jmp .L_lambda_simple_env_loop_006a
 15989                                  .L_lambda_simple_env_end_006a:
 15990 0000C04F 5B                      	pop rbx
 15991 0000C050 BE00000000              	mov rsi, 0
 15992                                  .L_lambda_simple_params_loop_006a:	; copy params
 15993 0000C055 4883FE02                	cmp rsi, 2
 15994 0000C059 740E                    	je .L_lambda_simple_params_end_006a
 15995 0000C05B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15996 0000C060 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15997 0000C064 48FFC6                  	inc rsi
 15998 0000C067 EBEC                    	jmp .L_lambda_simple_params_loop_006a
 15999                                  .L_lambda_simple_params_end_006a:
 16000 0000C069 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16001 0000C06C 4889C3                  	mov rbx, rax
 16002 0000C06F 58                      	pop rax
 16003 0000C070 C60005                  	mov byte [rax], T_closure
 16004 0000C073 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16005 0000C077 48C74009[84C00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006a
 16006 0000C07F E987010000              	jmp .L_lambda_simple_end_006a
 16007                                  .L_lambda_simple_code_006a:	; lambda-simple body
 16008 0000C084 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16009 0000C08A 740B                    	je .L_lambda_simple_arity_check_ok_006a
 16010 0000C08C FF742410                	push qword [rsp + 8 * 2]
 16011 0000C090 6A02                    	push 2
 16012 0000C092 E91A560000              	jmp L_error_incorrect_arity_simple
 16013                                  .L_lambda_simple_arity_check_ok_006a:
 16014 0000C097 C8000000                	enter 0, 0
 16015 0000C09B 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16016 0000C09F 50                      	push rax
 16017 0000C0A0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16018 0000C0A4 50                      	push rax
 16019 0000C0A5 6A02                    	push 2
 16020 0000C0A7 488B0425[38030000]      	mov rax, qword [free_var_103]
 16021                                  	assert_closure(rax)
    42 0000C0AF 803805              <1>  cmp byte [%1], %2
    43 0000C0B2 0F85346E0000        <1>  jne L_error_incorrect_type
 16022 0000C0B8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16023 0000C0BB FF5009                  	call SOB_CLOSURE_CODE(rax)
 16024                                  
 16025 0000C0BE 483D[02000000]                  	cmp rax, sob_boolean_false
 16026                                  
 16027 0000C0C4 0F84A1000000                    	je .L_if_else_003d
 16028 0000C0CA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16029 0000C0CE 50                      	push rax
 16030 0000C0CF 488B4510                	mov rax, qword [rbp + 8 * 2]
 16031                                  
 16032 0000C0D3 488B00                                            	mov rax, qword[rax + 8 * 0]
 16033                                  
 16034 0000C0D6 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16035 0000C0DA 50                      	push rax
 16036 0000C0DB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16037 0000C0DF 50                      	push rax
 16038 0000C0E0 488B4510                	mov rax, qword [rbp + 8 * 2]
 16039                                  
 16040 0000C0E4 488B00                                            	mov rax, qword[rax + 8 * 0]
 16041                                  
 16042 0000C0E7 488B00                                            	mov rax, qword[rax + 8 * 0]
 16043 0000C0EA 50                      	push rax
 16044 0000C0EB 48B8-                   	mov rax,L_constants + 32
 16044 0000C0ED [2000000000000000] 
 16045 0000C0F5 50                      	push rax
 16046 0000C0F6 6A05                    	push 5
 16047 0000C0F8 488B4510                	mov rax, qword [rbp + 8 * 2]
 16048                                  
 16049 0000C0FC 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16050                                  
 16051 0000C100 488B00                                            	mov rax, qword[rax + 8 * 0]
 16052 0000C103 488B00                  	mov rax, qword [rax]
 16053                                  .L_applic_TC_0082:
 16054 0000C106 803805                  	cmp byte [rax], T_closure
 16055 0000C109 0F859E650000            	jne L_code_ptr_error
 16056 0000C10F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16057 0000C113 53                      	push rbx
 16058 0000C114 FF7508                  	push qword [rbp + 8]
 16059 0000C117 FF7500                  	push qword [rbp]
 16060 0000C11A 488B4D18                	mov rcx, [rbp + 3 * 8]
 16061 0000C11E 488B542418              	mov rdx, [rsp + 3 * 8]
 16062 0000C123 488D7204                	lea rsi, [rdx + 4]
 16063 0000C127 4C8D4EFF                	lea r9, [rsi - 1]
 16064 0000C12B 488D7903                	lea rdi, [rcx + 3]
 16065 0000C12F 4D31C0                  	xor r8, r8
 16066                                  .L_tc_recycle_frame_loop_0082:
 16067 0000C132 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16068 0000C136 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16069 0000C13B 49FFC9                  	dec r9
 16070 0000C13E 4D31C0                  	xor r8, r8
 16071 0000C141 48FFCF                  	dec rdi
 16072 0000C144 48FFCE                  	dec rsi
 16073 0000C147 4883FE00                	cmp rsi, 0
 16074 0000C14B 75E5                    	jne .L_tc_recycle_frame_loop_0082
 16075                                  .L_tc_recycle_frame_done_0082:
 16076                                  ;this pop rbp in sot to the right place
 16077 0000C14D 4989C9                  	mov r9, rcx
 16078 0000C150 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16079 0000C158 4C01CC                  	add rsp, r9
 16080 0000C15B 5D                      	pop rbp
 16081 0000C15C 488B4D00                	mov rcx, qword [rbp]
 16082 0000C160 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16083 0000C164 FFE3                    	jmp rbx
 16084                                  
 16085 0000C166 E99C000000                      	jmp .L_if_end_003d
 16086                                  
 16087                                          	.L_if_else_003d:
 16088 0000C16B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16089 0000C16F 50                      	push rax
 16090 0000C170 488B4510                	mov rax, qword [rbp + 8 * 2]
 16091                                  
 16092 0000C174 488B00                                            	mov rax, qword[rax + 8 * 0]
 16093                                  
 16094 0000C177 488B00                                            	mov rax, qword[rax + 8 * 0]
 16095 0000C17A 50                      	push rax
 16096 0000C17B 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16097 0000C17F 50                      	push rax
 16098 0000C180 488B4510                	mov rax, qword [rbp + 8 * 2]
 16099                                  
 16100 0000C184 488B00                                            	mov rax, qword[rax + 8 * 0]
 16101                                  
 16102 0000C187 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16103 0000C18B 50                      	push rax
 16104 0000C18C 48B8-                   	mov rax,L_constants + 32
 16104 0000C18E [2000000000000000] 
 16105 0000C196 50                      	push rax
 16106 0000C197 6A05                    	push 5
 16107 0000C199 488B4510                	mov rax, qword [rbp + 8 * 2]
 16108                                  
 16109 0000C19D 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16110                                  
 16111 0000C1A1 488B00                                            	mov rax, qword[rax + 8 * 0]
 16112 0000C1A4 488B00                  	mov rax, qword [rax]
 16113                                  .L_applic_TC_0081:
 16114 0000C1A7 803805                  	cmp byte [rax], T_closure
 16115 0000C1AA 0F85FD640000            	jne L_code_ptr_error
 16116 0000C1B0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16117 0000C1B4 53                      	push rbx
 16118 0000C1B5 FF7508                  	push qword [rbp + 8]
 16119 0000C1B8 FF7500                  	push qword [rbp]
 16120 0000C1BB 488B4D18                	mov rcx, [rbp + 3 * 8]
 16121 0000C1BF 488B542418              	mov rdx, [rsp + 3 * 8]
 16122 0000C1C4 488D7204                	lea rsi, [rdx + 4]
 16123 0000C1C8 4C8D4EFF                	lea r9, [rsi - 1]
 16124 0000C1CC 488D7903                	lea rdi, [rcx + 3]
 16125 0000C1D0 4D31C0                  	xor r8, r8
 16126                                  .L_tc_recycle_frame_loop_0081:
 16127 0000C1D3 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16128 0000C1D7 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16129 0000C1DC 49FFC9                  	dec r9
 16130 0000C1DF 4D31C0                  	xor r8, r8
 16131 0000C1E2 48FFCF                  	dec rdi
 16132 0000C1E5 48FFCE                  	dec rsi
 16133 0000C1E8 4883FE00                	cmp rsi, 0
 16134 0000C1EC 75E5                    	jne .L_tc_recycle_frame_loop_0081
 16135                                  .L_tc_recycle_frame_done_0081:
 16136                                  ;this pop rbp in sot to the right place
 16137 0000C1EE 4989C9                  	mov r9, rcx
 16138 0000C1F1 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16139 0000C1F9 4C01CC                  	add rsp, r9
 16140 0000C1FC 5D                      	pop rbp
 16141 0000C1FD 488B4D00                	mov rcx, qword [rbp]
 16142 0000C201 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16143 0000C205 FFE3                    	jmp rbx
 16144                                  
 16145                                          	.L_if_end_003d:
 16146 0000C207 C9                      	leave
 16147 0000C208 C22000                  	ret 8 * (2 + 2)
 16148                                  .L_lambda_simple_end_006a:	; new closure is in rax
 16149                                  .L_applic_TC_0083:
 16150 0000C20B 803805                  	cmp byte [rax], T_closure
 16151 0000C20E 0F8599640000            	jne L_code_ptr_error
 16152 0000C214 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16153 0000C218 53                      	push rbx
 16154 0000C219 FF7508                  	push qword [rbp + 8]
 16155 0000C21C FF7500                  	push qword [rbp]
 16156 0000C21F 488B4D18                	mov rcx, [rbp + 3 * 8]
 16157 0000C223 488B542418              	mov rdx, [rsp + 3 * 8]
 16158 0000C228 488D7204                	lea rsi, [rdx + 4]
 16159 0000C22C 4C8D4EFF                	lea r9, [rsi - 1]
 16160 0000C230 488D7903                	lea rdi, [rcx + 3]
 16161 0000C234 4D31C0                  	xor r8, r8
 16162                                  .L_tc_recycle_frame_loop_0083:
 16163 0000C237 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16164 0000C23B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16165 0000C240 49FFC9                  	dec r9
 16166 0000C243 4D31C0                  	xor r8, r8
 16167 0000C246 48FFCF                  	dec rdi
 16168 0000C249 48FFCE                  	dec rsi
 16169 0000C24C 4883FE00                	cmp rsi, 0
 16170 0000C250 75E5                    	jne .L_tc_recycle_frame_loop_0083
 16171                                  .L_tc_recycle_frame_done_0083:
 16172                                  ;this pop rbp in sot to the right place
 16173 0000C252 4989C9                  	mov r9, rcx
 16174 0000C255 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16175 0000C25D 4C01CC                  	add rsp, r9
 16176 0000C260 5D                      	pop rbp
 16177 0000C261 488B4D00                	mov rcx, qword [rbp]
 16178 0000C265 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16179 0000C269 FFE3                    	jmp rbx
 16180 0000C26B C9                      	leave
 16181 0000C26C C22000                  	ret 8 * (2 + 2)
 16182                                  .L_lambda_simple_end_0069:	; new closure is in rax
 16183 0000C26F 50                      	push rax
 16184 0000C270 6A01                    	push 1
 16185 0000C272 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16186 0000C277 E87C540000              	call malloc
 16187 0000C27C 50                      	push rax
 16188 0000C27D BF08000000              	mov rdi, 8 * 1	; new rib
 16189 0000C282 E871540000              	call malloc
 16190 0000C287 50                      	push rax
 16191 0000C288 BF18000000              	mov rdi, 8 * 3	; extended env
 16192 0000C28D E866540000              	call malloc
 16193 0000C292 488B7D10                	mov rdi, ENV
 16194 0000C296 BE00000000              	mov rsi, 0
 16195 0000C29B BA01000000              	mov rdx, 1
 16196                                  .L_lambda_simple_env_loop_006b:	; ext_env[i + 1] <-- env[i]
 16197 0000C2A0 4883FE02                	cmp rsi, 2
 16198 0000C2A4 7410                    	je .L_lambda_simple_env_end_006b
 16199 0000C2A6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16200 0000C2AA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16201 0000C2AE 48FFC6                  	inc rsi
 16202 0000C2B1 48FFC2                  	inc rdx
 16203 0000C2B4 EBEA                    	jmp .L_lambda_simple_env_loop_006b
 16204                                  .L_lambda_simple_env_end_006b:
 16205 0000C2B6 5B                      	pop rbx
 16206 0000C2B7 BE00000000              	mov rsi, 0
 16207                                  .L_lambda_simple_params_loop_006b:	; copy params
 16208 0000C2BC 4883FE01                	cmp rsi, 1
 16209 0000C2C0 740E                    	je .L_lambda_simple_params_end_006b
 16210 0000C2C2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16211 0000C2C7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16212 0000C2CB 48FFC6                  	inc rsi
 16213 0000C2CE EBEC                    	jmp .L_lambda_simple_params_loop_006b
 16214                                  .L_lambda_simple_params_end_006b:
 16215 0000C2D0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16216 0000C2D3 4889C3                  	mov rbx, rax
 16217 0000C2D6 58                      	pop rax
 16218 0000C2D7 C60005                  	mov byte [rax], T_closure
 16219 0000C2DA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16220 0000C2DE 48C74009[EBC20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006b
 16221 0000C2E6 E90F050000              	jmp .L_lambda_simple_end_006b
 16222                                  .L_lambda_simple_code_006b:	; lambda-simple body
 16223 0000C2EB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16224 0000C2F1 740B                    	je .L_lambda_simple_arity_check_ok_006b
 16225 0000C2F3 FF742410                	push qword [rsp + 8 * 2]
 16226 0000C2F7 6A01                    	push 1
 16227 0000C2F9 E9B3530000              	jmp L_error_incorrect_arity_simple
 16228                                  .L_lambda_simple_arity_check_ok_006b:
 16229 0000C2FE C8000000                	enter 0, 0
 16230 0000C302 48B8-                   	mov rax,L_constants + 23
 16230 0000C304 [1700000000000000] 
 16231 0000C30C 50                      	push rax
 16232 0000C30D 6A01                    	push 1
 16233 0000C30F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16234 0000C314 E8DF530000              	call malloc
 16235 0000C319 50                      	push rax
 16236 0000C31A BF08000000              	mov rdi, 8 * 1	; new rib
 16237 0000C31F E8D4530000              	call malloc
 16238 0000C324 50                      	push rax
 16239 0000C325 BF20000000              	mov rdi, 8 * 4	; extended env
 16240 0000C32A E8C9530000              	call malloc
 16241 0000C32F 488B7D10                	mov rdi, ENV
 16242 0000C333 BE00000000              	mov rsi, 0
 16243 0000C338 BA01000000              	mov rdx, 1
 16244                                  .L_lambda_simple_env_loop_006c:	; ext_env[i + 1] <-- env[i]
 16245 0000C33D 4883FE03                	cmp rsi, 3
 16246 0000C341 7410                    	je .L_lambda_simple_env_end_006c
 16247 0000C343 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16248 0000C347 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16249 0000C34B 48FFC6                  	inc rsi
 16250 0000C34E 48FFC2                  	inc rdx
 16251 0000C351 EBEA                    	jmp .L_lambda_simple_env_loop_006c
 16252                                  .L_lambda_simple_env_end_006c:
 16253 0000C353 5B                      	pop rbx
 16254 0000C354 BE00000000              	mov rsi, 0
 16255                                  .L_lambda_simple_params_loop_006c:	; copy params
 16256 0000C359 4883FE01                	cmp rsi, 1
 16257 0000C35D 740E                    	je .L_lambda_simple_params_end_006c
 16258 0000C35F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16259 0000C364 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16260 0000C368 48FFC6                  	inc rsi
 16261 0000C36B EBEC                    	jmp .L_lambda_simple_params_loop_006c
 16262                                  .L_lambda_simple_params_end_006c:
 16263 0000C36D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16264 0000C370 4889C3                  	mov rbx, rax
 16265 0000C373 58                      	pop rax
 16266 0000C374 C60005                  	mov byte [rax], T_closure
 16267 0000C377 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16268 0000C37B 48C74009[88C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006c
 16269 0000C383 E90E040000              	jmp .L_lambda_simple_end_006c
 16270                                  .L_lambda_simple_code_006c:	; lambda-simple body
 16271 0000C388 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16272 0000C38E 740B                    	je .L_lambda_simple_arity_check_ok_006c
 16273 0000C390 FF742410                	push qword [rsp + 8 * 2]
 16274 0000C394 6A01                    	push 1
 16275 0000C396 E916530000              	jmp L_error_incorrect_arity_simple
 16276                                  .L_lambda_simple_arity_check_ok_006c:
 16277 0000C39B C8000000                	enter 0, 0
 16278 0000C39F BF08000000              	mov rdi, 8
 16279 0000C3A4 E84F530000              	call malloc
 16280 0000C3A9 488B5D20                	mov rbx, PARAM(0)
 16281 0000C3AD 488918                  	mov qword [rax], rbx
 16282 0000C3B0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 16283                                  
 16284 0000C3B4 48B8-                            	mov rax, sob_void
 16284 0000C3B6 [0000000000000000] 
 16285                                  
 16286 0000C3BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16287 0000C3C3 E830530000              	call malloc
 16288 0000C3C8 50                      	push rax
 16289 0000C3C9 BF08000000              	mov rdi, 8 * 1	; new rib
 16290 0000C3CE E825530000              	call malloc
 16291 0000C3D3 50                      	push rax
 16292 0000C3D4 BF28000000              	mov rdi, 8 * 5	; extended env
 16293 0000C3D9 E81A530000              	call malloc
 16294 0000C3DE 488B7D10                	mov rdi, ENV
 16295 0000C3E2 BE00000000              	mov rsi, 0
 16296 0000C3E7 BA01000000              	mov rdx, 1
 16297                                  .L_lambda_simple_env_loop_006d:	; ext_env[i + 1] <-- env[i]
 16298 0000C3EC 4883FE04                	cmp rsi, 4
 16299 0000C3F0 7410                    	je .L_lambda_simple_env_end_006d
 16300 0000C3F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16301 0000C3F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16302 0000C3FA 48FFC6                  	inc rsi
 16303 0000C3FD 48FFC2                  	inc rdx
 16304 0000C400 EBEA                    	jmp .L_lambda_simple_env_loop_006d
 16305                                  .L_lambda_simple_env_end_006d:
 16306 0000C402 5B                      	pop rbx
 16307 0000C403 BE00000000              	mov rsi, 0
 16308                                  .L_lambda_simple_params_loop_006d:	; copy params
 16309 0000C408 4883FE01                	cmp rsi, 1
 16310 0000C40C 740E                    	je .L_lambda_simple_params_end_006d
 16311 0000C40E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16312 0000C413 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16313 0000C417 48FFC6                  	inc rsi
 16314 0000C41A EBEC                    	jmp .L_lambda_simple_params_loop_006d
 16315                                  .L_lambda_simple_params_end_006d:
 16316 0000C41C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16317 0000C41F 4889C3                  	mov rbx, rax
 16318 0000C422 58                      	pop rax
 16319 0000C423 C60005                  	mov byte [rax], T_closure
 16320 0000C426 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16321 0000C42A 48C74009[37C40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006d
 16322 0000C432 E94A010000              	jmp .L_lambda_simple_end_006d
 16323                                  .L_lambda_simple_code_006d:	; lambda-simple body
 16324 0000C437 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16325 0000C43D 740B                    	je .L_lambda_simple_arity_check_ok_006d
 16326 0000C43F FF742410                	push qword [rsp + 8 * 2]
 16327 0000C443 6A02                    	push 2
 16328 0000C445 E967520000              	jmp L_error_incorrect_arity_simple
 16329                                  .L_lambda_simple_arity_check_ok_006d:
 16330 0000C44A C8000000                	enter 0, 0
 16331 0000C44E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16332 0000C452 50                      	push rax
 16333 0000C453 6A01                    	push 1
 16334 0000C455 488B0425[00000000]      	mov rax, qword [free_var_0]
 16335                                  	assert_closure(rax)
    42 0000C45D 803805              <1>  cmp byte [%1], %2
    43 0000C460 0F85866A0000        <1>  jne L_error_incorrect_type
 16336 0000C466 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16337 0000C469 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16338 0000C46C 483D[02000000]          	cmp rax, sob_boolean_false
 16339 0000C472 0F8505010000            	jne .L_or_end_0007
 16340 0000C478 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16341 0000C47C 50                      	push rax
 16342 0000C47D 6A01                    	push 1
 16343 0000C47F 488B0425[80000000]      	mov rax, qword [free_var_16]
 16344                                  	assert_closure(rax)
    42 0000C487 803805              <1>  cmp byte [%1], %2
    43 0000C48A 0F855C6A0000        <1>  jne L_error_incorrect_type
 16345 0000C490 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16346 0000C493 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16347 0000C496 50                      	push rax
 16348 0000C497 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16349 0000C49B 50                      	push rax
 16350 0000C49C 6A02                    	push 2
 16351 0000C49E 488B4510                	mov rax, qword [rbp + 8 * 2]
 16352                                  
 16353 0000C4A2 488B4008                                          	mov rax, qword[rax + 8 * 1]
 16354                                  
 16355 0000C4A6 488B00                                            	mov rax, qword[rax + 8 * 0]
 16356                                  	assert_closure(rax)
    42 0000C4A9 803805              <1>  cmp byte [%1], %2
    43 0000C4AC 0F853A6A0000        <1>  jne L_error_incorrect_type
 16357 0000C4B2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16358 0000C4B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16359                                  
 16360 0000C4B8 483D[02000000]                  	cmp rax, sob_boolean_false
 16361                                  
 16362 0000C4BE 0F84AF000000                    	je .L_if_else_003e
 16363 0000C4C4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16364 0000C4C8 50                      	push rax
 16365 0000C4C9 6A01                    	push 1
 16366 0000C4CB 488B0425[88000000]      	mov rax, qword [free_var_17]
 16367                                  	assert_closure(rax)
    42 0000C4D3 803805              <1>  cmp byte [%1], %2
    43 0000C4D6 0F85106A0000        <1>  jne L_error_incorrect_type
 16368 0000C4DC FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16369 0000C4DF FF5009                  	call SOB_CLOSURE_CODE(rax)
 16370 0000C4E2 50                      	push rax
 16371 0000C4E3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16372 0000C4E7 50                      	push rax
 16373 0000C4E8 6A01                    	push 1
 16374 0000C4EA 488B0425[80000000]      	mov rax, qword [free_var_16]
 16375                                  	assert_closure(rax)
    42 0000C4F2 803805              <1>  cmp byte [%1], %2
    43 0000C4F5 0F85F1690000        <1>  jne L_error_incorrect_type
 16376 0000C4FB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16377 0000C4FE FF5009                  	call SOB_CLOSURE_CODE(rax)
 16378 0000C501 50                      	push rax
 16379 0000C502 6A02                    	push 2
 16380 0000C504 488B4510                	mov rax, qword [rbp + 8 * 2]
 16381                                  
 16382 0000C508 488B00                                            	mov rax, qword[rax + 8 * 0]
 16383                                  
 16384 0000C50B 488B00                                            	mov rax, qword[rax + 8 * 0]
 16385 0000C50E 488B00                  	mov rax, qword [rax]
 16386                                  .L_applic_TC_0084:
 16387 0000C511 803805                  	cmp byte [rax], T_closure
 16388 0000C514 0F8593610000            	jne L_code_ptr_error
 16389 0000C51A 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16390 0000C51E 53                      	push rbx
 16391 0000C51F FF7508                  	push qword [rbp + 8]
 16392 0000C522 FF7500                  	push qword [rbp]
 16393 0000C525 488B4D18                	mov rcx, [rbp + 3 * 8]
 16394 0000C529 488B542418              	mov rdx, [rsp + 3 * 8]
 16395 0000C52E 488D7204                	lea rsi, [rdx + 4]
 16396 0000C532 4C8D4EFF                	lea r9, [rsi - 1]
 16397 0000C536 488D7903                	lea rdi, [rcx + 3]
 16398 0000C53A 4D31C0                  	xor r8, r8
 16399                                  .L_tc_recycle_frame_loop_0084:
 16400 0000C53D 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16401 0000C541 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16402 0000C546 49FFC9                  	dec r9
 16403 0000C549 4D31C0                  	xor r8, r8
 16404 0000C54C 48FFCF                  	dec rdi
 16405 0000C54F 48FFCE                  	dec rsi
 16406 0000C552 4883FE00                	cmp rsi, 0
 16407 0000C556 75E5                    	jne .L_tc_recycle_frame_loop_0084
 16408                                  .L_tc_recycle_frame_done_0084:
 16409                                  ;this pop rbp in sot to the right place
 16410 0000C558 4989C9                  	mov r9, rcx
 16411 0000C55B 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16412 0000C563 4C01CC                  	add rsp, r9
 16413 0000C566 5D                      	pop rbp
 16414 0000C567 488B4D00                	mov rcx, qword [rbp]
 16415 0000C56B 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16416 0000C56F FFE3                    	jmp rbx
 16417                                  
 16418 0000C571 EB0A                            	jmp .L_if_end_003e
 16419                                  
 16420                                          	.L_if_else_003e:
 16421 0000C573 48B8-                   	mov rax,L_constants + 2
 16421 0000C575 [0200000000000000] 
 16422                                  
 16423                                          	.L_if_end_003e:
 16424                                  .L_or_end_0007:
 16425 0000C57D C9                      	leave
 16426 0000C57E C22000                  	ret 8 * (2 + 2)
 16427                                  .L_lambda_simple_end_006d:	; new closure is in rax
 16428 0000C581 50                      	push rax
 16429 0000C582 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16430 0000C586 8F00                    	pop qword [rax]
 16431 0000C588 48B8-                   	mov rax, sob_void
 16431 0000C58A [0000000000000000] 
 16432                                  
 16433 0000C592 BF11000000              	mov rdi, (1 + 8 + 8)
 16434 0000C597 E85C510000              	call malloc
 16435 0000C59C 50                      	push rax
 16436 0000C59D BF08000000              	mov rdi, 8 * 1
 16437 0000C5A2 E851510000              	call malloc
 16438 0000C5A7 50                      	push rax
 16439 0000C5A8 BF28000000              	mov rdi, 8 * 5
 16440 0000C5AD E846510000              	call malloc
 16441 0000C5B2 488B7D10                	mov rdi, ENV
 16442 0000C5B6 4831F6                  	xor rsi, rsi
 16443 0000C5B9 4831D2                  	xor rdx, rdx
 16444 0000C5BC 48FFC2                  	inc rdx
 16445                                  	.L_lambda_opt_env_loop_0012:
 16446                                  
 16447 0000C5BF 4883FE04                        	cmp rsi, 4
 16448                                  
 16449 0000C5C3 7412                            	je .L_lambda_opt_env_end_0012
 16450 0000C5C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16451 0000C5C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16452 0000C5CD 4883C201                	add rdx, 1
 16453 0000C5D1 4883C601                	add rsi, 1
 16454 0000C5D5 EBE8                    	jmp .L_lambda_opt_env_loop_0012
 16455                                  
 16456                                          	.L_lambda_opt_env_end_0012:
 16457 0000C5D7 5B                      	pop rbx
 16458 0000C5D8 4831F6                  	xor rsi, rsi
 16459                                  	.L_lambda_opt_params_loop_0012:
 16460                                  
 16461 0000C5DB 4883FE01                        	cmp rsi, 1
 16462                                  
 16463 0000C5DF 740F                            	je .L_lambda_opt_params_end_0012
 16464 0000C5E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16465 0000C5E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16466 0000C5EA 4883C601                	add rsi, 1
 16467 0000C5EE EBEB                    	jmp .L_lambda_opt_params_loop_0012
 16468                                  
 16469                                          	.L_lambda_opt_params_end_0012:
 16470 0000C5F0 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 16471 0000C5F3 4889C3                  	mov rbx, rax
 16472 0000C5F6 58                      	pop rax
 16473 0000C5F7 C60005                  	mov byte [rax], T_closure
 16474 0000C5FA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16475 0000C5FE 48C74009[0BC60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0012
 16476                                  
 16477 0000C606 E987010000                      	jmp .L_lambda_opt_end_0012
 16478                                  
 16479                                          	.L_lambda_opt_code_0012:
 16480                                  
 16481 0000C60B 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 16482                                  
 16483 0000C611 740D                            	je .L_lambda_opt_arity_check_exact_0012  ;same num_of_args
 16484                                  
 16485 0000C613 7F65                            	jg .L_lambda_opt_arity_check_more_0012  ;greater num_of_args
 16486 0000C615 FF742410                	push qword [rsp + 8 * 2]
 16487 0000C619 6A01                    	push 1
 16488 0000C61B E9A5500000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 16489                                  .L_lambda_opt_arity_check_exact_0012:
 16490 0000C620 4883EC08                	sub rsp, 8 * 1
 16491 0000C624 488D7F10                	lea rdi, [rdi + (8 * 2)]
 16492 0000C628 4889E7                  	mov rdi, rsp 
 16493 0000C62B 488B4708                	mov rax, qword [rdi + 8]
 16494 0000C62F 488907                  	mov qword [rdi], rax
 16495 0000C632 488D7F08                	lea rdi, [rdi + 8]
 16496 0000C636 488B4708                	mov rax, qword [rdi + 8]
 16497 0000C63A 488907                  	mov qword [rdi], rax
 16498 0000C63D 488D7F08                	lea rdi, [rdi + 8]
 16499 0000C641 488B4708                	mov rax, qword [rdi + 8]
 16500 0000C645 4889C1                  	mov rcx, rax
 16501 0000C648 4883C001                	add rax, 1
 16502 0000C64C 488907                  	mov qword [rdi], rax
 16503 0000C64F 488D7F08                	lea rdi, [rdi + 8]
 16504                                  	.L_lambda_opt_stack_shrink_loop_0034:
 16505 0000C653 4883F900                	cmp rcx, 0
 16506 0000C657 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0034
 16507 0000C659 4883E901                	sub rcx, 1
 16508 0000C65D 488D4010                	lea rax, [rax + (8 * 2)]
 16509 0000C661 488B4708                	mov rax, qword [rdi + 8]
 16510 0000C665 488907                  	mov qword [rdi], rax
 16511 0000C668 488D7F08                	lea rdi, [rdi + 8]
 16512 0000C66C EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0034
 16513                                  
 16514                                          	.L_lambda_opt_stack_shrink_loop_exit_0034:
 16515 0000C66E 48C707[01000000]        	mov qword [rdi], sob_nil
 16516 0000C675 E997000000              	jmp .L_lambda_opt_stack_adjusted_0012
 16517                                  
 16518                                          	.L_lambda_opt_arity_check_more_0012:
 16519 0000C67A 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 16520 0000C67F 488D4EFF                	lea rcx, [rsi - 1]
 16521 0000C683 49B8-                   	mov r8, sob_nil
 16521 0000C685 [0100000000000000] 
 16522 0000C68D 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 16523 0000C692 4889F2                  	mov rdx, rsi
 16524                                  	.L_lambda_opt_stack_shrink_loop_0035:
 16525 0000C695 4883F900                	cmp rcx, 0
 16526 0000C699 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0035
 16527 0000C69B BF11000000              	mov rdi, 1 + (8 * 2)
 16528 0000C6A0 E853500000              	call malloc
 16529 0000C6A5 C60021                  	mov byte [rax], T_pair
 16530 0000C6A8 488B1E                  	mov rbx, qword [rsi]
 16531 0000C6AB 48895801                	mov SOB_PAIR_CAR(rax), rbx
 16532 0000C6AF 4C894009                	mov SOB_PAIR_CDR(rax), r8
 16533 0000C6B3 4883C6F8                	add rsi, -8
 16534 0000C6B7 4883E901                	sub rcx, 1
 16535 0000C6BB 4989C0                  	mov r8, rax
 16536 0000C6BE EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0035
 16537                                  
 16538                                          	.L_lambda_opt_stack_shrink_loop_exit_0035:
 16539 0000C6C0 4C8902                  	mov qword [rdx], r8
 16540 0000C6C3 4883EA08                	sub rdx, 8 * 1
 16541 0000C6C7 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 16542                                  
 16543 0000C6CC B901000000                      	mov rcx, 1 
 16544                                  
 16545                                          	.L_lambda_opt_stack_shrink_loop_0036:
 16546 0000C6D1 4883F900                	cmp rcx, 0
 16547 0000C6D5 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0036
 16548 0000C6D7 488B06                  	mov rax, qword [rsi]
 16549 0000C6DA 488902                  	mov qword [rdx], rax
 16550 0000C6DD 488D76F8                	lea rsi, [rsi - 8]
 16551 0000C6E1 4883C2F8                	add rdx, -8
 16552 0000C6E5 4883C1FF                	add rcx, -1
 16553 0000C6E9 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0036
 16554                                  
 16555                                          	.L_lambda_opt_stack_shrink_loop_exit_0036:
 16556                                  
 16557 0000C6EB 48C70202000000                  	mov qword [rdx], 1 + 1
 16558 0000C6F2 4883C6F8                	add rsi, -8
 16559 0000C6F6 4883C2F8                	add rdx, -8
 16560 0000C6FA 488B06                  	mov rax, qword [rsi]
 16561 0000C6FD 488902                  	mov qword [rdx], rax
 16562 0000C700 4883C2F8                	add rdx, -8
 16563 0000C704 488D76F8                	lea rsi, [rsi - 8]
 16564 0000C708 488B06                  	mov rax, qword [rsi]
 16565 0000C70B 488902                  	mov qword [rdx], rax
 16566 0000C70E 4889D4                  	mov rsp, rdx
 16567                                  	.L_lambda_opt_stack_adjusted_0012:
 16568 0000C711 C8000000                	enter 0, 0
 16569 0000C715 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16570 0000C719 50                      	push rax
 16571 0000C71A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16572 0000C71E 50                      	push rax
 16573 0000C71F 6A02                    	push 2
 16574 0000C721 488B4510                	mov rax, qword [rbp + 8 * 2]
 16575                                  
 16576 0000C725 488B00                                            	mov rax, qword[rax + 8 * 0]
 16577                                  
 16578 0000C728 488B00                                            	mov rax, qword[rax + 8 * 0]
 16579 0000C72B 488B00                  	mov rax, qword [rax]
 16580                                  .L_applic_TC_0085:
 16581 0000C72E 803805                  	cmp byte [rax], T_closure
 16582 0000C731 0F85765F0000            	jne L_code_ptr_error
 16583 0000C737 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16584 0000C73B 53                      	push rbx
 16585 0000C73C FF7508                  	push qword [rbp + 8]
 16586 0000C73F FF7500                  	push qword [rbp]
 16587 0000C742 488B4D18                	mov rcx, [rbp + 3 * 8]
 16588 0000C746 488B542418              	mov rdx, [rsp + 3 * 8]
 16589 0000C74B 488D7204                	lea rsi, [rdx + 4]
 16590 0000C74F 4C8D4EFF                	lea r9, [rsi - 1]
 16591 0000C753 488D7903                	lea rdi, [rcx + 3]
 16592 0000C757 4D31C0                  	xor r8, r8
 16593                                  .L_tc_recycle_frame_loop_0085:
 16594 0000C75A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16595 0000C75E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16596 0000C763 49FFC9                  	dec r9
 16597 0000C766 4D31C0                  	xor r8, r8
 16598 0000C769 48FFCF                  	dec rdi
 16599 0000C76C 48FFCE                  	dec rsi
 16600 0000C76F 4883FE00                	cmp rsi, 0
 16601 0000C773 75E5                    	jne .L_tc_recycle_frame_loop_0085
 16602                                  .L_tc_recycle_frame_done_0085:
 16603                                  ;this pop rbp in sot to the right place
 16604 0000C775 4989C9                  	mov r9, rcx
 16605 0000C778 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16606 0000C780 4C01CC                  	add rsp, r9
 16607 0000C783 5D                      	pop rbp
 16608 0000C784 488B4D00                	mov rcx, qword [rbp]
 16609 0000C788 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16610 0000C78C FFE3                    	jmp rbx
 16611 0000C78E C9                      	leave
 16612 0000C78F C22000                  	ret 8 * (2 + 2)
 16613                                  .L_lambda_opt_end_0012:	; new closure is in rax
 16614 0000C792 C9                      	leave
 16615 0000C793 C21800                  	ret 8 * (2 + 1)
 16616                                  .L_lambda_simple_end_006c:	; new closure is in rax
 16617                                  .L_applic_TC_0086:
 16618 0000C796 803805                  	cmp byte [rax], T_closure
 16619 0000C799 0F850E5F0000            	jne L_code_ptr_error
 16620 0000C79F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16621 0000C7A3 53                      	push rbx
 16622 0000C7A4 FF7508                  	push qword [rbp + 8]
 16623 0000C7A7 FF7500                  	push qword [rbp]
 16624 0000C7AA 488B4D18                	mov rcx, [rbp + 3 * 8]
 16625 0000C7AE 488B542418              	mov rdx, [rsp + 3 * 8]
 16626 0000C7B3 488D7204                	lea rsi, [rdx + 4]
 16627 0000C7B7 4C8D4EFF                	lea r9, [rsi - 1]
 16628 0000C7BB 488D7903                	lea rdi, [rcx + 3]
 16629 0000C7BF 4D31C0                  	xor r8, r8
 16630                                  .L_tc_recycle_frame_loop_0086:
 16631 0000C7C2 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16632 0000C7C6 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16633 0000C7CB 49FFC9                  	dec r9
 16634 0000C7CE 4D31C0                  	xor r8, r8
 16635 0000C7D1 48FFCF                  	dec rdi
 16636 0000C7D4 48FFCE                  	dec rsi
 16637 0000C7D7 4883FE00                	cmp rsi, 0
 16638 0000C7DB 75E5                    	jne .L_tc_recycle_frame_loop_0086
 16639                                  .L_tc_recycle_frame_done_0086:
 16640                                  ;this pop rbp in sot to the right place
 16641 0000C7DD 4989C9                  	mov r9, rcx
 16642 0000C7E0 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16643 0000C7E8 4C01CC                  	add rsp, r9
 16644 0000C7EB 5D                      	pop rbp
 16645 0000C7EC 488B4D00                	mov rcx, qword [rbp]
 16646 0000C7F0 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16647 0000C7F4 FFE3                    	jmp rbx
 16648 0000C7F6 C9                      	leave
 16649 0000C7F7 C21800                  	ret 8 * (2 + 1)
 16650                                  .L_lambda_simple_end_006b:	; new closure is in rax
 16651                                  .L_applic_TC_0087:
 16652 0000C7FA 803805                  	cmp byte [rax], T_closure
 16653 0000C7FD 0F85AA5E0000            	jne L_code_ptr_error
 16654 0000C803 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16655 0000C807 53                      	push rbx
 16656 0000C808 FF7508                  	push qword [rbp + 8]
 16657 0000C80B FF7500                  	push qword [rbp]
 16658 0000C80E 488B4D18                	mov rcx, [rbp + 3 * 8]
 16659 0000C812 488B542418              	mov rdx, [rsp + 3 * 8]
 16660 0000C817 488D7204                	lea rsi, [rdx + 4]
 16661 0000C81B 4C8D4EFF                	lea r9, [rsi - 1]
 16662 0000C81F 488D7903                	lea rdi, [rcx + 3]
 16663 0000C823 4D31C0                  	xor r8, r8
 16664                                  .L_tc_recycle_frame_loop_0087:
 16665 0000C826 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16666 0000C82A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16667 0000C82F 49FFC9                  	dec r9
 16668 0000C832 4D31C0                  	xor r8, r8
 16669 0000C835 48FFCF                  	dec rdi
 16670 0000C838 48FFCE                  	dec rsi
 16671 0000C83B 4883FE00                	cmp rsi, 0
 16672 0000C83F 75E5                    	jne .L_tc_recycle_frame_loop_0087
 16673                                  .L_tc_recycle_frame_done_0087:
 16674                                  ;this pop rbp in sot to the right place
 16675 0000C841 4989C9                  	mov r9, rcx
 16676 0000C844 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16677 0000C84C 4C01CC                  	add rsp, r9
 16678 0000C84F 5D                      	pop rbp
 16679 0000C850 488B4D00                	mov rcx, qword [rbp]
 16680 0000C854 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16681 0000C858 FFE3                    	jmp rbx
 16682 0000C85A C9                      	leave
 16683 0000C85B C21800                  	ret 8 * (2 + 1)
 16684                                  .L_lambda_simple_end_0067:	; new closure is in rax
 16685                                  .L_applic_TC_0088:
 16686 0000C85E 803805                  	cmp byte [rax], T_closure
 16687 0000C861 0F85465E0000            	jne L_code_ptr_error
 16688 0000C867 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 16689 0000C86B 53                      	push rbx
 16690 0000C86C FF7508                  	push qword [rbp + 8]
 16691 0000C86F FF7500                  	push qword [rbp]
 16692 0000C872 488B4D18                	mov rcx, [rbp + 3 * 8]
 16693 0000C876 488B542418              	mov rdx, [rsp + 3 * 8]
 16694 0000C87B 488D7204                	lea rsi, [rdx + 4]
 16695 0000C87F 4C8D4EFF                	lea r9, [rsi - 1]
 16696 0000C883 488D7903                	lea rdi, [rcx + 3]
 16697 0000C887 4D31C0                  	xor r8, r8
 16698                                  .L_tc_recycle_frame_loop_0088:
 16699 0000C88A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 16700 0000C88E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 16701 0000C893 49FFC9                  	dec r9
 16702 0000C896 4D31C0                  	xor r8, r8
 16703 0000C899 48FFCF                  	dec rdi
 16704 0000C89C 48FFCE                  	dec rsi
 16705 0000C89F 4883FE00                	cmp rsi, 0
 16706 0000C8A3 75E5                    	jne .L_tc_recycle_frame_loop_0088
 16707                                  .L_tc_recycle_frame_done_0088:
 16708                                  ;this pop rbp in sot to the right place
 16709 0000C8A5 4989C9                  	mov r9, rcx
 16710 0000C8A8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 16711 0000C8B0 4C01CC                  	add rsp, r9
 16712 0000C8B3 5D                      	pop rbp
 16713 0000C8B4 488B4D00                	mov rcx, qword [rbp]
 16714 0000C8B8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 16715 0000C8BC FFE3                    	jmp rbx
 16716 0000C8BE C9                      	leave
 16717 0000C8BF C22000                  	ret 8 * (2 + 2)
 16718                                  .L_lambda_simple_end_0066:	; new closure is in rax
 16719 0000C8C2 50                      	push rax
 16720 0000C8C3 6A01                    	push 1
 16721 0000C8C5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16722 0000C8CA E8294E0000              	call malloc
 16723 0000C8CF 50                      	push rax
 16724 0000C8D0 BF00000000              	mov rdi, 8 * 0	; new rib
 16725 0000C8D5 E81E4E0000              	call malloc
 16726 0000C8DA 50                      	push rax
 16727 0000C8DB BF08000000              	mov rdi, 8 * 1	; extended env
 16728 0000C8E0 E8134E0000              	call malloc
 16729 0000C8E5 488B7D10                	mov rdi, ENV
 16730 0000C8E9 BE00000000              	mov rsi, 0
 16731 0000C8EE BA01000000              	mov rdx, 1
 16732                                  .L_lambda_simple_env_loop_006e:	; ext_env[i + 1] <-- env[i]
 16733 0000C8F3 4883FE00                	cmp rsi, 0
 16734 0000C8F7 7410                    	je .L_lambda_simple_env_end_006e
 16735 0000C8F9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16736 0000C8FD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16737 0000C901 48FFC6                  	inc rsi
 16738 0000C904 48FFC2                  	inc rdx
 16739 0000C907 EBEA                    	jmp .L_lambda_simple_env_loop_006e
 16740                                  .L_lambda_simple_env_end_006e:
 16741 0000C909 5B                      	pop rbx
 16742 0000C90A BE00000000              	mov rsi, 0
 16743                                  .L_lambda_simple_params_loop_006e:	; copy params
 16744 0000C90F 4883FE00                	cmp rsi, 0
 16745 0000C913 740E                    	je .L_lambda_simple_params_end_006e
 16746 0000C915 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16747 0000C91A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16748 0000C91E 48FFC6                  	inc rsi
 16749 0000C921 EBEC                    	jmp .L_lambda_simple_params_loop_006e
 16750                                  .L_lambda_simple_params_end_006e:
 16751 0000C923 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16752 0000C926 4889C3                  	mov rbx, rax
 16753 0000C929 58                      	pop rax
 16754 0000C92A C60005                  	mov byte [rax], T_closure
 16755 0000C92D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16756 0000C931 48C74009[3EC90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006e
 16757 0000C939 E9FF000000              	jmp .L_lambda_simple_end_006e
 16758                                  .L_lambda_simple_code_006e:	; lambda-simple body
 16759 0000C93E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16760 0000C944 740B                    	je .L_lambda_simple_arity_check_ok_006e
 16761 0000C946 FF742410                	push qword [rsp + 8 * 2]
 16762 0000C94A 6A01                    	push 1
 16763 0000C94C E9604D0000              	jmp L_error_incorrect_arity_simple
 16764                                  .L_lambda_simple_arity_check_ok_006e:
 16765 0000C951 C8000000                	enter 0, 0
 16766 0000C955 488B0425[70030000]      	mov rax, qword [free_var_110]
 16767 0000C95D 50                      	push rax
 16768 0000C95E 488B0425[60030000]      	mov rax, qword [free_var_108]
 16769 0000C966 50                      	push rax
 16770 0000C967 6A02                    	push 2
 16771 0000C969 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16772                                  	assert_closure(rax)
    42 0000C96D 803805              <1>  cmp byte [%1], %2
    43 0000C970 0F8576650000        <1>  jne L_error_incorrect_type
 16773 0000C976 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16774 0000C979 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16775 0000C97C 48890425[E0030000]      	mov qword [free_var_124], rax
 16776                                  
 16777 0000C984 48B8-                           	mov rax, sob_void
 16777 0000C986 [0000000000000000] 
 16778                                  
 16779 0000C98E 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16780 0000C996 50                      	push rax
 16781 0000C997 488B0425[98030000]      	mov rax, qword [free_var_115]
 16782 0000C99F 50                      	push rax
 16783 0000C9A0 6A02                    	push 2
 16784 0000C9A2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16785                                  	assert_closure(rax)
    42 0000C9A6 803805              <1>  cmp byte [%1], %2
    43 0000C9A9 0F853D650000        <1>  jne L_error_incorrect_type
 16786 0000C9AF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16787 0000C9B2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16788 0000C9B5 48890425[08040000]      	mov qword [free_var_129], rax
 16789                                  
 16790 0000C9BD 48B8-                           	mov rax, sob_void
 16790 0000C9BF [0000000000000000] 
 16791                                  
 16792 0000C9C7 488B0425[70030000]      	mov rax, qword [free_var_110]
 16793 0000C9CF 50                      	push rax
 16794 0000C9D0 488B0425[78030000]      	mov rax, qword [free_var_111]
 16795 0000C9D8 50                      	push rax
 16796 0000C9D9 6A02                    	push 2
 16797 0000C9DB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16798                                  	assert_closure(rax)
    42 0000C9DF 803805              <1>  cmp byte [%1], %2
    43 0000C9E2 0F8504650000        <1>  jne L_error_incorrect_type
 16799 0000C9E8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16800 0000C9EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 16801 0000C9EE 48890425[00040000]      	mov qword [free_var_128], rax
 16802                                  
 16803 0000C9F6 48B8-                           	mov rax, sob_void
 16803 0000C9F8 [0000000000000000] 
 16804                                  
 16805 0000CA00 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16806 0000CA08 50                      	push rax
 16807 0000CA09 488B0425[B0030000]      	mov rax, qword [free_var_118]
 16808 0000CA11 50                      	push rax
 16809 0000CA12 6A02                    	push 2
 16810 0000CA14 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16811                                  	assert_closure(rax)
    42 0000CA18 803805              <1>  cmp byte [%1], %2
    43 0000CA1B 0F85CB640000        <1>  jne L_error_incorrect_type
 16812 0000CA21 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16813 0000CA24 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16814 0000CA27 48890425[28040000]      	mov qword [free_var_133], rax
 16815                                  
 16816 0000CA2F 48B8-                           	mov rax, sob_void
 16816 0000CA31 [0000000000000000] 
 16817 0000CA39 C9                      	leave
 16818 0000CA3A C21800                  	ret 8 * (2 + 1)
 16819                                  .L_lambda_simple_end_006e:	; new closure is in rax
 16820                                  	assert_closure(rax)
    42 0000CA3D 803805              <1>  cmp byte [%1], %2
    43 0000CA40 0F85A6640000        <1>  jne L_error_incorrect_type
 16821 0000CA46 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16822 0000CA49 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16823                                  
 16824 0000CA4C 4889C7                  	mov rdi, rax
 16825 0000CA4F E8B54C0000              	call print_sexpr_if_not_void
 16826                                  
 16827 0000CA54 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16828 0000CA59 E89A4C0000              	call malloc
 16829 0000CA5E 50                      	push rax
 16830 0000CA5F BF00000000              	mov rdi, 8 * 0	; new rib
 16831 0000CA64 E88F4C0000              	call malloc
 16832 0000CA69 50                      	push rax
 16833 0000CA6A BF08000000              	mov rdi, 8 * 1	; extended env
 16834 0000CA6F E8844C0000              	call malloc
 16835 0000CA74 488B7D10                	mov rdi, ENV
 16836 0000CA78 BE00000000              	mov rsi, 0
 16837 0000CA7D BA01000000              	mov rdx, 1
 16838                                  .L_lambda_simple_env_loop_006f:	; ext_env[i + 1] <-- env[i]
 16839 0000CA82 4883FE00                	cmp rsi, 0
 16840 0000CA86 7410                    	je .L_lambda_simple_env_end_006f
 16841 0000CA88 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16842 0000CA8C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16843 0000CA90 48FFC6                  	inc rsi
 16844 0000CA93 48FFC2                  	inc rdx
 16845 0000CA96 EBEA                    	jmp .L_lambda_simple_env_loop_006f
 16846                                  .L_lambda_simple_env_end_006f:
 16847 0000CA98 5B                      	pop rbx
 16848 0000CA99 BE00000000              	mov rsi, 0
 16849                                  .L_lambda_simple_params_loop_006f:	; copy params
 16850 0000CA9E 4883FE00                	cmp rsi, 0
 16851 0000CAA2 740E                    	je .L_lambda_simple_params_end_006f
 16852 0000CAA4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16853 0000CAA9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16854 0000CAAD 48FFC6                  	inc rsi
 16855 0000CAB0 EBEC                    	jmp .L_lambda_simple_params_loop_006f
 16856                                  .L_lambda_simple_params_end_006f:
 16857 0000CAB2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16858 0000CAB5 4889C3                  	mov rbx, rax
 16859 0000CAB8 58                      	pop rax
 16860 0000CAB9 C60005                  	mov byte [rax], T_closure
 16861 0000CABC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16862 0000CAC0 48C74009[CDCA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_006f
 16863 0000CAC8 E9030D0000              	jmp .L_lambda_simple_end_006f
 16864                                  .L_lambda_simple_code_006f:	; lambda-simple body
 16865 0000CACD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 16866 0000CAD3 740B                    	je .L_lambda_simple_arity_check_ok_006f
 16867 0000CAD5 FF742410                	push qword [rsp + 8 * 2]
 16868 0000CAD9 6A02                    	push 2
 16869 0000CADB E9D14B0000              	jmp L_error_incorrect_arity_simple
 16870                                  .L_lambda_simple_arity_check_ok_006f:
 16871 0000CAE0 C8000000                	enter 0, 0
 16872 0000CAE4 48B8-                   	mov rax,L_constants + 23
 16872 0000CAE6 [1700000000000000] 
 16873 0000CAEE 50                      	push rax
 16874 0000CAEF 6A01                    	push 1
 16875 0000CAF1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16876 0000CAF6 E8FD4B0000              	call malloc
 16877 0000CAFB 50                      	push rax
 16878 0000CAFC BF10000000              	mov rdi, 8 * 2	; new rib
 16879 0000CB01 E8F24B0000              	call malloc
 16880 0000CB06 50                      	push rax
 16881 0000CB07 BF10000000              	mov rdi, 8 * 2	; extended env
 16882 0000CB0C E8E74B0000              	call malloc
 16883 0000CB11 488B7D10                	mov rdi, ENV
 16884 0000CB15 BE00000000              	mov rsi, 0
 16885 0000CB1A BA01000000              	mov rdx, 1
 16886                                  .L_lambda_simple_env_loop_0070:	; ext_env[i + 1] <-- env[i]
 16887 0000CB1F 4883FE01                	cmp rsi, 1
 16888 0000CB23 7410                    	je .L_lambda_simple_env_end_0070
 16889 0000CB25 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16890 0000CB29 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16891 0000CB2D 48FFC6                  	inc rsi
 16892 0000CB30 48FFC2                  	inc rdx
 16893 0000CB33 EBEA                    	jmp .L_lambda_simple_env_loop_0070
 16894                                  .L_lambda_simple_env_end_0070:
 16895 0000CB35 5B                      	pop rbx
 16896 0000CB36 BE00000000              	mov rsi, 0
 16897                                  .L_lambda_simple_params_loop_0070:	; copy params
 16898 0000CB3B 4883FE02                	cmp rsi, 2
 16899 0000CB3F 740E                    	je .L_lambda_simple_params_end_0070
 16900 0000CB41 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16901 0000CB46 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16902 0000CB4A 48FFC6                  	inc rsi
 16903 0000CB4D EBEC                    	jmp .L_lambda_simple_params_loop_0070
 16904                                  .L_lambda_simple_params_end_0070:
 16905 0000CB4F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16906 0000CB52 4889C3                  	mov rbx, rax
 16907 0000CB55 58                      	pop rax
 16908 0000CB56 C60005                  	mov byte [rax], T_closure
 16909 0000CB59 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16910 0000CB5D 48C74009[6ACB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0070
 16911 0000CB65 E9020C0000              	jmp .L_lambda_simple_end_0070
 16912                                  .L_lambda_simple_code_0070:	; lambda-simple body
 16913 0000CB6A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16914 0000CB70 740B                    	je .L_lambda_simple_arity_check_ok_0070
 16915 0000CB72 FF742410                	push qword [rsp + 8 * 2]
 16916 0000CB76 6A01                    	push 1
 16917 0000CB78 E9344B0000              	jmp L_error_incorrect_arity_simple
 16918                                  .L_lambda_simple_arity_check_ok_0070:
 16919 0000CB7D C8000000                	enter 0, 0
 16920 0000CB81 BF08000000              	mov rdi, 8
 16921 0000CB86 E86D4B0000              	call malloc
 16922 0000CB8B 488B5D20                	mov rbx, PARAM(0)
 16923 0000CB8F 488918                  	mov qword [rax], rbx
 16924 0000CB92 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 16925                                  
 16926 0000CB96 48B8-                            	mov rax, sob_void
 16926 0000CB98 [0000000000000000] 
 16927                                  
 16928 0000CBA0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16929 0000CBA5 E84E4B0000              	call malloc
 16930 0000CBAA 50                      	push rax
 16931 0000CBAB BF08000000              	mov rdi, 8 * 1	; new rib
 16932 0000CBB0 E8434B0000              	call malloc
 16933 0000CBB5 50                      	push rax
 16934 0000CBB6 BF18000000              	mov rdi, 8 * 3	; extended env
 16935 0000CBBB E8384B0000              	call malloc
 16936 0000CBC0 488B7D10                	mov rdi, ENV
 16937 0000CBC4 BE00000000              	mov rsi, 0
 16938 0000CBC9 BA01000000              	mov rdx, 1
 16939                                  .L_lambda_simple_env_loop_0071:	; ext_env[i + 1] <-- env[i]
 16940 0000CBCE 4883FE02                	cmp rsi, 2
 16941 0000CBD2 7410                    	je .L_lambda_simple_env_end_0071
 16942 0000CBD4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16943 0000CBD8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16944 0000CBDC 48FFC6                  	inc rsi
 16945 0000CBDF 48FFC2                  	inc rdx
 16946 0000CBE2 EBEA                    	jmp .L_lambda_simple_env_loop_0071
 16947                                  .L_lambda_simple_env_end_0071:
 16948 0000CBE4 5B                      	pop rbx
 16949 0000CBE5 BE00000000              	mov rsi, 0
 16950                                  .L_lambda_simple_params_loop_0071:	; copy params
 16951 0000CBEA 4883FE01                	cmp rsi, 1
 16952 0000CBEE 740E                    	je .L_lambda_simple_params_end_0071
 16953 0000CBF0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16954 0000CBF5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16955 0000CBF9 48FFC6                  	inc rsi
 16956 0000CBFC EBEC                    	jmp .L_lambda_simple_params_loop_0071
 16957                                  .L_lambda_simple_params_end_0071:
 16958 0000CBFE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16959 0000CC01 4889C3                  	mov rbx, rax
 16960 0000CC04 58                      	pop rax
 16961 0000CC05 C60005                  	mov byte [rax], T_closure
 16962 0000CC08 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16963 0000CC0C 48C74009[19CC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0071
 16964 0000CC14 E91F020000              	jmp .L_lambda_simple_end_0071
 16965                                  .L_lambda_simple_code_0071:	; lambda-simple body
 16966 0000CC19 48837C241005            	cmp qword [rsp + 8 * 2], 5
 16967 0000CC1F 740B                    	je .L_lambda_simple_arity_check_ok_0071
 16968 0000CC21 FF742410                	push qword [rsp + 8 * 2]
 16969 0000CC25 6A05                    	push 5
 16970 0000CC27 E9854A0000              	jmp L_error_incorrect_arity_simple
 16971                                  .L_lambda_simple_arity_check_ok_0071:
 16972 0000CC2C C8000000                	enter 0, 0
 16973 0000CC30 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 16974 0000CC34 50                      	push rax
 16975 0000CC35 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16976 0000CC39 50                      	push rax
 16977 0000CC3A 6A02                    	push 2
 16978 0000CC3C 488B0425[50030000]      	mov rax, qword [free_var_106]
 16979                                  	assert_closure(rax)
    42 0000CC44 803805              <1>  cmp byte [%1], %2
    43 0000CC47 0F859F620000        <1>  jne L_error_incorrect_type
 16980 0000CC4D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16981 0000CC50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16982 0000CC53 483D[02000000]          	cmp rax, sob_boolean_false
 16983 0000CC59 0F85D5010000            	jne .L_or_end_0008
 16984 0000CC5F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16985 0000CC63 50                      	push rax
 16986 0000CC64 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 16987 0000CC68 50                      	push rax
 16988 0000CC69 6A02                    	push 2
 16989 0000CC6B 488B0425[78010000]      	mov rax, qword [free_var_47]
 16990                                  	assert_closure(rax)
    42 0000CC73 803805              <1>  cmp byte [%1], %2
    43 0000CC76 0F8570620000        <1>  jne L_error_incorrect_type
 16991 0000CC7C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 16992 0000CC7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 16993 0000CC82 50                      	push rax
 16994 0000CC83 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 16995 0000CC87 50                      	push rax
 16996 0000CC88 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 16997 0000CC8C 50                      	push rax
 16998 0000CC8D 6A02                    	push 2
 16999 0000CC8F 488B0425[78010000]      	mov rax, qword [free_var_47]
 17000                                  	assert_closure(rax)
    42 0000CC97 803805              <1>  cmp byte [%1], %2
    43 0000CC9A 0F854C620000        <1>  jne L_error_incorrect_type
 17001 0000CCA0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17002 0000CCA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17003 0000CCA6 50                      	push rax
 17004 0000CCA7 6A02                    	push 2
 17005 0000CCA9 488B4510                	mov rax, qword [rbp + 8 * 2]
 17006                                  
 17007 0000CCAD 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17008                                  
 17009 0000CCB1 488B00                                            	mov rax, qword[rax + 8 * 0]
 17010                                  	assert_closure(rax)
    42 0000CCB4 803805              <1>  cmp byte [%1], %2
    43 0000CCB7 0F852F620000        <1>  jne L_error_incorrect_type
 17011 0000CCBD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17012 0000CCC0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17013 0000CCC3 483D[02000000]          	cmp rax, sob_boolean_false
 17014 0000CCC9 0F8565010000            	jne .L_or_end_0008
 17015 0000CCCF 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 17016 0000CCD3 50                      	push rax
 17017 0000CCD4 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17018 0000CCD8 50                      	push rax
 17019 0000CCD9 6A02                    	push 2
 17020 0000CCDB 488B0425[30030000]      	mov rax, qword [free_var_102]
 17021                                  	assert_closure(rax)
    42 0000CCE3 803805              <1>  cmp byte [%1], %2
    43 0000CCE6 0F8500620000        <1>  jne L_error_incorrect_type
 17022 0000CCEC FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17023 0000CCEF FF5009                  	call SOB_CLOSURE_CODE(rax)
 17024                                  
 17025 0000CCF2 483D[02000000]                  	cmp rax, sob_boolean_false
 17026                                  
 17027 0000CCF8 0F842C010000                    	je .L_if_else_003f
 17028 0000CCFE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17029 0000CD02 50                      	push rax
 17030 0000CD03 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 17031 0000CD07 50                      	push rax
 17032 0000CD08 6A02                    	push 2
 17033 0000CD0A 488B0425[78010000]      	mov rax, qword [free_var_47]
 17034                                  	assert_closure(rax)
    42 0000CD12 803805              <1>  cmp byte [%1], %2
    43 0000CD15 0F85D1610000        <1>  jne L_error_incorrect_type
 17035 0000CD1B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17036 0000CD1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 17037 0000CD21 50                      	push rax
 17038 0000CD22 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17039 0000CD26 50                      	push rax
 17040 0000CD27 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17041 0000CD2B 50                      	push rax
 17042 0000CD2C 6A02                    	push 2
 17043 0000CD2E 488B0425[78010000]      	mov rax, qword [free_var_47]
 17044                                  	assert_closure(rax)
    42 0000CD36 803805              <1>  cmp byte [%1], %2
    43 0000CD39 0F85AD610000        <1>  jne L_error_incorrect_type
 17045 0000CD3F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17046 0000CD42 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17047 0000CD45 50                      	push rax
 17048 0000CD46 6A02                    	push 2
 17049 0000CD48 488B4510                	mov rax, qword [rbp + 8 * 2]
 17050                                  
 17051 0000CD4C 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17052                                  
 17053 0000CD50 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17054                                  	assert_closure(rax)
    42 0000CD54 803805              <1>  cmp byte [%1], %2
    43 0000CD57 0F858F610000        <1>  jne L_error_incorrect_type
 17055 0000CD5D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17056 0000CD60 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17057                                  
 17058 0000CD63 483D[02000000]                  	cmp rax, sob_boolean_false
 17059                                  
 17060 0000CD69 0F84AF000000                    	je .L_if_else_0040
 17061 0000CD6F 488B4540                	mov rax ,qword[rbp + 8 * (4 + 4)]
 17062 0000CD73 50                      	push rax
 17063 0000CD74 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 17064 0000CD78 50                      	push rax
 17065 0000CD79 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 17066 0000CD7D 50                      	push rax
 17067 0000CD7E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17068 0000CD82 50                      	push rax
 17069 0000CD83 48B8-                   	mov rax,L_constants + 128
 17069 0000CD85 [8000000000000000] 
 17070 0000CD8D 50                      	push rax
 17071 0000CD8E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17072 0000CD92 50                      	push rax
 17073 0000CD93 6A02                    	push 2
 17074 0000CD95 488B0425[08030000]      	mov rax, qword [free_var_97]
 17075                                  	assert_closure(rax)
    42 0000CD9D 803805              <1>  cmp byte [%1], %2
    43 0000CDA0 0F8546610000        <1>  jne L_error_incorrect_type
 17076 0000CDA6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17077 0000CDA9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17078 0000CDAC 50                      	push rax
 17079 0000CDAD 6A05                    	push 5
 17080 0000CDAF 488B4510                	mov rax, qword [rbp + 8 * 2]
 17081                                  
 17082 0000CDB3 488B00                                            	mov rax, qword[rax + 8 * 0]
 17083                                  
 17084 0000CDB6 488B00                                            	mov rax, qword[rax + 8 * 0]
 17085 0000CDB9 488B00                  	mov rax, qword [rax]
 17086                                  .L_applic_TC_0089:
 17087 0000CDBC 803805                  	cmp byte [rax], T_closure
 17088 0000CDBF 0F85E8580000            	jne L_code_ptr_error
 17089 0000CDC5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17090 0000CDC9 53                      	push rbx
 17091 0000CDCA FF7508                  	push qword [rbp + 8]
 17092 0000CDCD FF7500                  	push qword [rbp]
 17093 0000CDD0 488B4D18                	mov rcx, [rbp + 3 * 8]
 17094 0000CDD4 488B542418              	mov rdx, [rsp + 3 * 8]
 17095 0000CDD9 488D7204                	lea rsi, [rdx + 4]
 17096 0000CDDD 4C8D4EFF                	lea r9, [rsi - 1]
 17097 0000CDE1 488D7903                	lea rdi, [rcx + 3]
 17098 0000CDE5 4D31C0                  	xor r8, r8
 17099                                  .L_tc_recycle_frame_loop_0089:
 17100 0000CDE8 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17101 0000CDEC 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17102 0000CDF1 49FFC9                  	dec r9
 17103 0000CDF4 4D31C0                  	xor r8, r8
 17104 0000CDF7 48FFCF                  	dec rdi
 17105 0000CDFA 48FFCE                  	dec rsi
 17106 0000CDFD 4883FE00                	cmp rsi, 0
 17107 0000CE01 75E5                    	jne .L_tc_recycle_frame_loop_0089
 17108                                  .L_tc_recycle_frame_done_0089:
 17109                                  ;this pop rbp in sot to the right place
 17110 0000CE03 4989C9                  	mov r9, rcx
 17111 0000CE06 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17112 0000CE0E 4C01CC                  	add rsp, r9
 17113 0000CE11 5D                      	pop rbp
 17114 0000CE12 488B4D00                	mov rcx, qword [rbp]
 17115 0000CE16 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17116 0000CE1A FFE3                    	jmp rbx
 17117                                  
 17118 0000CE1C EB0A                            	jmp .L_if_end_0040
 17119                                  
 17120                                          	.L_if_else_0040:
 17121 0000CE1E 48B8-                   	mov rax,L_constants + 2
 17121 0000CE20 [0200000000000000] 
 17122                                  
 17123                                          	.L_if_end_0040:
 17124                                  
 17125 0000CE28 EB0A                            	jmp .L_if_end_003f
 17126                                  
 17127                                          	.L_if_else_003f:
 17128 0000CE2A 48B8-                   	mov rax,L_constants + 2
 17128 0000CE2C [0200000000000000] 
 17129                                  
 17130                                          	.L_if_end_003f:
 17131                                  .L_or_end_0008:
 17132 0000CE34 C9                      	leave
 17133 0000CE35 C23800                  	ret 8 * (2 + 5)
 17134                                  .L_lambda_simple_end_0071:	; new closure is in rax
 17135 0000CE38 50                      	push rax
 17136 0000CE39 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17137 0000CE3D 8F00                    	pop qword [rax]
 17138 0000CE3F 48B8-                   	mov rax, sob_void
 17138 0000CE41 [0000000000000000] 
 17139                                  
 17140 0000CE49 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17141 0000CE4E E8A5480000              	call malloc
 17142 0000CE53 50                      	push rax
 17143 0000CE54 BF08000000              	mov rdi, 8 * 1	; new rib
 17144 0000CE59 E89A480000              	call malloc
 17145 0000CE5E 50                      	push rax
 17146 0000CE5F BF18000000              	mov rdi, 8 * 3	; extended env
 17147 0000CE64 E88F480000              	call malloc
 17148 0000CE69 488B7D10                	mov rdi, ENV
 17149 0000CE6D BE00000000              	mov rsi, 0
 17150 0000CE72 BA01000000              	mov rdx, 1
 17151                                  .L_lambda_simple_env_loop_0072:	; ext_env[i + 1] <-- env[i]
 17152 0000CE77 4883FE02                	cmp rsi, 2
 17153 0000CE7B 7410                    	je .L_lambda_simple_env_end_0072
 17154 0000CE7D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17155 0000CE81 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17156 0000CE85 48FFC6                  	inc rsi
 17157 0000CE88 48FFC2                  	inc rdx
 17158 0000CE8B EBEA                    	jmp .L_lambda_simple_env_loop_0072
 17159                                  .L_lambda_simple_env_end_0072:
 17160 0000CE8D 5B                      	pop rbx
 17161 0000CE8E BE00000000              	mov rsi, 0
 17162                                  .L_lambda_simple_params_loop_0072:	; copy params
 17163 0000CE93 4883FE01                	cmp rsi, 1
 17164 0000CE97 740E                    	je .L_lambda_simple_params_end_0072
 17165 0000CE99 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17166 0000CE9E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17167 0000CEA2 48FFC6                  	inc rsi
 17168 0000CEA5 EBEC                    	jmp .L_lambda_simple_params_loop_0072
 17169                                  .L_lambda_simple_params_end_0072:
 17170 0000CEA7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17171 0000CEAA 4889C3                  	mov rbx, rax
 17172 0000CEAD 58                      	pop rax
 17173 0000CEAE C60005                  	mov byte [rax], T_closure
 17174 0000CEB1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17175 0000CEB5 48C74009[C2CE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0072
 17176 0000CEBD E9BB020000              	jmp .L_lambda_simple_end_0072
 17177                                  .L_lambda_simple_code_0072:	; lambda-simple body
 17178 0000CEC2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17179 0000CEC8 740B                    	je .L_lambda_simple_arity_check_ok_0072
 17180 0000CECA FF742410                	push qword [rsp + 8 * 2]
 17181 0000CECE 6A02                    	push 2
 17182 0000CED0 E9DC470000              	jmp L_error_incorrect_arity_simple
 17183                                  .L_lambda_simple_arity_check_ok_0072:
 17184 0000CED5 C8000000                	enter 0, 0
 17185 0000CED9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17186 0000CEDD 50                      	push rax
 17187 0000CEDE 6A01                    	push 1
 17188 0000CEE0 488B0425[90000000]      	mov rax, qword [free_var_18]
 17189                                  	assert_closure(rax)
    42 0000CEE8 803805              <1>  cmp byte [%1], %2
    43 0000CEEB 0F85FB5F0000        <1>  jne L_error_incorrect_type
 17190 0000CEF1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17191 0000CEF4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17192 0000CEF7 50                      	push rax
 17193 0000CEF8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17194 0000CEFC 50                      	push rax
 17195 0000CEFD 6A01                    	push 1
 17196 0000CEFF 488B0425[90000000]      	mov rax, qword [free_var_18]
 17197                                  	assert_closure(rax)
    42 0000CF07 803805              <1>  cmp byte [%1], %2
    43 0000CF0A 0F85DC5F0000        <1>  jne L_error_incorrect_type
 17198 0000CF10 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17199 0000CF13 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17200 0000CF16 50                      	push rax
 17201 0000CF17 6A02                    	push 2
 17202 0000CF19 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17203 0000CF1E E8D5470000              	call malloc
 17204 0000CF23 50                      	push rax
 17205 0000CF24 BF10000000              	mov rdi, 8 * 2	; new rib
 17206 0000CF29 E8CA470000              	call malloc
 17207 0000CF2E 50                      	push rax
 17208 0000CF2F BF20000000              	mov rdi, 8 * 4	; extended env
 17209 0000CF34 E8BF470000              	call malloc
 17210 0000CF39 488B7D10                	mov rdi, ENV
 17211 0000CF3D BE00000000              	mov rsi, 0
 17212 0000CF42 BA01000000              	mov rdx, 1
 17213                                  .L_lambda_simple_env_loop_0073:	; ext_env[i + 1] <-- env[i]
 17214 0000CF47 4883FE03                	cmp rsi, 3
 17215 0000CF4B 7410                    	je .L_lambda_simple_env_end_0073
 17216 0000CF4D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17217 0000CF51 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17218 0000CF55 48FFC6                  	inc rsi
 17219 0000CF58 48FFC2                  	inc rdx
 17220 0000CF5B EBEA                    	jmp .L_lambda_simple_env_loop_0073
 17221                                  .L_lambda_simple_env_end_0073:
 17222 0000CF5D 5B                      	pop rbx
 17223 0000CF5E BE00000000              	mov rsi, 0
 17224                                  .L_lambda_simple_params_loop_0073:	; copy params
 17225 0000CF63 4883FE02                	cmp rsi, 2
 17226 0000CF67 740E                    	je .L_lambda_simple_params_end_0073
 17227 0000CF69 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17228 0000CF6E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17229 0000CF72 48FFC6                  	inc rsi
 17230 0000CF75 EBEC                    	jmp .L_lambda_simple_params_loop_0073
 17231                                  .L_lambda_simple_params_end_0073:
 17232 0000CF77 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17233 0000CF7A 4889C3                  	mov rbx, rax
 17234 0000CF7D 58                      	pop rax
 17235 0000CF7E C60005                  	mov byte [rax], T_closure
 17236 0000CF81 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17237 0000CF85 48C74009[92CF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0073
 17238 0000CF8D E987010000              	jmp .L_lambda_simple_end_0073
 17239                                  .L_lambda_simple_code_0073:	; lambda-simple body
 17240 0000CF92 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17241 0000CF98 740B                    	je .L_lambda_simple_arity_check_ok_0073
 17242 0000CF9A FF742410                	push qword [rsp + 8 * 2]
 17243 0000CF9E 6A02                    	push 2
 17244 0000CFA0 E90C470000              	jmp L_error_incorrect_arity_simple
 17245                                  .L_lambda_simple_arity_check_ok_0073:
 17246 0000CFA5 C8000000                	enter 0, 0
 17247 0000CFA9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17248 0000CFAD 50                      	push rax
 17249 0000CFAE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17250 0000CFB2 50                      	push rax
 17251 0000CFB3 6A02                    	push 2
 17252 0000CFB5 488B0425[38030000]      	mov rax, qword [free_var_103]
 17253                                  	assert_closure(rax)
    42 0000CFBD 803805              <1>  cmp byte [%1], %2
    43 0000CFC0 0F85265F0000        <1>  jne L_error_incorrect_type
 17254 0000CFC6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17255 0000CFC9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17256                                  
 17257 0000CFCC 483D[02000000]                  	cmp rax, sob_boolean_false
 17258                                  
 17259 0000CFD2 0F84A1000000                    	je .L_if_else_0041
 17260 0000CFD8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17261 0000CFDC 50                      	push rax
 17262 0000CFDD 488B4510                	mov rax, qword [rbp + 8 * 2]
 17263                                  
 17264 0000CFE1 488B00                                            	mov rax, qword[rax + 8 * 0]
 17265                                  
 17266 0000CFE4 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17267 0000CFE8 50                      	push rax
 17268 0000CFE9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17269 0000CFED 50                      	push rax
 17270 0000CFEE 488B4510                	mov rax, qword [rbp + 8 * 2]
 17271                                  
 17272 0000CFF2 488B00                                            	mov rax, qword[rax + 8 * 0]
 17273                                  
 17274 0000CFF5 488B00                                            	mov rax, qword[rax + 8 * 0]
 17275 0000CFF8 50                      	push rax
 17276 0000CFF9 48B8-                   	mov rax,L_constants + 32
 17276 0000CFFB [2000000000000000] 
 17277 0000D003 50                      	push rax
 17278 0000D004 6A05                    	push 5
 17279 0000D006 488B4510                	mov rax, qword [rbp + 8 * 2]
 17280                                  
 17281 0000D00A 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17282                                  
 17283 0000D00E 488B00                                            	mov rax, qword[rax + 8 * 0]
 17284 0000D011 488B00                  	mov rax, qword [rax]
 17285                                  .L_applic_TC_008b:
 17286 0000D014 803805                  	cmp byte [rax], T_closure
 17287 0000D017 0F8590560000            	jne L_code_ptr_error
 17288 0000D01D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17289 0000D021 53                      	push rbx
 17290 0000D022 FF7508                  	push qword [rbp + 8]
 17291 0000D025 FF7500                  	push qword [rbp]
 17292 0000D028 488B4D18                	mov rcx, [rbp + 3 * 8]
 17293 0000D02C 488B542418              	mov rdx, [rsp + 3 * 8]
 17294 0000D031 488D7204                	lea rsi, [rdx + 4]
 17295 0000D035 4C8D4EFF                	lea r9, [rsi - 1]
 17296 0000D039 488D7903                	lea rdi, [rcx + 3]
 17297 0000D03D 4D31C0                  	xor r8, r8
 17298                                  .L_tc_recycle_frame_loop_008b:
 17299 0000D040 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17300 0000D044 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17301 0000D049 49FFC9                  	dec r9
 17302 0000D04C 4D31C0                  	xor r8, r8
 17303 0000D04F 48FFCF                  	dec rdi
 17304 0000D052 48FFCE                  	dec rsi
 17305 0000D055 4883FE00                	cmp rsi, 0
 17306 0000D059 75E5                    	jne .L_tc_recycle_frame_loop_008b
 17307                                  .L_tc_recycle_frame_done_008b:
 17308                                  ;this pop rbp in sot to the right place
 17309 0000D05B 4989C9                  	mov r9, rcx
 17310 0000D05E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17311 0000D066 4C01CC                  	add rsp, r9
 17312 0000D069 5D                      	pop rbp
 17313 0000D06A 488B4D00                	mov rcx, qword [rbp]
 17314 0000D06E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17315 0000D072 FFE3                    	jmp rbx
 17316                                  
 17317 0000D074 E99C000000                      	jmp .L_if_end_0041
 17318                                  
 17319                                          	.L_if_else_0041:
 17320 0000D079 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17321 0000D07D 50                      	push rax
 17322 0000D07E 488B4510                	mov rax, qword [rbp + 8 * 2]
 17323                                  
 17324 0000D082 488B00                                            	mov rax, qword[rax + 8 * 0]
 17325                                  
 17326 0000D085 488B00                                            	mov rax, qword[rax + 8 * 0]
 17327 0000D088 50                      	push rax
 17328 0000D089 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17329 0000D08D 50                      	push rax
 17330 0000D08E 488B4510                	mov rax, qword [rbp + 8 * 2]
 17331                                  
 17332 0000D092 488B00                                            	mov rax, qword[rax + 8 * 0]
 17333                                  
 17334 0000D095 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17335 0000D099 50                      	push rax
 17336 0000D09A 48B8-                   	mov rax,L_constants + 32
 17336 0000D09C [2000000000000000] 
 17337 0000D0A4 50                      	push rax
 17338 0000D0A5 6A05                    	push 5
 17339 0000D0A7 488B4510                	mov rax, qword [rbp + 8 * 2]
 17340                                  
 17341 0000D0AB 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17342                                  
 17343 0000D0AF 488B00                                            	mov rax, qword[rax + 8 * 0]
 17344 0000D0B2 488B00                  	mov rax, qword [rax]
 17345                                  .L_applic_TC_008a:
 17346 0000D0B5 803805                  	cmp byte [rax], T_closure
 17347 0000D0B8 0F85EF550000            	jne L_code_ptr_error
 17348 0000D0BE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17349 0000D0C2 53                      	push rbx
 17350 0000D0C3 FF7508                  	push qword [rbp + 8]
 17351 0000D0C6 FF7500                  	push qword [rbp]
 17352 0000D0C9 488B4D18                	mov rcx, [rbp + 3 * 8]
 17353 0000D0CD 488B542418              	mov rdx, [rsp + 3 * 8]
 17354 0000D0D2 488D7204                	lea rsi, [rdx + 4]
 17355 0000D0D6 4C8D4EFF                	lea r9, [rsi - 1]
 17356 0000D0DA 488D7903                	lea rdi, [rcx + 3]
 17357 0000D0DE 4D31C0                  	xor r8, r8
 17358                                  .L_tc_recycle_frame_loop_008a:
 17359 0000D0E1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17360 0000D0E5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17361 0000D0EA 49FFC9                  	dec r9
 17362 0000D0ED 4D31C0                  	xor r8, r8
 17363 0000D0F0 48FFCF                  	dec rdi
 17364 0000D0F3 48FFCE                  	dec rsi
 17365 0000D0F6 4883FE00                	cmp rsi, 0
 17366 0000D0FA 75E5                    	jne .L_tc_recycle_frame_loop_008a
 17367                                  .L_tc_recycle_frame_done_008a:
 17368                                  ;this pop rbp in sot to the right place
 17369 0000D0FC 4989C9                  	mov r9, rcx
 17370 0000D0FF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17371 0000D107 4C01CC                  	add rsp, r9
 17372 0000D10A 5D                      	pop rbp
 17373 0000D10B 488B4D00                	mov rcx, qword [rbp]
 17374 0000D10F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17375 0000D113 FFE3                    	jmp rbx
 17376                                  
 17377                                          	.L_if_end_0041:
 17378 0000D115 C9                      	leave
 17379 0000D116 C22000                  	ret 8 * (2 + 2)
 17380                                  .L_lambda_simple_end_0073:	; new closure is in rax
 17381                                  .L_applic_TC_008c:
 17382 0000D119 803805                  	cmp byte [rax], T_closure
 17383 0000D11C 0F858B550000            	jne L_code_ptr_error
 17384 0000D122 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17385 0000D126 53                      	push rbx
 17386 0000D127 FF7508                  	push qword [rbp + 8]
 17387 0000D12A FF7500                  	push qword [rbp]
 17388 0000D12D 488B4D18                	mov rcx, [rbp + 3 * 8]
 17389 0000D131 488B542418              	mov rdx, [rsp + 3 * 8]
 17390 0000D136 488D7204                	lea rsi, [rdx + 4]
 17391 0000D13A 4C8D4EFF                	lea r9, [rsi - 1]
 17392 0000D13E 488D7903                	lea rdi, [rcx + 3]
 17393 0000D142 4D31C0                  	xor r8, r8
 17394                                  .L_tc_recycle_frame_loop_008c:
 17395 0000D145 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17396 0000D149 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17397 0000D14E 49FFC9                  	dec r9
 17398 0000D151 4D31C0                  	xor r8, r8
 17399 0000D154 48FFCF                  	dec rdi
 17400 0000D157 48FFCE                  	dec rsi
 17401 0000D15A 4883FE00                	cmp rsi, 0
 17402 0000D15E 75E5                    	jne .L_tc_recycle_frame_loop_008c
 17403                                  .L_tc_recycle_frame_done_008c:
 17404                                  ;this pop rbp in sot to the right place
 17405 0000D160 4989C9                  	mov r9, rcx
 17406 0000D163 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17407 0000D16B 4C01CC                  	add rsp, r9
 17408 0000D16E 5D                      	pop rbp
 17409 0000D16F 488B4D00                	mov rcx, qword [rbp]
 17410 0000D173 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17411 0000D177 FFE3                    	jmp rbx
 17412 0000D179 C9                      	leave
 17413 0000D17A C22000                  	ret 8 * (2 + 2)
 17414                                  .L_lambda_simple_end_0072:	; new closure is in rax
 17415 0000D17D 50                      	push rax
 17416 0000D17E 6A01                    	push 1
 17417 0000D180 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17418 0000D185 E86E450000              	call malloc
 17419 0000D18A 50                      	push rax
 17420 0000D18B BF08000000              	mov rdi, 8 * 1	; new rib
 17421 0000D190 E863450000              	call malloc
 17422 0000D195 50                      	push rax
 17423 0000D196 BF18000000              	mov rdi, 8 * 3	; extended env
 17424 0000D19B E858450000              	call malloc
 17425 0000D1A0 488B7D10                	mov rdi, ENV
 17426 0000D1A4 BE00000000              	mov rsi, 0
 17427 0000D1A9 BA01000000              	mov rdx, 1
 17428                                  .L_lambda_simple_env_loop_0074:	; ext_env[i + 1] <-- env[i]
 17429 0000D1AE 4883FE02                	cmp rsi, 2
 17430 0000D1B2 7410                    	je .L_lambda_simple_env_end_0074
 17431 0000D1B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17432 0000D1B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17433 0000D1BC 48FFC6                  	inc rsi
 17434 0000D1BF 48FFC2                  	inc rdx
 17435 0000D1C2 EBEA                    	jmp .L_lambda_simple_env_loop_0074
 17436                                  .L_lambda_simple_env_end_0074:
 17437 0000D1C4 5B                      	pop rbx
 17438 0000D1C5 BE00000000              	mov rsi, 0
 17439                                  .L_lambda_simple_params_loop_0074:	; copy params
 17440 0000D1CA 4883FE01                	cmp rsi, 1
 17441 0000D1CE 740E                    	je .L_lambda_simple_params_end_0074
 17442 0000D1D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17443 0000D1D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17444 0000D1D9 48FFC6                  	inc rsi
 17445 0000D1DC EBEC                    	jmp .L_lambda_simple_params_loop_0074
 17446                                  .L_lambda_simple_params_end_0074:
 17447 0000D1DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17448 0000D1E1 4889C3                  	mov rbx, rax
 17449 0000D1E4 58                      	pop rax
 17450 0000D1E5 C60005                  	mov byte [rax], T_closure
 17451 0000D1E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17452 0000D1EC 48C74009[F9D10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0074
 17453 0000D1F4 E90F050000              	jmp .L_lambda_simple_end_0074
 17454                                  .L_lambda_simple_code_0074:	; lambda-simple body
 17455 0000D1F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17456 0000D1FF 740B                    	je .L_lambda_simple_arity_check_ok_0074
 17457 0000D201 FF742410                	push qword [rsp + 8 * 2]
 17458 0000D205 6A01                    	push 1
 17459 0000D207 E9A5440000              	jmp L_error_incorrect_arity_simple
 17460                                  .L_lambda_simple_arity_check_ok_0074:
 17461 0000D20C C8000000                	enter 0, 0
 17462 0000D210 48B8-                   	mov rax,L_constants + 23
 17462 0000D212 [1700000000000000] 
 17463 0000D21A 50                      	push rax
 17464 0000D21B 6A01                    	push 1
 17465 0000D21D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17466 0000D222 E8D1440000              	call malloc
 17467 0000D227 50                      	push rax
 17468 0000D228 BF08000000              	mov rdi, 8 * 1	; new rib
 17469 0000D22D E8C6440000              	call malloc
 17470 0000D232 50                      	push rax
 17471 0000D233 BF20000000              	mov rdi, 8 * 4	; extended env
 17472 0000D238 E8BB440000              	call malloc
 17473 0000D23D 488B7D10                	mov rdi, ENV
 17474 0000D241 BE00000000              	mov rsi, 0
 17475 0000D246 BA01000000              	mov rdx, 1
 17476                                  .L_lambda_simple_env_loop_0075:	; ext_env[i + 1] <-- env[i]
 17477 0000D24B 4883FE03                	cmp rsi, 3
 17478 0000D24F 7410                    	je .L_lambda_simple_env_end_0075
 17479 0000D251 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17480 0000D255 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17481 0000D259 48FFC6                  	inc rsi
 17482 0000D25C 48FFC2                  	inc rdx
 17483 0000D25F EBEA                    	jmp .L_lambda_simple_env_loop_0075
 17484                                  .L_lambda_simple_env_end_0075:
 17485 0000D261 5B                      	pop rbx
 17486 0000D262 BE00000000              	mov rsi, 0
 17487                                  .L_lambda_simple_params_loop_0075:	; copy params
 17488 0000D267 4883FE01                	cmp rsi, 1
 17489 0000D26B 740E                    	je .L_lambda_simple_params_end_0075
 17490 0000D26D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17491 0000D272 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17492 0000D276 48FFC6                  	inc rsi
 17493 0000D279 EBEC                    	jmp .L_lambda_simple_params_loop_0075
 17494                                  .L_lambda_simple_params_end_0075:
 17495 0000D27B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17496 0000D27E 4889C3                  	mov rbx, rax
 17497 0000D281 58                      	pop rax
 17498 0000D282 C60005                  	mov byte [rax], T_closure
 17499 0000D285 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17500 0000D289 48C74009[96D20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0075
 17501 0000D291 E90E040000              	jmp .L_lambda_simple_end_0075
 17502                                  .L_lambda_simple_code_0075:	; lambda-simple body
 17503 0000D296 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17504 0000D29C 740B                    	je .L_lambda_simple_arity_check_ok_0075
 17505 0000D29E FF742410                	push qword [rsp + 8 * 2]
 17506 0000D2A2 6A01                    	push 1
 17507 0000D2A4 E908440000              	jmp L_error_incorrect_arity_simple
 17508                                  .L_lambda_simple_arity_check_ok_0075:
 17509 0000D2A9 C8000000                	enter 0, 0
 17510 0000D2AD BF08000000              	mov rdi, 8
 17511 0000D2B2 E841440000              	call malloc
 17512 0000D2B7 488B5D20                	mov rbx, PARAM(0)
 17513 0000D2BB 488918                  	mov qword [rax], rbx
 17514 0000D2BE 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17515                                  
 17516 0000D2C2 48B8-                            	mov rax, sob_void
 17516 0000D2C4 [0000000000000000] 
 17517                                  
 17518 0000D2CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17519 0000D2D1 E822440000              	call malloc
 17520 0000D2D6 50                      	push rax
 17521 0000D2D7 BF08000000              	mov rdi, 8 * 1	; new rib
 17522 0000D2DC E817440000              	call malloc
 17523 0000D2E1 50                      	push rax
 17524 0000D2E2 BF28000000              	mov rdi, 8 * 5	; extended env
 17525 0000D2E7 E80C440000              	call malloc
 17526 0000D2EC 488B7D10                	mov rdi, ENV
 17527 0000D2F0 BE00000000              	mov rsi, 0
 17528 0000D2F5 BA01000000              	mov rdx, 1
 17529                                  .L_lambda_simple_env_loop_0076:	; ext_env[i + 1] <-- env[i]
 17530 0000D2FA 4883FE04                	cmp rsi, 4
 17531 0000D2FE 7410                    	je .L_lambda_simple_env_end_0076
 17532 0000D300 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17533 0000D304 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17534 0000D308 48FFC6                  	inc rsi
 17535 0000D30B 48FFC2                  	inc rdx
 17536 0000D30E EBEA                    	jmp .L_lambda_simple_env_loop_0076
 17537                                  .L_lambda_simple_env_end_0076:
 17538 0000D310 5B                      	pop rbx
 17539 0000D311 BE00000000              	mov rsi, 0
 17540                                  .L_lambda_simple_params_loop_0076:	; copy params
 17541 0000D316 4883FE01                	cmp rsi, 1
 17542 0000D31A 740E                    	je .L_lambda_simple_params_end_0076
 17543 0000D31C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17544 0000D321 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17545 0000D325 48FFC6                  	inc rsi
 17546 0000D328 EBEC                    	jmp .L_lambda_simple_params_loop_0076
 17547                                  .L_lambda_simple_params_end_0076:
 17548 0000D32A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17549 0000D32D 4889C3                  	mov rbx, rax
 17550 0000D330 58                      	pop rax
 17551 0000D331 C60005                  	mov byte [rax], T_closure
 17552 0000D334 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17553 0000D338 48C74009[45D30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0076
 17554 0000D340 E94A010000              	jmp .L_lambda_simple_end_0076
 17555                                  .L_lambda_simple_code_0076:	; lambda-simple body
 17556 0000D345 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17557 0000D34B 740B                    	je .L_lambda_simple_arity_check_ok_0076
 17558 0000D34D FF742410                	push qword [rsp + 8 * 2]
 17559 0000D351 6A02                    	push 2
 17560 0000D353 E959430000              	jmp L_error_incorrect_arity_simple
 17561                                  .L_lambda_simple_arity_check_ok_0076:
 17562 0000D358 C8000000                	enter 0, 0
 17563 0000D35C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17564 0000D360 50                      	push rax
 17565 0000D361 6A01                    	push 1
 17566 0000D363 488B0425[00000000]      	mov rax, qword [free_var_0]
 17567                                  	assert_closure(rax)
    42 0000D36B 803805              <1>  cmp byte [%1], %2
    43 0000D36E 0F85785B0000        <1>  jne L_error_incorrect_type
 17568 0000D374 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17569 0000D377 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17570 0000D37A 483D[02000000]          	cmp rax, sob_boolean_false
 17571 0000D380 0F8505010000            	jne .L_or_end_0009
 17572 0000D386 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17573 0000D38A 50                      	push rax
 17574 0000D38B 6A01                    	push 1
 17575 0000D38D 488B0425[80000000]      	mov rax, qword [free_var_16]
 17576                                  	assert_closure(rax)
    42 0000D395 803805              <1>  cmp byte [%1], %2
    43 0000D398 0F854E5B0000        <1>  jne L_error_incorrect_type
 17577 0000D39E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17578 0000D3A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17579 0000D3A4 50                      	push rax
 17580 0000D3A5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17581 0000D3A9 50                      	push rax
 17582 0000D3AA 6A02                    	push 2
 17583 0000D3AC 488B4510                	mov rax, qword [rbp + 8 * 2]
 17584                                  
 17585 0000D3B0 488B4008                                          	mov rax, qword[rax + 8 * 1]
 17586                                  
 17587 0000D3B4 488B00                                            	mov rax, qword[rax + 8 * 0]
 17588                                  	assert_closure(rax)
    42 0000D3B7 803805              <1>  cmp byte [%1], %2
    43 0000D3BA 0F852C5B0000        <1>  jne L_error_incorrect_type
 17589 0000D3C0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17590 0000D3C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17591                                  
 17592 0000D3C6 483D[02000000]                  	cmp rax, sob_boolean_false
 17593                                  
 17594 0000D3CC 0F84AF000000                    	je .L_if_else_0042
 17595 0000D3D2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17596 0000D3D6 50                      	push rax
 17597 0000D3D7 6A01                    	push 1
 17598 0000D3D9 488B0425[88000000]      	mov rax, qword [free_var_17]
 17599                                  	assert_closure(rax)
    42 0000D3E1 803805              <1>  cmp byte [%1], %2
    43 0000D3E4 0F85025B0000        <1>  jne L_error_incorrect_type
 17600 0000D3EA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17601 0000D3ED FF5009                  	call SOB_CLOSURE_CODE(rax)
 17602 0000D3F0 50                      	push rax
 17603 0000D3F1 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17604 0000D3F5 50                      	push rax
 17605 0000D3F6 6A01                    	push 1
 17606 0000D3F8 488B0425[80000000]      	mov rax, qword [free_var_16]
 17607                                  	assert_closure(rax)
    42 0000D400 803805              <1>  cmp byte [%1], %2
    43 0000D403 0F85E35A0000        <1>  jne L_error_incorrect_type
 17608 0000D409 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 17609 0000D40C FF5009                  	call SOB_CLOSURE_CODE(rax)
 17610 0000D40F 50                      	push rax
 17611 0000D410 6A02                    	push 2
 17612 0000D412 488B4510                	mov rax, qword [rbp + 8 * 2]
 17613                                  
 17614 0000D416 488B00                                            	mov rax, qword[rax + 8 * 0]
 17615                                  
 17616 0000D419 488B00                                            	mov rax, qword[rax + 8 * 0]
 17617 0000D41C 488B00                  	mov rax, qword [rax]
 17618                                  .L_applic_TC_008d:
 17619 0000D41F 803805                  	cmp byte [rax], T_closure
 17620 0000D422 0F8585520000            	jne L_code_ptr_error
 17621 0000D428 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17622 0000D42C 53                      	push rbx
 17623 0000D42D FF7508                  	push qword [rbp + 8]
 17624 0000D430 FF7500                  	push qword [rbp]
 17625 0000D433 488B4D18                	mov rcx, [rbp + 3 * 8]
 17626 0000D437 488B542418              	mov rdx, [rsp + 3 * 8]
 17627 0000D43C 488D7204                	lea rsi, [rdx + 4]
 17628 0000D440 4C8D4EFF                	lea r9, [rsi - 1]
 17629 0000D444 488D7903                	lea rdi, [rcx + 3]
 17630 0000D448 4D31C0                  	xor r8, r8
 17631                                  .L_tc_recycle_frame_loop_008d:
 17632 0000D44B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17633 0000D44F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17634 0000D454 49FFC9                  	dec r9
 17635 0000D457 4D31C0                  	xor r8, r8
 17636 0000D45A 48FFCF                  	dec rdi
 17637 0000D45D 48FFCE                  	dec rsi
 17638 0000D460 4883FE00                	cmp rsi, 0
 17639 0000D464 75E5                    	jne .L_tc_recycle_frame_loop_008d
 17640                                  .L_tc_recycle_frame_done_008d:
 17641                                  ;this pop rbp in sot to the right place
 17642 0000D466 4989C9                  	mov r9, rcx
 17643 0000D469 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17644 0000D471 4C01CC                  	add rsp, r9
 17645 0000D474 5D                      	pop rbp
 17646 0000D475 488B4D00                	mov rcx, qword [rbp]
 17647 0000D479 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17648 0000D47D FFE3                    	jmp rbx
 17649                                  
 17650 0000D47F EB0A                            	jmp .L_if_end_0042
 17651                                  
 17652                                          	.L_if_else_0042:
 17653 0000D481 48B8-                   	mov rax,L_constants + 2
 17653 0000D483 [0200000000000000] 
 17654                                  
 17655                                          	.L_if_end_0042:
 17656                                  .L_or_end_0009:
 17657 0000D48B C9                      	leave
 17658 0000D48C C22000                  	ret 8 * (2 + 2)
 17659                                  .L_lambda_simple_end_0076:	; new closure is in rax
 17660 0000D48F 50                      	push rax
 17661 0000D490 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17662 0000D494 8F00                    	pop qword [rax]
 17663 0000D496 48B8-                   	mov rax, sob_void
 17663 0000D498 [0000000000000000] 
 17664                                  
 17665 0000D4A0 BF11000000              	mov rdi, (1 + 8 + 8)
 17666 0000D4A5 E84E420000              	call malloc
 17667 0000D4AA 50                      	push rax
 17668 0000D4AB BF08000000              	mov rdi, 8 * 1
 17669 0000D4B0 E843420000              	call malloc
 17670 0000D4B5 50                      	push rax
 17671 0000D4B6 BF28000000              	mov rdi, 8 * 5
 17672 0000D4BB E838420000              	call malloc
 17673 0000D4C0 488B7D10                	mov rdi, ENV
 17674 0000D4C4 4831F6                  	xor rsi, rsi
 17675 0000D4C7 4831D2                  	xor rdx, rdx
 17676 0000D4CA 48FFC2                  	inc rdx
 17677                                  	.L_lambda_opt_env_loop_0013:
 17678                                  
 17679 0000D4CD 4883FE04                        	cmp rsi, 4
 17680                                  
 17681 0000D4D1 7412                            	je .L_lambda_opt_env_end_0013
 17682 0000D4D3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17683 0000D4D7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17684 0000D4DB 4883C201                	add rdx, 1
 17685 0000D4DF 4883C601                	add rsi, 1
 17686 0000D4E3 EBE8                    	jmp .L_lambda_opt_env_loop_0013
 17687                                  
 17688                                          	.L_lambda_opt_env_end_0013:
 17689 0000D4E5 5B                      	pop rbx
 17690 0000D4E6 4831F6                  	xor rsi, rsi
 17691                                  	.L_lambda_opt_params_loop_0013:
 17692                                  
 17693 0000D4E9 4883FE01                        	cmp rsi, 1
 17694                                  
 17695 0000D4ED 740F                            	je .L_lambda_opt_params_end_0013
 17696 0000D4EF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17697 0000D4F4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17698 0000D4F8 4883C601                	add rsi, 1
 17699 0000D4FC EBEB                    	jmp .L_lambda_opt_params_loop_0013
 17700                                  
 17701                                          	.L_lambda_opt_params_end_0013:
 17702 0000D4FE 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 17703 0000D501 4889C3                  	mov rbx, rax
 17704 0000D504 58                      	pop rax
 17705 0000D505 C60005                  	mov byte [rax], T_closure
 17706 0000D508 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17707 0000D50C 48C74009[19D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0013
 17708                                  
 17709 0000D514 E987010000                      	jmp .L_lambda_opt_end_0013
 17710                                  
 17711                                          	.L_lambda_opt_code_0013:
 17712                                  
 17713 0000D519 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 17714                                  
 17715 0000D51F 740D                            	je .L_lambda_opt_arity_check_exact_0013  ;same num_of_args
 17716                                  
 17717 0000D521 7F65                            	jg .L_lambda_opt_arity_check_more_0013  ;greater num_of_args
 17718 0000D523 FF742410                	push qword [rsp + 8 * 2]
 17719 0000D527 6A01                    	push 1
 17720 0000D529 E997410000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 17721                                  .L_lambda_opt_arity_check_exact_0013:
 17722 0000D52E 4883EC08                	sub rsp, 8 * 1
 17723 0000D532 488D7F10                	lea rdi, [rdi + (8 * 2)]
 17724 0000D536 4889E7                  	mov rdi, rsp 
 17725 0000D539 488B4708                	mov rax, qword [rdi + 8]
 17726 0000D53D 488907                  	mov qword [rdi], rax
 17727 0000D540 488D7F08                	lea rdi, [rdi + 8]
 17728 0000D544 488B4708                	mov rax, qword [rdi + 8]
 17729 0000D548 488907                  	mov qword [rdi], rax
 17730 0000D54B 488D7F08                	lea rdi, [rdi + 8]
 17731 0000D54F 488B4708                	mov rax, qword [rdi + 8]
 17732 0000D553 4889C1                  	mov rcx, rax
 17733 0000D556 4883C001                	add rax, 1
 17734 0000D55A 488907                  	mov qword [rdi], rax
 17735 0000D55D 488D7F08                	lea rdi, [rdi + 8]
 17736                                  	.L_lambda_opt_stack_shrink_loop_0037:
 17737 0000D561 4883F900                	cmp rcx, 0
 17738 0000D565 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0037
 17739 0000D567 4883E901                	sub rcx, 1
 17740 0000D56B 488D4010                	lea rax, [rax + (8 * 2)]
 17741 0000D56F 488B4708                	mov rax, qword [rdi + 8]
 17742 0000D573 488907                  	mov qword [rdi], rax
 17743 0000D576 488D7F08                	lea rdi, [rdi + 8]
 17744 0000D57A EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0037
 17745                                  
 17746                                          	.L_lambda_opt_stack_shrink_loop_exit_0037:
 17747 0000D57C 48C707[01000000]        	mov qword [rdi], sob_nil
 17748 0000D583 E997000000              	jmp .L_lambda_opt_stack_adjusted_0013
 17749                                  
 17750                                          	.L_lambda_opt_arity_check_more_0013:
 17751 0000D588 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 17752 0000D58D 488D4EFF                	lea rcx, [rsi - 1]
 17753 0000D591 49B8-                   	mov r8, sob_nil
 17753 0000D593 [0100000000000000] 
 17754 0000D59B 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 17755 0000D5A0 4889F2                  	mov rdx, rsi
 17756                                  	.L_lambda_opt_stack_shrink_loop_0038:
 17757 0000D5A3 4883F900                	cmp rcx, 0
 17758 0000D5A7 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0038
 17759 0000D5A9 BF11000000              	mov rdi, 1 + (8 * 2)
 17760 0000D5AE E845410000              	call malloc
 17761 0000D5B3 C60021                  	mov byte [rax], T_pair
 17762 0000D5B6 488B1E                  	mov rbx, qword [rsi]
 17763 0000D5B9 48895801                	mov SOB_PAIR_CAR(rax), rbx
 17764 0000D5BD 4C894009                	mov SOB_PAIR_CDR(rax), r8
 17765 0000D5C1 4883C6F8                	add rsi, -8
 17766 0000D5C5 4883E901                	sub rcx, 1
 17767 0000D5C9 4989C0                  	mov r8, rax
 17768 0000D5CC EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0038
 17769                                  
 17770                                          	.L_lambda_opt_stack_shrink_loop_exit_0038:
 17771 0000D5CE 4C8902                  	mov qword [rdx], r8
 17772 0000D5D1 4883EA08                	sub rdx, 8 * 1
 17773 0000D5D5 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 17774                                  
 17775 0000D5DA B901000000                      	mov rcx, 1 
 17776                                  
 17777                                          	.L_lambda_opt_stack_shrink_loop_0039:
 17778 0000D5DF 4883F900                	cmp rcx, 0
 17779 0000D5E3 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0039
 17780 0000D5E5 488B06                  	mov rax, qword [rsi]
 17781 0000D5E8 488902                  	mov qword [rdx], rax
 17782 0000D5EB 488D76F8                	lea rsi, [rsi - 8]
 17783 0000D5EF 4883C2F8                	add rdx, -8
 17784 0000D5F3 4883C1FF                	add rcx, -1
 17785 0000D5F7 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0039
 17786                                  
 17787                                          	.L_lambda_opt_stack_shrink_loop_exit_0039:
 17788                                  
 17789 0000D5F9 48C70202000000                  	mov qword [rdx], 1 + 1
 17790 0000D600 4883C6F8                	add rsi, -8
 17791 0000D604 4883C2F8                	add rdx, -8
 17792 0000D608 488B06                  	mov rax, qword [rsi]
 17793 0000D60B 488902                  	mov qword [rdx], rax
 17794 0000D60E 4883C2F8                	add rdx, -8
 17795 0000D612 488D76F8                	lea rsi, [rsi - 8]
 17796 0000D616 488B06                  	mov rax, qword [rsi]
 17797 0000D619 488902                  	mov qword [rdx], rax
 17798 0000D61C 4889D4                  	mov rsp, rdx
 17799                                  	.L_lambda_opt_stack_adjusted_0013:
 17800 0000D61F C8000000                	enter 0, 0
 17801 0000D623 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 17802 0000D627 50                      	push rax
 17803 0000D628 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 17804 0000D62C 50                      	push rax
 17805 0000D62D 6A02                    	push 2
 17806 0000D62F 488B4510                	mov rax, qword [rbp + 8 * 2]
 17807                                  
 17808 0000D633 488B00                                            	mov rax, qword[rax + 8 * 0]
 17809                                  
 17810 0000D636 488B00                                            	mov rax, qword[rax + 8 * 0]
 17811 0000D639 488B00                  	mov rax, qword [rax]
 17812                                  .L_applic_TC_008e:
 17813 0000D63C 803805                  	cmp byte [rax], T_closure
 17814 0000D63F 0F8568500000            	jne L_code_ptr_error
 17815 0000D645 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17816 0000D649 53                      	push rbx
 17817 0000D64A FF7508                  	push qword [rbp + 8]
 17818 0000D64D FF7500                  	push qword [rbp]
 17819 0000D650 488B4D18                	mov rcx, [rbp + 3 * 8]
 17820 0000D654 488B542418              	mov rdx, [rsp + 3 * 8]
 17821 0000D659 488D7204                	lea rsi, [rdx + 4]
 17822 0000D65D 4C8D4EFF                	lea r9, [rsi - 1]
 17823 0000D661 488D7903                	lea rdi, [rcx + 3]
 17824 0000D665 4D31C0                  	xor r8, r8
 17825                                  .L_tc_recycle_frame_loop_008e:
 17826 0000D668 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17827 0000D66C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17828 0000D671 49FFC9                  	dec r9
 17829 0000D674 4D31C0                  	xor r8, r8
 17830 0000D677 48FFCF                  	dec rdi
 17831 0000D67A 48FFCE                  	dec rsi
 17832 0000D67D 4883FE00                	cmp rsi, 0
 17833 0000D681 75E5                    	jne .L_tc_recycle_frame_loop_008e
 17834                                  .L_tc_recycle_frame_done_008e:
 17835                                  ;this pop rbp in sot to the right place
 17836 0000D683 4989C9                  	mov r9, rcx
 17837 0000D686 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17838 0000D68E 4C01CC                  	add rsp, r9
 17839 0000D691 5D                      	pop rbp
 17840 0000D692 488B4D00                	mov rcx, qword [rbp]
 17841 0000D696 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17842 0000D69A FFE3                    	jmp rbx
 17843 0000D69C C9                      	leave
 17844 0000D69D C22000                  	ret 8 * (2 + 2)
 17845                                  .L_lambda_opt_end_0013:	; new closure is in rax
 17846 0000D6A0 C9                      	leave
 17847 0000D6A1 C21800                  	ret 8 * (2 + 1)
 17848                                  .L_lambda_simple_end_0075:	; new closure is in rax
 17849                                  .L_applic_TC_008f:
 17850 0000D6A4 803805                  	cmp byte [rax], T_closure
 17851 0000D6A7 0F8500500000            	jne L_code_ptr_error
 17852 0000D6AD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17853 0000D6B1 53                      	push rbx
 17854 0000D6B2 FF7508                  	push qword [rbp + 8]
 17855 0000D6B5 FF7500                  	push qword [rbp]
 17856 0000D6B8 488B4D18                	mov rcx, [rbp + 3 * 8]
 17857 0000D6BC 488B542418              	mov rdx, [rsp + 3 * 8]
 17858 0000D6C1 488D7204                	lea rsi, [rdx + 4]
 17859 0000D6C5 4C8D4EFF                	lea r9, [rsi - 1]
 17860 0000D6C9 488D7903                	lea rdi, [rcx + 3]
 17861 0000D6CD 4D31C0                  	xor r8, r8
 17862                                  .L_tc_recycle_frame_loop_008f:
 17863 0000D6D0 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17864 0000D6D4 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17865 0000D6D9 49FFC9                  	dec r9
 17866 0000D6DC 4D31C0                  	xor r8, r8
 17867 0000D6DF 48FFCF                  	dec rdi
 17868 0000D6E2 48FFCE                  	dec rsi
 17869 0000D6E5 4883FE00                	cmp rsi, 0
 17870 0000D6E9 75E5                    	jne .L_tc_recycle_frame_loop_008f
 17871                                  .L_tc_recycle_frame_done_008f:
 17872                                  ;this pop rbp in sot to the right place
 17873 0000D6EB 4989C9                  	mov r9, rcx
 17874 0000D6EE 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17875 0000D6F6 4C01CC                  	add rsp, r9
 17876 0000D6F9 5D                      	pop rbp
 17877 0000D6FA 488B4D00                	mov rcx, qword [rbp]
 17878 0000D6FE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17879 0000D702 FFE3                    	jmp rbx
 17880 0000D704 C9                      	leave
 17881 0000D705 C21800                  	ret 8 * (2 + 1)
 17882                                  .L_lambda_simple_end_0074:	; new closure is in rax
 17883                                  .L_applic_TC_0090:
 17884 0000D708 803805                  	cmp byte [rax], T_closure
 17885 0000D70B 0F859C4F0000            	jne L_code_ptr_error
 17886 0000D711 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17887 0000D715 53                      	push rbx
 17888 0000D716 FF7508                  	push qword [rbp + 8]
 17889 0000D719 FF7500                  	push qword [rbp]
 17890 0000D71C 488B4D18                	mov rcx, [rbp + 3 * 8]
 17891 0000D720 488B542418              	mov rdx, [rsp + 3 * 8]
 17892 0000D725 488D7204                	lea rsi, [rdx + 4]
 17893 0000D729 4C8D4EFF                	lea r9, [rsi - 1]
 17894 0000D72D 488D7903                	lea rdi, [rcx + 3]
 17895 0000D731 4D31C0                  	xor r8, r8
 17896                                  .L_tc_recycle_frame_loop_0090:
 17897 0000D734 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17898 0000D738 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17899 0000D73D 49FFC9                  	dec r9
 17900 0000D740 4D31C0                  	xor r8, r8
 17901 0000D743 48FFCF                  	dec rdi
 17902 0000D746 48FFCE                  	dec rsi
 17903 0000D749 4883FE00                	cmp rsi, 0
 17904 0000D74D 75E5                    	jne .L_tc_recycle_frame_loop_0090
 17905                                  .L_tc_recycle_frame_done_0090:
 17906                                  ;this pop rbp in sot to the right place
 17907 0000D74F 4989C9                  	mov r9, rcx
 17908 0000D752 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17909 0000D75A 4C01CC                  	add rsp, r9
 17910 0000D75D 5D                      	pop rbp
 17911 0000D75E 488B4D00                	mov rcx, qword [rbp]
 17912 0000D762 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17913 0000D766 FFE3                    	jmp rbx
 17914 0000D768 C9                      	leave
 17915 0000D769 C21800                  	ret 8 * (2 + 1)
 17916                                  .L_lambda_simple_end_0070:	; new closure is in rax
 17917                                  .L_applic_TC_0091:
 17918 0000D76C 803805                  	cmp byte [rax], T_closure
 17919 0000D76F 0F85384F0000            	jne L_code_ptr_error
 17920 0000D775 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 17921 0000D779 53                      	push rbx
 17922 0000D77A FF7508                  	push qword [rbp + 8]
 17923 0000D77D FF7500                  	push qword [rbp]
 17924 0000D780 488B4D18                	mov rcx, [rbp + 3 * 8]
 17925 0000D784 488B542418              	mov rdx, [rsp + 3 * 8]
 17926 0000D789 488D7204                	lea rsi, [rdx + 4]
 17927 0000D78D 4C8D4EFF                	lea r9, [rsi - 1]
 17928 0000D791 488D7903                	lea rdi, [rcx + 3]
 17929 0000D795 4D31C0                  	xor r8, r8
 17930                                  .L_tc_recycle_frame_loop_0091:
 17931 0000D798 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 17932 0000D79C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 17933 0000D7A1 49FFC9                  	dec r9
 17934 0000D7A4 4D31C0                  	xor r8, r8
 17935 0000D7A7 48FFCF                  	dec rdi
 17936 0000D7AA 48FFCE                  	dec rsi
 17937 0000D7AD 4883FE00                	cmp rsi, 0
 17938 0000D7B1 75E5                    	jne .L_tc_recycle_frame_loop_0091
 17939                                  .L_tc_recycle_frame_done_0091:
 17940                                  ;this pop rbp in sot to the right place
 17941 0000D7B3 4989C9                  	mov r9, rcx
 17942 0000D7B6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 17943 0000D7BE 4C01CC                  	add rsp, r9
 17944 0000D7C1 5D                      	pop rbp
 17945 0000D7C2 488B4D00                	mov rcx, qword [rbp]
 17946 0000D7C6 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 17947 0000D7CA FFE3                    	jmp rbx
 17948 0000D7CC C9                      	leave
 17949 0000D7CD C22000                  	ret 8 * (2 + 2)
 17950                                  .L_lambda_simple_end_006f:	; new closure is in rax
 17951 0000D7D0 50                      	push rax
 17952 0000D7D1 6A01                    	push 1
 17953 0000D7D3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17954 0000D7D8 E81B3F0000              	call malloc
 17955 0000D7DD 50                      	push rax
 17956 0000D7DE BF00000000              	mov rdi, 8 * 0	; new rib
 17957 0000D7E3 E8103F0000              	call malloc
 17958 0000D7E8 50                      	push rax
 17959 0000D7E9 BF08000000              	mov rdi, 8 * 1	; extended env
 17960 0000D7EE E8053F0000              	call malloc
 17961 0000D7F3 488B7D10                	mov rdi, ENV
 17962 0000D7F7 BE00000000              	mov rsi, 0
 17963 0000D7FC BA01000000              	mov rdx, 1
 17964                                  .L_lambda_simple_env_loop_0077:	; ext_env[i + 1] <-- env[i]
 17965 0000D801 4883FE00                	cmp rsi, 0
 17966 0000D805 7410                    	je .L_lambda_simple_env_end_0077
 17967 0000D807 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17968 0000D80B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17969 0000D80F 48FFC6                  	inc rsi
 17970 0000D812 48FFC2                  	inc rdx
 17971 0000D815 EBEA                    	jmp .L_lambda_simple_env_loop_0077
 17972                                  .L_lambda_simple_env_end_0077:
 17973 0000D817 5B                      	pop rbx
 17974 0000D818 BE00000000              	mov rsi, 0
 17975                                  .L_lambda_simple_params_loop_0077:	; copy params
 17976 0000D81D 4883FE00                	cmp rsi, 0
 17977 0000D821 740E                    	je .L_lambda_simple_params_end_0077
 17978 0000D823 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17979 0000D828 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17980 0000D82C 48FFC6                  	inc rsi
 17981 0000D82F EBEC                    	jmp .L_lambda_simple_params_loop_0077
 17982                                  .L_lambda_simple_params_end_0077:
 17983 0000D831 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17984 0000D834 4889C3                  	mov rbx, rax
 17985 0000D837 58                      	pop rax
 17986 0000D838 C60005                  	mov byte [rax], T_closure
 17987 0000D83B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17988 0000D83F 48C74009[4CD80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0077
 17989 0000D847 E9FF000000              	jmp .L_lambda_simple_end_0077
 17990                                  .L_lambda_simple_code_0077:	; lambda-simple body
 17991 0000D84C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17992 0000D852 740B                    	je .L_lambda_simple_arity_check_ok_0077
 17993 0000D854 FF742410                	push qword [rsp + 8 * 2]
 17994 0000D858 6A01                    	push 1
 17995 0000D85A E9523E0000              	jmp L_error_incorrect_arity_simple
 17996                                  .L_lambda_simple_arity_check_ok_0077:
 17997 0000D85F C8000000                	enter 0, 0
 17998 0000D863 488B0425[70030000]      	mov rax, qword [free_var_110]
 17999 0000D86B 50                      	push rax
 18000 0000D86C 488B0425[60030000]      	mov rax, qword [free_var_108]
 18001 0000D874 50                      	push rax
 18002 0000D875 6A02                    	push 2
 18003 0000D877 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18004                                  	assert_closure(rax)
    42 0000D87B 803805              <1>  cmp byte [%1], %2
    43 0000D87E 0F8568560000        <1>  jne L_error_incorrect_type
 18005 0000D884 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18006 0000D887 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18007 0000D88A 48890425[E8030000]      	mov qword [free_var_125], rax
 18008                                  
 18009 0000D892 48B8-                           	mov rax, sob_void
 18009 0000D894 [0000000000000000] 
 18010                                  
 18011 0000D89C 488B0425[70030000]      	mov rax, qword [free_var_110]
 18012 0000D8A4 50                      	push rax
 18013 0000D8A5 488B0425[60030000]      	mov rax, qword [free_var_108]
 18014 0000D8AD 50                      	push rax
 18015 0000D8AE 6A02                    	push 2
 18016 0000D8B0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18017                                  	assert_closure(rax)
    42 0000D8B4 803805              <1>  cmp byte [%1], %2
    43 0000D8B7 0F852F560000        <1>  jne L_error_incorrect_type
 18018 0000D8BD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18019 0000D8C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18020 0000D8C3 48890425[10040000]      	mov qword [free_var_130], rax
 18021                                  
 18022 0000D8CB 48B8-                           	mov rax, sob_void
 18022 0000D8CD [0000000000000000] 
 18023                                  
 18024 0000D8D5 488B0425[70030000]      	mov rax, qword [free_var_110]
 18025 0000D8DD 50                      	push rax
 18026 0000D8DE 488B0425[78030000]      	mov rax, qword [free_var_111]
 18027 0000D8E6 50                      	push rax
 18028 0000D8E7 6A02                    	push 2
 18029 0000D8E9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18030                                  	assert_closure(rax)
    42 0000D8ED 803805              <1>  cmp byte [%1], %2
    43 0000D8F0 0F85F6550000        <1>  jne L_error_incorrect_type
 18031 0000D8F6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18032 0000D8F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18033 0000D8FC 48890425[F8030000]      	mov qword [free_var_127], rax
 18034                                  
 18035 0000D904 48B8-                           	mov rax, sob_void
 18035 0000D906 [0000000000000000] 
 18036                                  
 18037 0000D90E 488B0425[A8030000]      	mov rax, qword [free_var_117]
 18038 0000D916 50                      	push rax
 18039 0000D917 488B0425[B0030000]      	mov rax, qword [free_var_118]
 18040 0000D91F 50                      	push rax
 18041 0000D920 6A02                    	push 2
 18042 0000D922 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18043                                  	assert_closure(rax)
    42 0000D926 803805              <1>  cmp byte [%1], %2
    43 0000D929 0F85BD550000        <1>  jne L_error_incorrect_type
 18044 0000D92F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18045 0000D932 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18046 0000D935 48890425[20040000]      	mov qword [free_var_132], rax
 18047                                  
 18048 0000D93D 48B8-                           	mov rax, sob_void
 18048 0000D93F [0000000000000000] 
 18049 0000D947 C9                      	leave
 18050 0000D948 C21800                  	ret 8 * (2 + 1)
 18051                                  .L_lambda_simple_end_0077:	; new closure is in rax
 18052                                  	assert_closure(rax)
    42 0000D94B 803805              <1>  cmp byte [%1], %2
    43 0000D94E 0F8598550000        <1>  jne L_error_incorrect_type
 18053 0000D954 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18054 0000D957 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18055                                  
 18056 0000D95A 4889C7                  	mov rdi, rax
 18057 0000D95D E8A73D0000              	call print_sexpr_if_not_void
 18058                                  
 18059 0000D962 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18060 0000D967 E88C3D0000              	call malloc
 18061 0000D96C 50                      	push rax
 18062 0000D96D BF00000000              	mov rdi, 8 * 0	; new rib
 18063 0000D972 E8813D0000              	call malloc
 18064 0000D977 50                      	push rax
 18065 0000D978 BF08000000              	mov rdi, 8 * 1	; extended env
 18066 0000D97D E8763D0000              	call malloc
 18067 0000D982 488B7D10                	mov rdi, ENV
 18068 0000D986 BE00000000              	mov rsi, 0
 18069 0000D98B BA01000000              	mov rdx, 1
 18070                                  .L_lambda_simple_env_loop_0078:	; ext_env[i + 1] <-- env[i]
 18071 0000D990 4883FE00                	cmp rsi, 0
 18072 0000D994 7410                    	je .L_lambda_simple_env_end_0078
 18073 0000D996 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18074 0000D99A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18075 0000D99E 48FFC6                  	inc rsi
 18076 0000D9A1 48FFC2                  	inc rdx
 18077 0000D9A4 EBEA                    	jmp .L_lambda_simple_env_loop_0078
 18078                                  .L_lambda_simple_env_end_0078:
 18079 0000D9A6 5B                      	pop rbx
 18080 0000D9A7 BE00000000              	mov rsi, 0
 18081                                  .L_lambda_simple_params_loop_0078:	; copy params
 18082 0000D9AC 4883FE00                	cmp rsi, 0
 18083 0000D9B0 740E                    	je .L_lambda_simple_params_end_0078
 18084 0000D9B2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18085 0000D9B7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18086 0000D9BB 48FFC6                  	inc rsi
 18087 0000D9BE EBEC                    	jmp .L_lambda_simple_params_loop_0078
 18088                                  .L_lambda_simple_params_end_0078:
 18089 0000D9C0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18090 0000D9C3 4889C3                  	mov rbx, rax
 18091 0000D9C6 58                      	pop rax
 18092 0000D9C7 C60005                  	mov byte [rax], T_closure
 18093 0000D9CA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18094 0000D9CE 48C74009[DBD90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0078
 18095 0000D9D6 E9F30B0000              	jmp .L_lambda_simple_end_0078
 18096                                  .L_lambda_simple_code_0078:	; lambda-simple body
 18097 0000D9DB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18098 0000D9E1 740B                    	je .L_lambda_simple_arity_check_ok_0078
 18099 0000D9E3 FF742410                	push qword [rsp + 8 * 2]
 18100 0000D9E7 6A01                    	push 1
 18101 0000D9E9 E9C33C0000              	jmp L_error_incorrect_arity_simple
 18102                                  .L_lambda_simple_arity_check_ok_0078:
 18103 0000D9EE C8000000                	enter 0, 0
 18104 0000D9F2 48B8-                   	mov rax,L_constants + 23
 18104 0000D9F4 [1700000000000000] 
 18105 0000D9FC 50                      	push rax
 18106 0000D9FD 6A01                    	push 1
 18107 0000D9FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18108 0000DA04 E8EF3C0000              	call malloc
 18109 0000DA09 50                      	push rax
 18110 0000DA0A BF08000000              	mov rdi, 8 * 1	; new rib
 18111 0000DA0F E8E43C0000              	call malloc
 18112 0000DA14 50                      	push rax
 18113 0000DA15 BF10000000              	mov rdi, 8 * 2	; extended env
 18114 0000DA1A E8D93C0000              	call malloc
 18115 0000DA1F 488B7D10                	mov rdi, ENV
 18116 0000DA23 BE00000000              	mov rsi, 0
 18117 0000DA28 BA01000000              	mov rdx, 1
 18118                                  .L_lambda_simple_env_loop_0079:	; ext_env[i + 1] <-- env[i]
 18119 0000DA2D 4883FE01                	cmp rsi, 1
 18120 0000DA31 7410                    	je .L_lambda_simple_env_end_0079
 18121 0000DA33 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18122 0000DA37 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18123 0000DA3B 48FFC6                  	inc rsi
 18124 0000DA3E 48FFC2                  	inc rdx
 18125 0000DA41 EBEA                    	jmp .L_lambda_simple_env_loop_0079
 18126                                  .L_lambda_simple_env_end_0079:
 18127 0000DA43 5B                      	pop rbx
 18128 0000DA44 BE00000000              	mov rsi, 0
 18129                                  .L_lambda_simple_params_loop_0079:	; copy params
 18130 0000DA49 4883FE01                	cmp rsi, 1
 18131 0000DA4D 740E                    	je .L_lambda_simple_params_end_0079
 18132 0000DA4F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18133 0000DA54 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18134 0000DA58 48FFC6                  	inc rsi
 18135 0000DA5B EBEC                    	jmp .L_lambda_simple_params_loop_0079
 18136                                  .L_lambda_simple_params_end_0079:
 18137 0000DA5D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18138 0000DA60 4889C3                  	mov rbx, rax
 18139 0000DA63 58                      	pop rax
 18140 0000DA64 C60005                  	mov byte [rax], T_closure
 18141 0000DA67 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18142 0000DA6B 48C74009[78DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0079
 18143 0000DA73 E9F20A0000              	jmp .L_lambda_simple_end_0079
 18144                                  .L_lambda_simple_code_0079:	; lambda-simple body
 18145 0000DA78 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18146 0000DA7E 740B                    	je .L_lambda_simple_arity_check_ok_0079
 18147 0000DA80 FF742410                	push qword [rsp + 8 * 2]
 18148 0000DA84 6A01                    	push 1
 18149 0000DA86 E9263C0000              	jmp L_error_incorrect_arity_simple
 18150                                  .L_lambda_simple_arity_check_ok_0079:
 18151 0000DA8B C8000000                	enter 0, 0
 18152 0000DA8F BF08000000              	mov rdi, 8
 18153 0000DA94 E85F3C0000              	call malloc
 18154 0000DA99 488B5D20                	mov rbx, PARAM(0)
 18155 0000DA9D 488918                  	mov qword [rax], rbx
 18156 0000DAA0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18157                                  
 18158 0000DAA4 48B8-                            	mov rax, sob_void
 18158 0000DAA6 [0000000000000000] 
 18159                                  
 18160 0000DAAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18161 0000DAB3 E8403C0000              	call malloc
 18162 0000DAB8 50                      	push rax
 18163 0000DAB9 BF08000000              	mov rdi, 8 * 1	; new rib
 18164 0000DABE E8353C0000              	call malloc
 18165 0000DAC3 50                      	push rax
 18166 0000DAC4 BF18000000              	mov rdi, 8 * 3	; extended env
 18167 0000DAC9 E82A3C0000              	call malloc
 18168 0000DACE 488B7D10                	mov rdi, ENV
 18169 0000DAD2 BE00000000              	mov rsi, 0
 18170 0000DAD7 BA01000000              	mov rdx, 1
 18171                                  .L_lambda_simple_env_loop_007a:	; ext_env[i + 1] <-- env[i]
 18172 0000DADC 4883FE02                	cmp rsi, 2
 18173 0000DAE0 7410                    	je .L_lambda_simple_env_end_007a
 18174 0000DAE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18175 0000DAE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18176 0000DAEA 48FFC6                  	inc rsi
 18177 0000DAED 48FFC2                  	inc rdx
 18178 0000DAF0 EBEA                    	jmp .L_lambda_simple_env_loop_007a
 18179                                  .L_lambda_simple_env_end_007a:
 18180 0000DAF2 5B                      	pop rbx
 18181 0000DAF3 BE00000000              	mov rsi, 0
 18182                                  .L_lambda_simple_params_loop_007a:	; copy params
 18183 0000DAF8 4883FE01                	cmp rsi, 1
 18184 0000DAFC 740E                    	je .L_lambda_simple_params_end_007a
 18185 0000DAFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18186 0000DB03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18187 0000DB07 48FFC6                  	inc rsi
 18188 0000DB0A EBEC                    	jmp .L_lambda_simple_params_loop_007a
 18189                                  .L_lambda_simple_params_end_007a:
 18190 0000DB0C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18191 0000DB0F 4889C3                  	mov rbx, rax
 18192 0000DB12 58                      	pop rax
 18193 0000DB13 C60005                  	mov byte [rax], T_closure
 18194 0000DB16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18195 0000DB1A 48C74009[27DB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007a
 18196 0000DB22 E9A9010000              	jmp .L_lambda_simple_end_007a
 18197                                  .L_lambda_simple_code_007a:	; lambda-simple body
 18198 0000DB27 48837C241004            	cmp qword [rsp + 8 * 2], 4
 18199 0000DB2D 740B                    	je .L_lambda_simple_arity_check_ok_007a
 18200 0000DB2F FF742410                	push qword [rsp + 8 * 2]
 18201 0000DB33 6A04                    	push 4
 18202 0000DB35 E9773B0000              	jmp L_error_incorrect_arity_simple
 18203                                  .L_lambda_simple_arity_check_ok_007a:
 18204 0000DB3A C8000000                	enter 0, 0
 18205 0000DB3E 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 18206 0000DB42 50                      	push rax
 18207 0000DB43 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18208 0000DB47 50                      	push rax
 18209 0000DB48 6A02                    	push 2
 18210 0000DB4A 488B0425[50030000]      	mov rax, qword [free_var_106]
 18211                                  	assert_closure(rax)
    42 0000DB52 803805              <1>  cmp byte [%1], %2
    43 0000DB55 0F8591530000        <1>  jne L_error_incorrect_type
 18212 0000DB5B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18213 0000DB5E FF5009                  	call SOB_CLOSURE_CODE(rax)
 18214 0000DB61 483D[02000000]          	cmp rax, sob_boolean_false
 18215 0000DB67 0F855F010000            	jne .L_or_end_000a
 18216 0000DB6D 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 18217 0000DB71 50                      	push rax
 18218 0000DB72 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18219 0000DB76 50                      	push rax
 18220 0000DB77 6A02                    	push 2
 18221 0000DB79 488B0425[30030000]      	mov rax, qword [free_var_102]
 18222                                  	assert_closure(rax)
    42 0000DB81 803805              <1>  cmp byte [%1], %2
    43 0000DB84 0F8562530000        <1>  jne L_error_incorrect_type
 18223 0000DB8A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18224 0000DB8D FF5009                  	call SOB_CLOSURE_CODE(rax)
 18225                                  
 18226 0000DB90 483D[02000000]                  	cmp rax, sob_boolean_false
 18227                                  
 18228 0000DB96 0F8426010000                    	je .L_if_else_0043
 18229 0000DB9C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18230 0000DBA0 50                      	push rax
 18231 0000DBA1 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 18232 0000DBA5 50                      	push rax
 18233 0000DBA6 6A02                    	push 2
 18234 0000DBA8 488B0425[78010000]      	mov rax, qword [free_var_47]
 18235                                  	assert_closure(rax)
    42 0000DBB0 803805              <1>  cmp byte [%1], %2
    43 0000DBB3 0F8533530000        <1>  jne L_error_incorrect_type
 18236 0000DBB9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18237 0000DBBC FF5009                  	call SOB_CLOSURE_CODE(rax)
 18238 0000DBBF 50                      	push rax
 18239 0000DBC0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18240 0000DBC4 50                      	push rax
 18241 0000DBC5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18242 0000DBC9 50                      	push rax
 18243 0000DBCA 6A02                    	push 2
 18244 0000DBCC 488B0425[78010000]      	mov rax, qword [free_var_47]
 18245                                  	assert_closure(rax)
    42 0000DBD4 803805              <1>  cmp byte [%1], %2
    43 0000DBD7 0F850F530000        <1>  jne L_error_incorrect_type
 18246 0000DBDD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18247 0000DBE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18248 0000DBE3 50                      	push rax
 18249 0000DBE4 6A02                    	push 2
 18250 0000DBE6 488B4510                	mov rax, qword [rbp + 8 * 2]
 18251                                  
 18252 0000DBEA 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18253                                  
 18254 0000DBEE 488B00                                            	mov rax, qword[rax + 8 * 0]
 18255                                  	assert_closure(rax)
    42 0000DBF1 803805              <1>  cmp byte [%1], %2
    43 0000DBF4 0F85F2520000        <1>  jne L_error_incorrect_type
 18256 0000DBFA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18257 0000DBFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 18258                                  
 18259 0000DC00 483D[02000000]                  	cmp rax, sob_boolean_false
 18260                                  
 18261 0000DC06 0F84AA000000                    	je .L_if_else_0044
 18262 0000DC0C 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
 18263 0000DC10 50                      	push rax
 18264 0000DC11 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 18265 0000DC15 50                      	push rax
 18266 0000DC16 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18267 0000DC1A 50                      	push rax
 18268 0000DC1B 48B8-                   	mov rax,L_constants + 128
 18268 0000DC1D [8000000000000000] 
 18269 0000DC25 50                      	push rax
 18270 0000DC26 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18271 0000DC2A 50                      	push rax
 18272 0000DC2B 6A02                    	push 2
 18273 0000DC2D 488B0425[08030000]      	mov rax, qword [free_var_97]
 18274                                  	assert_closure(rax)
    42 0000DC35 803805              <1>  cmp byte [%1], %2
    43 0000DC38 0F85AE520000        <1>  jne L_error_incorrect_type
 18275 0000DC3E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18276 0000DC41 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18277 0000DC44 50                      	push rax
 18278 0000DC45 6A04                    	push 4
 18279 0000DC47 488B4510                	mov rax, qword [rbp + 8 * 2]
 18280                                  
 18281 0000DC4B 488B00                                            	mov rax, qword[rax + 8 * 0]
 18282                                  
 18283 0000DC4E 488B00                                            	mov rax, qword[rax + 8 * 0]
 18284 0000DC51 488B00                  	mov rax, qword [rax]
 18285                                  .L_applic_TC_0092:
 18286 0000DC54 803805                  	cmp byte [rax], T_closure
 18287 0000DC57 0F85504A0000            	jne L_code_ptr_error
 18288 0000DC5D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18289 0000DC61 53                      	push rbx
 18290 0000DC62 FF7508                  	push qword [rbp + 8]
 18291 0000DC65 FF7500                  	push qword [rbp]
 18292 0000DC68 488B4D18                	mov rcx, [rbp + 3 * 8]
 18293 0000DC6C 488B542418              	mov rdx, [rsp + 3 * 8]
 18294 0000DC71 488D7204                	lea rsi, [rdx + 4]
 18295 0000DC75 4C8D4EFF                	lea r9, [rsi - 1]
 18296 0000DC79 488D7903                	lea rdi, [rcx + 3]
 18297 0000DC7D 4D31C0                  	xor r8, r8
 18298                                  .L_tc_recycle_frame_loop_0092:
 18299 0000DC80 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18300 0000DC84 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18301 0000DC89 49FFC9                  	dec r9
 18302 0000DC8C 4D31C0                  	xor r8, r8
 18303 0000DC8F 48FFCF                  	dec rdi
 18304 0000DC92 48FFCE                  	dec rsi
 18305 0000DC95 4883FE00                	cmp rsi, 0
 18306 0000DC99 75E5                    	jne .L_tc_recycle_frame_loop_0092
 18307                                  .L_tc_recycle_frame_done_0092:
 18308                                  ;this pop rbp in sot to the right place
 18309 0000DC9B 4989C9                  	mov r9, rcx
 18310 0000DC9E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18311 0000DCA6 4C01CC                  	add rsp, r9
 18312 0000DCA9 5D                      	pop rbp
 18313 0000DCAA 488B4D00                	mov rcx, qword [rbp]
 18314 0000DCAE 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18315 0000DCB2 FFE3                    	jmp rbx
 18316                                  
 18317 0000DCB4 EB0A                            	jmp .L_if_end_0044
 18318                                  
 18319                                          	.L_if_else_0044:
 18320 0000DCB6 48B8-                   	mov rax,L_constants + 2
 18320 0000DCB8 [0200000000000000] 
 18321                                  
 18322                                          	.L_if_end_0044:
 18323                                  
 18324 0000DCC0 EB0A                            	jmp .L_if_end_0043
 18325                                  
 18326                                          	.L_if_else_0043:
 18327 0000DCC2 48B8-                   	mov rax,L_constants + 2
 18327 0000DCC4 [0200000000000000] 
 18328                                  
 18329                                          	.L_if_end_0043:
 18330                                  .L_or_end_000a:
 18331 0000DCCC C9                      	leave
 18332 0000DCCD C23000                  	ret 8 * (2 + 4)
 18333                                  .L_lambda_simple_end_007a:	; new closure is in rax
 18334 0000DCD0 50                      	push rax
 18335 0000DCD1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18336 0000DCD5 8F00                    	pop qword [rax]
 18337 0000DCD7 48B8-                   	mov rax, sob_void
 18337 0000DCD9 [0000000000000000] 
 18338                                  
 18339 0000DCE1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18340 0000DCE6 E80D3A0000              	call malloc
 18341 0000DCEB 50                      	push rax
 18342 0000DCEC BF08000000              	mov rdi, 8 * 1	; new rib
 18343 0000DCF1 E8023A0000              	call malloc
 18344 0000DCF6 50                      	push rax
 18345 0000DCF7 BF18000000              	mov rdi, 8 * 3	; extended env
 18346 0000DCFC E8F7390000              	call malloc
 18347 0000DD01 488B7D10                	mov rdi, ENV
 18348 0000DD05 BE00000000              	mov rsi, 0
 18349 0000DD0A BA01000000              	mov rdx, 1
 18350                                  .L_lambda_simple_env_loop_007b:	; ext_env[i + 1] <-- env[i]
 18351 0000DD0F 4883FE02                	cmp rsi, 2
 18352 0000DD13 7410                    	je .L_lambda_simple_env_end_007b
 18353 0000DD15 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18354 0000DD19 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18355 0000DD1D 48FFC6                  	inc rsi
 18356 0000DD20 48FFC2                  	inc rdx
 18357 0000DD23 EBEA                    	jmp .L_lambda_simple_env_loop_007b
 18358                                  .L_lambda_simple_env_end_007b:
 18359 0000DD25 5B                      	pop rbx
 18360 0000DD26 BE00000000              	mov rsi, 0
 18361                                  .L_lambda_simple_params_loop_007b:	; copy params
 18362 0000DD2B 4883FE01                	cmp rsi, 1
 18363 0000DD2F 740E                    	je .L_lambda_simple_params_end_007b
 18364 0000DD31 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18365 0000DD36 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18366 0000DD3A 48FFC6                  	inc rsi
 18367 0000DD3D EBEC                    	jmp .L_lambda_simple_params_loop_007b
 18368                                  .L_lambda_simple_params_end_007b:
 18369 0000DD3F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18370 0000DD42 4889C3                  	mov rbx, rax
 18371 0000DD45 58                      	pop rax
 18372 0000DD46 C60005                  	mov byte [rax], T_closure
 18373 0000DD49 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18374 0000DD4D 48C74009[5ADD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007b
 18375 0000DD55 E921020000              	jmp .L_lambda_simple_end_007b
 18376                                  .L_lambda_simple_code_007b:	; lambda-simple body
 18377 0000DD5A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18378 0000DD60 740B                    	je .L_lambda_simple_arity_check_ok_007b
 18379 0000DD62 FF742410                	push qword [rsp + 8 * 2]
 18380 0000DD66 6A02                    	push 2
 18381 0000DD68 E944390000              	jmp L_error_incorrect_arity_simple
 18382                                  .L_lambda_simple_arity_check_ok_007b:
 18383 0000DD6D C8000000                	enter 0, 0
 18384 0000DD71 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18385 0000DD75 50                      	push rax
 18386 0000DD76 6A01                    	push 1
 18387 0000DD78 488B0425[90000000]      	mov rax, qword [free_var_18]
 18388                                  	assert_closure(rax)
    42 0000DD80 803805              <1>  cmp byte [%1], %2
    43 0000DD83 0F8563510000        <1>  jne L_error_incorrect_type
 18389 0000DD89 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18390 0000DD8C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18391 0000DD8F 50                      	push rax
 18392 0000DD90 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18393 0000DD94 50                      	push rax
 18394 0000DD95 6A01                    	push 1
 18395 0000DD97 488B0425[90000000]      	mov rax, qword [free_var_18]
 18396                                  	assert_closure(rax)
    42 0000DD9F 803805              <1>  cmp byte [%1], %2
    43 0000DDA2 0F8544510000        <1>  jne L_error_incorrect_type
 18397 0000DDA8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18398 0000DDAB FF5009                  	call SOB_CLOSURE_CODE(rax)
 18399 0000DDAE 50                      	push rax
 18400 0000DDAF 6A02                    	push 2
 18401 0000DDB1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18402 0000DDB6 E83D390000              	call malloc
 18403 0000DDBB 50                      	push rax
 18404 0000DDBC BF10000000              	mov rdi, 8 * 2	; new rib
 18405 0000DDC1 E832390000              	call malloc
 18406 0000DDC6 50                      	push rax
 18407 0000DDC7 BF20000000              	mov rdi, 8 * 4	; extended env
 18408 0000DDCC E827390000              	call malloc
 18409 0000DDD1 488B7D10                	mov rdi, ENV
 18410 0000DDD5 BE00000000              	mov rsi, 0
 18411 0000DDDA BA01000000              	mov rdx, 1
 18412                                  .L_lambda_simple_env_loop_007c:	; ext_env[i + 1] <-- env[i]
 18413 0000DDDF 4883FE03                	cmp rsi, 3
 18414 0000DDE3 7410                    	je .L_lambda_simple_env_end_007c
 18415 0000DDE5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18416 0000DDE9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18417 0000DDED 48FFC6                  	inc rsi
 18418 0000DDF0 48FFC2                  	inc rdx
 18419 0000DDF3 EBEA                    	jmp .L_lambda_simple_env_loop_007c
 18420                                  .L_lambda_simple_env_end_007c:
 18421 0000DDF5 5B                      	pop rbx
 18422 0000DDF6 BE00000000              	mov rsi, 0
 18423                                  .L_lambda_simple_params_loop_007c:	; copy params
 18424 0000DDFB 4883FE02                	cmp rsi, 2
 18425 0000DDFF 740E                    	je .L_lambda_simple_params_end_007c
 18426 0000DE01 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18427 0000DE06 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18428 0000DE0A 48FFC6                  	inc rsi
 18429 0000DE0D EBEC                    	jmp .L_lambda_simple_params_loop_007c
 18430                                  .L_lambda_simple_params_end_007c:
 18431 0000DE0F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18432 0000DE12 4889C3                  	mov rbx, rax
 18433 0000DE15 58                      	pop rax
 18434 0000DE16 C60005                  	mov byte [rax], T_closure
 18435 0000DE19 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18436 0000DE1D 48C74009[2ADE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007c
 18437 0000DE25 E9ED000000              	jmp .L_lambda_simple_end_007c
 18438                                  .L_lambda_simple_code_007c:	; lambda-simple body
 18439 0000DE2A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18440 0000DE30 740B                    	je .L_lambda_simple_arity_check_ok_007c
 18441 0000DE32 FF742410                	push qword [rsp + 8 * 2]
 18442 0000DE36 6A02                    	push 2
 18443 0000DE38 E974380000              	jmp L_error_incorrect_arity_simple
 18444                                  .L_lambda_simple_arity_check_ok_007c:
 18445 0000DE3D C8000000                	enter 0, 0
 18446 0000DE41 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18447 0000DE45 50                      	push rax
 18448 0000DE46 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18449 0000DE4A 50                      	push rax
 18450 0000DE4B 6A02                    	push 2
 18451 0000DE4D 488B0425[50030000]      	mov rax, qword [free_var_106]
 18452                                  	assert_closure(rax)
    42 0000DE55 803805              <1>  cmp byte [%1], %2
    43 0000DE58 0F858E500000        <1>  jne L_error_incorrect_type
 18453 0000DE5E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18454 0000DE61 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18455                                  
 18456 0000DE64 483D[02000000]                  	cmp rax, sob_boolean_false
 18457                                  
 18458 0000DE6A 0F8499000000                    	je .L_if_else_0045
 18459 0000DE70 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18460 0000DE74 50                      	push rax
 18461 0000DE75 488B4510                	mov rax, qword [rbp + 8 * 2]
 18462                                  
 18463 0000DE79 488B00                                            	mov rax, qword[rax + 8 * 0]
 18464                                  
 18465 0000DE7C 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18466 0000DE80 50                      	push rax
 18467 0000DE81 488B4510                	mov rax, qword [rbp + 8 * 2]
 18468                                  
 18469 0000DE85 488B00                                            	mov rax, qword[rax + 8 * 0]
 18470                                  
 18471 0000DE88 488B00                                            	mov rax, qword[rax + 8 * 0]
 18472 0000DE8B 50                      	push rax
 18473 0000DE8C 48B8-                   	mov rax,L_constants + 32
 18473 0000DE8E [2000000000000000] 
 18474 0000DE96 50                      	push rax
 18475 0000DE97 6A04                    	push 4
 18476 0000DE99 488B4510                	mov rax, qword [rbp + 8 * 2]
 18477                                  
 18478 0000DE9D 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18479                                  
 18480 0000DEA1 488B00                                            	mov rax, qword[rax + 8 * 0]
 18481 0000DEA4 488B00                  	mov rax, qword [rax]
 18482                                  .L_applic_TC_0093:
 18483 0000DEA7 803805                  	cmp byte [rax], T_closure
 18484 0000DEAA 0F85FD470000            	jne L_code_ptr_error
 18485 0000DEB0 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18486 0000DEB4 53                      	push rbx
 18487 0000DEB5 FF7508                  	push qword [rbp + 8]
 18488 0000DEB8 FF7500                  	push qword [rbp]
 18489 0000DEBB 488B4D18                	mov rcx, [rbp + 3 * 8]
 18490 0000DEBF 488B542418              	mov rdx, [rsp + 3 * 8]
 18491 0000DEC4 488D7204                	lea rsi, [rdx + 4]
 18492 0000DEC8 4C8D4EFF                	lea r9, [rsi - 1]
 18493 0000DECC 488D7903                	lea rdi, [rcx + 3]
 18494 0000DED0 4D31C0                  	xor r8, r8
 18495                                  .L_tc_recycle_frame_loop_0093:
 18496 0000DED3 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18497 0000DED7 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18498 0000DEDC 49FFC9                  	dec r9
 18499 0000DEDF 4D31C0                  	xor r8, r8
 18500 0000DEE2 48FFCF                  	dec rdi
 18501 0000DEE5 48FFCE                  	dec rsi
 18502 0000DEE8 4883FE00                	cmp rsi, 0
 18503 0000DEEC 75E5                    	jne .L_tc_recycle_frame_loop_0093
 18504                                  .L_tc_recycle_frame_done_0093:
 18505                                  ;this pop rbp in sot to the right place
 18506 0000DEEE 4989C9                  	mov r9, rcx
 18507 0000DEF1 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18508 0000DEF9 4C01CC                  	add rsp, r9
 18509 0000DEFC 5D                      	pop rbp
 18510 0000DEFD 488B4D00                	mov rcx, qword [rbp]
 18511 0000DF01 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18512 0000DF05 FFE3                    	jmp rbx
 18513                                  
 18514 0000DF07 EB0A                            	jmp .L_if_end_0045
 18515                                  
 18516                                          	.L_if_else_0045:
 18517 0000DF09 48B8-                   	mov rax,L_constants + 2
 18517 0000DF0B [0200000000000000] 
 18518                                  
 18519                                          	.L_if_end_0045:
 18520 0000DF13 C9                      	leave
 18521 0000DF14 C22000                  	ret 8 * (2 + 2)
 18522                                  .L_lambda_simple_end_007c:	; new closure is in rax
 18523                                  .L_applic_TC_0094:
 18524 0000DF17 803805                  	cmp byte [rax], T_closure
 18525 0000DF1A 0F858D470000            	jne L_code_ptr_error
 18526 0000DF20 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18527 0000DF24 53                      	push rbx
 18528 0000DF25 FF7508                  	push qword [rbp + 8]
 18529 0000DF28 FF7500                  	push qword [rbp]
 18530 0000DF2B 488B4D18                	mov rcx, [rbp + 3 * 8]
 18531 0000DF2F 488B542418              	mov rdx, [rsp + 3 * 8]
 18532 0000DF34 488D7204                	lea rsi, [rdx + 4]
 18533 0000DF38 4C8D4EFF                	lea r9, [rsi - 1]
 18534 0000DF3C 488D7903                	lea rdi, [rcx + 3]
 18535 0000DF40 4D31C0                  	xor r8, r8
 18536                                  .L_tc_recycle_frame_loop_0094:
 18537 0000DF43 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18538 0000DF47 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18539 0000DF4C 49FFC9                  	dec r9
 18540 0000DF4F 4D31C0                  	xor r8, r8
 18541 0000DF52 48FFCF                  	dec rdi
 18542 0000DF55 48FFCE                  	dec rsi
 18543 0000DF58 4883FE00                	cmp rsi, 0
 18544 0000DF5C 75E5                    	jne .L_tc_recycle_frame_loop_0094
 18545                                  .L_tc_recycle_frame_done_0094:
 18546                                  ;this pop rbp in sot to the right place
 18547 0000DF5E 4989C9                  	mov r9, rcx
 18548 0000DF61 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18549 0000DF69 4C01CC                  	add rsp, r9
 18550 0000DF6C 5D                      	pop rbp
 18551 0000DF6D 488B4D00                	mov rcx, qword [rbp]
 18552 0000DF71 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18553 0000DF75 FFE3                    	jmp rbx
 18554 0000DF77 C9                      	leave
 18555 0000DF78 C22000                  	ret 8 * (2 + 2)
 18556                                  .L_lambda_simple_end_007b:	; new closure is in rax
 18557 0000DF7B 50                      	push rax
 18558 0000DF7C 6A01                    	push 1
 18559 0000DF7E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18560 0000DF83 E870370000              	call malloc
 18561 0000DF88 50                      	push rax
 18562 0000DF89 BF08000000              	mov rdi, 8 * 1	; new rib
 18563 0000DF8E E865370000              	call malloc
 18564 0000DF93 50                      	push rax
 18565 0000DF94 BF18000000              	mov rdi, 8 * 3	; extended env
 18566 0000DF99 E85A370000              	call malloc
 18567 0000DF9E 488B7D10                	mov rdi, ENV
 18568 0000DFA2 BE00000000              	mov rsi, 0
 18569 0000DFA7 BA01000000              	mov rdx, 1
 18570                                  .L_lambda_simple_env_loop_007d:	; ext_env[i + 1] <-- env[i]
 18571 0000DFAC 4883FE02                	cmp rsi, 2
 18572 0000DFB0 7410                    	je .L_lambda_simple_env_end_007d
 18573 0000DFB2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18574 0000DFB6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18575 0000DFBA 48FFC6                  	inc rsi
 18576 0000DFBD 48FFC2                  	inc rdx
 18577 0000DFC0 EBEA                    	jmp .L_lambda_simple_env_loop_007d
 18578                                  .L_lambda_simple_env_end_007d:
 18579 0000DFC2 5B                      	pop rbx
 18580 0000DFC3 BE00000000              	mov rsi, 0
 18581                                  .L_lambda_simple_params_loop_007d:	; copy params
 18582 0000DFC8 4883FE01                	cmp rsi, 1
 18583 0000DFCC 740E                    	je .L_lambda_simple_params_end_007d
 18584 0000DFCE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18585 0000DFD3 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18586 0000DFD7 48FFC6                  	inc rsi
 18587 0000DFDA EBEC                    	jmp .L_lambda_simple_params_loop_007d
 18588                                  .L_lambda_simple_params_end_007d:
 18589 0000DFDC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18590 0000DFDF 4889C3                  	mov rbx, rax
 18591 0000DFE2 58                      	pop rax
 18592 0000DFE3 C60005                  	mov byte [rax], T_closure
 18593 0000DFE6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18594 0000DFEA 48C74009[F7DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007d
 18595 0000DFF2 E90F050000              	jmp .L_lambda_simple_end_007d
 18596                                  .L_lambda_simple_code_007d:	; lambda-simple body
 18597 0000DFF7 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18598 0000DFFD 740B                    	je .L_lambda_simple_arity_check_ok_007d
 18599 0000DFFF FF742410                	push qword [rsp + 8 * 2]
 18600 0000E003 6A01                    	push 1
 18601 0000E005 E9A7360000              	jmp L_error_incorrect_arity_simple
 18602                                  .L_lambda_simple_arity_check_ok_007d:
 18603 0000E00A C8000000                	enter 0, 0
 18604 0000E00E 48B8-                   	mov rax,L_constants + 23
 18604 0000E010 [1700000000000000] 
 18605 0000E018 50                      	push rax
 18606 0000E019 6A01                    	push 1
 18607 0000E01B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18608 0000E020 E8D3360000              	call malloc
 18609 0000E025 50                      	push rax
 18610 0000E026 BF08000000              	mov rdi, 8 * 1	; new rib
 18611 0000E02B E8C8360000              	call malloc
 18612 0000E030 50                      	push rax
 18613 0000E031 BF20000000              	mov rdi, 8 * 4	; extended env
 18614 0000E036 E8BD360000              	call malloc
 18615 0000E03B 488B7D10                	mov rdi, ENV
 18616 0000E03F BE00000000              	mov rsi, 0
 18617 0000E044 BA01000000              	mov rdx, 1
 18618                                  .L_lambda_simple_env_loop_007e:	; ext_env[i + 1] <-- env[i]
 18619 0000E049 4883FE03                	cmp rsi, 3
 18620 0000E04D 7410                    	je .L_lambda_simple_env_end_007e
 18621 0000E04F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18622 0000E053 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18623 0000E057 48FFC6                  	inc rsi
 18624 0000E05A 48FFC2                  	inc rdx
 18625 0000E05D EBEA                    	jmp .L_lambda_simple_env_loop_007e
 18626                                  .L_lambda_simple_env_end_007e:
 18627 0000E05F 5B                      	pop rbx
 18628 0000E060 BE00000000              	mov rsi, 0
 18629                                  .L_lambda_simple_params_loop_007e:	; copy params
 18630 0000E065 4883FE01                	cmp rsi, 1
 18631 0000E069 740E                    	je .L_lambda_simple_params_end_007e
 18632 0000E06B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18633 0000E070 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18634 0000E074 48FFC6                  	inc rsi
 18635 0000E077 EBEC                    	jmp .L_lambda_simple_params_loop_007e
 18636                                  .L_lambda_simple_params_end_007e:
 18637 0000E079 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18638 0000E07C 4889C3                  	mov rbx, rax
 18639 0000E07F 58                      	pop rax
 18640 0000E080 C60005                  	mov byte [rax], T_closure
 18641 0000E083 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18642 0000E087 48C74009[94E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007e
 18643 0000E08F E90E040000              	jmp .L_lambda_simple_end_007e
 18644                                  .L_lambda_simple_code_007e:	; lambda-simple body
 18645 0000E094 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18646 0000E09A 740B                    	je .L_lambda_simple_arity_check_ok_007e
 18647 0000E09C FF742410                	push qword [rsp + 8 * 2]
 18648 0000E0A0 6A01                    	push 1
 18649 0000E0A2 E90A360000              	jmp L_error_incorrect_arity_simple
 18650                                  .L_lambda_simple_arity_check_ok_007e:
 18651 0000E0A7 C8000000                	enter 0, 0
 18652 0000E0AB BF08000000              	mov rdi, 8
 18653 0000E0B0 E843360000              	call malloc
 18654 0000E0B5 488B5D20                	mov rbx, PARAM(0)
 18655 0000E0B9 488918                  	mov qword [rax], rbx
 18656 0000E0BC 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18657                                  
 18658 0000E0C0 48B8-                            	mov rax, sob_void
 18658 0000E0C2 [0000000000000000] 
 18659                                  
 18660 0000E0CA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18661 0000E0CF E824360000              	call malloc
 18662 0000E0D4 50                      	push rax
 18663 0000E0D5 BF08000000              	mov rdi, 8 * 1	; new rib
 18664 0000E0DA E819360000              	call malloc
 18665 0000E0DF 50                      	push rax
 18666 0000E0E0 BF28000000              	mov rdi, 8 * 5	; extended env
 18667 0000E0E5 E80E360000              	call malloc
 18668 0000E0EA 488B7D10                	mov rdi, ENV
 18669 0000E0EE BE00000000              	mov rsi, 0
 18670 0000E0F3 BA01000000              	mov rdx, 1
 18671                                  .L_lambda_simple_env_loop_007f:	; ext_env[i + 1] <-- env[i]
 18672 0000E0F8 4883FE04                	cmp rsi, 4
 18673 0000E0FC 7410                    	je .L_lambda_simple_env_end_007f
 18674 0000E0FE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18675 0000E102 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18676 0000E106 48FFC6                  	inc rsi
 18677 0000E109 48FFC2                  	inc rdx
 18678 0000E10C EBEA                    	jmp .L_lambda_simple_env_loop_007f
 18679                                  .L_lambda_simple_env_end_007f:
 18680 0000E10E 5B                      	pop rbx
 18681 0000E10F BE00000000              	mov rsi, 0
 18682                                  .L_lambda_simple_params_loop_007f:	; copy params
 18683 0000E114 4883FE01                	cmp rsi, 1
 18684 0000E118 740E                    	je .L_lambda_simple_params_end_007f
 18685 0000E11A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18686 0000E11F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18687 0000E123 48FFC6                  	inc rsi
 18688 0000E126 EBEC                    	jmp .L_lambda_simple_params_loop_007f
 18689                                  .L_lambda_simple_params_end_007f:
 18690 0000E128 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18691 0000E12B 4889C3                  	mov rbx, rax
 18692 0000E12E 58                      	pop rax
 18693 0000E12F C60005                  	mov byte [rax], T_closure
 18694 0000E132 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18695 0000E136 48C74009[43E10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_007f
 18696 0000E13E E94A010000              	jmp .L_lambda_simple_end_007f
 18697                                  .L_lambda_simple_code_007f:	; lambda-simple body
 18698 0000E143 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18699 0000E149 740B                    	je .L_lambda_simple_arity_check_ok_007f
 18700 0000E14B FF742410                	push qword [rsp + 8 * 2]
 18701 0000E14F 6A02                    	push 2
 18702 0000E151 E95B350000              	jmp L_error_incorrect_arity_simple
 18703                                  .L_lambda_simple_arity_check_ok_007f:
 18704 0000E156 C8000000                	enter 0, 0
 18705 0000E15A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18706 0000E15E 50                      	push rax
 18707 0000E15F 6A01                    	push 1
 18708 0000E161 488B0425[00000000]      	mov rax, qword [free_var_0]
 18709                                  	assert_closure(rax)
    42 0000E169 803805              <1>  cmp byte [%1], %2
    43 0000E16C 0F857A4D0000        <1>  jne L_error_incorrect_type
 18710 0000E172 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18711 0000E175 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18712 0000E178 483D[02000000]          	cmp rax, sob_boolean_false
 18713 0000E17E 0F8505010000            	jne .L_or_end_000b
 18714 0000E184 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18715 0000E188 50                      	push rax
 18716 0000E189 6A01                    	push 1
 18717 0000E18B 488B0425[80000000]      	mov rax, qword [free_var_16]
 18718                                  	assert_closure(rax)
    42 0000E193 803805              <1>  cmp byte [%1], %2
    43 0000E196 0F85504D0000        <1>  jne L_error_incorrect_type
 18719 0000E19C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18720 0000E19F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18721 0000E1A2 50                      	push rax
 18722 0000E1A3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18723 0000E1A7 50                      	push rax
 18724 0000E1A8 6A02                    	push 2
 18725 0000E1AA 488B4510                	mov rax, qword [rbp + 8 * 2]
 18726                                  
 18727 0000E1AE 488B4008                                          	mov rax, qword[rax + 8 * 1]
 18728                                  
 18729 0000E1B2 488B00                                            	mov rax, qword[rax + 8 * 0]
 18730                                  	assert_closure(rax)
    42 0000E1B5 803805              <1>  cmp byte [%1], %2
    43 0000E1B8 0F852E4D0000        <1>  jne L_error_incorrect_type
 18731 0000E1BE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18732 0000E1C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18733                                  
 18734 0000E1C4 483D[02000000]                  	cmp rax, sob_boolean_false
 18735                                  
 18736 0000E1CA 0F84AF000000                    	je .L_if_else_0046
 18737 0000E1D0 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18738 0000E1D4 50                      	push rax
 18739 0000E1D5 6A01                    	push 1
 18740 0000E1D7 488B0425[88000000]      	mov rax, qword [free_var_17]
 18741                                  	assert_closure(rax)
    42 0000E1DF 803805              <1>  cmp byte [%1], %2
    43 0000E1E2 0F85044D0000        <1>  jne L_error_incorrect_type
 18742 0000E1E8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18743 0000E1EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 18744 0000E1EE 50                      	push rax
 18745 0000E1EF 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18746 0000E1F3 50                      	push rax
 18747 0000E1F4 6A01                    	push 1
 18748 0000E1F6 488B0425[80000000]      	mov rax, qword [free_var_16]
 18749                                  	assert_closure(rax)
    42 0000E1FE 803805              <1>  cmp byte [%1], %2
    43 0000E201 0F85E54C0000        <1>  jne L_error_incorrect_type
 18750 0000E207 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 18751 0000E20A FF5009                  	call SOB_CLOSURE_CODE(rax)
 18752 0000E20D 50                      	push rax
 18753 0000E20E 6A02                    	push 2
 18754 0000E210 488B4510                	mov rax, qword [rbp + 8 * 2]
 18755                                  
 18756 0000E214 488B00                                            	mov rax, qword[rax + 8 * 0]
 18757                                  
 18758 0000E217 488B00                                            	mov rax, qword[rax + 8 * 0]
 18759 0000E21A 488B00                  	mov rax, qword [rax]
 18760                                  .L_applic_TC_0095:
 18761 0000E21D 803805                  	cmp byte [rax], T_closure
 18762 0000E220 0F8587440000            	jne L_code_ptr_error
 18763 0000E226 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18764 0000E22A 53                      	push rbx
 18765 0000E22B FF7508                  	push qword [rbp + 8]
 18766 0000E22E FF7500                  	push qword [rbp]
 18767 0000E231 488B4D18                	mov rcx, [rbp + 3 * 8]
 18768 0000E235 488B542418              	mov rdx, [rsp + 3 * 8]
 18769 0000E23A 488D7204                	lea rsi, [rdx + 4]
 18770 0000E23E 4C8D4EFF                	lea r9, [rsi - 1]
 18771 0000E242 488D7903                	lea rdi, [rcx + 3]
 18772 0000E246 4D31C0                  	xor r8, r8
 18773                                  .L_tc_recycle_frame_loop_0095:
 18774 0000E249 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18775 0000E24D 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18776 0000E252 49FFC9                  	dec r9
 18777 0000E255 4D31C0                  	xor r8, r8
 18778 0000E258 48FFCF                  	dec rdi
 18779 0000E25B 48FFCE                  	dec rsi
 18780 0000E25E 4883FE00                	cmp rsi, 0
 18781 0000E262 75E5                    	jne .L_tc_recycle_frame_loop_0095
 18782                                  .L_tc_recycle_frame_done_0095:
 18783                                  ;this pop rbp in sot to the right place
 18784 0000E264 4989C9                  	mov r9, rcx
 18785 0000E267 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18786 0000E26F 4C01CC                  	add rsp, r9
 18787 0000E272 5D                      	pop rbp
 18788 0000E273 488B4D00                	mov rcx, qword [rbp]
 18789 0000E277 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18790 0000E27B FFE3                    	jmp rbx
 18791                                  
 18792 0000E27D EB0A                            	jmp .L_if_end_0046
 18793                                  
 18794                                          	.L_if_else_0046:
 18795 0000E27F 48B8-                   	mov rax,L_constants + 2
 18795 0000E281 [0200000000000000] 
 18796                                  
 18797                                          	.L_if_end_0046:
 18798                                  .L_or_end_000b:
 18799 0000E289 C9                      	leave
 18800 0000E28A C22000                  	ret 8 * (2 + 2)
 18801                                  .L_lambda_simple_end_007f:	; new closure is in rax
 18802 0000E28D 50                      	push rax
 18803 0000E28E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18804 0000E292 8F00                    	pop qword [rax]
 18805 0000E294 48B8-                   	mov rax, sob_void
 18805 0000E296 [0000000000000000] 
 18806                                  
 18807 0000E29E BF11000000              	mov rdi, (1 + 8 + 8)
 18808 0000E2A3 E850340000              	call malloc
 18809 0000E2A8 50                      	push rax
 18810 0000E2A9 BF08000000              	mov rdi, 8 * 1
 18811 0000E2AE E845340000              	call malloc
 18812 0000E2B3 50                      	push rax
 18813 0000E2B4 BF28000000              	mov rdi, 8 * 5
 18814 0000E2B9 E83A340000              	call malloc
 18815 0000E2BE 488B7D10                	mov rdi, ENV
 18816 0000E2C2 4831F6                  	xor rsi, rsi
 18817 0000E2C5 4831D2                  	xor rdx, rdx
 18818 0000E2C8 48FFC2                  	inc rdx
 18819                                  	.L_lambda_opt_env_loop_0014:
 18820                                  
 18821 0000E2CB 4883FE04                        	cmp rsi, 4
 18822                                  
 18823 0000E2CF 7412                            	je .L_lambda_opt_env_end_0014
 18824 0000E2D1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18825 0000E2D5 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18826 0000E2D9 4883C201                	add rdx, 1
 18827 0000E2DD 4883C601                	add rsi, 1
 18828 0000E2E1 EBE8                    	jmp .L_lambda_opt_env_loop_0014
 18829                                  
 18830                                          	.L_lambda_opt_env_end_0014:
 18831 0000E2E3 5B                      	pop rbx
 18832 0000E2E4 4831F6                  	xor rsi, rsi
 18833                                  	.L_lambda_opt_params_loop_0014:
 18834                                  
 18835 0000E2E7 4883FE01                        	cmp rsi, 1
 18836                                  
 18837 0000E2EB 740F                            	je .L_lambda_opt_params_end_0014
 18838 0000E2ED 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18839 0000E2F2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18840 0000E2F6 4883C601                	add rsi, 1
 18841 0000E2FA EBEB                    	jmp .L_lambda_opt_params_loop_0014
 18842                                  
 18843                                          	.L_lambda_opt_params_end_0014:
 18844 0000E2FC 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 18845 0000E2FF 4889C3                  	mov rbx, rax
 18846 0000E302 58                      	pop rax
 18847 0000E303 C60005                  	mov byte [rax], T_closure
 18848 0000E306 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18849 0000E30A 48C74009[17E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0014
 18850                                  
 18851 0000E312 E987010000                      	jmp .L_lambda_opt_end_0014
 18852                                  
 18853                                          	.L_lambda_opt_code_0014:
 18854                                  
 18855 0000E317 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 18856                                  
 18857 0000E31D 740D                            	je .L_lambda_opt_arity_check_exact_0014  ;same num_of_args
 18858                                  
 18859 0000E31F 7F65                            	jg .L_lambda_opt_arity_check_more_0014  ;greater num_of_args
 18860 0000E321 FF742410                	push qword [rsp + 8 * 2]
 18861 0000E325 6A01                    	push 1
 18862 0000E327 E999330000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 18863                                  .L_lambda_opt_arity_check_exact_0014:
 18864 0000E32C 4883EC08                	sub rsp, 8 * 1
 18865 0000E330 488D7F10                	lea rdi, [rdi + (8 * 2)]
 18866 0000E334 4889E7                  	mov rdi, rsp 
 18867 0000E337 488B4708                	mov rax, qword [rdi + 8]
 18868 0000E33B 488907                  	mov qword [rdi], rax
 18869 0000E33E 488D7F08                	lea rdi, [rdi + 8]
 18870 0000E342 488B4708                	mov rax, qword [rdi + 8]
 18871 0000E346 488907                  	mov qword [rdi], rax
 18872 0000E349 488D7F08                	lea rdi, [rdi + 8]
 18873 0000E34D 488B4708                	mov rax, qword [rdi + 8]
 18874 0000E351 4889C1                  	mov rcx, rax
 18875 0000E354 4883C001                	add rax, 1
 18876 0000E358 488907                  	mov qword [rdi], rax
 18877 0000E35B 488D7F08                	lea rdi, [rdi + 8]
 18878                                  	.L_lambda_opt_stack_shrink_loop_003a:
 18879 0000E35F 4883F900                	cmp rcx, 0
 18880 0000E363 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_003a
 18881 0000E365 4883E901                	sub rcx, 1
 18882 0000E369 488D4010                	lea rax, [rax + (8 * 2)]
 18883 0000E36D 488B4708                	mov rax, qword [rdi + 8]
 18884 0000E371 488907                  	mov qword [rdi], rax
 18885 0000E374 488D7F08                	lea rdi, [rdi + 8]
 18886 0000E378 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_003a
 18887                                  
 18888                                          	.L_lambda_opt_stack_shrink_loop_exit_003a:
 18889 0000E37A 48C707[01000000]        	mov qword [rdi], sob_nil
 18890 0000E381 E997000000              	jmp .L_lambda_opt_stack_adjusted_0014
 18891                                  
 18892                                          	.L_lambda_opt_arity_check_more_0014:
 18893 0000E386 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 18894 0000E38B 488D4EFF                	lea rcx, [rsi - 1]
 18895 0000E38F 49B8-                   	mov r8, sob_nil
 18895 0000E391 [0100000000000000] 
 18896 0000E399 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 18897 0000E39E 4889F2                  	mov rdx, rsi
 18898                                  	.L_lambda_opt_stack_shrink_loop_003b:
 18899 0000E3A1 4883F900                	cmp rcx, 0
 18900 0000E3A5 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_003b
 18901 0000E3A7 BF11000000              	mov rdi, 1 + (8 * 2)
 18902 0000E3AC E847330000              	call malloc
 18903 0000E3B1 C60021                  	mov byte [rax], T_pair
 18904 0000E3B4 488B1E                  	mov rbx, qword [rsi]
 18905 0000E3B7 48895801                	mov SOB_PAIR_CAR(rax), rbx
 18906 0000E3BB 4C894009                	mov SOB_PAIR_CDR(rax), r8
 18907 0000E3BF 4883C6F8                	add rsi, -8
 18908 0000E3C3 4883E901                	sub rcx, 1
 18909 0000E3C7 4989C0                  	mov r8, rax
 18910 0000E3CA EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_003b
 18911                                  
 18912                                          	.L_lambda_opt_stack_shrink_loop_exit_003b:
 18913 0000E3CC 4C8902                  	mov qword [rdx], r8
 18914 0000E3CF 4883EA08                	sub rdx, 8 * 1
 18915 0000E3D3 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 18916                                  
 18917 0000E3D8 B901000000                      	mov rcx, 1 
 18918                                  
 18919                                          	.L_lambda_opt_stack_shrink_loop_003c:
 18920 0000E3DD 4883F900                	cmp rcx, 0
 18921 0000E3E1 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_003c
 18922 0000E3E3 488B06                  	mov rax, qword [rsi]
 18923 0000E3E6 488902                  	mov qword [rdx], rax
 18924 0000E3E9 488D76F8                	lea rsi, [rsi - 8]
 18925 0000E3ED 4883C2F8                	add rdx, -8
 18926 0000E3F1 4883C1FF                	add rcx, -1
 18927 0000E3F5 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_003c
 18928                                  
 18929                                          	.L_lambda_opt_stack_shrink_loop_exit_003c:
 18930                                  
 18931 0000E3F7 48C70202000000                  	mov qword [rdx], 1 + 1
 18932 0000E3FE 4883C6F8                	add rsi, -8
 18933 0000E402 4883C2F8                	add rdx, -8
 18934 0000E406 488B06                  	mov rax, qword [rsi]
 18935 0000E409 488902                  	mov qword [rdx], rax
 18936 0000E40C 4883C2F8                	add rdx, -8
 18937 0000E410 488D76F8                	lea rsi, [rsi - 8]
 18938 0000E414 488B06                  	mov rax, qword [rsi]
 18939 0000E417 488902                  	mov qword [rdx], rax
 18940 0000E41A 4889D4                  	mov rsp, rdx
 18941                                  	.L_lambda_opt_stack_adjusted_0014:
 18942 0000E41D C8000000                	enter 0, 0
 18943 0000E421 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 18944 0000E425 50                      	push rax
 18945 0000E426 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 18946 0000E42A 50                      	push rax
 18947 0000E42B 6A02                    	push 2
 18948 0000E42D 488B4510                	mov rax, qword [rbp + 8 * 2]
 18949                                  
 18950 0000E431 488B00                                            	mov rax, qword[rax + 8 * 0]
 18951                                  
 18952 0000E434 488B00                                            	mov rax, qword[rax + 8 * 0]
 18953 0000E437 488B00                  	mov rax, qword [rax]
 18954                                  .L_applic_TC_0096:
 18955 0000E43A 803805                  	cmp byte [rax], T_closure
 18956 0000E43D 0F856A420000            	jne L_code_ptr_error
 18957 0000E443 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18958 0000E447 53                      	push rbx
 18959 0000E448 FF7508                  	push qword [rbp + 8]
 18960 0000E44B FF7500                  	push qword [rbp]
 18961 0000E44E 488B4D18                	mov rcx, [rbp + 3 * 8]
 18962 0000E452 488B542418              	mov rdx, [rsp + 3 * 8]
 18963 0000E457 488D7204                	lea rsi, [rdx + 4]
 18964 0000E45B 4C8D4EFF                	lea r9, [rsi - 1]
 18965 0000E45F 488D7903                	lea rdi, [rcx + 3]
 18966 0000E463 4D31C0                  	xor r8, r8
 18967                                  .L_tc_recycle_frame_loop_0096:
 18968 0000E466 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 18969 0000E46A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 18970 0000E46F 49FFC9                  	dec r9
 18971 0000E472 4D31C0                  	xor r8, r8
 18972 0000E475 48FFCF                  	dec rdi
 18973 0000E478 48FFCE                  	dec rsi
 18974 0000E47B 4883FE00                	cmp rsi, 0
 18975 0000E47F 75E5                    	jne .L_tc_recycle_frame_loop_0096
 18976                                  .L_tc_recycle_frame_done_0096:
 18977                                  ;this pop rbp in sot to the right place
 18978 0000E481 4989C9                  	mov r9, rcx
 18979 0000E484 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 18980 0000E48C 4C01CC                  	add rsp, r9
 18981 0000E48F 5D                      	pop rbp
 18982 0000E490 488B4D00                	mov rcx, qword [rbp]
 18983 0000E494 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 18984 0000E498 FFE3                    	jmp rbx
 18985 0000E49A C9                      	leave
 18986 0000E49B C22000                  	ret 8 * (2 + 2)
 18987                                  .L_lambda_opt_end_0014:	; new closure is in rax
 18988 0000E49E C9                      	leave
 18989 0000E49F C21800                  	ret 8 * (2 + 1)
 18990                                  .L_lambda_simple_end_007e:	; new closure is in rax
 18991                                  .L_applic_TC_0097:
 18992 0000E4A2 803805                  	cmp byte [rax], T_closure
 18993 0000E4A5 0F8502420000            	jne L_code_ptr_error
 18994 0000E4AB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 18995 0000E4AF 53                      	push rbx
 18996 0000E4B0 FF7508                  	push qword [rbp + 8]
 18997 0000E4B3 FF7500                  	push qword [rbp]
 18998 0000E4B6 488B4D18                	mov rcx, [rbp + 3 * 8]
 18999 0000E4BA 488B542418              	mov rdx, [rsp + 3 * 8]
 19000 0000E4BF 488D7204                	lea rsi, [rdx + 4]
 19001 0000E4C3 4C8D4EFF                	lea r9, [rsi - 1]
 19002 0000E4C7 488D7903                	lea rdi, [rcx + 3]
 19003 0000E4CB 4D31C0                  	xor r8, r8
 19004                                  .L_tc_recycle_frame_loop_0097:
 19005 0000E4CE 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19006 0000E4D2 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19007 0000E4D7 49FFC9                  	dec r9
 19008 0000E4DA 4D31C0                  	xor r8, r8
 19009 0000E4DD 48FFCF                  	dec rdi
 19010 0000E4E0 48FFCE                  	dec rsi
 19011 0000E4E3 4883FE00                	cmp rsi, 0
 19012 0000E4E7 75E5                    	jne .L_tc_recycle_frame_loop_0097
 19013                                  .L_tc_recycle_frame_done_0097:
 19014                                  ;this pop rbp in sot to the right place
 19015 0000E4E9 4989C9                  	mov r9, rcx
 19016 0000E4EC 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19017 0000E4F4 4C01CC                  	add rsp, r9
 19018 0000E4F7 5D                      	pop rbp
 19019 0000E4F8 488B4D00                	mov rcx, qword [rbp]
 19020 0000E4FC 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19021 0000E500 FFE3                    	jmp rbx
 19022 0000E502 C9                      	leave
 19023 0000E503 C21800                  	ret 8 * (2 + 1)
 19024                                  .L_lambda_simple_end_007d:	; new closure is in rax
 19025                                  .L_applic_TC_0098:
 19026 0000E506 803805                  	cmp byte [rax], T_closure
 19027 0000E509 0F859E410000            	jne L_code_ptr_error
 19028 0000E50F 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19029 0000E513 53                      	push rbx
 19030 0000E514 FF7508                  	push qword [rbp + 8]
 19031 0000E517 FF7500                  	push qword [rbp]
 19032 0000E51A 488B4D18                	mov rcx, [rbp + 3 * 8]
 19033 0000E51E 488B542418              	mov rdx, [rsp + 3 * 8]
 19034 0000E523 488D7204                	lea rsi, [rdx + 4]
 19035 0000E527 4C8D4EFF                	lea r9, [rsi - 1]
 19036 0000E52B 488D7903                	lea rdi, [rcx + 3]
 19037 0000E52F 4D31C0                  	xor r8, r8
 19038                                  .L_tc_recycle_frame_loop_0098:
 19039 0000E532 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19040 0000E536 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19041 0000E53B 49FFC9                  	dec r9
 19042 0000E53E 4D31C0                  	xor r8, r8
 19043 0000E541 48FFCF                  	dec rdi
 19044 0000E544 48FFCE                  	dec rsi
 19045 0000E547 4883FE00                	cmp rsi, 0
 19046 0000E54B 75E5                    	jne .L_tc_recycle_frame_loop_0098
 19047                                  .L_tc_recycle_frame_done_0098:
 19048                                  ;this pop rbp in sot to the right place
 19049 0000E54D 4989C9                  	mov r9, rcx
 19050 0000E550 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19051 0000E558 4C01CC                  	add rsp, r9
 19052 0000E55B 5D                      	pop rbp
 19053 0000E55C 488B4D00                	mov rcx, qword [rbp]
 19054 0000E560 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19055 0000E564 FFE3                    	jmp rbx
 19056 0000E566 C9                      	leave
 19057 0000E567 C21800                  	ret 8 * (2 + 1)
 19058                                  .L_lambda_simple_end_0079:	; new closure is in rax
 19059                                  .L_applic_TC_0099:
 19060 0000E56A 803805                  	cmp byte [rax], T_closure
 19061 0000E56D 0F853A410000            	jne L_code_ptr_error
 19062 0000E573 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19063 0000E577 53                      	push rbx
 19064 0000E578 FF7508                  	push qword [rbp + 8]
 19065 0000E57B FF7500                  	push qword [rbp]
 19066 0000E57E 488B4D18                	mov rcx, [rbp + 3 * 8]
 19067 0000E582 488B542418              	mov rdx, [rsp + 3 * 8]
 19068 0000E587 488D7204                	lea rsi, [rdx + 4]
 19069 0000E58B 4C8D4EFF                	lea r9, [rsi - 1]
 19070 0000E58F 488D7903                	lea rdi, [rcx + 3]
 19071 0000E593 4D31C0                  	xor r8, r8
 19072                                  .L_tc_recycle_frame_loop_0099:
 19073 0000E596 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19074 0000E59A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19075 0000E59F 49FFC9                  	dec r9
 19076 0000E5A2 4D31C0                  	xor r8, r8
 19077 0000E5A5 48FFCF                  	dec rdi
 19078 0000E5A8 48FFCE                  	dec rsi
 19079 0000E5AB 4883FE00                	cmp rsi, 0
 19080 0000E5AF 75E5                    	jne .L_tc_recycle_frame_loop_0099
 19081                                  .L_tc_recycle_frame_done_0099:
 19082                                  ;this pop rbp in sot to the right place
 19083 0000E5B1 4989C9                  	mov r9, rcx
 19084 0000E5B4 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19085 0000E5BC 4C01CC                  	add rsp, r9
 19086 0000E5BF 5D                      	pop rbp
 19087 0000E5C0 488B4D00                	mov rcx, qword [rbp]
 19088 0000E5C4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19089 0000E5C8 FFE3                    	jmp rbx
 19090 0000E5CA C9                      	leave
 19091 0000E5CB C21800                  	ret 8 * (2 + 1)
 19092                                  .L_lambda_simple_end_0078:	; new closure is in rax
 19093 0000E5CE 50                      	push rax
 19094 0000E5CF 6A01                    	push 1
 19095 0000E5D1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19096 0000E5D6 E81D310000              	call malloc
 19097 0000E5DB 50                      	push rax
 19098 0000E5DC BF00000000              	mov rdi, 8 * 0	; new rib
 19099 0000E5E1 E812310000              	call malloc
 19100 0000E5E6 50                      	push rax
 19101 0000E5E7 BF08000000              	mov rdi, 8 * 1	; extended env
 19102 0000E5EC E807310000              	call malloc
 19103 0000E5F1 488B7D10                	mov rdi, ENV
 19104 0000E5F5 BE00000000              	mov rsi, 0
 19105 0000E5FA BA01000000              	mov rdx, 1
 19106                                  .L_lambda_simple_env_loop_0080:	; ext_env[i + 1] <-- env[i]
 19107 0000E5FF 4883FE00                	cmp rsi, 0
 19108 0000E603 7410                    	je .L_lambda_simple_env_end_0080
 19109 0000E605 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19110 0000E609 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19111 0000E60D 48FFC6                  	inc rsi
 19112 0000E610 48FFC2                  	inc rdx
 19113 0000E613 EBEA                    	jmp .L_lambda_simple_env_loop_0080
 19114                                  .L_lambda_simple_env_end_0080:
 19115 0000E615 5B                      	pop rbx
 19116 0000E616 BE00000000              	mov rsi, 0
 19117                                  .L_lambda_simple_params_loop_0080:	; copy params
 19118 0000E61B 4883FE00                	cmp rsi, 0
 19119 0000E61F 740E                    	je .L_lambda_simple_params_end_0080
 19120 0000E621 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19121 0000E626 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19122 0000E62A 48FFC6                  	inc rsi
 19123 0000E62D EBEC                    	jmp .L_lambda_simple_params_loop_0080
 19124                                  .L_lambda_simple_params_end_0080:
 19125 0000E62F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19126 0000E632 4889C3                  	mov rbx, rax
 19127 0000E635 58                      	pop rax
 19128 0000E636 C60005                  	mov byte [rax], T_closure
 19129 0000E639 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19130 0000E63D 48C74009[47E60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0080
 19131 0000E645 EB7B                    	jmp .L_lambda_simple_end_0080
 19132                                  .L_lambda_simple_code_0080:	; lambda-simple body
 19133 0000E647 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19134 0000E64D 740B                    	je .L_lambda_simple_arity_check_ok_0080
 19135 0000E64F FF742410                	push qword [rsp + 8 * 2]
 19136 0000E653 6A01                    	push 1
 19137 0000E655 E957300000              	jmp L_error_incorrect_arity_simple
 19138                                  .L_lambda_simple_arity_check_ok_0080:
 19139 0000E65A C8000000                	enter 0, 0
 19140 0000E65E 488B0425[70030000]      	mov rax, qword [free_var_110]
 19141 0000E666 50                      	push rax
 19142 0000E667 6A01                    	push 1
 19143 0000E669 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19144                                  	assert_closure(rax)
    42 0000E66D 803805              <1>  cmp byte [%1], %2
    43 0000E670 0F8576480000        <1>  jne L_error_incorrect_type
 19145 0000E676 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19146 0000E679 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19147 0000E67C 48890425[F0030000]      	mov qword [free_var_126], rax
 19148                                  
 19149 0000E684 48B8-                           	mov rax, sob_void
 19149 0000E686 [0000000000000000] 
 19150                                  
 19151 0000E68E 488B0425[A8030000]      	mov rax, qword [free_var_117]
 19152 0000E696 50                      	push rax
 19153 0000E697 6A01                    	push 1
 19154 0000E699 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19155                                  	assert_closure(rax)
    42 0000E69D 803805              <1>  cmp byte [%1], %2
    43 0000E6A0 0F8546480000        <1>  jne L_error_incorrect_type
 19156 0000E6A6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19157 0000E6A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19158 0000E6AC 48890425[18040000]      	mov qword [free_var_131], rax
 19159                                  
 19160 0000E6B4 48B8-                           	mov rax, sob_void
 19160 0000E6B6 [0000000000000000] 
 19161 0000E6BE C9                      	leave
 19162 0000E6BF C21800                  	ret 8 * (2 + 1)
 19163                                  .L_lambda_simple_end_0080:	; new closure is in rax
 19164                                  	assert_closure(rax)
    42 0000E6C2 803805              <1>  cmp byte [%1], %2
    43 0000E6C5 0F8521480000        <1>  jne L_error_incorrect_type
 19165 0000E6CB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19166 0000E6CE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19167                                  
 19168 0000E6D1 4889C7                  	mov rdi, rax
 19169 0000E6D4 E830300000              	call print_sexpr_if_not_void
 19170                                  
 19171 0000E6D9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19172 0000E6DE E815300000              	call malloc
 19173 0000E6E3 50                      	push rax
 19174 0000E6E4 BF00000000              	mov rdi, 8 * 0	; new rib
 19175 0000E6E9 E80A300000              	call malloc
 19176 0000E6EE 50                      	push rax
 19177 0000E6EF BF08000000              	mov rdi, 8 * 1	; extended env
 19178 0000E6F4 E8FF2F0000              	call malloc
 19179 0000E6F9 488B7D10                	mov rdi, ENV
 19180 0000E6FD BE00000000              	mov rsi, 0
 19181 0000E702 BA01000000              	mov rdx, 1
 19182                                  .L_lambda_simple_env_loop_0081:	; ext_env[i + 1] <-- env[i]
 19183 0000E707 4883FE00                	cmp rsi, 0
 19184 0000E70B 7410                    	je .L_lambda_simple_env_end_0081
 19185 0000E70D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19186 0000E711 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19187 0000E715 48FFC6                  	inc rsi
 19188 0000E718 48FFC2                  	inc rdx
 19189 0000E71B EBEA                    	jmp .L_lambda_simple_env_loop_0081
 19190                                  .L_lambda_simple_env_end_0081:
 19191 0000E71D 5B                      	pop rbx
 19192 0000E71E BE00000000              	mov rsi, 0
 19193                                  .L_lambda_simple_params_loop_0081:	; copy params
 19194 0000E723 4883FE00                	cmp rsi, 0
 19195 0000E727 740E                    	je .L_lambda_simple_params_end_0081
 19196 0000E729 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19197 0000E72E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19198 0000E732 48FFC6                  	inc rsi
 19199 0000E735 EBEC                    	jmp .L_lambda_simple_params_loop_0081
 19200                                  .L_lambda_simple_params_end_0081:
 19201 0000E737 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19202 0000E73A 4889C3                  	mov rbx, rax
 19203 0000E73D 58                      	pop rax
 19204 0000E73E C60005                  	mov byte [rax], T_closure
 19205 0000E741 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19206 0000E745 48C74009[52E70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0081
 19207 0000E74D E9FE000000              	jmp .L_lambda_simple_end_0081
 19208                                  .L_lambda_simple_code_0081:	; lambda-simple body
 19209 0000E752 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19210 0000E758 740B                    	je .L_lambda_simple_arity_check_ok_0081
 19211 0000E75A FF742410                	push qword [rsp + 8 * 2]
 19212 0000E75E 6A01                    	push 1
 19213 0000E760 E94C2F0000              	jmp L_error_incorrect_arity_simple
 19214                                  .L_lambda_simple_arity_check_ok_0081:
 19215 0000E765 C8000000                	enter 0, 0
 19216 0000E769 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19217 0000E76D 50                      	push rax
 19218 0000E76E 6A01                    	push 1
 19219 0000E770 488B0425[00000000]      	mov rax, qword [free_var_0]
 19220                                  	assert_closure(rax)
    42 0000E778 803805              <1>  cmp byte [%1], %2
    43 0000E77B 0F856B470000        <1>  jne L_error_incorrect_type
 19221 0000E781 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19222 0000E784 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19223                                  
 19224 0000E787 483D[02000000]                  	cmp rax, sob_boolean_false
 19225                                  
 19226 0000E78D 740F                            	je .L_if_else_0047
 19227 0000E78F 48B8-                   	mov rax,L_constants + 32
 19227 0000E791 [2000000000000000] 
 19228                                  
 19229 0000E799 E9AE000000                      	jmp .L_if_end_0047
 19230                                  
 19231                                          	.L_if_else_0047:
 19232 0000E79E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19233 0000E7A2 50                      	push rax
 19234 0000E7A3 6A01                    	push 1
 19235 0000E7A5 488B0425[88000000]      	mov rax, qword [free_var_17]
 19236                                  	assert_closure(rax)
    42 0000E7AD 803805              <1>  cmp byte [%1], %2
    43 0000E7B0 0F8536470000        <1>  jne L_error_incorrect_type
 19237 0000E7B6 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19238 0000E7B9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19239 0000E7BC 50                      	push rax
 19240 0000E7BD 6A01                    	push 1
 19241 0000E7BF 488B0425[30040000]      	mov rax, qword [free_var_134]
 19242                                  	assert_closure(rax)
    42 0000E7C7 803805              <1>  cmp byte [%1], %2
    43 0000E7CA 0F851C470000        <1>  jne L_error_incorrect_type
 19243 0000E7D0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19244 0000E7D3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19245 0000E7D6 50                      	push rax
 19246 0000E7D7 48B8-                   	mov rax,L_constants + 128
 19246 0000E7D9 [8000000000000000] 
 19247 0000E7E1 50                      	push rax
 19248 0000E7E2 6A02                    	push 2
 19249 0000E7E4 488B0425[08030000]      	mov rax, qword [free_var_97]
 19250                                  .L_applic_TC_009a:
 19251 0000E7EC 803805                  	cmp byte [rax], T_closure
 19252 0000E7EF 0F85B83E0000            	jne L_code_ptr_error
 19253 0000E7F5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19254 0000E7F9 53                      	push rbx
 19255 0000E7FA FF7508                  	push qword [rbp + 8]
 19256 0000E7FD FF7500                  	push qword [rbp]
 19257 0000E800 488B4D18                	mov rcx, [rbp + 3 * 8]
 19258 0000E804 488B542418              	mov rdx, [rsp + 3 * 8]
 19259 0000E809 488D7204                	lea rsi, [rdx + 4]
 19260 0000E80D 4C8D4EFF                	lea r9, [rsi - 1]
 19261 0000E811 488D7903                	lea rdi, [rcx + 3]
 19262 0000E815 4D31C0                  	xor r8, r8
 19263                                  .L_tc_recycle_frame_loop_009a:
 19264 0000E818 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19265 0000E81C 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19266 0000E821 49FFC9                  	dec r9
 19267 0000E824 4D31C0                  	xor r8, r8
 19268 0000E827 48FFCF                  	dec rdi
 19269 0000E82A 48FFCE                  	dec rsi
 19270 0000E82D 4883FE00                	cmp rsi, 0
 19271 0000E831 75E5                    	jne .L_tc_recycle_frame_loop_009a
 19272                                  .L_tc_recycle_frame_done_009a:
 19273                                  ;this pop rbp in sot to the right place
 19274 0000E833 4989C9                  	mov r9, rcx
 19275 0000E836 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19276 0000E83E 4C01CC                  	add rsp, r9
 19277 0000E841 5D                      	pop rbp
 19278 0000E842 488B4D00                	mov rcx, qword [rbp]
 19279 0000E846 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19280 0000E84A FFE3                    	jmp rbx
 19281                                  
 19282                                          	.L_if_end_0047:
 19283 0000E84C C9                      	leave
 19284 0000E84D C21800                  	ret 8 * (2 + 1)
 19285                                  .L_lambda_simple_end_0081:	; new closure is in rax
 19286 0000E850 48890425[30040000]      	mov qword [free_var_134], rax
 19287 0000E858 48B8-                   	mov rax, sob_void
 19287 0000E85A [0000000000000000] 
 19288                                  
 19289 0000E862 4889C7                  	mov rdi, rax
 19290 0000E865 E89F2E0000              	call print_sexpr_if_not_void
 19291                                  
 19292 0000E86A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19293 0000E86F E8842E0000              	call malloc
 19294 0000E874 50                      	push rax
 19295 0000E875 BF00000000              	mov rdi, 8 * 0	; new rib
 19296 0000E87A E8792E0000              	call malloc
 19297 0000E87F 50                      	push rax
 19298 0000E880 BF08000000              	mov rdi, 8 * 1	; extended env
 19299 0000E885 E86E2E0000              	call malloc
 19300 0000E88A 488B7D10                	mov rdi, ENV
 19301 0000E88E BE00000000              	mov rsi, 0
 19302 0000E893 BA01000000              	mov rdx, 1
 19303                                  .L_lambda_simple_env_loop_0082:	; ext_env[i + 1] <-- env[i]
 19304 0000E898 4883FE00                	cmp rsi, 0
 19305 0000E89C 7410                    	je .L_lambda_simple_env_end_0082
 19306 0000E89E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19307 0000E8A2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19308 0000E8A6 48FFC6                  	inc rsi
 19309 0000E8A9 48FFC2                  	inc rdx
 19310 0000E8AC EBEA                    	jmp .L_lambda_simple_env_loop_0082
 19311                                  .L_lambda_simple_env_end_0082:
 19312 0000E8AE 5B                      	pop rbx
 19313 0000E8AF BE00000000              	mov rsi, 0
 19314                                  .L_lambda_simple_params_loop_0082:	; copy params
 19315 0000E8B4 4883FE00                	cmp rsi, 0
 19316 0000E8B8 740E                    	je .L_lambda_simple_params_end_0082
 19317 0000E8BA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19318 0000E8BF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19319 0000E8C3 48FFC6                  	inc rsi
 19320 0000E8C6 EBEC                    	jmp .L_lambda_simple_params_loop_0082
 19321                                  .L_lambda_simple_params_end_0082:
 19322 0000E8C8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19323 0000E8CB 4889C3                  	mov rbx, rax
 19324 0000E8CE 58                      	pop rax
 19325 0000E8CF C60005                  	mov byte [rax], T_closure
 19326 0000E8D2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19327 0000E8D6 48C74009[E3E80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0082
 19328 0000E8DE E904010000              	jmp .L_lambda_simple_end_0082
 19329                                  .L_lambda_simple_code_0082:	; lambda-simple body
 19330 0000E8E3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19331 0000E8E9 740B                    	je .L_lambda_simple_arity_check_ok_0082
 19332 0000E8EB FF742410                	push qword [rsp + 8 * 2]
 19333 0000E8EF 6A01                    	push 1
 19334 0000E8F1 E9BB2D0000              	jmp L_error_incorrect_arity_simple
 19335                                  .L_lambda_simple_arity_check_ok_0082:
 19336 0000E8F6 C8000000                	enter 0, 0
 19337 0000E8FA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19338 0000E8FE 50                      	push rax
 19339 0000E8FF 6A01                    	push 1
 19340 0000E901 488B0425[00000000]      	mov rax, qword [free_var_0]
 19341                                  	assert_closure(rax)
    42 0000E909 803805              <1>  cmp byte [%1], %2
    43 0000E90C 0F85DA450000        <1>  jne L_error_incorrect_type
 19342 0000E912 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19343 0000E915 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19344 0000E918 483D[02000000]          	cmp rax, sob_boolean_false
 19345 0000E91E 0F85BF000000            	jne .L_or_end_000c
 19346 0000E924 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19347 0000E928 50                      	push rax
 19348 0000E929 6A01                    	push 1
 19349 0000E92B 488B0425[08000000]      	mov rax, qword [free_var_1]
 19350                                  	assert_closure(rax)
    42 0000E933 803805              <1>  cmp byte [%1], %2
    43 0000E936 0F85B0450000        <1>  jne L_error_incorrect_type
 19351 0000E93C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19352 0000E93F FF5009                  	call SOB_CLOSURE_CODE(rax)
 19353                                  
 19354 0000E942 483D[02000000]                  	cmp rax, sob_boolean_false
 19355                                  
 19356 0000E948 0F848B000000                    	je .L_if_else_0048
 19357 0000E94E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19358 0000E952 50                      	push rax
 19359 0000E953 6A01                    	push 1
 19360 0000E955 488B0425[88000000]      	mov rax, qword [free_var_17]
 19361                                  	assert_closure(rax)
    42 0000E95D 803805              <1>  cmp byte [%1], %2
    43 0000E960 0F8586450000        <1>  jne L_error_incorrect_type
 19362 0000E966 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19363 0000E969 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19364 0000E96C 50                      	push rax
 19365 0000E96D 6A01                    	push 1
 19366 0000E96F 488B0425[A0020000]      	mov rax, qword [free_var_84]
 19367                                  .L_applic_TC_009b:
 19368 0000E977 803805                  	cmp byte [rax], T_closure
 19369 0000E97A 0F852D3D0000            	jne L_code_ptr_error
 19370 0000E980 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19371 0000E984 53                      	push rbx
 19372 0000E985 FF7508                  	push qword [rbp + 8]
 19373 0000E988 FF7500                  	push qword [rbp]
 19374 0000E98B 488B4D18                	mov rcx, [rbp + 3 * 8]
 19375 0000E98F 488B542418              	mov rdx, [rsp + 3 * 8]
 19376 0000E994 488D7204                	lea rsi, [rdx + 4]
 19377 0000E998 4C8D4EFF                	lea r9, [rsi - 1]
 19378 0000E99C 488D7903                	lea rdi, [rcx + 3]
 19379 0000E9A0 4D31C0                  	xor r8, r8
 19380                                  .L_tc_recycle_frame_loop_009b:
 19381 0000E9A3 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19382 0000E9A7 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19383 0000E9AC 49FFC9                  	dec r9
 19384 0000E9AF 4D31C0                  	xor r8, r8
 19385 0000E9B2 48FFCF                  	dec rdi
 19386 0000E9B5 48FFCE                  	dec rsi
 19387 0000E9B8 4883FE00                	cmp rsi, 0
 19388 0000E9BC 75E5                    	jne .L_tc_recycle_frame_loop_009b
 19389                                  .L_tc_recycle_frame_done_009b:
 19390                                  ;this pop rbp in sot to the right place
 19391 0000E9BE 4989C9                  	mov r9, rcx
 19392 0000E9C1 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19393 0000E9C9 4C01CC                  	add rsp, r9
 19394 0000E9CC 5D                      	pop rbp
 19395 0000E9CD 488B4D00                	mov rcx, qword [rbp]
 19396 0000E9D1 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19397 0000E9D5 FFE3                    	jmp rbx
 19398                                  
 19399 0000E9D7 EB0A                            	jmp .L_if_end_0048
 19400                                  
 19401                                          	.L_if_else_0048:
 19402 0000E9D9 48B8-                   	mov rax,L_constants + 2
 19402 0000E9DB [0200000000000000] 
 19403                                  
 19404                                          	.L_if_end_0048:
 19405                                  .L_or_end_000c:
 19406 0000E9E3 C9                      	leave
 19407 0000E9E4 C21800                  	ret 8 * (2 + 1)
 19408                                  .L_lambda_simple_end_0082:	; new closure is in rax
 19409 0000E9E7 48890425[A0020000]      	mov qword [free_var_84], rax
 19410 0000E9EF 48B8-                   	mov rax, sob_void
 19410 0000E9F1 [0000000000000000] 
 19411                                  
 19412 0000E9F9 4889C7                  	mov rdi, rax
 19413 0000E9FC E8082D0000              	call print_sexpr_if_not_void
 19414                                  
 19415 0000EA01 488B0425[98010000]      	mov rax, qword [free_var_51]
 19416 0000EA09 50                      	push rax
 19417 0000EA0A 6A01                    	push 1
 19418 0000EA0C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19419 0000EA11 E8E22C0000              	call malloc
 19420 0000EA16 50                      	push rax
 19421 0000EA17 BF00000000              	mov rdi, 8 * 0	; new rib
 19422 0000EA1C E8D72C0000              	call malloc
 19423 0000EA21 50                      	push rax
 19424 0000EA22 BF08000000              	mov rdi, 8 * 1	; extended env
 19425 0000EA27 E8CC2C0000              	call malloc
 19426 0000EA2C 488B7D10                	mov rdi, ENV
 19427 0000EA30 BE00000000              	mov rsi, 0
 19428 0000EA35 BA01000000              	mov rdx, 1
 19429                                  .L_lambda_simple_env_loop_0083:	; ext_env[i + 1] <-- env[i]
 19430 0000EA3A 4883FE00                	cmp rsi, 0
 19431 0000EA3E 7410                    	je .L_lambda_simple_env_end_0083
 19432 0000EA40 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19433 0000EA44 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19434 0000EA48 48FFC6                  	inc rsi
 19435 0000EA4B 48FFC2                  	inc rdx
 19436 0000EA4E EBEA                    	jmp .L_lambda_simple_env_loop_0083
 19437                                  .L_lambda_simple_env_end_0083:
 19438 0000EA50 5B                      	pop rbx
 19439 0000EA51 BE00000000              	mov rsi, 0
 19440                                  .L_lambda_simple_params_loop_0083:	; copy params
 19441 0000EA56 4883FE00                	cmp rsi, 0
 19442 0000EA5A 740E                    	je .L_lambda_simple_params_end_0083
 19443 0000EA5C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19444 0000EA61 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19445 0000EA65 48FFC6                  	inc rsi
 19446 0000EA68 EBEC                    	jmp .L_lambda_simple_params_loop_0083
 19447                                  .L_lambda_simple_params_end_0083:
 19448 0000EA6A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19449 0000EA6D 4889C3                  	mov rbx, rax
 19450 0000EA70 58                      	pop rax
 19451 0000EA71 C60005                  	mov byte [rax], T_closure
 19452 0000EA74 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19453 0000EA78 48C74009[85EA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0083
 19454 0000EA80 E90C040000              	jmp .L_lambda_simple_end_0083
 19455                                  .L_lambda_simple_code_0083:	; lambda-simple body
 19456 0000EA85 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19457 0000EA8B 740B                    	je .L_lambda_simple_arity_check_ok_0083
 19458 0000EA8D FF742410                	push qword [rsp + 8 * 2]
 19459 0000EA91 6A01                    	push 1
 19460 0000EA93 E9192C0000              	jmp L_error_incorrect_arity_simple
 19461                                  .L_lambda_simple_arity_check_ok_0083:
 19462 0000EA98 C8000000                	enter 0, 0
 19463 0000EA9C BF11000000              	mov rdi, (1 + 8 + 8)
 19464 0000EAA1 E8522C0000              	call malloc
 19465 0000EAA6 50                      	push rax
 19466 0000EAA7 BF08000000              	mov rdi, 8 * 1
 19467 0000EAAC E8472C0000              	call malloc
 19468 0000EAB1 50                      	push rax
 19469 0000EAB2 BF10000000              	mov rdi, 8 * 2
 19470 0000EAB7 E83C2C0000              	call malloc
 19471 0000EABC 488B7D10                	mov rdi, ENV
 19472 0000EAC0 4831F6                  	xor rsi, rsi
 19473 0000EAC3 4831D2                  	xor rdx, rdx
 19474 0000EAC6 48FFC2                  	inc rdx
 19475                                  	.L_lambda_opt_env_loop_0015:
 19476                                  
 19477 0000EAC9 4883FE01                        	cmp rsi, 1
 19478                                  
 19479 0000EACD 7412                            	je .L_lambda_opt_env_end_0015
 19480 0000EACF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19481 0000EAD3 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19482 0000EAD7 4883C201                	add rdx, 1
 19483 0000EADB 4883C601                	add rsi, 1
 19484 0000EADF EBE8                    	jmp .L_lambda_opt_env_loop_0015
 19485                                  
 19486                                          	.L_lambda_opt_env_end_0015:
 19487 0000EAE1 5B                      	pop rbx
 19488 0000EAE2 4831F6                  	xor rsi, rsi
 19489                                  	.L_lambda_opt_params_loop_0015:
 19490                                  
 19491 0000EAE5 4883FE01                        	cmp rsi, 1
 19492                                  
 19493 0000EAE9 740F                            	je .L_lambda_opt_params_end_0015
 19494 0000EAEB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19495 0000EAF0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19496 0000EAF4 4883C601                	add rsi, 1
 19497 0000EAF8 EBEB                    	jmp .L_lambda_opt_params_loop_0015
 19498                                  
 19499                                          	.L_lambda_opt_params_end_0015:
 19500 0000EAFA 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 19501 0000EAFD 4889C3                  	mov rbx, rax
 19502 0000EB00 58                      	pop rax
 19503 0000EB01 C60005                  	mov byte [rax], T_closure
 19504 0000EB04 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19505 0000EB08 48C74009[15EB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0015
 19506                                  
 19507 0000EB10 E978030000                      	jmp .L_lambda_opt_end_0015
 19508                                  
 19509                                          	.L_lambda_opt_code_0015:
 19510                                  
 19511 0000EB15 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 19512                                  
 19513 0000EB1B 740D                            	je .L_lambda_opt_arity_check_exact_0015  ;same num_of_args
 19514                                  
 19515 0000EB1D 7F65                            	jg .L_lambda_opt_arity_check_more_0015  ;greater num_of_args
 19516 0000EB1F FF742410                	push qword [rsp + 8 * 2]
 19517 0000EB23 6A01                    	push 1
 19518 0000EB25 E99B2B0000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 19519                                  .L_lambda_opt_arity_check_exact_0015:
 19520 0000EB2A 4883EC08                	sub rsp, 8 * 1
 19521 0000EB2E 488D7F10                	lea rdi, [rdi + (8 * 2)]
 19522 0000EB32 4889E7                  	mov rdi, rsp 
 19523 0000EB35 488B4708                	mov rax, qword [rdi + 8]
 19524 0000EB39 488907                  	mov qword [rdi], rax
 19525 0000EB3C 488D7F08                	lea rdi, [rdi + 8]
 19526 0000EB40 488B4708                	mov rax, qword [rdi + 8]
 19527 0000EB44 488907                  	mov qword [rdi], rax
 19528 0000EB47 488D7F08                	lea rdi, [rdi + 8]
 19529 0000EB4B 488B4708                	mov rax, qword [rdi + 8]
 19530 0000EB4F 4889C1                  	mov rcx, rax
 19531 0000EB52 4883C001                	add rax, 1
 19532 0000EB56 488907                  	mov qword [rdi], rax
 19533 0000EB59 488D7F08                	lea rdi, [rdi + 8]
 19534                                  	.L_lambda_opt_stack_shrink_loop_003d:
 19535 0000EB5D 4883F900                	cmp rcx, 0
 19536 0000EB61 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_003d
 19537 0000EB63 4883E901                	sub rcx, 1
 19538 0000EB67 488D4010                	lea rax, [rax + (8 * 2)]
 19539 0000EB6B 488B4708                	mov rax, qword [rdi + 8]
 19540 0000EB6F 488907                  	mov qword [rdi], rax
 19541 0000EB72 488D7F08                	lea rdi, [rdi + 8]
 19542 0000EB76 EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_003d
 19543                                  
 19544                                          	.L_lambda_opt_stack_shrink_loop_exit_003d:
 19545 0000EB78 48C707[01000000]        	mov qword [rdi], sob_nil
 19546 0000EB7F E997000000              	jmp .L_lambda_opt_stack_adjusted_0015
 19547                                  
 19548                                          	.L_lambda_opt_arity_check_more_0015:
 19549 0000EB84 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 19550 0000EB89 488D4EFF                	lea rcx, [rsi - 1]
 19551 0000EB8D 49B8-                   	mov r8, sob_nil
 19551 0000EB8F [0100000000000000] 
 19552 0000EB97 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 19553 0000EB9C 4889F2                  	mov rdx, rsi
 19554                                  	.L_lambda_opt_stack_shrink_loop_003e:
 19555 0000EB9F 4883F900                	cmp rcx, 0
 19556 0000EBA3 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_003e
 19557 0000EBA5 BF11000000              	mov rdi, 1 + (8 * 2)
 19558 0000EBAA E8492B0000              	call malloc
 19559 0000EBAF C60021                  	mov byte [rax], T_pair
 19560 0000EBB2 488B1E                  	mov rbx, qword [rsi]
 19561 0000EBB5 48895801                	mov SOB_PAIR_CAR(rax), rbx
 19562 0000EBB9 4C894009                	mov SOB_PAIR_CDR(rax), r8
 19563 0000EBBD 4883C6F8                	add rsi, -8
 19564 0000EBC1 4883E901                	sub rcx, 1
 19565 0000EBC5 4989C0                  	mov r8, rax
 19566 0000EBC8 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_003e
 19567                                  
 19568                                          	.L_lambda_opt_stack_shrink_loop_exit_003e:
 19569 0000EBCA 4C8902                  	mov qword [rdx], r8
 19570 0000EBCD 4883EA08                	sub rdx, 8 * 1
 19571 0000EBD1 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 19572                                  
 19573 0000EBD6 B901000000                      	mov rcx, 1 
 19574                                  
 19575                                          	.L_lambda_opt_stack_shrink_loop_003f:
 19576 0000EBDB 4883F900                	cmp rcx, 0
 19577 0000EBDF 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_003f
 19578 0000EBE1 488B06                  	mov rax, qword [rsi]
 19579 0000EBE4 488902                  	mov qword [rdx], rax
 19580 0000EBE7 488D76F8                	lea rsi, [rsi - 8]
 19581 0000EBEB 4883C2F8                	add rdx, -8
 19582 0000EBEF 4883C1FF                	add rcx, -1
 19583 0000EBF3 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_003f
 19584                                  
 19585                                          	.L_lambda_opt_stack_shrink_loop_exit_003f:
 19586                                  
 19587 0000EBF5 48C70202000000                  	mov qword [rdx], 1 + 1
 19588 0000EBFC 4883C6F8                	add rsi, -8
 19589 0000EC00 4883C2F8                	add rdx, -8
 19590 0000EC04 488B06                  	mov rax, qword [rsi]
 19591 0000EC07 488902                  	mov qword [rdx], rax
 19592 0000EC0A 4883C2F8                	add rdx, -8
 19593 0000EC0E 488D76F8                	lea rsi, [rsi - 8]
 19594 0000EC12 488B06                  	mov rax, qword [rsi]
 19595 0000EC15 488902                  	mov qword [rdx], rax
 19596 0000EC18 4889D4                  	mov rsp, rdx
 19597                                  	.L_lambda_opt_stack_adjusted_0015:
 19598 0000EC1B C8000000                	enter 0, 0
 19599 0000EC1F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19600 0000EC23 50                      	push rax
 19601 0000EC24 6A01                    	push 1
 19602 0000EC26 488B0425[00000000]      	mov rax, qword [free_var_0]
 19603                                  	assert_closure(rax)
    42 0000EC2E 803805              <1>  cmp byte [%1], %2
    43 0000EC31 0F85B5420000        <1>  jne L_error_incorrect_type
 19604 0000EC37 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19605 0000EC3A FF5009                  	call SOB_CLOSURE_CODE(rax)
 19606                                  
 19607 0000EC3D 483D[02000000]                  	cmp rax, sob_boolean_false
 19608                                  
 19609 0000EC43 740F                            	je .L_if_else_0049
 19610 0000EC45 48B8-                   	mov rax,L_constants + 0
 19610 0000EC47 [0000000000000000] 
 19611                                  
 19612 0000EC4F E9C1000000                      	jmp .L_if_end_0049
 19613                                  
 19614                                          	.L_if_else_0049:
 19615 0000EC54 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19616 0000EC58 50                      	push rax
 19617 0000EC59 6A01                    	push 1
 19618 0000EC5B 488B0425[08000000]      	mov rax, qword [free_var_1]
 19619                                  	assert_closure(rax)
    42 0000EC63 803805              <1>  cmp byte [%1], %2
    43 0000EC66 0F8580420000        <1>  jne L_error_incorrect_type
 19620 0000EC6C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19621 0000EC6F FF5009                  	call SOB_CLOSURE_CODE(rax)
 19622                                  
 19623 0000EC72 483D[02000000]                  	cmp rax, sob_boolean_false
 19624                                  
 19625 0000EC78 743A                            	je .L_if_else_004b
 19626 0000EC7A 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19627 0000EC7E 50                      	push rax
 19628 0000EC7F 6A01                    	push 1
 19629 0000EC81 488B0425[88000000]      	mov rax, qword [free_var_17]
 19630                                  	assert_closure(rax)
    42 0000EC89 803805              <1>  cmp byte [%1], %2
    43 0000EC8C 0F855A420000        <1>  jne L_error_incorrect_type
 19631 0000EC92 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19632 0000EC95 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19633 0000EC98 50                      	push rax
 19634 0000EC99 6A01                    	push 1
 19635 0000EC9B 488B0425[00000000]      	mov rax, qword [free_var_0]
 19636                                  	assert_closure(rax)
    42 0000ECA3 803805              <1>  cmp byte [%1], %2
    43 0000ECA6 0F8540420000        <1>  jne L_error_incorrect_type
 19637 0000ECAC FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19638 0000ECAF FF5009                  	call SOB_CLOSURE_CODE(rax)
 19639                                  
 19640 0000ECB2 EB0A                            	jmp .L_if_end_004b
 19641                                  
 19642                                          	.L_if_else_004b:
 19643 0000ECB4 48B8-                   	mov rax,L_constants + 2
 19643 0000ECB6 [0200000000000000] 
 19644                                  
 19645                                          	.L_if_end_004b:
 19646                                  
 19647 0000ECBE 483D[02000000]                  	cmp rax, sob_boolean_false
 19648                                  
 19649 0000ECC4 7420                            	je .L_if_else_004a
 19650 0000ECC6 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 19651 0000ECCA 50                      	push rax
 19652 0000ECCB 6A01                    	push 1
 19653 0000ECCD 488B0425[80000000]      	mov rax, qword [free_var_16]
 19654                                  	assert_closure(rax)
    42 0000ECD5 803805              <1>  cmp byte [%1], %2
    43 0000ECD8 0F850E420000        <1>  jne L_error_incorrect_type
 19655 0000ECDE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19656 0000ECE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19657                                  
 19658 0000ECE4 EB2F                            	jmp .L_if_end_004a
 19659                                  
 19660                                          	.L_if_else_004a:
 19661 0000ECE6 48B8-                   	mov rax,L_constants + 379
 19661 0000ECE8 [7B01000000000000] 
 19662 0000ECF0 50                      	push rax
 19663 0000ECF1 48B8-                   	mov rax,L_constants + 370
 19663 0000ECF3 [7201000000000000] 
 19664 0000ECFB 50                      	push rax
 19665 0000ECFC 6A02                    	push 2
 19666 0000ECFE 488B0425[30010000]      	mov rax, qword [free_var_38]
 19667                                  	assert_closure(rax)
    42 0000ED06 803805              <1>  cmp byte [%1], %2
    43 0000ED09 0F85DD410000        <1>  jne L_error_incorrect_type
 19668 0000ED0F FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19669 0000ED12 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19670                                  
 19671                                          	.L_if_end_004a:
 19672                                  
 19673                                          	.L_if_end_0049:
 19674 0000ED15 50                      	push rax
 19675 0000ED16 6A01                    	push 1
 19676 0000ED18 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19677 0000ED1D E8D6290000              	call malloc
 19678 0000ED22 50                      	push rax
 19679 0000ED23 BF10000000              	mov rdi, 8 * 2	; new rib
 19680 0000ED28 E8CB290000              	call malloc
 19681 0000ED2D 50                      	push rax
 19682 0000ED2E BF18000000              	mov rdi, 8 * 3	; extended env
 19683 0000ED33 E8C0290000              	call malloc
 19684 0000ED38 488B7D10                	mov rdi, ENV
 19685 0000ED3C BE00000000              	mov rsi, 0
 19686 0000ED41 BA01000000              	mov rdx, 1
 19687                                  .L_lambda_simple_env_loop_0084:	; ext_env[i + 1] <-- env[i]
 19688 0000ED46 4883FE02                	cmp rsi, 2
 19689 0000ED4A 7410                    	je .L_lambda_simple_env_end_0084
 19690 0000ED4C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19691 0000ED50 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19692 0000ED54 48FFC6                  	inc rsi
 19693 0000ED57 48FFC2                  	inc rdx
 19694 0000ED5A EBEA                    	jmp .L_lambda_simple_env_loop_0084
 19695                                  .L_lambda_simple_env_end_0084:
 19696 0000ED5C 5B                      	pop rbx
 19697 0000ED5D BE00000000              	mov rsi, 0
 19698                                  .L_lambda_simple_params_loop_0084:	; copy params
 19699 0000ED62 4883FE02                	cmp rsi, 2
 19700 0000ED66 740E                    	je .L_lambda_simple_params_end_0084
 19701 0000ED68 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19702 0000ED6D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19703 0000ED71 48FFC6                  	inc rsi
 19704 0000ED74 EBEC                    	jmp .L_lambda_simple_params_loop_0084
 19705                                  .L_lambda_simple_params_end_0084:
 19706 0000ED76 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19707 0000ED79 4889C3                  	mov rbx, rax
 19708 0000ED7C 58                      	pop rax
 19709 0000ED7D C60005                  	mov byte [rax], T_closure
 19710 0000ED80 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19711 0000ED84 48C74009[91ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0084
 19712 0000ED8C E998000000              	jmp .L_lambda_simple_end_0084
 19713                                  .L_lambda_simple_code_0084:	; lambda-simple body
 19714 0000ED91 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19715 0000ED97 740B                    	je .L_lambda_simple_arity_check_ok_0084
 19716 0000ED99 FF742410                	push qword [rsp + 8 * 2]
 19717 0000ED9D 6A01                    	push 1
 19718 0000ED9F E90D290000              	jmp L_error_incorrect_arity_simple
 19719                                  .L_lambda_simple_arity_check_ok_0084:
 19720 0000EDA4 C8000000                	enter 0, 0
 19721 0000EDA8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 19722 0000EDAC 50                      	push rax
 19723 0000EDAD 488B4510                	mov rax, qword [rbp + 8 * 2]
 19724                                  
 19725 0000EDB1 488B00                                            	mov rax, qword[rax + 8 * 0]
 19726                                  
 19727 0000EDB4 488B00                                            	mov rax, qword[rax + 8 * 0]
 19728 0000EDB7 50                      	push rax
 19729 0000EDB8 6A02                    	push 2
 19730 0000EDBA 488B4510                	mov rax, qword [rbp + 8 * 2]
 19731                                  
 19732 0000EDBE 488B4008                                          	mov rax, qword[rax + 8 * 1]
 19733                                  
 19734 0000EDC2 488B00                                            	mov rax, qword[rax + 8 * 0]
 19735                                  .L_applic_TC_009c:
 19736 0000EDC5 803805                  	cmp byte [rax], T_closure
 19737 0000EDC8 0F85DF380000            	jne L_code_ptr_error
 19738 0000EDCE 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19739 0000EDD2 53                      	push rbx
 19740 0000EDD3 FF7508                  	push qword [rbp + 8]
 19741 0000EDD6 FF7500                  	push qword [rbp]
 19742 0000EDD9 488B4D18                	mov rcx, [rbp + 3 * 8]
 19743 0000EDDD 488B542418              	mov rdx, [rsp + 3 * 8]
 19744 0000EDE2 488D7204                	lea rsi, [rdx + 4]
 19745 0000EDE6 4C8D4EFF                	lea r9, [rsi - 1]
 19746 0000EDEA 488D7903                	lea rdi, [rcx + 3]
 19747 0000EDEE 4D31C0                  	xor r8, r8
 19748                                  .L_tc_recycle_frame_loop_009c:
 19749 0000EDF1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19750 0000EDF5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19751 0000EDFA 49FFC9                  	dec r9
 19752 0000EDFD 4D31C0                  	xor r8, r8
 19753 0000EE00 48FFCF                  	dec rdi
 19754 0000EE03 48FFCE                  	dec rsi
 19755 0000EE06 4883FE00                	cmp rsi, 0
 19756 0000EE0A 75E5                    	jne .L_tc_recycle_frame_loop_009c
 19757                                  .L_tc_recycle_frame_done_009c:
 19758                                  ;this pop rbp in sot to the right place
 19759 0000EE0C 4989C9                  	mov r9, rcx
 19760 0000EE0F 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19761 0000EE17 4C01CC                  	add rsp, r9
 19762 0000EE1A 5D                      	pop rbp
 19763 0000EE1B 488B4D00                	mov rcx, qword [rbp]
 19764 0000EE1F 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19765 0000EE23 FFE3                    	jmp rbx
 19766 0000EE25 C9                      	leave
 19767 0000EE26 C21800                  	ret 8 * (2 + 1)
 19768                                  .L_lambda_simple_end_0084:	; new closure is in rax
 19769                                  .L_applic_TC_009d:
 19770 0000EE29 803805                  	cmp byte [rax], T_closure
 19771 0000EE2C 0F857B380000            	jne L_code_ptr_error
 19772 0000EE32 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 19773 0000EE36 53                      	push rbx
 19774 0000EE37 FF7508                  	push qword [rbp + 8]
 19775 0000EE3A FF7500                  	push qword [rbp]
 19776 0000EE3D 488B4D18                	mov rcx, [rbp + 3 * 8]
 19777 0000EE41 488B542418              	mov rdx, [rsp + 3 * 8]
 19778 0000EE46 488D7204                	lea rsi, [rdx + 4]
 19779 0000EE4A 4C8D4EFF                	lea r9, [rsi - 1]
 19780 0000EE4E 488D7903                	lea rdi, [rcx + 3]
 19781 0000EE52 4D31C0                  	xor r8, r8
 19782                                  .L_tc_recycle_frame_loop_009d:
 19783 0000EE55 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 19784 0000EE59 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 19785 0000EE5E 49FFC9                  	dec r9
 19786 0000EE61 4D31C0                  	xor r8, r8
 19787 0000EE64 48FFCF                  	dec rdi
 19788 0000EE67 48FFCE                  	dec rsi
 19789 0000EE6A 4883FE00                	cmp rsi, 0
 19790 0000EE6E 75E5                    	jne .L_tc_recycle_frame_loop_009d
 19791                                  .L_tc_recycle_frame_done_009d:
 19792                                  ;this pop rbp in sot to the right place
 19793 0000EE70 4989C9                  	mov r9, rcx
 19794 0000EE73 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 19795 0000EE7B 4C01CC                  	add rsp, r9
 19796 0000EE7E 5D                      	pop rbp
 19797 0000EE7F 488B4D00                	mov rcx, qword [rbp]
 19798 0000EE83 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 19799 0000EE87 FFE3                    	jmp rbx
 19800 0000EE89 C9                      	leave
 19801 0000EE8A C22000                  	ret 8 * (2 + 2)
 19802                                  .L_lambda_opt_end_0015:	; new closure is in rax
 19803 0000EE8D C9                      	leave
 19804 0000EE8E C21800                  	ret 8 * (2 + 1)
 19805                                  .L_lambda_simple_end_0083:	; new closure is in rax
 19806                                  	assert_closure(rax)
    42 0000EE91 803805              <1>  cmp byte [%1], %2
    43 0000EE94 0F8552400000        <1>  jne L_error_incorrect_type
 19807 0000EE9A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 19808 0000EE9D FF5009                  	call SOB_CLOSURE_CODE(rax)
 19809 0000EEA0 48890425[98010000]      	mov qword [free_var_51], rax
 19810 0000EEA8 48B8-                   	mov rax, sob_void
 19810 0000EEAA [0000000000000000] 
 19811                                  
 19812 0000EEB2 4889C7                  	mov rdi, rax
 19813 0000EEB5 E84F280000              	call print_sexpr_if_not_void
 19814                                  
 19815 0000EEBA 488B0425[A0010000]      	mov rax, qword [free_var_52]
 19816 0000EEC2 50                      	push rax
 19817 0000EEC3 6A01                    	push 1
 19818 0000EEC5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19819 0000EECA E829280000              	call malloc
 19820 0000EECF 50                      	push rax
 19821 0000EED0 BF00000000              	mov rdi, 8 * 0	; new rib
 19822 0000EED5 E81E280000              	call malloc
 19823 0000EEDA 50                      	push rax
 19824 0000EEDB BF08000000              	mov rdi, 8 * 1	; extended env
 19825 0000EEE0 E813280000              	call malloc
 19826 0000EEE5 488B7D10                	mov rdi, ENV
 19827 0000EEE9 BE00000000              	mov rsi, 0
 19828 0000EEEE BA01000000              	mov rdx, 1
 19829                                  .L_lambda_simple_env_loop_0085:	; ext_env[i + 1] <-- env[i]
 19830 0000EEF3 4883FE00                	cmp rsi, 0
 19831 0000EEF7 7410                    	je .L_lambda_simple_env_end_0085
 19832 0000EEF9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19833 0000EEFD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19834 0000EF01 48FFC6                  	inc rsi
 19835 0000EF04 48FFC2                  	inc rdx
 19836 0000EF07 EBEA                    	jmp .L_lambda_simple_env_loop_0085
 19837                                  .L_lambda_simple_env_end_0085:
 19838 0000EF09 5B                      	pop rbx
 19839 0000EF0A BE00000000              	mov rsi, 0
 19840                                  .L_lambda_simple_params_loop_0085:	; copy params
 19841 0000EF0F 4883FE00                	cmp rsi, 0
 19842 0000EF13 740E                    	je .L_lambda_simple_params_end_0085
 19843 0000EF15 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19844 0000EF1A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19845 0000EF1E 48FFC6                  	inc rsi
 19846 0000EF21 EBEC                    	jmp .L_lambda_simple_params_loop_0085
 19847                                  .L_lambda_simple_params_end_0085:
 19848 0000EF23 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19849 0000EF26 4889C3                  	mov rbx, rax
 19850 0000EF29 58                      	pop rax
 19851 0000EF2A C60005                  	mov byte [rax], T_closure
 19852 0000EF2D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19853 0000EF31 48C74009[3EEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0085
 19854 0000EF39 E90C040000              	jmp .L_lambda_simple_end_0085
 19855                                  .L_lambda_simple_code_0085:	; lambda-simple body
 19856 0000EF3E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 19857 0000EF44 740B                    	je .L_lambda_simple_arity_check_ok_0085
 19858 0000EF46 FF742410                	push qword [rsp + 8 * 2]
 19859 0000EF4A 6A01                    	push 1
 19860 0000EF4C E960270000              	jmp L_error_incorrect_arity_simple
 19861                                  .L_lambda_simple_arity_check_ok_0085:
 19862 0000EF51 C8000000                	enter 0, 0
 19863 0000EF55 BF11000000              	mov rdi, (1 + 8 + 8)
 19864 0000EF5A E899270000              	call malloc
 19865 0000EF5F 50                      	push rax
 19866 0000EF60 BF08000000              	mov rdi, 8 * 1
 19867 0000EF65 E88E270000              	call malloc
 19868 0000EF6A 50                      	push rax
 19869 0000EF6B BF10000000              	mov rdi, 8 * 2
 19870 0000EF70 E883270000              	call malloc
 19871 0000EF75 488B7D10                	mov rdi, ENV
 19872 0000EF79 4831F6                  	xor rsi, rsi
 19873 0000EF7C 4831D2                  	xor rdx, rdx
 19874 0000EF7F 48FFC2                  	inc rdx
 19875                                  	.L_lambda_opt_env_loop_0016:
 19876                                  
 19877 0000EF82 4883FE01                        	cmp rsi, 1
 19878                                  
 19879 0000EF86 7412                            	je .L_lambda_opt_env_end_0016
 19880 0000EF88 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19881 0000EF8C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19882 0000EF90 4883C201                	add rdx, 1
 19883 0000EF94 4883C601                	add rsi, 1
 19884 0000EF98 EBE8                    	jmp .L_lambda_opt_env_loop_0016
 19885                                  
 19886                                          	.L_lambda_opt_env_end_0016:
 19887 0000EF9A 5B                      	pop rbx
 19888 0000EF9B 4831F6                  	xor rsi, rsi
 19889                                  	.L_lambda_opt_params_loop_0016:
 19890                                  
 19891 0000EF9E 4883FE01                        	cmp rsi, 1
 19892                                  
 19893 0000EFA2 740F                            	je .L_lambda_opt_params_end_0016
 19894 0000EFA4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19895 0000EFA9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19896 0000EFAD 4883C601                	add rsi, 1
 19897 0000EFB1 EBEB                    	jmp .L_lambda_opt_params_loop_0016
 19898                                  
 19899                                          	.L_lambda_opt_params_end_0016:
 19900 0000EFB3 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 19901 0000EFB6 4889C3                  	mov rbx, rax
 19902 0000EFB9 58                      	pop rax
 19903 0000EFBA C60005                  	mov byte [rax], T_closure
 19904 0000EFBD 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19905 0000EFC1 48C74009[CEEF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0016
 19906                                  
 19907 0000EFC9 E978030000                      	jmp .L_lambda_opt_end_0016
 19908                                  
 19909                                          	.L_lambda_opt_code_0016:
 19910                                  
 19911 0000EFCE 48837C241001                    	cmp qword [rsp + 8 * 2], 1
 19912                                  
 19913 0000EFD4 740D                            	je .L_lambda_opt_arity_check_exact_0016  ;same num_of_args
 19914                                  
 19915 0000EFD6 7F65                            	jg .L_lambda_opt_arity_check_more_0016  ;greater num_of_args
 19916 0000EFD8 FF742410                	push qword [rsp + 8 * 2]
 19917 0000EFDC 6A01                    	push 1
 19918 0000EFDE E9E2260000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 19919                                  .L_lambda_opt_arity_check_exact_0016:
 19920 0000EFE3 4883EC08                	sub rsp, 8 * 1
 19921 0000EFE7 488D7F10                	lea rdi, [rdi + (8 * 2)]
 19922 0000EFEB 4889E7                  	mov rdi, rsp 
 19923 0000EFEE 488B4708                	mov rax, qword [rdi + 8]
 19924 0000EFF2 488907                  	mov qword [rdi], rax
 19925 0000EFF5 488D7F08                	lea rdi, [rdi + 8]
 19926 0000EFF9 488B4708                	mov rax, qword [rdi + 8]
 19927 0000EFFD 488907                  	mov qword [rdi], rax
 19928 0000F000 488D7F08                	lea rdi, [rdi + 8]
 19929 0000F004 488B4708                	mov rax, qword [rdi + 8]
 19930 0000F008 4889C1                  	mov rcx, rax
 19931 0000F00B 4883C001                	add rax, 1
 19932 0000F00F 488907                  	mov qword [rdi], rax
 19933 0000F012 488D7F08                	lea rdi, [rdi + 8]
 19934                                  	.L_lambda_opt_stack_shrink_loop_0040:
 19935 0000F016 4883F900                	cmp rcx, 0
 19936 0000F01A 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0040
 19937 0000F01C 4883E901                	sub rcx, 1
 19938 0000F020 488D4010                	lea rax, [rax + (8 * 2)]
 19939 0000F024 488B4708                	mov rax, qword [rdi + 8]
 19940 0000F028 488907                  	mov qword [rdi], rax
 19941 0000F02B 488D7F08                	lea rdi, [rdi + 8]
 19942 0000F02F EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0040
 19943                                  
 19944                                          	.L_lambda_opt_stack_shrink_loop_exit_0040:
 19945 0000F031 48C707[01000000]        	mov qword [rdi], sob_nil
 19946 0000F038 E997000000              	jmp .L_lambda_opt_stack_adjusted_0016
 19947                                  
 19948                                          	.L_lambda_opt_arity_check_more_0016:
 19949 0000F03D 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 19950 0000F042 488D4EFF                	lea rcx, [rsi - 1]
 19951 0000F046 49B8-                   	mov r8, sob_nil
 19951 0000F048 [0100000000000000] 
 19952 0000F050 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 19953 0000F055 4889F2                  	mov rdx, rsi
 19954                                  	.L_lambda_opt_stack_shrink_loop_0041:
 19955 0000F058 4883F900                	cmp rcx, 0
 19956 0000F05C 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0041
 19957 0000F05E BF11000000              	mov rdi, 1 + (8 * 2)
 19958 0000F063 E890260000              	call malloc
 19959 0000F068 C60021                  	mov byte [rax], T_pair
 19960 0000F06B 488B1E                  	mov rbx, qword [rsi]
 19961 0000F06E 48895801                	mov SOB_PAIR_CAR(rax), rbx
 19962 0000F072 4C894009                	mov SOB_PAIR_CDR(rax), r8
 19963 0000F076 4883C6F8                	add rsi, -8
 19964 0000F07A 4883E901                	sub rcx, 1
 19965 0000F07E 4989C0                  	mov r8, rax
 19966 0000F081 EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0041
 19967                                  
 19968                                          	.L_lambda_opt_stack_shrink_loop_exit_0041:
 19969 0000F083 4C8902                  	mov qword [rdx], r8
 19970 0000F086 4883EA08                	sub rdx, 8 * 1
 19971 0000F08A 488D742418              	lea rsi, [rsp + (8 * (1 + 2))]
 19972                                  
 19973 0000F08F B901000000                      	mov rcx, 1 
 19974                                  
 19975                                          	.L_lambda_opt_stack_shrink_loop_0042:
 19976 0000F094 4883F900                	cmp rcx, 0
 19977 0000F098 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0042
 19978 0000F09A 488B06                  	mov rax, qword [rsi]
 19979 0000F09D 488902                  	mov qword [rdx], rax
 19980 0000F0A0 488D76F8                	lea rsi, [rsi - 8]
 19981 0000F0A4 4883C2F8                	add rdx, -8
 19982 0000F0A8 4883C1FF                	add rcx, -1
 19983 0000F0AC EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0042
 19984                                  
 19985                                          	.L_lambda_opt_stack_shrink_loop_exit_0042:
 19986                                  
 19987 0000F0AE 48C70202000000                  	mov qword [rdx], 1 + 1
 19988 0000F0B5 4883C6F8                	add rsi, -8
 19989 0000F0B9 4883C2F8                	add rdx, -8
 19990 0000F0BD 488B06                  	mov rax, qword [rsi]
 19991 0000F0C0 488902                  	mov qword [rdx], rax
 19992 0000F0C3 4883C2F8                	add rdx, -8
 19993 0000F0C7 488D76F8                	lea rsi, [rsi - 8]
 19994 0000F0CB 488B06                  	mov rax, qword [rsi]
 19995 0000F0CE 488902                  	mov qword [rdx], rax
 19996 0000F0D1 4889D4                  	mov rsp, rdx
 19997                                  	.L_lambda_opt_stack_adjusted_0016:
 19998 0000F0D4 C8000000                	enter 0, 0
 19999 0000F0D8 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20000 0000F0DC 50                      	push rax
 20001 0000F0DD 6A01                    	push 1
 20002 0000F0DF 488B0425[00000000]      	mov rax, qword [free_var_0]
 20003                                  	assert_closure(rax)
    42 0000F0E7 803805              <1>  cmp byte [%1], %2
    43 0000F0EA 0F85FC3D0000        <1>  jne L_error_incorrect_type
 20004 0000F0F0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20005 0000F0F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20006                                  
 20007 0000F0F6 483D[02000000]                  	cmp rax, sob_boolean_false
 20008                                  
 20009 0000F0FC 740F                            	je .L_if_else_004c
 20010 0000F0FE 48B8-                   	mov rax,L_constants + 4
 20010 0000F100 [0400000000000000] 
 20011                                  
 20012 0000F108 E9C1000000                      	jmp .L_if_end_004c
 20013                                  
 20014                                          	.L_if_else_004c:
 20015 0000F10D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20016 0000F111 50                      	push rax
 20017 0000F112 6A01                    	push 1
 20018 0000F114 488B0425[08000000]      	mov rax, qword [free_var_1]
 20019                                  	assert_closure(rax)
    42 0000F11C 803805              <1>  cmp byte [%1], %2
    43 0000F11F 0F85C73D0000        <1>  jne L_error_incorrect_type
 20020 0000F125 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20021 0000F128 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20022                                  
 20023 0000F12B 483D[02000000]                  	cmp rax, sob_boolean_false
 20024                                  
 20025 0000F131 743A                            	je .L_if_else_004e
 20026 0000F133 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20027 0000F137 50                      	push rax
 20028 0000F138 6A01                    	push 1
 20029 0000F13A 488B0425[88000000]      	mov rax, qword [free_var_17]
 20030                                  	assert_closure(rax)
    42 0000F142 803805              <1>  cmp byte [%1], %2
    43 0000F145 0F85A13D0000        <1>  jne L_error_incorrect_type
 20031 0000F14B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20032 0000F14E FF5009                  	call SOB_CLOSURE_CODE(rax)
 20033 0000F151 50                      	push rax
 20034 0000F152 6A01                    	push 1
 20035 0000F154 488B0425[00000000]      	mov rax, qword [free_var_0]
 20036                                  	assert_closure(rax)
    42 0000F15C 803805              <1>  cmp byte [%1], %2
    43 0000F15F 0F85873D0000        <1>  jne L_error_incorrect_type
 20037 0000F165 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20038 0000F168 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20039                                  
 20040 0000F16B EB0A                            	jmp .L_if_end_004e
 20041                                  
 20042                                          	.L_if_else_004e:
 20043 0000F16D 48B8-                   	mov rax,L_constants + 2
 20043 0000F16F [0200000000000000] 
 20044                                  
 20045                                          	.L_if_end_004e:
 20046                                  
 20047 0000F177 483D[02000000]                  	cmp rax, sob_boolean_false
 20048                                  
 20049 0000F17D 7420                            	je .L_if_else_004d
 20050 0000F17F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20051 0000F183 50                      	push rax
 20052 0000F184 6A01                    	push 1
 20053 0000F186 488B0425[80000000]      	mov rax, qword [free_var_16]
 20054                                  	assert_closure(rax)
    42 0000F18E 803805              <1>  cmp byte [%1], %2
    43 0000F191 0F85553D0000        <1>  jne L_error_incorrect_type
 20055 0000F197 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20056 0000F19A FF5009                  	call SOB_CLOSURE_CODE(rax)
 20057                                  
 20058 0000F19D EB2F                            	jmp .L_if_end_004d
 20059                                  
 20060                                          	.L_if_else_004d:
 20061 0000F19F 48B8-                   	mov rax,L_constants + 460
 20061 0000F1A1 [CC01000000000000] 
 20062 0000F1A9 50                      	push rax
 20063 0000F1AA 48B8-                   	mov rax,L_constants + 451
 20063 0000F1AC [C301000000000000] 
 20064 0000F1B4 50                      	push rax
 20065 0000F1B5 6A02                    	push 2
 20066 0000F1B7 488B0425[30010000]      	mov rax, qword [free_var_38]
 20067                                  	assert_closure(rax)
    42 0000F1BF 803805              <1>  cmp byte [%1], %2
    43 0000F1C2 0F85243D0000        <1>  jne L_error_incorrect_type
 20068 0000F1C8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20069 0000F1CB FF5009                  	call SOB_CLOSURE_CODE(rax)
 20070                                  
 20071                                          	.L_if_end_004d:
 20072                                  
 20073                                          	.L_if_end_004c:
 20074 0000F1CE 50                      	push rax
 20075 0000F1CF 6A01                    	push 1
 20076 0000F1D1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20077 0000F1D6 E81D250000              	call malloc
 20078 0000F1DB 50                      	push rax
 20079 0000F1DC BF10000000              	mov rdi, 8 * 2	; new rib
 20080 0000F1E1 E812250000              	call malloc
 20081 0000F1E6 50                      	push rax
 20082 0000F1E7 BF18000000              	mov rdi, 8 * 3	; extended env
 20083 0000F1EC E807250000              	call malloc
 20084 0000F1F1 488B7D10                	mov rdi, ENV
 20085 0000F1F5 BE00000000              	mov rsi, 0
 20086 0000F1FA BA01000000              	mov rdx, 1
 20087                                  .L_lambda_simple_env_loop_0086:	; ext_env[i + 1] <-- env[i]
 20088 0000F1FF 4883FE02                	cmp rsi, 2
 20089 0000F203 7410                    	je .L_lambda_simple_env_end_0086
 20090 0000F205 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20091 0000F209 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20092 0000F20D 48FFC6                  	inc rsi
 20093 0000F210 48FFC2                  	inc rdx
 20094 0000F213 EBEA                    	jmp .L_lambda_simple_env_loop_0086
 20095                                  .L_lambda_simple_env_end_0086:
 20096 0000F215 5B                      	pop rbx
 20097 0000F216 BE00000000              	mov rsi, 0
 20098                                  .L_lambda_simple_params_loop_0086:	; copy params
 20099 0000F21B 4883FE02                	cmp rsi, 2
 20100 0000F21F 740E                    	je .L_lambda_simple_params_end_0086
 20101 0000F221 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20102 0000F226 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20103 0000F22A 48FFC6                  	inc rsi
 20104 0000F22D EBEC                    	jmp .L_lambda_simple_params_loop_0086
 20105                                  .L_lambda_simple_params_end_0086:
 20106 0000F22F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20107 0000F232 4889C3                  	mov rbx, rax
 20108 0000F235 58                      	pop rax
 20109 0000F236 C60005                  	mov byte [rax], T_closure
 20110 0000F239 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20111 0000F23D 48C74009[4AF20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0086
 20112 0000F245 E998000000              	jmp .L_lambda_simple_end_0086
 20113                                  .L_lambda_simple_code_0086:	; lambda-simple body
 20114 0000F24A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20115 0000F250 740B                    	je .L_lambda_simple_arity_check_ok_0086
 20116 0000F252 FF742410                	push qword [rsp + 8 * 2]
 20117 0000F256 6A01                    	push 1
 20118 0000F258 E954240000              	jmp L_error_incorrect_arity_simple
 20119                                  .L_lambda_simple_arity_check_ok_0086:
 20120 0000F25D C8000000                	enter 0, 0
 20121 0000F261 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20122 0000F265 50                      	push rax
 20123 0000F266 488B4510                	mov rax, qword [rbp + 8 * 2]
 20124                                  
 20125 0000F26A 488B00                                            	mov rax, qword[rax + 8 * 0]
 20126                                  
 20127 0000F26D 488B00                                            	mov rax, qword[rax + 8 * 0]
 20128 0000F270 50                      	push rax
 20129 0000F271 6A02                    	push 2
 20130 0000F273 488B4510                	mov rax, qword [rbp + 8 * 2]
 20131                                  
 20132 0000F277 488B4008                                          	mov rax, qword[rax + 8 * 1]
 20133                                  
 20134 0000F27B 488B00                                            	mov rax, qword[rax + 8 * 0]
 20135                                  .L_applic_TC_009e:
 20136 0000F27E 803805                  	cmp byte [rax], T_closure
 20137 0000F281 0F8526340000            	jne L_code_ptr_error
 20138 0000F287 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20139 0000F28B 53                      	push rbx
 20140 0000F28C FF7508                  	push qword [rbp + 8]
 20141 0000F28F FF7500                  	push qword [rbp]
 20142 0000F292 488B4D18                	mov rcx, [rbp + 3 * 8]
 20143 0000F296 488B542418              	mov rdx, [rsp + 3 * 8]
 20144 0000F29B 488D7204                	lea rsi, [rdx + 4]
 20145 0000F29F 4C8D4EFF                	lea r9, [rsi - 1]
 20146 0000F2A3 488D7903                	lea rdi, [rcx + 3]
 20147 0000F2A7 4D31C0                  	xor r8, r8
 20148                                  .L_tc_recycle_frame_loop_009e:
 20149 0000F2AA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20150 0000F2AE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20151 0000F2B3 49FFC9                  	dec r9
 20152 0000F2B6 4D31C0                  	xor r8, r8
 20153 0000F2B9 48FFCF                  	dec rdi
 20154 0000F2BC 48FFCE                  	dec rsi
 20155 0000F2BF 4883FE00                	cmp rsi, 0
 20156 0000F2C3 75E5                    	jne .L_tc_recycle_frame_loop_009e
 20157                                  .L_tc_recycle_frame_done_009e:
 20158                                  ;this pop rbp in sot to the right place
 20159 0000F2C5 4989C9                  	mov r9, rcx
 20160 0000F2C8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20161 0000F2D0 4C01CC                  	add rsp, r9
 20162 0000F2D3 5D                      	pop rbp
 20163 0000F2D4 488B4D00                	mov rcx, qword [rbp]
 20164 0000F2D8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20165 0000F2DC FFE3                    	jmp rbx
 20166 0000F2DE C9                      	leave
 20167 0000F2DF C21800                  	ret 8 * (2 + 1)
 20168                                  .L_lambda_simple_end_0086:	; new closure is in rax
 20169                                  .L_applic_TC_009f:
 20170 0000F2E2 803805                  	cmp byte [rax], T_closure
 20171 0000F2E5 0F85C2330000            	jne L_code_ptr_error
 20172 0000F2EB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20173 0000F2EF 53                      	push rbx
 20174 0000F2F0 FF7508                  	push qword [rbp + 8]
 20175 0000F2F3 FF7500                  	push qword [rbp]
 20176 0000F2F6 488B4D18                	mov rcx, [rbp + 3 * 8]
 20177 0000F2FA 488B542418              	mov rdx, [rsp + 3 * 8]
 20178 0000F2FF 488D7204                	lea rsi, [rdx + 4]
 20179 0000F303 4C8D4EFF                	lea r9, [rsi - 1]
 20180 0000F307 488D7903                	lea rdi, [rcx + 3]
 20181 0000F30B 4D31C0                  	xor r8, r8
 20182                                  .L_tc_recycle_frame_loop_009f:
 20183 0000F30E 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20184 0000F312 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20185 0000F317 49FFC9                  	dec r9
 20186 0000F31A 4D31C0                  	xor r8, r8
 20187 0000F31D 48FFCF                  	dec rdi
 20188 0000F320 48FFCE                  	dec rsi
 20189 0000F323 4883FE00                	cmp rsi, 0
 20190 0000F327 75E5                    	jne .L_tc_recycle_frame_loop_009f
 20191                                  .L_tc_recycle_frame_done_009f:
 20192                                  ;this pop rbp in sot to the right place
 20193 0000F329 4989C9                  	mov r9, rcx
 20194 0000F32C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20195 0000F334 4C01CC                  	add rsp, r9
 20196 0000F337 5D                      	pop rbp
 20197 0000F338 488B4D00                	mov rcx, qword [rbp]
 20198 0000F33C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20199 0000F340 FFE3                    	jmp rbx
 20200 0000F342 C9                      	leave
 20201 0000F343 C22000                  	ret 8 * (2 + 2)
 20202                                  .L_lambda_opt_end_0016:	; new closure is in rax
 20203 0000F346 C9                      	leave
 20204 0000F347 C21800                  	ret 8 * (2 + 1)
 20205                                  .L_lambda_simple_end_0085:	; new closure is in rax
 20206                                  	assert_closure(rax)
    42 0000F34A 803805              <1>  cmp byte [%1], %2
    43 0000F34D 0F85993B0000        <1>  jne L_error_incorrect_type
 20207 0000F353 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20208 0000F356 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20209 0000F359 48890425[A0010000]      	mov qword [free_var_52], rax
 20210 0000F361 48B8-                   	mov rax, sob_void
 20210 0000F363 [0000000000000000] 
 20211                                  
 20212 0000F36B 4889C7                  	mov rdi, rax
 20213 0000F36E E896230000              	call print_sexpr_if_not_void
 20214                                  
 20215 0000F373 48B8-                   	mov rax,L_constants + 23
 20215 0000F375 [1700000000000000] 
 20216 0000F37D 50                      	push rax
 20217 0000F37E 6A01                    	push 1
 20218 0000F380 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20219 0000F385 E86E230000              	call malloc
 20220 0000F38A 50                      	push rax
 20221 0000F38B BF00000000              	mov rdi, 8 * 0	; new rib
 20222 0000F390 E863230000              	call malloc
 20223 0000F395 50                      	push rax
 20224 0000F396 BF08000000              	mov rdi, 8 * 1	; extended env
 20225 0000F39B E858230000              	call malloc
 20226 0000F3A0 488B7D10                	mov rdi, ENV
 20227 0000F3A4 BE00000000              	mov rsi, 0
 20228 0000F3A9 BA01000000              	mov rdx, 1
 20229                                  .L_lambda_simple_env_loop_0087:	; ext_env[i + 1] <-- env[i]
 20230 0000F3AE 4883FE00                	cmp rsi, 0
 20231 0000F3B2 7410                    	je .L_lambda_simple_env_end_0087
 20232 0000F3B4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20233 0000F3B8 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20234 0000F3BC 48FFC6                  	inc rsi
 20235 0000F3BF 48FFC2                  	inc rdx
 20236 0000F3C2 EBEA                    	jmp .L_lambda_simple_env_loop_0087
 20237                                  .L_lambda_simple_env_end_0087:
 20238 0000F3C4 5B                      	pop rbx
 20239 0000F3C5 BE00000000              	mov rsi, 0
 20240                                  .L_lambda_simple_params_loop_0087:	; copy params
 20241 0000F3CA 4883FE00                	cmp rsi, 0
 20242 0000F3CE 740E                    	je .L_lambda_simple_params_end_0087
 20243 0000F3D0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20244 0000F3D5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20245 0000F3D9 48FFC6                  	inc rsi
 20246 0000F3DC EBEC                    	jmp .L_lambda_simple_params_loop_0087
 20247                                  .L_lambda_simple_params_end_0087:
 20248 0000F3DE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20249 0000F3E1 4889C3                  	mov rbx, rax
 20250 0000F3E4 58                      	pop rax
 20251 0000F3E5 C60005                  	mov byte [rax], T_closure
 20252 0000F3E8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20253 0000F3EC 48C74009[F9F30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0087
 20254 0000F3F4 E949040000              	jmp .L_lambda_simple_end_0087
 20255                                  .L_lambda_simple_code_0087:	; lambda-simple body
 20256 0000F3F9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20257 0000F3FF 740B                    	je .L_lambda_simple_arity_check_ok_0087
 20258 0000F401 FF742410                	push qword [rsp + 8 * 2]
 20259 0000F405 6A01                    	push 1
 20260 0000F407 E9A5220000              	jmp L_error_incorrect_arity_simple
 20261                                  .L_lambda_simple_arity_check_ok_0087:
 20262 0000F40C C8000000                	enter 0, 0
 20263 0000F410 BF08000000              	mov rdi, 8
 20264 0000F415 E8DE220000              	call malloc
 20265 0000F41A 488B5D20                	mov rbx, PARAM(0)
 20266 0000F41E 488918                  	mov qword [rax], rbx
 20267 0000F421 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 20268                                  
 20269 0000F425 48B8-                            	mov rax, sob_void
 20269 0000F427 [0000000000000000] 
 20270                                  
 20271 0000F42F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20272 0000F434 E8BF220000              	call malloc
 20273 0000F439 50                      	push rax
 20274 0000F43A BF08000000              	mov rdi, 8 * 1	; new rib
 20275 0000F43F E8B4220000              	call malloc
 20276 0000F444 50                      	push rax
 20277 0000F445 BF10000000              	mov rdi, 8 * 2	; extended env
 20278 0000F44A E8A9220000              	call malloc
 20279 0000F44F 488B7D10                	mov rdi, ENV
 20280 0000F453 BE00000000              	mov rsi, 0
 20281 0000F458 BA01000000              	mov rdx, 1
 20282                                  .L_lambda_simple_env_loop_0088:	; ext_env[i + 1] <-- env[i]
 20283 0000F45D 4883FE01                	cmp rsi, 1
 20284 0000F461 7410                    	je .L_lambda_simple_env_end_0088
 20285 0000F463 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20286 0000F467 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20287 0000F46B 48FFC6                  	inc rsi
 20288 0000F46E 48FFC2                  	inc rdx
 20289 0000F471 EBEA                    	jmp .L_lambda_simple_env_loop_0088
 20290                                  .L_lambda_simple_env_end_0088:
 20291 0000F473 5B                      	pop rbx
 20292 0000F474 BE00000000              	mov rsi, 0
 20293                                  .L_lambda_simple_params_loop_0088:	; copy params
 20294 0000F479 4883FE01                	cmp rsi, 1
 20295 0000F47D 740E                    	je .L_lambda_simple_params_end_0088
 20296 0000F47F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20297 0000F484 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20298 0000F488 48FFC6                  	inc rsi
 20299 0000F48B EBEC                    	jmp .L_lambda_simple_params_loop_0088
 20300                                  .L_lambda_simple_params_end_0088:
 20301 0000F48D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20302 0000F490 4889C3                  	mov rbx, rax
 20303 0000F493 58                      	pop rax
 20304 0000F494 C60005                  	mov byte [rax], T_closure
 20305 0000F497 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20306 0000F49B 48C74009[A8F40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0088
 20307 0000F4A3 E972020000              	jmp .L_lambda_simple_end_0088
 20308                                  .L_lambda_simple_code_0088:	; lambda-simple body
 20309 0000F4A8 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20310 0000F4AE 740B                    	je .L_lambda_simple_arity_check_ok_0088
 20311 0000F4B0 FF742410                	push qword [rsp + 8 * 2]
 20312 0000F4B4 6A02                    	push 2
 20313 0000F4B6 E9F6210000              	jmp L_error_incorrect_arity_simple
 20314                                  .L_lambda_simple_arity_check_ok_0088:
 20315 0000F4BB C8000000                	enter 0, 0
 20316 0000F4BF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20317 0000F4C3 50                      	push rax
 20318 0000F4C4 6A01                    	push 1
 20319 0000F4C6 488B0425[00000000]      	mov rax, qword [free_var_0]
 20320                                  	assert_closure(rax)
    42 0000F4CE 803805              <1>  cmp byte [%1], %2
    43 0000F4D1 0F85153A0000        <1>  jne L_error_incorrect_type
 20321 0000F4D7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20322 0000F4DA FF5009                  	call SOB_CLOSURE_CODE(rax)
 20323                                  
 20324 0000F4DD 483D[02000000]                  	cmp rax, sob_boolean_false
 20325                                  
 20326 0000F4E3 0F847F000000                    	je .L_if_else_004f
 20327 0000F4E9 48B8-                   	mov rax,L_constants + 0
 20327 0000F4EB [0000000000000000] 
 20328 0000F4F3 50                      	push rax
 20329 0000F4F4 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20330 0000F4F8 50                      	push rax
 20331 0000F4F9 6A02                    	push 2
 20332 0000F4FB 488B0425[98010000]      	mov rax, qword [free_var_51]
 20333                                  .L_applic_TC_00a1:
 20334 0000F503 803805                  	cmp byte [rax], T_closure
 20335 0000F506 0F85A1310000            	jne L_code_ptr_error
 20336 0000F50C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20337 0000F510 53                      	push rbx
 20338 0000F511 FF7508                  	push qword [rbp + 8]
 20339 0000F514 FF7500                  	push qword [rbp]
 20340 0000F517 488B4D18                	mov rcx, [rbp + 3 * 8]
 20341 0000F51B 488B542418              	mov rdx, [rsp + 3 * 8]
 20342 0000F520 488D7204                	lea rsi, [rdx + 4]
 20343 0000F524 4C8D4EFF                	lea r9, [rsi - 1]
 20344 0000F528 488D7903                	lea rdi, [rcx + 3]
 20345 0000F52C 4D31C0                  	xor r8, r8
 20346                                  .L_tc_recycle_frame_loop_00a1:
 20347 0000F52F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20348 0000F533 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20349 0000F538 49FFC9                  	dec r9
 20350 0000F53B 4D31C0                  	xor r8, r8
 20351 0000F53E 48FFCF                  	dec rdi
 20352 0000F541 48FFCE                  	dec rsi
 20353 0000F544 4883FE00                	cmp rsi, 0
 20354 0000F548 75E5                    	jne .L_tc_recycle_frame_loop_00a1
 20355                                  .L_tc_recycle_frame_done_00a1:
 20356                                  ;this pop rbp in sot to the right place
 20357 0000F54A 4989C9                  	mov r9, rcx
 20358 0000F54D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20359 0000F555 4C01CC                  	add rsp, r9
 20360 0000F558 5D                      	pop rbp
 20361 0000F559 488B4D00                	mov rcx, qword [rbp]
 20362 0000F55D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20363 0000F561 FFE3                    	jmp rbx
 20364                                  
 20365 0000F563 E9AE010000                      	jmp .L_if_end_004f
 20366                                  
 20367                                          	.L_if_else_004f:
 20368 0000F568 48B8-                   	mov rax,L_constants + 128
 20368 0000F56A [8000000000000000] 
 20369 0000F572 50                      	push rax
 20370 0000F573 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20371 0000F577 50                      	push rax
 20372 0000F578 6A02                    	push 2
 20373 0000F57A 488B0425[08030000]      	mov rax, qword [free_var_97]
 20374                                  	assert_closure(rax)
    42 0000F582 803805              <1>  cmp byte [%1], %2
    43 0000F585 0F8561390000        <1>  jne L_error_incorrect_type
 20375 0000F58B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20376 0000F58E FF5009                  	call SOB_CLOSURE_CODE(rax)
 20377 0000F591 50                      	push rax
 20378 0000F592 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20379 0000F596 50                      	push rax
 20380 0000F597 6A01                    	push 1
 20381 0000F599 488B0425[88000000]      	mov rax, qword [free_var_17]
 20382                                  	assert_closure(rax)
    42 0000F5A1 803805              <1>  cmp byte [%1], %2
    43 0000F5A4 0F8542390000        <1>  jne L_error_incorrect_type
 20383 0000F5AA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20384 0000F5AD FF5009                  	call SOB_CLOSURE_CODE(rax)
 20385 0000F5B0 50                      	push rax
 20386 0000F5B1 6A02                    	push 2
 20387 0000F5B3 488B4510                	mov rax, qword [rbp + 8 * 2]
 20388                                  
 20389 0000F5B7 488B00                                            	mov rax, qword[rax + 8 * 0]
 20390                                  
 20391 0000F5BA 488B00                                            	mov rax, qword[rax + 8 * 0]
 20392 0000F5BD 488B00                  	mov rax, qword [rax]
 20393                                  	assert_closure(rax)
    42 0000F5C0 803805              <1>  cmp byte [%1], %2
    43 0000F5C3 0F8523390000        <1>  jne L_error_incorrect_type
 20394 0000F5C9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20395 0000F5CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 20396 0000F5CF 50                      	push rax
 20397 0000F5D0 6A01                    	push 1
 20398 0000F5D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20399 0000F5D7 E81C210000              	call malloc
 20400 0000F5DC 50                      	push rax
 20401 0000F5DD BF10000000              	mov rdi, 8 * 2	; new rib
 20402 0000F5E2 E811210000              	call malloc
 20403 0000F5E7 50                      	push rax
 20404 0000F5E8 BF18000000              	mov rdi, 8 * 3	; extended env
 20405 0000F5ED E806210000              	call malloc
 20406 0000F5F2 488B7D10                	mov rdi, ENV
 20407 0000F5F6 BE00000000              	mov rsi, 0
 20408 0000F5FB BA01000000              	mov rdx, 1
 20409                                  .L_lambda_simple_env_loop_0089:	; ext_env[i + 1] <-- env[i]
 20410 0000F600 4883FE02                	cmp rsi, 2
 20411 0000F604 7410                    	je .L_lambda_simple_env_end_0089
 20412 0000F606 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20413 0000F60A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20414 0000F60E 48FFC6                  	inc rsi
 20415 0000F611 48FFC2                  	inc rdx
 20416 0000F614 EBEA                    	jmp .L_lambda_simple_env_loop_0089
 20417                                  .L_lambda_simple_env_end_0089:
 20418 0000F616 5B                      	pop rbx
 20419 0000F617 BE00000000              	mov rsi, 0
 20420                                  .L_lambda_simple_params_loop_0089:	; copy params
 20421 0000F61C 4883FE02                	cmp rsi, 2
 20422 0000F620 740E                    	je .L_lambda_simple_params_end_0089
 20423 0000F622 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20424 0000F627 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20425 0000F62B 48FFC6                  	inc rsi
 20426 0000F62E EBEC                    	jmp .L_lambda_simple_params_loop_0089
 20427                                  .L_lambda_simple_params_end_0089:
 20428 0000F630 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20429 0000F633 4889C3                  	mov rbx, rax
 20430 0000F636 58                      	pop rax
 20431 0000F637 C60005                  	mov byte [rax], T_closure
 20432 0000F63A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20433 0000F63E 48C74009[48F60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0089
 20434 0000F646 EB6E                    	jmp .L_lambda_simple_end_0089
 20435                                  .L_lambda_simple_code_0089:	; lambda-simple body
 20436 0000F648 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20437 0000F64E 740B                    	je .L_lambda_simple_arity_check_ok_0089
 20438 0000F650 FF742410                	push qword [rsp + 8 * 2]
 20439 0000F654 6A01                    	push 1
 20440 0000F656 E956200000              	jmp L_error_incorrect_arity_simple
 20441                                  .L_lambda_simple_arity_check_ok_0089:
 20442 0000F65B C8000000                	enter 0, 0
 20443 0000F65F 488B4510                	mov rax, qword [rbp + 8 * 2]
 20444                                  
 20445 0000F663 488B00                                            	mov rax, qword[rax + 8 * 0]
 20446                                  
 20447 0000F666 488B00                                            	mov rax, qword[rax + 8 * 0]
 20448 0000F669 50                      	push rax
 20449 0000F66A 6A01                    	push 1
 20450 0000F66C 488B0425[80000000]      	mov rax, qword [free_var_16]
 20451                                  	assert_closure(rax)
    42 0000F674 803805              <1>  cmp byte [%1], %2
    43 0000F677 0F856F380000        <1>  jne L_error_incorrect_type
 20452 0000F67D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20453 0000F680 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20454 0000F683 50                      	push rax
 20455 0000F684 488B4510                	mov rax, qword [rbp + 8 * 2]
 20456                                  
 20457 0000F688 488B00                                            	mov rax, qword[rax + 8 * 0]
 20458                                  
 20459 0000F68B 488B4008                                          	mov rax, qword[rax + 8 * 1]
 20460 0000F68F 50                      	push rax
 20461 0000F690 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20462 0000F694 50                      	push rax
 20463 0000F695 6A03                    	push 3
 20464 0000F697 488B0425[88010000]      	mov rax, qword [free_var_49]
 20465                                  	assert_closure(rax)
    42 0000F69F 803805              <1>  cmp byte [%1], %2
    43 0000F6A2 0F8544380000        <1>  jne L_error_incorrect_type
 20466 0000F6A8 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20467 0000F6AB FF5009                  	call SOB_CLOSURE_CODE(rax)
 20468                                  
 20469 0000F6AE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20470 0000F6B2 C9                      	leave
 20471 0000F6B3 C21800                  	ret 8 * (2 + 1)
 20472                                  .L_lambda_simple_end_0089:	; new closure is in rax
 20473                                  .L_applic_TC_00a0:
 20474 0000F6B6 803805                  	cmp byte [rax], T_closure
 20475 0000F6B9 0F85EE2F0000            	jne L_code_ptr_error
 20476 0000F6BF 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20477 0000F6C3 53                      	push rbx
 20478 0000F6C4 FF7508                  	push qword [rbp + 8]
 20479 0000F6C7 FF7500                  	push qword [rbp]
 20480 0000F6CA 488B4D18                	mov rcx, [rbp + 3 * 8]
 20481 0000F6CE 488B542418              	mov rdx, [rsp + 3 * 8]
 20482 0000F6D3 488D7204                	lea rsi, [rdx + 4]
 20483 0000F6D7 4C8D4EFF                	lea r9, [rsi - 1]
 20484 0000F6DB 488D7903                	lea rdi, [rcx + 3]
 20485 0000F6DF 4D31C0                  	xor r8, r8
 20486                                  .L_tc_recycle_frame_loop_00a0:
 20487 0000F6E2 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20488 0000F6E6 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20489 0000F6EB 49FFC9                  	dec r9
 20490 0000F6EE 4D31C0                  	xor r8, r8
 20491 0000F6F1 48FFCF                  	dec rdi
 20492 0000F6F4 48FFCE                  	dec rsi
 20493 0000F6F7 4883FE00                	cmp rsi, 0
 20494 0000F6FB 75E5                    	jne .L_tc_recycle_frame_loop_00a0
 20495                                  .L_tc_recycle_frame_done_00a0:
 20496                                  ;this pop rbp in sot to the right place
 20497 0000F6FD 4989C9                  	mov r9, rcx
 20498 0000F700 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20499 0000F708 4C01CC                  	add rsp, r9
 20500 0000F70B 5D                      	pop rbp
 20501 0000F70C 488B4D00                	mov rcx, qword [rbp]
 20502 0000F710 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20503 0000F714 FFE3                    	jmp rbx
 20504                                  
 20505                                          	.L_if_end_004f:
 20506 0000F716 C9                      	leave
 20507 0000F717 C22000                  	ret 8 * (2 + 2)
 20508                                  .L_lambda_simple_end_0088:	; new closure is in rax
 20509 0000F71A 50                      	push rax
 20510 0000F71B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20511 0000F71F 8F00                    	pop qword [rax]
 20512 0000F721 48B8-                   	mov rax, sob_void
 20512 0000F723 [0000000000000000] 
 20513                                  
 20514 0000F72B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20515 0000F730 E8C31F0000              	call malloc
 20516 0000F735 50                      	push rax
 20517 0000F736 BF08000000              	mov rdi, 8 * 1	; new rib
 20518 0000F73B E8B81F0000              	call malloc
 20519 0000F740 50                      	push rax
 20520 0000F741 BF10000000              	mov rdi, 8 * 2	; extended env
 20521 0000F746 E8AD1F0000              	call malloc
 20522 0000F74B 488B7D10                	mov rdi, ENV
 20523 0000F74F BE00000000              	mov rsi, 0
 20524 0000F754 BA01000000              	mov rdx, 1
 20525                                  .L_lambda_simple_env_loop_008a:	; ext_env[i + 1] <-- env[i]
 20526 0000F759 4883FE01                	cmp rsi, 1
 20527 0000F75D 7410                    	je .L_lambda_simple_env_end_008a
 20528 0000F75F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20529 0000F763 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20530 0000F767 48FFC6                  	inc rsi
 20531 0000F76A 48FFC2                  	inc rdx
 20532 0000F76D EBEA                    	jmp .L_lambda_simple_env_loop_008a
 20533                                  .L_lambda_simple_env_end_008a:
 20534 0000F76F 5B                      	pop rbx
 20535 0000F770 BE00000000              	mov rsi, 0
 20536                                  .L_lambda_simple_params_loop_008a:	; copy params
 20537 0000F775 4883FE01                	cmp rsi, 1
 20538 0000F779 740E                    	je .L_lambda_simple_params_end_008a
 20539 0000F77B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20540 0000F780 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20541 0000F784 48FFC6                  	inc rsi
 20542 0000F787 EBEC                    	jmp .L_lambda_simple_params_loop_008a
 20543                                  .L_lambda_simple_params_end_008a:
 20544 0000F789 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20545 0000F78C 4889C3                  	mov rbx, rax
 20546 0000F78F 58                      	pop rax
 20547 0000F790 C60005                  	mov byte [rax], T_closure
 20548 0000F793 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20549 0000F797 48C74009[A4F70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008a
 20550 0000F79F E99A000000              	jmp .L_lambda_simple_end_008a
 20551                                  .L_lambda_simple_code_008a:	; lambda-simple body
 20552 0000F7A4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20553 0000F7AA 740B                    	je .L_lambda_simple_arity_check_ok_008a
 20554 0000F7AC FF742410                	push qword [rsp + 8 * 2]
 20555 0000F7B0 6A01                    	push 1
 20556 0000F7B2 E9FA1E0000              	jmp L_error_incorrect_arity_simple
 20557                                  .L_lambda_simple_arity_check_ok_008a:
 20558 0000F7B7 C8000000                	enter 0, 0
 20559 0000F7BB 48B8-                   	mov rax,L_constants + 32
 20559 0000F7BD [2000000000000000] 
 20560 0000F7C5 50                      	push rax
 20561 0000F7C6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20562 0000F7CA 50                      	push rax
 20563 0000F7CB 6A02                    	push 2
 20564 0000F7CD 488B4510                	mov rax, qword [rbp + 8 * 2]
 20565                                  
 20566 0000F7D1 488B00                                            	mov rax, qword[rax + 8 * 0]
 20567                                  
 20568 0000F7D4 488B00                                            	mov rax, qword[rax + 8 * 0]
 20569 0000F7D7 488B00                  	mov rax, qword [rax]
 20570                                  .L_applic_TC_00a2:
 20571 0000F7DA 803805                  	cmp byte [rax], T_closure
 20572 0000F7DD 0F85CA2E0000            	jne L_code_ptr_error
 20573 0000F7E3 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20574 0000F7E7 53                      	push rbx
 20575 0000F7E8 FF7508                  	push qword [rbp + 8]
 20576 0000F7EB FF7500                  	push qword [rbp]
 20577 0000F7EE 488B4D18                	mov rcx, [rbp + 3 * 8]
 20578 0000F7F2 488B542418              	mov rdx, [rsp + 3 * 8]
 20579 0000F7F7 488D7204                	lea rsi, [rdx + 4]
 20580 0000F7FB 4C8D4EFF                	lea r9, [rsi - 1]
 20581 0000F7FF 488D7903                	lea rdi, [rcx + 3]
 20582 0000F803 4D31C0                  	xor r8, r8
 20583                                  .L_tc_recycle_frame_loop_00a2:
 20584 0000F806 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20585 0000F80A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20586 0000F80F 49FFC9                  	dec r9
 20587 0000F812 4D31C0                  	xor r8, r8
 20588 0000F815 48FFCF                  	dec rdi
 20589 0000F818 48FFCE                  	dec rsi
 20590 0000F81B 4883FE00                	cmp rsi, 0
 20591 0000F81F 75E5                    	jne .L_tc_recycle_frame_loop_00a2
 20592                                  .L_tc_recycle_frame_done_00a2:
 20593                                  ;this pop rbp in sot to the right place
 20594 0000F821 4989C9                  	mov r9, rcx
 20595 0000F824 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20596 0000F82C 4C01CC                  	add rsp, r9
 20597 0000F82F 5D                      	pop rbp
 20598 0000F830 488B4D00                	mov rcx, qword [rbp]
 20599 0000F834 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20600 0000F838 FFE3                    	jmp rbx
 20601 0000F83A C9                      	leave
 20602 0000F83B C21800                  	ret 8 * (2 + 1)
 20603                                  .L_lambda_simple_end_008a:	; new closure is in rax
 20604 0000F83E C9                      	leave
 20605 0000F83F C21800                  	ret 8 * (2 + 1)
 20606                                  .L_lambda_simple_end_0087:	; new closure is in rax
 20607                                  	assert_closure(rax)
    42 0000F842 803805              <1>  cmp byte [%1], %2
    43 0000F845 0F85A1360000        <1>  jne L_error_incorrect_type
 20608 0000F84B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20609 0000F84E FF5009                  	call SOB_CLOSURE_CODE(rax)
 20610 0000F851 48890425[38040000]      	mov qword [free_var_135], rax
 20611 0000F859 48B8-                   	mov rax, sob_void
 20611 0000F85B [0000000000000000] 
 20612                                  
 20613 0000F863 4889C7                  	mov rdi, rax
 20614 0000F866 E89E1E0000              	call print_sexpr_if_not_void
 20615                                  
 20616 0000F86B 48B8-                   	mov rax,L_constants + 23
 20616 0000F86D [1700000000000000] 
 20617 0000F875 50                      	push rax
 20618 0000F876 6A01                    	push 1
 20619 0000F878 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20620 0000F87D E8761E0000              	call malloc
 20621 0000F882 50                      	push rax
 20622 0000F883 BF00000000              	mov rdi, 8 * 0	; new rib
 20623 0000F888 E86B1E0000              	call malloc
 20624 0000F88D 50                      	push rax
 20625 0000F88E BF08000000              	mov rdi, 8 * 1	; extended env
 20626 0000F893 E8601E0000              	call malloc
 20627 0000F898 488B7D10                	mov rdi, ENV
 20628 0000F89C BE00000000              	mov rsi, 0
 20629 0000F8A1 BA01000000              	mov rdx, 1
 20630                                  .L_lambda_simple_env_loop_008b:	; ext_env[i + 1] <-- env[i]
 20631 0000F8A6 4883FE00                	cmp rsi, 0
 20632 0000F8AA 7410                    	je .L_lambda_simple_env_end_008b
 20633 0000F8AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20634 0000F8B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20635 0000F8B4 48FFC6                  	inc rsi
 20636 0000F8B7 48FFC2                  	inc rdx
 20637 0000F8BA EBEA                    	jmp .L_lambda_simple_env_loop_008b
 20638                                  .L_lambda_simple_env_end_008b:
 20639 0000F8BC 5B                      	pop rbx
 20640 0000F8BD BE00000000              	mov rsi, 0
 20641                                  .L_lambda_simple_params_loop_008b:	; copy params
 20642 0000F8C2 4883FE00                	cmp rsi, 0
 20643 0000F8C6 740E                    	je .L_lambda_simple_params_end_008b
 20644 0000F8C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20645 0000F8CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20646 0000F8D1 48FFC6                  	inc rsi
 20647 0000F8D4 EBEC                    	jmp .L_lambda_simple_params_loop_008b
 20648                                  .L_lambda_simple_params_end_008b:
 20649 0000F8D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20650 0000F8D9 4889C3                  	mov rbx, rax
 20651 0000F8DC 58                      	pop rax
 20652 0000F8DD C60005                  	mov byte [rax], T_closure
 20653 0000F8E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20654 0000F8E4 48C74009[F1F80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008b
 20655 0000F8EC E949040000              	jmp .L_lambda_simple_end_008b
 20656                                  .L_lambda_simple_code_008b:	; lambda-simple body
 20657 0000F8F1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20658 0000F8F7 740B                    	je .L_lambda_simple_arity_check_ok_008b
 20659 0000F8F9 FF742410                	push qword [rsp + 8 * 2]
 20660 0000F8FD 6A01                    	push 1
 20661 0000F8FF E9AD1D0000              	jmp L_error_incorrect_arity_simple
 20662                                  .L_lambda_simple_arity_check_ok_008b:
 20663 0000F904 C8000000                	enter 0, 0
 20664 0000F908 BF08000000              	mov rdi, 8
 20665 0000F90D E8E61D0000              	call malloc
 20666 0000F912 488B5D20                	mov rbx, PARAM(0)
 20667 0000F916 488918                  	mov qword [rax], rbx
 20668 0000F919 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 20669                                  
 20670 0000F91D 48B8-                            	mov rax, sob_void
 20670 0000F91F [0000000000000000] 
 20671                                  
 20672 0000F927 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20673 0000F92C E8C71D0000              	call malloc
 20674 0000F931 50                      	push rax
 20675 0000F932 BF08000000              	mov rdi, 8 * 1	; new rib
 20676 0000F937 E8BC1D0000              	call malloc
 20677 0000F93C 50                      	push rax
 20678 0000F93D BF10000000              	mov rdi, 8 * 2	; extended env
 20679 0000F942 E8B11D0000              	call malloc
 20680 0000F947 488B7D10                	mov rdi, ENV
 20681 0000F94B BE00000000              	mov rsi, 0
 20682 0000F950 BA01000000              	mov rdx, 1
 20683                                  .L_lambda_simple_env_loop_008c:	; ext_env[i + 1] <-- env[i]
 20684 0000F955 4883FE01                	cmp rsi, 1
 20685 0000F959 7410                    	je .L_lambda_simple_env_end_008c
 20686 0000F95B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20687 0000F95F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20688 0000F963 48FFC6                  	inc rsi
 20689 0000F966 48FFC2                  	inc rdx
 20690 0000F969 EBEA                    	jmp .L_lambda_simple_env_loop_008c
 20691                                  .L_lambda_simple_env_end_008c:
 20692 0000F96B 5B                      	pop rbx
 20693 0000F96C BE00000000              	mov rsi, 0
 20694                                  .L_lambda_simple_params_loop_008c:	; copy params
 20695 0000F971 4883FE01                	cmp rsi, 1
 20696 0000F975 740E                    	je .L_lambda_simple_params_end_008c
 20697 0000F977 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20698 0000F97C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20699 0000F980 48FFC6                  	inc rsi
 20700 0000F983 EBEC                    	jmp .L_lambda_simple_params_loop_008c
 20701                                  .L_lambda_simple_params_end_008c:
 20702 0000F985 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20703 0000F988 4889C3                  	mov rbx, rax
 20704 0000F98B 58                      	pop rax
 20705 0000F98C C60005                  	mov byte [rax], T_closure
 20706 0000F98F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20707 0000F993 48C74009[A0F90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008c
 20708 0000F99B E972020000              	jmp .L_lambda_simple_end_008c
 20709                                  .L_lambda_simple_code_008c:	; lambda-simple body
 20710 0000F9A0 48837C241002            	cmp qword [rsp + 8 * 2], 2
 20711 0000F9A6 740B                    	je .L_lambda_simple_arity_check_ok_008c
 20712 0000F9A8 FF742410                	push qword [rsp + 8 * 2]
 20713 0000F9AC 6A02                    	push 2
 20714 0000F9AE E9FE1C0000              	jmp L_error_incorrect_arity_simple
 20715                                  .L_lambda_simple_arity_check_ok_008c:
 20716 0000F9B3 C8000000                	enter 0, 0
 20717 0000F9B7 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20718 0000F9BB 50                      	push rax
 20719 0000F9BC 6A01                    	push 1
 20720 0000F9BE 488B0425[00000000]      	mov rax, qword [free_var_0]
 20721                                  	assert_closure(rax)
    42 0000F9C6 803805              <1>  cmp byte [%1], %2
    43 0000F9C9 0F851D350000        <1>  jne L_error_incorrect_type
 20722 0000F9CF FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20723 0000F9D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20724                                  
 20725 0000F9D5 483D[02000000]                  	cmp rax, sob_boolean_false
 20726                                  
 20727 0000F9DB 0F847F000000                    	je .L_if_else_0050
 20728 0000F9E1 48B8-                   	mov rax,L_constants + 4
 20728 0000F9E3 [0400000000000000] 
 20729 0000F9EB 50                      	push rax
 20730 0000F9EC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20731 0000F9F0 50                      	push rax
 20732 0000F9F1 6A02                    	push 2
 20733 0000F9F3 488B0425[A0010000]      	mov rax, qword [free_var_52]
 20734                                  .L_applic_TC_00a4:
 20735 0000F9FB 803805                  	cmp byte [rax], T_closure
 20736 0000F9FE 0F85A92C0000            	jne L_code_ptr_error
 20737 0000FA04 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20738 0000FA08 53                      	push rbx
 20739 0000FA09 FF7508                  	push qword [rbp + 8]
 20740 0000FA0C FF7500                  	push qword [rbp]
 20741 0000FA0F 488B4D18                	mov rcx, [rbp + 3 * 8]
 20742 0000FA13 488B542418              	mov rdx, [rsp + 3 * 8]
 20743 0000FA18 488D7204                	lea rsi, [rdx + 4]
 20744 0000FA1C 4C8D4EFF                	lea r9, [rsi - 1]
 20745 0000FA20 488D7903                	lea rdi, [rcx + 3]
 20746 0000FA24 4D31C0                  	xor r8, r8
 20747                                  .L_tc_recycle_frame_loop_00a4:
 20748 0000FA27 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20749 0000FA2B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20750 0000FA30 49FFC9                  	dec r9
 20751 0000FA33 4D31C0                  	xor r8, r8
 20752 0000FA36 48FFCF                  	dec rdi
 20753 0000FA39 48FFCE                  	dec rsi
 20754 0000FA3C 4883FE00                	cmp rsi, 0
 20755 0000FA40 75E5                    	jne .L_tc_recycle_frame_loop_00a4
 20756                                  .L_tc_recycle_frame_done_00a4:
 20757                                  ;this pop rbp in sot to the right place
 20758 0000FA42 4989C9                  	mov r9, rcx
 20759 0000FA45 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20760 0000FA4D 4C01CC                  	add rsp, r9
 20761 0000FA50 5D                      	pop rbp
 20762 0000FA51 488B4D00                	mov rcx, qword [rbp]
 20763 0000FA55 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20764 0000FA59 FFE3                    	jmp rbx
 20765                                  
 20766 0000FA5B E9AE010000                      	jmp .L_if_end_0050
 20767                                  
 20768                                          	.L_if_else_0050:
 20769 0000FA60 48B8-                   	mov rax,L_constants + 128
 20769 0000FA62 [8000000000000000] 
 20770 0000FA6A 50                      	push rax
 20771 0000FA6B 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 20772 0000FA6F 50                      	push rax
 20773 0000FA70 6A02                    	push 2
 20774 0000FA72 488B0425[08030000]      	mov rax, qword [free_var_97]
 20775                                  	assert_closure(rax)
    42 0000FA7A 803805              <1>  cmp byte [%1], %2
    43 0000FA7D 0F8569340000        <1>  jne L_error_incorrect_type
 20776 0000FA83 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20777 0000FA86 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20778 0000FA89 50                      	push rax
 20779 0000FA8A 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20780 0000FA8E 50                      	push rax
 20781 0000FA8F 6A01                    	push 1
 20782 0000FA91 488B0425[88000000]      	mov rax, qword [free_var_17]
 20783                                  	assert_closure(rax)
    42 0000FA99 803805              <1>  cmp byte [%1], %2
    43 0000FA9C 0F854A340000        <1>  jne L_error_incorrect_type
 20784 0000FAA2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20785 0000FAA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20786 0000FAA8 50                      	push rax
 20787 0000FAA9 6A02                    	push 2
 20788 0000FAAB 488B4510                	mov rax, qword [rbp + 8 * 2]
 20789                                  
 20790 0000FAAF 488B00                                            	mov rax, qword[rax + 8 * 0]
 20791                                  
 20792 0000FAB2 488B00                                            	mov rax, qword[rax + 8 * 0]
 20793 0000FAB5 488B00                  	mov rax, qword [rax]
 20794                                  	assert_closure(rax)
    42 0000FAB8 803805              <1>  cmp byte [%1], %2
    43 0000FABB 0F852B340000        <1>  jne L_error_incorrect_type
 20795 0000FAC1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20796 0000FAC4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20797 0000FAC7 50                      	push rax
 20798 0000FAC8 6A01                    	push 1
 20799 0000FACA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20800 0000FACF E8241C0000              	call malloc
 20801 0000FAD4 50                      	push rax
 20802 0000FAD5 BF10000000              	mov rdi, 8 * 2	; new rib
 20803 0000FADA E8191C0000              	call malloc
 20804 0000FADF 50                      	push rax
 20805 0000FAE0 BF18000000              	mov rdi, 8 * 3	; extended env
 20806 0000FAE5 E80E1C0000              	call malloc
 20807 0000FAEA 488B7D10                	mov rdi, ENV
 20808 0000FAEE BE00000000              	mov rsi, 0
 20809 0000FAF3 BA01000000              	mov rdx, 1
 20810                                  .L_lambda_simple_env_loop_008d:	; ext_env[i + 1] <-- env[i]
 20811 0000FAF8 4883FE02                	cmp rsi, 2
 20812 0000FAFC 7410                    	je .L_lambda_simple_env_end_008d
 20813 0000FAFE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20814 0000FB02 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20815 0000FB06 48FFC6                  	inc rsi
 20816 0000FB09 48FFC2                  	inc rdx
 20817 0000FB0C EBEA                    	jmp .L_lambda_simple_env_loop_008d
 20818                                  .L_lambda_simple_env_end_008d:
 20819 0000FB0E 5B                      	pop rbx
 20820 0000FB0F BE00000000              	mov rsi, 0
 20821                                  .L_lambda_simple_params_loop_008d:	; copy params
 20822 0000FB14 4883FE02                	cmp rsi, 2
 20823 0000FB18 740E                    	je .L_lambda_simple_params_end_008d
 20824 0000FB1A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20825 0000FB1F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20826 0000FB23 48FFC6                  	inc rsi
 20827 0000FB26 EBEC                    	jmp .L_lambda_simple_params_loop_008d
 20828                                  .L_lambda_simple_params_end_008d:
 20829 0000FB28 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20830 0000FB2B 4889C3                  	mov rbx, rax
 20831 0000FB2E 58                      	pop rax
 20832 0000FB2F C60005                  	mov byte [rax], T_closure
 20833 0000FB32 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20834 0000FB36 48C74009[40FB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008d
 20835 0000FB3E EB6E                    	jmp .L_lambda_simple_end_008d
 20836                                  .L_lambda_simple_code_008d:	; lambda-simple body
 20837 0000FB40 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20838 0000FB46 740B                    	je .L_lambda_simple_arity_check_ok_008d
 20839 0000FB48 FF742410                	push qword [rsp + 8 * 2]
 20840 0000FB4C 6A01                    	push 1
 20841 0000FB4E E95E1B0000              	jmp L_error_incorrect_arity_simple
 20842                                  .L_lambda_simple_arity_check_ok_008d:
 20843 0000FB53 C8000000                	enter 0, 0
 20844 0000FB57 488B4510                	mov rax, qword [rbp + 8 * 2]
 20845                                  
 20846 0000FB5B 488B00                                            	mov rax, qword[rax + 8 * 0]
 20847                                  
 20848 0000FB5E 488B00                                            	mov rax, qword[rax + 8 * 0]
 20849 0000FB61 50                      	push rax
 20850 0000FB62 6A01                    	push 1
 20851 0000FB64 488B0425[80000000]      	mov rax, qword [free_var_16]
 20852                                  	assert_closure(rax)
    42 0000FB6C 803805              <1>  cmp byte [%1], %2
    43 0000FB6F 0F8577330000        <1>  jne L_error_incorrect_type
 20853 0000FB75 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20854 0000FB78 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20855 0000FB7B 50                      	push rax
 20856 0000FB7C 488B4510                	mov rax, qword [rbp + 8 * 2]
 20857                                  
 20858 0000FB80 488B00                                            	mov rax, qword[rax + 8 * 0]
 20859                                  
 20860 0000FB83 488B4008                                          	mov rax, qword[rax + 8 * 1]
 20861 0000FB87 50                      	push rax
 20862 0000FB88 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20863 0000FB8C 50                      	push rax
 20864 0000FB8D 6A03                    	push 3
 20865 0000FB8F 488B0425[90010000]      	mov rax, qword [free_var_50]
 20866                                  	assert_closure(rax)
    42 0000FB97 803805              <1>  cmp byte [%1], %2
    43 0000FB9A 0F854C330000        <1>  jne L_error_incorrect_type
 20867 0000FBA0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 20868 0000FBA3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 20869                                  
 20870 0000FBA6 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20871 0000FBAA C9                      	leave
 20872 0000FBAB C21800                  	ret 8 * (2 + 1)
 20873                                  .L_lambda_simple_end_008d:	; new closure is in rax
 20874                                  .L_applic_TC_00a3:
 20875 0000FBAE 803805                  	cmp byte [rax], T_closure
 20876 0000FBB1 0F85F62A0000            	jne L_code_ptr_error
 20877 0000FBB7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20878 0000FBBB 53                      	push rbx
 20879 0000FBBC FF7508                  	push qword [rbp + 8]
 20880 0000FBBF FF7500                  	push qword [rbp]
 20881 0000FBC2 488B4D18                	mov rcx, [rbp + 3 * 8]
 20882 0000FBC6 488B542418              	mov rdx, [rsp + 3 * 8]
 20883 0000FBCB 488D7204                	lea rsi, [rdx + 4]
 20884 0000FBCF 4C8D4EFF                	lea r9, [rsi - 1]
 20885 0000FBD3 488D7903                	lea rdi, [rcx + 3]
 20886 0000FBD7 4D31C0                  	xor r8, r8
 20887                                  .L_tc_recycle_frame_loop_00a3:
 20888 0000FBDA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20889 0000FBDE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20890 0000FBE3 49FFC9                  	dec r9
 20891 0000FBE6 4D31C0                  	xor r8, r8
 20892 0000FBE9 48FFCF                  	dec rdi
 20893 0000FBEC 48FFCE                  	dec rsi
 20894 0000FBEF 4883FE00                	cmp rsi, 0
 20895 0000FBF3 75E5                    	jne .L_tc_recycle_frame_loop_00a3
 20896                                  .L_tc_recycle_frame_done_00a3:
 20897                                  ;this pop rbp in sot to the right place
 20898 0000FBF5 4989C9                  	mov r9, rcx
 20899 0000FBF8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20900 0000FC00 4C01CC                  	add rsp, r9
 20901 0000FC03 5D                      	pop rbp
 20902 0000FC04 488B4D00                	mov rcx, qword [rbp]
 20903 0000FC08 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 20904 0000FC0C FFE3                    	jmp rbx
 20905                                  
 20906                                          	.L_if_end_0050:
 20907 0000FC0E C9                      	leave
 20908 0000FC0F C22000                  	ret 8 * (2 + 2)
 20909                                  .L_lambda_simple_end_008c:	; new closure is in rax
 20910 0000FC12 50                      	push rax
 20911 0000FC13 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20912 0000FC17 8F00                    	pop qword [rax]
 20913 0000FC19 48B8-                   	mov rax, sob_void
 20913 0000FC1B [0000000000000000] 
 20914                                  
 20915 0000FC23 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 20916 0000FC28 E8CB1A0000              	call malloc
 20917 0000FC2D 50                      	push rax
 20918 0000FC2E BF08000000              	mov rdi, 8 * 1	; new rib
 20919 0000FC33 E8C01A0000              	call malloc
 20920 0000FC38 50                      	push rax
 20921 0000FC39 BF10000000              	mov rdi, 8 * 2	; extended env
 20922 0000FC3E E8B51A0000              	call malloc
 20923 0000FC43 488B7D10                	mov rdi, ENV
 20924 0000FC47 BE00000000              	mov rsi, 0
 20925 0000FC4C BA01000000              	mov rdx, 1
 20926                                  .L_lambda_simple_env_loop_008e:	; ext_env[i + 1] <-- env[i]
 20927 0000FC51 4883FE01                	cmp rsi, 1
 20928 0000FC55 7410                    	je .L_lambda_simple_env_end_008e
 20929 0000FC57 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 20930 0000FC5B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 20931 0000FC5F 48FFC6                  	inc rsi
 20932 0000FC62 48FFC2                  	inc rdx
 20933 0000FC65 EBEA                    	jmp .L_lambda_simple_env_loop_008e
 20934                                  .L_lambda_simple_env_end_008e:
 20935 0000FC67 5B                      	pop rbx
 20936 0000FC68 BE00000000              	mov rsi, 0
 20937                                  .L_lambda_simple_params_loop_008e:	; copy params
 20938 0000FC6D 4883FE01                	cmp rsi, 1
 20939 0000FC71 740E                    	je .L_lambda_simple_params_end_008e
 20940 0000FC73 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 20941 0000FC78 488914F3                	mov qword [rbx + 8 * rsi], rdx
 20942 0000FC7C 48FFC6                  	inc rsi
 20943 0000FC7F EBEC                    	jmp .L_lambda_simple_params_loop_008e
 20944                                  .L_lambda_simple_params_end_008e:
 20945 0000FC81 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 20946 0000FC84 4889C3                  	mov rbx, rax
 20947 0000FC87 58                      	pop rax
 20948 0000FC88 C60005                  	mov byte [rax], T_closure
 20949 0000FC8B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 20950 0000FC8F 48C74009[9CFC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008e
 20951 0000FC97 E99A000000              	jmp .L_lambda_simple_end_008e
 20952                                  .L_lambda_simple_code_008e:	; lambda-simple body
 20953 0000FC9C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 20954 0000FCA2 740B                    	je .L_lambda_simple_arity_check_ok_008e
 20955 0000FCA4 FF742410                	push qword [rsp + 8 * 2]
 20956 0000FCA8 6A01                    	push 1
 20957 0000FCAA E9021A0000              	jmp L_error_incorrect_arity_simple
 20958                                  .L_lambda_simple_arity_check_ok_008e:
 20959 0000FCAF C8000000                	enter 0, 0
 20960 0000FCB3 48B8-                   	mov rax,L_constants + 32
 20960 0000FCB5 [2000000000000000] 
 20961 0000FCBD 50                      	push rax
 20962 0000FCBE 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 20963 0000FCC2 50                      	push rax
 20964 0000FCC3 6A02                    	push 2
 20965 0000FCC5 488B4510                	mov rax, qword [rbp + 8 * 2]
 20966                                  
 20967 0000FCC9 488B00                                            	mov rax, qword[rax + 8 * 0]
 20968                                  
 20969 0000FCCC 488B00                                            	mov rax, qword[rax + 8 * 0]
 20970 0000FCCF 488B00                  	mov rax, qword [rax]
 20971                                  .L_applic_TC_00a5:
 20972 0000FCD2 803805                  	cmp byte [rax], T_closure
 20973 0000FCD5 0F85D2290000            	jne L_code_ptr_error
 20974 0000FCDB 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 20975 0000FCDF 53                      	push rbx
 20976 0000FCE0 FF7508                  	push qword [rbp + 8]
 20977 0000FCE3 FF7500                  	push qword [rbp]
 20978 0000FCE6 488B4D18                	mov rcx, [rbp + 3 * 8]
 20979 0000FCEA 488B542418              	mov rdx, [rsp + 3 * 8]
 20980 0000FCEF 488D7204                	lea rsi, [rdx + 4]
 20981 0000FCF3 4C8D4EFF                	lea r9, [rsi - 1]
 20982 0000FCF7 488D7903                	lea rdi, [rcx + 3]
 20983 0000FCFB 4D31C0                  	xor r8, r8
 20984                                  .L_tc_recycle_frame_loop_00a5:
 20985 0000FCFE 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 20986 0000FD02 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 20987 0000FD07 49FFC9                  	dec r9
 20988 0000FD0A 4D31C0                  	xor r8, r8
 20989 0000FD0D 48FFCF                  	dec rdi
 20990 0000FD10 48FFCE                  	dec rsi
 20991 0000FD13 4883FE00                	cmp rsi, 0
 20992 0000FD17 75E5                    	jne .L_tc_recycle_frame_loop_00a5
 20993                                  .L_tc_recycle_frame_done_00a5:
 20994                                  ;this pop rbp in sot to the right place
 20995 0000FD19 4989C9                  	mov r9, rcx
 20996 0000FD1C 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 20997 0000FD24 4C01CC                  	add rsp, r9
 20998 0000FD27 5D                      	pop rbp
 20999 0000FD28 488B4D00                	mov rcx, qword [rbp]
 21000 0000FD2C 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21001 0000FD30 FFE3                    	jmp rbx
 21002 0000FD32 C9                      	leave
 21003 0000FD33 C21800                  	ret 8 * (2 + 1)
 21004                                  .L_lambda_simple_end_008e:	; new closure is in rax
 21005 0000FD36 C9                      	leave
 21006 0000FD37 C21800                  	ret 8 * (2 + 1)
 21007                                  .L_lambda_simple_end_008b:	; new closure is in rax
 21008                                  	assert_closure(rax)
    42 0000FD3A 803805              <1>  cmp byte [%1], %2
    43 0000FD3D 0F85A9310000        <1>  jne L_error_incorrect_type
 21009 0000FD43 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21010 0000FD46 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21011 0000FD49 48890425[D0030000]      	mov qword [free_var_122], rax
 21012 0000FD51 48B8-                   	mov rax, sob_void
 21012 0000FD53 [0000000000000000] 
 21013                                  
 21014 0000FD5B 4889C7                  	mov rdi, rax
 21015 0000FD5E E8A6190000              	call print_sexpr_if_not_void
 21016                                  
 21017 0000FD63 BF11000000              	mov rdi, (1 + 8 + 8)
 21018 0000FD68 E88B190000              	call malloc
 21019 0000FD6D 50                      	push rax
 21020 0000FD6E BF00000000              	mov rdi, 8 * 0
 21021 0000FD73 E880190000              	call malloc
 21022 0000FD78 50                      	push rax
 21023 0000FD79 BF08000000              	mov rdi, 8 * 1
 21024 0000FD7E E875190000              	call malloc
 21025 0000FD83 488B7D10                	mov rdi, ENV
 21026 0000FD87 4831F6                  	xor rsi, rsi
 21027 0000FD8A 4831D2                  	xor rdx, rdx
 21028 0000FD8D 48FFC2                  	inc rdx
 21029                                  	.L_lambda_opt_env_loop_0017:
 21030                                  
 21031 0000FD90 4883FE00                        	cmp rsi, 0
 21032                                  
 21033 0000FD94 7412                            	je .L_lambda_opt_env_end_0017
 21034 0000FD96 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21035 0000FD9A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21036 0000FD9E 4883C201                	add rdx, 1
 21037 0000FDA2 4883C601                	add rsi, 1
 21038 0000FDA6 EBE8                    	jmp .L_lambda_opt_env_loop_0017
 21039                                  
 21040                                          	.L_lambda_opt_env_end_0017:
 21041 0000FDA8 5B                      	pop rbx
 21042 0000FDA9 4831F6                  	xor rsi, rsi
 21043                                  	.L_lambda_opt_params_loop_0017:
 21044                                  
 21045 0000FDAC 4883FE00                        	cmp rsi, 0
 21046                                  
 21047 0000FDB0 740F                            	je .L_lambda_opt_params_end_0017
 21048 0000FDB2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21049 0000FDB7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21050 0000FDBB 4883C601                	add rsi, 1
 21051 0000FDBF EBEB                    	jmp .L_lambda_opt_params_loop_0017
 21052                                  
 21053                                          	.L_lambda_opt_params_end_0017:
 21054 0000FDC1 488918                  	mov qword [rax], rbx	; ext_env = new_rib 
 21055 0000FDC4 4889C3                  	mov rbx, rax
 21056 0000FDC7 58                      	pop rax
 21057 0000FDC8 C60005                  	mov byte [rax], T_closure
 21058 0000FDCB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21059 0000FDCF 48C74009[DCFD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0017
 21060                                  
 21061 0000FDD7 E97C010000                      	jmp .L_lambda_opt_end_0017
 21062                                  
 21063                                          	.L_lambda_opt_code_0017:
 21064                                  
 21065 0000FDDC 48837C241000                    	cmp qword [rsp + 8 * 2], 0
 21066                                  
 21067 0000FDE2 740D                            	je .L_lambda_opt_arity_check_exact_0017  ;same num_of_args
 21068                                  
 21069 0000FDE4 7F65                            	jg .L_lambda_opt_arity_check_more_0017  ;greater num_of_args
 21070 0000FDE6 FF742410                	push qword [rsp + 8 * 2]
 21071 0000FDEA 6A00                    	push 0
 21072 0000FDEC E9D4180000              	jmp L_error_incorrect_arity_opt ;less than num_of_args
 21073                                  .L_lambda_opt_arity_check_exact_0017:
 21074 0000FDF1 4883EC08                	sub rsp, 8 * 1
 21075 0000FDF5 488D7F10                	lea rdi, [rdi + (8 * 2)]
 21076 0000FDF9 4889E7                  	mov rdi, rsp 
 21077 0000FDFC 488B4708                	mov rax, qword [rdi + 8]
 21078 0000FE00 488907                  	mov qword [rdi], rax
 21079 0000FE03 488D7F08                	lea rdi, [rdi + 8]
 21080 0000FE07 488B4708                	mov rax, qword [rdi + 8]
 21081 0000FE0B 488907                  	mov qword [rdi], rax
 21082 0000FE0E 488D7F08                	lea rdi, [rdi + 8]
 21083 0000FE12 488B4708                	mov rax, qword [rdi + 8]
 21084 0000FE16 4889C1                  	mov rcx, rax
 21085 0000FE19 4883C001                	add rax, 1
 21086 0000FE1D 488907                  	mov qword [rdi], rax
 21087 0000FE20 488D7F08                	lea rdi, [rdi + 8]
 21088                                  	.L_lambda_opt_stack_shrink_loop_0043:
 21089 0000FE24 4883F900                	cmp rcx, 0
 21090 0000FE28 7415                    	je .L_lambda_opt_stack_shrink_loop_exit_0043
 21091 0000FE2A 4883E901                	sub rcx, 1
 21092 0000FE2E 488D4010                	lea rax, [rax + (8 * 2)]
 21093 0000FE32 488B4708                	mov rax, qword [rdi + 8]
 21094 0000FE36 488907                  	mov qword [rdi], rax
 21095 0000FE39 488D7F08                	lea rdi, [rdi + 8]
 21096 0000FE3D EBE5                    	jmp .L_lambda_opt_stack_shrink_loop_0043
 21097                                  
 21098                                          	.L_lambda_opt_stack_shrink_loop_exit_0043:
 21099 0000FE3F 48C707[01000000]        	mov qword [rdi], sob_nil
 21100 0000FE46 E996000000              	jmp .L_lambda_opt_stack_adjusted_0017
 21101                                  
 21102                                          	.L_lambda_opt_arity_check_more_0017:
 21103 0000FE4B 488B742410              	mov rsi, qword [rsp + (8 * 2)]
 21104 0000FE50 488D0E                  	lea rcx, [rsi - 0]
 21105 0000FE53 49B8-                   	mov r8, sob_nil
 21105 0000FE55 [0100000000000000] 
 21106 0000FE5D 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
 21107 0000FE62 4889F2                  	mov rdx, rsi
 21108                                  	.L_lambda_opt_stack_shrink_loop_0044:
 21109 0000FE65 4883F900                	cmp rcx, 0
 21110 0000FE69 7425                    	je .L_lambda_opt_stack_shrink_loop_exit_0044
 21111 0000FE6B BF11000000              	mov rdi, 1 + (8 * 2)
 21112 0000FE70 E883180000              	call malloc
 21113 0000FE75 C60021                  	mov byte [rax], T_pair
 21114 0000FE78 488B1E                  	mov rbx, qword [rsi]
 21115 0000FE7B 48895801                	mov SOB_PAIR_CAR(rax), rbx
 21116 0000FE7F 4C894009                	mov SOB_PAIR_CDR(rax), r8
 21117 0000FE83 4883C6F8                	add rsi, -8
 21118 0000FE87 4883E901                	sub rcx, 1
 21119 0000FE8B 4989C0                  	mov r8, rax
 21120 0000FE8E EBD5                    	jmp .L_lambda_opt_stack_shrink_loop_0044
 21121                                  
 21122                                          	.L_lambda_opt_stack_shrink_loop_exit_0044:
 21123 0000FE90 4C8902                  	mov qword [rdx], r8
 21124 0000FE93 4883EA08                	sub rdx, 8 * 1
 21125 0000FE97 488D742410              	lea rsi, [rsp + (8 * (0 + 2))]
 21126                                  
 21127 0000FE9C B900000000                      	mov rcx, 0 
 21128                                  
 21129                                          	.L_lambda_opt_stack_shrink_loop_0045:
 21130 0000FEA1 4883F900                	cmp rcx, 0
 21131 0000FEA5 7414                    	je .L_lambda_opt_stack_shrink_loop_exit_0045
 21132 0000FEA7 488B06                  	mov rax, qword [rsi]
 21133 0000FEAA 488902                  	mov qword [rdx], rax
 21134 0000FEAD 488D76F8                	lea rsi, [rsi - 8]
 21135 0000FEB1 4883C2F8                	add rdx, -8
 21136 0000FEB5 4883C1FF                	add rcx, -1
 21137 0000FEB9 EBE6                    	jmp .L_lambda_opt_stack_shrink_loop_0045
 21138                                  
 21139                                          	.L_lambda_opt_stack_shrink_loop_exit_0045:
 21140                                  
 21141 0000FEBB 48C70201000000                  	mov qword [rdx], 1 + 0
 21142 0000FEC2 4883C6F8                	add rsi, -8
 21143 0000FEC6 4883C2F8                	add rdx, -8
 21144 0000FECA 488B06                  	mov rax, qword [rsi]
 21145 0000FECD 488902                  	mov qword [rdx], rax
 21146 0000FED0 4883C2F8                	add rdx, -8
 21147 0000FED4 488D76F8                	lea rsi, [rsi - 8]
 21148 0000FED8 488B06                  	mov rax, qword [rsi]
 21149 0000FEDB 488902                  	mov qword [rdx], rax
 21150 0000FEDE 4889D4                  	mov rsp, rdx
 21151                                  	.L_lambda_opt_stack_adjusted_0017:
 21152 0000FEE1 C8000000                	enter 0, 0
 21153 0000FEE5 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21154 0000FEE9 50                      	push rax
 21155 0000FEEA 6A01                    	push 1
 21156 0000FEEC 488B0425[38040000]      	mov rax, qword [free_var_135]
 21157                                  .L_applic_TC_00a6:
 21158 0000FEF4 803805                  	cmp byte [rax], T_closure
 21159 0000FEF7 0F85B0270000            	jne L_code_ptr_error
 21160 0000FEFD 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21161 0000FF01 53                      	push rbx
 21162 0000FF02 FF7508                  	push qword [rbp + 8]
 21163 0000FF05 FF7500                  	push qword [rbp]
 21164 0000FF08 488B4D18                	mov rcx, [rbp + 3 * 8]
 21165 0000FF0C 488B542418              	mov rdx, [rsp + 3 * 8]
 21166 0000FF11 488D7204                	lea rsi, [rdx + 4]
 21167 0000FF15 4C8D4EFF                	lea r9, [rsi - 1]
 21168 0000FF19 488D7903                	lea rdi, [rcx + 3]
 21169 0000FF1D 4D31C0                  	xor r8, r8
 21170                                  .L_tc_recycle_frame_loop_00a6:
 21171 0000FF20 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21172 0000FF24 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21173 0000FF29 49FFC9                  	dec r9
 21174 0000FF2C 4D31C0                  	xor r8, r8
 21175 0000FF2F 48FFCF                  	dec rdi
 21176 0000FF32 48FFCE                  	dec rsi
 21177 0000FF35 4883FE00                	cmp rsi, 0
 21178 0000FF39 75E5                    	jne .L_tc_recycle_frame_loop_00a6
 21179                                  .L_tc_recycle_frame_done_00a6:
 21180                                  ;this pop rbp in sot to the right place
 21181 0000FF3B 4989C9                  	mov r9, rcx
 21182 0000FF3E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21183 0000FF46 4C01CC                  	add rsp, r9
 21184 0000FF49 5D                      	pop rbp
 21185 0000FF4A 488B4D00                	mov rcx, qword [rbp]
 21186 0000FF4E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21187 0000FF52 FFE3                    	jmp rbx
 21188 0000FF54 C9                      	leave
 21189 0000FF55 C21800                  	ret 8 * (2 + 1)
 21190                                  .L_lambda_opt_end_0017:	; new closure is in rax
 21191 0000FF58 48890425[40040000]      	mov qword [free_var_136], rax
 21192 0000FF60 48B8-                   	mov rax, sob_void
 21192 0000FF62 [0000000000000000] 
 21193                                  
 21194 0000FF6A 4889C7                  	mov rdi, rax
 21195 0000FF6D E897170000              	call print_sexpr_if_not_void
 21196                                  
 21197 0000FF72 48B8-                   	mov rax,L_constants + 23
 21197 0000FF74 [1700000000000000] 
 21198 0000FF7C 50                      	push rax
 21199 0000FF7D 6A01                    	push 1
 21200 0000FF7F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21201 0000FF84 E86F170000              	call malloc
 21202 0000FF89 50                      	push rax
 21203 0000FF8A BF00000000              	mov rdi, 8 * 0	; new rib
 21204 0000FF8F E864170000              	call malloc
 21205 0000FF94 50                      	push rax
 21206 0000FF95 BF08000000              	mov rdi, 8 * 1	; extended env
 21207 0000FF9A E859170000              	call malloc
 21208 0000FF9F 488B7D10                	mov rdi, ENV
 21209 0000FFA3 BE00000000              	mov rsi, 0
 21210 0000FFA8 BA01000000              	mov rdx, 1
 21211                                  .L_lambda_simple_env_loop_008f:	; ext_env[i + 1] <-- env[i]
 21212 0000FFAD 4883FE00                	cmp rsi, 0
 21213 0000FFB1 7410                    	je .L_lambda_simple_env_end_008f
 21214 0000FFB3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21215 0000FFB7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21216 0000FFBB 48FFC6                  	inc rsi
 21217 0000FFBE 48FFC2                  	inc rdx
 21218 0000FFC1 EBEA                    	jmp .L_lambda_simple_env_loop_008f
 21219                                  .L_lambda_simple_env_end_008f:
 21220 0000FFC3 5B                      	pop rbx
 21221 0000FFC4 BE00000000              	mov rsi, 0
 21222                                  .L_lambda_simple_params_loop_008f:	; copy params
 21223 0000FFC9 4883FE00                	cmp rsi, 0
 21224 0000FFCD 740E                    	je .L_lambda_simple_params_end_008f
 21225 0000FFCF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21226 0000FFD4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21227 0000FFD8 48FFC6                  	inc rsi
 21228 0000FFDB EBEC                    	jmp .L_lambda_simple_params_loop_008f
 21229                                  .L_lambda_simple_params_end_008f:
 21230 0000FFDD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21231 0000FFE0 4889C3                  	mov rbx, rax
 21232 0000FFE3 58                      	pop rax
 21233 0000FFE4 C60005                  	mov byte [rax], T_closure
 21234 0000FFE7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21235 0000FFEB 48C74009[F8FF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_008f
 21236 0000FFF3 E92D030000              	jmp .L_lambda_simple_end_008f
 21237                                  .L_lambda_simple_code_008f:	; lambda-simple body
 21238 0000FFF8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21239 0000FFFE 740B                    	je .L_lambda_simple_arity_check_ok_008f
 21240 00010000 FF742410                	push qword [rsp + 8 * 2]
 21241 00010004 6A01                    	push 1
 21242 00010006 E9A6160000              	jmp L_error_incorrect_arity_simple
 21243                                  .L_lambda_simple_arity_check_ok_008f:
 21244 0001000B C8000000                	enter 0, 0
 21245 0001000F BF08000000              	mov rdi, 8
 21246 00010014 E8DF160000              	call malloc
 21247 00010019 488B5D20                	mov rbx, PARAM(0)
 21248 0001001D 488918                  	mov qword [rax], rbx
 21249 00010020 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 21250                                  
 21251 00010024 48B8-                            	mov rax, sob_void
 21251 00010026 [0000000000000000] 
 21252                                  
 21253 0001002E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21254 00010033 E8C0160000              	call malloc
 21255 00010038 50                      	push rax
 21256 00010039 BF08000000              	mov rdi, 8 * 1	; new rib
 21257 0001003E E8B5160000              	call malloc
 21258 00010043 50                      	push rax
 21259 00010044 BF10000000              	mov rdi, 8 * 2	; extended env
 21260 00010049 E8AA160000              	call malloc
 21261 0001004E 488B7D10                	mov rdi, ENV
 21262 00010052 BE00000000              	mov rsi, 0
 21263 00010057 BA01000000              	mov rdx, 1
 21264                                  .L_lambda_simple_env_loop_0090:	; ext_env[i + 1] <-- env[i]
 21265 0001005C 4883FE01                	cmp rsi, 1
 21266 00010060 7410                    	je .L_lambda_simple_env_end_0090
 21267 00010062 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21268 00010066 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21269 0001006A 48FFC6                  	inc rsi
 21270 0001006D 48FFC2                  	inc rdx
 21271 00010070 EBEA                    	jmp .L_lambda_simple_env_loop_0090
 21272                                  .L_lambda_simple_env_end_0090:
 21273 00010072 5B                      	pop rbx
 21274 00010073 BE00000000              	mov rsi, 0
 21275                                  .L_lambda_simple_params_loop_0090:	; copy params
 21276 00010078 4883FE01                	cmp rsi, 1
 21277 0001007C 740E                    	je .L_lambda_simple_params_end_0090
 21278 0001007E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21279 00010083 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21280 00010087 48FFC6                  	inc rsi
 21281 0001008A EBEC                    	jmp .L_lambda_simple_params_loop_0090
 21282                                  .L_lambda_simple_params_end_0090:
 21283 0001008C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21284 0001008F 4889C3                  	mov rbx, rax
 21285 00010092 58                      	pop rax
 21286 00010093 C60005                  	mov byte [rax], T_closure
 21287 00010096 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21288 0001009A 48C74009[A7000100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0090
 21289 000100A2 E937010000              	jmp .L_lambda_simple_end_0090
 21290                                  .L_lambda_simple_code_0090:	; lambda-simple body
 21291 000100A7 48837C241003            	cmp qword [rsp + 8 * 2], 3
 21292 000100AD 740B                    	je .L_lambda_simple_arity_check_ok_0090
 21293 000100AF FF742410                	push qword [rsp + 8 * 2]
 21294 000100B3 6A03                    	push 3
 21295 000100B5 E9F7150000              	jmp L_error_incorrect_arity_simple
 21296                                  .L_lambda_simple_arity_check_ok_0090:
 21297 000100BA C8000000                	enter 0, 0
 21298 000100BE 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 21299 000100C2 50                      	push rax
 21300 000100C3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21301 000100C7 50                      	push rax
 21302 000100C8 6A02                    	push 2
 21303 000100CA 488B0425[30030000]      	mov rax, qword [free_var_102]
 21304                                  	assert_closure(rax)
    42 000100D2 803805              <1>  cmp byte [%1], %2
    43 000100D5 0F85112E0000        <1>  jne L_error_incorrect_type
 21305 000100DB FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21306 000100DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 21307                                  
 21308 000100E1 483D[02000000]                  	cmp rax, sob_boolean_false
 21309                                  
 21310 000100E7 0F84E3000000                    	je .L_if_else_0051
 21311 000100ED 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 21312 000100F1 50                      	push rax
 21313 000100F2 48B8-                   	mov rax,L_constants + 128
 21313 000100F4 [8000000000000000] 
 21314 000100FC 50                      	push rax
 21315 000100FD 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21316 00010101 50                      	push rax
 21317 00010102 6A02                    	push 2
 21318 00010104 488B0425[08030000]      	mov rax, qword [free_var_97]
 21319                                  	assert_closure(rax)
    42 0001010C 803805              <1>  cmp byte [%1], %2
    43 0001010F 0F85D72D0000        <1>  jne L_error_incorrect_type
 21320 00010115 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21321 00010118 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21322 0001011B 50                      	push rax
 21323 0001011C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21324 00010120 50                      	push rax
 21325 00010121 6A03                    	push 3
 21326 00010123 488B4510                	mov rax, qword [rbp + 8 * 2]
 21327                                  
 21328 00010127 488B00                                            	mov rax, qword[rax + 8 * 0]
 21329                                  
 21330 0001012A 488B00                                            	mov rax, qword[rax + 8 * 0]
 21331 0001012D 488B00                  	mov rax, qword [rax]
 21332                                  	assert_closure(rax)
    42 00010130 803805              <1>  cmp byte [%1], %2
    43 00010133 0F85B32D0000        <1>  jne L_error_incorrect_type
 21333 00010139 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21334 0001013C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21335 0001013F 50                      	push rax
 21336 00010140 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21337 00010144 50                      	push rax
 21338 00010145 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21339 00010149 50                      	push rax
 21340 0001014A 6A02                    	push 2
 21341 0001014C 488B0425[78010000]      	mov rax, qword [free_var_47]
 21342                                  	assert_closure(rax)
    42 00010154 803805              <1>  cmp byte [%1], %2
    43 00010157 0F858F2D0000        <1>  jne L_error_incorrect_type
 21343 0001015D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21344 00010160 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21345 00010163 50                      	push rax
 21346 00010164 6A02                    	push 2
 21347 00010166 488B0425[68000000]      	mov rax, qword [free_var_13]
 21348                                  .L_applic_TC_00a7:
 21349 0001016E 803805                  	cmp byte [rax], T_closure
 21350 00010171 0F8536250000            	jne L_code_ptr_error
 21351 00010177 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21352 0001017B 53                      	push rbx
 21353 0001017C FF7508                  	push qword [rbp + 8]
 21354 0001017F FF7500                  	push qword [rbp]
 21355 00010182 488B4D18                	mov rcx, [rbp + 3 * 8]
 21356 00010186 488B542418              	mov rdx, [rsp + 3 * 8]
 21357 0001018B 488D7204                	lea rsi, [rdx + 4]
 21358 0001018F 4C8D4EFF                	lea r9, [rsi - 1]
 21359 00010193 488D7903                	lea rdi, [rcx + 3]
 21360 00010197 4D31C0                  	xor r8, r8
 21361                                  .L_tc_recycle_frame_loop_00a7:
 21362 0001019A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21363 0001019E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21364 000101A3 49FFC9                  	dec r9
 21365 000101A6 4D31C0                  	xor r8, r8
 21366 000101A9 48FFCF                  	dec rdi
 21367 000101AC 48FFCE                  	dec rsi
 21368 000101AF 4883FE00                	cmp rsi, 0
 21369 000101B3 75E5                    	jne .L_tc_recycle_frame_loop_00a7
 21370                                  .L_tc_recycle_frame_done_00a7:
 21371                                  ;this pop rbp in sot to the right place
 21372 000101B5 4989C9                  	mov r9, rcx
 21373 000101B8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21374 000101C0 4C01CC                  	add rsp, r9
 21375 000101C3 5D                      	pop rbp
 21376 000101C4 488B4D00                	mov rcx, qword [rbp]
 21377 000101C8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21378 000101CC FFE3                    	jmp rbx
 21379                                  
 21380 000101CE EB0A                            	jmp .L_if_end_0051
 21381                                  
 21382                                          	.L_if_else_0051:
 21383 000101D0 48B8-                   	mov rax,L_constants + 1
 21383 000101D2 [0100000000000000] 
 21384                                  
 21385                                          	.L_if_end_0051:
 21386 000101DA C9                      	leave
 21387 000101DB C22800                  	ret 8 * (2 + 3)
 21388                                  .L_lambda_simple_end_0090:	; new closure is in rax
 21389 000101DE 50                      	push rax
 21390 000101DF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21391 000101E3 8F00                    	pop qword [rax]
 21392 000101E5 48B8-                   	mov rax, sob_void
 21392 000101E7 [0000000000000000] 
 21393                                  
 21394 000101EF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21395 000101F4 E8FF140000              	call malloc
 21396 000101F9 50                      	push rax
 21397 000101FA BF08000000              	mov rdi, 8 * 1	; new rib
 21398 000101FF E8F4140000              	call malloc
 21399 00010204 50                      	push rax
 21400 00010205 BF10000000              	mov rdi, 8 * 2	; extended env
 21401 0001020A E8E9140000              	call malloc
 21402 0001020F 488B7D10                	mov rdi, ENV
 21403 00010213 BE00000000              	mov rsi, 0
 21404 00010218 BA01000000              	mov rdx, 1
 21405                                  .L_lambda_simple_env_loop_0091:	; ext_env[i + 1] <-- env[i]
 21406 0001021D 4883FE01                	cmp rsi, 1
 21407 00010221 7410                    	je .L_lambda_simple_env_end_0091
 21408 00010223 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21409 00010227 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21410 0001022B 48FFC6                  	inc rsi
 21411 0001022E 48FFC2                  	inc rdx
 21412 00010231 EBEA                    	jmp .L_lambda_simple_env_loop_0091
 21413                                  .L_lambda_simple_env_end_0091:
 21414 00010233 5B                      	pop rbx
 21415 00010234 BE00000000              	mov rsi, 0
 21416                                  .L_lambda_simple_params_loop_0091:	; copy params
 21417 00010239 4883FE01                	cmp rsi, 1
 21418 0001023D 740E                    	je .L_lambda_simple_params_end_0091
 21419 0001023F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21420 00010244 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21421 00010248 48FFC6                  	inc rsi
 21422 0001024B EBEC                    	jmp .L_lambda_simple_params_loop_0091
 21423                                  .L_lambda_simple_params_end_0091:
 21424 0001024D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21425 00010250 4889C3                  	mov rbx, rax
 21426 00010253 58                      	pop rax
 21427 00010254 C60005                  	mov byte [rax], T_closure
 21428 00010257 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21429 0001025B 48C74009[68020100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0091
 21430 00010263 E9B9000000              	jmp .L_lambda_simple_end_0091
 21431                                  .L_lambda_simple_code_0091:	; lambda-simple body
 21432 00010268 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21433 0001026E 740B                    	je .L_lambda_simple_arity_check_ok_0091
 21434 00010270 FF742410                	push qword [rsp + 8 * 2]
 21435 00010274 6A01                    	push 1
 21436 00010276 E936140000              	jmp L_error_incorrect_arity_simple
 21437                                  .L_lambda_simple_arity_check_ok_0091:
 21438 0001027B C8000000                	enter 0, 0
 21439 0001027F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21440 00010283 50                      	push rax
 21441 00010284 6A01                    	push 1
 21442 00010286 488B0425[90000000]      	mov rax, qword [free_var_18]
 21443                                  	assert_closure(rax)
    42 0001028E 803805              <1>  cmp byte [%1], %2
    43 00010291 0F85552C0000        <1>  jne L_error_incorrect_type
 21444 00010297 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21445 0001029A FF5009                  	call SOB_CLOSURE_CODE(rax)
 21446 0001029D 50                      	push rax
 21447 0001029E 48B8-                   	mov rax,L_constants + 32
 21447 000102A0 [2000000000000000] 
 21448 000102A8 50                      	push rax
 21449 000102A9 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21450 000102AD 50                      	push rax
 21451 000102AE 6A03                    	push 3
 21452 000102B0 488B4510                	mov rax, qword [rbp + 8 * 2]
 21453                                  
 21454 000102B4 488B00                                            	mov rax, qword[rax + 8 * 0]
 21455                                  
 21456 000102B7 488B00                                            	mov rax, qword[rax + 8 * 0]
 21457 000102BA 488B00                  	mov rax, qword [rax]
 21458                                  .L_applic_TC_00a8:
 21459 000102BD 803805                  	cmp byte [rax], T_closure
 21460 000102C0 0F85E7230000            	jne L_code_ptr_error
 21461 000102C6 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21462 000102CA 53                      	push rbx
 21463 000102CB FF7508                  	push qword [rbp + 8]
 21464 000102CE FF7500                  	push qword [rbp]
 21465 000102D1 488B4D18                	mov rcx, [rbp + 3 * 8]
 21466 000102D5 488B542418              	mov rdx, [rsp + 3 * 8]
 21467 000102DA 488D7204                	lea rsi, [rdx + 4]
 21468 000102DE 4C8D4EFF                	lea r9, [rsi - 1]
 21469 000102E2 488D7903                	lea rdi, [rcx + 3]
 21470 000102E6 4D31C0                  	xor r8, r8
 21471                                  .L_tc_recycle_frame_loop_00a8:
 21472 000102E9 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21473 000102ED 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21474 000102F2 49FFC9                  	dec r9
 21475 000102F5 4D31C0                  	xor r8, r8
 21476 000102F8 48FFCF                  	dec rdi
 21477 000102FB 48FFCE                  	dec rsi
 21478 000102FE 4883FE00                	cmp rsi, 0
 21479 00010302 75E5                    	jne .L_tc_recycle_frame_loop_00a8
 21480                                  .L_tc_recycle_frame_done_00a8:
 21481                                  ;this pop rbp in sot to the right place
 21482 00010304 4989C9                  	mov r9, rcx
 21483 00010307 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21484 0001030F 4C01CC                  	add rsp, r9
 21485 00010312 5D                      	pop rbp
 21486 00010313 488B4D00                	mov rcx, qword [rbp]
 21487 00010317 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21488 0001031B FFE3                    	jmp rbx
 21489 0001031D C9                      	leave
 21490 0001031E C21800                  	ret 8 * (2 + 1)
 21491                                  .L_lambda_simple_end_0091:	; new closure is in rax
 21492 00010321 C9                      	leave
 21493 00010322 C21800                  	ret 8 * (2 + 1)
 21494                                  .L_lambda_simple_end_008f:	; new closure is in rax
 21495                                  	assert_closure(rax)
    42 00010325 803805              <1>  cmp byte [%1], %2
    43 00010328 0F85BE2B0000        <1>  jne L_error_incorrect_type
 21496 0001032E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21497 00010331 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21498 00010334 48890425[D8030000]      	mov qword [free_var_123], rax
 21499 0001033C 48B8-                   	mov rax, sob_void
 21499 0001033E [0000000000000000] 
 21500                                  
 21501 00010346 4889C7                  	mov rdi, rax
 21502 00010349 E8BB130000              	call print_sexpr_if_not_void
 21503                                  
 21504 0001034E 48B8-                   	mov rax,L_constants + 23
 21504 00010350 [1700000000000000] 
 21505 00010358 50                      	push rax
 21506 00010359 6A01                    	push 1
 21507 0001035B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21508 00010360 E893130000              	call malloc
 21509 00010365 50                      	push rax
 21510 00010366 BF00000000              	mov rdi, 8 * 0	; new rib
 21511 0001036B E888130000              	call malloc
 21512 00010370 50                      	push rax
 21513 00010371 BF08000000              	mov rdi, 8 * 1	; extended env
 21514 00010376 E87D130000              	call malloc
 21515 0001037B 488B7D10                	mov rdi, ENV
 21516 0001037F BE00000000              	mov rsi, 0
 21517 00010384 BA01000000              	mov rdx, 1
 21518                                  .L_lambda_simple_env_loop_0092:	; ext_env[i + 1] <-- env[i]
 21519 00010389 4883FE00                	cmp rsi, 0
 21520 0001038D 7410                    	je .L_lambda_simple_env_end_0092
 21521 0001038F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21522 00010393 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21523 00010397 48FFC6                  	inc rsi
 21524 0001039A 48FFC2                  	inc rdx
 21525 0001039D EBEA                    	jmp .L_lambda_simple_env_loop_0092
 21526                                  .L_lambda_simple_env_end_0092:
 21527 0001039F 5B                      	pop rbx
 21528 000103A0 BE00000000              	mov rsi, 0
 21529                                  .L_lambda_simple_params_loop_0092:	; copy params
 21530 000103A5 4883FE00                	cmp rsi, 0
 21531 000103A9 740E                    	je .L_lambda_simple_params_end_0092
 21532 000103AB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21533 000103B0 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21534 000103B4 48FFC6                  	inc rsi
 21535 000103B7 EBEC                    	jmp .L_lambda_simple_params_loop_0092
 21536                                  .L_lambda_simple_params_end_0092:
 21537 000103B9 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21538 000103BC 4889C3                  	mov rbx, rax
 21539 000103BF 58                      	pop rax
 21540 000103C0 C60005                  	mov byte [rax], T_closure
 21541 000103C3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21542 000103C7 48C74009[D4030100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0092
 21543 000103CF E92D030000              	jmp .L_lambda_simple_end_0092
 21544                                  .L_lambda_simple_code_0092:	; lambda-simple body
 21545 000103D4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21546 000103DA 740B                    	je .L_lambda_simple_arity_check_ok_0092
 21547 000103DC FF742410                	push qword [rsp + 8 * 2]
 21548 000103E0 6A01                    	push 1
 21549 000103E2 E9CA120000              	jmp L_error_incorrect_arity_simple
 21550                                  .L_lambda_simple_arity_check_ok_0092:
 21551 000103E7 C8000000                	enter 0, 0
 21552 000103EB BF08000000              	mov rdi, 8
 21553 000103F0 E803130000              	call malloc
 21554 000103F5 488B5D20                	mov rbx, PARAM(0)
 21555 000103F9 488918                  	mov qword [rax], rbx
 21556 000103FC 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 21557                                  
 21558 00010400 48B8-                            	mov rax, sob_void
 21558 00010402 [0000000000000000] 
 21559                                  
 21560 0001040A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21561 0001040F E8E4120000              	call malloc
 21562 00010414 50                      	push rax
 21563 00010415 BF08000000              	mov rdi, 8 * 1	; new rib
 21564 0001041A E8D9120000              	call malloc
 21565 0001041F 50                      	push rax
 21566 00010420 BF10000000              	mov rdi, 8 * 2	; extended env
 21567 00010425 E8CE120000              	call malloc
 21568 0001042A 488B7D10                	mov rdi, ENV
 21569 0001042E BE00000000              	mov rsi, 0
 21570 00010433 BA01000000              	mov rdx, 1
 21571                                  .L_lambda_simple_env_loop_0093:	; ext_env[i + 1] <-- env[i]
 21572 00010438 4883FE01                	cmp rsi, 1
 21573 0001043C 7410                    	je .L_lambda_simple_env_end_0093
 21574 0001043E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21575 00010442 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21576 00010446 48FFC6                  	inc rsi
 21577 00010449 48FFC2                  	inc rdx
 21578 0001044C EBEA                    	jmp .L_lambda_simple_env_loop_0093
 21579                                  .L_lambda_simple_env_end_0093:
 21580 0001044E 5B                      	pop rbx
 21581 0001044F BE00000000              	mov rsi, 0
 21582                                  .L_lambda_simple_params_loop_0093:	; copy params
 21583 00010454 4883FE01                	cmp rsi, 1
 21584 00010458 740E                    	je .L_lambda_simple_params_end_0093
 21585 0001045A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21586 0001045F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21587 00010463 48FFC6                  	inc rsi
 21588 00010466 EBEC                    	jmp .L_lambda_simple_params_loop_0093
 21589                                  .L_lambda_simple_params_end_0093:
 21590 00010468 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21591 0001046B 4889C3                  	mov rbx, rax
 21592 0001046E 58                      	pop rax
 21593 0001046F C60005                  	mov byte [rax], T_closure
 21594 00010472 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21595 00010476 48C74009[83040100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0093
 21596 0001047E E937010000              	jmp .L_lambda_simple_end_0093
 21597                                  .L_lambda_simple_code_0093:	; lambda-simple body
 21598 00010483 48837C241003            	cmp qword [rsp + 8 * 2], 3
 21599 00010489 740B                    	je .L_lambda_simple_arity_check_ok_0093
 21600 0001048B FF742410                	push qword [rsp + 8 * 2]
 21601 0001048F 6A03                    	push 3
 21602 00010491 E91B120000              	jmp L_error_incorrect_arity_simple
 21603                                  .L_lambda_simple_arity_check_ok_0093:
 21604 00010496 C8000000                	enter 0, 0
 21605 0001049A 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 21606 0001049E 50                      	push rax
 21607 0001049F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21608 000104A3 50                      	push rax
 21609 000104A4 6A02                    	push 2
 21610 000104A6 488B0425[30030000]      	mov rax, qword [free_var_102]
 21611                                  	assert_closure(rax)
    42 000104AE 803805              <1>  cmp byte [%1], %2
    43 000104B1 0F85352A0000        <1>  jne L_error_incorrect_type
 21612 000104B7 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21613 000104BA FF5009                  	call SOB_CLOSURE_CODE(rax)
 21614                                  
 21615 000104BD 483D[02000000]                  	cmp rax, sob_boolean_false
 21616                                  
 21617 000104C3 0F84E3000000                    	je .L_if_else_0052
 21618 000104C9 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
 21619 000104CD 50                      	push rax
 21620 000104CE 48B8-                   	mov rax,L_constants + 128
 21620 000104D0 [8000000000000000] 
 21621 000104D8 50                      	push rax
 21622 000104D9 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21623 000104DD 50                      	push rax
 21624 000104DE 6A02                    	push 2
 21625 000104E0 488B0425[08030000]      	mov rax, qword [free_var_97]
 21626                                  	assert_closure(rax)
    42 000104E8 803805              <1>  cmp byte [%1], %2
    43 000104EB 0F85FB290000        <1>  jne L_error_incorrect_type
 21627 000104F1 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21628 000104F4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21629 000104F7 50                      	push rax
 21630 000104F8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21631 000104FC 50                      	push rax
 21632 000104FD 6A03                    	push 3
 21633 000104FF 488B4510                	mov rax, qword [rbp + 8 * 2]
 21634                                  
 21635 00010503 488B00                                            	mov rax, qword[rax + 8 * 0]
 21636                                  
 21637 00010506 488B00                                            	mov rax, qword[rax + 8 * 0]
 21638 00010509 488B00                  	mov rax, qword [rax]
 21639                                  	assert_closure(rax)
    42 0001050C 803805              <1>  cmp byte [%1], %2
    43 0001050F 0F85D7290000        <1>  jne L_error_incorrect_type
 21640 00010515 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21641 00010518 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21642 0001051B 50                      	push rax
 21643 0001051C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 21644 00010520 50                      	push rax
 21645 00010521 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21646 00010525 50                      	push rax
 21647 00010526 6A02                    	push 2
 21648 00010528 488B0425[80010000]      	mov rax, qword [free_var_48]
 21649                                  	assert_closure(rax)
    42 00010530 803805              <1>  cmp byte [%1], %2
    43 00010533 0F85B3290000        <1>  jne L_error_incorrect_type
 21650 00010539 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21651 0001053C FF5009                  	call SOB_CLOSURE_CODE(rax)
 21652 0001053F 50                      	push rax
 21653 00010540 6A02                    	push 2
 21654 00010542 488B0425[68000000]      	mov rax, qword [free_var_13]
 21655                                  .L_applic_TC_00a9:
 21656 0001054A 803805                  	cmp byte [rax], T_closure
 21657 0001054D 0F855A210000            	jne L_code_ptr_error
 21658 00010553 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21659 00010557 53                      	push rbx
 21660 00010558 FF7508                  	push qword [rbp + 8]
 21661 0001055B FF7500                  	push qword [rbp]
 21662 0001055E 488B4D18                	mov rcx, [rbp + 3 * 8]
 21663 00010562 488B542418              	mov rdx, [rsp + 3 * 8]
 21664 00010567 488D7204                	lea rsi, [rdx + 4]
 21665 0001056B 4C8D4EFF                	lea r9, [rsi - 1]
 21666 0001056F 488D7903                	lea rdi, [rcx + 3]
 21667 00010573 4D31C0                  	xor r8, r8
 21668                                  .L_tc_recycle_frame_loop_00a9:
 21669 00010576 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21670 0001057A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21671 0001057F 49FFC9                  	dec r9
 21672 00010582 4D31C0                  	xor r8, r8
 21673 00010585 48FFCF                  	dec rdi
 21674 00010588 48FFCE                  	dec rsi
 21675 0001058B 4883FE00                	cmp rsi, 0
 21676 0001058F 75E5                    	jne .L_tc_recycle_frame_loop_00a9
 21677                                  .L_tc_recycle_frame_done_00a9:
 21678                                  ;this pop rbp in sot to the right place
 21679 00010591 4989C9                  	mov r9, rcx
 21680 00010594 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21681 0001059C 4C01CC                  	add rsp, r9
 21682 0001059F 5D                      	pop rbp
 21683 000105A0 488B4D00                	mov rcx, qword [rbp]
 21684 000105A4 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21685 000105A8 FFE3                    	jmp rbx
 21686                                  
 21687 000105AA EB0A                            	jmp .L_if_end_0052
 21688                                  
 21689                                          	.L_if_else_0052:
 21690 000105AC 48B8-                   	mov rax,L_constants + 1
 21690 000105AE [0100000000000000] 
 21691                                  
 21692                                          	.L_if_end_0052:
 21693 000105B6 C9                      	leave
 21694 000105B7 C22800                  	ret 8 * (2 + 3)
 21695                                  .L_lambda_simple_end_0093:	; new closure is in rax
 21696 000105BA 50                      	push rax
 21697 000105BB 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21698 000105BF 8F00                    	pop qword [rax]
 21699 000105C1 48B8-                   	mov rax, sob_void
 21699 000105C3 [0000000000000000] 
 21700                                  
 21701 000105CB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21702 000105D0 E823110000              	call malloc
 21703 000105D5 50                      	push rax
 21704 000105D6 BF08000000              	mov rdi, 8 * 1	; new rib
 21705 000105DB E818110000              	call malloc
 21706 000105E0 50                      	push rax
 21707 000105E1 BF10000000              	mov rdi, 8 * 2	; extended env
 21708 000105E6 E80D110000              	call malloc
 21709 000105EB 488B7D10                	mov rdi, ENV
 21710 000105EF BE00000000              	mov rsi, 0
 21711 000105F4 BA01000000              	mov rdx, 1
 21712                                  .L_lambda_simple_env_loop_0094:	; ext_env[i + 1] <-- env[i]
 21713 000105F9 4883FE01                	cmp rsi, 1
 21714 000105FD 7410                    	je .L_lambda_simple_env_end_0094
 21715 000105FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21716 00010603 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21717 00010607 48FFC6                  	inc rsi
 21718 0001060A 48FFC2                  	inc rdx
 21719 0001060D EBEA                    	jmp .L_lambda_simple_env_loop_0094
 21720                                  .L_lambda_simple_env_end_0094:
 21721 0001060F 5B                      	pop rbx
 21722 00010610 BE00000000              	mov rsi, 0
 21723                                  .L_lambda_simple_params_loop_0094:	; copy params
 21724 00010615 4883FE01                	cmp rsi, 1
 21725 00010619 740E                    	je .L_lambda_simple_params_end_0094
 21726 0001061B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21727 00010620 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21728 00010624 48FFC6                  	inc rsi
 21729 00010627 EBEC                    	jmp .L_lambda_simple_params_loop_0094
 21730                                  .L_lambda_simple_params_end_0094:
 21731 00010629 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21732 0001062C 4889C3                  	mov rbx, rax
 21733 0001062F 58                      	pop rax
 21734 00010630 C60005                  	mov byte [rax], T_closure
 21735 00010633 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21736 00010637 48C74009[44060100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0094
 21737 0001063F E9B9000000              	jmp .L_lambda_simple_end_0094
 21738                                  .L_lambda_simple_code_0094:	; lambda-simple body
 21739 00010644 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21740 0001064A 740B                    	je .L_lambda_simple_arity_check_ok_0094
 21741 0001064C FF742410                	push qword [rsp + 8 * 2]
 21742 00010650 6A01                    	push 1
 21743 00010652 E95A100000              	jmp L_error_incorrect_arity_simple
 21744                                  .L_lambda_simple_arity_check_ok_0094:
 21745 00010657 C8000000                	enter 0, 0
 21746 0001065B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21747 0001065F 50                      	push rax
 21748 00010660 6A01                    	push 1
 21749 00010662 488B0425[98000000]      	mov rax, qword [free_var_19]
 21750                                  	assert_closure(rax)
    42 0001066A 803805              <1>  cmp byte [%1], %2
    43 0001066D 0F8579280000        <1>  jne L_error_incorrect_type
 21751 00010673 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21752 00010676 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21753 00010679 50                      	push rax
 21754 0001067A 48B8-                   	mov rax,L_constants + 32
 21754 0001067C [2000000000000000] 
 21755 00010684 50                      	push rax
 21756 00010685 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21757 00010689 50                      	push rax
 21758 0001068A 6A03                    	push 3
 21759 0001068C 488B4510                	mov rax, qword [rbp + 8 * 2]
 21760                                  
 21761 00010690 488B00                                            	mov rax, qword[rax + 8 * 0]
 21762                                  
 21763 00010693 488B00                                            	mov rax, qword[rax + 8 * 0]
 21764 00010696 488B00                  	mov rax, qword [rax]
 21765                                  .L_applic_TC_00aa:
 21766 00010699 803805                  	cmp byte [rax], T_closure
 21767 0001069C 0F850B200000            	jne L_code_ptr_error
 21768 000106A2 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21769 000106A6 53                      	push rbx
 21770 000106A7 FF7508                  	push qword [rbp + 8]
 21771 000106AA FF7500                  	push qword [rbp]
 21772 000106AD 488B4D18                	mov rcx, [rbp + 3 * 8]
 21773 000106B1 488B542418              	mov rdx, [rsp + 3 * 8]
 21774 000106B6 488D7204                	lea rsi, [rdx + 4]
 21775 000106BA 4C8D4EFF                	lea r9, [rsi - 1]
 21776 000106BE 488D7903                	lea rdi, [rcx + 3]
 21777 000106C2 4D31C0                  	xor r8, r8
 21778                                  .L_tc_recycle_frame_loop_00aa:
 21779 000106C5 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21780 000106C9 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21781 000106CE 49FFC9                  	dec r9
 21782 000106D1 4D31C0                  	xor r8, r8
 21783 000106D4 48FFCF                  	dec rdi
 21784 000106D7 48FFCE                  	dec rsi
 21785 000106DA 4883FE00                	cmp rsi, 0
 21786 000106DE 75E5                    	jne .L_tc_recycle_frame_loop_00aa
 21787                                  .L_tc_recycle_frame_done_00aa:
 21788                                  ;this pop rbp in sot to the right place
 21789 000106E0 4989C9                  	mov r9, rcx
 21790 000106E3 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21791 000106EB 4C01CC                  	add rsp, r9
 21792 000106EE 5D                      	pop rbp
 21793 000106EF 488B4D00                	mov rcx, qword [rbp]
 21794 000106F3 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21795 000106F7 FFE3                    	jmp rbx
 21796 000106F9 C9                      	leave
 21797 000106FA C21800                  	ret 8 * (2 + 1)
 21798                                  .L_lambda_simple_end_0094:	; new closure is in rax
 21799 000106FD C9                      	leave
 21800 000106FE C21800                  	ret 8 * (2 + 1)
 21801                                  .L_lambda_simple_end_0092:	; new closure is in rax
 21802                                  	assert_closure(rax)
    42 00010701 803805              <1>  cmp byte [%1], %2
    43 00010704 0F85E2270000        <1>  jne L_error_incorrect_type
 21803 0001070A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21804 0001070D FF5009                  	call SOB_CLOSURE_CODE(rax)
 21805 00010710 48890425[48040000]      	mov qword [free_var_137], rax
 21806 00010718 48B8-                   	mov rax, sob_void
 21806 0001071A [0000000000000000] 
 21807                                  
 21808 00010722 4889C7                  	mov rdi, rax
 21809 00010725 E8DF0F0000              	call print_sexpr_if_not_void
 21810                                  
 21811 0001072A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21812 0001072F E8C40F0000              	call malloc
 21813 00010734 50                      	push rax
 21814 00010735 BF00000000              	mov rdi, 8 * 0	; new rib
 21815 0001073A E8B90F0000              	call malloc
 21816 0001073F 50                      	push rax
 21817 00010740 BF08000000              	mov rdi, 8 * 1	; extended env
 21818 00010745 E8AE0F0000              	call malloc
 21819 0001074A 488B7D10                	mov rdi, ENV
 21820 0001074E BE00000000              	mov rsi, 0
 21821 00010753 BA01000000              	mov rdx, 1
 21822                                  .L_lambda_simple_env_loop_0095:	; ext_env[i + 1] <-- env[i]
 21823 00010758 4883FE00                	cmp rsi, 0
 21824 0001075C 7410                    	je .L_lambda_simple_env_end_0095
 21825 0001075E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21826 00010762 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21827 00010766 48FFC6                  	inc rsi
 21828 00010769 48FFC2                  	inc rdx
 21829 0001076C EBEA                    	jmp .L_lambda_simple_env_loop_0095
 21830                                  .L_lambda_simple_env_end_0095:
 21831 0001076E 5B                      	pop rbx
 21832 0001076F BE00000000              	mov rsi, 0
 21833                                  .L_lambda_simple_params_loop_0095:	; copy params
 21834 00010774 4883FE00                	cmp rsi, 0
 21835 00010778 740E                    	je .L_lambda_simple_params_end_0095
 21836 0001077A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21837 0001077F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21838 00010783 48FFC6                  	inc rsi
 21839 00010786 EBEC                    	jmp .L_lambda_simple_params_loop_0095
 21840                                  .L_lambda_simple_params_end_0095:
 21841 00010788 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21842 0001078B 4889C3                  	mov rbx, rax
 21843 0001078E 58                      	pop rax
 21844 0001078F C60005                  	mov byte [rax], T_closure
 21845 00010792 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21846 00010796 48C74009[A3070100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0095
 21847 0001079E E9A4000000              	jmp .L_lambda_simple_end_0095
 21848                                  .L_lambda_simple_code_0095:	; lambda-simple body
 21849 000107A3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21850 000107A9 740B                    	je .L_lambda_simple_arity_check_ok_0095
 21851 000107AB FF742410                	push qword [rsp + 8 * 2]
 21852 000107AF 6A01                    	push 1
 21853 000107B1 E9FB0E0000              	jmp L_error_incorrect_arity_simple
 21854                                  .L_lambda_simple_arity_check_ok_0095:
 21855 000107B6 C8000000                	enter 0, 0
 21856 000107BA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21857 000107BE 50                      	push rax
 21858 000107BF 6A00                    	push 0
 21859 000107C1 488B0425[D0000000]      	mov rax, qword [free_var_26]
 21860                                  	assert_closure(rax)
    42 000107C9 803805              <1>  cmp byte [%1], %2
    43 000107CC 0F851A270000        <1>  jne L_error_incorrect_type
 21861 000107D2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 21862 000107D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 21863 000107D8 50                      	push rax
 21864 000107D9 6A02                    	push 2
 21865 000107DB 488B0425[60010000]      	mov rax, qword [free_var_44]
 21866                                  .L_applic_TC_00ab:
 21867 000107E3 803805                  	cmp byte [rax], T_closure
 21868 000107E6 0F85C11E0000            	jne L_code_ptr_error
 21869 000107EC 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21870 000107F0 53                      	push rbx
 21871 000107F1 FF7508                  	push qword [rbp + 8]
 21872 000107F4 FF7500                  	push qword [rbp]
 21873 000107F7 488B4D18                	mov rcx, [rbp + 3 * 8]
 21874 000107FB 488B542418              	mov rdx, [rsp + 3 * 8]
 21875 00010800 488D7204                	lea rsi, [rdx + 4]
 21876 00010804 4C8D4EFF                	lea r9, [rsi - 1]
 21877 00010808 488D7903                	lea rdi, [rcx + 3]
 21878 0001080C 4D31C0                  	xor r8, r8
 21879                                  .L_tc_recycle_frame_loop_00ab:
 21880 0001080F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21881 00010813 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21882 00010818 49FFC9                  	dec r9
 21883 0001081B 4D31C0                  	xor r8, r8
 21884 0001081E 48FFCF                  	dec rdi
 21885 00010821 48FFCE                  	dec rsi
 21886 00010824 4883FE00                	cmp rsi, 0
 21887 00010828 75E5                    	jne .L_tc_recycle_frame_loop_00ab
 21888                                  .L_tc_recycle_frame_done_00ab:
 21889                                  ;this pop rbp in sot to the right place
 21890 0001082A 4989C9                  	mov r9, rcx
 21891 0001082D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21892 00010835 4C01CC                  	add rsp, r9
 21893 00010838 5D                      	pop rbp
 21894 00010839 488B4D00                	mov rcx, qword [rbp]
 21895 0001083D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21896 00010841 FFE3                    	jmp rbx
 21897 00010843 C9                      	leave
 21898 00010844 C21800                  	ret 8 * (2 + 1)
 21899                                  .L_lambda_simple_end_0095:	; new closure is in rax
 21900 00010847 48890425[50040000]      	mov qword [free_var_138], rax
 21901 0001084F 48B8-                   	mov rax, sob_void
 21901 00010851 [0000000000000000] 
 21902                                  
 21903 00010859 4889C7                  	mov rdi, rax
 21904 0001085C E8A80E0000              	call print_sexpr_if_not_void
 21905                                  
 21906 00010861 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21907 00010866 E88D0E0000              	call malloc
 21908 0001086B 50                      	push rax
 21909 0001086C BF00000000              	mov rdi, 8 * 0	; new rib
 21910 00010871 E8820E0000              	call malloc
 21911 00010876 50                      	push rax
 21912 00010877 BF08000000              	mov rdi, 8 * 1	; extended env
 21913 0001087C E8770E0000              	call malloc
 21914 00010881 488B7D10                	mov rdi, ENV
 21915 00010885 BE00000000              	mov rsi, 0
 21916 0001088A BA01000000              	mov rdx, 1
 21917                                  .L_lambda_simple_env_loop_0096:	; ext_env[i + 1] <-- env[i]
 21918 0001088F 4883FE00                	cmp rsi, 0
 21919 00010893 7410                    	je .L_lambda_simple_env_end_0096
 21920 00010895 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 21921 00010899 48890CD0                	mov qword [rax + 8 * rdx], rcx
 21922 0001089D 48FFC6                  	inc rsi
 21923 000108A0 48FFC2                  	inc rdx
 21924 000108A3 EBEA                    	jmp .L_lambda_simple_env_loop_0096
 21925                                  .L_lambda_simple_env_end_0096:
 21926 000108A5 5B                      	pop rbx
 21927 000108A6 BE00000000              	mov rsi, 0
 21928                                  .L_lambda_simple_params_loop_0096:	; copy params
 21929 000108AB 4883FE00                	cmp rsi, 0
 21930 000108AF 740E                    	je .L_lambda_simple_params_end_0096
 21931 000108B1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 21932 000108B6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 21933 000108BA 48FFC6                  	inc rsi
 21934 000108BD EBEC                    	jmp .L_lambda_simple_params_loop_0096
 21935                                  .L_lambda_simple_params_end_0096:
 21936 000108BF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 21937 000108C2 4889C3                  	mov rbx, rax
 21938 000108C5 58                      	pop rax
 21939 000108C6 C60005                  	mov byte [rax], T_closure
 21940 000108C9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 21941 000108CD 48C74009[DA080100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0096
 21942 000108D5 E995000000              	jmp .L_lambda_simple_end_0096
 21943                                  .L_lambda_simple_code_0096:	; lambda-simple body
 21944 000108DA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 21945 000108E0 740B                    	je .L_lambda_simple_arity_check_ok_0096
 21946 000108E2 FF742410                	push qword [rsp + 8 * 2]
 21947 000108E6 6A01                    	push 1
 21948 000108E8 E9C40D0000              	jmp L_error_incorrect_arity_simple
 21949                                  .L_lambda_simple_arity_check_ok_0096:
 21950 000108ED C8000000                	enter 0, 0
 21951 000108F1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 21952 000108F5 50                      	push rax
 21953 000108F6 48B8-                   	mov rax,L_constants + 32
 21953 000108F8 [2000000000000000] 
 21954 00010900 50                      	push rax
 21955 00010901 6A02                    	push 2
 21956 00010903 488B0425[30030000]      	mov rax, qword [free_var_102]
 21957                                  .L_applic_TC_00ac:
 21958 0001090B 803805                  	cmp byte [rax], T_closure
 21959 0001090E 0F85991D0000            	jne L_code_ptr_error
 21960 00010914 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 21961 00010918 53                      	push rbx
 21962 00010919 FF7508                  	push qword [rbp + 8]
 21963 0001091C FF7500                  	push qword [rbp]
 21964 0001091F 488B4D18                	mov rcx, [rbp + 3 * 8]
 21965 00010923 488B542418              	mov rdx, [rsp + 3 * 8]
 21966 00010928 488D7204                	lea rsi, [rdx + 4]
 21967 0001092C 4C8D4EFF                	lea r9, [rsi - 1]
 21968 00010930 488D7903                	lea rdi, [rcx + 3]
 21969 00010934 4D31C0                  	xor r8, r8
 21970                                  .L_tc_recycle_frame_loop_00ac:
 21971 00010937 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 21972 0001093B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 21973 00010940 49FFC9                  	dec r9
 21974 00010943 4D31C0                  	xor r8, r8
 21975 00010946 48FFCF                  	dec rdi
 21976 00010949 48FFCE                  	dec rsi
 21977 0001094C 4883FE00                	cmp rsi, 0
 21978 00010950 75E5                    	jne .L_tc_recycle_frame_loop_00ac
 21979                                  .L_tc_recycle_frame_done_00ac:
 21980                                  ;this pop rbp in sot to the right place
 21981 00010952 4989C9                  	mov r9, rcx
 21982 00010955 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 21983 0001095D 4C01CC                  	add rsp, r9
 21984 00010960 5D                      	pop rbp
 21985 00010961 488B4D00                	mov rcx, qword [rbp]
 21986 00010965 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 21987 00010969 FFE3                    	jmp rbx
 21988 0001096B C9                      	leave
 21989 0001096C C21800                  	ret 8 * (2 + 1)
 21990                                  .L_lambda_simple_end_0096:	; new closure is in rax
 21991 0001096F 48890425[58040000]      	mov qword [free_var_139], rax
 21992 00010977 48B8-                   	mov rax, sob_void
 21992 00010979 [0000000000000000] 
 21993                                  
 21994 00010981 4889C7                  	mov rdi, rax
 21995 00010984 E8800D0000              	call print_sexpr_if_not_void
 21996                                  
 21997 00010989 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 21998 0001098E E8650D0000              	call malloc
 21999 00010993 50                      	push rax
 22000 00010994 BF00000000              	mov rdi, 8 * 0	; new rib
 22001 00010999 E85A0D0000              	call malloc
 22002 0001099E 50                      	push rax
 22003 0001099F BF08000000              	mov rdi, 8 * 1	; extended env
 22004 000109A4 E84F0D0000              	call malloc
 22005 000109A9 488B7D10                	mov rdi, ENV
 22006 000109AD BE00000000              	mov rsi, 0
 22007 000109B2 BA01000000              	mov rdx, 1
 22008                                  .L_lambda_simple_env_loop_0097:	; ext_env[i + 1] <-- env[i]
 22009 000109B7 4883FE00                	cmp rsi, 0
 22010 000109BB 7410                    	je .L_lambda_simple_env_end_0097
 22011 000109BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22012 000109C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22013 000109C5 48FFC6                  	inc rsi
 22014 000109C8 48FFC2                  	inc rdx
 22015 000109CB EBEA                    	jmp .L_lambda_simple_env_loop_0097
 22016                                  .L_lambda_simple_env_end_0097:
 22017 000109CD 5B                      	pop rbx
 22018 000109CE BE00000000              	mov rsi, 0
 22019                                  .L_lambda_simple_params_loop_0097:	; copy params
 22020 000109D3 4883FE00                	cmp rsi, 0
 22021 000109D7 740E                    	je .L_lambda_simple_params_end_0097
 22022 000109D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22023 000109DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22024 000109E2 48FFC6                  	inc rsi
 22025 000109E5 EBEC                    	jmp .L_lambda_simple_params_loop_0097
 22026                                  .L_lambda_simple_params_end_0097:
 22027 000109E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22028 000109EA 4889C3                  	mov rbx, rax
 22029 000109ED 58                      	pop rax
 22030 000109EE C60005                  	mov byte [rax], T_closure
 22031 000109F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22032 000109F5 48C74009[020A0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0097
 22033 000109FD E995000000              	jmp .L_lambda_simple_end_0097
 22034                                  .L_lambda_simple_code_0097:	; lambda-simple body
 22035 00010A02 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22036 00010A08 740B                    	je .L_lambda_simple_arity_check_ok_0097
 22037 00010A0A FF742410                	push qword [rsp + 8 * 2]
 22038 00010A0E 6A01                    	push 1
 22039 00010A10 E99C0C0000              	jmp L_error_incorrect_arity_simple
 22040                                  .L_lambda_simple_arity_check_ok_0097:
 22041 00010A15 C8000000                	enter 0, 0
 22042 00010A19 48B8-                   	mov rax,L_constants + 32
 22042 00010A1B [2000000000000000] 
 22043 00010A23 50                      	push rax
 22044 00010A24 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22045 00010A28 50                      	push rax
 22046 00010A29 6A02                    	push 2
 22047 00010A2B 488B0425[30030000]      	mov rax, qword [free_var_102]
 22048                                  .L_applic_TC_00ad:
 22049 00010A33 803805                  	cmp byte [rax], T_closure
 22050 00010A36 0F85711C0000            	jne L_code_ptr_error
 22051 00010A3C 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22052 00010A40 53                      	push rbx
 22053 00010A41 FF7508                  	push qword [rbp + 8]
 22054 00010A44 FF7500                  	push qword [rbp]
 22055 00010A47 488B4D18                	mov rcx, [rbp + 3 * 8]
 22056 00010A4B 488B542418              	mov rdx, [rsp + 3 * 8]
 22057 00010A50 488D7204                	lea rsi, [rdx + 4]
 22058 00010A54 4C8D4EFF                	lea r9, [rsi - 1]
 22059 00010A58 488D7903                	lea rdi, [rcx + 3]
 22060 00010A5C 4D31C0                  	xor r8, r8
 22061                                  .L_tc_recycle_frame_loop_00ad:
 22062 00010A5F 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22063 00010A63 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22064 00010A68 49FFC9                  	dec r9
 22065 00010A6B 4D31C0                  	xor r8, r8
 22066 00010A6E 48FFCF                  	dec rdi
 22067 00010A71 48FFCE                  	dec rsi
 22068 00010A74 4883FE00                	cmp rsi, 0
 22069 00010A78 75E5                    	jne .L_tc_recycle_frame_loop_00ad
 22070                                  .L_tc_recycle_frame_done_00ad:
 22071                                  ;this pop rbp in sot to the right place
 22072 00010A7A 4989C9                  	mov r9, rcx
 22073 00010A7D 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22074 00010A85 4C01CC                  	add rsp, r9
 22075 00010A88 5D                      	pop rbp
 22076 00010A89 488B4D00                	mov rcx, qword [rbp]
 22077 00010A8D 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22078 00010A91 FFE3                    	jmp rbx
 22079 00010A93 C9                      	leave
 22080 00010A94 C21800                  	ret 8 * (2 + 1)
 22081                                  .L_lambda_simple_end_0097:	; new closure is in rax
 22082 00010A97 48890425[60040000]      	mov qword [free_var_140], rax
 22083 00010A9F 48B8-                   	mov rax, sob_void
 22083 00010AA1 [0000000000000000] 
 22084                                  
 22085 00010AA9 4889C7                  	mov rdi, rax
 22086 00010AAC E8580C0000              	call print_sexpr_if_not_void
 22087                                  
 22088 00010AB1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22089 00010AB6 E83D0C0000              	call malloc
 22090 00010ABB 50                      	push rax
 22091 00010ABC BF00000000              	mov rdi, 8 * 0	; new rib
 22092 00010AC1 E8320C0000              	call malloc
 22093 00010AC6 50                      	push rax
 22094 00010AC7 BF08000000              	mov rdi, 8 * 1	; extended env
 22095 00010ACC E8270C0000              	call malloc
 22096 00010AD1 488B7D10                	mov rdi, ENV
 22097 00010AD5 BE00000000              	mov rsi, 0
 22098 00010ADA BA01000000              	mov rdx, 1
 22099                                  .L_lambda_simple_env_loop_0098:	; ext_env[i + 1] <-- env[i]
 22100 00010ADF 4883FE00                	cmp rsi, 0
 22101 00010AE3 7410                    	je .L_lambda_simple_env_end_0098
 22102 00010AE5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22103 00010AE9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22104 00010AED 48FFC6                  	inc rsi
 22105 00010AF0 48FFC2                  	inc rdx
 22106 00010AF3 EBEA                    	jmp .L_lambda_simple_env_loop_0098
 22107                                  .L_lambda_simple_env_end_0098:
 22108 00010AF5 5B                      	pop rbx
 22109 00010AF6 BE00000000              	mov rsi, 0
 22110                                  .L_lambda_simple_params_loop_0098:	; copy params
 22111 00010AFB 4883FE00                	cmp rsi, 0
 22112 00010AFF 740E                    	je .L_lambda_simple_params_end_0098
 22113 00010B01 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22114 00010B06 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22115 00010B0A 48FFC6                  	inc rsi
 22116 00010B0D EBEC                    	jmp .L_lambda_simple_params_loop_0098
 22117                                  .L_lambda_simple_params_end_0098:
 22118 00010B0F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22119 00010B12 4889C3                  	mov rbx, rax
 22120 00010B15 58                      	pop rax
 22121 00010B16 C60005                  	mov byte [rax], T_closure
 22122 00010B19 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22123 00010B1D 48C74009[2A0B0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0098
 22124 00010B25 E9AF000000              	jmp .L_lambda_simple_end_0098
 22125                                  .L_lambda_simple_code_0098:	; lambda-simple body
 22126 00010B2A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22127 00010B30 740B                    	je .L_lambda_simple_arity_check_ok_0098
 22128 00010B32 FF742410                	push qword [rsp + 8 * 2]
 22129 00010B36 6A01                    	push 1
 22130 00010B38 E9740B0000              	jmp L_error_incorrect_arity_simple
 22131                                  .L_lambda_simple_arity_check_ok_0098:
 22132 00010B3D C8000000                	enter 0, 0
 22133 00010B41 48B8-                   	mov rax,L_constants + 512
 22133 00010B43 [0002000000000000] 
 22134 00010B4B 50                      	push rax
 22135 00010B4C 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22136 00010B50 50                      	push rax
 22137 00010B51 6A02                    	push 2
 22138 00010B53 488B0425[60010000]      	mov rax, qword [free_var_44]
 22139                                  	assert_closure(rax)
    42 00010B5B 803805              <1>  cmp byte [%1], %2
    43 00010B5E 0F8588230000        <1>  jne L_error_incorrect_type
 22140 00010B64 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22141 00010B67 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22142 00010B6A 50                      	push rax
 22143 00010B6B 6A01                    	push 1
 22144 00010B6D 488B0425[D8000000]      	mov rax, qword [free_var_27]
 22145                                  .L_applic_TC_00ae:
 22146 00010B75 803805                  	cmp byte [rax], T_closure
 22147 00010B78 0F852F1B0000            	jne L_code_ptr_error
 22148 00010B7E 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22149 00010B82 53                      	push rbx
 22150 00010B83 FF7508                  	push qword [rbp + 8]
 22151 00010B86 FF7500                  	push qword [rbp]
 22152 00010B89 488B4D18                	mov rcx, [rbp + 3 * 8]
 22153 00010B8D 488B542418              	mov rdx, [rsp + 3 * 8]
 22154 00010B92 488D7204                	lea rsi, [rdx + 4]
 22155 00010B96 4C8D4EFF                	lea r9, [rsi - 1]
 22156 00010B9A 488D7903                	lea rdi, [rcx + 3]
 22157 00010B9E 4D31C0                  	xor r8, r8
 22158                                  .L_tc_recycle_frame_loop_00ae:
 22159 00010BA1 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22160 00010BA5 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22161 00010BAA 49FFC9                  	dec r9
 22162 00010BAD 4D31C0                  	xor r8, r8
 22163 00010BB0 48FFCF                  	dec rdi
 22164 00010BB3 48FFCE                  	dec rsi
 22165 00010BB6 4883FE00                	cmp rsi, 0
 22166 00010BBA 75E5                    	jne .L_tc_recycle_frame_loop_00ae
 22167                                  .L_tc_recycle_frame_done_00ae:
 22168                                  ;this pop rbp in sot to the right place
 22169 00010BBC 4989C9                  	mov r9, rcx
 22170 00010BBF 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22171 00010BC7 4C01CC                  	add rsp, r9
 22172 00010BCA 5D                      	pop rbp
 22173 00010BCB 488B4D00                	mov rcx, qword [rbp]
 22174 00010BCF 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22175 00010BD3 FFE3                    	jmp rbx
 22176 00010BD5 C9                      	leave
 22177 00010BD6 C21800                  	ret 8 * (2 + 1)
 22178                                  .L_lambda_simple_end_0098:	; new closure is in rax
 22179 00010BD9 48890425[68040000]      	mov qword [free_var_141], rax
 22180 00010BE1 48B8-                   	mov rax, sob_void
 22180 00010BE3 [0000000000000000] 
 22181                                  
 22182 00010BEB 4889C7                  	mov rdi, rax
 22183 00010BEE E8160B0000              	call print_sexpr_if_not_void
 22184                                  
 22185 00010BF3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22186 00010BF8 E8FB0A0000              	call malloc
 22187 00010BFD 50                      	push rax
 22188 00010BFE BF00000000              	mov rdi, 8 * 0	; new rib
 22189 00010C03 E8F00A0000              	call malloc
 22190 00010C08 50                      	push rax
 22191 00010C09 BF08000000              	mov rdi, 8 * 1	; extended env
 22192 00010C0E E8E50A0000              	call malloc
 22193 00010C13 488B7D10                	mov rdi, ENV
 22194 00010C17 BE00000000              	mov rsi, 0
 22195 00010C1C BA01000000              	mov rdx, 1
 22196                                  .L_lambda_simple_env_loop_0099:	; ext_env[i + 1] <-- env[i]
 22197 00010C21 4883FE00                	cmp rsi, 0
 22198 00010C25 7410                    	je .L_lambda_simple_env_end_0099
 22199 00010C27 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22200 00010C2B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22201 00010C2F 48FFC6                  	inc rsi
 22202 00010C32 48FFC2                  	inc rdx
 22203 00010C35 EBEA                    	jmp .L_lambda_simple_env_loop_0099
 22204                                  .L_lambda_simple_env_end_0099:
 22205 00010C37 5B                      	pop rbx
 22206 00010C38 BE00000000              	mov rsi, 0
 22207                                  .L_lambda_simple_params_loop_0099:	; copy params
 22208 00010C3D 4883FE00                	cmp rsi, 0
 22209 00010C41 740E                    	je .L_lambda_simple_params_end_0099
 22210 00010C43 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22211 00010C48 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22212 00010C4C 48FFC6                  	inc rsi
 22213 00010C4F EBEC                    	jmp .L_lambda_simple_params_loop_0099
 22214                                  .L_lambda_simple_params_end_0099:
 22215 00010C51 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22216 00010C54 4889C3                  	mov rbx, rax
 22217 00010C57 58                      	pop rax
 22218 00010C58 C60005                  	mov byte [rax], T_closure
 22219 00010C5B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22220 00010C5F 48C74009[6C0C0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0099
 22221 00010C67 E9A4000000              	jmp .L_lambda_simple_end_0099
 22222                                  .L_lambda_simple_code_0099:	; lambda-simple body
 22223 00010C6C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22224 00010C72 740B                    	je .L_lambda_simple_arity_check_ok_0099
 22225 00010C74 FF742410                	push qword [rsp + 8 * 2]
 22226 00010C78 6A01                    	push 1
 22227 00010C7A E9320A0000              	jmp L_error_incorrect_arity_simple
 22228                                  .L_lambda_simple_arity_check_ok_0099:
 22229 00010C7F C8000000                	enter 0, 0
 22230 00010C83 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22231 00010C87 50                      	push rax
 22232 00010C88 6A01                    	push 1
 22233 00010C8A 488B0425[68040000]      	mov rax, qword [free_var_141]
 22234                                  	assert_closure(rax)
    42 00010C92 803805              <1>  cmp byte [%1], %2
    43 00010C95 0F8551220000        <1>  jne L_error_incorrect_type
 22235 00010C9B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22236 00010C9E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22237 00010CA1 50                      	push rax
 22238 00010CA2 6A01                    	push 1
 22239 00010CA4 488B0425[B0020000]      	mov rax, qword [free_var_86]
 22240                                  .L_applic_TC_00af:
 22241 00010CAC 803805                  	cmp byte [rax], T_closure
 22242 00010CAF 0F85F8190000            	jne L_code_ptr_error
 22243 00010CB5 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22244 00010CB9 53                      	push rbx
 22245 00010CBA FF7508                  	push qword [rbp + 8]
 22246 00010CBD FF7500                  	push qword [rbp]
 22247 00010CC0 488B4D18                	mov rcx, [rbp + 3 * 8]
 22248 00010CC4 488B542418              	mov rdx, [rsp + 3 * 8]
 22249 00010CC9 488D7204                	lea rsi, [rdx + 4]
 22250 00010CCD 4C8D4EFF                	lea r9, [rsi - 1]
 22251 00010CD1 488D7903                	lea rdi, [rcx + 3]
 22252 00010CD5 4D31C0                  	xor r8, r8
 22253                                  .L_tc_recycle_frame_loop_00af:
 22254 00010CD8 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22255 00010CDC 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22256 00010CE1 49FFC9                  	dec r9
 22257 00010CE4 4D31C0                  	xor r8, r8
 22258 00010CE7 48FFCF                  	dec rdi
 22259 00010CEA 48FFCE                  	dec rsi
 22260 00010CED 4883FE00                	cmp rsi, 0
 22261 00010CF1 75E5                    	jne .L_tc_recycle_frame_loop_00af
 22262                                  .L_tc_recycle_frame_done_00af:
 22263                                  ;this pop rbp in sot to the right place
 22264 00010CF3 4989C9                  	mov r9, rcx
 22265 00010CF6 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22266 00010CFE 4C01CC                  	add rsp, r9
 22267 00010D01 5D                      	pop rbp
 22268 00010D02 488B4D00                	mov rcx, qword [rbp]
 22269 00010D06 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22270 00010D0A FFE3                    	jmp rbx
 22271 00010D0C C9                      	leave
 22272 00010D0D C21800                  	ret 8 * (2 + 1)
 22273                                  .L_lambda_simple_end_0099:	; new closure is in rax
 22274 00010D10 48890425[70040000]      	mov qword [free_var_142], rax
 22275 00010D18 48B8-                   	mov rax, sob_void
 22275 00010D1A [0000000000000000] 
 22276                                  
 22277 00010D22 4889C7                  	mov rdi, rax
 22278 00010D25 E8DF090000              	call print_sexpr_if_not_void
 22279                                  
 22280 00010D2A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22281 00010D2F E8C4090000              	call malloc
 22282 00010D34 50                      	push rax
 22283 00010D35 BF00000000              	mov rdi, 8 * 0	; new rib
 22284 00010D3A E8B9090000              	call malloc
 22285 00010D3F 50                      	push rax
 22286 00010D40 BF08000000              	mov rdi, 8 * 1	; extended env
 22287 00010D45 E8AE090000              	call malloc
 22288 00010D4A 488B7D10                	mov rdi, ENV
 22289 00010D4E BE00000000              	mov rsi, 0
 22290 00010D53 BA01000000              	mov rdx, 1
 22291                                  .L_lambda_simple_env_loop_009a:	; ext_env[i + 1] <-- env[i]
 22292 00010D58 4883FE00                	cmp rsi, 0
 22293 00010D5C 7410                    	je .L_lambda_simple_env_end_009a
 22294 00010D5E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22295 00010D62 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22296 00010D66 48FFC6                  	inc rsi
 22297 00010D69 48FFC2                  	inc rdx
 22298 00010D6C EBEA                    	jmp .L_lambda_simple_env_loop_009a
 22299                                  .L_lambda_simple_env_end_009a:
 22300 00010D6E 5B                      	pop rbx
 22301 00010D6F BE00000000              	mov rsi, 0
 22302                                  .L_lambda_simple_params_loop_009a:	; copy params
 22303 00010D74 4883FE00                	cmp rsi, 0
 22304 00010D78 740E                    	je .L_lambda_simple_params_end_009a
 22305 00010D7A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22306 00010D7F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22307 00010D83 48FFC6                  	inc rsi
 22308 00010D86 EBEC                    	jmp .L_lambda_simple_params_loop_009a
 22309                                  .L_lambda_simple_params_end_009a:
 22310 00010D88 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22311 00010D8B 4889C3                  	mov rbx, rax
 22312 00010D8E 58                      	pop rax
 22313 00010D8F C60005                  	mov byte [rax], T_closure
 22314 00010D92 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22315 00010D96 48C74009[A30D0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009a
 22316 00010D9E E9B6000000              	jmp .L_lambda_simple_end_009a
 22317                                  .L_lambda_simple_code_009a:	; lambda-simple body
 22318 00010DA3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 22319 00010DA9 740B                    	je .L_lambda_simple_arity_check_ok_009a
 22320 00010DAB FF742410                	push qword [rsp + 8 * 2]
 22321 00010DAF 6A01                    	push 1
 22322 00010DB1 E9FB080000              	jmp L_error_incorrect_arity_simple
 22323                                  .L_lambda_simple_arity_check_ok_009a:
 22324 00010DB6 C8000000                	enter 0, 0
 22325 00010DBA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22326 00010DBE 50                      	push rax
 22327 00010DBF 6A01                    	push 1
 22328 00010DC1 488B0425[60040000]      	mov rax, qword [free_var_140]
 22329                                  	assert_closure(rax)
    42 00010DC9 803805              <1>  cmp byte [%1], %2
    43 00010DCC 0F851A210000        <1>  jne L_error_incorrect_type
 22330 00010DD2 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22331 00010DD5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22332                                  
 22333 00010DD8 483D[02000000]                  	cmp rax, sob_boolean_false
 22334                                  
 22335 00010DDE 7471                            	je .L_if_else_0053
 22336 00010DE0 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22337 00010DE4 50                      	push rax
 22338 00010DE5 6A01                    	push 1
 22339 00010DE7 488B0425[10030000]      	mov rax, qword [free_var_98]
 22340                                  .L_applic_TC_00b0:
 22341 00010DEF 803805                  	cmp byte [rax], T_closure
 22342 00010DF2 0F85B5180000            	jne L_code_ptr_error
 22343 00010DF8 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22344 00010DFC 53                      	push rbx
 22345 00010DFD FF7508                  	push qword [rbp + 8]
 22346 00010E00 FF7500                  	push qword [rbp]
 22347 00010E03 488B4D18                	mov rcx, [rbp + 3 * 8]
 22348 00010E07 488B542418              	mov rdx, [rsp + 3 * 8]
 22349 00010E0C 488D7204                	lea rsi, [rdx + 4]
 22350 00010E10 4C8D4EFF                	lea r9, [rsi - 1]
 22351 00010E14 488D7903                	lea rdi, [rcx + 3]
 22352 00010E18 4D31C0                  	xor r8, r8
 22353                                  .L_tc_recycle_frame_loop_00b0:
 22354 00010E1B 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22355 00010E1F 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22356 00010E24 49FFC9                  	dec r9
 22357 00010E27 4D31C0                  	xor r8, r8
 22358 00010E2A 48FFCF                  	dec rdi
 22359 00010E2D 48FFCE                  	dec rsi
 22360 00010E30 4883FE00                	cmp rsi, 0
 22361 00010E34 75E5                    	jne .L_tc_recycle_frame_loop_00b0
 22362                                  .L_tc_recycle_frame_done_00b0:
 22363                                  ;this pop rbp in sot to the right place
 22364 00010E36 4989C9                  	mov r9, rcx
 22365 00010E39 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22366 00010E41 4C01CC                  	add rsp, r9
 22367 00010E44 5D                      	pop rbp
 22368 00010E45 488B4D00                	mov rcx, qword [rbp]
 22369 00010E49 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22370 00010E4D FFE3                    	jmp rbx
 22371                                  
 22372 00010E4F EB04                            	jmp .L_if_end_0053
 22373                                  
 22374                                          	.L_if_else_0053:
 22375 00010E51 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22376                                  
 22377                                          	.L_if_end_0053:
 22378 00010E55 C9                      	leave
 22379 00010E56 C21800                  	ret 8 * (2 + 1)
 22380                                  .L_lambda_simple_end_009a:	; new closure is in rax
 22381 00010E59 48890425[78040000]      	mov qword [free_var_143], rax
 22382 00010E61 48B8-                   	mov rax, sob_void
 22382 00010E63 [0000000000000000] 
 22383                                  
 22384 00010E6B 4889C7                  	mov rdi, rax
 22385 00010E6E E896080000              	call print_sexpr_if_not_void
 22386                                  
 22387 00010E73 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22388 00010E78 E87B080000              	call malloc
 22389 00010E7D 50                      	push rax
 22390 00010E7E BF00000000              	mov rdi, 8 * 0	; new rib
 22391 00010E83 E870080000              	call malloc
 22392 00010E88 50                      	push rax
 22393 00010E89 BF08000000              	mov rdi, 8 * 1	; extended env
 22394 00010E8E E865080000              	call malloc
 22395 00010E93 488B7D10                	mov rdi, ENV
 22396 00010E97 BE00000000              	mov rsi, 0
 22397 00010E9C BA01000000              	mov rdx, 1
 22398                                  .L_lambda_simple_env_loop_009b:	; ext_env[i + 1] <-- env[i]
 22399 00010EA1 4883FE00                	cmp rsi, 0
 22400 00010EA5 7410                    	je .L_lambda_simple_env_end_009b
 22401 00010EA7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22402 00010EAB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22403 00010EAF 48FFC6                  	inc rsi
 22404 00010EB2 48FFC2                  	inc rdx
 22405 00010EB5 EBEA                    	jmp .L_lambda_simple_env_loop_009b
 22406                                  .L_lambda_simple_env_end_009b:
 22407 00010EB7 5B                      	pop rbx
 22408 00010EB8 BE00000000              	mov rsi, 0
 22409                                  .L_lambda_simple_params_loop_009b:	; copy params
 22410 00010EBD 4883FE00                	cmp rsi, 0
 22411 00010EC1 740E                    	je .L_lambda_simple_params_end_009b
 22412 00010EC3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22413 00010EC8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22414 00010ECC 48FFC6                  	inc rsi
 22415 00010ECF EBEC                    	jmp .L_lambda_simple_params_loop_009b
 22416                                  .L_lambda_simple_params_end_009b:
 22417 00010ED1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22418 00010ED4 4889C3                  	mov rbx, rax
 22419 00010ED7 58                      	pop rax
 22420 00010ED8 C60005                  	mov byte [rax], T_closure
 22421 00010EDB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22422 00010EDF 48C74009[EC0E0100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009b
 22423 00010EE7 E9BC040000              	jmp .L_lambda_simple_end_009b
 22424                                  .L_lambda_simple_code_009b:	; lambda-simple body
 22425 00010EEC 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22426 00010EF2 740B                    	je .L_lambda_simple_arity_check_ok_009b
 22427 00010EF4 FF742410                	push qword [rsp + 8 * 2]
 22428 00010EF8 6A02                    	push 2
 22429 00010EFA E9B2070000              	jmp L_error_incorrect_arity_simple
 22430                                  .L_lambda_simple_arity_check_ok_009b:
 22431 00010EFF C8000000                	enter 0, 0
 22432 00010F03 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22433 00010F07 50                      	push rax
 22434 00010F08 6A01                    	push 1
 22435 00010F0A 488B0425[08000000]      	mov rax, qword [free_var_1]
 22436                                  	assert_closure(rax)
    42 00010F12 803805              <1>  cmp byte [%1], %2
    43 00010F15 0F85D11F0000        <1>  jne L_error_incorrect_type
 22437 00010F1B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22438 00010F1E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22439                                  
 22440 00010F21 483D[02000000]                  	cmp rax, sob_boolean_false
 22441                                  
 22442 00010F27 7420                            	je .L_if_else_005c
 22443 00010F29 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22444 00010F2D 50                      	push rax
 22445 00010F2E 6A01                    	push 1
 22446 00010F30 488B0425[08000000]      	mov rax, qword [free_var_1]
 22447                                  	assert_closure(rax)
    42 00010F38 803805              <1>  cmp byte [%1], %2
    43 00010F3B 0F85AB1F0000        <1>  jne L_error_incorrect_type
 22448 00010F41 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22449 00010F44 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22450                                  
 22451 00010F47 EB0A                            	jmp .L_if_end_005c
 22452                                  
 22453                                          	.L_if_else_005c:
 22454 00010F49 48B8-                   	mov rax,L_constants + 2
 22454 00010F4B [0200000000000000] 
 22455                                  
 22456                                          	.L_if_end_005c:
 22457                                  
 22458 00010F53 483D[02000000]                  	cmp rax, sob_boolean_false
 22459                                  
 22460 00010F59 0F841C010000                    	je .L_if_else_0054
 22461 00010F5F 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22462 00010F63 50                      	push rax
 22463 00010F64 6A01                    	push 1
 22464 00010F66 488B0425[80000000]      	mov rax, qword [free_var_16]
 22465                                  	assert_closure(rax)
    42 00010F6E 803805              <1>  cmp byte [%1], %2
    43 00010F71 0F85751F0000        <1>  jne L_error_incorrect_type
 22466 00010F77 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22467 00010F7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 22468 00010F7D 50                      	push rax
 22469 00010F7E 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22470 00010F82 50                      	push rax
 22471 00010F83 6A01                    	push 1
 22472 00010F85 488B0425[80000000]      	mov rax, qword [free_var_16]
 22473                                  	assert_closure(rax)
    42 00010F8D 803805              <1>  cmp byte [%1], %2
    43 00010F90 0F85561F0000        <1>  jne L_error_incorrect_type
 22474 00010F96 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22475 00010F99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22476 00010F9C 50                      	push rax
 22477 00010F9D 6A02                    	push 2
 22478 00010F9F 488B0425[80040000]      	mov rax, qword [free_var_144]
 22479                                  	assert_closure(rax)
    42 00010FA7 803805              <1>  cmp byte [%1], %2
    43 00010FAA 0F853C1F0000        <1>  jne L_error_incorrect_type
 22480 00010FB0 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22481 00010FB3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22482                                  
 22483 00010FB6 483D[02000000]                  	cmp rax, sob_boolean_false
 22484                                  
 22485 00010FBC 0F84AA000000                    	je .L_if_else_005b
 22486 00010FC2 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22487 00010FC6 50                      	push rax
 22488 00010FC7 6A01                    	push 1
 22489 00010FC9 488B0425[88000000]      	mov rax, qword [free_var_17]
 22490                                  	assert_closure(rax)
    42 00010FD1 803805              <1>  cmp byte [%1], %2
    43 00010FD4 0F85121F0000        <1>  jne L_error_incorrect_type
 22491 00010FDA FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22492 00010FDD FF5009                  	call SOB_CLOSURE_CODE(rax)
 22493 00010FE0 50                      	push rax
 22494 00010FE1 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22495 00010FE5 50                      	push rax
 22496 00010FE6 6A01                    	push 1
 22497 00010FE8 488B0425[88000000]      	mov rax, qword [free_var_17]
 22498                                  	assert_closure(rax)
    42 00010FF0 803805              <1>  cmp byte [%1], %2
    43 00010FF3 0F85F31E0000        <1>  jne L_error_incorrect_type
 22499 00010FF9 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22500 00010FFC FF5009                  	call SOB_CLOSURE_CODE(rax)
 22501 00010FFF 50                      	push rax
 22502 00011000 6A02                    	push 2
 22503 00011002 488B0425[80040000]      	mov rax, qword [free_var_144]
 22504                                  .L_applic_TC_00b4:
 22505 0001100A 803805                  	cmp byte [rax], T_closure
 22506 0001100D 0F859A160000            	jne L_code_ptr_error
 22507 00011013 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22508 00011017 53                      	push rbx
 22509 00011018 FF7508                  	push qword [rbp + 8]
 22510 0001101B FF7500                  	push qword [rbp]
 22511 0001101E 488B4D18                	mov rcx, [rbp + 3 * 8]
 22512 00011022 488B542418              	mov rdx, [rsp + 3 * 8]
 22513 00011027 488D7204                	lea rsi, [rdx + 4]
 22514 0001102B 4C8D4EFF                	lea r9, [rsi - 1]
 22515 0001102F 488D7903                	lea rdi, [rcx + 3]
 22516 00011033 4D31C0                  	xor r8, r8
 22517                                  .L_tc_recycle_frame_loop_00b4:
 22518 00011036 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22519 0001103A 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22520 0001103F 49FFC9                  	dec r9
 22521 00011042 4D31C0                  	xor r8, r8
 22522 00011045 48FFCF                  	dec rdi
 22523 00011048 48FFCE                  	dec rsi
 22524 0001104B 4883FE00                	cmp rsi, 0
 22525 0001104F 75E5                    	jne .L_tc_recycle_frame_loop_00b4
 22526                                  .L_tc_recycle_frame_done_00b4:
 22527                                  ;this pop rbp in sot to the right place
 22528 00011051 4989C9                  	mov r9, rcx
 22529 00011054 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22530 0001105C 4C01CC                  	add rsp, r9
 22531 0001105F 5D                      	pop rbp
 22532 00011060 488B4D00                	mov rcx, qword [rbp]
 22533 00011064 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22534 00011068 FFE3                    	jmp rbx
 22535                                  
 22536 0001106A EB0A                            	jmp .L_if_end_005b
 22537                                  
 22538                                          	.L_if_else_005b:
 22539 0001106C 48B8-                   	mov rax,L_constants + 2
 22539 0001106E [0200000000000000] 
 22540                                  
 22541                                          	.L_if_end_005b:
 22542                                  
 22543 00011076 E929030000                      	jmp .L_if_end_0054
 22544                                  
 22545                                          	.L_if_else_0054:
 22546 0001107B 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22547 0001107F 50                      	push rax
 22548 00011080 6A01                    	push 1
 22549 00011082 488B0425[30000000]      	mov rax, qword [free_var_6]
 22550                                  	assert_closure(rax)
    42 0001108A 803805              <1>  cmp byte [%1], %2
    43 0001108D 0F85591E0000        <1>  jne L_error_incorrect_type
 22551 00011093 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22552 00011096 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22553                                  
 22554 00011099 483D[02000000]                  	cmp rax, sob_boolean_false
 22555                                  
 22556 0001109F 0F848B000000                    	je .L_if_else_0059
 22557 000110A5 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22558 000110A9 50                      	push rax
 22559 000110AA 6A01                    	push 1
 22560 000110AC 488B0425[30000000]      	mov rax, qword [free_var_6]
 22561                                  	assert_closure(rax)
    42 000110B4 803805              <1>  cmp byte [%1], %2
    43 000110B7 0F852F1E0000        <1>  jne L_error_incorrect_type
 22562 000110BD FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22563 000110C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22564                                  
 22565 000110C3 483D[02000000]                  	cmp rax, sob_boolean_false
 22566                                  
 22567 000110C9 7459                            	je .L_if_else_005a
 22568 000110CB 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22569 000110CF 50                      	push rax
 22570 000110D0 6A01                    	push 1
 22571 000110D2 488B0425[98000000]      	mov rax, qword [free_var_19]
 22572                                  	assert_closure(rax)
    42 000110DA 803805              <1>  cmp byte [%1], %2
    43 000110DD 0F85091E0000        <1>  jne L_error_incorrect_type
 22573 000110E3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22574 000110E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22575 000110E9 50                      	push rax
 22576 000110EA 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22577 000110EE 50                      	push rax
 22578 000110EF 6A01                    	push 1
 22579 000110F1 488B0425[98000000]      	mov rax, qword [free_var_19]
 22580                                  	assert_closure(rax)
    42 000110F9 803805              <1>  cmp byte [%1], %2
    43 000110FC 0F85EA1D0000        <1>  jne L_error_incorrect_type
 22581 00011102 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22582 00011105 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22583 00011108 50                      	push rax
 22584 00011109 6A02                    	push 2
 22585 0001110B 488B0425[50030000]      	mov rax, qword [free_var_106]
 22586                                  	assert_closure(rax)
    42 00011113 803805              <1>  cmp byte [%1], %2
    43 00011116 0F85D01D0000        <1>  jne L_error_incorrect_type
 22587 0001111C FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22588 0001111F FF5009                  	call SOB_CLOSURE_CODE(rax)
 22589                                  
 22590 00011122 EB0A                            	jmp .L_if_end_005a
 22591                                  
 22592                                          	.L_if_else_005a:
 22593 00011124 48B8-                   	mov rax,L_constants + 2
 22593 00011126 [0200000000000000] 
 22594                                  
 22595                                          	.L_if_end_005a:
 22596                                  
 22597 0001112E EB0A                            	jmp .L_if_end_0059
 22598                                  
 22599                                          	.L_if_else_0059:
 22600 00011130 48B8-                   	mov rax,L_constants + 2
 22600 00011132 [0200000000000000] 
 22601                                  
 22602                                          	.L_if_end_0059:
 22603                                  
 22604 0001113A 483D[02000000]                  	cmp rax, sob_boolean_false
 22605                                  
 22606 00011140 0F84AD000000                    	je .L_if_else_0055
 22607 00011146 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22608 0001114A 50                      	push rax
 22609 0001114B 6A01                    	push 1
 22610 0001114D 488B0425[48040000]      	mov rax, qword [free_var_137]
 22611                                  	assert_closure(rax)
    42 00011155 803805              <1>  cmp byte [%1], %2
    43 00011158 0F858E1D0000        <1>  jne L_error_incorrect_type
 22612 0001115E FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22613 00011161 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22614 00011164 50                      	push rax
 22615 00011165 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22616 00011169 50                      	push rax
 22617 0001116A 6A01                    	push 1
 22618 0001116C 488B0425[48040000]      	mov rax, qword [free_var_137]
 22619                                  	assert_closure(rax)
    42 00011174 803805              <1>  cmp byte [%1], %2
    43 00011177 0F856F1D0000        <1>  jne L_error_incorrect_type
 22620 0001117D FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22621 00011180 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22622 00011183 50                      	push rax
 22623 00011184 6A02                    	push 2
 22624 00011186 488B0425[80040000]      	mov rax, qword [free_var_144]
 22625                                  .L_applic_TC_00b3:
 22626 0001118E 803805                  	cmp byte [rax], T_closure
 22627 00011191 0F8516150000            	jne L_code_ptr_error
 22628 00011197 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22629 0001119B 53                      	push rbx
 22630 0001119C FF7508                  	push qword [rbp + 8]
 22631 0001119F FF7500                  	push qword [rbp]
 22632 000111A2 488B4D18                	mov rcx, [rbp + 3 * 8]
 22633 000111A6 488B542418              	mov rdx, [rsp + 3 * 8]
 22634 000111AB 488D7204                	lea rsi, [rdx + 4]
 22635 000111AF 4C8D4EFF                	lea r9, [rsi - 1]
 22636 000111B3 488D7903                	lea rdi, [rcx + 3]
 22637 000111B7 4D31C0                  	xor r8, r8
 22638                                  .L_tc_recycle_frame_loop_00b3:
 22639 000111BA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22640 000111BE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22641 000111C3 49FFC9                  	dec r9
 22642 000111C6 4D31C0                  	xor r8, r8
 22643 000111C9 48FFCF                  	dec rdi
 22644 000111CC 48FFCE                  	dec rsi
 22645 000111CF 4883FE00                	cmp rsi, 0
 22646 000111D3 75E5                    	jne .L_tc_recycle_frame_loop_00b3
 22647                                  .L_tc_recycle_frame_done_00b3:
 22648                                  ;this pop rbp in sot to the right place
 22649 000111D5 4989C9                  	mov r9, rcx
 22650 000111D8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22651 000111E0 4C01CC                  	add rsp, r9
 22652 000111E3 5D                      	pop rbp
 22653 000111E4 488B4D00                	mov rcx, qword [rbp]
 22654 000111E8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22655 000111EC FFE3                    	jmp rbx
 22656                                  
 22657 000111EE E9B1010000                      	jmp .L_if_end_0055
 22658                                  
 22659                                          	.L_if_else_0055:
 22660 000111F3 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22661 000111F7 50                      	push rax
 22662 000111F8 6A01                    	push 1
 22663 000111FA 488B0425[20000000]      	mov rax, qword [free_var_4]
 22664                                  	assert_closure(rax)
    42 00011202 803805              <1>  cmp byte [%1], %2
    43 00011205 0F85E11C0000        <1>  jne L_error_incorrect_type
 22665 0001120B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22666 0001120E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22667                                  
 22668 00011211 483D[02000000]                  	cmp rax, sob_boolean_false
 22669                                  
 22670 00011217 0F848B000000                    	je .L_if_else_0057
 22671 0001121D 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22672 00011221 50                      	push rax
 22673 00011222 6A01                    	push 1
 22674 00011224 488B0425[20000000]      	mov rax, qword [free_var_4]
 22675                                  	assert_closure(rax)
    42 0001122C 803805              <1>  cmp byte [%1], %2
    43 0001122F 0F85B71C0000        <1>  jne L_error_incorrect_type
 22676 00011235 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22677 00011238 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22678                                  
 22679 0001123B 483D[02000000]                  	cmp rax, sob_boolean_false
 22680                                  
 22681 00011241 7459                            	je .L_if_else_0058
 22682 00011243 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22683 00011247 50                      	push rax
 22684 00011248 6A01                    	push 1
 22685 0001124A 488B0425[90000000]      	mov rax, qword [free_var_18]
 22686                                  	assert_closure(rax)
    42 00011252 803805              <1>  cmp byte [%1], %2
    43 00011255 0F85911C0000        <1>  jne L_error_incorrect_type
 22687 0001125B FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22688 0001125E FF5009                  	call SOB_CLOSURE_CODE(rax)
 22689 00011261 50                      	push rax
 22690 00011262 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22691 00011266 50                      	push rax
 22692 00011267 6A01                    	push 1
 22693 00011269 488B0425[90000000]      	mov rax, qword [free_var_18]
 22694                                  	assert_closure(rax)
    42 00011271 803805              <1>  cmp byte [%1], %2
    43 00011274 0F85721C0000        <1>  jne L_error_incorrect_type
 22695 0001127A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22696 0001127D FF5009                  	call SOB_CLOSURE_CODE(rax)
 22697 00011280 50                      	push rax
 22698 00011281 6A02                    	push 2
 22699 00011283 488B0425[50030000]      	mov rax, qword [free_var_106]
 22700                                  	assert_closure(rax)
    42 0001128B 803805              <1>  cmp byte [%1], %2
    43 0001128E 0F85581C0000        <1>  jne L_error_incorrect_type
 22701 00011294 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22702 00011297 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22703                                  
 22704 0001129A EB0A                            	jmp .L_if_end_0058
 22705                                  
 22706                                          	.L_if_else_0058:
 22707 0001129C 48B8-                   	mov rax,L_constants + 2
 22707 0001129E [0200000000000000] 
 22708                                  
 22709                                          	.L_if_end_0058:
 22710                                  
 22711 000112A6 EB0A                            	jmp .L_if_end_0057
 22712                                  
 22713                                          	.L_if_else_0057:
 22714 000112A8 48B8-                   	mov rax,L_constants + 2
 22714 000112AA [0200000000000000] 
 22715                                  
 22716                                          	.L_if_end_0057:
 22717                                  
 22718 000112B2 483D[02000000]                  	cmp rax, sob_boolean_false
 22719                                  
 22720 000112B8 7476                            	je .L_if_else_0056
 22721 000112BA 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22722 000112BE 50                      	push rax
 22723 000112BF 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22724 000112C3 50                      	push rax
 22725 000112C4 6A02                    	push 2
 22726 000112C6 488B0425[F0030000]      	mov rax, qword [free_var_126]
 22727                                  .L_applic_TC_00b2:
 22728 000112CE 803805                  	cmp byte [rax], T_closure
 22729 000112D1 0F85D6130000            	jne L_code_ptr_error
 22730 000112D7 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22731 000112DB 53                      	push rbx
 22732 000112DC FF7508                  	push qword [rbp + 8]
 22733 000112DF FF7500                  	push qword [rbp]
 22734 000112E2 488B4D18                	mov rcx, [rbp + 3 * 8]
 22735 000112E6 488B542418              	mov rdx, [rsp + 3 * 8]
 22736 000112EB 488D7204                	lea rsi, [rdx + 4]
 22737 000112EF 4C8D4EFF                	lea r9, [rsi - 1]
 22738 000112F3 488D7903                	lea rdi, [rcx + 3]
 22739 000112F7 4D31C0                  	xor r8, r8
 22740                                  .L_tc_recycle_frame_loop_00b2:
 22741 000112FA 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22742 000112FE 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22743 00011303 49FFC9                  	dec r9
 22744 00011306 4D31C0                  	xor r8, r8
 22745 00011309 48FFCF                  	dec rdi
 22746 0001130C 48FFCE                  	dec rsi
 22747 0001130F 4883FE00                	cmp rsi, 0
 22748 00011313 75E5                    	jne .L_tc_recycle_frame_loop_00b2
 22749                                  .L_tc_recycle_frame_done_00b2:
 22750                                  ;this pop rbp in sot to the right place
 22751 00011315 4989C9                  	mov r9, rcx
 22752 00011318 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22753 00011320 4C01CC                  	add rsp, r9
 22754 00011323 5D                      	pop rbp
 22755 00011324 488B4D00                	mov rcx, qword [rbp]
 22756 00011328 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22757 0001132C FFE3                    	jmp rbx
 22758                                  
 22759 0001132E EB74                            	jmp .L_if_end_0056
 22760                                  
 22761                                          	.L_if_else_0056:
 22762 00011330 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22763 00011334 50                      	push rax
 22764 00011335 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22765 00011339 50                      	push rax
 22766 0001133A 6A02                    	push 2
 22767 0001133C 488B0425[B8010000]      	mov rax, qword [free_var_55]
 22768                                  .L_applic_TC_00b1:
 22769 00011344 803805                  	cmp byte [rax], T_closure
 22770 00011347 0F8560130000            	jne L_code_ptr_error
 22771 0001134D 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22772 00011351 53                      	push rbx
 22773 00011352 FF7508                  	push qword [rbp + 8]
 22774 00011355 FF7500                  	push qword [rbp]
 22775 00011358 488B4D18                	mov rcx, [rbp + 3 * 8]
 22776 0001135C 488B542418              	mov rdx, [rsp + 3 * 8]
 22777 00011361 488D7204                	lea rsi, [rdx + 4]
 22778 00011365 4C8D4EFF                	lea r9, [rsi - 1]
 22779 00011369 488D7903                	lea rdi, [rcx + 3]
 22780 0001136D 4D31C0                  	xor r8, r8
 22781                                  .L_tc_recycle_frame_loop_00b1:
 22782 00011370 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22783 00011374 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22784 00011379 49FFC9                  	dec r9
 22785 0001137C 4D31C0                  	xor r8, r8
 22786 0001137F 48FFCF                  	dec rdi
 22787 00011382 48FFCE                  	dec rsi
 22788 00011385 4883FE00                	cmp rsi, 0
 22789 00011389 75E5                    	jne .L_tc_recycle_frame_loop_00b1
 22790                                  .L_tc_recycle_frame_done_00b1:
 22791                                  ;this pop rbp in sot to the right place
 22792 0001138B 4989C9                  	mov r9, rcx
 22793 0001138E 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22794 00011396 4C01CC                  	add rsp, r9
 22795 00011399 5D                      	pop rbp
 22796 0001139A 488B4D00                	mov rcx, qword [rbp]
 22797 0001139E 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22798 000113A2 FFE3                    	jmp rbx
 22799                                  
 22800                                          	.L_if_end_0056:
 22801                                  
 22802                                          	.L_if_end_0055:
 22803                                  
 22804                                          	.L_if_end_0054:
 22805 000113A4 C9                      	leave
 22806 000113A5 C22000                  	ret 8 * (2 + 2)
 22807                                  .L_lambda_simple_end_009b:	; new closure is in rax
 22808 000113A8 48890425[80040000]      	mov qword [free_var_144], rax
 22809 000113B0 48B8-                   	mov rax, sob_void
 22809 000113B2 [0000000000000000] 
 22810                                  
 22811 000113BA 4889C7                  	mov rdi, rax
 22812 000113BD E847030000              	call print_sexpr_if_not_void
 22813                                  
 22814 000113C2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 22815 000113C7 E82C030000              	call malloc
 22816 000113CC 50                      	push rax
 22817 000113CD BF00000000              	mov rdi, 8 * 0	; new rib
 22818 000113D2 E821030000              	call malloc
 22819 000113D7 50                      	push rax
 22820 000113D8 BF08000000              	mov rdi, 8 * 1	; extended env
 22821 000113DD E816030000              	call malloc
 22822 000113E2 488B7D10                	mov rdi, ENV
 22823 000113E6 BE00000000              	mov rsi, 0
 22824 000113EB BA01000000              	mov rdx, 1
 22825                                  .L_lambda_simple_env_loop_009c:	; ext_env[i + 1] <-- env[i]
 22826 000113F0 4883FE00                	cmp rsi, 0
 22827 000113F4 7410                    	je .L_lambda_simple_env_end_009c
 22828 000113F6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 22829 000113FA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 22830 000113FE 48FFC6                  	inc rsi
 22831 00011401 48FFC2                  	inc rdx
 22832 00011404 EBEA                    	jmp .L_lambda_simple_env_loop_009c
 22833                                  .L_lambda_simple_env_end_009c:
 22834 00011406 5B                      	pop rbx
 22835 00011407 BE00000000              	mov rsi, 0
 22836                                  .L_lambda_simple_params_loop_009c:	; copy params
 22837 0001140C 4883FE00                	cmp rsi, 0
 22838 00011410 740E                    	je .L_lambda_simple_params_end_009c
 22839 00011412 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 22840 00011417 488914F3                	mov qword [rbx + 8 * rsi], rdx
 22841 0001141B 48FFC6                  	inc rsi
 22842 0001141E EBEC                    	jmp .L_lambda_simple_params_loop_009c
 22843                                  .L_lambda_simple_params_end_009c:
 22844 00011420 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 22845 00011423 4889C3                  	mov rbx, rax
 22846 00011426 58                      	pop rax
 22847 00011427 C60005                  	mov byte [rax], T_closure
 22848 0001142A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 22849 0001142E 48C74009[3B140100]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009c
 22850 00011436 E997010000              	jmp .L_lambda_simple_end_009c
 22851                                  .L_lambda_simple_code_009c:	; lambda-simple body
 22852 0001143B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 22853 00011441 740B                    	je .L_lambda_simple_arity_check_ok_009c
 22854 00011443 FF742410                	push qword [rsp + 8 * 2]
 22855 00011447 6A02                    	push 2
 22856 00011449 E963020000              	jmp L_error_incorrect_arity_simple
 22857                                  .L_lambda_simple_arity_check_ok_009c:
 22858 0001144E C8000000                	enter 0, 0
 22859 00011452 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22860 00011456 50                      	push rax
 22861 00011457 6A01                    	push 1
 22862 00011459 488B0425[00000000]      	mov rax, qword [free_var_0]
 22863                                  	assert_closure(rax)
    42 00011461 803805              <1>  cmp byte [%1], %2
    43 00011464 0F85821A0000        <1>  jne L_error_incorrect_type
 22864 0001146A FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22865 0001146D FF5009                  	call SOB_CLOSURE_CODE(rax)
 22866                                  
 22867 00011470 483D[02000000]                  	cmp rax, sob_boolean_false
 22868                                  
 22869 00011476 740F                            	je .L_if_else_005d
 22870 00011478 48B8-                   	mov rax,L_constants + 2
 22870 0001147A [0200000000000000] 
 22871                                  
 22872 00011482 E947010000                      	jmp .L_if_end_005d
 22873                                  
 22874                                          	.L_if_else_005d:
 22875 00011487 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22876 0001148B 50                      	push rax
 22877 0001148C 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22878 00011490 50                      	push rax
 22879 00011491 6A01                    	push 1
 22880 00011493 488B0425[C0010000]      	mov rax, qword [free_var_56]
 22881                                  	assert_closure(rax)
    42 0001149B 803805              <1>  cmp byte [%1], %2
    43 0001149E 0F85481A0000        <1>  jne L_error_incorrect_type
 22882 000114A4 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22883 000114A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22884 000114AA 50                      	push rax
 22885 000114AB 6A02                    	push 2
 22886 000114AD 488B0425[B8010000]      	mov rax, qword [free_var_55]
 22887                                  	assert_closure(rax)
    42 000114B5 803805              <1>  cmp byte [%1], %2
    43 000114B8 0F852E1A0000        <1>  jne L_error_incorrect_type
 22888 000114BE FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22889 000114C1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22890                                  
 22891 000114C4 483D[02000000]                  	cmp rax, sob_boolean_false
 22892                                  
 22893 000114CA 7474                            	je .L_if_else_005e
 22894 000114CC 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22895 000114D0 50                      	push rax
 22896 000114D1 6A01                    	push 1
 22897 000114D3 488B0425[80000000]      	mov rax, qword [free_var_16]
 22898                                  .L_applic_TC_00b6:
 22899 000114DB 803805                  	cmp byte [rax], T_closure
 22900 000114DE 0F85C9110000            	jne L_code_ptr_error
 22901 000114E4 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22902 000114E8 53                      	push rbx
 22903 000114E9 FF7508                  	push qword [rbp + 8]
 22904 000114EC FF7500                  	push qword [rbp]
 22905 000114EF 488B4D18                	mov rcx, [rbp + 3 * 8]
 22906 000114F3 488B542418              	mov rdx, [rsp + 3 * 8]
 22907 000114F8 488D7204                	lea rsi, [rdx + 4]
 22908 000114FC 4C8D4EFF                	lea r9, [rsi - 1]
 22909 00011500 488D7903                	lea rdi, [rcx + 3]
 22910 00011504 4D31C0                  	xor r8, r8
 22911                                  .L_tc_recycle_frame_loop_00b6:
 22912 00011507 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22913 0001150B 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22914 00011510 49FFC9                  	dec r9
 22915 00011513 4D31C0                  	xor r8, r8
 22916 00011516 48FFCF                  	dec rdi
 22917 00011519 48FFCE                  	dec rsi
 22918 0001151C 4883FE00                	cmp rsi, 0
 22919 00011520 75E5                    	jne .L_tc_recycle_frame_loop_00b6
 22920                                  .L_tc_recycle_frame_done_00b6:
 22921                                  ;this pop rbp in sot to the right place
 22922 00011522 4989C9                  	mov r9, rcx
 22923 00011525 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22924 0001152D 4C01CC                  	add rsp, r9
 22925 00011530 5D                      	pop rbp
 22926 00011531 488B4D00                	mov rcx, qword [rbp]
 22927 00011535 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22928 00011539 FFE3                    	jmp rbx
 22929                                  
 22930 0001153B E98E000000                      	jmp .L_if_end_005e
 22931                                  
 22932                                          	.L_if_else_005e:
 22933 00011540 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
 22934 00011544 50                      	push rax
 22935 00011545 6A01                    	push 1
 22936 00011547 488B0425[88000000]      	mov rax, qword [free_var_17]
 22937                                  	assert_closure(rax)
    42 0001154F 803805              <1>  cmp byte [%1], %2
    43 00011552 0F8594190000        <1>  jne L_error_incorrect_type
 22938 00011558 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22939 0001155B FF5009                  	call SOB_CLOSURE_CODE(rax)
 22940 0001155E 50                      	push rax
 22941 0001155F 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
 22942 00011563 50                      	push rax
 22943 00011564 6A02                    	push 2
 22944 00011566 488B0425[88040000]      	mov rax, qword [free_var_145]
 22945                                  .L_applic_TC_00b5:
 22946 0001156E 803805                  	cmp byte [rax], T_closure
 22947 00011571 0F8536110000            	jne L_code_ptr_error
 22948 00011577 488B5801                	mov rbx, SOB_CLOSURE_ENV(rax)
 22949 0001157B 53                      	push rbx
 22950 0001157C FF7508                  	push qword [rbp + 8]
 22951 0001157F FF7500                  	push qword [rbp]
 22952 00011582 488B4D18                	mov rcx, [rbp + 3 * 8]
 22953 00011586 488B542418              	mov rdx, [rsp + 3 * 8]
 22954 0001158B 488D7204                	lea rsi, [rdx + 4]
 22955 0001158F 4C8D4EFF                	lea r9, [rsi - 1]
 22956 00011593 488D7903                	lea rdi, [rcx + 3]
 22957 00011597 4D31C0                  	xor r8, r8
 22958                                  .L_tc_recycle_frame_loop_00b5:
 22959 0001159A 4E8B04CC                	mov r8, [rsp + (r9 * 8)]
 22960 0001159E 4C8944FD00              	mov [rbp + (rdi * 8)], r8
 22961 000115A3 49FFC9                  	dec r9
 22962 000115A6 4D31C0                  	xor r8, r8
 22963 000115A9 48FFCF                  	dec rdi
 22964 000115AC 48FFCE                  	dec rsi
 22965 000115AF 4883FE00                	cmp rsi, 0
 22966 000115B3 75E5                    	jne .L_tc_recycle_frame_loop_00b5
 22967                                  .L_tc_recycle_frame_done_00b5:
 22968                                  ;this pop rbp in sot to the right place
 22969 000115B5 4989C9                  	mov r9, rcx
 22970 000115B8 4E8D0CCD20000000        	lea r9, [8 * (r9 + 4)]
 22971 000115C0 4C01CC                  	add rsp, r9
 22972 000115C3 5D                      	pop rbp
 22973 000115C4 488B4D00                	mov rcx, qword [rbp]
 22974 000115C8 488B5809                	mov rbx, SOB_CLOSURE_CODE(rax)
 22975 000115CC FFE3                    	jmp rbx
 22976                                  
 22977                                          	.L_if_end_005e:
 22978                                  
 22979                                          	.L_if_end_005d:
 22980 000115CE C9                      	leave
 22981 000115CF C22000                  	ret 8 * (2 + 2)
 22982                                  .L_lambda_simple_end_009c:	; new closure is in rax
 22983 000115D2 48890425[88040000]      	mov qword [free_var_145], rax
 22984 000115DA 48B8-                   	mov rax, sob_void
 22984 000115DC [0000000000000000] 
 22985                                  
 22986 000115E4 4889C7                  	mov rdi, rax
 22987 000115E7 E81D010000              	call print_sexpr_if_not_void
 22988                                  
 22989 000115EC 48B8-                   	mov rax,L_constants + 601
 22989 000115EE [5902000000000000] 
 22990 000115F6 50                      	push rax
 22991 000115F7 488B0425[80000000]      	mov rax, qword [free_var_16]
 22992 000115FF 50                      	push rax
 22993 00011600 6A02                    	push 2
 22994 00011602 488B0425[E8000000]      	mov rax, qword [free_var_29]
 22995                                  	assert_closure(rax)
    42 0001160A 803805              <1>  cmp byte [%1], %2
    43 0001160D 0F85D9180000        <1>  jne L_error_incorrect_type
 22996 00011613 FF7001                  	push SOB_CLOSURE_ENV(rax) 
 22997 00011616 FF5009                  	call SOB_CLOSURE_CODE(rax)
 22998                                  
 22999 00011619 4889C7                  	mov rdi, rax
 23000 0001161C E8E8000000              	call print_sexpr_if_not_void
 23001                                  
 23002 00011621 48BF-                           mov rdi, fmt_memory_usage
 23002 00011623 [C902000000000000] 
 23003 0001162B 488B3425[50030000]              mov rsi, qword [top_of_memory]
 23004 00011633 4881EE[90040000]                sub rsi, memory
 23005 0001163A B800000000                      mov rax, 0
 23006                                  	ENTER
    33 0001163F C8000000            <1>  enter 0, 0
    34 00011643 4883E4F0            <1>  and rsp, ~15
 23007 00011647 E8(00000000)                    call printf
 23008                                  	LEAVE
    38 0001164C C9                  <1>  leave
 23009 0001164D C9                      	leave
 23010 0001164E C3                      	ret
 23011                                  
 23012                                  L_error_non_closure:
 23013 0001164F 488B3C25[00000000]              mov rdi, qword [stderr]
 23014 00011657 48BE-                           mov rsi, fmt_non_closure
 23014 00011659 [0003000000000000] 
 23015 00011661 B800000000                      mov rax, 0
 23016                                  	ENTER
    33 00011666 C8000000            <1>  enter 0, 0
    34 0001166A 4883E4F0            <1>  and rsp, ~15
 23017 0001166E E8(00000000)                    call fprintf
 23018                                  	LEAVE
    38 00011673 C9                  <1>  leave
 23019 00011674 48C7C0FEFFFFFF                  mov rax, -2
 23020 0001167B E8(00000000)                    call exit
 23021                                  
 23022                                  L_error_improper_list:
 23023 00011680 488B3C25[00000000]      	mov rdi, qword [stderr]
 23024 00011688 48BE-                   	mov rsi, fmt_error_improper_list
 23024 0001168A [2803000000000000] 
 23025 00011692 B800000000              	mov rax, 0
 23026                                  	ENTER
    33 00011697 C8000000            <1>  enter 0, 0
    34 0001169B 4883E4F0            <1>  and rsp, ~15
 23027 0001169F E8(00000000)            	call fprintf
 23028                                  	LEAVE
    38 000116A4 C9                  <1>  leave
 23029 000116A5 48C7C0F9FFFFFF          	mov rax, -7
 23030 000116AC E8(00000000)            	call exit
 23031                                  
 23032                                  L_error_incorrect_arity_simple:
 23033 000116B1 488B3C25[00000000]              mov rdi, qword [stderr]
 23034 000116B9 48BE-                           mov rsi, fmt_incorrect_arity_simple
 23034 000116BB [6A02000000000000] 
 23035 000116C3 EB12                            jmp L_error_incorrect_arity_common
 23036                                  L_error_incorrect_arity_opt:
 23037 000116C5 488B3C25[00000000]              mov rdi, qword [stderr]
 23038 000116CD 48BE-                           mov rsi, fmt_incorrect_arity_opt
 23038 000116CF [9502000000000000] 
 23039                                  L_error_incorrect_arity_common:
 23040 000116D7 5A                              pop rdx
 23041 000116D8 59                              pop rcx
 23042 000116D9 B800000000                      mov rax, 0
 23043                                  	ENTER
    33 000116DE C8000000            <1>  enter 0, 0
    34 000116E2 4883E4F0            <1>  and rsp, ~15
 23044 000116E6 E8(00000000)                    call fprintf
 23045                                  	LEAVE
    38 000116EB C9                  <1>  leave
 23046 000116EC 48C7C0FAFFFFFF                  mov rax, -6
 23047 000116F3 E8(00000000)                    call exit
 23048                                  
 23049                                  section .data
 23050                                  fmt_incorrect_arity_simple:
 23051 0000026A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 23051 00000273 74656420256C642061-
 23051 0000027C 7267756D656E74732C-
 23051 00000285 206275742067697665-
 23051 0000028E 6E20256C640A00     
 23052                                  fmt_incorrect_arity_opt:
 23053 00000295 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 23053 0000029E 746564206174206C65-
 23053 000002A7 61737420256C642061-
 23053 000002B0 7267756D656E74732C-
 23053 000002B9 206275742067697665-
 23053 000002C2 6E20256C640A00     
 23054                                  fmt_memory_usage:
 23055 000002C9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 23055 000002D2 6420256C6420627974-
 23055 000002DB 6573206F662064796E-
 23055 000002E4 616D6963616C6C792D-
 23055 000002ED 616C6C6F6361746564-
 23055 000002F6 206D656D6F72790A0A-
 23055 000002FF 00                 
 23056                                  fmt_non_closure:
 23057 00000300 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 23057 00000309 7074696E6720746F20-
 23057 00000312 6170706C792061206E-
 23057 0000031B 6F6E2D636C6F737572-
 23057 00000324 65210A00           
 23058                                  fmt_error_improper_list:
 23059 00000328 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 23059 00000331 7267756D656E742069-
 23059 0000033A 73206E6F7420612070-
 23059 00000343 726F706572206C6973-
 23059 0000034C 74210A00           
 23060                                  
 23061                                  section .bss
 23062                                  memory:
 23063 00000490 <res 40000000h>         	resb gbytes(1)
 23064                                  
 23065                                  section .data
 23066                                  top_of_memory:
 23067 00000350 [9004000000000000]              dq memory
 23068                                  
 23069                                  section .text
 23070                                  malloc:
 23071 000116F8 488B0425[50030000]              mov rax, qword [top_of_memory]
 23072 00011700 48013C25[50030000]              add qword [top_of_memory], rdi
 23073 00011708 C3                              ret
 23074                                          
 23075                                  print_sexpr_if_not_void:
 23076 00011709 4881FF[00000000]        	cmp rdi, sob_void
 23077 00011710 7501                    	jne print_sexpr
 23078 00011712 C3                      	ret
 23079                                  
 23080                                  section .data
 23081                                  fmt_void:
 23082 00000358 233C766F69643E00        	db `#<void>\0`
 23083                                  fmt_nil:
 23084 00000360 282900                  	db `()\0`
 23085                                  fmt_boolean_false:
 23086 00000363 236600                  	db `#f\0`
 23087                                  fmt_boolean_true:
 23088 00000366 237400                  	db `#t\0`
 23089                                  fmt_char_backslash:
 23090 00000369 235C5C00                	db `#\\\\\0`
 23091                                  fmt_char_dquote:
 23092 0000036D 235C2200                	db `#\\"\0`
 23093                                  fmt_char_simple:
 23094 00000371 235C256300              	db `#\\%c\0`
 23095                                  fmt_char_null:
 23096 00000376 235C6E756C00            	db `#\\nul\0`
 23097                                  fmt_char_bell:
 23098 0000037C 235C62656C6C00          	db `#\\bell\0`
 23099                                  fmt_char_backspace:
 23100 00000383 235C6261636B737061-     	db `#\\backspace\0`
 23100 0000038C 636500             
 23101                                  fmt_char_tab:
 23102 0000038F 235C74616200            	db `#\\tab\0`
 23103                                  fmt_char_newline:
 23104 00000395 235C6E65776C696E65-     	db `#\\newline\0`
 23104 0000039E 00                 
 23105                                  fmt_char_formfeed:
 23106 0000039F 235C7061676500          	db `#\\page\0`
 23107                                  fmt_char_return:
 23108 000003A6 235C72657475726E00      	db `#\\return\0`
 23109                                  fmt_char_escape:
 23110 000003AF 235C65736300            	db `#\\esc\0`
 23111                                  fmt_char_space:
 23112 000003B5 235C737061636500        	db `#\\space\0`
 23113                                  fmt_char_hex:
 23114 000003BD 235C782530325800        	db `#\\x%02X\0`
 23115                                  fmt_closure:
 23116 000003C5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 23116 000003CE 206174203078253038-
 23116 000003D7 5820656E763D307825-
 23116 000003E0 30385820636F64653D-
 23116 000003E9 3078253038583E00   
 23117                                  fmt_lparen:
 23118 000003F1 2800                    	db `(\0`
 23119                                  fmt_dotted_pair:
 23120 000003F3 202E2000                	db ` . \0`
 23121                                  fmt_rparen:
 23122 000003F7 2900                    	db `)\0`
 23123                                  fmt_space:
 23124 000003F9 2000                    	db ` \0`
 23125                                  fmt_empty_vector:
 23126 000003FB 23282900                	db `#()\0`
 23127                                  fmt_vector:
 23128 000003FF 232800                  	db `#(\0`
 23129                                  fmt_real:
 23130 00000402 256600                  	db `%f\0`
 23131                                  fmt_fraction:
 23132 00000405 256C642F256C6400        	db `%ld/%ld\0`
 23133                                  fmt_zero:
 23134 0000040D 3000                    	db `0\0`
 23135                                  fmt_int:
 23136 0000040F 256C6400                	db `%ld\0`
 23137                                  fmt_unknown_sexpr_error:
 23138 00000413 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
 23138 0000041C 6F723A20556E6B6E6F-
 23138 00000425 776E2074797065206F-
 23138 0000042E 662073657870722028-
 23138 00000437 3078253032582920   
 23139 0000043F 617420616464726573-     	db `at address 0x%08X\n\n\0`
 23139 00000448 73203078253038580A-
 23139 00000451 0A00               
 23140                                  fmt_dquote:
 23141 00000453 2200                    	db `\"\0`
 23142                                  fmt_string_char:
 23143 00000455 256300                          db `%c\0`
 23144                                  fmt_string_char_7:
 23145 00000458 5C6100                          db `\\a\0`
 23146                                  fmt_string_char_8:
 23147 0000045B 5C6200                          db `\\b\0`
 23148                                  fmt_string_char_9:
 23149 0000045E 5C7400                          db `\\t\0`
 23150                                  fmt_string_char_10:
 23151 00000461 5C6E00                          db `\\n\0`
 23152                                  fmt_string_char_11:
 23153 00000464 5C7600                          db `\\v\0`
 23154                                  fmt_string_char_12:
 23155 00000467 5C6600                          db `\\f\0`
 23156                                  fmt_string_char_13:
 23157 0000046A 5C7200                          db `\\r\0`
 23158                                  fmt_string_char_34:
 23159 0000046D 5C2200                          db `\\"\0`
 23160                                  fmt_string_char_92:
 23161 00000470 5C5C00                          db `\\\\\0`
 23162                                  fmt_string_char_hex:
 23163 00000473 5C7825583B00                    db `\\x%X;\0`
 23164                                  
 23165                                  section .text
 23166                                  
 23167                                  print_sexpr:
 23168                                  	ENTER
    33 00011713 C8000000            <1>  enter 0, 0
    34 00011717 4883E4F0            <1>  and rsp, ~15
 23169 0001171B 8A07                    	mov al, byte [rdi]
 23170 0001171D 3C00                    	cmp al, T_void
 23171 0001171F 744D                    	je .Lvoid
 23172 00011721 3C01                    	cmp al, T_nil
 23173 00011723 7458                    	je .Lnil
 23174 00011725 3C09                    	cmp al, T_boolean_false
 23175 00011727 7463                    	je .Lboolean_false
 23176 00011729 3C0A                    	cmp al, T_boolean_true
 23177 0001172B 746E                    	je .Lboolean_true
 23178 0001172D 3C02                    	cmp al, T_char
 23179 0001172F 7479                    	je .Lchar
 23180 00011731 3C04                    	cmp al, T_symbol
 23181 00011733 0F84BB010000            	je .Lsymbol
 23182 00011739 3C21                    	cmp al, T_pair
 23183 0001173B 0F84D6010000            	je .Lpair
 23184 00011741 3C22                    	cmp al, T_vector
 23185 00011743 0F849F020000            	je .Lvector
 23186 00011749 3C05                    	cmp al, T_closure
 23187 0001174B 0F8489010000            	je .Lclosure
 23188 00011751 3C12                    	cmp al, T_real
 23189 00011753 0F8430030000            	je .Lreal
 23190 00011759 3C11                    	cmp al, T_rational
 23191 0001175B 0F8456030000            	je .Lrational
 23192 00011761 3C03                    	cmp al, T_string
 23193 00011763 0F848F030000            	je .Lstring
 23194                                  
 23195 00011769 E9C7040000              	jmp .Lunknown_sexpr_type
 23196                                  
 23197                                  .Lvoid:
 23198 0001176E 48BF-                   	mov rdi, fmt_void
 23198 00011770 [5803000000000000] 
 23199 00011778 E9F5040000              	jmp .Lemit
 23200                                  
 23201                                  .Lnil:
 23202 0001177D 48BF-                   	mov rdi, fmt_nil
 23202 0001177F [6003000000000000] 
 23203 00011787 E9E6040000              	jmp .Lemit
 23204                                  
 23205                                  .Lboolean_false:
 23206 0001178C 48BF-                   	mov rdi, fmt_boolean_false
 23206 0001178E [6303000000000000] 
 23207 00011796 E9D7040000              	jmp .Lemit
 23208                                  
 23209                                  .Lboolean_true:
 23210 0001179B 48BF-                   	mov rdi, fmt_boolean_true
 23210 0001179D [6603000000000000] 
 23211 000117A5 E9C8040000              	jmp .Lemit
 23212                                  
 23213                                  .Lchar:
 23214 000117AA 8A4701                  	mov al, byte [rdi + 1]
 23215 000117AD 3C20                    	cmp al, ' '
 23216 000117AF 7E28                    	jle .Lchar_whitespace
 23217 000117B1 3C5C                    	cmp al, 92 		; backslash
 23218 000117B3 0F847C000000            	je .Lchar_backslash
 23219 000117B9 3C22                    	cmp al, '"'
 23220 000117BB 0F8483000000            	je .Lchar_dquote
 23221 000117C1 4825FF000000            	and rax, 255
 23222 000117C7 48BF-                   	mov rdi, fmt_char_simple
 23222 000117C9 [7103000000000000] 
 23223 000117D1 4889C6                  	mov rsi, rax
 23224 000117D4 E999040000              	jmp .Lemit
 23225                                  
 23226                                  .Lchar_whitespace:
 23227 000117D9 3C00                    	cmp al, 0
 23228 000117DB 7476                    	je .Lchar_null
 23229 000117DD 3C07                    	cmp al, 7
 23230 000117DF 0F847D000000            	je .Lchar_bell
 23231 000117E5 3C08                    	cmp al, 8
 23232 000117E7 0F8484000000            	je .Lchar_backspace
 23233 000117ED 3C09                    	cmp al, 9
 23234 000117EF 0F848B000000            	je .Lchar_tab
 23235 000117F5 3C0A                    	cmp al, 10
 23236 000117F7 0F8492000000            	je .Lchar_newline
 23237 000117FD 3C0C                    	cmp al, 12
 23238 000117FF 0F8499000000            	je .Lchar_formfeed
 23239 00011805 3C0D                    	cmp al, 13
 23240 00011807 0F84A0000000            	je .Lchar_return
 23241 0001180D 3C1B                    	cmp al, 27
 23242 0001180F 0F84A7000000            	je .Lchar_escape
 23243 00011815 4825FF000000            	and rax, 255
 23244 0001181B 3C20                    	cmp al, ' '
 23245 0001181D 0F84A8000000            	je .Lchar_space
 23246 00011823 48BF-                   	mov rdi, fmt_char_hex
 23246 00011825 [BD03000000000000] 
 23247 0001182D 4889C6                  	mov rsi, rax
 23248 00011830 E93D040000              	jmp .Lemit	
 23249                                  
 23250                                  .Lchar_backslash:
 23251 00011835 48BF-                   	mov rdi, fmt_char_backslash
 23251 00011837 [6903000000000000] 
 23252 0001183F E92E040000              	jmp .Lemit
 23253                                  
 23254                                  .Lchar_dquote:
 23255 00011844 48BF-                   	mov rdi, fmt_char_dquote
 23255 00011846 [6D03000000000000] 
 23256 0001184E E91F040000              	jmp .Lemit
 23257                                  
 23258                                  .Lchar_null:
 23259 00011853 48BF-                   	mov rdi, fmt_char_null
 23259 00011855 [7603000000000000] 
 23260 0001185D E910040000              	jmp .Lemit
 23261                                  
 23262                                  .Lchar_bell:
 23263 00011862 48BF-                   	mov rdi, fmt_char_bell
 23263 00011864 [7C03000000000000] 
 23264 0001186C E901040000              	jmp .Lemit
 23265                                  
 23266                                  .Lchar_backspace:
 23267 00011871 48BF-                   	mov rdi, fmt_char_backspace
 23267 00011873 [8303000000000000] 
 23268 0001187B E9F2030000              	jmp .Lemit
 23269                                  
 23270                                  .Lchar_tab:
 23271 00011880 48BF-                   	mov rdi, fmt_char_tab
 23271 00011882 [8F03000000000000] 
 23272 0001188A E9E3030000              	jmp .Lemit
 23273                                  
 23274                                  .Lchar_newline:
 23275 0001188F 48BF-                   	mov rdi, fmt_char_newline
 23275 00011891 [9503000000000000] 
 23276 00011899 E9D4030000              	jmp .Lemit
 23277                                  
 23278                                  .Lchar_formfeed:
 23279 0001189E 48BF-                   	mov rdi, fmt_char_formfeed
 23279 000118A0 [9F03000000000000] 
 23280 000118A8 E9C5030000              	jmp .Lemit
 23281                                  
 23282                                  .Lchar_return:
 23283 000118AD 48BF-                   	mov rdi, fmt_char_return
 23283 000118AF [A603000000000000] 
 23284 000118B7 E9B6030000              	jmp .Lemit
 23285                                  
 23286                                  .Lchar_escape:
 23287 000118BC 48BF-                   	mov rdi, fmt_char_escape
 23287 000118BE [AF03000000000000] 
 23288 000118C6 E9A7030000              	jmp .Lemit
 23289                                  
 23290                                  .Lchar_space:
 23291 000118CB 48BF-                   	mov rdi, fmt_char_space
 23291 000118CD [B503000000000000] 
 23292 000118D5 E998030000              	jmp .Lemit
 23293                                  
 23294                                  .Lclosure:
 23295 000118DA 4889FE                  	mov rsi, qword rdi
 23296 000118DD 48BF-                   	mov rdi, fmt_closure
 23296 000118DF [C503000000000000] 
 23297 000118E7 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 23298 000118EB 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 23299 000118EF E97E030000              	jmp .Lemit
 23300                                  
 23301                                  .Lsymbol:
 23302 000118F4 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 23303 000118F8 BE01000000              	mov rsi, 1		 ; size = 1 byte
 23304 000118FD 488B5701                	mov rdx, qword [rdi + 1] ; length
 23305 00011901 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 23306 00011905 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 23307 0001190D E8(00000000)            	call fwrite
 23308 00011912 E970030000              	jmp .Lend
 23309                                  	
 23310                                  .Lpair:
 23311 00011917 57                      	push rdi
 23312 00011918 48BF-                   	mov rdi, fmt_lparen
 23312 0001191A [F103000000000000] 
 23313 00011922 B800000000              	mov rax, 0
 23314                                          ENTER
    33 00011927 C8000000            <1>  enter 0, 0
    34 0001192B 4883E4F0            <1>  and rsp, ~15
 23315 0001192F E8(00000000)            	call printf
 23316                                          LEAVE
    38 00011934 C9                  <1>  leave
 23317 00011935 488B3C24                	mov rdi, qword [rsp] 	; pair
 23318 00011939 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 23319 0001193D E8D1FDFFFF              	call print_sexpr
 23320 00011942 5F                      	pop rdi 		; pair
 23321 00011943 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 23322                                  .Lcdr:
 23323 00011947 8A07                    	mov al, byte [rdi]
 23324 00011949 3C01                    	cmp al, T_nil
 23325 0001194B 7447                    	je .Lcdr_nil
 23326 0001194D 3C21                    	cmp al, T_pair
 23327 0001194F 7462                    	je .Lcdr_pair
 23328 00011951 57                      	push rdi
 23329 00011952 48BF-                   	mov rdi, fmt_dotted_pair
 23329 00011954 [F303000000000000] 
 23330 0001195C B800000000              	mov rax, 0
 23331                                  	ENTER
    33 00011961 C8000000            <1>  enter 0, 0
    34 00011965 4883E4F0            <1>  and rsp, ~15
 23332 00011969 E8(00000000)            	call printf
 23333                                  	LEAVE
    38 0001196E C9                  <1>  leave
 23334 0001196F 5F                      	pop rdi
 23335 00011970 E89EFDFFFF              	call print_sexpr
 23336 00011975 48BF-                   	mov rdi, fmt_rparen
 23336 00011977 [F703000000000000] 
 23337 0001197F B800000000              	mov rax, 0
 23338                                  	ENTER
    33 00011984 C8000000            <1>  enter 0, 0
    34 00011988 4883E4F0            <1>  and rsp, ~15
 23339 0001198C E8(00000000)            	call printf
 23340                                  	LEAVE
    38 00011991 C9                  <1>  leave
 23341                                  	LEAVE
    38 00011992 C9                  <1>  leave
 23342 00011993 C3                      	ret
 23343                                  
 23344                                  .Lcdr_nil:
 23345 00011994 48BF-                   	mov rdi, fmt_rparen
 23345 00011996 [F703000000000000] 
 23346 0001199E B800000000              	mov rax, 0
 23347                                  	ENTER
    33 000119A3 C8000000            <1>  enter 0, 0
    34 000119A7 4883E4F0            <1>  and rsp, ~15
 23348 000119AB E8(00000000)            	call printf
 23349                                  	LEAVE
    38 000119B0 C9                  <1>  leave
 23350                                  	LEAVE
    38 000119B1 C9                  <1>  leave
 23351 000119B2 C3                      	ret
 23352                                  
 23353                                  .Lcdr_pair:
 23354 000119B3 57                      	push rdi
 23355 000119B4 48BF-                   	mov rdi, fmt_space
 23355 000119B6 [F903000000000000] 
 23356 000119BE B800000000              	mov rax, 0
 23357                                  	ENTER
    33 000119C3 C8000000            <1>  enter 0, 0
    34 000119C7 4883E4F0            <1>  and rsp, ~15
 23358 000119CB E8(00000000)            	call printf
 23359                                  	LEAVE
    38 000119D0 C9                  <1>  leave
 23360 000119D1 488B3C24                	mov rdi, qword [rsp]
 23361 000119D5 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 23362 000119D9 E835FDFFFF              	call print_sexpr
 23363 000119DE 5F                      	pop rdi
 23364 000119DF 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 23365 000119E3 E95FFFFFFF              	jmp .Lcdr
 23366                                  
 23367                                  .Lvector:
 23368 000119E8 488B4701                	mov rax, qword [rdi + 1] ; length
 23369 000119EC 4883F800                	cmp rax, 0
 23370 000119F0 0F8484000000            	je .Lvector_empty
 23371 000119F6 57                      	push rdi
 23372 000119F7 48BF-                   	mov rdi, fmt_vector
 23372 000119F9 [FF03000000000000] 
 23373 00011A01 B800000000              	mov rax, 0
 23374                                  	ENTER
    33 00011A06 C8000000            <1>  enter 0, 0
    34 00011A0A 4883E4F0            <1>  and rsp, ~15
 23375 00011A0E E8(00000000)            	call printf
 23376                                  	LEAVE
    38 00011A13 C9                  <1>  leave
 23377 00011A14 488B3C24                	mov rdi, qword [rsp]
 23378 00011A18 FF7701                  	push qword [rdi + 1]
 23379 00011A1B 6A01                    	push 1
 23380 00011A1D 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 23381 00011A21 E8EDFCFFFF              	call print_sexpr
 23382                                  .Lvector_loop:
 23383                                  	; [rsp] index
 23384                                  	; [rsp + 8*1] limit
 23385                                  	; [rsp + 8*2] vector
 23386 00011A26 488B0424                	mov rax, qword [rsp]
 23387 00011A2A 483B442408              	cmp rax, qword [rsp + 8*1]
 23388 00011A2F 7436                    	je .Lvector_end
 23389 00011A31 48BF-                   	mov rdi, fmt_space
 23389 00011A33 [F903000000000000] 
 23390 00011A3B B800000000              	mov rax, 0
 23391                                  	ENTER
    33 00011A40 C8000000            <1>  enter 0, 0
    34 00011A44 4883E4F0            <1>  and rsp, ~15
 23392 00011A48 E8(00000000)            	call printf
 23393                                  	LEAVE
    38 00011A4D C9                  <1>  leave
 23394 00011A4E 488B0424                	mov rax, qword [rsp]
 23395 00011A52 488B5C2410              	mov rbx, qword [rsp + 8*2]
 23396 00011A57 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 23397 00011A5C E8B2FCFFFF              	call print_sexpr
 23398 00011A61 48FF0424                	inc qword [rsp]
 23399 00011A65 EBBF                    	jmp .Lvector_loop
 23400                                  
 23401                                  .Lvector_end:
 23402 00011A67 4883C418                	add rsp, 8*3
 23403 00011A6B 48BF-                   	mov rdi, fmt_rparen
 23403 00011A6D [F703000000000000] 
 23404 00011A75 E9F8010000              	jmp .Lemit	
 23405                                  
 23406                                  .Lvector_empty:
 23407 00011A7A 48BF-                   	mov rdi, fmt_empty_vector
 23407 00011A7C [FB03000000000000] 
 23408 00011A84 E9E9010000              	jmp .Lemit
 23409                                  
 23410                                  .Lreal:
 23411 00011A89 FF7701                  	push qword [rdi + 1]
 23412 00011A8C F20F100424              	movsd xmm0, qword [rsp]
 23413 00011A91 4883C408                	add rsp, 8*1
 23414 00011A95 48BF-                   	mov rdi, fmt_real
 23414 00011A97 [0204000000000000] 
 23415 00011A9F B801000000              	mov rax, 1
 23416                                  	ENTER
    33 00011AA4 C8000000            <1>  enter 0, 0
    34 00011AA8 4883E4F0            <1>  and rsp, ~15
 23417 00011AAC E8(00000000)            	call printf
 23418                                  	LEAVE
    38 00011AB1 C9                  <1>  leave
 23419 00011AB2 E9D0010000              	jmp .Lend
 23420                                  
 23421                                  .Lrational:
 23422 00011AB7 488B7701                	mov rsi, qword [rdi + 1]
 23423 00011ABB 488B5709                	mov rdx, qword [rdi + 1 + 8]
 23424 00011ABF 4883FE00                	cmp rsi, 0
 23425 00011AC3 7415                    	je .Lrat_zero
 23426 00011AC5 4883FA01                	cmp rdx, 1
 23427 00011AC9 741E                    	je .Lrat_int
 23428 00011ACB 48BF-                   	mov rdi, fmt_fraction
 23428 00011ACD [0504000000000000] 
 23429 00011AD5 E998010000              	jmp .Lemit
 23430                                  
 23431                                  .Lrat_zero:
 23432 00011ADA 48BF-                   	mov rdi, fmt_zero
 23432 00011ADC [0D04000000000000] 
 23433 00011AE4 E989010000              	jmp .Lemit
 23434                                  
 23435                                  .Lrat_int:
 23436 00011AE9 48BF-                   	mov rdi, fmt_int
 23436 00011AEB [0F04000000000000] 
 23437 00011AF3 E97A010000              	jmp .Lemit
 23438                                  
 23439                                  .Lstring:
 23440 00011AF8 488D4709                	lea rax, [rdi + 1 + 8]
 23441 00011AFC 50                      	push rax
 23442 00011AFD FF7701                  	push qword [rdi + 1]
 23443 00011B00 48BF-                   	mov rdi, fmt_dquote
 23443 00011B02 [5304000000000000] 
 23444 00011B0A B800000000              	mov rax, 0
 23445                                  	ENTER
    33 00011B0F C8000000            <1>  enter 0, 0
    34 00011B13 4883E4F0            <1>  and rsp, ~15
 23446 00011B17 E8(00000000)            	call printf
 23447                                  	LEAVE
    38 00011B1C C9                  <1>  leave
 23448                                  .Lstring_loop:
 23449                                  	; qword [rsp]: limit
 23450                                  	; qword [rsp + 8*1]: char *
 23451 00011B1D 48833C2400              	cmp qword [rsp], 0
 23452 00011B22 0F84FD000000            	je .Lstring_end
 23453 00011B28 488B442408              	mov rax, qword [rsp + 8*1]
 23454 00011B2D 8A00                    	mov al, byte [rax]
 23455 00011B2F 4825FF000000            	and rax, 255
 23456 00011B35 3C07                    	cmp al, 7
 23457 00011B37 7468                            je .Lstring_char_7
 23458 00011B39 3C08                            cmp al, 8
 23459 00011B3B 7470                            je .Lstring_char_8
 23460 00011B3D 3C09                            cmp al, 9
 23461 00011B3F 7478                            je .Lstring_char_9
 23462 00011B41 3C0A                            cmp al, 10
 23463 00011B43 0F847C000000                    je .Lstring_char_10
 23464 00011B49 3C0B                            cmp al, 11
 23465 00011B4B 0F8480000000                    je .Lstring_char_11
 23466 00011B51 3C0C                            cmp al, 12
 23467 00011B53 0F8484000000                    je .Lstring_char_12
 23468 00011B59 3C0D                            cmp al, 13
 23469 00011B5B 0F8488000000                    je .Lstring_char_13
 23470 00011B61 3C22                            cmp al, 34
 23471 00011B63 0F848C000000                    je .Lstring_char_34
 23472 00011B69 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 23474 00011B6B 3C20                            cmp al, ' '
 23475 00011B6D 0F8CA0000000                    jl .Lstring_char_hex
 23476 00011B73 48BF-                           mov rdi, fmt_string_char
 23476 00011B75 [5504000000000000] 
 23477 00011B7D 4889C6                          mov rsi, rax
 23478                                  .Lstring_char_emit:
 23479 00011B80 B800000000                      mov rax, 0
 23480                                          ENTER
    33 00011B85 C8000000            <1>  enter 0, 0
    34 00011B89 4883E4F0            <1>  and rsp, ~15
 23481 00011B8D E8(00000000)                    call printf
 23482                                          LEAVE
    38 00011B92 C9                  <1>  leave
 23483 00011B93 48FF0C24                        dec qword [rsp]
 23484 00011B97 48FF442408                      inc qword [rsp + 8*1]
 23485 00011B9C E97CFFFFFF                      jmp .Lstring_loop
 23486                                  
 23487                                  .Lstring_char_7:
 23488 00011BA1 48BF-                           mov rdi, fmt_string_char_7
 23488 00011BA3 [5804000000000000] 
 23489 00011BAB EBD3                            jmp .Lstring_char_emit
 23490                                  
 23491                                  .Lstring_char_8:
 23492 00011BAD 48BF-                           mov rdi, fmt_string_char_8
 23492 00011BAF [5B04000000000000] 
 23493 00011BB7 EBC7                            jmp .Lstring_char_emit
 23494                                          
 23495                                  .Lstring_char_9:
 23496 00011BB9 48BF-                           mov rdi, fmt_string_char_9
 23496 00011BBB [5E04000000000000] 
 23497 00011BC3 EBBB                            jmp .Lstring_char_emit
 23498                                  
 23499                                  .Lstring_char_10:
 23500 00011BC5 48BF-                           mov rdi, fmt_string_char_10
 23500 00011BC7 [6104000000000000] 
 23501 00011BCF EBAF                            jmp .Lstring_char_emit
 23502                                  
 23503                                  .Lstring_char_11:
 23504 00011BD1 48BF-                           mov rdi, fmt_string_char_11
 23504 00011BD3 [6404000000000000] 
 23505 00011BDB EBA3                            jmp .Lstring_char_emit
 23506                                  
 23507                                  .Lstring_char_12:
 23508 00011BDD 48BF-                           mov rdi, fmt_string_char_12
 23508 00011BDF [6704000000000000] 
 23509 00011BE7 EB97                            jmp .Lstring_char_emit
 23510                                  
 23511                                  .Lstring_char_13:
 23512 00011BE9 48BF-                           mov rdi, fmt_string_char_13
 23512 00011BEB [6A04000000000000] 
 23513 00011BF3 EB8B                            jmp .Lstring_char_emit
 23514                                  
 23515                                  .Lstring_char_34:
 23516 00011BF5 48BF-                           mov rdi, fmt_string_char_34
 23516 00011BF7 [6D04000000000000] 
 23517 00011BFF E97CFFFFFF                      jmp .Lstring_char_emit
 23518                                  
 23519                                  .Lstring_char_92:
 23520 00011C04 48BF-                           mov rdi, fmt_string_char_92
 23520 00011C06 [7004000000000000] 
 23521 00011C0E E96DFFFFFF                      jmp .Lstring_char_emit
 23522                                  
 23523                                  .Lstring_char_hex:
 23524 00011C13 48BF-                           mov rdi, fmt_string_char_hex
 23524 00011C15 [7304000000000000] 
 23525 00011C1D 4889C6                          mov rsi, rax
 23526 00011C20 E95BFFFFFF                      jmp .Lstring_char_emit        
 23527                                  
 23528                                  .Lstring_end:
 23529 00011C25 4883C410                	add rsp, 8 * 2
 23530 00011C29 48BF-                   	mov rdi, fmt_dquote
 23530 00011C2B [5304000000000000] 
 23531 00011C33 EB3D                    	jmp .Lemit
 23532                                  
 23533                                  .Lunknown_sexpr_type:
 23534 00011C35 48BE-                   	mov rsi, fmt_unknown_sexpr_error
 23534 00011C37 [1304000000000000] 
 23535 00011C3F 4825FF000000            	and rax, 255
 23536 00011C45 4889C2                  	mov rdx, rax
 23537 00011C48 4889F9                  	mov rcx, rdi
 23538 00011C4B 488B3C25[00000000]      	mov rdi, qword [stderr]
 23539 00011C53 B800000000              	mov rax, 0
 23540                                  	ENTER
    33 00011C58 C8000000            <1>  enter 0, 0
    34 00011C5C 4883E4F0            <1>  and rsp, ~15
 23541 00011C60 E8(00000000)            	call fprintf
 23542                                  	LEAVE
    38 00011C65 C9                  <1>  leave
 23543 00011C66 48C7C0FFFFFFFF          	mov rax, -1
 23544 00011C6D E8(00000000)            	call exit
 23545                                  
 23546                                  .Lemit:
 23547 00011C72 B800000000              	mov rax, 0
 23548                                  	ENTER
    33 00011C77 C8000000            <1>  enter 0, 0
    34 00011C7B 4883E4F0            <1>  and rsp, ~15
 23549 00011C7F E8(00000000)            	call printf
 23550                                  	LEAVE
    38 00011C84 C9                  <1>  leave
 23551 00011C85 EB00                    	jmp .Lend
 23552                                  
 23553                                  .Lend:
 23554                                  	LEAVE
    38 00011C87 C9                  <1>  leave
 23555 00011C88 C3                      	ret
 23556                                  
 23557                                  ;;; rdi: address of free variable
 23558                                  ;;; rsi: address of code-pointer
 23559                                  bind_primitive:
 23560                                          ENTER
    33 00011C89 C8000000            <1>  enter 0, 0
    34 00011C8D 4883E4F0            <1>  and rsp, ~15
 23561 00011C91 57                              push rdi
 23562 00011C92 BF11000000                      mov rdi, (1 + 8 + 8)
 23563 00011C97 E85CFAFFFF                      call malloc
 23564 00011C9C 5F                              pop rdi
 23565 00011C9D C60005                          mov byte [rax], T_closure
 23566 00011CA0 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 23567 00011CA8 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 23568 00011CAC 488907                          mov qword [rdi], rax
 23569                                          LEAVE
    38 00011CAF C9                  <1>  leave
 23570 00011CB0 C3                              ret
 23571                                  
 23572                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
 23573                                  L_code_ptr_bin_apply:
 23574 00011CB1 C8000000                        enter 0, 0
 23575                                          ;finding the list's length
 23576 00011CB5 4831C9                          xor rcx, rcx ;0
 23577 00011CB8 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
 23578                                          assert_pair(rax)
    42 00011CBC 803821              <1>  cmp byte [%1], %2
    43 00011CBF 0F8527120000        <1>  jne L_error_incorrect_type
 23579 00011CC5 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
 23580                                          my_loop1:
 23581 00011CC9 483D[01000000]                          cmp rax, sob_nil ;if nill
 23582 00011CCF 7417                                    je my_loop_end1 ;jmp end
 23583 00011CD1 48FFC1                                  inc rcx 
 23584 00011CD4 53                                      push rbx ;insrting val to stack
 23585                                                  assert_pair(rax)
    42 00011CD5 803821              <1>  cmp byte [%1], %2
    43 00011CD8 0F850E120000        <1>  jne L_error_incorrect_type
 23586 00011CDE 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
 23587 00011CE2 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
 23588 00011CE6 EBE1                                    jmp my_loop1
 23589                                          my_loop_end1:
 23590                                          
 23591                                          
 23592                                  
 23593                                          ;make values in the opposite order:
 23594                                          ;1.pushing all argument one more time in the right order
 23595 00011CE8 4889CB                          mov rbx, rcx ;count-up
 23596 00011CEB B900000000                      mov rcx, 0 
 23597 00011CF0 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
 23598                                          my_loop2:
 23599 00011CF3 4839D9                                  cmp rcx, rbx ; if rcx = n
 23600 00011CF6 740A                                    je my_loop_end2 ;then: jump to the end
 23601 00011CF8 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
 23602 00011CFC 50                                      push rax
 23603 00011CFD 48FFC1                                  inc rcx
 23604 00011D00 EBF1                                    jmp my_loop2
 23605                                          my_loop_end2:
 23606                                          
 23607                                          ;2.overwriting element above by element below but in correct order
 23608 00011D02 488D14DD30000000                lea rdx, [8 * (rbx + 6)] ;nubmer of *bytes* we need to skip
 23609 00011D0A 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
 23610 00011D0E 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
 23611 00011D12 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
 23612 00011D16 B900000000                      mov rcx, 0
 23613                                          my_loop3:
 23614 00011D1B 4839D9                                  cmp rcx, rbx ;if rcx = n
 23615 00011D1E 7417                                    je my_loop_end3 ;then: jump to the end
 23616 00011D20 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
 23617 00011D24 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
 23618 00011D28 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
 23619 00011D2B 4883C408                                add rsp, 8 ;pop arg we used
 23620 00011D2F 48FFC1                                  inc rcx 
 23621 00011D32 4831C0                                  xor rax, rax
 23622 00011D35 EBE4                                    jmp my_loop3
 23623                                          my_loop_end3:
 23624                                          
 23625 00011D37 4883F906                        cmp rcx, 6
 23626 00011D3B 7F11                            jg seven_or_more
 23627 00011D3D 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
 23628 00011D41 48F7DB                          neg rbx 
 23629 00011D44 4883C306                        add rbx, 6      ;sub 6 from num_of_args
 23630 00011D48 488D24DC                        lea rsp, [rsp + 8 * rbx] ; pop rest of old frame 
 23631 00011D4C EB05                            jmp continu
 23632                                          seven_or_more:
 23633 00011D4E 488D642430                      lea rsp, [rsp + 8 * 6] ; pop rest of 1st time pushed args
 23634                                          continu:
 23635 00011D53 51                              push rcx ;push number of arguments
 23636 00011D54 41FF7001                        push SOB_CLOSURE_ENV(r8) ; push lex-env
 23637 00011D58 57                              push rdi ; push old ret-add
 23638 00011D59 4889F5                          mov rbp, rsi ;rbp = old-rbp
 23639 00011D5C 41FF6009                        jmp SOB_CLOSURE_CODE(r8) ; fun to apply
 23640                                  	
 23641                                  L_code_ptr_is_null:
 23642                                          ENTER
    33 00011D60 C8000000            <1>  enter 0, 0
    34 00011D64 4883E4F0            <1>  and rsp, ~15
 23643 00011D68 48837D1801                      cmp COUNT, 1
 23644 00011D6D 0F85A5100000                    jne L_error_arg_count_1
 23645 00011D73 488B4520                        mov rax, PARAM(0)
 23646 00011D77 803801                          cmp byte [rax], T_nil
 23647 00011D7A 750C                            jne .L_false
 23648 00011D7C 48B8-                           mov rax, sob_boolean_true
 23648 00011D7E [0300000000000000] 
 23649 00011D86 EB0A                            jmp .L_end
 23650                                  .L_false:
 23651 00011D88 48B8-                           mov rax, sob_boolean_false
 23651 00011D8A [0200000000000000] 
 23652                                  .L_end:
 23653                                          LEAVE
    38 00011D92 C9                  <1>  leave
 23654 00011D93 C21800                          ret AND_KILL_FRAME(1)
 23655                                  
 23656                                  L_code_ptr_is_pair:
 23657                                          ENTER
    33 00011D96 C8000000            <1>  enter 0, 0
    34 00011D9A 4883E4F0            <1>  and rsp, ~15
 23658 00011D9E 48837D1801                      cmp COUNT, 1
 23659 00011DA3 0F856F100000                    jne L_error_arg_count_1
 23660 00011DA9 488B4520                        mov rax, PARAM(0)
 23661 00011DAD 803821                          cmp byte [rax], T_pair
 23662 00011DB0 750C                            jne .L_false
 23663 00011DB2 48B8-                           mov rax, sob_boolean_true
 23663 00011DB4 [0300000000000000] 
 23664 00011DBC EB0A                            jmp .L_end
 23665                                  .L_false:
 23666 00011DBE 48B8-                           mov rax, sob_boolean_false
 23666 00011DC0 [0200000000000000] 
 23667                                  .L_end:
 23668                                          LEAVE
    38 00011DC8 C9                  <1>  leave
 23669 00011DC9 C21800                          ret AND_KILL_FRAME(1)
 23670                                          
 23671                                  L_code_ptr_is_void:
 23672                                          ENTER
    33 00011DCC C8000000            <1>  enter 0, 0
    34 00011DD0 4883E4F0            <1>  and rsp, ~15
 23673 00011DD4 48837D1801                      cmp COUNT, 1
 23674 00011DD9 0F8539100000                    jne L_error_arg_count_1
 23675 00011DDF 488B4520                        mov rax, PARAM(0)
 23676 00011DE3 803800                          cmp byte [rax], T_void
 23677 00011DE6 750C                            jne .L_false
 23678 00011DE8 48B8-                           mov rax, sob_boolean_true
 23678 00011DEA [0300000000000000] 
 23679 00011DF2 EB0A                            jmp .L_end
 23680                                  .L_false:
 23681 00011DF4 48B8-                           mov rax, sob_boolean_false
 23681 00011DF6 [0200000000000000] 
 23682                                  .L_end:
 23683                                          LEAVE
    38 00011DFE C9                  <1>  leave
 23684 00011DFF C21800                          ret AND_KILL_FRAME(1)
 23685                                  
 23686                                  L_code_ptr_is_char:
 23687                                          ENTER
    33 00011E02 C8000000            <1>  enter 0, 0
    34 00011E06 4883E4F0            <1>  and rsp, ~15
 23688 00011E0A 48837D1801                      cmp COUNT, 1
 23689 00011E0F 0F8503100000                    jne L_error_arg_count_1
 23690 00011E15 488B4520                        mov rax, PARAM(0)
 23691 00011E19 803802                          cmp byte [rax], T_char
 23692 00011E1C 750C                            jne .L_false
 23693 00011E1E 48B8-                           mov rax, sob_boolean_true
 23693 00011E20 [0300000000000000] 
 23694 00011E28 EB0A                            jmp .L_end
 23695                                  .L_false:
 23696 00011E2A 48B8-                           mov rax, sob_boolean_false
 23696 00011E2C [0200000000000000] 
 23697                                  .L_end:
 23698                                          LEAVE
    38 00011E34 C9                  <1>  leave
 23699 00011E35 C21800                          ret AND_KILL_FRAME(1)
 23700                                  
 23701                                  L_code_ptr_is_string:
 23702                                          ENTER
    33 00011E38 C8000000            <1>  enter 0, 0
    34 00011E3C 4883E4F0            <1>  and rsp, ~15
 23703 00011E40 48837D1801                      cmp COUNT, 1
 23704 00011E45 0F85CD0F0000                    jne L_error_arg_count_1
 23705 00011E4B 488B4520                        mov rax, PARAM(0)
 23706 00011E4F 803803                          cmp byte [rax], T_string
 23707 00011E52 750C                            jne .L_false
 23708 00011E54 48B8-                           mov rax, sob_boolean_true
 23708 00011E56 [0300000000000000] 
 23709 00011E5E EB0A                            jmp .L_end
 23710                                  .L_false:
 23711 00011E60 48B8-                           mov rax, sob_boolean_false
 23711 00011E62 [0200000000000000] 
 23712                                  .L_end:
 23713                                          LEAVE
    38 00011E6A C9                  <1>  leave
 23714 00011E6B C21800                          ret AND_KILL_FRAME(1)
 23715                                  
 23716                                  L_code_ptr_is_symbol:
 23717                                          ENTER
    33 00011E6E C8000000            <1>  enter 0, 0
    34 00011E72 4883E4F0            <1>  and rsp, ~15
 23718 00011E76 48837D1801                      cmp COUNT, 1
 23719 00011E7B 0F85970F0000                    jne L_error_arg_count_1
 23720 00011E81 488B4520                        mov rax, PARAM(0)
 23721 00011E85 803804                          cmp byte [rax], T_symbol
 23722 00011E88 750C                            jne .L_false
 23723 00011E8A 48B8-                           mov rax, sob_boolean_true
 23723 00011E8C [0300000000000000] 
 23724 00011E94 EB0A                            jmp .L_end
 23725                                  .L_false:
 23726 00011E96 48B8-                           mov rax, sob_boolean_false
 23726 00011E98 [0200000000000000] 
 23727                                  .L_end:
 23728                                          LEAVE
    38 00011EA0 C9                  <1>  leave
 23729 00011EA1 C21800                          ret AND_KILL_FRAME(1)
 23730                                  
 23731                                  L_code_ptr_is_vector:
 23732                                          ENTER
    33 00011EA4 C8000000            <1>  enter 0, 0
    34 00011EA8 4883E4F0            <1>  and rsp, ~15
 23733 00011EAC 48837D1801                      cmp COUNT, 1
 23734 00011EB1 0F85610F0000                    jne L_error_arg_count_1
 23735 00011EB7 488B4520                        mov rax, PARAM(0)
 23736 00011EBB 803822                          cmp byte [rax], T_vector
 23737 00011EBE 750C                            jne .L_false
 23738 00011EC0 48B8-                           mov rax, sob_boolean_true
 23738 00011EC2 [0300000000000000] 
 23739 00011ECA EB0A                            jmp .L_end
 23740                                  .L_false:
 23741 00011ECC 48B8-                           mov rax, sob_boolean_false
 23741 00011ECE [0200000000000000] 
 23742                                  .L_end:
 23743                                          LEAVE
    38 00011ED6 C9                  <1>  leave
 23744 00011ED7 C21800                          ret AND_KILL_FRAME(1)
 23745                                  
 23746                                  L_code_ptr_is_closure:
 23747                                          ENTER
    33 00011EDA C8000000            <1>  enter 0, 0
    34 00011EDE 4883E4F0            <1>  and rsp, ~15
 23748 00011EE2 48837D1801                      cmp COUNT, 1
 23749 00011EE7 0F852B0F0000                    jne L_error_arg_count_1
 23750 00011EED 488B4520                        mov rax, PARAM(0)
 23751 00011EF1 803805                          cmp byte [rax], T_closure
 23752 00011EF4 750C                            jne .L_false
 23753 00011EF6 48B8-                           mov rax, sob_boolean_true
 23753 00011EF8 [0300000000000000] 
 23754 00011F00 EB0A                            jmp .L_end
 23755                                  .L_false:
 23756 00011F02 48B8-                           mov rax, sob_boolean_false
 23756 00011F04 [0200000000000000] 
 23757                                  .L_end:
 23758                                          LEAVE
    38 00011F0C C9                  <1>  leave
 23759 00011F0D C21800                          ret AND_KILL_FRAME(1)
 23760                                  
 23761                                  L_code_ptr_is_real:
 23762                                          ENTER
    33 00011F10 C8000000            <1>  enter 0, 0
    34 00011F14 4883E4F0            <1>  and rsp, ~15
 23763 00011F18 48837D1801                      cmp COUNT, 1
 23764 00011F1D 0F85F50E0000                    jne L_error_arg_count_1
 23765 00011F23 488B4520                        mov rax, PARAM(0)
 23766 00011F27 803812                          cmp byte [rax], T_real
 23767 00011F2A 750C                            jne .L_false
 23768 00011F2C 48B8-                           mov rax, sob_boolean_true
 23768 00011F2E [0300000000000000] 
 23769 00011F36 EB0A                            jmp .L_end
 23770                                  .L_false:
 23771 00011F38 48B8-                           mov rax, sob_boolean_false
 23771 00011F3A [0200000000000000] 
 23772                                  .L_end:
 23773                                          LEAVE
    38 00011F42 C9                  <1>  leave
 23774 00011F43 C21800                          ret AND_KILL_FRAME(1)
 23775                                  
 23776                                  L_code_ptr_is_rational:
 23777                                          ENTER
    33 00011F46 C8000000            <1>  enter 0, 0
    34 00011F4A 4883E4F0            <1>  and rsp, ~15
 23778 00011F4E 48837D1801                      cmp COUNT, 1
 23779 00011F53 0F85BF0E0000                    jne L_error_arg_count_1
 23780 00011F59 488B4520                        mov rax, PARAM(0)
 23781 00011F5D 803811                          cmp byte [rax], T_rational
 23782 00011F60 750C                            jne .L_false
 23783 00011F62 48B8-                           mov rax, sob_boolean_true
 23783 00011F64 [0300000000000000] 
 23784 00011F6C EB0A                            jmp .L_end
 23785                                  .L_false:
 23786 00011F6E 48B8-                           mov rax, sob_boolean_false
 23786 00011F70 [0200000000000000] 
 23787                                  .L_end:
 23788                                          LEAVE
    38 00011F78 C9                  <1>  leave
 23789 00011F79 C21800                          ret AND_KILL_FRAME(1)
 23790                                  
 23791                                  L_code_ptr_is_boolean:
 23792                                          ENTER
    33 00011F7C C8000000            <1>  enter 0, 0
    34 00011F80 4883E4F0            <1>  and rsp, ~15
 23793 00011F84 48837D1801                      cmp COUNT, 1
 23794 00011F89 0F85890E0000                    jne L_error_arg_count_1
 23795 00011F8F 488B4520                        mov rax, PARAM(0)
 23796 00011F93 8A18                            mov bl, byte [rax]
 23797 00011F95 80E308                          and bl, T_boolean
 23798 00011F98 740C                            je .L_false
 23799 00011F9A 48B8-                           mov rax, sob_boolean_true
 23799 00011F9C [0300000000000000] 
 23800 00011FA4 EB0A                            jmp .L_end
 23801                                  .L_false:
 23802 00011FA6 48B8-                           mov rax, sob_boolean_false
 23802 00011FA8 [0200000000000000] 
 23803                                  .L_end:
 23804                                          LEAVE
    38 00011FB0 C9                  <1>  leave
 23805 00011FB1 C21800                          ret AND_KILL_FRAME(1)
 23806                                          
 23807                                  L_code_ptr_is_number:
 23808                                          ENTER
    33 00011FB4 C8000000            <1>  enter 0, 0
    34 00011FB8 4883E4F0            <1>  and rsp, ~15
 23809 00011FBC 48837D1801                      cmp COUNT, 1
 23810 00011FC1 0F85510E0000                    jne L_error_arg_count_1
 23811 00011FC7 488B4520                        mov rax, PARAM(0)
 23812 00011FCB 8A18                            mov bl, byte [rax]
 23813 00011FCD 80E310                          and bl, T_number
 23814 00011FD0 740C                            je .L_false
 23815 00011FD2 48B8-                           mov rax, sob_boolean_true
 23815 00011FD4 [0300000000000000] 
 23816 00011FDC EB0A                            jmp .L_end
 23817                                  .L_false:
 23818 00011FDE 48B8-                           mov rax, sob_boolean_false
 23818 00011FE0 [0200000000000000] 
 23819                                  .L_end:
 23820                                          LEAVE
    38 00011FE8 C9                  <1>  leave
 23821 00011FE9 C21800                          ret AND_KILL_FRAME(1)
 23822                                          
 23823                                  L_code_ptr_is_collection:
 23824                                          ENTER
    33 00011FEC C8000000            <1>  enter 0, 0
    34 00011FF0 4883E4F0            <1>  and rsp, ~15
 23825 00011FF4 48837D1801                      cmp COUNT, 1
 23826 00011FF9 0F85190E0000                    jne L_error_arg_count_1
 23827 00011FFF 488B4520                        mov rax, PARAM(0)
 23828 00012003 8A18                            mov bl, byte [rax]
 23829 00012005 80E320                          and bl, T_collection
 23830 00012008 740C                            je .L_false
 23831 0001200A 48B8-                           mov rax, sob_boolean_true
 23831 0001200C [0300000000000000] 
 23832 00012014 EB0A                            jmp .L_end
 23833                                  .L_false:
 23834 00012016 48B8-                           mov rax, sob_boolean_false
 23834 00012018 [0200000000000000] 
 23835                                  .L_end:
 23836                                          LEAVE
    38 00012020 C9                  <1>  leave
 23837 00012021 C21800                          ret AND_KILL_FRAME(1)
 23838                                  
 23839                                  L_code_ptr_cons:
 23840                                          ENTER
    33 00012024 C8000000            <1>  enter 0, 0
    34 00012028 4883E4F0            <1>  and rsp, ~15
 23841 0001202C 48837D1802                      cmp COUNT, 2
 23842 00012031 0F85160E0000                    jne L_error_arg_count_2
 23843 00012037 BF11000000                      mov rdi, (1 + 8 + 8)
 23844 0001203C E8B7F6FFFF                      call malloc
 23845 00012041 C60021                          mov byte [rax], T_pair
 23846 00012044 488B5D20                        mov rbx, PARAM(0)
 23847 00012048 48895801                        mov SOB_PAIR_CAR(rax), rbx
 23848 0001204C 488B5D28                        mov rbx, PARAM(1)
 23849 00012050 48895809                        mov SOB_PAIR_CDR(rax), rbx
 23850                                          LEAVE
    38 00012054 C9                  <1>  leave
 23851 00012055 C22000                          ret AND_KILL_FRAME(2)
 23852                                  
 23853                                  L_code_ptr_display_sexpr:
 23854                                          ENTER
    33 00012058 C8000000            <1>  enter 0, 0
    34 0001205C 4883E4F0            <1>  and rsp, ~15
 23855 00012060 48837D1801                      cmp COUNT, 1
 23856 00012065 0F85AD0D0000                    jne L_error_arg_count_1
 23857 0001206B 488B7D20                        mov rdi, PARAM(0)
 23858 0001206F E89FF6FFFF                      call print_sexpr
 23859 00012074 48B8-                           mov rax, sob_void
 23859 00012076 [0000000000000000] 
 23860                                          LEAVE
    38 0001207E C9                  <1>  leave
 23861 0001207F C21800                          ret AND_KILL_FRAME(1)
 23862                                  
 23863                                  L_code_ptr_write_char:
 23864                                          ENTER
    33 00012082 C8000000            <1>  enter 0, 0
    34 00012086 4883E4F0            <1>  and rsp, ~15
 23865 0001208A 48837D1801                      cmp COUNT, 1
 23866 0001208F 0F85830D0000                    jne L_error_arg_count_1
 23867 00012095 488B4520                        mov rax, PARAM(0)
 23868                                          assert_char(rax)
    42 00012099 803802              <1>  cmp byte [%1], %2
    43 0001209C 0F854A0E0000        <1>  jne L_error_incorrect_type
 23869 000120A2 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 23870 000120A5 4825FF000000                    and rax, 255
 23871 000120AB 48BF-                           mov rdi, fmt_char
 23871 000120AD [7904000000000000] 
 23872 000120B5 4889C6                          mov rsi, rax
 23873 000120B8 B800000000                      mov rax, 0
 23874                                  	ENTER
    33 000120BD C8000000            <1>  enter 0, 0
    34 000120C1 4883E4F0            <1>  and rsp, ~15
 23875 000120C5 E8(00000000)                    call printf
 23876                                  	LEAVE
    38 000120CA C9                  <1>  leave
 23877 000120CB 48B8-                           mov rax, sob_void
 23877 000120CD [0000000000000000] 
 23878                                          LEAVE
    38 000120D5 C9                  <1>  leave
 23879 000120D6 C21800                          ret AND_KILL_FRAME(1)
 23880                                  
 23881                                  L_code_ptr_car:
 23882                                          ENTER
    33 000120D9 C8000000            <1>  enter 0, 0
    34 000120DD 4883E4F0            <1>  and rsp, ~15
 23883 000120E1 48837D1801                      cmp COUNT, 1
 23884 000120E6 0F852C0D0000                    jne L_error_arg_count_1
 23885 000120EC 488B4520                        mov rax, PARAM(0)
 23886                                          assert_pair(rax)
    42 000120F0 803821              <1>  cmp byte [%1], %2
    43 000120F3 0F85F30D0000        <1>  jne L_error_incorrect_type
 23887 000120F9 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 23888                                          LEAVE
    38 000120FD C9                  <1>  leave
 23889 000120FE C21800                          ret AND_KILL_FRAME(1)
 23890                                          
 23891                                  L_code_ptr_cdr:
 23892                                          ENTER
    33 00012101 C8000000            <1>  enter 0, 0
    34 00012105 4883E4F0            <1>  and rsp, ~15
 23893 00012109 48837D1801                      cmp COUNT, 1
 23894 0001210E 0F85040D0000                    jne L_error_arg_count_1
 23895 00012114 488B4520                        mov rax, PARAM(0)
 23896                                          assert_pair(rax)
    42 00012118 803821              <1>  cmp byte [%1], %2
    43 0001211B 0F85CB0D0000        <1>  jne L_error_incorrect_type
 23897 00012121 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 23898                                          LEAVE
    38 00012125 C9                  <1>  leave
 23899 00012126 C21800                          ret AND_KILL_FRAME(1)
 23900                                          
 23901                                  L_code_ptr_string_length:
 23902                                          ENTER
    33 00012129 C8000000            <1>  enter 0, 0
    34 0001212D 4883E4F0            <1>  and rsp, ~15
 23903 00012131 48837D1801                      cmp COUNT, 1
 23904 00012136 0F85DC0C0000                    jne L_error_arg_count_1
 23905 0001213C 488B4520                        mov rax, PARAM(0)
 23906                                          assert_string(rax)
    42 00012140 803803              <1>  cmp byte [%1], %2
    43 00012143 0F85A30D0000        <1>  jne L_error_incorrect_type
 23907 00012149 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 23908 0001214D E83A0C0000                      call make_integer
 23909                                          LEAVE
    38 00012152 C9                  <1>  leave
 23910 00012153 C21800                          ret AND_KILL_FRAME(1)
 23911                                  
 23912                                  L_code_ptr_vector_length:
 23913                                          ENTER
    33 00012156 C8000000            <1>  enter 0, 0
    34 0001215A 4883E4F0            <1>  and rsp, ~15
 23914 0001215E 48837D1801                      cmp COUNT, 1
 23915 00012163 0F85AF0C0000                    jne L_error_arg_count_1
 23916 00012169 488B4520                        mov rax, PARAM(0)
 23917                                          assert_vector(rax)
    42 0001216D 803822              <1>  cmp byte [%1], %2
    43 00012170 0F85760D0000        <1>  jne L_error_incorrect_type
 23918 00012176 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 23919 0001217A E80D0C0000                      call make_integer
 23920                                          LEAVE
    38 0001217F C9                  <1>  leave
 23921 00012180 C21800                          ret AND_KILL_FRAME(1)
 23922                                  
 23923                                  L_code_ptr_real_to_integer:
 23924                                          ENTER
    33 00012183 C8000000            <1>  enter 0, 0
    34 00012187 4883E4F0            <1>  and rsp, ~15
 23925 0001218B 48837D1801                      cmp COUNT, 1
 23926 00012190 0F85820C0000                    jne L_error_arg_count_1
 23927 00012196 488B5D20                        mov rbx, PARAM(0)
 23928                                          assert_real(rbx)
    42 0001219A 803B12              <1>  cmp byte [%1], %2
    43 0001219D 0F85490D0000        <1>  jne L_error_incorrect_type
 23929 000121A3 F20F104301                      movsd xmm0, qword [rbx + 1]
 23930 000121A8 F2480F2CF8                      cvttsd2si rdi, xmm0
 23931 000121AD E8DA0B0000                      call make_integer
 23932                                          LEAVE
    38 000121B2 C9                  <1>  leave
 23933 000121B3 C21800                          ret AND_KILL_FRAME(1)
 23934                                  
 23935                                  L_code_ptr_exit:
 23936                                          ENTER
    33 000121B6 C8000000            <1>  enter 0, 0
    34 000121BA 4883E4F0            <1>  and rsp, ~15
 23937 000121BE 48837D1800                      cmp COUNT, 0
 23938 000121C3 0F851A0C0000                    jne L_error_arg_count_0
 23939 000121C9 B800000000                      mov rax, 0
 23940 000121CE E8(00000000)                    call exit
 23941                                  
 23942                                  L_code_ptr_integer_to_real:
 23943                                          ENTER
    33 000121D3 C8000000            <1>  enter 0, 0
    34 000121D7 4883E4F0            <1>  and rsp, ~15
 23944 000121DB 48837D1801                      cmp COUNT, 1
 23945 000121E0 0F85320C0000                    jne L_error_arg_count_1
 23946 000121E6 488B4520                        mov rax, PARAM(0)
 23947                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000121EA 803811              <2>  cmp byte [%1], %2
    43 000121ED 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000121F3 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000121F8 0F85EE0C0000        <1>  jne L_error_incorrect_type
 23948 000121FE FF7001                          push qword [rax + 1]
 23949 00012201 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 23950 00012207 E8640B0000                      call make_real
 23951                                          LEAVE
    38 0001220C C9                  <1>  leave
 23952 0001220D C21800                          ret AND_KILL_FRAME(1)
 23953                                  
 23954                                  L_code_ptr_rational_to_real:
 23955                                          ENTER
    33 00012210 C8000000            <1>  enter 0, 0
    34 00012214 4883E4F0            <1>  and rsp, ~15
 23956 00012218 48837D1801                      cmp COUNT, 1
 23957 0001221D 0F85F50B0000                    jne L_error_arg_count_1
 23958 00012223 488B4520                        mov rax, PARAM(0)
 23959                                          assert_rational(rax)
    42 00012227 803811              <1>  cmp byte [%1], %2
    43 0001222A 0F85BC0C0000        <1>  jne L_error_incorrect_type
 23960 00012230 FF7001                          push qword [rax + 1]
 23961 00012233 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 23962 00012239 FF7009                          push qword [rax + 1 + 8]
 23963 0001223C F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 23964 00012242 F20F5EC1                        divsd xmm0, xmm1
 23965 00012246 E8250B0000                      call make_real
 23966                                          LEAVE
    38 0001224B C9                  <1>  leave
 23967 0001224C C21800                          ret AND_KILL_FRAME(1)
 23968                                  
 23969                                  L_code_ptr_char_to_integer:
 23970                                          ENTER
    33 0001224F C8000000            <1>  enter 0, 0
    34 00012253 4883E4F0            <1>  and rsp, ~15
 23971 00012257 48837D1801                      cmp COUNT, 1
 23972 0001225C 0F85B60B0000                    jne L_error_arg_count_1
 23973 00012262 488B4520                        mov rax, PARAM(0)
 23974                                          assert_char(rax)
    42 00012266 803802              <1>  cmp byte [%1], %2
    43 00012269 0F857D0C0000        <1>  jne L_error_incorrect_type
 23975 0001226F 8A4001                          mov al, byte [rax + 1]
 23976 00012272 4825FF000000                    and rax, 255
 23977 00012278 4889C7                          mov rdi, rax
 23978 0001227B E80C0B0000                      call make_integer
 23979                                          LEAVE
    38 00012280 C9                  <1>  leave
 23980 00012281 C21800                          ret AND_KILL_FRAME(1)
 23981                                  
 23982                                  L_code_ptr_integer_to_char:
 23983                                          ENTER
    33 00012284 C8000000            <1>  enter 0, 0
    34 00012288 4883E4F0            <1>  and rsp, ~15
 23984 0001228C 48837D1801                      cmp COUNT, 1
 23985 00012291 0F85810B0000                    jne L_error_arg_count_1
 23986 00012297 488B4520                        mov rax, PARAM(0)
 23987                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0001229B 803811              <2>  cmp byte [%1], %2
    43 0001229E 0F85480C0000        <2>  jne L_error_incorrect_type
    48 000122A4 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000122A9 0F853D0C0000        <1>  jne L_error_incorrect_type
 23988 000122AF 488B5801                        mov rbx, qword [rax + 1]
 23989 000122B3 4883FB00                        cmp rbx, 0
 23990 000122B7 0F8EF50A0000                    jle L_error_integer_range
 23991 000122BD 4881FB00010000                  cmp rbx, 256
 23992 000122C4 0F8DE80A0000                    jge L_error_integer_range
 23993 000122CA BF02000000                      mov rdi, (1 + 1)
 23994 000122CF E824F4FFFF                      call malloc
 23995 000122D4 C60002                          mov byte [rax], T_char
 23996 000122D7 885801                          mov byte [rax + 1], bl
 23997                                          LEAVE
    38 000122DA C9                  <1>  leave
 23998 000122DB C21800                          ret AND_KILL_FRAME(1)
 23999                                  
 24000                                  L_code_ptr_trng:
 24001                                          ENTER
    33 000122DE C8000000            <1>  enter 0, 0
    34 000122E2 4883E4F0            <1>  and rsp, ~15
 24002 000122E6 48837D1800                      cmp COUNT, 0
 24003 000122EB 0F85F20A0000                    jne L_error_arg_count_0
 24004 000122F1 480FC7F7                        rdrand rdi
 24005 000122F5 48D1EF                          shr rdi, 1
 24006 000122F8 E88F0A0000                      call make_integer
 24007                                          LEAVE
    38 000122FD C9                  <1>  leave
 24008 000122FE C21000                          ret AND_KILL_FRAME(0)
 24009                                  
 24010                                  L_code_ptr_is_zero:
 24011                                          ENTER
    33 00012301 C8000000            <1>  enter 0, 0
    34 00012305 4883E4F0            <1>  and rsp, ~15
 24012 00012309 48837D1801                      cmp COUNT, 1
 24013 0001230E 0F85040B0000                    jne L_error_arg_count_1
 24014 00012314 488B4520                        mov rax, PARAM(0)
 24015 00012318 803811                          cmp byte [rax], T_rational
 24016 0001231B 740A                            je .L_rational
 24017 0001231D 803812                          cmp byte [rax], T_real
 24018 00012320 740E                            je .L_real
 24019 00012322 E9C50B0000                      jmp L_error_incorrect_type
 24020                                  .L_rational:
 24021 00012327 4883780100                      cmp qword [rax + 1], 0
 24022 0001232C 7420                            je .L_zero
 24023 0001232E EB12                            jmp .L_not_zero
 24024                                  .L_real:
 24025 00012330 660FEFC0                        pxor xmm0, xmm0
 24026 00012334 FF7001                          push qword [rax + 1]
 24027 00012337 F20F100C24                      movsd xmm1, qword [rsp]
 24028 0001233C 660F2EC1                        ucomisd xmm0, xmm1
 24029 00012340 740C                            je .L_zero
 24030                                  .L_not_zero:
 24031 00012342 48B8-                           mov rax, sob_boolean_false
 24031 00012344 [0200000000000000] 
 24032 0001234C EB0A                            jmp .L_end
 24033                                  .L_zero:
 24034 0001234E 48B8-                           mov rax, sob_boolean_true
 24034 00012350 [0300000000000000] 
 24035                                  .L_end:
 24036                                          LEAVE
    38 00012358 C9                  <1>  leave
 24037 00012359 C21800                          ret AND_KILL_FRAME(1)
 24038                                  
 24039                                  L_code_ptr_is_integer:
 24040                                          ENTER
    33 0001235C C8000000            <1>  enter 0, 0
    34 00012360 4883E4F0            <1>  and rsp, ~15
 24041 00012364 48837D1801                      cmp COUNT, 1
 24042 00012369 0F85A90A0000                    jne L_error_arg_count_1
 24043 0001236F 488B4520                        mov rax, PARAM(0)
 24044 00012373 803811                          cmp byte [rax], T_rational
 24045 00012376 7513                            jne .L_false
 24046 00012378 4883780901                      cmp qword [rax + 1 + 8], 1
 24047 0001237D 750C                            jne .L_false
 24048 0001237F 48B8-                           mov rax, sob_boolean_true
 24048 00012381 [0300000000000000] 
 24049 00012389 EB0A                            jmp .L_exit
 24050                                  .L_false:
 24051 0001238B 48B8-                           mov rax, sob_boolean_false
 24051 0001238D [0200000000000000] 
 24052                                  .L_exit:
 24053                                          LEAVE
    38 00012395 C9                  <1>  leave
 24054 00012396 C21800                          ret AND_KILL_FRAME(1)
 24055                                  
 24056                                  L_code_ptr_raw_bin_add_rr:
 24057                                          ENTER
    33 00012399 C8000000            <1>  enter 0, 0
    34 0001239D 4883E4F0            <1>  and rsp, ~15
 24058 000123A1 48837D1802                      cmp COUNT, 2
 24059 000123A6 0F85A10A0000                    jne L_error_arg_count_2
 24060 000123AC 488B5D20                        mov rbx, PARAM(0)
 24061                                          assert_real(rbx)
    42 000123B0 803B12              <1>  cmp byte [%1], %2
    43 000123B3 0F85330B0000        <1>  jne L_error_incorrect_type
 24062 000123B9 488B4D28                        mov rcx, PARAM(1)
 24063                                          assert_real(rcx)
    42 000123BD 803912              <1>  cmp byte [%1], %2
    43 000123C0 0F85260B0000        <1>  jne L_error_incorrect_type
 24064 000123C6 F20F104301                      movsd xmm0, qword [rbx + 1]
 24065 000123CB F20F104901                      movsd xmm1, qword [rcx + 1]
 24066 000123D0 F20F58C1                        addsd xmm0, xmm1
 24067 000123D4 E897090000                      call make_real
 24068                                          LEAVE
    38 000123D9 C9                  <1>  leave
 24069 000123DA C22000                          ret AND_KILL_FRAME(2)
 24070                                  
 24071                                  L_code_ptr_raw_bin_sub_rr:
 24072                                          ENTER
    33 000123DD C8000000            <1>  enter 0, 0
    34 000123E1 4883E4F0            <1>  and rsp, ~15
 24073 000123E5 48837D1802                      cmp COUNT, 2
 24074 000123EA 0F855D0A0000                    jne L_error_arg_count_2
 24075 000123F0 488B5D20                        mov rbx, PARAM(0)
 24076                                          assert_real(rbx)
    42 000123F4 803B12              <1>  cmp byte [%1], %2
    43 000123F7 0F85EF0A0000        <1>  jne L_error_incorrect_type
 24077 000123FD 488B4D28                        mov rcx, PARAM(1)
 24078                                          assert_real(rcx)
    42 00012401 803912              <1>  cmp byte [%1], %2
    43 00012404 0F85E20A0000        <1>  jne L_error_incorrect_type
 24079 0001240A F20F104301                      movsd xmm0, qword [rbx + 1]
 24080 0001240F F20F104901                      movsd xmm1, qword [rcx + 1]
 24081 00012414 F20F5CC1                        subsd xmm0, xmm1
 24082 00012418 E853090000                      call make_real
 24083                                          LEAVE
    38 0001241D C9                  <1>  leave
 24084 0001241E C22000                          ret AND_KILL_FRAME(2)
 24085                                  
 24086                                  L_code_ptr_raw_bin_mul_rr:
 24087                                          ENTER
    33 00012421 C8000000            <1>  enter 0, 0
    34 00012425 4883E4F0            <1>  and rsp, ~15
 24088 00012429 48837D1802                      cmp COUNT, 2
 24089 0001242E 0F85190A0000                    jne L_error_arg_count_2
 24090 00012434 488B5D20                        mov rbx, PARAM(0)
 24091                                          assert_real(rbx)
    42 00012438 803B12              <1>  cmp byte [%1], %2
    43 0001243B 0F85AB0A0000        <1>  jne L_error_incorrect_type
 24092 00012441 488B4D28                        mov rcx, PARAM(1)
 24093                                          assert_real(rcx)
    42 00012445 803912              <1>  cmp byte [%1], %2
    43 00012448 0F859E0A0000        <1>  jne L_error_incorrect_type
 24094 0001244E F20F104301                      movsd xmm0, qword [rbx + 1]
 24095 00012453 F20F104901                      movsd xmm1, qword [rcx + 1]
 24096 00012458 F20F59C1                        mulsd xmm0, xmm1
 24097 0001245C E80F090000                      call make_real
 24098                                          LEAVE
    38 00012461 C9                  <1>  leave
 24099 00012462 C22000                          ret AND_KILL_FRAME(2)
 24100                                  
 24101                                  L_code_ptr_raw_bin_div_rr:
 24102                                          ENTER
    33 00012465 C8000000            <1>  enter 0, 0
    34 00012469 4883E4F0            <1>  and rsp, ~15
 24103 0001246D 48837D1802                      cmp COUNT, 2
 24104 00012472 0F85D5090000                    jne L_error_arg_count_2
 24105 00012478 488B5D20                        mov rbx, PARAM(0)
 24106                                          assert_real(rbx)
    42 0001247C 803B12              <1>  cmp byte [%1], %2
    43 0001247F 0F85670A0000        <1>  jne L_error_incorrect_type
 24107 00012485 488B4D28                        mov rcx, PARAM(1)
 24108                                          assert_real(rcx)
    42 00012489 803912              <1>  cmp byte [%1], %2
    43 0001248C 0F855A0A0000        <1>  jne L_error_incorrect_type
 24109 00012492 F20F104301                      movsd xmm0, qword [rbx + 1]
 24110 00012497 F20F104901                      movsd xmm1, qword [rcx + 1]
 24111 0001249C 660FEFD2                        pxor xmm2, xmm2
 24112 000124A0 660F2ECA                        ucomisd xmm1, xmm2
 24113 000124A4 0F84730A0000                    je L_error_division_by_zero
 24114 000124AA F20F5EC1                        divsd xmm0, xmm1
 24115 000124AE E8BD080000                      call make_real
 24116                                          LEAVE
    38 000124B3 C9                  <1>  leave
 24117 000124B4 C22000                          ret AND_KILL_FRAME(2)
 24118                                  
 24119                                  L_code_ptr_raw_bin_add_qq:
 24120                                          ENTER
    33 000124B7 C8000000            <1>  enter 0, 0
    34 000124BB 4883E4F0            <1>  and rsp, ~15
 24121 000124BF 48837D1802                      cmp COUNT, 2
 24122 000124C4 0F8583090000                    jne L_error_arg_count_2
 24123 000124CA 4C8B4520                        mov r8, PARAM(0)
 24124                                          assert_rational(r8)
    42 000124CE 41803811            <1>  cmp byte [%1], %2
    43 000124D2 0F85140A0000        <1>  jne L_error_incorrect_type
 24125 000124D8 4C8B4D28                        mov r9, PARAM(1)
 24126                                          assert_rational(r9)
    42 000124DC 41803911            <1>  cmp byte [%1], %2
    43 000124E0 0F85060A0000        <1>  jne L_error_incorrect_type
 24127 000124E6 498B4001                        mov rax, qword [r8 + 1] ; num1
 24128 000124EA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24129 000124EE 4899                            cqo
 24130 000124F0 48F7EB                          imul rbx
 24131 000124F3 4889C6                          mov rsi, rax
 24132 000124F6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24133 000124FA 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 24134 000124FE 4899                            cqo
 24135 00012500 48F7EB                          imul rbx
 24136 00012503 4801C6                          add rsi, rax
 24137 00012506 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24138 0001250A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24139 0001250E 4899                            cqo
 24140 00012510 48F7EB                          imul rbx
 24141 00012513 4889C7                          mov rdi, rax
 24142 00012516 E827010000                      call normalize_rational
 24143                                          LEAVE
    38 0001251B C9                  <1>  leave
 24144 0001251C C22000                          ret AND_KILL_FRAME(2)
 24145                                  
 24146                                  L_code_ptr_raw_bin_sub_qq:
 24147                                          ENTER
    33 0001251F C8000000            <1>  enter 0, 0
    34 00012523 4883E4F0            <1>  and rsp, ~15
 24148 00012527 48837D1802                      cmp COUNT, 2
 24149 0001252C 0F851B090000                    jne L_error_arg_count_2
 24150 00012532 4C8B4520                        mov r8, PARAM(0)
 24151                                          assert_rational(r8)
    42 00012536 41803811            <1>  cmp byte [%1], %2
    43 0001253A 0F85AC090000        <1>  jne L_error_incorrect_type
 24152 00012540 4C8B4D28                        mov r9, PARAM(1)
 24153                                          assert_rational(r9)
    42 00012544 41803911            <1>  cmp byte [%1], %2
    43 00012548 0F859E090000        <1>  jne L_error_incorrect_type
 24154 0001254E 498B4001                        mov rax, qword [r8 + 1] ; num1
 24155 00012552 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24156 00012556 4899                            cqo
 24157 00012558 48F7EB                          imul rbx
 24158 0001255B 4889C6                          mov rsi, rax
 24159 0001255E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24160 00012562 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 24161 00012566 4899                            cqo
 24162 00012568 48F7EB                          imul rbx
 24163 0001256B 4829C6                          sub rsi, rax
 24164 0001256E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24165 00012572 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24166 00012576 4899                            cqo
 24167 00012578 48F7EB                          imul rbx
 24168 0001257B 4889C7                          mov rdi, rax
 24169 0001257E E8BF000000                      call normalize_rational
 24170                                          LEAVE
    38 00012583 C9                  <1>  leave
 24171 00012584 C22000                          ret AND_KILL_FRAME(2)
 24172                                  
 24173                                  L_code_ptr_raw_bin_mul_qq:
 24174                                          ENTER
    33 00012587 C8000000            <1>  enter 0, 0
    34 0001258B 4883E4F0            <1>  and rsp, ~15
 24175 0001258F 48837D1802                      cmp COUNT, 2
 24176 00012594 0F85B3080000                    jne L_error_arg_count_2
 24177 0001259A 4C8B4520                        mov r8, PARAM(0)
 24178                                          assert_rational(r8)
    42 0001259E 41803811            <1>  cmp byte [%1], %2
    43 000125A2 0F8544090000        <1>  jne L_error_incorrect_type
 24179 000125A8 4C8B4D28                        mov r9, PARAM(1)
 24180                                          assert_rational(r9)
    42 000125AC 41803911            <1>  cmp byte [%1], %2
    43 000125B0 0F8536090000        <1>  jne L_error_incorrect_type
 24181 000125B6 498B4001                        mov rax, qword [r8 + 1] ; num1
 24182 000125BA 498B5901                        mov rbx, qword [r9 + 1] ; num2
 24183 000125BE 4899                            cqo
 24184 000125C0 48F7EB                          imul rbx
 24185 000125C3 4889C6                          mov rsi, rax
 24186 000125C6 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24187 000125CA 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 24188 000125CE 4899                            cqo
 24189 000125D0 48F7EB                          imul rbx
 24190 000125D3 4889C7                          mov rdi, rax
 24191 000125D6 E867000000                      call normalize_rational
 24192                                          LEAVE
    38 000125DB C9                  <1>  leave
 24193 000125DC C22000                          ret AND_KILL_FRAME(2)
 24194                                          
 24195                                  L_code_ptr_raw_bin_div_qq:
 24196                                          ENTER
    33 000125DF C8000000            <1>  enter 0, 0
    34 000125E3 4883E4F0            <1>  and rsp, ~15
 24197 000125E7 48837D1802                      cmp COUNT, 2
 24198 000125EC 0F855B080000                    jne L_error_arg_count_2
 24199 000125F2 4C8B4520                        mov r8, PARAM(0)
 24200                                          assert_rational(r8)
    42 000125F6 41803811            <1>  cmp byte [%1], %2
    43 000125FA 0F85EC080000        <1>  jne L_error_incorrect_type
 24201 00012600 4C8B4D28                        mov r9, PARAM(1)
 24202                                          assert_rational(r9)
    42 00012604 41803911            <1>  cmp byte [%1], %2
    43 00012608 0F85DE080000        <1>  jne L_error_incorrect_type
 24203 0001260E 4983790100                      cmp qword [r9 + 1], 0
 24204 00012613 0F8404090000                    je L_error_division_by_zero
 24205 00012619 498B4001                        mov rax, qword [r8 + 1] ; num1
 24206 0001261D 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 24207 00012621 4899                            cqo
 24208 00012623 48F7EB                          imul rbx
 24209 00012626 4889C6                          mov rsi, rax
 24210 00012629 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 24211 0001262D 498B5901                        mov rbx, qword [r9 + 1] ; num2
 24212 00012631 4899                            cqo
 24213 00012633 48F7EB                          imul rbx
 24214 00012636 4889C7                          mov rdi, rax
 24215 00012639 E804000000                      call normalize_rational
 24216                                          LEAVE
    38 0001263E C9                  <1>  leave
 24217 0001263F C22000                          ret AND_KILL_FRAME(2)
 24218                                          
 24219                                  normalize_rational:
 24220 00012642 56                              push rsi
 24221 00012643 57                              push rdi
 24222 00012644 E839000000                      call gcd
 24223 00012649 4889C3                          mov rbx, rax
 24224 0001264C 58                              pop rax
 24225 0001264D 4899                            cqo
 24226 0001264F 48F7FB                          idiv rbx
 24227 00012652 4989C0                          mov r8, rax
 24228 00012655 58                              pop rax
 24229 00012656 4899                            cqo
 24230 00012658 48F7FB                          idiv rbx
 24231 0001265B 4989C1                          mov r9, rax
 24232 0001265E BF11000000                      mov rdi, (1 + 8 + 8)
 24233 00012663 E890F0FFFF                      call malloc
 24234 00012668 C60011                          mov byte [rax], T_rational
 24235 0001266B 4C894801                        mov qword [rax + 1], r9
 24236 0001266F 4C894009                        mov qword [rax + 1 + 8], r8
 24237 00012673 C3                              ret
 24238                                  
 24239                                  iabs:
 24240 00012674 4889F8                          mov rax, rdi
 24241 00012677 4883F800                        cmp rax, 0
 24242 0001267B 7C01                            jl .Lneg
 24243 0001267D C3                              ret
 24244                                  .Lneg:
 24245 0001267E 48F7D8                          neg rax
 24246 00012681 C3                              ret
 24247                                  
 24248                                  gcd:
 24249 00012682 E8EDFFFFFF                      call iabs
 24250 00012687 4889C3                          mov rbx, rax
 24251 0001268A 4889F7                          mov rdi, rsi
 24252 0001268D E8E2FFFFFF                      call iabs
 24253 00012692 4883F800                        cmp rax, 0
 24254 00012696 7502                            jne .L0
 24255 00012698 4893                            xchg rax, rbx
 24256                                  .L0:
 24257 0001269A 4883FB00                        cmp rbx, 0
 24258 0001269E 740C                            je .L1
 24259 000126A0 4899                            cqo
 24260 000126A2 48F7F3                          div rbx
 24261 000126A5 4889D0                          mov rax, rdx
 24262 000126A8 4893                            xchg rax, rbx
 24263 000126AA EBEE                            jmp .L0
 24264                                  .L1:
 24265 000126AC C3                              ret
 24266                                  
 24267                                  L_code_ptr_error:
 24268                                          ENTER
    33 000126AD C8000000            <1>  enter 0, 0
    34 000126B1 4883E4F0            <1>  and rsp, ~15
 24269 000126B5 48837D1802                      cmp COUNT, 2
 24270 000126BA 0F858D070000                    jne L_error_arg_count_2
 24271 000126C0 488B7520                        mov rsi, PARAM(0)
 24272                                          assert_symbol(rsi)
    42 000126C4 803E04              <1>  cmp byte [%1], %2
    43 000126C7 0F851F080000        <1>  jne L_error_incorrect_type
 24273 000126CD 488B7528                        mov rsi, PARAM(1)
 24274                                          assert_string(rsi)
    42 000126D1 803E03              <1>  cmp byte [%1], %2
    43 000126D4 0F8512080000        <1>  jne L_error_incorrect_type
 24275 000126DA 48BF-                           mov rdi, fmt_scheme_error_part_1
 24275 000126DC [B105000000000000] 
 24276 000126E4 B800000000                      mov rax, 0
 24277                                  	ENTER
    33 000126E9 C8000000            <1>  enter 0, 0
    34 000126ED 4883E4F0            <1>  and rsp, ~15
 24278 000126F1 E8(00000000)                    call printf
 24279                                  	LEAVE
    38 000126F6 C9                  <1>  leave
 24280 000126F7 488B7D20                        mov rdi, PARAM(0)
 24281 000126FB E813F0FFFF                      call print_sexpr
 24282 00012700 48BF-                           mov rdi, fmt_scheme_error_part_2
 24282 00012702 [C505000000000000] 
 24283 0001270A B800000000                      mov rax, 0
 24284                                  	ENTER
    33 0001270F C8000000            <1>  enter 0, 0
    34 00012713 4883E4F0            <1>  and rsp, ~15
 24285 00012717 E8(00000000)                    call printf
 24286                                  	LEAVE
    38 0001271C C9                  <1>  leave
 24287 0001271D 488B4528                        mov rax, PARAM(1)       ; sob_string
 24288 00012721 BE01000000                      mov rsi, 1              ; size = 1 byte
 24289 00012726 488B5001                        mov rdx, qword [rax + 1] ; length
 24290 0001272A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 24291 0001272E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 24292 00012736 E8(00000000)                    call fwrite
 24293 0001273B 48BF-                           mov rdi, fmt_scheme_error_part_3
 24293 0001273D [0706000000000000] 
 24294 00012745 B800000000                      mov rax, 0
 24295                                  	ENTER
    33 0001274A C8000000            <1>  enter 0, 0
    34 0001274E 4883E4F0            <1>  and rsp, ~15
 24296 00012752 E8(00000000)                    call printf
 24297                                  	LEAVE
    38 00012757 C9                  <1>  leave
 24298 00012758 48C7C0F7FFFFFF                  mov rax, -9
 24299 0001275F E8(00000000)                    call exit
 24300                                  
 24301                                  L_code_ptr_raw_less_than_rr:
 24302                                          ENTER
    33 00012764 C8000000            <1>  enter 0, 0
    34 00012768 4883E4F0            <1>  and rsp, ~15
 24303 0001276C 48837D1802                      cmp COUNT, 2
 24304 00012771 0F85D6060000                    jne L_error_arg_count_2
 24305 00012777 488B7520                        mov rsi, PARAM(0)
 24306                                          assert_real(rsi)
    42 0001277B 803E12              <1>  cmp byte [%1], %2
    43 0001277E 0F8568070000        <1>  jne L_error_incorrect_type
 24307 00012784 488B7D28                        mov rdi, PARAM(1)
 24308                                          assert_real(rdi)
    42 00012788 803F12              <1>  cmp byte [%1], %2
    43 0001278B 0F855B070000        <1>  jne L_error_incorrect_type
 24309 00012791 F20F104601                      movsd xmm0, qword [rsi + 1]
 24310 00012796 F20F104F01                      movsd xmm1, qword [rdi + 1]
 24311 0001279B 660F2FC1                        comisd xmm0, xmm1
 24312 0001279F 730C                            jae .L_false
 24313 000127A1 48B8-                           mov rax, sob_boolean_true
 24313 000127A3 [0300000000000000] 
 24314 000127AB EB0A                            jmp .L_exit
 24315                                  .L_false:
 24316 000127AD 48B8-                           mov rax, sob_boolean_false
 24316 000127AF [0200000000000000] 
 24317                                  .L_exit:
 24318                                          LEAVE
    38 000127B7 C9                  <1>  leave
 24319 000127B8 C22000                          ret AND_KILL_FRAME(2)
 24320                                          
 24321                                  L_code_ptr_raw_less_than_qq:
 24322                                          ENTER
    33 000127BB C8000000            <1>  enter 0, 0
    34 000127BF 4883E4F0            <1>  and rsp, ~15
 24323 000127C3 48837D1802                      cmp COUNT, 2
 24324 000127C8 0F857F060000                    jne L_error_arg_count_2
 24325 000127CE 488B7520                        mov rsi, PARAM(0)
 24326                                          assert_rational(rsi)
    42 000127D2 803E11              <1>  cmp byte [%1], %2
    43 000127D5 0F8511070000        <1>  jne L_error_incorrect_type
 24327 000127DB 488B7D28                        mov rdi, PARAM(1)
 24328                                          assert_rational(rdi)
    42 000127DF 803F11              <1>  cmp byte [%1], %2
    43 000127E2 0F8504070000        <1>  jne L_error_incorrect_type
 24329 000127E8 488B4601                        mov rax, qword [rsi + 1] ; num1
 24330 000127EC 4899                            cqo
 24331 000127EE 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 24332 000127F2 4889C1                          mov rcx, rax
 24333 000127F5 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 24334 000127F9 4899                            cqo
 24335 000127FB 48F76F01                        imul qword [rdi + 1]          ; num2
 24336 000127FF 4829C1                          sub rcx, rax
 24337 00012802 7D0C                            jge .L_false
 24338 00012804 48B8-                           mov rax, sob_boolean_true
 24338 00012806 [0300000000000000] 
 24339 0001280E EB0A                            jmp .L_exit
 24340                                  .L_false:
 24341 00012810 48B8-                           mov rax, sob_boolean_false
 24341 00012812 [0200000000000000] 
 24342                                  .L_exit:
 24343                                          LEAVE
    38 0001281A C9                  <1>  leave
 24344 0001281B C22000                          ret AND_KILL_FRAME(2)
 24345                                  
 24346                                  L_code_ptr_raw_equal_rr:
 24347                                          ENTER
    33 0001281E C8000000            <1>  enter 0, 0
    34 00012822 4883E4F0            <1>  and rsp, ~15
 24348 00012826 48837D1802                      cmp COUNT, 2
 24349 0001282B 0F851C060000                    jne L_error_arg_count_2
 24350 00012831 488B7520                        mov rsi, PARAM(0)
 24351                                          assert_real(rsi)
    42 00012835 803E12              <1>  cmp byte [%1], %2
    43 00012838 0F85AE060000        <1>  jne L_error_incorrect_type
 24352 0001283E 488B7D28                        mov rdi, PARAM(1)
 24353                                          assert_real(rdi)
    42 00012842 803F12              <1>  cmp byte [%1], %2
    43 00012845 0F85A1060000        <1>  jne L_error_incorrect_type
 24354 0001284B F20F104601                      movsd xmm0, qword [rsi + 1]
 24355 00012850 F20F104F01                      movsd xmm1, qword [rdi + 1]
 24356 00012855 660F2FC1                        comisd xmm0, xmm1
 24357 00012859 750C                            jne .L_false
 24358 0001285B 48B8-                           mov rax, sob_boolean_true
 24358 0001285D [0300000000000000] 
 24359 00012865 EB0A                            jmp .L_exit
 24360                                  .L_false:
 24361 00012867 48B8-                           mov rax, sob_boolean_false
 24361 00012869 [0200000000000000] 
 24362                                  .L_exit:
 24363                                          LEAVE
    38 00012871 C9                  <1>  leave
 24364 00012872 C22000                          ret AND_KILL_FRAME(2)
 24365                                          
 24366                                  L_code_ptr_raw_equal_qq:
 24367                                          ENTER
    33 00012875 C8000000            <1>  enter 0, 0
    34 00012879 4883E4F0            <1>  and rsp, ~15
 24368 0001287D 48837D1802                      cmp COUNT, 2
 24369 00012882 0F85C5050000                    jne L_error_arg_count_2
 24370 00012888 488B7520                        mov rsi, PARAM(0)
 24371                                          assert_rational(rsi)
    42 0001288C 803E11              <1>  cmp byte [%1], %2
    43 0001288F 0F8557060000        <1>  jne L_error_incorrect_type
 24372 00012895 488B7D28                        mov rdi, PARAM(1)
 24373                                          assert_rational(rdi)
    42 00012899 803F11              <1>  cmp byte [%1], %2
    43 0001289C 0F854A060000        <1>  jne L_error_incorrect_type
 24374 000128A2 488B4601                        mov rax, qword [rsi + 1] ; num1
 24375 000128A6 4899                            cqo
 24376 000128A8 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 24377 000128AC 4889C1                          mov rcx, rax
 24378 000128AF 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 24379 000128B3 4899                            cqo
 24380 000128B5 48F76F01                        imul qword [rdi + 1]          ; num2
 24381 000128B9 4829C1                          sub rcx, rax
 24382 000128BC 750C                            jne .L_false
 24383 000128BE 48B8-                           mov rax, sob_boolean_true
 24383 000128C0 [0300000000000000] 
 24384 000128C8 EB0A                            jmp .L_exit
 24385                                  .L_false:
 24386 000128CA 48B8-                           mov rax, sob_boolean_false
 24386 000128CC [0200000000000000] 
 24387                                  .L_exit:
 24388                                          LEAVE
    38 000128D4 C9                  <1>  leave
 24389 000128D5 C22000                          ret AND_KILL_FRAME(2)
 24390                                  
 24391                                  L_code_ptr_quotient:
 24392                                          ENTER
    33 000128D8 C8000000            <1>  enter 0, 0
    34 000128DC 4883E4F0            <1>  and rsp, ~15
 24393 000128E0 48837D1802                      cmp COUNT, 2
 24394 000128E5 0F8562050000                    jne L_error_arg_count_2
 24395 000128EB 488B7520                        mov rsi, PARAM(0)
 24396                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000128EF 803E11              <2>  cmp byte [%1], %2
    43 000128F2 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000128F8 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000128FD 0F85E9050000        <1>  jne L_error_incorrect_type
 24397 00012903 488B7D28                        mov rdi, PARAM(1)
 24398                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00012907 803F11              <2>  cmp byte [%1], %2
    43 0001290A 0F85DC050000        <2>  jne L_error_incorrect_type
    48 00012910 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012915 0F85D1050000        <1>  jne L_error_incorrect_type
 24399 0001291B 488B4601                        mov rax, qword [rsi + 1]
 24400 0001291F 488B5F01                        mov rbx, qword [rdi + 1]
 24401 00012923 4883FB00                        cmp rbx, 0
 24402 00012927 0F84F0050000                    je L_error_division_by_zero
 24403 0001292D 4899                            cqo
 24404 0001292F 48F7FB                          idiv rbx
 24405 00012932 4889C7                          mov rdi, rax
 24406 00012935 E852040000                      call make_integer
 24407                                          LEAVE
    38 0001293A C9                  <1>  leave
 24408 0001293B C22000                          ret AND_KILL_FRAME(2)
 24409                                          
 24410                                  L_code_ptr_remainder:
 24411                                          ENTER
    33 0001293E C8000000            <1>  enter 0, 0
    34 00012942 4883E4F0            <1>  and rsp, ~15
 24412 00012946 48837D1802                      cmp COUNT, 2
 24413 0001294B 0F85FC040000                    jne L_error_arg_count_2
 24414 00012951 488B7520                        mov rsi, PARAM(0)
 24415                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012955 803E11              <2>  cmp byte [%1], %2
    43 00012958 0F858E050000        <2>  jne L_error_incorrect_type
    48 0001295E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012963 0F8583050000        <1>  jne L_error_incorrect_type
 24416 00012969 488B7D28                        mov rdi, PARAM(1)
 24417                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0001296D 803F11              <2>  cmp byte [%1], %2
    43 00012970 0F8576050000        <2>  jne L_error_incorrect_type
    48 00012976 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0001297B 0F856B050000        <1>  jne L_error_incorrect_type
 24418 00012981 488B4601                        mov rax, qword [rsi + 1]
 24419 00012985 488B5F01                        mov rbx, qword [rdi + 1]
 24420 00012989 4883FB00                        cmp rbx, 0
 24421 0001298D 0F848A050000                    je L_error_division_by_zero
 24422 00012993 4899                            cqo
 24423 00012995 48F7FB                          idiv rbx
 24424 00012998 4889D7                          mov rdi, rdx
 24425 0001299B E8EC030000                      call make_integer
 24426                                          LEAVE
    38 000129A0 C9                  <1>  leave
 24427 000129A1 C22000                          ret AND_KILL_FRAME(2)
 24428                                  
 24429                                  L_code_ptr_set_car:
 24430                                          ENTER
    33 000129A4 C8000000            <1>  enter 0, 0
    34 000129A8 4883E4F0            <1>  and rsp, ~15
 24431 000129AC 48837D1802                      cmp COUNT, 2
 24432 000129B1 0F8596040000                    jne L_error_arg_count_2
 24433 000129B7 488B4520                        mov rax, PARAM(0)
 24434                                          assert_pair(rax)
    42 000129BB 803821              <1>  cmp byte [%1], %2
    43 000129BE 0F8528050000        <1>  jne L_error_incorrect_type
 24435 000129C4 488B5D28                        mov rbx, PARAM(1)
 24436 000129C8 48895801                        mov SOB_PAIR_CAR(rax), rbx
 24437 000129CC 48B8-                           mov rax, sob_void
 24437 000129CE [0000000000000000] 
 24438                                          LEAVE
    38 000129D6 C9                  <1>  leave
 24439 000129D7 C22000                          ret AND_KILL_FRAME(2)
 24440                                  
 24441                                  L_code_ptr_set_cdr:
 24442                                          ENTER
    33 000129DA C8000000            <1>  enter 0, 0
    34 000129DE 4883E4F0            <1>  and rsp, ~15
 24443 000129E2 48837D1802                      cmp COUNT, 2
 24444 000129E7 0F8560040000                    jne L_error_arg_count_2
 24445 000129ED 488B4520                        mov rax, PARAM(0)
 24446                                          assert_pair(rax)
    42 000129F1 803821              <1>  cmp byte [%1], %2
    43 000129F4 0F85F2040000        <1>  jne L_error_incorrect_type
 24447 000129FA 488B5D28                        mov rbx, PARAM(1)
 24448 000129FE 48895809                        mov SOB_PAIR_CDR(rax), rbx
 24449 00012A02 48B8-                           mov rax, sob_void
 24449 00012A04 [0000000000000000] 
 24450                                          LEAVE
    38 00012A0C C9                  <1>  leave
 24451 00012A0D C22000                          ret AND_KILL_FRAME(2)
 24452                                  
 24453                                  L_code_ptr_string_ref:
 24454                                          ENTER
    33 00012A10 C8000000            <1>  enter 0, 0
    34 00012A14 4883E4F0            <1>  and rsp, ~15
 24455 00012A18 48837D1802                      cmp COUNT, 2
 24456 00012A1D 0F852A040000                    jne L_error_arg_count_2
 24457 00012A23 488B7D20                        mov rdi, PARAM(0)
 24458                                          assert_string(rdi)
    42 00012A27 803F03              <1>  cmp byte [%1], %2
    43 00012A2A 0F85BC040000        <1>  jne L_error_incorrect_type
 24459 00012A30 488B7528                        mov rsi, PARAM(1)
 24460                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012A34 803E11              <2>  cmp byte [%1], %2
    43 00012A37 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00012A3D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012A42 0F85A4040000        <1>  jne L_error_incorrect_type
 24461 00012A48 488B5701                        mov rdx, qword [rdi + 1]
 24462 00012A4C 488B4E01                        mov rcx, qword [rsi + 1]
 24463 00012A50 4839D1                          cmp rcx, rdx
 24464 00012A53 0F8D59030000                    jge L_error_integer_range
 24465 00012A59 4883F900                        cmp rcx, 0
 24466 00012A5D 0F8C4F030000                    jl L_error_integer_range
 24467 00012A63 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 24468 00012A67 BF02000000                      mov rdi, 2
 24469 00012A6C E887ECFFFF                      call malloc
 24470 00012A71 C60002                          mov byte [rax], T_char
 24471 00012A74 885801                          mov byte [rax + 1], bl
 24472                                          LEAVE
    38 00012A77 C9                  <1>  leave
 24473 00012A78 C22000                          ret AND_KILL_FRAME(2)
 24474                                  
 24475                                  L_code_ptr_vector_ref:
 24476                                          ENTER
    33 00012A7B C8000000            <1>  enter 0, 0
    34 00012A7F 4883E4F0            <1>  and rsp, ~15
 24477 00012A83 48837D1802                      cmp COUNT, 2
 24478 00012A88 0F85BF030000                    jne L_error_arg_count_2
 24479 00012A8E 488B7D20                        mov rdi, PARAM(0)
 24480                                          assert_vector(rdi)
    42 00012A92 803F22              <1>  cmp byte [%1], %2
    43 00012A95 0F8551040000        <1>  jne L_error_incorrect_type
 24481 00012A9B 488B7528                        mov rsi, PARAM(1)
 24482                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012A9F 803E11              <2>  cmp byte [%1], %2
    43 00012AA2 0F8544040000        <2>  jne L_error_incorrect_type
    48 00012AA8 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012AAD 0F8539040000        <1>  jne L_error_incorrect_type
 24483 00012AB3 488B5701                        mov rdx, qword [rdi + 1]
 24484 00012AB7 488B4E01                        mov rcx, qword [rsi + 1]
 24485 00012ABB 4839D1                          cmp rcx, rdx
 24486 00012ABE 0F8DEE020000                    jge L_error_integer_range
 24487 00012AC4 4883F900                        cmp rcx, 0
 24488 00012AC8 0F8CE4020000                    jl L_error_integer_range
 24489 00012ACE 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 24490                                          LEAVE
    38 00012AD3 C9                  <1>  leave
 24491 00012AD4 C22000                          ret AND_KILL_FRAME(2)
 24492                                  
 24493                                  L_code_ptr_vector_set:
 24494                                          ENTER
    33 00012AD7 C8000000            <1>  enter 0, 0
    34 00012ADB 4883E4F0            <1>  and rsp, ~15
 24495 00012ADF 48837D1803                      cmp COUNT, 3
 24496 00012AE4 0F85CD030000                    jne L_error_arg_count_3
 24497 00012AEA 488B7D20                        mov rdi, PARAM(0)
 24498                                          assert_vector(rdi)
    42 00012AEE 803F22              <1>  cmp byte [%1], %2
    43 00012AF1 0F85F5030000        <1>  jne L_error_incorrect_type
 24499 00012AF7 488B7528                        mov rsi, PARAM(1)
 24500                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012AFB 803E11              <2>  cmp byte [%1], %2
    43 00012AFE 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00012B04 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012B09 0F85DD030000        <1>  jne L_error_incorrect_type
 24501 00012B0F 488B5701                        mov rdx, qword [rdi + 1]
 24502 00012B13 488B4E01                        mov rcx, qword [rsi + 1]
 24503 00012B17 4839D1                          cmp rcx, rdx
 24504 00012B1A 0F8D92020000                    jge L_error_integer_range
 24505 00012B20 4883F900                        cmp rcx, 0
 24506 00012B24 0F8C88020000                    jl L_error_integer_range
 24507 00012B2A 488B4530                        mov rax, PARAM(2)
 24508 00012B2E 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 24509 00012B33 48B8-                           mov rax, sob_void
 24509 00012B35 [0000000000000000] 
 24510                                          LEAVE
    38 00012B3D C9                  <1>  leave
 24511 00012B3E C22800                          ret AND_KILL_FRAME(3)
 24512                                  
 24513                                  L_code_ptr_string_set:
 24514                                          ENTER
    33 00012B41 C8000000            <1>  enter 0, 0
    34 00012B45 4883E4F0            <1>  and rsp, ~15
 24515 00012B49 48837D1803                      cmp COUNT, 3
 24516 00012B4E 0F8563030000                    jne L_error_arg_count_3
 24517 00012B54 488B7D20                        mov rdi, PARAM(0)
 24518                                          assert_string(rdi)
    42 00012B58 803F03              <1>  cmp byte [%1], %2
    43 00012B5B 0F858B030000        <1>  jne L_error_incorrect_type
 24519 00012B61 488B7528                        mov rsi, PARAM(1)
 24520                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00012B65 803E11              <2>  cmp byte [%1], %2
    43 00012B68 0F857E030000        <2>  jne L_error_incorrect_type
    48 00012B6E 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012B73 0F8573030000        <1>  jne L_error_incorrect_type
 24521 00012B79 488B5701                        mov rdx, qword [rdi + 1]
 24522 00012B7D 488B4E01                        mov rcx, qword [rsi + 1]
 24523 00012B81 4839D1                          cmp rcx, rdx
 24524 00012B84 0F8D28020000                    jge L_error_integer_range
 24525 00012B8A 4883F900                        cmp rcx, 0
 24526 00012B8E 0F8C1E020000                    jl L_error_integer_range
 24527 00012B94 488B4530                        mov rax, PARAM(2)
 24528                                          assert_char(rax)
    42 00012B98 803802              <1>  cmp byte [%1], %2
    43 00012B9B 0F854B030000        <1>  jne L_error_incorrect_type
 24529 00012BA1 8A4001                          mov al, byte [rax + 1]
 24530 00012BA4 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 24531 00012BA8 48B8-                           mov rax, sob_void
 24531 00012BAA [0000000000000000] 
 24532                                          LEAVE
    38 00012BB2 C9                  <1>  leave
 24533 00012BB3 C22800                          ret AND_KILL_FRAME(3)
 24534                                  
 24535                                  L_code_ptr_make_vector:
 24536                                          ENTER
    33 00012BB6 C8000000            <1>  enter 0, 0
    34 00012BBA 4883E4F0            <1>  and rsp, ~15
 24537 00012BBE 48837D1802                      cmp COUNT, 2
 24538 00012BC3 0F8584020000                    jne L_error_arg_count_2
 24539 00012BC9 488B4D20                        mov rcx, PARAM(0)
 24540                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00012BCD 803911              <2>  cmp byte [%1], %2
    43 00012BD0 0F8516030000        <2>  jne L_error_incorrect_type
    48 00012BD6 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012BDB 0F850B030000        <1>  jne L_error_incorrect_type
 24541 00012BE1 488B4901                        mov rcx, qword [rcx + 1]
 24542 00012BE5 4883F900                        cmp rcx, 0
 24543 00012BE9 0F8CC3010000                    jl L_error_integer_range
 24544 00012BEF 488B5528                        mov rdx, PARAM(1)
 24545 00012BF3 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 24546 00012BFB E8F8EAFFFF                      call malloc
 24547 00012C00 C60022                          mov byte [rax], T_vector
 24548 00012C03 48894801                        mov qword [rax + 1], rcx
 24549 00012C07 41B800000000                    mov r8, 0
 24550                                  .L0:
 24551 00012C0D 4939C8                          cmp r8, rcx
 24552 00012C10 740A                            je .L1
 24553 00012C12 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 24554 00012C17 49FFC0                          inc r8
 24555 00012C1A EBF1                            jmp .L0
 24556                                  .L1:
 24557                                          LEAVE
    38 00012C1C C9                  <1>  leave
 24558 00012C1D C22000                          ret AND_KILL_FRAME(2)
 24559                                          
 24560                                  L_code_ptr_make_string:
 24561                                          ENTER
    33 00012C20 C8000000            <1>  enter 0, 0
    34 00012C24 4883E4F0            <1>  and rsp, ~15
 24562 00012C28 48837D1802                      cmp COUNT, 2
 24563 00012C2D 0F851A020000                    jne L_error_arg_count_2
 24564 00012C33 488B4D20                        mov rcx, PARAM(0)
 24565                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00012C37 803911              <2>  cmp byte [%1], %2
    43 00012C3A 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00012C40 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00012C45 0F85A1020000        <1>  jne L_error_incorrect_type
 24566 00012C4B 488B4901                        mov rcx, qword [rcx + 1]
 24567 00012C4F 4883F900                        cmp rcx, 0
 24568 00012C53 0F8C59010000                    jl L_error_integer_range
 24569 00012C59 488B5528                        mov rdx, PARAM(1)
 24570                                          assert_char(rdx)
    42 00012C5D 803A02              <1>  cmp byte [%1], %2
    43 00012C60 0F8586020000        <1>  jne L_error_incorrect_type
 24571 00012C66 8A5201                          mov dl, byte [rdx + 1]
 24572 00012C69 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 24573 00012C6D E886EAFFFF                      call malloc
 24574 00012C72 C60003                          mov byte [rax], T_string
 24575 00012C75 48894801                        mov qword [rax + 1], rcx
 24576 00012C79 41B800000000                    mov r8, 0
 24577                                  .L0:
 24578 00012C7F 4939C8                          cmp r8, rcx
 24579 00012C82 740A                            je .L1
 24580 00012C84 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 24581 00012C89 49FFC0                          inc r8
 24582 00012C8C EBF1                            jmp .L0
 24583                                  .L1:
 24584                                          LEAVE
    38 00012C8E C9                  <1>  leave
 24585 00012C8F C22000                          ret AND_KILL_FRAME(2)
 24586                                  
 24587                                  L_code_ptr_numerator:
 24588                                          ENTER
    33 00012C92 C8000000            <1>  enter 0, 0
    34 00012C96 4883E4F0            <1>  and rsp, ~15
 24589 00012C9A 48837D1801                      cmp COUNT, 1
 24590 00012C9F 0F8573010000                    jne L_error_arg_count_1
 24591 00012CA5 488B4520                        mov rax, PARAM(0)
 24592                                          assert_rational(rax)
    42 00012CA9 803811              <1>  cmp byte [%1], %2
    43 00012CAC 0F853A020000        <1>  jne L_error_incorrect_type
 24593 00012CB2 488B7801                        mov rdi, qword [rax + 1]
 24594 00012CB6 E8D1000000                      call make_integer
 24595                                          LEAVE
    38 00012CBB C9                  <1>  leave
 24596 00012CBC C21800                          ret AND_KILL_FRAME(1)
 24597                                          
 24598                                  L_code_ptr_denominator:
 24599                                          ENTER
    33 00012CBF C8000000            <1>  enter 0, 0
    34 00012CC3 4883E4F0            <1>  and rsp, ~15
 24600 00012CC7 48837D1801                      cmp COUNT, 1
 24601 00012CCC 0F8546010000                    jne L_error_arg_count_1
 24602 00012CD2 488B4520                        mov rax, PARAM(0)
 24603                                          assert_rational(rax)
    42 00012CD6 803811              <1>  cmp byte [%1], %2
    43 00012CD9 0F850D020000        <1>  jne L_error_incorrect_type
 24604 00012CDF 488B7809                        mov rdi, qword [rax + 1 + 8]
 24605 00012CE3 E8A4000000                      call make_integer
 24606                                          LEAVE
    38 00012CE8 C9                  <1>  leave
 24607 00012CE9 C21800                          ret AND_KILL_FRAME(1)
 24608                                  
 24609                                  L_code_ptr_eq:
 24610                                  	ENTER
    33 00012CEC C8000000            <1>  enter 0, 0
    34 00012CF0 4883E4F0            <1>  and rsp, ~15
 24611 00012CF4 48837D1802              	cmp COUNT, 2
 24612 00012CF9 0F854E010000            	jne L_error_arg_count_2
 24613 00012CFF 488B7D20                	mov rdi, PARAM(0)
 24614 00012D03 488B7528                	mov rsi, PARAM(1)
 24615 00012D07 4839F7                  	cmp rdi, rsi
 24616 00012D0A 744A                    	je .L_eq_true
 24617 00012D0C 8A17                    	mov dl, byte [rdi]
 24618 00012D0E 3A16                    	cmp dl, byte [rsi]
 24619 00012D10 7550                    	jne .L_eq_false
 24620 00012D12 80FA02                  	cmp dl, T_char
 24621 00012D15 7437                    	je .L_char
 24622 00012D17 80FA04                  	cmp dl, T_symbol
 24623 00012D1A 742A                    	je .L_symbol
 24624 00012D1C 80FA12                  	cmp dl, T_real
 24625 00012D1F 741D                    	je .L_real
 24626 00012D21 80FA11                  	cmp dl, T_rational
 24627 00012D24 7402                    	je .L_rational
 24628 00012D26 EB3A                    	jmp .L_eq_false
 24629                                  .L_rational:
 24630 00012D28 488B4601                	mov rax, qword [rsi + 1]
 24631 00012D2C 483B4701                	cmp rax, qword [rdi + 1]
 24632 00012D30 7530                    	jne .L_eq_false
 24633 00012D32 488B4609                	mov rax, qword [rsi + 1 + 8]
 24634 00012D36 483B4709                	cmp rax, qword [rdi + 1 + 8]
 24635 00012D3A 7526                    	jne .L_eq_false
 24636 00012D3C EB18                    	jmp .L_eq_true
 24637                                  .L_real:
 24638 00012D3E 488B4601                	mov rax, qword [rsi + 1]
 24639 00012D42 483B4701                	cmp rax, qword [rdi + 1]
 24640                                  .L_symbol:
 24641                                  	; never reached, because symbols are static!
 24642                                  	; but I'm keeping it in case, I'll ever change
 24643                                  	; the implementation
 24644 00012D46 488B4601                	mov rax, qword [rsi + 1]
 24645 00012D4A 483B4701                	cmp rax, qword [rdi + 1]
 24646                                  .L_char:
 24647 00012D4E 8A5E01                  	mov bl, byte [rsi + 1]
 24648 00012D51 3A5F01                  	cmp bl, byte [rdi + 1]
 24649 00012D54 750C                    	jne .L_eq_false
 24650                                  .L_eq_true:
 24651 00012D56 48B8-                   	mov rax, sob_boolean_true
 24651 00012D58 [0300000000000000] 
 24652 00012D60 EB0A                    	jmp .L_eq_exit
 24653                                  .L_eq_false:
 24654 00012D62 48B8-                   	mov rax, sob_boolean_false
 24654 00012D64 [0200000000000000] 
 24655                                  .L_eq_exit:
 24656                                  	LEAVE
    38 00012D6C C9                  <1>  leave
 24657 00012D6D C22000                  	ret AND_KILL_FRAME(2)
 24658                                  
 24659                                  make_real:
 24660                                          ENTER
    33 00012D70 C8000000            <1>  enter 0, 0
    34 00012D74 4883E4F0            <1>  and rsp, ~15
 24661 00012D78 BF09000000                      mov rdi, (1 + 8)
 24662 00012D7D E876E9FFFF                      call malloc
 24663 00012D82 C60012                          mov byte [rax], T_real
 24664 00012D85 F20F114001                      movsd qword [rax + 1], xmm0
 24665                                          LEAVE
    38 00012D8A C9                  <1>  leave
 24666 00012D8B C3                              ret
 24667                                          
 24668                                  make_integer:
 24669                                          ENTER
    33 00012D8C C8000000            <1>  enter 0, 0
    34 00012D90 4883E4F0            <1>  and rsp, ~15
 24670 00012D94 4889FE                          mov rsi, rdi
 24671 00012D97 BF11000000                      mov rdi, (1 + 8 + 8)
 24672 00012D9C E857E9FFFF                      call malloc
 24673 00012DA1 C60011                          mov byte [rax], T_rational
 24674 00012DA4 48897001                        mov qword [rax + 1], rsi
 24675 00012DA8 48C7400901000000                mov qword [rax + 1 + 8], 1
 24676                                          LEAVE
    38 00012DB0 C9                  <1>  leave
 24677 00012DB1 C3                              ret
 24678                                          
 24679                                  L_error_integer_range:
 24680 00012DB2 488B3C25[00000000]              mov rdi, qword [stderr]
 24681 00012DBA 48BE-                           mov rsi, fmt_integer_range
 24681 00012DBC [7E05000000000000] 
 24682 00012DC4 B800000000                      mov rax, 0
 24683                                  	ENTER
    33 00012DC9 C8000000            <1>  enter 0, 0
    34 00012DCD 4883E4F0            <1>  and rsp, ~15
 24684 00012DD1 E8(00000000)                    call fprintf
 24685                                  	LEAVE
    38 00012DD6 C9                  <1>  leave
 24686 00012DD7 48C7C0FBFFFFFF                  mov rax, -5
 24687 00012DDE E8(00000000)                    call exit
 24688                                  
 24689                                  L_error_arg_count_0:
 24690 00012DE3 488B3C25[00000000]              mov rdi, qword [stderr]
 24691 00012DEB 48BE-                           mov rsi, fmt_arg_count_0
 24691 00012DED [7C04000000000000] 
 24692 00012DF5 488B5518                        mov rdx, COUNT
 24693 00012DF9 B800000000                      mov rax, 0
 24694                                  	ENTER
    33 00012DFE C8000000            <1>  enter 0, 0
    34 00012E02 4883E4F0            <1>  and rsp, ~15
 24695 00012E06 E8(00000000)                    call fprintf
 24696                                  	LEAVE
    38 00012E0B C9                  <1>  leave
 24697 00012E0C 48C7C0FDFFFFFF                  mov rax, -3
 24698 00012E13 E8(00000000)                    call exit
 24699                                  
 24700                                  L_error_arg_count_1:
 24701 00012E18 488B3C25[00000000]              mov rdi, qword [stderr]
 24702 00012E20 48BE-                           mov rsi, fmt_arg_count_1
 24702 00012E22 [A404000000000000] 
 24703 00012E2A 488B5518                        mov rdx, COUNT
 24704 00012E2E B800000000                      mov rax, 0
 24705                                  	ENTER
    33 00012E33 C8000000            <1>  enter 0, 0
    34 00012E37 4883E4F0            <1>  and rsp, ~15
 24706 00012E3B E8(00000000)                    call fprintf
 24707                                  	LEAVE
    38 00012E40 C9                  <1>  leave
 24708 00012E41 48C7C0FDFFFFFF                  mov rax, -3
 24709 00012E48 E8(00000000)                    call exit
 24710                                  
 24711                                  L_error_arg_count_2:
 24712 00012E4D 488B3C25[00000000]              mov rdi, qword [stderr]
 24713 00012E55 48BE-                           mov rsi, fmt_arg_count_2
 24713 00012E57 [0A05000000000000] 
 24714 00012E5F 488B5518                        mov rdx, COUNT
 24715 00012E63 B800000000                      mov rax, 0
 24716                                  	ENTER
    33 00012E68 C8000000            <1>  enter 0, 0
    34 00012E6C 4883E4F0            <1>  and rsp, ~15
 24717 00012E70 E8(00000000)                    call fprintf
 24718                                  	LEAVE
    38 00012E75 C9                  <1>  leave
 24719 00012E76 48C7C0FDFFFFFF                  mov rax, -3
 24720 00012E7D E8(00000000)                    call exit
 24721                                  
 24722                                  L_error_arg_count_12:
 24723 00012E82 488B3C25[00000000]              mov rdi, qword [stderr]
 24724 00012E8A 48BE-                           mov rsi, fmt_arg_count_12
 24724 00012E8C [CA04000000000000] 
 24725 00012E94 488B5518                        mov rdx, COUNT
 24726 00012E98 B800000000                      mov rax, 0
 24727                                  	ENTER
    33 00012E9D C8000000            <1>  enter 0, 0
    34 00012EA1 4883E4F0            <1>  and rsp, ~15
 24728 00012EA5 E8(00000000)                    call fprintf
 24729                                  	LEAVE
    38 00012EAA C9                  <1>  leave
 24730 00012EAB 48C7C0FDFFFFFF                  mov rax, -3
 24731 00012EB2 E8(00000000)                    call exit
 24732                                  
 24733                                  L_error_arg_count_3:
 24734 00012EB7 488B3C25[00000000]              mov rdi, qword [stderr]
 24735 00012EBF 48BE-                           mov rsi, fmt_arg_count_3
 24735 00012EC1 [3105000000000000] 
 24736 00012EC9 488B5518                        mov rdx, COUNT
 24737 00012ECD B800000000                      mov rax, 0
 24738                                  	ENTER
    33 00012ED2 C8000000            <1>  enter 0, 0
    34 00012ED6 4883E4F0            <1>  and rsp, ~15
 24739 00012EDA E8(00000000)                    call fprintf
 24740                                  	LEAVE
    38 00012EDF C9                  <1>  leave
 24741 00012EE0 48C7C0FDFFFFFF                  mov rax, -3
 24742 00012EE7 E8(00000000)                    call exit
 24743                                          
 24744                                  L_error_incorrect_type:
 24745 00012EEC 488B3C25[00000000]              mov rdi, qword [stderr]
 24746 00012EF4 48BE-                           mov rsi, fmt_type
 24746 00012EF6 [5A05000000000000] 
 24747 00012EFE B800000000                      mov rax, 0
 24748                                  	ENTER
    33 00012F03 C8000000            <1>  enter 0, 0
    34 00012F07 4883E4F0            <1>  and rsp, ~15
 24749 00012F0B E8(00000000)                    call fprintf
 24750                                  	LEAVE
    38 00012F10 C9                  <1>  leave
 24751 00012F11 48C7C0FCFFFFFF                  mov rax, -4
 24752 00012F18 E8(00000000)                    call exit
 24753                                  
 24754                                  L_error_division_by_zero:
 24755 00012F1D 488B3C25[00000000]              mov rdi, qword [stderr]
 24756 00012F25 48BE-                           mov rsi, fmt_division_by_zero
 24756 00012F27 [9B05000000000000] 
 24757 00012F2F B800000000                      mov rax, 0
 24758                                  	ENTER
    33 00012F34 C8000000            <1>  enter 0, 0
    34 00012F38 4883E4F0            <1>  and rsp, ~15
 24759 00012F3C E8(00000000)                    call fprintf
 24760                                  	LEAVE
    38 00012F41 C9                  <1>  leave
 24761 00012F42 48C7C0F8FFFFFF                  mov rax, -8
 24762 00012F49 E8(00000000)                    call exit
 24763                                  
 24764                                  section .data
 24765                                  fmt_char:
 24766 00000479 256300                          db `%c\0`
 24767                                  fmt_arg_count_0:
 24768 0000047C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 24768 00000485 74696E67207A65726F-
 24768 0000048E 20617267756D656E74-
 24768 00000497 732E20466F756E6420-
 24768 000004A0 25640A00           
 24769                                  fmt_arg_count_1:
 24770 000004A4 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 24770 000004AD 74696E67206F6E6520-
 24770 000004B6 617267756D656E742E-
 24770 000004BF 20466F756E64202564-
 24770 000004C8 0A00               
 24771                                  fmt_arg_count_12:
 24772 000004CA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 24772 000004D3 74696E67206F6E6520-
 24772 000004DC 726571756972656420-
 24772 000004E5 616E64206F6E65206F-
 24772 000004EE 7074696F6E616C2061-
 24772 000004F7 7267756D656E742E20-
 24772 00000500 466F756E642025640A-
 24772 00000509 00                 
 24773                                  fmt_arg_count_2:
 24774 0000050A 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 24774 00000513 74696E672074776F20-
 24774 0000051C 617267756D656E7473-
 24774 00000525 2E20466F756E642025-
 24774 0000052E 640A00             
 24775                                  fmt_arg_count_3:
 24776 00000531 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 24776 0000053A 74696E672074687265-
 24776 00000543 6520617267756D656E-
 24776 0000054C 74732E20466F756E64-
 24776 00000555 2025640A00         
 24777                                  fmt_type:
 24778 0000055A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 24778 00000563 696F6E207061737365-
 24778 0000056C 6420696E636F727265-
 24778 00000575 637420747970650A00 
 24779                                  fmt_integer_range:
 24780 0000057E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 24780 00000587 7265637420696E7465-
 24780 00000590 6765722072616E6765-
 24780 00000599 0A00               
 24781                                  fmt_division_by_zero:
 24782 0000059B 212121204469766973-             db `!!! Division by zero\n\0`
 24782 000005A4 696F6E206279207A65-
 24782 000005AD 726F0A00           
 24783                                  fmt_scheme_error_part_1:
 24784 000005B1 0A2121212054686520-             db `\n!!! The procedure \0`
 24784 000005BA 70726F636564757265-
 24784 000005C3 2000               
 24785                                  fmt_scheme_error_part_2:
 24786 000005C5 2061736B656420746F-             db ` asked to terminate the program\n`
 24786 000005CE 207465726D696E6174-
 24786 000005D7 65207468652070726F-
 24786 000005E0 6772616D0A         
 24787 000005E5 202020207769746820-             db `    with the following message:\n\n\0`
 24787 000005EE 74686520666F6C6C6F-
 24787 000005F7 77696E67206D657373-
 24787 00000600 6167653A0A0A00     
 24788                                  fmt_scheme_error_part_3:
 24789 00000607 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 24789 00000610 210A0A00           
