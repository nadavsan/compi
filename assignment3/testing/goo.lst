     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 21                      	db T_pair	; (#f)
    84 00000007 [0200000000000000]-     	dq L_constants + 2, L_constants + 1
    84 0000000F [0100000000000000] 
    85 00000017 21                      	db T_pair	; (#t #f)
    86 00000018 [0300000000000000]-     	dq L_constants + 3, L_constants + 6
    86 00000020 [0600000000000000] 
    87                                  
    88                                  section .bss
    89                                  free_var_0:	; location of null?
    90 00000000 ????????????????        	resq 1
    91                                  free_var_1:	; location of pair?
    92 00000008 ????????????????        	resq 1
    93                                  free_var_2:	; location of void?
    94 00000010 ????????????????        	resq 1
    95                                  free_var_3:	; location of char?
    96 00000018 ????????????????        	resq 1
    97                                  free_var_4:	; location of string?
    98 00000020 ????????????????        	resq 1
    99                                  free_var_5:	; location of symbol?
   100 00000028 ????????????????        	resq 1
   101                                  free_var_6:	; location of vector?
   102 00000030 ????????????????        	resq 1
   103                                  free_var_7:	; location of procedure?
   104 00000038 ????????????????        	resq 1
   105                                  free_var_8:	; location of real?
   106 00000040 ????????????????        	resq 1
   107                                  free_var_9:	; location of rational?
   108 00000048 ????????????????        	resq 1
   109                                  free_var_10:	; location of boolean?
   110 00000050 ????????????????        	resq 1
   111                                  free_var_11:	; location of number?
   112 00000058 ????????????????        	resq 1
   113                                  free_var_12:	; location of collection?
   114 00000060 ????????????????        	resq 1
   115                                  free_var_13:	; location of cons
   116 00000068 ????????????????        	resq 1
   117                                  free_var_14:	; location of display-sexpr
   118 00000070 ????????????????        	resq 1
   119                                  free_var_15:	; location of write-char
   120 00000078 ????????????????        	resq 1
   121                                  free_var_16:	; location of car
   122 00000080 ????????????????        	resq 1
   123                                  free_var_17:	; location of cdr
   124 00000088 ????????????????        	resq 1
   125                                  free_var_18:	; location of string-length
   126 00000090 ????????????????        	resq 1
   127                                  free_var_19:	; location of vector-length
   128 00000098 ????????????????        	resq 1
   129                                  free_var_20:	; location of real->integer
   130 000000A0 ????????????????        	resq 1
   131                                  free_var_21:	; location of exit
   132 000000A8 ????????????????        	resq 1
   133                                  free_var_22:	; location of integer->real
   134 000000B0 ????????????????        	resq 1
   135                                  free_var_23:	; location of rational->real
   136 000000B8 ????????????????        	resq 1
   137                                  free_var_24:	; location of char->integer
   138 000000C0 ????????????????        	resq 1
   139                                  free_var_25:	; location of integer->char
   140 000000C8 ????????????????        	resq 1
   141                                  free_var_26:	; location of trng
   142 000000D0 ????????????????        	resq 1
   143                                  free_var_27:	; location of zero?
   144 000000D8 ????????????????        	resq 1
   145                                  free_var_28:	; location of integer?
   146 000000E0 ????????????????        	resq 1
   147                                  free_var_29:	; location of __bin-apply
   148 000000E8 ????????????????        	resq 1
   149                                  free_var_30:	; location of __bin-add-rr
   150 000000F0 ????????????????        	resq 1
   151                                  free_var_31:	; location of __bin-sub-rr
   152 000000F8 ????????????????        	resq 1
   153                                  free_var_32:	; location of __bin-mul-rr
   154 00000100 ????????????????        	resq 1
   155                                  free_var_33:	; location of __bin-div-rr
   156 00000108 ????????????????        	resq 1
   157                                  free_var_34:	; location of __bin-add-qq
   158 00000110 ????????????????        	resq 1
   159                                  free_var_35:	; location of __bin-sub-qq
   160 00000118 ????????????????        	resq 1
   161                                  free_var_36:	; location of __bin-mul-qq
   162 00000120 ????????????????        	resq 1
   163                                  free_var_37:	; location of __bin-div-qq
   164 00000128 ????????????????        	resq 1
   165                                  free_var_38:	; location of error
   166 00000130 ????????????????        	resq 1
   167                                  free_var_39:	; location of __bin-less-than-rr
   168 00000138 ????????????????        	resq 1
   169                                  free_var_40:	; location of __bin-less-than-qq
   170 00000140 ????????????????        	resq 1
   171                                  free_var_41:	; location of __bin-equal-rr
   172 00000148 ????????????????        	resq 1
   173                                  free_var_42:	; location of __bin-equal-qq
   174 00000150 ????????????????        	resq 1
   175                                  free_var_43:	; location of quotient
   176 00000158 ????????????????        	resq 1
   177                                  free_var_44:	; location of remainder
   178 00000160 ????????????????        	resq 1
   179                                  free_var_45:	; location of set-car!
   180 00000168 ????????????????        	resq 1
   181                                  free_var_46:	; location of set-cdr!
   182 00000170 ????????????????        	resq 1
   183                                  free_var_47:	; location of string-ref
   184 00000178 ????????????????        	resq 1
   185                                  free_var_48:	; location of vector-ref
   186 00000180 ????????????????        	resq 1
   187                                  free_var_49:	; location of vector-set!
   188 00000188 ????????????????        	resq 1
   189                                  free_var_50:	; location of string-set!
   190 00000190 ????????????????        	resq 1
   191                                  free_var_51:	; location of make-vector
   192 00000198 ????????????????        	resq 1
   193                                  free_var_52:	; location of make-string
   194 000001A0 ????????????????        	resq 1
   195                                  free_var_53:	; location of numerator
   196 000001A8 ????????????????        	resq 1
   197                                  free_var_54:	; location of denominator
   198 000001B0 ????????????????        	resq 1
   199                                  free_var_55:	; location of eq?
   200 000001B8 ????????????????        	resq 1
   201                                  
   202                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   203                                  global main
   204                                  section .text
   205                                  main:
   206 00000000 C8000000                        enter 0, 0
   207                                          
   208                                  	; building closure for null?
   209 00000004 48BF-                   	mov rdi, free_var_0
   209 00000006 [0000000000000000] 
   210 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   210 00000010 [F00C000000000000] 
   211 00000018 E8FC0B0000              	call bind_primitive
   212                                  
   213                                  	; building closure for pair?
   214 0000001D 48BF-                   	mov rdi, free_var_1
   214 0000001F [0800000000000000] 
   215 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   215 00000029 [260D000000000000] 
   216 00000031 E8E30B0000              	call bind_primitive
   217                                  
   218                                  	; building closure for void?
   219 00000036 48BF-                   	mov rdi, free_var_2
   219 00000038 [1000000000000000] 
   220 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   220 00000042 [5C0D000000000000] 
   221 0000004A E8CA0B0000              	call bind_primitive
   222                                  
   223                                  	; building closure for char?
   224 0000004F 48BF-                   	mov rdi, free_var_3
   224 00000051 [1800000000000000] 
   225 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   225 0000005B [920D000000000000] 
   226 00000063 E8B10B0000              	call bind_primitive
   227                                  
   228                                  	; building closure for string?
   229 00000068 48BF-                   	mov rdi, free_var_4
   229 0000006A [2000000000000000] 
   230 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   230 00000074 [C80D000000000000] 
   231 0000007C E8980B0000              	call bind_primitive
   232                                  
   233                                  	; building closure for symbol?
   234 00000081 48BF-                   	mov rdi, free_var_5
   234 00000083 [2800000000000000] 
   235 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   235 0000008D [FE0D000000000000] 
   236 00000095 E87F0B0000              	call bind_primitive
   237                                  
   238                                  	; building closure for vector?
   239 0000009A 48BF-                   	mov rdi, free_var_6
   239 0000009C [3000000000000000] 
   240 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   240 000000A6 [340E000000000000] 
   241 000000AE E8660B0000              	call bind_primitive
   242                                  
   243                                  	; building closure for procedure?
   244 000000B3 48BF-                   	mov rdi, free_var_7
   244 000000B5 [3800000000000000] 
   245 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   245 000000BF [6A0E000000000000] 
   246 000000C7 E84D0B0000              	call bind_primitive
   247                                  
   248                                  	; building closure for real?
   249 000000CC 48BF-                   	mov rdi, free_var_8
   249 000000CE [4000000000000000] 
   250 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   250 000000D8 [A00E000000000000] 
   251 000000E0 E8340B0000              	call bind_primitive
   252                                  
   253                                  	; building closure for rational?
   254 000000E5 48BF-                   	mov rdi, free_var_9
   254 000000E7 [4800000000000000] 
   255 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   255 000000F1 [D60E000000000000] 
   256 000000F9 E81B0B0000              	call bind_primitive
   257                                  
   258                                  	; building closure for boolean?
   259 000000FE 48BF-                   	mov rdi, free_var_10
   259 00000100 [5000000000000000] 
   260 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   260 0000010A [0C0F000000000000] 
   261 00000112 E8020B0000              	call bind_primitive
   262                                  
   263                                  	; building closure for number?
   264 00000117 48BF-                   	mov rdi, free_var_11
   264 00000119 [5800000000000000] 
   265 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   265 00000123 [440F000000000000] 
   266 0000012B E8E90A0000              	call bind_primitive
   267                                  
   268                                  	; building closure for collection?
   269 00000130 48BF-                   	mov rdi, free_var_12
   269 00000132 [6000000000000000] 
   270 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   270 0000013C [7C0F000000000000] 
   271 00000144 E8D00A0000              	call bind_primitive
   272                                  
   273                                  	; building closure for cons
   274 00000149 48BF-                   	mov rdi, free_var_13
   274 0000014B [6800000000000000] 
   275 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   275 00000155 [B40F000000000000] 
   276 0000015D E8B70A0000              	call bind_primitive
   277                                  
   278                                  	; building closure for display-sexpr
   279 00000162 48BF-                   	mov rdi, free_var_14
   279 00000164 [7000000000000000] 
   280 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   280 0000016E [E80F000000000000] 
   281 00000176 E89E0A0000              	call bind_primitive
   282                                  
   283                                  	; building closure for write-char
   284 0000017B 48BF-                   	mov rdi, free_var_15
   284 0000017D [7800000000000000] 
   285 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   285 00000187 [1210000000000000] 
   286 0000018F E8850A0000              	call bind_primitive
   287                                  
   288                                  	; building closure for car
   289 00000194 48BF-                   	mov rdi, free_var_16
   289 00000196 [8000000000000000] 
   290 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   290 000001A0 [6910000000000000] 
   291 000001A8 E86C0A0000              	call bind_primitive
   292                                  
   293                                  	; building closure for cdr
   294 000001AD 48BF-                   	mov rdi, free_var_17
   294 000001AF [8800000000000000] 
   295 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   295 000001B9 [9110000000000000] 
   296 000001C1 E8530A0000              	call bind_primitive
   297                                  
   298                                  	; building closure for string-length
   299 000001C6 48BF-                   	mov rdi, free_var_18
   299 000001C8 [9000000000000000] 
   300 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   300 000001D2 [B910000000000000] 
   301 000001DA E83A0A0000              	call bind_primitive
   302                                  
   303                                  	; building closure for vector-length
   304 000001DF 48BF-                   	mov rdi, free_var_19
   304 000001E1 [9800000000000000] 
   305 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   305 000001EB [E610000000000000] 
   306 000001F3 E8210A0000              	call bind_primitive
   307                                  
   308                                  	; building closure for real->integer
   309 000001F8 48BF-                   	mov rdi, free_var_20
   309 000001FA [A000000000000000] 
   310 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   310 00000204 [1311000000000000] 
   311 0000020C E8080A0000              	call bind_primitive
   312                                  
   313                                  	; building closure for exit
   314 00000211 48BF-                   	mov rdi, free_var_21
   314 00000213 [A800000000000000] 
   315 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   315 0000021D [4611000000000000] 
   316 00000225 E8EF090000              	call bind_primitive
   317                                  
   318                                  	; building closure for integer->real
   319 0000022A 48BF-                   	mov rdi, free_var_22
   319 0000022C [B000000000000000] 
   320 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   320 00000236 [6311000000000000] 
   321 0000023E E8D6090000              	call bind_primitive
   322                                  
   323                                  	; building closure for rational->real
   324 00000243 48BF-                   	mov rdi, free_var_23
   324 00000245 [B800000000000000] 
   325 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   325 0000024F [A011000000000000] 
   326 00000257 E8BD090000              	call bind_primitive
   327                                  
   328                                  	; building closure for char->integer
   329 0000025C 48BF-                   	mov rdi, free_var_24
   329 0000025E [C000000000000000] 
   330 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   330 00000268 [DF11000000000000] 
   331 00000270 E8A4090000              	call bind_primitive
   332                                  
   333                                  	; building closure for integer->char
   334 00000275 48BF-                   	mov rdi, free_var_25
   334 00000277 [C800000000000000] 
   335 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   335 00000281 [1412000000000000] 
   336 00000289 E88B090000              	call bind_primitive
   337                                  
   338                                  	; building closure for trng
   339 0000028E 48BF-                   	mov rdi, free_var_26
   339 00000290 [D000000000000000] 
   340 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   340 0000029A [6E12000000000000] 
   341 000002A2 E872090000              	call bind_primitive
   342                                  
   343                                  	; building closure for zero?
   344 000002A7 48BF-                   	mov rdi, free_var_27
   344 000002A9 [D800000000000000] 
   345 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   345 000002B3 [9112000000000000] 
   346 000002BB E859090000              	call bind_primitive
   347                                  
   348                                  	; building closure for integer?
   349 000002C0 48BF-                   	mov rdi, free_var_28
   349 000002C2 [E000000000000000] 
   350 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   350 000002CC [EC12000000000000] 
   351 000002D4 E840090000              	call bind_primitive
   352                                  
   353                                  	; building closure for __bin-apply
   354 000002D9 48BF-                   	mov rdi, free_var_29
   354 000002DB [E800000000000000] 
   355 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   355 000002E5 [410C000000000000] 
   356 000002ED E827090000              	call bind_primitive
   357                                  
   358                                  	; building closure for __bin-add-rr
   359 000002F2 48BF-                   	mov rdi, free_var_30
   359 000002F4 [F000000000000000] 
   360 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   360 000002FE [2913000000000000] 
   361 00000306 E80E090000              	call bind_primitive
   362                                  
   363                                  	; building closure for __bin-sub-rr
   364 0000030B 48BF-                   	mov rdi, free_var_31
   364 0000030D [F800000000000000] 
   365 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   365 00000317 [6D13000000000000] 
   366 0000031F E8F5080000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-mul-rr
   369 00000324 48BF-                   	mov rdi, free_var_32
   369 00000326 [0001000000000000] 
   370 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   370 00000330 [B113000000000000] 
   371 00000338 E8DC080000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-div-rr
   374 0000033D 48BF-                   	mov rdi, free_var_33
   374 0000033F [0801000000000000] 
   375 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   375 00000349 [F513000000000000] 
   376 00000351 E8C3080000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-add-qq
   379 00000356 48BF-                   	mov rdi, free_var_34
   379 00000358 [1001000000000000] 
   380 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   380 00000362 [4714000000000000] 
   381 0000036A E8AA080000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-sub-qq
   384 0000036F 48BF-                   	mov rdi, free_var_35
   384 00000371 [1801000000000000] 
   385 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   385 0000037B [AF14000000000000] 
   386 00000383 E891080000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-mul-qq
   389 00000388 48BF-                   	mov rdi, free_var_36
   389 0000038A [2001000000000000] 
   390 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   390 00000394 [1715000000000000] 
   391 0000039C E878080000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-div-qq
   394 000003A1 48BF-                   	mov rdi, free_var_37
   394 000003A3 [2801000000000000] 
   395 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   395 000003AD [6F15000000000000] 
   396 000003B5 E85F080000              	call bind_primitive
   397                                  
   398                                  	; building closure for error
   399 000003BA 48BF-                   	mov rdi, free_var_38
   399 000003BC [3001000000000000] 
   400 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   400 000003C6 [3D16000000000000] 
   401 000003CE E846080000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-less-than-rr
   404 000003D3 48BF-                   	mov rdi, free_var_39
   404 000003D5 [3801000000000000] 
   405 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   405 000003DF [F416000000000000] 
   406 000003E7 E82D080000              	call bind_primitive
   407                                  
   408                                  	; building closure for __bin-less-than-qq
   409 000003EC 48BF-                   	mov rdi, free_var_40
   409 000003EE [4001000000000000] 
   410 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   410 000003F8 [4B17000000000000] 
   411 00000400 E814080000              	call bind_primitive
   412                                  
   413                                  	; building closure for __bin-equal-rr
   414 00000405 48BF-                   	mov rdi, free_var_41
   414 00000407 [4801000000000000] 
   415 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   415 00000411 [AE17000000000000] 
   416 00000419 E8FB070000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-equal-qq
   419 0000041E 48BF-                   	mov rdi, free_var_42
   419 00000420 [5001000000000000] 
   420 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   420 0000042A [0518000000000000] 
   421 00000432 E8E2070000              	call bind_primitive
   422                                  
   423                                  	; building closure for quotient
   424 00000437 48BF-                   	mov rdi, free_var_43
   424 00000439 [5801000000000000] 
   425 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   425 00000443 [6818000000000000] 
   426 0000044B E8C9070000              	call bind_primitive
   427                                  
   428                                  	; building closure for remainder
   429 00000450 48BF-                   	mov rdi, free_var_44
   429 00000452 [6001000000000000] 
   430 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   430 0000045C [CE18000000000000] 
   431 00000464 E8B0070000              	call bind_primitive
   432                                  
   433                                  	; building closure for set-car!
   434 00000469 48BF-                   	mov rdi, free_var_45
   434 0000046B [6801000000000000] 
   435 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   435 00000475 [3419000000000000] 
   436 0000047D E897070000              	call bind_primitive
   437                                  
   438                                  	; building closure for set-cdr!
   439 00000482 48BF-                   	mov rdi, free_var_46
   439 00000484 [7001000000000000] 
   440 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   440 0000048E [6A19000000000000] 
   441 00000496 E87E070000              	call bind_primitive
   442                                  
   443                                  	; building closure for string-ref
   444 0000049B 48BF-                   	mov rdi, free_var_47
   444 0000049D [7801000000000000] 
   445 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   445 000004A7 [A019000000000000] 
   446 000004AF E865070000              	call bind_primitive
   447                                  
   448                                  	; building closure for vector-ref
   449 000004B4 48BF-                   	mov rdi, free_var_48
   449 000004B6 [8001000000000000] 
   450 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   450 000004C0 [0B1A000000000000] 
   451 000004C8 E84C070000              	call bind_primitive
   452                                  
   453                                  	; building closure for vector-set!
   454 000004CD 48BF-                   	mov rdi, free_var_49
   454 000004CF [8801000000000000] 
   455 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   455 000004D9 [671A000000000000] 
   456 000004E1 E833070000              	call bind_primitive
   457                                  
   458                                  	; building closure for string-set!
   459 000004E6 48BF-                   	mov rdi, free_var_50
   459 000004E8 [9001000000000000] 
   460 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   460 000004F2 [D11A000000000000] 
   461 000004FA E81A070000              	call bind_primitive
   462                                  
   463                                  	; building closure for make-vector
   464 000004FF 48BF-                   	mov rdi, free_var_51
   464 00000501 [9801000000000000] 
   465 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   465 0000050B [461B000000000000] 
   466 00000513 E801070000              	call bind_primitive
   467                                  
   468                                  	; building closure for make-string
   469 00000518 48BF-                   	mov rdi, free_var_52
   469 0000051A [A001000000000000] 
   470 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   470 00000524 [B01B000000000000] 
   471 0000052C E8E8060000              	call bind_primitive
   472                                  
   473                                  	; building closure for numerator
   474 00000531 48BF-                   	mov rdi, free_var_53
   474 00000533 [A801000000000000] 
   475 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   475 0000053D [221C000000000000] 
   476 00000545 E8CF060000              	call bind_primitive
   477                                  
   478                                  	; building closure for denominator
   479 0000054A 48BF-                   	mov rdi, free_var_54
   479 0000054C [B001000000000000] 
   480 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   480 00000556 [4F1C000000000000] 
   481 0000055E E8B6060000              	call bind_primitive
   482                                  
   483                                  	; building closure for eq?
   484 00000563 48BF-                   	mov rdi, free_var_55
   484 00000565 [B801000000000000] 
   485 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   485 0000056F [7C1C000000000000] 
   486 00000577 E89D060000              	call bind_primitive
   487                                  
   488 0000057C 48B8-                   	mov rax,L_constants + 23
   488 0000057E [1700000000000000] 
   489 00000586 50                      	push rax
   490 00000587 488B0425[68000000]      	mov rax, qword [free_var_13]
   491 0000058F 50                      	push rax
   492 00000590 6A02                    	push 2
   493 00000592 488B0425[E8000000]      	mov rax, qword [free_var_29]
   494                                  	assert_closure(rax)
    42 0000059A 803805              <1>  cmp byte [%1], %2
    43 0000059D 0F85D9180000        <1>  jne L_error_incorrect_type
   495 000005A3 FF7001                  	push SOB_CLOSURE_ENV(rax) 
   496 000005A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
   497                                  
   498 000005A9 4889C7                  	mov rdi, rax
   499 000005AC E8E8000000              	call print_sexpr_if_not_void
   500                                  
   501 000005B1 48BF-                           mov rdi, fmt_memory_usage
   501 000005B3 [8700000000000000] 
   502 000005BB 488B3425[0E010000]              mov rsi, qword [top_of_memory]
   503 000005C3 4881EE[C0010000]                sub rsi, memory
   504 000005CA B800000000                      mov rax, 0
   505                                  	ENTER
    33 000005CF C8000000            <1>  enter 0, 0
    34 000005D3 4883E4F0            <1>  and rsp, ~15
   506 000005D7 E8(00000000)                    call printf
   507                                  	LEAVE
    38 000005DC C9                  <1>  leave
   508 000005DD C9                      	leave
   509 000005DE C3                      	ret
   510                                  
   511                                  L_error_non_closure:
   512 000005DF 488B3C25[00000000]              mov rdi, qword [stderr]
   513 000005E7 48BE-                           mov rsi, fmt_non_closure
   513 000005E9 [BE00000000000000] 
   514 000005F1 B800000000                      mov rax, 0
   515                                  	ENTER
    33 000005F6 C8000000            <1>  enter 0, 0
    34 000005FA 4883E4F0            <1>  and rsp, ~15
   516 000005FE E8(00000000)                    call fprintf
   517                                  	LEAVE
    38 00000603 C9                  <1>  leave
   518 00000604 48C7C0FEFFFFFF                  mov rax, -2
   519 0000060B E8(00000000)                    call exit
   520                                  
   521                                  L_error_improper_list:
   522 00000610 488B3C25[00000000]      	mov rdi, qword [stderr]
   523 00000618 48BE-                   	mov rsi, fmt_error_improper_list
   523 0000061A [E600000000000000] 
   524 00000622 B800000000              	mov rax, 0
   525                                  	ENTER
    33 00000627 C8000000            <1>  enter 0, 0
    34 0000062B 4883E4F0            <1>  and rsp, ~15
   526 0000062F E8(00000000)            	call fprintf
   527                                  	LEAVE
    38 00000634 C9                  <1>  leave
   528 00000635 48C7C0F9FFFFFF          	mov rax, -7
   529 0000063C E8(00000000)            	call exit
   530                                  
   531                                  L_error_incorrect_arity_simple:
   532 00000641 488B3C25[00000000]              mov rdi, qword [stderr]
   533 00000649 48BE-                           mov rsi, fmt_incorrect_arity_simple
   533 0000064B [2800000000000000] 
   534 00000653 EB12                            jmp L_error_incorrect_arity_common
   535                                  L_error_incorrect_arity_opt:
   536 00000655 488B3C25[00000000]              mov rdi, qword [stderr]
   537 0000065D 48BE-                           mov rsi, fmt_incorrect_arity_opt
   537 0000065F [5300000000000000] 
   538                                  L_error_incorrect_arity_common:
   539 00000667 5A                              pop rdx
   540 00000668 59                              pop rcx
   541 00000669 B800000000                      mov rax, 0
   542                                  	ENTER
    33 0000066E C8000000            <1>  enter 0, 0
    34 00000672 4883E4F0            <1>  and rsp, ~15
   543 00000676 E8(00000000)                    call fprintf
   544                                  	LEAVE
    38 0000067B C9                  <1>  leave
   545 0000067C 48C7C0FAFFFFFF                  mov rax, -6
   546 00000683 E8(00000000)                    call exit
   547                                  
   548                                  section .data
   549                                  fmt_incorrect_arity_simple:
   550 00000028 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   550 00000031 74656420256C642061-
   550 0000003A 7267756D656E74732C-
   550 00000043 206275742067697665-
   550 0000004C 6E20256C640A00     
   551                                  fmt_incorrect_arity_opt:
   552 00000053 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   552 0000005C 746564206174206C65-
   552 00000065 61737420256C642061-
   552 0000006E 7267756D656E74732C-
   552 00000077 206275742067697665-
   552 00000080 6E20256C640A00     
   553                                  fmt_memory_usage:
   554 00000087 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   554 00000090 6420256C6420627974-
   554 00000099 6573206F662064796E-
   554 000000A2 616D6963616C6C792D-
   554 000000AB 616C6C6F6361746564-
   554 000000B4 206D656D6F72790A0A-
   554 000000BD 00                 
   555                                  fmt_non_closure:
   556 000000BE 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   556 000000C7 7074696E6720746F20-
   556 000000D0 6170706C792061206E-
   556 000000D9 6F6E2D636C6F737572-
   556 000000E2 65210A00           
   557                                  fmt_error_improper_list:
   558 000000E6 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   558 000000EF 7267756D656E742069-
   558 000000F8 73206E6F7420612070-
   558 00000101 726F706572206C6973-
   558 0000010A 74210A00           
   559                                  
   560                                  section .bss
   561                                  memory:
   562 000001C0 <res 40000000h>         	resb gbytes(1)
   563                                  
   564                                  section .data
   565                                  top_of_memory:
   566 0000010E [C001000000000000]              dq memory
   567                                  
   568                                  section .text
   569                                  malloc:
   570 00000688 488B0425[0E010000]              mov rax, qword [top_of_memory]
   571 00000690 48013C25[0E010000]              add qword [top_of_memory], rdi
   572 00000698 C3                              ret
   573                                          
   574                                  print_sexpr_if_not_void:
   575 00000699 4881FF[00000000]        	cmp rdi, sob_void
   576 000006A0 7501                    	jne print_sexpr
   577 000006A2 C3                      	ret
   578                                  
   579                                  section .data
   580                                  fmt_void:
   581 00000116 233C766F69643E00        	db `#<void>\0`
   582                                  fmt_nil:
   583 0000011E 282900                  	db `()\0`
   584                                  fmt_boolean_false:
   585 00000121 236600                  	db `#f\0`
   586                                  fmt_boolean_true:
   587 00000124 237400                  	db `#t\0`
   588                                  fmt_char_backslash:
   589 00000127 235C5C00                	db `#\\\\\0`
   590                                  fmt_char_dquote:
   591 0000012B 235C2200                	db `#\\"\0`
   592                                  fmt_char_simple:
   593 0000012F 235C256300              	db `#\\%c\0`
   594                                  fmt_char_null:
   595 00000134 235C6E756C00            	db `#\\nul\0`
   596                                  fmt_char_bell:
   597 0000013A 235C62656C6C00          	db `#\\bell\0`
   598                                  fmt_char_backspace:
   599 00000141 235C6261636B737061-     	db `#\\backspace\0`
   599 0000014A 636500             
   600                                  fmt_char_tab:
   601 0000014D 235C74616200            	db `#\\tab\0`
   602                                  fmt_char_newline:
   603 00000153 235C6E65776C696E65-     	db `#\\newline\0`
   603 0000015C 00                 
   604                                  fmt_char_formfeed:
   605 0000015D 235C7061676500          	db `#\\page\0`
   606                                  fmt_char_return:
   607 00000164 235C72657475726E00      	db `#\\return\0`
   608                                  fmt_char_escape:
   609 0000016D 235C65736300            	db `#\\esc\0`
   610                                  fmt_char_space:
   611 00000173 235C737061636500        	db `#\\space\0`
   612                                  fmt_char_hex:
   613 0000017B 235C782530325800        	db `#\\x%02X\0`
   614                                  fmt_closure:
   615 00000183 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   615 0000018C 206174203078253038-
   615 00000195 5820656E763D307825-
   615 0000019E 30385820636F64653D-
   615 000001A7 3078253038583E00   
   616                                  fmt_lparen:
   617 000001AF 2800                    	db `(\0`
   618                                  fmt_dotted_pair:
   619 000001B1 202E2000                	db ` . \0`
   620                                  fmt_rparen:
   621 000001B5 2900                    	db `)\0`
   622                                  fmt_space:
   623 000001B7 2000                    	db ` \0`
   624                                  fmt_empty_vector:
   625 000001B9 23282900                	db `#()\0`
   626                                  fmt_vector:
   627 000001BD 232800                  	db `#(\0`
   628                                  fmt_real:
   629 000001C0 256600                  	db `%f\0`
   630                                  fmt_fraction:
   631 000001C3 256C642F256C6400        	db `%ld/%ld\0`
   632                                  fmt_zero:
   633 000001CB 3000                    	db `0\0`
   634                                  fmt_int:
   635 000001CD 256C6400                	db `%ld\0`
   636                                  fmt_unknown_sexpr_error:
   637 000001D1 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   637 000001DA 6F723A20556E6B6E6F-
   637 000001E3 776E2074797065206F-
   637 000001EC 662073657870722028-
   637 000001F5 3078253032582920   
   638 000001FD 617420616464726573-     	db `at address 0x%08X\n\n\0`
   638 00000206 73203078253038580A-
   638 0000020F 0A00               
   639                                  fmt_dquote:
   640 00000211 2200                    	db `\"\0`
   641                                  fmt_string_char:
   642 00000213 256300                          db `%c\0`
   643                                  fmt_string_char_7:
   644 00000216 5C6100                          db `\\a\0`
   645                                  fmt_string_char_8:
   646 00000219 5C6200                          db `\\b\0`
   647                                  fmt_string_char_9:
   648 0000021C 5C7400                          db `\\t\0`
   649                                  fmt_string_char_10:
   650 0000021F 5C6E00                          db `\\n\0`
   651                                  fmt_string_char_11:
   652 00000222 5C7600                          db `\\v\0`
   653                                  fmt_string_char_12:
   654 00000225 5C6600                          db `\\f\0`
   655                                  fmt_string_char_13:
   656 00000228 5C7200                          db `\\r\0`
   657                                  fmt_string_char_34:
   658 0000022B 5C2200                          db `\\"\0`
   659                                  fmt_string_char_92:
   660 0000022E 5C5C00                          db `\\\\\0`
   661                                  fmt_string_char_hex:
   662 00000231 5C7825583B00                    db `\\x%X;\0`
   663                                  
   664                                  section .text
   665                                  
   666                                  print_sexpr:
   667                                  	ENTER
    33 000006A3 C8000000            <1>  enter 0, 0
    34 000006A7 4883E4F0            <1>  and rsp, ~15
   668 000006AB 8A07                    	mov al, byte [rdi]
   669 000006AD 3C00                    	cmp al, T_void
   670 000006AF 744D                    	je .Lvoid
   671 000006B1 3C01                    	cmp al, T_nil
   672 000006B3 7458                    	je .Lnil
   673 000006B5 3C09                    	cmp al, T_boolean_false
   674 000006B7 7463                    	je .Lboolean_false
   675 000006B9 3C0A                    	cmp al, T_boolean_true
   676 000006BB 746E                    	je .Lboolean_true
   677 000006BD 3C02                    	cmp al, T_char
   678 000006BF 7479                    	je .Lchar
   679 000006C1 3C04                    	cmp al, T_symbol
   680 000006C3 0F84BB010000            	je .Lsymbol
   681 000006C9 3C21                    	cmp al, T_pair
   682 000006CB 0F84D6010000            	je .Lpair
   683 000006D1 3C22                    	cmp al, T_vector
   684 000006D3 0F849F020000            	je .Lvector
   685 000006D9 3C05                    	cmp al, T_closure
   686 000006DB 0F8489010000            	je .Lclosure
   687 000006E1 3C12                    	cmp al, T_real
   688 000006E3 0F8430030000            	je .Lreal
   689 000006E9 3C11                    	cmp al, T_rational
   690 000006EB 0F8456030000            	je .Lrational
   691 000006F1 3C03                    	cmp al, T_string
   692 000006F3 0F848F030000            	je .Lstring
   693                                  
   694 000006F9 E9C7040000              	jmp .Lunknown_sexpr_type
   695                                  
   696                                  .Lvoid:
   697 000006FE 48BF-                   	mov rdi, fmt_void
   697 00000700 [1601000000000000] 
   698 00000708 E9F5040000              	jmp .Lemit
   699                                  
   700                                  .Lnil:
   701 0000070D 48BF-                   	mov rdi, fmt_nil
   701 0000070F [1E01000000000000] 
   702 00000717 E9E6040000              	jmp .Lemit
   703                                  
   704                                  .Lboolean_false:
   705 0000071C 48BF-                   	mov rdi, fmt_boolean_false
   705 0000071E [2101000000000000] 
   706 00000726 E9D7040000              	jmp .Lemit
   707                                  
   708                                  .Lboolean_true:
   709 0000072B 48BF-                   	mov rdi, fmt_boolean_true
   709 0000072D [2401000000000000] 
   710 00000735 E9C8040000              	jmp .Lemit
   711                                  
   712                                  .Lchar:
   713 0000073A 8A4701                  	mov al, byte [rdi + 1]
   714 0000073D 3C20                    	cmp al, ' '
   715 0000073F 7E28                    	jle .Lchar_whitespace
   716 00000741 3C5C                    	cmp al, 92 		; backslash
   717 00000743 0F847C000000            	je .Lchar_backslash
   718 00000749 3C22                    	cmp al, '"'
   719 0000074B 0F8483000000            	je .Lchar_dquote
   720 00000751 4825FF000000            	and rax, 255
   721 00000757 48BF-                   	mov rdi, fmt_char_simple
   721 00000759 [2F01000000000000] 
   722 00000761 4889C6                  	mov rsi, rax
   723 00000764 E999040000              	jmp .Lemit
   724                                  
   725                                  .Lchar_whitespace:
   726 00000769 3C00                    	cmp al, 0
   727 0000076B 7476                    	je .Lchar_null
   728 0000076D 3C07                    	cmp al, 7
   729 0000076F 0F847D000000            	je .Lchar_bell
   730 00000775 3C08                    	cmp al, 8
   731 00000777 0F8484000000            	je .Lchar_backspace
   732 0000077D 3C09                    	cmp al, 9
   733 0000077F 0F848B000000            	je .Lchar_tab
   734 00000785 3C0A                    	cmp al, 10
   735 00000787 0F8492000000            	je .Lchar_newline
   736 0000078D 3C0C                    	cmp al, 12
   737 0000078F 0F8499000000            	je .Lchar_formfeed
   738 00000795 3C0D                    	cmp al, 13
   739 00000797 0F84A0000000            	je .Lchar_return
   740 0000079D 3C1B                    	cmp al, 27
   741 0000079F 0F84A7000000            	je .Lchar_escape
   742 000007A5 4825FF000000            	and rax, 255
   743 000007AB 3C20                    	cmp al, ' '
   744 000007AD 0F84A8000000            	je .Lchar_space
   745 000007B3 48BF-                   	mov rdi, fmt_char_hex
   745 000007B5 [7B01000000000000] 
   746 000007BD 4889C6                  	mov rsi, rax
   747 000007C0 E93D040000              	jmp .Lemit	
   748                                  
   749                                  .Lchar_backslash:
   750 000007C5 48BF-                   	mov rdi, fmt_char_backslash
   750 000007C7 [2701000000000000] 
   751 000007CF E92E040000              	jmp .Lemit
   752                                  
   753                                  .Lchar_dquote:
   754 000007D4 48BF-                   	mov rdi, fmt_char_dquote
   754 000007D6 [2B01000000000000] 
   755 000007DE E91F040000              	jmp .Lemit
   756                                  
   757                                  .Lchar_null:
   758 000007E3 48BF-                   	mov rdi, fmt_char_null
   758 000007E5 [3401000000000000] 
   759 000007ED E910040000              	jmp .Lemit
   760                                  
   761                                  .Lchar_bell:
   762 000007F2 48BF-                   	mov rdi, fmt_char_bell
   762 000007F4 [3A01000000000000] 
   763 000007FC E901040000              	jmp .Lemit
   764                                  
   765                                  .Lchar_backspace:
   766 00000801 48BF-                   	mov rdi, fmt_char_backspace
   766 00000803 [4101000000000000] 
   767 0000080B E9F2030000              	jmp .Lemit
   768                                  
   769                                  .Lchar_tab:
   770 00000810 48BF-                   	mov rdi, fmt_char_tab
   770 00000812 [4D01000000000000] 
   771 0000081A E9E3030000              	jmp .Lemit
   772                                  
   773                                  .Lchar_newline:
   774 0000081F 48BF-                   	mov rdi, fmt_char_newline
   774 00000821 [5301000000000000] 
   775 00000829 E9D4030000              	jmp .Lemit
   776                                  
   777                                  .Lchar_formfeed:
   778 0000082E 48BF-                   	mov rdi, fmt_char_formfeed
   778 00000830 [5D01000000000000] 
   779 00000838 E9C5030000              	jmp .Lemit
   780                                  
   781                                  .Lchar_return:
   782 0000083D 48BF-                   	mov rdi, fmt_char_return
   782 0000083F [6401000000000000] 
   783 00000847 E9B6030000              	jmp .Lemit
   784                                  
   785                                  .Lchar_escape:
   786 0000084C 48BF-                   	mov rdi, fmt_char_escape
   786 0000084E [6D01000000000000] 
   787 00000856 E9A7030000              	jmp .Lemit
   788                                  
   789                                  .Lchar_space:
   790 0000085B 48BF-                   	mov rdi, fmt_char_space
   790 0000085D [7301000000000000] 
   791 00000865 E998030000              	jmp .Lemit
   792                                  
   793                                  .Lclosure:
   794 0000086A 4889FE                  	mov rsi, qword rdi
   795 0000086D 48BF-                   	mov rdi, fmt_closure
   795 0000086F [8301000000000000] 
   796 00000877 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   797 0000087B 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   798 0000087F E97E030000              	jmp .Lemit
   799                                  
   800                                  .Lsymbol:
   801 00000884 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   802 00000888 BE01000000              	mov rsi, 1		 ; size = 1 byte
   803 0000088D 488B5701                	mov rdx, qword [rdi + 1] ; length
   804 00000891 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   805 00000895 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   806 0000089D E8(00000000)            	call fwrite
   807 000008A2 E970030000              	jmp .Lend
   808                                  	
   809                                  .Lpair:
   810 000008A7 57                      	push rdi
   811 000008A8 48BF-                   	mov rdi, fmt_lparen
   811 000008AA [AF01000000000000] 
   812 000008B2 B800000000              	mov rax, 0
   813                                          ENTER
    33 000008B7 C8000000            <1>  enter 0, 0
    34 000008BB 4883E4F0            <1>  and rsp, ~15
   814 000008BF E8(00000000)            	call printf
   815                                          LEAVE
    38 000008C4 C9                  <1>  leave
   816 000008C5 488B3C24                	mov rdi, qword [rsp] 	; pair
   817 000008C9 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   818 000008CD E8D1FDFFFF              	call print_sexpr
   819 000008D2 5F                      	pop rdi 		; pair
   820 000008D3 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   821                                  .Lcdr:
   822 000008D7 8A07                    	mov al, byte [rdi]
   823 000008D9 3C01                    	cmp al, T_nil
   824 000008DB 7447                    	je .Lcdr_nil
   825 000008DD 3C21                    	cmp al, T_pair
   826 000008DF 7462                    	je .Lcdr_pair
   827 000008E1 57                      	push rdi
   828 000008E2 48BF-                   	mov rdi, fmt_dotted_pair
   828 000008E4 [B101000000000000] 
   829 000008EC B800000000              	mov rax, 0
   830                                  	ENTER
    33 000008F1 C8000000            <1>  enter 0, 0
    34 000008F5 4883E4F0            <1>  and rsp, ~15
   831 000008F9 E8(00000000)            	call printf
   832                                  	LEAVE
    38 000008FE C9                  <1>  leave
   833 000008FF 5F                      	pop rdi
   834 00000900 E89EFDFFFF              	call print_sexpr
   835 00000905 48BF-                   	mov rdi, fmt_rparen
   835 00000907 [B501000000000000] 
   836 0000090F B800000000              	mov rax, 0
   837                                  	ENTER
    33 00000914 C8000000            <1>  enter 0, 0
    34 00000918 4883E4F0            <1>  and rsp, ~15
   838 0000091C E8(00000000)            	call printf
   839                                  	LEAVE
    38 00000921 C9                  <1>  leave
   840                                  	LEAVE
    38 00000922 C9                  <1>  leave
   841 00000923 C3                      	ret
   842                                  
   843                                  .Lcdr_nil:
   844 00000924 48BF-                   	mov rdi, fmt_rparen
   844 00000926 [B501000000000000] 
   845 0000092E B800000000              	mov rax, 0
   846                                  	ENTER
    33 00000933 C8000000            <1>  enter 0, 0
    34 00000937 4883E4F0            <1>  and rsp, ~15
   847 0000093B E8(00000000)            	call printf
   848                                  	LEAVE
    38 00000940 C9                  <1>  leave
   849                                  	LEAVE
    38 00000941 C9                  <1>  leave
   850 00000942 C3                      	ret
   851                                  
   852                                  .Lcdr_pair:
   853 00000943 57                      	push rdi
   854 00000944 48BF-                   	mov rdi, fmt_space
   854 00000946 [B701000000000000] 
   855 0000094E B800000000              	mov rax, 0
   856                                  	ENTER
    33 00000953 C8000000            <1>  enter 0, 0
    34 00000957 4883E4F0            <1>  and rsp, ~15
   857 0000095B E8(00000000)            	call printf
   858                                  	LEAVE
    38 00000960 C9                  <1>  leave
   859 00000961 488B3C24                	mov rdi, qword [rsp]
   860 00000965 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   861 00000969 E835FDFFFF              	call print_sexpr
   862 0000096E 5F                      	pop rdi
   863 0000096F 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   864 00000973 E95FFFFFFF              	jmp .Lcdr
   865                                  
   866                                  .Lvector:
   867 00000978 488B4701                	mov rax, qword [rdi + 1] ; length
   868 0000097C 4883F800                	cmp rax, 0
   869 00000980 0F8484000000            	je .Lvector_empty
   870 00000986 57                      	push rdi
   871 00000987 48BF-                   	mov rdi, fmt_vector
   871 00000989 [BD01000000000000] 
   872 00000991 B800000000              	mov rax, 0
   873                                  	ENTER
    33 00000996 C8000000            <1>  enter 0, 0
    34 0000099A 4883E4F0            <1>  and rsp, ~15
   874 0000099E E8(00000000)            	call printf
   875                                  	LEAVE
    38 000009A3 C9                  <1>  leave
   876 000009A4 488B3C24                	mov rdi, qword [rsp]
   877 000009A8 FF7701                  	push qword [rdi + 1]
   878 000009AB 6A01                    	push 1
   879 000009AD 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   880 000009B1 E8EDFCFFFF              	call print_sexpr
   881                                  .Lvector_loop:
   882                                  	; [rsp] index
   883                                  	; [rsp + 8*1] limit
   884                                  	; [rsp + 8*2] vector
   885 000009B6 488B0424                	mov rax, qword [rsp]
   886 000009BA 483B442408              	cmp rax, qword [rsp + 8*1]
   887 000009BF 7436                    	je .Lvector_end
   888 000009C1 48BF-                   	mov rdi, fmt_space
   888 000009C3 [B701000000000000] 
   889 000009CB B800000000              	mov rax, 0
   890                                  	ENTER
    33 000009D0 C8000000            <1>  enter 0, 0
    34 000009D4 4883E4F0            <1>  and rsp, ~15
   891 000009D8 E8(00000000)            	call printf
   892                                  	LEAVE
    38 000009DD C9                  <1>  leave
   893 000009DE 488B0424                	mov rax, qword [rsp]
   894 000009E2 488B5C2410              	mov rbx, qword [rsp + 8*2]
   895 000009E7 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   896 000009EC E8B2FCFFFF              	call print_sexpr
   897 000009F1 48FF0424                	inc qword [rsp]
   898 000009F5 EBBF                    	jmp .Lvector_loop
   899                                  
   900                                  .Lvector_end:
   901 000009F7 4883C418                	add rsp, 8*3
   902 000009FB 48BF-                   	mov rdi, fmt_rparen
   902 000009FD [B501000000000000] 
   903 00000A05 E9F8010000              	jmp .Lemit	
   904                                  
   905                                  .Lvector_empty:
   906 00000A0A 48BF-                   	mov rdi, fmt_empty_vector
   906 00000A0C [B901000000000000] 
   907 00000A14 E9E9010000              	jmp .Lemit
   908                                  
   909                                  .Lreal:
   910 00000A19 FF7701                  	push qword [rdi + 1]
   911 00000A1C F20F100424              	movsd xmm0, qword [rsp]
   912 00000A21 4883C408                	add rsp, 8*1
   913 00000A25 48BF-                   	mov rdi, fmt_real
   913 00000A27 [C001000000000000] 
   914 00000A2F B801000000              	mov rax, 1
   915                                  	ENTER
    33 00000A34 C8000000            <1>  enter 0, 0
    34 00000A38 4883E4F0            <1>  and rsp, ~15
   916 00000A3C E8(00000000)            	call printf
   917                                  	LEAVE
    38 00000A41 C9                  <1>  leave
   918 00000A42 E9D0010000              	jmp .Lend
   919                                  
   920                                  .Lrational:
   921 00000A47 488B7701                	mov rsi, qword [rdi + 1]
   922 00000A4B 488B5709                	mov rdx, qword [rdi + 1 + 8]
   923 00000A4F 4883FE00                	cmp rsi, 0
   924 00000A53 7415                    	je .Lrat_zero
   925 00000A55 4883FA01                	cmp rdx, 1
   926 00000A59 741E                    	je .Lrat_int
   927 00000A5B 48BF-                   	mov rdi, fmt_fraction
   927 00000A5D [C301000000000000] 
   928 00000A65 E998010000              	jmp .Lemit
   929                                  
   930                                  .Lrat_zero:
   931 00000A6A 48BF-                   	mov rdi, fmt_zero
   931 00000A6C [CB01000000000000] 
   932 00000A74 E989010000              	jmp .Lemit
   933                                  
   934                                  .Lrat_int:
   935 00000A79 48BF-                   	mov rdi, fmt_int
   935 00000A7B [CD01000000000000] 
   936 00000A83 E97A010000              	jmp .Lemit
   937                                  
   938                                  .Lstring:
   939 00000A88 488D4709                	lea rax, [rdi + 1 + 8]
   940 00000A8C 50                      	push rax
   941 00000A8D FF7701                  	push qword [rdi + 1]
   942 00000A90 48BF-                   	mov rdi, fmt_dquote
   942 00000A92 [1102000000000000] 
   943 00000A9A B800000000              	mov rax, 0
   944                                  	ENTER
    33 00000A9F C8000000            <1>  enter 0, 0
    34 00000AA3 4883E4F0            <1>  and rsp, ~15
   945 00000AA7 E8(00000000)            	call printf
   946                                  	LEAVE
    38 00000AAC C9                  <1>  leave
   947                                  .Lstring_loop:
   948                                  	; qword [rsp]: limit
   949                                  	; qword [rsp + 8*1]: char *
   950 00000AAD 48833C2400              	cmp qword [rsp], 0
   951 00000AB2 0F84FD000000            	je .Lstring_end
   952 00000AB8 488B442408              	mov rax, qword [rsp + 8*1]
   953 00000ABD 8A00                    	mov al, byte [rax]
   954 00000ABF 4825FF000000            	and rax, 255
   955 00000AC5 3C07                    	cmp al, 7
   956 00000AC7 7468                            je .Lstring_char_7
   957 00000AC9 3C08                            cmp al, 8
   958 00000ACB 7470                            je .Lstring_char_8
   959 00000ACD 3C09                            cmp al, 9
   960 00000ACF 7478                            je .Lstring_char_9
   961 00000AD1 3C0A                            cmp al, 10
   962 00000AD3 0F847C000000                    je .Lstring_char_10
   963 00000AD9 3C0B                            cmp al, 11
   964 00000ADB 0F8480000000                    je .Lstring_char_11
   965 00000AE1 3C0C                            cmp al, 12
   966 00000AE3 0F8484000000                    je .Lstring_char_12
   967 00000AE9 3C0D                            cmp al, 13
   968 00000AEB 0F8488000000                    je .Lstring_char_13
   969 00000AF1 3C22                            cmp al, 34
   970 00000AF3 0F848C000000                    je .Lstring_char_34
   971 00000AF9 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   973 00000AFB 3C20                            cmp al, ' '
   974 00000AFD 0F8CA0000000                    jl .Lstring_char_hex
   975 00000B03 48BF-                           mov rdi, fmt_string_char
   975 00000B05 [1302000000000000] 
   976 00000B0D 4889C6                          mov rsi, rax
   977                                  .Lstring_char_emit:
   978 00000B10 B800000000                      mov rax, 0
   979                                          ENTER
    33 00000B15 C8000000            <1>  enter 0, 0
    34 00000B19 4883E4F0            <1>  and rsp, ~15
   980 00000B1D E8(00000000)                    call printf
   981                                          LEAVE
    38 00000B22 C9                  <1>  leave
   982 00000B23 48FF0C24                        dec qword [rsp]
   983 00000B27 48FF442408                      inc qword [rsp + 8*1]
   984 00000B2C E97CFFFFFF                      jmp .Lstring_loop
   985                                  
   986                                  .Lstring_char_7:
   987 00000B31 48BF-                           mov rdi, fmt_string_char_7
   987 00000B33 [1602000000000000] 
   988 00000B3B EBD3                            jmp .Lstring_char_emit
   989                                  
   990                                  .Lstring_char_8:
   991 00000B3D 48BF-                           mov rdi, fmt_string_char_8
   991 00000B3F [1902000000000000] 
   992 00000B47 EBC7                            jmp .Lstring_char_emit
   993                                          
   994                                  .Lstring_char_9:
   995 00000B49 48BF-                           mov rdi, fmt_string_char_9
   995 00000B4B [1C02000000000000] 
   996 00000B53 EBBB                            jmp .Lstring_char_emit
   997                                  
   998                                  .Lstring_char_10:
   999 00000B55 48BF-                           mov rdi, fmt_string_char_10
   999 00000B57 [1F02000000000000] 
  1000 00000B5F EBAF                            jmp .Lstring_char_emit
  1001                                  
  1002                                  .Lstring_char_11:
  1003 00000B61 48BF-                           mov rdi, fmt_string_char_11
  1003 00000B63 [2202000000000000] 
  1004 00000B6B EBA3                            jmp .Lstring_char_emit
  1005                                  
  1006                                  .Lstring_char_12:
  1007 00000B6D 48BF-                           mov rdi, fmt_string_char_12
  1007 00000B6F [2502000000000000] 
  1008 00000B77 EB97                            jmp .Lstring_char_emit
  1009                                  
  1010                                  .Lstring_char_13:
  1011 00000B79 48BF-                           mov rdi, fmt_string_char_13
  1011 00000B7B [2802000000000000] 
  1012 00000B83 EB8B                            jmp .Lstring_char_emit
  1013                                  
  1014                                  .Lstring_char_34:
  1015 00000B85 48BF-                           mov rdi, fmt_string_char_34
  1015 00000B87 [2B02000000000000] 
  1016 00000B8F E97CFFFFFF                      jmp .Lstring_char_emit
  1017                                  
  1018                                  .Lstring_char_92:
  1019 00000B94 48BF-                           mov rdi, fmt_string_char_92
  1019 00000B96 [2E02000000000000] 
  1020 00000B9E E96DFFFFFF                      jmp .Lstring_char_emit
  1021                                  
  1022                                  .Lstring_char_hex:
  1023 00000BA3 48BF-                           mov rdi, fmt_string_char_hex
  1023 00000BA5 [3102000000000000] 
  1024 00000BAD 4889C6                          mov rsi, rax
  1025 00000BB0 E95BFFFFFF                      jmp .Lstring_char_emit        
  1026                                  
  1027                                  .Lstring_end:
  1028 00000BB5 4883C410                	add rsp, 8 * 2
  1029 00000BB9 48BF-                   	mov rdi, fmt_dquote
  1029 00000BBB [1102000000000000] 
  1030 00000BC3 EB3D                    	jmp .Lemit
  1031                                  
  1032                                  .Lunknown_sexpr_type:
  1033 00000BC5 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1033 00000BC7 [D101000000000000] 
  1034 00000BCF 4825FF000000            	and rax, 255
  1035 00000BD5 4889C2                  	mov rdx, rax
  1036 00000BD8 4889F9                  	mov rcx, rdi
  1037 00000BDB 488B3C25[00000000]      	mov rdi, qword [stderr]
  1038 00000BE3 B800000000              	mov rax, 0
  1039                                  	ENTER
    33 00000BE8 C8000000            <1>  enter 0, 0
    34 00000BEC 4883E4F0            <1>  and rsp, ~15
  1040 00000BF0 E8(00000000)            	call fprintf
  1041                                  	LEAVE
    38 00000BF5 C9                  <1>  leave
  1042 00000BF6 48C7C0FFFFFFFF          	mov rax, -1
  1043 00000BFD E8(00000000)            	call exit
  1044                                  
  1045                                  .Lemit:
  1046 00000C02 B800000000              	mov rax, 0
  1047                                  	ENTER
    33 00000C07 C8000000            <1>  enter 0, 0
    34 00000C0B 4883E4F0            <1>  and rsp, ~15
  1048 00000C0F E8(00000000)            	call printf
  1049                                  	LEAVE
    38 00000C14 C9                  <1>  leave
  1050 00000C15 EB00                    	jmp .Lend
  1051                                  
  1052                                  .Lend:
  1053                                  	LEAVE
    38 00000C17 C9                  <1>  leave
  1054 00000C18 C3                      	ret
  1055                                  
  1056                                  ;;; rdi: address of free variable
  1057                                  ;;; rsi: address of code-pointer
  1058                                  bind_primitive:
  1059                                          ENTER
    33 00000C19 C8000000            <1>  enter 0, 0
    34 00000C1D 4883E4F0            <1>  and rsp, ~15
  1060 00000C21 57                              push rdi
  1061 00000C22 BF11000000                      mov rdi, (1 + 8 + 8)
  1062 00000C27 E85CFAFFFF                      call malloc
  1063 00000C2C 5F                              pop rdi
  1064 00000C2D C60005                          mov byte [rax], T_closure
  1065 00000C30 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1066 00000C38 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1067 00000C3C 488907                          mov qword [rdi], rax
  1068                                          LEAVE
    38 00000C3F C9                  <1>  leave
  1069 00000C40 C3                              ret
  1070                                  
  1071                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1072                                  L_code_ptr_bin_apply:
  1073 00000C41 C8000000                        enter 0, 0
  1074                                          ;finding the list's length
  1075                                          
  1076 00000C45 4831C9                          xor rcx, rcx ;0
  1077 00000C48 488B4528                        mov rax, qword [rbp + 8 * 5] ;rax = address of scmpair list
  1078                                          assert_pair(rax)
    42 00000C4C 803821              <1>  cmp byte [%1], %2
    43 00000C4F 0F8527120000        <1>  jne L_error_incorrect_type
  1079 00000C55 488B5801                        mov rbx ,SOB_PAIR_CAR(rax) ;node val
  1080                                          my_loop1:
  1081 00000C59 483D[01000000]                          cmp rax, sob_nil ;if nill
  1082 00000C5F 7417                                    je my_loop_end1 ;jmp end
  1083 00000C61 48FFC1                                  inc rcx 
  1084 00000C64 53                                      push rbx ;insrting val to stack
  1085                                                  assert_pair(rax)
    42 00000C65 803821              <1>  cmp byte [%1], %2
    43 00000C68 0F850E120000        <1>  jne L_error_incorrect_type
  1086 00000C6E 488B4009                                mov rax, SOB_PAIR_CDR(rax) ;next node
  1087 00000C72 488B5801                                mov rbx ,SOB_PAIR_CAR(rax) ;next val
  1088 00000C76 EBE1                                    jmp my_loop1
  1089                                          my_loop_end1:
  1090                                          
  1091                                          ;TODO: ecx = 0 ?
  1092                                  
  1093                                          ;make values in the opposite order:
  1094                                          ;1.pushing all argument one more time in the right order
  1095 00000C78 4889CB                          mov rbx, rcx ;count-up
  1096 00000C7B B900000000                      mov rcx, 0 
  1097 00000C80 4889E2                          mov rdx, rsp ;marking the begining of the second pushing
  1098                                          my_loop2:
  1099 00000C83 4839D9                                  cmp rcx, rbx ; if rcx = n
  1100 00000C86 740A                                    je my_loop_end2 ;then: jump to the end
  1101 00000C88 488B04CA                                mov rax, qword [rdx + 8 * rcx] ;else: rax = next arg in correct order
  1102 00000C8C 50                                      push rax
  1103 00000C8D 48FFC1                                  inc rcx
  1104 00000C90 EBF1                                    jmp my_loop2
  1105                                          my_loop_end2:
  1106                                          
  1107                                          ;2.overwriting element above by element below but in correct order
  1108 00000C92 488D14DD30000000                lea rdx, [8 * (rbx + 6)] ;nubmer of *bytes* we need to skip
  1109 00000C9A 488B7500                        mov rsi, qword [rbp + 8 * 0] ; save old rbp
  1110 00000C9E 488B7D08                        mov rdi, qword [rbp + 8 * 1] ; save return address
  1111 00000CA2 4C8B4520                        mov r8, qword [rbp + 8 * 4]  ; save function to apply
  1112 00000CA6 B900000000                      mov rcx, 0
  1113                                          my_loop3:
  1114 00000CAB 4839D9                                  cmp rcx, rbx ;if rcx = n
  1115 00000CAE 7417                                    je my_loop_end3 ;then: jump to the end
  1116 00000CB0 488B0424                                mov rax, qword [rsp + 8 * 0] ;else: get next arg in correct order
  1117 00000CB4 4C8D0C14                                lea r9, [rsp + rdx] ;address of arg that needs to be over written
  1118 00000CB8 498901                                  mov [r9], rax ;over writing arg in false order by arg with correct order
  1119 00000CBB 4883C408                                add rsp, 8 ;pop arg we used
  1120 00000CBF 48FFC1                                  inc rcx 
  1121 00000CC2 4831C0                                  xor rax, rax
  1122 00000CC5 EBE4                                    jmp my_loop3
  1123                                          my_loop_end3:
  1124                                          
  1125 00000CC7 4883F906                        cmp rcx, 6
  1126 00000CCB 7F11                            jg seven_or_more
  1127 00000CCD 488D24CC                        lea rsp, [rsp + 8 * rcx];pop all 1st time pushed args
  1128 00000CD1 48F7DB                          neg rbx 
  1129 00000CD4 4883C306                        add rbx, 6      ;sub 6 from num_of_args
  1130 00000CD8 488D24DC                        lea rsp, [rsp + 8 * rbx] ; pop rest of old frame 
  1131 00000CDC EB05                            jmp continu
  1132                                          seven_or_more:
  1133 00000CDE 488D642430                      lea rsp, [rsp + 8 * 6] ; pop rest of 1st time pushed args
  1134                                          continu:
  1135 00000CE3 51                              push rcx ;push number of arguments
  1136 00000CE4 41FF7001                        push SOB_CLOSURE_ENV(r8) ; push lex-env
  1137 00000CE8 57                              push rdi ; push old ret-add
  1138 00000CE9 4889F5                          mov rbp, rsi ;rbp = old-rbp
  1139 00000CEC 41FF6009                        jmp SOB_CLOSURE_CODE(r8) ; fun to apply
  1140                                  	
  1141                                  L_code_ptr_is_null:
  1142                                          ENTER
    33 00000CF0 C8000000            <1>  enter 0, 0
    34 00000CF4 4883E4F0            <1>  and rsp, ~15
  1143 00000CF8 48837D1801                      cmp COUNT, 1
  1144 00000CFD 0F85A5100000                    jne L_error_arg_count_1
  1145 00000D03 488B4520                        mov rax, PARAM(0)
  1146 00000D07 803801                          cmp byte [rax], T_nil
  1147 00000D0A 750C                            jne .L_false
  1148 00000D0C 48B8-                           mov rax, sob_boolean_true
  1148 00000D0E [0300000000000000] 
  1149 00000D16 EB0A                            jmp .L_end
  1150                                  .L_false:
  1151 00000D18 48B8-                           mov rax, sob_boolean_false
  1151 00000D1A [0200000000000000] 
  1152                                  .L_end:
  1153                                          LEAVE
    38 00000D22 C9                  <1>  leave
  1154 00000D23 C21800                          ret AND_KILL_FRAME(1)
  1155                                  
  1156                                  L_code_ptr_is_pair:
  1157                                          ENTER
    33 00000D26 C8000000            <1>  enter 0, 0
    34 00000D2A 4883E4F0            <1>  and rsp, ~15
  1158 00000D2E 48837D1801                      cmp COUNT, 1
  1159 00000D33 0F856F100000                    jne L_error_arg_count_1
  1160 00000D39 488B4520                        mov rax, PARAM(0)
  1161 00000D3D 803821                          cmp byte [rax], T_pair
  1162 00000D40 750C                            jne .L_false
  1163 00000D42 48B8-                           mov rax, sob_boolean_true
  1163 00000D44 [0300000000000000] 
  1164 00000D4C EB0A                            jmp .L_end
  1165                                  .L_false:
  1166 00000D4E 48B8-                           mov rax, sob_boolean_false
  1166 00000D50 [0200000000000000] 
  1167                                  .L_end:
  1168                                          LEAVE
    38 00000D58 C9                  <1>  leave
  1169 00000D59 C21800                          ret AND_KILL_FRAME(1)
  1170                                          
  1171                                  L_code_ptr_is_void:
  1172                                          ENTER
    33 00000D5C C8000000            <1>  enter 0, 0
    34 00000D60 4883E4F0            <1>  and rsp, ~15
  1173 00000D64 48837D1801                      cmp COUNT, 1
  1174 00000D69 0F8539100000                    jne L_error_arg_count_1
  1175 00000D6F 488B4520                        mov rax, PARAM(0)
  1176 00000D73 803800                          cmp byte [rax], T_void
  1177 00000D76 750C                            jne .L_false
  1178 00000D78 48B8-                           mov rax, sob_boolean_true
  1178 00000D7A [0300000000000000] 
  1179 00000D82 EB0A                            jmp .L_end
  1180                                  .L_false:
  1181 00000D84 48B8-                           mov rax, sob_boolean_false
  1181 00000D86 [0200000000000000] 
  1182                                  .L_end:
  1183                                          LEAVE
    38 00000D8E C9                  <1>  leave
  1184 00000D8F C21800                          ret AND_KILL_FRAME(1)
  1185                                  
  1186                                  L_code_ptr_is_char:
  1187                                          ENTER
    33 00000D92 C8000000            <1>  enter 0, 0
    34 00000D96 4883E4F0            <1>  and rsp, ~15
  1188 00000D9A 48837D1801                      cmp COUNT, 1
  1189 00000D9F 0F8503100000                    jne L_error_arg_count_1
  1190 00000DA5 488B4520                        mov rax, PARAM(0)
  1191 00000DA9 803802                          cmp byte [rax], T_char
  1192 00000DAC 750C                            jne .L_false
  1193 00000DAE 48B8-                           mov rax, sob_boolean_true
  1193 00000DB0 [0300000000000000] 
  1194 00000DB8 EB0A                            jmp .L_end
  1195                                  .L_false:
  1196 00000DBA 48B8-                           mov rax, sob_boolean_false
  1196 00000DBC [0200000000000000] 
  1197                                  .L_end:
  1198                                          LEAVE
    38 00000DC4 C9                  <1>  leave
  1199 00000DC5 C21800                          ret AND_KILL_FRAME(1)
  1200                                  
  1201                                  L_code_ptr_is_string:
  1202                                          ENTER
    33 00000DC8 C8000000            <1>  enter 0, 0
    34 00000DCC 4883E4F0            <1>  and rsp, ~15
  1203 00000DD0 48837D1801                      cmp COUNT, 1
  1204 00000DD5 0F85CD0F0000                    jne L_error_arg_count_1
  1205 00000DDB 488B4520                        mov rax, PARAM(0)
  1206 00000DDF 803803                          cmp byte [rax], T_string
  1207 00000DE2 750C                            jne .L_false
  1208 00000DE4 48B8-                           mov rax, sob_boolean_true
  1208 00000DE6 [0300000000000000] 
  1209 00000DEE EB0A                            jmp .L_end
  1210                                  .L_false:
  1211 00000DF0 48B8-                           mov rax, sob_boolean_false
  1211 00000DF2 [0200000000000000] 
  1212                                  .L_end:
  1213                                          LEAVE
    38 00000DFA C9                  <1>  leave
  1214 00000DFB C21800                          ret AND_KILL_FRAME(1)
  1215                                  
  1216                                  L_code_ptr_is_symbol:
  1217                                          ENTER
    33 00000DFE C8000000            <1>  enter 0, 0
    34 00000E02 4883E4F0            <1>  and rsp, ~15
  1218 00000E06 48837D1801                      cmp COUNT, 1
  1219 00000E0B 0F85970F0000                    jne L_error_arg_count_1
  1220 00000E11 488B4520                        mov rax, PARAM(0)
  1221 00000E15 803804                          cmp byte [rax], T_symbol
  1222 00000E18 750C                            jne .L_false
  1223 00000E1A 48B8-                           mov rax, sob_boolean_true
  1223 00000E1C [0300000000000000] 
  1224 00000E24 EB0A                            jmp .L_end
  1225                                  .L_false:
  1226 00000E26 48B8-                           mov rax, sob_boolean_false
  1226 00000E28 [0200000000000000] 
  1227                                  .L_end:
  1228                                          LEAVE
    38 00000E30 C9                  <1>  leave
  1229 00000E31 C21800                          ret AND_KILL_FRAME(1)
  1230                                  
  1231                                  L_code_ptr_is_vector:
  1232                                          ENTER
    33 00000E34 C8000000            <1>  enter 0, 0
    34 00000E38 4883E4F0            <1>  and rsp, ~15
  1233 00000E3C 48837D1801                      cmp COUNT, 1
  1234 00000E41 0F85610F0000                    jne L_error_arg_count_1
  1235 00000E47 488B4520                        mov rax, PARAM(0)
  1236 00000E4B 803822                          cmp byte [rax], T_vector
  1237 00000E4E 750C                            jne .L_false
  1238 00000E50 48B8-                           mov rax, sob_boolean_true
  1238 00000E52 [0300000000000000] 
  1239 00000E5A EB0A                            jmp .L_end
  1240                                  .L_false:
  1241 00000E5C 48B8-                           mov rax, sob_boolean_false
  1241 00000E5E [0200000000000000] 
  1242                                  .L_end:
  1243                                          LEAVE
    38 00000E66 C9                  <1>  leave
  1244 00000E67 C21800                          ret AND_KILL_FRAME(1)
  1245                                  
  1246                                  L_code_ptr_is_closure:
  1247                                          ENTER
    33 00000E6A C8000000            <1>  enter 0, 0
    34 00000E6E 4883E4F0            <1>  and rsp, ~15
  1248 00000E72 48837D1801                      cmp COUNT, 1
  1249 00000E77 0F852B0F0000                    jne L_error_arg_count_1
  1250 00000E7D 488B4520                        mov rax, PARAM(0)
  1251 00000E81 803805                          cmp byte [rax], T_closure
  1252 00000E84 750C                            jne .L_false
  1253 00000E86 48B8-                           mov rax, sob_boolean_true
  1253 00000E88 [0300000000000000] 
  1254 00000E90 EB0A                            jmp .L_end
  1255                                  .L_false:
  1256 00000E92 48B8-                           mov rax, sob_boolean_false
  1256 00000E94 [0200000000000000] 
  1257                                  .L_end:
  1258                                          LEAVE
    38 00000E9C C9                  <1>  leave
  1259 00000E9D C21800                          ret AND_KILL_FRAME(1)
  1260                                  
  1261                                  L_code_ptr_is_real:
  1262                                          ENTER
    33 00000EA0 C8000000            <1>  enter 0, 0
    34 00000EA4 4883E4F0            <1>  and rsp, ~15
  1263 00000EA8 48837D1801                      cmp COUNT, 1
  1264 00000EAD 0F85F50E0000                    jne L_error_arg_count_1
  1265 00000EB3 488B4520                        mov rax, PARAM(0)
  1266 00000EB7 803812                          cmp byte [rax], T_real
  1267 00000EBA 750C                            jne .L_false
  1268 00000EBC 48B8-                           mov rax, sob_boolean_true
  1268 00000EBE [0300000000000000] 
  1269 00000EC6 EB0A                            jmp .L_end
  1270                                  .L_false:
  1271 00000EC8 48B8-                           mov rax, sob_boolean_false
  1271 00000ECA [0200000000000000] 
  1272                                  .L_end:
  1273                                          LEAVE
    38 00000ED2 C9                  <1>  leave
  1274 00000ED3 C21800                          ret AND_KILL_FRAME(1)
  1275                                  
  1276                                  L_code_ptr_is_rational:
  1277                                          ENTER
    33 00000ED6 C8000000            <1>  enter 0, 0
    34 00000EDA 4883E4F0            <1>  and rsp, ~15
  1278 00000EDE 48837D1801                      cmp COUNT, 1
  1279 00000EE3 0F85BF0E0000                    jne L_error_arg_count_1
  1280 00000EE9 488B4520                        mov rax, PARAM(0)
  1281 00000EED 803811                          cmp byte [rax], T_rational
  1282 00000EF0 750C                            jne .L_false
  1283 00000EF2 48B8-                           mov rax, sob_boolean_true
  1283 00000EF4 [0300000000000000] 
  1284 00000EFC EB0A                            jmp .L_end
  1285                                  .L_false:
  1286 00000EFE 48B8-                           mov rax, sob_boolean_false
  1286 00000F00 [0200000000000000] 
  1287                                  .L_end:
  1288                                          LEAVE
    38 00000F08 C9                  <1>  leave
  1289 00000F09 C21800                          ret AND_KILL_FRAME(1)
  1290                                  
  1291                                  L_code_ptr_is_boolean:
  1292                                          ENTER
    33 00000F0C C8000000            <1>  enter 0, 0
    34 00000F10 4883E4F0            <1>  and rsp, ~15
  1293 00000F14 48837D1801                      cmp COUNT, 1
  1294 00000F19 0F85890E0000                    jne L_error_arg_count_1
  1295 00000F1F 488B4520                        mov rax, PARAM(0)
  1296 00000F23 8A18                            mov bl, byte [rax]
  1297 00000F25 80E308                          and bl, T_boolean
  1298 00000F28 740C                            je .L_false
  1299 00000F2A 48B8-                           mov rax, sob_boolean_true
  1299 00000F2C [0300000000000000] 
  1300 00000F34 EB0A                            jmp .L_end
  1301                                  .L_false:
  1302 00000F36 48B8-                           mov rax, sob_boolean_false
  1302 00000F38 [0200000000000000] 
  1303                                  .L_end:
  1304                                          LEAVE
    38 00000F40 C9                  <1>  leave
  1305 00000F41 C21800                          ret AND_KILL_FRAME(1)
  1306                                          
  1307                                  L_code_ptr_is_number:
  1308                                          ENTER
    33 00000F44 C8000000            <1>  enter 0, 0
    34 00000F48 4883E4F0            <1>  and rsp, ~15
  1309 00000F4C 48837D1801                      cmp COUNT, 1
  1310 00000F51 0F85510E0000                    jne L_error_arg_count_1
  1311 00000F57 488B4520                        mov rax, PARAM(0)
  1312 00000F5B 8A18                            mov bl, byte [rax]
  1313 00000F5D 80E310                          and bl, T_number
  1314 00000F60 740C                            je .L_false
  1315 00000F62 48B8-                           mov rax, sob_boolean_true
  1315 00000F64 [0300000000000000] 
  1316 00000F6C EB0A                            jmp .L_end
  1317                                  .L_false:
  1318 00000F6E 48B8-                           mov rax, sob_boolean_false
  1318 00000F70 [0200000000000000] 
  1319                                  .L_end:
  1320                                          LEAVE
    38 00000F78 C9                  <1>  leave
  1321 00000F79 C21800                          ret AND_KILL_FRAME(1)
  1322                                          
  1323                                  L_code_ptr_is_collection:
  1324                                          ENTER
    33 00000F7C C8000000            <1>  enter 0, 0
    34 00000F80 4883E4F0            <1>  and rsp, ~15
  1325 00000F84 48837D1801                      cmp COUNT, 1
  1326 00000F89 0F85190E0000                    jne L_error_arg_count_1
  1327 00000F8F 488B4520                        mov rax, PARAM(0)
  1328 00000F93 8A18                            mov bl, byte [rax]
  1329 00000F95 80E320                          and bl, T_collection
  1330 00000F98 740C                            je .L_false
  1331 00000F9A 48B8-                           mov rax, sob_boolean_true
  1331 00000F9C [0300000000000000] 
  1332 00000FA4 EB0A                            jmp .L_end
  1333                                  .L_false:
  1334 00000FA6 48B8-                           mov rax, sob_boolean_false
  1334 00000FA8 [0200000000000000] 
  1335                                  .L_end:
  1336                                          LEAVE
    38 00000FB0 C9                  <1>  leave
  1337 00000FB1 C21800                          ret AND_KILL_FRAME(1)
  1338                                  
  1339                                  L_code_ptr_cons:
  1340                                          ENTER
    33 00000FB4 C8000000            <1>  enter 0, 0
    34 00000FB8 4883E4F0            <1>  and rsp, ~15
  1341 00000FBC 48837D1802                      cmp COUNT, 2
  1342 00000FC1 0F85160E0000                    jne L_error_arg_count_2
  1343 00000FC7 BF11000000                      mov rdi, (1 + 8 + 8)
  1344 00000FCC E8B7F6FFFF                      call malloc
  1345 00000FD1 C60021                          mov byte [rax], T_pair
  1346 00000FD4 488B5D20                        mov rbx, PARAM(0)
  1347 00000FD8 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1348 00000FDC 488B5D28                        mov rbx, PARAM(1)
  1349 00000FE0 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1350                                          LEAVE
    38 00000FE4 C9                  <1>  leave
  1351 00000FE5 C22000                          ret AND_KILL_FRAME(2)
  1352                                  
  1353                                  L_code_ptr_display_sexpr:
  1354                                          ENTER
    33 00000FE8 C8000000            <1>  enter 0, 0
    34 00000FEC 4883E4F0            <1>  and rsp, ~15
  1355 00000FF0 48837D1801                      cmp COUNT, 1
  1356 00000FF5 0F85AD0D0000                    jne L_error_arg_count_1
  1357 00000FFB 488B7D20                        mov rdi, PARAM(0)
  1358 00000FFF E89FF6FFFF                      call print_sexpr
  1359 00001004 48B8-                           mov rax, sob_void
  1359 00001006 [0000000000000000] 
  1360                                          LEAVE
    38 0000100E C9                  <1>  leave
  1361 0000100F C21800                          ret AND_KILL_FRAME(1)
  1362                                  
  1363                                  L_code_ptr_write_char:
  1364                                          ENTER
    33 00001012 C8000000            <1>  enter 0, 0
    34 00001016 4883E4F0            <1>  and rsp, ~15
  1365 0000101A 48837D1801                      cmp COUNT, 1
  1366 0000101F 0F85830D0000                    jne L_error_arg_count_1
  1367 00001025 488B4520                        mov rax, PARAM(0)
  1368                                          assert_char(rax)
    42 00001029 803802              <1>  cmp byte [%1], %2
    43 0000102C 0F854A0E0000        <1>  jne L_error_incorrect_type
  1369 00001032 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1370 00001035 4825FF000000                    and rax, 255
  1371 0000103B 48BF-                           mov rdi, fmt_char
  1371 0000103D [3702000000000000] 
  1372 00001045 4889C6                          mov rsi, rax
  1373 00001048 B800000000                      mov rax, 0
  1374                                  	ENTER
    33 0000104D C8000000            <1>  enter 0, 0
    34 00001051 4883E4F0            <1>  and rsp, ~15
  1375 00001055 E8(00000000)                    call printf
  1376                                  	LEAVE
    38 0000105A C9                  <1>  leave
  1377 0000105B 48B8-                           mov rax, sob_void
  1377 0000105D [0000000000000000] 
  1378                                          LEAVE
    38 00001065 C9                  <1>  leave
  1379 00001066 C21800                          ret AND_KILL_FRAME(1)
  1380                                  
  1381                                  L_code_ptr_car:
  1382                                          ENTER
    33 00001069 C8000000            <1>  enter 0, 0
    34 0000106D 4883E4F0            <1>  and rsp, ~15
  1383 00001071 48837D1801                      cmp COUNT, 1
  1384 00001076 0F852C0D0000                    jne L_error_arg_count_1
  1385 0000107C 488B4520                        mov rax, PARAM(0)
  1386                                          assert_pair(rax)
    42 00001080 803821              <1>  cmp byte [%1], %2
    43 00001083 0F85F30D0000        <1>  jne L_error_incorrect_type
  1387 00001089 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1388                                          LEAVE
    38 0000108D C9                  <1>  leave
  1389 0000108E C21800                          ret AND_KILL_FRAME(1)
  1390                                          
  1391                                  L_code_ptr_cdr:
  1392                                          ENTER
    33 00001091 C8000000            <1>  enter 0, 0
    34 00001095 4883E4F0            <1>  and rsp, ~15
  1393 00001099 48837D1801                      cmp COUNT, 1
  1394 0000109E 0F85040D0000                    jne L_error_arg_count_1
  1395 000010A4 488B4520                        mov rax, PARAM(0)
  1396                                          assert_pair(rax)
    42 000010A8 803821              <1>  cmp byte [%1], %2
    43 000010AB 0F85CB0D0000        <1>  jne L_error_incorrect_type
  1397 000010B1 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1398                                          LEAVE
    38 000010B5 C9                  <1>  leave
  1399 000010B6 C21800                          ret AND_KILL_FRAME(1)
  1400                                          
  1401                                  L_code_ptr_string_length:
  1402                                          ENTER
    33 000010B9 C8000000            <1>  enter 0, 0
    34 000010BD 4883E4F0            <1>  and rsp, ~15
  1403 000010C1 48837D1801                      cmp COUNT, 1
  1404 000010C6 0F85DC0C0000                    jne L_error_arg_count_1
  1405 000010CC 488B4520                        mov rax, PARAM(0)
  1406                                          assert_string(rax)
    42 000010D0 803803              <1>  cmp byte [%1], %2
    43 000010D3 0F85A30D0000        <1>  jne L_error_incorrect_type
  1407 000010D9 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1408 000010DD E83A0C0000                      call make_integer
  1409                                          LEAVE
    38 000010E2 C9                  <1>  leave
  1410 000010E3 C21800                          ret AND_KILL_FRAME(1)
  1411                                  
  1412                                  L_code_ptr_vector_length:
  1413                                          ENTER
    33 000010E6 C8000000            <1>  enter 0, 0
    34 000010EA 4883E4F0            <1>  and rsp, ~15
  1414 000010EE 48837D1801                      cmp COUNT, 1
  1415 000010F3 0F85AF0C0000                    jne L_error_arg_count_1
  1416 000010F9 488B4520                        mov rax, PARAM(0)
  1417                                          assert_vector(rax)
    42 000010FD 803822              <1>  cmp byte [%1], %2
    43 00001100 0F85760D0000        <1>  jne L_error_incorrect_type
  1418 00001106 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1419 0000110A E80D0C0000                      call make_integer
  1420                                          LEAVE
    38 0000110F C9                  <1>  leave
  1421 00001110 C21800                          ret AND_KILL_FRAME(1)
  1422                                  
  1423                                  L_code_ptr_real_to_integer:
  1424                                          ENTER
    33 00001113 C8000000            <1>  enter 0, 0
    34 00001117 4883E4F0            <1>  and rsp, ~15
  1425 0000111B 48837D1801                      cmp COUNT, 1
  1426 00001120 0F85820C0000                    jne L_error_arg_count_1
  1427 00001126 488B5D20                        mov rbx, PARAM(0)
  1428                                          assert_real(rbx)
    42 0000112A 803B12              <1>  cmp byte [%1], %2
    43 0000112D 0F85490D0000        <1>  jne L_error_incorrect_type
  1429 00001133 F20F104301                      movsd xmm0, qword [rbx + 1]
  1430 00001138 F2480F2CF8                      cvttsd2si rdi, xmm0
  1431 0000113D E8DA0B0000                      call make_integer
  1432                                          LEAVE
    38 00001142 C9                  <1>  leave
  1433 00001143 C21800                          ret AND_KILL_FRAME(1)
  1434                                  
  1435                                  L_code_ptr_exit:
  1436                                          ENTER
    33 00001146 C8000000            <1>  enter 0, 0
    34 0000114A 4883E4F0            <1>  and rsp, ~15
  1437 0000114E 48837D1800                      cmp COUNT, 0
  1438 00001153 0F851A0C0000                    jne L_error_arg_count_0
  1439 00001159 B800000000                      mov rax, 0
  1440 0000115E E8(00000000)                    call exit
  1441                                  
  1442                                  L_code_ptr_integer_to_real:
  1443                                          ENTER
    33 00001163 C8000000            <1>  enter 0, 0
    34 00001167 4883E4F0            <1>  and rsp, ~15
  1444 0000116B 48837D1801                      cmp COUNT, 1
  1445 00001170 0F85320C0000                    jne L_error_arg_count_1
  1446 00001176 488B4520                        mov rax, PARAM(0)
  1447                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000117A 803811              <2>  cmp byte [%1], %2
    43 0000117D 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 00001183 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001188 0F85EE0C0000        <1>  jne L_error_incorrect_type
  1448 0000118E FF7001                          push qword [rax + 1]
  1449 00001191 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1450 00001197 E8640B0000                      call make_real
  1451                                          LEAVE
    38 0000119C C9                  <1>  leave
  1452 0000119D C21800                          ret AND_KILL_FRAME(1)
  1453                                  
  1454                                  L_code_ptr_rational_to_real:
  1455                                          ENTER
    33 000011A0 C8000000            <1>  enter 0, 0
    34 000011A4 4883E4F0            <1>  and rsp, ~15
  1456 000011A8 48837D1801                      cmp COUNT, 1
  1457 000011AD 0F85F50B0000                    jne L_error_arg_count_1
  1458 000011B3 488B4520                        mov rax, PARAM(0)
  1459                                          assert_rational(rax)
    42 000011B7 803811              <1>  cmp byte [%1], %2
    43 000011BA 0F85BC0C0000        <1>  jne L_error_incorrect_type
  1460 000011C0 FF7001                          push qword [rax + 1]
  1461 000011C3 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1462 000011C9 FF7009                          push qword [rax + 1 + 8]
  1463 000011CC F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1464 000011D2 F20F5EC1                        divsd xmm0, xmm1
  1465 000011D6 E8250B0000                      call make_real
  1466                                          LEAVE
    38 000011DB C9                  <1>  leave
  1467 000011DC C21800                          ret AND_KILL_FRAME(1)
  1468                                  
  1469                                  L_code_ptr_char_to_integer:
  1470                                          ENTER
    33 000011DF C8000000            <1>  enter 0, 0
    34 000011E3 4883E4F0            <1>  and rsp, ~15
  1471 000011E7 48837D1801                      cmp COUNT, 1
  1472 000011EC 0F85B60B0000                    jne L_error_arg_count_1
  1473 000011F2 488B4520                        mov rax, PARAM(0)
  1474                                          assert_char(rax)
    42 000011F6 803802              <1>  cmp byte [%1], %2
    43 000011F9 0F857D0C0000        <1>  jne L_error_incorrect_type
  1475 000011FF 8A4001                          mov al, byte [rax + 1]
  1476 00001202 4825FF000000                    and rax, 255
  1477 00001208 4889C7                          mov rdi, rax
  1478 0000120B E80C0B0000                      call make_integer
  1479                                          LEAVE
    38 00001210 C9                  <1>  leave
  1480 00001211 C21800                          ret AND_KILL_FRAME(1)
  1481                                  
  1482                                  L_code_ptr_integer_to_char:
  1483                                          ENTER
    33 00001214 C8000000            <1>  enter 0, 0
    34 00001218 4883E4F0            <1>  and rsp, ~15
  1484 0000121C 48837D1801                      cmp COUNT, 1
  1485 00001221 0F85810B0000                    jne L_error_arg_count_1
  1486 00001227 488B4520                        mov rax, PARAM(0)
  1487                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000122B 803811              <2>  cmp byte [%1], %2
    43 0000122E 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001234 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001239 0F853D0C0000        <1>  jne L_error_incorrect_type
  1488 0000123F 488B5801                        mov rbx, qword [rax + 1]
  1489 00001243 4883FB00                        cmp rbx, 0
  1490 00001247 0F8EF50A0000                    jle L_error_integer_range
  1491 0000124D 4881FB00010000                  cmp rbx, 256
  1492 00001254 0F8DE80A0000                    jge L_error_integer_range
  1493 0000125A BF02000000                      mov rdi, (1 + 1)
  1494 0000125F E824F4FFFF                      call malloc
  1495 00001264 C60002                          mov byte [rax], T_char
  1496 00001267 885801                          mov byte [rax + 1], bl
  1497                                          LEAVE
    38 0000126A C9                  <1>  leave
  1498 0000126B C21800                          ret AND_KILL_FRAME(1)
  1499                                  
  1500                                  L_code_ptr_trng:
  1501                                          ENTER
    33 0000126E C8000000            <1>  enter 0, 0
    34 00001272 4883E4F0            <1>  and rsp, ~15
  1502 00001276 48837D1800                      cmp COUNT, 0
  1503 0000127B 0F85F20A0000                    jne L_error_arg_count_0
  1504 00001281 480FC7F7                        rdrand rdi
  1505 00001285 48D1EF                          shr rdi, 1
  1506 00001288 E88F0A0000                      call make_integer
  1507                                          LEAVE
    38 0000128D C9                  <1>  leave
  1508 0000128E C21000                          ret AND_KILL_FRAME(0)
  1509                                  
  1510                                  L_code_ptr_is_zero:
  1511                                          ENTER
    33 00001291 C8000000            <1>  enter 0, 0
    34 00001295 4883E4F0            <1>  and rsp, ~15
  1512 00001299 48837D1801                      cmp COUNT, 1
  1513 0000129E 0F85040B0000                    jne L_error_arg_count_1
  1514 000012A4 488B4520                        mov rax, PARAM(0)
  1515 000012A8 803811                          cmp byte [rax], T_rational
  1516 000012AB 740A                            je .L_rational
  1517 000012AD 803812                          cmp byte [rax], T_real
  1518 000012B0 740E                            je .L_real
  1519 000012B2 E9C50B0000                      jmp L_error_incorrect_type
  1520                                  .L_rational:
  1521 000012B7 4883780100                      cmp qword [rax + 1], 0
  1522 000012BC 7420                            je .L_zero
  1523 000012BE EB12                            jmp .L_not_zero
  1524                                  .L_real:
  1525 000012C0 660FEFC0                        pxor xmm0, xmm0
  1526 000012C4 FF7001                          push qword [rax + 1]
  1527 000012C7 F20F100C24                      movsd xmm1, qword [rsp]
  1528 000012CC 660F2EC1                        ucomisd xmm0, xmm1
  1529 000012D0 740C                            je .L_zero
  1530                                  .L_not_zero:
  1531 000012D2 48B8-                           mov rax, sob_boolean_false
  1531 000012D4 [0200000000000000] 
  1532 000012DC EB0A                            jmp .L_end
  1533                                  .L_zero:
  1534 000012DE 48B8-                           mov rax, sob_boolean_true
  1534 000012E0 [0300000000000000] 
  1535                                  .L_end:
  1536                                          LEAVE
    38 000012E8 C9                  <1>  leave
  1537 000012E9 C21800                          ret AND_KILL_FRAME(1)
  1538                                  
  1539                                  L_code_ptr_is_integer:
  1540                                          ENTER
    33 000012EC C8000000            <1>  enter 0, 0
    34 000012F0 4883E4F0            <1>  and rsp, ~15
  1541 000012F4 48837D1801                      cmp COUNT, 1
  1542 000012F9 0F85A90A0000                    jne L_error_arg_count_1
  1543 000012FF 488B4520                        mov rax, PARAM(0)
  1544 00001303 803811                          cmp byte [rax], T_rational
  1545 00001306 7513                            jne .L_false
  1546 00001308 4883780901                      cmp qword [rax + 1 + 8], 1
  1547 0000130D 750C                            jne .L_false
  1548 0000130F 48B8-                           mov rax, sob_boolean_true
  1548 00001311 [0300000000000000] 
  1549 00001319 EB0A                            jmp .L_exit
  1550                                  .L_false:
  1551 0000131B 48B8-                           mov rax, sob_boolean_false
  1551 0000131D [0200000000000000] 
  1552                                  .L_exit:
  1553                                          LEAVE
    38 00001325 C9                  <1>  leave
  1554 00001326 C21800                          ret AND_KILL_FRAME(1)
  1555                                  
  1556                                  L_code_ptr_raw_bin_add_rr:
  1557                                          ENTER
    33 00001329 C8000000            <1>  enter 0, 0
    34 0000132D 4883E4F0            <1>  and rsp, ~15
  1558 00001331 48837D1802                      cmp COUNT, 2
  1559 00001336 0F85A10A0000                    jne L_error_arg_count_2
  1560 0000133C 488B5D20                        mov rbx, PARAM(0)
  1561                                          assert_real(rbx)
    42 00001340 803B12              <1>  cmp byte [%1], %2
    43 00001343 0F85330B0000        <1>  jne L_error_incorrect_type
  1562 00001349 488B4D28                        mov rcx, PARAM(1)
  1563                                          assert_real(rcx)
    42 0000134D 803912              <1>  cmp byte [%1], %2
    43 00001350 0F85260B0000        <1>  jne L_error_incorrect_type
  1564 00001356 F20F104301                      movsd xmm0, qword [rbx + 1]
  1565 0000135B F20F104901                      movsd xmm1, qword [rcx + 1]
  1566 00001360 F20F58C1                        addsd xmm0, xmm1
  1567 00001364 E897090000                      call make_real
  1568                                          LEAVE
    38 00001369 C9                  <1>  leave
  1569 0000136A C22000                          ret AND_KILL_FRAME(2)
  1570                                  
  1571                                  L_code_ptr_raw_bin_sub_rr:
  1572                                          ENTER
    33 0000136D C8000000            <1>  enter 0, 0
    34 00001371 4883E4F0            <1>  and rsp, ~15
  1573 00001375 48837D1802                      cmp COUNT, 2
  1574 0000137A 0F855D0A0000                    jne L_error_arg_count_2
  1575 00001380 488B5D20                        mov rbx, PARAM(0)
  1576                                          assert_real(rbx)
    42 00001384 803B12              <1>  cmp byte [%1], %2
    43 00001387 0F85EF0A0000        <1>  jne L_error_incorrect_type
  1577 0000138D 488B4D28                        mov rcx, PARAM(1)
  1578                                          assert_real(rcx)
    42 00001391 803912              <1>  cmp byte [%1], %2
    43 00001394 0F85E20A0000        <1>  jne L_error_incorrect_type
  1579 0000139A F20F104301                      movsd xmm0, qword [rbx + 1]
  1580 0000139F F20F104901                      movsd xmm1, qword [rcx + 1]
  1581 000013A4 F20F5CC1                        subsd xmm0, xmm1
  1582 000013A8 E853090000                      call make_real
  1583                                          LEAVE
    38 000013AD C9                  <1>  leave
  1584 000013AE C22000                          ret AND_KILL_FRAME(2)
  1585                                  
  1586                                  L_code_ptr_raw_bin_mul_rr:
  1587                                          ENTER
    33 000013B1 C8000000            <1>  enter 0, 0
    34 000013B5 4883E4F0            <1>  and rsp, ~15
  1588 000013B9 48837D1802                      cmp COUNT, 2
  1589 000013BE 0F85190A0000                    jne L_error_arg_count_2
  1590 000013C4 488B5D20                        mov rbx, PARAM(0)
  1591                                          assert_real(rbx)
    42 000013C8 803B12              <1>  cmp byte [%1], %2
    43 000013CB 0F85AB0A0000        <1>  jne L_error_incorrect_type
  1592 000013D1 488B4D28                        mov rcx, PARAM(1)
  1593                                          assert_real(rcx)
    42 000013D5 803912              <1>  cmp byte [%1], %2
    43 000013D8 0F859E0A0000        <1>  jne L_error_incorrect_type
  1594 000013DE F20F104301                      movsd xmm0, qword [rbx + 1]
  1595 000013E3 F20F104901                      movsd xmm1, qword [rcx + 1]
  1596 000013E8 F20F59C1                        mulsd xmm0, xmm1
  1597 000013EC E80F090000                      call make_real
  1598                                          LEAVE
    38 000013F1 C9                  <1>  leave
  1599 000013F2 C22000                          ret AND_KILL_FRAME(2)
  1600                                  
  1601                                  L_code_ptr_raw_bin_div_rr:
  1602                                          ENTER
    33 000013F5 C8000000            <1>  enter 0, 0
    34 000013F9 4883E4F0            <1>  and rsp, ~15
  1603 000013FD 48837D1802                      cmp COUNT, 2
  1604 00001402 0F85D5090000                    jne L_error_arg_count_2
  1605 00001408 488B5D20                        mov rbx, PARAM(0)
  1606                                          assert_real(rbx)
    42 0000140C 803B12              <1>  cmp byte [%1], %2
    43 0000140F 0F85670A0000        <1>  jne L_error_incorrect_type
  1607 00001415 488B4D28                        mov rcx, PARAM(1)
  1608                                          assert_real(rcx)
    42 00001419 803912              <1>  cmp byte [%1], %2
    43 0000141C 0F855A0A0000        <1>  jne L_error_incorrect_type
  1609 00001422 F20F104301                      movsd xmm0, qword [rbx + 1]
  1610 00001427 F20F104901                      movsd xmm1, qword [rcx + 1]
  1611 0000142C 660FEFD2                        pxor xmm2, xmm2
  1612 00001430 660F2ECA                        ucomisd xmm1, xmm2
  1613 00001434 0F84730A0000                    je L_error_division_by_zero
  1614 0000143A F20F5EC1                        divsd xmm0, xmm1
  1615 0000143E E8BD080000                      call make_real
  1616                                          LEAVE
    38 00001443 C9                  <1>  leave
  1617 00001444 C22000                          ret AND_KILL_FRAME(2)
  1618                                  
  1619                                  L_code_ptr_raw_bin_add_qq:
  1620                                          ENTER
    33 00001447 C8000000            <1>  enter 0, 0
    34 0000144B 4883E4F0            <1>  and rsp, ~15
  1621 0000144F 48837D1802                      cmp COUNT, 2
  1622 00001454 0F8583090000                    jne L_error_arg_count_2
  1623 0000145A 4C8B4520                        mov r8, PARAM(0)
  1624                                          assert_rational(r8)
    42 0000145E 41803811            <1>  cmp byte [%1], %2
    43 00001462 0F85140A0000        <1>  jne L_error_incorrect_type
  1625 00001468 4C8B4D28                        mov r9, PARAM(1)
  1626                                          assert_rational(r9)
    42 0000146C 41803911            <1>  cmp byte [%1], %2
    43 00001470 0F85060A0000        <1>  jne L_error_incorrect_type
  1627 00001476 498B4001                        mov rax, qword [r8 + 1] ; num1
  1628 0000147A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1629 0000147E 4899                            cqo
  1630 00001480 48F7EB                          imul rbx
  1631 00001483 4889C6                          mov rsi, rax
  1632 00001486 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1633 0000148A 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1634 0000148E 4899                            cqo
  1635 00001490 48F7EB                          imul rbx
  1636 00001493 4801C6                          add rsi, rax
  1637 00001496 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1638 0000149A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1639 0000149E 4899                            cqo
  1640 000014A0 48F7EB                          imul rbx
  1641 000014A3 4889C7                          mov rdi, rax
  1642 000014A6 E827010000                      call normalize_rational
  1643                                          LEAVE
    38 000014AB C9                  <1>  leave
  1644 000014AC C22000                          ret AND_KILL_FRAME(2)
  1645                                  
  1646                                  L_code_ptr_raw_bin_sub_qq:
  1647                                          ENTER
    33 000014AF C8000000            <1>  enter 0, 0
    34 000014B3 4883E4F0            <1>  and rsp, ~15
  1648 000014B7 48837D1802                      cmp COUNT, 2
  1649 000014BC 0F851B090000                    jne L_error_arg_count_2
  1650 000014C2 4C8B4520                        mov r8, PARAM(0)
  1651                                          assert_rational(r8)
    42 000014C6 41803811            <1>  cmp byte [%1], %2
    43 000014CA 0F85AC090000        <1>  jne L_error_incorrect_type
  1652 000014D0 4C8B4D28                        mov r9, PARAM(1)
  1653                                          assert_rational(r9)
    42 000014D4 41803911            <1>  cmp byte [%1], %2
    43 000014D8 0F859E090000        <1>  jne L_error_incorrect_type
  1654 000014DE 498B4001                        mov rax, qword [r8 + 1] ; num1
  1655 000014E2 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1656 000014E6 4899                            cqo
  1657 000014E8 48F7EB                          imul rbx
  1658 000014EB 4889C6                          mov rsi, rax
  1659 000014EE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1660 000014F2 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1661 000014F6 4899                            cqo
  1662 000014F8 48F7EB                          imul rbx
  1663 000014FB 4829C6                          sub rsi, rax
  1664 000014FE 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1665 00001502 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1666 00001506 4899                            cqo
  1667 00001508 48F7EB                          imul rbx
  1668 0000150B 4889C7                          mov rdi, rax
  1669 0000150E E8BF000000                      call normalize_rational
  1670                                          LEAVE
    38 00001513 C9                  <1>  leave
  1671 00001514 C22000                          ret AND_KILL_FRAME(2)
  1672                                  
  1673                                  L_code_ptr_raw_bin_mul_qq:
  1674                                          ENTER
    33 00001517 C8000000            <1>  enter 0, 0
    34 0000151B 4883E4F0            <1>  and rsp, ~15
  1675 0000151F 48837D1802                      cmp COUNT, 2
  1676 00001524 0F85B3080000                    jne L_error_arg_count_2
  1677 0000152A 4C8B4520                        mov r8, PARAM(0)
  1678                                          assert_rational(r8)
    42 0000152E 41803811            <1>  cmp byte [%1], %2
    43 00001532 0F8544090000        <1>  jne L_error_incorrect_type
  1679 00001538 4C8B4D28                        mov r9, PARAM(1)
  1680                                          assert_rational(r9)
    42 0000153C 41803911            <1>  cmp byte [%1], %2
    43 00001540 0F8536090000        <1>  jne L_error_incorrect_type
  1681 00001546 498B4001                        mov rax, qword [r8 + 1] ; num1
  1682 0000154A 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1683 0000154E 4899                            cqo
  1684 00001550 48F7EB                          imul rbx
  1685 00001553 4889C6                          mov rsi, rax
  1686 00001556 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1687 0000155A 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1688 0000155E 4899                            cqo
  1689 00001560 48F7EB                          imul rbx
  1690 00001563 4889C7                          mov rdi, rax
  1691 00001566 E867000000                      call normalize_rational
  1692                                          LEAVE
    38 0000156B C9                  <1>  leave
  1693 0000156C C22000                          ret AND_KILL_FRAME(2)
  1694                                          
  1695                                  L_code_ptr_raw_bin_div_qq:
  1696                                          ENTER
    33 0000156F C8000000            <1>  enter 0, 0
    34 00001573 4883E4F0            <1>  and rsp, ~15
  1697 00001577 48837D1802                      cmp COUNT, 2
  1698 0000157C 0F855B080000                    jne L_error_arg_count_2
  1699 00001582 4C8B4520                        mov r8, PARAM(0)
  1700                                          assert_rational(r8)
    42 00001586 41803811            <1>  cmp byte [%1], %2
    43 0000158A 0F85EC080000        <1>  jne L_error_incorrect_type
  1701 00001590 4C8B4D28                        mov r9, PARAM(1)
  1702                                          assert_rational(r9)
    42 00001594 41803911            <1>  cmp byte [%1], %2
    43 00001598 0F85DE080000        <1>  jne L_error_incorrect_type
  1703 0000159E 4983790100                      cmp qword [r9 + 1], 0
  1704 000015A3 0F8404090000                    je L_error_division_by_zero
  1705 000015A9 498B4001                        mov rax, qword [r8 + 1] ; num1
  1706 000015AD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1707 000015B1 4899                            cqo
  1708 000015B3 48F7EB                          imul rbx
  1709 000015B6 4889C6                          mov rsi, rax
  1710 000015B9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1711 000015BD 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1712 000015C1 4899                            cqo
  1713 000015C3 48F7EB                          imul rbx
  1714 000015C6 4889C7                          mov rdi, rax
  1715 000015C9 E804000000                      call normalize_rational
  1716                                          LEAVE
    38 000015CE C9                  <1>  leave
  1717 000015CF C22000                          ret AND_KILL_FRAME(2)
  1718                                          
  1719                                  normalize_rational:
  1720 000015D2 56                              push rsi
  1721 000015D3 57                              push rdi
  1722 000015D4 E839000000                      call gcd
  1723 000015D9 4889C3                          mov rbx, rax
  1724 000015DC 58                              pop rax
  1725 000015DD 4899                            cqo
  1726 000015DF 48F7FB                          idiv rbx
  1727 000015E2 4989C0                          mov r8, rax
  1728 000015E5 58                              pop rax
  1729 000015E6 4899                            cqo
  1730 000015E8 48F7FB                          idiv rbx
  1731 000015EB 4989C1                          mov r9, rax
  1732 000015EE BF11000000                      mov rdi, (1 + 8 + 8)
  1733 000015F3 E890F0FFFF                      call malloc
  1734 000015F8 C60011                          mov byte [rax], T_rational
  1735 000015FB 4C894801                        mov qword [rax + 1], r9
  1736 000015FF 4C894009                        mov qword [rax + 1 + 8], r8
  1737 00001603 C3                              ret
  1738                                  
  1739                                  iabs:
  1740 00001604 4889F8                          mov rax, rdi
  1741 00001607 4883F800                        cmp rax, 0
  1742 0000160B 7C01                            jl .Lneg
  1743 0000160D C3                              ret
  1744                                  .Lneg:
  1745 0000160E 48F7D8                          neg rax
  1746 00001611 C3                              ret
  1747                                  
  1748                                  gcd:
  1749 00001612 E8EDFFFFFF                      call iabs
  1750 00001617 4889C3                          mov rbx, rax
  1751 0000161A 4889F7                          mov rdi, rsi
  1752 0000161D E8E2FFFFFF                      call iabs
  1753 00001622 4883F800                        cmp rax, 0
  1754 00001626 7502                            jne .L0
  1755 00001628 4893                            xchg rax, rbx
  1756                                  .L0:
  1757 0000162A 4883FB00                        cmp rbx, 0
  1758 0000162E 740C                            je .L1
  1759 00001630 4899                            cqo
  1760 00001632 48F7F3                          div rbx
  1761 00001635 4889D0                          mov rax, rdx
  1762 00001638 4893                            xchg rax, rbx
  1763 0000163A EBEE                            jmp .L0
  1764                                  .L1:
  1765 0000163C C3                              ret
  1766                                  
  1767                                  L_code_ptr_error:
  1768                                          ENTER
    33 0000163D C8000000            <1>  enter 0, 0
    34 00001641 4883E4F0            <1>  and rsp, ~15
  1769 00001645 48837D1802                      cmp COUNT, 2
  1770 0000164A 0F858D070000                    jne L_error_arg_count_2
  1771 00001650 488B7520                        mov rsi, PARAM(0)
  1772                                          assert_symbol(rsi)
    42 00001654 803E04              <1>  cmp byte [%1], %2
    43 00001657 0F851F080000        <1>  jne L_error_incorrect_type
  1773 0000165D 488B7528                        mov rsi, PARAM(1)
  1774                                          assert_string(rsi)
    42 00001661 803E03              <1>  cmp byte [%1], %2
    43 00001664 0F8512080000        <1>  jne L_error_incorrect_type
  1775 0000166A 48BF-                           mov rdi, fmt_scheme_error_part_1
  1775 0000166C [6F03000000000000] 
  1776 00001674 B800000000                      mov rax, 0
  1777                                  	ENTER
    33 00001679 C8000000            <1>  enter 0, 0
    34 0000167D 4883E4F0            <1>  and rsp, ~15
  1778 00001681 E8(00000000)                    call printf
  1779                                  	LEAVE
    38 00001686 C9                  <1>  leave
  1780 00001687 488B7D20                        mov rdi, PARAM(0)
  1781 0000168B E813F0FFFF                      call print_sexpr
  1782 00001690 48BF-                           mov rdi, fmt_scheme_error_part_2
  1782 00001692 [8303000000000000] 
  1783 0000169A B800000000                      mov rax, 0
  1784                                  	ENTER
    33 0000169F C8000000            <1>  enter 0, 0
    34 000016A3 4883E4F0            <1>  and rsp, ~15
  1785 000016A7 E8(00000000)                    call printf
  1786                                  	LEAVE
    38 000016AC C9                  <1>  leave
  1787 000016AD 488B4528                        mov rax, PARAM(1)       ; sob_string
  1788 000016B1 BE01000000                      mov rsi, 1              ; size = 1 byte
  1789 000016B6 488B5001                        mov rdx, qword [rax + 1] ; length
  1790 000016BA 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1791 000016BE 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1792 000016C6 E8(00000000)                    call fwrite
  1793 000016CB 48BF-                           mov rdi, fmt_scheme_error_part_3
  1793 000016CD [C503000000000000] 
  1794 000016D5 B800000000                      mov rax, 0
  1795                                  	ENTER
    33 000016DA C8000000            <1>  enter 0, 0
    34 000016DE 4883E4F0            <1>  and rsp, ~15
  1796 000016E2 E8(00000000)                    call printf
  1797                                  	LEAVE
    38 000016E7 C9                  <1>  leave
  1798 000016E8 48C7C0F7FFFFFF                  mov rax, -9
  1799 000016EF E8(00000000)                    call exit
  1800                                  
  1801                                  L_code_ptr_raw_less_than_rr:
  1802                                          ENTER
    33 000016F4 C8000000            <1>  enter 0, 0
    34 000016F8 4883E4F0            <1>  and rsp, ~15
  1803 000016FC 48837D1802                      cmp COUNT, 2
  1804 00001701 0F85D6060000                    jne L_error_arg_count_2
  1805 00001707 488B7520                        mov rsi, PARAM(0)
  1806                                          assert_real(rsi)
    42 0000170B 803E12              <1>  cmp byte [%1], %2
    43 0000170E 0F8568070000        <1>  jne L_error_incorrect_type
  1807 00001714 488B7D28                        mov rdi, PARAM(1)
  1808                                          assert_real(rdi)
    42 00001718 803F12              <1>  cmp byte [%1], %2
    43 0000171B 0F855B070000        <1>  jne L_error_incorrect_type
  1809 00001721 F20F104601                      movsd xmm0, qword [rsi + 1]
  1810 00001726 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1811 0000172B 660F2FC1                        comisd xmm0, xmm1
  1812 0000172F 730C                            jae .L_false
  1813 00001731 48B8-                           mov rax, sob_boolean_true
  1813 00001733 [0300000000000000] 
  1814 0000173B EB0A                            jmp .L_exit
  1815                                  .L_false:
  1816 0000173D 48B8-                           mov rax, sob_boolean_false
  1816 0000173F [0200000000000000] 
  1817                                  .L_exit:
  1818                                          LEAVE
    38 00001747 C9                  <1>  leave
  1819 00001748 C22000                          ret AND_KILL_FRAME(2)
  1820                                          
  1821                                  L_code_ptr_raw_less_than_qq:
  1822                                          ENTER
    33 0000174B C8000000            <1>  enter 0, 0
    34 0000174F 4883E4F0            <1>  and rsp, ~15
  1823 00001753 48837D1802                      cmp COUNT, 2
  1824 00001758 0F857F060000                    jne L_error_arg_count_2
  1825 0000175E 488B7520                        mov rsi, PARAM(0)
  1826                                          assert_rational(rsi)
    42 00001762 803E11              <1>  cmp byte [%1], %2
    43 00001765 0F8511070000        <1>  jne L_error_incorrect_type
  1827 0000176B 488B7D28                        mov rdi, PARAM(1)
  1828                                          assert_rational(rdi)
    42 0000176F 803F11              <1>  cmp byte [%1], %2
    43 00001772 0F8504070000        <1>  jne L_error_incorrect_type
  1829 00001778 488B4601                        mov rax, qword [rsi + 1] ; num1
  1830 0000177C 4899                            cqo
  1831 0000177E 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1832 00001782 4889C1                          mov rcx, rax
  1833 00001785 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1834 00001789 4899                            cqo
  1835 0000178B 48F76F01                        imul qword [rdi + 1]          ; num2
  1836 0000178F 4829C1                          sub rcx, rax
  1837 00001792 7D0C                            jge .L_false
  1838 00001794 48B8-                           mov rax, sob_boolean_true
  1838 00001796 [0300000000000000] 
  1839 0000179E EB0A                            jmp .L_exit
  1840                                  .L_false:
  1841 000017A0 48B8-                           mov rax, sob_boolean_false
  1841 000017A2 [0200000000000000] 
  1842                                  .L_exit:
  1843                                          LEAVE
    38 000017AA C9                  <1>  leave
  1844 000017AB C22000                          ret AND_KILL_FRAME(2)
  1845                                  
  1846                                  L_code_ptr_raw_equal_rr:
  1847                                          ENTER
    33 000017AE C8000000            <1>  enter 0, 0
    34 000017B2 4883E4F0            <1>  and rsp, ~15
  1848 000017B6 48837D1802                      cmp COUNT, 2
  1849 000017BB 0F851C060000                    jne L_error_arg_count_2
  1850 000017C1 488B7520                        mov rsi, PARAM(0)
  1851                                          assert_real(rsi)
    42 000017C5 803E12              <1>  cmp byte [%1], %2
    43 000017C8 0F85AE060000        <1>  jne L_error_incorrect_type
  1852 000017CE 488B7D28                        mov rdi, PARAM(1)
  1853                                          assert_real(rdi)
    42 000017D2 803F12              <1>  cmp byte [%1], %2
    43 000017D5 0F85A1060000        <1>  jne L_error_incorrect_type
  1854 000017DB F20F104601                      movsd xmm0, qword [rsi + 1]
  1855 000017E0 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1856 000017E5 660F2FC1                        comisd xmm0, xmm1
  1857 000017E9 750C                            jne .L_false
  1858 000017EB 48B8-                           mov rax, sob_boolean_true
  1858 000017ED [0300000000000000] 
  1859 000017F5 EB0A                            jmp .L_exit
  1860                                  .L_false:
  1861 000017F7 48B8-                           mov rax, sob_boolean_false
  1861 000017F9 [0200000000000000] 
  1862                                  .L_exit:
  1863                                          LEAVE
    38 00001801 C9                  <1>  leave
  1864 00001802 C22000                          ret AND_KILL_FRAME(2)
  1865                                          
  1866                                  L_code_ptr_raw_equal_qq:
  1867                                          ENTER
    33 00001805 C8000000            <1>  enter 0, 0
    34 00001809 4883E4F0            <1>  and rsp, ~15
  1868 0000180D 48837D1802                      cmp COUNT, 2
  1869 00001812 0F85C5050000                    jne L_error_arg_count_2
  1870 00001818 488B7520                        mov rsi, PARAM(0)
  1871                                          assert_rational(rsi)
    42 0000181C 803E11              <1>  cmp byte [%1], %2
    43 0000181F 0F8557060000        <1>  jne L_error_incorrect_type
  1872 00001825 488B7D28                        mov rdi, PARAM(1)
  1873                                          assert_rational(rdi)
    42 00001829 803F11              <1>  cmp byte [%1], %2
    43 0000182C 0F854A060000        <1>  jne L_error_incorrect_type
  1874 00001832 488B4601                        mov rax, qword [rsi + 1] ; num1
  1875 00001836 4899                            cqo
  1876 00001838 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1877 0000183C 4889C1                          mov rcx, rax
  1878 0000183F 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1879 00001843 4899                            cqo
  1880 00001845 48F76F01                        imul qword [rdi + 1]          ; num2
  1881 00001849 4829C1                          sub rcx, rax
  1882 0000184C 750C                            jne .L_false
  1883 0000184E 48B8-                           mov rax, sob_boolean_true
  1883 00001850 [0300000000000000] 
  1884 00001858 EB0A                            jmp .L_exit
  1885                                  .L_false:
  1886 0000185A 48B8-                           mov rax, sob_boolean_false
  1886 0000185C [0200000000000000] 
  1887                                  .L_exit:
  1888                                          LEAVE
    38 00001864 C9                  <1>  leave
  1889 00001865 C22000                          ret AND_KILL_FRAME(2)
  1890                                  
  1891                                  L_code_ptr_quotient:
  1892                                          ENTER
    33 00001868 C8000000            <1>  enter 0, 0
    34 0000186C 4883E4F0            <1>  and rsp, ~15
  1893 00001870 48837D1802                      cmp COUNT, 2
  1894 00001875 0F8562050000                    jne L_error_arg_count_2
  1895 0000187B 488B7520                        mov rsi, PARAM(0)
  1896                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000187F 803E11              <2>  cmp byte [%1], %2
    43 00001882 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00001888 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000188D 0F85E9050000        <1>  jne L_error_incorrect_type
  1897 00001893 488B7D28                        mov rdi, PARAM(1)
  1898                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001897 803F11              <2>  cmp byte [%1], %2
    43 0000189A 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000018A0 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018A5 0F85D1050000        <1>  jne L_error_incorrect_type
  1899 000018AB 488B4601                        mov rax, qword [rsi + 1]
  1900 000018AF 488B5F01                        mov rbx, qword [rdi + 1]
  1901 000018B3 4883FB00                        cmp rbx, 0
  1902 000018B7 0F84F0050000                    je L_error_division_by_zero
  1903 000018BD 4899                            cqo
  1904 000018BF 48F7FB                          idiv rbx
  1905 000018C2 4889C7                          mov rdi, rax
  1906 000018C5 E852040000                      call make_integer
  1907                                          LEAVE
    38 000018CA C9                  <1>  leave
  1908 000018CB C22000                          ret AND_KILL_FRAME(2)
  1909                                          
  1910                                  L_code_ptr_remainder:
  1911                                          ENTER
    33 000018CE C8000000            <1>  enter 0, 0
    34 000018D2 4883E4F0            <1>  and rsp, ~15
  1912 000018D6 48837D1802                      cmp COUNT, 2
  1913 000018DB 0F85FC040000                    jne L_error_arg_count_2
  1914 000018E1 488B7520                        mov rsi, PARAM(0)
  1915                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018E5 803E11              <2>  cmp byte [%1], %2
    43 000018E8 0F858E050000        <2>  jne L_error_incorrect_type
    48 000018EE 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018F3 0F8583050000        <1>  jne L_error_incorrect_type
  1916 000018F9 488B7D28                        mov rdi, PARAM(1)
  1917                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000018FD 803F11              <2>  cmp byte [%1], %2
    43 00001900 0F8576050000        <2>  jne L_error_incorrect_type
    48 00001906 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000190B 0F856B050000        <1>  jne L_error_incorrect_type
  1918 00001911 488B4601                        mov rax, qword [rsi + 1]
  1919 00001915 488B5F01                        mov rbx, qword [rdi + 1]
  1920 00001919 4883FB00                        cmp rbx, 0
  1921 0000191D 0F848A050000                    je L_error_division_by_zero
  1922 00001923 4899                            cqo
  1923 00001925 48F7FB                          idiv rbx
  1924 00001928 4889D7                          mov rdi, rdx
  1925 0000192B E8EC030000                      call make_integer
  1926                                          LEAVE
    38 00001930 C9                  <1>  leave
  1927 00001931 C22000                          ret AND_KILL_FRAME(2)
  1928                                  
  1929                                  L_code_ptr_set_car:
  1930                                          ENTER
    33 00001934 C8000000            <1>  enter 0, 0
    34 00001938 4883E4F0            <1>  and rsp, ~15
  1931 0000193C 48837D1802                      cmp COUNT, 2
  1932 00001941 0F8596040000                    jne L_error_arg_count_2
  1933 00001947 488B4520                        mov rax, PARAM(0)
  1934                                          assert_pair(rax)
    42 0000194B 803821              <1>  cmp byte [%1], %2
    43 0000194E 0F8528050000        <1>  jne L_error_incorrect_type
  1935 00001954 488B5D28                        mov rbx, PARAM(1)
  1936 00001958 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1937 0000195C 48B8-                           mov rax, sob_void
  1937 0000195E [0000000000000000] 
  1938                                          LEAVE
    38 00001966 C9                  <1>  leave
  1939 00001967 C22000                          ret AND_KILL_FRAME(2)
  1940                                  
  1941                                  L_code_ptr_set_cdr:
  1942                                          ENTER
    33 0000196A C8000000            <1>  enter 0, 0
    34 0000196E 4883E4F0            <1>  and rsp, ~15
  1943 00001972 48837D1802                      cmp COUNT, 2
  1944 00001977 0F8560040000                    jne L_error_arg_count_2
  1945 0000197D 488B4520                        mov rax, PARAM(0)
  1946                                          assert_pair(rax)
    42 00001981 803821              <1>  cmp byte [%1], %2
    43 00001984 0F85F2040000        <1>  jne L_error_incorrect_type
  1947 0000198A 488B5D28                        mov rbx, PARAM(1)
  1948 0000198E 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1949 00001992 48B8-                           mov rax, sob_void
  1949 00001994 [0000000000000000] 
  1950                                          LEAVE
    38 0000199C C9                  <1>  leave
  1951 0000199D C22000                          ret AND_KILL_FRAME(2)
  1952                                  
  1953                                  L_code_ptr_string_ref:
  1954                                          ENTER
    33 000019A0 C8000000            <1>  enter 0, 0
    34 000019A4 4883E4F0            <1>  and rsp, ~15
  1955 000019A8 48837D1802                      cmp COUNT, 2
  1956 000019AD 0F852A040000                    jne L_error_arg_count_2
  1957 000019B3 488B7D20                        mov rdi, PARAM(0)
  1958                                          assert_string(rdi)
    42 000019B7 803F03              <1>  cmp byte [%1], %2
    43 000019BA 0F85BC040000        <1>  jne L_error_incorrect_type
  1959 000019C0 488B7528                        mov rsi, PARAM(1)
  1960                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019C4 803E11              <2>  cmp byte [%1], %2
    43 000019C7 0F85AF040000        <2>  jne L_error_incorrect_type
    48 000019CD 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019D2 0F85A4040000        <1>  jne L_error_incorrect_type
  1961 000019D8 488B5701                        mov rdx, qword [rdi + 1]
  1962 000019DC 488B4E01                        mov rcx, qword [rsi + 1]
  1963 000019E0 4839D1                          cmp rcx, rdx
  1964 000019E3 0F8D59030000                    jge L_error_integer_range
  1965 000019E9 4883F900                        cmp rcx, 0
  1966 000019ED 0F8C4F030000                    jl L_error_integer_range
  1967 000019F3 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1968 000019F7 BF02000000                      mov rdi, 2
  1969 000019FC E887ECFFFF                      call malloc
  1970 00001A01 C60002                          mov byte [rax], T_char
  1971 00001A04 885801                          mov byte [rax + 1], bl
  1972                                          LEAVE
    38 00001A07 C9                  <1>  leave
  1973 00001A08 C22000                          ret AND_KILL_FRAME(2)
  1974                                  
  1975                                  L_code_ptr_vector_ref:
  1976                                          ENTER
    33 00001A0B C8000000            <1>  enter 0, 0
    34 00001A0F 4883E4F0            <1>  and rsp, ~15
  1977 00001A13 48837D1802                      cmp COUNT, 2
  1978 00001A18 0F85BF030000                    jne L_error_arg_count_2
  1979 00001A1E 488B7D20                        mov rdi, PARAM(0)
  1980                                          assert_vector(rdi)
    42 00001A22 803F22              <1>  cmp byte [%1], %2
    43 00001A25 0F8551040000        <1>  jne L_error_incorrect_type
  1981 00001A2B 488B7528                        mov rsi, PARAM(1)
  1982                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A2F 803E11              <2>  cmp byte [%1], %2
    43 00001A32 0F8544040000        <2>  jne L_error_incorrect_type
    48 00001A38 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A3D 0F8539040000        <1>  jne L_error_incorrect_type
  1983 00001A43 488B5701                        mov rdx, qword [rdi + 1]
  1984 00001A47 488B4E01                        mov rcx, qword [rsi + 1]
  1985 00001A4B 4839D1                          cmp rcx, rdx
  1986 00001A4E 0F8DEE020000                    jge L_error_integer_range
  1987 00001A54 4883F900                        cmp rcx, 0
  1988 00001A58 0F8CE4020000                    jl L_error_integer_range
  1989 00001A5E 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1990                                          LEAVE
    38 00001A63 C9                  <1>  leave
  1991 00001A64 C22000                          ret AND_KILL_FRAME(2)
  1992                                  
  1993                                  L_code_ptr_vector_set:
  1994                                          ENTER
    33 00001A67 C8000000            <1>  enter 0, 0
    34 00001A6B 4883E4F0            <1>  and rsp, ~15
  1995 00001A6F 48837D1803                      cmp COUNT, 3
  1996 00001A74 0F85CD030000                    jne L_error_arg_count_3
  1997 00001A7A 488B7D20                        mov rdi, PARAM(0)
  1998                                          assert_vector(rdi)
    42 00001A7E 803F22              <1>  cmp byte [%1], %2
    43 00001A81 0F85F5030000        <1>  jne L_error_incorrect_type
  1999 00001A87 488B7528                        mov rsi, PARAM(1)
  2000                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001A8B 803E11              <2>  cmp byte [%1], %2
    43 00001A8E 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00001A94 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A99 0F85DD030000        <1>  jne L_error_incorrect_type
  2001 00001A9F 488B5701                        mov rdx, qword [rdi + 1]
  2002 00001AA3 488B4E01                        mov rcx, qword [rsi + 1]
  2003 00001AA7 4839D1                          cmp rcx, rdx
  2004 00001AAA 0F8D92020000                    jge L_error_integer_range
  2005 00001AB0 4883F900                        cmp rcx, 0
  2006 00001AB4 0F8C88020000                    jl L_error_integer_range
  2007 00001ABA 488B4530                        mov rax, PARAM(2)
  2008 00001ABE 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2009 00001AC3 48B8-                           mov rax, sob_void
  2009 00001AC5 [0000000000000000] 
  2010                                          LEAVE
    38 00001ACD C9                  <1>  leave
  2011 00001ACE C22800                          ret AND_KILL_FRAME(3)
  2012                                  
  2013                                  L_code_ptr_string_set:
  2014                                          ENTER
    33 00001AD1 C8000000            <1>  enter 0, 0
    34 00001AD5 4883E4F0            <1>  and rsp, ~15
  2015 00001AD9 48837D1803                      cmp COUNT, 3
  2016 00001ADE 0F8563030000                    jne L_error_arg_count_3
  2017 00001AE4 488B7D20                        mov rdi, PARAM(0)
  2018                                          assert_string(rdi)
    42 00001AE8 803F03              <1>  cmp byte [%1], %2
    43 00001AEB 0F858B030000        <1>  jne L_error_incorrect_type
  2019 00001AF1 488B7528                        mov rsi, PARAM(1)
  2020                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001AF5 803E11              <2>  cmp byte [%1], %2
    43 00001AF8 0F857E030000        <2>  jne L_error_incorrect_type
    48 00001AFE 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B03 0F8573030000        <1>  jne L_error_incorrect_type
  2021 00001B09 488B5701                        mov rdx, qword [rdi + 1]
  2022 00001B0D 488B4E01                        mov rcx, qword [rsi + 1]
  2023 00001B11 4839D1                          cmp rcx, rdx
  2024 00001B14 0F8D28020000                    jge L_error_integer_range
  2025 00001B1A 4883F900                        cmp rcx, 0
  2026 00001B1E 0F8C1E020000                    jl L_error_integer_range
  2027 00001B24 488B4530                        mov rax, PARAM(2)
  2028                                          assert_char(rax)
    42 00001B28 803802              <1>  cmp byte [%1], %2
    43 00001B2B 0F854B030000        <1>  jne L_error_incorrect_type
  2029 00001B31 8A4001                          mov al, byte [rax + 1]
  2030 00001B34 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2031 00001B38 48B8-                           mov rax, sob_void
  2031 00001B3A [0000000000000000] 
  2032                                          LEAVE
    38 00001B42 C9                  <1>  leave
  2033 00001B43 C22800                          ret AND_KILL_FRAME(3)
  2034                                  
  2035                                  L_code_ptr_make_vector:
  2036                                          ENTER
    33 00001B46 C8000000            <1>  enter 0, 0
    34 00001B4A 4883E4F0            <1>  and rsp, ~15
  2037 00001B4E 48837D1802                      cmp COUNT, 2
  2038 00001B53 0F8584020000                    jne L_error_arg_count_2
  2039 00001B59 488B4D20                        mov rcx, PARAM(0)
  2040                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001B5D 803911              <2>  cmp byte [%1], %2
    43 00001B60 0F8516030000        <2>  jne L_error_incorrect_type
    48 00001B66 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001B6B 0F850B030000        <1>  jne L_error_incorrect_type
  2041 00001B71 488B4901                        mov rcx, qword [rcx + 1]
  2042 00001B75 4883F900                        cmp rcx, 0
  2043 00001B79 0F8CC3010000                    jl L_error_integer_range
  2044 00001B7F 488B5528                        mov rdx, PARAM(1)
  2045 00001B83 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2046 00001B8B E8F8EAFFFF                      call malloc
  2047 00001B90 C60022                          mov byte [rax], T_vector
  2048 00001B93 48894801                        mov qword [rax + 1], rcx
  2049 00001B97 41B800000000                    mov r8, 0
  2050                                  .L0:
  2051 00001B9D 4939C8                          cmp r8, rcx
  2052 00001BA0 740A                            je .L1
  2053 00001BA2 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2054 00001BA7 49FFC0                          inc r8
  2055 00001BAA EBF1                            jmp .L0
  2056                                  .L1:
  2057                                          LEAVE
    38 00001BAC C9                  <1>  leave
  2058 00001BAD C22000                          ret AND_KILL_FRAME(2)
  2059                                          
  2060                                  L_code_ptr_make_string:
  2061                                          ENTER
    33 00001BB0 C8000000            <1>  enter 0, 0
    34 00001BB4 4883E4F0            <1>  and rsp, ~15
  2062 00001BB8 48837D1802                      cmp COUNT, 2
  2063 00001BBD 0F851A020000                    jne L_error_arg_count_2
  2064 00001BC3 488B4D20                        mov rcx, PARAM(0)
  2065                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001BC7 803911              <2>  cmp byte [%1], %2
    43 00001BCA 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00001BD0 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001BD5 0F85A1020000        <1>  jne L_error_incorrect_type
  2066 00001BDB 488B4901                        mov rcx, qword [rcx + 1]
  2067 00001BDF 4883F900                        cmp rcx, 0
  2068 00001BE3 0F8C59010000                    jl L_error_integer_range
  2069 00001BE9 488B5528                        mov rdx, PARAM(1)
  2070                                          assert_char(rdx)
    42 00001BED 803A02              <1>  cmp byte [%1], %2
    43 00001BF0 0F8586020000        <1>  jne L_error_incorrect_type
  2071 00001BF6 8A5201                          mov dl, byte [rdx + 1]
  2072 00001BF9 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2073 00001BFD E886EAFFFF                      call malloc
  2074 00001C02 C60003                          mov byte [rax], T_string
  2075 00001C05 48894801                        mov qword [rax + 1], rcx
  2076 00001C09 41B800000000                    mov r8, 0
  2077                                  .L0:
  2078 00001C0F 4939C8                          cmp r8, rcx
  2079 00001C12 740A                            je .L1
  2080 00001C14 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2081 00001C19 49FFC0                          inc r8
  2082 00001C1C EBF1                            jmp .L0
  2083                                  .L1:
  2084                                          LEAVE
    38 00001C1E C9                  <1>  leave
  2085 00001C1F C22000                          ret AND_KILL_FRAME(2)
  2086                                  
  2087                                  L_code_ptr_numerator:
  2088                                          ENTER
    33 00001C22 C8000000            <1>  enter 0, 0
    34 00001C26 4883E4F0            <1>  and rsp, ~15
  2089 00001C2A 48837D1801                      cmp COUNT, 1
  2090 00001C2F 0F8573010000                    jne L_error_arg_count_1
  2091 00001C35 488B4520                        mov rax, PARAM(0)
  2092                                          assert_rational(rax)
    42 00001C39 803811              <1>  cmp byte [%1], %2
    43 00001C3C 0F853A020000        <1>  jne L_error_incorrect_type
  2093 00001C42 488B7801                        mov rdi, qword [rax + 1]
  2094 00001C46 E8D1000000                      call make_integer
  2095                                          LEAVE
    38 00001C4B C9                  <1>  leave
  2096 00001C4C C21800                          ret AND_KILL_FRAME(1)
  2097                                          
  2098                                  L_code_ptr_denominator:
  2099                                          ENTER
    33 00001C4F C8000000            <1>  enter 0, 0
    34 00001C53 4883E4F0            <1>  and rsp, ~15
  2100 00001C57 48837D1801                      cmp COUNT, 1
  2101 00001C5C 0F8546010000                    jne L_error_arg_count_1
  2102 00001C62 488B4520                        mov rax, PARAM(0)
  2103                                          assert_rational(rax)
    42 00001C66 803811              <1>  cmp byte [%1], %2
    43 00001C69 0F850D020000        <1>  jne L_error_incorrect_type
  2104 00001C6F 488B7809                        mov rdi, qword [rax + 1 + 8]
  2105 00001C73 E8A4000000                      call make_integer
  2106                                          LEAVE
    38 00001C78 C9                  <1>  leave
  2107 00001C79 C21800                          ret AND_KILL_FRAME(1)
  2108                                  
  2109                                  L_code_ptr_eq:
  2110                                  	ENTER
    33 00001C7C C8000000            <1>  enter 0, 0
    34 00001C80 4883E4F0            <1>  and rsp, ~15
  2111 00001C84 48837D1802              	cmp COUNT, 2
  2112 00001C89 0F854E010000            	jne L_error_arg_count_2
  2113 00001C8F 488B7D20                	mov rdi, PARAM(0)
  2114 00001C93 488B7528                	mov rsi, PARAM(1)
  2115 00001C97 4839F7                  	cmp rdi, rsi
  2116 00001C9A 744A                    	je .L_eq_true
  2117 00001C9C 8A17                    	mov dl, byte [rdi]
  2118 00001C9E 3A16                    	cmp dl, byte [rsi]
  2119 00001CA0 7550                    	jne .L_eq_false
  2120 00001CA2 80FA02                  	cmp dl, T_char
  2121 00001CA5 7437                    	je .L_char
  2122 00001CA7 80FA04                  	cmp dl, T_symbol
  2123 00001CAA 742A                    	je .L_symbol
  2124 00001CAC 80FA12                  	cmp dl, T_real
  2125 00001CAF 741D                    	je .L_real
  2126 00001CB1 80FA11                  	cmp dl, T_rational
  2127 00001CB4 7402                    	je .L_rational
  2128 00001CB6 EB3A                    	jmp .L_eq_false
  2129                                  .L_rational:
  2130 00001CB8 488B4601                	mov rax, qword [rsi + 1]
  2131 00001CBC 483B4701                	cmp rax, qword [rdi + 1]
  2132 00001CC0 7530                    	jne .L_eq_false
  2133 00001CC2 488B4609                	mov rax, qword [rsi + 1 + 8]
  2134 00001CC6 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2135 00001CCA 7526                    	jne .L_eq_false
  2136 00001CCC EB18                    	jmp .L_eq_true
  2137                                  .L_real:
  2138 00001CCE 488B4601                	mov rax, qword [rsi + 1]
  2139 00001CD2 483B4701                	cmp rax, qword [rdi + 1]
  2140                                  .L_symbol:
  2141                                  	; never reached, because symbols are static!
  2142                                  	; but I'm keeping it in case, I'll ever change
  2143                                  	; the implementation
  2144 00001CD6 488B4601                	mov rax, qword [rsi + 1]
  2145 00001CDA 483B4701                	cmp rax, qword [rdi + 1]
  2146                                  .L_char:
  2147 00001CDE 8A5E01                  	mov bl, byte [rsi + 1]
  2148 00001CE1 3A5F01                  	cmp bl, byte [rdi + 1]
  2149 00001CE4 750C                    	jne .L_eq_false
  2150                                  .L_eq_true:
  2151 00001CE6 48B8-                   	mov rax, sob_boolean_true
  2151 00001CE8 [0300000000000000] 
  2152 00001CF0 EB0A                    	jmp .L_eq_exit
  2153                                  .L_eq_false:
  2154 00001CF2 48B8-                   	mov rax, sob_boolean_false
  2154 00001CF4 [0200000000000000] 
  2155                                  .L_eq_exit:
  2156                                  	LEAVE
    38 00001CFC C9                  <1>  leave
  2157 00001CFD C22000                  	ret AND_KILL_FRAME(2)
  2158                                  
  2159                                  make_real:
  2160                                          ENTER
    33 00001D00 C8000000            <1>  enter 0, 0
    34 00001D04 4883E4F0            <1>  and rsp, ~15
  2161 00001D08 BF09000000                      mov rdi, (1 + 8)
  2162 00001D0D E876E9FFFF                      call malloc
  2163 00001D12 C60012                          mov byte [rax], T_real
  2164 00001D15 F20F114001                      movsd qword [rax + 1], xmm0
  2165                                          LEAVE
    38 00001D1A C9                  <1>  leave
  2166 00001D1B C3                              ret
  2167                                          
  2168                                  make_integer:
  2169                                          ENTER
    33 00001D1C C8000000            <1>  enter 0, 0
    34 00001D20 4883E4F0            <1>  and rsp, ~15
  2170 00001D24 4889FE                          mov rsi, rdi
  2171 00001D27 BF11000000                      mov rdi, (1 + 8 + 8)
  2172 00001D2C E857E9FFFF                      call malloc
  2173 00001D31 C60011                          mov byte [rax], T_rational
  2174 00001D34 48897001                        mov qword [rax + 1], rsi
  2175 00001D38 48C7400901000000                mov qword [rax + 1 + 8], 1
  2176                                          LEAVE
    38 00001D40 C9                  <1>  leave
  2177 00001D41 C3                              ret
  2178                                          
  2179                                  L_error_integer_range:
  2180 00001D42 488B3C25[00000000]              mov rdi, qword [stderr]
  2181 00001D4A 48BE-                           mov rsi, fmt_integer_range
  2181 00001D4C [3C03000000000000] 
  2182 00001D54 B800000000                      mov rax, 0
  2183                                  	ENTER
    33 00001D59 C8000000            <1>  enter 0, 0
    34 00001D5D 4883E4F0            <1>  and rsp, ~15
  2184 00001D61 E8(00000000)                    call fprintf
  2185                                  	LEAVE
    38 00001D66 C9                  <1>  leave
  2186 00001D67 48C7C0FBFFFFFF                  mov rax, -5
  2187 00001D6E E8(00000000)                    call exit
  2188                                  
  2189                                  L_error_arg_count_0:
  2190 00001D73 488B3C25[00000000]              mov rdi, qword [stderr]
  2191 00001D7B 48BE-                           mov rsi, fmt_arg_count_0
  2191 00001D7D [3A02000000000000] 
  2192 00001D85 488B5518                        mov rdx, COUNT
  2193 00001D89 B800000000                      mov rax, 0
  2194                                  	ENTER
    33 00001D8E C8000000            <1>  enter 0, 0
    34 00001D92 4883E4F0            <1>  and rsp, ~15
  2195 00001D96 E8(00000000)                    call fprintf
  2196                                  	LEAVE
    38 00001D9B C9                  <1>  leave
  2197 00001D9C 48C7C0FDFFFFFF                  mov rax, -3
  2198 00001DA3 E8(00000000)                    call exit
  2199                                  
  2200                                  L_error_arg_count_1:
  2201 00001DA8 488B3C25[00000000]              mov rdi, qword [stderr]
  2202 00001DB0 48BE-                           mov rsi, fmt_arg_count_1
  2202 00001DB2 [6202000000000000] 
  2203 00001DBA 488B5518                        mov rdx, COUNT
  2204 00001DBE B800000000                      mov rax, 0
  2205                                  	ENTER
    33 00001DC3 C8000000            <1>  enter 0, 0
    34 00001DC7 4883E4F0            <1>  and rsp, ~15
  2206 00001DCB E8(00000000)                    call fprintf
  2207                                  	LEAVE
    38 00001DD0 C9                  <1>  leave
  2208 00001DD1 48C7C0FDFFFFFF                  mov rax, -3
  2209 00001DD8 E8(00000000)                    call exit
  2210                                  
  2211                                  L_error_arg_count_2:
  2212 00001DDD 488B3C25[00000000]              mov rdi, qword [stderr]
  2213 00001DE5 48BE-                           mov rsi, fmt_arg_count_2
  2213 00001DE7 [C802000000000000] 
  2214 00001DEF 488B5518                        mov rdx, COUNT
  2215 00001DF3 B800000000                      mov rax, 0
  2216                                  	ENTER
    33 00001DF8 C8000000            <1>  enter 0, 0
    34 00001DFC 4883E4F0            <1>  and rsp, ~15
  2217 00001E00 E8(00000000)                    call fprintf
  2218                                  	LEAVE
    38 00001E05 C9                  <1>  leave
  2219 00001E06 48C7C0FDFFFFFF                  mov rax, -3
  2220 00001E0D E8(00000000)                    call exit
  2221                                  
  2222                                  L_error_arg_count_12:
  2223 00001E12 488B3C25[00000000]              mov rdi, qword [stderr]
  2224 00001E1A 48BE-                           mov rsi, fmt_arg_count_12
  2224 00001E1C [8802000000000000] 
  2225 00001E24 488B5518                        mov rdx, COUNT
  2226 00001E28 B800000000                      mov rax, 0
  2227                                  	ENTER
    33 00001E2D C8000000            <1>  enter 0, 0
    34 00001E31 4883E4F0            <1>  and rsp, ~15
  2228 00001E35 E8(00000000)                    call fprintf
  2229                                  	LEAVE
    38 00001E3A C9                  <1>  leave
  2230 00001E3B 48C7C0FDFFFFFF                  mov rax, -3
  2231 00001E42 E8(00000000)                    call exit
  2232                                  
  2233                                  L_error_arg_count_3:
  2234 00001E47 488B3C25[00000000]              mov rdi, qword [stderr]
  2235 00001E4F 48BE-                           mov rsi, fmt_arg_count_3
  2235 00001E51 [EF02000000000000] 
  2236 00001E59 488B5518                        mov rdx, COUNT
  2237 00001E5D B800000000                      mov rax, 0
  2238                                  	ENTER
    33 00001E62 C8000000            <1>  enter 0, 0
    34 00001E66 4883E4F0            <1>  and rsp, ~15
  2239 00001E6A E8(00000000)                    call fprintf
  2240                                  	LEAVE
    38 00001E6F C9                  <1>  leave
  2241 00001E70 48C7C0FDFFFFFF                  mov rax, -3
  2242 00001E77 E8(00000000)                    call exit
  2243                                          
  2244                                  L_error_incorrect_type:
  2245 00001E7C 488B3C25[00000000]              mov rdi, qword [stderr]
  2246 00001E84 48BE-                           mov rsi, fmt_type
  2246 00001E86 [1803000000000000] 
  2247 00001E8E B800000000                      mov rax, 0
  2248                                  	ENTER
    33 00001E93 C8000000            <1>  enter 0, 0
    34 00001E97 4883E4F0            <1>  and rsp, ~15
  2249 00001E9B E8(00000000)                    call fprintf
  2250                                  	LEAVE
    38 00001EA0 C9                  <1>  leave
  2251 00001EA1 48C7C0FCFFFFFF                  mov rax, -4
  2252 00001EA8 E8(00000000)                    call exit
  2253                                  
  2254                                  L_error_division_by_zero:
  2255 00001EAD 488B3C25[00000000]              mov rdi, qword [stderr]
  2256 00001EB5 48BE-                           mov rsi, fmt_division_by_zero
  2256 00001EB7 [5903000000000000] 
  2257 00001EBF B800000000                      mov rax, 0
  2258                                  	ENTER
    33 00001EC4 C8000000            <1>  enter 0, 0
    34 00001EC8 4883E4F0            <1>  and rsp, ~15
  2259 00001ECC E8(00000000)                    call fprintf
  2260                                  	LEAVE
    38 00001ED1 C9                  <1>  leave
  2261 00001ED2 48C7C0F8FFFFFF                  mov rax, -8
  2262 00001ED9 E8(00000000)                    call exit
  2263                                  
  2264                                  section .data
  2265                                  fmt_char:
  2266 00000237 256300                          db `%c\0`
  2267                                  fmt_arg_count_0:
  2268 0000023A 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2268 00000243 74696E67207A65726F-
  2268 0000024C 20617267756D656E74-
  2268 00000255 732E20466F756E6420-
  2268 0000025E 25640A00           
  2269                                  fmt_arg_count_1:
  2270 00000262 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2270 0000026B 74696E67206F6E6520-
  2270 00000274 617267756D656E742E-
  2270 0000027D 20466F756E64202564-
  2270 00000286 0A00               
  2271                                  fmt_arg_count_12:
  2272 00000288 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2272 00000291 74696E67206F6E6520-
  2272 0000029A 726571756972656420-
  2272 000002A3 616E64206F6E65206F-
  2272 000002AC 7074696F6E616C2061-
  2272 000002B5 7267756D656E742E20-
  2272 000002BE 466F756E642025640A-
  2272 000002C7 00                 
  2273                                  fmt_arg_count_2:
  2274 000002C8 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2274 000002D1 74696E672074776F20-
  2274 000002DA 617267756D656E7473-
  2274 000002E3 2E20466F756E642025-
  2274 000002EC 640A00             
  2275                                  fmt_arg_count_3:
  2276 000002EF 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2276 000002F8 74696E672074687265-
  2276 00000301 6520617267756D656E-
  2276 0000030A 74732E20466F756E64-
  2276 00000313 2025640A00         
  2277                                  fmt_type:
  2278 00000318 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2278 00000321 696F6E207061737365-
  2278 0000032A 6420696E636F727265-
  2278 00000333 637420747970650A00 
  2279                                  fmt_integer_range:
  2280 0000033C 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2280 00000345 7265637420696E7465-
  2280 0000034E 6765722072616E6765-
  2280 00000357 0A00               
  2281                                  fmt_division_by_zero:
  2282 00000359 212121204469766973-             db `!!! Division by zero\n\0`
  2282 00000362 696F6E206279207A65-
  2282 0000036B 726F0A00           
  2283                                  fmt_scheme_error_part_1:
  2284 0000036F 0A2121212054686520-             db `\n!!! The procedure \0`
  2284 00000378 70726F636564757265-
  2284 00000381 2000               
  2285                                  fmt_scheme_error_part_2:
  2286 00000383 2061736B656420746F-             db ` asked to terminate the program\n`
  2286 0000038C 207465726D696E6174-
  2286 00000395 65207468652070726F-
  2286 0000039E 6772616D0A         
  2287 000003A3 202020207769746820-             db `    with the following message:\n\n\0`
  2287 000003AC 74686520666F6C6C6F-
  2287 000003B5 77696E67206D657373-
  2287 000003BE 6167653A0A0A00     
  2288                                  fmt_scheme_error_part_3:
  2289 000003C5 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2289 000003CE 210A0A00           
