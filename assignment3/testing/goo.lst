     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
<<<<<<< HEAD
    83 00000006 11                      	db T_rational	; 5
    84 00000007 050000000000000001-     	dq 5, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 7
    86 00000018 070000000000000001-     	dq 7, 1
    86 00000021 00000000000000     
    87 00000028 21                      	db T_pair	; (7)
    88 00000029 [1700000000000000]-     	dq L_constants + 23, L_constants + 1
    88 00000031 [0100000000000000] 
    89 00000039 21                      	db T_pair	; (5 7)
    90 0000003A [0600000000000000]-     	dq L_constants + 6, L_constants + 40
    90 00000042 [2800000000000000] 
    91                                  
    92                                  section .bss
    93                                  free_var_0:	; location of null?
    94 00000000 ????????????????        	resq 1
    95                                  free_var_1:	; location of pair?
    96 00000008 ????????????????        	resq 1
    97                                  free_var_2:	; location of void?
    98 00000010 ????????????????        	resq 1
    99                                  free_var_3:	; location of char?
   100 00000018 ????????????????        	resq 1
   101                                  free_var_4:	; location of string?
   102 00000020 ????????????????        	resq 1
   103                                  free_var_5:	; location of symbol?
   104 00000028 ????????????????        	resq 1
   105                                  free_var_6:	; location of vector?
   106 00000030 ????????????????        	resq 1
   107                                  free_var_7:	; location of procedure?
   108 00000038 ????????????????        	resq 1
   109                                  free_var_8:	; location of real?
   110 00000040 ????????????????        	resq 1
   111                                  free_var_9:	; location of rational?
   112 00000048 ????????????????        	resq 1
   113                                  free_var_10:	; location of boolean?
   114 00000050 ????????????????        	resq 1
   115                                  free_var_11:	; location of number?
   116 00000058 ????????????????        	resq 1
   117                                  free_var_12:	; location of collection?
   118 00000060 ????????????????        	resq 1
   119                                  free_var_13:	; location of cons
   120 00000068 ????????????????        	resq 1
   121                                  free_var_14:	; location of display-sexpr
   122 00000070 ????????????????        	resq 1
   123                                  free_var_15:	; location of write-char
   124 00000078 ????????????????        	resq 1
   125                                  free_var_16:	; location of car
   126 00000080 ????????????????        	resq 1
   127                                  free_var_17:	; location of cdr
   128 00000088 ????????????????        	resq 1
   129                                  free_var_18:	; location of string-length
   130 00000090 ????????????????        	resq 1
   131                                  free_var_19:	; location of vector-length
   132 00000098 ????????????????        	resq 1
   133                                  free_var_20:	; location of real->integer
   134 000000A0 ????????????????        	resq 1
   135                                  free_var_21:	; location of exit
   136 000000A8 ????????????????        	resq 1
   137                                  free_var_22:	; location of integer->real
   138 000000B0 ????????????????        	resq 1
   139                                  free_var_23:	; location of rational->real
   140 000000B8 ????????????????        	resq 1
   141                                  free_var_24:	; location of char->integer
   142 000000C0 ????????????????        	resq 1
   143                                  free_var_25:	; location of integer->char
   144 000000C8 ????????????????        	resq 1
   145                                  free_var_26:	; location of trng
   146 000000D0 ????????????????        	resq 1
   147                                  free_var_27:	; location of zero?
   148 000000D8 ????????????????        	resq 1
   149                                  free_var_28:	; location of integer?
   150 000000E0 ????????????????        	resq 1
   151                                  free_var_29:	; location of __bin-apply
   152 000000E8 ????????????????        	resq 1
   153                                  free_var_30:	; location of __bin-add-rr
   154 000000F0 ????????????????        	resq 1
   155                                  free_var_31:	; location of __bin-sub-rr
   156 000000F8 ????????????????        	resq 1
   157                                  free_var_32:	; location of __bin-mul-rr
   158 00000100 ????????????????        	resq 1
   159                                  free_var_33:	; location of __bin-div-rr
   160 00000108 ????????????????        	resq 1
   161                                  free_var_34:	; location of __bin-add-qq
   162 00000110 ????????????????        	resq 1
   163                                  free_var_35:	; location of __bin-sub-qq
   164 00000118 ????????????????        	resq 1
   165                                  free_var_36:	; location of __bin-mul-qq
   166 00000120 ????????????????        	resq 1
   167                                  free_var_37:	; location of __bin-div-qq
   168 00000128 ????????????????        	resq 1
   169                                  free_var_38:	; location of error
   170 00000130 ????????????????        	resq 1
   171                                  free_var_39:	; location of __bin-less-than-rr
   172 00000138 ????????????????        	resq 1
   173                                  free_var_40:	; location of __bin-less-than-qq
   174 00000140 ????????????????        	resq 1
   175                                  free_var_41:	; location of __bin-equal-rr
   176 00000148 ????????????????        	resq 1
   177                                  free_var_42:	; location of __bin-equal-qq
   178 00000150 ????????????????        	resq 1
   179                                  free_var_43:	; location of quotient
   180 00000158 ????????????????        	resq 1
   181                                  free_var_44:	; location of remainder
   182 00000160 ????????????????        	resq 1
   183                                  free_var_45:	; location of set-car!
   184 00000168 ????????????????        	resq 1
   185                                  free_var_46:	; location of set-cdr!
   186 00000170 ????????????????        	resq 1
   187                                  free_var_47:	; location of string-ref
   188 00000178 ????????????????        	resq 1
   189                                  free_var_48:	; location of vector-ref
   190 00000180 ????????????????        	resq 1
   191                                  free_var_49:	; location of vector-set!
   192 00000188 ????????????????        	resq 1
   193                                  free_var_50:	; location of string-set!
   194 00000190 ????????????????        	resq 1
   195                                  free_var_51:	; location of make-vector
   196 00000198 ????????????????        	resq 1
   197                                  free_var_52:	; location of make-string
   198 000001A0 ????????????????        	resq 1
   199                                  free_var_53:	; location of numerator
   200 000001A8 ????????????????        	resq 1
   201                                  free_var_54:	; location of denominator
   202 000001B0 ????????????????        	resq 1
   203                                  free_var_55:	; location of eq?
   204 000001B8 ????????????????        	resq 1
   205                                  
   206                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   207                                  global main
   208                                  section .text
   209                                  main:
   210 00000000 C8000000                        enter 0, 0
   211                                          
   212                                  	; building closure for null?
   213 00000004 48BF-                   	mov rdi, free_var_0
   213 00000006 [0000000000000000] 
   214 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   214 00000010 [AB0B000000000000] 
   215 00000018 E8660B0000              	call bind_primitive
   216                                  
   217                                  	; building closure for pair?
   218 0000001D 48BF-                   	mov rdi, free_var_1
   218 0000001F [0800000000000000] 
   219 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   219 00000029 [E10B000000000000] 
   220 00000031 E84D0B0000              	call bind_primitive
   221                                  
   222                                  	; building closure for void?
   223 00000036 48BF-                   	mov rdi, free_var_2
   223 00000038 [1000000000000000] 
   224 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   224 00000042 [170C000000000000] 
   225 0000004A E8340B0000              	call bind_primitive
   226                                  
   227                                  	; building closure for char?
   228 0000004F 48BF-                   	mov rdi, free_var_3
   228 00000051 [1800000000000000] 
   229 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   229 0000005B [4D0C000000000000] 
   230 00000063 E81B0B0000              	call bind_primitive
   231                                  
   232                                  	; building closure for string?
   233 00000068 48BF-                   	mov rdi, free_var_4
   233 0000006A [2000000000000000] 
   234 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   234 00000074 [830C000000000000] 
   235 0000007C E8020B0000              	call bind_primitive
   236                                  
   237                                  	; building closure for symbol?
   238 00000081 48BF-                   	mov rdi, free_var_5
   238 00000083 [2800000000000000] 
   239 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   239 0000008D [B90C000000000000] 
   240 00000095 E8E90A0000              	call bind_primitive
   241                                  
   242                                  	; building closure for vector?
   243 0000009A 48BF-                   	mov rdi, free_var_6
   243 0000009C [3000000000000000] 
   244 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   244 000000A6 [EF0C000000000000] 
   245 000000AE E8D00A0000              	call bind_primitive
   246                                  
   247                                  	; building closure for procedure?
   248 000000B3 48BF-                   	mov rdi, free_var_7
   248 000000B5 [3800000000000000] 
   249 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   249 000000BF [250D000000000000] 
   250 000000C7 E8B70A0000              	call bind_primitive
   251                                  
   252                                  	; building closure for real?
   253 000000CC 48BF-                   	mov rdi, free_var_8
   253 000000CE [4000000000000000] 
   254 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   254 000000D8 [5B0D000000000000] 
   255 000000E0 E89E0A0000              	call bind_primitive
   256                                  
   257                                  	; building closure for rational?
   258 000000E5 48BF-                   	mov rdi, free_var_9
   258 000000E7 [4800000000000000] 
   259 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   259 000000F1 [910D000000000000] 
   260 000000F9 E8850A0000              	call bind_primitive
   261                                  
   262                                  	; building closure for boolean?
   263 000000FE 48BF-                   	mov rdi, free_var_10
   263 00000100 [5000000000000000] 
   264 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   264 0000010A [C70D000000000000] 
   265 00000112 E86C0A0000              	call bind_primitive
   266                                  
   267                                  	; building closure for number?
   268 00000117 48BF-                   	mov rdi, free_var_11
   268 00000119 [5800000000000000] 
   269 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   269 00000123 [FF0D000000000000] 
   270 0000012B E8530A0000              	call bind_primitive
   271                                  
   272                                  	; building closure for collection?
   273 00000130 48BF-                   	mov rdi, free_var_12
   273 00000132 [6000000000000000] 
   274 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   274 0000013C [370E000000000000] 
   275 00000144 E83A0A0000              	call bind_primitive
   276                                  
   277                                  	; building closure for cons
   278 00000149 48BF-                   	mov rdi, free_var_13
   278 0000014B [6800000000000000] 
   279 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   279 00000155 [6F0E000000000000] 
   280 0000015D E8210A0000              	call bind_primitive
   281                                  
   282                                  	; building closure for display-sexpr
   283 00000162 48BF-                   	mov rdi, free_var_14
   283 00000164 [7000000000000000] 
   284 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   284 0000016E [A30E000000000000] 
   285 00000176 E8080A0000              	call bind_primitive
   286                                  
   287                                  	; building closure for write-char
   288 0000017B 48BF-                   	mov rdi, free_var_15
   288 0000017D [7800000000000000] 
   289 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   289 00000187 [CD0E000000000000] 
   290 0000018F E8EF090000              	call bind_primitive
   291                                  
   292                                  	; building closure for car
   293 00000194 48BF-                   	mov rdi, free_var_16
   293 00000196 [8000000000000000] 
   294 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   294 000001A0 [1B0F000000000000] 
   295 000001A8 E8D6090000              	call bind_primitive
   296                                  
   297                                  	; building closure for cdr
   298 000001AD 48BF-                   	mov rdi, free_var_17
   298 000001AF [8800000000000000] 
   299 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   299 000001B9 [430F000000000000] 
   300 000001C1 E8BD090000              	call bind_primitive
   301                                  
   302                                  	; building closure for string-length
   303 000001C6 48BF-                   	mov rdi, free_var_18
   303 000001C8 [9000000000000000] 
   304 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   304 000001D2 [6B0F000000000000] 
   305 000001DA E8A4090000              	call bind_primitive
   306                                  
   307                                  	; building closure for vector-length
   308 000001DF 48BF-                   	mov rdi, free_var_19
   308 000001E1 [9800000000000000] 
   309 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   309 000001EB [980F000000000000] 
   310 000001F3 E88B090000              	call bind_primitive
   311                                  
   312                                  	; building closure for real->integer
   313 000001F8 48BF-                   	mov rdi, free_var_20
   313 000001FA [A000000000000000] 
   314 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   314 00000204 [C50F000000000000] 
   315 0000020C E872090000              	call bind_primitive
   316                                  
   317                                  	; building closure for exit
   318 00000211 48BF-                   	mov rdi, free_var_21
   318 00000213 [A800000000000000] 
   319 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   319 0000021D [F80F000000000000] 
   320 00000225 E859090000              	call bind_primitive
   321                                  
   322                                  	; building closure for integer->real
   323 0000022A 48BF-                   	mov rdi, free_var_22
   323 0000022C [B000000000000000] 
   324 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   324 00000236 [1510000000000000] 
   325 0000023E E840090000              	call bind_primitive
   326                                  
   327                                  	; building closure for rational->real
   328 00000243 48BF-                   	mov rdi, free_var_23
   328 00000245 [B800000000000000] 
   329 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   329 0000024F [5210000000000000] 
   330 00000257 E827090000              	call bind_primitive
   331                                  
   332                                  	; building closure for char->integer
   333 0000025C 48BF-                   	mov rdi, free_var_24
   333 0000025E [C000000000000000] 
   334 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   334 00000268 [9110000000000000] 
   335 00000270 E80E090000              	call bind_primitive
   336                                  
   337                                  	; building closure for integer->char
   338 00000275 48BF-                   	mov rdi, free_var_25
   338 00000277 [C800000000000000] 
   339 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   339 00000281 [C610000000000000] 
   340 00000289 E8F5080000              	call bind_primitive
   341                                  
   342                                  	; building closure for trng
   343 0000028E 48BF-                   	mov rdi, free_var_26
   343 00000290 [D000000000000000] 
   344 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   344 0000029A [2011000000000000] 
   345 000002A2 E8DC080000              	call bind_primitive
   346                                  
   347                                  	; building closure for zero?
   348 000002A7 48BF-                   	mov rdi, free_var_27
   348 000002A9 [D800000000000000] 
   349 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   349 000002B3 [4311000000000000] 
   350 000002BB E8C3080000              	call bind_primitive
   351                                  
   352                                  	; building closure for integer?
   353 000002C0 48BF-                   	mov rdi, free_var_28
   353 000002C2 [E000000000000000] 
   354 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   354 000002CC [9E11000000000000] 
   355 000002D4 E8AA080000              	call bind_primitive
   356                                  
   357                                  	; building closure for __bin-apply
   358 000002D9 48BF-                   	mov rdi, free_var_29
   358 000002DB [E800000000000000] 
   359 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   359 000002E5 [AB0B000000000000] 
   360 000002ED E891080000              	call bind_primitive
   361                                  
   362                                  	; building closure for __bin-add-rr
   363 000002F2 48BF-                   	mov rdi, free_var_30
   363 000002F4 [F000000000000000] 
   364 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   364 000002FE [DB11000000000000] 
   365 00000306 E878080000              	call bind_primitive
   366                                  
   367                                  	; building closure for __bin-sub-rr
   368 0000030B 48BF-                   	mov rdi, free_var_31
   368 0000030D [F800000000000000] 
   369 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   369 00000317 [1F12000000000000] 
   370 0000031F E85F080000              	call bind_primitive
   371                                  
   372                                  	; building closure for __bin-mul-rr
   373 00000324 48BF-                   	mov rdi, free_var_32
   373 00000326 [0001000000000000] 
   374 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   374 00000330 [6312000000000000] 
   375 00000338 E846080000              	call bind_primitive
   376                                  
   377                                  	; building closure for __bin-div-rr
   378 0000033D 48BF-                   	mov rdi, free_var_33
   378 0000033F [0801000000000000] 
   379 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   379 00000349 [A712000000000000] 
   380 00000351 E82D080000              	call bind_primitive
   381                                  
   382                                  	; building closure for __bin-add-qq
   383 00000356 48BF-                   	mov rdi, free_var_34
   383 00000358 [1001000000000000] 
   384 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   384 00000362 [F912000000000000] 
   385 0000036A E814080000              	call bind_primitive
   386                                  
   387                                  	; building closure for __bin-sub-qq
   388 0000036F 48BF-                   	mov rdi, free_var_35
   388 00000371 [1801000000000000] 
   389 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   389 0000037B [6113000000000000] 
   390 00000383 E8FB070000              	call bind_primitive
   391                                  
   392                                  	; building closure for __bin-mul-qq
   393 00000388 48BF-                   	mov rdi, free_var_36
   393 0000038A [2001000000000000] 
   394 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   394 00000394 [C913000000000000] 
   395 0000039C E8E2070000              	call bind_primitive
   396                                  
   397                                  	; building closure for __bin-div-qq
   398 000003A1 48BF-                   	mov rdi, free_var_37
   398 000003A3 [2801000000000000] 
   399 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   399 000003AD [2114000000000000] 
   400 000003B5 E8C9070000              	call bind_primitive
   401                                  
   402                                  	; building closure for error
   403 000003BA 48BF-                   	mov rdi, free_var_38
   403 000003BC [3001000000000000] 
   404 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   404 000003C6 [EF14000000000000] 
   405 000003CE E8B0070000              	call bind_primitive
   406                                  
   407                                  	; building closure for __bin-less-than-rr
   408 000003D3 48BF-                   	mov rdi, free_var_39
   408 000003D5 [3801000000000000] 
   409 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   409 000003DF [8B15000000000000] 
   410 000003E7 E897070000              	call bind_primitive
   411                                  
   412                                  	; building closure for __bin-less-than-qq
   413 000003EC 48BF-                   	mov rdi, free_var_40
   413 000003EE [4001000000000000] 
   414 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   414 000003F8 [E215000000000000] 
   415 00000400 E87E070000              	call bind_primitive
   416                                  
   417                                  	; building closure for __bin-equal-rr
   418 00000405 48BF-                   	mov rdi, free_var_41
   418 00000407 [4801000000000000] 
   419 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   419 00000411 [4516000000000000] 
   420 00000419 E865070000              	call bind_primitive
   421                                  
   422                                  	; building closure for __bin-equal-qq
   423 0000041E 48BF-                   	mov rdi, free_var_42
   423 00000420 [5001000000000000] 
   424 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   424 0000042A [9C16000000000000] 
   425 00000432 E84C070000              	call bind_primitive
   426                                  
   427                                  	; building closure for quotient
   428 00000437 48BF-                   	mov rdi, free_var_43
   428 00000439 [5801000000000000] 
   429 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   429 00000443 [FF16000000000000] 
   430 0000044B E833070000              	call bind_primitive
   431                                  
   432                                  	; building closure for remainder
   433 00000450 48BF-                   	mov rdi, free_var_44
   433 00000452 [6001000000000000] 
   434 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   434 0000045C [6517000000000000] 
   435 00000464 E81A070000              	call bind_primitive
   436                                  
   437                                  	; building closure for set-car!
   438 00000469 48BF-                   	mov rdi, free_var_45
   438 0000046B [6801000000000000] 
   439 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   439 00000475 [CB17000000000000] 
   440 0000047D E801070000              	call bind_primitive
   441                                  
   442                                  	; building closure for set-cdr!
   443 00000482 48BF-                   	mov rdi, free_var_46
   443 00000484 [7001000000000000] 
   444 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   444 0000048E [0118000000000000] 
   445 00000496 E8E8060000              	call bind_primitive
   446                                  
   447                                  	; building closure for string-ref
   448 0000049B 48BF-                   	mov rdi, free_var_47
   448 0000049D [7801000000000000] 
   449 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   449 000004A7 [3718000000000000] 
   450 000004AF E8CF060000              	call bind_primitive
   451                                  
   452                                  	; building closure for vector-ref
   453 000004B4 48BF-                   	mov rdi, free_var_48
   453 000004B6 [8001000000000000] 
   454 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   454 000004C0 [A218000000000000] 
   455 000004C8 E8B6060000              	call bind_primitive
   456                                  
   457                                  	; building closure for vector-set!
   458 000004CD 48BF-                   	mov rdi, free_var_49
   458 000004CF [8801000000000000] 
   459 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   459 000004D9 [FE18000000000000] 
   460 000004E1 E89D060000              	call bind_primitive
   461                                  
   462                                  	; building closure for string-set!
   463 000004E6 48BF-                   	mov rdi, free_var_50
   463 000004E8 [9001000000000000] 
   464 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   464 000004F2 [6819000000000000] 
   465 000004FA E884060000              	call bind_primitive
   466                                  
   467                                  	; building closure for make-vector
   468 000004FF 48BF-                   	mov rdi, free_var_51
   468 00000501 [9801000000000000] 
   469 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   469 0000050B [DD19000000000000] 
   470 00000513 E86B060000              	call bind_primitive
   471                                  
   472                                  	; building closure for make-string
   473 00000518 48BF-                   	mov rdi, free_var_52
   473 0000051A [A001000000000000] 
   474 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   474 00000524 [471A000000000000] 
   475 0000052C E852060000              	call bind_primitive
   476                                  
   477                                  	; building closure for numerator
   478 00000531 48BF-                   	mov rdi, free_var_53
   478 00000533 [A801000000000000] 
   479 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   479 0000053D [B91A000000000000] 
   480 00000545 E839060000              	call bind_primitive
   481                                  
   482                                  	; building closure for denominator
   483 0000054A 48BF-                   	mov rdi, free_var_54
   483 0000054C [B001000000000000] 
   484 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   484 00000556 [E61A000000000000] 
   485 0000055E E820060000              	call bind_primitive
   486                                  
   487                                  	; building closure for eq?
   488 00000563 48BF-                   	mov rdi, free_var_55
   488 00000565 [B801000000000000] 
   489 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   489 0000056F [131B000000000000] 
   490 00000577 E807060000              	call bind_primitive
   491                                  
   492 0000057C 48B8-                   	mov rax,57+L_constants
   492 0000057E [3900000000000000] 
   493                                  
   494 00000586 4889C7                  	mov rdi, rax
   495 00000589 E8C4000000              	call print_sexpr_if_not_void
   496                                  
   497 0000058E 48BF-                           mov rdi, fmt_memory_usage
   497 00000590 [A900000000000000] 
   498 00000598 488B3425[30010000]              mov rsi, qword [top_of_memory]
   499 000005A0 4881EE[C0010000]                sub rsi, memory
   500 000005A7 B800000000                      mov rax, 0
   501 000005AC E8(00000000)                    call printf
   502 000005B1 C9                      	leave
   503 000005B2 C3                      	ret
   504                                  
   505                                  L_error_non_closure:
   506 000005B3 488B3C25[00000000]              mov rdi, qword [stderr]
   507 000005BB 48BE-                           mov rsi, fmt_non_closure
   507 000005BD [E000000000000000] 
   508 000005C5 B800000000                      mov rax, 0
   509 000005CA E8(00000000)                    call fprintf
   510 000005CF 48C7C0FEFFFFFF                  mov rax, -2
   511 000005D6 E8(00000000)                    call exit
   512                                  
   513                                  L_error_improper_list:
   514 000005DB 488B3C25[00000000]      	mov rdi, qword [stderr]
   515 000005E3 48BE-                   	mov rsi, fmt_error_improper_list
   515 000005E5 [0801000000000000] 
   516 000005ED B800000000              	mov rax, 0
   517 000005F2 E8(00000000)            	call fprintf
   518 000005F7 48C7C0F9FFFFFF          	mov rax, -7
   519 000005FE E8(00000000)            	call exit
   520                                  
   521                                  L_error_incorrect_arity_simple:
   522 00000603 488B3C25[00000000]              mov rdi, qword [stderr]
   523 0000060B 48BE-                           mov rsi, fmt_incorrect_arity_simple
   523 0000060D [4A00000000000000] 
   524 00000615 EB12                            jmp L_error_incorrect_arity_common
   525                                  L_error_incorrect_arity_opt:
   526 00000617 488B3C25[00000000]              mov rdi, qword [stderr]
   527 0000061F 48BE-                           mov rsi, fmt_incorrect_arity_opt
   527 00000621 [7500000000000000] 
   528                                  L_error_incorrect_arity_common:
   529 00000629 5A                              pop rdx
   530 0000062A 59                              pop rcx
   531 0000062B B800000000                      mov rax, 0
   532 00000630 E8(00000000)                    call fprintf
   533 00000635 48C7C0FAFFFFFF                  mov rax, -6
   534 0000063C E8(00000000)                    call exit
   535                                  
   536                                  section .data
   537                                  fmt_incorrect_arity_simple:
   538 0000004A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   538 00000053 74656420256C642061-
   538 0000005C 7267756D656E74732C-
   538 00000065 206275742067697665-
   538 0000006E 6E20256C640A00     
   539                                  fmt_incorrect_arity_opt:
   540 00000075 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   540 0000007E 746564206174206C65-
   540 00000087 61737420256C642061-
   540 00000090 7267756D656E74732C-
   540 00000099 206275742067697665-
   540 000000A2 6E20256C640A00     
   541                                  fmt_memory_usage:
   542 000000A9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   542 000000B2 6420256C6420627974-
   542 000000BB 6573206F662064796E-
   542 000000C4 616D6963616C6C792D-
   542 000000CD 616C6C6F6361746564-
   542 000000D6 206D656D6F72790A0A-
   542 000000DF 00                 
   543                                  fmt_non_closure:
   544 000000E0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   544 000000E9 7074696E6720746F20-
   544 000000F2 6170706C792061206E-
   544 000000FB 6F6E2D636C6F737572-
   544 00000104 65210A00           
   545                                  fmt_error_improper_list:
   546 00000108 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   546 00000111 7267756D656E742069-
   546 0000011A 73206E6F7420612070-
   546 00000123 726F706572206C6973-
   546 0000012C 74210A00           
   547                                  
   548                                  section .bss
   549                                  memory:
   550 000001C0 <res 40000000h>         	resb gbytes(1)
   551                                  
   552                                  section .data
   553                                  top_of_memory:
   554 00000130 [C001000000000000]              dq memory
   555                                  
   556                                  section .text
   557                                  malloc:
   558 00000641 488B0425[30010000]              mov rax, qword [top_of_memory]
   559 00000649 48013C25[30010000]              add qword [top_of_memory], rdi
   560 00000651 C3                              ret
   561                                          
   562                                  print_sexpr_if_not_void:
   563 00000652 4881FF[00000000]        	cmp rdi, sob_void
   564 00000659 7501                    	jne print_sexpr
   565 0000065B C3                      	ret
   566                                  
   567                                  section .data
   568                                  fmt_void:
   569 00000138 233C766F69643E00        	db `#<void>\0`
   570                                  fmt_nil:
   571 00000140 282900                  	db `()\0`
   572                                  fmt_boolean_false:
   573 00000143 236600                  	db `#f\0`
   574                                  fmt_boolean_true:
   575 00000146 237400                  	db `#t\0`
   576                                  fmt_char_backslash:
   577 00000149 235C5C00                	db `#\\\\\0`
   578                                  fmt_char_dquote:
   579 0000014D 235C2200                	db `#\\"\0`
   580                                  fmt_char_simple:
   581 00000151 235C256300              	db `#\\%c\0`
   582                                  fmt_char_null:
   583 00000156 235C6E756C00            	db `#\\nul\0`
   584                                  fmt_char_bell:
   585 0000015C 235C62656C6C00          	db `#\\bell\0`
   586                                  fmt_char_backspace:
   587 00000163 235C6261636B737061-     	db `#\\backspace\0`
   587 0000016C 636500             
   588                                  fmt_char_tab:
   589 0000016F 235C74616200            	db `#\\tab\0`
   590                                  fmt_char_newline:
   591 00000175 235C6E65776C696E65-     	db `#\\newline\0`
   591 0000017E 00                 
   592                                  fmt_char_formfeed:
   593 0000017F 235C7061676500          	db `#\\page\0`
   594                                  fmt_char_return:
   595 00000186 235C72657475726E00      	db `#\\return\0`
   596                                  fmt_char_escape:
   597 0000018F 235C65736300            	db `#\\esc\0`
   598                                  fmt_char_space:
   599 00000195 235C737061636500        	db `#\\space\0`
   600                                  fmt_char_hex:
   601 0000019D 235C782530325800        	db `#\\x%02X\0`
   602                                  fmt_closure:
   603 000001A5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   603 000001AE 206174203078253038-
   603 000001B7 5820656E763D307825-
   603 000001C0 30385820636F64653D-
   603 000001C9 3078253038583E00   
   604                                  fmt_lparen:
   605 000001D1 2800                    	db `(\0`
   606                                  fmt_dotted_pair:
   607 000001D3 202E2000                	db ` . \0`
   608                                  fmt_rparen:
   609 000001D7 2900                    	db `)\0`
   610                                  fmt_space:
   611 000001D9 2000                    	db ` \0`
   612                                  fmt_empty_vector:
   613 000001DB 23282900                	db `#()\0`
   614                                  fmt_vector:
   615 000001DF 232800                  	db `#(\0`
   616                                  fmt_real:
   617 000001E2 256600                  	db `%f\0`
   618                                  fmt_fraction:
   619 000001E5 256C642F256C6400        	db `%ld/%ld\0`
   620                                  fmt_zero:
   621 000001ED 3000                    	db `0\0`
   622                                  fmt_int:
   623 000001EF 256C6400                	db `%ld\0`
   624                                  fmt_unknown_sexpr_error:
   625 000001F3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   625 000001FC 6F723A20556E6B6E6F-
   625 00000205 776E2074797065206F-
   625 0000020E 662073657870722028-
   625 00000217 3078253032582920   
   626 0000021F 617420616464726573-     	db `at address 0x%08X\n\n\0`
   626 00000228 73203078253038580A-
   626 00000231 0A00               
   627                                  fmt_dquote:
   628 00000233 2200                    	db `\"\0`
   629                                  fmt_string_char:
   630 00000235 256300                          db `%c\0`
   631                                  fmt_string_char_7:
   632 00000238 5C6100                          db `\\a\0`
   633                                  fmt_string_char_8:
   634 0000023B 5C6200                          db `\\b\0`
   635                                  fmt_string_char_9:
   636 0000023E 5C7400                          db `\\t\0`
   637                                  fmt_string_char_10:
   638 00000241 5C6E00                          db `\\n\0`
   639                                  fmt_string_char_11:
   640 00000244 5C7600                          db `\\v\0`
   641                                  fmt_string_char_12:
   642 00000247 5C6600                          db `\\f\0`
   643                                  fmt_string_char_13:
   644 0000024A 5C7200                          db `\\r\0`
   645                                  fmt_string_char_34:
   646 0000024D 5C2200                          db `\\"\0`
   647                                  fmt_string_char_92:
   648 00000250 5C5C00                          db `\\\\\0`
   649                                  fmt_string_char_hex:
   650 00000253 5C7825583B00                    db `\\x%X;\0`
   651                                  
   652                                  section .text
   653                                  
   654                                  print_sexpr:
   655                                  	ENTER
    33 0000065C C8000000            <1>  enter 0, 0
    34 00000660 4883E4F0            <1>  and rsp, ~15
   656 00000664 8A07                    	mov al, byte [rdi]
   657 00000666 3C00                    	cmp al, T_void
   658 00000668 744D                    	je .Lvoid
   659 0000066A 3C01                    	cmp al, T_nil
   660 0000066C 7458                    	je .Lnil
   661 0000066E 3C09                    	cmp al, T_boolean_false
   662 00000670 7463                    	je .Lboolean_false
   663 00000672 3C0A                    	cmp al, T_boolean_true
   664 00000674 746E                    	je .Lboolean_true
   665 00000676 3C02                    	cmp al, T_char
   666 00000678 7479                    	je .Lchar
   667 0000067A 3C04                    	cmp al, T_symbol
   668 0000067C 0F84BB010000            	je .Lsymbol
   669 00000682 3C21                    	cmp al, T_pair
   670 00000684 0F84D6010000            	je .Lpair
   671 0000068A 3C22                    	cmp al, T_vector
   672 0000068C 0F8478020000            	je .Lvector
   673 00000692 3C05                    	cmp al, T_closure
   674 00000694 0F8489010000            	je .Lclosure
   675 0000069A 3C12                    	cmp al, T_real
   676 0000069C 0F84F3020000            	je .Lreal
   677 000006A2 3C11                    	cmp al, T_rational
   678 000006A4 0F8419030000            	je .Lrational
   679 000006AA 3C03                    	cmp al, T_string
   680 000006AC 0F8452030000            	je .Lstring
   681                                  
   682 000006B2 E98A040000              	jmp .Lunknown_sexpr_type
   683                                  
   684                                  .Lvoid:
   685 000006B7 48BF-                   	mov rdi, fmt_void
   685 000006B9 [3801000000000000] 
   686 000006C1 E9AF040000              	jmp .Lemit
   687                                  
   688                                  .Lnil:
   689 000006C6 48BF-                   	mov rdi, fmt_nil
   689 000006C8 [4001000000000000] 
   690 000006D0 E9A0040000              	jmp .Lemit
   691                                  
   692                                  .Lboolean_false:
   693 000006D5 48BF-                   	mov rdi, fmt_boolean_false
   693 000006D7 [4301000000000000] 
   694 000006DF E991040000              	jmp .Lemit
   695                                  
   696                                  .Lboolean_true:
   697 000006E4 48BF-                   	mov rdi, fmt_boolean_true
   697 000006E6 [4601000000000000] 
   698 000006EE E982040000              	jmp .Lemit
   699                                  
   700                                  .Lchar:
   701 000006F3 8A4701                  	mov al, byte [rdi + 1]
   702 000006F6 3C20                    	cmp al, ' '
   703 000006F8 7E28                    	jle .Lchar_whitespace
   704 000006FA 3C5C                    	cmp al, 92 		; backslash
   705 000006FC 0F847C000000            	je .Lchar_backslash
   706 00000702 3C22                    	cmp al, '"'
   707 00000704 0F8483000000            	je .Lchar_dquote
   708 0000070A 4825FF000000            	and rax, 255
   709 00000710 48BF-                   	mov rdi, fmt_char_simple
   709 00000712 [5101000000000000] 
   710 0000071A 4889C6                  	mov rsi, rax
   711 0000071D E953040000              	jmp .Lemit
   712                                  
   713                                  .Lchar_whitespace:
   714 00000722 3C00                    	cmp al, 0
   715 00000724 7476                    	je .Lchar_null
   716 00000726 3C07                    	cmp al, 7
   717 00000728 0F847D000000            	je .Lchar_bell
   718 0000072E 3C08                    	cmp al, 8
   719 00000730 0F8484000000            	je .Lchar_backspace
   720 00000736 3C09                    	cmp al, 9
   721 00000738 0F848B000000            	je .Lchar_tab
   722 0000073E 3C0A                    	cmp al, 10
   723 00000740 0F8492000000            	je .Lchar_newline
   724 00000746 3C0C                    	cmp al, 12
   725 00000748 0F8499000000            	je .Lchar_formfeed
   726 0000074E 3C0D                    	cmp al, 13
   727 00000750 0F84A0000000            	je .Lchar_return
   728 00000756 3C1B                    	cmp al, 27
   729 00000758 0F84A7000000            	je .Lchar_escape
   730 0000075E 4825FF000000            	and rax, 255
   731 00000764 3C20                    	cmp al, ' '
   732 00000766 0F84A8000000            	je .Lchar_space
   733 0000076C 48BF-                   	mov rdi, fmt_char_hex
   733 0000076E [9D01000000000000] 
   734 00000776 4889C6                  	mov rsi, rax
   735 00000779 E9F7030000              	jmp .Lemit	
   736                                  
   737                                  .Lchar_backslash:
   738 0000077E 48BF-                   	mov rdi, fmt_char_backslash
   738 00000780 [4901000000000000] 
   739 00000788 E9E8030000              	jmp .Lemit
   740                                  
   741                                  .Lchar_dquote:
   742 0000078D 48BF-                   	mov rdi, fmt_char_dquote
   742 0000078F [4D01000000000000] 
   743 00000797 E9D9030000              	jmp .Lemit
   744                                  
   745                                  .Lchar_null:
   746 0000079C 48BF-                   	mov rdi, fmt_char_null
   746 0000079E [5601000000000000] 
   747 000007A6 E9CA030000              	jmp .Lemit
   748                                  
   749                                  .Lchar_bell:
   750 000007AB 48BF-                   	mov rdi, fmt_char_bell
   750 000007AD [5C01000000000000] 
   751 000007B5 E9BB030000              	jmp .Lemit
   752                                  
   753                                  .Lchar_backspace:
   754 000007BA 48BF-                   	mov rdi, fmt_char_backspace
   754 000007BC [6301000000000000] 
   755 000007C4 E9AC030000              	jmp .Lemit
   756                                  
   757                                  .Lchar_tab:
   758 000007C9 48BF-                   	mov rdi, fmt_char_tab
   758 000007CB [6F01000000000000] 
   759 000007D3 E99D030000              	jmp .Lemit
   760                                  
   761                                  .Lchar_newline:
   762 000007D8 48BF-                   	mov rdi, fmt_char_newline
   762 000007DA [7501000000000000] 
   763 000007E2 E98E030000              	jmp .Lemit
   764                                  
   765                                  .Lchar_formfeed:
   766 000007E7 48BF-                   	mov rdi, fmt_char_formfeed
   766 000007E9 [7F01000000000000] 
   767 000007F1 E97F030000              	jmp .Lemit
   768                                  
   769                                  .Lchar_return:
   770 000007F6 48BF-                   	mov rdi, fmt_char_return
   770 000007F8 [8601000000000000] 
   771 00000800 E970030000              	jmp .Lemit
   772                                  
   773                                  .Lchar_escape:
   774 00000805 48BF-                   	mov rdi, fmt_char_escape
   774 00000807 [8F01000000000000] 
   775 0000080F E961030000              	jmp .Lemit
   776                                  
   777                                  .Lchar_space:
   778 00000814 48BF-                   	mov rdi, fmt_char_space
   778 00000816 [9501000000000000] 
   779 0000081E E952030000              	jmp .Lemit
   780                                  
   781                                  .Lclosure:
   782 00000823 4889FE                  	mov rsi, qword rdi
   783 00000826 48BF-                   	mov rdi, fmt_closure
   783 00000828 [A501000000000000] 
   784 00000830 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   785 00000834 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   786 00000838 E938030000              	jmp .Lemit
   787                                  
   788                                  .Lsymbol:
   789 0000083D 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   790 00000841 BE01000000              	mov rsi, 1		 ; size = 1 byte
   791 00000846 488B5701                	mov rdx, qword [rdi + 1] ; length
   792 0000084A 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   793 0000084E 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   794 00000856 E8(00000000)            	call fwrite
   795 0000085B E921030000              	jmp .Lend
   796                                  	
   797                                  .Lpair:
   798 00000860 57                      	push rdi
   799 00000861 48BF-                   	mov rdi, fmt_lparen
   799 00000863 [D101000000000000] 
   800 0000086B B800000000              	mov rax, 0
   801                                          ENTER
    33 00000870 C8000000            <1>  enter 0, 0
    34 00000874 4883E4F0            <1>  and rsp, ~15
   802 00000878 E8(00000000)            	call printf
   803                                          LEAVE
    38 0000087D C9                  <1>  leave
   804 0000087E 488B3C24                	mov rdi, qword [rsp] 	; pair
   805 00000882 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   806 00000886 E8D1FDFFFF              	call print_sexpr
   807 0000088B 5F                      	pop rdi 		; pair
   808 0000088C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   809                                  .Lcdr:
   810 00000890 8A07                    	mov al, byte [rdi]
   811 00000892 3C01                    	cmp al, T_nil
   812 00000894 7435                    	je .Lcdr_nil
   813 00000896 3C21                    	cmp al, T_pair
   814 00000898 7447                    	je .Lcdr_pair
   815 0000089A 57                      	push rdi
   816 0000089B 48BF-                   	mov rdi, fmt_dotted_pair
   816 0000089D [D301000000000000] 
   817 000008A5 B800000000              	mov rax, 0
   818 000008AA E8(00000000)            	call printf
   819 000008AF 5F                      	pop rdi
   820 000008B0 E8A7FDFFFF              	call print_sexpr
   821 000008B5 48BF-                   	mov rdi, fmt_rparen
   821 000008B7 [D701000000000000] 
   822 000008BF B800000000              	mov rax, 0
   823 000008C4 E8(00000000)            	call printf
   824                                  	LEAVE
    38 000008C9 C9                  <1>  leave
   825 000008CA C3                      	ret
   826                                  
   827                                  .Lcdr_nil:
   828 000008CB 48BF-                   	mov rdi, fmt_rparen
   828 000008CD [D701000000000000] 
   829 000008D5 B800000000              	mov rax, 0
   830 000008DA E8(00000000)            	call printf
   831                                  	LEAVE
    38 000008DF C9                  <1>  leave
   832 000008E0 C3                      	ret
   833                                  
   834                                  .Lcdr_pair:
   835 000008E1 57                      	push rdi
   836 000008E2 48BF-                   	mov rdi, fmt_space
   836 000008E4 [D901000000000000] 
   837 000008EC B800000000              	mov rax, 0
   838 000008F1 E8(00000000)            	call printf
   839 000008F6 488B3C24                	mov rdi, qword [rsp]
   840 000008FA 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   841 000008FE E859FDFFFF              	call print_sexpr
   842 00000903 5F                      	pop rdi
   843 00000904 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   844 00000908 EB86                    	jmp .Lcdr
   845                                  
   846                                  .Lvector:
   847 0000090A 488B4701                	mov rax, qword [rdi + 1] ; length
   848 0000090E 4883F800                	cmp rax, 0
   849 00000912 7472                    	je .Lvector_empty
   850 00000914 57                      	push rdi
   851 00000915 48BF-                   	mov rdi, fmt_vector
   851 00000917 [DF01000000000000] 
   852 0000091F B800000000              	mov rax, 0
   853 00000924 E8(00000000)            	call printf
   854 00000929 488B3C24                	mov rdi, qword [rsp]
   855 0000092D FF7701                  	push qword [rdi + 1]
   856 00000930 6A01                    	push 1
   857 00000932 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   858 00000936 E821FDFFFF              	call print_sexpr
   859                                  .Lvector_loop:
   860                                  	; [rsp] index
   861                                  	; [rsp + 8*1] limit
   862                                  	; [rsp + 8*2] vector
   863 0000093B 488B0424                	mov rax, qword [rsp]
   864 0000093F 483B442408              	cmp rax, qword [rsp + 8*1]
   865 00000944 742D                    	je .Lvector_end
   866 00000946 48BF-                   	mov rdi, fmt_space
   866 00000948 [D901000000000000] 
   867 00000950 B800000000              	mov rax, 0
   868 00000955 E8(00000000)            	call printf
   869 0000095A 488B0424                	mov rax, qword [rsp]
   870 0000095E 488B5C2410              	mov rbx, qword [rsp + 8*2]
   871 00000963 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   872 00000968 E8EFFCFFFF              	call print_sexpr
   873 0000096D 48FF0424                	inc qword [rsp]
   874 00000971 EBC8                    	jmp .Lvector_loop
   875                                  
   876                                  .Lvector_end:
   877 00000973 4883C418                	add rsp, 8*3
   878 00000977 48BF-                   	mov rdi, fmt_rparen
   878 00000979 [D701000000000000] 
   879 00000981 E9EF010000              	jmp .Lemit	
   880                                  
   881                                  .Lvector_empty:
   882 00000986 48BF-                   	mov rdi, fmt_empty_vector
   882 00000988 [DB01000000000000] 
   883 00000990 E9E0010000              	jmp .Lemit
   884                                  
   885                                  .Lreal:
   886 00000995 FF7701                  	push qword [rdi + 1]
   887 00000998 F20F100424              	movsd xmm0, qword [rsp]
   888 0000099D 4883C408                	add rsp, 8*1
   889 000009A1 48BF-                   	mov rdi, fmt_real
   889 000009A3 [E201000000000000] 
   890 000009AB B801000000              	mov rax, 1
   891                                  	ENTER
    33 000009B0 C8000000            <1>  enter 0, 0
    34 000009B4 4883E4F0            <1>  and rsp, ~15
   892 000009B8 E8(00000000)            	call printf
   893                                  	LEAVE
    38 000009BD C9                  <1>  leave
   894 000009BE E9BE010000              	jmp .Lend
   895                                  
   896                                  .Lrational:
   897 000009C3 488B7701                	mov rsi, qword [rdi + 1]
   898 000009C7 488B5709                	mov rdx, qword [rdi + 1 + 8]
   899 000009CB 4883FE00                	cmp rsi, 0
   900 000009CF 7415                    	je .Lrat_zero
   901 000009D1 4883FA01                	cmp rdx, 1
   902 000009D5 741E                    	je .Lrat_int
   903 000009D7 48BF-                   	mov rdi, fmt_fraction
   903 000009D9 [E501000000000000] 
   904 000009E1 E98F010000              	jmp .Lemit
   905                                  
   906                                  .Lrat_zero:
   907 000009E6 48BF-                   	mov rdi, fmt_zero
   907 000009E8 [ED01000000000000] 
   908 000009F0 E980010000              	jmp .Lemit
   909                                  
   910                                  .Lrat_int:
   911 000009F5 48BF-                   	mov rdi, fmt_int
   911 000009F7 [EF01000000000000] 
   912 000009FF E971010000              	jmp .Lemit
   913                                  
   914                                  .Lstring:
   915 00000A04 488D4709                	lea rax, [rdi + 1 + 8]
   916 00000A08 50                      	push rax
   917 00000A09 FF7701                  	push qword [rdi + 1]
   918 00000A0C 48BF-                   	mov rdi, fmt_dquote
   918 00000A0E [3302000000000000] 
   919 00000A16 B800000000              	mov rax, 0
   920                                  	ENTER
    33 00000A1B C8000000            <1>  enter 0, 0
    34 00000A1F 4883E4F0            <1>  and rsp, ~15
   921 00000A23 E8(00000000)            	call printf
   922                                  	LEAVE
    38 00000A28 C9                  <1>  leave
   923                                  .Lstring_loop:
   924                                  	; qword [rsp]: limit
   925                                  	; qword [rsp + 8*1]: char *
   926 00000A29 48833C2400              	cmp qword [rsp], 0
   927 00000A2E 0F84FD000000            	je .Lstring_end
   928 00000A34 488B442408              	mov rax, qword [rsp + 8*1]
   929 00000A39 8A00                    	mov al, byte [rax]
   930 00000A3B 4825FF000000            	and rax, 255
   931 00000A41 3C07                    	cmp al, 7
   932 00000A43 7468                            je .Lstring_char_7
   933 00000A45 3C08                            cmp al, 8
   934 00000A47 7470                            je .Lstring_char_8
   935 00000A49 3C09                            cmp al, 9
   936 00000A4B 7478                            je .Lstring_char_9
   937 00000A4D 3C0A                            cmp al, 10
   938 00000A4F 0F847C000000                    je .Lstring_char_10
   939 00000A55 3C0B                            cmp al, 11
   940 00000A57 0F8480000000                    je .Lstring_char_11
   941 00000A5D 3C0C                            cmp al, 12
   942 00000A5F 0F8484000000                    je .Lstring_char_12
   943 00000A65 3C0D                            cmp al, 13
   944 00000A67 0F8488000000                    je .Lstring_char_13
   945 00000A6D 3C22                            cmp al, 34
   946 00000A6F 0F848C000000                    je .Lstring_char_34
   947 00000A75 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   949 00000A77 3C20                            cmp al, ' '
   950 00000A79 0F8CA0000000                    jl .Lstring_char_hex
   951 00000A7F 48BF-                           mov rdi, fmt_string_char
   951 00000A81 [3502000000000000] 
   952 00000A89 4889C6                          mov rsi, rax
   953                                  .Lstring_char_emit:
   954 00000A8C B800000000                      mov rax, 0
   955                                          ENTER
    33 00000A91 C8000000            <1>  enter 0, 0
    34 00000A95 4883E4F0            <1>  and rsp, ~15
   956 00000A99 E8(00000000)                    call printf
   957                                          LEAVE
    38 00000A9E C9                  <1>  leave
   958 00000A9F 48FF0C24                        dec qword [rsp]
   959 00000AA3 48FF442408                      inc qword [rsp + 8*1]
   960 00000AA8 E97CFFFFFF                      jmp .Lstring_loop
   961                                  
   962                                  .Lstring_char_7:
   963 00000AAD 48BF-                           mov rdi, fmt_string_char_7
   963 00000AAF [3802000000000000] 
   964 00000AB7 EBD3                            jmp .Lstring_char_emit
   965                                  
   966                                  .Lstring_char_8:
   967 00000AB9 48BF-                           mov rdi, fmt_string_char_8
   967 00000ABB [3B02000000000000] 
   968 00000AC3 EBC7                            jmp .Lstring_char_emit
   969                                          
   970                                  .Lstring_char_9:
   971 00000AC5 48BF-                           mov rdi, fmt_string_char_9
   971 00000AC7 [3E02000000000000] 
   972 00000ACF EBBB                            jmp .Lstring_char_emit
   973                                  
   974                                  .Lstring_char_10:
   975 00000AD1 48BF-                           mov rdi, fmt_string_char_10
   975 00000AD3 [4102000000000000] 
   976 00000ADB EBAF                            jmp .Lstring_char_emit
   977                                  
   978                                  .Lstring_char_11:
   979 00000ADD 48BF-                           mov rdi, fmt_string_char_11
   979 00000ADF [4402000000000000] 
   980 00000AE7 EBA3                            jmp .Lstring_char_emit
   981                                  
   982                                  .Lstring_char_12:
   983 00000AE9 48BF-                           mov rdi, fmt_string_char_12
   983 00000AEB [4702000000000000] 
   984 00000AF3 EB97                            jmp .Lstring_char_emit
   985                                  
   986                                  .Lstring_char_13:
   987 00000AF5 48BF-                           mov rdi, fmt_string_char_13
   987 00000AF7 [4A02000000000000] 
   988 00000AFF EB8B                            jmp .Lstring_char_emit
   989                                  
   990                                  .Lstring_char_34:
   991 00000B01 48BF-                           mov rdi, fmt_string_char_34
   991 00000B03 [4D02000000000000] 
   992 00000B0B E97CFFFFFF                      jmp .Lstring_char_emit
   993                                  
   994                                  .Lstring_char_92:
   995 00000B10 48BF-                           mov rdi, fmt_string_char_92
   995 00000B12 [5002000000000000] 
   996 00000B1A E96DFFFFFF                      jmp .Lstring_char_emit
   997                                  
   998                                  .Lstring_char_hex:
   999 00000B1F 48BF-                           mov rdi, fmt_string_char_hex
   999 00000B21 [5302000000000000] 
  1000 00000B29 4889C6                          mov rsi, rax
  1001 00000B2C E95BFFFFFF                      jmp .Lstring_char_emit        
  1002                                  
  1003                                  .Lstring_end:
  1004 00000B31 4883C410                	add rsp, 8 * 2
  1005 00000B35 48BF-                   	mov rdi, fmt_dquote
  1005 00000B37 [3302000000000000] 
  1006 00000B3F EB34                    	jmp .Lemit
  1007                                  
  1008                                  .Lunknown_sexpr_type:
  1009 00000B41 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1009 00000B43 [F301000000000000] 
  1010 00000B4B 4825FF000000            	and rax, 255
  1011 00000B51 4889C2                  	mov rdx, rax
  1012 00000B54 4889F9                  	mov rcx, rdi
  1013 00000B57 488B3C25[00000000]      	mov rdi, qword [stderr]
  1014 00000B5F B800000000              	mov rax, 0
  1015 00000B64 E8(00000000)            	call fprintf
  1016 00000B69 48C7C0FFFFFFFF          	mov rax, -1
  1017 00000B70 E8(00000000)            	call exit
  1018                                  
  1019                                  .Lemit:
  1020 00000B75 B800000000              	mov rax, 0
  1021 00000B7A E8(00000000)            	call printf
  1022 00000B7F EB00                    	jmp .Lend
  1023                                  
  1024                                  .Lend:
  1025                                  	LEAVE
    38 00000B81 C9                  <1>  leave
  1026 00000B82 C3                      	ret
  1027                                  
  1028                                  ;;; rdi: address of free variable
  1029                                  ;;; rsi: address of code-pointer
  1030                                  bind_primitive:
  1031                                          ENTER
    33 00000B83 C8000000            <1>  enter 0, 0
    34 00000B87 4883E4F0            <1>  and rsp, ~15
  1032 00000B8B 57                              push rdi
  1033 00000B8C BF11000000                      mov rdi, (1 + 8 + 8)
  1034 00000B91 E8ABFAFFFF                      call malloc
  1035 00000B96 5F                              pop rdi
  1036 00000B97 C60005                          mov byte [rax], T_closure
  1037 00000B9A 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1038 00000BA2 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1039 00000BA6 488907                          mov qword [rdi], rax
  1040                                          LEAVE
    38 00000BA9 C9                  <1>  leave
  1041 00000BAA C3                              ret
  1042                                  
  1043                                  
  1044                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1045                                  L_code_ptr_bin_apply:
  1046                                          
  1047                                  L_code_ptr_is_null:
  1048                                          ENTER
    33 00000BAB C8000000            <1>  enter 0, 0
    34 00000BAF 4883E4F0            <1>  and rsp, ~15
  1049 00000BB3 48837D1801                      cmp COUNT, 1
  1050 00000BB8 0F856F100000                    jne L_error_arg_count_1
  1051 00000BBE 488B4520                        mov rax, PARAM(0)
  1052 00000BC2 803801                          cmp byte [rax], T_nil
  1053 00000BC5 750C                            jne .L_false
  1054 00000BC7 48B8-                           mov rax, sob_boolean_true
  1054 00000BC9 [0300000000000000] 
  1055 00000BD1 EB0A                            jmp .L_end
  1056                                  .L_false:
  1057 00000BD3 48B8-                           mov rax, sob_boolean_false
  1057 00000BD5 [0200000000000000] 
  1058                                  .L_end:
  1059                                          LEAVE
    38 00000BDD C9                  <1>  leave
  1060 00000BDE C21800                          ret AND_KILL_FRAME(1)
  1061                                  
  1062                                  L_code_ptr_is_pair:
  1063                                          ENTER
    33 00000BE1 C8000000            <1>  enter 0, 0
    34 00000BE5 4883E4F0            <1>  and rsp, ~15
  1064 00000BE9 48837D1801                      cmp COUNT, 1
  1065 00000BEE 0F8539100000                    jne L_error_arg_count_1
  1066 00000BF4 488B4520                        mov rax, PARAM(0)
  1067 00000BF8 803821                          cmp byte [rax], T_pair
  1068 00000BFB 750C                            jne .L_false
  1069 00000BFD 48B8-                           mov rax, sob_boolean_true
  1069 00000BFF [0300000000000000] 
  1070 00000C07 EB0A                            jmp .L_end
  1071                                  .L_false:
  1072 00000C09 48B8-                           mov rax, sob_boolean_false
  1072 00000C0B [0200000000000000] 
  1073                                  .L_end:
  1074                                          LEAVE
    38 00000C13 C9                  <1>  leave
  1075 00000C14 C21800                          ret AND_KILL_FRAME(1)
  1076                                          
  1077                                  L_code_ptr_is_void:
  1078                                          ENTER
    33 00000C17 C8000000            <1>  enter 0, 0
    34 00000C1B 4883E4F0            <1>  and rsp, ~15
  1079 00000C1F 48837D1801                      cmp COUNT, 1
  1080 00000C24 0F8503100000                    jne L_error_arg_count_1
  1081 00000C2A 488B4520                        mov rax, PARAM(0)
  1082 00000C2E 803800                          cmp byte [rax], T_void
  1083 00000C31 750C                            jne .L_false
  1084 00000C33 48B8-                           mov rax, sob_boolean_true
  1084 00000C35 [0300000000000000] 
  1085 00000C3D EB0A                            jmp .L_end
  1086                                  .L_false:
  1087 00000C3F 48B8-                           mov rax, sob_boolean_false
  1087 00000C41 [0200000000000000] 
  1088                                  .L_end:
  1089                                          LEAVE
    38 00000C49 C9                  <1>  leave
  1090 00000C4A C21800                          ret AND_KILL_FRAME(1)
  1091                                  
  1092                                  L_code_ptr_is_char:
  1093                                          ENTER
    33 00000C4D C8000000            <1>  enter 0, 0
    34 00000C51 4883E4F0            <1>  and rsp, ~15
  1094 00000C55 48837D1801                      cmp COUNT, 1
  1095 00000C5A 0F85CD0F0000                    jne L_error_arg_count_1
  1096 00000C60 488B4520                        mov rax, PARAM(0)
  1097 00000C64 803802                          cmp byte [rax], T_char
  1098 00000C67 750C                            jne .L_false
  1099 00000C69 48B8-                           mov rax, sob_boolean_true
  1099 00000C6B [0300000000000000] 
  1100 00000C73 EB0A                            jmp .L_end
  1101                                  .L_false:
  1102 00000C75 48B8-                           mov rax, sob_boolean_false
  1102 00000C77 [0200000000000000] 
  1103                                  .L_end:
  1104                                          LEAVE
    38 00000C7F C9                  <1>  leave
  1105 00000C80 C21800                          ret AND_KILL_FRAME(1)
  1106                                  
  1107                                  L_code_ptr_is_string:
  1108                                          ENTER
    33 00000C83 C8000000            <1>  enter 0, 0
    34 00000C87 4883E4F0            <1>  and rsp, ~15
  1109 00000C8B 48837D1801                      cmp COUNT, 1
  1110 00000C90 0F85970F0000                    jne L_error_arg_count_1
  1111 00000C96 488B4520                        mov rax, PARAM(0)
  1112 00000C9A 803803                          cmp byte [rax], T_string
  1113 00000C9D 750C                            jne .L_false
  1114 00000C9F 48B8-                           mov rax, sob_boolean_true
  1114 00000CA1 [0300000000000000] 
  1115 00000CA9 EB0A                            jmp .L_end
  1116                                  .L_false:
  1117 00000CAB 48B8-                           mov rax, sob_boolean_false
  1117 00000CAD [0200000000000000] 
  1118                                  .L_end:
  1119                                          LEAVE
    38 00000CB5 C9                  <1>  leave
  1120 00000CB6 C21800                          ret AND_KILL_FRAME(1)
  1121                                  
  1122                                  L_code_ptr_is_symbol:
  1123                                          ENTER
    33 00000CB9 C8000000            <1>  enter 0, 0
    34 00000CBD 4883E4F0            <1>  and rsp, ~15
  1124 00000CC1 48837D1801                      cmp COUNT, 1
  1125 00000CC6 0F85610F0000                    jne L_error_arg_count_1
  1126 00000CCC 488B4520                        mov rax, PARAM(0)
  1127 00000CD0 803804                          cmp byte [rax], T_symbol
  1128 00000CD3 750C                            jne .L_false
  1129 00000CD5 48B8-                           mov rax, sob_boolean_true
  1129 00000CD7 [0300000000000000] 
  1130 00000CDF EB0A                            jmp .L_end
  1131                                  .L_false:
  1132 00000CE1 48B8-                           mov rax, sob_boolean_false
  1132 00000CE3 [0200000000000000] 
  1133                                  .L_end:
  1134                                          LEAVE
    38 00000CEB C9                  <1>  leave
  1135 00000CEC C21800                          ret AND_KILL_FRAME(1)
  1136                                  
  1137                                  L_code_ptr_is_vector:
  1138                                          ENTER
    33 00000CEF C8000000            <1>  enter 0, 0
    34 00000CF3 4883E4F0            <1>  and rsp, ~15
  1139 00000CF7 48837D1801                      cmp COUNT, 1
  1140 00000CFC 0F852B0F0000                    jne L_error_arg_count_1
  1141 00000D02 488B4520                        mov rax, PARAM(0)
  1142 00000D06 803822                          cmp byte [rax], T_vector
  1143 00000D09 750C                            jne .L_false
  1144 00000D0B 48B8-                           mov rax, sob_boolean_true
  1144 00000D0D [0300000000000000] 
  1145 00000D15 EB0A                            jmp .L_end
  1146                                  .L_false:
  1147 00000D17 48B8-                           mov rax, sob_boolean_false
  1147 00000D19 [0200000000000000] 
  1148                                  .L_end:
  1149                                          LEAVE
    38 00000D21 C9                  <1>  leave
  1150 00000D22 C21800                          ret AND_KILL_FRAME(1)
  1151                                  
  1152                                  L_code_ptr_is_closure:
  1153                                          ENTER
    33 00000D25 C8000000            <1>  enter 0, 0
    34 00000D29 4883E4F0            <1>  and rsp, ~15
  1154 00000D2D 48837D1801                      cmp COUNT, 1
  1155 00000D32 0F85F50E0000                    jne L_error_arg_count_1
  1156 00000D38 488B4520                        mov rax, PARAM(0)
  1157 00000D3C 803805                          cmp byte [rax], T_closure
  1158 00000D3F 750C                            jne .L_false
  1159 00000D41 48B8-                           mov rax, sob_boolean_true
  1159 00000D43 [0300000000000000] 
  1160 00000D4B EB0A                            jmp .L_end
  1161                                  .L_false:
  1162 00000D4D 48B8-                           mov rax, sob_boolean_false
  1162 00000D4F [0200000000000000] 
  1163                                  .L_end:
  1164                                          LEAVE
    38 00000D57 C9                  <1>  leave
  1165 00000D58 C21800                          ret AND_KILL_FRAME(1)
  1166                                  
  1167                                  L_code_ptr_is_real:
  1168                                          ENTER
    33 00000D5B C8000000            <1>  enter 0, 0
    34 00000D5F 4883E4F0            <1>  and rsp, ~15
  1169 00000D63 48837D1801                      cmp COUNT, 1
  1170 00000D68 0F85BF0E0000                    jne L_error_arg_count_1
  1171 00000D6E 488B4520                        mov rax, PARAM(0)
  1172 00000D72 803812                          cmp byte [rax], T_real
  1173 00000D75 750C                            jne .L_false
  1174 00000D77 48B8-                           mov rax, sob_boolean_true
  1174 00000D79 [0300000000000000] 
  1175 00000D81 EB0A                            jmp .L_end
  1176                                  .L_false:
  1177 00000D83 48B8-                           mov rax, sob_boolean_false
  1177 00000D85 [0200000000000000] 
  1178                                  .L_end:
  1179                                          LEAVE
    38 00000D8D C9                  <1>  leave
  1180 00000D8E C21800                          ret AND_KILL_FRAME(1)
  1181                                  
  1182                                  L_code_ptr_is_rational:
  1183                                          ENTER
    33 00000D91 C8000000            <1>  enter 0, 0
    34 00000D95 4883E4F0            <1>  and rsp, ~15
  1184 00000D99 48837D1801                      cmp COUNT, 1
  1185 00000D9E 0F85890E0000                    jne L_error_arg_count_1
  1186 00000DA4 488B4520                        mov rax, PARAM(0)
  1187 00000DA8 803811                          cmp byte [rax], T_rational
  1188 00000DAB 750C                            jne .L_false
  1189 00000DAD 48B8-                           mov rax, sob_boolean_true
  1189 00000DAF [0300000000000000] 
  1190 00000DB7 EB0A                            jmp .L_end
  1191                                  .L_false:
  1192 00000DB9 48B8-                           mov rax, sob_boolean_false
  1192 00000DBB [0200000000000000] 
  1193                                  .L_end:
  1194                                          LEAVE
    38 00000DC3 C9                  <1>  leave
  1195 00000DC4 C21800                          ret AND_KILL_FRAME(1)
  1196                                  
  1197                                  L_code_ptr_is_boolean:
  1198                                          ENTER
    33 00000DC7 C8000000            <1>  enter 0, 0
    34 00000DCB 4883E4F0            <1>  and rsp, ~15
  1199 00000DCF 48837D1801                      cmp COUNT, 1
  1200 00000DD4 0F85530E0000                    jne L_error_arg_count_1
  1201 00000DDA 488B4520                        mov rax, PARAM(0)
  1202 00000DDE 8A18                            mov bl, byte [rax]
  1203 00000DE0 80E308                          and bl, T_boolean
  1204 00000DE3 740C                            je .L_false
  1205 00000DE5 48B8-                           mov rax, sob_boolean_true
  1205 00000DE7 [0300000000000000] 
  1206 00000DEF EB0A                            jmp .L_end
  1207                                  .L_false:
  1208 00000DF1 48B8-                           mov rax, sob_boolean_false
  1208 00000DF3 [0200000000000000] 
  1209                                  .L_end:
  1210                                          LEAVE
    38 00000DFB C9                  <1>  leave
  1211 00000DFC C21800                          ret AND_KILL_FRAME(1)
  1212                                          
  1213                                  L_code_ptr_is_number:
  1214                                          ENTER
    33 00000DFF C8000000            <1>  enter 0, 0
    34 00000E03 4883E4F0            <1>  and rsp, ~15
  1215 00000E07 48837D1801                      cmp COUNT, 1
  1216 00000E0C 0F851B0E0000                    jne L_error_arg_count_1
  1217 00000E12 488B4520                        mov rax, PARAM(0)
  1218 00000E16 8A18                            mov bl, byte [rax]
  1219 00000E18 80E310                          and bl, T_number
  1220 00000E1B 740C                            je .L_false
  1221 00000E1D 48B8-                           mov rax, sob_boolean_true
  1221 00000E1F [0300000000000000] 
  1222 00000E27 EB0A                            jmp .L_end
  1223                                  .L_false:
  1224 00000E29 48B8-                           mov rax, sob_boolean_false
  1224 00000E2B [0200000000000000] 
  1225                                  .L_end:
  1226                                          LEAVE
    38 00000E33 C9                  <1>  leave
  1227 00000E34 C21800                          ret AND_KILL_FRAME(1)
  1228                                          
  1229                                  L_code_ptr_is_collection:
  1230                                          ENTER
    33 00000E37 C8000000            <1>  enter 0, 0
    34 00000E3B 4883E4F0            <1>  and rsp, ~15
  1231 00000E3F 48837D1801                      cmp COUNT, 1
  1232 00000E44 0F85E30D0000                    jne L_error_arg_count_1
  1233 00000E4A 488B4520                        mov rax, PARAM(0)
  1234 00000E4E 8A18                            mov bl, byte [rax]
  1235 00000E50 80E320                          and bl, T_collection
  1236 00000E53 740C                            je .L_false
  1237 00000E55 48B8-                           mov rax, sob_boolean_true
  1237 00000E57 [0300000000000000] 
  1238 00000E5F EB0A                            jmp .L_end
  1239                                  .L_false:
  1240 00000E61 48B8-                           mov rax, sob_boolean_false
  1240 00000E63 [0200000000000000] 
  1241                                  .L_end:
  1242                                          LEAVE
    38 00000E6B C9                  <1>  leave
  1243 00000E6C C21800                          ret AND_KILL_FRAME(1)
  1244                                  
  1245                                  L_code_ptr_cons:
  1246                                          ENTER
    33 00000E6F C8000000            <1>  enter 0, 0
    34 00000E73 4883E4F0            <1>  and rsp, ~15
  1247 00000E77 48837D1802                      cmp COUNT, 2
  1248 00000E7C 0F85D70D0000                    jne L_error_arg_count_2
  1249 00000E82 BF11000000                      mov rdi, (1 + 8 + 8)
  1250 00000E87 E8B5F7FFFF                      call malloc
  1251 00000E8C C60021                          mov byte [rax], T_pair
  1252 00000E8F 488B5D20                        mov rbx, PARAM(0)
  1253 00000E93 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1254 00000E97 488B5D28                        mov rbx, PARAM(1)
  1255 00000E9B 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1256                                          LEAVE
    38 00000E9F C9                  <1>  leave
  1257 00000EA0 C22000                          ret AND_KILL_FRAME(2)
  1258                                  
  1259                                  L_code_ptr_display_sexpr:
  1260                                          ENTER
    33 00000EA3 C8000000            <1>  enter 0, 0
    34 00000EA7 4883E4F0            <1>  and rsp, ~15
  1261 00000EAB 48837D1801                      cmp COUNT, 1
  1262 00000EB0 0F85770D0000                    jne L_error_arg_count_1
  1263 00000EB6 488B7D20                        mov rdi, PARAM(0)
  1264 00000EBA E89DF7FFFF                      call print_sexpr
  1265 00000EBF 48B8-                           mov rax, sob_void
  1265 00000EC1 [0000000000000000] 
  1266                                          LEAVE
    38 00000EC9 C9                  <1>  leave
  1267 00000ECA C21800                          ret AND_KILL_FRAME(1)
  1268                                  
  1269                                  L_code_ptr_write_char:
  1270                                          ENTER
    33 00000ECD C8000000            <1>  enter 0, 0
    34 00000ED1 4883E4F0            <1>  and rsp, ~15
  1271 00000ED5 48837D1801                      cmp COUNT, 1
  1272 00000EDA 0F854D0D0000                    jne L_error_arg_count_1
  1273 00000EE0 488B4520                        mov rax, PARAM(0)
  1274                                          assert_char(rax)
    42 00000EE4 803802              <1>  cmp byte [%1], %2
    43 00000EE7 0F85F00D0000        <1>  jne L_error_incorrect_type
  1275 00000EED 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1276 00000EF0 4825FF000000                    and rax, 255
  1277 00000EF6 48BF-                           mov rdi, fmt_char
  1277 00000EF8 [5902000000000000] 
  1278 00000F00 4889C6                          mov rsi, rax
  1279 00000F03 B800000000                      mov rax, 0
  1280 00000F08 E8(00000000)                    call printf
  1281 00000F0D 48B8-                           mov rax, sob_void
  1281 00000F0F [0000000000000000] 
  1282                                          LEAVE
    38 00000F17 C9                  <1>  leave
  1283 00000F18 C21800                          ret AND_KILL_FRAME(1)
  1284                                  
  1285                                  L_code_ptr_car:
  1286                                          ENTER
    33 00000F1B C8000000            <1>  enter 0, 0
    34 00000F1F 4883E4F0            <1>  and rsp, ~15
  1287 00000F23 48837D1801                      cmp COUNT, 1
  1288 00000F28 0F85FF0C0000                    jne L_error_arg_count_1
  1289 00000F2E 488B4520                        mov rax, PARAM(0)
  1290                                          assert_pair(rax)
    42 00000F32 803821              <1>  cmp byte [%1], %2
    43 00000F35 0F85A20D0000        <1>  jne L_error_incorrect_type
  1291 00000F3B 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1292                                          LEAVE
    38 00000F3F C9                  <1>  leave
  1293 00000F40 C21800                          ret AND_KILL_FRAME(1)
  1294                                          
  1295                                  L_code_ptr_cdr:
  1296                                          ENTER
    33 00000F43 C8000000            <1>  enter 0, 0
    34 00000F47 4883E4F0            <1>  and rsp, ~15
  1297 00000F4B 48837D1801                      cmp COUNT, 1
  1298 00000F50 0F85D70C0000                    jne L_error_arg_count_1
  1299 00000F56 488B4520                        mov rax, PARAM(0)
  1300                                          assert_pair(rax)
    42 00000F5A 803821              <1>  cmp byte [%1], %2
    43 00000F5D 0F857A0D0000        <1>  jne L_error_incorrect_type
  1301 00000F63 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1302                                          LEAVE
    38 00000F67 C9                  <1>  leave
  1303 00000F68 C21800                          ret AND_KILL_FRAME(1)
  1304                                          
  1305                                  L_code_ptr_string_length:
  1306                                          ENTER
    33 00000F6B C8000000            <1>  enter 0, 0
    34 00000F6F 4883E4F0            <1>  and rsp, ~15
  1307 00000F73 48837D1801                      cmp COUNT, 1
  1308 00000F78 0F85AF0C0000                    jne L_error_arg_count_1
  1309 00000F7E 488B4520                        mov rax, PARAM(0)
  1310                                          assert_string(rax)
    42 00000F82 803803              <1>  cmp byte [%1], %2
    43 00000F85 0F85520D0000        <1>  jne L_error_incorrect_type
  1311 00000F8B 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1312 00000F8F E81F0C0000                      call make_integer
  1313                                          LEAVE
    38 00000F94 C9                  <1>  leave
  1314 00000F95 C21800                          ret AND_KILL_FRAME(1)
  1315                                  
  1316                                  L_code_ptr_vector_length:
  1317                                          ENTER
    33 00000F98 C8000000            <1>  enter 0, 0
    34 00000F9C 4883E4F0            <1>  and rsp, ~15
  1318 00000FA0 48837D1801                      cmp COUNT, 1
  1319 00000FA5 0F85820C0000                    jne L_error_arg_count_1
  1320 00000FAB 488B4520                        mov rax, PARAM(0)
  1321                                          assert_vector(rax)
    42 00000FAF 803822              <1>  cmp byte [%1], %2
    43 00000FB2 0F85250D0000        <1>  jne L_error_incorrect_type
  1322 00000FB8 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1323 00000FBC E8F20B0000                      call make_integer
  1324                                          LEAVE
    38 00000FC1 C9                  <1>  leave
  1325 00000FC2 C21800                          ret AND_KILL_FRAME(1)
  1326                                  
  1327                                  L_code_ptr_real_to_integer:
  1328                                          ENTER
    33 00000FC5 C8000000            <1>  enter 0, 0
    34 00000FC9 4883E4F0            <1>  and rsp, ~15
  1329 00000FCD 48837D1801                      cmp COUNT, 1
  1330 00000FD2 0F85550C0000                    jne L_error_arg_count_1
  1331 00000FD8 488B5D20                        mov rbx, PARAM(0)
  1332                                          assert_real(rbx)
    42 00000FDC 803B12              <1>  cmp byte [%1], %2
    43 00000FDF 0F85F80C0000        <1>  jne L_error_incorrect_type
  1333 00000FE5 F20F104301                      movsd xmm0, qword [rbx + 1]
  1334 00000FEA F2480F2CF8                      cvttsd2si rdi, xmm0
  1335 00000FEF E8BF0B0000                      call make_integer
  1336                                          LEAVE
    38 00000FF4 C9                  <1>  leave
  1337 00000FF5 C21800                          ret AND_KILL_FRAME(1)
  1338                                  
  1339                                  L_code_ptr_exit:
  1340                                          ENTER
    33 00000FF8 C8000000            <1>  enter 0, 0
    34 00000FFC 4883E4F0            <1>  and rsp, ~15
  1341 00001000 48837D1800                      cmp COUNT, 0
  1342 00001005 0F85F60B0000                    jne L_error_arg_count_0
  1343 0000100B B800000000                      mov rax, 0
  1344 00001010 E8(00000000)                    call exit
  1345                                  
  1346                                  L_code_ptr_integer_to_real:
  1347                                          ENTER
    33 00001015 C8000000            <1>  enter 0, 0
    34 00001019 4883E4F0            <1>  and rsp, ~15
  1348 0000101D 48837D1801                      cmp COUNT, 1
  1349 00001022 0F85050C0000                    jne L_error_arg_count_1
  1350 00001028 488B4520                        mov rax, PARAM(0)
  1351                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000102C 803811              <2>  cmp byte [%1], %2
    43 0000102F 0F85A80C0000        <2>  jne L_error_incorrect_type
    48 00001035 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000103A 0F859D0C0000        <1>  jne L_error_incorrect_type
  1352 00001040 FF7001                          push qword [rax + 1]
  1353 00001043 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1354 00001049 E8490B0000                      call make_real
  1355                                          LEAVE
    38 0000104E C9                  <1>  leave
  1356 0000104F C21800                          ret AND_KILL_FRAME(1)
  1357                                  
  1358                                  L_code_ptr_rational_to_real:
  1359                                          ENTER
    33 00001052 C8000000            <1>  enter 0, 0
    34 00001056 4883E4F0            <1>  and rsp, ~15
  1360 0000105A 48837D1801                      cmp COUNT, 1
  1361 0000105F 0F85C80B0000                    jne L_error_arg_count_1
  1362 00001065 488B4520                        mov rax, PARAM(0)
  1363                                          assert_rational(rax)
    42 00001069 803811              <1>  cmp byte [%1], %2
    43 0000106C 0F856B0C0000        <1>  jne L_error_incorrect_type
  1364 00001072 FF7001                          push qword [rax + 1]
  1365 00001075 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1366 0000107B FF7009                          push qword [rax + 1 + 8]
  1367 0000107E F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1368 00001084 F20F5EC1                        divsd xmm0, xmm1
  1369 00001088 E80A0B0000                      call make_real
  1370                                          LEAVE
    38 0000108D C9                  <1>  leave
  1371 0000108E C21800                          ret AND_KILL_FRAME(1)
  1372                                  
  1373                                  L_code_ptr_char_to_integer:
  1374                                          ENTER
    33 00001091 C8000000            <1>  enter 0, 0
    34 00001095 4883E4F0            <1>  and rsp, ~15
  1375 00001099 48837D1801                      cmp COUNT, 1
  1376 0000109E 0F85890B0000                    jne L_error_arg_count_1
  1377 000010A4 488B4520                        mov rax, PARAM(0)
  1378                                          assert_char(rax)
    42 000010A8 803802              <1>  cmp byte [%1], %2
    43 000010AB 0F852C0C0000        <1>  jne L_error_incorrect_type
  1379 000010B1 8A4001                          mov al, byte [rax + 1]
  1380 000010B4 4825FF000000                    and rax, 255
  1381 000010BA 4889C7                          mov rdi, rax
  1382 000010BD E8F10A0000                      call make_integer
  1383                                          LEAVE
    38 000010C2 C9                  <1>  leave
  1384 000010C3 C21800                          ret AND_KILL_FRAME(1)
  1385                                  
  1386                                  L_code_ptr_integer_to_char:
  1387                                          ENTER
    33 000010C6 C8000000            <1>  enter 0, 0
    34 000010CA 4883E4F0            <1>  and rsp, ~15
  1388 000010CE 48837D1801                      cmp COUNT, 1
  1389 000010D3 0F85540B0000                    jne L_error_arg_count_1
  1390 000010D9 488B4520                        mov rax, PARAM(0)
  1391                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010DD 803811              <2>  cmp byte [%1], %2
    43 000010E0 0F85F70B0000        <2>  jne L_error_incorrect_type
    48 000010E6 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010EB 0F85EC0B0000        <1>  jne L_error_incorrect_type
  1392 000010F1 488B5801                        mov rbx, qword [rax + 1]
  1393 000010F5 4883FB00                        cmp rbx, 0
  1394 000010F9 0F8EDA0A0000                    jle L_error_integer_range
  1395 000010FF 4881FB00010000                  cmp rbx, 256
  1396 00001106 0F8DCD0A0000                    jge L_error_integer_range
  1397 0000110C BF02000000                      mov rdi, (1 + 1)
  1398 00001111 E82BF5FFFF                      call malloc
  1399 00001116 C60002                          mov byte [rax], T_char
  1400 00001119 885801                          mov byte [rax + 1], bl
  1401                                          LEAVE
    38 0000111C C9                  <1>  leave
  1402 0000111D C21800                          ret AND_KILL_FRAME(1)
  1403                                  
  1404                                  L_code_ptr_trng:
  1405                                          ENTER
    33 00001120 C8000000            <1>  enter 0, 0
    34 00001124 4883E4F0            <1>  and rsp, ~15
  1406 00001128 48837D1800                      cmp COUNT, 0
  1407 0000112D 0F85CE0A0000                    jne L_error_arg_count_0
  1408 00001133 480FC7F7                        rdrand rdi
  1409 00001137 48D1EF                          shr rdi, 1
  1410 0000113A E8740A0000                      call make_integer
  1411                                          LEAVE
    38 0000113F C9                  <1>  leave
  1412 00001140 C21000                          ret AND_KILL_FRAME(0)
  1413                                  
  1414                                  L_code_ptr_is_zero:
  1415                                          ENTER
    33 00001143 C8000000            <1>  enter 0, 0
    34 00001147 4883E4F0            <1>  and rsp, ~15
  1416 0000114B 48837D1801                      cmp COUNT, 1
  1417 00001150 0F85D70A0000                    jne L_error_arg_count_1
  1418 00001156 488B4520                        mov rax, PARAM(0)
  1419 0000115A 803811                          cmp byte [rax], T_rational
  1420 0000115D 740A                            je .L_rational
  1421 0000115F 803812                          cmp byte [rax], T_real
  1422 00001162 740E                            je .L_real
  1423 00001164 E9740B0000                      jmp L_error_incorrect_type
  1424                                  .L_rational:
  1425 00001169 4883780100                      cmp qword [rax + 1], 0
  1426 0000116E 7420                            je .L_zero
  1427 00001170 EB12                            jmp .L_not_zero
  1428                                  .L_real:
  1429 00001172 660FEFC0                        pxor xmm0, xmm0
  1430 00001176 FF7001                          push qword [rax + 1]
  1431 00001179 F20F100C24                      movsd xmm1, qword [rsp]
  1432 0000117E 660F2EC1                        ucomisd xmm0, xmm1
  1433 00001182 740C                            je .L_zero
  1434                                  .L_not_zero:
  1435 00001184 48B8-                           mov rax, sob_boolean_false
  1435 00001186 [0200000000000000] 
  1436 0000118E EB0A                            jmp .L_end
  1437                                  .L_zero:
  1438 00001190 48B8-                           mov rax, sob_boolean_true
  1438 00001192 [0300000000000000] 
  1439                                  .L_end:
  1440                                          LEAVE
    38 0000119A C9                  <1>  leave
  1441 0000119B C21800                          ret AND_KILL_FRAME(1)
  1442                                  
  1443                                  L_code_ptr_is_integer:
  1444                                          ENTER
    33 0000119E C8000000            <1>  enter 0, 0
    34 000011A2 4883E4F0            <1>  and rsp, ~15
  1445 000011A6 48837D1801                      cmp COUNT, 1
  1446 000011AB 0F857C0A0000                    jne L_error_arg_count_1
  1447 000011B1 488B4520                        mov rax, PARAM(0)
  1448 000011B5 803811                          cmp byte [rax], T_rational
  1449 000011B8 7513                            jne .L_false
  1450 000011BA 4883780901                      cmp qword [rax + 1 + 8], 1
  1451 000011BF 750C                            jne .L_false
  1452 000011C1 48B8-                           mov rax, sob_boolean_true
  1452 000011C3 [0300000000000000] 
  1453 000011CB EB0A                            jmp .L_exit
  1454                                  .L_false:
  1455 000011CD 48B8-                           mov rax, sob_boolean_false
  1455 000011CF [0200000000000000] 
  1456                                  .L_exit:
  1457                                          LEAVE
    38 000011D7 C9                  <1>  leave
  1458 000011D8 C21800                          ret AND_KILL_FRAME(1)
  1459                                  
  1460                                  L_code_ptr_raw_bin_add_rr:
  1461                                          ENTER
    33 000011DB C8000000            <1>  enter 0, 0
    34 000011DF 4883E4F0            <1>  and rsp, ~15
  1462 000011E3 48837D1802                      cmp COUNT, 2
  1463 000011E8 0F856B0A0000                    jne L_error_arg_count_2
  1464 000011EE 488B5D20                        mov rbx, PARAM(0)
  1465                                          assert_real(rbx)
    42 000011F2 803B12              <1>  cmp byte [%1], %2
    43 000011F5 0F85E20A0000        <1>  jne L_error_incorrect_type
  1466 000011FB 488B4D28                        mov rcx, PARAM(1)
  1467                                          assert_real(rcx)
    42 000011FF 803912              <1>  cmp byte [%1], %2
    43 00001202 0F85D50A0000        <1>  jne L_error_incorrect_type
  1468 00001208 F20F104301                      movsd xmm0, qword [rbx + 1]
  1469 0000120D F20F104901                      movsd xmm1, qword [rcx + 1]
  1470 00001212 F20F58C1                        addsd xmm0, xmm1
  1471 00001216 E87C090000                      call make_real
  1472                                          LEAVE
    38 0000121B C9                  <1>  leave
  1473 0000121C C22000                          ret AND_KILL_FRAME(2)
  1474                                  
  1475                                  L_code_ptr_raw_bin_sub_rr:
  1476                                          ENTER
    33 0000121F C8000000            <1>  enter 0, 0
    34 00001223 4883E4F0            <1>  and rsp, ~15
  1477 00001227 48837D1802                      cmp COUNT, 2
  1478 0000122C 0F85270A0000                    jne L_error_arg_count_2
  1479 00001232 488B5D20                        mov rbx, PARAM(0)
  1480                                          assert_real(rbx)
    42 00001236 803B12              <1>  cmp byte [%1], %2
    43 00001239 0F859E0A0000        <1>  jne L_error_incorrect_type
  1481 0000123F 488B4D28                        mov rcx, PARAM(1)
  1482                                          assert_real(rcx)
    42 00001243 803912              <1>  cmp byte [%1], %2
    43 00001246 0F85910A0000        <1>  jne L_error_incorrect_type
  1483 0000124C F20F104301                      movsd xmm0, qword [rbx + 1]
  1484 00001251 F20F104901                      movsd xmm1, qword [rcx + 1]
  1485 00001256 F20F5CC1                        subsd xmm0, xmm1
  1486 0000125A E838090000                      call make_real
  1487                                          LEAVE
    38 0000125F C9                  <1>  leave
  1488 00001260 C22000                          ret AND_KILL_FRAME(2)
  1489                                  
  1490                                  L_code_ptr_raw_bin_mul_rr:
  1491                                          ENTER
    33 00001263 C8000000            <1>  enter 0, 0
    34 00001267 4883E4F0            <1>  and rsp, ~15
  1492 0000126B 48837D1802                      cmp COUNT, 2
  1493 00001270 0F85E3090000                    jne L_error_arg_count_2
  1494 00001276 488B5D20                        mov rbx, PARAM(0)
  1495                                          assert_real(rbx)
    42 0000127A 803B12              <1>  cmp byte [%1], %2
    43 0000127D 0F855A0A0000        <1>  jne L_error_incorrect_type
  1496 00001283 488B4D28                        mov rcx, PARAM(1)
  1497                                          assert_real(rcx)
    42 00001287 803912              <1>  cmp byte [%1], %2
    43 0000128A 0F854D0A0000        <1>  jne L_error_incorrect_type
  1498 00001290 F20F104301                      movsd xmm0, qword [rbx + 1]
  1499 00001295 F20F104901                      movsd xmm1, qword [rcx + 1]
  1500 0000129A F20F59C1                        mulsd xmm0, xmm1
  1501 0000129E E8F4080000                      call make_real
  1502                                          LEAVE
    38 000012A3 C9                  <1>  leave
  1503 000012A4 C22000                          ret AND_KILL_FRAME(2)
  1504                                  
  1505                                  L_code_ptr_raw_bin_div_rr:
  1506                                          ENTER
    33 000012A7 C8000000            <1>  enter 0, 0
    34 000012AB 4883E4F0            <1>  and rsp, ~15
  1507 000012AF 48837D1802                      cmp COUNT, 2
  1508 000012B4 0F859F090000                    jne L_error_arg_count_2
  1509 000012BA 488B5D20                        mov rbx, PARAM(0)
  1510                                          assert_real(rbx)
    42 000012BE 803B12              <1>  cmp byte [%1], %2
    43 000012C1 0F85160A0000        <1>  jne L_error_incorrect_type
  1511 000012C7 488B4D28                        mov rcx, PARAM(1)
  1512                                          assert_real(rcx)
    42 000012CB 803912              <1>  cmp byte [%1], %2
    43 000012CE 0F85090A0000        <1>  jne L_error_incorrect_type
  1513 000012D4 F20F104301                      movsd xmm0, qword [rbx + 1]
  1514 000012D9 F20F104901                      movsd xmm1, qword [rcx + 1]
  1515 000012DE 660FEFD2                        pxor xmm2, xmm2
  1516 000012E2 660F2ECA                        ucomisd xmm1, xmm2
  1517 000012E6 0F84190A0000                    je L_error_division_by_zero
  1518 000012EC F20F5EC1                        divsd xmm0, xmm1
  1519 000012F0 E8A2080000                      call make_real
  1520                                          LEAVE
    38 000012F5 C9                  <1>  leave
  1521 000012F6 C22000                          ret AND_KILL_FRAME(2)
  1522                                  
  1523                                  L_code_ptr_raw_bin_add_qq:
  1524                                          ENTER
    33 000012F9 C8000000            <1>  enter 0, 0
    34 000012FD 4883E4F0            <1>  and rsp, ~15
  1525 00001301 48837D1802                      cmp COUNT, 2
  1526 00001306 0F854D090000                    jne L_error_arg_count_2
  1527 0000130C 4C8B4520                        mov r8, PARAM(0)
  1528                                          assert_rational(r8)
    42 00001310 41803811            <1>  cmp byte [%1], %2
    43 00001314 0F85C3090000        <1>  jne L_error_incorrect_type
  1529 0000131A 4C8B4D28                        mov r9, PARAM(1)
  1530                                          assert_rational(r9)
    42 0000131E 41803911            <1>  cmp byte [%1], %2
    43 00001322 0F85B5090000        <1>  jne L_error_incorrect_type
  1531 00001328 498B4001                        mov rax, qword [r8 + 1] ; num1
  1532 0000132C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1533 00001330 4899                            cqo
  1534 00001332 48F7EB                          imul rbx
  1535 00001335 4889C6                          mov rsi, rax
  1536 00001338 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1537 0000133C 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1538 00001340 4899                            cqo
  1539 00001342 48F7EB                          imul rbx
  1540 00001345 4801C6                          add rsi, rax
  1541 00001348 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1542 0000134C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1543 00001350 4899                            cqo
  1544 00001352 48F7EB                          imul rbx
  1545 00001355 4889C7                          mov rdi, rax
  1546 00001358 E827010000                      call normalize_rational
  1547                                          LEAVE
    38 0000135D C9                  <1>  leave
  1548 0000135E C22000                          ret AND_KILL_FRAME(2)
  1549                                  
  1550                                  L_code_ptr_raw_bin_sub_qq:
  1551                                          ENTER
    33 00001361 C8000000            <1>  enter 0, 0
    34 00001365 4883E4F0            <1>  and rsp, ~15
  1552 00001369 48837D1802                      cmp COUNT, 2
  1553 0000136E 0F85E5080000                    jne L_error_arg_count_2
  1554 00001374 4C8B4520                        mov r8, PARAM(0)
  1555                                          assert_rational(r8)
    42 00001378 41803811            <1>  cmp byte [%1], %2
    43 0000137C 0F855B090000        <1>  jne L_error_incorrect_type
  1556 00001382 4C8B4D28                        mov r9, PARAM(1)
  1557                                          assert_rational(r9)
    42 00001386 41803911            <1>  cmp byte [%1], %2
    43 0000138A 0F854D090000        <1>  jne L_error_incorrect_type
  1558 00001390 498B4001                        mov rax, qword [r8 + 1] ; num1
  1559 00001394 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1560 00001398 4899                            cqo
  1561 0000139A 48F7EB                          imul rbx
  1562 0000139D 4889C6                          mov rsi, rax
  1563 000013A0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1564 000013A4 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1565 000013A8 4899                            cqo
  1566 000013AA 48F7EB                          imul rbx
  1567 000013AD 4829C6                          sub rsi, rax
  1568 000013B0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1569 000013B4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1570 000013B8 4899                            cqo
  1571 000013BA 48F7EB                          imul rbx
  1572 000013BD 4889C7                          mov rdi, rax
  1573 000013C0 E8BF000000                      call normalize_rational
  1574                                          LEAVE
    38 000013C5 C9                  <1>  leave
  1575 000013C6 C22000                          ret AND_KILL_FRAME(2)
  1576                                  
  1577                                  L_code_ptr_raw_bin_mul_qq:
  1578                                          ENTER
    33 000013C9 C8000000            <1>  enter 0, 0
    34 000013CD 4883E4F0            <1>  and rsp, ~15
  1579 000013D1 48837D1802                      cmp COUNT, 2
  1580 000013D6 0F857D080000                    jne L_error_arg_count_2
  1581 000013DC 4C8B4520                        mov r8, PARAM(0)
  1582                                          assert_rational(r8)
    42 000013E0 41803811            <1>  cmp byte [%1], %2
    43 000013E4 0F85F3080000        <1>  jne L_error_incorrect_type
  1583 000013EA 4C8B4D28                        mov r9, PARAM(1)
  1584                                          assert_rational(r9)
    42 000013EE 41803911            <1>  cmp byte [%1], %2
    43 000013F2 0F85E5080000        <1>  jne L_error_incorrect_type
  1585 000013F8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1586 000013FC 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1587 00001400 4899                            cqo
  1588 00001402 48F7EB                          imul rbx
  1589 00001405 4889C6                          mov rsi, rax
  1590 00001408 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1591 0000140C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1592 00001410 4899                            cqo
  1593 00001412 48F7EB                          imul rbx
  1594 00001415 4889C7                          mov rdi, rax
  1595 00001418 E867000000                      call normalize_rational
  1596                                          LEAVE
    38 0000141D C9                  <1>  leave
  1597 0000141E C22000                          ret AND_KILL_FRAME(2)
  1598                                          
  1599                                  L_code_ptr_raw_bin_div_qq:
  1600                                          ENTER
    33 00001421 C8000000            <1>  enter 0, 0
    34 00001425 4883E4F0            <1>  and rsp, ~15
  1601 00001429 48837D1802                      cmp COUNT, 2
  1602 0000142E 0F8525080000                    jne L_error_arg_count_2
  1603 00001434 4C8B4520                        mov r8, PARAM(0)
  1604                                          assert_rational(r8)
    42 00001438 41803811            <1>  cmp byte [%1], %2
    43 0000143C 0F859B080000        <1>  jne L_error_incorrect_type
  1605 00001442 4C8B4D28                        mov r9, PARAM(1)
  1606                                          assert_rational(r9)
    42 00001446 41803911            <1>  cmp byte [%1], %2
    43 0000144A 0F858D080000        <1>  jne L_error_incorrect_type
  1607 00001450 4983790100                      cmp qword [r9 + 1], 0
  1608 00001455 0F84AA080000                    je L_error_division_by_zero
  1609 0000145B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1610 0000145F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1611 00001463 4899                            cqo
  1612 00001465 48F7EB                          imul rbx
  1613 00001468 4889C6                          mov rsi, rax
  1614 0000146B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1615 0000146F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1616 00001473 4899                            cqo
  1617 00001475 48F7EB                          imul rbx
  1618 00001478 4889C7                          mov rdi, rax
  1619 0000147B E804000000                      call normalize_rational
  1620                                          LEAVE
    38 00001480 C9                  <1>  leave
  1621 00001481 C22000                          ret AND_KILL_FRAME(2)
  1622                                          
  1623                                  normalize_rational:
  1624 00001484 56                              push rsi
  1625 00001485 57                              push rdi
  1626 00001486 E839000000                      call gcd
  1627 0000148B 4889C3                          mov rbx, rax
  1628 0000148E 58                              pop rax
  1629 0000148F 4899                            cqo
  1630 00001491 48F7FB                          idiv rbx
  1631 00001494 4989C0                          mov r8, rax
  1632 00001497 58                              pop rax
  1633 00001498 4899                            cqo
  1634 0000149A 48F7FB                          idiv rbx
  1635 0000149D 4989C1                          mov r9, rax
  1636 000014A0 BF11000000                      mov rdi, (1 + 8 + 8)
  1637 000014A5 E897F1FFFF                      call malloc
  1638 000014AA C60011                          mov byte [rax], T_rational
  1639 000014AD 4C894801                        mov qword [rax + 1], r9
  1640 000014B1 4C894009                        mov qword [rax + 1 + 8], r8
  1641 000014B5 C3                              ret
  1642                                  
  1643                                  iabs:
  1644 000014B6 4889F8                          mov rax, rdi
  1645 000014B9 4883F800                        cmp rax, 0
  1646 000014BD 7C01                            jl .Lneg
  1647 000014BF C3                              ret
  1648                                  .Lneg:
  1649 000014C0 48F7D8                          neg rax
  1650 000014C3 C3                              ret
  1651                                  
  1652                                  gcd:
  1653 000014C4 E8EDFFFFFF                      call iabs
  1654 000014C9 4889C3                          mov rbx, rax
  1655 000014CC 4889F7                          mov rdi, rsi
  1656 000014CF E8E2FFFFFF                      call iabs
  1657 000014D4 4883F800                        cmp rax, 0
  1658 000014D8 7502                            jne .L0
  1659 000014DA 4893                            xchg rax, rbx
  1660                                  .L0:
  1661 000014DC 4883FB00                        cmp rbx, 0
  1662 000014E0 740C                            je .L1
  1663 000014E2 4899                            cqo
  1664 000014E4 48F7F3                          div rbx
  1665 000014E7 4889D0                          mov rax, rdx
  1666 000014EA 4893                            xchg rax, rbx
  1667 000014EC EBEE                            jmp .L0
  1668                                  .L1:
  1669 000014EE C3                              ret
  1670                                  
  1671                                  L_code_ptr_error:
  1672                                          ENTER
    33 000014EF C8000000            <1>  enter 0, 0
    34 000014F3 4883E4F0            <1>  and rsp, ~15
  1673 000014F7 48837D1802                      cmp COUNT, 2
  1674 000014FC 0F8557070000                    jne L_error_arg_count_2
  1675 00001502 488B7520                        mov rsi, PARAM(0)
  1676                                          assert_symbol(rsi)
    42 00001506 803E04              <1>  cmp byte [%1], %2
    43 00001509 0F85CE070000        <1>  jne L_error_incorrect_type
  1677 0000150F 488B7528                        mov rsi, PARAM(1)
  1678                                          assert_string(rsi)
    42 00001513 803E03              <1>  cmp byte [%1], %2
    43 00001516 0F85C1070000        <1>  jne L_error_incorrect_type
  1679 0000151C 48BF-                           mov rdi, fmt_scheme_error_part_1
  1679 0000151E [9103000000000000] 
  1680 00001526 B800000000                      mov rax, 0
  1681 0000152B E8(00000000)                    call printf
  1682 00001530 488B7D20                        mov rdi, PARAM(0)
  1683 00001534 E823F1FFFF                      call print_sexpr
  1684 00001539 48BF-                           mov rdi, fmt_scheme_error_part_2
  1684 0000153B [A503000000000000] 
  1685 00001543 B800000000                      mov rax, 0
  1686 00001548 E8(00000000)                    call printf
  1687 0000154D 488B4528                        mov rax, PARAM(1)       ; sob_string
  1688 00001551 BE01000000                      mov rsi, 1              ; size = 1 byte
  1689 00001556 488B5001                        mov rdx, qword [rax + 1] ; length
  1690 0000155A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1691 0000155E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1692 00001566 E8(00000000)                    call fwrite
  1693 0000156B 48BF-                           mov rdi, fmt_scheme_error_part_3
  1693 0000156D [E703000000000000] 
  1694 00001575 B800000000                      mov rax, 0
  1695 0000157A E8(00000000)                    call printf
  1696 0000157F 48C7C0F7FFFFFF                  mov rax, -9
  1697 00001586 E8(00000000)                    call exit
  1698                                  
  1699                                  L_code_ptr_raw_less_than_rr:
  1700                                          ENTER
    33 0000158B C8000000            <1>  enter 0, 0
    34 0000158F 4883E4F0            <1>  and rsp, ~15
  1701 00001593 48837D1802                      cmp COUNT, 2
  1702 00001598 0F85BB060000                    jne L_error_arg_count_2
  1703 0000159E 488B7520                        mov rsi, PARAM(0)
  1704                                          assert_real(rsi)
    42 000015A2 803E12              <1>  cmp byte [%1], %2
    43 000015A5 0F8532070000        <1>  jne L_error_incorrect_type
  1705 000015AB 488B7D28                        mov rdi, PARAM(1)
  1706                                          assert_real(rdi)
    42 000015AF 803F12              <1>  cmp byte [%1], %2
    43 000015B2 0F8525070000        <1>  jne L_error_incorrect_type
  1707 000015B8 F20F104601                      movsd xmm0, qword [rsi + 1]
  1708 000015BD F20F104F01                      movsd xmm1, qword [rdi + 1]
  1709 000015C2 660F2FC1                        comisd xmm0, xmm1
  1710 000015C6 730C                            jae .L_false
  1711 000015C8 48B8-                           mov rax, sob_boolean_true
  1711 000015CA [0300000000000000] 
  1712 000015D2 EB0A                            jmp .L_exit
  1713                                  .L_false:
  1714 000015D4 48B8-                           mov rax, sob_boolean_false
  1714 000015D6 [0200000000000000] 
  1715                                  .L_exit:
  1716                                          LEAVE
    38 000015DE C9                  <1>  leave
  1717 000015DF C22000                          ret AND_KILL_FRAME(2)
  1718                                          
  1719                                  L_code_ptr_raw_less_than_qq:
  1720                                          ENTER
    33 000015E2 C8000000            <1>  enter 0, 0
    34 000015E6 4883E4F0            <1>  and rsp, ~15
  1721 000015EA 48837D1802                      cmp COUNT, 2
  1722 000015EF 0F8564060000                    jne L_error_arg_count_2
  1723 000015F5 488B7520                        mov rsi, PARAM(0)
  1724                                          assert_rational(rsi)
    42 000015F9 803E11              <1>  cmp byte [%1], %2
    43 000015FC 0F85DB060000        <1>  jne L_error_incorrect_type
  1725 00001602 488B7D28                        mov rdi, PARAM(1)
  1726                                          assert_rational(rdi)
    42 00001606 803F11              <1>  cmp byte [%1], %2
    43 00001609 0F85CE060000        <1>  jne L_error_incorrect_type
  1727 0000160F 488B4601                        mov rax, qword [rsi + 1] ; num1
  1728 00001613 4899                            cqo
  1729 00001615 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1730 00001619 4889C1                          mov rcx, rax
  1731 0000161C 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1732 00001620 4899                            cqo
  1733 00001622 48F76F01                        imul qword [rdi + 1]          ; num2
  1734 00001626 4829C1                          sub rcx, rax
  1735 00001629 7D0C                            jge .L_false
  1736 0000162B 48B8-                           mov rax, sob_boolean_true
  1736 0000162D [0300000000000000] 
  1737 00001635 EB0A                            jmp .L_exit
  1738                                  .L_false:
  1739 00001637 48B8-                           mov rax, sob_boolean_false
  1739 00001639 [0200000000000000] 
  1740                                  .L_exit:
  1741                                          LEAVE
    38 00001641 C9                  <1>  leave
  1742 00001642 C22000                          ret AND_KILL_FRAME(2)
  1743                                  
  1744                                  L_code_ptr_raw_equal_rr:
  1745                                          ENTER
    33 00001645 C8000000            <1>  enter 0, 0
    34 00001649 4883E4F0            <1>  and rsp, ~15
  1746 0000164D 48837D1802                      cmp COUNT, 2
  1747 00001652 0F8501060000                    jne L_error_arg_count_2
  1748 00001658 488B7520                        mov rsi, PARAM(0)
  1749                                          assert_real(rsi)
    42 0000165C 803E12              <1>  cmp byte [%1], %2
    43 0000165F 0F8578060000        <1>  jne L_error_incorrect_type
  1750 00001665 488B7D28                        mov rdi, PARAM(1)
  1751                                          assert_real(rdi)
    42 00001669 803F12              <1>  cmp byte [%1], %2
    43 0000166C 0F856B060000        <1>  jne L_error_incorrect_type
  1752 00001672 F20F104601                      movsd xmm0, qword [rsi + 1]
  1753 00001677 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1754 0000167C 660F2FC1                        comisd xmm0, xmm1
  1755 00001680 750C                            jne .L_false
  1756 00001682 48B8-                           mov rax, sob_boolean_true
  1756 00001684 [0300000000000000] 
  1757 0000168C EB0A                            jmp .L_exit
  1758                                  .L_false:
  1759 0000168E 48B8-                           mov rax, sob_boolean_false
  1759 00001690 [0200000000000000] 
  1760                                  .L_exit:
  1761                                          LEAVE
    38 00001698 C9                  <1>  leave
  1762 00001699 C22000                          ret AND_KILL_FRAME(2)
  1763                                          
  1764                                  L_code_ptr_raw_equal_qq:
  1765                                          ENTER
    33 0000169C C8000000            <1>  enter 0, 0
    34 000016A0 4883E4F0            <1>  and rsp, ~15
  1766 000016A4 48837D1802                      cmp COUNT, 2
  1767 000016A9 0F85AA050000                    jne L_error_arg_count_2
  1768 000016AF 488B7520                        mov rsi, PARAM(0)
  1769                                          assert_rational(rsi)
    42 000016B3 803E11              <1>  cmp byte [%1], %2
    43 000016B6 0F8521060000        <1>  jne L_error_incorrect_type
  1770 000016BC 488B7D28                        mov rdi, PARAM(1)
  1771                                          assert_rational(rdi)
    42 000016C0 803F11              <1>  cmp byte [%1], %2
    43 000016C3 0F8514060000        <1>  jne L_error_incorrect_type
  1772 000016C9 488B4601                        mov rax, qword [rsi + 1] ; num1
  1773 000016CD 4899                            cqo
  1774 000016CF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1775 000016D3 4889C1                          mov rcx, rax
  1776 000016D6 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1777 000016DA 4899                            cqo
  1778 000016DC 48F76F01                        imul qword [rdi + 1]          ; num2
  1779 000016E0 4829C1                          sub rcx, rax
  1780 000016E3 750C                            jne .L_false
  1781 000016E5 48B8-                           mov rax, sob_boolean_true
  1781 000016E7 [0300000000000000] 
  1782 000016EF EB0A                            jmp .L_exit
  1783                                  .L_false:
  1784 000016F1 48B8-                           mov rax, sob_boolean_false
  1784 000016F3 [0200000000000000] 
  1785                                  .L_exit:
  1786                                          LEAVE
    38 000016FB C9                  <1>  leave
  1787 000016FC C22000                          ret AND_KILL_FRAME(2)
  1788                                  
  1789                                  L_code_ptr_quotient:
  1790                                          ENTER
    33 000016FF C8000000            <1>  enter 0, 0
    34 00001703 4883E4F0            <1>  and rsp, ~15
  1791 00001707 48837D1802                      cmp COUNT, 2
  1792 0000170C 0F8547050000                    jne L_error_arg_count_2
  1793 00001712 488B7520                        mov rsi, PARAM(0)
  1794                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001716 803E11              <2>  cmp byte [%1], %2
    43 00001719 0F85BE050000        <2>  jne L_error_incorrect_type
    48 0000171F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001724 0F85B3050000        <1>  jne L_error_incorrect_type
  1795 0000172A 488B7D28                        mov rdi, PARAM(1)
  1796                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000172E 803F11              <2>  cmp byte [%1], %2
    43 00001731 0F85A6050000        <2>  jne L_error_incorrect_type
    48 00001737 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000173C 0F859B050000        <1>  jne L_error_incorrect_type
  1797 00001742 488B4601                        mov rax, qword [rsi + 1]
  1798 00001746 488B5F01                        mov rbx, qword [rdi + 1]
  1799 0000174A 4883FB00                        cmp rbx, 0
  1800 0000174E 0F84B1050000                    je L_error_division_by_zero
  1801 00001754 4899                            cqo
  1802 00001756 48F7FB                          idiv rbx
  1803 00001759 4889C7                          mov rdi, rax
  1804 0000175C E852040000                      call make_integer
  1805                                          LEAVE
    38 00001761 C9                  <1>  leave
  1806 00001762 C22000                          ret AND_KILL_FRAME(2)
  1807                                          
  1808                                  L_code_ptr_remainder:
  1809                                          ENTER
    33 00001765 C8000000            <1>  enter 0, 0
    34 00001769 4883E4F0            <1>  and rsp, ~15
  1810 0000176D 48837D1802                      cmp COUNT, 2
  1811 00001772 0F85E1040000                    jne L_error_arg_count_2
  1812 00001778 488B7520                        mov rsi, PARAM(0)
  1813                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000177C 803E11              <2>  cmp byte [%1], %2
    43 0000177F 0F8558050000        <2>  jne L_error_incorrect_type
    48 00001785 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000178A 0F854D050000        <1>  jne L_error_incorrect_type
  1814 00001790 488B7D28                        mov rdi, PARAM(1)
  1815                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001794 803F11              <2>  cmp byte [%1], %2
    43 00001797 0F8540050000        <2>  jne L_error_incorrect_type
    48 0000179D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017A2 0F8535050000        <1>  jne L_error_incorrect_type
  1816 000017A8 488B4601                        mov rax, qword [rsi + 1]
  1817 000017AC 488B5F01                        mov rbx, qword [rdi + 1]
  1818 000017B0 4883FB00                        cmp rbx, 0
  1819 000017B4 0F844B050000                    je L_error_division_by_zero
  1820 000017BA 4899                            cqo
  1821 000017BC 48F7FB                          idiv rbx
  1822 000017BF 4889D7                          mov rdi, rdx
  1823 000017C2 E8EC030000                      call make_integer
  1824                                          LEAVE
    38 000017C7 C9                  <1>  leave
  1825 000017C8 C22000                          ret AND_KILL_FRAME(2)
  1826                                  
  1827                                  L_code_ptr_set_car:
  1828                                          ENTER
    33 000017CB C8000000            <1>  enter 0, 0
    34 000017CF 4883E4F0            <1>  and rsp, ~15
  1829 000017D3 48837D1802                      cmp COUNT, 2
  1830 000017D8 0F857B040000                    jne L_error_arg_count_2
  1831 000017DE 488B4520                        mov rax, PARAM(0)
  1832                                          assert_pair(rax)
    42 000017E2 803821              <1>  cmp byte [%1], %2
    43 000017E5 0F85F2040000        <1>  jne L_error_incorrect_type
  1833 000017EB 488B5D28                        mov rbx, PARAM(1)
  1834 000017EF 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1835 000017F3 48B8-                           mov rax, sob_void
  1835 000017F5 [0000000000000000] 
  1836                                          LEAVE
    38 000017FD C9                  <1>  leave
  1837 000017FE C22000                          ret AND_KILL_FRAME(2)
  1838                                  
  1839                                  L_code_ptr_set_cdr:
  1840                                          ENTER
    33 00001801 C8000000            <1>  enter 0, 0
    34 00001805 4883E4F0            <1>  and rsp, ~15
  1841 00001809 48837D1802                      cmp COUNT, 2
  1842 0000180E 0F8545040000                    jne L_error_arg_count_2
  1843 00001814 488B4520                        mov rax, PARAM(0)
  1844                                          assert_pair(rax)
    42 00001818 803821              <1>  cmp byte [%1], %2
    43 0000181B 0F85BC040000        <1>  jne L_error_incorrect_type
  1845 00001821 488B5D28                        mov rbx, PARAM(1)
  1846 00001825 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1847 00001829 48B8-                           mov rax, sob_void
  1847 0000182B [0000000000000000] 
  1848                                          LEAVE
    38 00001833 C9                  <1>  leave
  1849 00001834 C22000                          ret AND_KILL_FRAME(2)
  1850                                  
  1851                                  L_code_ptr_string_ref:
  1852                                          ENTER
    33 00001837 C8000000            <1>  enter 0, 0
    34 0000183B 4883E4F0            <1>  and rsp, ~15
  1853 0000183F 48837D1802                      cmp COUNT, 2
  1854 00001844 0F850F040000                    jne L_error_arg_count_2
  1855 0000184A 488B7D20                        mov rdi, PARAM(0)
  1856                                          assert_string(rdi)
    42 0000184E 803F03              <1>  cmp byte [%1], %2
    43 00001851 0F8586040000        <1>  jne L_error_incorrect_type
  1857 00001857 488B7528                        mov rsi, PARAM(1)
  1858                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000185B 803E11              <2>  cmp byte [%1], %2
    43 0000185E 0F8579040000        <2>  jne L_error_incorrect_type
    48 00001864 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001869 0F856E040000        <1>  jne L_error_incorrect_type
  1859 0000186F 488B5701                        mov rdx, qword [rdi + 1]
  1860 00001873 488B4E01                        mov rcx, qword [rsi + 1]
  1861 00001877 4839D1                          cmp rcx, rdx
  1862 0000187A 0F8D59030000                    jge L_error_integer_range
  1863 00001880 4883F900                        cmp rcx, 0
  1864 00001884 0F8C4F030000                    jl L_error_integer_range
  1865 0000188A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1866 0000188E BF02000000                      mov rdi, 2
  1867 00001893 E8A9EDFFFF                      call malloc
  1868 00001898 C60002                          mov byte [rax], T_char
  1869 0000189B 885801                          mov byte [rax + 1], bl
  1870                                          LEAVE
    38 0000189E C9                  <1>  leave
  1871 0000189F C22000                          ret AND_KILL_FRAME(2)
  1872                                  
  1873                                  L_code_ptr_vector_ref:
  1874                                          ENTER
    33 000018A2 C8000000            <1>  enter 0, 0
    34 000018A6 4883E4F0            <1>  and rsp, ~15
  1875 000018AA 48837D1802                      cmp COUNT, 2
  1876 000018AF 0F85A4030000                    jne L_error_arg_count_2
  1877 000018B5 488B7D20                        mov rdi, PARAM(0)
  1878                                          assert_vector(rdi)
    42 000018B9 803F22              <1>  cmp byte [%1], %2
    43 000018BC 0F851B040000        <1>  jne L_error_incorrect_type
  1879 000018C2 488B7528                        mov rsi, PARAM(1)
  1880                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018C6 803E11              <2>  cmp byte [%1], %2
    43 000018C9 0F850E040000        <2>  jne L_error_incorrect_type
    48 000018CF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018D4 0F8503040000        <1>  jne L_error_incorrect_type
  1881 000018DA 488B5701                        mov rdx, qword [rdi + 1]
  1882 000018DE 488B4E01                        mov rcx, qword [rsi + 1]
  1883 000018E2 4839D1                          cmp rcx, rdx
  1884 000018E5 0F8DEE020000                    jge L_error_integer_range
  1885 000018EB 4883F900                        cmp rcx, 0
  1886 000018EF 0F8CE4020000                    jl L_error_integer_range
  1887 000018F5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1888                                          LEAVE
    38 000018FA C9                  <1>  leave
  1889 000018FB C22000                          ret AND_KILL_FRAME(2)
  1890                                  
  1891                                  L_code_ptr_vector_set:
  1892                                          ENTER
    33 000018FE C8000000            <1>  enter 0, 0
    34 00001902 4883E4F0            <1>  and rsp, ~15
  1893 00001906 48837D1803                      cmp COUNT, 3
  1894 0000190B 0F85A0030000                    jne L_error_arg_count_3
  1895 00001911 488B7D20                        mov rdi, PARAM(0)
  1896                                          assert_vector(rdi)
    42 00001915 803F22              <1>  cmp byte [%1], %2
    43 00001918 0F85BF030000        <1>  jne L_error_incorrect_type
  1897 0000191E 488B7528                        mov rsi, PARAM(1)
  1898                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001922 803E11              <2>  cmp byte [%1], %2
    43 00001925 0F85B2030000        <2>  jne L_error_incorrect_type
    48 0000192B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001930 0F85A7030000        <1>  jne L_error_incorrect_type
  1899 00001936 488B5701                        mov rdx, qword [rdi + 1]
  1900 0000193A 488B4E01                        mov rcx, qword [rsi + 1]
  1901 0000193E 4839D1                          cmp rcx, rdx
  1902 00001941 0F8D92020000                    jge L_error_integer_range
  1903 00001947 4883F900                        cmp rcx, 0
  1904 0000194B 0F8C88020000                    jl L_error_integer_range
  1905 00001951 488B4530                        mov rax, PARAM(2)
  1906 00001955 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1907 0000195A 48B8-                           mov rax, sob_void
  1907 0000195C [0000000000000000] 
  1908                                          LEAVE
    38 00001964 C9                  <1>  leave
  1909 00001965 C22800                          ret AND_KILL_FRAME(3)
  1910                                  
  1911                                  L_code_ptr_string_set:
  1912                                          ENTER
    33 00001968 C8000000            <1>  enter 0, 0
    34 0000196C 4883E4F0            <1>  and rsp, ~15
  1913 00001970 48837D1803                      cmp COUNT, 3
  1914 00001975 0F8536030000                    jne L_error_arg_count_3
  1915 0000197B 488B7D20                        mov rdi, PARAM(0)
  1916                                          assert_string(rdi)
    42 0000197F 803F03              <1>  cmp byte [%1], %2
    43 00001982 0F8555030000        <1>  jne L_error_incorrect_type
  1917 00001988 488B7528                        mov rsi, PARAM(1)
  1918                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000198C 803E11              <2>  cmp byte [%1], %2
    43 0000198F 0F8548030000        <2>  jne L_error_incorrect_type
    48 00001995 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000199A 0F853D030000        <1>  jne L_error_incorrect_type
  1919 000019A0 488B5701                        mov rdx, qword [rdi + 1]
  1920 000019A4 488B4E01                        mov rcx, qword [rsi + 1]
  1921 000019A8 4839D1                          cmp rcx, rdx
  1922 000019AB 0F8D28020000                    jge L_error_integer_range
  1923 000019B1 4883F900                        cmp rcx, 0
  1924 000019B5 0F8C1E020000                    jl L_error_integer_range
  1925 000019BB 488B4530                        mov rax, PARAM(2)
  1926                                          assert_char(rax)
    42 000019BF 803802              <1>  cmp byte [%1], %2
    43 000019C2 0F8515030000        <1>  jne L_error_incorrect_type
  1927 000019C8 8A4001                          mov al, byte [rax + 1]
  1928 000019CB 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1929 000019CF 48B8-                           mov rax, sob_void
  1929 000019D1 [0000000000000000] 
  1930                                          LEAVE
    38 000019D9 C9                  <1>  leave
  1931 000019DA C22800                          ret AND_KILL_FRAME(3)
  1932                                  
  1933                                  L_code_ptr_make_vector:
  1934                                          ENTER
    33 000019DD C8000000            <1>  enter 0, 0
    34 000019E1 4883E4F0            <1>  and rsp, ~15
  1935 000019E5 48837D1802                      cmp COUNT, 2
  1936 000019EA 0F8569020000                    jne L_error_arg_count_2
  1937 000019F0 488B4D20                        mov rcx, PARAM(0)
  1938                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000019F4 803911              <2>  cmp byte [%1], %2
    43 000019F7 0F85E0020000        <2>  jne L_error_incorrect_type
    48 000019FD 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A02 0F85D5020000        <1>  jne L_error_incorrect_type
  1939 00001A08 488B4901                        mov rcx, qword [rcx + 1]
  1940 00001A0C 4883F900                        cmp rcx, 0
  1941 00001A10 0F8CC3010000                    jl L_error_integer_range
  1942 00001A16 488B5528                        mov rdx, PARAM(1)
  1943 00001A1A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1944 00001A22 E81AECFFFF                      call malloc
  1945 00001A27 C60022                          mov byte [rax], T_vector
  1946 00001A2A 48894801                        mov qword [rax + 1], rcx
  1947 00001A2E 41B800000000                    mov r8, 0
  1948                                  .L0:
  1949 00001A34 4939C8                          cmp r8, rcx
  1950 00001A37 740A                            je .L1
  1951 00001A39 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1952 00001A3E 49FFC0                          inc r8
  1953 00001A41 EBF1                            jmp .L0
  1954                                  .L1:
  1955                                          LEAVE
    38 00001A43 C9                  <1>  leave
  1956 00001A44 C22000                          ret AND_KILL_FRAME(2)
  1957                                          
  1958                                  L_code_ptr_make_string:
  1959                                          ENTER
    33 00001A47 C8000000            <1>  enter 0, 0
    34 00001A4B 4883E4F0            <1>  and rsp, ~15
  1960 00001A4F 48837D1802                      cmp COUNT, 2
  1961 00001A54 0F85FF010000                    jne L_error_arg_count_2
  1962 00001A5A 488B4D20                        mov rcx, PARAM(0)
  1963                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A5E 803911              <2>  cmp byte [%1], %2
    43 00001A61 0F8576020000        <2>  jne L_error_incorrect_type
    48 00001A67 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A6C 0F856B020000        <1>  jne L_error_incorrect_type
  1964 00001A72 488B4901                        mov rcx, qword [rcx + 1]
  1965 00001A76 4883F900                        cmp rcx, 0
  1966 00001A7A 0F8C59010000                    jl L_error_integer_range
  1967 00001A80 488B5528                        mov rdx, PARAM(1)
  1968                                          assert_char(rdx)
    42 00001A84 803A02              <1>  cmp byte [%1], %2
    43 00001A87 0F8550020000        <1>  jne L_error_incorrect_type
  1969 00001A8D 8A5201                          mov dl, byte [rdx + 1]
  1970 00001A90 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  1971 00001A94 E8A8EBFFFF                      call malloc
  1972 00001A99 C60003                          mov byte [rax], T_string
  1973 00001A9C 48894801                        mov qword [rax + 1], rcx
  1974 00001AA0 41B800000000                    mov r8, 0
  1975                                  .L0:
  1976 00001AA6 4939C8                          cmp r8, rcx
  1977 00001AA9 740A                            je .L1
  1978 00001AAB 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  1979 00001AB0 49FFC0                          inc r8
  1980 00001AB3 EBF1                            jmp .L0
  1981                                  .L1:
  1982                                          LEAVE
    38 00001AB5 C9                  <1>  leave
  1983 00001AB6 C22000                          ret AND_KILL_FRAME(2)
  1984                                  
  1985                                  L_code_ptr_numerator:
  1986                                          ENTER
    33 00001AB9 C8000000            <1>  enter 0, 0
    34 00001ABD 4883E4F0            <1>  and rsp, ~15
  1987 00001AC1 48837D1801                      cmp COUNT, 1
  1988 00001AC6 0F8561010000                    jne L_error_arg_count_1
  1989 00001ACC 488B4520                        mov rax, PARAM(0)
  1990                                          assert_rational(rax)
    42 00001AD0 803811              <1>  cmp byte [%1], %2
    43 00001AD3 0F8504020000        <1>  jne L_error_incorrect_type
  1991 00001AD9 488B7801                        mov rdi, qword [rax + 1]
  1992 00001ADD E8D1000000                      call make_integer
  1993                                          LEAVE
    38 00001AE2 C9                  <1>  leave
  1994 00001AE3 C21800                          ret AND_KILL_FRAME(1)
  1995                                          
  1996                                  L_code_ptr_denominator:
  1997                                          ENTER
    33 00001AE6 C8000000            <1>  enter 0, 0
    34 00001AEA 4883E4F0            <1>  and rsp, ~15
  1998 00001AEE 48837D1801                      cmp COUNT, 1
  1999 00001AF3 0F8534010000                    jne L_error_arg_count_1
  2000 00001AF9 488B4520                        mov rax, PARAM(0)
  2001                                          assert_rational(rax)
    42 00001AFD 803811              <1>  cmp byte [%1], %2
    43 00001B00 0F85D7010000        <1>  jne L_error_incorrect_type
  2002 00001B06 488B7809                        mov rdi, qword [rax + 1 + 8]
  2003 00001B0A E8A4000000                      call make_integer
  2004                                          LEAVE
    38 00001B0F C9                  <1>  leave
  2005 00001B10 C21800                          ret AND_KILL_FRAME(1)
  2006                                  
  2007                                  L_code_ptr_eq:
  2008                                  	ENTER
    33 00001B13 C8000000            <1>  enter 0, 0
    34 00001B17 4883E4F0            <1>  and rsp, ~15
  2009 00001B1B 48837D1802              	cmp COUNT, 2
  2010 00001B20 0F8533010000            	jne L_error_arg_count_2
  2011 00001B26 488B7D20                	mov rdi, PARAM(0)
  2012 00001B2A 488B7528                	mov rsi, PARAM(1)
  2013 00001B2E 4839F7                  	cmp rdi, rsi
  2014 00001B31 744A                    	je .L_eq_true
  2015 00001B33 8A17                    	mov dl, byte [rdi]
  2016 00001B35 3A16                    	cmp dl, byte [rsi]
  2017 00001B37 7550                    	jne .L_eq_false
  2018 00001B39 80FA02                  	cmp dl, T_char
  2019 00001B3C 7437                    	je .L_char
  2020 00001B3E 80FA04                  	cmp dl, T_symbol
  2021 00001B41 742A                    	je .L_symbol
  2022 00001B43 80FA12                  	cmp dl, T_real
  2023 00001B46 741D                    	je .L_real
  2024 00001B48 80FA11                  	cmp dl, T_rational
  2025 00001B4B 7402                    	je .L_rational
  2026 00001B4D EB3A                    	jmp .L_eq_false
  2027                                  .L_rational:
  2028 00001B4F 488B4601                	mov rax, qword [rsi + 1]
  2029 00001B53 483B4701                	cmp rax, qword [rdi + 1]
  2030 00001B57 7530                    	jne .L_eq_false
  2031 00001B59 488B4609                	mov rax, qword [rsi + 1 + 8]
  2032 00001B5D 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2033 00001B61 7526                    	jne .L_eq_false
  2034 00001B63 EB18                    	jmp .L_eq_true
  2035                                  .L_real:
  2036 00001B65 488B4601                	mov rax, qword [rsi + 1]
  2037 00001B69 483B4701                	cmp rax, qword [rdi + 1]
  2038                                  .L_symbol:
  2039                                  	; never reached, because symbols are static!
  2040                                  	; but I'm keeping it in case, I'll ever change
  2041                                  	; the implementation
  2042 00001B6D 488B4601                	mov rax, qword [rsi + 1]
  2043 00001B71 483B4701                	cmp rax, qword [rdi + 1]
  2044                                  .L_char:
  2045 00001B75 8A5E01                  	mov bl, byte [rsi + 1]
  2046 00001B78 3A5F01                  	cmp bl, byte [rdi + 1]
  2047 00001B7B 750C                    	jne .L_eq_false
  2048                                  .L_eq_true:
  2049 00001B7D 48B8-                   	mov rax, sob_boolean_true
  2049 00001B7F [0300000000000000] 
  2050 00001B87 EB0A                    	jmp .L_eq_exit
  2051                                  .L_eq_false:
  2052 00001B89 48B8-                   	mov rax, sob_boolean_false
  2052 00001B8B [0200000000000000] 
  2053                                  .L_eq_exit:
  2054                                  	LEAVE
    38 00001B93 C9                  <1>  leave
  2055 00001B94 C22000                  	ret AND_KILL_FRAME(2)
  2056                                  
  2057                                  make_real:
  2058                                          ENTER
    33 00001B97 C8000000            <1>  enter 0, 0
    34 00001B9B 4883E4F0            <1>  and rsp, ~15
  2059 00001B9F BF09000000                      mov rdi, (1 + 8)
  2060 00001BA4 E898EAFFFF                      call malloc
  2061 00001BA9 C60012                          mov byte [rax], T_real
  2062 00001BAC F20F114001                      movsd qword [rax + 1], xmm0
  2063                                          LEAVE
    38 00001BB1 C9                  <1>  leave
  2064 00001BB2 C3                              ret
  2065                                          
  2066                                  make_integer:
  2067                                          ENTER
    33 00001BB3 C8000000            <1>  enter 0, 0
    34 00001BB7 4883E4F0            <1>  and rsp, ~15
  2068 00001BBB 4889FE                          mov rsi, rdi
  2069 00001BBE BF11000000                      mov rdi, (1 + 8 + 8)
  2070 00001BC3 E879EAFFFF                      call malloc
  2071 00001BC8 C60011                          mov byte [rax], T_rational
  2072 00001BCB 48897001                        mov qword [rax + 1], rsi
  2073 00001BCF 48C7400901000000                mov qword [rax + 1 + 8], 1
  2074                                          LEAVE
    38 00001BD7 C9                  <1>  leave
  2075 00001BD8 C3                              ret
  2076                                          
  2077                                  L_error_integer_range:
  2078 00001BD9 488B3C25[00000000]              mov rdi, qword [stderr]
  2079 00001BE1 48BE-                           mov rsi, fmt_integer_range
  2079 00001BE3 [5E03000000000000] 
  2080 00001BEB B800000000                      mov rax, 0
  2081 00001BF0 E8(00000000)                    call fprintf
  2082 00001BF5 48C7C0FBFFFFFF                  mov rax, -5
  2083 00001BFC E8(00000000)                    call exit
  2084                                  
  2085                                  L_error_arg_count_0:
  2086 00001C01 488B3C25[00000000]              mov rdi, qword [stderr]
  2087 00001C09 48BE-                           mov rsi, fmt_arg_count_0
  2087 00001C0B [5C02000000000000] 
  2088 00001C13 488B5518                        mov rdx, COUNT
  2089 00001C17 B800000000                      mov rax, 0
  2090 00001C1C E8(00000000)                    call fprintf
  2091 00001C21 48C7C0FDFFFFFF                  mov rax, -3
  2092 00001C28 E8(00000000)                    call exit
  2093                                  
  2094                                  L_error_arg_count_1:
  2095 00001C2D 488B3C25[00000000]              mov rdi, qword [stderr]
  2096 00001C35 48BE-                           mov rsi, fmt_arg_count_1
  2096 00001C37 [8402000000000000] 
  2097 00001C3F 488B5518                        mov rdx, COUNT
  2098 00001C43 B800000000                      mov rax, 0
  2099 00001C48 E8(00000000)                    call fprintf
  2100 00001C4D 48C7C0FDFFFFFF                  mov rax, -3
  2101 00001C54 E8(00000000)                    call exit
  2102                                  
  2103                                  L_error_arg_count_2:
  2104 00001C59 488B3C25[00000000]              mov rdi, qword [stderr]
  2105 00001C61 48BE-                           mov rsi, fmt_arg_count_2
  2105 00001C63 [EA02000000000000] 
  2106 00001C6B 488B5518                        mov rdx, COUNT
  2107 00001C6F B800000000                      mov rax, 0
  2108 00001C74 E8(00000000)                    call fprintf
  2109 00001C79 48C7C0FDFFFFFF                  mov rax, -3
  2110 00001C80 E8(00000000)                    call exit
  2111                                  
  2112                                  L_error_arg_count_12:
  2113 00001C85 488B3C25[00000000]              mov rdi, qword [stderr]
  2114 00001C8D 48BE-                           mov rsi, fmt_arg_count_12
  2114 00001C8F [AA02000000000000] 
  2115 00001C97 488B5518                        mov rdx, COUNT
  2116 00001C9B B800000000                      mov rax, 0
  2117 00001CA0 E8(00000000)                    call fprintf
  2118 00001CA5 48C7C0FDFFFFFF                  mov rax, -3
  2119 00001CAC E8(00000000)                    call exit
  2120                                  
  2121                                  L_error_arg_count_3:
  2122 00001CB1 488B3C25[00000000]              mov rdi, qword [stderr]
  2123 00001CB9 48BE-                           mov rsi, fmt_arg_count_3
  2123 00001CBB [1103000000000000] 
  2124 00001CC3 488B5518                        mov rdx, COUNT
  2125 00001CC7 B800000000                      mov rax, 0
  2126 00001CCC E8(00000000)                    call fprintf
  2127 00001CD1 48C7C0FDFFFFFF                  mov rax, -3
  2128 00001CD8 E8(00000000)                    call exit
  2129                                          
  2130                                  L_error_incorrect_type:
  2131 00001CDD 488B3C25[00000000]              mov rdi, qword [stderr]
  2132 00001CE5 48BE-                           mov rsi, fmt_type
  2132 00001CE7 [3A03000000000000] 
  2133 00001CEF B800000000                      mov rax, 0
  2134 00001CF4 E8(00000000)                    call fprintf
  2135 00001CF9 48C7C0FCFFFFFF                  mov rax, -4
  2136 00001D00 E8(00000000)                    call exit
  2137                                  
  2138                                  L_error_division_by_zero:
  2139 00001D05 488B3C25[00000000]              mov rdi, qword [stderr]
  2140 00001D0D 48BE-                           mov rsi, fmt_division_by_zero
  2140 00001D0F [7B03000000000000] 
  2141 00001D17 B800000000                      mov rax, 0
  2142 00001D1C E8(00000000)                    call fprintf
  2143 00001D21 48C7C0F8FFFFFF                  mov rax, -8
  2144 00001D28 E8(00000000)                    call exit
  2145                                  
  2146                                  section .data
  2147                                  fmt_char:
  2148 00000259 256300                          db `%c\0`
  2149                                  fmt_arg_count_0:
  2150 0000025C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2150 00000265 74696E67207A65726F-
  2150 0000026E 20617267756D656E74-
  2150 00000277 732E20466F756E6420-
  2150 00000280 25640A00           
  2151                                  fmt_arg_count_1:
  2152 00000284 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2152 0000028D 74696E67206F6E6520-
  2152 00000296 617267756D656E742E-
  2152 0000029F 20466F756E64202564-
  2152 000002A8 0A00               
  2153                                  fmt_arg_count_12:
  2154 000002AA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2154 000002B3 74696E67206F6E6520-
  2154 000002BC 726571756972656420-
  2154 000002C5 616E64206F6E65206F-
  2154 000002CE 7074696F6E616C2061-
  2154 000002D7 7267756D656E742E20-
  2154 000002E0 466F756E642025640A-
  2154 000002E9 00                 
  2155                                  fmt_arg_count_2:
  2156 000002EA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2156 000002F3 74696E672074776F20-
  2156 000002FC 617267756D656E7473-
  2156 00000305 2E20466F756E642025-
  2156 0000030E 640A00             
  2157                                  fmt_arg_count_3:
  2158 00000311 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2158 0000031A 74696E672074687265-
  2158 00000323 6520617267756D656E-
  2158 0000032C 74732E20466F756E64-
  2158 00000335 2025640A00         
  2159                                  fmt_type:
  2160 0000033A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2160 00000343 696F6E207061737365-
  2160 0000034C 6420696E636F727265-
  2160 00000355 637420747970650A00 
  2161                                  fmt_integer_range:
  2162 0000035E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2162 00000367 7265637420696E7465-
  2162 00000370 6765722072616E6765-
  2162 00000379 0A00               
  2163                                  fmt_division_by_zero:
  2164 0000037B 212121204469766973-             db `!!! Division by zero\n\0`
  2164 00000384 696F6E206279207A65-
  2164 0000038D 726F0A00           
  2165                                  fmt_scheme_error_part_1:
  2166 00000391 0A2121212054686520-             db `\n!!! The procedure \0`
  2166 0000039A 70726F636564757265-
  2166 000003A3 2000               
  2167                                  fmt_scheme_error_part_2:
  2168 000003A5 2061736B656420746F-             db ` asked to terminate the program\n`
  2168 000003AE 207465726D696E6174-
  2168 000003B7 65207468652070726F-
  2168 000003C0 6772616D0A         
  2169 000003C5 202020207769746820-             db `    with the following message:\n\n\0`
  2169 000003CE 74686520666F6C6C6F-
  2169 000003D7 77696E67206D657373-
  2169 000003E0 6167653A0A0A00     
  2170                                  fmt_scheme_error_part_3:
  2171 000003E7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2171 000003F0 210A0A00           
=======
    83 00000006 11                      	db T_rational	; 1
    84 00000007 010000000000000001-     	dq 1, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 2
    86 00000018 020000000000000001-     	dq 2, 1
    86 00000021 00000000000000     
    87                                  
    88                                  section .bss
    89                                  free_var_0:	; location of null?
    90 00000000 ????????????????        	resq 1
    91                                  free_var_1:	; location of pair?
    92 00000008 ????????????????        	resq 1
    93                                  free_var_2:	; location of void?
    94 00000010 ????????????????        	resq 1
    95                                  free_var_3:	; location of char?
    96 00000018 ????????????????        	resq 1
    97                                  free_var_4:	; location of string?
    98 00000020 ????????????????        	resq 1
    99                                  free_var_5:	; location of symbol?
   100 00000028 ????????????????        	resq 1
   101                                  free_var_6:	; location of vector?
   102 00000030 ????????????????        	resq 1
   103                                  free_var_7:	; location of procedure?
   104 00000038 ????????????????        	resq 1
   105                                  free_var_8:	; location of real?
   106 00000040 ????????????????        	resq 1
   107                                  free_var_9:	; location of rational?
   108 00000048 ????????????????        	resq 1
   109                                  free_var_10:	; location of boolean?
   110 00000050 ????????????????        	resq 1
   111                                  free_var_11:	; location of number?
   112 00000058 ????????????????        	resq 1
   113                                  free_var_12:	; location of collection?
   114 00000060 ????????????????        	resq 1
   115                                  free_var_13:	; location of cons
   116 00000068 ????????????????        	resq 1
   117                                  free_var_14:	; location of display-sexpr
   118 00000070 ????????????????        	resq 1
   119                                  free_var_15:	; location of write-char
   120 00000078 ????????????????        	resq 1
   121                                  free_var_16:	; location of car
   122 00000080 ????????????????        	resq 1
   123                                  free_var_17:	; location of cdr
   124 00000088 ????????????????        	resq 1
   125                                  free_var_18:	; location of string-length
   126 00000090 ????????????????        	resq 1
   127                                  free_var_19:	; location of vector-length
   128 00000098 ????????????????        	resq 1
   129                                  free_var_20:	; location of real->integer
   130 000000A0 ????????????????        	resq 1
   131                                  free_var_21:	; location of exit
   132 000000A8 ????????????????        	resq 1
   133                                  free_var_22:	; location of integer->real
   134 000000B0 ????????????????        	resq 1
   135                                  free_var_23:	; location of rational->real
   136 000000B8 ????????????????        	resq 1
   137                                  free_var_24:	; location of char->integer
   138 000000C0 ????????????????        	resq 1
   139                                  free_var_25:	; location of integer->char
   140 000000C8 ????????????????        	resq 1
   141                                  free_var_26:	; location of trng
   142 000000D0 ????????????????        	resq 1
   143                                  free_var_27:	; location of zero?
   144 000000D8 ????????????????        	resq 1
   145                                  free_var_28:	; location of integer?
   146 000000E0 ????????????????        	resq 1
   147                                  free_var_29:	; location of __bin-apply
   148 000000E8 ????????????????        	resq 1
   149                                  free_var_30:	; location of __bin-add-rr
   150 000000F0 ????????????????        	resq 1
   151                                  free_var_31:	; location of __bin-sub-rr
   152 000000F8 ????????????????        	resq 1
   153                                  free_var_32:	; location of __bin-mul-rr
   154 00000100 ????????????????        	resq 1
   155                                  free_var_33:	; location of __bin-div-rr
   156 00000108 ????????????????        	resq 1
   157                                  free_var_34:	; location of __bin-add-qq
   158 00000110 ????????????????        	resq 1
   159                                  free_var_35:	; location of __bin-sub-qq
   160 00000118 ????????????????        	resq 1
   161                                  free_var_36:	; location of __bin-mul-qq
   162 00000120 ????????????????        	resq 1
   163                                  free_var_37:	; location of __bin-div-qq
   164 00000128 ????????????????        	resq 1
   165                                  free_var_38:	; location of error
   166 00000130 ????????????????        	resq 1
   167                                  free_var_39:	; location of __bin-less-than-rr
   168 00000138 ????????????????        	resq 1
   169                                  free_var_40:	; location of __bin-less-than-qq
   170 00000140 ????????????????        	resq 1
   171                                  free_var_41:	; location of __bin-equal-rr
   172 00000148 ????????????????        	resq 1
   173                                  free_var_42:	; location of __bin-equal-qq
   174 00000150 ????????????????        	resq 1
   175                                  free_var_43:	; location of quotient
   176 00000158 ????????????????        	resq 1
   177                                  free_var_44:	; location of remainder
   178 00000160 ????????????????        	resq 1
   179                                  free_var_45:	; location of set-car!
   180 00000168 ????????????????        	resq 1
   181                                  free_var_46:	; location of set-cdr!
   182 00000170 ????????????????        	resq 1
   183                                  free_var_47:	; location of string-ref
   184 00000178 ????????????????        	resq 1
   185                                  free_var_48:	; location of vector-ref
   186 00000180 ????????????????        	resq 1
   187                                  free_var_49:	; location of vector-set!
   188 00000188 ????????????????        	resq 1
   189                                  free_var_50:	; location of string-set!
   190 00000190 ????????????????        	resq 1
   191                                  free_var_51:	; location of make-vector
   192 00000198 ????????????????        	resq 1
   193                                  free_var_52:	; location of make-string
   194 000001A0 ????????????????        	resq 1
   195                                  free_var_53:	; location of numerator
   196 000001A8 ????????????????        	resq 1
   197                                  free_var_54:	; location of denominator
   198 000001B0 ????????????????        	resq 1
   199                                  free_var_55:	; location of eq?
   200 000001B8 ????????????????        	resq 1
   201                                  
   202                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   203                                  global main
   204                                  section .text
   205                                  main:
   206 00000000 C8000000                        enter 0, 0
   207                                          
   208                                  	; building closure for null?
   209 00000004 48BF-                   	mov rdi, free_var_0
   209 00000006 [0000000000000000] 
   210 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   210 00000010 [C70B000000000000] 
   211 00000018 E8820B0000              	call bind_primitive
   212                                  
   213                                  	; building closure for pair?
   214 0000001D 48BF-                   	mov rdi, free_var_1
   214 0000001F [0800000000000000] 
   215 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   215 00000029 [FD0B000000000000] 
   216 00000031 E8690B0000              	call bind_primitive
   217                                  
   218                                  	; building closure for void?
   219 00000036 48BF-                   	mov rdi, free_var_2
   219 00000038 [1000000000000000] 
   220 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   220 00000042 [330C000000000000] 
   221 0000004A E8500B0000              	call bind_primitive
   222                                  
   223                                  	; building closure for char?
   224 0000004F 48BF-                   	mov rdi, free_var_3
   224 00000051 [1800000000000000] 
   225 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   225 0000005B [690C000000000000] 
   226 00000063 E8370B0000              	call bind_primitive
   227                                  
   228                                  	; building closure for string?
   229 00000068 48BF-                   	mov rdi, free_var_4
   229 0000006A [2000000000000000] 
   230 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   230 00000074 [9F0C000000000000] 
   231 0000007C E81E0B0000              	call bind_primitive
   232                                  
   233                                  	; building closure for symbol?
   234 00000081 48BF-                   	mov rdi, free_var_5
   234 00000083 [2800000000000000] 
   235 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   235 0000008D [D50C000000000000] 
   236 00000095 E8050B0000              	call bind_primitive
   237                                  
   238                                  	; building closure for vector?
   239 0000009A 48BF-                   	mov rdi, free_var_6
   239 0000009C [3000000000000000] 
   240 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   240 000000A6 [0B0D000000000000] 
   241 000000AE E8EC0A0000              	call bind_primitive
   242                                  
   243                                  	; building closure for procedure?
   244 000000B3 48BF-                   	mov rdi, free_var_7
   244 000000B5 [3800000000000000] 
   245 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   245 000000BF [410D000000000000] 
   246 000000C7 E8D30A0000              	call bind_primitive
   247                                  
   248                                  	; building closure for real?
   249 000000CC 48BF-                   	mov rdi, free_var_8
   249 000000CE [4000000000000000] 
   250 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   250 000000D8 [770D000000000000] 
   251 000000E0 E8BA0A0000              	call bind_primitive
   252                                  
   253                                  	; building closure for rational?
   254 000000E5 48BF-                   	mov rdi, free_var_9
   254 000000E7 [4800000000000000] 
   255 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   255 000000F1 [AD0D000000000000] 
   256 000000F9 E8A10A0000              	call bind_primitive
   257                                  
   258                                  	; building closure for boolean?
   259 000000FE 48BF-                   	mov rdi, free_var_10
   259 00000100 [5000000000000000] 
   260 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   260 0000010A [E30D000000000000] 
   261 00000112 E8880A0000              	call bind_primitive
   262                                  
   263                                  	; building closure for number?
   264 00000117 48BF-                   	mov rdi, free_var_11
   264 00000119 [5800000000000000] 
   265 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   265 00000123 [1B0E000000000000] 
   266 0000012B E86F0A0000              	call bind_primitive
   267                                  
   268                                  	; building closure for collection?
   269 00000130 48BF-                   	mov rdi, free_var_12
   269 00000132 [6000000000000000] 
   270 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   270 0000013C [530E000000000000] 
   271 00000144 E8560A0000              	call bind_primitive
   272                                  
   273                                  	; building closure for cons
   274 00000149 48BF-                   	mov rdi, free_var_13
   274 0000014B [6800000000000000] 
   275 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   275 00000155 [8B0E000000000000] 
   276 0000015D E83D0A0000              	call bind_primitive
   277                                  
   278                                  	; building closure for display-sexpr
   279 00000162 48BF-                   	mov rdi, free_var_14
   279 00000164 [7000000000000000] 
   280 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   280 0000016E [BF0E000000000000] 
   281 00000176 E8240A0000              	call bind_primitive
   282                                  
   283                                  	; building closure for write-char
   284 0000017B 48BF-                   	mov rdi, free_var_15
   284 0000017D [7800000000000000] 
   285 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   285 00000187 [E90E000000000000] 
   286 0000018F E80B0A0000              	call bind_primitive
   287                                  
   288                                  	; building closure for car
   289 00000194 48BF-                   	mov rdi, free_var_16
   289 00000196 [8000000000000000] 
   290 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   290 000001A0 [370F000000000000] 
   291 000001A8 E8F2090000              	call bind_primitive
   292                                  
   293                                  	; building closure for cdr
   294 000001AD 48BF-                   	mov rdi, free_var_17
   294 000001AF [8800000000000000] 
   295 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   295 000001B9 [5F0F000000000000] 
   296 000001C1 E8D9090000              	call bind_primitive
   297                                  
   298                                  	; building closure for string-length
   299 000001C6 48BF-                   	mov rdi, free_var_18
   299 000001C8 [9000000000000000] 
   300 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   300 000001D2 [870F000000000000] 
   301 000001DA E8C0090000              	call bind_primitive
   302                                  
   303                                  	; building closure for vector-length
   304 000001DF 48BF-                   	mov rdi, free_var_19
   304 000001E1 [9800000000000000] 
   305 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   305 000001EB [B40F000000000000] 
   306 000001F3 E8A7090000              	call bind_primitive
   307                                  
   308                                  	; building closure for real->integer
   309 000001F8 48BF-                   	mov rdi, free_var_20
   309 000001FA [A000000000000000] 
   310 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   310 00000204 [E10F000000000000] 
   311 0000020C E88E090000              	call bind_primitive
   312                                  
   313                                  	; building closure for exit
   314 00000211 48BF-                   	mov rdi, free_var_21
   314 00000213 [A800000000000000] 
   315 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   315 0000021D [1410000000000000] 
   316 00000225 E875090000              	call bind_primitive
   317                                  
   318                                  	; building closure for integer->real
   319 0000022A 48BF-                   	mov rdi, free_var_22
   319 0000022C [B000000000000000] 
   320 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   320 00000236 [3110000000000000] 
   321 0000023E E85C090000              	call bind_primitive
   322                                  
   323                                  	; building closure for rational->real
   324 00000243 48BF-                   	mov rdi, free_var_23
   324 00000245 [B800000000000000] 
   325 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   325 0000024F [6E10000000000000] 
   326 00000257 E843090000              	call bind_primitive
   327                                  
   328                                  	; building closure for char->integer
   329 0000025C 48BF-                   	mov rdi, free_var_24
   329 0000025E [C000000000000000] 
   330 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   330 00000268 [AD10000000000000] 
   331 00000270 E82A090000              	call bind_primitive
   332                                  
   333                                  	; building closure for integer->char
   334 00000275 48BF-                   	mov rdi, free_var_25
   334 00000277 [C800000000000000] 
   335 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   335 00000281 [E210000000000000] 
   336 00000289 E811090000              	call bind_primitive
   337                                  
   338                                  	; building closure for trng
   339 0000028E 48BF-                   	mov rdi, free_var_26
   339 00000290 [D000000000000000] 
   340 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   340 0000029A [3C11000000000000] 
   341 000002A2 E8F8080000              	call bind_primitive
   342                                  
   343                                  	; building closure for zero?
   344 000002A7 48BF-                   	mov rdi, free_var_27
   344 000002A9 [D800000000000000] 
   345 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   345 000002B3 [5F11000000000000] 
   346 000002BB E8DF080000              	call bind_primitive
   347                                  
   348                                  	; building closure for integer?
   349 000002C0 48BF-                   	mov rdi, free_var_28
   349 000002C2 [E000000000000000] 
   350 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   350 000002CC [BA11000000000000] 
   351 000002D4 E8C6080000              	call bind_primitive
   352                                  
   353                                  	; building closure for __bin-apply
   354 000002D9 48BF-                   	mov rdi, free_var_29
   354 000002DB [E800000000000000] 
   355 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   355 000002E5 [C70B000000000000] 
   356 000002ED E8AD080000              	call bind_primitive
   357                                  
   358                                  	; building closure for __bin-add-rr
   359 000002F2 48BF-                   	mov rdi, free_var_30
   359 000002F4 [F000000000000000] 
   360 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   360 000002FE [F711000000000000] 
   361 00000306 E894080000              	call bind_primitive
   362                                  
   363                                  	; building closure for __bin-sub-rr
   364 0000030B 48BF-                   	mov rdi, free_var_31
   364 0000030D [F800000000000000] 
   365 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   365 00000317 [3B12000000000000] 
   366 0000031F E87B080000              	call bind_primitive
   367                                  
   368                                  	; building closure for __bin-mul-rr
   369 00000324 48BF-                   	mov rdi, free_var_32
   369 00000326 [0001000000000000] 
   370 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   370 00000330 [7F12000000000000] 
   371 00000338 E862080000              	call bind_primitive
   372                                  
   373                                  	; building closure for __bin-div-rr
   374 0000033D 48BF-                   	mov rdi, free_var_33
   374 0000033F [0801000000000000] 
   375 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   375 00000349 [C312000000000000] 
   376 00000351 E849080000              	call bind_primitive
   377                                  
   378                                  	; building closure for __bin-add-qq
   379 00000356 48BF-                   	mov rdi, free_var_34
   379 00000358 [1001000000000000] 
   380 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   380 00000362 [1513000000000000] 
   381 0000036A E830080000              	call bind_primitive
   382                                  
   383                                  	; building closure for __bin-sub-qq
   384 0000036F 48BF-                   	mov rdi, free_var_35
   384 00000371 [1801000000000000] 
   385 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   385 0000037B [7D13000000000000] 
   386 00000383 E817080000              	call bind_primitive
   387                                  
   388                                  	; building closure for __bin-mul-qq
   389 00000388 48BF-                   	mov rdi, free_var_36
   389 0000038A [2001000000000000] 
   390 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   390 00000394 [E513000000000000] 
   391 0000039C E8FE070000              	call bind_primitive
   392                                  
   393                                  	; building closure for __bin-div-qq
   394 000003A1 48BF-                   	mov rdi, free_var_37
   394 000003A3 [2801000000000000] 
   395 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   395 000003AD [3D14000000000000] 
   396 000003B5 E8E5070000              	call bind_primitive
   397                                  
   398                                  	; building closure for error
   399 000003BA 48BF-                   	mov rdi, free_var_38
   399 000003BC [3001000000000000] 
   400 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   400 000003C6 [0B15000000000000] 
   401 000003CE E8CC070000              	call bind_primitive
   402                                  
   403                                  	; building closure for __bin-less-than-rr
   404 000003D3 48BF-                   	mov rdi, free_var_39
   404 000003D5 [3801000000000000] 
   405 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   405 000003DF [A715000000000000] 
   406 000003E7 E8B3070000              	call bind_primitive
   407                                  
   408                                  	; building closure for __bin-less-than-qq
   409 000003EC 48BF-                   	mov rdi, free_var_40
   409 000003EE [4001000000000000] 
   410 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   410 000003F8 [FE15000000000000] 
   411 00000400 E89A070000              	call bind_primitive
   412                                  
   413                                  	; building closure for __bin-equal-rr
   414 00000405 48BF-                   	mov rdi, free_var_41
   414 00000407 [4801000000000000] 
   415 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   415 00000411 [6116000000000000] 
   416 00000419 E881070000              	call bind_primitive
   417                                  
   418                                  	; building closure for __bin-equal-qq
   419 0000041E 48BF-                   	mov rdi, free_var_42
   419 00000420 [5001000000000000] 
   420 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   420 0000042A [B816000000000000] 
   421 00000432 E868070000              	call bind_primitive
   422                                  
   423                                  	; building closure for quotient
   424 00000437 48BF-                   	mov rdi, free_var_43
   424 00000439 [5801000000000000] 
   425 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   425 00000443 [1B17000000000000] 
   426 0000044B E84F070000              	call bind_primitive
   427                                  
   428                                  	; building closure for remainder
   429 00000450 48BF-                   	mov rdi, free_var_44
   429 00000452 [6001000000000000] 
   430 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   430 0000045C [8117000000000000] 
   431 00000464 E836070000              	call bind_primitive
   432                                  
   433                                  	; building closure for set-car!
   434 00000469 48BF-                   	mov rdi, free_var_45
   434 0000046B [6801000000000000] 
   435 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   435 00000475 [E717000000000000] 
   436 0000047D E81D070000              	call bind_primitive
   437                                  
   438                                  	; building closure for set-cdr!
   439 00000482 48BF-                   	mov rdi, free_var_46
   439 00000484 [7001000000000000] 
   440 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   440 0000048E [1D18000000000000] 
   441 00000496 E804070000              	call bind_primitive
   442                                  
   443                                  	; building closure for string-ref
   444 0000049B 48BF-                   	mov rdi, free_var_47
   444 0000049D [7801000000000000] 
   445 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   445 000004A7 [5318000000000000] 
   446 000004AF E8EB060000              	call bind_primitive
   447                                  
   448                                  	; building closure for vector-ref
   449 000004B4 48BF-                   	mov rdi, free_var_48
   449 000004B6 [8001000000000000] 
   450 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   450 000004C0 [BE18000000000000] 
   451 000004C8 E8D2060000              	call bind_primitive
   452                                  
   453                                  	; building closure for vector-set!
   454 000004CD 48BF-                   	mov rdi, free_var_49
   454 000004CF [8801000000000000] 
   455 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   455 000004D9 [1A19000000000000] 
   456 000004E1 E8B9060000              	call bind_primitive
   457                                  
   458                                  	; building closure for string-set!
   459 000004E6 48BF-                   	mov rdi, free_var_50
   459 000004E8 [9001000000000000] 
   460 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   460 000004F2 [8419000000000000] 
   461 000004FA E8A0060000              	call bind_primitive
   462                                  
   463                                  	; building closure for make-vector
   464 000004FF 48BF-                   	mov rdi, free_var_51
   464 00000501 [9801000000000000] 
   465 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   465 0000050B [F919000000000000] 
   466 00000513 E887060000              	call bind_primitive
   467                                  
   468                                  	; building closure for make-string
   469 00000518 48BF-                   	mov rdi, free_var_52
   469 0000051A [A001000000000000] 
   470 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   470 00000524 [631A000000000000] 
   471 0000052C E86E060000              	call bind_primitive
   472                                  
   473                                  	; building closure for numerator
   474 00000531 48BF-                   	mov rdi, free_var_53
   474 00000533 [A801000000000000] 
   475 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   475 0000053D [D51A000000000000] 
   476 00000545 E855060000              	call bind_primitive
   477                                  
   478                                  	; building closure for denominator
   479 0000054A 48BF-                   	mov rdi, free_var_54
   479 0000054C [B001000000000000] 
   480 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   480 00000556 [021B000000000000] 
   481 0000055E E83C060000              	call bind_primitive
   482                                  
   483                                  	; building closure for eq?
   484 00000563 48BF-                   	mov rdi, free_var_55
   484 00000565 [B801000000000000] 
   485 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   485 0000056F [2F1B000000000000] 
   486 00000577 E823060000              	call bind_primitive
   487                                  
   488 0000057C 48B8-                   	mov rax,23+L_constants
   488 0000057E [1700000000000000] 
   489 00000586 50                      	push rax
   490 00000587 6A01                    	push 1
   491 00000589 48B8-                   	mov rax,6+L_constants
   491 0000058B [0600000000000000] 
   492                                  	assert_closure(rax)
    42 00000593 803805              <1>  cmp byte [%1], %2
    43 00000596 0F855D170000        <1>  jne L_error_incorrect_type
   493 0000059C FF7001                  	push SOB_CLOSURE_ENV(rax) 
   494 0000059F FF5009                  	call SOB_CLOSURE_CODE(rax)
   495                                  
   496 000005A2 4889C7                  	mov rdi, rax
   497 000005A5 E8C4000000              	call print_sexpr_if_not_void
   498                                  
   499 000005AA 48BF-                           mov rdi, fmt_memory_usage
   499 000005AC [8700000000000000] 
   500 000005B4 488B3425[0E010000]              mov rsi, qword [top_of_memory]
   501 000005BC 4881EE[C0010000]                sub rsi, memory
   502 000005C3 B800000000                      mov rax, 0
   503 000005C8 E8(00000000)                    call printf
   504 000005CD C9                      	leave
   505 000005CE C3                      	ret
   506                                  
   507                                  L_error_non_closure:
   508 000005CF 488B3C25[00000000]              mov rdi, qword [stderr]
   509 000005D7 48BE-                           mov rsi, fmt_non_closure
   509 000005D9 [BE00000000000000] 
   510 000005E1 B800000000                      mov rax, 0
   511 000005E6 E8(00000000)                    call fprintf
   512 000005EB 48C7C0FEFFFFFF                  mov rax, -2
   513 000005F2 E8(00000000)                    call exit
   514                                  
   515                                  L_error_improper_list:
   516 000005F7 488B3C25[00000000]      	mov rdi, qword [stderr]
   517 000005FF 48BE-                   	mov rsi, fmt_error_improper_list
   517 00000601 [E600000000000000] 
   518 00000609 B800000000              	mov rax, 0
   519 0000060E E8(00000000)            	call fprintf
   520 00000613 48C7C0F9FFFFFF          	mov rax, -7
   521 0000061A E8(00000000)            	call exit
   522                                  
   523                                  L_error_incorrect_arity_simple:
   524 0000061F 488B3C25[00000000]              mov rdi, qword [stderr]
   525 00000627 48BE-                           mov rsi, fmt_incorrect_arity_simple
   525 00000629 [2800000000000000] 
   526 00000631 EB12                            jmp L_error_incorrect_arity_common
   527                                  L_error_incorrect_arity_opt:
   528 00000633 488B3C25[00000000]              mov rdi, qword [stderr]
   529 0000063B 48BE-                           mov rsi, fmt_incorrect_arity_opt
   529 0000063D [5300000000000000] 
   530                                  L_error_incorrect_arity_common:
   531 00000645 5A                              pop rdx
   532 00000646 59                              pop rcx
   533 00000647 B800000000                      mov rax, 0
   534 0000064C E8(00000000)                    call fprintf
   535 00000651 48C7C0FAFFFFFF                  mov rax, -6
   536 00000658 E8(00000000)                    call exit
   537                                  
   538                                  section .data
   539                                  fmt_incorrect_arity_simple:
   540 00000028 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   540 00000031 74656420256C642061-
   540 0000003A 7267756D656E74732C-
   540 00000043 206275742067697665-
   540 0000004C 6E20256C640A00     
   541                                  fmt_incorrect_arity_opt:
   542 00000053 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   542 0000005C 746564206174206C65-
   542 00000065 61737420256C642061-
   542 0000006E 7267756D656E74732C-
   542 00000077 206275742067697665-
   542 00000080 6E20256C640A00     
   543                                  fmt_memory_usage:
   544 00000087 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   544 00000090 6420256C6420627974-
   544 00000099 6573206F662064796E-
   544 000000A2 616D6963616C6C792D-
   544 000000AB 616C6C6F6361746564-
   544 000000B4 206D656D6F72790A0A-
   544 000000BD 00                 
   545                                  fmt_non_closure:
   546 000000BE 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   546 000000C7 7074696E6720746F20-
   546 000000D0 6170706C792061206E-
   546 000000D9 6F6E2D636C6F737572-
   546 000000E2 65210A00           
   547                                  fmt_error_improper_list:
   548 000000E6 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   548 000000EF 7267756D656E742069-
   548 000000F8 73206E6F7420612070-
   548 00000101 726F706572206C6973-
   548 0000010A 74210A00           
   549                                  
   550                                  section .bss
   551                                  memory:
   552 000001C0 <res 40000000h>         	resb gbytes(1)
   553                                  
   554                                  section .data
   555                                  top_of_memory:
   556 0000010E [C001000000000000]              dq memory
   557                                  
   558                                  section .text
   559                                  malloc:
   560 0000065D 488B0425[0E010000]              mov rax, qword [top_of_memory]
   561 00000665 48013C25[0E010000]              add qword [top_of_memory], rdi
   562 0000066D C3                              ret
   563                                          
   564                                  print_sexpr_if_not_void:
   565 0000066E 4881FF[00000000]        	cmp rdi, sob_void
   566 00000675 7501                    	jne print_sexpr
   567 00000677 C3                      	ret
   568                                  
   569                                  section .data
   570                                  fmt_void:
   571 00000116 233C766F69643E00        	db `#<void>\0`
   572                                  fmt_nil:
   573 0000011E 282900                  	db `()\0`
   574                                  fmt_boolean_false:
   575 00000121 236600                  	db `#f\0`
   576                                  fmt_boolean_true:
   577 00000124 237400                  	db `#t\0`
   578                                  fmt_char_backslash:
   579 00000127 235C5C00                	db `#\\\\\0`
   580                                  fmt_char_dquote:
   581 0000012B 235C2200                	db `#\\"\0`
   582                                  fmt_char_simple:
   583 0000012F 235C256300              	db `#\\%c\0`
   584                                  fmt_char_null:
   585 00000134 235C6E756C00            	db `#\\nul\0`
   586                                  fmt_char_bell:
   587 0000013A 235C62656C6C00          	db `#\\bell\0`
   588                                  fmt_char_backspace:
   589 00000141 235C6261636B737061-     	db `#\\backspace\0`
   589 0000014A 636500             
   590                                  fmt_char_tab:
   591 0000014D 235C74616200            	db `#\\tab\0`
   592                                  fmt_char_newline:
   593 00000153 235C6E65776C696E65-     	db `#\\newline\0`
   593 0000015C 00                 
   594                                  fmt_char_formfeed:
   595 0000015D 235C7061676500          	db `#\\page\0`
   596                                  fmt_char_return:
   597 00000164 235C72657475726E00      	db `#\\return\0`
   598                                  fmt_char_escape:
   599 0000016D 235C65736300            	db `#\\esc\0`
   600                                  fmt_char_space:
   601 00000173 235C737061636500        	db `#\\space\0`
   602                                  fmt_char_hex:
   603 0000017B 235C782530325800        	db `#\\x%02X\0`
   604                                  fmt_closure:
   605 00000183 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   605 0000018C 206174203078253038-
   605 00000195 5820656E763D307825-
   605 0000019E 30385820636F64653D-
   605 000001A7 3078253038583E00   
   606                                  fmt_lparen:
   607 000001AF 2800                    	db `(\0`
   608                                  fmt_dotted_pair:
   609 000001B1 202E2000                	db ` . \0`
   610                                  fmt_rparen:
   611 000001B5 2900                    	db `)\0`
   612                                  fmt_space:
   613 000001B7 2000                    	db ` \0`
   614                                  fmt_empty_vector:
   615 000001B9 23282900                	db `#()\0`
   616                                  fmt_vector:
   617 000001BD 232800                  	db `#(\0`
   618                                  fmt_real:
   619 000001C0 256600                  	db `%f\0`
   620                                  fmt_fraction:
   621 000001C3 256C642F256C6400        	db `%ld/%ld\0`
   622                                  fmt_zero:
   623 000001CB 3000                    	db `0\0`
   624                                  fmt_int:
   625 000001CD 256C6400                	db `%ld\0`
   626                                  fmt_unknown_sexpr_error:
   627 000001D1 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   627 000001DA 6F723A20556E6B6E6F-
   627 000001E3 776E2074797065206F-
   627 000001EC 662073657870722028-
   627 000001F5 3078253032582920   
   628 000001FD 617420616464726573-     	db `at address 0x%08X\n\n\0`
   628 00000206 73203078253038580A-
   628 0000020F 0A00               
   629                                  fmt_dquote:
   630 00000211 2200                    	db `\"\0`
   631                                  fmt_string_char:
   632 00000213 256300                          db `%c\0`
   633                                  fmt_string_char_7:
   634 00000216 5C6100                          db `\\a\0`
   635                                  fmt_string_char_8:
   636 00000219 5C6200                          db `\\b\0`
   637                                  fmt_string_char_9:
   638 0000021C 5C7400                          db `\\t\0`
   639                                  fmt_string_char_10:
   640 0000021F 5C6E00                          db `\\n\0`
   641                                  fmt_string_char_11:
   642 00000222 5C7600                          db `\\v\0`
   643                                  fmt_string_char_12:
   644 00000225 5C6600                          db `\\f\0`
   645                                  fmt_string_char_13:
   646 00000228 5C7200                          db `\\r\0`
   647                                  fmt_string_char_34:
   648 0000022B 5C2200                          db `\\"\0`
   649                                  fmt_string_char_92:
   650 0000022E 5C5C00                          db `\\\\\0`
   651                                  fmt_string_char_hex:
   652 00000231 5C7825583B00                    db `\\x%X;\0`
   653                                  
   654                                  section .text
   655                                  
   656                                  print_sexpr:
   657                                  	ENTER
    33 00000678 C8000000            <1>  enter 0, 0
    34 0000067C 4883E4F0            <1>  and rsp, ~15
   658 00000680 8A07                    	mov al, byte [rdi]
   659 00000682 3C00                    	cmp al, T_void
   660 00000684 744D                    	je .Lvoid
   661 00000686 3C01                    	cmp al, T_nil
   662 00000688 7458                    	je .Lnil
   663 0000068A 3C09                    	cmp al, T_boolean_false
   664 0000068C 7463                    	je .Lboolean_false
   665 0000068E 3C0A                    	cmp al, T_boolean_true
   666 00000690 746E                    	je .Lboolean_true
   667 00000692 3C02                    	cmp al, T_char
   668 00000694 7479                    	je .Lchar
   669 00000696 3C04                    	cmp al, T_symbol
   670 00000698 0F84BB010000            	je .Lsymbol
   671 0000069E 3C21                    	cmp al, T_pair
   672 000006A0 0F84D6010000            	je .Lpair
   673 000006A6 3C22                    	cmp al, T_vector
   674 000006A8 0F8478020000            	je .Lvector
   675 000006AE 3C05                    	cmp al, T_closure
   676 000006B0 0F8489010000            	je .Lclosure
   677 000006B6 3C12                    	cmp al, T_real
   678 000006B8 0F84F3020000            	je .Lreal
   679 000006BE 3C11                    	cmp al, T_rational
   680 000006C0 0F8419030000            	je .Lrational
   681 000006C6 3C03                    	cmp al, T_string
   682 000006C8 0F8452030000            	je .Lstring
   683                                  
   684 000006CE E98A040000              	jmp .Lunknown_sexpr_type
   685                                  
   686                                  .Lvoid:
   687 000006D3 48BF-                   	mov rdi, fmt_void
   687 000006D5 [1601000000000000] 
   688 000006DD E9AF040000              	jmp .Lemit
   689                                  
   690                                  .Lnil:
   691 000006E2 48BF-                   	mov rdi, fmt_nil
   691 000006E4 [1E01000000000000] 
   692 000006EC E9A0040000              	jmp .Lemit
   693                                  
   694                                  .Lboolean_false:
   695 000006F1 48BF-                   	mov rdi, fmt_boolean_false
   695 000006F3 [2101000000000000] 
   696 000006FB E991040000              	jmp .Lemit
   697                                  
   698                                  .Lboolean_true:
   699 00000700 48BF-                   	mov rdi, fmt_boolean_true
   699 00000702 [2401000000000000] 
   700 0000070A E982040000              	jmp .Lemit
   701                                  
   702                                  .Lchar:
   703 0000070F 8A4701                  	mov al, byte [rdi + 1]
   704 00000712 3C20                    	cmp al, ' '
   705 00000714 7E28                    	jle .Lchar_whitespace
   706 00000716 3C5C                    	cmp al, 92 		; backslash
   707 00000718 0F847C000000            	je .Lchar_backslash
   708 0000071E 3C22                    	cmp al, '"'
   709 00000720 0F8483000000            	je .Lchar_dquote
   710 00000726 4825FF000000            	and rax, 255
   711 0000072C 48BF-                   	mov rdi, fmt_char_simple
   711 0000072E [2F01000000000000] 
   712 00000736 4889C6                  	mov rsi, rax
   713 00000739 E953040000              	jmp .Lemit
   714                                  
   715                                  .Lchar_whitespace:
   716 0000073E 3C00                    	cmp al, 0
   717 00000740 7476                    	je .Lchar_null
   718 00000742 3C07                    	cmp al, 7
   719 00000744 0F847D000000            	je .Lchar_bell
   720 0000074A 3C08                    	cmp al, 8
   721 0000074C 0F8484000000            	je .Lchar_backspace
   722 00000752 3C09                    	cmp al, 9
   723 00000754 0F848B000000            	je .Lchar_tab
   724 0000075A 3C0A                    	cmp al, 10
   725 0000075C 0F8492000000            	je .Lchar_newline
   726 00000762 3C0C                    	cmp al, 12
   727 00000764 0F8499000000            	je .Lchar_formfeed
   728 0000076A 3C0D                    	cmp al, 13
   729 0000076C 0F84A0000000            	je .Lchar_return
   730 00000772 3C1B                    	cmp al, 27
   731 00000774 0F84A7000000            	je .Lchar_escape
   732 0000077A 4825FF000000            	and rax, 255
   733 00000780 3C20                    	cmp al, ' '
   734 00000782 0F84A8000000            	je .Lchar_space
   735 00000788 48BF-                   	mov rdi, fmt_char_hex
   735 0000078A [7B01000000000000] 
   736 00000792 4889C6                  	mov rsi, rax
   737 00000795 E9F7030000              	jmp .Lemit	
   738                                  
   739                                  .Lchar_backslash:
   740 0000079A 48BF-                   	mov rdi, fmt_char_backslash
   740 0000079C [2701000000000000] 
   741 000007A4 E9E8030000              	jmp .Lemit
   742                                  
   743                                  .Lchar_dquote:
   744 000007A9 48BF-                   	mov rdi, fmt_char_dquote
   744 000007AB [2B01000000000000] 
   745 000007B3 E9D9030000              	jmp .Lemit
   746                                  
   747                                  .Lchar_null:
   748 000007B8 48BF-                   	mov rdi, fmt_char_null
   748 000007BA [3401000000000000] 
   749 000007C2 E9CA030000              	jmp .Lemit
   750                                  
   751                                  .Lchar_bell:
   752 000007C7 48BF-                   	mov rdi, fmt_char_bell
   752 000007C9 [3A01000000000000] 
   753 000007D1 E9BB030000              	jmp .Lemit
   754                                  
   755                                  .Lchar_backspace:
   756 000007D6 48BF-                   	mov rdi, fmt_char_backspace
   756 000007D8 [4101000000000000] 
   757 000007E0 E9AC030000              	jmp .Lemit
   758                                  
   759                                  .Lchar_tab:
   760 000007E5 48BF-                   	mov rdi, fmt_char_tab
   760 000007E7 [4D01000000000000] 
   761 000007EF E99D030000              	jmp .Lemit
   762                                  
   763                                  .Lchar_newline:
   764 000007F4 48BF-                   	mov rdi, fmt_char_newline
   764 000007F6 [5301000000000000] 
   765 000007FE E98E030000              	jmp .Lemit
   766                                  
   767                                  .Lchar_formfeed:
   768 00000803 48BF-                   	mov rdi, fmt_char_formfeed
   768 00000805 [5D01000000000000] 
   769 0000080D E97F030000              	jmp .Lemit
   770                                  
   771                                  .Lchar_return:
   772 00000812 48BF-                   	mov rdi, fmt_char_return
   772 00000814 [6401000000000000] 
   773 0000081C E970030000              	jmp .Lemit
   774                                  
   775                                  .Lchar_escape:
   776 00000821 48BF-                   	mov rdi, fmt_char_escape
   776 00000823 [6D01000000000000] 
   777 0000082B E961030000              	jmp .Lemit
   778                                  
   779                                  .Lchar_space:
   780 00000830 48BF-                   	mov rdi, fmt_char_space
   780 00000832 [7301000000000000] 
   781 0000083A E952030000              	jmp .Lemit
   782                                  
   783                                  .Lclosure:
   784 0000083F 4889FE                  	mov rsi, qword rdi
   785 00000842 48BF-                   	mov rdi, fmt_closure
   785 00000844 [8301000000000000] 
   786 0000084C 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   787 00000850 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   788 00000854 E938030000              	jmp .Lemit
   789                                  
   790                                  .Lsymbol:
   791 00000859 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   792 0000085D BE01000000              	mov rsi, 1		 ; size = 1 byte
   793 00000862 488B5701                	mov rdx, qword [rdi + 1] ; length
   794 00000866 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   795 0000086A 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   796 00000872 E8(00000000)            	call fwrite
   797 00000877 E921030000              	jmp .Lend
   798                                  	
   799                                  .Lpair:
   800 0000087C 57                      	push rdi
   801 0000087D 48BF-                   	mov rdi, fmt_lparen
   801 0000087F [AF01000000000000] 
   802 00000887 B800000000              	mov rax, 0
   803                                          ENTER
    33 0000088C C8000000            <1>  enter 0, 0
    34 00000890 4883E4F0            <1>  and rsp, ~15
   804 00000894 E8(00000000)            	call printf
   805                                          LEAVE
    38 00000899 C9                  <1>  leave
   806 0000089A 488B3C24                	mov rdi, qword [rsp] 	; pair
   807 0000089E 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   808 000008A2 E8D1FDFFFF              	call print_sexpr
   809 000008A7 5F                      	pop rdi 		; pair
   810 000008A8 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   811                                  .Lcdr:
   812 000008AC 8A07                    	mov al, byte [rdi]
   813 000008AE 3C01                    	cmp al, T_nil
   814 000008B0 7435                    	je .Lcdr_nil
   815 000008B2 3C21                    	cmp al, T_pair
   816 000008B4 7447                    	je .Lcdr_pair
   817 000008B6 57                      	push rdi
   818 000008B7 48BF-                   	mov rdi, fmt_dotted_pair
   818 000008B9 [B101000000000000] 
   819 000008C1 B800000000              	mov rax, 0
   820 000008C6 E8(00000000)            	call printf
   821 000008CB 5F                      	pop rdi
   822 000008CC E8A7FDFFFF              	call print_sexpr
   823 000008D1 48BF-                   	mov rdi, fmt_rparen
   823 000008D3 [B501000000000000] 
   824 000008DB B800000000              	mov rax, 0
   825 000008E0 E8(00000000)            	call printf
   826                                  	LEAVE
    38 000008E5 C9                  <1>  leave
   827 000008E6 C3                      	ret
   828                                  
   829                                  .Lcdr_nil:
   830 000008E7 48BF-                   	mov rdi, fmt_rparen
   830 000008E9 [B501000000000000] 
   831 000008F1 B800000000              	mov rax, 0
   832 000008F6 E8(00000000)            	call printf
   833                                  	LEAVE
    38 000008FB C9                  <1>  leave
   834 000008FC C3                      	ret
   835                                  
   836                                  .Lcdr_pair:
   837 000008FD 57                      	push rdi
   838 000008FE 48BF-                   	mov rdi, fmt_space
   838 00000900 [B701000000000000] 
   839 00000908 B800000000              	mov rax, 0
   840 0000090D E8(00000000)            	call printf
   841 00000912 488B3C24                	mov rdi, qword [rsp]
   842 00000916 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   843 0000091A E859FDFFFF              	call print_sexpr
   844 0000091F 5F                      	pop rdi
   845 00000920 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   846 00000924 EB86                    	jmp .Lcdr
   847                                  
   848                                  .Lvector:
   849 00000926 488B4701                	mov rax, qword [rdi + 1] ; length
   850 0000092A 4883F800                	cmp rax, 0
   851 0000092E 7472                    	je .Lvector_empty
   852 00000930 57                      	push rdi
   853 00000931 48BF-                   	mov rdi, fmt_vector
   853 00000933 [BD01000000000000] 
   854 0000093B B800000000              	mov rax, 0
   855 00000940 E8(00000000)            	call printf
   856 00000945 488B3C24                	mov rdi, qword [rsp]
   857 00000949 FF7701                  	push qword [rdi + 1]
   858 0000094C 6A01                    	push 1
   859 0000094E 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   860 00000952 E821FDFFFF              	call print_sexpr
   861                                  .Lvector_loop:
   862                                  	; [rsp] index
   863                                  	; [rsp + 8*1] limit
   864                                  	; [rsp + 8*2] vector
   865 00000957 488B0424                	mov rax, qword [rsp]
   866 0000095B 483B442408              	cmp rax, qword [rsp + 8*1]
   867 00000960 742D                    	je .Lvector_end
   868 00000962 48BF-                   	mov rdi, fmt_space
   868 00000964 [B701000000000000] 
   869 0000096C B800000000              	mov rax, 0
   870 00000971 E8(00000000)            	call printf
   871 00000976 488B0424                	mov rax, qword [rsp]
   872 0000097A 488B5C2410              	mov rbx, qword [rsp + 8*2]
   873 0000097F 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   874 00000984 E8EFFCFFFF              	call print_sexpr
   875 00000989 48FF0424                	inc qword [rsp]
   876 0000098D EBC8                    	jmp .Lvector_loop
   877                                  
   878                                  .Lvector_end:
   879 0000098F 4883C418                	add rsp, 8*3
   880 00000993 48BF-                   	mov rdi, fmt_rparen
   880 00000995 [B501000000000000] 
   881 0000099D E9EF010000              	jmp .Lemit	
   882                                  
   883                                  .Lvector_empty:
   884 000009A2 48BF-                   	mov rdi, fmt_empty_vector
   884 000009A4 [B901000000000000] 
   885 000009AC E9E0010000              	jmp .Lemit
   886                                  
   887                                  .Lreal:
   888 000009B1 FF7701                  	push qword [rdi + 1]
   889 000009B4 F20F100424              	movsd xmm0, qword [rsp]
   890 000009B9 4883C408                	add rsp, 8*1
   891 000009BD 48BF-                   	mov rdi, fmt_real
   891 000009BF [C001000000000000] 
   892 000009C7 B801000000              	mov rax, 1
   893                                  	ENTER
    33 000009CC C8000000            <1>  enter 0, 0
    34 000009D0 4883E4F0            <1>  and rsp, ~15
   894 000009D4 E8(00000000)            	call printf
   895                                  	LEAVE
    38 000009D9 C9                  <1>  leave
   896 000009DA E9BE010000              	jmp .Lend
   897                                  
   898                                  .Lrational:
   899 000009DF 488B7701                	mov rsi, qword [rdi + 1]
   900 000009E3 488B5709                	mov rdx, qword [rdi + 1 + 8]
   901 000009E7 4883FE00                	cmp rsi, 0
   902 000009EB 7415                    	je .Lrat_zero
   903 000009ED 4883FA01                	cmp rdx, 1
   904 000009F1 741E                    	je .Lrat_int
   905 000009F3 48BF-                   	mov rdi, fmt_fraction
   905 000009F5 [C301000000000000] 
   906 000009FD E98F010000              	jmp .Lemit
   907                                  
   908                                  .Lrat_zero:
   909 00000A02 48BF-                   	mov rdi, fmt_zero
   909 00000A04 [CB01000000000000] 
   910 00000A0C E980010000              	jmp .Lemit
   911                                  
   912                                  .Lrat_int:
   913 00000A11 48BF-                   	mov rdi, fmt_int
   913 00000A13 [CD01000000000000] 
   914 00000A1B E971010000              	jmp .Lemit
   915                                  
   916                                  .Lstring:
   917 00000A20 488D4709                	lea rax, [rdi + 1 + 8]
   918 00000A24 50                      	push rax
   919 00000A25 FF7701                  	push qword [rdi + 1]
   920 00000A28 48BF-                   	mov rdi, fmt_dquote
   920 00000A2A [1102000000000000] 
   921 00000A32 B800000000              	mov rax, 0
   922                                  	ENTER
    33 00000A37 C8000000            <1>  enter 0, 0
    34 00000A3B 4883E4F0            <1>  and rsp, ~15
   923 00000A3F E8(00000000)            	call printf
   924                                  	LEAVE
    38 00000A44 C9                  <1>  leave
   925                                  .Lstring_loop:
   926                                  	; qword [rsp]: limit
   927                                  	; qword [rsp + 8*1]: char *
   928 00000A45 48833C2400              	cmp qword [rsp], 0
   929 00000A4A 0F84FD000000            	je .Lstring_end
   930 00000A50 488B442408              	mov rax, qword [rsp + 8*1]
   931 00000A55 8A00                    	mov al, byte [rax]
   932 00000A57 4825FF000000            	and rax, 255
   933 00000A5D 3C07                    	cmp al, 7
   934 00000A5F 7468                            je .Lstring_char_7
   935 00000A61 3C08                            cmp al, 8
   936 00000A63 7470                            je .Lstring_char_8
   937 00000A65 3C09                            cmp al, 9
   938 00000A67 7478                            je .Lstring_char_9
   939 00000A69 3C0A                            cmp al, 10
   940 00000A6B 0F847C000000                    je .Lstring_char_10
   941 00000A71 3C0B                            cmp al, 11
   942 00000A73 0F8480000000                    je .Lstring_char_11
   943 00000A79 3C0C                            cmp al, 12
   944 00000A7B 0F8484000000                    je .Lstring_char_12
   945 00000A81 3C0D                            cmp al, 13
   946 00000A83 0F8488000000                    je .Lstring_char_13
   947 00000A89 3C22                            cmp al, 34
   948 00000A8B 0F848C000000                    je .Lstring_char_34
   949 00000A91 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   951 00000A93 3C20                            cmp al, ' '
   952 00000A95 0F8CA0000000                    jl .Lstring_char_hex
   953 00000A9B 48BF-                           mov rdi, fmt_string_char
   953 00000A9D [1302000000000000] 
   954 00000AA5 4889C6                          mov rsi, rax
   955                                  .Lstring_char_emit:
   956 00000AA8 B800000000                      mov rax, 0
   957                                          ENTER
    33 00000AAD C8000000            <1>  enter 0, 0
    34 00000AB1 4883E4F0            <1>  and rsp, ~15
   958 00000AB5 E8(00000000)                    call printf
   959                                          LEAVE
    38 00000ABA C9                  <1>  leave
   960 00000ABB 48FF0C24                        dec qword [rsp]
   961 00000ABF 48FF442408                      inc qword [rsp + 8*1]
   962 00000AC4 E97CFFFFFF                      jmp .Lstring_loop
   963                                  
   964                                  .Lstring_char_7:
   965 00000AC9 48BF-                           mov rdi, fmt_string_char_7
   965 00000ACB [1602000000000000] 
   966 00000AD3 EBD3                            jmp .Lstring_char_emit
   967                                  
   968                                  .Lstring_char_8:
   969 00000AD5 48BF-                           mov rdi, fmt_string_char_8
   969 00000AD7 [1902000000000000] 
   970 00000ADF EBC7                            jmp .Lstring_char_emit
   971                                          
   972                                  .Lstring_char_9:
   973 00000AE1 48BF-                           mov rdi, fmt_string_char_9
   973 00000AE3 [1C02000000000000] 
   974 00000AEB EBBB                            jmp .Lstring_char_emit
   975                                  
   976                                  .Lstring_char_10:
   977 00000AED 48BF-                           mov rdi, fmt_string_char_10
   977 00000AEF [1F02000000000000] 
   978 00000AF7 EBAF                            jmp .Lstring_char_emit
   979                                  
   980                                  .Lstring_char_11:
   981 00000AF9 48BF-                           mov rdi, fmt_string_char_11
   981 00000AFB [2202000000000000] 
   982 00000B03 EBA3                            jmp .Lstring_char_emit
   983                                  
   984                                  .Lstring_char_12:
   985 00000B05 48BF-                           mov rdi, fmt_string_char_12
   985 00000B07 [2502000000000000] 
   986 00000B0F EB97                            jmp .Lstring_char_emit
   987                                  
   988                                  .Lstring_char_13:
   989 00000B11 48BF-                           mov rdi, fmt_string_char_13
   989 00000B13 [2802000000000000] 
   990 00000B1B EB8B                            jmp .Lstring_char_emit
   991                                  
   992                                  .Lstring_char_34:
   993 00000B1D 48BF-                           mov rdi, fmt_string_char_34
   993 00000B1F [2B02000000000000] 
   994 00000B27 E97CFFFFFF                      jmp .Lstring_char_emit
   995                                  
   996                                  .Lstring_char_92:
   997 00000B2C 48BF-                           mov rdi, fmt_string_char_92
   997 00000B2E [2E02000000000000] 
   998 00000B36 E96DFFFFFF                      jmp .Lstring_char_emit
   999                                  
  1000                                  .Lstring_char_hex:
  1001 00000B3B 48BF-                           mov rdi, fmt_string_char_hex
  1001 00000B3D [3102000000000000] 
  1002 00000B45 4889C6                          mov rsi, rax
  1003 00000B48 E95BFFFFFF                      jmp .Lstring_char_emit        
  1004                                  
  1005                                  .Lstring_end:
  1006 00000B4D 4883C410                	add rsp, 8 * 2
  1007 00000B51 48BF-                   	mov rdi, fmt_dquote
  1007 00000B53 [1102000000000000] 
  1008 00000B5B EB34                    	jmp .Lemit
  1009                                  
  1010                                  .Lunknown_sexpr_type:
  1011 00000B5D 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1011 00000B5F [D101000000000000] 
  1012 00000B67 4825FF000000            	and rax, 255
  1013 00000B6D 4889C2                  	mov rdx, rax
  1014 00000B70 4889F9                  	mov rcx, rdi
  1015 00000B73 488B3C25[00000000]      	mov rdi, qword [stderr]
  1016 00000B7B B800000000              	mov rax, 0
  1017 00000B80 E8(00000000)            	call fprintf
  1018 00000B85 48C7C0FFFFFFFF          	mov rax, -1
  1019 00000B8C E8(00000000)            	call exit
  1020                                  
  1021                                  .Lemit:
  1022 00000B91 B800000000              	mov rax, 0
  1023 00000B96 E8(00000000)            	call printf
  1024 00000B9B EB00                    	jmp .Lend
  1025                                  
  1026                                  .Lend:
  1027                                  	LEAVE
    38 00000B9D C9                  <1>  leave
  1028 00000B9E C3                      	ret
  1029                                  
  1030                                  ;;; rdi: address of free variable
  1031                                  ;;; rsi: address of code-pointer
  1032                                  bind_primitive:
  1033                                          ENTER
    33 00000B9F C8000000            <1>  enter 0, 0
    34 00000BA3 4883E4F0            <1>  and rsp, ~15
  1034 00000BA7 57                              push rdi
  1035 00000BA8 BF11000000                      mov rdi, (1 + 8 + 8)
  1036 00000BAD E8ABFAFFFF                      call malloc
  1037 00000BB2 5F                              pop rdi
  1038 00000BB3 C60005                          mov byte [rax], T_closure
  1039 00000BB6 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1040 00000BBE 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1041 00000BC2 488907                          mov qword [rdi], rax
  1042                                          LEAVE
    38 00000BC5 C9                  <1>  leave
  1043 00000BC6 C3                              ret
  1044                                  
  1045                                  
  1046                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1047                                  L_code_ptr_bin_apply:
  1048                                          
  1049                                  L_code_ptr_is_null:
  1050                                          ENTER
    33 00000BC7 C8000000            <1>  enter 0, 0
    34 00000BCB 4883E4F0            <1>  and rsp, ~15
  1051 00000BCF 48837D1801                      cmp COUNT, 1
  1052 00000BD4 0F856F100000                    jne L_error_arg_count_1
  1053 00000BDA 488B4520                        mov rax, PARAM(0)
  1054 00000BDE 803801                          cmp byte [rax], T_nil
  1055 00000BE1 750C                            jne .L_false
  1056 00000BE3 48B8-                           mov rax, sob_boolean_true
  1056 00000BE5 [0300000000000000] 
  1057 00000BED EB0A                            jmp .L_end
  1058                                  .L_false:
  1059 00000BEF 48B8-                           mov rax, sob_boolean_false
  1059 00000BF1 [0200000000000000] 
  1060                                  .L_end:
  1061                                          LEAVE
    38 00000BF9 C9                  <1>  leave
  1062 00000BFA C21800                          ret AND_KILL_FRAME(1)
  1063                                  
  1064                                  L_code_ptr_is_pair:
  1065                                          ENTER
    33 00000BFD C8000000            <1>  enter 0, 0
    34 00000C01 4883E4F0            <1>  and rsp, ~15
  1066 00000C05 48837D1801                      cmp COUNT, 1
  1067 00000C0A 0F8539100000                    jne L_error_arg_count_1
  1068 00000C10 488B4520                        mov rax, PARAM(0)
  1069 00000C14 803821                          cmp byte [rax], T_pair
  1070 00000C17 750C                            jne .L_false
  1071 00000C19 48B8-                           mov rax, sob_boolean_true
  1071 00000C1B [0300000000000000] 
  1072 00000C23 EB0A                            jmp .L_end
  1073                                  .L_false:
  1074 00000C25 48B8-                           mov rax, sob_boolean_false
  1074 00000C27 [0200000000000000] 
  1075                                  .L_end:
  1076                                          LEAVE
    38 00000C2F C9                  <1>  leave
  1077 00000C30 C21800                          ret AND_KILL_FRAME(1)
  1078                                          
  1079                                  L_code_ptr_is_void:
  1080                                          ENTER
    33 00000C33 C8000000            <1>  enter 0, 0
    34 00000C37 4883E4F0            <1>  and rsp, ~15
  1081 00000C3B 48837D1801                      cmp COUNT, 1
  1082 00000C40 0F8503100000                    jne L_error_arg_count_1
  1083 00000C46 488B4520                        mov rax, PARAM(0)
  1084 00000C4A 803800                          cmp byte [rax], T_void
  1085 00000C4D 750C                            jne .L_false
  1086 00000C4F 48B8-                           mov rax, sob_boolean_true
  1086 00000C51 [0300000000000000] 
  1087 00000C59 EB0A                            jmp .L_end
  1088                                  .L_false:
  1089 00000C5B 48B8-                           mov rax, sob_boolean_false
  1089 00000C5D [0200000000000000] 
  1090                                  .L_end:
  1091                                          LEAVE
    38 00000C65 C9                  <1>  leave
  1092 00000C66 C21800                          ret AND_KILL_FRAME(1)
  1093                                  
  1094                                  L_code_ptr_is_char:
  1095                                          ENTER
    33 00000C69 C8000000            <1>  enter 0, 0
    34 00000C6D 4883E4F0            <1>  and rsp, ~15
  1096 00000C71 48837D1801                      cmp COUNT, 1
  1097 00000C76 0F85CD0F0000                    jne L_error_arg_count_1
  1098 00000C7C 488B4520                        mov rax, PARAM(0)
  1099 00000C80 803802                          cmp byte [rax], T_char
  1100 00000C83 750C                            jne .L_false
  1101 00000C85 48B8-                           mov rax, sob_boolean_true
  1101 00000C87 [0300000000000000] 
  1102 00000C8F EB0A                            jmp .L_end
  1103                                  .L_false:
  1104 00000C91 48B8-                           mov rax, sob_boolean_false
  1104 00000C93 [0200000000000000] 
  1105                                  .L_end:
  1106                                          LEAVE
    38 00000C9B C9                  <1>  leave
  1107 00000C9C C21800                          ret AND_KILL_FRAME(1)
  1108                                  
  1109                                  L_code_ptr_is_string:
  1110                                          ENTER
    33 00000C9F C8000000            <1>  enter 0, 0
    34 00000CA3 4883E4F0            <1>  and rsp, ~15
  1111 00000CA7 48837D1801                      cmp COUNT, 1
  1112 00000CAC 0F85970F0000                    jne L_error_arg_count_1
  1113 00000CB2 488B4520                        mov rax, PARAM(0)
  1114 00000CB6 803803                          cmp byte [rax], T_string
  1115 00000CB9 750C                            jne .L_false
  1116 00000CBB 48B8-                           mov rax, sob_boolean_true
  1116 00000CBD [0300000000000000] 
  1117 00000CC5 EB0A                            jmp .L_end
  1118                                  .L_false:
  1119 00000CC7 48B8-                           mov rax, sob_boolean_false
  1119 00000CC9 [0200000000000000] 
  1120                                  .L_end:
  1121                                          LEAVE
    38 00000CD1 C9                  <1>  leave
  1122 00000CD2 C21800                          ret AND_KILL_FRAME(1)
  1123                                  
  1124                                  L_code_ptr_is_symbol:
  1125                                          ENTER
    33 00000CD5 C8000000            <1>  enter 0, 0
    34 00000CD9 4883E4F0            <1>  and rsp, ~15
  1126 00000CDD 48837D1801                      cmp COUNT, 1
  1127 00000CE2 0F85610F0000                    jne L_error_arg_count_1
  1128 00000CE8 488B4520                        mov rax, PARAM(0)
  1129 00000CEC 803804                          cmp byte [rax], T_symbol
  1130 00000CEF 750C                            jne .L_false
  1131 00000CF1 48B8-                           mov rax, sob_boolean_true
  1131 00000CF3 [0300000000000000] 
  1132 00000CFB EB0A                            jmp .L_end
  1133                                  .L_false:
  1134 00000CFD 48B8-                           mov rax, sob_boolean_false
  1134 00000CFF [0200000000000000] 
  1135                                  .L_end:
  1136                                          LEAVE
    38 00000D07 C9                  <1>  leave
  1137 00000D08 C21800                          ret AND_KILL_FRAME(1)
  1138                                  
  1139                                  L_code_ptr_is_vector:
  1140                                          ENTER
    33 00000D0B C8000000            <1>  enter 0, 0
    34 00000D0F 4883E4F0            <1>  and rsp, ~15
  1141 00000D13 48837D1801                      cmp COUNT, 1
  1142 00000D18 0F852B0F0000                    jne L_error_arg_count_1
  1143 00000D1E 488B4520                        mov rax, PARAM(0)
  1144 00000D22 803822                          cmp byte [rax], T_vector
  1145 00000D25 750C                            jne .L_false
  1146 00000D27 48B8-                           mov rax, sob_boolean_true
  1146 00000D29 [0300000000000000] 
  1147 00000D31 EB0A                            jmp .L_end
  1148                                  .L_false:
  1149 00000D33 48B8-                           mov rax, sob_boolean_false
  1149 00000D35 [0200000000000000] 
  1150                                  .L_end:
  1151                                          LEAVE
    38 00000D3D C9                  <1>  leave
  1152 00000D3E C21800                          ret AND_KILL_FRAME(1)
  1153                                  
  1154                                  L_code_ptr_is_closure:
  1155                                          ENTER
    33 00000D41 C8000000            <1>  enter 0, 0
    34 00000D45 4883E4F0            <1>  and rsp, ~15
  1156 00000D49 48837D1801                      cmp COUNT, 1
  1157 00000D4E 0F85F50E0000                    jne L_error_arg_count_1
  1158 00000D54 488B4520                        mov rax, PARAM(0)
  1159 00000D58 803805                          cmp byte [rax], T_closure
  1160 00000D5B 750C                            jne .L_false
  1161 00000D5D 48B8-                           mov rax, sob_boolean_true
  1161 00000D5F [0300000000000000] 
  1162 00000D67 EB0A                            jmp .L_end
  1163                                  .L_false:
  1164 00000D69 48B8-                           mov rax, sob_boolean_false
  1164 00000D6B [0200000000000000] 
  1165                                  .L_end:
  1166                                          LEAVE
    38 00000D73 C9                  <1>  leave
  1167 00000D74 C21800                          ret AND_KILL_FRAME(1)
  1168                                  
  1169                                  L_code_ptr_is_real:
  1170                                          ENTER
    33 00000D77 C8000000            <1>  enter 0, 0
    34 00000D7B 4883E4F0            <1>  and rsp, ~15
  1171 00000D7F 48837D1801                      cmp COUNT, 1
  1172 00000D84 0F85BF0E0000                    jne L_error_arg_count_1
  1173 00000D8A 488B4520                        mov rax, PARAM(0)
  1174 00000D8E 803812                          cmp byte [rax], T_real
  1175 00000D91 750C                            jne .L_false
  1176 00000D93 48B8-                           mov rax, sob_boolean_true
  1176 00000D95 [0300000000000000] 
  1177 00000D9D EB0A                            jmp .L_end
  1178                                  .L_false:
  1179 00000D9F 48B8-                           mov rax, sob_boolean_false
  1179 00000DA1 [0200000000000000] 
  1180                                  .L_end:
  1181                                          LEAVE
    38 00000DA9 C9                  <1>  leave
  1182 00000DAA C21800                          ret AND_KILL_FRAME(1)
  1183                                  
  1184                                  L_code_ptr_is_rational:
  1185                                          ENTER
    33 00000DAD C8000000            <1>  enter 0, 0
    34 00000DB1 4883E4F0            <1>  and rsp, ~15
  1186 00000DB5 48837D1801                      cmp COUNT, 1
  1187 00000DBA 0F85890E0000                    jne L_error_arg_count_1
  1188 00000DC0 488B4520                        mov rax, PARAM(0)
  1189 00000DC4 803811                          cmp byte [rax], T_rational
  1190 00000DC7 750C                            jne .L_false
  1191 00000DC9 48B8-                           mov rax, sob_boolean_true
  1191 00000DCB [0300000000000000] 
  1192 00000DD3 EB0A                            jmp .L_end
  1193                                  .L_false:
  1194 00000DD5 48B8-                           mov rax, sob_boolean_false
  1194 00000DD7 [0200000000000000] 
  1195                                  .L_end:
  1196                                          LEAVE
    38 00000DDF C9                  <1>  leave
  1197 00000DE0 C21800                          ret AND_KILL_FRAME(1)
  1198                                  
  1199                                  L_code_ptr_is_boolean:
  1200                                          ENTER
    33 00000DE3 C8000000            <1>  enter 0, 0
    34 00000DE7 4883E4F0            <1>  and rsp, ~15
  1201 00000DEB 48837D1801                      cmp COUNT, 1
  1202 00000DF0 0F85530E0000                    jne L_error_arg_count_1
  1203 00000DF6 488B4520                        mov rax, PARAM(0)
  1204 00000DFA 8A18                            mov bl, byte [rax]
  1205 00000DFC 80E308                          and bl, T_boolean
  1206 00000DFF 740C                            je .L_false
  1207 00000E01 48B8-                           mov rax, sob_boolean_true
  1207 00000E03 [0300000000000000] 
  1208 00000E0B EB0A                            jmp .L_end
  1209                                  .L_false:
  1210 00000E0D 48B8-                           mov rax, sob_boolean_false
  1210 00000E0F [0200000000000000] 
  1211                                  .L_end:
  1212                                          LEAVE
    38 00000E17 C9                  <1>  leave
  1213 00000E18 C21800                          ret AND_KILL_FRAME(1)
  1214                                          
  1215                                  L_code_ptr_is_number:
  1216                                          ENTER
    33 00000E1B C8000000            <1>  enter 0, 0
    34 00000E1F 4883E4F0            <1>  and rsp, ~15
  1217 00000E23 48837D1801                      cmp COUNT, 1
  1218 00000E28 0F851B0E0000                    jne L_error_arg_count_1
  1219 00000E2E 488B4520                        mov rax, PARAM(0)
  1220 00000E32 8A18                            mov bl, byte [rax]
  1221 00000E34 80E310                          and bl, T_number
  1222 00000E37 740C                            je .L_false
  1223 00000E39 48B8-                           mov rax, sob_boolean_true
  1223 00000E3B [0300000000000000] 
  1224 00000E43 EB0A                            jmp .L_end
  1225                                  .L_false:
  1226 00000E45 48B8-                           mov rax, sob_boolean_false
  1226 00000E47 [0200000000000000] 
  1227                                  .L_end:
  1228                                          LEAVE
    38 00000E4F C9                  <1>  leave
  1229 00000E50 C21800                          ret AND_KILL_FRAME(1)
  1230                                          
  1231                                  L_code_ptr_is_collection:
  1232                                          ENTER
    33 00000E53 C8000000            <1>  enter 0, 0
    34 00000E57 4883E4F0            <1>  and rsp, ~15
  1233 00000E5B 48837D1801                      cmp COUNT, 1
  1234 00000E60 0F85E30D0000                    jne L_error_arg_count_1
  1235 00000E66 488B4520                        mov rax, PARAM(0)
  1236 00000E6A 8A18                            mov bl, byte [rax]
  1237 00000E6C 80E320                          and bl, T_collection
  1238 00000E6F 740C                            je .L_false
  1239 00000E71 48B8-                           mov rax, sob_boolean_true
  1239 00000E73 [0300000000000000] 
  1240 00000E7B EB0A                            jmp .L_end
  1241                                  .L_false:
  1242 00000E7D 48B8-                           mov rax, sob_boolean_false
  1242 00000E7F [0200000000000000] 
  1243                                  .L_end:
  1244                                          LEAVE
    38 00000E87 C9                  <1>  leave
  1245 00000E88 C21800                          ret AND_KILL_FRAME(1)
  1246                                  
  1247                                  L_code_ptr_cons:
  1248                                          ENTER
    33 00000E8B C8000000            <1>  enter 0, 0
    34 00000E8F 4883E4F0            <1>  and rsp, ~15
  1249 00000E93 48837D1802                      cmp COUNT, 2
  1250 00000E98 0F85D70D0000                    jne L_error_arg_count_2
  1251 00000E9E BF11000000                      mov rdi, (1 + 8 + 8)
  1252 00000EA3 E8B5F7FFFF                      call malloc
  1253 00000EA8 C60021                          mov byte [rax], T_pair
  1254 00000EAB 488B5D20                        mov rbx, PARAM(0)
  1255 00000EAF 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1256 00000EB3 488B5D28                        mov rbx, PARAM(1)
  1257 00000EB7 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1258                                          LEAVE
    38 00000EBB C9                  <1>  leave
  1259 00000EBC C22000                          ret AND_KILL_FRAME(2)
  1260                                  
  1261                                  L_code_ptr_display_sexpr:
  1262                                          ENTER
    33 00000EBF C8000000            <1>  enter 0, 0
    34 00000EC3 4883E4F0            <1>  and rsp, ~15
  1263 00000EC7 48837D1801                      cmp COUNT, 1
  1264 00000ECC 0F85770D0000                    jne L_error_arg_count_1
  1265 00000ED2 488B7D20                        mov rdi, PARAM(0)
  1266 00000ED6 E89DF7FFFF                      call print_sexpr
  1267 00000EDB 48B8-                           mov rax, sob_void
  1267 00000EDD [0000000000000000] 
  1268                                          LEAVE
    38 00000EE5 C9                  <1>  leave
  1269 00000EE6 C21800                          ret AND_KILL_FRAME(1)
  1270                                  
  1271                                  L_code_ptr_write_char:
  1272                                          ENTER
    33 00000EE9 C8000000            <1>  enter 0, 0
    34 00000EED 4883E4F0            <1>  and rsp, ~15
  1273 00000EF1 48837D1801                      cmp COUNT, 1
  1274 00000EF6 0F854D0D0000                    jne L_error_arg_count_1
  1275 00000EFC 488B4520                        mov rax, PARAM(0)
  1276                                          assert_char(rax)
    42 00000F00 803802              <1>  cmp byte [%1], %2
    43 00000F03 0F85F00D0000        <1>  jne L_error_incorrect_type
  1277 00000F09 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1278 00000F0C 4825FF000000                    and rax, 255
  1279 00000F12 48BF-                           mov rdi, fmt_char
  1279 00000F14 [3702000000000000] 
  1280 00000F1C 4889C6                          mov rsi, rax
  1281 00000F1F B800000000                      mov rax, 0
  1282 00000F24 E8(00000000)                    call printf
  1283 00000F29 48B8-                           mov rax, sob_void
  1283 00000F2B [0000000000000000] 
  1284                                          LEAVE
    38 00000F33 C9                  <1>  leave
  1285 00000F34 C21800                          ret AND_KILL_FRAME(1)
  1286                                  
  1287                                  L_code_ptr_car:
  1288                                          ENTER
    33 00000F37 C8000000            <1>  enter 0, 0
    34 00000F3B 4883E4F0            <1>  and rsp, ~15
  1289 00000F3F 48837D1801                      cmp COUNT, 1
  1290 00000F44 0F85FF0C0000                    jne L_error_arg_count_1
  1291 00000F4A 488B4520                        mov rax, PARAM(0)
  1292                                          assert_pair(rax)
    42 00000F4E 803821              <1>  cmp byte [%1], %2
    43 00000F51 0F85A20D0000        <1>  jne L_error_incorrect_type
  1293 00000F57 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1294                                          LEAVE
    38 00000F5B C9                  <1>  leave
  1295 00000F5C C21800                          ret AND_KILL_FRAME(1)
  1296                                          
  1297                                  L_code_ptr_cdr:
  1298                                          ENTER
    33 00000F5F C8000000            <1>  enter 0, 0
    34 00000F63 4883E4F0            <1>  and rsp, ~15
  1299 00000F67 48837D1801                      cmp COUNT, 1
  1300 00000F6C 0F85D70C0000                    jne L_error_arg_count_1
  1301 00000F72 488B4520                        mov rax, PARAM(0)
  1302                                          assert_pair(rax)
    42 00000F76 803821              <1>  cmp byte [%1], %2
    43 00000F79 0F857A0D0000        <1>  jne L_error_incorrect_type
  1303 00000F7F 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1304                                          LEAVE
    38 00000F83 C9                  <1>  leave
  1305 00000F84 C21800                          ret AND_KILL_FRAME(1)
  1306                                          
  1307                                  L_code_ptr_string_length:
  1308                                          ENTER
    33 00000F87 C8000000            <1>  enter 0, 0
    34 00000F8B 4883E4F0            <1>  and rsp, ~15
  1309 00000F8F 48837D1801                      cmp COUNT, 1
  1310 00000F94 0F85AF0C0000                    jne L_error_arg_count_1
  1311 00000F9A 488B4520                        mov rax, PARAM(0)
  1312                                          assert_string(rax)
    42 00000F9E 803803              <1>  cmp byte [%1], %2
    43 00000FA1 0F85520D0000        <1>  jne L_error_incorrect_type
  1313 00000FA7 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1314 00000FAB E81F0C0000                      call make_integer
  1315                                          LEAVE
    38 00000FB0 C9                  <1>  leave
  1316 00000FB1 C21800                          ret AND_KILL_FRAME(1)
  1317                                  
  1318                                  L_code_ptr_vector_length:
  1319                                          ENTER
    33 00000FB4 C8000000            <1>  enter 0, 0
    34 00000FB8 4883E4F0            <1>  and rsp, ~15
  1320 00000FBC 48837D1801                      cmp COUNT, 1
  1321 00000FC1 0F85820C0000                    jne L_error_arg_count_1
  1322 00000FC7 488B4520                        mov rax, PARAM(0)
  1323                                          assert_vector(rax)
    42 00000FCB 803822              <1>  cmp byte [%1], %2
    43 00000FCE 0F85250D0000        <1>  jne L_error_incorrect_type
  1324 00000FD4 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1325 00000FD8 E8F20B0000                      call make_integer
  1326                                          LEAVE
    38 00000FDD C9                  <1>  leave
  1327 00000FDE C21800                          ret AND_KILL_FRAME(1)
  1328                                  
  1329                                  L_code_ptr_real_to_integer:
  1330                                          ENTER
    33 00000FE1 C8000000            <1>  enter 0, 0
    34 00000FE5 4883E4F0            <1>  and rsp, ~15
  1331 00000FE9 48837D1801                      cmp COUNT, 1
  1332 00000FEE 0F85550C0000                    jne L_error_arg_count_1
  1333 00000FF4 488B5D20                        mov rbx, PARAM(0)
  1334                                          assert_real(rbx)
    42 00000FF8 803B12              <1>  cmp byte [%1], %2
    43 00000FFB 0F85F80C0000        <1>  jne L_error_incorrect_type
  1335 00001001 F20F104301                      movsd xmm0, qword [rbx + 1]
  1336 00001006 F2480F2CF8                      cvttsd2si rdi, xmm0
  1337 0000100B E8BF0B0000                      call make_integer
  1338                                          LEAVE
    38 00001010 C9                  <1>  leave
  1339 00001011 C21800                          ret AND_KILL_FRAME(1)
  1340                                  
  1341                                  L_code_ptr_exit:
  1342                                          ENTER
    33 00001014 C8000000            <1>  enter 0, 0
    34 00001018 4883E4F0            <1>  and rsp, ~15
  1343 0000101C 48837D1800                      cmp COUNT, 0
  1344 00001021 0F85F60B0000                    jne L_error_arg_count_0
  1345 00001027 B800000000                      mov rax, 0
  1346 0000102C E8(00000000)                    call exit
  1347                                  
  1348                                  L_code_ptr_integer_to_real:
  1349                                          ENTER
    33 00001031 C8000000            <1>  enter 0, 0
    34 00001035 4883E4F0            <1>  and rsp, ~15
  1350 00001039 48837D1801                      cmp COUNT, 1
  1351 0000103E 0F85050C0000                    jne L_error_arg_count_1
  1352 00001044 488B4520                        mov rax, PARAM(0)
  1353                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001048 803811              <2>  cmp byte [%1], %2
    43 0000104B 0F85A80C0000        <2>  jne L_error_incorrect_type
    48 00001051 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001056 0F859D0C0000        <1>  jne L_error_incorrect_type
  1354 0000105C FF7001                          push qword [rax + 1]
  1355 0000105F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1356 00001065 E8490B0000                      call make_real
  1357                                          LEAVE
    38 0000106A C9                  <1>  leave
  1358 0000106B C21800                          ret AND_KILL_FRAME(1)
  1359                                  
  1360                                  L_code_ptr_rational_to_real:
  1361                                          ENTER
    33 0000106E C8000000            <1>  enter 0, 0
    34 00001072 4883E4F0            <1>  and rsp, ~15
  1362 00001076 48837D1801                      cmp COUNT, 1
  1363 0000107B 0F85C80B0000                    jne L_error_arg_count_1
  1364 00001081 488B4520                        mov rax, PARAM(0)
  1365                                          assert_rational(rax)
    42 00001085 803811              <1>  cmp byte [%1], %2
    43 00001088 0F856B0C0000        <1>  jne L_error_incorrect_type
  1366 0000108E FF7001                          push qword [rax + 1]
  1367 00001091 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1368 00001097 FF7009                          push qword [rax + 1 + 8]
  1369 0000109A F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1370 000010A0 F20F5EC1                        divsd xmm0, xmm1
  1371 000010A4 E80A0B0000                      call make_real
  1372                                          LEAVE
    38 000010A9 C9                  <1>  leave
  1373 000010AA C21800                          ret AND_KILL_FRAME(1)
  1374                                  
  1375                                  L_code_ptr_char_to_integer:
  1376                                          ENTER
    33 000010AD C8000000            <1>  enter 0, 0
    34 000010B1 4883E4F0            <1>  and rsp, ~15
  1377 000010B5 48837D1801                      cmp COUNT, 1
  1378 000010BA 0F85890B0000                    jne L_error_arg_count_1
  1379 000010C0 488B4520                        mov rax, PARAM(0)
  1380                                          assert_char(rax)
    42 000010C4 803802              <1>  cmp byte [%1], %2
    43 000010C7 0F852C0C0000        <1>  jne L_error_incorrect_type
  1381 000010CD 8A4001                          mov al, byte [rax + 1]
  1382 000010D0 4825FF000000                    and rax, 255
  1383 000010D6 4889C7                          mov rdi, rax
  1384 000010D9 E8F10A0000                      call make_integer
  1385                                          LEAVE
    38 000010DE C9                  <1>  leave
  1386 000010DF C21800                          ret AND_KILL_FRAME(1)
  1387                                  
  1388                                  L_code_ptr_integer_to_char:
  1389                                          ENTER
    33 000010E2 C8000000            <1>  enter 0, 0
    34 000010E6 4883E4F0            <1>  and rsp, ~15
  1390 000010EA 48837D1801                      cmp COUNT, 1
  1391 000010EF 0F85540B0000                    jne L_error_arg_count_1
  1392 000010F5 488B4520                        mov rax, PARAM(0)
  1393                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010F9 803811              <2>  cmp byte [%1], %2
    43 000010FC 0F85F70B0000        <2>  jne L_error_incorrect_type
    48 00001102 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001107 0F85EC0B0000        <1>  jne L_error_incorrect_type
  1394 0000110D 488B5801                        mov rbx, qword [rax + 1]
  1395 00001111 4883FB00                        cmp rbx, 0
  1396 00001115 0F8EDA0A0000                    jle L_error_integer_range
  1397 0000111B 4881FB00010000                  cmp rbx, 256
  1398 00001122 0F8DCD0A0000                    jge L_error_integer_range
  1399 00001128 BF02000000                      mov rdi, (1 + 1)
  1400 0000112D E82BF5FFFF                      call malloc
  1401 00001132 C60002                          mov byte [rax], T_char
  1402 00001135 885801                          mov byte [rax + 1], bl
  1403                                          LEAVE
    38 00001138 C9                  <1>  leave
  1404 00001139 C21800                          ret AND_KILL_FRAME(1)
  1405                                  
  1406                                  L_code_ptr_trng:
  1407                                          ENTER
    33 0000113C C8000000            <1>  enter 0, 0
    34 00001140 4883E4F0            <1>  and rsp, ~15
  1408 00001144 48837D1800                      cmp COUNT, 0
  1409 00001149 0F85CE0A0000                    jne L_error_arg_count_0
  1410 0000114F 480FC7F7                        rdrand rdi
  1411 00001153 48D1EF                          shr rdi, 1
  1412 00001156 E8740A0000                      call make_integer
  1413                                          LEAVE
    38 0000115B C9                  <1>  leave
  1414 0000115C C21000                          ret AND_KILL_FRAME(0)
  1415                                  
  1416                                  L_code_ptr_is_zero:
  1417                                          ENTER
    33 0000115F C8000000            <1>  enter 0, 0
    34 00001163 4883E4F0            <1>  and rsp, ~15
  1418 00001167 48837D1801                      cmp COUNT, 1
  1419 0000116C 0F85D70A0000                    jne L_error_arg_count_1
  1420 00001172 488B4520                        mov rax, PARAM(0)
  1421 00001176 803811                          cmp byte [rax], T_rational
  1422 00001179 740A                            je .L_rational
  1423 0000117B 803812                          cmp byte [rax], T_real
  1424 0000117E 740E                            je .L_real
  1425 00001180 E9740B0000                      jmp L_error_incorrect_type
  1426                                  .L_rational:
  1427 00001185 4883780100                      cmp qword [rax + 1], 0
  1428 0000118A 7420                            je .L_zero
  1429 0000118C EB12                            jmp .L_not_zero
  1430                                  .L_real:
  1431 0000118E 660FEFC0                        pxor xmm0, xmm0
  1432 00001192 FF7001                          push qword [rax + 1]
  1433 00001195 F20F100C24                      movsd xmm1, qword [rsp]
  1434 0000119A 660F2EC1                        ucomisd xmm0, xmm1
  1435 0000119E 740C                            je .L_zero
  1436                                  .L_not_zero:
  1437 000011A0 48B8-                           mov rax, sob_boolean_false
  1437 000011A2 [0200000000000000] 
  1438 000011AA EB0A                            jmp .L_end
  1439                                  .L_zero:
  1440 000011AC 48B8-                           mov rax, sob_boolean_true
  1440 000011AE [0300000000000000] 
  1441                                  .L_end:
  1442                                          LEAVE
    38 000011B6 C9                  <1>  leave
  1443 000011B7 C21800                          ret AND_KILL_FRAME(1)
  1444                                  
  1445                                  L_code_ptr_is_integer:
  1446                                          ENTER
    33 000011BA C8000000            <1>  enter 0, 0
    34 000011BE 4883E4F0            <1>  and rsp, ~15
  1447 000011C2 48837D1801                      cmp COUNT, 1
  1448 000011C7 0F857C0A0000                    jne L_error_arg_count_1
  1449 000011CD 488B4520                        mov rax, PARAM(0)
  1450 000011D1 803811                          cmp byte [rax], T_rational
  1451 000011D4 7513                            jne .L_false
  1452 000011D6 4883780901                      cmp qword [rax + 1 + 8], 1
  1453 000011DB 750C                            jne .L_false
  1454 000011DD 48B8-                           mov rax, sob_boolean_true
  1454 000011DF [0300000000000000] 
  1455 000011E7 EB0A                            jmp .L_exit
  1456                                  .L_false:
  1457 000011E9 48B8-                           mov rax, sob_boolean_false
  1457 000011EB [0200000000000000] 
  1458                                  .L_exit:
  1459                                          LEAVE
    38 000011F3 C9                  <1>  leave
  1460 000011F4 C21800                          ret AND_KILL_FRAME(1)
  1461                                  
  1462                                  L_code_ptr_raw_bin_add_rr:
  1463                                          ENTER
    33 000011F7 C8000000            <1>  enter 0, 0
    34 000011FB 4883E4F0            <1>  and rsp, ~15
  1464 000011FF 48837D1802                      cmp COUNT, 2
  1465 00001204 0F856B0A0000                    jne L_error_arg_count_2
  1466 0000120A 488B5D20                        mov rbx, PARAM(0)
  1467                                          assert_real(rbx)
    42 0000120E 803B12              <1>  cmp byte [%1], %2
    43 00001211 0F85E20A0000        <1>  jne L_error_incorrect_type
  1468 00001217 488B4D28                        mov rcx, PARAM(1)
  1469                                          assert_real(rcx)
    42 0000121B 803912              <1>  cmp byte [%1], %2
    43 0000121E 0F85D50A0000        <1>  jne L_error_incorrect_type
  1470 00001224 F20F104301                      movsd xmm0, qword [rbx + 1]
  1471 00001229 F20F104901                      movsd xmm1, qword [rcx + 1]
  1472 0000122E F20F58C1                        addsd xmm0, xmm1
  1473 00001232 E87C090000                      call make_real
  1474                                          LEAVE
    38 00001237 C9                  <1>  leave
  1475 00001238 C22000                          ret AND_KILL_FRAME(2)
  1476                                  
  1477                                  L_code_ptr_raw_bin_sub_rr:
  1478                                          ENTER
    33 0000123B C8000000            <1>  enter 0, 0
    34 0000123F 4883E4F0            <1>  and rsp, ~15
  1479 00001243 48837D1802                      cmp COUNT, 2
  1480 00001248 0F85270A0000                    jne L_error_arg_count_2
  1481 0000124E 488B5D20                        mov rbx, PARAM(0)
  1482                                          assert_real(rbx)
    42 00001252 803B12              <1>  cmp byte [%1], %2
    43 00001255 0F859E0A0000        <1>  jne L_error_incorrect_type
  1483 0000125B 488B4D28                        mov rcx, PARAM(1)
  1484                                          assert_real(rcx)
    42 0000125F 803912              <1>  cmp byte [%1], %2
    43 00001262 0F85910A0000        <1>  jne L_error_incorrect_type
  1485 00001268 F20F104301                      movsd xmm0, qword [rbx + 1]
  1486 0000126D F20F104901                      movsd xmm1, qword [rcx + 1]
  1487 00001272 F20F5CC1                        subsd xmm0, xmm1
  1488 00001276 E838090000                      call make_real
  1489                                          LEAVE
    38 0000127B C9                  <1>  leave
  1490 0000127C C22000                          ret AND_KILL_FRAME(2)
  1491                                  
  1492                                  L_code_ptr_raw_bin_mul_rr:
  1493                                          ENTER
    33 0000127F C8000000            <1>  enter 0, 0
    34 00001283 4883E4F0            <1>  and rsp, ~15
  1494 00001287 48837D1802                      cmp COUNT, 2
  1495 0000128C 0F85E3090000                    jne L_error_arg_count_2
  1496 00001292 488B5D20                        mov rbx, PARAM(0)
  1497                                          assert_real(rbx)
    42 00001296 803B12              <1>  cmp byte [%1], %2
    43 00001299 0F855A0A0000        <1>  jne L_error_incorrect_type
  1498 0000129F 488B4D28                        mov rcx, PARAM(1)
  1499                                          assert_real(rcx)
    42 000012A3 803912              <1>  cmp byte [%1], %2
    43 000012A6 0F854D0A0000        <1>  jne L_error_incorrect_type
  1500 000012AC F20F104301                      movsd xmm0, qword [rbx + 1]
  1501 000012B1 F20F104901                      movsd xmm1, qword [rcx + 1]
  1502 000012B6 F20F59C1                        mulsd xmm0, xmm1
  1503 000012BA E8F4080000                      call make_real
  1504                                          LEAVE
    38 000012BF C9                  <1>  leave
  1505 000012C0 C22000                          ret AND_KILL_FRAME(2)
  1506                                  
  1507                                  L_code_ptr_raw_bin_div_rr:
  1508                                          ENTER
    33 000012C3 C8000000            <1>  enter 0, 0
    34 000012C7 4883E4F0            <1>  and rsp, ~15
  1509 000012CB 48837D1802                      cmp COUNT, 2
  1510 000012D0 0F859F090000                    jne L_error_arg_count_2
  1511 000012D6 488B5D20                        mov rbx, PARAM(0)
  1512                                          assert_real(rbx)
    42 000012DA 803B12              <1>  cmp byte [%1], %2
    43 000012DD 0F85160A0000        <1>  jne L_error_incorrect_type
  1513 000012E3 488B4D28                        mov rcx, PARAM(1)
  1514                                          assert_real(rcx)
    42 000012E7 803912              <1>  cmp byte [%1], %2
    43 000012EA 0F85090A0000        <1>  jne L_error_incorrect_type
  1515 000012F0 F20F104301                      movsd xmm0, qword [rbx + 1]
  1516 000012F5 F20F104901                      movsd xmm1, qword [rcx + 1]
  1517 000012FA 660FEFD2                        pxor xmm2, xmm2
  1518 000012FE 660F2ECA                        ucomisd xmm1, xmm2
  1519 00001302 0F84190A0000                    je L_error_division_by_zero
  1520 00001308 F20F5EC1                        divsd xmm0, xmm1
  1521 0000130C E8A2080000                      call make_real
  1522                                          LEAVE
    38 00001311 C9                  <1>  leave
  1523 00001312 C22000                          ret AND_KILL_FRAME(2)
  1524                                  
  1525                                  L_code_ptr_raw_bin_add_qq:
  1526                                          ENTER
    33 00001315 C8000000            <1>  enter 0, 0
    34 00001319 4883E4F0            <1>  and rsp, ~15
  1527 0000131D 48837D1802                      cmp COUNT, 2
  1528 00001322 0F854D090000                    jne L_error_arg_count_2
  1529 00001328 4C8B4520                        mov r8, PARAM(0)
  1530                                          assert_rational(r8)
    42 0000132C 41803811            <1>  cmp byte [%1], %2
    43 00001330 0F85C3090000        <1>  jne L_error_incorrect_type
  1531 00001336 4C8B4D28                        mov r9, PARAM(1)
  1532                                          assert_rational(r9)
    42 0000133A 41803911            <1>  cmp byte [%1], %2
    43 0000133E 0F85B5090000        <1>  jne L_error_incorrect_type
  1533 00001344 498B4001                        mov rax, qword [r8 + 1] ; num1
  1534 00001348 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1535 0000134C 4899                            cqo
  1536 0000134E 48F7EB                          imul rbx
  1537 00001351 4889C6                          mov rsi, rax
  1538 00001354 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1539 00001358 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1540 0000135C 4899                            cqo
  1541 0000135E 48F7EB                          imul rbx
  1542 00001361 4801C6                          add rsi, rax
  1543 00001364 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1544 00001368 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1545 0000136C 4899                            cqo
  1546 0000136E 48F7EB                          imul rbx
  1547 00001371 4889C7                          mov rdi, rax
  1548 00001374 E827010000                      call normalize_rational
  1549                                          LEAVE
    38 00001379 C9                  <1>  leave
  1550 0000137A C22000                          ret AND_KILL_FRAME(2)
  1551                                  
  1552                                  L_code_ptr_raw_bin_sub_qq:
  1553                                          ENTER
    33 0000137D C8000000            <1>  enter 0, 0
    34 00001381 4883E4F0            <1>  and rsp, ~15
  1554 00001385 48837D1802                      cmp COUNT, 2
  1555 0000138A 0F85E5080000                    jne L_error_arg_count_2
  1556 00001390 4C8B4520                        mov r8, PARAM(0)
  1557                                          assert_rational(r8)
    42 00001394 41803811            <1>  cmp byte [%1], %2
    43 00001398 0F855B090000        <1>  jne L_error_incorrect_type
  1558 0000139E 4C8B4D28                        mov r9, PARAM(1)
  1559                                          assert_rational(r9)
    42 000013A2 41803911            <1>  cmp byte [%1], %2
    43 000013A6 0F854D090000        <1>  jne L_error_incorrect_type
  1560 000013AC 498B4001                        mov rax, qword [r8 + 1] ; num1
  1561 000013B0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1562 000013B4 4899                            cqo
  1563 000013B6 48F7EB                          imul rbx
  1564 000013B9 4889C6                          mov rsi, rax
  1565 000013BC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1566 000013C0 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1567 000013C4 4899                            cqo
  1568 000013C6 48F7EB                          imul rbx
  1569 000013C9 4829C6                          sub rsi, rax
  1570 000013CC 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1571 000013D0 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1572 000013D4 4899                            cqo
  1573 000013D6 48F7EB                          imul rbx
  1574 000013D9 4889C7                          mov rdi, rax
  1575 000013DC E8BF000000                      call normalize_rational
  1576                                          LEAVE
    38 000013E1 C9                  <1>  leave
  1577 000013E2 C22000                          ret AND_KILL_FRAME(2)
  1578                                  
  1579                                  L_code_ptr_raw_bin_mul_qq:
  1580                                          ENTER
    33 000013E5 C8000000            <1>  enter 0, 0
    34 000013E9 4883E4F0            <1>  and rsp, ~15
  1581 000013ED 48837D1802                      cmp COUNT, 2
  1582 000013F2 0F857D080000                    jne L_error_arg_count_2
  1583 000013F8 4C8B4520                        mov r8, PARAM(0)
  1584                                          assert_rational(r8)
    42 000013FC 41803811            <1>  cmp byte [%1], %2
    43 00001400 0F85F3080000        <1>  jne L_error_incorrect_type
  1585 00001406 4C8B4D28                        mov r9, PARAM(1)
  1586                                          assert_rational(r9)
    42 0000140A 41803911            <1>  cmp byte [%1], %2
    43 0000140E 0F85E5080000        <1>  jne L_error_incorrect_type
  1587 00001414 498B4001                        mov rax, qword [r8 + 1] ; num1
  1588 00001418 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1589 0000141C 4899                            cqo
  1590 0000141E 48F7EB                          imul rbx
  1591 00001421 4889C6                          mov rsi, rax
  1592 00001424 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1593 00001428 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1594 0000142C 4899                            cqo
  1595 0000142E 48F7EB                          imul rbx
  1596 00001431 4889C7                          mov rdi, rax
  1597 00001434 E867000000                      call normalize_rational
  1598                                          LEAVE
    38 00001439 C9                  <1>  leave
  1599 0000143A C22000                          ret AND_KILL_FRAME(2)
  1600                                          
  1601                                  L_code_ptr_raw_bin_div_qq:
  1602                                          ENTER
    33 0000143D C8000000            <1>  enter 0, 0
    34 00001441 4883E4F0            <1>  and rsp, ~15
  1603 00001445 48837D1802                      cmp COUNT, 2
  1604 0000144A 0F8525080000                    jne L_error_arg_count_2
  1605 00001450 4C8B4520                        mov r8, PARAM(0)
  1606                                          assert_rational(r8)
    42 00001454 41803811            <1>  cmp byte [%1], %2
    43 00001458 0F859B080000        <1>  jne L_error_incorrect_type
  1607 0000145E 4C8B4D28                        mov r9, PARAM(1)
  1608                                          assert_rational(r9)
    42 00001462 41803911            <1>  cmp byte [%1], %2
    43 00001466 0F858D080000        <1>  jne L_error_incorrect_type
  1609 0000146C 4983790100                      cmp qword [r9 + 1], 0
  1610 00001471 0F84AA080000                    je L_error_division_by_zero
  1611 00001477 498B4001                        mov rax, qword [r8 + 1] ; num1
  1612 0000147B 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1613 0000147F 4899                            cqo
  1614 00001481 48F7EB                          imul rbx
  1615 00001484 4889C6                          mov rsi, rax
  1616 00001487 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1617 0000148B 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1618 0000148F 4899                            cqo
  1619 00001491 48F7EB                          imul rbx
  1620 00001494 4889C7                          mov rdi, rax
  1621 00001497 E804000000                      call normalize_rational
  1622                                          LEAVE
    38 0000149C C9                  <1>  leave
  1623 0000149D C22000                          ret AND_KILL_FRAME(2)
  1624                                          
  1625                                  normalize_rational:
  1626 000014A0 56                              push rsi
  1627 000014A1 57                              push rdi
  1628 000014A2 E839000000                      call gcd
  1629 000014A7 4889C3                          mov rbx, rax
  1630 000014AA 58                              pop rax
  1631 000014AB 4899                            cqo
  1632 000014AD 48F7FB                          idiv rbx
  1633 000014B0 4989C0                          mov r8, rax
  1634 000014B3 58                              pop rax
  1635 000014B4 4899                            cqo
  1636 000014B6 48F7FB                          idiv rbx
  1637 000014B9 4989C1                          mov r9, rax
  1638 000014BC BF11000000                      mov rdi, (1 + 8 + 8)
  1639 000014C1 E897F1FFFF                      call malloc
  1640 000014C6 C60011                          mov byte [rax], T_rational
  1641 000014C9 4C894801                        mov qword [rax + 1], r9
  1642 000014CD 4C894009                        mov qword [rax + 1 + 8], r8
  1643 000014D1 C3                              ret
  1644                                  
  1645                                  iabs:
  1646 000014D2 4889F8                          mov rax, rdi
  1647 000014D5 4883F800                        cmp rax, 0
  1648 000014D9 7C01                            jl .Lneg
  1649 000014DB C3                              ret
  1650                                  .Lneg:
  1651 000014DC 48F7D8                          neg rax
  1652 000014DF C3                              ret
  1653                                  
  1654                                  gcd:
  1655 000014E0 E8EDFFFFFF                      call iabs
  1656 000014E5 4889C3                          mov rbx, rax
  1657 000014E8 4889F7                          mov rdi, rsi
  1658 000014EB E8E2FFFFFF                      call iabs
  1659 000014F0 4883F800                        cmp rax, 0
  1660 000014F4 7502                            jne .L0
  1661 000014F6 4893                            xchg rax, rbx
  1662                                  .L0:
  1663 000014F8 4883FB00                        cmp rbx, 0
  1664 000014FC 740C                            je .L1
  1665 000014FE 4899                            cqo
  1666 00001500 48F7F3                          div rbx
  1667 00001503 4889D0                          mov rax, rdx
  1668 00001506 4893                            xchg rax, rbx
  1669 00001508 EBEE                            jmp .L0
  1670                                  .L1:
  1671 0000150A C3                              ret
  1672                                  
  1673                                  L_code_ptr_error:
  1674                                          ENTER
    33 0000150B C8000000            <1>  enter 0, 0
    34 0000150F 4883E4F0            <1>  and rsp, ~15
  1675 00001513 48837D1802                      cmp COUNT, 2
  1676 00001518 0F8557070000                    jne L_error_arg_count_2
  1677 0000151E 488B7520                        mov rsi, PARAM(0)
  1678                                          assert_symbol(rsi)
    42 00001522 803E04              <1>  cmp byte [%1], %2
    43 00001525 0F85CE070000        <1>  jne L_error_incorrect_type
  1679 0000152B 488B7528                        mov rsi, PARAM(1)
  1680                                          assert_string(rsi)
    42 0000152F 803E03              <1>  cmp byte [%1], %2
    43 00001532 0F85C1070000        <1>  jne L_error_incorrect_type
  1681 00001538 48BF-                           mov rdi, fmt_scheme_error_part_1
  1681 0000153A [6F03000000000000] 
  1682 00001542 B800000000                      mov rax, 0
  1683 00001547 E8(00000000)                    call printf
  1684 0000154C 488B7D20                        mov rdi, PARAM(0)
  1685 00001550 E823F1FFFF                      call print_sexpr
  1686 00001555 48BF-                           mov rdi, fmt_scheme_error_part_2
  1686 00001557 [8303000000000000] 
  1687 0000155F B800000000                      mov rax, 0
  1688 00001564 E8(00000000)                    call printf
  1689 00001569 488B4528                        mov rax, PARAM(1)       ; sob_string
  1690 0000156D BE01000000                      mov rsi, 1              ; size = 1 byte
  1691 00001572 488B5001                        mov rdx, qword [rax + 1] ; length
  1692 00001576 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1693 0000157A 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1694 00001582 E8(00000000)                    call fwrite
  1695 00001587 48BF-                           mov rdi, fmt_scheme_error_part_3
  1695 00001589 [C503000000000000] 
  1696 00001591 B800000000                      mov rax, 0
  1697 00001596 E8(00000000)                    call printf
  1698 0000159B 48C7C0F7FFFFFF                  mov rax, -9
  1699 000015A2 E8(00000000)                    call exit
  1700                                  
  1701                                  L_code_ptr_raw_less_than_rr:
  1702                                          ENTER
    33 000015A7 C8000000            <1>  enter 0, 0
    34 000015AB 4883E4F0            <1>  and rsp, ~15
  1703 000015AF 48837D1802                      cmp COUNT, 2
  1704 000015B4 0F85BB060000                    jne L_error_arg_count_2
  1705 000015BA 488B7520                        mov rsi, PARAM(0)
  1706                                          assert_real(rsi)
    42 000015BE 803E12              <1>  cmp byte [%1], %2
    43 000015C1 0F8532070000        <1>  jne L_error_incorrect_type
  1707 000015C7 488B7D28                        mov rdi, PARAM(1)
  1708                                          assert_real(rdi)
    42 000015CB 803F12              <1>  cmp byte [%1], %2
    43 000015CE 0F8525070000        <1>  jne L_error_incorrect_type
  1709 000015D4 F20F104601                      movsd xmm0, qword [rsi + 1]
  1710 000015D9 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1711 000015DE 660F2FC1                        comisd xmm0, xmm1
  1712 000015E2 730C                            jae .L_false
  1713 000015E4 48B8-                           mov rax, sob_boolean_true
  1713 000015E6 [0300000000000000] 
  1714 000015EE EB0A                            jmp .L_exit
  1715                                  .L_false:
  1716 000015F0 48B8-                           mov rax, sob_boolean_false
  1716 000015F2 [0200000000000000] 
  1717                                  .L_exit:
  1718                                          LEAVE
    38 000015FA C9                  <1>  leave
  1719 000015FB C22000                          ret AND_KILL_FRAME(2)
  1720                                          
  1721                                  L_code_ptr_raw_less_than_qq:
  1722                                          ENTER
    33 000015FE C8000000            <1>  enter 0, 0
    34 00001602 4883E4F0            <1>  and rsp, ~15
  1723 00001606 48837D1802                      cmp COUNT, 2
  1724 0000160B 0F8564060000                    jne L_error_arg_count_2
  1725 00001611 488B7520                        mov rsi, PARAM(0)
  1726                                          assert_rational(rsi)
    42 00001615 803E11              <1>  cmp byte [%1], %2
    43 00001618 0F85DB060000        <1>  jne L_error_incorrect_type
  1727 0000161E 488B7D28                        mov rdi, PARAM(1)
  1728                                          assert_rational(rdi)
    42 00001622 803F11              <1>  cmp byte [%1], %2
    43 00001625 0F85CE060000        <1>  jne L_error_incorrect_type
  1729 0000162B 488B4601                        mov rax, qword [rsi + 1] ; num1
  1730 0000162F 4899                            cqo
  1731 00001631 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1732 00001635 4889C1                          mov rcx, rax
  1733 00001638 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  1734 0000163C 4899                            cqo
  1735 0000163E 48F76F01                        imul qword [rdi + 1]          ; num2
  1736 00001642 4829C1                          sub rcx, rax
  1737 00001645 7D0C                            jge .L_false
  1738 00001647 48B8-                           mov rax, sob_boolean_true
  1738 00001649 [0300000000000000] 
  1739 00001651 EB0A                            jmp .L_exit
  1740                                  .L_false:
  1741 00001653 48B8-                           mov rax, sob_boolean_false
  1741 00001655 [0200000000000000] 
  1742                                  .L_exit:
  1743                                          LEAVE
    38 0000165D C9                  <1>  leave
  1744 0000165E C22000                          ret AND_KILL_FRAME(2)
  1745                                  
  1746                                  L_code_ptr_raw_equal_rr:
  1747                                          ENTER
    33 00001661 C8000000            <1>  enter 0, 0
    34 00001665 4883E4F0            <1>  and rsp, ~15
  1748 00001669 48837D1802                      cmp COUNT, 2
  1749 0000166E 0F8501060000                    jne L_error_arg_count_2
  1750 00001674 488B7520                        mov rsi, PARAM(0)
  1751                                          assert_real(rsi)
    42 00001678 803E12              <1>  cmp byte [%1], %2
    43 0000167B 0F8578060000        <1>  jne L_error_incorrect_type
  1752 00001681 488B7D28                        mov rdi, PARAM(1)
  1753                                          assert_real(rdi)
    42 00001685 803F12              <1>  cmp byte [%1], %2
    43 00001688 0F856B060000        <1>  jne L_error_incorrect_type
  1754 0000168E F20F104601                      movsd xmm0, qword [rsi + 1]
  1755 00001693 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1756 00001698 660F2FC1                        comisd xmm0, xmm1
  1757 0000169C 750C                            jne .L_false
  1758 0000169E 48B8-                           mov rax, sob_boolean_true
  1758 000016A0 [0300000000000000] 
  1759 000016A8 EB0A                            jmp .L_exit
  1760                                  .L_false:
  1761 000016AA 48B8-                           mov rax, sob_boolean_false
  1761 000016AC [0200000000000000] 
  1762                                  .L_exit:
  1763                                          LEAVE
    38 000016B4 C9                  <1>  leave
  1764 000016B5 C22000                          ret AND_KILL_FRAME(2)
  1765                                          
  1766                                  L_code_ptr_raw_equal_qq:
  1767                                          ENTER
    33 000016B8 C8000000            <1>  enter 0, 0
    34 000016BC 4883E4F0            <1>  and rsp, ~15
  1768 000016C0 48837D1802                      cmp COUNT, 2
  1769 000016C5 0F85AA050000                    jne L_error_arg_count_2
  1770 000016CB 488B7520                        mov rsi, PARAM(0)
  1771                                          assert_rational(rsi)
    42 000016CF 803E11              <1>  cmp byte [%1], %2
    43 000016D2 0F8521060000        <1>  jne L_error_incorrect_type
  1772 000016D8 488B7D28                        mov rdi, PARAM(1)
  1773                                          assert_rational(rdi)
    42 000016DC 803F11              <1>  cmp byte [%1], %2
    43 000016DF 0F8514060000        <1>  jne L_error_incorrect_type
  1774 000016E5 488B4601                        mov rax, qword [rsi + 1] ; num1
  1775 000016E9 4899                            cqo
  1776 000016EB 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1777 000016EF 4889C1                          mov rcx, rax
  1778 000016F2 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1779 000016F6 4899                            cqo
  1780 000016F8 48F76F01                        imul qword [rdi + 1]          ; num2
  1781 000016FC 4829C1                          sub rcx, rax
  1782 000016FF 750C                            jne .L_false
  1783 00001701 48B8-                           mov rax, sob_boolean_true
  1783 00001703 [0300000000000000] 
  1784 0000170B EB0A                            jmp .L_exit
  1785                                  .L_false:
  1786 0000170D 48B8-                           mov rax, sob_boolean_false
  1786 0000170F [0200000000000000] 
  1787                                  .L_exit:
  1788                                          LEAVE
    38 00001717 C9                  <1>  leave
  1789 00001718 C22000                          ret AND_KILL_FRAME(2)
  1790                                  
  1791                                  L_code_ptr_quotient:
  1792                                          ENTER
    33 0000171B C8000000            <1>  enter 0, 0
    34 0000171F 4883E4F0            <1>  and rsp, ~15
  1793 00001723 48837D1802                      cmp COUNT, 2
  1794 00001728 0F8547050000                    jne L_error_arg_count_2
  1795 0000172E 488B7520                        mov rsi, PARAM(0)
  1796                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001732 803E11              <2>  cmp byte [%1], %2
    43 00001735 0F85BE050000        <2>  jne L_error_incorrect_type
    48 0000173B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001740 0F85B3050000        <1>  jne L_error_incorrect_type
  1797 00001746 488B7D28                        mov rdi, PARAM(1)
  1798                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000174A 803F11              <2>  cmp byte [%1], %2
    43 0000174D 0F85A6050000        <2>  jne L_error_incorrect_type
    48 00001753 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001758 0F859B050000        <1>  jne L_error_incorrect_type
  1799 0000175E 488B4601                        mov rax, qword [rsi + 1]
  1800 00001762 488B5F01                        mov rbx, qword [rdi + 1]
  1801 00001766 4883FB00                        cmp rbx, 0
  1802 0000176A 0F84B1050000                    je L_error_division_by_zero
  1803 00001770 4899                            cqo
  1804 00001772 48F7FB                          idiv rbx
  1805 00001775 4889C7                          mov rdi, rax
  1806 00001778 E852040000                      call make_integer
  1807                                          LEAVE
    38 0000177D C9                  <1>  leave
  1808 0000177E C22000                          ret AND_KILL_FRAME(2)
  1809                                          
  1810                                  L_code_ptr_remainder:
  1811                                          ENTER
    33 00001781 C8000000            <1>  enter 0, 0
    34 00001785 4883E4F0            <1>  and rsp, ~15
  1812 00001789 48837D1802                      cmp COUNT, 2
  1813 0000178E 0F85E1040000                    jne L_error_arg_count_2
  1814 00001794 488B7520                        mov rsi, PARAM(0)
  1815                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001798 803E11              <2>  cmp byte [%1], %2
    43 0000179B 0F8558050000        <2>  jne L_error_incorrect_type
    48 000017A1 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017A6 0F854D050000        <1>  jne L_error_incorrect_type
  1816 000017AC 488B7D28                        mov rdi, PARAM(1)
  1817                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000017B0 803F11              <2>  cmp byte [%1], %2
    43 000017B3 0F8540050000        <2>  jne L_error_incorrect_type
    48 000017B9 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017BE 0F8535050000        <1>  jne L_error_incorrect_type
  1818 000017C4 488B4601                        mov rax, qword [rsi + 1]
  1819 000017C8 488B5F01                        mov rbx, qword [rdi + 1]
  1820 000017CC 4883FB00                        cmp rbx, 0
  1821 000017D0 0F844B050000                    je L_error_division_by_zero
  1822 000017D6 4899                            cqo
  1823 000017D8 48F7FB                          idiv rbx
  1824 000017DB 4889D7                          mov rdi, rdx
  1825 000017DE E8EC030000                      call make_integer
  1826                                          LEAVE
    38 000017E3 C9                  <1>  leave
  1827 000017E4 C22000                          ret AND_KILL_FRAME(2)
  1828                                  
  1829                                  L_code_ptr_set_car:
  1830                                          ENTER
    33 000017E7 C8000000            <1>  enter 0, 0
    34 000017EB 4883E4F0            <1>  and rsp, ~15
  1831 000017EF 48837D1802                      cmp COUNT, 2
  1832 000017F4 0F857B040000                    jne L_error_arg_count_2
  1833 000017FA 488B4520                        mov rax, PARAM(0)
  1834                                          assert_pair(rax)
    42 000017FE 803821              <1>  cmp byte [%1], %2
    43 00001801 0F85F2040000        <1>  jne L_error_incorrect_type
  1835 00001807 488B5D28                        mov rbx, PARAM(1)
  1836 0000180B 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1837 0000180F 48B8-                           mov rax, sob_void
  1837 00001811 [0000000000000000] 
  1838                                          LEAVE
    38 00001819 C9                  <1>  leave
  1839 0000181A C22000                          ret AND_KILL_FRAME(2)
  1840                                  
  1841                                  L_code_ptr_set_cdr:
  1842                                          ENTER
    33 0000181D C8000000            <1>  enter 0, 0
    34 00001821 4883E4F0            <1>  and rsp, ~15
  1843 00001825 48837D1802                      cmp COUNT, 2
  1844 0000182A 0F8545040000                    jne L_error_arg_count_2
  1845 00001830 488B4520                        mov rax, PARAM(0)
  1846                                          assert_pair(rax)
    42 00001834 803821              <1>  cmp byte [%1], %2
    43 00001837 0F85BC040000        <1>  jne L_error_incorrect_type
  1847 0000183D 488B5D28                        mov rbx, PARAM(1)
  1848 00001841 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1849 00001845 48B8-                           mov rax, sob_void
  1849 00001847 [0000000000000000] 
  1850                                          LEAVE
    38 0000184F C9                  <1>  leave
  1851 00001850 C22000                          ret AND_KILL_FRAME(2)
  1852                                  
  1853                                  L_code_ptr_string_ref:
  1854                                          ENTER
    33 00001853 C8000000            <1>  enter 0, 0
    34 00001857 4883E4F0            <1>  and rsp, ~15
  1855 0000185B 48837D1802                      cmp COUNT, 2
  1856 00001860 0F850F040000                    jne L_error_arg_count_2
  1857 00001866 488B7D20                        mov rdi, PARAM(0)
  1858                                          assert_string(rdi)
    42 0000186A 803F03              <1>  cmp byte [%1], %2
    43 0000186D 0F8586040000        <1>  jne L_error_incorrect_type
  1859 00001873 488B7528                        mov rsi, PARAM(1)
  1860                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001877 803E11              <2>  cmp byte [%1], %2
    43 0000187A 0F8579040000        <2>  jne L_error_incorrect_type
    48 00001880 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001885 0F856E040000        <1>  jne L_error_incorrect_type
  1861 0000188B 488B5701                        mov rdx, qword [rdi + 1]
  1862 0000188F 488B4E01                        mov rcx, qword [rsi + 1]
  1863 00001893 4839D1                          cmp rcx, rdx
  1864 00001896 0F8D59030000                    jge L_error_integer_range
  1865 0000189C 4883F900                        cmp rcx, 0
  1866 000018A0 0F8C4F030000                    jl L_error_integer_range
  1867 000018A6 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1868 000018AA BF02000000                      mov rdi, 2
  1869 000018AF E8A9EDFFFF                      call malloc
  1870 000018B4 C60002                          mov byte [rax], T_char
  1871 000018B7 885801                          mov byte [rax + 1], bl
  1872                                          LEAVE
    38 000018BA C9                  <1>  leave
  1873 000018BB C22000                          ret AND_KILL_FRAME(2)
  1874                                  
  1875                                  L_code_ptr_vector_ref:
  1876                                          ENTER
    33 000018BE C8000000            <1>  enter 0, 0
    34 000018C2 4883E4F0            <1>  and rsp, ~15
  1877 000018C6 48837D1802                      cmp COUNT, 2
  1878 000018CB 0F85A4030000                    jne L_error_arg_count_2
  1879 000018D1 488B7D20                        mov rdi, PARAM(0)
  1880                                          assert_vector(rdi)
    42 000018D5 803F22              <1>  cmp byte [%1], %2
    43 000018D8 0F851B040000        <1>  jne L_error_incorrect_type
  1881 000018DE 488B7528                        mov rsi, PARAM(1)
  1882                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018E2 803E11              <2>  cmp byte [%1], %2
    43 000018E5 0F850E040000        <2>  jne L_error_incorrect_type
    48 000018EB 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018F0 0F8503040000        <1>  jne L_error_incorrect_type
  1883 000018F6 488B5701                        mov rdx, qword [rdi + 1]
  1884 000018FA 488B4E01                        mov rcx, qword [rsi + 1]
  1885 000018FE 4839D1                          cmp rcx, rdx
  1886 00001901 0F8DEE020000                    jge L_error_integer_range
  1887 00001907 4883F900                        cmp rcx, 0
  1888 0000190B 0F8CE4020000                    jl L_error_integer_range
  1889 00001911 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1890                                          LEAVE
    38 00001916 C9                  <1>  leave
  1891 00001917 C22000                          ret AND_KILL_FRAME(2)
  1892                                  
  1893                                  L_code_ptr_vector_set:
  1894                                          ENTER
    33 0000191A C8000000            <1>  enter 0, 0
    34 0000191E 4883E4F0            <1>  and rsp, ~15
  1895 00001922 48837D1803                      cmp COUNT, 3
  1896 00001927 0F85A0030000                    jne L_error_arg_count_3
  1897 0000192D 488B7D20                        mov rdi, PARAM(0)
  1898                                          assert_vector(rdi)
    42 00001931 803F22              <1>  cmp byte [%1], %2
    43 00001934 0F85BF030000        <1>  jne L_error_incorrect_type
  1899 0000193A 488B7528                        mov rsi, PARAM(1)
  1900                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000193E 803E11              <2>  cmp byte [%1], %2
    43 00001941 0F85B2030000        <2>  jne L_error_incorrect_type
    48 00001947 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000194C 0F85A7030000        <1>  jne L_error_incorrect_type
  1901 00001952 488B5701                        mov rdx, qword [rdi + 1]
  1902 00001956 488B4E01                        mov rcx, qword [rsi + 1]
  1903 0000195A 4839D1                          cmp rcx, rdx
  1904 0000195D 0F8D92020000                    jge L_error_integer_range
  1905 00001963 4883F900                        cmp rcx, 0
  1906 00001967 0F8C88020000                    jl L_error_integer_range
  1907 0000196D 488B4530                        mov rax, PARAM(2)
  1908 00001971 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1909 00001976 48B8-                           mov rax, sob_void
  1909 00001978 [0000000000000000] 
  1910                                          LEAVE
    38 00001980 C9                  <1>  leave
  1911 00001981 C22800                          ret AND_KILL_FRAME(3)
  1912                                  
  1913                                  L_code_ptr_string_set:
  1914                                          ENTER
    33 00001984 C8000000            <1>  enter 0, 0
    34 00001988 4883E4F0            <1>  and rsp, ~15
  1915 0000198C 48837D1803                      cmp COUNT, 3
  1916 00001991 0F8536030000                    jne L_error_arg_count_3
  1917 00001997 488B7D20                        mov rdi, PARAM(0)
  1918                                          assert_string(rdi)
    42 0000199B 803F03              <1>  cmp byte [%1], %2
    43 0000199E 0F8555030000        <1>  jne L_error_incorrect_type
  1919 000019A4 488B7528                        mov rsi, PARAM(1)
  1920                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000019A8 803E11              <2>  cmp byte [%1], %2
    43 000019AB 0F8548030000        <2>  jne L_error_incorrect_type
    48 000019B1 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019B6 0F853D030000        <1>  jne L_error_incorrect_type
  1921 000019BC 488B5701                        mov rdx, qword [rdi + 1]
  1922 000019C0 488B4E01                        mov rcx, qword [rsi + 1]
  1923 000019C4 4839D1                          cmp rcx, rdx
  1924 000019C7 0F8D28020000                    jge L_error_integer_range
  1925 000019CD 4883F900                        cmp rcx, 0
  1926 000019D1 0F8C1E020000                    jl L_error_integer_range
  1927 000019D7 488B4530                        mov rax, PARAM(2)
  1928                                          assert_char(rax)
    42 000019DB 803802              <1>  cmp byte [%1], %2
    43 000019DE 0F8515030000        <1>  jne L_error_incorrect_type
  1929 000019E4 8A4001                          mov al, byte [rax + 1]
  1930 000019E7 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1931 000019EB 48B8-                           mov rax, sob_void
  1931 000019ED [0000000000000000] 
  1932                                          LEAVE
    38 000019F5 C9                  <1>  leave
  1933 000019F6 C22800                          ret AND_KILL_FRAME(3)
  1934                                  
  1935                                  L_code_ptr_make_vector:
  1936                                          ENTER
    33 000019F9 C8000000            <1>  enter 0, 0
    34 000019FD 4883E4F0            <1>  and rsp, ~15
  1937 00001A01 48837D1802                      cmp COUNT, 2
  1938 00001A06 0F8569020000                    jne L_error_arg_count_2
  1939 00001A0C 488B4D20                        mov rcx, PARAM(0)
  1940                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A10 803911              <2>  cmp byte [%1], %2
    43 00001A13 0F85E0020000        <2>  jne L_error_incorrect_type
    48 00001A19 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A1E 0F85D5020000        <1>  jne L_error_incorrect_type
  1941 00001A24 488B4901                        mov rcx, qword [rcx + 1]
  1942 00001A28 4883F900                        cmp rcx, 0
  1943 00001A2C 0F8CC3010000                    jl L_error_integer_range
  1944 00001A32 488B5528                        mov rdx, PARAM(1)
  1945 00001A36 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1946 00001A3E E81AECFFFF                      call malloc
  1947 00001A43 C60022                          mov byte [rax], T_vector
  1948 00001A46 48894801                        mov qword [rax + 1], rcx
  1949 00001A4A 41B800000000                    mov r8, 0
  1950                                  .L0:
  1951 00001A50 4939C8                          cmp r8, rcx
  1952 00001A53 740A                            je .L1
  1953 00001A55 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1954 00001A5A 49FFC0                          inc r8
  1955 00001A5D EBF1                            jmp .L0
  1956                                  .L1:
  1957                                          LEAVE
    38 00001A5F C9                  <1>  leave
  1958 00001A60 C22000                          ret AND_KILL_FRAME(2)
  1959                                          
  1960                                  L_code_ptr_make_string:
  1961                                          ENTER
    33 00001A63 C8000000            <1>  enter 0, 0
    34 00001A67 4883E4F0            <1>  and rsp, ~15
  1962 00001A6B 48837D1802                      cmp COUNT, 2
  1963 00001A70 0F85FF010000                    jne L_error_arg_count_2
  1964 00001A76 488B4D20                        mov rcx, PARAM(0)
  1965                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A7A 803911              <2>  cmp byte [%1], %2
    43 00001A7D 0F8576020000        <2>  jne L_error_incorrect_type
    48 00001A83 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A88 0F856B020000        <1>  jne L_error_incorrect_type
  1966 00001A8E 488B4901                        mov rcx, qword [rcx + 1]
  1967 00001A92 4883F900                        cmp rcx, 0
  1968 00001A96 0F8C59010000                    jl L_error_integer_range
  1969 00001A9C 488B5528                        mov rdx, PARAM(1)
  1970                                          assert_char(rdx)
    42 00001AA0 803A02              <1>  cmp byte [%1], %2
    43 00001AA3 0F8550020000        <1>  jne L_error_incorrect_type
  1971 00001AA9 8A5201                          mov dl, byte [rdx + 1]
  1972 00001AAC 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  1973 00001AB0 E8A8EBFFFF                      call malloc
  1974 00001AB5 C60003                          mov byte [rax], T_string
  1975 00001AB8 48894801                        mov qword [rax + 1], rcx
  1976 00001ABC 41B800000000                    mov r8, 0
  1977                                  .L0:
  1978 00001AC2 4939C8                          cmp r8, rcx
  1979 00001AC5 740A                            je .L1
  1980 00001AC7 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  1981 00001ACC 49FFC0                          inc r8
  1982 00001ACF EBF1                            jmp .L0
  1983                                  .L1:
  1984                                          LEAVE
    38 00001AD1 C9                  <1>  leave
  1985 00001AD2 C22000                          ret AND_KILL_FRAME(2)
  1986                                  
  1987                                  L_code_ptr_numerator:
  1988                                          ENTER
    33 00001AD5 C8000000            <1>  enter 0, 0
    34 00001AD9 4883E4F0            <1>  and rsp, ~15
  1989 00001ADD 48837D1801                      cmp COUNT, 1
  1990 00001AE2 0F8561010000                    jne L_error_arg_count_1
  1991 00001AE8 488B4520                        mov rax, PARAM(0)
  1992                                          assert_rational(rax)
    42 00001AEC 803811              <1>  cmp byte [%1], %2
    43 00001AEF 0F8504020000        <1>  jne L_error_incorrect_type
  1993 00001AF5 488B7801                        mov rdi, qword [rax + 1]
  1994 00001AF9 E8D1000000                      call make_integer
  1995                                          LEAVE
    38 00001AFE C9                  <1>  leave
  1996 00001AFF C21800                          ret AND_KILL_FRAME(1)
  1997                                          
  1998                                  L_code_ptr_denominator:
  1999                                          ENTER
    33 00001B02 C8000000            <1>  enter 0, 0
    34 00001B06 4883E4F0            <1>  and rsp, ~15
  2000 00001B0A 48837D1801                      cmp COUNT, 1
  2001 00001B0F 0F8534010000                    jne L_error_arg_count_1
  2002 00001B15 488B4520                        mov rax, PARAM(0)
  2003                                          assert_rational(rax)
    42 00001B19 803811              <1>  cmp byte [%1], %2
    43 00001B1C 0F85D7010000        <1>  jne L_error_incorrect_type
  2004 00001B22 488B7809                        mov rdi, qword [rax + 1 + 8]
  2005 00001B26 E8A4000000                      call make_integer
  2006                                          LEAVE
    38 00001B2B C9                  <1>  leave
  2007 00001B2C C21800                          ret AND_KILL_FRAME(1)
  2008                                  
  2009                                  L_code_ptr_eq:
  2010                                  	ENTER
    33 00001B2F C8000000            <1>  enter 0, 0
    34 00001B33 4883E4F0            <1>  and rsp, ~15
  2011 00001B37 48837D1802              	cmp COUNT, 2
  2012 00001B3C 0F8533010000            	jne L_error_arg_count_2
  2013 00001B42 488B7D20                	mov rdi, PARAM(0)
  2014 00001B46 488B7528                	mov rsi, PARAM(1)
  2015 00001B4A 4839F7                  	cmp rdi, rsi
  2016 00001B4D 744A                    	je .L_eq_true
  2017 00001B4F 8A17                    	mov dl, byte [rdi]
  2018 00001B51 3A16                    	cmp dl, byte [rsi]
  2019 00001B53 7550                    	jne .L_eq_false
  2020 00001B55 80FA02                  	cmp dl, T_char
  2021 00001B58 7437                    	je .L_char
  2022 00001B5A 80FA04                  	cmp dl, T_symbol
  2023 00001B5D 742A                    	je .L_symbol
  2024 00001B5F 80FA12                  	cmp dl, T_real
  2025 00001B62 741D                    	je .L_real
  2026 00001B64 80FA11                  	cmp dl, T_rational
  2027 00001B67 7402                    	je .L_rational
  2028 00001B69 EB3A                    	jmp .L_eq_false
  2029                                  .L_rational:
  2030 00001B6B 488B4601                	mov rax, qword [rsi + 1]
  2031 00001B6F 483B4701                	cmp rax, qword [rdi + 1]
  2032 00001B73 7530                    	jne .L_eq_false
  2033 00001B75 488B4609                	mov rax, qword [rsi + 1 + 8]
  2034 00001B79 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2035 00001B7D 7526                    	jne .L_eq_false
  2036 00001B7F EB18                    	jmp .L_eq_true
  2037                                  .L_real:
  2038 00001B81 488B4601                	mov rax, qword [rsi + 1]
  2039 00001B85 483B4701                	cmp rax, qword [rdi + 1]
  2040                                  .L_symbol:
  2041                                  	; never reached, because symbols are static!
  2042                                  	; but I'm keeping it in case, I'll ever change
  2043                                  	; the implementation
  2044 00001B89 488B4601                	mov rax, qword [rsi + 1]
  2045 00001B8D 483B4701                	cmp rax, qword [rdi + 1]
  2046                                  .L_char:
  2047 00001B91 8A5E01                  	mov bl, byte [rsi + 1]
  2048 00001B94 3A5F01                  	cmp bl, byte [rdi + 1]
  2049 00001B97 750C                    	jne .L_eq_false
  2050                                  .L_eq_true:
  2051 00001B99 48B8-                   	mov rax, sob_boolean_true
  2051 00001B9B [0300000000000000] 
  2052 00001BA3 EB0A                    	jmp .L_eq_exit
  2053                                  .L_eq_false:
  2054 00001BA5 48B8-                   	mov rax, sob_boolean_false
  2054 00001BA7 [0200000000000000] 
  2055                                  .L_eq_exit:
  2056                                  	LEAVE
    38 00001BAF C9                  <1>  leave
  2057 00001BB0 C22000                  	ret AND_KILL_FRAME(2)
  2058                                  
  2059                                  make_real:
  2060                                          ENTER
    33 00001BB3 C8000000            <1>  enter 0, 0
    34 00001BB7 4883E4F0            <1>  and rsp, ~15
  2061 00001BBB BF09000000                      mov rdi, (1 + 8)
  2062 00001BC0 E898EAFFFF                      call malloc
  2063 00001BC5 C60012                          mov byte [rax], T_real
  2064 00001BC8 F20F114001                      movsd qword [rax + 1], xmm0
  2065                                          LEAVE
    38 00001BCD C9                  <1>  leave
  2066 00001BCE C3                              ret
  2067                                          
  2068                                  make_integer:
  2069                                          ENTER
    33 00001BCF C8000000            <1>  enter 0, 0
    34 00001BD3 4883E4F0            <1>  and rsp, ~15
  2070 00001BD7 4889FE                          mov rsi, rdi
  2071 00001BDA BF11000000                      mov rdi, (1 + 8 + 8)
  2072 00001BDF E879EAFFFF                      call malloc
  2073 00001BE4 C60011                          mov byte [rax], T_rational
  2074 00001BE7 48897001                        mov qword [rax + 1], rsi
  2075 00001BEB 48C7400901000000                mov qword [rax + 1 + 8], 1
  2076                                          LEAVE
    38 00001BF3 C9                  <1>  leave
  2077 00001BF4 C3                              ret
  2078                                          
  2079                                  L_error_integer_range:
  2080 00001BF5 488B3C25[00000000]              mov rdi, qword [stderr]
  2081 00001BFD 48BE-                           mov rsi, fmt_integer_range
  2081 00001BFF [3C03000000000000] 
  2082 00001C07 B800000000                      mov rax, 0
  2083 00001C0C E8(00000000)                    call fprintf
  2084 00001C11 48C7C0FBFFFFFF                  mov rax, -5
  2085 00001C18 E8(00000000)                    call exit
  2086                                  
  2087                                  L_error_arg_count_0:
  2088 00001C1D 488B3C25[00000000]              mov rdi, qword [stderr]
  2089 00001C25 48BE-                           mov rsi, fmt_arg_count_0
  2089 00001C27 [3A02000000000000] 
  2090 00001C2F 488B5518                        mov rdx, COUNT
  2091 00001C33 B800000000                      mov rax, 0
  2092 00001C38 E8(00000000)                    call fprintf
  2093 00001C3D 48C7C0FDFFFFFF                  mov rax, -3
  2094 00001C44 E8(00000000)                    call exit
  2095                                  
  2096                                  L_error_arg_count_1:
  2097 00001C49 488B3C25[00000000]              mov rdi, qword [stderr]
  2098 00001C51 48BE-                           mov rsi, fmt_arg_count_1
  2098 00001C53 [6202000000000000] 
  2099 00001C5B 488B5518                        mov rdx, COUNT
  2100 00001C5F B800000000                      mov rax, 0
  2101 00001C64 E8(00000000)                    call fprintf
  2102 00001C69 48C7C0FDFFFFFF                  mov rax, -3
  2103 00001C70 E8(00000000)                    call exit
  2104                                  
  2105                                  L_error_arg_count_2:
  2106 00001C75 488B3C25[00000000]              mov rdi, qword [stderr]
  2107 00001C7D 48BE-                           mov rsi, fmt_arg_count_2
  2107 00001C7F [C802000000000000] 
  2108 00001C87 488B5518                        mov rdx, COUNT
  2109 00001C8B B800000000                      mov rax, 0
  2110 00001C90 E8(00000000)                    call fprintf
  2111 00001C95 48C7C0FDFFFFFF                  mov rax, -3
  2112 00001C9C E8(00000000)                    call exit
  2113                                  
  2114                                  L_error_arg_count_12:
  2115 00001CA1 488B3C25[00000000]              mov rdi, qword [stderr]
  2116 00001CA9 48BE-                           mov rsi, fmt_arg_count_12
  2116 00001CAB [8802000000000000] 
  2117 00001CB3 488B5518                        mov rdx, COUNT
  2118 00001CB7 B800000000                      mov rax, 0
  2119 00001CBC E8(00000000)                    call fprintf
  2120 00001CC1 48C7C0FDFFFFFF                  mov rax, -3
  2121 00001CC8 E8(00000000)                    call exit
  2122                                  
  2123                                  L_error_arg_count_3:
  2124 00001CCD 488B3C25[00000000]              mov rdi, qword [stderr]
  2125 00001CD5 48BE-                           mov rsi, fmt_arg_count_3
  2125 00001CD7 [EF02000000000000] 
  2126 00001CDF 488B5518                        mov rdx, COUNT
  2127 00001CE3 B800000000                      mov rax, 0
  2128 00001CE8 E8(00000000)                    call fprintf
  2129 00001CED 48C7C0FDFFFFFF                  mov rax, -3
  2130 00001CF4 E8(00000000)                    call exit
  2131                                          
  2132                                  L_error_incorrect_type:
  2133 00001CF9 488B3C25[00000000]              mov rdi, qword [stderr]
  2134 00001D01 48BE-                           mov rsi, fmt_type
  2134 00001D03 [1803000000000000] 
  2135 00001D0B B800000000                      mov rax, 0
  2136 00001D10 E8(00000000)                    call fprintf
  2137 00001D15 48C7C0FCFFFFFF                  mov rax, -4
  2138 00001D1C E8(00000000)                    call exit
  2139                                  
  2140                                  L_error_division_by_zero:
  2141 00001D21 488B3C25[00000000]              mov rdi, qword [stderr]
  2142 00001D29 48BE-                           mov rsi, fmt_division_by_zero
  2142 00001D2B [5903000000000000] 
  2143 00001D33 B800000000                      mov rax, 0
  2144 00001D38 E8(00000000)                    call fprintf
  2145 00001D3D 48C7C0F8FFFFFF                  mov rax, -8
  2146 00001D44 E8(00000000)                    call exit
  2147                                  
  2148                                  section .data
  2149                                  fmt_char:
  2150 00000237 256300                          db `%c\0`
  2151                                  fmt_arg_count_0:
  2152 0000023A 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2152 00000243 74696E67207A65726F-
  2152 0000024C 20617267756D656E74-
  2152 00000255 732E20466F756E6420-
  2152 0000025E 25640A00           
  2153                                  fmt_arg_count_1:
  2154 00000262 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2154 0000026B 74696E67206F6E6520-
  2154 00000274 617267756D656E742E-
  2154 0000027D 20466F756E64202564-
  2154 00000286 0A00               
  2155                                  fmt_arg_count_12:
  2156 00000288 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2156 00000291 74696E67206F6E6520-
  2156 0000029A 726571756972656420-
  2156 000002A3 616E64206F6E65206F-
  2156 000002AC 7074696F6E616C2061-
  2156 000002B5 7267756D656E742E20-
  2156 000002BE 466F756E642025640A-
  2156 000002C7 00                 
  2157                                  fmt_arg_count_2:
  2158 000002C8 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2158 000002D1 74696E672074776F20-
  2158 000002DA 617267756D656E7473-
  2158 000002E3 2E20466F756E642025-
  2158 000002EC 640A00             
  2159                                  fmt_arg_count_3:
  2160 000002EF 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2160 000002F8 74696E672074687265-
  2160 00000301 6520617267756D656E-
  2160 0000030A 74732E20466F756E64-
  2160 00000313 2025640A00         
  2161                                  fmt_type:
  2162 00000318 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2162 00000321 696F6E207061737365-
  2162 0000032A 6420696E636F727265-
  2162 00000333 637420747970650A00 
  2163                                  fmt_integer_range:
  2164 0000033C 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2164 00000345 7265637420696E7465-
  2164 0000034E 6765722072616E6765-
  2164 00000357 0A00               
  2165                                  fmt_division_by_zero:
  2166 00000359 212121204469766973-             db `!!! Division by zero\n\0`
  2166 00000362 696F6E206279207A65-
  2166 0000036B 726F0A00           
  2167                                  fmt_scheme_error_part_1:
  2168 0000036F 0A2121212054686520-             db `\n!!! The procedure \0`
  2168 00000378 70726F636564757265-
  2168 00000381 2000               
  2169                                  fmt_scheme_error_part_2:
  2170 00000383 2061736B656420746F-             db ` asked to terminate the program\n`
  2170 0000038C 207465726D696E6174-
  2170 00000395 65207468652070726F-
  2170 0000039E 6772616D0A         
  2171 000003A3 202020207769746820-             db `    with the following message:\n\n\0`
  2171 000003AC 74686520666F6C6C6F-
  2171 000003B5 77696E67206D657373-
  2171 000003BE 6167653A0A0A00     
  2172                                  fmt_scheme_error_part_3:
  2173 000003C5 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2173 000003CE 210A0A00           
>>>>>>> 76f50b1 (changed remove duplicates and collect constants)
