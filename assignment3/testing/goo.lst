     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 11                      	db T_rational	; 1001
    84 00000007 E90300000000000001-     	dq 1001, 1
    84 00000010 00000000000000     
    85 00000017 11                      	db T_rational	; 1002
    86 00000018 EA0300000000000001-     	dq 1002, 1
    86 00000021 00000000000000     
    87 00000028 11                      	db T_rational	; 1003
    88 00000029 EB0300000000000001-     	dq 1003, 1
    88 00000032 00000000000000     
    89 00000039 11                      	db T_rational	; 1004
    90 0000003A EC0300000000000001-     	dq 1004, 1
    90 00000043 00000000000000     
    91 0000004A 11                      	db T_rational	; 1005
    92 0000004B ED0300000000000001-     	dq 1005, 1
    92 00000054 00000000000000     
    93 0000005B 11                      	db T_rational	; 101
    94 0000005C 650000000000000001-     	dq 101, 1
    94 00000065 00000000000000     
    95 0000006C 11                      	db T_rational	; 102
    96 0000006D 660000000000000001-     	dq 102, 1
    96 00000076 00000000000000     
    97 0000007D 11                      	db T_rational	; 103
    98 0000007E 670000000000000001-     	dq 103, 1
    98 00000087 00000000000000     
    99 0000008E 11                      	db T_rational	; 104
   100 0000008F 680000000000000001-     	dq 104, 1
   100 00000098 00000000000000     
   101 0000009F 11                      	db T_rational	; 105
   102 000000A0 690000000000000001-     	dq 105, 1
   102 000000A9 00000000000000     
   103 000000B0 11                      	db T_rational	; 11
   104 000000B1 0B0000000000000001-     	dq 11, 1
   104 000000BA 00000000000000     
   105 000000C1 11                      	db T_rational	; 12
   106 000000C2 0C0000000000000001-     	dq 12, 1
   106 000000CB 00000000000000     
   107 000000D2 11                      	db T_rational	; 13
   108 000000D3 0D0000000000000001-     	dq 13, 1
   108 000000DC 00000000000000     
   109 000000E3 11                      	db T_rational	; 14
   110 000000E4 0E0000000000000001-     	dq 14, 1
   110 000000ED 00000000000000     
   111 000000F4 11                      	db T_rational	; 15
   112 000000F5 0F0000000000000001-     	dq 15, 1
   112 000000FE 00000000000000     
   113 00000105 11                      	db T_rational	; 1
   114 00000106 010000000000000001-     	dq 1, 1
   114 0000010F 00000000000000     
   115 00000116 11                      	db T_rational	; 2
   116 00000117 020000000000000001-     	dq 2, 1
   116 00000120 00000000000000     
   117 00000127 11                      	db T_rational	; 3
   118 00000128 030000000000000001-     	dq 3, 1
   118 00000131 00000000000000     
   119 00000138 11                      	db T_rational	; 4
   120 00000139 040000000000000001-     	dq 4, 1
   120 00000142 00000000000000     
   121 00000149 11                      	db T_rational	; 5
   122 0000014A 050000000000000001-     	dq 5, 1
   122 00000153 00000000000000     
   123                                  
   124                                  section .bss
   125                                  free_var_0:	; location of null?
   126 00000000 ????????????????        	resq 1
   127                                  free_var_1:	; location of pair?
   128 00000008 ????????????????        	resq 1
   129                                  free_var_2:	; location of void?
   130 00000010 ????????????????        	resq 1
   131                                  free_var_3:	; location of char?
   132 00000018 ????????????????        	resq 1
   133                                  free_var_4:	; location of string?
   134 00000020 ????????????????        	resq 1
   135                                  free_var_5:	; location of symbol?
   136 00000028 ????????????????        	resq 1
   137                                  free_var_6:	; location of vector?
   138 00000030 ????????????????        	resq 1
   139                                  free_var_7:	; location of procedure?
   140 00000038 ????????????????        	resq 1
   141                                  free_var_8:	; location of real?
   142 00000040 ????????????????        	resq 1
   143                                  free_var_9:	; location of rational?
   144 00000048 ????????????????        	resq 1
   145                                  free_var_10:	; location of boolean?
   146 00000050 ????????????????        	resq 1
   147                                  free_var_11:	; location of number?
   148 00000058 ????????????????        	resq 1
   149                                  free_var_12:	; location of collection?
   150 00000060 ????????????????        	resq 1
   151                                  free_var_13:	; location of cons
   152 00000068 ????????????????        	resq 1
   153                                  free_var_14:	; location of display-sexpr
   154 00000070 ????????????????        	resq 1
   155                                  free_var_15:	; location of write-char
   156 00000078 ????????????????        	resq 1
   157                                  free_var_16:	; location of car
   158 00000080 ????????????????        	resq 1
   159                                  free_var_17:	; location of cdr
   160 00000088 ????????????????        	resq 1
   161                                  free_var_18:	; location of string-length
   162 00000090 ????????????????        	resq 1
   163                                  free_var_19:	; location of vector-length
   164 00000098 ????????????????        	resq 1
   165                                  free_var_20:	; location of real->integer
   166 000000A0 ????????????????        	resq 1
   167                                  free_var_21:	; location of exit
   168 000000A8 ????????????????        	resq 1
   169                                  free_var_22:	; location of integer->real
   170 000000B0 ????????????????        	resq 1
   171                                  free_var_23:	; location of rational->real
   172 000000B8 ????????????????        	resq 1
   173                                  free_var_24:	; location of char->integer
   174 000000C0 ????????????????        	resq 1
   175                                  free_var_25:	; location of integer->char
   176 000000C8 ????????????????        	resq 1
   177                                  free_var_26:	; location of trng
   178 000000D0 ????????????????        	resq 1
   179                                  free_var_27:	; location of zero?
   180 000000D8 ????????????????        	resq 1
   181                                  free_var_28:	; location of integer?
   182 000000E0 ????????????????        	resq 1
   183                                  free_var_29:	; location of __bin-apply
   184 000000E8 ????????????????        	resq 1
   185                                  free_var_30:	; location of __bin-add-rr
   186 000000F0 ????????????????        	resq 1
   187                                  free_var_31:	; location of __bin-sub-rr
   188 000000F8 ????????????????        	resq 1
   189                                  free_var_32:	; location of __bin-mul-rr
   190 00000100 ????????????????        	resq 1
   191                                  free_var_33:	; location of __bin-div-rr
   192 00000108 ????????????????        	resq 1
   193                                  free_var_34:	; location of __bin-add-qq
   194 00000110 ????????????????        	resq 1
   195                                  free_var_35:	; location of __bin-sub-qq
   196 00000118 ????????????????        	resq 1
   197                                  free_var_36:	; location of __bin-mul-qq
   198 00000120 ????????????????        	resq 1
   199                                  free_var_37:	; location of __bin-div-qq
   200 00000128 ????????????????        	resq 1
   201                                  free_var_38:	; location of error
   202 00000130 ????????????????        	resq 1
   203                                  free_var_39:	; location of __bin-less-than-rr
   204 00000138 ????????????????        	resq 1
   205                                  free_var_40:	; location of __bin-less-than-qq
   206 00000140 ????????????????        	resq 1
   207                                  free_var_41:	; location of __bin-equal-rr
   208 00000148 ????????????????        	resq 1
   209                                  free_var_42:	; location of __bin-equal-qq
   210 00000150 ????????????????        	resq 1
   211                                  free_var_43:	; location of quotient
   212 00000158 ????????????????        	resq 1
   213                                  free_var_44:	; location of remainder
   214 00000160 ????????????????        	resq 1
   215                                  free_var_45:	; location of set-car!
   216 00000168 ????????????????        	resq 1
   217                                  free_var_46:	; location of set-cdr!
   218 00000170 ????????????????        	resq 1
   219                                  free_var_47:	; location of string-ref
   220 00000178 ????????????????        	resq 1
   221                                  free_var_48:	; location of vector-ref
   222 00000180 ????????????????        	resq 1
   223                                  free_var_49:	; location of vector-set!
   224 00000188 ????????????????        	resq 1
   225                                  free_var_50:	; location of string-set!
   226 00000190 ????????????????        	resq 1
   227                                  free_var_51:	; location of make-vector
   228 00000198 ????????????????        	resq 1
   229                                  free_var_52:	; location of make-string
   230 000001A0 ????????????????        	resq 1
   231                                  free_var_53:	; location of numerator
   232 000001A8 ????????????????        	resq 1
   233                                  free_var_54:	; location of denominator
   234 000001B0 ????????????????        	resq 1
   235                                  free_var_55:	; location of eq?
   236 000001B8 ????????????????        	resq 1
   237                                  free_var_56:	; location of list
   238 000001C0 ????????????????        	resq 1
   239                                  
   240                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   241                                  global main
   242                                  section .text
   243                                  main:
   244 00000000 C8000000                        enter 0, 0
   245                                          
   246                                  	; building closure for null?
   247 00000004 48BF-                   	mov rdi, free_var_0
   247 00000006 [0000000000000000] 
   248 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   248 00000010 [3C15000000000000] 
   249 00000018 E8F7140000              	call bind_primitive
   250                                  
   251                                  	; building closure for pair?
   252 0000001D 48BF-                   	mov rdi, free_var_1
   252 0000001F [0800000000000000] 
   253 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   253 00000029 [7215000000000000] 
   254 00000031 E8DE140000              	call bind_primitive
   255                                  
   256                                  	; building closure for void?
   257 00000036 48BF-                   	mov rdi, free_var_2
   257 00000038 [1000000000000000] 
   258 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   258 00000042 [A815000000000000] 
   259 0000004A E8C5140000              	call bind_primitive
   260                                  
   261                                  	; building closure for char?
   262 0000004F 48BF-                   	mov rdi, free_var_3
   262 00000051 [1800000000000000] 
   263 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   263 0000005B [DE15000000000000] 
   264 00000063 E8AC140000              	call bind_primitive
   265                                  
   266                                  	; building closure for string?
   267 00000068 48BF-                   	mov rdi, free_var_4
   267 0000006A [2000000000000000] 
   268 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   268 00000074 [1416000000000000] 
   269 0000007C E893140000              	call bind_primitive
   270                                  
   271                                  	; building closure for symbol?
   272 00000081 48BF-                   	mov rdi, free_var_5
   272 00000083 [2800000000000000] 
   273 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   273 0000008D [4A16000000000000] 
   274 00000095 E87A140000              	call bind_primitive
   275                                  
   276                                  	; building closure for vector?
   277 0000009A 48BF-                   	mov rdi, free_var_6
   277 0000009C [3000000000000000] 
   278 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   278 000000A6 [8016000000000000] 
   279 000000AE E861140000              	call bind_primitive
   280                                  
   281                                  	; building closure for procedure?
   282 000000B3 48BF-                   	mov rdi, free_var_7
   282 000000B5 [3800000000000000] 
   283 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   283 000000BF [B616000000000000] 
   284 000000C7 E848140000              	call bind_primitive
   285                                  
   286                                  	; building closure for real?
   287 000000CC 48BF-                   	mov rdi, free_var_8
   287 000000CE [4000000000000000] 
   288 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   288 000000D8 [EC16000000000000] 
   289 000000E0 E82F140000              	call bind_primitive
   290                                  
   291                                  	; building closure for rational?
   292 000000E5 48BF-                   	mov rdi, free_var_9
   292 000000E7 [4800000000000000] 
   293 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   293 000000F1 [2217000000000000] 
   294 000000F9 E816140000              	call bind_primitive
   295                                  
   296                                  	; building closure for boolean?
   297 000000FE 48BF-                   	mov rdi, free_var_10
   297 00000100 [5000000000000000] 
   298 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   298 0000010A [5817000000000000] 
   299 00000112 E8FD130000              	call bind_primitive
   300                                  
   301                                  	; building closure for number?
   302 00000117 48BF-                   	mov rdi, free_var_11
   302 00000119 [5800000000000000] 
   303 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   303 00000123 [9017000000000000] 
   304 0000012B E8E4130000              	call bind_primitive
   305                                  
   306                                  	; building closure for collection?
   307 00000130 48BF-                   	mov rdi, free_var_12
   307 00000132 [6000000000000000] 
   308 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   308 0000013C [C817000000000000] 
   309 00000144 E8CB130000              	call bind_primitive
   310                                  
   311                                  	; building closure for cons
   312 00000149 48BF-                   	mov rdi, free_var_13
   312 0000014B [6800000000000000] 
   313 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   313 00000155 [0018000000000000] 
   314 0000015D E8B2130000              	call bind_primitive
   315                                  
   316                                  	; building closure for display-sexpr
   317 00000162 48BF-                   	mov rdi, free_var_14
   317 00000164 [7000000000000000] 
   318 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   318 0000016E [3418000000000000] 
   319 00000176 E899130000              	call bind_primitive
   320                                  
   321                                  	; building closure for write-char
   322 0000017B 48BF-                   	mov rdi, free_var_15
   322 0000017D [7800000000000000] 
   323 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   323 00000187 [5E18000000000000] 
   324 0000018F E880130000              	call bind_primitive
   325                                  
   326                                  	; building closure for car
   327 00000194 48BF-                   	mov rdi, free_var_16
   327 00000196 [8000000000000000] 
   328 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   328 000001A0 [B518000000000000] 
   329 000001A8 E867130000              	call bind_primitive
   330                                  
   331                                  	; building closure for cdr
   332 000001AD 48BF-                   	mov rdi, free_var_17
   332 000001AF [8800000000000000] 
   333 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   333 000001B9 [DD18000000000000] 
   334 000001C1 E84E130000              	call bind_primitive
   335                                  
   336                                  	; building closure for string-length
   337 000001C6 48BF-                   	mov rdi, free_var_18
   337 000001C8 [9000000000000000] 
   338 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   338 000001D2 [0519000000000000] 
   339 000001DA E835130000              	call bind_primitive
   340                                  
   341                                  	; building closure for vector-length
   342 000001DF 48BF-                   	mov rdi, free_var_19
   342 000001E1 [9800000000000000] 
   343 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   343 000001EB [3219000000000000] 
   344 000001F3 E81C130000              	call bind_primitive
   345                                  
   346                                  	; building closure for real->integer
   347 000001F8 48BF-                   	mov rdi, free_var_20
   347 000001FA [A000000000000000] 
   348 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   348 00000204 [5F19000000000000] 
   349 0000020C E803130000              	call bind_primitive
   350                                  
   351                                  	; building closure for exit
   352 00000211 48BF-                   	mov rdi, free_var_21
   352 00000213 [A800000000000000] 
   353 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   353 0000021D [9219000000000000] 
   354 00000225 E8EA120000              	call bind_primitive
   355                                  
   356                                  	; building closure for integer->real
   357 0000022A 48BF-                   	mov rdi, free_var_22
   357 0000022C [B000000000000000] 
   358 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   358 00000236 [AF19000000000000] 
   359 0000023E E8D1120000              	call bind_primitive
   360                                  
   361                                  	; building closure for rational->real
   362 00000243 48BF-                   	mov rdi, free_var_23
   362 00000245 [B800000000000000] 
   363 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   363 0000024F [EC19000000000000] 
   364 00000257 E8B8120000              	call bind_primitive
   365                                  
   366                                  	; building closure for char->integer
   367 0000025C 48BF-                   	mov rdi, free_var_24
   367 0000025E [C000000000000000] 
   368 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   368 00000268 [2B1A000000000000] 
   369 00000270 E89F120000              	call bind_primitive
   370                                  
   371                                  	; building closure for integer->char
   372 00000275 48BF-                   	mov rdi, free_var_25
   372 00000277 [C800000000000000] 
   373 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   373 00000281 [601A000000000000] 
   374 00000289 E886120000              	call bind_primitive
   375                                  
   376                                  	; building closure for trng
   377 0000028E 48BF-                   	mov rdi, free_var_26
   377 00000290 [D000000000000000] 
   378 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   378 0000029A [BA1A000000000000] 
   379 000002A2 E86D120000              	call bind_primitive
   380                                  
   381                                  	; building closure for zero?
   382 000002A7 48BF-                   	mov rdi, free_var_27
   382 000002A9 [D800000000000000] 
   383 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   383 000002B3 [DD1A000000000000] 
   384 000002BB E854120000              	call bind_primitive
   385                                  
   386                                  	; building closure for integer?
   387 000002C0 48BF-                   	mov rdi, free_var_28
   387 000002C2 [E000000000000000] 
   388 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   388 000002CC [381B000000000000] 
   389 000002D4 E83B120000              	call bind_primitive
   390                                  
   391                                  	; building closure for __bin-apply
   392 000002D9 48BF-                   	mov rdi, free_var_29
   392 000002DB [E800000000000000] 
   393 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   393 000002E5 [3C15000000000000] 
   394 000002ED E822120000              	call bind_primitive
   395                                  
   396                                  	; building closure for __bin-add-rr
   397 000002F2 48BF-                   	mov rdi, free_var_30
   397 000002F4 [F000000000000000] 
   398 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   398 000002FE [751B000000000000] 
   399 00000306 E809120000              	call bind_primitive
   400                                  
   401                                  	; building closure for __bin-sub-rr
   402 0000030B 48BF-                   	mov rdi, free_var_31
   402 0000030D [F800000000000000] 
   403 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   403 00000317 [B91B000000000000] 
   404 0000031F E8F0110000              	call bind_primitive
   405                                  
   406                                  	; building closure for __bin-mul-rr
   407 00000324 48BF-                   	mov rdi, free_var_32
   407 00000326 [0001000000000000] 
   408 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   408 00000330 [FD1B000000000000] 
   409 00000338 E8D7110000              	call bind_primitive
   410                                  
   411                                  	; building closure for __bin-div-rr
   412 0000033D 48BF-                   	mov rdi, free_var_33
   412 0000033F [0801000000000000] 
   413 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   413 00000349 [411C000000000000] 
   414 00000351 E8BE110000              	call bind_primitive
   415                                  
   416                                  	; building closure for __bin-add-qq
   417 00000356 48BF-                   	mov rdi, free_var_34
   417 00000358 [1001000000000000] 
   418 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   418 00000362 [931C000000000000] 
   419 0000036A E8A5110000              	call bind_primitive
   420                                  
   421                                  	; building closure for __bin-sub-qq
   422 0000036F 48BF-                   	mov rdi, free_var_35
   422 00000371 [1801000000000000] 
   423 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   423 0000037B [FB1C000000000000] 
   424 00000383 E88C110000              	call bind_primitive
   425                                  
   426                                  	; building closure for __bin-mul-qq
   427 00000388 48BF-                   	mov rdi, free_var_36
   427 0000038A [2001000000000000] 
   428 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   428 00000394 [631D000000000000] 
   429 0000039C E873110000              	call bind_primitive
   430                                  
   431                                  	; building closure for __bin-div-qq
   432 000003A1 48BF-                   	mov rdi, free_var_37
   432 000003A3 [2801000000000000] 
   433 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   433 000003AD [BB1D000000000000] 
   434 000003B5 E85A110000              	call bind_primitive
   435                                  
   436                                  	; building closure for error
   437 000003BA 48BF-                   	mov rdi, free_var_38
   437 000003BC [3001000000000000] 
   438 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   438 000003C6 [891E000000000000] 
   439 000003CE E841110000              	call bind_primitive
   440                                  
   441                                  	; building closure for __bin-less-than-rr
   442 000003D3 48BF-                   	mov rdi, free_var_39
   442 000003D5 [3801000000000000] 
   443 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   443 000003DF [401F000000000000] 
   444 000003E7 E828110000              	call bind_primitive
   445                                  
   446                                  	; building closure for __bin-less-than-qq
   447 000003EC 48BF-                   	mov rdi, free_var_40
   447 000003EE [4001000000000000] 
   448 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   448 000003F8 [971F000000000000] 
   449 00000400 E80F110000              	call bind_primitive
   450                                  
   451                                  	; building closure for __bin-equal-rr
   452 00000405 48BF-                   	mov rdi, free_var_41
   452 00000407 [4801000000000000] 
   453 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   453 00000411 [FA1F000000000000] 
   454 00000419 E8F6100000              	call bind_primitive
   455                                  
   456                                  	; building closure for __bin-equal-qq
   457 0000041E 48BF-                   	mov rdi, free_var_42
   457 00000420 [5001000000000000] 
   458 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   458 0000042A [5120000000000000] 
   459 00000432 E8DD100000              	call bind_primitive
   460                                  
   461                                  	; building closure for quotient
   462 00000437 48BF-                   	mov rdi, free_var_43
   462 00000439 [5801000000000000] 
   463 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   463 00000443 [B420000000000000] 
   464 0000044B E8C4100000              	call bind_primitive
   465                                  
   466                                  	; building closure for remainder
   467 00000450 48BF-                   	mov rdi, free_var_44
   467 00000452 [6001000000000000] 
   468 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   468 0000045C [1A21000000000000] 
   469 00000464 E8AB100000              	call bind_primitive
   470                                  
   471                                  	; building closure for set-car!
   472 00000469 48BF-                   	mov rdi, free_var_45
   472 0000046B [6801000000000000] 
   473 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   473 00000475 [8021000000000000] 
   474 0000047D E892100000              	call bind_primitive
   475                                  
   476                                  	; building closure for set-cdr!
   477 00000482 48BF-                   	mov rdi, free_var_46
   477 00000484 [7001000000000000] 
   478 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   478 0000048E [B621000000000000] 
   479 00000496 E879100000              	call bind_primitive
   480                                  
   481                                  	; building closure for string-ref
   482 0000049B 48BF-                   	mov rdi, free_var_47
   482 0000049D [7801000000000000] 
   483 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   483 000004A7 [EC21000000000000] 
   484 000004AF E860100000              	call bind_primitive
   485                                  
   486                                  	; building closure for vector-ref
   487 000004B4 48BF-                   	mov rdi, free_var_48
   487 000004B6 [8001000000000000] 
   488 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   488 000004C0 [5722000000000000] 
   489 000004C8 E847100000              	call bind_primitive
   490                                  
   491                                  	; building closure for vector-set!
   492 000004CD 48BF-                   	mov rdi, free_var_49
   492 000004CF [8801000000000000] 
   493 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   493 000004D9 [B322000000000000] 
   494 000004E1 E82E100000              	call bind_primitive
   495                                  
   496                                  	; building closure for string-set!
   497 000004E6 48BF-                   	mov rdi, free_var_50
   497 000004E8 [9001000000000000] 
   498 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   498 000004F2 [1D23000000000000] 
   499 000004FA E815100000              	call bind_primitive
   500                                  
   501                                  	; building closure for make-vector
   502 000004FF 48BF-                   	mov rdi, free_var_51
   502 00000501 [9801000000000000] 
   503 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   503 0000050B [9223000000000000] 
   504 00000513 E8FC0F0000              	call bind_primitive
   505                                  
   506                                  	; building closure for make-string
   507 00000518 48BF-                   	mov rdi, free_var_52
   507 0000051A [A001000000000000] 
   508 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   508 00000524 [FC23000000000000] 
   509 0000052C E8E30F0000              	call bind_primitive
   510                                  
   511                                  	; building closure for numerator
   512 00000531 48BF-                   	mov rdi, free_var_53
   512 00000533 [A801000000000000] 
   513 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   513 0000053D [6E24000000000000] 
   514 00000545 E8CA0F0000              	call bind_primitive
   515                                  
   516                                  	; building closure for denominator
   517 0000054A 48BF-                   	mov rdi, free_var_54
   517 0000054C [B001000000000000] 
   518 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   518 00000556 [9B24000000000000] 
   519 0000055E E8B10F0000              	call bind_primitive
   520                                  
   521                                  	; building closure for eq?
   522 00000563 48BF-                   	mov rdi, free_var_55
   522 00000565 [B801000000000000] 
   523 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   523 0000056F [C824000000000000] 
   524 00000577 E8980F0000              	call bind_primitive
   525                                  
   526 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   527 00000581 E8FD090000              	call malloc
   528 00000586 50                      	push rax
   529 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   530 0000058C E8F2090000              	call malloc
   531 00000591 50                      	push rax
   532 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   533 00000597 E8E7090000              	call malloc
   534 0000059C 488B7D10                	mov rdi, ENV
   535 000005A0 BE00000000              	mov rsi, 0
   536 000005A5 BA01000000              	mov rdx, 1
   537                                  .L_lambda_opt_env_loop_0004:	; ext_env[i + 1] <-- env[i]
   538 000005AA 4883FE00                	cmp rsi, 0
   539 000005AE 7410                    	je .L_lambda_opt_env_end_0004
   540 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   541 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   542 000005B8 48FFC6                  	inc rsi
   543 000005BB 48FFC2                  	inc rdx
   544 000005BE EBEA                    	jmp .L_lambda_opt_env_loop_0004
   545                                  .L_lambda_opt_env_end_0004:
   546 000005C0 5B                      	pop rbx
   547 000005C1 BE00000000              	mov rsi, 0
   548                                  .L_lambda_opt_params_loop_0004:	; copy params
   549 000005C6 4883FE00                	cmp rsi, 0
   550 000005CA 740E                    	je .L_lambda_opt_params_end_0004
   551 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   552 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   553 000005D5 48FFC6                  	inc rsi
   554 000005D8 EBEC                    	jmp .L_lambda_opt_params_loop_0004
   555                                  .L_lambda_opt_params_end_0004:
   556 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   557 000005DD 4889C3                  	mov rbx, rax
   558 000005E0 58                      	pop rax
   559 000005E1 C60005                  	mov byte [rax], T_closure
   560 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   561 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0004
   562 000005F0 E905010000              	jmp .L_lambda_opt_end_0004
   563                                  .L_lambda_opt_code_0004:	; lambda-opt body
   564 000005F5 48837C241000            	cmp qword [rsp + 8 * 2], 0
   565 000005FB 7F5D                    	jg .L_lambda_opt_arity_check_more_0004
   566 000005FD 740B                    	je .L_lambda_opt_arity_check_exact_0004
   567 000005FF FF742410                	push qword [rsp + 8 * 2]
   568 00000603 6A00                    	push 0
   569 00000605 E946090000              	jmp L_error_incorrect_arity_opt
   570                                  .L_lambda_opt_arity_check_exact_0004:
   571 0000060A 4883EC08                	sub rsp, 8 * 1
   572 0000060E 4889E7                  	mov rdi, rsp 
   573                                  	;mov ret
   574 00000611 488B4708                	mov rax, qword [rdi + (8 * 1)]
   575 00000615 488907                  	mov qword [rdi], rax
   576 00000618 4883C708                	add rdi, 8
   577                                  	;mov env
   578 0000061C 488B4708                	mov rax, qword [rdi + (8 * 1)]
   579 00000620 488907                  	mov qword [rdi], rax
   580 00000623 4883C708                	add rdi, 8
   581                                  	;mov & update COUNT
   582 00000627 488B4708                	mov rax, qword [rdi +(8 * 1)]
   583 0000062B 4889C1                  	mov rcx, rax
   584 0000062E 48FFC0                  	inc rax
   585 00000631 488907                  	mov qword [rdi], rax
   586 00000634 4883C708                	add rdi, 8
   587                                  	;LOOP:move params
   588                                  .L_lambda_opt_stack_shrink_loop_000a:	
   589 00000638 4883F900                	cmp rcx, 0
   590 0000063C 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_000a
   591 0000063E 488B4708                	mov rax, qword [rdi + 8]
   592 00000642 488907                  	mov qword [rdi], rax
   593 00000645 4883C708                	add rdi, 8
   594 00000649 48FFC9                  	dec rcx
   595 0000064C EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_000a
   596                                  .L_lambda_opt_stack_shrink_loop_exit_000a:	
   597 0000064E 48C707[01000000]        	mov qword [rdi], sob_nil
   598 00000655 E994000000              	jmp .L_lambda_opt_stack_adjusted_0004
   599                                  .L_lambda_opt_arity_check_more_0004:	
   600 0000065A 488B742410              	mov rsi, qword [rsp + (8 * 2)]
   601 0000065F 488D0E                  	lea rcx, [rsi - 0]
   602 00000662 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
   603 00000667 4989F2                  	mov r10, rsi
   604 0000066A 49B9-                   	mov r9, sob_nil
   604 0000066C [0100000000000000] 
   605                                  .L_lambda_opt_stack_shrink_loop_000b:	
   606 00000674 4883F900                	cmp rcx, 0
   607 00000678 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_000b
   608 0000067A BF11000000              	mov rdi, 1 + 8 + 8
   609 0000067F E8FF080000              	call malloc
   610 00000684 C60021                  	mov byte [rax], T_pair
   611 00000687 488B1E                  	mov rbx, qword [rsi]
   612 0000068A 48895801                	mov SOB_PAIR_CAR(rax), rbx
   613 0000068E 4C894809                	mov SOB_PAIR_CDR(rax), r9
   614 00000692 4989C1                  	mov r9, rax
   615 00000695 4883EE08                	sub rsi, 8 * 1
   616 00000699 48FFC9                  	dec rcx
   617 0000069C EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_000b
   618                                  .L_lambda_opt_stack_shrink_loop_exit_000b:	
   619 0000069E 4D890A                  	mov qword [r10], r9
   620 000006A1 4983EA08                	sub r10, 8 * 1; the new dest!
   621 000006A5 488D742410              	lea rsi, [rsp + (8 * (0 + 2))];the new src
   622 000006AA B900000000              	mov rcx, 0 
   623                                  .L_lambda_opt_stack_shrink_loop_000c:	
   624 000006AF 4883F900                	cmp rcx, 0
   625 000006B3 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_000c
   626 000006B5 488B06                  	mov rax, qword [rsi]
   627 000006B8 498902                  	mov qword [r10], rax
   628 000006BB 4983EA08                	sub r10, 8 * 1
   629 000006BF 4883EE08                	sub rsi, 8 * 1
   630 000006C3 48FFC9                  	dec rcx
   631 000006C6 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_000c
   632                                  .L_lambda_opt_stack_shrink_loop_exit_000c:	
   633 000006C8 49C70201000000          	mov qword [r10], 1 + 0; 1=opt
   634 000006CF 4983EA08                	sub r10, 8 * 1
   635 000006D3 4883EE08                	sub rsi, 8 * 1
   636 000006D7 488B06                  	mov rax, qword [rsi] ;env
   637 000006DA 498902                  	mov qword [r10], rax
   638 000006DD 4983EA08                	sub r10, 8 * 1
   639 000006E1 4883EE08                	sub rsi, 8 * 1
   640 000006E5 488B06                  	mov rax, qword [rsi] ;ret
   641 000006E8 498902                  	mov qword [r10], rax
   642 000006EB 4C89D4                  	mov rsp, r10
   643                                  .L_lambda_opt_stack_adjusted_0004:	
   644 000006EE C8000000                	enter 0, 0
   645 000006F2 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
   646 000006F6 C9                      	leave
   647 000006F7 C21800                  	ret 8 * (2 + 1)
   648                                  .L_lambda_opt_end_0004:	; new closure is in rax
   649 000006FA 48890425[C0010000]      	mov qword [free_var_56], rax
   650 00000702 48B8-                   	mov rax, sob_void
   650 00000704 [0000000000000000] 
   651                                  
   652 0000070C 4889C7                  	mov rdi, rax
   653 0000070F E880080000              	call print_sexpr_if_not_void
   654                                  
   655 00000714 48B8-                   	mov rax,L_constants + 329
   655 00000716 [4901000000000000] 
   656 0000071E 50                      	push rax
   657 0000071F 48B8-                   	mov rax,L_constants + 312
   657 00000721 [3801000000000000] 
   658 00000729 50                      	push rax
   659 0000072A 48B8-                   	mov rax,L_constants + 295
   659 0000072C [2701000000000000] 
   660 00000734 50                      	push rax
   661 00000735 48B8-                   	mov rax,L_constants + 278
   661 00000737 [1601000000000000] 
   662 0000073F 50                      	push rax
   663 00000740 48B8-                   	mov rax,L_constants + 261
   663 00000742 [0501000000000000] 
   664 0000074A 50                      	push rax
   665 0000074B 6A05                    	push 5
   666 0000074D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   667 00000752 E82C080000              	call malloc
   668 00000757 50                      	push rax
   669 00000758 BF00000000              	mov rdi, 8 * 0	; new rib
   670 0000075D E821080000              	call malloc
   671 00000762 50                      	push rax
   672 00000763 BF08000000              	mov rdi, 8 * 1	; extended env
   673 00000768 E816080000              	call malloc
   674 0000076D 488B7D10                	mov rdi, ENV
   675 00000771 BE00000000              	mov rsi, 0
   676 00000776 BA01000000              	mov rdx, 1
   677                                  .L_lambda_opt_env_loop_0005:	; ext_env[i + 1] <-- env[i]
   678 0000077B 4883FE00                	cmp rsi, 0
   679 0000077F 7410                    	je .L_lambda_opt_env_end_0005
   680 00000781 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   681 00000785 48890CD0                	mov qword [rax + 8 * rdx], rcx
   682 00000789 48FFC6                  	inc rsi
   683 0000078C 48FFC2                  	inc rdx
   684 0000078F EBEA                    	jmp .L_lambda_opt_env_loop_0005
   685                                  .L_lambda_opt_env_end_0005:
   686 00000791 5B                      	pop rbx
   687 00000792 BE00000000              	mov rsi, 0
   688                                  .L_lambda_opt_params_loop_0005:	; copy params
   689 00000797 4883FE00                	cmp rsi, 0
   690 0000079B 740E                    	je .L_lambda_opt_params_end_0005
   691 0000079D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   692 000007A2 488914F3                	mov qword [rbx + 8 * rsi], rdx
   693 000007A6 48FFC6                  	inc rsi
   694 000007A9 EBEC                    	jmp .L_lambda_opt_params_loop_0005
   695                                  .L_lambda_opt_params_end_0005:
   696 000007AB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   697 000007AE 4889C3                  	mov rbx, rax
   698 000007B1 58                      	pop rax
   699 000007B2 C60005                  	mov byte [rax], T_closure
   700 000007B5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   701 000007B9 48C74009[C6070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0005
   702 000007C1 E9CF060000              	jmp .L_lambda_opt_end_0005
   703                                  .L_lambda_opt_code_0005:	; lambda-opt body
   704 000007C6 48837C241001            	cmp qword [rsp + 8 * 2], 1
   705 000007CC 7F5D                    	jg .L_lambda_opt_arity_check_more_0005
   706 000007CE 740B                    	je .L_lambda_opt_arity_check_exact_0005
   707 000007D0 FF742410                	push qword [rsp + 8 * 2]
   708 000007D4 6A01                    	push 1
   709 000007D6 E975070000              	jmp L_error_incorrect_arity_opt
   710                                  .L_lambda_opt_arity_check_exact_0005:
   711 000007DB 4883EC08                	sub rsp, 8 * 1
   712 000007DF 4889E7                  	mov rdi, rsp 
   713                                  	;mov ret
   714 000007E2 488B4708                	mov rax, qword [rdi + (8 * 1)]
   715 000007E6 488907                  	mov qword [rdi], rax
   716 000007E9 4883C708                	add rdi, 8
   717                                  	;mov env
   718 000007ED 488B4708                	mov rax, qword [rdi + (8 * 1)]
   719 000007F1 488907                  	mov qword [rdi], rax
   720 000007F4 4883C708                	add rdi, 8
   721                                  	;mov & update COUNT
   722 000007F8 488B4708                	mov rax, qword [rdi +(8 * 1)]
   723 000007FC 4889C1                  	mov rcx, rax
   724 000007FF 48FFC0                  	inc rax
   725 00000802 488907                  	mov qword [rdi], rax
   726 00000805 4883C708                	add rdi, 8
   727                                  	;LOOP:move params
   728                                  .L_lambda_opt_stack_shrink_loop_000d:	
   729 00000809 4883F900                	cmp rcx, 0
   730 0000080D 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_000d
   731 0000080F 488B4708                	mov rax, qword [rdi + 8]
   732 00000813 488907                  	mov qword [rdi], rax
   733 00000816 4883C708                	add rdi, 8
   734 0000081A 48FFC9                  	dec rcx
   735 0000081D EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_000d
   736                                  .L_lambda_opt_stack_shrink_loop_exit_000d:	
   737 0000081F 48C707[01000000]        	mov qword [rdi], sob_nil
   738 00000826 E995000000              	jmp .L_lambda_opt_stack_adjusted_0005
   739                                  .L_lambda_opt_arity_check_more_0005:	
   740 0000082B 488B742410              	mov rsi, qword [rsp + (8 * 2)]
   741 00000830 488D4EFF                	lea rcx, [rsi - 1]
   742 00000834 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
   743 00000839 4989F2                  	mov r10, rsi
   744 0000083C 49B9-                   	mov r9, sob_nil
   744 0000083E [0100000000000000] 
   745                                  .L_lambda_opt_stack_shrink_loop_000e:	
   746 00000846 4883F900                	cmp rcx, 0
   747 0000084A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_000e
   748 0000084C BF11000000              	mov rdi, 1 + 8 + 8
   749 00000851 E82D070000              	call malloc
   750 00000856 C60021                  	mov byte [rax], T_pair
   751 00000859 488B1E                  	mov rbx, qword [rsi]
   752 0000085C 48895801                	mov SOB_PAIR_CAR(rax), rbx
   753 00000860 4C894809                	mov SOB_PAIR_CDR(rax), r9
   754 00000864 4989C1                  	mov r9, rax
   755 00000867 4883EE08                	sub rsi, 8 * 1
   756 0000086B 48FFC9                  	dec rcx
   757 0000086E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_000e
   758                                  .L_lambda_opt_stack_shrink_loop_exit_000e:	
   759 00000870 4D890A                  	mov qword [r10], r9
   760 00000873 4983EA08                	sub r10, 8 * 1; the new dest!
   761 00000877 488D742418              	lea rsi, [rsp + (8 * (1 + 2))];the new src
   762 0000087C B901000000              	mov rcx, 1 
   763                                  .L_lambda_opt_stack_shrink_loop_000f:	
   764 00000881 4883F900                	cmp rcx, 0
   765 00000885 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_000f
   766 00000887 488B06                  	mov rax, qword [rsi]
   767 0000088A 498902                  	mov qword [r10], rax
   768 0000088D 4983EA08                	sub r10, 8 * 1
   769 00000891 4883EE08                	sub rsi, 8 * 1
   770 00000895 48FFC9                  	dec rcx
   771 00000898 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_000f
   772                                  .L_lambda_opt_stack_shrink_loop_exit_000f:	
   773 0000089A 49C70202000000          	mov qword [r10], 1 + 1; 1=opt
   774 000008A1 4983EA08                	sub r10, 8 * 1
   775 000008A5 4883EE08                	sub rsi, 8 * 1
   776 000008A9 488B06                  	mov rax, qword [rsi] ;env
   777 000008AC 498902                  	mov qword [r10], rax
   778 000008AF 4983EA08                	sub r10, 8 * 1
   779 000008B3 4883EE08                	sub rsi, 8 * 1
   780 000008B7 488B06                  	mov rax, qword [rsi] ;ret
   781 000008BA 498902                  	mov qword [r10], rax
   782 000008BD 4C89D4                  	mov rsp, r10
   783                                  .L_lambda_opt_stack_adjusted_0005:	
   784 000008C0 C8000000                	enter 0, 0
   785 000008C4 48B8-                   	mov rax,L_constants + 244
   785 000008C6 [F400000000000000] 
   786 000008CE 50                      	push rax
   787 000008CF 48B8-                   	mov rax,L_constants + 227
   787 000008D1 [E300000000000000] 
   788 000008D9 50                      	push rax
   789 000008DA 48B8-                   	mov rax,L_constants + 210
   789 000008DC [D200000000000000] 
   790 000008E4 50                      	push rax
   791 000008E5 48B8-                   	mov rax,L_constants + 193
   791 000008E7 [C100000000000000] 
   792 000008EF 50                      	push rax
   793 000008F0 48B8-                   	mov rax,L_constants + 176
   793 000008F2 [B000000000000000] 
   794 000008FA 50                      	push rax
   795 000008FB 6A05                    	push 5
   796 000008FD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   797 00000902 E87C060000              	call malloc
   798 00000907 50                      	push rax
   799 00000908 BF10000000              	mov rdi, 8 * 2	; new rib
   800 0000090D E871060000              	call malloc
   801 00000912 50                      	push rax
   802 00000913 BF10000000              	mov rdi, 8 * 2	; extended env
   803 00000918 E866060000              	call malloc
   804 0000091D 488B7D10                	mov rdi, ENV
   805 00000921 BE00000000              	mov rsi, 0
   806 00000926 BA01000000              	mov rdx, 1
   807                                  .L_lambda_opt_env_loop_0006:	; ext_env[i + 1] <-- env[i]
   808 0000092B 4883FE01                	cmp rsi, 1
   809 0000092F 7410                    	je .L_lambda_opt_env_end_0006
   810 00000931 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   811 00000935 48890CD0                	mov qword [rax + 8 * rdx], rcx
   812 00000939 48FFC6                  	inc rsi
   813 0000093C 48FFC2                  	inc rdx
   814 0000093F EBEA                    	jmp .L_lambda_opt_env_loop_0006
   815                                  .L_lambda_opt_env_end_0006:
   816 00000941 5B                      	pop rbx
   817 00000942 BE00000000              	mov rsi, 0
   818                                  .L_lambda_opt_params_loop_0006:	; copy params
   819 00000947 4883FE02                	cmp rsi, 2
   820 0000094B 740E                    	je .L_lambda_opt_params_end_0006
   821 0000094D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   822 00000952 488914F3                	mov qword [rbx + 8 * rsi], rdx
   823 00000956 48FFC6                  	inc rsi
   824 00000959 EBEC                    	jmp .L_lambda_opt_params_loop_0006
   825                                  .L_lambda_opt_params_end_0006:
   826 0000095B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   827 0000095E 4889C3                  	mov rbx, rax
   828 00000961 58                      	pop rax
   829 00000962 C60005                  	mov byte [rax], T_closure
   830 00000965 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   831 00000969 48C74009[76090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0006
   832 00000971 E9E8040000              	jmp .L_lambda_opt_end_0006
   833                                  .L_lambda_opt_code_0006:	; lambda-opt body
   834 00000976 48837C241002            	cmp qword [rsp + 8 * 2], 2
   835 0000097C 7F5D                    	jg .L_lambda_opt_arity_check_more_0006
   836 0000097E 740B                    	je .L_lambda_opt_arity_check_exact_0006
   837 00000980 FF742410                	push qword [rsp + 8 * 2]
   838 00000984 6A02                    	push 2
   839 00000986 E9C5050000              	jmp L_error_incorrect_arity_opt
   840                                  .L_lambda_opt_arity_check_exact_0006:
   841 0000098B 4883EC08                	sub rsp, 8 * 1
   842 0000098F 4889E7                  	mov rdi, rsp 
   843                                  	;mov ret
   844 00000992 488B4708                	mov rax, qword [rdi + (8 * 1)]
   845 00000996 488907                  	mov qword [rdi], rax
   846 00000999 4883C708                	add rdi, 8
   847                                  	;mov env
   848 0000099D 488B4708                	mov rax, qword [rdi + (8 * 1)]
   849 000009A1 488907                  	mov qword [rdi], rax
   850 000009A4 4883C708                	add rdi, 8
   851                                  	;mov & update COUNT
   852 000009A8 488B4708                	mov rax, qword [rdi +(8 * 1)]
   853 000009AC 4889C1                  	mov rcx, rax
   854 000009AF 48FFC0                  	inc rax
   855 000009B2 488907                  	mov qword [rdi], rax
   856 000009B5 4883C708                	add rdi, 8
   857                                  	;LOOP:move params
   858                                  .L_lambda_opt_stack_shrink_loop_0010:	
   859 000009B9 4883F900                	cmp rcx, 0
   860 000009BD 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0010
   861 000009BF 488B4708                	mov rax, qword [rdi + 8]
   862 000009C3 488907                  	mov qword [rdi], rax
   863 000009C6 4883C708                	add rdi, 8
   864 000009CA 48FFC9                  	dec rcx
   865 000009CD EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0010
   866                                  .L_lambda_opt_stack_shrink_loop_exit_0010:	
   867 000009CF 48C707[01000000]        	mov qword [rdi], sob_nil
   868 000009D6 E995000000              	jmp .L_lambda_opt_stack_adjusted_0006
   869                                  .L_lambda_opt_arity_check_more_0006:	
   870 000009DB 488B742410              	mov rsi, qword [rsp + (8 * 2)]
   871 000009E0 488D4EFE                	lea rcx, [rsi - 2]
   872 000009E4 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
   873 000009E9 4989F2                  	mov r10, rsi
   874 000009EC 49B9-                   	mov r9, sob_nil
   874 000009EE [0100000000000000] 
   875                                  .L_lambda_opt_stack_shrink_loop_0011:	
   876 000009F6 4883F900                	cmp rcx, 0
   877 000009FA 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0011
   878 000009FC BF11000000              	mov rdi, 1 + 8 + 8
   879 00000A01 E87D050000              	call malloc
   880 00000A06 C60021                  	mov byte [rax], T_pair
   881 00000A09 488B1E                  	mov rbx, qword [rsi]
   882 00000A0C 48895801                	mov SOB_PAIR_CAR(rax), rbx
   883 00000A10 4C894809                	mov SOB_PAIR_CDR(rax), r9
   884 00000A14 4989C1                  	mov r9, rax
   885 00000A17 4883EE08                	sub rsi, 8 * 1
   886 00000A1B 48FFC9                  	dec rcx
   887 00000A1E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0011
   888                                  .L_lambda_opt_stack_shrink_loop_exit_0011:	
   889 00000A20 4D890A                  	mov qword [r10], r9
   890 00000A23 4983EA08                	sub r10, 8 * 1; the new dest!
   891 00000A27 488D742420              	lea rsi, [rsp + (8 * (2 + 2))];the new src
   892 00000A2C B902000000              	mov rcx, 2 
   893                                  .L_lambda_opt_stack_shrink_loop_0012:	
   894 00000A31 4883F900                	cmp rcx, 0
   895 00000A35 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0012
   896 00000A37 488B06                  	mov rax, qword [rsi]
   897 00000A3A 498902                  	mov qword [r10], rax
   898 00000A3D 4983EA08                	sub r10, 8 * 1
   899 00000A41 4883EE08                	sub rsi, 8 * 1
   900 00000A45 48FFC9                  	dec rcx
   901 00000A48 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0012
   902                                  .L_lambda_opt_stack_shrink_loop_exit_0012:	
   903 00000A4A 49C70203000000          	mov qword [r10], 1 + 2; 1=opt
   904 00000A51 4983EA08                	sub r10, 8 * 1
   905 00000A55 4883EE08                	sub rsi, 8 * 1
   906 00000A59 488B06                  	mov rax, qword [rsi] ;env
   907 00000A5C 498902                  	mov qword [r10], rax
   908 00000A5F 4983EA08                	sub r10, 8 * 1
   909 00000A63 4883EE08                	sub rsi, 8 * 1
   910 00000A67 488B06                  	mov rax, qword [rsi] ;ret
   911 00000A6A 498902                  	mov qword [r10], rax
   912 00000A6D 4C89D4                  	mov rsp, r10
   913                                  .L_lambda_opt_stack_adjusted_0006:	
   914 00000A70 C8000000                	enter 0, 0
   915 00000A74 48B8-                   	mov rax,L_constants + 159
   915 00000A76 [9F00000000000000] 
   916 00000A7E 50                      	push rax
   917 00000A7F 48B8-                   	mov rax,L_constants + 142
   917 00000A81 [8E00000000000000] 
   918 00000A89 50                      	push rax
   919 00000A8A 48B8-                   	mov rax,L_constants + 125
   919 00000A8C [7D00000000000000] 
   920 00000A94 50                      	push rax
   921 00000A95 48B8-                   	mov rax,L_constants + 108
   921 00000A97 [6C00000000000000] 
   922 00000A9F 50                      	push rax
   923 00000AA0 48B8-                   	mov rax,L_constants + 91
   923 00000AA2 [5B00000000000000] 
   924 00000AAA 50                      	push rax
   925 00000AAB 6A05                    	push 5
   926 00000AAD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   927 00000AB2 E8CC040000              	call malloc
   928 00000AB7 50                      	push rax
   929 00000AB8 BF18000000              	mov rdi, 8 * 3	; new rib
   930 00000ABD E8C1040000              	call malloc
   931 00000AC2 50                      	push rax
   932 00000AC3 BF18000000              	mov rdi, 8 * 3	; extended env
   933 00000AC8 E8B6040000              	call malloc
   934 00000ACD 488B7D10                	mov rdi, ENV
   935 00000AD1 BE00000000              	mov rsi, 0
   936 00000AD6 BA01000000              	mov rdx, 1
   937                                  .L_lambda_opt_env_loop_0007:	; ext_env[i + 1] <-- env[i]
   938 00000ADB 4883FE02                	cmp rsi, 2
   939 00000ADF 7410                    	je .L_lambda_opt_env_end_0007
   940 00000AE1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   941 00000AE5 48890CD0                	mov qword [rax + 8 * rdx], rcx
   942 00000AE9 48FFC6                  	inc rsi
   943 00000AEC 48FFC2                  	inc rdx
   944 00000AEF EBEA                    	jmp .L_lambda_opt_env_loop_0007
   945                                  .L_lambda_opt_env_end_0007:
   946 00000AF1 5B                      	pop rbx
   947 00000AF2 BE00000000              	mov rsi, 0
   948                                  .L_lambda_opt_params_loop_0007:	; copy params
   949 00000AF7 4883FE03                	cmp rsi, 3
   950 00000AFB 740E                    	je .L_lambda_opt_params_end_0007
   951 00000AFD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   952 00000B02 488914F3                	mov qword [rbx + 8 * rsi], rdx
   953 00000B06 48FFC6                  	inc rsi
   954 00000B09 EBEC                    	jmp .L_lambda_opt_params_loop_0007
   955                                  .L_lambda_opt_params_end_0007:
   956 00000B0B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   957 00000B0E 4889C3                  	mov rbx, rax
   958 00000B11 58                      	pop rax
   959 00000B12 C60005                  	mov byte [rax], T_closure
   960 00000B15 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   961 00000B19 48C74009[260B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0007
   962 00000B21 E925030000              	jmp .L_lambda_opt_end_0007
   963                                  .L_lambda_opt_code_0007:	; lambda-opt body
   964 00000B26 48837C241003            	cmp qword [rsp + 8 * 2], 3
   965 00000B2C 7F5D                    	jg .L_lambda_opt_arity_check_more_0007
   966 00000B2E 740B                    	je .L_lambda_opt_arity_check_exact_0007
   967 00000B30 FF742410                	push qword [rsp + 8 * 2]
   968 00000B34 6A03                    	push 3
   969 00000B36 E915040000              	jmp L_error_incorrect_arity_opt
   970                                  .L_lambda_opt_arity_check_exact_0007:
   971 00000B3B 4883EC08                	sub rsp, 8 * 1
   972 00000B3F 4889E7                  	mov rdi, rsp 
   973                                  	;mov ret
   974 00000B42 488B4708                	mov rax, qword [rdi + (8 * 1)]
   975 00000B46 488907                  	mov qword [rdi], rax
   976 00000B49 4883C708                	add rdi, 8
   977                                  	;mov env
   978 00000B4D 488B4708                	mov rax, qword [rdi + (8 * 1)]
   979 00000B51 488907                  	mov qword [rdi], rax
   980 00000B54 4883C708                	add rdi, 8
   981                                  	;mov & update COUNT
   982 00000B58 488B4708                	mov rax, qword [rdi +(8 * 1)]
   983 00000B5C 4889C1                  	mov rcx, rax
   984 00000B5F 48FFC0                  	inc rax
   985 00000B62 488907                  	mov qword [rdi], rax
   986 00000B65 4883C708                	add rdi, 8
   987                                  	;LOOP:move params
   988                                  .L_lambda_opt_stack_shrink_loop_0013:	
   989 00000B69 4883F900                	cmp rcx, 0
   990 00000B6D 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0013
   991 00000B6F 488B4708                	mov rax, qword [rdi + 8]
   992 00000B73 488907                  	mov qword [rdi], rax
   993 00000B76 4883C708                	add rdi, 8
   994 00000B7A 48FFC9                  	dec rcx
   995 00000B7D EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0013
   996                                  .L_lambda_opt_stack_shrink_loop_exit_0013:	
   997 00000B7F 48C707[01000000]        	mov qword [rdi], sob_nil
   998 00000B86 E995000000              	jmp .L_lambda_opt_stack_adjusted_0007
   999                                  .L_lambda_opt_arity_check_more_0007:	
  1000 00000B8B 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  1001 00000B90 488D4EFD                	lea rcx, [rsi - 3]
  1002 00000B94 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  1003 00000B99 4989F2                  	mov r10, rsi
  1004 00000B9C 49B9-                   	mov r9, sob_nil
  1004 00000B9E [0100000000000000] 
  1005                                  .L_lambda_opt_stack_shrink_loop_0014:	
  1006 00000BA6 4883F900                	cmp rcx, 0
  1007 00000BAA 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0014
  1008 00000BAC BF11000000              	mov rdi, 1 + 8 + 8
  1009 00000BB1 E8CD030000              	call malloc
  1010 00000BB6 C60021                  	mov byte [rax], T_pair
  1011 00000BB9 488B1E                  	mov rbx, qword [rsi]
  1012 00000BBC 48895801                	mov SOB_PAIR_CAR(rax), rbx
  1013 00000BC0 4C894809                	mov SOB_PAIR_CDR(rax), r9
  1014 00000BC4 4989C1                  	mov r9, rax
  1015 00000BC7 4883EE08                	sub rsi, 8 * 1
  1016 00000BCB 48FFC9                  	dec rcx
  1017 00000BCE EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0014
  1018                                  .L_lambda_opt_stack_shrink_loop_exit_0014:	
  1019 00000BD0 4D890A                  	mov qword [r10], r9
  1020 00000BD3 4983EA08                	sub r10, 8 * 1; the new dest!
  1021 00000BD7 488D742428              	lea rsi, [rsp + (8 * (3 + 2))];the new src
  1022 00000BDC B903000000              	mov rcx, 3 
  1023                                  .L_lambda_opt_stack_shrink_loop_0015:	
  1024 00000BE1 4883F900                	cmp rcx, 0
  1025 00000BE5 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0015
  1026 00000BE7 488B06                  	mov rax, qword [rsi]
  1027 00000BEA 498902                  	mov qword [r10], rax
  1028 00000BED 4983EA08                	sub r10, 8 * 1
  1029 00000BF1 4883EE08                	sub rsi, 8 * 1
  1030 00000BF5 48FFC9                  	dec rcx
  1031 00000BF8 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0015
  1032                                  .L_lambda_opt_stack_shrink_loop_exit_0015:	
  1033 00000BFA 49C70204000000          	mov qword [r10], 1 + 3; 1=opt
  1034 00000C01 4983EA08                	sub r10, 8 * 1
  1035 00000C05 4883EE08                	sub rsi, 8 * 1
  1036 00000C09 488B06                  	mov rax, qword [rsi] ;env
  1037 00000C0C 498902                  	mov qword [r10], rax
  1038 00000C0F 4983EA08                	sub r10, 8 * 1
  1039 00000C13 4883EE08                	sub rsi, 8 * 1
  1040 00000C17 488B06                  	mov rax, qword [rsi] ;ret
  1041 00000C1A 498902                  	mov qword [r10], rax
  1042 00000C1D 4C89D4                  	mov rsp, r10
  1043                                  .L_lambda_opt_stack_adjusted_0007:	
  1044 00000C20 C8000000                	enter 0, 0
  1045 00000C24 48B8-                   	mov rax,L_constants + 74
  1045 00000C26 [4A00000000000000] 
  1046 00000C2E 50                      	push rax
  1047 00000C2F 48B8-                   	mov rax,L_constants + 57
  1047 00000C31 [3900000000000000] 
  1048 00000C39 50                      	push rax
  1049 00000C3A 48B8-                   	mov rax,L_constants + 40
  1049 00000C3C [2800000000000000] 
  1050 00000C44 50                      	push rax
  1051 00000C45 48B8-                   	mov rax,L_constants + 23
  1051 00000C47 [1700000000000000] 
  1052 00000C4F 50                      	push rax
  1053 00000C50 48B8-                   	mov rax,L_constants + 6
  1053 00000C52 [0600000000000000] 
  1054 00000C5A 50                      	push rax
  1055 00000C5B 6A05                    	push 5
  1056 00000C5D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1057 00000C62 E81C030000              	call malloc
  1058 00000C67 50                      	push rax
  1059 00000C68 BF20000000              	mov rdi, 8 * 4	; new rib
  1060 00000C6D E811030000              	call malloc
  1061 00000C72 50                      	push rax
  1062 00000C73 BF20000000              	mov rdi, 8 * 4	; extended env
  1063 00000C78 E806030000              	call malloc
  1064 00000C7D 488B7D10                	mov rdi, ENV
  1065 00000C81 BE00000000              	mov rsi, 0
  1066 00000C86 BA01000000              	mov rdx, 1
  1067                                  .L_lambda_opt_env_loop_0008:	; ext_env[i + 1] <-- env[i]
  1068 00000C8B 4883FE03                	cmp rsi, 3
  1069 00000C8F 7410                    	je .L_lambda_opt_env_end_0008
  1070 00000C91 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1071 00000C95 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1072 00000C99 48FFC6                  	inc rsi
  1073 00000C9C 48FFC2                  	inc rdx
  1074 00000C9F EBEA                    	jmp .L_lambda_opt_env_loop_0008
  1075                                  .L_lambda_opt_env_end_0008:
  1076 00000CA1 5B                      	pop rbx
  1077 00000CA2 BE00000000              	mov rsi, 0
  1078                                  .L_lambda_opt_params_loop_0008:	; copy params
  1079 00000CA7 4883FE04                	cmp rsi, 4
  1080 00000CAB 740E                    	je .L_lambda_opt_params_end_0008
  1081 00000CAD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1082 00000CB2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1083 00000CB6 48FFC6                  	inc rsi
  1084 00000CB9 EBEC                    	jmp .L_lambda_opt_params_loop_0008
  1085                                  .L_lambda_opt_params_end_0008:
  1086 00000CBB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1087 00000CBE 4889C3                  	mov rbx, rax
  1088 00000CC1 58                      	pop rax
  1089 00000CC2 C60005                  	mov byte [rax], T_closure
  1090 00000CC5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1091 00000CC9 48C74009[D60C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0008
  1092 00000CD1 E934010000              	jmp .L_lambda_opt_end_0008
  1093                                  .L_lambda_opt_code_0008:	; lambda-opt body
  1094 00000CD6 48837C241004            	cmp qword [rsp + 8 * 2], 4
  1095 00000CDC 7F5D                    	jg .L_lambda_opt_arity_check_more_0008
  1096 00000CDE 740B                    	je .L_lambda_opt_arity_check_exact_0008
  1097 00000CE0 FF742410                	push qword [rsp + 8 * 2]
  1098 00000CE4 6A04                    	push 4
  1099 00000CE6 E965020000              	jmp L_error_incorrect_arity_opt
  1100                                  .L_lambda_opt_arity_check_exact_0008:
  1101 00000CEB 4883EC08                	sub rsp, 8 * 1
  1102 00000CEF 4889E7                  	mov rdi, rsp 
  1103                                  	;mov ret
  1104 00000CF2 488B4708                	mov rax, qword [rdi + (8 * 1)]
  1105 00000CF6 488907                  	mov qword [rdi], rax
  1106 00000CF9 4883C708                	add rdi, 8
  1107                                  	;mov env
  1108 00000CFD 488B4708                	mov rax, qword [rdi + (8 * 1)]
  1109 00000D01 488907                  	mov qword [rdi], rax
  1110 00000D04 4883C708                	add rdi, 8
  1111                                  	;mov & update COUNT
  1112 00000D08 488B4708                	mov rax, qword [rdi +(8 * 1)]
  1113 00000D0C 4889C1                  	mov rcx, rax
  1114 00000D0F 48FFC0                  	inc rax
  1115 00000D12 488907                  	mov qword [rdi], rax
  1116 00000D15 4883C708                	add rdi, 8
  1117                                  	;LOOP:move params
  1118                                  .L_lambda_opt_stack_shrink_loop_0016:	
  1119 00000D19 4883F900                	cmp rcx, 0
  1120 00000D1D 7410                    	je .L_lambda_opt_stack_shrink_loop_exit_0016
  1121 00000D1F 488B4708                	mov rax, qword [rdi + 8]
  1122 00000D23 488907                  	mov qword [rdi], rax
  1123 00000D26 4883C708                	add rdi, 8
  1124 00000D2A 48FFC9                  	dec rcx
  1125 00000D2D EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0016
  1126                                  .L_lambda_opt_stack_shrink_loop_exit_0016:	
  1127 00000D2F 48C707[01000000]        	mov qword [rdi], sob_nil
  1128 00000D36 E995000000              	jmp .L_lambda_opt_stack_adjusted_0008
  1129                                  .L_lambda_opt_arity_check_more_0008:	
  1130 00000D3B 488B742410              	mov rsi, qword [rsp + (8 * 2)]
  1131 00000D40 488D4EFC                	lea rcx, [rsi - 4]
  1132 00000D44 488D74F410              	lea rsi, [rsp + (8 * rsi) + (8 * 2)]
  1133 00000D49 4989F2                  	mov r10, rsi
  1134 00000D4C 49B9-                   	mov r9, sob_nil
  1134 00000D4E [0100000000000000] 
  1135                                  .L_lambda_opt_stack_shrink_loop_0017:	
  1136 00000D56 4883F900                	cmp rcx, 0
  1137 00000D5A 7424                    	je .L_lambda_opt_stack_shrink_loop_exit_0017
  1138 00000D5C BF11000000              	mov rdi, 1 + 8 + 8
  1139 00000D61 E81D020000              	call malloc
  1140 00000D66 C60021                  	mov byte [rax], T_pair
  1141 00000D69 488B1E                  	mov rbx, qword [rsi]
  1142 00000D6C 48895801                	mov SOB_PAIR_CAR(rax), rbx
  1143 00000D70 4C894809                	mov SOB_PAIR_CDR(rax), r9
  1144 00000D74 4989C1                  	mov r9, rax
  1145 00000D77 4883EE08                	sub rsi, 8 * 1
  1146 00000D7B 48FFC9                  	dec rcx
  1147 00000D7E EBD6                    	jmp .L_lambda_opt_stack_shrink_loop_0017
  1148                                  .L_lambda_opt_stack_shrink_loop_exit_0017:	
  1149 00000D80 4D890A                  	mov qword [r10], r9
  1150 00000D83 4983EA08                	sub r10, 8 * 1; the new dest!
  1151 00000D87 488D742430              	lea rsi, [rsp + (8 * (4 + 2))];the new src
  1152 00000D8C B904000000              	mov rcx, 4 
  1153                                  .L_lambda_opt_stack_shrink_loop_0018:	
  1154 00000D91 4883F900                	cmp rcx, 0
  1155 00000D95 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0018
  1156 00000D97 488B06                  	mov rax, qword [rsi]
  1157 00000D9A 498902                  	mov qword [r10], rax
  1158 00000D9D 4983EA08                	sub r10, 8 * 1
  1159 00000DA1 4883EE08                	sub rsi, 8 * 1
  1160 00000DA5 48FFC9                  	dec rcx
  1161 00000DA8 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0018
  1162                                  .L_lambda_opt_stack_shrink_loop_exit_0018:	
  1163 00000DAA 49C70205000000          	mov qword [r10], 1 + 4; 1=opt
  1164 00000DB1 4983EA08                	sub r10, 8 * 1
  1165 00000DB5 4883EE08                	sub rsi, 8 * 1
  1166 00000DB9 488B06                  	mov rax, qword [rsi] ;env
  1167 00000DBC 498902                  	mov qword [r10], rax
  1168 00000DBF 4983EA08                	sub r10, 8 * 1
  1169 00000DC3 4883EE08                	sub rsi, 8 * 1
  1170 00000DC7 488B06                  	mov rax, qword [rsi] ;ret
  1171 00000DCA 498902                  	mov qword [r10], rax
  1172 00000DCD 4C89D4                  	mov rsp, r10
  1173                                  .L_lambda_opt_stack_adjusted_0008:	
  1174 00000DD0 C8000000                	enter 0, 0
  1175 00000DD4 488B4540                	mov rax ,qword[rbp + 8 * (4 + 4)]
  1176 00000DD8 50                      	push rax
  1177 00000DD9 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
  1178 00000DDD 50                      	push rax
  1179 00000DDE 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  1180 00000DE2 50                      	push rax
  1181 00000DE3 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  1182 00000DE7 50                      	push rax
  1183 00000DE8 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1184 00000DEC 50                      	push rax
  1185 00000DED 6A05                    	push 5
  1186 00000DEF 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1187                                  	assert_closure(rax)
    42 00000DF7 803805              <1>  cmp byte [%1], %2
    43 00000DFA 0F85C8180000        <1>  jne L_error_incorrect_type
  1188 00000E00 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1189 00000E03 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1190 00000E06 C9                      	leave
  1191 00000E07 C23800                  	ret 8 * (2 + 5)
  1192                                  .L_lambda_opt_end_0008:	; new closure is in rax
  1193                                  	assert_closure(rax)
    42 00000E0A 803805              <1>  cmp byte [%1], %2
    43 00000E0D 0F85B5180000        <1>  jne L_error_incorrect_type
  1194 00000E13 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1195 00000E16 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1196 00000E19 50                      	push rax
  1197 00000E1A 488B4538                	mov rax ,qword[rbp + 8 * (4 + 3)]
  1198 00000E1E 50                      	push rax
  1199 00000E1F 488B4530                	mov rax ,qword[rbp + 8 * (4 + 2)]
  1200 00000E23 50                      	push rax
  1201 00000E24 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  1202 00000E28 50                      	push rax
  1203 00000E29 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1204 00000E2D 50                      	push rax
  1205 00000E2E 6A05                    	push 5
  1206 00000E30 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1207                                  	assert_closure(rax)
    42 00000E38 803805              <1>  cmp byte [%1], %2
    43 00000E3B 0F8587180000        <1>  jne L_error_incorrect_type
  1208 00000E41 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1209 00000E44 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1210 00000E47 C9                      	leave
  1211 00000E48 C23000                  	ret 8 * (2 + 4)
  1212                                  .L_lambda_opt_end_0007:	; new closure is in rax
  1213                                  	assert_closure(rax)
    42 00000E4B 803805              <1>  cmp byte [%1], %2
    43 00000E4E 0F8574180000        <1>  jne L_error_incorrect_type
  1214 00000E54 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1215 00000E57 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1216 00000E5A C9                      	leave
  1217 00000E5B C22800                  	ret 8 * (2 + 3)
  1218                                  .L_lambda_opt_end_0006:	; new closure is in rax
  1219                                  	assert_closure(rax)
    42 00000E5E 803805              <1>  cmp byte [%1], %2
    43 00000E61 0F8561180000        <1>  jne L_error_incorrect_type
  1220 00000E67 FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1221 00000E6A FF5009                  	call SOB_CLOSURE_CODE(rax)
  1222 00000E6D 50                      	push rax
  1223 00000E6E 488B4528                	mov rax ,qword[rbp + 8 * (4 + 1)]
  1224 00000E72 50                      	push rax
  1225 00000E73 488B4520                	mov rax ,qword[rbp + 8 * (4 + 0)]
  1226 00000E77 50                      	push rax
  1227 00000E78 6A03                    	push 3
  1228 00000E7A 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1229                                  	assert_closure(rax)
    42 00000E82 803805              <1>  cmp byte [%1], %2
    43 00000E85 0F853D180000        <1>  jne L_error_incorrect_type
  1230 00000E8B FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1231 00000E8E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1232 00000E91 C9                      	leave
  1233 00000E92 C22000                  	ret 8 * (2 + 2)
  1234                                  .L_lambda_opt_end_0005:	; new closure is in rax
  1235                                  	assert_closure(rax)
    42 00000E95 803805              <1>  cmp byte [%1], %2
    43 00000E98 0F852A180000        <1>  jne L_error_incorrect_type
  1236 00000E9E FF7001                  	push SOB_CLOSURE_ENV(rax) 
  1237 00000EA1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1238                                  
  1239 00000EA4 4889C7                  	mov rdi, rax
  1240 00000EA7 E8E8000000              	call print_sexpr_if_not_void
  1241                                  
  1242 00000EAC 48BF-                           mov rdi, fmt_memory_usage
  1242 00000EAE [B901000000000000] 
  1243 00000EB6 488B3425[40020000]              mov rsi, qword [top_of_memory]
  1244 00000EBE 4881EE[C8010000]                sub rsi, memory
  1245 00000EC5 B800000000                      mov rax, 0
  1246                                  	ENTER
    33 00000ECA C8000000            <1>  enter 0, 0
    34 00000ECE 4883E4F0            <1>  and rsp, ~15
  1247 00000ED2 E8(00000000)                    call printf
  1248                                  	LEAVE
    38 00000ED7 C9                  <1>  leave
  1249 00000ED8 C9                      	leave
  1250 00000ED9 C3                      	ret
  1251                                  
  1252                                  L_error_non_closure:
  1253 00000EDA 488B3C25[00000000]              mov rdi, qword [stderr]
  1254 00000EE2 48BE-                           mov rsi, fmt_non_closure
  1254 00000EE4 [F001000000000000] 
  1255 00000EEC B800000000                      mov rax, 0
  1256                                  	ENTER
    33 00000EF1 C8000000            <1>  enter 0, 0
    34 00000EF5 4883E4F0            <1>  and rsp, ~15
  1257 00000EF9 E8(00000000)                    call fprintf
  1258                                  	LEAVE
    38 00000EFE C9                  <1>  leave
  1259 00000EFF 48C7C0FEFFFFFF                  mov rax, -2
  1260 00000F06 E8(00000000)                    call exit
  1261                                  
  1262                                  L_error_improper_list:
  1263 00000F0B 488B3C25[00000000]      	mov rdi, qword [stderr]
  1264 00000F13 48BE-                   	mov rsi, fmt_error_improper_list
  1264 00000F15 [1802000000000000] 
  1265 00000F1D B800000000              	mov rax, 0
  1266                                  	ENTER
    33 00000F22 C8000000            <1>  enter 0, 0
    34 00000F26 4883E4F0            <1>  and rsp, ~15
  1267 00000F2A E8(00000000)            	call fprintf
  1268                                  	LEAVE
    38 00000F2F C9                  <1>  leave
  1269 00000F30 48C7C0F9FFFFFF          	mov rax, -7
  1270 00000F37 E8(00000000)            	call exit
  1271                                  
  1272                                  L_error_incorrect_arity_simple:
  1273 00000F3C 488B3C25[00000000]              mov rdi, qword [stderr]
  1274 00000F44 48BE-                           mov rsi, fmt_incorrect_arity_simple
  1274 00000F46 [5A01000000000000] 
  1275 00000F4E EB12                            jmp L_error_incorrect_arity_common
  1276                                  L_error_incorrect_arity_opt:
  1277 00000F50 488B3C25[00000000]              mov rdi, qword [stderr]
  1278 00000F58 48BE-                           mov rsi, fmt_incorrect_arity_opt
  1278 00000F5A [8501000000000000] 
  1279                                  L_error_incorrect_arity_common:
  1280 00000F62 5A                              pop rdx
  1281 00000F63 59                              pop rcx
  1282 00000F64 B800000000                      mov rax, 0
  1283                                  	ENTER
    33 00000F69 C8000000            <1>  enter 0, 0
    34 00000F6D 4883E4F0            <1>  and rsp, ~15
  1284 00000F71 E8(00000000)                    call fprintf
  1285                                  	LEAVE
    38 00000F76 C9                  <1>  leave
  1286 00000F77 48C7C0FAFFFFFF                  mov rax, -6
  1287 00000F7E E8(00000000)                    call exit
  1288                                  
  1289                                  section .data
  1290                                  fmt_incorrect_arity_simple:
  1291 0000015A 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  1291 00000163 74656420256C642061-
  1291 0000016C 7267756D656E74732C-
  1291 00000175 206275742067697665-
  1291 0000017E 6E20256C640A00     
  1292                                  fmt_incorrect_arity_opt:
  1293 00000185 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  1293 0000018E 746564206174206C65-
  1293 00000197 61737420256C642061-
  1293 000001A0 7267756D656E74732C-
  1293 000001A9 206275742067697665-
  1293 000001B2 6E20256C640A00     
  1294                                  fmt_memory_usage:
  1295 000001B9 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  1295 000001C2 6420256C6420627974-
  1295 000001CB 6573206F662064796E-
  1295 000001D4 616D6963616C6C792D-
  1295 000001DD 616C6C6F6361746564-
  1295 000001E6 206D656D6F72790A0A-
  1295 000001EF 00                 
  1296                                  fmt_non_closure:
  1297 000001F0 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  1297 000001F9 7074696E6720746F20-
  1297 00000202 6170706C792061206E-
  1297 0000020B 6F6E2D636C6F737572-
  1297 00000214 65210A00           
  1298                                  fmt_error_improper_list:
  1299 00000218 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  1299 00000221 7267756D656E742069-
  1299 0000022A 73206E6F7420612070-
  1299 00000233 726F706572206C6973-
  1299 0000023C 74210A00           
  1300                                  
  1301                                  section .bss
  1302                                  memory:
  1303 000001C8 <res 40000000h>         	resb gbytes(1)
  1304                                  
  1305                                  section .data
  1306                                  top_of_memory:
  1307 00000240 [C801000000000000]              dq memory
  1308                                  
  1309                                  section .text
  1310                                  malloc:
  1311 00000F83 488B0425[40020000]              mov rax, qword [top_of_memory]
  1312 00000F8B 48013C25[40020000]              add qword [top_of_memory], rdi
  1313 00000F93 C3                              ret
  1314                                          
  1315                                  print_sexpr_if_not_void:
  1316 00000F94 4881FF[00000000]        	cmp rdi, sob_void
  1317 00000F9B 7501                    	jne print_sexpr
  1318 00000F9D C3                      	ret
  1319                                  
  1320                                  section .data
  1321                                  fmt_void:
  1322 00000248 233C766F69643E00        	db `#<void>\0`
  1323                                  fmt_nil:
  1324 00000250 282900                  	db `()\0`
  1325                                  fmt_boolean_false:
  1326 00000253 236600                  	db `#f\0`
  1327                                  fmt_boolean_true:
  1328 00000256 237400                  	db `#t\0`
  1329                                  fmt_char_backslash:
  1330 00000259 235C5C00                	db `#\\\\\0`
  1331                                  fmt_char_dquote:
  1332 0000025D 235C2200                	db `#\\"\0`
  1333                                  fmt_char_simple:
  1334 00000261 235C256300              	db `#\\%c\0`
  1335                                  fmt_char_null:
  1336 00000266 235C6E756C00            	db `#\\nul\0`
  1337                                  fmt_char_bell:
  1338 0000026C 235C62656C6C00          	db `#\\bell\0`
  1339                                  fmt_char_backspace:
  1340 00000273 235C6261636B737061-     	db `#\\backspace\0`
  1340 0000027C 636500             
  1341                                  fmt_char_tab:
  1342 0000027F 235C74616200            	db `#\\tab\0`
  1343                                  fmt_char_newline:
  1344 00000285 235C6E65776C696E65-     	db `#\\newline\0`
  1344 0000028E 00                 
  1345                                  fmt_char_formfeed:
  1346 0000028F 235C7061676500          	db `#\\page\0`
  1347                                  fmt_char_return:
  1348 00000296 235C72657475726E00      	db `#\\return\0`
  1349                                  fmt_char_escape:
  1350 0000029F 235C65736300            	db `#\\esc\0`
  1351                                  fmt_char_space:
  1352 000002A5 235C737061636500        	db `#\\space\0`
  1353                                  fmt_char_hex:
  1354 000002AD 235C782530325800        	db `#\\x%02X\0`
  1355                                  fmt_closure:
  1356 000002B5 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  1356 000002BE 206174203078253038-
  1356 000002C7 5820656E763D307825-
  1356 000002D0 30385820636F64653D-
  1356 000002D9 3078253038583E00   
  1357                                  fmt_lparen:
  1358 000002E1 2800                    	db `(\0`
  1359                                  fmt_dotted_pair:
  1360 000002E3 202E2000                	db ` . \0`
  1361                                  fmt_rparen:
  1362 000002E7 2900                    	db `)\0`
  1363                                  fmt_space:
  1364 000002E9 2000                    	db ` \0`
  1365                                  fmt_empty_vector:
  1366 000002EB 23282900                	db `#()\0`
  1367                                  fmt_vector:
  1368 000002EF 232800                  	db `#(\0`
  1369                                  fmt_real:
  1370 000002F2 256600                  	db `%f\0`
  1371                                  fmt_fraction:
  1372 000002F5 256C642F256C6400        	db `%ld/%ld\0`
  1373                                  fmt_zero:
  1374 000002FD 3000                    	db `0\0`
  1375                                  fmt_int:
  1376 000002FF 256C6400                	db `%ld\0`
  1377                                  fmt_unknown_sexpr_error:
  1378 00000303 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
  1378 0000030C 6F723A20556E6B6E6F-
  1378 00000315 776E2074797065206F-
  1378 0000031E 662073657870722028-
  1378 00000327 3078253032582920   
  1379 0000032F 617420616464726573-     	db `at address 0x%08X\n\n\0`
  1379 00000338 73203078253038580A-
  1379 00000341 0A00               
  1380                                  fmt_dquote:
  1381 00000343 2200                    	db `\"\0`
  1382                                  fmt_string_char:
  1383 00000345 256300                          db `%c\0`
  1384                                  fmt_string_char_7:
  1385 00000348 5C6100                          db `\\a\0`
  1386                                  fmt_string_char_8:
  1387 0000034B 5C6200                          db `\\b\0`
  1388                                  fmt_string_char_9:
  1389 0000034E 5C7400                          db `\\t\0`
  1390                                  fmt_string_char_10:
  1391 00000351 5C6E00                          db `\\n\0`
  1392                                  fmt_string_char_11:
  1393 00000354 5C7600                          db `\\v\0`
  1394                                  fmt_string_char_12:
  1395 00000357 5C6600                          db `\\f\0`
  1396                                  fmt_string_char_13:
  1397 0000035A 5C7200                          db `\\r\0`
  1398                                  fmt_string_char_34:
  1399 0000035D 5C2200                          db `\\"\0`
  1400                                  fmt_string_char_92:
  1401 00000360 5C5C00                          db `\\\\\0`
  1402                                  fmt_string_char_hex:
  1403 00000363 5C7825583B00                    db `\\x%X;\0`
  1404                                  
  1405                                  section .text
  1406                                  
  1407                                  print_sexpr:
  1408                                  	ENTER
    33 00000F9E C8000000            <1>  enter 0, 0
    34 00000FA2 4883E4F0            <1>  and rsp, ~15
  1409 00000FA6 8A07                    	mov al, byte [rdi]
  1410 00000FA8 3C00                    	cmp al, T_void
  1411 00000FAA 744D                    	je .Lvoid
  1412 00000FAC 3C01                    	cmp al, T_nil
  1413 00000FAE 7458                    	je .Lnil
  1414 00000FB0 3C09                    	cmp al, T_boolean_false
  1415 00000FB2 7463                    	je .Lboolean_false
  1416 00000FB4 3C0A                    	cmp al, T_boolean_true
  1417 00000FB6 746E                    	je .Lboolean_true
  1418 00000FB8 3C02                    	cmp al, T_char
  1419 00000FBA 7479                    	je .Lchar
  1420 00000FBC 3C04                    	cmp al, T_symbol
  1421 00000FBE 0F84BB010000            	je .Lsymbol
  1422 00000FC4 3C21                    	cmp al, T_pair
  1423 00000FC6 0F84D6010000            	je .Lpair
  1424 00000FCC 3C22                    	cmp al, T_vector
  1425 00000FCE 0F849F020000            	je .Lvector
  1426 00000FD4 3C05                    	cmp al, T_closure
  1427 00000FD6 0F8489010000            	je .Lclosure
  1428 00000FDC 3C12                    	cmp al, T_real
  1429 00000FDE 0F8430030000            	je .Lreal
  1430 00000FE4 3C11                    	cmp al, T_rational
  1431 00000FE6 0F8456030000            	je .Lrational
  1432 00000FEC 3C03                    	cmp al, T_string
  1433 00000FEE 0F848F030000            	je .Lstring
  1434                                  
  1435 00000FF4 E9C7040000              	jmp .Lunknown_sexpr_type
  1436                                  
  1437                                  .Lvoid:
  1438 00000FF9 48BF-                   	mov rdi, fmt_void
  1438 00000FFB [4802000000000000] 
  1439 00001003 E9F5040000              	jmp .Lemit
  1440                                  
  1441                                  .Lnil:
  1442 00001008 48BF-                   	mov rdi, fmt_nil
  1442 0000100A [5002000000000000] 
  1443 00001012 E9E6040000              	jmp .Lemit
  1444                                  
  1445                                  .Lboolean_false:
  1446 00001017 48BF-                   	mov rdi, fmt_boolean_false
  1446 00001019 [5302000000000000] 
  1447 00001021 E9D7040000              	jmp .Lemit
  1448                                  
  1449                                  .Lboolean_true:
  1450 00001026 48BF-                   	mov rdi, fmt_boolean_true
  1450 00001028 [5602000000000000] 
  1451 00001030 E9C8040000              	jmp .Lemit
  1452                                  
  1453                                  .Lchar:
  1454 00001035 8A4701                  	mov al, byte [rdi + 1]
  1455 00001038 3C20                    	cmp al, ' '
  1456 0000103A 7E28                    	jle .Lchar_whitespace
  1457 0000103C 3C5C                    	cmp al, 92 		; backslash
  1458 0000103E 0F847C000000            	je .Lchar_backslash
  1459 00001044 3C22                    	cmp al, '"'
  1460 00001046 0F8483000000            	je .Lchar_dquote
  1461 0000104C 4825FF000000            	and rax, 255
  1462 00001052 48BF-                   	mov rdi, fmt_char_simple
  1462 00001054 [6102000000000000] 
  1463 0000105C 4889C6                  	mov rsi, rax
  1464 0000105F E999040000              	jmp .Lemit
  1465                                  
  1466                                  .Lchar_whitespace:
  1467 00001064 3C00                    	cmp al, 0
  1468 00001066 7476                    	je .Lchar_null
  1469 00001068 3C07                    	cmp al, 7
  1470 0000106A 0F847D000000            	je .Lchar_bell
  1471 00001070 3C08                    	cmp al, 8
  1472 00001072 0F8484000000            	je .Lchar_backspace
  1473 00001078 3C09                    	cmp al, 9
  1474 0000107A 0F848B000000            	je .Lchar_tab
  1475 00001080 3C0A                    	cmp al, 10
  1476 00001082 0F8492000000            	je .Lchar_newline
  1477 00001088 3C0C                    	cmp al, 12
  1478 0000108A 0F8499000000            	je .Lchar_formfeed
  1479 00001090 3C0D                    	cmp al, 13
  1480 00001092 0F84A0000000            	je .Lchar_return
  1481 00001098 3C1B                    	cmp al, 27
  1482 0000109A 0F84A7000000            	je .Lchar_escape
  1483 000010A0 4825FF000000            	and rax, 255
  1484 000010A6 3C20                    	cmp al, ' '
  1485 000010A8 0F84A8000000            	je .Lchar_space
  1486 000010AE 48BF-                   	mov rdi, fmt_char_hex
  1486 000010B0 [AD02000000000000] 
  1487 000010B8 4889C6                  	mov rsi, rax
  1488 000010BB E93D040000              	jmp .Lemit	
  1489                                  
  1490                                  .Lchar_backslash:
  1491 000010C0 48BF-                   	mov rdi, fmt_char_backslash
  1491 000010C2 [5902000000000000] 
  1492 000010CA E92E040000              	jmp .Lemit
  1493                                  
  1494                                  .Lchar_dquote:
  1495 000010CF 48BF-                   	mov rdi, fmt_char_dquote
  1495 000010D1 [5D02000000000000] 
  1496 000010D9 E91F040000              	jmp .Lemit
  1497                                  
  1498                                  .Lchar_null:
  1499 000010DE 48BF-                   	mov rdi, fmt_char_null
  1499 000010E0 [6602000000000000] 
  1500 000010E8 E910040000              	jmp .Lemit
  1501                                  
  1502                                  .Lchar_bell:
  1503 000010ED 48BF-                   	mov rdi, fmt_char_bell
  1503 000010EF [6C02000000000000] 
  1504 000010F7 E901040000              	jmp .Lemit
  1505                                  
  1506                                  .Lchar_backspace:
  1507 000010FC 48BF-                   	mov rdi, fmt_char_backspace
  1507 000010FE [7302000000000000] 
  1508 00001106 E9F2030000              	jmp .Lemit
  1509                                  
  1510                                  .Lchar_tab:
  1511 0000110B 48BF-                   	mov rdi, fmt_char_tab
  1511 0000110D [7F02000000000000] 
  1512 00001115 E9E3030000              	jmp .Lemit
  1513                                  
  1514                                  .Lchar_newline:
  1515 0000111A 48BF-                   	mov rdi, fmt_char_newline
  1515 0000111C [8502000000000000] 
  1516 00001124 E9D4030000              	jmp .Lemit
  1517                                  
  1518                                  .Lchar_formfeed:
  1519 00001129 48BF-                   	mov rdi, fmt_char_formfeed
  1519 0000112B [8F02000000000000] 
  1520 00001133 E9C5030000              	jmp .Lemit
  1521                                  
  1522                                  .Lchar_return:
  1523 00001138 48BF-                   	mov rdi, fmt_char_return
  1523 0000113A [9602000000000000] 
  1524 00001142 E9B6030000              	jmp .Lemit
  1525                                  
  1526                                  .Lchar_escape:
  1527 00001147 48BF-                   	mov rdi, fmt_char_escape
  1527 00001149 [9F02000000000000] 
  1528 00001151 E9A7030000              	jmp .Lemit
  1529                                  
  1530                                  .Lchar_space:
  1531 00001156 48BF-                   	mov rdi, fmt_char_space
  1531 00001158 [A502000000000000] 
  1532 00001160 E998030000              	jmp .Lemit
  1533                                  
  1534                                  .Lclosure:
  1535 00001165 4889FE                  	mov rsi, qword rdi
  1536 00001168 48BF-                   	mov rdi, fmt_closure
  1536 0000116A [B502000000000000] 
  1537 00001172 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1538 00001176 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1539 0000117A E97E030000              	jmp .Lemit
  1540                                  
  1541                                  .Lsymbol:
  1542 0000117F 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1543 00001183 BE01000000              	mov rsi, 1		 ; size = 1 byte
  1544 00001188 488B5701                	mov rdx, qword [rdi + 1] ; length
  1545 0000118C 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1546 00001190 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1547 00001198 E8(00000000)            	call fwrite
  1548 0000119D E970030000              	jmp .Lend
  1549                                  	
  1550                                  .Lpair:
  1551 000011A2 57                      	push rdi
  1552 000011A3 48BF-                   	mov rdi, fmt_lparen
  1552 000011A5 [E102000000000000] 
  1553 000011AD B800000000              	mov rax, 0
  1554                                          ENTER
    33 000011B2 C8000000            <1>  enter 0, 0
    34 000011B6 4883E4F0            <1>  and rsp, ~15
  1555 000011BA E8(00000000)            	call printf
  1556                                          LEAVE
    38 000011BF C9                  <1>  leave
  1557 000011C0 488B3C24                	mov rdi, qword [rsp] 	; pair
  1558 000011C4 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1559 000011C8 E8D1FDFFFF              	call print_sexpr
  1560 000011CD 5F                      	pop rdi 		; pair
  1561 000011CE 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1562                                  .Lcdr:
  1563 000011D2 8A07                    	mov al, byte [rdi]
  1564 000011D4 3C01                    	cmp al, T_nil
  1565 000011D6 7447                    	je .Lcdr_nil
  1566 000011D8 3C21                    	cmp al, T_pair
  1567 000011DA 7462                    	je .Lcdr_pair
  1568 000011DC 57                      	push rdi
  1569 000011DD 48BF-                   	mov rdi, fmt_dotted_pair
  1569 000011DF [E302000000000000] 
  1570 000011E7 B800000000              	mov rax, 0
  1571                                  	ENTER
    33 000011EC C8000000            <1>  enter 0, 0
    34 000011F0 4883E4F0            <1>  and rsp, ~15
  1572 000011F4 E8(00000000)            	call printf
  1573                                  	LEAVE
    38 000011F9 C9                  <1>  leave
  1574 000011FA 5F                      	pop rdi
  1575 000011FB E89EFDFFFF              	call print_sexpr
  1576 00001200 48BF-                   	mov rdi, fmt_rparen
  1576 00001202 [E702000000000000] 
  1577 0000120A B800000000              	mov rax, 0
  1578                                  	ENTER
    33 0000120F C8000000            <1>  enter 0, 0
    34 00001213 4883E4F0            <1>  and rsp, ~15
  1579 00001217 E8(00000000)            	call printf
  1580                                  	LEAVE
    38 0000121C C9                  <1>  leave
  1581                                  	LEAVE
    38 0000121D C9                  <1>  leave
  1582 0000121E C3                      	ret
  1583                                  
  1584                                  .Lcdr_nil:
  1585 0000121F 48BF-                   	mov rdi, fmt_rparen
  1585 00001221 [E702000000000000] 
  1586 00001229 B800000000              	mov rax, 0
  1587                                  	ENTER
    33 0000122E C8000000            <1>  enter 0, 0
    34 00001232 4883E4F0            <1>  and rsp, ~15
  1588 00001236 E8(00000000)            	call printf
  1589                                  	LEAVE
    38 0000123B C9                  <1>  leave
  1590                                  	LEAVE
    38 0000123C C9                  <1>  leave
  1591 0000123D C3                      	ret
  1592                                  
  1593                                  .Lcdr_pair:
  1594 0000123E 57                      	push rdi
  1595 0000123F 48BF-                   	mov rdi, fmt_space
  1595 00001241 [E902000000000000] 
  1596 00001249 B800000000              	mov rax, 0
  1597                                  	ENTER
    33 0000124E C8000000            <1>  enter 0, 0
    34 00001252 4883E4F0            <1>  and rsp, ~15
  1598 00001256 E8(00000000)            	call printf
  1599                                  	LEAVE
    38 0000125B C9                  <1>  leave
  1600 0000125C 488B3C24                	mov rdi, qword [rsp]
  1601 00001260 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1602 00001264 E835FDFFFF              	call print_sexpr
  1603 00001269 5F                      	pop rdi
  1604 0000126A 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1605 0000126E E95FFFFFFF              	jmp .Lcdr
  1606                                  
  1607                                  .Lvector:
  1608 00001273 488B4701                	mov rax, qword [rdi + 1] ; length
  1609 00001277 4883F800                	cmp rax, 0
  1610 0000127B 0F8484000000            	je .Lvector_empty
  1611 00001281 57                      	push rdi
  1612 00001282 48BF-                   	mov rdi, fmt_vector
  1612 00001284 [EF02000000000000] 
  1613 0000128C B800000000              	mov rax, 0
  1614                                  	ENTER
    33 00001291 C8000000            <1>  enter 0, 0
    34 00001295 4883E4F0            <1>  and rsp, ~15
  1615 00001299 E8(00000000)            	call printf
  1616                                  	LEAVE
    38 0000129E C9                  <1>  leave
  1617 0000129F 488B3C24                	mov rdi, qword [rsp]
  1618 000012A3 FF7701                  	push qword [rdi + 1]
  1619 000012A6 6A01                    	push 1
  1620 000012A8 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1621 000012AC E8EDFCFFFF              	call print_sexpr
  1622                                  .Lvector_loop:
  1623                                  	; [rsp] index
  1624                                  	; [rsp + 8*1] limit
  1625                                  	; [rsp + 8*2] vector
  1626 000012B1 488B0424                	mov rax, qword [rsp]
  1627 000012B5 483B442408              	cmp rax, qword [rsp + 8*1]
  1628 000012BA 7436                    	je .Lvector_end
  1629 000012BC 48BF-                   	mov rdi, fmt_space
  1629 000012BE [E902000000000000] 
  1630 000012C6 B800000000              	mov rax, 0
  1631                                  	ENTER
    33 000012CB C8000000            <1>  enter 0, 0
    34 000012CF 4883E4F0            <1>  and rsp, ~15
  1632 000012D3 E8(00000000)            	call printf
  1633                                  	LEAVE
    38 000012D8 C9                  <1>  leave
  1634 000012D9 488B0424                	mov rax, qword [rsp]
  1635 000012DD 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1636 000012E2 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1637 000012E7 E8B2FCFFFF              	call print_sexpr
  1638 000012EC 48FF0424                	inc qword [rsp]
  1639 000012F0 EBBF                    	jmp .Lvector_loop
  1640                                  
  1641                                  .Lvector_end:
  1642 000012F2 4883C418                	add rsp, 8*3
  1643 000012F6 48BF-                   	mov rdi, fmt_rparen
  1643 000012F8 [E702000000000000] 
  1644 00001300 E9F8010000              	jmp .Lemit	
  1645                                  
  1646                                  .Lvector_empty:
  1647 00001305 48BF-                   	mov rdi, fmt_empty_vector
  1647 00001307 [EB02000000000000] 
  1648 0000130F E9E9010000              	jmp .Lemit
  1649                                  
  1650                                  .Lreal:
  1651 00001314 FF7701                  	push qword [rdi + 1]
  1652 00001317 F20F100424              	movsd xmm0, qword [rsp]
  1653 0000131C 4883C408                	add rsp, 8*1
  1654 00001320 48BF-                   	mov rdi, fmt_real
  1654 00001322 [F202000000000000] 
  1655 0000132A B801000000              	mov rax, 1
  1656                                  	ENTER
    33 0000132F C8000000            <1>  enter 0, 0
    34 00001333 4883E4F0            <1>  and rsp, ~15
  1657 00001337 E8(00000000)            	call printf
  1658                                  	LEAVE
    38 0000133C C9                  <1>  leave
  1659 0000133D E9D0010000              	jmp .Lend
  1660                                  
  1661                                  .Lrational:
  1662 00001342 488B7701                	mov rsi, qword [rdi + 1]
  1663 00001346 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1664 0000134A 4883FE00                	cmp rsi, 0
  1665 0000134E 7415                    	je .Lrat_zero
  1666 00001350 4883FA01                	cmp rdx, 1
  1667 00001354 741E                    	je .Lrat_int
  1668 00001356 48BF-                   	mov rdi, fmt_fraction
  1668 00001358 [F502000000000000] 
  1669 00001360 E998010000              	jmp .Lemit
  1670                                  
  1671                                  .Lrat_zero:
  1672 00001365 48BF-                   	mov rdi, fmt_zero
  1672 00001367 [FD02000000000000] 
  1673 0000136F E989010000              	jmp .Lemit
  1674                                  
  1675                                  .Lrat_int:
  1676 00001374 48BF-                   	mov rdi, fmt_int
  1676 00001376 [FF02000000000000] 
  1677 0000137E E97A010000              	jmp .Lemit
  1678                                  
  1679                                  .Lstring:
  1680 00001383 488D4709                	lea rax, [rdi + 1 + 8]
  1681 00001387 50                      	push rax
  1682 00001388 FF7701                  	push qword [rdi + 1]
  1683 0000138B 48BF-                   	mov rdi, fmt_dquote
  1683 0000138D [4303000000000000] 
  1684 00001395 B800000000              	mov rax, 0
  1685                                  	ENTER
    33 0000139A C8000000            <1>  enter 0, 0
    34 0000139E 4883E4F0            <1>  and rsp, ~15
  1686 000013A2 E8(00000000)            	call printf
  1687                                  	LEAVE
    38 000013A7 C9                  <1>  leave
  1688                                  .Lstring_loop:
  1689                                  	; qword [rsp]: limit
  1690                                  	; qword [rsp + 8*1]: char *
  1691 000013A8 48833C2400              	cmp qword [rsp], 0
  1692 000013AD 0F84FD000000            	je .Lstring_end
  1693 000013B3 488B442408              	mov rax, qword [rsp + 8*1]
  1694 000013B8 8A00                    	mov al, byte [rax]
  1695 000013BA 4825FF000000            	and rax, 255
  1696 000013C0 3C07                    	cmp al, 7
  1697 000013C2 7468                            je .Lstring_char_7
  1698 000013C4 3C08                            cmp al, 8
  1699 000013C6 7470                            je .Lstring_char_8
  1700 000013C8 3C09                            cmp al, 9
  1701 000013CA 7478                            je .Lstring_char_9
  1702 000013CC 3C0A                            cmp al, 10
  1703 000013CE 0F847C000000                    je .Lstring_char_10
  1704 000013D4 3C0B                            cmp al, 11
  1705 000013D6 0F8480000000                    je .Lstring_char_11
  1706 000013DC 3C0C                            cmp al, 12
  1707 000013DE 0F8484000000                    je .Lstring_char_12
  1708 000013E4 3C0D                            cmp al, 13
  1709 000013E6 0F8488000000                    je .Lstring_char_13
  1710 000013EC 3C22                            cmp al, 34
  1711 000013EE 0F848C000000                    je .Lstring_char_34
  1712 000013F4 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1714 000013F6 3C20                            cmp al, ' '
  1715 000013F8 0F8CA0000000                    jl .Lstring_char_hex
  1716 000013FE 48BF-                           mov rdi, fmt_string_char
  1716 00001400 [4503000000000000] 
  1717 00001408 4889C6                          mov rsi, rax
  1718                                  .Lstring_char_emit:
  1719 0000140B B800000000                      mov rax, 0
  1720                                          ENTER
    33 00001410 C8000000            <1>  enter 0, 0
    34 00001414 4883E4F0            <1>  and rsp, ~15
  1721 00001418 E8(00000000)                    call printf
  1722                                          LEAVE
    38 0000141D C9                  <1>  leave
  1723 0000141E 48FF0C24                        dec qword [rsp]
  1724 00001422 48FF442408                      inc qword [rsp + 8*1]
  1725 00001427 E97CFFFFFF                      jmp .Lstring_loop
  1726                                  
  1727                                  .Lstring_char_7:
  1728 0000142C 48BF-                           mov rdi, fmt_string_char_7
  1728 0000142E [4803000000000000] 
  1729 00001436 EBD3                            jmp .Lstring_char_emit
  1730                                  
  1731                                  .Lstring_char_8:
  1732 00001438 48BF-                           mov rdi, fmt_string_char_8
  1732 0000143A [4B03000000000000] 
  1733 00001442 EBC7                            jmp .Lstring_char_emit
  1734                                          
  1735                                  .Lstring_char_9:
  1736 00001444 48BF-                           mov rdi, fmt_string_char_9
  1736 00001446 [4E03000000000000] 
  1737 0000144E EBBB                            jmp .Lstring_char_emit
  1738                                  
  1739                                  .Lstring_char_10:
  1740 00001450 48BF-                           mov rdi, fmt_string_char_10
  1740 00001452 [5103000000000000] 
  1741 0000145A EBAF                            jmp .Lstring_char_emit
  1742                                  
  1743                                  .Lstring_char_11:
  1744 0000145C 48BF-                           mov rdi, fmt_string_char_11
  1744 0000145E [5403000000000000] 
  1745 00001466 EBA3                            jmp .Lstring_char_emit
  1746                                  
  1747                                  .Lstring_char_12:
  1748 00001468 48BF-                           mov rdi, fmt_string_char_12
  1748 0000146A [5703000000000000] 
  1749 00001472 EB97                            jmp .Lstring_char_emit
  1750                                  
  1751                                  .Lstring_char_13:
  1752 00001474 48BF-                           mov rdi, fmt_string_char_13
  1752 00001476 [5A03000000000000] 
  1753 0000147E EB8B                            jmp .Lstring_char_emit
  1754                                  
  1755                                  .Lstring_char_34:
  1756 00001480 48BF-                           mov rdi, fmt_string_char_34
  1756 00001482 [5D03000000000000] 
  1757 0000148A E97CFFFFFF                      jmp .Lstring_char_emit
  1758                                  
  1759                                  .Lstring_char_92:
  1760 0000148F 48BF-                           mov rdi, fmt_string_char_92
  1760 00001491 [6003000000000000] 
  1761 00001499 E96DFFFFFF                      jmp .Lstring_char_emit
  1762                                  
  1763                                  .Lstring_char_hex:
  1764 0000149E 48BF-                           mov rdi, fmt_string_char_hex
  1764 000014A0 [6303000000000000] 
  1765 000014A8 4889C6                          mov rsi, rax
  1766 000014AB E95BFFFFFF                      jmp .Lstring_char_emit        
  1767                                  
  1768                                  .Lstring_end:
  1769 000014B0 4883C410                	add rsp, 8 * 2
  1770 000014B4 48BF-                   	mov rdi, fmt_dquote
  1770 000014B6 [4303000000000000] 
  1771 000014BE EB3D                    	jmp .Lemit
  1772                                  
  1773                                  .Lunknown_sexpr_type:
  1774 000014C0 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1774 000014C2 [0303000000000000] 
  1775 000014CA 4825FF000000            	and rax, 255
  1776 000014D0 4889C2                  	mov rdx, rax
  1777 000014D3 4889F9                  	mov rcx, rdi
  1778 000014D6 488B3C25[00000000]      	mov rdi, qword [stderr]
  1779 000014DE B800000000              	mov rax, 0
  1780                                  	ENTER
    33 000014E3 C8000000            <1>  enter 0, 0
    34 000014E7 4883E4F0            <1>  and rsp, ~15
  1781 000014EB E8(00000000)            	call fprintf
  1782                                  	LEAVE
    38 000014F0 C9                  <1>  leave
  1783 000014F1 48C7C0FFFFFFFF          	mov rax, -1
  1784 000014F8 E8(00000000)            	call exit
  1785                                  
  1786                                  .Lemit:
  1787 000014FD B800000000              	mov rax, 0
  1788                                  	ENTER
    33 00001502 C8000000            <1>  enter 0, 0
    34 00001506 4883E4F0            <1>  and rsp, ~15
  1789 0000150A E8(00000000)            	call printf
  1790                                  	LEAVE
    38 0000150F C9                  <1>  leave
  1791 00001510 EB00                    	jmp .Lend
  1792                                  
  1793                                  .Lend:
  1794                                  	LEAVE
    38 00001512 C9                  <1>  leave
  1795 00001513 C3                      	ret
  1796                                  
  1797                                  ;;; rdi: address of free variable
  1798                                  ;;; rsi: address of code-pointer
  1799                                  bind_primitive:
  1800                                          ENTER
    33 00001514 C8000000            <1>  enter 0, 0
    34 00001518 4883E4F0            <1>  and rsp, ~15
  1801 0000151C 57                              push rdi
  1802 0000151D BF11000000                      mov rdi, (1 + 8 + 8)
  1803 00001522 E85CFAFFFF                      call malloc
  1804 00001527 5F                              pop rdi
  1805 00001528 C60005                          mov byte [rax], T_closure
  1806 0000152B 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1807 00001533 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1808 00001537 488907                          mov qword [rdi], rax
  1809                                          LEAVE
    38 0000153A C9                  <1>  leave
  1810 0000153B C3                              ret
  1811                                  
  1812                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1813                                  L_code_ptr_bin_apply:
  1814                                  	
  1815                                  L_code_ptr_is_null:
  1816                                          ENTER
    33 0000153C C8000000            <1>  enter 0, 0
    34 00001540 4883E4F0            <1>  and rsp, ~15
  1817 00001544 48837D1801                      cmp COUNT, 1
  1818 00001549 0F85A5100000                    jne L_error_arg_count_1
  1819 0000154F 488B4520                        mov rax, PARAM(0)
  1820 00001553 803801                          cmp byte [rax], T_nil
  1821 00001556 750C                            jne .L_false
  1822 00001558 48B8-                           mov rax, sob_boolean_true
  1822 0000155A [0300000000000000] 
  1823 00001562 EB0A                            jmp .L_end
  1824                                  .L_false:
  1825 00001564 48B8-                           mov rax, sob_boolean_false
  1825 00001566 [0200000000000000] 
  1826                                  .L_end:
  1827                                          LEAVE
    38 0000156E C9                  <1>  leave
  1828 0000156F C21800                          ret AND_KILL_FRAME(1)
  1829                                  
  1830                                  L_code_ptr_is_pair:
  1831                                          ENTER
    33 00001572 C8000000            <1>  enter 0, 0
    34 00001576 4883E4F0            <1>  and rsp, ~15
  1832 0000157A 48837D1801                      cmp COUNT, 1
  1833 0000157F 0F856F100000                    jne L_error_arg_count_1
  1834 00001585 488B4520                        mov rax, PARAM(0)
  1835 00001589 803821                          cmp byte [rax], T_pair
  1836 0000158C 750C                            jne .L_false
  1837 0000158E 48B8-                           mov rax, sob_boolean_true
  1837 00001590 [0300000000000000] 
  1838 00001598 EB0A                            jmp .L_end
  1839                                  .L_false:
  1840 0000159A 48B8-                           mov rax, sob_boolean_false
  1840 0000159C [0200000000000000] 
  1841                                  .L_end:
  1842                                          LEAVE
    38 000015A4 C9                  <1>  leave
  1843 000015A5 C21800                          ret AND_KILL_FRAME(1)
  1844                                          
  1845                                  L_code_ptr_is_void:
  1846                                          ENTER
    33 000015A8 C8000000            <1>  enter 0, 0
    34 000015AC 4883E4F0            <1>  and rsp, ~15
  1847 000015B0 48837D1801                      cmp COUNT, 1
  1848 000015B5 0F8539100000                    jne L_error_arg_count_1
  1849 000015BB 488B4520                        mov rax, PARAM(0)
  1850 000015BF 803800                          cmp byte [rax], T_void
  1851 000015C2 750C                            jne .L_false
  1852 000015C4 48B8-                           mov rax, sob_boolean_true
  1852 000015C6 [0300000000000000] 
  1853 000015CE EB0A                            jmp .L_end
  1854                                  .L_false:
  1855 000015D0 48B8-                           mov rax, sob_boolean_false
  1855 000015D2 [0200000000000000] 
  1856                                  .L_end:
  1857                                          LEAVE
    38 000015DA C9                  <1>  leave
  1858 000015DB C21800                          ret AND_KILL_FRAME(1)
  1859                                  
  1860                                  L_code_ptr_is_char:
  1861                                          ENTER
    33 000015DE C8000000            <1>  enter 0, 0
    34 000015E2 4883E4F0            <1>  and rsp, ~15
  1862 000015E6 48837D1801                      cmp COUNT, 1
  1863 000015EB 0F8503100000                    jne L_error_arg_count_1
  1864 000015F1 488B4520                        mov rax, PARAM(0)
  1865 000015F5 803802                          cmp byte [rax], T_char
  1866 000015F8 750C                            jne .L_false
  1867 000015FA 48B8-                           mov rax, sob_boolean_true
  1867 000015FC [0300000000000000] 
  1868 00001604 EB0A                            jmp .L_end
  1869                                  .L_false:
  1870 00001606 48B8-                           mov rax, sob_boolean_false
  1870 00001608 [0200000000000000] 
  1871                                  .L_end:
  1872                                          LEAVE
    38 00001610 C9                  <1>  leave
  1873 00001611 C21800                          ret AND_KILL_FRAME(1)
  1874                                  
  1875                                  L_code_ptr_is_string:
  1876                                          ENTER
    33 00001614 C8000000            <1>  enter 0, 0
    34 00001618 4883E4F0            <1>  and rsp, ~15
  1877 0000161C 48837D1801                      cmp COUNT, 1
  1878 00001621 0F85CD0F0000                    jne L_error_arg_count_1
  1879 00001627 488B4520                        mov rax, PARAM(0)
  1880 0000162B 803803                          cmp byte [rax], T_string
  1881 0000162E 750C                            jne .L_false
  1882 00001630 48B8-                           mov rax, sob_boolean_true
  1882 00001632 [0300000000000000] 
  1883 0000163A EB0A                            jmp .L_end
  1884                                  .L_false:
  1885 0000163C 48B8-                           mov rax, sob_boolean_false
  1885 0000163E [0200000000000000] 
  1886                                  .L_end:
  1887                                          LEAVE
    38 00001646 C9                  <1>  leave
  1888 00001647 C21800                          ret AND_KILL_FRAME(1)
  1889                                  
  1890                                  L_code_ptr_is_symbol:
  1891                                          ENTER
    33 0000164A C8000000            <1>  enter 0, 0
    34 0000164E 4883E4F0            <1>  and rsp, ~15
  1892 00001652 48837D1801                      cmp COUNT, 1
  1893 00001657 0F85970F0000                    jne L_error_arg_count_1
  1894 0000165D 488B4520                        mov rax, PARAM(0)
  1895 00001661 803804                          cmp byte [rax], T_symbol
  1896 00001664 750C                            jne .L_false
  1897 00001666 48B8-                           mov rax, sob_boolean_true
  1897 00001668 [0300000000000000] 
  1898 00001670 EB0A                            jmp .L_end
  1899                                  .L_false:
  1900 00001672 48B8-                           mov rax, sob_boolean_false
  1900 00001674 [0200000000000000] 
  1901                                  .L_end:
  1902                                          LEAVE
    38 0000167C C9                  <1>  leave
  1903 0000167D C21800                          ret AND_KILL_FRAME(1)
  1904                                  
  1905                                  L_code_ptr_is_vector:
  1906                                          ENTER
    33 00001680 C8000000            <1>  enter 0, 0
    34 00001684 4883E4F0            <1>  and rsp, ~15
  1907 00001688 48837D1801                      cmp COUNT, 1
  1908 0000168D 0F85610F0000                    jne L_error_arg_count_1
  1909 00001693 488B4520                        mov rax, PARAM(0)
  1910 00001697 803822                          cmp byte [rax], T_vector
  1911 0000169A 750C                            jne .L_false
  1912 0000169C 48B8-                           mov rax, sob_boolean_true
  1912 0000169E [0300000000000000] 
  1913 000016A6 EB0A                            jmp .L_end
  1914                                  .L_false:
  1915 000016A8 48B8-                           mov rax, sob_boolean_false
  1915 000016AA [0200000000000000] 
  1916                                  .L_end:
  1917                                          LEAVE
    38 000016B2 C9                  <1>  leave
  1918 000016B3 C21800                          ret AND_KILL_FRAME(1)
  1919                                  
  1920                                  L_code_ptr_is_closure:
  1921                                          ENTER
    33 000016B6 C8000000            <1>  enter 0, 0
    34 000016BA 4883E4F0            <1>  and rsp, ~15
  1922 000016BE 48837D1801                      cmp COUNT, 1
  1923 000016C3 0F852B0F0000                    jne L_error_arg_count_1
  1924 000016C9 488B4520                        mov rax, PARAM(0)
  1925 000016CD 803805                          cmp byte [rax], T_closure
  1926 000016D0 750C                            jne .L_false
  1927 000016D2 48B8-                           mov rax, sob_boolean_true
  1927 000016D4 [0300000000000000] 
  1928 000016DC EB0A                            jmp .L_end
  1929                                  .L_false:
  1930 000016DE 48B8-                           mov rax, sob_boolean_false
  1930 000016E0 [0200000000000000] 
  1931                                  .L_end:
  1932                                          LEAVE
    38 000016E8 C9                  <1>  leave
  1933 000016E9 C21800                          ret AND_KILL_FRAME(1)
  1934                                  
  1935                                  L_code_ptr_is_real:
  1936                                          ENTER
    33 000016EC C8000000            <1>  enter 0, 0
    34 000016F0 4883E4F0            <1>  and rsp, ~15
  1937 000016F4 48837D1801                      cmp COUNT, 1
  1938 000016F9 0F85F50E0000                    jne L_error_arg_count_1
  1939 000016FF 488B4520                        mov rax, PARAM(0)
  1940 00001703 803812                          cmp byte [rax], T_real
  1941 00001706 750C                            jne .L_false
  1942 00001708 48B8-                           mov rax, sob_boolean_true
  1942 0000170A [0300000000000000] 
  1943 00001712 EB0A                            jmp .L_end
  1944                                  .L_false:
  1945 00001714 48B8-                           mov rax, sob_boolean_false
  1945 00001716 [0200000000000000] 
  1946                                  .L_end:
  1947                                          LEAVE
    38 0000171E C9                  <1>  leave
  1948 0000171F C21800                          ret AND_KILL_FRAME(1)
  1949                                  
  1950                                  L_code_ptr_is_rational:
  1951                                          ENTER
    33 00001722 C8000000            <1>  enter 0, 0
    34 00001726 4883E4F0            <1>  and rsp, ~15
  1952 0000172A 48837D1801                      cmp COUNT, 1
  1953 0000172F 0F85BF0E0000                    jne L_error_arg_count_1
  1954 00001735 488B4520                        mov rax, PARAM(0)
  1955 00001739 803811                          cmp byte [rax], T_rational
  1956 0000173C 750C                            jne .L_false
  1957 0000173E 48B8-                           mov rax, sob_boolean_true
  1957 00001740 [0300000000000000] 
  1958 00001748 EB0A                            jmp .L_end
  1959                                  .L_false:
  1960 0000174A 48B8-                           mov rax, sob_boolean_false
  1960 0000174C [0200000000000000] 
  1961                                  .L_end:
  1962                                          LEAVE
    38 00001754 C9                  <1>  leave
  1963 00001755 C21800                          ret AND_KILL_FRAME(1)
  1964                                  
  1965                                  L_code_ptr_is_boolean:
  1966                                          ENTER
    33 00001758 C8000000            <1>  enter 0, 0
    34 0000175C 4883E4F0            <1>  and rsp, ~15
  1967 00001760 48837D1801                      cmp COUNT, 1
  1968 00001765 0F85890E0000                    jne L_error_arg_count_1
  1969 0000176B 488B4520                        mov rax, PARAM(0)
  1970 0000176F 8A18                            mov bl, byte [rax]
  1971 00001771 80E308                          and bl, T_boolean
  1972 00001774 740C                            je .L_false
  1973 00001776 48B8-                           mov rax, sob_boolean_true
  1973 00001778 [0300000000000000] 
  1974 00001780 EB0A                            jmp .L_end
  1975                                  .L_false:
  1976 00001782 48B8-                           mov rax, sob_boolean_false
  1976 00001784 [0200000000000000] 
  1977                                  .L_end:
  1978                                          LEAVE
    38 0000178C C9                  <1>  leave
  1979 0000178D C21800                          ret AND_KILL_FRAME(1)
  1980                                          
  1981                                  L_code_ptr_is_number:
  1982                                          ENTER
    33 00001790 C8000000            <1>  enter 0, 0
    34 00001794 4883E4F0            <1>  and rsp, ~15
  1983 00001798 48837D1801                      cmp COUNT, 1
  1984 0000179D 0F85510E0000                    jne L_error_arg_count_1
  1985 000017A3 488B4520                        mov rax, PARAM(0)
  1986 000017A7 8A18                            mov bl, byte [rax]
  1987 000017A9 80E310                          and bl, T_number
  1988 000017AC 740C                            je .L_false
  1989 000017AE 48B8-                           mov rax, sob_boolean_true
  1989 000017B0 [0300000000000000] 
  1990 000017B8 EB0A                            jmp .L_end
  1991                                  .L_false:
  1992 000017BA 48B8-                           mov rax, sob_boolean_false
  1992 000017BC [0200000000000000] 
  1993                                  .L_end:
  1994                                          LEAVE
    38 000017C4 C9                  <1>  leave
  1995 000017C5 C21800                          ret AND_KILL_FRAME(1)
  1996                                          
  1997                                  L_code_ptr_is_collection:
  1998                                          ENTER
    33 000017C8 C8000000            <1>  enter 0, 0
    34 000017CC 4883E4F0            <1>  and rsp, ~15
  1999 000017D0 48837D1801                      cmp COUNT, 1
  2000 000017D5 0F85190E0000                    jne L_error_arg_count_1
  2001 000017DB 488B4520                        mov rax, PARAM(0)
  2002 000017DF 8A18                            mov bl, byte [rax]
  2003 000017E1 80E320                          and bl, T_collection
  2004 000017E4 740C                            je .L_false
  2005 000017E6 48B8-                           mov rax, sob_boolean_true
  2005 000017E8 [0300000000000000] 
  2006 000017F0 EB0A                            jmp .L_end
  2007                                  .L_false:
  2008 000017F2 48B8-                           mov rax, sob_boolean_false
  2008 000017F4 [0200000000000000] 
  2009                                  .L_end:
  2010                                          LEAVE
    38 000017FC C9                  <1>  leave
  2011 000017FD C21800                          ret AND_KILL_FRAME(1)
  2012                                  
  2013                                  L_code_ptr_cons:
  2014                                          ENTER
    33 00001800 C8000000            <1>  enter 0, 0
    34 00001804 4883E4F0            <1>  and rsp, ~15
  2015 00001808 48837D1802                      cmp COUNT, 2
  2016 0000180D 0F85160E0000                    jne L_error_arg_count_2
  2017 00001813 BF11000000                      mov rdi, (1 + 8 + 8)
  2018 00001818 E866F7FFFF                      call malloc
  2019 0000181D C60021                          mov byte [rax], T_pair
  2020 00001820 488B5D20                        mov rbx, PARAM(0)
  2021 00001824 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2022 00001828 488B5D28                        mov rbx, PARAM(1)
  2023 0000182C 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2024                                          LEAVE
    38 00001830 C9                  <1>  leave
  2025 00001831 C22000                          ret AND_KILL_FRAME(2)
  2026                                  
  2027                                  L_code_ptr_display_sexpr:
  2028                                          ENTER
    33 00001834 C8000000            <1>  enter 0, 0
    34 00001838 4883E4F0            <1>  and rsp, ~15
  2029 0000183C 48837D1801                      cmp COUNT, 1
  2030 00001841 0F85AD0D0000                    jne L_error_arg_count_1
  2031 00001847 488B7D20                        mov rdi, PARAM(0)
  2032 0000184B E84EF7FFFF                      call print_sexpr
  2033 00001850 48B8-                           mov rax, sob_void
  2033 00001852 [0000000000000000] 
  2034                                          LEAVE
    38 0000185A C9                  <1>  leave
  2035 0000185B C21800                          ret AND_KILL_FRAME(1)
  2036                                  
  2037                                  L_code_ptr_write_char:
  2038                                          ENTER
    33 0000185E C8000000            <1>  enter 0, 0
    34 00001862 4883E4F0            <1>  and rsp, ~15
  2039 00001866 48837D1801                      cmp COUNT, 1
  2040 0000186B 0F85830D0000                    jne L_error_arg_count_1
  2041 00001871 488B4520                        mov rax, PARAM(0)
  2042                                          assert_char(rax)
    42 00001875 803802              <1>  cmp byte [%1], %2
    43 00001878 0F854A0E0000        <1>  jne L_error_incorrect_type
  2043 0000187E 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  2044 00001881 4825FF000000                    and rax, 255
  2045 00001887 48BF-                           mov rdi, fmt_char
  2045 00001889 [6903000000000000] 
  2046 00001891 4889C6                          mov rsi, rax
  2047 00001894 B800000000                      mov rax, 0
  2048                                  	ENTER
    33 00001899 C8000000            <1>  enter 0, 0
    34 0000189D 4883E4F0            <1>  and rsp, ~15
  2049 000018A1 E8(00000000)                    call printf
  2050                                  	LEAVE
    38 000018A6 C9                  <1>  leave
  2051 000018A7 48B8-                           mov rax, sob_void
  2051 000018A9 [0000000000000000] 
  2052                                          LEAVE
    38 000018B1 C9                  <1>  leave
  2053 000018B2 C21800                          ret AND_KILL_FRAME(1)
  2054                                  
  2055                                  L_code_ptr_car:
  2056                                          ENTER
    33 000018B5 C8000000            <1>  enter 0, 0
    34 000018B9 4883E4F0            <1>  and rsp, ~15
  2057 000018BD 48837D1801                      cmp COUNT, 1
  2058 000018C2 0F852C0D0000                    jne L_error_arg_count_1
  2059 000018C8 488B4520                        mov rax, PARAM(0)
  2060                                          assert_pair(rax)
    42 000018CC 803821              <1>  cmp byte [%1], %2
    43 000018CF 0F85F30D0000        <1>  jne L_error_incorrect_type
  2061 000018D5 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  2062                                          LEAVE
    38 000018D9 C9                  <1>  leave
  2063 000018DA C21800                          ret AND_KILL_FRAME(1)
  2064                                          
  2065                                  L_code_ptr_cdr:
  2066                                          ENTER
    33 000018DD C8000000            <1>  enter 0, 0
    34 000018E1 4883E4F0            <1>  and rsp, ~15
  2067 000018E5 48837D1801                      cmp COUNT, 1
  2068 000018EA 0F85040D0000                    jne L_error_arg_count_1
  2069 000018F0 488B4520                        mov rax, PARAM(0)
  2070                                          assert_pair(rax)
    42 000018F4 803821              <1>  cmp byte [%1], %2
    43 000018F7 0F85CB0D0000        <1>  jne L_error_incorrect_type
  2071 000018FD 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  2072                                          LEAVE
    38 00001901 C9                  <1>  leave
  2073 00001902 C21800                          ret AND_KILL_FRAME(1)
  2074                                          
  2075                                  L_code_ptr_string_length:
  2076                                          ENTER
    33 00001905 C8000000            <1>  enter 0, 0
    34 00001909 4883E4F0            <1>  and rsp, ~15
  2077 0000190D 48837D1801                      cmp COUNT, 1
  2078 00001912 0F85DC0C0000                    jne L_error_arg_count_1
  2079 00001918 488B4520                        mov rax, PARAM(0)
  2080                                          assert_string(rax)
    42 0000191C 803803              <1>  cmp byte [%1], %2
    43 0000191F 0F85A30D0000        <1>  jne L_error_incorrect_type
  2081 00001925 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  2082 00001929 E83A0C0000                      call make_integer
  2083                                          LEAVE
    38 0000192E C9                  <1>  leave
  2084 0000192F C21800                          ret AND_KILL_FRAME(1)
  2085                                  
  2086                                  L_code_ptr_vector_length:
  2087                                          ENTER
    33 00001932 C8000000            <1>  enter 0, 0
    34 00001936 4883E4F0            <1>  and rsp, ~15
  2088 0000193A 48837D1801                      cmp COUNT, 1
  2089 0000193F 0F85AF0C0000                    jne L_error_arg_count_1
  2090 00001945 488B4520                        mov rax, PARAM(0)
  2091                                          assert_vector(rax)
    42 00001949 803822              <1>  cmp byte [%1], %2
    43 0000194C 0F85760D0000        <1>  jne L_error_incorrect_type
  2092 00001952 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  2093 00001956 E80D0C0000                      call make_integer
  2094                                          LEAVE
    38 0000195B C9                  <1>  leave
  2095 0000195C C21800                          ret AND_KILL_FRAME(1)
  2096                                  
  2097                                  L_code_ptr_real_to_integer:
  2098                                          ENTER
    33 0000195F C8000000            <1>  enter 0, 0
    34 00001963 4883E4F0            <1>  and rsp, ~15
  2099 00001967 48837D1801                      cmp COUNT, 1
  2100 0000196C 0F85820C0000                    jne L_error_arg_count_1
  2101 00001972 488B5D20                        mov rbx, PARAM(0)
  2102                                          assert_real(rbx)
    42 00001976 803B12              <1>  cmp byte [%1], %2
    43 00001979 0F85490D0000        <1>  jne L_error_incorrect_type
  2103 0000197F F20F104301                      movsd xmm0, qword [rbx + 1]
  2104 00001984 F2480F2CF8                      cvttsd2si rdi, xmm0
  2105 00001989 E8DA0B0000                      call make_integer
  2106                                          LEAVE
    38 0000198E C9                  <1>  leave
  2107 0000198F C21800                          ret AND_KILL_FRAME(1)
  2108                                  
  2109                                  L_code_ptr_exit:
  2110                                          ENTER
    33 00001992 C8000000            <1>  enter 0, 0
    34 00001996 4883E4F0            <1>  and rsp, ~15
  2111 0000199A 48837D1800                      cmp COUNT, 0
  2112 0000199F 0F851A0C0000                    jne L_error_arg_count_0
  2113 000019A5 B800000000                      mov rax, 0
  2114 000019AA E8(00000000)                    call exit
  2115                                  
  2116                                  L_code_ptr_integer_to_real:
  2117                                          ENTER
    33 000019AF C8000000            <1>  enter 0, 0
    34 000019B3 4883E4F0            <1>  and rsp, ~15
  2118 000019B7 48837D1801                      cmp COUNT, 1
  2119 000019BC 0F85320C0000                    jne L_error_arg_count_1
  2120 000019C2 488B4520                        mov rax, PARAM(0)
  2121                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000019C6 803811              <2>  cmp byte [%1], %2
    43 000019C9 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000019CF 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000019D4 0F85EE0C0000        <1>  jne L_error_incorrect_type
  2122 000019DA FF7001                          push qword [rax + 1]
  2123 000019DD F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2124 000019E3 E8640B0000                      call make_real
  2125                                          LEAVE
    38 000019E8 C9                  <1>  leave
  2126 000019E9 C21800                          ret AND_KILL_FRAME(1)
  2127                                  
  2128                                  L_code_ptr_rational_to_real:
  2129                                          ENTER
    33 000019EC C8000000            <1>  enter 0, 0
    34 000019F0 4883E4F0            <1>  and rsp, ~15
  2130 000019F4 48837D1801                      cmp COUNT, 1
  2131 000019F9 0F85F50B0000                    jne L_error_arg_count_1
  2132 000019FF 488B4520                        mov rax, PARAM(0)
  2133                                          assert_rational(rax)
    42 00001A03 803811              <1>  cmp byte [%1], %2
    43 00001A06 0F85BC0C0000        <1>  jne L_error_incorrect_type
  2134 00001A0C FF7001                          push qword [rax + 1]
  2135 00001A0F F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2136 00001A15 FF7009                          push qword [rax + 1 + 8]
  2137 00001A18 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  2138 00001A1E F20F5EC1                        divsd xmm0, xmm1
  2139 00001A22 E8250B0000                      call make_real
  2140                                          LEAVE
    38 00001A27 C9                  <1>  leave
  2141 00001A28 C21800                          ret AND_KILL_FRAME(1)
  2142                                  
  2143                                  L_code_ptr_char_to_integer:
  2144                                          ENTER
    33 00001A2B C8000000            <1>  enter 0, 0
    34 00001A2F 4883E4F0            <1>  and rsp, ~15
  2145 00001A33 48837D1801                      cmp COUNT, 1
  2146 00001A38 0F85B60B0000                    jne L_error_arg_count_1
  2147 00001A3E 488B4520                        mov rax, PARAM(0)
  2148                                          assert_char(rax)
    42 00001A42 803802              <1>  cmp byte [%1], %2
    43 00001A45 0F857D0C0000        <1>  jne L_error_incorrect_type
  2149 00001A4B 8A4001                          mov al, byte [rax + 1]
  2150 00001A4E 4825FF000000                    and rax, 255
  2151 00001A54 4889C7                          mov rdi, rax
  2152 00001A57 E80C0B0000                      call make_integer
  2153                                          LEAVE
    38 00001A5C C9                  <1>  leave
  2154 00001A5D C21800                          ret AND_KILL_FRAME(1)
  2155                                  
  2156                                  L_code_ptr_integer_to_char:
  2157                                          ENTER
    33 00001A60 C8000000            <1>  enter 0, 0
    34 00001A64 4883E4F0            <1>  and rsp, ~15
  2158 00001A68 48837D1801                      cmp COUNT, 1
  2159 00001A6D 0F85810B0000                    jne L_error_arg_count_1
  2160 00001A73 488B4520                        mov rax, PARAM(0)
  2161                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00001A77 803811              <2>  cmp byte [%1], %2
    43 00001A7A 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00001A80 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A85 0F853D0C0000        <1>  jne L_error_incorrect_type
  2162 00001A8B 488B5801                        mov rbx, qword [rax + 1]
  2163 00001A8F 4883FB00                        cmp rbx, 0
  2164 00001A93 0F8EF50A0000                    jle L_error_integer_range
  2165 00001A99 4881FB00010000                  cmp rbx, 256
  2166 00001AA0 0F8DE80A0000                    jge L_error_integer_range
  2167 00001AA6 BF02000000                      mov rdi, (1 + 1)
  2168 00001AAB E8D3F4FFFF                      call malloc
  2169 00001AB0 C60002                          mov byte [rax], T_char
  2170 00001AB3 885801                          mov byte [rax + 1], bl
  2171                                          LEAVE
    38 00001AB6 C9                  <1>  leave
  2172 00001AB7 C21800                          ret AND_KILL_FRAME(1)
  2173                                  
  2174                                  L_code_ptr_trng:
  2175                                          ENTER
    33 00001ABA C8000000            <1>  enter 0, 0
    34 00001ABE 4883E4F0            <1>  and rsp, ~15
  2176 00001AC2 48837D1800                      cmp COUNT, 0
  2177 00001AC7 0F85F20A0000                    jne L_error_arg_count_0
  2178 00001ACD 480FC7F7                        rdrand rdi
  2179 00001AD1 48D1EF                          shr rdi, 1
  2180 00001AD4 E88F0A0000                      call make_integer
  2181                                          LEAVE
    38 00001AD9 C9                  <1>  leave
  2182 00001ADA C21000                          ret AND_KILL_FRAME(0)
  2183                                  
  2184                                  L_code_ptr_is_zero:
  2185                                          ENTER
    33 00001ADD C8000000            <1>  enter 0, 0
    34 00001AE1 4883E4F0            <1>  and rsp, ~15
  2186 00001AE5 48837D1801                      cmp COUNT, 1
  2187 00001AEA 0F85040B0000                    jne L_error_arg_count_1
  2188 00001AF0 488B4520                        mov rax, PARAM(0)
  2189 00001AF4 803811                          cmp byte [rax], T_rational
  2190 00001AF7 740A                            je .L_rational
  2191 00001AF9 803812                          cmp byte [rax], T_real
  2192 00001AFC 740E                            je .L_real
  2193 00001AFE E9C50B0000                      jmp L_error_incorrect_type
  2194                                  .L_rational:
  2195 00001B03 4883780100                      cmp qword [rax + 1], 0
  2196 00001B08 7420                            je .L_zero
  2197 00001B0A EB12                            jmp .L_not_zero
  2198                                  .L_real:
  2199 00001B0C 660FEFC0                        pxor xmm0, xmm0
  2200 00001B10 FF7001                          push qword [rax + 1]
  2201 00001B13 F20F100C24                      movsd xmm1, qword [rsp]
  2202 00001B18 660F2EC1                        ucomisd xmm0, xmm1
  2203 00001B1C 740C                            je .L_zero
  2204                                  .L_not_zero:
  2205 00001B1E 48B8-                           mov rax, sob_boolean_false
  2205 00001B20 [0200000000000000] 
  2206 00001B28 EB0A                            jmp .L_end
  2207                                  .L_zero:
  2208 00001B2A 48B8-                           mov rax, sob_boolean_true
  2208 00001B2C [0300000000000000] 
  2209                                  .L_end:
  2210                                          LEAVE
    38 00001B34 C9                  <1>  leave
  2211 00001B35 C21800                          ret AND_KILL_FRAME(1)
  2212                                  
  2213                                  L_code_ptr_is_integer:
  2214                                          ENTER
    33 00001B38 C8000000            <1>  enter 0, 0
    34 00001B3C 4883E4F0            <1>  and rsp, ~15
  2215 00001B40 48837D1801                      cmp COUNT, 1
  2216 00001B45 0F85A90A0000                    jne L_error_arg_count_1
  2217 00001B4B 488B4520                        mov rax, PARAM(0)
  2218 00001B4F 803811                          cmp byte [rax], T_rational
  2219 00001B52 7513                            jne .L_false
  2220 00001B54 4883780901                      cmp qword [rax + 1 + 8], 1
  2221 00001B59 750C                            jne .L_false
  2222 00001B5B 48B8-                           mov rax, sob_boolean_true
  2222 00001B5D [0300000000000000] 
  2223 00001B65 EB0A                            jmp .L_exit
  2224                                  .L_false:
  2225 00001B67 48B8-                           mov rax, sob_boolean_false
  2225 00001B69 [0200000000000000] 
  2226                                  .L_exit:
  2227                                          LEAVE
    38 00001B71 C9                  <1>  leave
  2228 00001B72 C21800                          ret AND_KILL_FRAME(1)
  2229                                  
  2230                                  L_code_ptr_raw_bin_add_rr:
  2231                                          ENTER
    33 00001B75 C8000000            <1>  enter 0, 0
    34 00001B79 4883E4F0            <1>  and rsp, ~15
  2232 00001B7D 48837D1802                      cmp COUNT, 2
  2233 00001B82 0F85A10A0000                    jne L_error_arg_count_2
  2234 00001B88 488B5D20                        mov rbx, PARAM(0)
  2235                                          assert_real(rbx)
    42 00001B8C 803B12              <1>  cmp byte [%1], %2
    43 00001B8F 0F85330B0000        <1>  jne L_error_incorrect_type
  2236 00001B95 488B4D28                        mov rcx, PARAM(1)
  2237                                          assert_real(rcx)
    42 00001B99 803912              <1>  cmp byte [%1], %2
    43 00001B9C 0F85260B0000        <1>  jne L_error_incorrect_type
  2238 00001BA2 F20F104301                      movsd xmm0, qword [rbx + 1]
  2239 00001BA7 F20F104901                      movsd xmm1, qword [rcx + 1]
  2240 00001BAC F20F58C1                        addsd xmm0, xmm1
  2241 00001BB0 E897090000                      call make_real
  2242                                          LEAVE
    38 00001BB5 C9                  <1>  leave
  2243 00001BB6 C22000                          ret AND_KILL_FRAME(2)
  2244                                  
  2245                                  L_code_ptr_raw_bin_sub_rr:
  2246                                          ENTER
    33 00001BB9 C8000000            <1>  enter 0, 0
    34 00001BBD 4883E4F0            <1>  and rsp, ~15
  2247 00001BC1 48837D1802                      cmp COUNT, 2
  2248 00001BC6 0F855D0A0000                    jne L_error_arg_count_2
  2249 00001BCC 488B5D20                        mov rbx, PARAM(0)
  2250                                          assert_real(rbx)
    42 00001BD0 803B12              <1>  cmp byte [%1], %2
    43 00001BD3 0F85EF0A0000        <1>  jne L_error_incorrect_type
  2251 00001BD9 488B4D28                        mov rcx, PARAM(1)
  2252                                          assert_real(rcx)
    42 00001BDD 803912              <1>  cmp byte [%1], %2
    43 00001BE0 0F85E20A0000        <1>  jne L_error_incorrect_type
  2253 00001BE6 F20F104301                      movsd xmm0, qword [rbx + 1]
  2254 00001BEB F20F104901                      movsd xmm1, qword [rcx + 1]
  2255 00001BF0 F20F5CC1                        subsd xmm0, xmm1
  2256 00001BF4 E853090000                      call make_real
  2257                                          LEAVE
    38 00001BF9 C9                  <1>  leave
  2258 00001BFA C22000                          ret AND_KILL_FRAME(2)
  2259                                  
  2260                                  L_code_ptr_raw_bin_mul_rr:
  2261                                          ENTER
    33 00001BFD C8000000            <1>  enter 0, 0
    34 00001C01 4883E4F0            <1>  and rsp, ~15
  2262 00001C05 48837D1802                      cmp COUNT, 2
  2263 00001C0A 0F85190A0000                    jne L_error_arg_count_2
  2264 00001C10 488B5D20                        mov rbx, PARAM(0)
  2265                                          assert_real(rbx)
    42 00001C14 803B12              <1>  cmp byte [%1], %2
    43 00001C17 0F85AB0A0000        <1>  jne L_error_incorrect_type
  2266 00001C1D 488B4D28                        mov rcx, PARAM(1)
  2267                                          assert_real(rcx)
    42 00001C21 803912              <1>  cmp byte [%1], %2
    43 00001C24 0F859E0A0000        <1>  jne L_error_incorrect_type
  2268 00001C2A F20F104301                      movsd xmm0, qword [rbx + 1]
  2269 00001C2F F20F104901                      movsd xmm1, qword [rcx + 1]
  2270 00001C34 F20F59C1                        mulsd xmm0, xmm1
  2271 00001C38 E80F090000                      call make_real
  2272                                          LEAVE
    38 00001C3D C9                  <1>  leave
  2273 00001C3E C22000                          ret AND_KILL_FRAME(2)
  2274                                  
  2275                                  L_code_ptr_raw_bin_div_rr:
  2276                                          ENTER
    33 00001C41 C8000000            <1>  enter 0, 0
    34 00001C45 4883E4F0            <1>  and rsp, ~15
  2277 00001C49 48837D1802                      cmp COUNT, 2
  2278 00001C4E 0F85D5090000                    jne L_error_arg_count_2
  2279 00001C54 488B5D20                        mov rbx, PARAM(0)
  2280                                          assert_real(rbx)
    42 00001C58 803B12              <1>  cmp byte [%1], %2
    43 00001C5B 0F85670A0000        <1>  jne L_error_incorrect_type
  2281 00001C61 488B4D28                        mov rcx, PARAM(1)
  2282                                          assert_real(rcx)
    42 00001C65 803912              <1>  cmp byte [%1], %2
    43 00001C68 0F855A0A0000        <1>  jne L_error_incorrect_type
  2283 00001C6E F20F104301                      movsd xmm0, qword [rbx + 1]
  2284 00001C73 F20F104901                      movsd xmm1, qword [rcx + 1]
  2285 00001C78 660FEFD2                        pxor xmm2, xmm2
  2286 00001C7C 660F2ECA                        ucomisd xmm1, xmm2
  2287 00001C80 0F84730A0000                    je L_error_division_by_zero
  2288 00001C86 F20F5EC1                        divsd xmm0, xmm1
  2289 00001C8A E8BD080000                      call make_real
  2290                                          LEAVE
    38 00001C8F C9                  <1>  leave
  2291 00001C90 C22000                          ret AND_KILL_FRAME(2)
  2292                                  
  2293                                  L_code_ptr_raw_bin_add_qq:
  2294                                          ENTER
    33 00001C93 C8000000            <1>  enter 0, 0
    34 00001C97 4883E4F0            <1>  and rsp, ~15
  2295 00001C9B 48837D1802                      cmp COUNT, 2
  2296 00001CA0 0F8583090000                    jne L_error_arg_count_2
  2297 00001CA6 4C8B4520                        mov r8, PARAM(0)
  2298                                          assert_rational(r8)
    42 00001CAA 41803811            <1>  cmp byte [%1], %2
    43 00001CAE 0F85140A0000        <1>  jne L_error_incorrect_type
  2299 00001CB4 4C8B4D28                        mov r9, PARAM(1)
  2300                                          assert_rational(r9)
    42 00001CB8 41803911            <1>  cmp byte [%1], %2
    43 00001CBC 0F85060A0000        <1>  jne L_error_incorrect_type
  2301 00001CC2 498B4001                        mov rax, qword [r8 + 1] ; num1
  2302 00001CC6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2303 00001CCA 4899                            cqo
  2304 00001CCC 48F7EB                          imul rbx
  2305 00001CCF 4889C6                          mov rsi, rax
  2306 00001CD2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2307 00001CD6 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2308 00001CDA 4899                            cqo
  2309 00001CDC 48F7EB                          imul rbx
  2310 00001CDF 4801C6                          add rsi, rax
  2311 00001CE2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2312 00001CE6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2313 00001CEA 4899                            cqo
  2314 00001CEC 48F7EB                          imul rbx
  2315 00001CEF 4889C7                          mov rdi, rax
  2316 00001CF2 E827010000                      call normalize_rational
  2317                                          LEAVE
    38 00001CF7 C9                  <1>  leave
  2318 00001CF8 C22000                          ret AND_KILL_FRAME(2)
  2319                                  
  2320                                  L_code_ptr_raw_bin_sub_qq:
  2321                                          ENTER
    33 00001CFB C8000000            <1>  enter 0, 0
    34 00001CFF 4883E4F0            <1>  and rsp, ~15
  2322 00001D03 48837D1802                      cmp COUNT, 2
  2323 00001D08 0F851B090000                    jne L_error_arg_count_2
  2324 00001D0E 4C8B4520                        mov r8, PARAM(0)
  2325                                          assert_rational(r8)
    42 00001D12 41803811            <1>  cmp byte [%1], %2
    43 00001D16 0F85AC090000        <1>  jne L_error_incorrect_type
  2326 00001D1C 4C8B4D28                        mov r9, PARAM(1)
  2327                                          assert_rational(r9)
    42 00001D20 41803911            <1>  cmp byte [%1], %2
    43 00001D24 0F859E090000        <1>  jne L_error_incorrect_type
  2328 00001D2A 498B4001                        mov rax, qword [r8 + 1] ; num1
  2329 00001D2E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2330 00001D32 4899                            cqo
  2331 00001D34 48F7EB                          imul rbx
  2332 00001D37 4889C6                          mov rsi, rax
  2333 00001D3A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2334 00001D3E 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2335 00001D42 4899                            cqo
  2336 00001D44 48F7EB                          imul rbx
  2337 00001D47 4829C6                          sub rsi, rax
  2338 00001D4A 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2339 00001D4E 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2340 00001D52 4899                            cqo
  2341 00001D54 48F7EB                          imul rbx
  2342 00001D57 4889C7                          mov rdi, rax
  2343 00001D5A E8BF000000                      call normalize_rational
  2344                                          LEAVE
    38 00001D5F C9                  <1>  leave
  2345 00001D60 C22000                          ret AND_KILL_FRAME(2)
  2346                                  
  2347                                  L_code_ptr_raw_bin_mul_qq:
  2348                                          ENTER
    33 00001D63 C8000000            <1>  enter 0, 0
    34 00001D67 4883E4F0            <1>  and rsp, ~15
  2349 00001D6B 48837D1802                      cmp COUNT, 2
  2350 00001D70 0F85B3080000                    jne L_error_arg_count_2
  2351 00001D76 4C8B4520                        mov r8, PARAM(0)
  2352                                          assert_rational(r8)
    42 00001D7A 41803811            <1>  cmp byte [%1], %2
    43 00001D7E 0F8544090000        <1>  jne L_error_incorrect_type
  2353 00001D84 4C8B4D28                        mov r9, PARAM(1)
  2354                                          assert_rational(r9)
    42 00001D88 41803911            <1>  cmp byte [%1], %2
    43 00001D8C 0F8536090000        <1>  jne L_error_incorrect_type
  2355 00001D92 498B4001                        mov rax, qword [r8 + 1] ; num1
  2356 00001D96 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2357 00001D9A 4899                            cqo
  2358 00001D9C 48F7EB                          imul rbx
  2359 00001D9F 4889C6                          mov rsi, rax
  2360 00001DA2 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2361 00001DA6 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2362 00001DAA 4899                            cqo
  2363 00001DAC 48F7EB                          imul rbx
  2364 00001DAF 4889C7                          mov rdi, rax
  2365 00001DB2 E867000000                      call normalize_rational
  2366                                          LEAVE
    38 00001DB7 C9                  <1>  leave
  2367 00001DB8 C22000                          ret AND_KILL_FRAME(2)
  2368                                          
  2369                                  L_code_ptr_raw_bin_div_qq:
  2370                                          ENTER
    33 00001DBB C8000000            <1>  enter 0, 0
    34 00001DBF 4883E4F0            <1>  and rsp, ~15
  2371 00001DC3 48837D1802                      cmp COUNT, 2
  2372 00001DC8 0F855B080000                    jne L_error_arg_count_2
  2373 00001DCE 4C8B4520                        mov r8, PARAM(0)
  2374                                          assert_rational(r8)
    42 00001DD2 41803811            <1>  cmp byte [%1], %2
    43 00001DD6 0F85EC080000        <1>  jne L_error_incorrect_type
  2375 00001DDC 4C8B4D28                        mov r9, PARAM(1)
  2376                                          assert_rational(r9)
    42 00001DE0 41803911            <1>  cmp byte [%1], %2
    43 00001DE4 0F85DE080000        <1>  jne L_error_incorrect_type
  2377 00001DEA 4983790100                      cmp qword [r9 + 1], 0
  2378 00001DEF 0F8404090000                    je L_error_division_by_zero
  2379 00001DF5 498B4001                        mov rax, qword [r8 + 1] ; num1
  2380 00001DF9 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2381 00001DFD 4899                            cqo
  2382 00001DFF 48F7EB                          imul rbx
  2383 00001E02 4889C6                          mov rsi, rax
  2384 00001E05 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2385 00001E09 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2386 00001E0D 4899                            cqo
  2387 00001E0F 48F7EB                          imul rbx
  2388 00001E12 4889C7                          mov rdi, rax
  2389 00001E15 E804000000                      call normalize_rational
  2390                                          LEAVE
    38 00001E1A C9                  <1>  leave
  2391 00001E1B C22000                          ret AND_KILL_FRAME(2)
  2392                                          
  2393                                  normalize_rational:
  2394 00001E1E 56                              push rsi
  2395 00001E1F 57                              push rdi
  2396 00001E20 E839000000                      call gcd
  2397 00001E25 4889C3                          mov rbx, rax
  2398 00001E28 58                              pop rax
  2399 00001E29 4899                            cqo
  2400 00001E2B 48F7FB                          idiv rbx
  2401 00001E2E 4989C0                          mov r8, rax
  2402 00001E31 58                              pop rax
  2403 00001E32 4899                            cqo
  2404 00001E34 48F7FB                          idiv rbx
  2405 00001E37 4989C1                          mov r9, rax
  2406 00001E3A BF11000000                      mov rdi, (1 + 8 + 8)
  2407 00001E3F E83FF1FFFF                      call malloc
  2408 00001E44 C60011                          mov byte [rax], T_rational
  2409 00001E47 4C894801                        mov qword [rax + 1], r9
  2410 00001E4B 4C894009                        mov qword [rax + 1 + 8], r8
  2411 00001E4F C3                              ret
  2412                                  
  2413                                  iabs:
  2414 00001E50 4889F8                          mov rax, rdi
  2415 00001E53 4883F800                        cmp rax, 0
  2416 00001E57 7C01                            jl .Lneg
  2417 00001E59 C3                              ret
  2418                                  .Lneg:
  2419 00001E5A 48F7D8                          neg rax
  2420 00001E5D C3                              ret
  2421                                  
  2422                                  gcd:
  2423 00001E5E E8EDFFFFFF                      call iabs
  2424 00001E63 4889C3                          mov rbx, rax
  2425 00001E66 4889F7                          mov rdi, rsi
  2426 00001E69 E8E2FFFFFF                      call iabs
  2427 00001E6E 4883F800                        cmp rax, 0
  2428 00001E72 7502                            jne .L0
  2429 00001E74 4893                            xchg rax, rbx
  2430                                  .L0:
  2431 00001E76 4883FB00                        cmp rbx, 0
  2432 00001E7A 740C                            je .L1
  2433 00001E7C 4899                            cqo
  2434 00001E7E 48F7F3                          div rbx
  2435 00001E81 4889D0                          mov rax, rdx
  2436 00001E84 4893                            xchg rax, rbx
  2437 00001E86 EBEE                            jmp .L0
  2438                                  .L1:
  2439 00001E88 C3                              ret
  2440                                  
  2441                                  L_code_ptr_error:
  2442                                          ENTER
    33 00001E89 C8000000            <1>  enter 0, 0
    34 00001E8D 4883E4F0            <1>  and rsp, ~15
  2443 00001E91 48837D1802                      cmp COUNT, 2
  2444 00001E96 0F858D070000                    jne L_error_arg_count_2
  2445 00001E9C 488B7520                        mov rsi, PARAM(0)
  2446                                          assert_symbol(rsi)
    42 00001EA0 803E04              <1>  cmp byte [%1], %2
    43 00001EA3 0F851F080000        <1>  jne L_error_incorrect_type
  2447 00001EA9 488B7528                        mov rsi, PARAM(1)
  2448                                          assert_string(rsi)
    42 00001EAD 803E03              <1>  cmp byte [%1], %2
    43 00001EB0 0F8512080000        <1>  jne L_error_incorrect_type
  2449 00001EB6 48BF-                           mov rdi, fmt_scheme_error_part_1
  2449 00001EB8 [A104000000000000] 
  2450 00001EC0 B800000000                      mov rax, 0
  2451                                  	ENTER
    33 00001EC5 C8000000            <1>  enter 0, 0
    34 00001EC9 4883E4F0            <1>  and rsp, ~15
  2452 00001ECD E8(00000000)                    call printf
  2453                                  	LEAVE
    38 00001ED2 C9                  <1>  leave
  2454 00001ED3 488B7D20                        mov rdi, PARAM(0)
  2455 00001ED7 E8C2F0FFFF                      call print_sexpr
  2456 00001EDC 48BF-                           mov rdi, fmt_scheme_error_part_2
  2456 00001EDE [B504000000000000] 
  2457 00001EE6 B800000000                      mov rax, 0
  2458                                  	ENTER
    33 00001EEB C8000000            <1>  enter 0, 0
    34 00001EEF 4883E4F0            <1>  and rsp, ~15
  2459 00001EF3 E8(00000000)                    call printf
  2460                                  	LEAVE
    38 00001EF8 C9                  <1>  leave
  2461 00001EF9 488B4528                        mov rax, PARAM(1)       ; sob_string
  2462 00001EFD BE01000000                      mov rsi, 1              ; size = 1 byte
  2463 00001F02 488B5001                        mov rdx, qword [rax + 1] ; length
  2464 00001F06 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2465 00001F0A 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2466 00001F12 E8(00000000)                    call fwrite
  2467 00001F17 48BF-                           mov rdi, fmt_scheme_error_part_3
  2467 00001F19 [F704000000000000] 
  2468 00001F21 B800000000                      mov rax, 0
  2469                                  	ENTER
    33 00001F26 C8000000            <1>  enter 0, 0
    34 00001F2A 4883E4F0            <1>  and rsp, ~15
  2470 00001F2E E8(00000000)                    call printf
  2471                                  	LEAVE
    38 00001F33 C9                  <1>  leave
  2472 00001F34 48C7C0F7FFFFFF                  mov rax, -9
  2473 00001F3B E8(00000000)                    call exit
  2474                                  
  2475                                  L_code_ptr_raw_less_than_rr:
  2476                                          ENTER
    33 00001F40 C8000000            <1>  enter 0, 0
    34 00001F44 4883E4F0            <1>  and rsp, ~15
  2477 00001F48 48837D1802                      cmp COUNT, 2
  2478 00001F4D 0F85D6060000                    jne L_error_arg_count_2
  2479 00001F53 488B7520                        mov rsi, PARAM(0)
  2480                                          assert_real(rsi)
    42 00001F57 803E12              <1>  cmp byte [%1], %2
    43 00001F5A 0F8568070000        <1>  jne L_error_incorrect_type
  2481 00001F60 488B7D28                        mov rdi, PARAM(1)
  2482                                          assert_real(rdi)
    42 00001F64 803F12              <1>  cmp byte [%1], %2
    43 00001F67 0F855B070000        <1>  jne L_error_incorrect_type
  2483 00001F6D F20F104601                      movsd xmm0, qword [rsi + 1]
  2484 00001F72 F20F104F01                      movsd xmm1, qword [rdi + 1]
  2485 00001F77 660F2FC1                        comisd xmm0, xmm1
  2486 00001F7B 730C                            jae .L_false
  2487 00001F7D 48B8-                           mov rax, sob_boolean_true
  2487 00001F7F [0300000000000000] 
  2488 00001F87 EB0A                            jmp .L_exit
  2489                                  .L_false:
  2490 00001F89 48B8-                           mov rax, sob_boolean_false
  2490 00001F8B [0200000000000000] 
  2491                                  .L_exit:
  2492                                          LEAVE
    38 00001F93 C9                  <1>  leave
  2493 00001F94 C22000                          ret AND_KILL_FRAME(2)
  2494                                          
  2495                                  L_code_ptr_raw_less_than_qq:
  2496                                          ENTER
    33 00001F97 C8000000            <1>  enter 0, 0
    34 00001F9B 4883E4F0            <1>  and rsp, ~15
  2497 00001F9F 48837D1802                      cmp COUNT, 2
  2498 00001FA4 0F857F060000                    jne L_error_arg_count_2
  2499 00001FAA 488B7520                        mov rsi, PARAM(0)
  2500                                          assert_rational(rsi)
    42 00001FAE 803E11              <1>  cmp byte [%1], %2
    43 00001FB1 0F8511070000        <1>  jne L_error_incorrect_type
  2501 00001FB7 488B7D28                        mov rdi, PARAM(1)
  2502                                          assert_rational(rdi)
    42 00001FBB 803F11              <1>  cmp byte [%1], %2
    43 00001FBE 0F8504070000        <1>  jne L_error_incorrect_type
  2503 00001FC4 488B4601                        mov rax, qword [rsi + 1] ; num1
  2504 00001FC8 4899                            cqo
  2505 00001FCA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2506 00001FCE 4889C1                          mov rcx, rax
  2507 00001FD1 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  2508 00001FD5 4899                            cqo
  2509 00001FD7 48F76F01                        imul qword [rdi + 1]          ; num2
  2510 00001FDB 4829C1                          sub rcx, rax
  2511 00001FDE 7D0C                            jge .L_false
  2512 00001FE0 48B8-                           mov rax, sob_boolean_true
  2512 00001FE2 [0300000000000000] 
  2513 00001FEA EB0A                            jmp .L_exit
  2514                                  .L_false:
  2515 00001FEC 48B8-                           mov rax, sob_boolean_false
  2515 00001FEE [0200000000000000] 
  2516                                  .L_exit:
  2517                                          LEAVE
    38 00001FF6 C9                  <1>  leave
  2518 00001FF7 C22000                          ret AND_KILL_FRAME(2)
  2519                                  
  2520                                  L_code_ptr_raw_equal_rr:
  2521                                          ENTER
    33 00001FFA C8000000            <1>  enter 0, 0
    34 00001FFE 4883E4F0            <1>  and rsp, ~15
  2522 00002002 48837D1802                      cmp COUNT, 2
  2523 00002007 0F851C060000                    jne L_error_arg_count_2
  2524 0000200D 488B7520                        mov rsi, PARAM(0)
  2525                                          assert_real(rsi)
    42 00002011 803E12              <1>  cmp byte [%1], %2
    43 00002014 0F85AE060000        <1>  jne L_error_incorrect_type
  2526 0000201A 488B7D28                        mov rdi, PARAM(1)
  2527                                          assert_real(rdi)
    42 0000201E 803F12              <1>  cmp byte [%1], %2
    43 00002021 0F85A1060000        <1>  jne L_error_incorrect_type
  2528 00002027 F20F104601                      movsd xmm0, qword [rsi + 1]
  2529 0000202C F20F104F01                      movsd xmm1, qword [rdi + 1]
  2530 00002031 660F2FC1                        comisd xmm0, xmm1
  2531 00002035 750C                            jne .L_false
  2532 00002037 48B8-                           mov rax, sob_boolean_true
  2532 00002039 [0300000000000000] 
  2533 00002041 EB0A                            jmp .L_exit
  2534                                  .L_false:
  2535 00002043 48B8-                           mov rax, sob_boolean_false
  2535 00002045 [0200000000000000] 
  2536                                  .L_exit:
  2537                                          LEAVE
    38 0000204D C9                  <1>  leave
  2538 0000204E C22000                          ret AND_KILL_FRAME(2)
  2539                                          
  2540                                  L_code_ptr_raw_equal_qq:
  2541                                          ENTER
    33 00002051 C8000000            <1>  enter 0, 0
    34 00002055 4883E4F0            <1>  and rsp, ~15
  2542 00002059 48837D1802                      cmp COUNT, 2
  2543 0000205E 0F85C5050000                    jne L_error_arg_count_2
  2544 00002064 488B7520                        mov rsi, PARAM(0)
  2545                                          assert_rational(rsi)
    42 00002068 803E11              <1>  cmp byte [%1], %2
    43 0000206B 0F8557060000        <1>  jne L_error_incorrect_type
  2546 00002071 488B7D28                        mov rdi, PARAM(1)
  2547                                          assert_rational(rdi)
    42 00002075 803F11              <1>  cmp byte [%1], %2
    43 00002078 0F854A060000        <1>  jne L_error_incorrect_type
  2548 0000207E 488B4601                        mov rax, qword [rsi + 1] ; num1
  2549 00002082 4899                            cqo
  2550 00002084 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  2551 00002088 4889C1                          mov rcx, rax
  2552 0000208B 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  2553 0000208F 4899                            cqo
  2554 00002091 48F76F01                        imul qword [rdi + 1]          ; num2
  2555 00002095 4829C1                          sub rcx, rax
  2556 00002098 750C                            jne .L_false
  2557 0000209A 48B8-                           mov rax, sob_boolean_true
  2557 0000209C [0300000000000000] 
  2558 000020A4 EB0A                            jmp .L_exit
  2559                                  .L_false:
  2560 000020A6 48B8-                           mov rax, sob_boolean_false
  2560 000020A8 [0200000000000000] 
  2561                                  .L_exit:
  2562                                          LEAVE
    38 000020B0 C9                  <1>  leave
  2563 000020B1 C22000                          ret AND_KILL_FRAME(2)
  2564                                  
  2565                                  L_code_ptr_quotient:
  2566                                          ENTER
    33 000020B4 C8000000            <1>  enter 0, 0
    34 000020B8 4883E4F0            <1>  and rsp, ~15
  2567 000020BC 48837D1802                      cmp COUNT, 2
  2568 000020C1 0F8562050000                    jne L_error_arg_count_2
  2569 000020C7 488B7520                        mov rsi, PARAM(0)
  2570                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000020CB 803E11              <2>  cmp byte [%1], %2
    43 000020CE 0F85F4050000        <2>  jne L_error_incorrect_type
    48 000020D4 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000020D9 0F85E9050000        <1>  jne L_error_incorrect_type
  2571 000020DF 488B7D28                        mov rdi, PARAM(1)
  2572                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 000020E3 803F11              <2>  cmp byte [%1], %2
    43 000020E6 0F85DC050000        <2>  jne L_error_incorrect_type
    48 000020EC 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000020F1 0F85D1050000        <1>  jne L_error_incorrect_type
  2573 000020F7 488B4601                        mov rax, qword [rsi + 1]
  2574 000020FB 488B5F01                        mov rbx, qword [rdi + 1]
  2575 000020FF 4883FB00                        cmp rbx, 0
  2576 00002103 0F84F0050000                    je L_error_division_by_zero
  2577 00002109 4899                            cqo
  2578 0000210B 48F7FB                          idiv rbx
  2579 0000210E 4889C7                          mov rdi, rax
  2580 00002111 E852040000                      call make_integer
  2581                                          LEAVE
    38 00002116 C9                  <1>  leave
  2582 00002117 C22000                          ret AND_KILL_FRAME(2)
  2583                                          
  2584                                  L_code_ptr_remainder:
  2585                                          ENTER
    33 0000211A C8000000            <1>  enter 0, 0
    34 0000211E 4883E4F0            <1>  and rsp, ~15
  2586 00002122 48837D1802                      cmp COUNT, 2
  2587 00002127 0F85FC040000                    jne L_error_arg_count_2
  2588 0000212D 488B7520                        mov rsi, PARAM(0)
  2589                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00002131 803E11              <2>  cmp byte [%1], %2
    43 00002134 0F858E050000        <2>  jne L_error_incorrect_type
    48 0000213A 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000213F 0F8583050000        <1>  jne L_error_incorrect_type
  2590 00002145 488B7D28                        mov rdi, PARAM(1)
  2591                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00002149 803F11              <2>  cmp byte [%1], %2
    43 0000214C 0F8576050000        <2>  jne L_error_incorrect_type
    48 00002152 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00002157 0F856B050000        <1>  jne L_error_incorrect_type
  2592 0000215D 488B4601                        mov rax, qword [rsi + 1]
  2593 00002161 488B5F01                        mov rbx, qword [rdi + 1]
  2594 00002165 4883FB00                        cmp rbx, 0
  2595 00002169 0F848A050000                    je L_error_division_by_zero
  2596 0000216F 4899                            cqo
  2597 00002171 48F7FB                          idiv rbx
  2598 00002174 4889D7                          mov rdi, rdx
  2599 00002177 E8EC030000                      call make_integer
  2600                                          LEAVE
    38 0000217C C9                  <1>  leave
  2601 0000217D C22000                          ret AND_KILL_FRAME(2)
  2602                                  
  2603                                  L_code_ptr_set_car:
  2604                                          ENTER
    33 00002180 C8000000            <1>  enter 0, 0
    34 00002184 4883E4F0            <1>  and rsp, ~15
  2605 00002188 48837D1802                      cmp COUNT, 2
  2606 0000218D 0F8596040000                    jne L_error_arg_count_2
  2607 00002193 488B4520                        mov rax, PARAM(0)
  2608                                          assert_pair(rax)
    42 00002197 803821              <1>  cmp byte [%1], %2
    43 0000219A 0F8528050000        <1>  jne L_error_incorrect_type
  2609 000021A0 488B5D28                        mov rbx, PARAM(1)
  2610 000021A4 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2611 000021A8 48B8-                           mov rax, sob_void
  2611 000021AA [0000000000000000] 
  2612                                          LEAVE
    38 000021B2 C9                  <1>  leave
  2613 000021B3 C22000                          ret AND_KILL_FRAME(2)
  2614                                  
  2615                                  L_code_ptr_set_cdr:
  2616                                          ENTER
    33 000021B6 C8000000            <1>  enter 0, 0
    34 000021BA 4883E4F0            <1>  and rsp, ~15
  2617 000021BE 48837D1802                      cmp COUNT, 2
  2618 000021C3 0F8560040000                    jne L_error_arg_count_2
  2619 000021C9 488B4520                        mov rax, PARAM(0)
  2620                                          assert_pair(rax)
    42 000021CD 803821              <1>  cmp byte [%1], %2
    43 000021D0 0F85F2040000        <1>  jne L_error_incorrect_type
  2621 000021D6 488B5D28                        mov rbx, PARAM(1)
  2622 000021DA 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2623 000021DE 48B8-                           mov rax, sob_void
  2623 000021E0 [0000000000000000] 
  2624                                          LEAVE
    38 000021E8 C9                  <1>  leave
  2625 000021E9 C22000                          ret AND_KILL_FRAME(2)
  2626                                  
  2627                                  L_code_ptr_string_ref:
  2628                                          ENTER
    33 000021EC C8000000            <1>  enter 0, 0
    34 000021F0 4883E4F0            <1>  and rsp, ~15
  2629 000021F4 48837D1802                      cmp COUNT, 2
  2630 000021F9 0F852A040000                    jne L_error_arg_count_2
  2631 000021FF 488B7D20                        mov rdi, PARAM(0)
  2632                                          assert_string(rdi)
    42 00002203 803F03              <1>  cmp byte [%1], %2
    43 00002206 0F85BC040000        <1>  jne L_error_incorrect_type
  2633 0000220C 488B7528                        mov rsi, PARAM(1)
  2634                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00002210 803E11              <2>  cmp byte [%1], %2
    43 00002213 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00002219 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000221E 0F85A4040000        <1>  jne L_error_incorrect_type
  2635 00002224 488B5701                        mov rdx, qword [rdi + 1]
  2636 00002228 488B4E01                        mov rcx, qword [rsi + 1]
  2637 0000222C 4839D1                          cmp rcx, rdx
  2638 0000222F 0F8D59030000                    jge L_error_integer_range
  2639 00002235 4883F900                        cmp rcx, 0
  2640 00002239 0F8C4F030000                    jl L_error_integer_range
  2641 0000223F 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  2642 00002243 BF02000000                      mov rdi, 2
  2643 00002248 E836EDFFFF                      call malloc
  2644 0000224D C60002                          mov byte [rax], T_char
  2645 00002250 885801                          mov byte [rax + 1], bl
  2646                                          LEAVE
    38 00002253 C9                  <1>  leave
  2647 00002254 C22000                          ret AND_KILL_FRAME(2)
  2648                                  
  2649                                  L_code_ptr_vector_ref:
  2650                                          ENTER
    33 00002257 C8000000            <1>  enter 0, 0
    34 0000225B 4883E4F0            <1>  and rsp, ~15
  2651 0000225F 48837D1802                      cmp COUNT, 2
  2652 00002264 0F85BF030000                    jne L_error_arg_count_2
  2653 0000226A 488B7D20                        mov rdi, PARAM(0)
  2654                                          assert_vector(rdi)
    42 0000226E 803F22              <1>  cmp byte [%1], %2
    43 00002271 0F8551040000        <1>  jne L_error_incorrect_type
  2655 00002277 488B7528                        mov rsi, PARAM(1)
  2656                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000227B 803E11              <2>  cmp byte [%1], %2
    43 0000227E 0F8544040000        <2>  jne L_error_incorrect_type
    48 00002284 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00002289 0F8539040000        <1>  jne L_error_incorrect_type
  2657 0000228F 488B5701                        mov rdx, qword [rdi + 1]
  2658 00002293 488B4E01                        mov rcx, qword [rsi + 1]
  2659 00002297 4839D1                          cmp rcx, rdx
  2660 0000229A 0F8DEE020000                    jge L_error_integer_range
  2661 000022A0 4883F900                        cmp rcx, 0
  2662 000022A4 0F8CE4020000                    jl L_error_integer_range
  2663 000022AA 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  2664                                          LEAVE
    38 000022AF C9                  <1>  leave
  2665 000022B0 C22000                          ret AND_KILL_FRAME(2)
  2666                                  
  2667                                  L_code_ptr_vector_set:
  2668                                          ENTER
    33 000022B3 C8000000            <1>  enter 0, 0
    34 000022B7 4883E4F0            <1>  and rsp, ~15
  2669 000022BB 48837D1803                      cmp COUNT, 3
  2670 000022C0 0F85CD030000                    jne L_error_arg_count_3
  2671 000022C6 488B7D20                        mov rdi, PARAM(0)
  2672                                          assert_vector(rdi)
    42 000022CA 803F22              <1>  cmp byte [%1], %2
    43 000022CD 0F85F5030000        <1>  jne L_error_incorrect_type
  2673 000022D3 488B7528                        mov rsi, PARAM(1)
  2674                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000022D7 803E11              <2>  cmp byte [%1], %2
    43 000022DA 0F85E8030000        <2>  jne L_error_incorrect_type
    48 000022E0 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000022E5 0F85DD030000        <1>  jne L_error_incorrect_type
  2675 000022EB 488B5701                        mov rdx, qword [rdi + 1]
  2676 000022EF 488B4E01                        mov rcx, qword [rsi + 1]
  2677 000022F3 4839D1                          cmp rcx, rdx
  2678 000022F6 0F8D92020000                    jge L_error_integer_range
  2679 000022FC 4883F900                        cmp rcx, 0
  2680 00002300 0F8C88020000                    jl L_error_integer_range
  2681 00002306 488B4530                        mov rax, PARAM(2)
  2682 0000230A 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  2683 0000230F 48B8-                           mov rax, sob_void
  2683 00002311 [0000000000000000] 
  2684                                          LEAVE
    38 00002319 C9                  <1>  leave
  2685 0000231A C22800                          ret AND_KILL_FRAME(3)
  2686                                  
  2687                                  L_code_ptr_string_set:
  2688                                          ENTER
    33 0000231D C8000000            <1>  enter 0, 0
    34 00002321 4883E4F0            <1>  and rsp, ~15
  2689 00002325 48837D1803                      cmp COUNT, 3
  2690 0000232A 0F8563030000                    jne L_error_arg_count_3
  2691 00002330 488B7D20                        mov rdi, PARAM(0)
  2692                                          assert_string(rdi)
    42 00002334 803F03              <1>  cmp byte [%1], %2
    43 00002337 0F858B030000        <1>  jne L_error_incorrect_type
  2693 0000233D 488B7528                        mov rsi, PARAM(1)
  2694                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00002341 803E11              <2>  cmp byte [%1], %2
    43 00002344 0F857E030000        <2>  jne L_error_incorrect_type
    48 0000234A 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000234F 0F8573030000        <1>  jne L_error_incorrect_type
  2695 00002355 488B5701                        mov rdx, qword [rdi + 1]
  2696 00002359 488B4E01                        mov rcx, qword [rsi + 1]
  2697 0000235D 4839D1                          cmp rcx, rdx
  2698 00002360 0F8D28020000                    jge L_error_integer_range
  2699 00002366 4883F900                        cmp rcx, 0
  2700 0000236A 0F8C1E020000                    jl L_error_integer_range
  2701 00002370 488B4530                        mov rax, PARAM(2)
  2702                                          assert_char(rax)
    42 00002374 803802              <1>  cmp byte [%1], %2
    43 00002377 0F854B030000        <1>  jne L_error_incorrect_type
  2703 0000237D 8A4001                          mov al, byte [rax + 1]
  2704 00002380 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  2705 00002384 48B8-                           mov rax, sob_void
  2705 00002386 [0000000000000000] 
  2706                                          LEAVE
    38 0000238E C9                  <1>  leave
  2707 0000238F C22800                          ret AND_KILL_FRAME(3)
  2708                                  
  2709                                  L_code_ptr_make_vector:
  2710                                          ENTER
    33 00002392 C8000000            <1>  enter 0, 0
    34 00002396 4883E4F0            <1>  and rsp, ~15
  2711 0000239A 48837D1802                      cmp COUNT, 2
  2712 0000239F 0F8584020000                    jne L_error_arg_count_2
  2713 000023A5 488B4D20                        mov rcx, PARAM(0)
  2714                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000023A9 803911              <2>  cmp byte [%1], %2
    43 000023AC 0F8516030000        <2>  jne L_error_incorrect_type
    48 000023B2 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000023B7 0F850B030000        <1>  jne L_error_incorrect_type
  2715 000023BD 488B4901                        mov rcx, qword [rcx + 1]
  2716 000023C1 4883F900                        cmp rcx, 0
  2717 000023C5 0F8CC3010000                    jl L_error_integer_range
  2718 000023CB 488B5528                        mov rdx, PARAM(1)
  2719 000023CF 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  2720 000023D7 E8A7EBFFFF                      call malloc
  2721 000023DC C60022                          mov byte [rax], T_vector
  2722 000023DF 48894801                        mov qword [rax + 1], rcx
  2723 000023E3 41B800000000                    mov r8, 0
  2724                                  .L0:
  2725 000023E9 4939C8                          cmp r8, rcx
  2726 000023EC 740A                            je .L1
  2727 000023EE 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  2728 000023F3 49FFC0                          inc r8
  2729 000023F6 EBF1                            jmp .L0
  2730                                  .L1:
  2731                                          LEAVE
    38 000023F8 C9                  <1>  leave
  2732 000023F9 C22000                          ret AND_KILL_FRAME(2)
  2733                                          
  2734                                  L_code_ptr_make_string:
  2735                                          ENTER
    33 000023FC C8000000            <1>  enter 0, 0
    34 00002400 4883E4F0            <1>  and rsp, ~15
  2736 00002404 48837D1802                      cmp COUNT, 2
  2737 00002409 0F851A020000                    jne L_error_arg_count_2
  2738 0000240F 488B4D20                        mov rcx, PARAM(0)
  2739                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00002413 803911              <2>  cmp byte [%1], %2
    43 00002416 0F85AC020000        <2>  jne L_error_incorrect_type
    48 0000241C 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00002421 0F85A1020000        <1>  jne L_error_incorrect_type
  2740 00002427 488B4901                        mov rcx, qword [rcx + 1]
  2741 0000242B 4883F900                        cmp rcx, 0
  2742 0000242F 0F8C59010000                    jl L_error_integer_range
  2743 00002435 488B5528                        mov rdx, PARAM(1)
  2744                                          assert_char(rdx)
    42 00002439 803A02              <1>  cmp byte [%1], %2
    43 0000243C 0F8586020000        <1>  jne L_error_incorrect_type
  2745 00002442 8A5201                          mov dl, byte [rdx + 1]
  2746 00002445 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  2747 00002449 E835EBFFFF                      call malloc
  2748 0000244E C60003                          mov byte [rax], T_string
  2749 00002451 48894801                        mov qword [rax + 1], rcx
  2750 00002455 41B800000000                    mov r8, 0
  2751                                  .L0:
  2752 0000245B 4939C8                          cmp r8, rcx
  2753 0000245E 740A                            je .L1
  2754 00002460 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  2755 00002465 49FFC0                          inc r8
  2756 00002468 EBF1                            jmp .L0
  2757                                  .L1:
  2758                                          LEAVE
    38 0000246A C9                  <1>  leave
  2759 0000246B C22000                          ret AND_KILL_FRAME(2)
  2760                                  
  2761                                  L_code_ptr_numerator:
  2762                                          ENTER
    33 0000246E C8000000            <1>  enter 0, 0
    34 00002472 4883E4F0            <1>  and rsp, ~15
  2763 00002476 48837D1801                      cmp COUNT, 1
  2764 0000247B 0F8573010000                    jne L_error_arg_count_1
  2765 00002481 488B4520                        mov rax, PARAM(0)
  2766                                          assert_rational(rax)
    42 00002485 803811              <1>  cmp byte [%1], %2
    43 00002488 0F853A020000        <1>  jne L_error_incorrect_type
  2767 0000248E 488B7801                        mov rdi, qword [rax + 1]
  2768 00002492 E8D1000000                      call make_integer
  2769                                          LEAVE
    38 00002497 C9                  <1>  leave
  2770 00002498 C21800                          ret AND_KILL_FRAME(1)
  2771                                          
  2772                                  L_code_ptr_denominator:
  2773                                          ENTER
    33 0000249B C8000000            <1>  enter 0, 0
    34 0000249F 4883E4F0            <1>  and rsp, ~15
  2774 000024A3 48837D1801                      cmp COUNT, 1
  2775 000024A8 0F8546010000                    jne L_error_arg_count_1
  2776 000024AE 488B4520                        mov rax, PARAM(0)
  2777                                          assert_rational(rax)
    42 000024B2 803811              <1>  cmp byte [%1], %2
    43 000024B5 0F850D020000        <1>  jne L_error_incorrect_type
  2778 000024BB 488B7809                        mov rdi, qword [rax + 1 + 8]
  2779 000024BF E8A4000000                      call make_integer
  2780                                          LEAVE
    38 000024C4 C9                  <1>  leave
  2781 000024C5 C21800                          ret AND_KILL_FRAME(1)
  2782                                  
  2783                                  L_code_ptr_eq:
  2784                                  	ENTER
    33 000024C8 C8000000            <1>  enter 0, 0
    34 000024CC 4883E4F0            <1>  and rsp, ~15
  2785 000024D0 48837D1802              	cmp COUNT, 2
  2786 000024D5 0F854E010000            	jne L_error_arg_count_2
  2787 000024DB 488B7D20                	mov rdi, PARAM(0)
  2788 000024DF 488B7528                	mov rsi, PARAM(1)
  2789 000024E3 4839F7                  	cmp rdi, rsi
  2790 000024E6 744A                    	je .L_eq_true
  2791 000024E8 8A17                    	mov dl, byte [rdi]
  2792 000024EA 3A16                    	cmp dl, byte [rsi]
  2793 000024EC 7550                    	jne .L_eq_false
  2794 000024EE 80FA02                  	cmp dl, T_char
  2795 000024F1 7437                    	je .L_char
  2796 000024F3 80FA04                  	cmp dl, T_symbol
  2797 000024F6 742A                    	je .L_symbol
  2798 000024F8 80FA12                  	cmp dl, T_real
  2799 000024FB 741D                    	je .L_real
  2800 000024FD 80FA11                  	cmp dl, T_rational
  2801 00002500 7402                    	je .L_rational
  2802 00002502 EB3A                    	jmp .L_eq_false
  2803                                  .L_rational:
  2804 00002504 488B4601                	mov rax, qword [rsi + 1]
  2805 00002508 483B4701                	cmp rax, qword [rdi + 1]
  2806 0000250C 7530                    	jne .L_eq_false
  2807 0000250E 488B4609                	mov rax, qword [rsi + 1 + 8]
  2808 00002512 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2809 00002516 7526                    	jne .L_eq_false
  2810 00002518 EB18                    	jmp .L_eq_true
  2811                                  .L_real:
  2812 0000251A 488B4601                	mov rax, qword [rsi + 1]
  2813 0000251E 483B4701                	cmp rax, qword [rdi + 1]
  2814                                  .L_symbol:
  2815                                  	; never reached, because symbols are static!
  2816                                  	; but I'm keeping it in case, I'll ever change
  2817                                  	; the implementation
  2818 00002522 488B4601                	mov rax, qword [rsi + 1]
  2819 00002526 483B4701                	cmp rax, qword [rdi + 1]
  2820                                  .L_char:
  2821 0000252A 8A5E01                  	mov bl, byte [rsi + 1]
  2822 0000252D 3A5F01                  	cmp bl, byte [rdi + 1]
  2823 00002530 750C                    	jne .L_eq_false
  2824                                  .L_eq_true:
  2825 00002532 48B8-                   	mov rax, sob_boolean_true
  2825 00002534 [0300000000000000] 
  2826 0000253C EB0A                    	jmp .L_eq_exit
  2827                                  .L_eq_false:
  2828 0000253E 48B8-                   	mov rax, sob_boolean_false
  2828 00002540 [0200000000000000] 
  2829                                  .L_eq_exit:
  2830                                  	LEAVE
    38 00002548 C9                  <1>  leave
  2831 00002549 C22000                  	ret AND_KILL_FRAME(2)
  2832                                  
  2833                                  make_real:
  2834                                          ENTER
    33 0000254C C8000000            <1>  enter 0, 0
    34 00002550 4883E4F0            <1>  and rsp, ~15
  2835 00002554 BF09000000                      mov rdi, (1 + 8)
  2836 00002559 E825EAFFFF                      call malloc
  2837 0000255E C60012                          mov byte [rax], T_real
  2838 00002561 F20F114001                      movsd qword [rax + 1], xmm0
  2839                                          LEAVE
    38 00002566 C9                  <1>  leave
  2840 00002567 C3                              ret
  2841                                          
  2842                                  make_integer:
  2843                                          ENTER
    33 00002568 C8000000            <1>  enter 0, 0
    34 0000256C 4883E4F0            <1>  and rsp, ~15
  2844 00002570 4889FE                          mov rsi, rdi
  2845 00002573 BF11000000                      mov rdi, (1 + 8 + 8)
  2846 00002578 E806EAFFFF                      call malloc
  2847 0000257D C60011                          mov byte [rax], T_rational
  2848 00002580 48897001                        mov qword [rax + 1], rsi
  2849 00002584 48C7400901000000                mov qword [rax + 1 + 8], 1
  2850                                          LEAVE
    38 0000258C C9                  <1>  leave
  2851 0000258D C3                              ret
  2852                                          
  2853                                  L_error_integer_range:
  2854 0000258E 488B3C25[00000000]              mov rdi, qword [stderr]
  2855 00002596 48BE-                           mov rsi, fmt_integer_range
  2855 00002598 [6E04000000000000] 
  2856 000025A0 B800000000                      mov rax, 0
  2857                                  	ENTER
    33 000025A5 C8000000            <1>  enter 0, 0
    34 000025A9 4883E4F0            <1>  and rsp, ~15
  2858 000025AD E8(00000000)                    call fprintf
  2859                                  	LEAVE
    38 000025B2 C9                  <1>  leave
  2860 000025B3 48C7C0FBFFFFFF                  mov rax, -5
  2861 000025BA E8(00000000)                    call exit
  2862                                  
  2863                                  L_error_arg_count_0:
  2864 000025BF 488B3C25[00000000]              mov rdi, qword [stderr]
  2865 000025C7 48BE-                           mov rsi, fmt_arg_count_0
  2865 000025C9 [6C03000000000000] 
  2866 000025D1 488B5518                        mov rdx, COUNT
  2867 000025D5 B800000000                      mov rax, 0
  2868                                  	ENTER
    33 000025DA C8000000            <1>  enter 0, 0
    34 000025DE 4883E4F0            <1>  and rsp, ~15
  2869 000025E2 E8(00000000)                    call fprintf
  2870                                  	LEAVE
    38 000025E7 C9                  <1>  leave
  2871 000025E8 48C7C0FDFFFFFF                  mov rax, -3
  2872 000025EF E8(00000000)                    call exit
  2873                                  
  2874                                  L_error_arg_count_1:
  2875 000025F4 488B3C25[00000000]              mov rdi, qword [stderr]
  2876 000025FC 48BE-                           mov rsi, fmt_arg_count_1
  2876 000025FE [9403000000000000] 
  2877 00002606 488B5518                        mov rdx, COUNT
  2878 0000260A B800000000                      mov rax, 0
  2879                                  	ENTER
    33 0000260F C8000000            <1>  enter 0, 0
    34 00002613 4883E4F0            <1>  and rsp, ~15
  2880 00002617 E8(00000000)                    call fprintf
  2881                                  	LEAVE
    38 0000261C C9                  <1>  leave
  2882 0000261D 48C7C0FDFFFFFF                  mov rax, -3
  2883 00002624 E8(00000000)                    call exit
  2884                                  
  2885                                  L_error_arg_count_2:
  2886 00002629 488B3C25[00000000]              mov rdi, qword [stderr]
  2887 00002631 48BE-                           mov rsi, fmt_arg_count_2
  2887 00002633 [FA03000000000000] 
  2888 0000263B 488B5518                        mov rdx, COUNT
  2889 0000263F B800000000                      mov rax, 0
  2890                                  	ENTER
    33 00002644 C8000000            <1>  enter 0, 0
    34 00002648 4883E4F0            <1>  and rsp, ~15
  2891 0000264C E8(00000000)                    call fprintf
  2892                                  	LEAVE
    38 00002651 C9                  <1>  leave
  2893 00002652 48C7C0FDFFFFFF                  mov rax, -3
  2894 00002659 E8(00000000)                    call exit
  2895                                  
  2896                                  L_error_arg_count_12:
  2897 0000265E 488B3C25[00000000]              mov rdi, qword [stderr]
  2898 00002666 48BE-                           mov rsi, fmt_arg_count_12
  2898 00002668 [BA03000000000000] 
  2899 00002670 488B5518                        mov rdx, COUNT
  2900 00002674 B800000000                      mov rax, 0
  2901                                  	ENTER
    33 00002679 C8000000            <1>  enter 0, 0
    34 0000267D 4883E4F0            <1>  and rsp, ~15
  2902 00002681 E8(00000000)                    call fprintf
  2903                                  	LEAVE
    38 00002686 C9                  <1>  leave
  2904 00002687 48C7C0FDFFFFFF                  mov rax, -3
  2905 0000268E E8(00000000)                    call exit
  2906                                  
  2907                                  L_error_arg_count_3:
  2908 00002693 488B3C25[00000000]              mov rdi, qword [stderr]
  2909 0000269B 48BE-                           mov rsi, fmt_arg_count_3
  2909 0000269D [2104000000000000] 
  2910 000026A5 488B5518                        mov rdx, COUNT
  2911 000026A9 B800000000                      mov rax, 0
  2912                                  	ENTER
    33 000026AE C8000000            <1>  enter 0, 0
    34 000026B2 4883E4F0            <1>  and rsp, ~15
  2913 000026B6 E8(00000000)                    call fprintf
  2914                                  	LEAVE
    38 000026BB C9                  <1>  leave
  2915 000026BC 48C7C0FDFFFFFF                  mov rax, -3
  2916 000026C3 E8(00000000)                    call exit
  2917                                          
  2918                                  L_error_incorrect_type:
  2919 000026C8 488B3C25[00000000]              mov rdi, qword [stderr]
  2920 000026D0 48BE-                           mov rsi, fmt_type
  2920 000026D2 [4A04000000000000] 
  2921 000026DA B800000000                      mov rax, 0
  2922                                  	ENTER
    33 000026DF C8000000            <1>  enter 0, 0
    34 000026E3 4883E4F0            <1>  and rsp, ~15
  2923 000026E7 E8(00000000)                    call fprintf
  2924                                  	LEAVE
    38 000026EC C9                  <1>  leave
  2925 000026ED 48C7C0FCFFFFFF                  mov rax, -4
  2926 000026F4 E8(00000000)                    call exit
  2927                                  
  2928                                  L_error_division_by_zero:
  2929 000026F9 488B3C25[00000000]              mov rdi, qword [stderr]
  2930 00002701 48BE-                           mov rsi, fmt_division_by_zero
  2930 00002703 [8B04000000000000] 
  2931 0000270B B800000000                      mov rax, 0
  2932                                  	ENTER
    33 00002710 C8000000            <1>  enter 0, 0
    34 00002714 4883E4F0            <1>  and rsp, ~15
  2933 00002718 E8(00000000)                    call fprintf
  2934                                  	LEAVE
    38 0000271D C9                  <1>  leave
  2935 0000271E 48C7C0F8FFFFFF                  mov rax, -8
  2936 00002725 E8(00000000)                    call exit
  2937                                  
  2938                                  section .data
  2939                                  fmt_char:
  2940 00000369 256300                          db `%c\0`
  2941                                  fmt_arg_count_0:
  2942 0000036C 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2942 00000375 74696E67207A65726F-
  2942 0000037E 20617267756D656E74-
  2942 00000387 732E20466F756E6420-
  2942 00000390 25640A00           
  2943                                  fmt_arg_count_1:
  2944 00000394 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2944 0000039D 74696E67206F6E6520-
  2944 000003A6 617267756D656E742E-
  2944 000003AF 20466F756E64202564-
  2944 000003B8 0A00               
  2945                                  fmt_arg_count_12:
  2946 000003BA 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2946 000003C3 74696E67206F6E6520-
  2946 000003CC 726571756972656420-
  2946 000003D5 616E64206F6E65206F-
  2946 000003DE 7074696F6E616C2061-
  2946 000003E7 7267756D656E742E20-
  2946 000003F0 466F756E642025640A-
  2946 000003F9 00                 
  2947                                  fmt_arg_count_2:
  2948 000003FA 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2948 00000403 74696E672074776F20-
  2948 0000040C 617267756D656E7473-
  2948 00000415 2E20466F756E642025-
  2948 0000041E 640A00             
  2949                                  fmt_arg_count_3:
  2950 00000421 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2950 0000042A 74696E672074687265-
  2950 00000433 6520617267756D656E-
  2950 0000043C 74732E20466F756E64-
  2950 00000445 2025640A00         
  2951                                  fmt_type:
  2952 0000044A 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2952 00000453 696F6E207061737365-
  2952 0000045C 6420696E636F727265-
  2952 00000465 637420747970650A00 
  2953                                  fmt_integer_range:
  2954 0000046E 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2954 00000477 7265637420696E7465-
  2954 00000480 6765722072616E6765-
  2954 00000489 0A00               
  2955                                  fmt_division_by_zero:
  2956 0000048B 212121204469766973-             db `!!! Division by zero\n\0`
  2956 00000494 696F6E206279207A65-
  2956 0000049D 726F0A00           
  2957                                  fmt_scheme_error_part_1:
  2958 000004A1 0A2121212054686520-             db `\n!!! The procedure \0`
  2958 000004AA 70726F636564757265-
  2958 000004B3 2000               
  2959                                  fmt_scheme_error_part_2:
  2960 000004B5 2061736B656420746F-             db ` asked to terminate the program\n`
  2960 000004BE 207465726D696E6174-
  2960 000004C7 65207468652070726F-
  2960 000004D0 6772616D0A         
  2961 000004D5 202020207769746820-             db `    with the following message:\n\n\0`
  2961 000004DE 74686520666F6C6C6F-
  2961 000004E7 77696E67206D657373-
  2961 000004F0 6167653A0A0A00     
  2962                                  fmt_scheme_error_part_3:
  2963 000004F7 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2963 00000500 210A0A00           
