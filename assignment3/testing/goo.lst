     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 09                      	db T_boolean_false
    84                                  
    85                                  section .bss
    86                                  free_var_0:	; location of null?
    87 00000000 ????????????????        	resq 1
    88                                  free_var_1:	; location of pair?
    89 00000008 ????????????????        	resq 1
    90                                  free_var_2:	; location of void?
    91 00000010 ????????????????        	resq 1
    92                                  free_var_3:	; location of char?
    93 00000018 ????????????????        	resq 1
    94                                  free_var_4:	; location of string?
    95 00000020 ????????????????        	resq 1
    96                                  free_var_5:	; location of symbol?
    97 00000028 ????????????????        	resq 1
    98                                  free_var_6:	; location of vector?
    99 00000030 ????????????????        	resq 1
   100                                  free_var_7:	; location of procedure?
   101 00000038 ????????????????        	resq 1
   102                                  free_var_8:	; location of real?
   103 00000040 ????????????????        	resq 1
   104                                  free_var_9:	; location of rational?
   105 00000048 ????????????????        	resq 1
   106                                  free_var_10:	; location of boolean?
   107 00000050 ????????????????        	resq 1
   108                                  free_var_11:	; location of number?
   109 00000058 ????????????????        	resq 1
   110                                  free_var_12:	; location of collection?
   111 00000060 ????????????????        	resq 1
   112                                  free_var_13:	; location of cons
   113 00000068 ????????????????        	resq 1
   114                                  free_var_14:	; location of display-sexpr
   115 00000070 ????????????????        	resq 1
   116                                  free_var_15:	; location of write-char
   117 00000078 ????????????????        	resq 1
   118                                  free_var_16:	; location of car
   119 00000080 ????????????????        	resq 1
   120                                  free_var_17:	; location of cdr
   121 00000088 ????????????????        	resq 1
   122                                  free_var_18:	; location of string-length
   123 00000090 ????????????????        	resq 1
   124                                  free_var_19:	; location of vector-length
   125 00000098 ????????????????        	resq 1
   126                                  free_var_20:	; location of real->integer
   127 000000A0 ????????????????        	resq 1
   128                                  free_var_21:	; location of exit
   129 000000A8 ????????????????        	resq 1
   130                                  free_var_22:	; location of integer->real
   131 000000B0 ????????????????        	resq 1
   132                                  free_var_23:	; location of rational->real
   133 000000B8 ????????????????        	resq 1
   134                                  free_var_24:	; location of char->integer
   135 000000C0 ????????????????        	resq 1
   136                                  free_var_25:	; location of integer->char
   137 000000C8 ????????????????        	resq 1
   138                                  free_var_26:	; location of trng
   139 000000D0 ????????????????        	resq 1
   140                                  free_var_27:	; location of zero?
   141 000000D8 ????????????????        	resq 1
   142                                  free_var_28:	; location of integer?
   143 000000E0 ????????????????        	resq 1
   144                                  free_var_29:	; location of __bin-apply
   145 000000E8 ????????????????        	resq 1
   146                                  free_var_30:	; location of __bin-add-rr
   147 000000F0 ????????????????        	resq 1
   148                                  free_var_31:	; location of __bin-sub-rr
   149 000000F8 ????????????????        	resq 1
   150                                  free_var_32:	; location of __bin-mul-rr
   151 00000100 ????????????????        	resq 1
   152                                  free_var_33:	; location of __bin-div-rr
   153 00000108 ????????????????        	resq 1
   154                                  free_var_34:	; location of __bin-add-qq
   155 00000110 ????????????????        	resq 1
   156                                  free_var_35:	; location of __bin-sub-qq
   157 00000118 ????????????????        	resq 1
   158                                  free_var_36:	; location of __bin-mul-qq
   159 00000120 ????????????????        	resq 1
   160                                  free_var_37:	; location of __bin-div-qq
   161 00000128 ????????????????        	resq 1
   162                                  free_var_38:	; location of error
   163 00000130 ????????????????        	resq 1
   164                                  free_var_39:	; location of __bin-less-than-rr
   165 00000138 ????????????????        	resq 1
   166                                  free_var_40:	; location of __bin-less-than-qq
   167 00000140 ????????????????        	resq 1
   168                                  free_var_41:	; location of __bin-equal-rr
   169 00000148 ????????????????        	resq 1
   170                                  free_var_42:	; location of __bin-equal-qq
   171 00000150 ????????????????        	resq 1
   172                                  free_var_43:	; location of quotient
   173 00000158 ????????????????        	resq 1
   174                                  free_var_44:	; location of remainder
   175 00000160 ????????????????        	resq 1
   176                                  free_var_45:	; location of set-car!
   177 00000168 ????????????????        	resq 1
   178                                  free_var_46:	; location of set-cdr!
   179 00000170 ????????????????        	resq 1
   180                                  free_var_47:	; location of string-ref
   181 00000178 ????????????????        	resq 1
   182                                  free_var_48:	; location of vector-ref
   183 00000180 ????????????????        	resq 1
   184                                  free_var_49:	; location of vector-set!
   185 00000188 ????????????????        	resq 1
   186                                  free_var_50:	; location of string-set!
   187 00000190 ????????????????        	resq 1
   188                                  free_var_51:	; location of make-vector
   189 00000198 ????????????????        	resq 1
   190                                  free_var_52:	; location of make-string
   191 000001A0 ????????????????        	resq 1
   192                                  free_var_53:	; location of numerator
   193 000001A8 ????????????????        	resq 1
   194                                  free_var_54:	; location of denominator
   195 000001B0 ????????????????        	resq 1
   196                                  free_var_55:	; location of eq?
   197 000001B8 ????????????????        	resq 1
   198                                  
   199                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   200                                  global main
   201                                  section .text
   202                                  main:
   203 00000000 C8000000                        enter 0, 0
   204                                          
   205                                  	; building closure for null?
   206 00000004 48BF-                   	mov rdi, free_var_0
   206 00000006 [0000000000000000] 
   207 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   207 00000010 [AB0B000000000000] 
   208 00000018 E8660B0000              	call bind_primitive
   209                                  
   210                                  	; building closure for pair?
   211 0000001D 48BF-                   	mov rdi, free_var_1
   211 0000001F [0800000000000000] 
   212 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   212 00000029 [E10B000000000000] 
   213 00000031 E84D0B0000              	call bind_primitive
   214                                  
   215                                  	; building closure for void?
   216 00000036 48BF-                   	mov rdi, free_var_2
   216 00000038 [1000000000000000] 
   217 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   217 00000042 [170C000000000000] 
   218 0000004A E8340B0000              	call bind_primitive
   219                                  
   220                                  	; building closure for char?
   221 0000004F 48BF-                   	mov rdi, free_var_3
   221 00000051 [1800000000000000] 
   222 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   222 0000005B [4D0C000000000000] 
   223 00000063 E81B0B0000              	call bind_primitive
   224                                  
   225                                  	; building closure for string?
   226 00000068 48BF-                   	mov rdi, free_var_4
   226 0000006A [2000000000000000] 
   227 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   227 00000074 [830C000000000000] 
   228 0000007C E8020B0000              	call bind_primitive
   229                                  
   230                                  	; building closure for symbol?
   231 00000081 48BF-                   	mov rdi, free_var_5
   231 00000083 [2800000000000000] 
   232 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   232 0000008D [B90C000000000000] 
   233 00000095 E8E90A0000              	call bind_primitive
   234                                  
   235                                  	; building closure for vector?
   236 0000009A 48BF-                   	mov rdi, free_var_6
   236 0000009C [3000000000000000] 
   237 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   237 000000A6 [EF0C000000000000] 
   238 000000AE E8D00A0000              	call bind_primitive
   239                                  
   240                                  	; building closure for procedure?
   241 000000B3 48BF-                   	mov rdi, free_var_7
   241 000000B5 [3800000000000000] 
   242 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   242 000000BF [250D000000000000] 
   243 000000C7 E8B70A0000              	call bind_primitive
   244                                  
   245                                  	; building closure for real?
   246 000000CC 48BF-                   	mov rdi, free_var_8
   246 000000CE [4000000000000000] 
   247 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   247 000000D8 [5B0D000000000000] 
   248 000000E0 E89E0A0000              	call bind_primitive
   249                                  
   250                                  	; building closure for rational?
   251 000000E5 48BF-                   	mov rdi, free_var_9
   251 000000E7 [4800000000000000] 
   252 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   252 000000F1 [910D000000000000] 
   253 000000F9 E8850A0000              	call bind_primitive
   254                                  
   255                                  	; building closure for boolean?
   256 000000FE 48BF-                   	mov rdi, free_var_10
   256 00000100 [5000000000000000] 
   257 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   257 0000010A [C70D000000000000] 
   258 00000112 E86C0A0000              	call bind_primitive
   259                                  
   260                                  	; building closure for number?
   261 00000117 48BF-                   	mov rdi, free_var_11
   261 00000119 [5800000000000000] 
   262 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   262 00000123 [FF0D000000000000] 
   263 0000012B E8530A0000              	call bind_primitive
   264                                  
   265                                  	; building closure for collection?
   266 00000130 48BF-                   	mov rdi, free_var_12
   266 00000132 [6000000000000000] 
   267 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   267 0000013C [370E000000000000] 
   268 00000144 E83A0A0000              	call bind_primitive
   269                                  
   270                                  	; building closure for cons
   271 00000149 48BF-                   	mov rdi, free_var_13
   271 0000014B [6800000000000000] 
   272 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   272 00000155 [6F0E000000000000] 
   273 0000015D E8210A0000              	call bind_primitive
   274                                  
   275                                  	; building closure for display-sexpr
   276 00000162 48BF-                   	mov rdi, free_var_14
   276 00000164 [7000000000000000] 
   277 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   277 0000016E [A30E000000000000] 
   278 00000176 E8080A0000              	call bind_primitive
   279                                  
   280                                  	; building closure for write-char
   281 0000017B 48BF-                   	mov rdi, free_var_15
   281 0000017D [7800000000000000] 
   282 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   282 00000187 [CD0E000000000000] 
   283 0000018F E8EF090000              	call bind_primitive
   284                                  
   285                                  	; building closure for car
   286 00000194 48BF-                   	mov rdi, free_var_16
   286 00000196 [8000000000000000] 
   287 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   287 000001A0 [1B0F000000000000] 
   288 000001A8 E8D6090000              	call bind_primitive
   289                                  
   290                                  	; building closure for cdr
   291 000001AD 48BF-                   	mov rdi, free_var_17
   291 000001AF [8800000000000000] 
   292 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   292 000001B9 [430F000000000000] 
   293 000001C1 E8BD090000              	call bind_primitive
   294                                  
   295                                  	; building closure for string-length
   296 000001C6 48BF-                   	mov rdi, free_var_18
   296 000001C8 [9000000000000000] 
   297 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   297 000001D2 [6B0F000000000000] 
   298 000001DA E8A4090000              	call bind_primitive
   299                                  
   300                                  	; building closure for vector-length
   301 000001DF 48BF-                   	mov rdi, free_var_19
   301 000001E1 [9800000000000000] 
   302 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   302 000001EB [980F000000000000] 
   303 000001F3 E88B090000              	call bind_primitive
   304                                  
   305                                  	; building closure for real->integer
   306 000001F8 48BF-                   	mov rdi, free_var_20
   306 000001FA [A000000000000000] 
   307 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   307 00000204 [C50F000000000000] 
   308 0000020C E872090000              	call bind_primitive
   309                                  
   310                                  	; building closure for exit
   311 00000211 48BF-                   	mov rdi, free_var_21
   311 00000213 [A800000000000000] 
   312 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   312 0000021D [F80F000000000000] 
   313 00000225 E859090000              	call bind_primitive
   314                                  
   315                                  	; building closure for integer->real
   316 0000022A 48BF-                   	mov rdi, free_var_22
   316 0000022C [B000000000000000] 
   317 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   317 00000236 [1510000000000000] 
   318 0000023E E840090000              	call bind_primitive
   319                                  
   320                                  	; building closure for rational->real
   321 00000243 48BF-                   	mov rdi, free_var_23
   321 00000245 [B800000000000000] 
   322 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   322 0000024F [5210000000000000] 
   323 00000257 E827090000              	call bind_primitive
   324                                  
   325                                  	; building closure for char->integer
   326 0000025C 48BF-                   	mov rdi, free_var_24
   326 0000025E [C000000000000000] 
   327 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   327 00000268 [9110000000000000] 
   328 00000270 E80E090000              	call bind_primitive
   329                                  
   330                                  	; building closure for integer->char
   331 00000275 48BF-                   	mov rdi, free_var_25
   331 00000277 [C800000000000000] 
   332 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   332 00000281 [C610000000000000] 
   333 00000289 E8F5080000              	call bind_primitive
   334                                  
   335                                  	; building closure for trng
   336 0000028E 48BF-                   	mov rdi, free_var_26
   336 00000290 [D000000000000000] 
   337 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   337 0000029A [2011000000000000] 
   338 000002A2 E8DC080000              	call bind_primitive
   339                                  
   340                                  	; building closure for zero?
   341 000002A7 48BF-                   	mov rdi, free_var_27
   341 000002A9 [D800000000000000] 
   342 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   342 000002B3 [4311000000000000] 
   343 000002BB E8C3080000              	call bind_primitive
   344                                  
   345                                  	; building closure for integer?
   346 000002C0 48BF-                   	mov rdi, free_var_28
   346 000002C2 [E000000000000000] 
   347 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   347 000002CC [9E11000000000000] 
   348 000002D4 E8AA080000              	call bind_primitive
   349                                  
   350                                  	; building closure for __bin-apply
   351 000002D9 48BF-                   	mov rdi, free_var_29
   351 000002DB [E800000000000000] 
   352 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   352 000002E5 [AB0B000000000000] 
   353 000002ED E891080000              	call bind_primitive
   354                                  
   355                                  	; building closure for __bin-add-rr
   356 000002F2 48BF-                   	mov rdi, free_var_30
   356 000002F4 [F000000000000000] 
   357 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   357 000002FE [DB11000000000000] 
   358 00000306 E878080000              	call bind_primitive
   359                                  
   360                                  	; building closure for __bin-sub-rr
   361 0000030B 48BF-                   	mov rdi, free_var_31
   361 0000030D [F800000000000000] 
   362 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   362 00000317 [1F12000000000000] 
   363 0000031F E85F080000              	call bind_primitive
   364                                  
   365                                  	; building closure for __bin-mul-rr
   366 00000324 48BF-                   	mov rdi, free_var_32
   366 00000326 [0001000000000000] 
   367 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   367 00000330 [6312000000000000] 
   368 00000338 E846080000              	call bind_primitive
   369                                  
   370                                  	; building closure for __bin-div-rr
   371 0000033D 48BF-                   	mov rdi, free_var_33
   371 0000033F [0801000000000000] 
   372 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   372 00000349 [A712000000000000] 
   373 00000351 E82D080000              	call bind_primitive
   374                                  
   375                                  	; building closure for __bin-add-qq
   376 00000356 48BF-                   	mov rdi, free_var_34
   376 00000358 [1001000000000000] 
   377 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   377 00000362 [F912000000000000] 
   378 0000036A E814080000              	call bind_primitive
   379                                  
   380                                  	; building closure for __bin-sub-qq
   381 0000036F 48BF-                   	mov rdi, free_var_35
   381 00000371 [1801000000000000] 
   382 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   382 0000037B [6113000000000000] 
   383 00000383 E8FB070000              	call bind_primitive
   384                                  
   385                                  	; building closure for __bin-mul-qq
   386 00000388 48BF-                   	mov rdi, free_var_36
   386 0000038A [2001000000000000] 
   387 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   387 00000394 [C913000000000000] 
   388 0000039C E8E2070000              	call bind_primitive
   389                                  
   390                                  	; building closure for __bin-div-qq
   391 000003A1 48BF-                   	mov rdi, free_var_37
   391 000003A3 [2801000000000000] 
   392 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   392 000003AD [2114000000000000] 
   393 000003B5 E8C9070000              	call bind_primitive
   394                                  
   395                                  	; building closure for error
   396 000003BA 48BF-                   	mov rdi, free_var_38
   396 000003BC [3001000000000000] 
   397 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   397 000003C6 [EF14000000000000] 
   398 000003CE E8B0070000              	call bind_primitive
   399                                  
   400                                  	; building closure for __bin-less-than-rr
   401 000003D3 48BF-                   	mov rdi, free_var_39
   401 000003D5 [3801000000000000] 
   402 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   402 000003DF [8B15000000000000] 
   403 000003E7 E897070000              	call bind_primitive
   404                                  
   405                                  	; building closure for __bin-less-than-qq
   406 000003EC 48BF-                   	mov rdi, free_var_40
   406 000003EE [4001000000000000] 
   407 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   407 000003F8 [E215000000000000] 
   408 00000400 E87E070000              	call bind_primitive
   409                                  
   410                                  	; building closure for __bin-equal-rr
   411 00000405 48BF-                   	mov rdi, free_var_41
   411 00000407 [4801000000000000] 
   412 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   412 00000411 [4516000000000000] 
   413 00000419 E865070000              	call bind_primitive
   414                                  
   415                                  	; building closure for __bin-equal-qq
   416 0000041E 48BF-                   	mov rdi, free_var_42
   416 00000420 [5001000000000000] 
   417 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   417 0000042A [9C16000000000000] 
   418 00000432 E84C070000              	call bind_primitive
   419                                  
   420                                  	; building closure for quotient
   421 00000437 48BF-                   	mov rdi, free_var_43
   421 00000439 [5801000000000000] 
   422 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   422 00000443 [FF16000000000000] 
   423 0000044B E833070000              	call bind_primitive
   424                                  
   425                                  	; building closure for remainder
   426 00000450 48BF-                   	mov rdi, free_var_44
   426 00000452 [6001000000000000] 
   427 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   427 0000045C [6517000000000000] 
   428 00000464 E81A070000              	call bind_primitive
   429                                  
   430                                  	; building closure for set-car!
   431 00000469 48BF-                   	mov rdi, free_var_45
   431 0000046B [6801000000000000] 
   432 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   432 00000475 [CB17000000000000] 
   433 0000047D E801070000              	call bind_primitive
   434                                  
   435                                  	; building closure for set-cdr!
   436 00000482 48BF-                   	mov rdi, free_var_46
   436 00000484 [7001000000000000] 
   437 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   437 0000048E [0118000000000000] 
   438 00000496 E8E8060000              	call bind_primitive
   439                                  
   440                                  	; building closure for string-ref
   441 0000049B 48BF-                   	mov rdi, free_var_47
   441 0000049D [7801000000000000] 
   442 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   442 000004A7 [3718000000000000] 
   443 000004AF E8CF060000              	call bind_primitive
   444                                  
   445                                  	; building closure for vector-ref
   446 000004B4 48BF-                   	mov rdi, free_var_48
   446 000004B6 [8001000000000000] 
   447 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   447 000004C0 [A218000000000000] 
   448 000004C8 E8B6060000              	call bind_primitive
   449                                  
   450                                  	; building closure for vector-set!
   451 000004CD 48BF-                   	mov rdi, free_var_49
   451 000004CF [8801000000000000] 
   452 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   452 000004D9 [FE18000000000000] 
   453 000004E1 E89D060000              	call bind_primitive
   454                                  
   455                                  	; building closure for string-set!
   456 000004E6 48BF-                   	mov rdi, free_var_50
   456 000004E8 [9001000000000000] 
   457 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   457 000004F2 [6819000000000000] 
   458 000004FA E884060000              	call bind_primitive
   459                                  
   460                                  	; building closure for make-vector
   461 000004FF 48BF-                   	mov rdi, free_var_51
   461 00000501 [9801000000000000] 
   462 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   462 0000050B [DD19000000000000] 
   463 00000513 E86B060000              	call bind_primitive
   464                                  
   465                                  	; building closure for make-string
   466 00000518 48BF-                   	mov rdi, free_var_52
   466 0000051A [A001000000000000] 
   467 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   467 00000524 [471A000000000000] 
   468 0000052C E852060000              	call bind_primitive
   469                                  
   470                                  	; building closure for numerator
   471 00000531 48BF-                   	mov rdi, free_var_53
   471 00000533 [A801000000000000] 
   472 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   472 0000053D [B91A000000000000] 
   473 00000545 E839060000              	call bind_primitive
   474                                  
   475                                  	; building closure for denominator
   476 0000054A 48BF-                   	mov rdi, free_var_54
   476 0000054C [B001000000000000] 
   477 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   477 00000556 [E61A000000000000] 
   478 0000055E E820060000              	call bind_primitive
   479                                  
   480                                  	; building closure for eq?
   481 00000563 48BF-                   	mov rdi, free_var_55
   481 00000565 [B801000000000000] 
   482 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   482 0000056F [131B000000000000] 
   483 00000577 E807060000              	call bind_primitive
   484                                  
   485 0000057C 48B8-                   	mov rax,2+L_constants
   485 0000057E [0200000000000000] 
   486                                  
   487 00000586 4889C7                  	mov rdi, rax
   488 00000589 E8C4000000              	call print_sexpr_if_not_void
   489                                  
   490 0000058E 48BF-                           mov rdi, fmt_memory_usage
   490 00000590 [6600000000000000] 
   491 00000598 488B3425[ED000000]              mov rsi, qword [top_of_memory]
   492 000005A0 4881EE[C0010000]                sub rsi, memory
   493 000005A7 B800000000                      mov rax, 0
   494 000005AC E8(00000000)                    call printf
   495 000005B1 C9                      	leave
   496 000005B2 C3                      	ret
   497                                  
   498                                  L_error_non_closure:
   499 000005B3 488B3C25[00000000]              mov rdi, qword [stderr]
   500 000005BB 48BE-                           mov rsi, fmt_non_closure
   500 000005BD [9D00000000000000] 
   501 000005C5 B800000000                      mov rax, 0
   502 000005CA E8(00000000)                    call fprintf
   503 000005CF 48C7C0FEFFFFFF                  mov rax, -2
   504 000005D6 E8(00000000)                    call exit
   505                                  
   506                                  L_error_improper_list:
   507 000005DB 488B3C25[00000000]      	mov rdi, qword [stderr]
   508 000005E3 48BE-                   	mov rsi, fmt_error_improper_list
   508 000005E5 [C500000000000000] 
   509 000005ED B800000000              	mov rax, 0
   510 000005F2 E8(00000000)            	call fprintf
   511 000005F7 48C7C0F9FFFFFF          	mov rax, -7
   512 000005FE E8(00000000)            	call exit
   513                                  
   514                                  L_error_incorrect_arity_simple:
   515 00000603 488B3C25[00000000]              mov rdi, qword [stderr]
   516 0000060B 48BE-                           mov rsi, fmt_incorrect_arity_simple
   516 0000060D [0700000000000000] 
   517 00000615 EB12                            jmp L_error_incorrect_arity_common
   518                                  L_error_incorrect_arity_opt:
   519 00000617 488B3C25[00000000]              mov rdi, qword [stderr]
   520 0000061F 48BE-                           mov rsi, fmt_incorrect_arity_opt
   520 00000621 [3200000000000000] 
   521                                  L_error_incorrect_arity_common:
   522 00000629 5A                              pop rdx
   523 0000062A 59                              pop rcx
   524 0000062B B800000000                      mov rax, 0
   525 00000630 E8(00000000)                    call fprintf
   526 00000635 48C7C0FAFFFFFF                  mov rax, -6
   527 0000063C E8(00000000)                    call exit
   528                                  
   529                                  section .data
   530                                  fmt_incorrect_arity_simple:
   531 00000007 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
   531 00000010 74656420256C642061-
   531 00000019 7267756D656E74732C-
   531 00000022 206275742067697665-
   531 0000002B 6E20256C640A00     
   532                                  fmt_incorrect_arity_opt:
   533 00000032 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
   533 0000003B 746564206174206C65-
   533 00000044 61737420256C642061-
   533 0000004D 7267756D656E74732C-
   533 00000056 206275742067697665-
   533 0000005F 6E20256C640A00     
   534                                  fmt_memory_usage:
   535 00000066 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
   535 0000006F 6420256C6420627974-
   535 00000078 6573206F662064796E-
   535 00000081 616D6963616C6C792D-
   535 0000008A 616C6C6F6361746564-
   535 00000093 206D656D6F72790A0A-
   535 0000009C 00                 
   536                                  fmt_non_closure:
   537 0000009D 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
   537 000000A6 7074696E6720746F20-
   537 000000AF 6170706C792061206E-
   537 000000B8 6F6E2D636C6F737572-
   537 000000C1 65210A00           
   538                                  fmt_error_improper_list:
   539 000000C5 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
   539 000000CE 7267756D656E742069-
   539 000000D7 73206E6F7420612070-
   539 000000E0 726F706572206C6973-
   539 000000E9 74210A00           
   540                                  
   541                                  section .bss
   542                                  memory:
   543 000001C0 <res 40000000h>         	resb gbytes(1)
   544                                  
   545                                  section .data
   546                                  top_of_memory:
   547 000000ED [C001000000000000]              dq memory
   548                                  
   549                                  section .text
   550                                  malloc:
   551 00000641 488B0425[ED000000]              mov rax, qword [top_of_memory]
   552 00000649 48013C25[ED000000]              add qword [top_of_memory], rdi
   553 00000651 C3                              ret
   554                                          
   555                                  print_sexpr_if_not_void:
   556 00000652 4881FF[00000000]        	cmp rdi, sob_void
   557 00000659 7501                    	jne print_sexpr
   558 0000065B C3                      	ret
   559                                  
   560                                  section .data
   561                                  fmt_void:
   562 000000F5 233C766F69643E00        	db `#<void>\0`
   563                                  fmt_nil:
   564 000000FD 282900                  	db `()\0`
   565                                  fmt_boolean_false:
   566 00000100 236600                  	db `#f\0`
   567                                  fmt_boolean_true:
   568 00000103 237400                  	db `#t\0`
   569                                  fmt_char_backslash:
   570 00000106 235C5C00                	db `#\\\\\0`
   571                                  fmt_char_dquote:
   572 0000010A 235C2200                	db `#\\"\0`
   573                                  fmt_char_simple:
   574 0000010E 235C256300              	db `#\\%c\0`
   575                                  fmt_char_null:
   576 00000113 235C6E756C00            	db `#\\nul\0`
   577                                  fmt_char_bell:
   578 00000119 235C62656C6C00          	db `#\\bell\0`
   579                                  fmt_char_backspace:
   580 00000120 235C6261636B737061-     	db `#\\backspace\0`
   580 00000129 636500             
   581                                  fmt_char_tab:
   582 0000012C 235C74616200            	db `#\\tab\0`
   583                                  fmt_char_newline:
   584 00000132 235C6E65776C696E65-     	db `#\\newline\0`
   584 0000013B 00                 
   585                                  fmt_char_formfeed:
   586 0000013C 235C7061676500          	db `#\\page\0`
   587                                  fmt_char_return:
   588 00000143 235C72657475726E00      	db `#\\return\0`
   589                                  fmt_char_escape:
   590 0000014C 235C65736300            	db `#\\esc\0`
   591                                  fmt_char_space:
   592 00000152 235C737061636500        	db `#\\space\0`
   593                                  fmt_char_hex:
   594 0000015A 235C782530325800        	db `#\\x%02X\0`
   595                                  fmt_closure:
   596 00000162 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
   596 0000016B 206174203078253038-
   596 00000174 5820656E763D307825-
   596 0000017D 30385820636F64653D-
   596 00000186 3078253038583E00   
   597                                  fmt_lparen:
   598 0000018E 2800                    	db `(\0`
   599                                  fmt_dotted_pair:
   600 00000190 202E2000                	db ` . \0`
   601                                  fmt_rparen:
   602 00000194 2900                    	db `)\0`
   603                                  fmt_space:
   604 00000196 2000                    	db ` \0`
   605                                  fmt_empty_vector:
   606 00000198 23282900                	db `#()\0`
   607                                  fmt_vector:
   608 0000019C 232800                  	db `#(\0`
   609                                  fmt_real:
   610 0000019F 256600                  	db `%f\0`
   611                                  fmt_fraction:
   612 000001A2 256C642F256C6400        	db `%ld/%ld\0`
   613                                  fmt_zero:
   614 000001AA 3000                    	db `0\0`
   615                                  fmt_int:
   616 000001AC 256C6400                	db `%ld\0`
   617                                  fmt_unknown_sexpr_error:
   618 000001B0 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
   618 000001B9 6F723A20556E6B6E6F-
   618 000001C2 776E2074797065206F-
   618 000001CB 662073657870722028-
   618 000001D4 3078253032582920   
   619 000001DC 617420616464726573-     	db `at address 0x%08X\n\n\0`
   619 000001E5 73203078253038580A-
   619 000001EE 0A00               
   620                                  fmt_dquote:
   621 000001F0 2200                    	db `\"\0`
   622                                  fmt_string_char:
   623 000001F2 256300                          db `%c\0`
   624                                  fmt_string_char_7:
   625 000001F5 5C6100                          db `\\a\0`
   626                                  fmt_string_char_8:
   627 000001F8 5C6200                          db `\\b\0`
   628                                  fmt_string_char_9:
   629 000001FB 5C7400                          db `\\t\0`
   630                                  fmt_string_char_10:
   631 000001FE 5C6E00                          db `\\n\0`
   632                                  fmt_string_char_11:
   633 00000201 5C7600                          db `\\v\0`
   634                                  fmt_string_char_12:
   635 00000204 5C6600                          db `\\f\0`
   636                                  fmt_string_char_13:
   637 00000207 5C7200                          db `\\r\0`
   638                                  fmt_string_char_34:
   639 0000020A 5C2200                          db `\\"\0`
   640                                  fmt_string_char_92:
   641 0000020D 5C5C00                          db `\\\\\0`
   642                                  fmt_string_char_hex:
   643 00000210 5C7825583B00                    db `\\x%X;\0`
   644                                  
   645                                  section .text
   646                                  
   647                                  print_sexpr:
   648                                  	ENTER
    33 0000065C C8000000            <1>  enter 0, 0
    34 00000660 4883E4F0            <1>  and rsp, ~15
   649 00000664 8A07                    	mov al, byte [rdi]
   650 00000666 3C00                    	cmp al, T_void
   651 00000668 744D                    	je .Lvoid
   652 0000066A 3C01                    	cmp al, T_nil
   653 0000066C 7458                    	je .Lnil
   654 0000066E 3C09                    	cmp al, T_boolean_false
   655 00000670 7463                    	je .Lboolean_false
   656 00000672 3C0A                    	cmp al, T_boolean_true
   657 00000674 746E                    	je .Lboolean_true
   658 00000676 3C02                    	cmp al, T_char
   659 00000678 7479                    	je .Lchar
   660 0000067A 3C04                    	cmp al, T_symbol
   661 0000067C 0F84BB010000            	je .Lsymbol
   662 00000682 3C21                    	cmp al, T_pair
   663 00000684 0F84D6010000            	je .Lpair
   664 0000068A 3C22                    	cmp al, T_vector
   665 0000068C 0F8478020000            	je .Lvector
   666 00000692 3C05                    	cmp al, T_closure
   667 00000694 0F8489010000            	je .Lclosure
   668 0000069A 3C12                    	cmp al, T_real
   669 0000069C 0F84F3020000            	je .Lreal
   670 000006A2 3C11                    	cmp al, T_rational
   671 000006A4 0F8419030000            	je .Lrational
   672 000006AA 3C03                    	cmp al, T_string
   673 000006AC 0F8452030000            	je .Lstring
   674                                  
   675 000006B2 E98A040000              	jmp .Lunknown_sexpr_type
   676                                  
   677                                  .Lvoid:
   678 000006B7 48BF-                   	mov rdi, fmt_void
   678 000006B9 [F500000000000000] 
   679 000006C1 E9AF040000              	jmp .Lemit
   680                                  
   681                                  .Lnil:
   682 000006C6 48BF-                   	mov rdi, fmt_nil
   682 000006C8 [FD00000000000000] 
   683 000006D0 E9A0040000              	jmp .Lemit
   684                                  
   685                                  .Lboolean_false:
   686 000006D5 48BF-                   	mov rdi, fmt_boolean_false
   686 000006D7 [0001000000000000] 
   687 000006DF E991040000              	jmp .Lemit
   688                                  
   689                                  .Lboolean_true:
   690 000006E4 48BF-                   	mov rdi, fmt_boolean_true
   690 000006E6 [0301000000000000] 
   691 000006EE E982040000              	jmp .Lemit
   692                                  
   693                                  .Lchar:
   694 000006F3 8A4701                  	mov al, byte [rdi + 1]
   695 000006F6 3C20                    	cmp al, ' '
   696 000006F8 7E28                    	jle .Lchar_whitespace
   697 000006FA 3C5C                    	cmp al, 92 		; backslash
   698 000006FC 0F847C000000            	je .Lchar_backslash
   699 00000702 3C22                    	cmp al, '"'
   700 00000704 0F8483000000            	je .Lchar_dquote
   701 0000070A 4825FF000000            	and rax, 255
   702 00000710 48BF-                   	mov rdi, fmt_char_simple
   702 00000712 [0E01000000000000] 
   703 0000071A 4889C6                  	mov rsi, rax
   704 0000071D E953040000              	jmp .Lemit
   705                                  
   706                                  .Lchar_whitespace:
   707 00000722 3C00                    	cmp al, 0
   708 00000724 7476                    	je .Lchar_null
   709 00000726 3C07                    	cmp al, 7
   710 00000728 0F847D000000            	je .Lchar_bell
   711 0000072E 3C08                    	cmp al, 8
   712 00000730 0F8484000000            	je .Lchar_backspace
   713 00000736 3C09                    	cmp al, 9
   714 00000738 0F848B000000            	je .Lchar_tab
   715 0000073E 3C0A                    	cmp al, 10
   716 00000740 0F8492000000            	je .Lchar_newline
   717 00000746 3C0C                    	cmp al, 12
   718 00000748 0F8499000000            	je .Lchar_formfeed
   719 0000074E 3C0D                    	cmp al, 13
   720 00000750 0F84A0000000            	je .Lchar_return
   721 00000756 3C1B                    	cmp al, 27
   722 00000758 0F84A7000000            	je .Lchar_escape
   723 0000075E 4825FF000000            	and rax, 255
   724 00000764 3C20                    	cmp al, ' '
   725 00000766 0F84A8000000            	je .Lchar_space
   726 0000076C 48BF-                   	mov rdi, fmt_char_hex
   726 0000076E [5A01000000000000] 
   727 00000776 4889C6                  	mov rsi, rax
   728 00000779 E9F7030000              	jmp .Lemit	
   729                                  
   730                                  .Lchar_backslash:
   731 0000077E 48BF-                   	mov rdi, fmt_char_backslash
   731 00000780 [0601000000000000] 
   732 00000788 E9E8030000              	jmp .Lemit
   733                                  
   734                                  .Lchar_dquote:
   735 0000078D 48BF-                   	mov rdi, fmt_char_dquote
   735 0000078F [0A01000000000000] 
   736 00000797 E9D9030000              	jmp .Lemit
   737                                  
   738                                  .Lchar_null:
   739 0000079C 48BF-                   	mov rdi, fmt_char_null
   739 0000079E [1301000000000000] 
   740 000007A6 E9CA030000              	jmp .Lemit
   741                                  
   742                                  .Lchar_bell:
   743 000007AB 48BF-                   	mov rdi, fmt_char_bell
   743 000007AD [1901000000000000] 
   744 000007B5 E9BB030000              	jmp .Lemit
   745                                  
   746                                  .Lchar_backspace:
   747 000007BA 48BF-                   	mov rdi, fmt_char_backspace
   747 000007BC [2001000000000000] 
   748 000007C4 E9AC030000              	jmp .Lemit
   749                                  
   750                                  .Lchar_tab:
   751 000007C9 48BF-                   	mov rdi, fmt_char_tab
   751 000007CB [2C01000000000000] 
   752 000007D3 E99D030000              	jmp .Lemit
   753                                  
   754                                  .Lchar_newline:
   755 000007D8 48BF-                   	mov rdi, fmt_char_newline
   755 000007DA [3201000000000000] 
   756 000007E2 E98E030000              	jmp .Lemit
   757                                  
   758                                  .Lchar_formfeed:
   759 000007E7 48BF-                   	mov rdi, fmt_char_formfeed
   759 000007E9 [3C01000000000000] 
   760 000007F1 E97F030000              	jmp .Lemit
   761                                  
   762                                  .Lchar_return:
   763 000007F6 48BF-                   	mov rdi, fmt_char_return
   763 000007F8 [4301000000000000] 
   764 00000800 E970030000              	jmp .Lemit
   765                                  
   766                                  .Lchar_escape:
   767 00000805 48BF-                   	mov rdi, fmt_char_escape
   767 00000807 [4C01000000000000] 
   768 0000080F E961030000              	jmp .Lemit
   769                                  
   770                                  .Lchar_space:
   771 00000814 48BF-                   	mov rdi, fmt_char_space
   771 00000816 [5201000000000000] 
   772 0000081E E952030000              	jmp .Lemit
   773                                  
   774                                  .Lclosure:
   775 00000823 4889FE                  	mov rsi, qword rdi
   776 00000826 48BF-                   	mov rdi, fmt_closure
   776 00000828 [6201000000000000] 
   777 00000830 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
   778 00000834 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
   779 00000838 E938030000              	jmp .Lemit
   780                                  
   781                                  .Lsymbol:
   782 0000083D 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
   783 00000841 BE01000000              	mov rsi, 1		 ; size = 1 byte
   784 00000846 488B5701                	mov rdx, qword [rdi + 1] ; length
   785 0000084A 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
   786 0000084E 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
   787 00000856 E8(00000000)            	call fwrite
   788 0000085B E921030000              	jmp .Lend
   789                                  	
   790                                  .Lpair:
   791 00000860 57                      	push rdi
   792 00000861 48BF-                   	mov rdi, fmt_lparen
   792 00000863 [8E01000000000000] 
   793 0000086B B800000000              	mov rax, 0
   794                                          ENTER
    33 00000870 C8000000            <1>  enter 0, 0
    34 00000874 4883E4F0            <1>  and rsp, ~15
   795 00000878 E8(00000000)            	call printf
   796                                          LEAVE
    38 0000087D C9                  <1>  leave
   797 0000087E 488B3C24                	mov rdi, qword [rsp] 	; pair
   798 00000882 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   799 00000886 E8D1FDFFFF              	call print_sexpr
   800 0000088B 5F                      	pop rdi 		; pair
   801 0000088C 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   802                                  .Lcdr:
   803 00000890 8A07                    	mov al, byte [rdi]
   804 00000892 3C01                    	cmp al, T_nil
   805 00000894 7435                    	je .Lcdr_nil
   806 00000896 3C21                    	cmp al, T_pair
   807 00000898 7447                    	je .Lcdr_pair
   808 0000089A 57                      	push rdi
   809 0000089B 48BF-                   	mov rdi, fmt_dotted_pair
   809 0000089D [9001000000000000] 
   810 000008A5 B800000000              	mov rax, 0
   811 000008AA E8(00000000)            	call printf
   812 000008AF 5F                      	pop rdi
   813 000008B0 E8A7FDFFFF              	call print_sexpr
   814 000008B5 48BF-                   	mov rdi, fmt_rparen
   814 000008B7 [9401000000000000] 
   815 000008BF B800000000              	mov rax, 0
   816 000008C4 E8(00000000)            	call printf
   817                                  	LEAVE
    38 000008C9 C9                  <1>  leave
   818 000008CA C3                      	ret
   819                                  
   820                                  .Lcdr_nil:
   821 000008CB 48BF-                   	mov rdi, fmt_rparen
   821 000008CD [9401000000000000] 
   822 000008D5 B800000000              	mov rax, 0
   823 000008DA E8(00000000)            	call printf
   824                                  	LEAVE
    38 000008DF C9                  <1>  leave
   825 000008E0 C3                      	ret
   826                                  
   827                                  .Lcdr_pair:
   828 000008E1 57                      	push rdi
   829 000008E2 48BF-                   	mov rdi, fmt_space
   829 000008E4 [9601000000000000] 
   830 000008EC B800000000              	mov rax, 0
   831 000008F1 E8(00000000)            	call printf
   832 000008F6 488B3C24                	mov rdi, qword [rsp]
   833 000008FA 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
   834 000008FE E859FDFFFF              	call print_sexpr
   835 00000903 5F                      	pop rdi
   836 00000904 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
   837 00000908 EB86                    	jmp .Lcdr
   838                                  
   839                                  .Lvector:
   840 0000090A 488B4701                	mov rax, qword [rdi + 1] ; length
   841 0000090E 4883F800                	cmp rax, 0
   842 00000912 7472                    	je .Lvector_empty
   843 00000914 57                      	push rdi
   844 00000915 48BF-                   	mov rdi, fmt_vector
   844 00000917 [9C01000000000000] 
   845 0000091F B800000000              	mov rax, 0
   846 00000924 E8(00000000)            	call printf
   847 00000929 488B3C24                	mov rdi, qword [rsp]
   848 0000092D FF7701                  	push qword [rdi + 1]
   849 00000930 6A01                    	push 1
   850 00000932 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
   851 00000936 E821FDFFFF              	call print_sexpr
   852                                  .Lvector_loop:
   853                                  	; [rsp] index
   854                                  	; [rsp + 8*1] limit
   855                                  	; [rsp + 8*2] vector
   856 0000093B 488B0424                	mov rax, qword [rsp]
   857 0000093F 483B442408              	cmp rax, qword [rsp + 8*1]
   858 00000944 742D                    	je .Lvector_end
   859 00000946 48BF-                   	mov rdi, fmt_space
   859 00000948 [9601000000000000] 
   860 00000950 B800000000              	mov rax, 0
   861 00000955 E8(00000000)            	call printf
   862 0000095A 488B0424                	mov rax, qword [rsp]
   863 0000095E 488B5C2410              	mov rbx, qword [rsp + 8*2]
   864 00000963 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
   865 00000968 E8EFFCFFFF              	call print_sexpr
   866 0000096D 48FF0424                	inc qword [rsp]
   867 00000971 EBC8                    	jmp .Lvector_loop
   868                                  
   869                                  .Lvector_end:
   870 00000973 4883C418                	add rsp, 8*3
   871 00000977 48BF-                   	mov rdi, fmt_rparen
   871 00000979 [9401000000000000] 
   872 00000981 E9EF010000              	jmp .Lemit	
   873                                  
   874                                  .Lvector_empty:
   875 00000986 48BF-                   	mov rdi, fmt_empty_vector
   875 00000988 [9801000000000000] 
   876 00000990 E9E0010000              	jmp .Lemit
   877                                  
   878                                  .Lreal:
   879 00000995 FF7701                  	push qword [rdi + 1]
   880 00000998 F20F100424              	movsd xmm0, qword [rsp]
   881 0000099D 4883C408                	add rsp, 8*1
   882 000009A1 48BF-                   	mov rdi, fmt_real
   882 000009A3 [9F01000000000000] 
   883 000009AB B801000000              	mov rax, 1
   884                                  	ENTER
    33 000009B0 C8000000            <1>  enter 0, 0
    34 000009B4 4883E4F0            <1>  and rsp, ~15
   885 000009B8 E8(00000000)            	call printf
   886                                  	LEAVE
    38 000009BD C9                  <1>  leave
   887 000009BE E9BE010000              	jmp .Lend
   888                                  
   889                                  .Lrational:
   890 000009C3 488B7701                	mov rsi, qword [rdi + 1]
   891 000009C7 488B5709                	mov rdx, qword [rdi + 1 + 8]
   892 000009CB 4883FE00                	cmp rsi, 0
   893 000009CF 7415                    	je .Lrat_zero
   894 000009D1 4883FA01                	cmp rdx, 1
   895 000009D5 741E                    	je .Lrat_int
   896 000009D7 48BF-                   	mov rdi, fmt_fraction
   896 000009D9 [A201000000000000] 
   897 000009E1 E98F010000              	jmp .Lemit
   898                                  
   899                                  .Lrat_zero:
   900 000009E6 48BF-                   	mov rdi, fmt_zero
   900 000009E8 [AA01000000000000] 
   901 000009F0 E980010000              	jmp .Lemit
   902                                  
   903                                  .Lrat_int:
   904 000009F5 48BF-                   	mov rdi, fmt_int
   904 000009F7 [AC01000000000000] 
   905 000009FF E971010000              	jmp .Lemit
   906                                  
   907                                  .Lstring:
   908 00000A04 488D4709                	lea rax, [rdi + 1 + 8]
   909 00000A08 50                      	push rax
   910 00000A09 FF7701                  	push qword [rdi + 1]
   911 00000A0C 48BF-                   	mov rdi, fmt_dquote
   911 00000A0E [F001000000000000] 
   912 00000A16 B800000000              	mov rax, 0
   913                                  	ENTER
    33 00000A1B C8000000            <1>  enter 0, 0
    34 00000A1F 4883E4F0            <1>  and rsp, ~15
   914 00000A23 E8(00000000)            	call printf
   915                                  	LEAVE
    38 00000A28 C9                  <1>  leave
   916                                  .Lstring_loop:
   917                                  	; qword [rsp]: limit
   918                                  	; qword [rsp + 8*1]: char *
   919 00000A29 48833C2400              	cmp qword [rsp], 0
   920 00000A2E 0F84FD000000            	je .Lstring_end
   921 00000A34 488B442408              	mov rax, qword [rsp + 8*1]
   922 00000A39 8A00                    	mov al, byte [rax]
   923 00000A3B 4825FF000000            	and rax, 255
   924 00000A41 3C07                    	cmp al, 7
   925 00000A43 7468                            je .Lstring_char_7
   926 00000A45 3C08                            cmp al, 8
   927 00000A47 7470                            je .Lstring_char_8
   928 00000A49 3C09                            cmp al, 9
   929 00000A4B 7478                            je .Lstring_char_9
   930 00000A4D 3C0A                            cmp al, 10
   931 00000A4F 0F847C000000                    je .Lstring_char_10
   932 00000A55 3C0B                            cmp al, 11
   933 00000A57 0F8480000000                    je .Lstring_char_11
   934 00000A5D 3C0C                            cmp al, 12
   935 00000A5F 0F8484000000                    je .Lstring_char_12
   936 00000A65 3C0D                            cmp al, 13
   937 00000A67 0F8488000000                    je .Lstring_char_13
   938 00000A6D 3C22                            cmp al, 34
   939 00000A6F 0F848C000000                    je .Lstring_char_34
   940 00000A75 3C5C                            cmp al, 92              ;         je .Lstring_char_92
   942 00000A77 3C20                            cmp al, ' '
   943 00000A79 0F8CA0000000                    jl .Lstring_char_hex
   944 00000A7F 48BF-                           mov rdi, fmt_string_char
   944 00000A81 [F201000000000000] 
   945 00000A89 4889C6                          mov rsi, rax
   946                                  .Lstring_char_emit:
   947 00000A8C B800000000                      mov rax, 0
   948                                          ENTER
    33 00000A91 C8000000            <1>  enter 0, 0
    34 00000A95 4883E4F0            <1>  and rsp, ~15
   949 00000A99 E8(00000000)                    call printf
   950                                          LEAVE
    38 00000A9E C9                  <1>  leave
   951 00000A9F 48FF0C24                        dec qword [rsp]
   952 00000AA3 48FF442408                      inc qword [rsp + 8*1]
   953 00000AA8 E97CFFFFFF                      jmp .Lstring_loop
   954                                  
   955                                  .Lstring_char_7:
   956 00000AAD 48BF-                           mov rdi, fmt_string_char_7
   956 00000AAF [F501000000000000] 
   957 00000AB7 EBD3                            jmp .Lstring_char_emit
   958                                  
   959                                  .Lstring_char_8:
   960 00000AB9 48BF-                           mov rdi, fmt_string_char_8
   960 00000ABB [F801000000000000] 
   961 00000AC3 EBC7                            jmp .Lstring_char_emit
   962                                          
   963                                  .Lstring_char_9:
   964 00000AC5 48BF-                           mov rdi, fmt_string_char_9
   964 00000AC7 [FB01000000000000] 
   965 00000ACF EBBB                            jmp .Lstring_char_emit
   966                                  
   967                                  .Lstring_char_10:
   968 00000AD1 48BF-                           mov rdi, fmt_string_char_10
   968 00000AD3 [FE01000000000000] 
   969 00000ADB EBAF                            jmp .Lstring_char_emit
   970                                  
   971                                  .Lstring_char_11:
   972 00000ADD 48BF-                           mov rdi, fmt_string_char_11
   972 00000ADF [0102000000000000] 
   973 00000AE7 EBA3                            jmp .Lstring_char_emit
   974                                  
   975                                  .Lstring_char_12:
   976 00000AE9 48BF-                           mov rdi, fmt_string_char_12
   976 00000AEB [0402000000000000] 
   977 00000AF3 EB97                            jmp .Lstring_char_emit
   978                                  
   979                                  .Lstring_char_13:
   980 00000AF5 48BF-                           mov rdi, fmt_string_char_13
   980 00000AF7 [0702000000000000] 
   981 00000AFF EB8B                            jmp .Lstring_char_emit
   982                                  
   983                                  .Lstring_char_34:
   984 00000B01 48BF-                           mov rdi, fmt_string_char_34
   984 00000B03 [0A02000000000000] 
   985 00000B0B E97CFFFFFF                      jmp .Lstring_char_emit
   986                                  
   987                                  .Lstring_char_92:
   988 00000B10 48BF-                           mov rdi, fmt_string_char_92
   988 00000B12 [0D02000000000000] 
   989 00000B1A E96DFFFFFF                      jmp .Lstring_char_emit
   990                                  
   991                                  .Lstring_char_hex:
   992 00000B1F 48BF-                           mov rdi, fmt_string_char_hex
   992 00000B21 [1002000000000000] 
   993 00000B29 4889C6                          mov rsi, rax
   994 00000B2C E95BFFFFFF                      jmp .Lstring_char_emit        
   995                                  
   996                                  .Lstring_end:
   997 00000B31 4883C410                	add rsp, 8 * 2
   998 00000B35 48BF-                   	mov rdi, fmt_dquote
   998 00000B37 [F001000000000000] 
   999 00000B3F EB34                    	jmp .Lemit
  1000                                  
  1001                                  .Lunknown_sexpr_type:
  1002 00000B41 48BE-                   	mov rsi, fmt_unknown_sexpr_error
  1002 00000B43 [B001000000000000] 
  1003 00000B4B 4825FF000000            	and rax, 255
  1004 00000B51 4889C2                  	mov rdx, rax
  1005 00000B54 4889F9                  	mov rcx, rdi
  1006 00000B57 488B3C25[00000000]      	mov rdi, qword [stderr]
  1007 00000B5F B800000000              	mov rax, 0
  1008 00000B64 E8(00000000)            	call fprintf
  1009 00000B69 48C7C0FFFFFFFF          	mov rax, -1
  1010 00000B70 E8(00000000)            	call exit
  1011                                  
  1012                                  .Lemit:
  1013 00000B75 B800000000              	mov rax, 0
  1014 00000B7A E8(00000000)            	call printf
  1015 00000B7F EB00                    	jmp .Lend
  1016                                  
  1017                                  .Lend:
  1018                                  	LEAVE
    38 00000B81 C9                  <1>  leave
  1019 00000B82 C3                      	ret
  1020                                  
  1021                                  ;;; rdi: address of free variable
  1022                                  ;;; rsi: address of code-pointer
  1023                                  bind_primitive:
  1024                                          ENTER
    33 00000B83 C8000000            <1>  enter 0, 0
    34 00000B87 4883E4F0            <1>  and rsp, ~15
  1025 00000B8B 57                              push rdi
  1026 00000B8C BF11000000                      mov rdi, (1 + 8 + 8)
  1027 00000B91 E8ABFAFFFF                      call malloc
  1028 00000B96 5F                              pop rdi
  1029 00000B97 C60005                          mov byte [rax], T_closure
  1030 00000B9A 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  1031 00000BA2 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  1032 00000BA6 488907                          mov qword [rdi], rax
  1033                                          LEAVE
    38 00000BA9 C9                  <1>  leave
  1034 00000BAA C3                              ret
  1035                                  
  1036                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
  1037                                  L_code_ptr_bin_apply:
  1038                                  	
  1039                                  L_code_ptr_is_null:
  1040                                          ENTER
    33 00000BAB C8000000            <1>  enter 0, 0
    34 00000BAF 4883E4F0            <1>  and rsp, ~15
  1041 00000BB3 48837D1801                      cmp COUNT, 1
  1042 00000BB8 0F856F100000                    jne L_error_arg_count_1
  1043 00000BBE 488B4520                        mov rax, PARAM(0)
  1044 00000BC2 803801                          cmp byte [rax], T_nil
  1045 00000BC5 750C                            jne .L_false
  1046 00000BC7 48B8-                           mov rax, sob_boolean_true
  1046 00000BC9 [0300000000000000] 
  1047 00000BD1 EB0A                            jmp .L_end
  1048                                  .L_false:
  1049 00000BD3 48B8-                           mov rax, sob_boolean_false
  1049 00000BD5 [0200000000000000] 
  1050                                  .L_end:
  1051                                          LEAVE
    38 00000BDD C9                  <1>  leave
  1052 00000BDE C21800                          ret AND_KILL_FRAME(1)
  1053                                  
  1054                                  L_code_ptr_is_pair:
  1055                                          ENTER
    33 00000BE1 C8000000            <1>  enter 0, 0
    34 00000BE5 4883E4F0            <1>  and rsp, ~15
  1056 00000BE9 48837D1801                      cmp COUNT, 1
  1057 00000BEE 0F8539100000                    jne L_error_arg_count_1
  1058 00000BF4 488B4520                        mov rax, PARAM(0)
  1059 00000BF8 803821                          cmp byte [rax], T_pair
  1060 00000BFB 750C                            jne .L_false
  1061 00000BFD 48B8-                           mov rax, sob_boolean_true
  1061 00000BFF [0300000000000000] 
  1062 00000C07 EB0A                            jmp .L_end
  1063                                  .L_false:
  1064 00000C09 48B8-                           mov rax, sob_boolean_false
  1064 00000C0B [0200000000000000] 
  1065                                  .L_end:
  1066                                          LEAVE
    38 00000C13 C9                  <1>  leave
  1067 00000C14 C21800                          ret AND_KILL_FRAME(1)
  1068                                          
  1069                                  L_code_ptr_is_void:
  1070                                          ENTER
    33 00000C17 C8000000            <1>  enter 0, 0
    34 00000C1B 4883E4F0            <1>  and rsp, ~15
  1071 00000C1F 48837D1801                      cmp COUNT, 1
  1072 00000C24 0F8503100000                    jne L_error_arg_count_1
  1073 00000C2A 488B4520                        mov rax, PARAM(0)
  1074 00000C2E 803800                          cmp byte [rax], T_void
  1075 00000C31 750C                            jne .L_false
  1076 00000C33 48B8-                           mov rax, sob_boolean_true
  1076 00000C35 [0300000000000000] 
  1077 00000C3D EB0A                            jmp .L_end
  1078                                  .L_false:
  1079 00000C3F 48B8-                           mov rax, sob_boolean_false
  1079 00000C41 [0200000000000000] 
  1080                                  .L_end:
  1081                                          LEAVE
    38 00000C49 C9                  <1>  leave
  1082 00000C4A C21800                          ret AND_KILL_FRAME(1)
  1083                                  
  1084                                  L_code_ptr_is_char:
  1085                                          ENTER
    33 00000C4D C8000000            <1>  enter 0, 0
    34 00000C51 4883E4F0            <1>  and rsp, ~15
  1086 00000C55 48837D1801                      cmp COUNT, 1
  1087 00000C5A 0F85CD0F0000                    jne L_error_arg_count_1
  1088 00000C60 488B4520                        mov rax, PARAM(0)
  1089 00000C64 803802                          cmp byte [rax], T_char
  1090 00000C67 750C                            jne .L_false
  1091 00000C69 48B8-                           mov rax, sob_boolean_true
  1091 00000C6B [0300000000000000] 
  1092 00000C73 EB0A                            jmp .L_end
  1093                                  .L_false:
  1094 00000C75 48B8-                           mov rax, sob_boolean_false
  1094 00000C77 [0200000000000000] 
  1095                                  .L_end:
  1096                                          LEAVE
    38 00000C7F C9                  <1>  leave
  1097 00000C80 C21800                          ret AND_KILL_FRAME(1)
  1098                                  
  1099                                  L_code_ptr_is_string:
  1100                                          ENTER
    33 00000C83 C8000000            <1>  enter 0, 0
    34 00000C87 4883E4F0            <1>  and rsp, ~15
  1101 00000C8B 48837D1801                      cmp COUNT, 1
  1102 00000C90 0F85970F0000                    jne L_error_arg_count_1
  1103 00000C96 488B4520                        mov rax, PARAM(0)
  1104 00000C9A 803803                          cmp byte [rax], T_string
  1105 00000C9D 750C                            jne .L_false
  1106 00000C9F 48B8-                           mov rax, sob_boolean_true
  1106 00000CA1 [0300000000000000] 
  1107 00000CA9 EB0A                            jmp .L_end
  1108                                  .L_false:
  1109 00000CAB 48B8-                           mov rax, sob_boolean_false
  1109 00000CAD [0200000000000000] 
  1110                                  .L_end:
  1111                                          LEAVE
    38 00000CB5 C9                  <1>  leave
  1112 00000CB6 C21800                          ret AND_KILL_FRAME(1)
  1113                                  
  1114                                  L_code_ptr_is_symbol:
  1115                                          ENTER
    33 00000CB9 C8000000            <1>  enter 0, 0
    34 00000CBD 4883E4F0            <1>  and rsp, ~15
  1116 00000CC1 48837D1801                      cmp COUNT, 1
  1117 00000CC6 0F85610F0000                    jne L_error_arg_count_1
  1118 00000CCC 488B4520                        mov rax, PARAM(0)
  1119 00000CD0 803804                          cmp byte [rax], T_symbol
  1120 00000CD3 750C                            jne .L_false
  1121 00000CD5 48B8-                           mov rax, sob_boolean_true
  1121 00000CD7 [0300000000000000] 
  1122 00000CDF EB0A                            jmp .L_end
  1123                                  .L_false:
  1124 00000CE1 48B8-                           mov rax, sob_boolean_false
  1124 00000CE3 [0200000000000000] 
  1125                                  .L_end:
  1126                                          LEAVE
    38 00000CEB C9                  <1>  leave
  1127 00000CEC C21800                          ret AND_KILL_FRAME(1)
  1128                                  
  1129                                  L_code_ptr_is_vector:
  1130                                          ENTER
    33 00000CEF C8000000            <1>  enter 0, 0
    34 00000CF3 4883E4F0            <1>  and rsp, ~15
  1131 00000CF7 48837D1801                      cmp COUNT, 1
  1132 00000CFC 0F852B0F0000                    jne L_error_arg_count_1
  1133 00000D02 488B4520                        mov rax, PARAM(0)
  1134 00000D06 803822                          cmp byte [rax], T_vector
  1135 00000D09 750C                            jne .L_false
  1136 00000D0B 48B8-                           mov rax, sob_boolean_true
  1136 00000D0D [0300000000000000] 
  1137 00000D15 EB0A                            jmp .L_end
  1138                                  .L_false:
  1139 00000D17 48B8-                           mov rax, sob_boolean_false
  1139 00000D19 [0200000000000000] 
  1140                                  .L_end:
  1141                                          LEAVE
    38 00000D21 C9                  <1>  leave
  1142 00000D22 C21800                          ret AND_KILL_FRAME(1)
  1143                                  
  1144                                  L_code_ptr_is_closure:
  1145                                          ENTER
    33 00000D25 C8000000            <1>  enter 0, 0
    34 00000D29 4883E4F0            <1>  and rsp, ~15
  1146 00000D2D 48837D1801                      cmp COUNT, 1
  1147 00000D32 0F85F50E0000                    jne L_error_arg_count_1
  1148 00000D38 488B4520                        mov rax, PARAM(0)
  1149 00000D3C 803805                          cmp byte [rax], T_closure
  1150 00000D3F 750C                            jne .L_false
  1151 00000D41 48B8-                           mov rax, sob_boolean_true
  1151 00000D43 [0300000000000000] 
  1152 00000D4B EB0A                            jmp .L_end
  1153                                  .L_false:
  1154 00000D4D 48B8-                           mov rax, sob_boolean_false
  1154 00000D4F [0200000000000000] 
  1155                                  .L_end:
  1156                                          LEAVE
    38 00000D57 C9                  <1>  leave
  1157 00000D58 C21800                          ret AND_KILL_FRAME(1)
  1158                                  
  1159                                  L_code_ptr_is_real:
  1160                                          ENTER
    33 00000D5B C8000000            <1>  enter 0, 0
    34 00000D5F 4883E4F0            <1>  and rsp, ~15
  1161 00000D63 48837D1801                      cmp COUNT, 1
  1162 00000D68 0F85BF0E0000                    jne L_error_arg_count_1
  1163 00000D6E 488B4520                        mov rax, PARAM(0)
  1164 00000D72 803812                          cmp byte [rax], T_real
  1165 00000D75 750C                            jne .L_false
  1166 00000D77 48B8-                           mov rax, sob_boolean_true
  1166 00000D79 [0300000000000000] 
  1167 00000D81 EB0A                            jmp .L_end
  1168                                  .L_false:
  1169 00000D83 48B8-                           mov rax, sob_boolean_false
  1169 00000D85 [0200000000000000] 
  1170                                  .L_end:
  1171                                          LEAVE
    38 00000D8D C9                  <1>  leave
  1172 00000D8E C21800                          ret AND_KILL_FRAME(1)
  1173                                  
  1174                                  L_code_ptr_is_rational:
  1175                                          ENTER
    33 00000D91 C8000000            <1>  enter 0, 0
    34 00000D95 4883E4F0            <1>  and rsp, ~15
  1176 00000D99 48837D1801                      cmp COUNT, 1
  1177 00000D9E 0F85890E0000                    jne L_error_arg_count_1
  1178 00000DA4 488B4520                        mov rax, PARAM(0)
  1179 00000DA8 803811                          cmp byte [rax], T_rational
  1180 00000DAB 750C                            jne .L_false
  1181 00000DAD 48B8-                           mov rax, sob_boolean_true
  1181 00000DAF [0300000000000000] 
  1182 00000DB7 EB0A                            jmp .L_end
  1183                                  .L_false:
  1184 00000DB9 48B8-                           mov rax, sob_boolean_false
  1184 00000DBB [0200000000000000] 
  1185                                  .L_end:
  1186                                          LEAVE
    38 00000DC3 C9                  <1>  leave
  1187 00000DC4 C21800                          ret AND_KILL_FRAME(1)
  1188                                  
  1189                                  L_code_ptr_is_boolean:
  1190                                          ENTER
    33 00000DC7 C8000000            <1>  enter 0, 0
    34 00000DCB 4883E4F0            <1>  and rsp, ~15
  1191 00000DCF 48837D1801                      cmp COUNT, 1
  1192 00000DD4 0F85530E0000                    jne L_error_arg_count_1
  1193 00000DDA 488B4520                        mov rax, PARAM(0)
  1194 00000DDE 8A18                            mov bl, byte [rax]
  1195 00000DE0 80E308                          and bl, T_boolean
  1196 00000DE3 740C                            je .L_false
  1197 00000DE5 48B8-                           mov rax, sob_boolean_true
  1197 00000DE7 [0300000000000000] 
  1198 00000DEF EB0A                            jmp .L_end
  1199                                  .L_false:
  1200 00000DF1 48B8-                           mov rax, sob_boolean_false
  1200 00000DF3 [0200000000000000] 
  1201                                  .L_end:
  1202                                          LEAVE
    38 00000DFB C9                  <1>  leave
  1203 00000DFC C21800                          ret AND_KILL_FRAME(1)
  1204                                          
  1205                                  L_code_ptr_is_number:
  1206                                          ENTER
    33 00000DFF C8000000            <1>  enter 0, 0
    34 00000E03 4883E4F0            <1>  and rsp, ~15
  1207 00000E07 48837D1801                      cmp COUNT, 1
  1208 00000E0C 0F851B0E0000                    jne L_error_arg_count_1
  1209 00000E12 488B4520                        mov rax, PARAM(0)
  1210 00000E16 8A18                            mov bl, byte [rax]
  1211 00000E18 80E310                          and bl, T_number
  1212 00000E1B 740C                            je .L_false
  1213 00000E1D 48B8-                           mov rax, sob_boolean_true
  1213 00000E1F [0300000000000000] 
  1214 00000E27 EB0A                            jmp .L_end
  1215                                  .L_false:
  1216 00000E29 48B8-                           mov rax, sob_boolean_false
  1216 00000E2B [0200000000000000] 
  1217                                  .L_end:
  1218                                          LEAVE
    38 00000E33 C9                  <1>  leave
  1219 00000E34 C21800                          ret AND_KILL_FRAME(1)
  1220                                          
  1221                                  L_code_ptr_is_collection:
  1222                                          ENTER
    33 00000E37 C8000000            <1>  enter 0, 0
    34 00000E3B 4883E4F0            <1>  and rsp, ~15
  1223 00000E3F 48837D1801                      cmp COUNT, 1
  1224 00000E44 0F85E30D0000                    jne L_error_arg_count_1
  1225 00000E4A 488B4520                        mov rax, PARAM(0)
  1226 00000E4E 8A18                            mov bl, byte [rax]
  1227 00000E50 80E320                          and bl, T_collection
  1228 00000E53 740C                            je .L_false
  1229 00000E55 48B8-                           mov rax, sob_boolean_true
  1229 00000E57 [0300000000000000] 
  1230 00000E5F EB0A                            jmp .L_end
  1231                                  .L_false:
  1232 00000E61 48B8-                           mov rax, sob_boolean_false
  1232 00000E63 [0200000000000000] 
  1233                                  .L_end:
  1234                                          LEAVE
    38 00000E6B C9                  <1>  leave
  1235 00000E6C C21800                          ret AND_KILL_FRAME(1)
  1236                                  
  1237                                  L_code_ptr_cons:
  1238                                          ENTER
    33 00000E6F C8000000            <1>  enter 0, 0
    34 00000E73 4883E4F0            <1>  and rsp, ~15
  1239 00000E77 48837D1802                      cmp COUNT, 2
  1240 00000E7C 0F85D70D0000                    jne L_error_arg_count_2
  1241 00000E82 BF11000000                      mov rdi, (1 + 8 + 8)
  1242 00000E87 E8B5F7FFFF                      call malloc
  1243 00000E8C C60021                          mov byte [rax], T_pair
  1244 00000E8F 488B5D20                        mov rbx, PARAM(0)
  1245 00000E93 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1246 00000E97 488B5D28                        mov rbx, PARAM(1)
  1247 00000E9B 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1248                                          LEAVE
    38 00000E9F C9                  <1>  leave
  1249 00000EA0 C22000                          ret AND_KILL_FRAME(2)
  1250                                  
  1251                                  L_code_ptr_display_sexpr:
  1252                                          ENTER
    33 00000EA3 C8000000            <1>  enter 0, 0
    34 00000EA7 4883E4F0            <1>  and rsp, ~15
  1253 00000EAB 48837D1801                      cmp COUNT, 1
  1254 00000EB0 0F85770D0000                    jne L_error_arg_count_1
  1255 00000EB6 488B7D20                        mov rdi, PARAM(0)
  1256 00000EBA E89DF7FFFF                      call print_sexpr
  1257 00000EBF 48B8-                           mov rax, sob_void
  1257 00000EC1 [0000000000000000] 
  1258                                          LEAVE
    38 00000EC9 C9                  <1>  leave
  1259 00000ECA C21800                          ret AND_KILL_FRAME(1)
  1260                                  
  1261                                  L_code_ptr_write_char:
  1262                                          ENTER
    33 00000ECD C8000000            <1>  enter 0, 0
    34 00000ED1 4883E4F0            <1>  and rsp, ~15
  1263 00000ED5 48837D1801                      cmp COUNT, 1
  1264 00000EDA 0F854D0D0000                    jne L_error_arg_count_1
  1265 00000EE0 488B4520                        mov rax, PARAM(0)
  1266                                          assert_char(rax)
    42 00000EE4 803802              <1>  cmp byte [%1], %2
    43 00000EE7 0F85F00D0000        <1>  jne L_error_incorrect_type
  1267 00000EED 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  1268 00000EF0 4825FF000000                    and rax, 255
  1269 00000EF6 48BF-                           mov rdi, fmt_char
  1269 00000EF8 [1602000000000000] 
  1270 00000F00 4889C6                          mov rsi, rax
  1271 00000F03 B800000000                      mov rax, 0
  1272 00000F08 E8(00000000)                    call printf
  1273 00000F0D 48B8-                           mov rax, sob_void
  1273 00000F0F [0000000000000000] 
  1274                                          LEAVE
    38 00000F17 C9                  <1>  leave
  1275 00000F18 C21800                          ret AND_KILL_FRAME(1)
  1276                                  
  1277                                  L_code_ptr_car:
  1278                                          ENTER
    33 00000F1B C8000000            <1>  enter 0, 0
    34 00000F1F 4883E4F0            <1>  and rsp, ~15
  1279 00000F23 48837D1801                      cmp COUNT, 1
  1280 00000F28 0F85FF0C0000                    jne L_error_arg_count_1
  1281 00000F2E 488B4520                        mov rax, PARAM(0)
  1282                                          assert_pair(rax)
    42 00000F32 803821              <1>  cmp byte [%1], %2
    43 00000F35 0F85A20D0000        <1>  jne L_error_incorrect_type
  1283 00000F3B 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  1284                                          LEAVE
    38 00000F3F C9                  <1>  leave
  1285 00000F40 C21800                          ret AND_KILL_FRAME(1)
  1286                                          
  1287                                  L_code_ptr_cdr:
  1288                                          ENTER
    33 00000F43 C8000000            <1>  enter 0, 0
    34 00000F47 4883E4F0            <1>  and rsp, ~15
  1289 00000F4B 48837D1801                      cmp COUNT, 1
  1290 00000F50 0F85D70C0000                    jne L_error_arg_count_1
  1291 00000F56 488B4520                        mov rax, PARAM(0)
  1292                                          assert_pair(rax)
    42 00000F5A 803821              <1>  cmp byte [%1], %2
    43 00000F5D 0F857A0D0000        <1>  jne L_error_incorrect_type
  1293 00000F63 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  1294                                          LEAVE
    38 00000F67 C9                  <1>  leave
  1295 00000F68 C21800                          ret AND_KILL_FRAME(1)
  1296                                          
  1297                                  L_code_ptr_string_length:
  1298                                          ENTER
    33 00000F6B C8000000            <1>  enter 0, 0
    34 00000F6F 4883E4F0            <1>  and rsp, ~15
  1299 00000F73 48837D1801                      cmp COUNT, 1
  1300 00000F78 0F85AF0C0000                    jne L_error_arg_count_1
  1301 00000F7E 488B4520                        mov rax, PARAM(0)
  1302                                          assert_string(rax)
    42 00000F82 803803              <1>  cmp byte [%1], %2
    43 00000F85 0F85520D0000        <1>  jne L_error_incorrect_type
  1303 00000F8B 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  1304 00000F8F E81F0C0000                      call make_integer
  1305                                          LEAVE
    38 00000F94 C9                  <1>  leave
  1306 00000F95 C21800                          ret AND_KILL_FRAME(1)
  1307                                  
  1308                                  L_code_ptr_vector_length:
  1309                                          ENTER
    33 00000F98 C8000000            <1>  enter 0, 0
    34 00000F9C 4883E4F0            <1>  and rsp, ~15
  1310 00000FA0 48837D1801                      cmp COUNT, 1
  1311 00000FA5 0F85820C0000                    jne L_error_arg_count_1
  1312 00000FAB 488B4520                        mov rax, PARAM(0)
  1313                                          assert_vector(rax)
    42 00000FAF 803822              <1>  cmp byte [%1], %2
    43 00000FB2 0F85250D0000        <1>  jne L_error_incorrect_type
  1314 00000FB8 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  1315 00000FBC E8F20B0000                      call make_integer
  1316                                          LEAVE
    38 00000FC1 C9                  <1>  leave
  1317 00000FC2 C21800                          ret AND_KILL_FRAME(1)
  1318                                  
  1319                                  L_code_ptr_real_to_integer:
  1320                                          ENTER
    33 00000FC5 C8000000            <1>  enter 0, 0
    34 00000FC9 4883E4F0            <1>  and rsp, ~15
  1321 00000FCD 48837D1801                      cmp COUNT, 1
  1322 00000FD2 0F85550C0000                    jne L_error_arg_count_1
  1323 00000FD8 488B5D20                        mov rbx, PARAM(0)
  1324                                          assert_real(rbx)
    42 00000FDC 803B12              <1>  cmp byte [%1], %2
    43 00000FDF 0F85F80C0000        <1>  jne L_error_incorrect_type
  1325 00000FE5 F20F104301                      movsd xmm0, qword [rbx + 1]
  1326 00000FEA F2480F2CF8                      cvttsd2si rdi, xmm0
  1327 00000FEF E8BF0B0000                      call make_integer
  1328                                          LEAVE
    38 00000FF4 C9                  <1>  leave
  1329 00000FF5 C21800                          ret AND_KILL_FRAME(1)
  1330                                  
  1331                                  L_code_ptr_exit:
  1332                                          ENTER
    33 00000FF8 C8000000            <1>  enter 0, 0
    34 00000FFC 4883E4F0            <1>  and rsp, ~15
  1333 00001000 48837D1800                      cmp COUNT, 0
  1334 00001005 0F85F60B0000                    jne L_error_arg_count_0
  1335 0000100B B800000000                      mov rax, 0
  1336 00001010 E8(00000000)                    call exit
  1337                                  
  1338                                  L_code_ptr_integer_to_real:
  1339                                          ENTER
    33 00001015 C8000000            <1>  enter 0, 0
    34 00001019 4883E4F0            <1>  and rsp, ~15
  1340 0000101D 48837D1801                      cmp COUNT, 1
  1341 00001022 0F85050C0000                    jne L_error_arg_count_1
  1342 00001028 488B4520                        mov rax, PARAM(0)
  1343                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 0000102C 803811              <2>  cmp byte [%1], %2
    43 0000102F 0F85A80C0000        <2>  jne L_error_incorrect_type
    48 00001035 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000103A 0F859D0C0000        <1>  jne L_error_incorrect_type
  1344 00001040 FF7001                          push qword [rax + 1]
  1345 00001043 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1346 00001049 E8490B0000                      call make_real
  1347                                          LEAVE
    38 0000104E C9                  <1>  leave
  1348 0000104F C21800                          ret AND_KILL_FRAME(1)
  1349                                  
  1350                                  L_code_ptr_rational_to_real:
  1351                                          ENTER
    33 00001052 C8000000            <1>  enter 0, 0
    34 00001056 4883E4F0            <1>  and rsp, ~15
  1352 0000105A 48837D1801                      cmp COUNT, 1
  1353 0000105F 0F85C80B0000                    jne L_error_arg_count_1
  1354 00001065 488B4520                        mov rax, PARAM(0)
  1355                                          assert_rational(rax)
    42 00001069 803811              <1>  cmp byte [%1], %2
    43 0000106C 0F856B0C0000        <1>  jne L_error_incorrect_type
  1356 00001072 FF7001                          push qword [rax + 1]
  1357 00001075 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  1358 0000107B FF7009                          push qword [rax + 1 + 8]
  1359 0000107E F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  1360 00001084 F20F5EC1                        divsd xmm0, xmm1
  1361 00001088 E80A0B0000                      call make_real
  1362                                          LEAVE
    38 0000108D C9                  <1>  leave
  1363 0000108E C21800                          ret AND_KILL_FRAME(1)
  1364                                  
  1365                                  L_code_ptr_char_to_integer:
  1366                                          ENTER
    33 00001091 C8000000            <1>  enter 0, 0
    34 00001095 4883E4F0            <1>  and rsp, ~15
  1367 00001099 48837D1801                      cmp COUNT, 1
  1368 0000109E 0F85890B0000                    jne L_error_arg_count_1
  1369 000010A4 488B4520                        mov rax, PARAM(0)
  1370                                          assert_char(rax)
    42 000010A8 803802              <1>  cmp byte [%1], %2
    43 000010AB 0F852C0C0000        <1>  jne L_error_incorrect_type
  1371 000010B1 8A4001                          mov al, byte [rax + 1]
  1372 000010B4 4825FF000000                    and rax, 255
  1373 000010BA 4889C7                          mov rdi, rax
  1374 000010BD E8F10A0000                      call make_integer
  1375                                          LEAVE
    38 000010C2 C9                  <1>  leave
  1376 000010C3 C21800                          ret AND_KILL_FRAME(1)
  1377                                  
  1378                                  L_code_ptr_integer_to_char:
  1379                                          ENTER
    33 000010C6 C8000000            <1>  enter 0, 0
    34 000010CA 4883E4F0            <1>  and rsp, ~15
  1380 000010CE 48837D1801                      cmp COUNT, 1
  1381 000010D3 0F85540B0000                    jne L_error_arg_count_1
  1382 000010D9 488B4520                        mov rax, PARAM(0)
  1383                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000010DD 803811              <2>  cmp byte [%1], %2
    43 000010E0 0F85F70B0000        <2>  jne L_error_incorrect_type
    48 000010E6 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000010EB 0F85EC0B0000        <1>  jne L_error_incorrect_type
  1384 000010F1 488B5801                        mov rbx, qword [rax + 1]
  1385 000010F5 4883FB00                        cmp rbx, 0
  1386 000010F9 0F8EDA0A0000                    jle L_error_integer_range
  1387 000010FF 4881FB00010000                  cmp rbx, 256
  1388 00001106 0F8DCD0A0000                    jge L_error_integer_range
  1389 0000110C BF02000000                      mov rdi, (1 + 1)
  1390 00001111 E82BF5FFFF                      call malloc
  1391 00001116 C60002                          mov byte [rax], T_char
  1392 00001119 885801                          mov byte [rax + 1], bl
  1393                                          LEAVE
    38 0000111C C9                  <1>  leave
  1394 0000111D C21800                          ret AND_KILL_FRAME(1)
  1395                                  
  1396                                  L_code_ptr_trng:
  1397                                          ENTER
    33 00001120 C8000000            <1>  enter 0, 0
    34 00001124 4883E4F0            <1>  and rsp, ~15
  1398 00001128 48837D1800                      cmp COUNT, 0
  1399 0000112D 0F85CE0A0000                    jne L_error_arg_count_0
  1400 00001133 480FC7F7                        rdrand rdi
  1401 00001137 48D1EF                          shr rdi, 1
  1402 0000113A E8740A0000                      call make_integer
  1403                                          LEAVE
    38 0000113F C9                  <1>  leave
  1404 00001140 C21000                          ret AND_KILL_FRAME(0)
  1405                                  
  1406                                  L_code_ptr_is_zero:
  1407                                          ENTER
    33 00001143 C8000000            <1>  enter 0, 0
    34 00001147 4883E4F0            <1>  and rsp, ~15
  1408 0000114B 48837D1801                      cmp COUNT, 1
  1409 00001150 0F85D70A0000                    jne L_error_arg_count_1
  1410 00001156 488B4520                        mov rax, PARAM(0)
  1411 0000115A 803811                          cmp byte [rax], T_rational
  1412 0000115D 740A                            je .L_rational
  1413 0000115F 803812                          cmp byte [rax], T_real
  1414 00001162 740E                            je .L_real
  1415 00001164 E9740B0000                      jmp L_error_incorrect_type
  1416                                  .L_rational:
  1417 00001169 4883780100                      cmp qword [rax + 1], 0
  1418 0000116E 7420                            je .L_zero
  1419 00001170 EB12                            jmp .L_not_zero
  1420                                  .L_real:
  1421 00001172 660FEFC0                        pxor xmm0, xmm0
  1422 00001176 FF7001                          push qword [rax + 1]
  1423 00001179 F20F100C24                      movsd xmm1, qword [rsp]
  1424 0000117E 660F2EC1                        ucomisd xmm0, xmm1
  1425 00001182 740C                            je .L_zero
  1426                                  .L_not_zero:
  1427 00001184 48B8-                           mov rax, sob_boolean_false
  1427 00001186 [0200000000000000] 
  1428 0000118E EB0A                            jmp .L_end
  1429                                  .L_zero:
  1430 00001190 48B8-                           mov rax, sob_boolean_true
  1430 00001192 [0300000000000000] 
  1431                                  .L_end:
  1432                                          LEAVE
    38 0000119A C9                  <1>  leave
  1433 0000119B C21800                          ret AND_KILL_FRAME(1)
  1434                                  
  1435                                  L_code_ptr_is_integer:
  1436                                          ENTER
    33 0000119E C8000000            <1>  enter 0, 0
    34 000011A2 4883E4F0            <1>  and rsp, ~15
  1437 000011A6 48837D1801                      cmp COUNT, 1
  1438 000011AB 0F857C0A0000                    jne L_error_arg_count_1
  1439 000011B1 488B4520                        mov rax, PARAM(0)
  1440 000011B5 803811                          cmp byte [rax], T_rational
  1441 000011B8 7513                            jne .L_false
  1442 000011BA 4883780901                      cmp qword [rax + 1 + 8], 1
  1443 000011BF 750C                            jne .L_false
  1444 000011C1 48B8-                           mov rax, sob_boolean_true
  1444 000011C3 [0300000000000000] 
  1445 000011CB EB0A                            jmp .L_exit
  1446                                  .L_false:
  1447 000011CD 48B8-                           mov rax, sob_boolean_false
  1447 000011CF [0200000000000000] 
  1448                                  .L_exit:
  1449                                          LEAVE
    38 000011D7 C9                  <1>  leave
  1450 000011D8 C21800                          ret AND_KILL_FRAME(1)
  1451                                  
  1452                                  L_code_ptr_raw_bin_add_rr:
  1453                                          ENTER
    33 000011DB C8000000            <1>  enter 0, 0
    34 000011DF 4883E4F0            <1>  and rsp, ~15
  1454 000011E3 48837D1802                      cmp COUNT, 2
  1455 000011E8 0F856B0A0000                    jne L_error_arg_count_2
  1456 000011EE 488B5D20                        mov rbx, PARAM(0)
  1457                                          assert_real(rbx)
    42 000011F2 803B12              <1>  cmp byte [%1], %2
    43 000011F5 0F85E20A0000        <1>  jne L_error_incorrect_type
  1458 000011FB 488B4D28                        mov rcx, PARAM(1)
  1459                                          assert_real(rcx)
    42 000011FF 803912              <1>  cmp byte [%1], %2
    43 00001202 0F85D50A0000        <1>  jne L_error_incorrect_type
  1460 00001208 F20F104301                      movsd xmm0, qword [rbx + 1]
  1461 0000120D F20F104901                      movsd xmm1, qword [rcx + 1]
  1462 00001212 F20F58C1                        addsd xmm0, xmm1
  1463 00001216 E87C090000                      call make_real
  1464                                          LEAVE
    38 0000121B C9                  <1>  leave
  1465 0000121C C22000                          ret AND_KILL_FRAME(2)
  1466                                  
  1467                                  L_code_ptr_raw_bin_sub_rr:
  1468                                          ENTER
    33 0000121F C8000000            <1>  enter 0, 0
    34 00001223 4883E4F0            <1>  and rsp, ~15
  1469 00001227 48837D1802                      cmp COUNT, 2
  1470 0000122C 0F85270A0000                    jne L_error_arg_count_2
  1471 00001232 488B5D20                        mov rbx, PARAM(0)
  1472                                          assert_real(rbx)
    42 00001236 803B12              <1>  cmp byte [%1], %2
    43 00001239 0F859E0A0000        <1>  jne L_error_incorrect_type
  1473 0000123F 488B4D28                        mov rcx, PARAM(1)
  1474                                          assert_real(rcx)
    42 00001243 803912              <1>  cmp byte [%1], %2
    43 00001246 0F85910A0000        <1>  jne L_error_incorrect_type
  1475 0000124C F20F104301                      movsd xmm0, qword [rbx + 1]
  1476 00001251 F20F104901                      movsd xmm1, qword [rcx + 1]
  1477 00001256 F20F5CC1                        subsd xmm0, xmm1
  1478 0000125A E838090000                      call make_real
  1479                                          LEAVE
    38 0000125F C9                  <1>  leave
  1480 00001260 C22000                          ret AND_KILL_FRAME(2)
  1481                                  
  1482                                  L_code_ptr_raw_bin_mul_rr:
  1483                                          ENTER
    33 00001263 C8000000            <1>  enter 0, 0
    34 00001267 4883E4F0            <1>  and rsp, ~15
  1484 0000126B 48837D1802                      cmp COUNT, 2
  1485 00001270 0F85E3090000                    jne L_error_arg_count_2
  1486 00001276 488B5D20                        mov rbx, PARAM(0)
  1487                                          assert_real(rbx)
    42 0000127A 803B12              <1>  cmp byte [%1], %2
    43 0000127D 0F855A0A0000        <1>  jne L_error_incorrect_type
  1488 00001283 488B4D28                        mov rcx, PARAM(1)
  1489                                          assert_real(rcx)
    42 00001287 803912              <1>  cmp byte [%1], %2
    43 0000128A 0F854D0A0000        <1>  jne L_error_incorrect_type
  1490 00001290 F20F104301                      movsd xmm0, qword [rbx + 1]
  1491 00001295 F20F104901                      movsd xmm1, qword [rcx + 1]
  1492 0000129A F20F59C1                        mulsd xmm0, xmm1
  1493 0000129E E8F4080000                      call make_real
  1494                                          LEAVE
    38 000012A3 C9                  <1>  leave
  1495 000012A4 C22000                          ret AND_KILL_FRAME(2)
  1496                                  
  1497                                  L_code_ptr_raw_bin_div_rr:
  1498                                          ENTER
    33 000012A7 C8000000            <1>  enter 0, 0
    34 000012AB 4883E4F0            <1>  and rsp, ~15
  1499 000012AF 48837D1802                      cmp COUNT, 2
  1500 000012B4 0F859F090000                    jne L_error_arg_count_2
  1501 000012BA 488B5D20                        mov rbx, PARAM(0)
  1502                                          assert_real(rbx)
    42 000012BE 803B12              <1>  cmp byte [%1], %2
    43 000012C1 0F85160A0000        <1>  jne L_error_incorrect_type
  1503 000012C7 488B4D28                        mov rcx, PARAM(1)
  1504                                          assert_real(rcx)
    42 000012CB 803912              <1>  cmp byte [%1], %2
    43 000012CE 0F85090A0000        <1>  jne L_error_incorrect_type
  1505 000012D4 F20F104301                      movsd xmm0, qword [rbx + 1]
  1506 000012D9 F20F104901                      movsd xmm1, qword [rcx + 1]
  1507 000012DE 660FEFD2                        pxor xmm2, xmm2
  1508 000012E2 660F2ECA                        ucomisd xmm1, xmm2
  1509 000012E6 0F84190A0000                    je L_error_division_by_zero
  1510 000012EC F20F5EC1                        divsd xmm0, xmm1
  1511 000012F0 E8A2080000                      call make_real
  1512                                          LEAVE
    38 000012F5 C9                  <1>  leave
  1513 000012F6 C22000                          ret AND_KILL_FRAME(2)
  1514                                  
  1515                                  L_code_ptr_raw_bin_add_qq:
  1516                                          ENTER
    33 000012F9 C8000000            <1>  enter 0, 0
    34 000012FD 4883E4F0            <1>  and rsp, ~15
  1517 00001301 48837D1802                      cmp COUNT, 2
  1518 00001306 0F854D090000                    jne L_error_arg_count_2
  1519 0000130C 4C8B4520                        mov r8, PARAM(0)
  1520                                          assert_rational(r8)
    42 00001310 41803811            <1>  cmp byte [%1], %2
    43 00001314 0F85C3090000        <1>  jne L_error_incorrect_type
  1521 0000131A 4C8B4D28                        mov r9, PARAM(1)
  1522                                          assert_rational(r9)
    42 0000131E 41803911            <1>  cmp byte [%1], %2
    43 00001322 0F85B5090000        <1>  jne L_error_incorrect_type
  1523 00001328 498B4001                        mov rax, qword [r8 + 1] ; num1
  1524 0000132C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1525 00001330 4899                            cqo
  1526 00001332 48F7EB                          imul rbx
  1527 00001335 4889C6                          mov rsi, rax
  1528 00001338 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1529 0000133C 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1530 00001340 4899                            cqo
  1531 00001342 48F7EB                          imul rbx
  1532 00001345 4801C6                          add rsi, rax
  1533 00001348 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1534 0000134C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1535 00001350 4899                            cqo
  1536 00001352 48F7EB                          imul rbx
  1537 00001355 4889C7                          mov rdi, rax
  1538 00001358 E827010000                      call normalize_rational
  1539                                          LEAVE
    38 0000135D C9                  <1>  leave
  1540 0000135E C22000                          ret AND_KILL_FRAME(2)
  1541                                  
  1542                                  L_code_ptr_raw_bin_sub_qq:
  1543                                          ENTER
    33 00001361 C8000000            <1>  enter 0, 0
    34 00001365 4883E4F0            <1>  and rsp, ~15
  1544 00001369 48837D1802                      cmp COUNT, 2
  1545 0000136E 0F85E5080000                    jne L_error_arg_count_2
  1546 00001374 4C8B4520                        mov r8, PARAM(0)
  1547                                          assert_rational(r8)
    42 00001378 41803811            <1>  cmp byte [%1], %2
    43 0000137C 0F855B090000        <1>  jne L_error_incorrect_type
  1548 00001382 4C8B4D28                        mov r9, PARAM(1)
  1549                                          assert_rational(r9)
    42 00001386 41803911            <1>  cmp byte [%1], %2
    43 0000138A 0F854D090000        <1>  jne L_error_incorrect_type
  1550 00001390 498B4001                        mov rax, qword [r8 + 1] ; num1
  1551 00001394 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1552 00001398 4899                            cqo
  1553 0000139A 48F7EB                          imul rbx
  1554 0000139D 4889C6                          mov rsi, rax
  1555 000013A0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1556 000013A4 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  1557 000013A8 4899                            cqo
  1558 000013AA 48F7EB                          imul rbx
  1559 000013AD 4829C6                          sub rsi, rax
  1560 000013B0 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1561 000013B4 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1562 000013B8 4899                            cqo
  1563 000013BA 48F7EB                          imul rbx
  1564 000013BD 4889C7                          mov rdi, rax
  1565 000013C0 E8BF000000                      call normalize_rational
  1566                                          LEAVE
    38 000013C5 C9                  <1>  leave
  1567 000013C6 C22000                          ret AND_KILL_FRAME(2)
  1568                                  
  1569                                  L_code_ptr_raw_bin_mul_qq:
  1570                                          ENTER
    33 000013C9 C8000000            <1>  enter 0, 0
    34 000013CD 4883E4F0            <1>  and rsp, ~15
  1571 000013D1 48837D1802                      cmp COUNT, 2
  1572 000013D6 0F857D080000                    jne L_error_arg_count_2
  1573 000013DC 4C8B4520                        mov r8, PARAM(0)
  1574                                          assert_rational(r8)
    42 000013E0 41803811            <1>  cmp byte [%1], %2
    43 000013E4 0F85F3080000        <1>  jne L_error_incorrect_type
  1575 000013EA 4C8B4D28                        mov r9, PARAM(1)
  1576                                          assert_rational(r9)
    42 000013EE 41803911            <1>  cmp byte [%1], %2
    43 000013F2 0F85E5080000        <1>  jne L_error_incorrect_type
  1577 000013F8 498B4001                        mov rax, qword [r8 + 1] ; num1
  1578 000013FC 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1579 00001400 4899                            cqo
  1580 00001402 48F7EB                          imul rbx
  1581 00001405 4889C6                          mov rsi, rax
  1582 00001408 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1583 0000140C 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  1584 00001410 4899                            cqo
  1585 00001412 48F7EB                          imul rbx
  1586 00001415 4889C7                          mov rdi, rax
  1587 00001418 E867000000                      call normalize_rational
  1588                                          LEAVE
    38 0000141D C9                  <1>  leave
  1589 0000141E C22000                          ret AND_KILL_FRAME(2)
  1590                                          
  1591                                  L_code_ptr_raw_bin_div_qq:
  1592                                          ENTER
    33 00001421 C8000000            <1>  enter 0, 0
    34 00001425 4883E4F0            <1>  and rsp, ~15
  1593 00001429 48837D1802                      cmp COUNT, 2
  1594 0000142E 0F8525080000                    jne L_error_arg_count_2
  1595 00001434 4C8B4520                        mov r8, PARAM(0)
  1596                                          assert_rational(r8)
    42 00001438 41803811            <1>  cmp byte [%1], %2
    43 0000143C 0F859B080000        <1>  jne L_error_incorrect_type
  1597 00001442 4C8B4D28                        mov r9, PARAM(1)
  1598                                          assert_rational(r9)
    42 00001446 41803911            <1>  cmp byte [%1], %2
    43 0000144A 0F858D080000        <1>  jne L_error_incorrect_type
  1599 00001450 4983790100                      cmp qword [r9 + 1], 0
  1600 00001455 0F84AA080000                    je L_error_division_by_zero
  1601 0000145B 498B4001                        mov rax, qword [r8 + 1] ; num1
  1602 0000145F 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  1603 00001463 4899                            cqo
  1604 00001465 48F7EB                          imul rbx
  1605 00001468 4889C6                          mov rsi, rax
  1606 0000146B 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  1607 0000146F 498B5901                        mov rbx, qword [r9 + 1] ; num2
  1608 00001473 4899                            cqo
  1609 00001475 48F7EB                          imul rbx
  1610 00001478 4889C7                          mov rdi, rax
  1611 0000147B E804000000                      call normalize_rational
  1612                                          LEAVE
    38 00001480 C9                  <1>  leave
  1613 00001481 C22000                          ret AND_KILL_FRAME(2)
  1614                                          
  1615                                  normalize_rational:
  1616 00001484 56                              push rsi
  1617 00001485 57                              push rdi
  1618 00001486 E839000000                      call gcd
  1619 0000148B 4889C3                          mov rbx, rax
  1620 0000148E 58                              pop rax
  1621 0000148F 4899                            cqo
  1622 00001491 48F7FB                          idiv rbx
  1623 00001494 4989C0                          mov r8, rax
  1624 00001497 58                              pop rax
  1625 00001498 4899                            cqo
  1626 0000149A 48F7FB                          idiv rbx
  1627 0000149D 4989C1                          mov r9, rax
  1628 000014A0 BF11000000                      mov rdi, (1 + 8 + 8)
  1629 000014A5 E897F1FFFF                      call malloc
  1630 000014AA C60011                          mov byte [rax], T_rational
  1631 000014AD 4C894801                        mov qword [rax + 1], r9
  1632 000014B1 4C894009                        mov qword [rax + 1 + 8], r8
  1633 000014B5 C3                              ret
  1634                                  
  1635                                  iabs:
  1636 000014B6 4889F8                          mov rax, rdi
  1637 000014B9 4883F800                        cmp rax, 0
  1638 000014BD 7C01                            jl .Lneg
  1639 000014BF C3                              ret
  1640                                  .Lneg:
  1641 000014C0 48F7D8                          neg rax
  1642 000014C3 C3                              ret
  1643                                  
  1644                                  gcd:
  1645 000014C4 E8EDFFFFFF                      call iabs
  1646 000014C9 4889C3                          mov rbx, rax
  1647 000014CC 4889F7                          mov rdi, rsi
  1648 000014CF E8E2FFFFFF                      call iabs
  1649 000014D4 4883F800                        cmp rax, 0
  1650 000014D8 7502                            jne .L0
  1651 000014DA 4893                            xchg rax, rbx
  1652                                  .L0:
  1653 000014DC 4883FB00                        cmp rbx, 0
  1654 000014E0 740C                            je .L1
  1655 000014E2 4899                            cqo
  1656 000014E4 48F7F3                          div rbx
  1657 000014E7 4889D0                          mov rax, rdx
  1658 000014EA 4893                            xchg rax, rbx
  1659 000014EC EBEE                            jmp .L0
  1660                                  .L1:
  1661 000014EE C3                              ret
  1662                                  
  1663                                  L_code_ptr_error:
  1664                                          ENTER
    33 000014EF C8000000            <1>  enter 0, 0
    34 000014F3 4883E4F0            <1>  and rsp, ~15
  1665 000014F7 48837D1802                      cmp COUNT, 2
  1666 000014FC 0F8557070000                    jne L_error_arg_count_2
  1667 00001502 488B7520                        mov rsi, PARAM(0)
  1668                                          assert_symbol(rsi)
    42 00001506 803E04              <1>  cmp byte [%1], %2
    43 00001509 0F85CE070000        <1>  jne L_error_incorrect_type
  1669 0000150F 488B7528                        mov rsi, PARAM(1)
  1670                                          assert_string(rsi)
    42 00001513 803E03              <1>  cmp byte [%1], %2
    43 00001516 0F85C1070000        <1>  jne L_error_incorrect_type
  1671 0000151C 48BF-                           mov rdi, fmt_scheme_error_part_1
  1671 0000151E [4E03000000000000] 
  1672 00001526 B800000000                      mov rax, 0
  1673 0000152B E8(00000000)                    call printf
  1674 00001530 488B7D20                        mov rdi, PARAM(0)
  1675 00001534 E823F1FFFF                      call print_sexpr
  1676 00001539 48BF-                           mov rdi, fmt_scheme_error_part_2
  1676 0000153B [6203000000000000] 
  1677 00001543 B800000000                      mov rax, 0
  1678 00001548 E8(00000000)                    call printf
  1679 0000154D 488B4528                        mov rax, PARAM(1)       ; sob_string
  1680 00001551 BE01000000                      mov rsi, 1              ; size = 1 byte
  1681 00001556 488B5001                        mov rdx, qword [rax + 1] ; length
  1682 0000155A 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1683 0000155E 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  1684 00001566 E8(00000000)                    call fwrite
  1685 0000156B 48BF-                           mov rdi, fmt_scheme_error_part_3
  1685 0000156D [A403000000000000] 
  1686 00001575 B800000000                      mov rax, 0
  1687 0000157A E8(00000000)                    call printf
  1688 0000157F 48C7C0F7FFFFFF                  mov rax, -9
  1689 00001586 E8(00000000)                    call exit
  1690                                  
  1691                                  L_code_ptr_raw_less_than_rr:
  1692                                          ENTER
    33 0000158B C8000000            <1>  enter 0, 0
    34 0000158F 4883E4F0            <1>  and rsp, ~15
  1693 00001593 48837D1802                      cmp COUNT, 2
  1694 00001598 0F85BB060000                    jne L_error_arg_count_2
  1695 0000159E 488B7520                        mov rsi, PARAM(0)
  1696                                          assert_real(rsi)
    42 000015A2 803E12              <1>  cmp byte [%1], %2
    43 000015A5 0F8532070000        <1>  jne L_error_incorrect_type
  1697 000015AB 488B7D28                        mov rdi, PARAM(1)
  1698                                          assert_real(rdi)
    42 000015AF 803F12              <1>  cmp byte [%1], %2
    43 000015B2 0F8525070000        <1>  jne L_error_incorrect_type
  1699 000015B8 F20F104601                      movsd xmm0, qword [rsi + 1]
  1700 000015BD F20F104F01                      movsd xmm1, qword [rdi + 1]
  1701 000015C2 660F2FC1                        comisd xmm0, xmm1
  1702 000015C6 730C                            jae .L_false
  1703 000015C8 48B8-                           mov rax, sob_boolean_true
  1703 000015CA [0300000000000000] 
  1704 000015D2 EB0A                            jmp .L_exit
  1705                                  .L_false:
  1706 000015D4 48B8-                           mov rax, sob_boolean_false
  1706 000015D6 [0200000000000000] 
  1707                                  .L_exit:
  1708                                          LEAVE
    38 000015DE C9                  <1>  leave
  1709 000015DF C22000                          ret AND_KILL_FRAME(2)
  1710                                          
  1711                                  L_code_ptr_raw_less_than_qq:
  1712                                          ENTER
    33 000015E2 C8000000            <1>  enter 0, 0
    34 000015E6 4883E4F0            <1>  and rsp, ~15
  1713 000015EA 48837D1802                      cmp COUNT, 2
  1714 000015EF 0F8564060000                    jne L_error_arg_count_2
  1715 000015F5 488B7520                        mov rsi, PARAM(0)
  1716                                          assert_rational(rsi)
    42 000015F9 803E11              <1>  cmp byte [%1], %2
    43 000015FC 0F85DB060000        <1>  jne L_error_incorrect_type
  1717 00001602 488B7D28                        mov rdi, PARAM(1)
  1718                                          assert_rational(rdi)
    42 00001606 803F11              <1>  cmp byte [%1], %2
    43 00001609 0F85CE060000        <1>  jne L_error_incorrect_type
  1719 0000160F 488B4601                        mov rax, qword [rsi + 1] ; num1
  1720 00001613 4899                            cqo
  1721 00001615 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1722 00001619 4889C1                          mov rcx, rax
  1723 0000161C 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1724 00001620 4899                            cqo
  1725 00001622 48F76E01                        imul qword [rsi + 1]          ; num2
  1726 00001626 4829C1                          sub rcx, rax
  1727 00001629 7D0C                            jge .L_false
  1728 0000162B 48B8-                           mov rax, sob_boolean_true
  1728 0000162D [0300000000000000] 
  1729 00001635 EB0A                            jmp .L_exit
  1730                                  .L_false:
  1731 00001637 48B8-                           mov rax, sob_boolean_false
  1731 00001639 [0200000000000000] 
  1732                                  .L_exit:
  1733                                          LEAVE
    38 00001641 C9                  <1>  leave
  1734 00001642 C22000                          ret AND_KILL_FRAME(2)
  1735                                  
  1736                                  
  1737                                  
  1738                                  L_code_ptr_raw_equal_rr:
  1739                                          ENTER
    33 00001645 C8000000            <1>  enter 0, 0
    34 00001649 4883E4F0            <1>  and rsp, ~15
  1740 0000164D 48837D1802                      cmp COUNT, 2
  1741 00001652 0F8501060000                    jne L_error_arg_count_2
  1742 00001658 488B7520                        mov rsi, PARAM(0)
  1743                                          assert_real(rsi)
    42 0000165C 803E12              <1>  cmp byte [%1], %2
    43 0000165F 0F8578060000        <1>  jne L_error_incorrect_type
  1744 00001665 488B7D28                        mov rdi, PARAM(1)
  1745                                          assert_real(rdi)
    42 00001669 803F12              <1>  cmp byte [%1], %2
    43 0000166C 0F856B060000        <1>  jne L_error_incorrect_type
  1746 00001672 F20F104601                      movsd xmm0, qword [rsi + 1]
  1747 00001677 F20F104F01                      movsd xmm1, qword [rdi + 1]
  1748 0000167C 660F2FC1                        comisd xmm0, xmm1
  1749 00001680 750C                            jne .L_false
  1750 00001682 48B8-                           mov rax, sob_boolean_true
  1750 00001684 [0300000000000000] 
  1751 0000168C EB0A                            jmp .L_exit
  1752                                  .L_false:
  1753 0000168E 48B8-                           mov rax, sob_boolean_false
  1753 00001690 [0200000000000000] 
  1754                                  .L_exit:
  1755                                          LEAVE
    38 00001698 C9                  <1>  leave
  1756 00001699 C22000                          ret AND_KILL_FRAME(2)
  1757                                          
  1758                                  L_code_ptr_raw_equal_qq:
  1759                                          ENTER
    33 0000169C C8000000            <1>  enter 0, 0
    34 000016A0 4883E4F0            <1>  and rsp, ~15
  1760 000016A4 48837D1802                      cmp COUNT, 2
  1761 000016A9 0F85AA050000                    jne L_error_arg_count_2
  1762 000016AF 488B7520                        mov rsi, PARAM(0)
  1763                                          assert_rational(rsi)
    42 000016B3 803E11              <1>  cmp byte [%1], %2
    43 000016B6 0F8521060000        <1>  jne L_error_incorrect_type
  1764 000016BC 488B7D28                        mov rdi, PARAM(1)
  1765                                          assert_rational(rdi)
    42 000016C0 803F11              <1>  cmp byte [%1], %2
    43 000016C3 0F8514060000        <1>  jne L_error_incorrect_type
  1766 000016C9 488B4601                        mov rax, qword [rsi + 1] ; num1
  1767 000016CD 4899                            cqo
  1768 000016CF 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  1769 000016D3 4889C1                          mov rcx, rax
  1770 000016D6 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  1771 000016DA 4899                            cqo
  1772 000016DC 48F76F01                        imul qword [rdi + 1]          ; num2
  1773 000016E0 4829C1                          sub rcx, rax
  1774 000016E3 750C                            jne .L_false
  1775 000016E5 48B8-                           mov rax, sob_boolean_true
  1775 000016E7 [0300000000000000] 
  1776 000016EF EB0A                            jmp .L_exit
  1777                                  .L_false:
  1778 000016F1 48B8-                           mov rax, sob_boolean_false
  1778 000016F3 [0200000000000000] 
  1779                                  .L_exit:
  1780                                          LEAVE
    38 000016FB C9                  <1>  leave
  1781 000016FC C22000                          ret AND_KILL_FRAME(2)
  1782                                  
  1783                                  L_code_ptr_quotient:
  1784                                          ENTER
    33 000016FF C8000000            <1>  enter 0, 0
    34 00001703 4883E4F0            <1>  and rsp, ~15
  1785 00001707 48837D1802                      cmp COUNT, 2
  1786 0000170C 0F8547050000                    jne L_error_arg_count_2
  1787 00001712 488B7520                        mov rsi, PARAM(0)
  1788                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001716 803E11              <2>  cmp byte [%1], %2
    43 00001719 0F85BE050000        <2>  jne L_error_incorrect_type
    48 0000171F 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001724 0F85B3050000        <1>  jne L_error_incorrect_type
  1789 0000172A 488B7D28                        mov rdi, PARAM(1)
  1790                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 0000172E 803F11              <2>  cmp byte [%1], %2
    43 00001731 0F85A6050000        <2>  jne L_error_incorrect_type
    48 00001737 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000173C 0F859B050000        <1>  jne L_error_incorrect_type
  1791 00001742 488B4601                        mov rax, qword [rsi + 1]
  1792 00001746 488B5F01                        mov rbx, qword [rdi + 1]
  1793 0000174A 4883FB00                        cmp rbx, 0
  1794 0000174E 0F84B1050000                    je L_error_division_by_zero
  1795 00001754 4899                            cqo
  1796 00001756 48F7FB                          idiv rbx
  1797 00001759 4889C7                          mov rdi, rax
  1798 0000175C E852040000                      call make_integer
  1799                                          LEAVE
    38 00001761 C9                  <1>  leave
  1800 00001762 C22000                          ret AND_KILL_FRAME(2)
  1801                                          
  1802                                  L_code_ptr_remainder:
  1803                                          ENTER
    33 00001765 C8000000            <1>  enter 0, 0
    34 00001769 4883E4F0            <1>  and rsp, ~15
  1804 0000176D 48837D1802                      cmp COUNT, 2
  1805 00001772 0F85E1040000                    jne L_error_arg_count_2
  1806 00001778 488B7520                        mov rsi, PARAM(0)
  1807                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000177C 803E11              <2>  cmp byte [%1], %2
    43 0000177F 0F8558050000        <2>  jne L_error_incorrect_type
    48 00001785 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000178A 0F854D050000        <1>  jne L_error_incorrect_type
  1808 00001790 488B7D28                        mov rdi, PARAM(1)
  1809                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00001794 803F11              <2>  cmp byte [%1], %2
    43 00001797 0F8540050000        <2>  jne L_error_incorrect_type
    48 0000179D 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000017A2 0F8535050000        <1>  jne L_error_incorrect_type
  1810 000017A8 488B4601                        mov rax, qword [rsi + 1]
  1811 000017AC 488B5F01                        mov rbx, qword [rdi + 1]
  1812 000017B0 4883FB00                        cmp rbx, 0
  1813 000017B4 0F844B050000                    je L_error_division_by_zero
  1814 000017BA 4899                            cqo
  1815 000017BC 48F7FB                          idiv rbx
  1816 000017BF 4889D7                          mov rdi, rdx
  1817 000017C2 E8EC030000                      call make_integer
  1818                                          LEAVE
    38 000017C7 C9                  <1>  leave
  1819 000017C8 C22000                          ret AND_KILL_FRAME(2)
  1820                                  
  1821                                  L_code_ptr_set_car:
  1822                                          ENTER
    33 000017CB C8000000            <1>  enter 0, 0
    34 000017CF 4883E4F0            <1>  and rsp, ~15
  1823 000017D3 48837D1802                      cmp COUNT, 2
  1824 000017D8 0F857B040000                    jne L_error_arg_count_2
  1825 000017DE 488B4520                        mov rax, PARAM(0)
  1826                                          assert_pair(rax)
    42 000017E2 803821              <1>  cmp byte [%1], %2
    43 000017E5 0F85F2040000        <1>  jne L_error_incorrect_type
  1827 000017EB 488B5D28                        mov rbx, PARAM(1)
  1828 000017EF 48895801                        mov SOB_PAIR_CAR(rax), rbx
  1829 000017F3 48B8-                           mov rax, sob_void
  1829 000017F5 [0000000000000000] 
  1830                                          LEAVE
    38 000017FD C9                  <1>  leave
  1831 000017FE C22000                          ret AND_KILL_FRAME(2)
  1832                                  
  1833                                  L_code_ptr_set_cdr:
  1834                                          ENTER
    33 00001801 C8000000            <1>  enter 0, 0
    34 00001805 4883E4F0            <1>  and rsp, ~15
  1835 00001809 48837D1802                      cmp COUNT, 2
  1836 0000180E 0F8545040000                    jne L_error_arg_count_2
  1837 00001814 488B4520                        mov rax, PARAM(0)
  1838                                          assert_pair(rax)
    42 00001818 803821              <1>  cmp byte [%1], %2
    43 0000181B 0F85BC040000        <1>  jne L_error_incorrect_type
  1839 00001821 488B5D28                        mov rbx, PARAM(1)
  1840 00001825 48895809                        mov SOB_PAIR_CDR(rax), rbx
  1841 00001829 48B8-                           mov rax, sob_void
  1841 0000182B [0000000000000000] 
  1842                                          LEAVE
    38 00001833 C9                  <1>  leave
  1843 00001834 C22000                          ret AND_KILL_FRAME(2)
  1844                                  
  1845                                  L_code_ptr_string_ref:
  1846                                          ENTER
    33 00001837 C8000000            <1>  enter 0, 0
    34 0000183B 4883E4F0            <1>  and rsp, ~15
  1847 0000183F 48837D1802                      cmp COUNT, 2
  1848 00001844 0F850F040000                    jne L_error_arg_count_2
  1849 0000184A 488B7D20                        mov rdi, PARAM(0)
  1850                                          assert_string(rdi)
    42 0000184E 803F03              <1>  cmp byte [%1], %2
    43 00001851 0F8586040000        <1>  jne L_error_incorrect_type
  1851 00001857 488B7528                        mov rsi, PARAM(1)
  1852                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000185B 803E11              <2>  cmp byte [%1], %2
    43 0000185E 0F8579040000        <2>  jne L_error_incorrect_type
    48 00001864 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001869 0F856E040000        <1>  jne L_error_incorrect_type
  1853 0000186F 488B5701                        mov rdx, qword [rdi + 1]
  1854 00001873 488B4E01                        mov rcx, qword [rsi + 1]
  1855 00001877 4839D1                          cmp rcx, rdx
  1856 0000187A 0F8D59030000                    jge L_error_integer_range
  1857 00001880 4883F900                        cmp rcx, 0
  1858 00001884 0F8C4F030000                    jl L_error_integer_range
  1859 0000188A 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  1860 0000188E BF02000000                      mov rdi, 2
  1861 00001893 E8A9EDFFFF                      call malloc
  1862 00001898 C60002                          mov byte [rax], T_char
  1863 0000189B 885801                          mov byte [rax + 1], bl
  1864                                          LEAVE
    38 0000189E C9                  <1>  leave
  1865 0000189F C22000                          ret AND_KILL_FRAME(2)
  1866                                  
  1867                                  L_code_ptr_vector_ref:
  1868                                          ENTER
    33 000018A2 C8000000            <1>  enter 0, 0
    34 000018A6 4883E4F0            <1>  and rsp, ~15
  1869 000018AA 48837D1802                      cmp COUNT, 2
  1870 000018AF 0F85A4030000                    jne L_error_arg_count_2
  1871 000018B5 488B7D20                        mov rdi, PARAM(0)
  1872                                          assert_vector(rdi)
    42 000018B9 803F22              <1>  cmp byte [%1], %2
    43 000018BC 0F851B040000        <1>  jne L_error_incorrect_type
  1873 000018C2 488B7528                        mov rsi, PARAM(1)
  1874                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 000018C6 803E11              <2>  cmp byte [%1], %2
    43 000018C9 0F850E040000        <2>  jne L_error_incorrect_type
    48 000018CF 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000018D4 0F8503040000        <1>  jne L_error_incorrect_type
  1875 000018DA 488B5701                        mov rdx, qword [rdi + 1]
  1876 000018DE 488B4E01                        mov rcx, qword [rsi + 1]
  1877 000018E2 4839D1                          cmp rcx, rdx
  1878 000018E5 0F8DEE020000                    jge L_error_integer_range
  1879 000018EB 4883F900                        cmp rcx, 0
  1880 000018EF 0F8CE4020000                    jl L_error_integer_range
  1881 000018F5 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  1882                                          LEAVE
    38 000018FA C9                  <1>  leave
  1883 000018FB C22000                          ret AND_KILL_FRAME(2)
  1884                                  
  1885                                  L_code_ptr_vector_set:
  1886                                          ENTER
    33 000018FE C8000000            <1>  enter 0, 0
    34 00001902 4883E4F0            <1>  and rsp, ~15
  1887 00001906 48837D1803                      cmp COUNT, 3
  1888 0000190B 0F85A0030000                    jne L_error_arg_count_3
  1889 00001911 488B7D20                        mov rdi, PARAM(0)
  1890                                          assert_vector(rdi)
    42 00001915 803F22              <1>  cmp byte [%1], %2
    43 00001918 0F85BF030000        <1>  jne L_error_incorrect_type
  1891 0000191E 488B7528                        mov rsi, PARAM(1)
  1892                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00001922 803E11              <2>  cmp byte [%1], %2
    43 00001925 0F85B2030000        <2>  jne L_error_incorrect_type
    48 0000192B 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001930 0F85A7030000        <1>  jne L_error_incorrect_type
  1893 00001936 488B5701                        mov rdx, qword [rdi + 1]
  1894 0000193A 488B4E01                        mov rcx, qword [rsi + 1]
  1895 0000193E 4839D1                          cmp rcx, rdx
  1896 00001941 0F8D92020000                    jge L_error_integer_range
  1897 00001947 4883F900                        cmp rcx, 0
  1898 0000194B 0F8C88020000                    jl L_error_integer_range
  1899 00001951 488B4530                        mov rax, PARAM(2)
  1900 00001955 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  1901 0000195A 48B8-                           mov rax, sob_void
  1901 0000195C [0000000000000000] 
  1902                                          LEAVE
    38 00001964 C9                  <1>  leave
  1903 00001965 C22800                          ret AND_KILL_FRAME(3)
  1904                                  
  1905                                  L_code_ptr_string_set:
  1906                                          ENTER
    33 00001968 C8000000            <1>  enter 0, 0
    34 0000196C 4883E4F0            <1>  and rsp, ~15
  1907 00001970 48837D1803                      cmp COUNT, 3
  1908 00001975 0F8536030000                    jne L_error_arg_count_3
  1909 0000197B 488B7D20                        mov rdi, PARAM(0)
  1910                                          assert_string(rdi)
    42 0000197F 803F03              <1>  cmp byte [%1], %2
    43 00001982 0F8555030000        <1>  jne L_error_incorrect_type
  1911 00001988 488B7528                        mov rsi, PARAM(1)
  1912                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 0000198C 803E11              <2>  cmp byte [%1], %2
    43 0000198F 0F8548030000        <2>  jne L_error_incorrect_type
    48 00001995 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0000199A 0F853D030000        <1>  jne L_error_incorrect_type
  1913 000019A0 488B5701                        mov rdx, qword [rdi + 1]
  1914 000019A4 488B4E01                        mov rcx, qword [rsi + 1]
  1915 000019A8 4839D1                          cmp rcx, rdx
  1916 000019AB 0F8D28020000                    jge L_error_integer_range
  1917 000019B1 4883F900                        cmp rcx, 0
  1918 000019B5 0F8C1E020000                    jl L_error_integer_range
  1919 000019BB 488B4530                        mov rax, PARAM(2)
  1920                                          assert_char(rax)
    42 000019BF 803802              <1>  cmp byte [%1], %2
    43 000019C2 0F8515030000        <1>  jne L_error_incorrect_type
  1921 000019C8 8A4001                          mov al, byte [rax + 1]
  1922 000019CB 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  1923 000019CF 48B8-                           mov rax, sob_void
  1923 000019D1 [0000000000000000] 
  1924                                          LEAVE
    38 000019D9 C9                  <1>  leave
  1925 000019DA C22800                          ret AND_KILL_FRAME(3)
  1926                                  
  1927                                  L_code_ptr_make_vector:
  1928                                          ENTER
    33 000019DD C8000000            <1>  enter 0, 0
    34 000019E1 4883E4F0            <1>  and rsp, ~15
  1929 000019E5 48837D1802                      cmp COUNT, 2
  1930 000019EA 0F8569020000                    jne L_error_arg_count_2
  1931 000019F0 488B4D20                        mov rcx, PARAM(0)
  1932                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 000019F4 803911              <2>  cmp byte [%1], %2
    43 000019F7 0F85E0020000        <2>  jne L_error_incorrect_type
    48 000019FD 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A02 0F85D5020000        <1>  jne L_error_incorrect_type
  1933 00001A08 488B4901                        mov rcx, qword [rcx + 1]
  1934 00001A0C 4883F900                        cmp rcx, 0
  1935 00001A10 0F8CC3010000                    jl L_error_integer_range
  1936 00001A16 488B5528                        mov rdx, PARAM(1)
  1937 00001A1A 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  1938 00001A22 E81AECFFFF                      call malloc
  1939 00001A27 C60022                          mov byte [rax], T_vector
  1940 00001A2A 48894801                        mov qword [rax + 1], rcx
  1941 00001A2E 41B800000000                    mov r8, 0
  1942                                  .L0:
  1943 00001A34 4939C8                          cmp r8, rcx
  1944 00001A37 740A                            je .L1
  1945 00001A39 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  1946 00001A3E 49FFC0                          inc r8
  1947 00001A41 EBF1                            jmp .L0
  1948                                  .L1:
  1949                                          LEAVE
    38 00001A43 C9                  <1>  leave
  1950 00001A44 C22000                          ret AND_KILL_FRAME(2)
  1951                                          
  1952                                  L_code_ptr_make_string:
  1953                                          ENTER
    33 00001A47 C8000000            <1>  enter 0, 0
    34 00001A4B 4883E4F0            <1>  and rsp, ~15
  1954 00001A4F 48837D1802                      cmp COUNT, 2
  1955 00001A54 0F85FF010000                    jne L_error_arg_count_2
  1956 00001A5A 488B4D20                        mov rcx, PARAM(0)
  1957                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00001A5E 803911              <2>  cmp byte [%1], %2
    43 00001A61 0F8576020000        <2>  jne L_error_incorrect_type
    48 00001A67 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00001A6C 0F856B020000        <1>  jne L_error_incorrect_type
  1958 00001A72 488B4901                        mov rcx, qword [rcx + 1]
  1959 00001A76 4883F900                        cmp rcx, 0
  1960 00001A7A 0F8C59010000                    jl L_error_integer_range
  1961 00001A80 488B5528                        mov rdx, PARAM(1)
  1962                                          assert_char(rdx)
    42 00001A84 803A02              <1>  cmp byte [%1], %2
    43 00001A87 0F8550020000        <1>  jne L_error_incorrect_type
  1963 00001A8D 8A5201                          mov dl, byte [rdx + 1]
  1964 00001A90 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  1965 00001A94 E8A8EBFFFF                      call malloc
  1966 00001A99 C60003                          mov byte [rax], T_string
  1967 00001A9C 48894801                        mov qword [rax + 1], rcx
  1968 00001AA0 41B800000000                    mov r8, 0
  1969                                  .L0:
  1970 00001AA6 4939C8                          cmp r8, rcx
  1971 00001AA9 740A                            je .L1
  1972 00001AAB 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  1973 00001AB0 49FFC0                          inc r8
  1974 00001AB3 EBF1                            jmp .L0
  1975                                  .L1:
  1976                                          LEAVE
    38 00001AB5 C9                  <1>  leave
  1977 00001AB6 C22000                          ret AND_KILL_FRAME(2)
  1978                                  
  1979                                  L_code_ptr_numerator:
  1980                                          ENTER
    33 00001AB9 C8000000            <1>  enter 0, 0
    34 00001ABD 4883E4F0            <1>  and rsp, ~15
  1981 00001AC1 48837D1801                      cmp COUNT, 1
  1982 00001AC6 0F8561010000                    jne L_error_arg_count_1
  1983 00001ACC 488B4520                        mov rax, PARAM(0)
  1984                                          assert_rational(rax)
    42 00001AD0 803811              <1>  cmp byte [%1], %2
    43 00001AD3 0F8504020000        <1>  jne L_error_incorrect_type
  1985 00001AD9 488B7801                        mov rdi, qword [rax + 1]
  1986 00001ADD E8D1000000                      call make_integer
  1987                                          LEAVE
    38 00001AE2 C9                  <1>  leave
  1988 00001AE3 C21800                          ret AND_KILL_FRAME(1)
  1989                                          
  1990                                  L_code_ptr_denominator:
  1991                                          ENTER
    33 00001AE6 C8000000            <1>  enter 0, 0
    34 00001AEA 4883E4F0            <1>  and rsp, ~15
  1992 00001AEE 48837D1801                      cmp COUNT, 1
  1993 00001AF3 0F8534010000                    jne L_error_arg_count_1
  1994 00001AF9 488B4520                        mov rax, PARAM(0)
  1995                                          assert_rational(rax)
    42 00001AFD 803811              <1>  cmp byte [%1], %2
    43 00001B00 0F85D7010000        <1>  jne L_error_incorrect_type
  1996 00001B06 488B7809                        mov rdi, qword [rax + 1 + 8]
  1997 00001B0A E8A4000000                      call make_integer
  1998                                          LEAVE
    38 00001B0F C9                  <1>  leave
  1999 00001B10 C21800                          ret AND_KILL_FRAME(1)
  2000                                  
  2001                                  L_code_ptr_eq:
  2002                                  	ENTER
    33 00001B13 C8000000            <1>  enter 0, 0
    34 00001B17 4883E4F0            <1>  and rsp, ~15
  2003 00001B1B 48837D1802              	cmp COUNT, 2
  2004 00001B20 0F8533010000            	jne L_error_arg_count_2
  2005 00001B26 488B7D20                	mov rdi, PARAM(0)
  2006 00001B2A 488B7528                	mov rsi, PARAM(1)
  2007 00001B2E 4839F7                  	cmp rdi, rsi
  2008 00001B31 744A                    	je .L_eq_true
  2009 00001B33 8A17                    	mov dl, byte [rdi]
  2010 00001B35 3A16                    	cmp dl, byte [rsi]
  2011 00001B37 7550                    	jne .L_eq_false
  2012 00001B39 80FA02                  	cmp dl, T_char
  2013 00001B3C 7437                    	je .L_char
  2014 00001B3E 80FA04                  	cmp dl, T_symbol
  2015 00001B41 742A                    	je .L_symbol
  2016 00001B43 80FA12                  	cmp dl, T_real
  2017 00001B46 741D                    	je .L_real
  2018 00001B48 80FA11                  	cmp dl, T_rational
  2019 00001B4B 7402                    	je .L_rational
  2020 00001B4D EB3A                    	jmp .L_eq_false
  2021                                  .L_rational:
  2022 00001B4F 488B4601                	mov rax, qword [rsi + 1]
  2023 00001B53 483B4701                	cmp rax, qword [rdi + 1]
  2024 00001B57 7530                    	jne .L_eq_false
  2025 00001B59 488B4609                	mov rax, qword [rsi + 1 + 8]
  2026 00001B5D 483B4709                	cmp rax, qword [rdi + 1 + 8]
  2027 00001B61 7526                    	jne .L_eq_false
  2028 00001B63 EB18                    	jmp .L_eq_true
  2029                                  .L_real:
  2030 00001B65 488B4601                	mov rax, qword [rsi + 1]
  2031 00001B69 483B4701                	cmp rax, qword [rdi + 1]
  2032                                  .L_symbol:
  2033                                  	; never reached, because symbols are static!
  2034                                  	; but I'm keeping it in case, I'll ever change
  2035                                  	; the implementation
  2036 00001B6D 488B4601                	mov rax, qword [rsi + 1]
  2037 00001B71 483B4701                	cmp rax, qword [rdi + 1]
  2038                                  .L_char:
  2039 00001B75 8A5E01                  	mov bl, byte [rsi + 1]
  2040 00001B78 3A5F01                  	cmp bl, byte [rdi + 1]
  2041 00001B7B 750C                    	jne .L_eq_false
  2042                                  .L_eq_true:
  2043 00001B7D 48B8-                   	mov rax, sob_boolean_true
  2043 00001B7F [0300000000000000] 
  2044 00001B87 EB0A                    	jmp .L_eq_exit
  2045                                  .L_eq_false:
  2046 00001B89 48B8-                   	mov rax, sob_boolean_false
  2046 00001B8B [0200000000000000] 
  2047                                  .L_eq_exit:
  2048                                  	LEAVE
    38 00001B93 C9                  <1>  leave
  2049 00001B94 C22000                  	ret AND_KILL_FRAME(2)
  2050                                  
  2051                                  make_real:
  2052                                          ENTER
    33 00001B97 C8000000            <1>  enter 0, 0
    34 00001B9B 4883E4F0            <1>  and rsp, ~15
  2053 00001B9F BF09000000                      mov rdi, (1 + 8)
  2054 00001BA4 E898EAFFFF                      call malloc
  2055 00001BA9 C60012                          mov byte [rax], T_real
  2056 00001BAC F20F114001                      movsd qword [rax + 1], xmm0
  2057                                          LEAVE
    38 00001BB1 C9                  <1>  leave
  2058 00001BB2 C3                              ret
  2059                                          
  2060                                  make_integer:
  2061                                          ENTER
    33 00001BB3 C8000000            <1>  enter 0, 0
    34 00001BB7 4883E4F0            <1>  and rsp, ~15
  2062 00001BBB 4889FE                          mov rsi, rdi
  2063 00001BBE BF11000000                      mov rdi, (1 + 8 + 8)
  2064 00001BC3 E879EAFFFF                      call malloc
  2065 00001BC8 C60011                          mov byte [rax], T_rational
  2066 00001BCB 48897001                        mov qword [rax + 1], rsi
  2067 00001BCF 48C7400901000000                mov qword [rax + 1 + 8], 1
  2068                                          LEAVE
    38 00001BD7 C9                  <1>  leave
  2069 00001BD8 C3                              ret
  2070                                          
  2071                                  L_error_integer_range:
  2072 00001BD9 488B3C25[00000000]              mov rdi, qword [stderr]
  2073 00001BE1 48BE-                           mov rsi, fmt_integer_range
  2073 00001BE3 [1B03000000000000] 
  2074 00001BEB B800000000                      mov rax, 0
  2075 00001BF0 E8(00000000)                    call fprintf
  2076 00001BF5 48C7C0FBFFFFFF                  mov rax, -5
  2077 00001BFC E8(00000000)                    call exit
  2078                                  
  2079                                  L_error_arg_count_0:
  2080 00001C01 488B3C25[00000000]              mov rdi, qword [stderr]
  2081 00001C09 48BE-                           mov rsi, fmt_arg_count_0
  2081 00001C0B [1902000000000000] 
  2082 00001C13 488B5518                        mov rdx, COUNT
  2083 00001C17 B800000000                      mov rax, 0
  2084 00001C1C E8(00000000)                    call fprintf
  2085 00001C21 48C7C0FDFFFFFF                  mov rax, -3
  2086 00001C28 E8(00000000)                    call exit
  2087                                  
  2088                                  L_error_arg_count_1:
  2089 00001C2D 488B3C25[00000000]              mov rdi, qword [stderr]
  2090 00001C35 48BE-                           mov rsi, fmt_arg_count_1
  2090 00001C37 [4102000000000000] 
  2091 00001C3F 488B5518                        mov rdx, COUNT
  2092 00001C43 B800000000                      mov rax, 0
  2093 00001C48 E8(00000000)                    call fprintf
  2094 00001C4D 48C7C0FDFFFFFF                  mov rax, -3
  2095 00001C54 E8(00000000)                    call exit
  2096                                  
  2097                                  L_error_arg_count_2:
  2098 00001C59 488B3C25[00000000]              mov rdi, qword [stderr]
  2099 00001C61 48BE-                           mov rsi, fmt_arg_count_2
  2099 00001C63 [A702000000000000] 
  2100 00001C6B 488B5518                        mov rdx, COUNT
  2101 00001C6F B800000000                      mov rax, 0
  2102 00001C74 E8(00000000)                    call fprintf
  2103 00001C79 48C7C0FDFFFFFF                  mov rax, -3
  2104 00001C80 E8(00000000)                    call exit
  2105                                  
  2106                                  L_error_arg_count_12:
  2107 00001C85 488B3C25[00000000]              mov rdi, qword [stderr]
  2108 00001C8D 48BE-                           mov rsi, fmt_arg_count_12
  2108 00001C8F [6702000000000000] 
  2109 00001C97 488B5518                        mov rdx, COUNT
  2110 00001C9B B800000000                      mov rax, 0
  2111 00001CA0 E8(00000000)                    call fprintf
  2112 00001CA5 48C7C0FDFFFFFF                  mov rax, -3
  2113 00001CAC E8(00000000)                    call exit
  2114                                  
  2115                                  L_error_arg_count_3:
  2116 00001CB1 488B3C25[00000000]              mov rdi, qword [stderr]
  2117 00001CB9 48BE-                           mov rsi, fmt_arg_count_3
  2117 00001CBB [CE02000000000000] 
  2118 00001CC3 488B5518                        mov rdx, COUNT
  2119 00001CC7 B800000000                      mov rax, 0
  2120 00001CCC E8(00000000)                    call fprintf
  2121 00001CD1 48C7C0FDFFFFFF                  mov rax, -3
  2122 00001CD8 E8(00000000)                    call exit
  2123                                          
  2124                                  L_error_incorrect_type:
  2125 00001CDD 488B3C25[00000000]              mov rdi, qword [stderr]
  2126 00001CE5 48BE-                           mov rsi, fmt_type
  2126 00001CE7 [F702000000000000] 
  2127 00001CEF B800000000                      mov rax, 0
  2128 00001CF4 E8(00000000)                    call fprintf
  2129 00001CF9 48C7C0FCFFFFFF                  mov rax, -4
  2130 00001D00 E8(00000000)                    call exit
  2131                                  
  2132                                  L_error_division_by_zero:
  2133 00001D05 488B3C25[00000000]              mov rdi, qword [stderr]
  2134 00001D0D 48BE-                           mov rsi, fmt_division_by_zero
  2134 00001D0F [3803000000000000] 
  2135 00001D17 B800000000                      mov rax, 0
  2136 00001D1C E8(00000000)                    call fprintf
  2137 00001D21 48C7C0F8FFFFFF                  mov rax, -8
  2138 00001D28 E8(00000000)                    call exit
  2139                                  
  2140                                  section .data
  2141                                  fmt_char:
  2142 00000216 256300                          db `%c\0`
  2143                                  fmt_arg_count_0:
  2144 00000219 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  2144 00000222 74696E67207A65726F-
  2144 0000022B 20617267756D656E74-
  2144 00000234 732E20466F756E6420-
  2144 0000023D 25640A00           
  2145                                  fmt_arg_count_1:
  2146 00000241 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  2146 0000024A 74696E67206F6E6520-
  2146 00000253 617267756D656E742E-
  2146 0000025C 20466F756E64202564-
  2146 00000265 0A00               
  2147                                  fmt_arg_count_12:
  2148 00000267 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  2148 00000270 74696E67206F6E6520-
  2148 00000279 726571756972656420-
  2148 00000282 616E64206F6E65206F-
  2148 0000028B 7074696F6E616C2061-
  2148 00000294 7267756D656E742E20-
  2148 0000029D 466F756E642025640A-
  2148 000002A6 00                 
  2149                                  fmt_arg_count_2:
  2150 000002A7 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  2150 000002B0 74696E672074776F20-
  2150 000002B9 617267756D656E7473-
  2150 000002C2 2E20466F756E642025-
  2150 000002CB 640A00             
  2151                                  fmt_arg_count_3:
  2152 000002CE 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  2152 000002D7 74696E672074687265-
  2152 000002E0 6520617267756D656E-
  2152 000002E9 74732E20466F756E64-
  2152 000002F2 2025640A00         
  2153                                  fmt_type:
  2154 000002F7 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  2154 00000300 696F6E207061737365-
  2154 00000309 6420696E636F727265-
  2154 00000312 637420747970650A00 
  2155                                  fmt_integer_range:
  2156 0000031B 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  2156 00000324 7265637420696E7465-
  2156 0000032D 6765722072616E6765-
  2156 00000336 0A00               
  2157                                  fmt_division_by_zero:
  2158 00000338 212121204469766973-             db `!!! Division by zero\n\0`
  2158 00000341 696F6E206279207A65-
  2158 0000034A 726F0A00           
  2159                                  fmt_scheme_error_part_1:
  2160 0000034E 0A2121212054686520-             db `\n!!! The procedure \0`
  2160 00000357 70726F636564757265-
  2160 00000360 2000               
  2161                                  fmt_scheme_error_part_2:
  2162 00000362 2061736B656420746F-             db ` asked to terminate the program\n`
  2162 0000036B 207465726D696E6174-
  2162 00000374 65207468652070726F-
  2162 0000037D 6772616D0A         
  2163 00000382 202020207769746820-             db `    with the following message:\n\n\0`
  2163 0000038B 74686520666F6C6C6F-
  2163 00000394 77696E67206D657373-
  2163 0000039D 6167653A0A0A00     
  2164                                  fmt_scheme_error_part_3:
  2165 000003A4 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  2165 000003AD 210A0A00           
